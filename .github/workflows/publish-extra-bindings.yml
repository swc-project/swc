name: Publish (extra-bindings)

env:
  DEBUG: napi:*
  APP_NAME: swc
  MACOSX_DEPLOYMENT_TARGET: "10.13"
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_RELEASE_LTO: "fat"
  CI: "1"
  DISABLE_PLUGIN_E2E_TESTS: true
  # https://github.com/actions/setup-node/issues/899#issuecomment-1819151595
  SKIP_YARN_COREPACK_CHECK: 1

permissions:
  contents: write
  id-token: write

on:
  workflow_dispatch:
    inputs:
      package:
        type: choice
        description: Package name to publish
        options:
          - minifier
          # - html
          # - xml

jobs:
  build-node:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              (cd packages/${{ github.event.inputs.package }} && yarn build)
          - host: windows-latest
            build: |
              (cd packages/${{ github.event.inputs.package }} && yarn build)
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: |
              (cd packages/${{ github.event.inputs.package }} && yarn build --target i686-pc-windows-msvc)
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: >-
              set -e &&
              unset CC_x86_64_unknown_linux_gnu && unset CC &&
              (cd packages/${{ github.event.inputs.package }} && yarn build --target x86_64-unknown-linux-gnu)
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            # musl build is slow, let's disable the LTO
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: >-
              set -e &&
              export CARGO_PROFILE_RELEASE_LTO=false &&
              (cd packages/${{ github.event.inputs.package }} && RUSTFLAGS='-C target-feature=+sse2 -C target-feature=-crt-static' yarn build)
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              (cd packages/${{ github.event.inputs.package }} && yarn build --target=aarch64-apple-darwin)
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: >-
              set -e &&
              export JEMALLOC_SYS_WITH_LG_PAGE=16 &&
              rustup target add aarch64-unknown-linux-gnu &&
              export CC_aarch64_unknown_linux_gnu=/usr/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-gcc &&
              (cd packages/${{ github.event.inputs.package }} && yarn build --target aarch64-unknown-linux-gnu)
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y
            build: |
              (cd packages/${{ github.event.inputs.package }} && yarn build --target armv7-unknown-linux-gnueabihf --use-napi-cross)
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            downloadTarget: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: >-
              export JEMALLOC_SYS_WITH_LG_PAGE=16 &&
              rustup toolchain install $(cat ./rust-toolchain) &&
              rustup target add aarch64-unknown-linux-musl &&
              (cd packages/${{ github.event.inputs.package }} && env RUSTFLAGS='-C target-feature=-crt-static' yarn build --target=aarch64-unknown-linux-musl)
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            # Disable `LTO` and increase `codegen-units` to avoid llvm `OOM` on GitHub Actions.
            build: |
              export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=256
              export CARGO_PROFILE_RELEASE_LTO=false
              (cd packages/${{ github.event.inputs.package }} && yarn build --target aarch64-pc-windows-msvc)
    name: "Build: ${{ github.event.inputs.package }} - ${{ matrix.settings.target }}"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4

      - name: Corepack
        run: corepack enable
        shell: bash
        working-directory: "./packages/${{ github.event.inputs.package }}"

      - name: Setup node x64
        uses: actions/setup-node@v4
        with:
          node-version: 20
          architecture: x64

      - name: Output toolchain
        id: toolchain
        shell: bash
        run: echo "version=$(cat ./rust-toolchain)" >> "$GITHUB_OUTPUT"

      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          targets: ${{ matrix.settings.target }}
          toolchain: ${{ steps.toolchain.outputs.version }}

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      # use x64 Node.js to install dependencies because of ia32 version will fail with `Error: Couldn't allocate enough memory`
      - name: Setup install target x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash

      - name: Install dependencies
        working-directory: "./packages"
        run: |
          corepack enable
          yarn
          # curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          echo '/usr/local/cargo/bin' >> $GITHUB_PATH

      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 20
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: -v ${{ env.HOME }}/.cargo/git:/root/.cargo/git -v ${{ env.HOME }}/.cargo/registry:/root/.cargo/registry -v ${{ github.workspace }}:/build -w /build
          run: >-
            corepack enable &&
            npm i -g wasm-pack &&
            ${{ matrix.settings.build }}
      - name: Build
        if: ${{ !matrix.settings.docker }}
        run: ${{ matrix.settings.build }}
        shell: bash

      - run: ls -al ./packages/${{ github.event.inputs.package }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: |
            ${{ github.event.inputs.package }}-${{ matrix.settings.target }}
          path: |
            ./packages/${{ github.event.inputs.package }}/${{ github.event.inputs.package }}*
          if-no-files-found: error

  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build-node
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
          - host: macos-latest
            target: x86_64-apple-darwin
        node:
          - "18"
          - "20"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: enable corepack
        run: corepack enable
        working-directory: "./packages/${{ github.event.inputs.package }}"
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: "yarn"
      - name: Install dependencies
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: yarn
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.inputs.package }}-${{ matrix.settings.target }}
          path: "./packages/${{ github.event.inputs.package }}"
      - name: List packages
        run: ls -R ./packages/${{ github.event.inputs.package }}
        shell: bash
      - name: Build TypeScript
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: yarn build:ts
      - name: Test bindings
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: yarn test
  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build-node
    strategy:
      fail-fast: false
      matrix:
        node:
          - "18"
          - "20"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: enable corepack
        run: corepack enable
        working-directory: "./packages/${{ github.event.inputs.package }}"
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: "yarn"

      - name: Install dependencies
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: yarn
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.inputs.package }}-x86_64-unknown-linux-gnu
          path: "./packages/${{ github.event.inputs.package }}"
      - name: List packages
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: ls -R .
        shell: bash
      - name: Build TypeScript
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: yarn build:ts

      - name: Test bindings
        run: docker run --rm -v $(pwd):/swc -w /swc/packages/${{ github.event.inputs.package }} node:${{ matrix.node }}-slim env DISABLE_PLUGIN_E2E_TESTS=true corepack yarn test
  test-linux-x64-musl-binding:
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build-node
    strategy:
      fail-fast: false
      matrix:
        node:
          - "18"
          - "20"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: enable corepack
        run: corepack enable
        working-directory: "./packages/${{ github.event.inputs.package }}"
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: "yarn"
      - name: Install dependencies
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: |
          yarn config set supportedArchitectures.libc "musl"
          yarn
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.inputs.package }}-x86_64-unknown-linux-musl
          path: "./packages/${{ github.event.inputs.package }}"
      - name: List packages
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: ls -R .
        shell: bash
      - name: Build TypeScript
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: corepack yarn build:ts
      - name: Test bindings
        run: docker run --rm -v $(pwd):/swc -w /swc/packages/${{ github.event.inputs.package }} node:${{ matrix.node }}-alpine env DISABLE_PLUGIN_E2E_TESTS=true corepack yarn test
  test-linux-aarch64-musl-binding:
    name: Test bindings on aarch64-unknown-linux-musl - node@lts
    needs:
      - build-node
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: enable corepack
        run: corepack enable
        working-directory: "./packages/${{ github.event.inputs.package }}"
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.inputs.package }}-aarch64-unknown-linux-musl
          path: "./packages/${{ github.event.inputs.package }}"
      - name: List packages
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: ls -R .
        shell: bash
      - name: Install dependencies
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: |
          yarn config set supportedArchitectures.libc "musl"
          yarn config set supportedArchitectures.arch "arm64"
          yarn
      - name: Build TypeScript
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: corepack yarn build:ts
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:lts-alpine
          options: "--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build"
          run: >-
            set -e &&
            (cd "./packages/${{ github.event.inputs.package }}" && DISABLE_PLUGIN_E2E_TESTS=true corepack yarn test)
  test-linux-arm-gnueabihf-binding:
    name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
    needs:
      - build-node
    strategy:
      fail-fast: false
      matrix:
        node:
          - "18"
          - "20"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: enable corepack
        run: corepack enable
        working-directory: "./packages/${{ github.event.inputs.package }}"
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.inputs.package }}-armv7-unknown-linux-gnueabihf
          path: "./packages/${{ github.event.inputs.package }}"
      - name: List packages
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: ls -R .
        shell: bash
      - name: Install dependencies
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: |
          yarn config set supportedArchitectures.arch "arm"
          yarn
      - name: Build TypeScript
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: corepack yarn build:ts
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-bullseye-slim
          options: "--platform linux/arm/v7 -v ${{ github.workspace }}:/build -w /build"
          run: >-
            set -e &&
            (cd "./packages/${{ github.event.inputs.package }}" && DISABLE_PLUGIN_E2E_TESTS=true corepack yarn test &&
            ls -la)
  publish-node:
    name: npm
    runs-on: ubuntu-latest
    needs:
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
      - test-linux-arm-gnueabihf-binding
      - test-macOS-windows-binding
      - test-linux-aarch64-musl-binding
    steps:
      - uses: actions/checkout@v4

      - name: enable corepack
        run: corepack enable
        working-directory: "./packages/${{ github.event.inputs.package }}"

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: yarn

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./packages/${{ github.event.inputs.package }}/artifacts

      - name: List binaries
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: ls -R artifacts
        shell: bash

      - name: Move binaries
        working-directory: "./packages/${{ github.event.inputs.package }}"
        shell: bash
        run: |
          npm run artifacts

      - name: List npm
        working-directory: "./packages/${{ github.event.inputs.package }}"
        run: ls -R ./scripts/npm
        shell: bash

      - name: Publish
        run: |
          npm config set provenance true
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          (cd ./packages/${{ github.event.inputs.package }} && npm publish --access public)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
