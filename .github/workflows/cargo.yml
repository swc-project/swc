name: Cargo

on: [push, pull_request]

env:
  CARGO_INCREMENTAL: 0
  RUST_LOG: "debug"
  DIFF: 0
  # https://github.com/swc-project/swc/pull/3742
  RUST_MIN_STACK: 4194304

jobs:
  check-license:
    name: Check license
    runs-on: ubuntu-latest
    if: >-
      ${{ !contains(github.event.head_commit.message, 'chore: ') }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - name: Install cargo-deny
        uses: baptiste0928/cargo-install@v1.1.0
        with:
          crate: cargo-deny
          version: "0.11.3"

      - name: Check licenses
        run: |
          cargo deny check

  check:
    name: Check
    runs-on: ${{ matrix.os }}
    if: >-
      ${{ !contains(github.event.head_commit.message, 'chore: ') }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-10.15
          - windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      # We explicitly do this to cache properly.
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "yarn"

      - name: Install node dependencies
        shell: bash
        run: |
          yarn

      # Ensure that all components are compilable.
      - name: Run cargo check for all targets
        run: cargo check --color always --all --all-targets

  build-test-binaries:
    name: Build test files
    strategy:
      # We use this because of cache
      fail-fast: false
      matrix:
        host:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    runs-on: ${{ matrix.host }}
    steps:
      # We need submodules as tests are generated from them.
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Print free disk space (windows)
        if: runner.os == 'Windows'
        run: |
          fsutil volume diskfree c:

      - uses: actions-rs/toolchain@v1
      - uses: Swatinem/rust-cache@v1
        with:
          sharedKey: cargo-test-${{ runner.os }}
          cache-on-failure: true

      - name: Cache target dir
        uses: actions/cache@v3
        with:
          path: target/bins
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.toml') }}
            ${{ runner.os }}-cargo-test

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - name: Create target directory
        shell: bash
        run: mkdir -p target/bins || true

      - name: Gather Cargo metadata
        shell: bash
        run: cargo metadata --format-version=1 --all-features > target/bins/cargo-metadata.json

      - name: Build tests and save binaries metadata
        continue-on-error: true
        shell: bash
        run: scripts/github/build-binaries.sh

      - name: Print free disk space (windows)
        if: runner.os == 'Windows'
        run: |
          fsutil volume diskfree c:

      - name: Make cache efficient
        shell: bash
        run: |
          cargo install cargo-cache --no-default-features --features ci-autoclean cargo-cache
          cargo-cache # no further arguments required

      - name: Archive target directory
        shell: bash
        run: tar -czf test-bins.tar.gz target/bins

      - name: Upload archive to workflow
        uses: actions/upload-artifact@v3
        with:
          name: test-bins-${{ runner.os }}
          path: test-bins.tar.gz

  run-tests:
    name: Run cargo tests
    strategy:
      fail-fast: false
      matrix:
        host:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        partition: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

    runs-on: ${{ matrix.host }}
    needs: build-test-binaries

    steps:
      - name: Handle line endings
        shell: bash
        if: runner.os == 'Windows'
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf

      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "yarn"

      # We need this because plugin test builds a rust library
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: wasm32-wasi

      # Required for testing the bundler
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Install node dependencies
        shell: bash
        run: |
          yarn
          # I don't want to think deeply about this
          yarn global add jest@27 mocha || \
          yarn global add jest@27 mocha || \
          yarn global add jest@27 mocha || \
          yarn global add jest@27 mocha || \
          yarn global add jest@27 mocha || \
          yarn global add jest@27 mocha || \
          yarn global add jest@27 mocha || \
          yarn global add jest@27 mocha || true

      - name: Configure path (windows)
        shell: bash
        if: runner.os == 'Windows'
        run: |
          echo $(yarn global bin) >> $GITHUB_PATH

      - name: Verify dependencies
        shell: bash
        run: |
          jest -v && mocha --version

      - name: Download archive
        uses: actions/download-artifact@v3
        with:
          name: test-bins--${{ runner.os }}

      # This example extracts artifacts to "build-artifacts/target" to demonstrate target-dir remapping.
      - name: Extract artifacts
        run: tar -xf test-bins.tar.gz --one-top-level=test-bins

      - name: Run tests
        run: |
          ~/.cargo/bin/cargo-nextest nextest run --cargo-metadata test-bins/target/cargo-metadata.json \
            --binaries-metadata test-bins/target/binaries-metadata.json \
            --target-dir-remap test-bins/target \
            --partition count:${{ matrix.partition }}/15

  test:
    name: Test - ${{ matrix.settings.crate }} - ${{ matrix.settings.os }}
    runs-on: ${{ matrix.settings.os }}
    if: >-
      ${{ !contains(github.event.head_commit.message, 'chore: ') }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          # Use scripts/github/create-matrix.sh to create this.
          - crate: swc
            os: ubuntu-latest
            check: |
              cargo hack check --feature-powerset --no-dev-deps --exclude-features debug --exclude-features plugin
          - crate: swc
            os: windows-latest
          - crate: swc_bundler
            os: ubuntu-latest
            check: |
              cargo hack check --feature-powerset --no-dev-deps
          - crate: swc_cli
            os: ubuntu-latest
            check: |
              cargo check
              cargo check --features plugin
          - crate: swc_common
            os: ubuntu-latest
            check: |
              cargo hack check --feature-powerset --no-dev-deps
          - crate: swc_ecma_ast
            os: ubuntu-latest
            check: |
              cargo hack check --feature-powerset --no-dev-deps
          - crate: swc_ecma_loader
            os: ubuntu-latest
            check: |
              cargo hack check --feature-powerset --no-dev-deps
          - crate: swc_ecma_transforms
            os: ubuntu-latest
            check: |
              cargo hack check --feature-powerset --no-dev-deps
          - crate: swc_ecma_transforms_base
            os: ubuntu-latest
            check: |
              cargo hack check --feature-powerset --no-dev-deps
          - crate: swc_ecma_transforms_compat
            os: ubuntu-latest
            check: |
              cargo hack check --feature-powerset --no-dev-deps
          - crate: swc_ecma_transforms_optimization
            os: ubuntu-latest
            check: |
              cargo hack check --feature-powerset --no-dev-deps
          - crate: swc_ecma_utils
            os: ubuntu-latest
            check: |
              cargo hack check --feature-powerset --no-dev-deps
          - crate: swc_node_bundler
            os: ubuntu-latest
            check: |
              cargo check
              cargo check --no-default-features --features swc_v2

    steps:
      - name: Run cargo test
        run: |
          jest -v && mocha --version
          cargo test --color always -p ${{ matrix.settings.crate }}

      - name: Run cargo test (all features)
        if: matrix.settings.crate == 'swc_ecma_parser' || matrix.settings.crate == 'swc_ecma_loader'
        run: |
          cargo test --color always -p ${{ matrix.settings.crate }} --all-features

      - name: Run cargo test (swc_ecma_transforms)
        if: matrix.settings.crate == 'swc_ecma_transforms'
        run: |
          cargo test --color always -p swc_ecma_transforms --all-features

      - name: Install cargo-hack
        uses: baptiste0928/cargo-install@v1.1.0
        if: matrix.settings.os == 'ubuntu-latest' && matrix.settings.check
        with:
          crate: cargo-hack
          version: "0.5.7"

      - name: Check compilation
        if: matrix.settings.check
        working-directory: "crates/${{ matrix.settings.crate }}"
        run: "${{ matrix.settings.check }}"
