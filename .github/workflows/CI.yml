name: CI

on:
  - push
  - pull_request

env:
  CI: 1
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: "always"
  DIFF: 0
  # For faster CI
  RUST_LOG: "off"
  # https://github.com/swc-project/swc/pull/3742
  RUST_MIN_STACK: 4194304

jobs:
  cargo-fmt:
    name: Cargo fmt
    runs-on: ubuntu-latest
    env:
      RUST_LOG: "0"
    steps:
      - uses: actions/checkout@v3

      # We explicitly do this to cache properly.
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt

      - run: cargo fmt --all -- --check

  cargo-clippy:
    name: Cargo clippy
    if: >-
      ${{ !contains(github.event.head_commit.message, 'chore: ') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: clippy

      - run: cargo clippy --all

  cargo-crev:
    name: Cargo crev
    if: >-
      ${{ !contains(github.event.head_commit.message, 'chore: ') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - name: Remove unrelated
        run: |
          rm -rf packages
          rm -rf tests
          ls -al

      - name: Install cargo-crev
        uses: baptiste0928/cargo-install@v1.1.0
        with:
          crate: cargo-crev
          version: "0.23.1"

      - name: Configure cargo-crev
        run: |
          git config --global user.name 'SWC bot'
          git config --global user.email 'bot@swc.rs'

          cargo crev trust --level high https://github.com/kdy1/crev-proofs
          cargo crev repo fetch all

      - name: Check dependencies
        run: |
          ./scripts/crev/verify.sh

  cargo-deny:
    name: Check license of dependencies
    runs-on: ubuntu-latest
    if: >-
      ${{ !contains(github.event.head_commit.message, 'chore: ') }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - name: Install cargo-deny
        uses: baptiste0928/cargo-install@v1.1.0
        with:
          crate: cargo-deny
          version: "0.11.3"

      - name: Check licenses
        run: |
          cargo deny check

  cargo-check:
    name: Cargo check
    runs-on: ${{ matrix.os }}
    if: >-
      ${{ !contains(github.event.head_commit.message, 'chore: ') }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      # We explicitly do this to cache properly.
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          # MSRV is current stable for ES crates and nightly for other languages
          # toolchain: stable
          # override: true

      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - name: Install node dependencies
        shell: bash
        run: |
          yarn

      # Ensure that all components are compilable.
      - name: Run cargo check for all targets
        run: cargo check --all --all-targets

  test-wasm:
    name: Test wasm
    if: >-
      ${{ !contains(github.event.head_commit.message, 'chore: ') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # We explicitly do this to cache properly.
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "yarn"

      - name: Install node dependencies
        shell: bash
        run: |
          yarn

      - name: Build
        run: |
          (cd bindings/binding_core_wasm && yarn)
          (cd bindings/binding_core_wasm && ./scripts/build.sh --features plugin)

      - name: Test
        run: |
          (cd bindings/binding_core_wasm && ./scripts/test.sh)
