extern crate string_cache_codegen;

use std::env;
use std::path::Path;

fn main() {
    gen(
        "js_word",
        "JsWord",
        &[
            // keywords
            "await",
            "break",
            "case",
            "catch",
            "class",
            "const",
            "continue",
            "debugger",
            "default",
            "delete",
            "do",
            "else",
            "export",
            "extends",
            "finally",
            "for",
            "function",
            "if",
            "import",
            "in",
            "instanceof",
            "new",
            "return",
            "super",
            "switch",
            "this",
            "throw",
            "try",
            "typeof",
            "var",
            "void",
            "while",
            "with",
            "yield",
            // reserved word on strict mode.
            "let",
            "static",
            "null",
            "true",
            "false",
            // not keywords, just for pattern matching
            "from",
            "static",
            "of",
            "set",
            "get",
            "target",
            "await",
            "async",
            "as",
            // future reserved words?
            "enum",
            "implements",
            "interface",
            "package",
            "private",
            "protected",
            "public",
            // for transforms
            "length",
            "Infinity",
            "NaN",
            "undefined",
            "eval",
            "isFinite",
            "isNaN",
            "parseFloat",
            "parseInt",
            "decodeURI",
            "decodeURIComponent",
            "encodeURI",
            "encodeURIComponent",
            // 18.3
            "Array",
            "ArrayBuffer",
            "Boolean",
            "DataView",
            "Date",
            "Error",
            "EvalError",
            "Float32Array",
            "Float64Array",
            "Function",
            "Int8Array",
            "Int16Array",
            "Int32Array",
            "Map",
            "Number",
            "Object",
            "Proxy",
            "Promise",
            "RangeError",
            "ReferenceError",
            "RegExp",
            "Set",
            "SharedArrayBuffer",
            "String",
            "Symbol",
            "SyntaxError",
            "TypeError",
            "Uint8Array",
            "Uint8ClampedArray",
            "Uint16Array",
            "Uint32Array",
            "URIError",
            "WeakMap",
            "WeakSet",
            // 20.2
            "Math",
            "E",
            "LN10",
            "LN2",
            "LOG10E",
            "LOG2E",
            "PI",
            "SQRT1_2",
            "SQRT2",
            "abs",
            "acos",
            "acosh",
            "asin",
            "asinh",
            "atan",
            "atanh",
            "atan2",
            "cbrt",
            "ceil",
            "clz32",
            "cos",
            "cosh",
            "exp",
            "expm1",
            "floor",
            "fround",
            "hypot",
            "imul",
            "log",
            "log1p",
            "log10",
            "log2",
            "max",
            "min",
            "pow",
            "random",
            "round",
            "sign",
            "sin",
            "sinh",
            "sqrt",
            "tan",
            "tanh",
            "trunc",
            // 24.5
            "JSON",
            "parse",
            "stringify",
        ],
    );
}

fn gen(mac_name: &str, type_name: &str, atoms: &[&str]) {
    string_cache_codegen::AtomType::new(type_name, &format!("{}!", mac_name))
        .atoms(atoms)
        .write_to_file(&Path::new(&env::var("OUT_DIR").unwrap()).join(format!("{}.rs", mac_name)))
        .unwrap();
}
