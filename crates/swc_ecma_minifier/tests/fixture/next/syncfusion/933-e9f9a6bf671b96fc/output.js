(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([
    [
        933
    ],
    {
        /***/ 1807: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                tk: function() {
                    return /* reexport */ Ajax;
                },
                fw: function() {
                    return /* reexport */ Animation;
                },
                XY: function() {
                    return /* reexport */ Base;
                },
                AR: function() {
                    return /* reexport */ Browser;
                },
                rt: function() {
                    return /* reexport */ ChildProperty;
                },
                FE: function() {
                    return /* reexport */ Collection;
                },
                Zz: function() {
                    return /* reexport */ Complex;
                },
                wA: function() {
                    return /* reexport */ Component;
                },
                _l: function() {
                    return /* reexport */ Draggable;
                },
                ju: function() {
                    return /* reexport */ notify_property_change_Event;
                },
                bi: function() {
                    return /* reexport */ EventHandler;
                },
                eC: function() {
                    return /* reexport */ Internationalization;
                },
                nv: function() {
                    return /* reexport */ KeyboardEvents;
                },
                E7: function() {
                    return /* reexport */ L10n;
                },
                Zl: function() {
                    return /* reexport */ NotifyPropertyChanges;
                },
                Qj: function() {
                    return /* reexport */ Observer;
                },
                Z9: function() {
                    return /* reexport */ Property;
                },
                pJ: function() {
                    return /* reexport */ SanitizeHtmlHelper;
                },
                Xh: function() {
                    return /* reexport */ Touch;
                },
                cn: function() {
                    return /* reexport */ addClass;
                },
                R3: function() {
                    return /* reexport */ append;
                },
                Y4: function() {
                    return /* reexport */ attributes;
                },
                s1: function() {
                    return /* reexport */ classList;
                },
                oq: function() {
                    return /* reexport */ closest;
                },
                MY: function() {
                    return /* reexport */ template_engine_compile;
                },
                az: function() {
                    return /* reexport */ createElement;
                },
                Ds: function() {
                    return /* reexport */ debounce;
                },
                ex: function() {
                    return /* reexport */ deleteObject;
                },
                og: function() {
                    return /* reexport */ detach;
                },
                l7: function() {
                    return /* reexport */ util_extend;
                },
                Ac: function() {
                    return /* reexport */ formatUnit;
                },
                Xr: function() {
                    return /* reexport */ getComponent;
                },
                I$: function() {
                    return /* reexport */ getEnumValue;
                },
                s8: function() {
                    return /* reexport */ getInstance;
                },
                NE: function() {
                    return /* reexport */ getNumericObject;
                },
                aR: function() {
                    return /* reexport */ getTemplateEngine;
                },
                QI: function() {
                    return /* reexport */ getUniqueID;
                },
                NA: function() {
                    return /* reexport */ util_getValue;
                },
                xr: function() {
                    return /* reexport */ util_isBlazor;
                },
                le: function() {
                    return /* reexport */ util_isNullOrUndefined;
                },
                Kn: function() {
                    return /* reexport */ util_isObject;
                },
                re: function() {
                    return /* reexport */ isRippleEnabled;
                },
                pn: function() {
                    return /* reexport */ isVisible;
                },
                TS: function() {
                    return /* reexport */ util_merge;
                },
                Ce: function() {
                    return /* reexport */ prepend;
                },
                S0: function() {
                    return /* reexport */ print;
                },
                Od: function() {
                    return /* reexport */ remove;
                },
                IV: function() {
                    return /* reexport */ removeClass;
                },
                qx: function() {
                    return /* reexport */ rippleEffect;
                },
                Ys: function() {
                    return /* reexport */ dom_select;
                },
                td: function() {
                    return /* reexport */ selectAll;
                },
                V7: function() {
                    return /* reexport */ setStyleAttribute;
                },
                Wr: function() {
                    return /* reexport */ setTemplateEngine;
                },
                sO: function() {
                    return /* reexport */ setValue;
                }
            });
            var HijriParser, dateCorrection, extendStatics, extendStatics1, extendStatics2, extendStatics3, extendStatics4, extendStatics5, HijriParser1, intl_base_IntlBase, lastPageID, instances = 'ej2_instances', uid = 0;
            /**
 * Create Instance from constructor function with desired parameters.
 *
 * @param {Function} classFunction - Class function to which need to create instance
 * @param {any[]} params - Parameters need to passed while creating instance
 * @returns {any} ?
 * @private
 */ // eslint-disable-next-line
            function createInstance(classFunction, params) {
                return params.unshift(void 0), new (Function.prototype.bind.apply(classFunction, params));
            }
            /**
 * To get nameSpace value from the desired object.
 *
 * @param {string} nameSpace - String value to the get the inner object
 * @param {any} obj - Object to get the inner object value.
 * @returns {any} ?
 * @private
 */ // eslint-disable-next-line
            function util_getValue(nameSpace, obj) {
                for(var value = obj, splits = nameSpace.replace(/\[/g, '.').replace(/\]/g, '').split('.'), i = 0; i < splits.length && !util_isUndefined(value); i++)value = value[splits[i]];
                return value;
            }
            /**
 * To set value for the nameSpace in desired object.
 *
 * @param {string} nameSpace - String value to the get the inner object
 * @param {any} value - Value that you need to set.
 * @param {any} obj - Object to get the inner object value.
 * @returns {any} ?
 * @private
 */ // eslint-disable-next-line
            function setValue(nameSpace, value, obj) {
                var i, key, keys = nameSpace.replace(/\[/g, '.').replace(/\]/g, '').split('.'), start = obj || {}, fromObj = start, length = keys.length;
                for(i = 0; i < length; i++)key = keys[i], i + 1 === length ? fromObj[key] = void 0 === value ? {} : value : util_isNullOrUndefined(fromObj[key]) && (fromObj[key] = {}), fromObj = fromObj[key];
                return start;
            }
            /**
 * Delete an item from Object
 *
 * @param {any} obj - Object in which we need to delete an item.
 * @param {string} key - String value to the get the inner object
 * @returns {void} ?
 * @private
 */ // eslint-disable-next-line
            function deleteObject(obj, key) {
                delete obj[key];
            }
            /**
 *@private
 */ var containerObject = "undefined" != typeof window ? window : {};
            /**
 * Check weather the given argument is only object.
 *
 * @param {any} obj - Object which is need to check.
 * @returns {boolean} ?
 * @private
 */ // eslint-disable-next-line
            function util_isObject(obj) {
                return !util_isNullOrUndefined(obj) && obj.constructor === ({}).constructor;
            }
            /**
 * To get enum value by giving the string.
 *
 * @param {any} enumObject - Enum object.
 * @param {string} enumValue - Enum value to be searched
 * @returns {any} ?
 * @private
 */ // eslint-disable-next-line
            function getEnumValue(enumObject, enumValue) {
                // eslint-disable-next-line
                return enumObject[enumValue];
            }
            /**
 * Merge the source object into destination object.
 *
 * @param {any} source - source object which is going to merge with destination object
 * @param {any} destination - object need to be merged
 * @returns {void} ?
 * @private
 */ function util_merge(source, destination) {
                if (!util_isNullOrUndefined(destination)) for(var keys = Object.keys(destination), deepmerge = 'deepMerge', _i = 0; _i < keys.length; _i++){
                    var key = keys[_i];
                    !util_isNullOrUndefined(source[deepmerge]) && -1 !== source[deepmerge].indexOf(key) && (util_isObject(destination[key]) || Array.isArray(destination[key])) ? util_extend(source[key], source[key], destination[key], !0) : source[key] = destination[key];
                }
            }
            /**
 * Extend the two object with newer one.
 *
 * @param {any} copied - Resultant object after merged
 * @param {Object} first - First object need to merge
 * @param {Object} second - Second object need to merge
 * @param {boolean} deep ?
 * @returns {Object} ?
 * @private
 */ function util_extend(copied, first, second, deep) {
                var result = copied && 'object' == typeof copied ? copied : {}, length = arguments.length;
                deep && (length -= 1);
                for(var arguments_1 = arguments, i = 1; i < length; i++)!function(i) {
                    // eslint-disable-next-line
                    if (arguments_1[i]) {
                        // eslint-disable-next-line
                        var obj1 = arguments_1[i];
                        Object.keys(obj1).forEach(function(key) {
                            var clone, src = result[key], copy = obj1[key];
                            Array.isArray(copy) && Array.isArray(src) && (copy.length, src.length), deep && (util_isObject(copy) || Array.isArray(copy)) ? util_isObject(copy) ? Array.isArray(clone = src || {}) && clone.hasOwnProperty('isComplexArray') ? util_extend(clone, {}, copy, deep) : result[key] = util_extend(clone, {}, copy, deep) : (/* istanbul ignore next */ clone = src || [], result[key] = util_extend([], clone, copy, clone && clone.length || copy && copy.length)) : result[key] = copy;
                        });
                    }
                }(i);
                return result;
            }
            /**
 * To check whether the object is null or undefined.
 *
 * @param {Object} value - To check the object is null or undefined
 * @returns {boolean} ?
 * @private
 */ function util_isNullOrUndefined(value) {
                return null == value;
            }
            /**
 * To check whether the object is undefined.
 *
 * @param {Object} value - To check the object is undefined
 * @returns {boolean} ?
 * @private
 */ function util_isUndefined(value) {
                return void 0 === value;
            }
            /**
 * To return the generated unique name
 *
 * @param {string} definedName - To concatenate the unique id to provided name
 * @returns {string} ?
 * @private
 */ function getUniqueID(definedName) {
                return definedName + '_' + uid++;
            }
            /**
 * It limits the rate at which a function can fire. The function will fire only once every provided second instead of as quickly.
 *
 * @param {Function} eventFunction - Specifies the function to run when the event occurs
 * @param {number} delay - A number that specifies the milliseconds for function delay call option
 * @returns {Function} ?
 * @private
 */ function debounce(eventFunction, delay) {
                // eslint-disable-next-line
                var out;
                return function() {
                    var _this = this, args = arguments;
                    clearTimeout(out), out = setTimeout(function() {
                        return out = null, eventFunction.apply(_this, args);
                    }, delay);
                };
            }
            /**
 * To check whether the  child element is descendant to parent element or parent and child are same element.
 *
 * @param {Element} child - Specifies the child element to compare with parent.
 * @param {Element} parent - Specifies the parent element.
 * @returns {boolean} ?
 * @private
 */ function compareElementParent(child, parent) {
                return child === parent || child !== document && !!child && compareElementParent(child.parentNode, parent);
            }
            /**
 * To throw custom error message.
 *
 * @param {string} message - Specifies the error message to be thrown.
 * @returns {void} ?
 * @private
 */ function throwError(message) {
                try {
                    throw Error(message);
                } catch (e) {
                    // eslint-disable-next-line
                    throw e.message + '\n' + e.stack;
                }
            }
            /**
 * This function is used to print given element
 *
 * @param {Element} element - Specifies the print content element.
 * @param {Window} printWindow - Specifies the print window.
 * @returns {Window} ?
 * @private
 */ function print(element, printWindow) {
                var div = document.createElement('div'), links = [].slice.call(document.getElementsByTagName('head')[0].querySelectorAll('base, link, style')), blinks = [].slice.call(document.getElementsByTagName('body')[0].querySelectorAll('link, style'));
                if (blinks.length) for(var l = 0, len = blinks.length; l < len; l++)links.push(blinks[l]);
                var reference = '';
                util_isNullOrUndefined(printWindow) && (printWindow = window.open('', 'print', 'height=452,width=1024,tabbar=no')), div.appendChild(element.cloneNode(!0));
                for(var i = 0, len = links.length; i < len; i++)reference += links[i].outerHTML;
                printWindow.document.write('<!DOCTYPE html> <html><head>' + reference + '</head><body>' + div.innerHTML + "<script> (function() { window.ready = true; })(); </script></body></html>"), printWindow.document.close(), printWindow.focus();
                // eslint-disable-next-line
                var interval = setInterval(function() {
                    printWindow.ready && (printWindow.print(), printWindow.close(), clearInterval(interval));
                }, 500);
                return printWindow;
            }
            /**
 * Function to normalize the units applied to the element.
 *
 * @param {number|string} value ?
 * @returns {string} result
 * @private
 */ function formatUnit(value) {
                var result = value + '';
                return result.match(/auto|cm|mm|in|px|pt|pc|%|em|ex|ch|rem|vw|vh|vmin|vmax/) ? result : result + 'px';
            }
            /**
 * Function to check whether the platform is blazor or not.
 *
 * @returns {boolean} result
 * @private
 */ function util_isBlazor() {
                return !1;
            }
            /**
 * Function to fetch the Instances of a HTML element for the given component.
 *
 * @param {string | HTMLElement} element ?
 * @param {any} component ?
 * @returns {Object} ?
 * @private
 */ // eslint-disable-next-line
            function getInstance(element, component) {
                // eslint-disable-next-line
                var elem = 'string' == typeof element ? document.querySelector(element) : element;
                if (elem[instances]) for(var _i = 0, _a = elem[instances]; _i < _a.length; _i++){
                    var inst = _a[_i];
                    if (inst instanceof component) return inst;
                }
                return null;
            }
            /**
 * Parser
 */ var defaultNumberingSystem = {
                latn: {
                    _digits: '0123456789',
                    _type: 'numeric'
                }
            }, defaultNumberSymbols = {
                decimal: '.',
                group: ',',
                percentSign: '%',
                plusSign: '+',
                minusSign: '-',
                infinity: '∞',
                nan: 'NaN',
                exponential: 'E'
            }, latnNumberSystem = [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ], ParserBase = /** @class */ function() {
                function ParserBase() {}
                return(/**
     * Returns the cldr object for the culture specifies
     *
     * @param {Object} obj - Specifies the object from which culture object to be acquired.
     * @param {string} cName - Specifies the culture name.
     * @returns {Object} ?
     */ ParserBase.getMainObject = function(obj, cName) {
                    return util_getValue('main.' + cName, obj);
                }, /**
     * Returns the numbering system object from given cldr data.
     *
     * @param {Object} obj - Specifies the object from which number system is acquired.
     * @returns {Object} ?
     */ ParserBase.getNumberingSystem = function(obj) {
                    return util_getValue('supplemental.numberingSystems', obj) || this.numberingSystems;
                }, /**
     * Returns the reverse of given object keys or keys specified.
     *
     * @param {Object} prop - Specifies the object to be reversed.
     * @param {number[]} keys - Optional parameter specifies the custom keyList for reversal.
     * @returns {Object} ?
     */ ParserBase.reverseObject = function(prop, keys) {
                    for(var propKeys = keys || Object.keys(prop), res = {}, _i = 0; _i < propKeys.length; _i++){
                        var key = propKeys[_i];
                        // eslint-disable-next-line
                        res.hasOwnProperty(prop[key]) || // eslint-disable-next-line
                        (res[prop[key]] = key);
                    }
                    return res;
                }, /**
     * Returns the symbol regex by skipping the escape sequence.
     *
     * @param {string[]} props - Specifies the array values to be skipped.
     * @returns {RegExp} ?
     */ ParserBase.getSymbolRegex = function(props) {
                    return RegExp(props.map(function(str) {
                        return str.replace(/([.*+?^=!:${}()|[\]/\\])/g, '\\$1');
                    }).join('|'), 'g');
                }, /**
     *
     * @param {Object} prop ?
     * @returns {Object} ?
     */ ParserBase.getSymbolMatch = function(prop) {
                    for(var matchKeys = Object.keys(defaultNumberSymbols), ret = {}, _i = 0; _i < matchKeys.length; _i++){
                        var key = matchKeys[_i];
                        // eslint-disable-next-line
                        ret[prop[key]] = defaultNumberSymbols[key];
                    }
                    return ret;
                }, /**
     * Returns regex string for provided value
     *
     * @param {string} val ?
     * @returns {string} ?
     */ ParserBase.constructRegex = function(val) {
                    for(var len = val.length, ret = '', i = 0; i < len; i++)i !== len - 1 ? ret += val[i] + '|' : ret += val[i];
                    return ret;
                }, /**
     * Returns the replaced value of matching regex and obj mapper.
     *
     * @param {string} value - Specifies the  values to be replaced.
     * @param {RegExp} regex - Specifies the  regex to search.
     * @param {Object} obj - Specifies the  object matcher to be replace value parts.
     * @returns {string} ?
     */ ParserBase.convertValueParts = function(value, regex, obj) {
                    return value.replace(regex, function(str) {
                        // eslint-disable-next-line
                        return obj[str];
                    });
                }, /**
     * Returns default numbering system object for formatting from cldr data
     *
     * @param {Object} obj ?
     * @returns {NumericObject} ?
     */ ParserBase.getDefaultNumberingSystem = function(obj) {
                    var ret = {};
                    return ret.obj = util_getValue('numbers', obj), ret.nSystem = util_getValue('defaultNumberingSystem', ret.obj), ret;
                }, /**
     * Returns the replaced value of matching regex and obj mapper.
     *
     * @param {Object} curObj ?
     * @param {Object} numberSystem ?
     * @param {boolean} needSymbols ?
     * @param {boolean} blazorMode ?
     * @returns {Object} ?
     */ ParserBase.getCurrentNumericOptions = function(curObj, numberSystem, needSymbols, blazorMode) {
                    var ret = {}, cur = this.getDefaultNumberingSystem(curObj);
                    if (!util_isUndefined(cur.nSystem) || blazorMode) {
                        var digits = blazorMode ? util_getValue('obj.mapperDigits', cur) : util_getValue(cur.nSystem + '._digits', numberSystem);
                        !util_isUndefined(digits) && (ret.numericPair = this.reverseObject(digits, latnNumberSystem), ret.numberParseRegex = RegExp(this.constructRegex(digits), 'g'), ret.numericRegex = '[' + digits[0] + '-' + digits[9] + ']', needSymbols && (ret.numericRegex = digits[0] + '-' + digits[9], ret.symbolNumberSystem = util_getValue(blazorMode ? 'numberSymbols' : 'symbols-numberSystem-' + cur.nSystem, cur.obj), ret.symbolMatch = this.getSymbolMatch(ret.symbolNumberSystem), ret.numberSystem = cur.nSystem));
                    }
                    return ret;
                }, /**
     * Returns number mapper object for the provided cldr data
     *
     * @param {Object} curObj ?
     * @param {Object} numberSystem ?
     * @param {boolean} isNumber ?
     * @returns {NumberMapper} ?
     */ // eslint-disable-next-line
                ParserBase.getNumberMapper = function(curObj, numberSystem, isNumber) {
                    var ret = {
                        mapper: {}
                    }, cur = this.getDefaultNumberingSystem(curObj);
                    if (!util_isUndefined(cur.nSystem)) {
                        ret.numberSystem = cur.nSystem, ret.numberSymbols = util_getValue('symbols-numberSystem-' + cur.nSystem, cur.obj), ret.timeSeparator = util_getValue('timeSeparator', ret.numberSymbols);
                        var digits = util_getValue(cur.nSystem + '._digits', numberSystem);
                        if (!util_isUndefined(digits)) for(var _i = 0; _i < latnNumberSystem.length; _i++){
                            var i = latnNumberSystem[_i];
                            // eslint-disable-next-line
                            ret.mapper[i] = digits[i];
                        }
                    }
                    return ret;
                }, ParserBase.nPair = 'numericPair', ParserBase.nRegex = 'numericRegex', ParserBase.numberingSystems = defaultNumberingSystem, ParserBase);
            }(), blazorCurrencyData = {
                DJF: 'Fdj',
                ERN: 'Nfk',
                ETB: 'Br',
                NAD: '$',
                ZAR: 'R',
                XAF: 'FCFA',
                GHS: 'GH₵',
                XDR: 'XDR',
                AED: 'د.إ.‏',
                BHD: 'د.ب.‏',
                DZD: 'د.ج.‏',
                EGP: 'ج.م.‏',
                ILS: '₪',
                IQD: 'د.ع.‏',
                JOD: 'د.ا.‏',
                KMF: 'CF',
                KWD: 'د.ك.‏',
                LBP: 'ل.ل.‏',
                LYD: 'د.ل.‏',
                MAD: 'د.م.‏',
                MRU: 'أ.م.',
                OMR: 'ر.ع.‏',
                QAR: 'ر.ق.‏',
                SAR: 'ر.س.‏',
                SDG: 'ج.س.',
                SOS: 'S',
                SSP: '£',
                SYP: 'ل.س.‏',
                TND: 'د.ت.‏',
                YER: 'ر.ي.‏',
                CLP: '$',
                INR: '₹',
                TZS: 'TSh',
                EUR: '€',
                AZN: '₼',
                RUB: '₽',
                BYN: 'Br',
                ZMW: 'K',
                BGN: 'лв.',
                NGN: '₦',
                XOF: 'CFA',
                BDT: '৳',
                CNY: '¥',
                BAM: 'КМ',
                UGX: 'USh',
                USD: '$',
                CZK: 'Kč',
                GBP: '£',
                DKK: 'kr.',
                KES: 'Ksh',
                CHF: 'CHF',
                MVR: 'ރ.',
                BTN: 'Nu.',
                XCD: 'EC$',
                AUD: '$',
                BBD: '$',
                BIF: 'FBu',
                BMD: '$',
                BSD: '$',
                BWP: 'P',
                BZD: '$',
                CAD: '$',
                NZD: '$',
                FJD: '$',
                FKP: '£',
                GIP: '£',
                GMD: 'D',
                GYD: '$',
                HKD: '$',
                IDR: 'Rp',
                JMD: '$',
                KYD: '$',
                LRD: '$',
                MGA: 'Ar',
                MOP: 'MOP$',
                MUR: 'Rs',
                MWK: 'MK',
                MYR: 'RM',
                PGK: 'K',
                PHP: '₱',
                PKR: 'Rs',
                RWF: 'RF',
                SBD: '$',
                SCR: 'SR',
                SEK: 'kr',
                SGD: '$',
                SHP: '£',
                SLL: 'Le',
                ANG: 'NAf.',
                SZL: 'E',
                TOP: 'T$',
                TTD: '$',
                VUV: 'VT',
                WST: 'WS$',
                ARS: '$',
                BOB: 'Bs',
                BRL: 'R$',
                COP: '$',
                CRC: '₡',
                CUP: '$',
                DOP: '$',
                GTQ: 'Q',
                HNL: 'L',
                MXN: '$',
                NIO: 'C$',
                PAB: 'B/.',
                PEN: 'S/',
                PYG: '₲',
                UYU: '$',
                VES: 'Bs.S',
                IRR: 'ريال',
                GNF: 'FG',
                CDF: 'FC',
                HTG: 'G',
                XPF: 'FCFP',
                HRK: 'kn',
                HUF: 'Ft',
                AMD: '֏',
                ISK: 'kr',
                JPY: '¥',
                GEL: '₾',
                CVE: '​',
                KZT: '₸',
                KHR: '៛',
                KPW: '₩',
                KRW: '₩',
                KGS: 'сом',
                AOA: 'Kz',
                LAK: '₭',
                MZN: 'MTn',
                MKD: 'ден',
                MNT: '₮',
                BND: '$',
                MMK: 'K',
                NOK: 'kr',
                NPR: 'रु',
                AWG: 'Afl.',
                SRD: '$',
                PLN: 'zł',
                AFN: '؋',
                STN: 'Db',
                MDL: 'L',
                RON: 'lei',
                UAH: '₴',
                LKR: 'රු.',
                ALL: 'Lekë',
                RSD: 'дин.',
                TJS: 'смн',
                THB: '฿',
                TMT: 'm.',
                TRY: '₺',
                UZS: 'сўм',
                VND: '₫',
                TWD: 'NT$'
            };
            dateCorrection = [
                28607,
                28636,
                28665,
                28695,
                28724,
                28754,
                28783,
                28813,
                28843,
                28872,
                28901,
                28931,
                28960,
                28990,
                29019,
                29049,
                29078,
                29108,
                29137,
                29167,
                29196,
                29226,
                29255,
                29285,
                29315,
                29345,
                29375,
                29404,
                29434,
                29463,
                29492,
                29522,
                29551,
                29580,
                29610,
                29640,
                29669,
                29699,
                29729,
                29759,
                29788,
                29818,
                29847,
                29876,
                29906,
                29935,
                29964,
                29994,
                30023,
                30053,
                30082,
                30112,
                30141,
                30171,
                30200,
                30230,
                30259,
                30289,
                30318,
                30348,
                30378,
                30408,
                30437,
                30467,
                30496,
                30526,
                30555,
                30585,
                30614,
                30644,
                30673,
                30703,
                30732,
                30762,
                30791,
                30821,
                30850,
                30880,
                30909,
                30939,
                30968,
                30998,
                31027,
                31057,
                31086,
                31116,
                31145,
                31175,
                31204,
                31234,
                31263,
                31293,
                31322,
                31352,
                31381,
                31411,
                31441,
                31471,
                31500,
                31530,
                31559,
                31589,
                31618,
                31648,
                31676,
                31706,
                31736,
                31766,
                31795,
                31825,
                31854,
                31884,
                31913,
                31943,
                31972,
                32002,
                32031,
                32061,
                32090,
                32120,
                32150,
                32180,
                32209,
                32239,
                32268,
                32298,
                32327,
                32357,
                32386,
                32416,
                32445,
                32475,
                32504,
                32534,
                32563,
                32593,
                32622,
                32652,
                32681,
                32711,
                32740,
                32770,
                32799,
                32829,
                32858,
                32888,
                32917,
                32947,
                32976,
                33006,
                33035,
                33065,
                33094,
                33124,
                33153,
                33183,
                33213,
                33243,
                33272,
                33302,
                33331,
                33361,
                33390,
                33420,
                33450,
                33479,
                33509,
                33539,
                33568,
                33598,
                33627,
                33657,
                33686,
                33716,
                33745,
                33775,
                33804,
                33834,
                33863,
                33893,
                33922,
                33952,
                33981,
                34011,
                34040,
                34069,
                34099,
                34128,
                34158,
                34187,
                34217,
                34247,
                34277,
                34306,
                34336,
                34365,
                34395,
                34424,
                34454,
                34483,
                34512,
                34542,
                34571,
                34601,
                34631,
                34660,
                34690,
                34719,
                34749,
                34778,
                34808,
                34837,
                34867,
                34896,
                34926,
                34955,
                34985,
                35015,
                35044,
                35074,
                35103,
                35133,
                35162,
                35192,
                35222,
                35251,
                35280,
                35310,
                35340,
                35370,
                35399,
                35429,
                35458,
                35488,
                35517,
                35547,
                35576,
                35605,
                35635,
                35665,
                35694,
                35723,
                35753,
                35782,
                35811,
                35841,
                35871,
                35901,
                35930,
                35960,
                35989,
                36019,
                36048,
                36078,
                36107,
                36136,
                36166,
                36195,
                36225,
                36254,
                36284,
                36314,
                36343,
                36373,
                36403,
                36433,
                36462,
                36492,
                36521,
                36551,
                36580,
                36610,
                36639,
                36669,
                36698,
                36728,
                36757,
                36786,
                36816,
                36845,
                36875,
                36904,
                36934,
                36963,
                36993,
                37022,
                37052,
                37081,
                37111,
                37141,
                37170,
                37200,
                37229,
                37259,
                37288,
                37318,
                37347,
                37377,
                37406,
                37436,
                37465,
                37495,
                37524,
                37554,
                37584,
                37613,
                37643,
                37672,
                37701,
                37731,
                37760,
                37790,
                37819,
                37849,
                37878,
                37908,
                37938,
                37967,
                37997,
                38027,
                38056,
                38085,
                38115,
                38144,
                38174,
                38203,
                38233,
                38262,
                38292,
                38322,
                38351,
                38381,
                38410,
                38440,
                38469,
                38499,
                38528,
                38558,
                38587,
                38617,
                38646,
                38676,
                38705,
                38735,
                38764,
                38794,
                38823,
                38853,
                38882,
                38912,
                38941,
                38971,
                39001,
                39030,
                39059,
                39089,
                39118,
                39148,
                39178,
                39208,
                39237,
                39267,
                39297,
                39326,
                39355,
                39385,
                39414,
                39444,
                39473,
                39503,
                39532,
                39562,
                39592,
                39621,
                39650,
                39680,
                39709,
                39739,
                39768,
                39798,
                39827,
                39857,
                39886,
                39916,
                39946,
                39975,
                40005,
                40035,
                40064,
                40094,
                40123,
                40153,
                40182,
                40212,
                40241,
                40271,
                40300,
                40330,
                40359,
                40389,
                40418,
                40448,
                40477,
                40507,
                40536,
                40566,
                40595,
                40625,
                40655,
                40685,
                40714,
                40744,
                40773,
                40803,
                40832,
                40862,
                40892,
                40921,
                40951,
                40980,
                41009,
                41039,
                41068,
                41098,
                41127,
                41157,
                41186,
                41216,
                41245,
                41275,
                41304,
                41334,
                41364,
                41393,
                41422,
                41452,
                41481,
                41511,
                41540,
                41570,
                41599,
                41629,
                41658,
                41688,
                41718,
                41748,
                41777,
                41807,
                41836,
                41865,
                41894,
                41924,
                41953,
                41983,
                42012,
                42042,
                42072,
                42102,
                42131,
                42161,
                42190,
                42220,
                42249,
                42279,
                42308,
                42337,
                42367,
                42397,
                42426,
                42456,
                42485,
                42515,
                42545,
                42574,
                42604,
                42633,
                42662,
                42692,
                42721,
                42751,
                42780,
                42810,
                42839,
                42869,
                42899,
                42929,
                42958,
                42988,
                43017,
                43046,
                43076,
                43105,
                43135,
                43164,
                43194,
                43223,
                43253,
                43283,
                43312,
                43342,
                43371,
                43401,
                43430,
                43460,
                43489,
                43519,
                43548,
                43578,
                43607,
                43637,
                43666,
                43696,
                43726,
                43755,
                43785,
                43814,
                43844,
                43873,
                43903,
                43932,
                43962,
                43991,
                44021,
                44050,
                44080,
                44109,
                44139,
                44169,
                44198,
                44228,
                44258,
                44287,
                44317,
                44346,
                44375,
                44405,
                44434,
                44464,
                44493,
                44523,
                44553,
                44582,
                44612,
                44641,
                44671,
                44700,
                44730,
                44759,
                44788,
                44818,
                44847,
                44877,
                44906,
                44936,
                44966,
                44996,
                45025,
                45055,
                45084,
                45114,
                45143,
                45172,
                45202,
                45231,
                45261,
                45290,
                45320,
                45350,
                45380,
                45409,
                45439,
                45468,
                45498,
                45527,
                45556,
                45586,
                45615,
                45644,
                45674,
                45704,
                45733,
                45763,
                45793,
                45823,
                45852,
                45882,
                45911,
                45940,
                45970,
                45999,
                46028,
                46058,
                46088,
                46117,
                46147,
                46177,
                46206,
                46236,
                46265,
                46295,
                46324,
                46354,
                46383,
                46413,
                46442,
                46472,
                46501,
                46531,
                46560,
                46590,
                46620,
                46649,
                46679,
                46708,
                46738,
                46767,
                46797,
                46826,
                46856,
                46885,
                46915,
                46944,
                46974,
                47003,
                47033,
                47063,
                47092,
                47122,
                47151,
                47181,
                47210,
                47240,
                47269,
                47298,
                47328,
                47357,
                47387,
                47417,
                47446,
                47476,
                47506,
                47535,
                47565,
                47594,
                47624,
                47653,
                47682,
                47712,
                47741,
                47771,
                47800,
                47830,
                47860,
                47890,
                47919,
                47949,
                47978,
                48008,
                48037,
                48066,
                48096,
                48125,
                48155,
                48184,
                48214,
                48244,
                48273,
                48303,
                48333,
                48362,
                48392,
                48421,
                48450,
                48480,
                48509,
                48538,
                48568,
                48598,
                48627,
                48657,
                48687,
                48717,
                48746,
                48776,
                48805,
                48834,
                48864,
                48893,
                48922,
                48952,
                48982,
                49011,
                49041,
                49071,
                49100,
                49130,
                49160,
                49189,
                49218,
                49248,
                49277,
                49306,
                49336,
                49365,
                49395,
                49425,
                49455,
                49484,
                49514,
                49543,
                49573,
                49602,
                49632,
                49661,
                49690,
                49720,
                49749,
                49779,
                49809,
                49838,
                49868,
                49898,
                49927,
                49957,
                49986,
                50016,
                50045,
                50075,
                50104,
                50133,
                50163,
                50192,
                50222,
                50252,
                50281,
                50311,
                50340,
                50370,
                50400,
                50429,
                50459,
                50488,
                50518,
                50547,
                50576,
                50606,
                50635,
                50665,
                50694,
                50724,
                50754,
                50784,
                50813,
                50843,
                50872,
                50902,
                50931,
                50960,
                50990,
                51019,
                51049,
                51078,
                51108,
                51138,
                51167,
                51197,
                51227,
                51256,
                51286,
                51315,
                51345,
                51374,
                51403,
                51433,
                51462,
                51492,
                51522,
                51552,
                51582,
                51611,
                51641,
                51670,
                51699,
                51729,
                51758,
                51787,
                51816,
                51846,
                51876,
                51906,
                51936,
                51965,
                51995,
                52025,
                52054,
                52083,
                52113,
                52142,
                52171,
                52200,
                52230,
                52260,
                52290,
                52319,
                52349,
                52379,
                52408,
                52438,
                52467,
                52497,
                52526,
                52555,
                52585,
                52614,
                52644,
                52673,
                52703,
                52733,
                52762,
                52792,
                52822,
                52851,
                52881,
                52910,
                52939,
                52969,
                52998,
                53028,
                53057,
                53087,
                53116,
                53146,
                53176,
                53205,
                53235,
                53264,
                53294,
                53324,
                53353,
                53383,
                53412,
                53441,
                53471,
                53500,
                53530,
                53559,
                53589,
                53619,
                53648,
                53678,
                53708,
                53737,
                53767,
                53796,
                53825,
                53855,
                53884,
                53913,
                53943,
                53973,
                54003,
                54032,
                54062,
                54092,
                54121,
                54151,
                54180,
                54209,
                54239,
                54268,
                54297,
                54327,
                54357,
                54387,
                54416,
                54446,
                54476,
                54505,
                54535,
                54564,
                54593,
                54623,
                54652,
                54681,
                54711,
                54741,
                54770,
                54800,
                54830,
                54859,
                54889,
                54919,
                54948,
                54977,
                55007,
                55036,
                55066,
                55095,
                55125,
                55154,
                55184,
                55213,
                55243,
                55273,
                55302,
                55332,
                55361,
                55391,
                55420,
                55450,
                55479,
                55508,
                55538,
                55567,
                55597,
                55627,
                55657,
                55686,
                55716,
                55745,
                55775,
                55804,
                55834,
                55863,
                55892,
                55922,
                55951,
                55981,
                56011,
                56040,
                56070,
                56100,
                56129,
                56159,
                56188,
                56218,
                56247,
                56276,
                56306,
                56335,
                56365,
                56394,
                56424,
                56454,
                56483,
                56513,
                56543,
                56572,
                56601,
                56631,
                56660,
                56690,
                56719,
                56749,
                56778,
                56808,
                56837,
                56867,
                56897,
                56926,
                56956,
                56985,
                57015,
                57044,
                57074,
                57103,
                57133,
                57162,
                57192,
                57221,
                57251,
                57280,
                57310,
                57340,
                57369,
                57399,
                57429,
                57458,
                57487,
                57517,
                57546,
                57576,
                57605,
                57634,
                57664,
                57694,
                57723,
                57753,
                57783,
                57813,
                57842,
                57871,
                57901,
                57930,
                57959,
                57989,
                58018,
                58048,
                58077,
                58107,
                58137,
                58167,
                58196,
                58226,
                58255,
                58285,
                58314,
                58343,
                58373,
                58402,
                58432,
                58461,
                58491,
                58521,
                58551,
                58580,
                58610,
                58639,
                58669,
                58698,
                58727,
                58757,
                58786,
                58816,
                58845,
                58875,
                58905,
                58934,
                58964,
                58994,
                59023,
                59053,
                59082,
                59111,
                59141,
                59170,
                59200,
                59229,
                59259,
                59288,
                59318,
                59348,
                59377,
                59407,
                59436,
                59466,
                59495,
                59525,
                59554,
                59584,
                59613,
                59643,
                59672,
                59702,
                59731,
                59761,
                59791,
                59820,
                59850,
                59879,
                59909,
                59939,
                59968,
                59997,
                60027,
                60056,
                60086,
                60115,
                60145,
                60174,
                60204,
                60234,
                60264,
                60293,
                60323,
                60352,
                60381,
                60411,
                60440,
                60469,
                60499,
                60528,
                60558,
                60588,
                60618,
                60648,
                60677,
                60707,
                60736,
                60765,
                60795,
                60824,
                60853,
                60883,
                60912,
                60942,
                60972,
                61002,
                61031,
                61061,
                61090,
                61120,
                61149,
                61179,
                61208,
                61237,
                61267,
                61296,
                61326,
                61356,
                61385,
                61415,
                61445,
                61474,
                61504,
                61533,
                61563,
                61592,
                61621,
                61651,
                61680,
                61710,
                61739,
                61769,
                61799,
                61828,
                61858,
                61888,
                61917,
                61947,
                61976,
                62006,
                62035,
                62064,
                62094,
                62123,
                62153,
                62182,
                62212,
                62242,
                62271,
                62301,
                62331,
                62360,
                62390,
                62419,
                62448,
                62478,
                62507,
                62537,
                62566,
                62596,
                62625,
                62655,
                62685,
                62715,
                62744,
                62774,
                62803,
                62832,
                62862,
                62891,
                62921,
                62950,
                62980,
                63009,
                63039,
                63069,
                63099,
                63128,
                63157,
                63187,
                63216,
                63246,
                63275,
                63305,
                63334,
                63363,
                63393,
                63423,
                63453,
                63482,
                63512,
                63541,
                63571,
                63600,
                63630,
                63659,
                63689,
                63718,
                63747,
                63777,
                63807,
                63836,
                63866,
                63895,
                63925,
                63955,
                63984,
                64014,
                64043,
                64073,
                64102,
                64131,
                64161,
                64190,
                64220,
                64249,
                64279,
                64309,
                64339,
                64368,
                64398,
                64427,
                64457,
                64486,
                64515,
                64545,
                64574,
                64603,
                64633,
                64663,
                64692,
                64722,
                64752,
                64782,
                64811,
                64841,
                64870,
                64899,
                64929,
                64958,
                64987,
                65017,
                65047,
                65076,
                65106,
                65136,
                65166,
                65195,
                65225,
                65254,
                65283,
                65313,
                65342,
                65371,
                65401,
                65431,
                65460,
                65490,
                65520,
                65549,
                65579,
                65608,
                65638,
                65667,
                65697,
                65726,
                65755,
                65785,
                65815,
                65844,
                65874,
                65903,
                65933,
                65963,
                65992,
                66022,
                66051,
                66081,
                66110,
                66140,
                66169,
                66199,
                66228,
                66258,
                66287,
                66317,
                66346,
                66376,
                66405,
                66435,
                66465,
                66494,
                66524,
                66553,
                66583,
                66612,
                66641,
                66671,
                66700,
                66730,
                66760,
                66789,
                66819,
                66849,
                66878,
                66908,
                66937,
                66967,
                66996,
                67025,
                67055,
                67084,
                67114,
                67143,
                67173,
                67203,
                67233,
                67262,
                67292,
                67321,
                67351,
                67380,
                67409,
                67439,
                67468,
                67497,
                67527,
                67557,
                67587,
                67617,
                67646,
                67676,
                67705,
                67735,
                67764,
                67793,
                67823,
                67852,
                67882,
                67911,
                67941,
                67971,
                68000,
                68030,
                68060,
                68089,
                68119,
                68148,
                68177,
                68207,
                68236,
                68266,
                68295,
                68325,
                68354,
                68384,
                68414,
                68443,
                68473,
                68502,
                68532,
                68561,
                68591,
                68620,
                68650,
                68679,
                68708,
                68738,
                68768,
                68797,
                68827,
                68857,
                68886,
                68916,
                68946,
                68975,
                69004,
                69034,
                69063,
                69092,
                69122,
                69152,
                69181,
                69211,
                69240,
                69270,
                69300,
                69330,
                69359,
                69388,
                69418,
                69447,
                69476,
                69506,
                69535,
                69565,
                69595,
                69624,
                69654,
                69684,
                69713,
                69743,
                69772,
                69802,
                69831,
                69861,
                69890,
                69919,
                69949,
                69978,
                70008,
                70038,
                70067,
                70097,
                70126,
                70156,
                70186,
                70215,
                70245,
                70274,
                70303,
                70333,
                70362,
                70392,
                70421,
                70451,
                70481,
                70510,
                70540,
                70570,
                70599,
                70629,
                70658,
                70687,
                70717,
                70746,
                70776,
                70805,
                70835,
                70864,
                70894,
                70924,
                70954,
                70983,
                71013,
                71042,
                71071,
                71101,
                71130,
                71159,
                71189,
                71218,
                71248,
                71278,
                71308,
                71337,
                71367,
                71397,
                71426,
                71455,
                71485,
                71514,
                71543,
                71573,
                71602,
                71632,
                71662,
                71691,
                71721,
                71751,
                71781,
                71810,
                71839,
                71869,
                71898,
                71927,
                71957,
                71986,
                72016,
                72046,
                72075,
                72105,
                72135,
                72164,
                72194,
                72223,
                72253,
                72282,
                72311,
                72341,
                72370,
                72400,
                72429,
                72459,
                72489,
                72518,
                72548,
                72577,
                72607,
                72637,
                72666,
                72695,
                72725,
                72754,
                72784,
                72813,
                72843,
                72872,
                72902,
                72931,
                72961,
                72991,
                73020,
                73050,
                73080,
                73109,
                73139,
                73168,
                73197,
                73227,
                73256,
                73286,
                73315,
                73345,
                73375,
                73404,
                73434,
                73464,
                73493,
                73523,
                73552,
                73581,
                73611,
                73640,
                73669,
                73699,
                73729,
                73758,
                73788,
                73818,
                73848,
                73877,
                73907,
                73936,
                73965,
                73995,
                74024,
                74053,
                74083,
                74113,
                74142,
                74172,
                74202,
                74231,
                74261,
                74291,
                74320,
                74349,
                74379,
                74408,
                74437,
                74467,
                74497,
                74526,
                74556,
                74586,
                74615,
                74645,
                74675,
                74704,
                74733,
                74763,
                74792,
                74822,
                74851,
                74881,
                74910,
                74940,
                74969,
                74999,
                75029,
                75058,
                75088,
                75117,
                75147,
                75176,
                75206,
                75235,
                75264,
                75294,
                75323,
                75353,
                75383,
                75412,
                75442,
                75472,
                75501,
                75531,
                75560,
                75590,
                75619,
                75648,
                75678,
                75707,
                75737,
                75766,
                75796,
                75826,
                75856,
                75885,
                75915,
                75944,
                75974,
                76003,
                76032,
                76062,
                76091,
                76121,
                76150,
                76180,
                76210,
                76239,
                76269,
                76299,
                76328,
                76358,
                76387,
                76416,
                76446,
                76475,
                76505,
                76534,
                76564,
                76593,
                76623,
                76653,
                76682,
                76712,
                76741,
                76771,
                76801,
                76830,
                76859,
                76889,
                76918,
                76948,
                76977,
                77007,
                77036,
                77066,
                77096,
                77125,
                77155,
                77185,
                77214,
                77243,
                77273,
                77302,
                77332,
                77361,
                77390,
                77420,
                77450,
                77479,
                77509,
                77539,
                77569,
                77598,
                77627,
                77657,
                77686,
                77715,
                77745,
                77774,
                77804,
                77833,
                77863,
                77893,
                77923,
                77952,
                77982,
                78011,
                78041,
                78070,
                78099,
                78129,
                78158,
                78188,
                78217,
                78247,
                78277,
                78307,
                78336,
                78366,
                78395,
                78425,
                78454,
                78483,
                78513,
                78542,
                78572,
                78601,
                78631,
                78661,
                78690,
                78720,
                78750,
                78779,
                78808,
                78838,
                78867,
                78897,
                78926,
                78956,
                78985,
                79015,
                79044,
                79074,
                79104,
                79133,
                79163,
                79192,
                79222,
                79251,
                79281,
                79310,
                79340,
                79369,
                79399,
                79428,
                79458,
                79487,
                79517,
                79546,
                79576,
                79606,
                79635,
                79665,
                79695,
                79724,
                79753,
                79783,
                79812,
                79841,
                79871,
                79900,
                79930,
                79960,
                79990
            ], (HijriParser = HijriParser1 || (HijriParser1 = {})).getHijriDate = /**
     *
     * @param {Date} gDate ?
     * @returns {Object} ?
     */ function(gDate) {
                var day = gDate.getDate(), month = gDate.getMonth(), year = gDate.getFullYear(), tMonth = month + 1, tYear = year;
                tMonth < 3 && (tYear -= 1, tMonth += 12);
                var yPrefix = Math.floor(tYear / 100.), julilanOffset = yPrefix - Math.floor(yPrefix / 4.) - 2, julianNumber = Math.floor(365.25 * (tYear + 4716)) + Math.floor(30.6001 * (tMonth + 1)) + day - julilanOffset - 1524;
                julilanOffset = (yPrefix = Math.floor((julianNumber - 1867216.25) / 36524.25)) - Math.floor(yPrefix / 4.) + 1;
                var b = julianNumber + julilanOffset + 1524, c = Math.floor((b - 122.1) / 365.25), d = Math.floor(365.25 * c), tempMonth = Math.floor((b - d) / 30.6001);
                day = b - d - Math.floor(30.6001 * tempMonth), (month = Math.floor((b - d) / 20.6001)) > 13 && (c += 1, month -= 12), month -= 1, year = c - 4716;
                var modifiedJulianDate = julianNumber - 2400000, iyear = 10631. / 30., z = julianNumber - 1948084, cyc = Math.floor(z / 10631.), j = Math.floor(((z -= 10631 * cyc) - 0.1335) / iyear), im = Math.floor(((z -= Math.floor(j * iyear + 0.1335)) + 28.5001) / 29.5);
                13 === im && (im = 12);
                for(var tempDay = z - Math.floor(29.5001 * im - 29), i = 0; i < dateCorrection.length && !(dateCorrection[i] > modifiedJulianDate); i++);
                var iln = i + 16260, ii = Math.floor((iln - 1) / 12), hYear = ii + 1, hmonth = iln - 12 * ii, hDate = modifiedJulianDate - dateCorrection[i - 1] + 1;
                return (hDate + '').length > 2 && (hDate = tempDay, hmonth = im, hYear = 30 * cyc + j), {
                    year: hYear,
                    month: hmonth,
                    date: hDate
                };
            }, HijriParser.toGregorian = /**
     *
     * @param {number} year ?
     * @param {number} month ?
     * @param {number} day ?
     * @returns {Date} ?
     */ function(year, month, day) {
                var z = Math.floor(day + dateCorrection[12 * (year - 1) + 1 + (month - 1) - 16260 - 1] - 1 + 2400000 + 0.5), a = Math.floor((z - 1867216.25) / 36524.25), b = (a = z + 1 + a - Math.floor(a / 4)) + 1524, c = Math.floor((b - 122.1) / 365.25), d = Math.floor(365.25 * c), e = Math.floor((b - d) / 30.6001), gDay = b - d - Math.floor(30.6001 * e), gMonth = e - (e > 13.5 ? 13 : 1), gYear = c - (gMonth > 2.5 ? 4716 : 4715);
                return gYear <= 0 && gMonth--, new Date(gYear + '/' + gMonth + '/' + gDay);
            };
            var abbreviateRegexGlobal = /\/MMMMM|MMMM|MMM|a|LLLL|LLL|EEEEE|EEEE|E|K|cccc|ccc|WW|W|G+|z+/gi, standalone = 'stand-alone', weekdayKey = [
                'sun',
                'mon',
                'tue',
                'wed',
                'thu',
                'fri',
                'sat'
            ], timeSetter = {
                m: 'getMinutes',
                h: 'getHours',
                H: 'getHours',
                s: 'getSeconds',
                d: 'getDate',
                f: 'getMilliseconds'
            }, datePartMatcher = {
                M: 'month',
                d: 'day',
                E: 'weekday',
                c: 'weekday',
                y: 'year',
                m: 'minute',
                h: 'hour',
                H: 'hour',
                s: 'second',
                L: 'month',
                a: 'designator',
                z: 'timeZone',
                Z: 'timeZone',
                G: 'era',
                f: 'milliseconds'
            }, DateFormat = /** @class */ function() {
                function DateFormat() {}
                return(/**
     * Returns the formatter function for given skeleton.
     *
     * @param {string} culture -  Specifies the culture name to be which formatting.
     * @param {DateFormatOptions} option - Specific the format in which date  will format.
     * @param {Object} cldr - Specifies the global cldr data collection.
     * @returns {Function} ?
     */ DateFormat.dateFormat = function(culture, option, cldr) {
                    var _this = this, dependable = intl_base_IntlBase.getDependables(cldr, culture, option.calendar), dateObject = (util_getValue('parserObject.numbers', dependable), dependable.dateObject), formatOptions = {
                        isIslamic: intl_base_IntlBase.islamicRegex.test(option.calendar)
                    }, resPattern = option.format || intl_base_IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type, !1, '');
                    if (formatOptions.dateSeperator = intl_base_IntlBase.getDateSeparator(dependable.dateObject), util_isUndefined(resPattern)) throwError('Format options or type given must be invalid');
                    else {
                        resPattern = intl_base_IntlBase.ConvertDateToWeekFormat(resPattern), formatOptions.pattern = resPattern, formatOptions.numMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));
                        for(var patternMatch = resPattern.match(abbreviateRegexGlobal) || [], _i = 0; _i < patternMatch.length; _i++){
                            var str = patternMatch[_i], len = str.length, char = str[0];
                            switch('K' === char && (char = 'h'), char){
                                case 'E':
                                case 'c':
                                    // eslint-disable-next-line
                                    formatOptions.weekday = dependable.dateObject[intl_base_IntlBase.days][standalone][intl_base_IntlBase.monthIndex[len]];
                                    break;
                                case 'M':
                                case 'L':
                                    // eslint-disable-next-line
                                    formatOptions.month = dependable.dateObject[intl_base_IntlBase.month][standalone][intl_base_IntlBase.monthIndex[len]];
                                    break;
                                case 'a':
                                    formatOptions.designator = util_getValue('dayPeriods.format.wide', dateObject);
                                    break;
                                case 'G':
                                    // eslint-disable-next-line
                                    var eText = len <= 3 ? 'eraAbbr' : 4 === len ? 'eraNames' : 'eraNarrow';
                                    formatOptions.era = util_getValue('eras.' + eText, dependable.dateObject);
                                    break;
                                case 'z':
                                    formatOptions.timeZone = util_getValue('dates.timeZoneNames', dependable.parserObject);
                            }
                        }
                    }
                    return function(value) {
                        return isNaN(value.getDate()) ? null : _this.intDateFormatter(value, formatOptions);
                    };
                }, /**
     * Returns formatted date string based on options passed.
     *
     * @param {Date} value ?
     * @param {FormatOptions} options ?
     * @returns {string} ?
     */ DateFormat.intDateFormatter = function(value, options) {
                    for(var pattern = options.pattern, ret = '', matches = pattern.match(intl_base_IntlBase.dateParseRegex), dObject = this.getCurrentDateValue(value, options.isIslamic), _i = 0; _i < matches.length; _i++){
                        var match = matches[_i], length_1 = match.length, char = match[0];
                        'K' === char && (char = 'h');
                        var curval = void 0, curvalstr = '', isNumber = void 0, processNumber = void 0, curstr = '';
                        switch(char){
                            case 'M':
                            case 'L':
                                curval = dObject.month, length_1 > 2 ? // eslint-disable-next-line
                                ret += options.month[curval] : isNumber = !0;
                                break;
                            case 'E':
                            case 'c':
                                // eslint-disable-next-line
                                ret += options.weekday[weekdayKey[value.getDay()]];
                                break;
                            case 'H':
                            case 'h':
                            case 'm':
                            case 's':
                            case 'd':
                            case 'f':
                                if (isNumber = !0, 'd' === char) curval = dObject.date;
                                else if ('f' === char) {
                                    isNumber = !1, processNumber = !0;
                                    var curlength = (curvalstr = // eslint-disable-next-line
                                    (curvalstr = value[timeSetter[char]]().toString()).substring(0, length_1)).length;
                                    if (length_1 !== curlength) {
                                        if (length_1 > 3) continue;
                                        for(var i = 0; i < length_1 - curlength; i++)curvalstr = '0' + curvalstr.toString();
                                    }
                                    curstr += curvalstr;
                                } else // eslint-disable-next-line
                                curval = value[timeSetter[char]]();
                                'h' === char && (curval = curval % 12 || 12);
                                break;
                            case 'y':
                                processNumber = !0, curstr += dObject.year, 2 === length_1 && (curstr = curstr.substr(curstr.length - 2));
                                break;
                            case 'a':
                                // eslint-disable-next-line
                                var desig = 12 > value.getHours() ? 'am' : 'pm';
                                // eslint-disable-next-line
                                ret += options.designator[desig];
                                break;
                            case 'G':
                                // eslint-disable-next-line
                                var dec = 0 > value.getFullYear() ? 0 : 1, retu = options.era[dec];
                                util_isNullOrUndefined(retu) && // eslint-disable-next-line
                                (retu = options.era[dec ? 0 : 1]), ret += retu || '';
                                break;
                            case '\'':
                                ret += '\'\'' === match ? '\'' : match.replace(/'/g, '');
                                break;
                            case 'z':
                                // eslint-disable-next-line
                                var timezone = value.getTimezoneOffset(), pattern_1 = length_1 < 4 ? '+H;-H' : options.timeZone.hourFormat;
                                pattern_1 = pattern_1.replace(/:/g, options.numMapper.timeSeparator), 0 === timezone ? ret += options.timeZone.gmtZeroFormat : (processNumber = !0, curstr = this.getTimeZoneValue(timezone, pattern_1)), curstr = options.timeZone.gmtFormat.replace(/\{0\}/, curstr);
                                break;
                            case ':':
                                // eslint-disable-next-line
                                ret += options.numMapper.numberSymbols.timeSeparator;
                                break;
                            case '/':
                                ret += options.dateSeperator;
                                break;
                            case 'W':
                                isNumber = !0, curval = intl_base_IntlBase.getWeekOfYear(value);
                                break;
                            default:
                                ret += match;
                        }
                        isNumber && (processNumber = !0, curstr = this.checkTwodigitNumber(curval, length_1)), processNumber && (ret += ParserBase.convertValueParts(curstr, intl_base_IntlBase.latnParseRegex, options.numMapper.mapper));
                    }
                    return ret;
                }, DateFormat.getCurrentDateValue = function(value, isIslamic) {
                    return isIslamic ? HijriParser1.getHijriDate(value) : {
                        year: value.getFullYear(),
                        month: value.getMonth() + 1,
                        date: value.getDate()
                    };
                }, /**
     * Returns two digit numbers for given value and length
     *
     * @param {number} val ?
     * @param {number} len ?
     * @returns {string} ?
     */ DateFormat.checkTwodigitNumber = function(val, len) {
                    var ret = val + '';
                    return 2 === len && 2 !== ret.length ? '0' + ret : ret;
                }, /**
     * Returns the value of the Time Zone.
     *
     * @param {number} tVal ?
     * @param {string} pattern ?
     * @returns {string} ?
     * @private
     */ DateFormat.getTimeZoneValue = function(tVal, pattern) {
                    var _this = this, curPattern = pattern.split(';')[tVal > 0 ? 1 : 0], no = Math.abs(tVal);
                    return curPattern.replace(/HH?|mm/g, function(str) {
                        var len = str.length, ishour = -1 !== str.indexOf('H');
                        return _this.checkTwodigitNumber(Math.floor(ishour ? no / 60 : no % 60), len);
                    });
                }, DateFormat);
            }(), errorText = {
                ms: 'minimumSignificantDigits',
                ls: 'maximumSignificantDigits',
                mf: 'minimumFractionDigits',
                lf: 'maximumFractionDigits'
            }, NumberFormat = /** @class */ function() {
                function NumberFormat() {}
                return(/**
     * Returns the formatter function for given skeleton.
     *
     * @param {string} culture -  Specifies the culture name to be which formatting.
     * @param {NumberFormatOptions} option - Specific the format in which number  will format.
     * @param {Object} cldr - Specifies the global cldr data collection.
     * @returns {Function} ?
     */ NumberFormat.numberFormatter = function(culture, option, cldr) {
                    var symbolPattern, _this = this, fOptions = util_extend({}, option), cOptions = {}, dOptions = {}, dependable = intl_base_IntlBase.getDependables(cldr, culture, '', !0);
                    dependable.numericObject, dOptions.numberMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), !0), dOptions.currencySymbol = intl_base_IntlBase.getCurrencySymbol(dependable.numericObject, fOptions.currency || defaultCurrencyCode, option.altSymbol), /* eslint-disable  @typescript-eslint/no-explicit-any */ dOptions.percentSymbol = dOptions.numberMapper.numberSymbols.percentSign, dOptions.minusSymbol = dOptions.numberMapper.numberSymbols.minusSign;
                    var symbols = dOptions.numberMapper.numberSymbols;
                    if (option.format && !intl_base_IntlBase.formatRegex.test(option.format)) cOptions = intl_base_IntlBase.customFormat(option.format, dOptions, dependable.numericObject);
                    else {
                        util_extend(fOptions, intl_base_IntlBase.getProperNumericSkeleton(option.format || 'N')), fOptions.isCurrency = 'currency' === fOptions.type, fOptions.isPercent = 'percent' === fOptions.type, symbolPattern = intl_base_IntlBase.getSymbolPattern(fOptions.type, dOptions.numberMapper.numberSystem, dependable.numericObject, fOptions.isAccount), fOptions.groupOne = this.checkValueRange(fOptions.maximumSignificantDigits, fOptions.minimumSignificantDigits, !0), this.checkValueRange(fOptions.maximumFractionDigits, fOptions.minimumFractionDigits, !1, !0), util_isUndefined(fOptions.fractionDigits) || (fOptions.minimumFractionDigits = fOptions.maximumFractionDigits = fOptions.fractionDigits), util_isUndefined(fOptions.useGrouping) && (fOptions.useGrouping = !0), fOptions.isCurrency && (symbolPattern = symbolPattern.replace(/\u00A4/g, intl_base_IntlBase.defaultCurrency));
                        var split = symbolPattern.split(';');
                        if (cOptions.nData = intl_base_IntlBase.getFormatData(split[1] || '-' + split[0], !0, dOptions.currencySymbol), cOptions.pData = intl_base_IntlBase.getFormatData(split[0], !1, dOptions.currencySymbol), fOptions.useGrouping && (fOptions.groupSeparator = symbols.group, fOptions.groupData = this.getGroupingDetails(split[0])), util_isUndefined(fOptions.minimumFractionDigits) && (fOptions.minimumFractionDigits = cOptions.nData.minimumFraction), util_isUndefined(fOptions.maximumFractionDigits)) {
                            var mval = cOptions.nData.maximumFraction;
                            fOptions.maximumFractionDigits = util_isUndefined(mval) && fOptions.isPercent ? 0 : mval;
                        }
                        var mfrac = fOptions.minimumFractionDigits, lfrac = fOptions.maximumFractionDigits;
                        util_isUndefined(mfrac) || util_isUndefined(lfrac) || !(mfrac > lfrac) || (fOptions.maximumFractionDigits = mfrac);
                    }
                    return util_extend(cOptions.nData, fOptions), util_extend(cOptions.pData, fOptions), function(value) {
                        return isNaN(value) ? symbols.nan : isFinite(value) ? _this.intNumberFormatter(value, cOptions, dOptions) : symbols.infinity;
                    };
                }, /**
     * Returns grouping details for the pattern provided
     *
     * @param {string} pattern ?
     * @returns {GroupDetails} ?
     */ NumberFormat.getGroupingDetails = function(pattern) {
                    var ret = {}, match = pattern.match(intl_base_IntlBase.negativeDataRegex);
                    if (match && match[4]) {
                        var pattern_1 = match[4], p = pattern_1.lastIndexOf(',');
                        if (-1 !== p) {
                            var temp = pattern_1.split('.')[0];
                            ret.primary = temp.length - p - 1;
                            var s = pattern_1.lastIndexOf(',', p - 1);
                            -1 !== s && (ret.secondary = p - 1 - s);
                        }
                    }
                    return ret;
                }, /**
     * Returns if the provided integer range is valid.
     *
     * @param {number} val1 ?
     * @param {number} val2 ?
     * @param {boolean} checkbothExist ?
     * @param {boolean} isFraction ?
     * @returns {boolean} ?
     */ NumberFormat.checkValueRange = function(val1, val2, checkbothExist, isFraction) {
                    var decide = isFraction ? 'f' : 's', dint = 0, str1 = errorText['l' + decide], str2 = errorText['m' + decide];
                    if (!util_isUndefined(val1) && (this.checkRange(val1, str1, isFraction), dint++), !util_isUndefined(val2) && (this.checkRange(val2, str2, isFraction), dint++), 2 === dint) {
                        if (!(val1 < val2)) return !0;
                        throwError(str2 + 'specified must be less than the' + str1);
                    } else checkbothExist && 1 === dint && throwError('Both' + str2 + 'and' + str2 + 'must be present');
                    return !1;
                }, /**
     * Check if the provided fraction range is valid
     *
     * @param {number} val ?
     * @param {string} text ?
     * @param {boolean} isFraction ?
     * @returns {void} ?
     */ NumberFormat.checkRange = function(val, text, isFraction) {
                    var range = isFraction ? [
                        0,
                        20
                    ] : [
                        1,
                        21
                    ];
                    (val < range[0] || val > range[1]) && throwError(text + 'value must be within the range' + range[0] + 'to' + range[1]);
                }, /**
     * Returns formatted numeric string for provided formatting options
     *
     * @param {number} value ?
     * @param {base.GenericFormatOptions} fOptions ?
     * @param {CommonOptions} dOptions ?
     * @returns {string} ?
     */ NumberFormat.intNumberFormatter = function(value, fOptions, dOptions) {
                    if (!util_isUndefined(fOptions.nData.type)) {
                        value < 0 ? (value *= -1, curData = fOptions.nData) : curData = 0 === value && fOptions.zeroData || fOptions.pData;
                        var curData, fValue = '';
                        return (curData.isPercent && (value *= 100), curData.groupOne ? fValue = this.processSignificantDigits(value, curData.minimumSignificantDigits, curData.maximumSignificantDigits) : (fValue = this.processFraction(value, curData.minimumFractionDigits, curData.maximumFractionDigits), curData.minimumIntegerDigits && (fValue = this.processMinimumIntegers(fValue, curData.minimumIntegerDigits))), 'scientific' === curData.type && (fValue = (fValue = value.toExponential(curData.maximumFractionDigits)).replace('e', dOptions.numberMapper.numberSymbols.exponential)), fValue = fValue.replace('.', dOptions.numberMapper.numberSymbols.decimal), curData.useGrouping && /* eslint-disable  @typescript-eslint/no-explicit-any */ (fValue = this.groupNumbers(fValue, curData.groupData.primary, curData.groupSeparator || ',', dOptions.numberMapper.numberSymbols.decimal || '.', curData.groupData.secondary)), fValue = ParserBase.convertValueParts(fValue, intl_base_IntlBase.latnParseRegex, dOptions.numberMapper.mapper), 'N/A' === curData.nlead) ? curData.nlead : curData.nlead + fValue + curData.nend;
                    }
                }, /**
     * Returns significant digits processed numeric string
     *
     * @param {number} value ?
     * @param {number} min ?
     * @param {number} max ?
     * @returns {string} ?
     */ NumberFormat.processSignificantDigits = function(value, min, max) {
                    var temp = value + '';
                    return temp.length < min ? value.toPrecision(min) : +(temp = value.toPrecision(max)) + '';
                }, /**
     * Returns grouped numeric string
     *
     * @param {string} val ?
     * @param {number} level1 ?
     * @param {string} sep ?
     * @param {string} decimalSymbol ?
     * @param {number} level2 ?
     * @returns {string} ?
     */ NumberFormat.groupNumbers = function(val, level1, sep, decimalSymbol, level2) {
                    for(var flag = !util_isNullOrUndefined(level2) && 0 !== level2, split = val.split(decimalSymbol), prefix = split[0], length = prefix.length, str = ''; length > level1;)str = prefix.slice(length - level1, length) + (str.length ? sep + str : ''), length -= level1, flag && (level1 = level2, flag = !1);
                    return split[0] = prefix.slice(0, length) + (str.length ? sep : '') + str, split.join(decimalSymbol);
                }, /**
     * Returns fraction processed numeric string
     *
     * @param {number} value ?
     * @param {number} min ?
     * @param {number} max ?
     * @returns {string} ?
     */ NumberFormat.processFraction = function(value, min, max) {
                    var temp = (value + '').split('.')[1], length = temp ? temp.length : 0;
                    if (min && length < min) {
                        var ret = '';
                        if (0 === length) ret = value.toFixed(min);
                        else {
                            ret += value;
                            for(var j = 0; j < min - length; j++)ret += '0';
                            return ret;
                        }
                        return value.toFixed(min);
                    }
                    return !util_isNullOrUndefined(max) && (length > max || 0 === max) ? value.toFixed(max) : value + '';
                }, /**
     * Returns integer processed numeric string
     *
     * @param {string} value ?
     * @param {number} min ?
     * @returns {string} ?
     */ NumberFormat.processMinimumIntegers = function(value, min) {
                    var temp = value.split('.'), lead = temp[0], len = lead.length;
                    if (len < min) {
                        for(var i = 0; i < min - len; i++)lead = '0' + lead;
                        temp[0] = lead;
                    }
                    return temp.join('.');
                }, NumberFormat);
            }(), date_parser_standalone = 'stand-alone', latnRegex = /^[0-9]*$/, date_parser_timeSetter = {
                minute: 'setMinutes',
                hour: 'setHours',
                second: 'setSeconds',
                day: 'setDate',
                month: 'setMonth',
                milliseconds: 'setMilliseconds'
            }, DateParser = /** @class */ function() {
                function DateParser() {}
                return(/**
     * Returns the parser function for given skeleton.
     *
     * @param {string} culture -  Specifies the culture name to be which formatting.
     * @param {DateFormatOptions} option - Specific the format in which string date  will be parsed.
     * @param {Object} cldr - Specifies the global cldr data collection.
     * @returns {Function} ?
     */ DateParser.dateParser = function(culture, option, cldr) {
                    var hourOnly, _this = this, dependable = intl_base_IntlBase.getDependables(cldr, culture, option.calendar), numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr), !1, !1), parseOptions = {}, resPattern = option.format || intl_base_IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type, !1, ''), regexString = '';
                    if (util_isUndefined(resPattern)) throwError('Format options or type given must be invalid');
                    else {
                        resPattern = intl_base_IntlBase.ConvertDateToWeekFormat(resPattern), parseOptions = {
                            isIslamic: intl_base_IntlBase.islamicRegex.test(option.calendar),
                            pattern: resPattern,
                            evalposition: {},
                            culture: culture
                        };
                        for(var patternMatch = resPattern.match(intl_base_IntlBase.dateParseRegex) || [], length_1 = patternMatch.length, gmtCorrection = 0, zCorrectTemp = 0, isgmtTraversed = !1, nRegx = numOptions.numericRegex, numMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr)), i = 0; i < length_1; i++){
                            var str = patternMatch[i], len = str.length, char = 'K' === str[0] ? 'h' : str[0], isNumber = void 0, canUpdate = void 0, charKey = datePartMatcher[char], optional = 2 === len ? '' : '?';
                            switch(isgmtTraversed && (gmtCorrection = zCorrectTemp, isgmtTraversed = !1), char){
                                case 'E':
                                case 'c':
                                    // eslint-disable-next-line
                                    var weekData = void 0;
                                    // eslint-disable-next-line
                                    weekData = dependable.dateObject[intl_base_IntlBase.days][date_parser_standalone][intl_base_IntlBase.monthIndex[len]], // tslint:enable
                                    regexString += '(' + Object.keys(ParserBase.reverseObject(weekData)).join('|') + ')';
                                    break;
                                case 'M':
                                case 'L':
                                case 'd':
                                case 'm':
                                case 's':
                                case 'h':
                                case 'H':
                                case 'f':
                                    if (canUpdate = !0, ('M' === char || 'L' === char) && len > 2) {
                                        var monthData = void 0;
                                        // eslint-disable-next-line
                                        monthData = dependable.dateObject.months[date_parser_standalone][intl_base_IntlBase.monthIndex[len]], // eslint-disable-next-line
                                        parseOptions[charKey] = ParserBase.reverseObject(monthData), // eslint-disable-next-line
                                        regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';
                                    } else if ('f' === char) {
                                        if (len > 3) continue;
                                        isNumber = !0, regexString += '(' + nRegx + nRegx + '?' + nRegx + "?)";
                                    } else isNumber = !0, regexString += '(' + nRegx + nRegx + optional + ')';
                                    'h' === char && (parseOptions.hour12 = !0);
                                    break;
                                case 'W':
                                    regexString += '(' + nRegx + (1 === len ? '?' : '') + nRegx + ')';
                                    break;
                                case 'y':
                                    canUpdate = isNumber = !0, 2 === len ? regexString += '(' + nRegx + nRegx + ')' : regexString += '(' + nRegx + '{' + len + ',})';
                                    break;
                                case 'a':
                                    canUpdate = !0;
                                    // eslint-disable-next-line
                                    var periodValur = util_getValue('dayPeriods.format.wide', dependable.dateObject);
                                    // eslint-disable-next-line
                                    parseOptions[charKey] = ParserBase.reverseObject(periodValur), // eslint-disable-next-line
                                    regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';
                                    break;
                                case 'G':
                                    canUpdate = !0;
                                    // eslint-disable-next-line
                                    var eText = len <= 3 ? 'eraAbbr' : 4 === len ? 'eraNames' : 'eraNarrow';
                                    // eslint-disable-next-line
                                    parseOptions[charKey] = ParserBase.reverseObject(util_getValue('eras.' + eText, dependable.dateObject)), // eslint-disable-next-line
                                    regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + '?)';
                                    break;
                                case 'z':
                                    canUpdate = 0 !== new Date().getTimezoneOffset(), // eslint-disable-next-line
                                    parseOptions[charKey] = util_getValue('dates.timeZoneNames', dependable.parserObject);
                                    // eslint-disable-next-line
                                    var tzone = parseOptions[charKey], hpattern = (hourOnly = len < 4) ? '+H;-H' : tzone.hourFormat;
                                    hpattern = hpattern.replace(/:/g, numMapper.timeSeparator), regexString += '(' + this.parseTimeZoneRegx(hpattern, tzone, nRegx) + ')?', isgmtTraversed = !0, zCorrectTemp = hourOnly ? 6 : 12;
                                    break;
                                case '\'':
                                    regexString += '(' + str.replace(/'/g, '') + ')?';
                                    break;
                                default:
                                    regexString += '([\\D])';
                            }
                            canUpdate && (parseOptions.evalposition[charKey] = {
                                isNumber: isNumber,
                                pos: i + 1 + gmtCorrection,
                                hourOnly: hourOnly
                            }), i !== length_1 - 1 || util_isNullOrUndefined(regexString) || (parseOptions.parserRegex = RegExp('^' + regexString + '$', 'i'));
                        }
                    }
                    return function(value) {
                        var parsedDateParts = _this.internalDateParse(value, parseOptions, numOptions);
                        if (util_isNullOrUndefined(parsedDateParts) || !Object.keys(parsedDateParts).length) return null;
                        if (parseOptions.isIslamic) {
                            var dobj = {}, tYear = parsedDateParts.year, tDate = parsedDateParts.day, tMonth = parsedDateParts.month, ystrig = tYear ? tYear + '' : '', is2DigitYear = 2 === ystrig.length;
                            tYear && tMonth && tDate && !is2DigitYear || (dobj = HijriParser1.getHijriDate(new Date())), is2DigitYear && (tYear = parseInt((dobj.year + '').slice(0, 2) + ystrig, 10));
                            // tslint:disable-next-line
                            var dateObject = HijriParser1.toGregorian(tYear || dobj.year, tMonth || dobj.month, tDate || dobj.date);
                            parsedDateParts.year = dateObject.getFullYear(), parsedDateParts.month = dateObject.getMonth() + 1, parsedDateParts.day = dateObject.getDate();
                        }
                        return _this.getDateObject(parsedDateParts);
                    };
                }, /* tslint:disable */ /**
     * Returns date object for provided date options
     *
     * @param {DateParts} options ?
     * @param {Date} value ?
     * @returns {Date} ?
     */ DateParser.getDateObject = function(options, value) {
                    var res = value || new Date();
                    res.setMilliseconds(0);
                    var y = options.year, desig = options.designator, tzone = options.timeZone;
                    util_isUndefined(y) || ((y + '').length <= 2 && (y += 100 * Math.floor(res.getFullYear() / 100)), res.setFullYear(y));
                    for(var _i = 0, tKeys_1 = [
                        'hour',
                        'minute',
                        'second',
                        'milliseconds',
                        'month',
                        'day'
                    ]; _i < tKeys_1.length; _i++){
                        var key = tKeys_1[_i], tValue = options[key];
                        if (util_isUndefined(tValue) && 'day' === key && res.setDate(1), !util_isUndefined(tValue)) {
                            if ('month' === key) {
                                if ((tValue -= 1) < 0 || tValue > 11) return new Date('invalid');
                                var pDate = res.getDate();
                                res.setDate(1), // eslint-disable-next-line
                                res[date_parser_timeSetter[key]](tValue);
                                var lDate = new Date(res.getFullYear(), tValue + 1, 0).getDate();
                                res.setDate(pDate < lDate ? pDate : lDate);
                            } else {
                                if ('day' === key) {
                                    var lastDay = new Date(res.getFullYear(), res.getMonth() + 1, 0).getDate();
                                    if (tValue < 1 || tValue > lastDay) return null;
                                }
                                // eslint-disable-next-line
                                res[date_parser_timeSetter[key]](tValue);
                            }
                        }
                    }
                    if (!util_isUndefined(desig)) {
                        var hour = res.getHours();
                        'pm' === desig ? res.setHours(hour + (12 === hour ? 0 : 12)) : 12 === hour && res.setHours(0);
                    }
                    if (!util_isUndefined(tzone)) {
                        var tzValue = tzone - res.getTimezoneOffset();
                        0 !== tzValue && res.setMinutes(res.getMinutes() + tzValue);
                    }
                    return res;
                }, /**
     * Returns date parsing options for provided value along with parse and numeric options
     *
     * @param {string} value ?
     * @param {ParseOptions} parseOptions ?
     * @param {NumericOptions} num ?
     * @returns {DateParts} ?
     */ DateParser.internalDateParse = function(value, parseOptions, num) {
                    var matches = value.match(parseOptions.parserRegex), retOptions = {
                        hour: 0,
                        minute: 0,
                        second: 0
                    };
                    if (util_isNullOrUndefined(matches)) return null;
                    for(var props = Object.keys(parseOptions.evalposition), _i = 0; _i < props.length; _i++){
                        var prop = props[_i], curObject = parseOptions.evalposition[prop], matchString = matches[curObject.pos];
                        if (curObject.isNumber) // eslint-disable-next-line
                        retOptions[prop] = this.internalNumberParser(matchString, num);
                        else if ('timeZone' !== prop || util_isUndefined(matchString)) // eslint-disable-next-line
                        matchString = 'month' !== prop || parseOptions.isIslamic || 'en' !== parseOptions.culture && 'en-GB' !== parseOptions.culture && 'en-US' !== parseOptions.culture ? matchString : matchString[0].toUpperCase() + matchString.substring(1).toLowerCase(), // eslint-disable-next-line
                        retOptions[prop] = parseOptions[prop][matchString];
                        else {
                            var pos = curObject.pos, val = void 0, tmatch = matches[pos + 1], flag = !util_isUndefined(tmatch);
                            util_isNullOrUndefined(val = curObject.hourOnly ? 60 * this.getZoneValue(flag, tmatch, matches[pos + 4], num) : 60 * this.getZoneValue(flag, tmatch, matches[pos + 7], num) + this.getZoneValue(flag, matches[pos + 4], matches[pos + 10], num)) || (retOptions[prop] = val);
                        }
                    }
                    return parseOptions.hour12 && (retOptions.hour12 = !0), retOptions;
                }, /**
     * Returns parsed number for provided Numeric string and Numeric Options
     *
     * @param {string} value ?
     * @param {NumericOptions} option ?
     * @returns {number} ?
     */ DateParser.internalNumberParser = function(value, option) {
                    return (value = ParserBase.convertValueParts(value, option.numberParseRegex, option.numericPair), latnRegex.test(value)) ? +value : null;
                }, /**
     * Returns parsed time zone RegExp for provided hour format and time zone
     *
     * @param {string} hourFormat ?
     * @param {base.TimeZoneOptions} tZone ?
     * @param {string} nRegex ?
     * @returns {string} ?
     */ DateParser.parseTimeZoneRegx = function(hourFormat, tZone, nRegex) {
                    var ret, pattern = tZone.gmtFormat, cRegex = '(' + nRegex + ")(" + nRegex + ')';
                    return ret = hourFormat.replace('+', '\\+'), ret = (ret = -1 !== hourFormat.indexOf('HH') ? ret.replace(/HH|mm/g, '(' + cRegex + ')') : ret.replace(/H|m/g, '(' + cRegex + '?)')).split(';').map(function(str) {
                        return pattern.replace('{0}', str);
                    }).join('|') + '|' + tZone.gmtZeroFormat;
                }, /**
     * Returns zone based value.
     *
     * @param {boolean} flag ?
     * @param {string} val1 ?
     * @param {string} val2 ?
     * @param {NumericOptions} num ?
     * @returns {number} ?
     */ DateParser.getZoneValue = function(flag, val1, val2, num) {
                    var ival = flag ? val1 : val2;
                    if (!ival) return 0;
                    var value = this.internalNumberParser(ival, num);
                    return flag ? -value : value;
                }, DateParser);
            }(), parseRegex = /^([^0-9]*)(([0-9,]*[0-9]+)(\.[0-9]+)?)([Ee][+-]?[0-9]+)?([^0-9]*)$/, groupRegex = /,/g, NumberParser = /** @class */ function() {
                function NumberParser() {}
                return(/**
     * Returns the parser function for given skeleton.
     *
     * @param {string} culture -  Specifies the culture name to be which formatting.
     * @param {NumberFormatOptions} option - Specific the format in which number  will parsed.
     * @param {Object} cldr - Specifies the global cldr data collection.
     * @returns {Function} ?
     */ NumberParser.numberParser = function(culture, option, cldr) {
                    var numOptions, symbolpattern, _this = this, dependable = intl_base_IntlBase.getDependables(cldr, culture, '', !0), parseOptions = {
                        custom: !0
                    };
                    if (intl_base_IntlBase.formatRegex.test(option.format) || !option.format ? (util_extend(parseOptions, intl_base_IntlBase.getProperNumericSkeleton(option.format || 'N')), parseOptions.custom = !1, !parseOptions.fractionDigits && option.maximumFractionDigits && (parseOptions.maximumFractionDigits = option.maximumFractionDigits)) : util_extend(parseOptions, intl_base_IntlBase.customFormat(option.format, null, null)), util_getValue('numbers', dependable.parserObject), // eslint-disable-next-line
                    numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr), !0, !1), parseOptions.symbolRegex = ParserBase.getSymbolRegex(Object.keys(numOptions.symbolMatch)), // eslint-disable-next-line
                    parseOptions.infinity = numOptions.symbolNumberSystem.infinity, symbolpattern = intl_base_IntlBase.getSymbolPattern(parseOptions.type, numOptions.numberSystem, dependable.numericObject, parseOptions.isAccount)) {
                        var split = (symbolpattern = symbolpattern.replace(/\u00A4/g, intl_base_IntlBase.defaultCurrency)).split(';');
                        parseOptions.nData = intl_base_IntlBase.getFormatData(split[1] || '-' + split[0], !0, ''), parseOptions.pData = intl_base_IntlBase.getFormatData(split[0], !0, '');
                    }
                    return function(value) {
                        return _this.getParsedNumber(value, parseOptions, numOptions);
                    };
                }, /**
     * Returns parsed number for the provided formatting options
     *
     * @param {string} value ?
     * @param {NumericParts} options ?
     * @param {NumericOptions} numOptions ?
     * @returns {number} ?
     */ NumberParser.getParsedNumber = function(value, options, numOptions) {
                    if (-1 !== value.indexOf(options.infinity)) return 1 / 0;
                    value = ParserBase.convertValueParts(value, options.symbolRegex, numOptions.symbolMatch), 0 === (value = -1 !== (value = ParserBase.convertValueParts(value, numOptions.numberParseRegex, numOptions.numericPair)).indexOf('-') ? value.replace('-.', '-0.') : value).indexOf('.') && (value = '0' + value);
                    var isNegative, isPercent, tempValue, lead, end, ret, matches = value.match(parseRegex);
                    if (util_isNullOrUndefined(matches)) return NaN;
                    lead = matches[1], tempValue = matches[2];
                    var exponent = matches[5];
                    return end = matches[6], isPercent = (isNegative = options.custom ? lead === options.nData.nlead && end === options.nData.nend : -1 !== lead.indexOf(options.nData.nlead) && -1 !== end.indexOf(options.nData.nend)) ? options.nData.isPercent : options.pData.isPercent, tempValue = tempValue.replace(groupRegex, ''), exponent && (tempValue += exponent), ret = +tempValue, ('percent' === options.type || isPercent) && (ret /= 100), (options.custom || options.fractionDigits) && (ret = parseFloat(ret.toFixed(options.custom ? isNegative ? options.nData.maximumFractionDigits : options.pData.maximumFractionDigits : options.fractionDigits))), options.maximumFractionDigits && (ret = this.convertMaxFracDigits(tempValue, options, ret, isNegative)), isNegative && (ret *= -1), ret;
                }, NumberParser.convertMaxFracDigits = function(value, options, ret, isNegative) {
                    var decimalSplitValue = value.split('.');
                    return decimalSplitValue[1] && decimalSplitValue[1].length > options.maximumFractionDigits && (ret = +ret.toFixed(options.custom ? isNegative ? options.nData.maximumFractionDigits : options.pData.maximumFractionDigits : options.maximumFractionDigits)), ret;
                }, NumberParser);
            }(), Observer = /** @class */ function() {
                function Observer(context) {
                    this.ranArray = [], this.boundedEvents = {}, util_isNullOrUndefined(context) || (this.context = context);
                }
                return(/**
     * To attach handler for given property in current context.
     *
     * @param {string} property - specifies the name of the event.
     * @param {Function} handler - Specifies the handler function to be called while event notified.
     * @param {Object} context - Specifies the context binded to the handler.
     * @param {string} id - specifies the random generated id.
     * @returns {void}
     */ Observer.prototype.on = function(property, handler, context, id) {
                    if (!util_isNullOrUndefined(handler)) {
                        var cntxt = context || this.context;
                        if (this.notExist(property)) {
                            this.boundedEvents[property] = [
                                {
                                    handler: handler,
                                    context: cntxt
                                }
                            ];
                            return;
                        }
                        util_isNullOrUndefined(id) ? this.isHandlerPresent(this.boundedEvents[property], handler) || this.boundedEvents[property].push({
                            handler: handler,
                            context: cntxt
                        }) : -1 === this.ranArray.indexOf(id) && (this.ranArray.push(id), this.boundedEvents[property].push({
                            handler: handler,
                            context: cntxt,
                            id: id
                        }));
                    }
                }, /**
     * To remove handlers from a event attached using on() function.
     *
     * @param {string} property - specifies the name of the event.
     * @param {Function} handler - Optional argument specifies the handler function to be called while event notified.
     * @param {string} id - specifies the random generated id.
     * @returns {void} ?
     */ Observer.prototype.off = function(property, handler, id) {
                    if (!this.notExist(property)) {
                        var curObject = util_getValue(property, this.boundedEvents);
                        if (handler) {
                            for(var i = 0; i < curObject.length; i++)if (id) {
                                if (curObject[i].id === id) {
                                    curObject.splice(i, 1);
                                    var indexLocation = this.ranArray.indexOf(id);
                                    -1 !== indexLocation && this.ranArray.splice(indexLocation, 1);
                                    break;
                                }
                            } else if (handler === curObject[i].handler) {
                                curObject.splice(i, 1);
                                break;
                            }
                        } else delete this.boundedEvents[property];
                    }
                }, /**
     * To notify the handlers in the specified event.
     *
     * @param {string} property - Specifies the event to be notify.
     * @param {Object} argument - Additional parameters to pass while calling the handler.
     * @param {Function} successHandler - this function will invoke after event successfully triggered
     * @param {Function} errorHandler - this function will invoke after event if it was failure to call.
     * @returns {void} ?
     */ Observer.prototype.notify = function(property, argument, successHandler, errorHandler) {
                    if (this.notExist(property)) {
                        successHandler && successHandler.call(this, argument);
                        return;
                    }
                    argument && (argument.name = property);
                    var curObject = util_getValue(property, this.boundedEvents).slice(0);
                    if (window.Blazor) return this.blazorCallback(curObject, argument, successHandler, errorHandler, 0);
                    for(var _i = 0; _i < curObject.length; _i++){
                        var cur = curObject[_i];
                        cur.handler.call(cur.context, argument);
                    }
                    successHandler && successHandler.call(this, argument);
                }, Observer.prototype.blazorCallback = function(objs, argument, successHandler, errorHandler, index) {
                    var _this = this, isTrigger = index === objs.length - 1;
                    if (index < objs.length) {
                        var obj_1 = objs[index], promise = obj_1.handler.call(obj_1.context, argument);
                        if (promise && 'function' == typeof promise.then) {
                            if (!successHandler) return promise;
                            promise.then(function(data) {
                                if (util_extend(argument, argument, data = 'string' == typeof data && _this.isJson(data) ? JSON.parse(data, _this.dateReviver) : data, !0), !successHandler || !isTrigger) return _this.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);
                                successHandler.call(obj_1.context, argument);
                            }).catch(function(data) {
                                errorHandler && errorHandler.call(obj_1.context, 'string' == typeof data && _this.isJson(data) ? JSON.parse(data, _this.dateReviver) : data);
                            });
                        } else {
                            if (!successHandler || !isTrigger) return this.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);
                            successHandler.call(obj_1.context, argument);
                        }
                    }
                }, // eslint-disable-next-line
                Observer.prototype.dateReviver = function(key, value) {
                    return util_isBlazor && 'string' == typeof value && null !== value.match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/) ? new Date(value) : value;
                }, Observer.prototype.isJson = function(value) {
                    try {
                        JSON.parse(value);
                    } catch (e) {
                        return !1;
                    }
                    return !0;
                }, /**
     * To destroy handlers in the event
     *
     * @returns {void} ?
     */ Observer.prototype.destroy = function() {
                    this.boundedEvents = this.context = void 0;
                }, /**
     * Returns if the property exists.
     *
     * @param {string} prop ?
     * @returns {boolean} ?
     */ Observer.prototype.notExist = function(prop) {
                    // eslint-disable-next-line
                    return !1 === this.boundedEvents.hasOwnProperty(prop) || this.boundedEvents[prop].length <= 0;
                }, /**
     * Returns if the handler is present.
     *
     * @param {BoundOptions[]} boundedEvents ?
     * @param {Function} handler ?
     * @returns {boolean} ?
     */ Observer.prototype.isHandlerPresent = function(boundedEvents, handler) {
                    for(var _i = 0; _i < boundedEvents.length; _i++)if (boundedEvents[_i].handler === handler) return !0;
                    return !1;
                }, Observer);
            }(), onIntlChange = new Observer(), cldrData = {}, defaultCulture = 'en-US', defaultCurrencyCode = 'USD', Internationalization = /** @class */ function() {
                function Internationalization(cultureName) {
                    cultureName && (this.culture = cultureName);
                }
                return(/**
     * Returns the format function for given options.
     *
     * @param {DateFormatOptions} options - Specifies the format options in which the format function will return.
     * @returns {Function} ?
     */ Internationalization.prototype.getDateFormat = function(options) {
                    return DateFormat.dateFormat(this.getCulture(), options || {
                        type: 'date',
                        skeleton: 'short'
                    }, cldrData);
                }, /**
     * Returns the format function for given options.
     *
     * @param {NumberFormatOptions} options - Specifies the format options in which the format function will return.
     * @returns {Function} ?
     */ Internationalization.prototype.getNumberFormat = function(options) {
                    return options && !options.currency && (options.currency = defaultCurrencyCode), NumberFormat.numberFormatter(this.getCulture(), options || {}, cldrData);
                }, /**
     * Returns the parser function for given options.
     *
     * @param {DateFormatOptions} options - Specifies the format options in which the parser function will return.
     * @returns {Function} ?
     */ Internationalization.prototype.getDateParser = function(options) {
                    return DateParser.dateParser(this.getCulture(), options || {
                        skeleton: 'short',
                        type: 'date'
                    }, cldrData);
                }, /**
     * Returns the parser function for given options.
     *
     * @param {NumberFormatOptions} options - Specifies the format options in which the parser function will return.
     * @returns {Function} ?
     */ Internationalization.prototype.getNumberParser = function(options) {
                    return NumberParser.numberParser(this.getCulture(), options || {
                        format: 'N'
                    }, cldrData);
                }, /**
     * Returns the formatted string based on format options.
     *
     * @param {number} value - Specifies the number to format.
     * @param {NumberFormatOptions} option - Specifies the format options in which the number will be formatted.
     * @returns {string} ?
     */ Internationalization.prototype.formatNumber = function(value, option) {
                    return this.getNumberFormat(option)(value);
                }, /**
     * Returns the formatted date string based on format options.
     *
     * @param {Date} value - Specifies the number to format.
     * @param {DateFormatOptions} option - Specifies the format options in which the number will be formatted.
     * @returns {string} ?
     */ Internationalization.prototype.formatDate = function(value, option) {
                    return this.getDateFormat(option)(value);
                }, /**
     * Returns the date object for given date string and options.
     *
     * @param {string} value - Specifies the string to parse.
     * @param {DateFormatOptions} option - Specifies the parse options in which the date string will be parsed.
     * @returns {Date} ?
     */ Internationalization.prototype.parseDate = function(value, option) {
                    return this.getDateParser(option)(value);
                }, /**
     * Returns the number object from the given string value and options.
     *
     * @param {string} value - Specifies the string to parse.
     * @param {NumberFormatOptions} option - Specifies the parse options in which the  string number  will be parsed.
     * @returns {number} ?
     */ Internationalization.prototype.parseNumber = function(value, option) {
                    return this.getNumberParser(option)(value);
                }, /**
     * Returns Native Date Time Pattern
     *
     * @param {DateFormatOptions} option - Specifies the parse options for resultant date time pattern.
     * @param {boolean} isExcelFormat - Specifies format value to be converted to excel pattern.
     * @returns {string} ?
     * @private
     */ Internationalization.prototype.getDatePattern = function(option, isExcelFormat) {
                    return intl_base_IntlBase.getActualDateTimeFormat(this.getCulture(), option, cldrData, isExcelFormat);
                }, /**
     * Returns Native Number Pattern
     *
     * @param {NumberFormatOptions} option - Specifies the parse options for resultant number pattern.
     * @param {boolean} isExcel ?
     * @returns {string} ?
     * @private
     */ Internationalization.prototype.getNumberPattern = function(option, isExcel) {
                    return intl_base_IntlBase.getActualNumberFormat(this.getCulture(), option, cldrData, isExcel);
                }, /**
     * Returns the First Day of the Week
     *
     * @returns {number} ?
     */ Internationalization.prototype.getFirstDayOfWeek = function() {
                    return intl_base_IntlBase.getWeekData(this.getCulture(), cldrData);
                }, /**
     * Returns the culture
     *
     * @returns {string} ?
     */ Internationalization.prototype.getCulture = function() {
                    return this.culture || defaultCulture;
                }, Internationalization);
            }();
            /**
 * To get the numeric CLDR object for given culture
 *
 * @param {string} locale - Specifies the locale for which numericObject to be returned.
 * @param {string} type ?
 * @returns {Object} ?
 * @ignore
 * @private
 */ function getNumericObject(locale, type) {
                // eslint-disable-next-line
                var numObject = intl_base_IntlBase.getDependables(cldrData, locale, '', !0).numericObject, dateObject = intl_base_IntlBase.getDependables(cldrData, locale, '').dateObject, numSystem = util_getValue('defaultNumberingSystem', numObject), symbPattern = util_getValue('symbols-numberSystem-' + numSystem, numObject), pattern = intl_base_IntlBase.getSymbolPattern(type || 'decimal', numSystem, numObject, !1);
                return util_extend(symbPattern, intl_base_IntlBase.getFormatData(pattern, !0, '', !0), {
                    dateSeparator: intl_base_IntlBase.getDateSeparator(dateObject)
                });
            }
            var blazorCultureFormats = {
                'en-US': {
                    d: 'M/d/y',
                    D: 'EEEE, MMMM d, y',
                    f: 'EEEE, MMMM d, y h:mm a',
                    F: 'EEEE, MMMM d, y h:mm:s a',
                    g: 'M/d/y h:mm a',
                    G: 'M/d/yyyy h:mm:ss tt',
                    m: 'MMMM d',
                    M: 'MMMM d',
                    r: 'ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'',
                    R: 'ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'',
                    s: 'yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss',
                    t: 'h:mm tt',
                    T: 'h:m:s tt',
                    u: 'yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'',
                    U: 'dddd, MMMM d, yyyy h:mm:ss tt',
                    y: 'MMMM yyyy',
                    Y: 'MMMM yyyy'
                }
            };
            !function(IntlBase) {
                // tslint:disable-next-line:max-line-length
                IntlBase.negativeDataRegex = /^(('[^']+'|''|[^*#@0,.E])*)(\*.)?((([#,]*[0,]*0+)(\.0*[0-9]*#*)?)|([#,]*@+#*))(E\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/, IntlBase.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\*.)?((([0#,]*[0,]*[0#]*[0#\ ]*)(\.[0#]*)?)|([#,]*@+#*))(E\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/, IntlBase.latnParseRegex = /0|1|2|3|4|5|6|7|8|9/g;
                var fractionRegex = /[0-9]/g;
                IntlBase.defaultCurrency = '$';
                var patternRegex = /G|M|L|H|c|'| a|yy|y|EEEE|E/g, patternMatch = {
                    G: '',
                    M: 'm',
                    L: 'm',
                    H: 'h',
                    c: 'd',
                    '\'': '"',
                    ' a': ' AM/PM',
                    yy: 'yy',
                    y: 'yyyy',
                    EEEE: 'dddd',
                    E: 'ddd'
                };
                IntlBase.dateConverterMapper = /dddd|ddd/ig, IntlBase.islamicRegex = /^islamic/;
                var firstDayMapper = {
                    sun: 0,
                    mon: 1,
                    tue: 2,
                    wed: 3,
                    thu: 4,
                    fri: 5,
                    sat: 6
                };
                IntlBase.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i, IntlBase.currencyFormatRegex = /(^[ca]{1})([0-1]?[0-9]|20)?$/i, IntlBase.curWithoutNumberRegex = /(c|a)$/ig;
                var typeMapper = {
                    $: 'isCurrency',
                    '%': 'isPercent',
                    '-': 'isNegative',
                    0: 'nlead',
                    1: 'nend'
                };
                /**
     * Returns the resultant pattern based on the skeleton, dateObject and the type provided
     *
     * @private
     * @param {string} skeleton ?
     * @param {Object} dateObject ?
     * @param {string} type ?
     * @param {boolean} isIslamic ?
     * @param {string} blazorCulture ?
     * @returns {string} ?
     */ function getResultantPattern(skeleton, dateObject, type, isIslamic, blazorCulture) {
                    var resPattern, iType = type || 'date';
                    if (blazorCulture) resPattern = compareBlazorDateFormats({
                        skeleton: skeleton
                    }, blazorCulture).format || compareBlazorDateFormats({
                        skeleton: 'd'
                    }, 'en-US').format;
                    else {
                        if (-1 !== IntlBase.basicPatterns.indexOf(skeleton)) {
                            if (resPattern = util_getValue(iType + 'Formats.' + skeleton, dateObject), 'dateTime' === iType) {
                                var dPattern = util_getValue('dateFormats.' + skeleton, dateObject), tPattern = util_getValue('timeFormats.' + skeleton, dateObject);
                                resPattern = resPattern.replace('{1}', dPattern).replace('{0}', tPattern);
                            }
                        } else resPattern = util_getValue('dateTimeFormats.availableFormats.' + skeleton, dateObject);
                        util_isUndefined(resPattern) && 'yMd' === skeleton && (resPattern = 'M/d/y');
                    }
                    return resPattern;
                }
                /**
     * Returns the dependable object for provided cldr data and culture
     *
     * @private
     * @param {Object} cldr ?
     * @param {string} culture ?
     * @param {string} mode ?
     * @param {boolean} isNumber ?
     * @returns {any} ?
     */ function getDependables(cldr, culture, mode, isNumber) {
                    var ret = {};
                    return ret.parserObject = ParserBase.getMainObject(cldr, culture) || IntlBase.defaultObject, isNumber ? ret.numericObject = util_getValue('numbers', ret.parserObject) : ret.dateObject = util_getValue('dates.calendars.' + (mode || 'gregorian'), ret.parserObject), ret;
                }
                /**
     * Returns the symbol pattern for provided parameters
     *
     * @private
     * @param {string} type ?
     * @param {string} numSystem ?
     * @param {Object} obj ?
     * @param {boolean} isAccount ?
     * @returns {string} ?
     */ function getSymbolPattern(type, numSystem, obj, isAccount) {
                    return util_getValue(type + 'Formats-numberSystem-' + numSystem + (isAccount ? '.accounting' : '.standard'), obj) || (isAccount ? util_getValue(type + 'Formats-numberSystem-' + numSystem + '.standard', obj) : '');
                }
                /**
     *
     * @param {string} format ?
     * @returns {string} ?
     */ function ConvertDateToWeekFormat(format) {
                    return format.match(IntlBase.dateConverterMapper), format;
                }
                /**
     *
     * @param {DateFormatOptions} formatOptions ?
     * @param {string} culture ?
     * @returns {DateFormatOptions} ?
     */ function compareBlazorDateFormats(formatOptions, culture) {
                    var format = formatOptions.format || formatOptions.skeleton, curFormatMapper = util_getValue((culture || 'en-US') + '.' + format, blazorCultureFormats);
                    return curFormatMapper || (curFormatMapper = util_getValue('en-US.' + format, blazorCultureFormats)), curFormatMapper && (curFormatMapper = ConvertDateToWeekFormat(curFormatMapper), formatOptions.format = curFormatMapper.replace(/tt/, 'a')), formatOptions;
                }
                /**
     * Returns proper numeric skeleton
     *
     * @private
     * @param {string} skeleton ?
     * @returns {any} ?
     */ function getProperNumericSkeleton(skeleton) {
                    var matches = skeleton.match(IntlBase.formatRegex), ret = {}, pattern = matches[1].toUpperCase();
                    return ret.isAccount = 'A' === pattern, // eslint-disable-next-line
                    ret.type = IntlBase.patternMatcher[pattern], skeleton.length > 1 && (ret.fractionDigits = parseInt(matches[2], 10)), ret;
                }
                /**
     * Returns format data for number formatting like minimum fraction, maximum fraction, etc..,
     *
     * @private
     * @param {string} pattern ?
     * @param {boolean} needFraction ?
     * @param {string} cSymbol ?
     * @param {boolean} fractionOnly ?
     * @returns {any} ?
     */ function getFormatData(pattern, needFraction, cSymbol, fractionOnly) {
                    var nData = fractionOnly ? {} : {
                        nlead: '',
                        nend: ''
                    }, match = pattern.match(IntlBase.customRegex);
                    if (match) {
                        fractionOnly || (nData.nlead = changeCurrencySymbol(match[1], cSymbol), nData.nend = changeCurrencySymbol(match[10], cSymbol), nData.groupPattern = match[4]);
                        var fraction = match[7];
                        if (fraction && needFraction) {
                            var fmatch = fraction.match(fractionRegex);
                            util_isNullOrUndefined(fmatch) ? nData.minimumFraction = 0 : nData.minimumFraction = fmatch.length, nData.maximumFraction = fraction.length - 1;
                        }
                    }
                    return nData;
                }
                /**
     * Changes currency symbol
     *
     * @private
     * @param {string} val ?
     * @param {string} sym ?
     * @returns {string} ?
     */ function changeCurrencySymbol(val, sym) {
                    return val ? val.replace(IntlBase.defaultCurrency, sym) : '';
                }
                /**
     * Returns currency symbol based on currency code ?
     *
     * @private
     * @param {Object} numericObject ?
     * @param {string} currencyCode ?
     * @param {string} altSymbol ?
     * @returns {string} ?
     */ function getCurrencySymbol(numericObject, currencyCode, altSymbol) {
                    return util_getValue('currencies.' + currencyCode + (altSymbol ? '.' + altSymbol : '.symbol'), numericObject) || util_getValue('currencies.' + currencyCode + '.symbol-alt-narrow', numericObject) || '$';
                }
                /**
     * Returns custom formatting options
     *
     * @private
     * @param {string} format ?
     * @param {CommonOptions} dOptions ?
     * @param {Object} numObject ?
     * @returns {any} ?
     */ function customNumberFormat(format, dOptions, numObject) {
                    var cOptions = {
                        type: 'decimal',
                        minimumFractionDigits: 0,
                        maximumFractionDigits: 0
                    }, pattern = format.match(IntlBase.customRegex);
                    if (util_isNullOrUndefined(pattern) || '' === pattern[5] && 'N/A' !== format) return cOptions.type = void 0, cOptions;
                    cOptions.nlead = pattern[1], cOptions.nend = pattern[10];
                    var integerPart = pattern[6], spaceCapture = !!integerPart.match(/\ $/g), spaceGrouping = -1 !== integerPart.replace(/\ $/g, '').indexOf(' ');
                    cOptions.useGrouping = -1 !== integerPart.indexOf(',') || spaceGrouping, integerPart = integerPart.replace(/,/g, '');
                    var fractionPart = pattern[7];
                    if (-1 !== integerPart.indexOf('0') && (cOptions.minimumIntegerDigits = integerPart.length - integerPart.indexOf('0')), !util_isNullOrUndefined(fractionPart) && (cOptions.minimumFractionDigits = fractionPart.lastIndexOf('0'), cOptions.maximumFractionDigits = fractionPart.lastIndexOf('#'), -1 === cOptions.minimumFractionDigits && (cOptions.minimumFractionDigits = 0), (-1 === cOptions.maximumFractionDigits || cOptions.maximumFractionDigits < cOptions.minimumFractionDigits) && (cOptions.maximumFractionDigits = cOptions.minimumFractionDigits)), util_isNullOrUndefined(dOptions) ? util_extend(cOptions, isCurrencyPercent([
                        cOptions.nlead,
                        cOptions.nend
                    ], '%', '%')) : (util_extend(cOptions, isCurrencyPercent([
                        cOptions.nlead,
                        cOptions.nend
                    ], '$', dOptions.currencySymbol)), cOptions.isCurrency || util_extend(cOptions, isCurrencyPercent([
                        cOptions.nlead,
                        cOptions.nend
                    ], '%', dOptions.percentSymbol))), !util_isNullOrUndefined(numObject)) {
                        var symbolPattern = getSymbolPattern(cOptions.type, dOptions.numberMapper.numberSystem, numObject, !1);
                        cOptions.useGrouping && (// eslint-disable-next-line
                        cOptions.groupSeparator = spaceGrouping ? ' ' : dOptions.numberMapper.numberSymbols.group, cOptions.groupData = NumberFormat.getGroupingDetails(symbolPattern.split(';')[0])), cOptions.nlead = cOptions.nlead.replace(/'/g, ''), cOptions.nend = spaceCapture ? ' ' + cOptions.nend.replace(/'/g, '') : cOptions.nend.replace(/'/g, '');
                    }
                    return cOptions;
                }
                /**
     * Returns formatting options for currency or percent type
     *
     * @private
     * @param {string[]} parts ?
     * @param {string} actual ?
     * @param {string} symbol ?
     * @returns {any} ?
     */ function isCurrencyPercent(parts, actual, symbol) {
                    for(var options = {
                        nlead: parts[0],
                        nend: parts[1]
                    }, i = 0; i < 2; i++){
                        var part = parts[i], loc = part.indexOf(actual);
                        if (-1 !== loc && (loc < part.indexOf('\'') || loc > part.lastIndexOf('\''))) {
                            // eslint-disable-next-line
                            options[typeMapper[i]] = part.substr(0, loc) + symbol + part.substr(loc + 1), // eslint-disable-next-line
                            options[typeMapper[actual]] = !0, options.type = options.isCurrency ? 'currency' : 'percent';
                            break;
                        }
                    }
                    return options;
                }
                /**
     *
     * @param {string} pattern ?
     * @param {number} minDigits ?
     * @param {number} maxDigits ?
     * @returns {string} ?
     */ function fractionDigitsPattern(pattern, minDigits, maxDigits) {
                    pattern += '.';
                    for(var a = 0; a < minDigits; a++)pattern += '0';
                    if (minDigits < maxDigits) for(var diff = maxDigits - minDigits, b = 0; b < diff; b++)pattern += '#';
                    return pattern;
                }
                /**
     *
     * @param {string} pattern ?
     * @param {number} digits ?
     * @returns {string} ?
     */ function minimumIntegerPattern(pattern, digits) {
                    for(var temp = pattern.split('.'), integer = '', x = 0; x < digits; x++)integer += '0';
                    return temp[1] ? integer + '.' + temp[1] : integer;
                }
                /**
     *
     * @param {string} pattern ?
     * @returns {string} ?
     */ function groupingPattern(pattern) {
                    var temp = pattern.split('.'), integer = temp[0], no = 3 - integer.length % 3;
                    integer = (no && 1 === no ? '#' : 2 === no ? '##' : '') + integer, pattern = '';
                    for(var x = integer.length - 1; x > 0; x -= 3)pattern = ',' + integer[x - 2] + integer[x - 1] + integer[x] + pattern;
                    return pattern = pattern.slice(1), temp[1] ? pattern + '.' + temp[1] : pattern;
                }
                IntlBase.dateParseRegex = /([a-z])\1*|'([^']|'')+'|''|./gi, IntlBase.basicPatterns = [
                    'short',
                    'medium',
                    'long',
                    'full'
                ], /* tslint:disable:quotemark */ IntlBase.defaultObject = {
                    dates: {
                        calendars: {
                            gregorian: {
                                months: {
                                    'stand-alone': {
                                        abbreviated: {
                                            1: 'Jan',
                                            2: 'Feb',
                                            3: 'Mar',
                                            4: 'Apr',
                                            5: 'May',
                                            6: 'Jun',
                                            7: 'Jul',
                                            8: 'Aug',
                                            9: 'Sep',
                                            10: 'Oct',
                                            11: 'Nov',
                                            12: 'Dec'
                                        },
                                        narrow: {
                                            1: 'J',
                                            2: 'F',
                                            3: 'M',
                                            4: 'A',
                                            5: 'M',
                                            6: 'J',
                                            7: 'J',
                                            8: 'A',
                                            9: 'S',
                                            10: 'O',
                                            11: 'N',
                                            12: 'D'
                                        },
                                        wide: {
                                            1: 'January',
                                            2: 'February',
                                            3: 'March',
                                            4: 'April',
                                            5: 'May',
                                            6: 'June',
                                            7: 'July',
                                            8: 'August',
                                            9: 'September',
                                            10: 'October',
                                            11: 'November',
                                            12: 'December'
                                        }
                                    }
                                },
                                days: {
                                    'stand-alone': {
                                        abbreviated: {
                                            sun: 'Sun',
                                            mon: 'Mon',
                                            tue: 'Tue',
                                            wed: 'Wed',
                                            thu: 'Thu',
                                            fri: 'Fri',
                                            sat: 'Sat'
                                        },
                                        narrow: {
                                            sun: 'S',
                                            mon: 'M',
                                            tue: 'T',
                                            wed: 'W',
                                            thu: 'T',
                                            fri: 'F',
                                            sat: 'S'
                                        },
                                        short: {
                                            sun: 'Su',
                                            mon: 'Mo',
                                            tue: 'Tu',
                                            wed: 'We',
                                            thu: 'Th',
                                            fri: 'Fr',
                                            sat: 'Sa'
                                        },
                                        wide: {
                                            sun: 'Sunday',
                                            mon: 'Monday',
                                            tue: 'Tuesday',
                                            wed: 'Wednesday',
                                            thu: 'Thursday',
                                            fri: 'Friday',
                                            sat: 'Saturday'
                                        }
                                    }
                                },
                                dayPeriods: {
                                    format: {
                                        wide: {
                                            am: 'AM',
                                            pm: 'PM'
                                        }
                                    }
                                },
                                eras: {
                                    eraNames: {
                                        0: 'Before Christ',
                                        '0-alt-variant': 'Before Common Era',
                                        1: 'Anno Domini',
                                        '1-alt-variant': 'Common Era'
                                    },
                                    eraAbbr: {
                                        0: 'BC',
                                        '0-alt-variant': 'BCE',
                                        1: 'AD',
                                        '1-alt-variant': 'CE'
                                    },
                                    eraNarrow: {
                                        0: 'B',
                                        '0-alt-variant': 'BCE',
                                        1: 'A',
                                        '1-alt-variant': 'CE'
                                    }
                                },
                                dateFormats: {
                                    full: 'EEEE, MMMM d, y',
                                    long: 'MMMM d, y',
                                    medium: 'MMM d, y',
                                    short: 'M/d/yy'
                                },
                                timeFormats: {
                                    full: 'h:mm:ss a zzzz',
                                    long: 'h:mm:ss a z',
                                    medium: 'h:mm:ss a',
                                    short: 'h:mm a'
                                },
                                dateTimeFormats: {
                                    full: '{1} \'at\' {0}',
                                    long: '{1} \'at\' {0}',
                                    medium: '{1}, {0}',
                                    short: '{1}, {0}',
                                    availableFormats: {
                                        d: 'd',
                                        E: 'ccc',
                                        Ed: 'd E',
                                        Ehm: 'E h:mm a',
                                        EHm: 'E HH:mm',
                                        Ehms: 'E h:mm:ss a',
                                        EHms: 'E HH:mm:ss',
                                        Gy: 'y G',
                                        GyMMM: 'MMM y G',
                                        GyMMMd: 'MMM d, y G',
                                        GyMMMEd: 'E, MMM d, y G',
                                        h: 'h a',
                                        H: 'HH',
                                        hm: 'h:mm a',
                                        Hm: 'HH:mm',
                                        hms: 'h:mm:ss a',
                                        Hms: 'HH:mm:ss',
                                        hmsv: 'h:mm:ss a v',
                                        Hmsv: 'HH:mm:ss v',
                                        hmv: 'h:mm a v',
                                        Hmv: 'HH:mm v',
                                        M: 'L',
                                        Md: 'M/d',
                                        MEd: 'E, M/d',
                                        MMM: 'LLL',
                                        MMMd: 'MMM d',
                                        MMMEd: 'E, MMM d',
                                        MMMMd: 'MMMM d',
                                        ms: 'mm:ss',
                                        y: 'y',
                                        yM: 'M/y',
                                        yMd: 'M/d/y',
                                        yMEd: 'E, M/d/y',
                                        yMMM: 'MMM y',
                                        yMMMd: 'MMM d, y',
                                        yMMMEd: 'E, MMM d, y',
                                        yMMMM: 'MMMM y'
                                    }
                                }
                            },
                            islamic: {
                                months: {
                                    'stand-alone': {
                                        abbreviated: {
                                            1: 'Muh.',
                                            2: 'Saf.',
                                            3: 'Rab. I',
                                            4: 'Rab. II',
                                            5: 'Jum. I',
                                            6: 'Jum. II',
                                            7: 'Raj.',
                                            8: 'Sha.',
                                            9: 'Ram.',
                                            10: 'Shaw.',
                                            11: 'Dhuʻl-Q.',
                                            12: 'Dhuʻl-H.'
                                        },
                                        narrow: {
                                            1: '1',
                                            2: '2',
                                            3: '3',
                                            4: '4',
                                            5: '5',
                                            6: '6',
                                            7: '7',
                                            8: '8',
                                            9: '9',
                                            10: '10',
                                            11: '11',
                                            12: '12'
                                        },
                                        wide: {
                                            1: 'Muharram',
                                            2: 'Safar',
                                            3: 'Rabiʻ I',
                                            4: 'Rabiʻ II',
                                            5: 'Jumada I',
                                            6: 'Jumada II',
                                            7: 'Rajab',
                                            8: 'Shaʻban',
                                            9: 'Ramadan',
                                            10: 'Shawwal',
                                            11: 'Dhuʻl-Qiʻdah',
                                            12: 'Dhuʻl-Hijjah'
                                        }
                                    }
                                },
                                days: {
                                    'stand-alone': {
                                        abbreviated: {
                                            sun: 'Sun',
                                            mon: 'Mon',
                                            tue: 'Tue',
                                            wed: 'Wed',
                                            thu: 'Thu',
                                            fri: 'Fri',
                                            sat: 'Sat'
                                        },
                                        narrow: {
                                            sun: 'S',
                                            mon: 'M',
                                            tue: 'T',
                                            wed: 'W',
                                            thu: 'T',
                                            fri: 'F',
                                            sat: 'S'
                                        },
                                        short: {
                                            sun: 'Su',
                                            mon: 'Mo',
                                            tue: 'Tu',
                                            wed: 'We',
                                            thu: 'Th',
                                            fri: 'Fr',
                                            sat: 'Sa'
                                        },
                                        wide: {
                                            sun: 'Sunday',
                                            mon: 'Monday',
                                            tue: 'Tuesday',
                                            wed: 'Wednesday',
                                            thu: 'Thursday',
                                            fri: 'Friday',
                                            sat: 'Saturday'
                                        }
                                    }
                                },
                                dayPeriods: {
                                    format: {
                                        wide: {
                                            am: 'AM',
                                            pm: 'PM'
                                        }
                                    }
                                },
                                eras: {
                                    eraNames: {
                                        0: 'AH'
                                    },
                                    eraAbbr: {
                                        0: 'AH'
                                    },
                                    eraNarrow: {
                                        0: 'AH'
                                    }
                                },
                                dateFormats: {
                                    full: 'EEEE, MMMM d, y G',
                                    long: 'MMMM d, y G',
                                    medium: 'MMM d, y G',
                                    short: 'M/d/y GGGGG'
                                },
                                timeFormats: {
                                    full: 'h:mm:ss a zzzz',
                                    long: 'h:mm:ss a z',
                                    medium: 'h:mm:ss a',
                                    short: 'h:mm a'
                                },
                                dateTimeFormats: {
                                    full: '{1} \'at\' {0}',
                                    long: '{1} \'at\' {0}',
                                    medium: '{1}, {0}',
                                    short: '{1}, {0}',
                                    availableFormats: {
                                        d: 'd',
                                        E: 'ccc',
                                        Ed: 'd E',
                                        Ehm: 'E h:mm a',
                                        EHm: 'E HH:mm',
                                        Ehms: 'E h:mm:ss a',
                                        EHms: 'E HH:mm:ss',
                                        Gy: 'y G',
                                        GyMMM: 'MMM y G',
                                        GyMMMd: 'MMM d, y G',
                                        GyMMMEd: 'E, MMM d, y G',
                                        h: 'h a',
                                        H: 'HH',
                                        hm: 'h:mm a',
                                        Hm: 'HH:mm',
                                        hms: 'h:mm:ss a',
                                        Hms: 'HH:mm:ss',
                                        M: 'L',
                                        Md: 'M/d',
                                        MEd: 'E, M/d',
                                        MMM: 'LLL',
                                        MMMd: 'MMM d',
                                        MMMEd: 'E, MMM d',
                                        MMMMd: 'MMMM d',
                                        ms: 'mm:ss',
                                        y: 'y G',
                                        yyyy: 'y G',
                                        yyyyM: 'M/y GGGGG',
                                        yyyyMd: 'M/d/y GGGGG',
                                        yyyyMEd: 'E, M/d/y GGGGG',
                                        yyyyMMM: 'MMM y G',
                                        yyyyMMMd: 'MMM d, y G',
                                        yyyyMMMEd: 'E, MMM d, y G',
                                        yyyyMMMM: 'MMMM y G',
                                        yyyyQQQ: 'QQQ y G',
                                        yyyyQQQQ: 'QQQQ y G'
                                    }
                                }
                            }
                        },
                        timeZoneNames: {
                            hourFormat: '+HH:mm;-HH:mm',
                            gmtFormat: 'GMT{0}',
                            gmtZeroFormat: 'GMT'
                        }
                    },
                    numbers: {
                        currencies: {
                            USD: {
                                displayName: 'US Dollar',
                                symbol: '$',
                                'symbol-alt-narrow': '$'
                            },
                            EUR: {
                                displayName: 'Euro',
                                symbol: '€',
                                'symbol-alt-narrow': '€'
                            },
                            GBP: {
                                displayName: 'British Pound',
                                'symbol-alt-narrow': '£'
                            }
                        },
                        defaultNumberingSystem: 'latn',
                        minimumGroupingDigits: '1',
                        'symbols-numberSystem-latn': {
                            decimal: '.',
                            group: ',',
                            list: ';',
                            percentSign: '%',
                            plusSign: '+',
                            minusSign: '-',
                            exponential: 'E',
                            superscriptingExponent: '×',
                            perMille: '‰',
                            infinity: '∞',
                            nan: 'NaN',
                            timeSeparator: ':'
                        },
                        'decimalFormats-numberSystem-latn': {
                            standard: '#,##0.###'
                        },
                        'percentFormats-numberSystem-latn': {
                            standard: '#,##0%'
                        },
                        'currencyFormats-numberSystem-latn': {
                            standard: '¤#,##0.00',
                            accounting: '¤#,##0.00;(¤#,##0.00)'
                        },
                        'scientificFormats-numberSystem-latn': {
                            standard: '#E0'
                        }
                    }
                }, IntlBase.blazorDefaultObject = {
                    numbers: {
                        mapper: {
                            0: '0',
                            1: '1',
                            2: '2',
                            3: '3',
                            4: '4',
                            5: '5',
                            6: '6',
                            7: '7',
                            8: '8',
                            9: '9'
                        },
                        mapperDigits: '0123456789',
                        numberSymbols: {
                            decimal: '.',
                            group: ',',
                            plusSign: '+',
                            minusSign: '-',
                            percentSign: '%',
                            nan: 'NaN',
                            timeSeparator: ':',
                            infinity: '∞'
                        },
                        timeSeparator: ':',
                        currencySymbol: '$',
                        currencypData: {
                            nlead: '$',
                            nend: '',
                            groupSeparator: ',',
                            groupData: {
                                primary: 3
                            },
                            maximumFraction: 2,
                            minimumFraction: 2
                        },
                        percentpData: {
                            nlead: '',
                            nend: '%',
                            groupSeparator: ',',
                            groupData: {
                                primary: 3
                            },
                            maximumFraction: 2,
                            minimumFraction: 2
                        },
                        percentnData: {
                            nlead: '-',
                            nend: '%',
                            groupSeparator: ',',
                            groupData: {
                                primary: 3
                            },
                            maximumFraction: 2,
                            minimumFraction: 2
                        },
                        currencynData: {
                            nlead: '($',
                            nend: ')',
                            groupSeparator: ',',
                            groupData: {
                                primary: 3
                            },
                            maximumFraction: 2,
                            minimumFraction: 2
                        },
                        decimalnData: {
                            nlead: '-',
                            nend: '',
                            groupData: {
                                primary: 3
                            },
                            maximumFraction: 2,
                            minimumFraction: 2
                        },
                        decimalpData: {
                            nlead: '',
                            nend: '',
                            groupData: {
                                primary: 3
                            },
                            maximumFraction: 2,
                            minimumFraction: 2
                        }
                    },
                    dates: {
                        dayPeriods: {
                            am: 'AM',
                            pm: 'PM'
                        },
                        dateSeperator: '/',
                        days: {
                            abbreviated: {
                                sun: 'Sun',
                                mon: 'Mon',
                                tue: 'Tue',
                                wed: 'Wed',
                                thu: 'Thu',
                                fri: 'Fri',
                                sat: 'Sat'
                            },
                            short: {
                                sun: 'Su',
                                mon: 'Mo',
                                tue: 'Tu',
                                wed: 'We',
                                thu: 'Th',
                                fri: 'Fr',
                                sat: 'Sa'
                            },
                            wide: {
                                sun: 'Sunday',
                                mon: 'Monday',
                                tue: 'Tuesday',
                                wed: 'Wednesday',
                                thu: 'Thursday',
                                fri: 'Friday',
                                sat: 'Saturday'
                            }
                        },
                        months: {
                            abbreviated: {
                                1: 'Jan',
                                2: 'Feb',
                                3: 'Mar',
                                4: 'Apr',
                                5: 'May',
                                6: 'Jun',
                                7: 'Jul',
                                8: 'Aug',
                                9: 'Sep',
                                10: 'Oct',
                                11: 'Nov',
                                12: 'Dec'
                            },
                            wide: {
                                1: 'January',
                                2: 'February',
                                3: 'March',
                                4: 'April',
                                5: 'May',
                                6: 'June',
                                7: 'July',
                                8: 'August',
                                9: 'September',
                                10: 'October',
                                11: 'November',
                                12: 'December'
                            }
                        },
                        eras: {
                            1: 'AD'
                        }
                    }
                }, /* tslint:enable:quotemark */ IntlBase.monthIndex = {
                    3: 'abbreviated',
                    4: 'wide',
                    5: 'narrow',
                    1: 'abbreviated'
                }, /**
     *
     */ IntlBase.month = 'months', IntlBase.days = 'days', /**
     * Default numerber Object
     */ IntlBase.patternMatcher = {
                    C: 'currency',
                    P: 'percent',
                    N: 'decimal',
                    A: 'currency',
                    E: 'scientific'
                }, IntlBase.getResultantPattern = getResultantPattern, IntlBase.getDependables = getDependables, IntlBase.getSymbolPattern = getSymbolPattern, IntlBase.ConvertDateToWeekFormat = ConvertDateToWeekFormat, IntlBase.compareBlazorDateFormats = compareBlazorDateFormats, IntlBase.getProperNumericSkeleton = getProperNumericSkeleton, IntlBase.getFormatData = getFormatData, IntlBase.changeCurrencySymbol = changeCurrencySymbol, IntlBase.getCurrencySymbol = getCurrencySymbol, IntlBase.customFormat = /**
     * Returns formatting options for custom number format
     *
     * @private
     * @param {string} format ?
     * @param {CommonOptions} dOptions ?
     * @param {any} obj ?
     * @returns {any} ?
     */ function(format, dOptions, obj) {
                    for(var options = {}, formatSplit = format.split(';'), data = [
                        'pData',
                        'nData',
                        'zeroData'
                    ], i = 0; i < formatSplit.length; i++)// eslint-disable-next-line
                    options[data[i]] = customNumberFormat(formatSplit[i], dOptions, obj);
                    return util_isNullOrUndefined(options.nData) && (options.nData = util_extend({}, options.pData), options.nData.nlead = util_isNullOrUndefined(dOptions) ? '-' + options.nData.nlead : dOptions.minusSymbol + options.nData.nlead), options;
                }, IntlBase.customNumberFormat = customNumberFormat, IntlBase.isCurrencyPercent = isCurrencyPercent, IntlBase.getDateSeparator = /**
     * Returns culture based date separator
     *
     * @private
     * @param {Object} dateObj ?
     * @returns {string} ?
     */ function(dateObj) {
                    var value = (util_getValue('dateFormats.short', dateObj) || '').match(/[d‏M‏]([^d‏M])[d‏M‏]/i);
                    return value ? value[1] : '/';
                }, IntlBase.getActualDateTimeFormat = /**
     * Returns Native Date Time pattern
     *
     * @private
     * @param {string} culture ?
     * @param {DateFormatOptions} options ?
     * @param {Object} cldr ?
     * @param {boolean} isExcelFormat ?
     * @returns {string} ?
     */ function(culture, options, cldr, isExcelFormat) {
                    var dependable = getDependables(cldr, culture, options.calendar), actualPattern = options.format || getResultantPattern(options.skeleton, dependable.dateObject, options.type);
                    if (isExcelFormat) {
                        if (-1 !== (actualPattern = actualPattern.replace(patternRegex, function(pattern) {
                            // eslint-disable-next-line
                            return patternMatch[pattern];
                        })).indexOf('z')) {
                            var tLength = actualPattern.match(/z/g).length, timeZonePattern = void 0, options_1 = {
                                timeZone: {}
                            };
                            options_1.numMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr)), options_1.timeZone = util_getValue('dates.timeZoneNames', dependable.parserObject);
                            var timezone = new Date().getTimezoneOffset(), pattern = tLength < 4 ? '+H;-H' : options_1.timeZone.hourFormat;
                            pattern = pattern.replace(/:/g, options_1.numMapper.timeSeparator), 0 === timezone ? timeZonePattern = options_1.timeZone.gmtZeroFormat : (timeZonePattern = DateFormat.getTimeZoneValue(timezone, pattern), timeZonePattern = options_1.timeZone.gmtFormat.replace(/\{0\}/, timeZonePattern)), actualPattern = actualPattern.replace(/[z]+/, '"' + timeZonePattern + '"');
                        }
                        actualPattern = actualPattern.replace(/ $/, '');
                    }
                    return actualPattern;
                }, IntlBase.getActualNumberFormat = /**
     * Returns Native Number pattern
     *
     * @private
     * @param {string} culture ?
     * @param {NumberFormatOptions} options ?
     * @param {Object} cldr ?
     * @param {boolean} isExcel ?
     * @returns {string} ?
     */ function(culture, options, cldr, isExcel) {
                    var minFrac, actualPattern, dependable = getDependables(cldr, culture, '', !0), parseOptions = {
                        custom: !0
                    }, curObj = (dependable.numericObject, {}), curMatch = (options.format || '').match(IntlBase.currencyFormatRegex), dOptions = (IntlBase.formatRegex.test(options.format) && getProperNumericSkeleton(options.format || 'N'), {});
                    if (curMatch) {
                        dOptions.numberMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), !0);
                        var curCode = getCurrencySymbol(dependable.numericObject, options.currency || defaultCurrencyCode, options.altSymbol), symbolPattern = getSymbolPattern('currency', dOptions.numberMapper.numberSystem, dependable.numericObject, /a/i.test(options.format)), split = (symbolPattern = symbolPattern.replace(/\u00A4/g, curCode)).split(';');
                        curObj.hasNegativePattern = split.length > 1, curObj.nData = getFormatData(split[1] || '-' + split[0], !0, curCode), curObj.pData = getFormatData(split[0], !1, curCode), curMatch[2] || options.minimumFractionDigits || options.maximumFractionDigits || (minFrac = getFormatData(symbolPattern.split(';')[0], !0, '', !0).minimumFraction);
                    }
                    if (IntlBase.formatRegex.test(options.format) || !options.format) {
                        if (util_extend(parseOptions, getProperNumericSkeleton(options.format || 'N')), parseOptions.custom = !1, actualPattern = '###0', (parseOptions.fractionDigits || options.minimumFractionDigits || options.maximumFractionDigits || minFrac) && (parseOptions.fractionDigits && (options.minimumFractionDigits = options.maximumFractionDigits = parseOptions.fractionDigits), actualPattern = fractionDigitsPattern(actualPattern, minFrac || parseOptions.fractionDigits || options.minimumFractionDigits || 0, options.maximumFractionDigits || 0)), options.minimumIntegerDigits && (actualPattern = minimumIntegerPattern(actualPattern, options.minimumIntegerDigits)), options.useGrouping && (actualPattern = groupingPattern(actualPattern)), 'currency' === parseOptions.type || (parseOptions.type, 0)) {
                            var cPattern = actualPattern;
                            actualPattern = curObj.pData.nlead + cPattern + curObj.pData.nend, curObj.hasNegativePattern && (actualPattern += ';' + curObj.nData.nlead + cPattern + curObj.nData.nend);
                        }
                        'percent' === parseOptions.type && (actualPattern += ' %');
                    } else actualPattern = options.format.replace(/'/g, '"');
                    return Object.keys(dOptions).length > 0 && (actualPattern = isExcel ? actualPattern : /**
     *
     * @param {string} actual ?
     * @param {any} option ?
     * @returns {any} ?
     */ // eslint-disable-next-line
                    function(actual, option) {
                        if (-1 !== actual.indexOf(',')) {
                            // eslint-disable-next-line
                            var split = actual.split(',');
                            actual = split[0] + util_getValue('numberMapper.numberSymbols.group', option) + split[1].replace('.', util_getValue('numberMapper.numberSymbols.decimal', option));
                        } else actual = actual.replace('.', util_getValue('numberMapper.numberSymbols.decimal', option));
                        return actual;
                    }(actualPattern, dOptions)), actualPattern;
                }, IntlBase.fractionDigitsPattern = fractionDigitsPattern, IntlBase.minimumIntegerPattern = minimumIntegerPattern, IntlBase.groupingPattern = groupingPattern, IntlBase.getWeekData = /**
     *
     * @param {string} culture ?
     * @param {Object} cldr ?
     * @returns {number} ?
     */ function(culture, cldr) {
                    var firstDay = 'sun', mapper = util_getValue('supplemental.weekData.firstDay', cldr), iCulture = culture;
                    return /en-/.test(iCulture) && (iCulture = iCulture.slice(3)), iCulture = iCulture.slice(0, 2).toUpperCase() + iCulture.substr(2), mapper && (firstDay = mapper[iCulture] || mapper[iCulture.slice(0, 2)] || 'sun'), firstDayMapper[firstDay];
                }, IntlBase.replaceBlazorCurrency = /**
     * @private
     * @param {any} pData ?
     * @param {string} aCurrency ?
     * @param {string} rCurrency ?
     * @returns {void} ?
     */ function(pData, aCurrency, rCurrency) {
                    var iCurrency = util_getValue(rCurrency || '', blazorCurrencyData);
                    if (aCurrency !== iCurrency) for(var _i = 0; _i < pData.length; _i++){
                        var data = pData[_i];
                        data.nend = data.nend.replace(aCurrency, iCurrency), data.nlead = data.nlead.replace(aCurrency, iCurrency);
                    }
                }, IntlBase.getWeekOfYear = /**
     * @private
     * @param {Date} date ?
     * @returns {number} ?
     */ function(date) {
                    var weeknum, newYear = new Date(date.getFullYear(), 0, 1), day = newYear.getDay();
                    day = day >= 0 ? day : day + 7;
                    var daynum = Math.floor((date.getTime() - newYear.getTime() - (date.getTimezoneOffset() - newYear.getTimezoneOffset()) * 60000) / 86400000) + 1;
                    if (day < 4) {
                        if ((weeknum = Math.floor((daynum + day - 1) / 7) + 1) > 52) {
                            var nday = new Date(date.getFullYear() + 1, 0, 1).getDay();
                            weeknum = (nday = nday >= 0 ? nday : nday + 7) < 4 ? 1 : 53;
                        }
                    } else weeknum = Math.floor((daynum + day - 1) / 7);
                    return weeknum;
                };
            }(intl_base_IntlBase || (intl_base_IntlBase = {}));
            var headerRegex = /^(.*?):[ \t]*([^\r\n]*)$/gm, Ajax = /** @class */ function() {
                /**
     * Constructor for Ajax class
     *
     * @param  {string|Object} options ?
     * @param  {string} type ?
     * @param  {boolean} async ?
     * @returns defaultType any
     */ function Ajax(options, type, async, contentType) {
                    /**
         * A boolean value indicating whether the request should be sent asynchronous or not.
         *
         * @default true
         */ this.mode = !0, /**
         * A boolean value indicating whether to ignore the promise reject.
         *
         * @private
         * @default true
         */ this.emitError = !0, this.options = {}, 'string' == typeof options ? (this.url = options, this.type = type ? type.toUpperCase() : 'GET', this.mode = !!util_isNullOrUndefined(async) || async) : 'object' == typeof options && (this.options = options, util_merge(this, this.options)), this.type = this.type ? this.type.toUpperCase() : 'GET', this.contentType = void 0 !== this.contentType ? this.contentType : contentType;
                }
                return(/**
     *
     * Send the request to server.
     *
     * @param {any} data - To send the user data
     * @return {Promise} ?
     */ Ajax.prototype.send = function(data) {
                    var _this = this;
                    this.data = util_isNullOrUndefined(data) ? this.data : data;
                    var eventArgs = {
                        cancel: !1,
                        httpRequest: null
                    };
                    return new Promise(function(resolve, reject) {
                        _this.httpRequest = new XMLHttpRequest(), _this.httpRequest.onreadystatechange = function() {
                            _this.stateChange(resolve, reject);
                        }, util_isNullOrUndefined(_this.onLoad) || (_this.httpRequest.onload = _this.onLoad), util_isNullOrUndefined(_this.onProgress) || (_this.httpRequest.onprogress = _this.onProgress), util_isNullOrUndefined(_this.onAbort) || (_this.httpRequest.onabort = _this.onAbort), util_isNullOrUndefined(_this.onError) || (_this.httpRequest.onerror = _this.onError), util_isNullOrUndefined(_this.onUploadProgress) || (_this.httpRequest.upload.onprogress = _this.onUploadProgress), _this.httpRequest.open(_this.type, _this.url, _this.mode), util_isNullOrUndefined(_this.data) || null === _this.contentType || _this.httpRequest.setRequestHeader('Content-Type', _this.contentType || 'application/json; charset=utf-8'), _this.beforeSend && (eventArgs.httpRequest = _this.httpRequest, _this.beforeSend(eventArgs)), eventArgs.cancel || _this.httpRequest.send(util_isNullOrUndefined(_this.data) ? null : _this.data);
                    });
                }, Ajax.prototype.successHandler = function(data) {
                    return this.onSuccess && this.onSuccess(data, this), data;
                }, Ajax.prototype.failureHandler = function(reason) {
                    return this.onFailure && this.onFailure(this.httpRequest), reason;
                }, Ajax.prototype.stateChange = function(resolve, reject) {
                    var data = this.httpRequest.responseText;
                    if (this.dataType && 'json' === this.dataType.toLowerCase()) {
                        if ('' === data) data = void 0;
                        else try {
                            data = JSON.parse(data);
                        } catch (error) {
                        // no exception handle
                        }
                    }
                    4 === this.httpRequest.readyState && (this.httpRequest.status >= 200 && this.httpRequest.status <= 299 || 304 === this.httpRequest.status ? resolve(this.successHandler(data)) : this.emitError ? reject(Error(this.failureHandler(this.httpRequest.statusText))) : resolve());
                }, /**
     * To get the response header from XMLHttpRequest
     *
     * @param  {string} key Key to search in the response header
     * @returns {string} ?
     */ Ajax.prototype.getResponseHeader = function(key) {
                    // eslint-disable-next-line
                    responseHeaders = {};
                    for(var responseHeaders, header, headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders()); headers;)responseHeaders[headers[1].toLowerCase()] = headers[2], headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());
                    return util_isNullOrUndefined(// eslint-disable-next-line
                    header = responseHeaders[key.toLowerCase()]) ? null : header;
                }, Ajax);
            }(), REGX_MOBILE = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini|mobile/i, REGX_IE = /msie|trident/i, REGX_IE11 = /Trident\/7\./, REGX_IOS = /(ipad|iphone|ipod touch)/i, REGX_IOS7 = /(ipad|iphone|ipod touch);.*os 7_\d|(ipad|iphone|ipod touch);.*os 8_\d/i, REGX_ANDROID = /android/i, REGX_WINDOWS = /trident|windows phone|edge/i, REGX_VERSION = /(version)[ /]([\w.]+)/i, REGX_BROWSER = {
                OPERA: /(opera|opr)(?:.*version|)[ /]([\w.]+)/i,
                EDGE: /(edge)(?:.*version|)[ /]([\w.]+)/i,
                CHROME: /(chrome|crios)[ /]([\w.]+)/i,
                PANTHOMEJS: /(phantomjs)[ /]([\w.]+)/i,
                SAFARI: /(safari)[ /]([\w.]+)/i,
                WEBKIT: /(webkit)[ /]([\w.]+)/i,
                MSIE: /(msie|trident) ([\w.]+)/i,
                MOZILLA: /(mozilla)(?:.*? rv:([\w.]+)|)/i
            };
            'undefined' != typeof window && (window.browserDetails = window.browserDetails || {});
            /**
 * Get configuration details for Browser
 *
 * @private
 */ var Browser = /** @class */ function() {
                function Browser() {}
                return Browser.extractBrowserDetail = function() {
                    for(var browserInfo = {
                        culture: {}
                    }, keys = Object.keys(REGX_BROWSER), clientInfo = [], _i = 0; _i < keys.length; _i++){
                        var key = keys[_i];
                        if (clientInfo = Browser.userAgent.match(REGX_BROWSER[key])) {
                            // eslint-disable-next-line
                            if (browserInfo.name = 'opr' === clientInfo[1].toLowerCase() ? 'opera' : clientInfo[1].toLowerCase(), browserInfo.name = 'crios' === clientInfo[1].toLowerCase() ? 'chrome' : browserInfo.name, browserInfo.version = clientInfo[2], browserInfo.culture.name = browserInfo.culture.language = navigator.language, Browser.userAgent.match(REGX_IE11)) {
                                browserInfo.name = 'msie';
                                break;
                            }
                            var version = Browser.userAgent.match(REGX_VERSION);
                            'safari' === browserInfo.name && version && (browserInfo.version = version[2]);
                            break;
                        }
                    }
                    return browserInfo;
                }, /**
     * To get events from the browser
     *
     * @param {string} event - type of event triggered.
     * @returns {boolean}
     */ Browser.getEvent = function(event) {
                    // eslint-disable-next-line
                    var events = {
                        start: {
                            isPointer: 'pointerdown',
                            isTouch: 'touchstart',
                            isDevice: 'mousedown'
                        },
                        move: {
                            isPointer: 'pointermove',
                            isTouch: 'touchmove',
                            isDevice: 'mousemove'
                        },
                        end: {
                            isPointer: 'pointerup',
                            isTouch: 'touchend',
                            isDevice: 'mouseup'
                        },
                        cancel: {
                            isPointer: 'pointercancel',
                            isTouch: 'touchcancel',
                            isDevice: 'mouseleave'
                        }
                    };
                    return Browser.isPointer ? events[event].isPointer : Browser.isTouch ? events[event].isTouch + (Browser.isDevice ? '' : ' ' + events[event].isDevice) : events[event].isDevice;
                }, /**
     * To get the Touch start event from browser
     *
     * @returns {string}
     */ Browser.getTouchStartEvent = function() {
                    return Browser.getEvent('start');
                }, /**
     * To get the Touch end event from browser
     *
     * @returns {string}
     */ Browser.getTouchEndEvent = function() {
                    return Browser.getEvent('end');
                }, /**
     * To get the Touch move event from browser
     *
     * @returns {string}
     */ Browser.getTouchMoveEvent = function() {
                    return Browser.getEvent('move');
                }, /**
     * To cancel the touch event from browser
     *
     * @returns {string}
     */ Browser.getTouchCancelEvent = function() {
                    return Browser.getEvent('cancel');
                }, /**
     * To get the value based on provided key and regX
     *
     * @param {string} key ?
     * @param {RegExp} regX ?
     * @returns {Object} ?
     */ Browser.getValue = function(key, regX) {
                    var browserDetails = window.browserDetails;
                    return ('MacIntel' === navigator.platform && navigator.maxTouchPoints > 1 && !0 === Browser.isTouch && (browserDetails.isIos = !0, browserDetails.isDevice = !0, browserDetails.isTouch = !0, browserDetails.isPointer = !0), void 0 === browserDetails[key]) ? browserDetails[key] = regX.test(Browser.userAgent) : browserDetails[key];
                }, Object.defineProperty(Browser, "userAgent", {
                    get: function() {
                        return Browser.uA;
                    },
                    //Properties
                    /**
         * Property specifies the userAgent of the browser. Default userAgent value is based on the browser.
         * Also we can set our own userAgent.
         *
         * @param {string} uA ?
         */ set: function(uA) {
                        Browser.uA = uA, window.browserDetails = {};
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Browser, "info", {
                    //Read Only Properties
                    /**
         * Property is to get the browser information like Name, Version and Language
         *
         * @returns {BrowserInfo} ?
         */ get: function() {
                        return util_isUndefined(window.browserDetails.info) ? window.browserDetails.info = Browser.extractBrowserDetail() : window.browserDetails.info;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Browser, "isIE", {
                    /**
         * Property is to get whether the userAgent is based IE.
         *
         * @returns {boolean} ?
         */ get: function() {
                        return Browser.getValue('isIE', REGX_IE);
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Browser, "isTouch", {
                    /**
         * Property is to get whether the browser has touch support.
         *
         * @returns {boolean} ?
         */ get: function() {
                        return util_isUndefined(window.browserDetails.isTouch) ? window.browserDetails.isTouch = 'ontouchstart' in window.navigator || window && window.navigator && window.navigator.maxTouchPoints > 0 || 'ontouchstart' in window : window.browserDetails.isTouch;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Browser, "isPointer", {
                    /**
         * Property is to get whether the browser has Pointer support.
         *
         * @returns {boolean} ?
         */ get: function() {
                        return util_isUndefined(window.browserDetails.isPointer) ? window.browserDetails.isPointer = 'pointerEnabled' in window.navigator : window.browserDetails.isPointer;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Browser, "isMSPointer", {
                    /**
         * Property is to get whether the browser has MSPointer support.
         *
         * @returns {boolean} ?
         */ get: function() {
                        return util_isUndefined(window.browserDetails.isMSPointer) ? window.browserDetails.isMSPointer = 'msPointerEnabled' in window.navigator : window.browserDetails.isMSPointer;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Browser, "isDevice", {
                    /**
         * Property is to get whether the userAgent is device based.
         *
         * @returns {boolean} ?
         */ get: function() {
                        return Browser.getValue('isDevice', REGX_MOBILE);
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Browser, "isIos", {
                    /**
         * Property is to get whether the userAgent is IOS.
         *
         * @returns {boolean} ?
         */ get: function() {
                        return Browser.getValue('isIos', REGX_IOS);
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Browser, "isIos7", {
                    /**
         * Property is to get whether the userAgent is Ios7.
         *
         * @returns {boolean} ?
         */ get: function() {
                        return Browser.getValue('isIos7', REGX_IOS7);
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Browser, "isAndroid", {
                    /**
         * Property is to get whether the userAgent is Android.
         *
         * @returns {boolean} ?
         */ get: function() {
                        return Browser.getValue('isAndroid', REGX_ANDROID);
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Browser, "isWebView", {
                    /**
         * Property is to identify whether application ran in web view.
         *
         * @returns {boolean} ?
         */ get: function() {
                        return util_isUndefined(window.browserDetails.isWebView) && (window.browserDetails.isWebView = !(util_isUndefined(window.cordova) && util_isUndefined(window.PhoneGap) && util_isUndefined(window.phonegap) && 'object' !== window.forge)), window.browserDetails.isWebView;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Browser, "isWindows", {
                    /**
         * Property is to get whether the userAgent is Windows.
         *
         * @returns {boolean} ?
         */ get: function() {
                        return Browser.getValue('isWindows', REGX_WINDOWS);
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Browser, "touchStartEvent", {
                    /**
         * Property is to get the touch start event. It returns event name based on browser.
         *
         * @returns {string} ?
         */ get: function() {
                        return util_isUndefined(window.browserDetails.touchStartEvent) ? window.browserDetails.touchStartEvent = Browser.getTouchStartEvent() : window.browserDetails.touchStartEvent;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Browser, "touchMoveEvent", {
                    /**
         * Property is to get the touch move event. It returns event name based on browser.
         *
         * @returns {string} ?
         */ get: function() {
                        return util_isUndefined(window.browserDetails.touchMoveEvent) ? window.browserDetails.touchMoveEvent = Browser.getTouchMoveEvent() : window.browserDetails.touchMoveEvent;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Browser, "touchEndEvent", {
                    /**
         * Property is to get the touch end event. It returns event name based on browser.
         *
         * @returns {string} ?
         */ get: function() {
                        return util_isUndefined(window.browserDetails.touchEndEvent) ? window.browserDetails.touchEndEvent = Browser.getTouchEndEvent() : window.browserDetails.touchEndEvent;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(Browser, "touchCancelEvent", {
                    /**
         * Property is to cancel the touch end event.
         *
         * @returns {string} ?
         */ get: function() {
                        return util_isUndefined(window.browserDetails.touchCancelEvent) ? window.browserDetails.touchCancelEvent = Browser.getTouchCancelEvent() : window.browserDetails.touchCancelEvent;
                    },
                    enumerable: !0,
                    configurable: !0
                }), /* istanbul ignore next */ Browser.uA = 'undefined' != typeof navigator ? navigator.userAgent : '', Browser;
            }(), EventHandler = /** @class */ function() {
                function EventHandler() {}
                return(// to get the event data based on element
                EventHandler.addOrGetEventData = function(element) {
                    return '__eventList' in element ? element.__eventList.events : (element.__eventList = {}, element.__eventList.events = []);
                }, /**
     * Add an event to the specified DOM element.
     *
     * @param {any} element - Target HTML DOM element
     * @param {string} eventName - A string that specifies the name of the event
     * @param {Function} listener - Specifies the function to run when the event occurs
     * @param {Object} bindTo - A object that binds 'this' variable in the event handler
     * @param {number} intDebounce - Specifies at what interval given event listener should be triggered.
     * @returns {Function} ?
     */ EventHandler.add = function(element, eventName, listener, bindTo, intDebounce) {
                    var debounceListener, eventData = EventHandler.addOrGetEventData(element);
                    debounceListener = intDebounce ? debounce(listener, intDebounce) : listener, bindTo && (debounceListener = debounceListener.bind(bindTo));
                    for(var event = eventName.split(' '), i = 0; i < event.length; i++)eventData.push({
                        name: event[i],
                        listener: listener,
                        debounce: debounceListener
                    }), Browser.isIE ? element.addEventListener(event[i], debounceListener) : element.addEventListener(event[i], debounceListener, {
                        passive: !1
                    });
                    return debounceListener;
                }, /**
     * Remove an event listener that has been attached before.
     *
     * @param {any} element - Specifies the target html element to remove the event
     * @param {string} eventName - A string that specifies the name of the event to remove
     * @param {Function} listener - Specifies the function to remove
     * @returns {void} ?
     */ EventHandler.remove = function(element, eventName, listener) {
                    for(var eventData = EventHandler.addOrGetEventData(element), event = eventName.split(' '), _loop_1 = function(j) {
                        var debounceListener, index = -1;
                        eventData && 0 !== eventData.length && eventData.some(function(x, i) {
                            return x.name === event[j] && x.listener === listener && (index = i, debounceListener = x.debounce, !0);
                        }), -1 !== index && eventData.splice(index, 1), debounceListener && element.removeEventListener(event[j], debounceListener);
                    }, j = 0; j < event.length; j++)_loop_1(j);
                }, /**
     * Clear all the event listeners that has been previously attached to the element.
     *
     * @param {any} element - Specifies the target html element to clear the events
     * @returns {void} ?
     */ EventHandler.clearEvents = function(element) {
                    // eslint-disable-next-line
                    copyData = util_extend([], copyData, // eslint-disable-next-line
                    eventData = EventHandler.addOrGetEventData(element));
                    for(var eventData, copyData, i = 0; i < copyData.length; i++)element.removeEventListener(copyData[i].name, copyData[i].debounce), eventData.shift();
                }, /**
     * Trigger particular event of the element.
     *
     * @param {any} element - Specifies the target html element to trigger the events
     * @param {string} eventName - Specifies the event to trigger for the specified element.
     * Can be a custom event, or any of the standard events.
     * @param {any} eventProp - Additional parameters to pass on to the event properties
     * @returns {void} ?
     */ EventHandler.trigger = function(element, eventName, eventProp) {
                    for(var eventData = EventHandler.addOrGetEventData(element), _i = 0; _i < eventData.length; _i++){
                        var event_1 = eventData[_i];
                        event_1.name === eventName && event_1.debounce.call(this, eventProp);
                    }
                }, EventHandler);
            }(), SVG_REG = /^svg|^path|^g/;
            /**
 * Function to create Html element.
 *
 * @param {string} tagName - Name of the tag, id and class names.
 * @param {ElementProperties} properties - Object to set properties in the element.
 * @param {ElementProperties} properties.id - To set the id to the created element.
 * @param {ElementProperties} properties.className - To add classes to the element.
 * @param {ElementProperties} properties.innerHTML - To set the innerHTML to element.
 * @param {ElementProperties} properties.styles - To set the some custom styles to element.
 * @param {ElementProperties} properties.attrs - To set the attributes to element.
 * @returns {any} ?
 * @private
 */ function createElement(tagName, properties) {
                var element = SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName);
                return void 0 === properties || (element.innerHTML = properties.innerHTML ? properties.innerHTML : '', void 0 !== properties.className && (element.className = properties.className), void 0 !== properties.id && (element.id = properties.id), void 0 !== properties.styles && element.setAttribute('style', properties.styles), void 0 !== properties.attrs && attributes(element, properties.attrs)), element;
            }
            /**
 * The function used to add the classes to array of elements
 *
 * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes
 * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class
 * @returns {any} .
 * @private
 */ function addClass(elements, classes) {
                for(var classList = getClassList(classes), _i = 0; _i < elements.length; _i++)for(var ele = elements[_i], _b = 0; _b < classList.length; _b++){
                    var className = classList[_b];
                    if (util_isObject(ele)) {
                        var curClass = util_getValue('attributes.className', ele);
                        util_isNullOrUndefined(curClass) ? setValue('attributes.className', className, ele) : RegExp('\\b' + className + '\\b', 'i').test(curClass) || setValue('attributes.className', curClass + ' ' + className, ele);
                    } else ele.classList.contains(className) || ele.classList.add(className);
                }
                return elements;
            }
            /**
 * The function used to add the classes to array of elements
 *
 * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes
 * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class
 * @returns {any} .
 * @private
 */ function removeClass(elements, classes) {
                for(var classList = getClassList(classes), _i = 0; _i < elements.length; _i++){
                    var ele = elements[_i], flag = util_isObject(ele);
                    if (flag ? util_getValue('attributes.className', ele) : '' !== ele.className) for(var _b = 0; _b < classList.length; _b++){
                        var className = classList[_b];
                        if (flag) {
                            var classArr = util_getValue('attributes.className', ele).split(' '), index = classArr.indexOf(className);
                            -1 !== index && classArr.splice(index, 1), setValue('attributes.className', classArr.join(' '), ele);
                        } else ele.classList.remove(className);
                    }
                }
                return elements;
            }
            /**
 * The function used to get classlist.
 *
 * @param  {string | string[]} classes - An element the need to check visibility
 * @returns {string[]} ?
 * @private
 */ function getClassList(classes) {
                var classList = [];
                return 'string' == typeof classes ? classList.push(classes) : classList = classes, classList;
            }
            /**
 * The function used to check element is visible or not.
 *
 * @param  {Element|Node} element - An element the need to check visibility
 * @returns {boolean} ?
 * @private
 */ function isVisible(element) {
                return '' === element.style.visibility && element.offsetWidth > 0;
            }
            /**
 * The function used to insert an array of elements into a first of the element.
 *
 * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.
 * @param  {Element} toElement - An element that is going to prepend.
 * @param {boolean} isEval - ?
 * @returns {Element[] | NodeList} ?
 * @private
 */ function prepend(fromElements, toElement, isEval) {
                for(var docFrag = document.createDocumentFragment(), _i = 0; _i < fromElements.length; _i++){
                    var ele = fromElements[_i];
                    docFrag.appendChild(ele);
                }
                return toElement.insertBefore(docFrag, toElement.firstElementChild), isEval && executeScript(toElement), fromElements;
            }
            /**
 * The function used to insert an array of elements into last of the element.
 *
 * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.
 * @param  {Element} toElement - An element that is going to prepend.
 * @param {boolean} isEval - ?
 * @returns {Element[] | NodeList} ?
 * @private
 */ function append(fromElements, toElement, isEval) {
                for(var docFrag = document.createDocumentFragment(), _i = 0; _i < fromElements.length; _i++){
                    var ele = fromElements[_i];
                    docFrag.appendChild(ele);
                }
                return toElement.appendChild(docFrag), isEval && executeScript(toElement), fromElements;
            }
            /**
 * The function is used to evaluate script from Ajax request
 *
 * @param {Element} ele - An element is going to evaluate the script
 * @returns {void} ?
 */ function executeScript(ele) {
                ele.querySelectorAll('script').forEach(function(element) {
                    var script = document.createElement('script');
                    script.text = element.innerHTML, document.head.appendChild(script), detach(script);
                });
            }
            /**
 * The function used to remove the element from parentnode
 *
 * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom
 * @returns {any} ?
 * @private
 */ // eslint-disable-next-line
            function detach(element) {
                var parentNode = element.parentNode;
                if (parentNode) return parentNode.removeChild(element);
            }
            /**
 * The function used to remove the element from Dom also clear the bounded events
 *
 * @param  {Element|Node|HTMLElement} element - An element remove from the Dom
 * @returns {void} ?
 * @private
 */ function remove(element) {
                var parentNode = element.parentNode;
                EventHandler.clearEvents(element), parentNode.removeChild(element);
            }
            /**
 * The function helps to set multiple attributes to an element
 *
 * @param  {Element|Node} element - An element that need to set attributes.
 * @param  {string} attributes - JSON Object that is going to as attributes.
 * @returns {Element} ?
 * @private
 */ // eslint-disable-next-line
            function attributes(element, attributes) {
                for(var keys = Object.keys(attributes), _i = 0; _i < keys.length; _i++){
                    var key = keys[_i];
                    if (util_isObject(element)) {
                        var iKey = key;
                        'tabindex' === key && (iKey = 'tabIndex'), element.attributes[iKey] = attributes[key];
                    } else element.setAttribute(key, attributes[key]);
                }
                return element;
            }
            /**
 * The function selects the element from giving context.
 *
 * @param  {string} selector - Selector string need fetch element
 * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.
 * @param {boolean} needsVDOM ?
 * @returns {any} ?
 * @private
 */ // eslint-disable-next-line
            function dom_select(selector, context, needsVDOM) {
                return void 0 === context && (context = document), selector = querySelectId(selector), context.querySelector(selector);
            }
            /**
 * The function selects an array of element from the given context.
 *
 * @param  {string} selector - Selector string need fetch element
 * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.
 * @param {boolean} needsVDOM ?
 * @returns {HTMLElement[]} ?
 * @private
 */ // eslint-disable-next-line
            function selectAll(selector, context, needsVDOM) {
                return void 0 === context && (context = document), selector = querySelectId(selector), context.querySelectorAll(selector);
            }
            /**
 * The function selects an id of element from the given context.
 *
 * @param  {string} selector - Selector string need fetch element
 * @returns {string} ?
 * @private
 */ function querySelectId(selector) {
                var charRegex = /(!|"|\$|%|&|'|\(|\)|\*|\/|:|;|<|=|\?|@|\]|\^|`|{|}|\||\+|~)/g;
                if (selector.match(/#[0-9]/g) || selector.match(charRegex)) {
                    for(var idList = selector.split(','), i = 0; i < idList.length; i++){
                        for(var list = idList[i].split(' '), j = 0; j < list.length; j++)if (list[j].indexOf('#') > -1 && !list[j].match(/\[.*\]/)) {
                            var splitId = list[j].split('#');
                            if (splitId[1].match(/^\d/) || splitId[1].match(charRegex)) {
                                var setId = list[j].split('.');
                                setId[0] = setId[0].replace(/#/, '[id=\'') + '\']', list[j] = setId.join('.');
                            }
                        }
                        idList[i] = list.join(' ');
                    }
                    return idList.join(',');
                }
                return selector;
            }
            /**
 * Returns single closest parent element based on class selector.
 *
 * @param  {Element} element - An element that need to find the closest element.
 * @param  {string} selector - A classSelector of closest element.
 * @returns {Element} ?
 * @private
 */ function closest(element, selector) {
                var el = element;
                if ('function' == typeof el.closest) return el.closest(selector);
                for(; el && 1 === el.nodeType;){
                    if (matches(el, selector)) return el;
                    el = el.parentNode;
                }
                return null;
            }
            /**
 * Set the style attributes to Html element.
 *
 * @param {HTMLElement} element - Element which we want to set attributes
 * @param {any} attrs - Set the given attributes to element
 * @returns {void} ?
 * @private
 */ function setStyleAttribute(element, attrs) {
                void 0 !== attrs && Object.keys(attrs).forEach(function(key) {
                    // eslint-disable-next-line
                    element.style[key] = attrs[key];
                });
            }
            /**
 * Method for add and remove classes to a dom element.
 *
 * @param {Element} element - Element for add and remove classes
 * @param {string[]} addClasses - List of classes need to be add to the element
 * @param {string[]} removeClasses - List of classes need to be remove from the element
 * @returns {void} ?
 * @private
 */ function classList(element, addClasses, removeClasses) {
                addClass([
                    element
                ], addClasses), removeClass([
                    element
                ], removeClasses);
            }
            /**
 * Method to check whether the element matches the given selector.
 *
 * @param {Element} element - Element to compare with the selector.
 * @param {string} selector - String selector which element will satisfy.
 * @returns {void} ?
 * @private
 */ function matches(element, selector) {
                // eslint-disable-next-line
                var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;
                return matches ? matches.call(element, selector) : -1 !== [].indexOf.call(document.querySelectorAll(selector), element);
            }
            var isColEName = /]/, Base = /** @class */ function() {
                /**
     * Base constructor accept options and element
     *
     * @param {Object} options ?
     * @param {string} element ?
     */ function Base(options, element) {
                    this.isRendered = !1, this.isComplexArraySetter = !1, this.isServerRendered = !1, this.allowServerDataBinding = !0, this.isProtectedOnChange = !0, this.properties = {}, this.changedProperties = {}, this.oldProperties = {}, this.bulkChanges = {}, this.refreshing = !1, this.ignoreCollectionWatch = !1, // eslint-disable-next-line
                    this.finalUpdate = function() {}, this.childChangedProperties = {}, this.modelObserver = new Observer(this), util_isUndefined(element) || ('string' == typeof element ? this.element = document.querySelector(element) : this.element = element, util_isNullOrUndefined(this.element) || (this.isProtectedOnChange = !1, this.addInstance())), util_isUndefined(options) || this.setProperties(options, !0), this.isDestroyed = !1;
                }
                return(/** Property base section */ /**
     * Function used to set bunch of property at a time.
     *
     * @private
     * @param  {Object} prop - JSON object which holds components properties.
     * @param  {boolean} muteOnChange ? - Specifies to true when we set properties.
     * @returns {void} ?
     */ Base.prototype.setProperties = function(prop, muteOnChange) {
                    var prevDetection = this.isProtectedOnChange;
                    this.isProtectedOnChange = !!muteOnChange, util_merge(this, prop), !0 !== muteOnChange && (util_merge(this.changedProperties, prop), this.dataBind()), this.finalUpdate(), this.changedProperties = {}, this.oldProperties = {}, this.isProtectedOnChange = prevDetection;
                }, /**
     * Calls for child element data bind
     *
     * @param {Object} obj ?
     * @param {Object} parent ?
     * @returns {void} ?
     */ // tslint:disable-next-line:no-any
                Base.callChildDataBind = function(obj, parent) {
                    for(var keys = Object.keys(obj), _i = 0; _i < keys.length; _i++){
                        var key = keys[_i];
                        if (parent[key] instanceof Array) for(var _a = 0, _b = parent[key]; _a < _b.length; _a++){
                            var obj_1 = _b[_a];
                            void 0 !== obj_1.dataBind && obj_1.dataBind();
                        }
                        else parent[key].dataBind();
                    }
                }, Base.prototype.clearChanges = function() {
                    this.finalUpdate(), this.changedProperties = {}, this.oldProperties = {}, this.childChangedProperties = {};
                }, /**
     * Bind property changes immediately to components
     *
     * @returns {void} ?
     */ Base.prototype.dataBind = function() {
                    if (Base.callChildDataBind(this.childChangedProperties, this), Object.getOwnPropertyNames(this.changedProperties).length) {
                        var prevDetection = this.isProtectedOnChange, newChanges = this.changedProperties, oldChanges = this.oldProperties;
                        this.clearChanges(), this.isProtectedOnChange = !0, this.onPropertyChanged(newChanges, oldChanges), this.isProtectedOnChange = prevDetection;
                    }
                }, /* tslint:disable:no-any */ Base.prototype.serverDataBind = function(newChanges) {}, /* tslint:enable:no-any */ Base.prototype.saveChanges = function(key, newValue, oldValue) {
                    var handler, unbind, num, secret, messageHandler;
                    this.isProtectedOnChange || (this.oldProperties[key] = oldValue, this.changedProperties[key] = newValue, this.finalUpdate(), this.finalUpdate = (handler = this.dataBind.bind(this), num = new Uint16Array(5), (window.msCrypto || window.crypto).getRandomValues(num), secret = 'ej2' + /**
 *
 * @param {Int16Array} num ?
 * @returns {string} ?
 */ function(num) {
                        for(var ret = '', i = 0; i < 5; i++)ret += (i ? ',' : '') + num[i];
                        return ret;
                    }(num), messageHandler = function(event) {
                        event.source === window && 'string' == typeof event.data && event.data.length <= 32 && event.data === secret && (handler(), unbind());
                    }, window.addEventListener('message', messageHandler, !1), window.postMessage(secret, '*'), unbind = function() {
                        window.removeEventListener('message', messageHandler), handler = messageHandler = secret = void 0;
                    }));
                }, /** Event Base Section */ /**
     * Adds the handler to the given event listener.
     *
     * @param {string} eventName - A String that specifies the name of the event
     * @param {Function} handler - Specifies the call to run when the event occurs.
     * @returns {void} ?
     */ Base.prototype.addEventListener = function(eventName, handler) {
                    this.modelObserver.on(eventName, handler);
                }, /**
     * Removes the handler from the given event listener.
     *
     * @param {string} eventName - A String that specifies the name of the event to remove
     * @param {Function} handler - Specifies the function to remove
     * @returns {void} ?
     */ Base.prototype.removeEventListener = function(eventName, handler) {
                    this.modelObserver.off(eventName, handler);
                }, /**
     * Triggers the handlers in the specified event.
     *
     * @private
     * @param {string} eventName - Specifies the event to trigger for the specified component properties.
     * Can be a custom event, or any of the standard events.
     * @param {Event} eventProp - Additional parameters to pass on to the event properties
     * @param {Function} successHandler - this function will invoke after event successfully triggered
     * @param {Function} errorHandler - this function will invoke after event if it failured to call.
     * @returns {void} ?
     */ Base.prototype.trigger = function(eventName, eventProp, successHandler, errorHandler) {
                    var _this = this;
                    if (!0 !== this.isDestroyed) {
                        var prevDetection = this.isProtectedOnChange;
                        this.isProtectedOnChange = !1;
                        var data = this.modelObserver.notify(eventName, eventProp, successHandler, errorHandler);
                        if (isColEName.test(eventName)) {
                            var handler = util_getValue(eventName, this);
                            if (handler) {
                                if (window.Blazor) {
                                    var promise = handler.call(this, eventProp);
                                    promise && 'function' == typeof promise.then ? successHandler ? promise.then(function(data) {
                                        successHandler && (data = 'string' == typeof data && _this.modelObserver.isJson(data) ? JSON.parse(data) : data, successHandler.call(_this, data));
                                    }).catch(function(data) {
                                        errorHandler && (data = 'string' == typeof data && _this.modelObserver.isJson(data) ? JSON.parse(data) : data, errorHandler.call(_this, data));
                                    }) : data = promise : successHandler && successHandler.call(this, eventProp);
                                } else handler.call(this, eventProp), successHandler && successHandler.call(this, eventProp);
                            } else successHandler && successHandler.call(this, eventProp);
                        }
                        return this.isProtectedOnChange = prevDetection, data;
                    }
                }, /**
     * To maintain instance in base class
     *
     * @returns {void} ?
     */ Base.prototype.addInstance = function() {
                    // Add module class to the root element
                    var moduleClass = 'e-' + this.getModuleName().toLowerCase();
                    addClass([
                        this.element
                    ], [
                        'e-lib',
                        moduleClass
                    ]), util_isNullOrUndefined(this.element.ej2_instances) ? setValue('ej2_instances', [
                        this
                    ], this.element) : this.element.ej2_instances.push(this);
                }, /**
     * To remove the instance from the element
     *
     * @returns {void} ?
     */ Base.prototype.destroy = function() {
                    var _this = this;
                    // eslint-disable-next-line
                    this.element.ej2_instances = this.element.ej2_instances.filter(function(i) {
                        return i !== _this;
                    }), removeClass([
                        this.element
                    ], [
                        'e-' + this.getModuleName()
                    ]), 0 === this.element.ej2_instances.length && // Remove module class from the root element
                    removeClass([
                        this.element
                    ], [
                        'e-lib'
                    ]), this.clearChanges(), this.modelObserver.destroy(), this.isDestroyed = !0;
                }, Base);
            }();
            /**
 * Global function to get the component instance from the rendered element.
 *
 * @param {HTMLElement} elem Specifies the HTMLElement or element id string.
 * @param {string} comp Specifies the component module name or Component.
 * @returns {any} ?
 */ // tslint:disable-next-line:no-any
            function getComponent(elem, comp) {
                var instance, i, ele = 'string' == typeof elem ? document.getElementById(elem) : elem;
                for(i = 0; i < ele.ej2_instances.length; i++)if (instance = ele.ej2_instances[i], 'string' == typeof comp) {
                    if (comp === instance.getModuleName()) return instance;
                } else // tslint:disable-next-line:no-any
                if (instance instanceof comp) return instance;
            }
            /**
 * Returns the Class Object
 *
 * @param {ClassObject} instance - instance of ClassObject
 * @param {string} curKey - key of the current instance
 * @param {Object} defaultValue - default Value
 * @param {Object[]} type ?
 * @returns {ClassObject} ?
 */ // eslint-disable-next-line
            function getObject(instance, curKey, defaultValue, type) {
                return instance.properties.hasOwnProperty(curKey) && instance.properties[curKey] instanceof type || (instance.properties[curKey] = createInstance(type, [
                    instance,
                    curKey,
                    defaultValue
                ])), instance.properties[curKey];
            }
            /**
 * Returns object array
 *
 * @param {ClassObject} instance ?
 * @param {string} curKey ?
 * @param {Object[]} defaultValue ?
 * @param {Object} type ?
 * @param {boolean} isSetter ?
 * @param {boolean} isFactory ?
 * @returns {Object[]} ?
 */ // eslint-disable-next-line
            function getObjectArray(instance, curKey, defaultValue, type, isSetter, isFactory) {
                for(var result = [], len = defaultValue ? defaultValue.length : 0, i = 0; i < len; i++){
                    var curType = type;
                    if (isFactory && (curType = type(defaultValue[i], instance)), isSetter) {
                        var inst = createInstance(curType, [
                            instance,
                            curKey,
                            {},
                            !0
                        ]);
                        inst.setProperties(defaultValue[i], !0), result.push(inst);
                    } else result.push(createInstance(curType, [
                        instance,
                        curKey,
                        defaultValue[i],
                        !1
                    ]));
                }
                return result;
            }
            /**
 * Returns the properties of the object
 *
 * @param {Object} defaultValue ?
 * @param {string} curKey ?
 * @returns {void} ?
 */ function propertyGetter(defaultValue, curKey) {
                return function() {
                    return this.properties.hasOwnProperty(curKey) || (this.properties[curKey] = defaultValue), this.properties[curKey];
                };
            }
            /**
 *
 * @param {string} keyString ?
 * @param {Object} value ?
 * @param {boolean} isControlParent ?
 * @param {string} arrayFunction ?
 * @returns {Object} ?
 */ function getArrayModel(keyString, value, isControlParent, arrayFunction) {
                var modelObject = keyString;
                return isControlParent && ((modelObject = {})[keyString] = value, value && 'object' == typeof value && (modelObject[keyString].ejsAction = arrayFunction)), modelObject;
            }
            // eslint-disable-next-line
            /**
 * Method used to create property. General syntax below.
 *
 * @param {Object} defaultValue - Specifies the default value of property.
 * @returns {PropertyDecorator} ?
 * ```
 * @Property('TypeScript')
 * propertyName: Type;
 * ```
 * @private
 */ function Property(defaultValue) {
                return function(target, key) {
                    var propertyDescriptor = {
                        set: function(newValue) {
                            if (this.properties[key] !== newValue) {
                                // eslint-disable-next-line
                                var oldVal = this.properties.hasOwnProperty(key) ? this.properties[key] : defaultValue;
                                this.saveChanges(key, newValue, oldVal), this.properties[key] = newValue;
                            }
                        },
                        get: propertyGetter(defaultValue, key),
                        enumerable: !0,
                        configurable: !0
                    };
                    //new property creation
                    Object.defineProperty(target, key, propertyDescriptor), addPropertyCollection(target, key, 'prop', defaultValue);
                };
            }
            /**
 * Method used to create complex property. General syntax below.
 *
 * @param  {any} defaultValue - Specifies the default value of property.
 * @param  {Function} type - Specifies the class type of complex object.
 * @returns {PropertyDecorator} ?
 * ```
 * @Complex<Type>({},Type)
 * propertyName: Type;
 * ```
 * @private
 */ function Complex(defaultValue, type) {
                return function(target, key) {
                    //new property creation
                    Object.defineProperty(target, key, {
                        set: function(newValue) {
                            getObject(this, key, defaultValue, type).setProperties(newValue);
                        },
                        get: function() {
                            return getObject(this, key, defaultValue, type);
                        },
                        enumerable: !0,
                        configurable: !0
                    }), addPropertyCollection(target, key, 'complexProp', defaultValue, type);
                };
            }
            /**
 * Method used to create complex array property. General syntax below.
 *
 * @param  {any} defaultValue - Specifies the default value of property.
 * @param  {Function} type - Specifies the class type of complex object.
 * @returns {PropertyDecorator} ?
 * ```
 * @Collection([], Type);
 * propertyName: Type;
 * ```
 * @private
 */ function Collection(defaultValue, type) {
                return function(target, key) {
                    //new property creation
                    Object.defineProperty(target, key, {
                        set: function(newValue) {
                            this.isComplexArraySetter = !0;
                            var oldValueCollection = getObjectArray(this, key, defaultValue, type, !1), newValCollection = getObjectArray(this, key, newValue, type, !0);
                            this.isComplexArraySetter = !1, this.saveChanges(key, newValCollection, oldValueCollection), this.properties[key] = newValCollection;
                        },
                        get: function() {
                            var _this = this;
                            // eslint-disable-next-line
                            if (!this.properties.hasOwnProperty(key)) {
                                var defCollection = getObjectArray(this, key, defaultValue, type, !1);
                                this.properties[key] = defCollection;
                            }
                            var ignore = void 0 !== this.controlParent && this.controlParent.ignoreCollectionWatch || this.ignoreCollectionWatch;
                            return this.properties[key].hasOwnProperty('push') || ignore || [
                                'push',
                                'pop'
                            ].forEach(function(extendFunc) {
                                var prop, descriptor = {
                                    value: (prop = _this.properties[key], function() {
                                        for(var newValue = [], _i = 0; _i < arguments.length; _i++)newValue[_i] = arguments[_i];
                                        var keyString = this.propName ? this.getParentKey() + '.' + key + '-' : key + '-';
                                        switch(extendFunc){
                                            case 'push':
                                                for(var i = 0; i < newValue.length; i++){
                                                    Array.prototype[extendFunc].apply(prop, [
                                                        newValue[i]
                                                    ]);
                                                    var model_1 = getArrayModel(keyString + (prop.length - 1), newValue[i], !this.controlParent, extendFunc);
                                                    this.serverDataBind(model_1, newValue[i], !1, extendFunc);
                                                }
                                                break;
                                            case 'pop':
                                                Array.prototype[extendFunc].apply(prop);
                                                // eslint-disable-next-line
                                                var model = getArrayModel(keyString + prop.length, null, !this.controlParent, extendFunc);
                                                this.serverDataBind(model, {
                                                    ejsAction: 'pop'
                                                }, !1, extendFunc);
                                        }
                                        return prop;
                                    }).bind(_this),
                                    configurable: !0
                                };
                                Object.defineProperty(_this.properties[key], extendFunc, descriptor);
                            }), this.properties[key].hasOwnProperty('isComplexArray') || Object.defineProperty(this.properties[key], 'isComplexArray', {
                                value: !0
                            }), this.properties[key];
                        },
                        enumerable: !0,
                        configurable: !0
                    }), addPropertyCollection(target, key, 'colProp', defaultValue, type);
                };
            }
            /**
 * Method used to create event property. General syntax below.
 *
 * @returns {PropertyDecorator} ?
 * ```
 * @Event(()=>{return true;})
 * ```
 * @private
 */ function notify_property_change_Event() {
                return function(target, key) {
                    var eventDescriptor = {
                        set: function(newValue) {
                            var oldValue = this.properties[key];
                            if (oldValue !== newValue) {
                                var finalContext = /**
 * Returns parent options for the object
 *
 * @param {Object} context ?
 * @param {string} prefix ?
 * @returns {ParentOption} ?
 * @private
 */ function getParentContext(context, prefix) {
                                    // eslint-disable-next-line
                                    if (!1 === context.hasOwnProperty('parentObj')) return {
                                        context: context,
                                        prefix: prefix
                                    };
                                    var curText = util_getValue('propName', context);
                                    return curText && (prefix = curText + '-' + prefix), getParentContext(util_getValue('parentObj', context), prefix);
                                }(this, key);
                                !1 === util_isUndefined(oldValue) && finalContext.context.removeEventListener(finalContext.prefix, oldValue), finalContext.context.addEventListener(finalContext.prefix, newValue), this.properties[key] = newValue;
                            }
                        },
                        get: propertyGetter(void 0, key),
                        enumerable: !0,
                        configurable: !0
                    };
                    Object.defineProperty(target, key, eventDescriptor), addPropertyCollection(target, key, 'event');
                };
            }
            /**
 * NotifyPropertyChanges is triggers the call back when the property has been changed.
 *
 * @param {Function} classConstructor ?
 * @returns {void} ?
 * ```
 *  @NotifyPropertyChanges
 * class DemoClass implements INotifyPropertyChanged {
 *
 *     @Property()
 *     property1: string;
 *
 *     dataBind: () => void;
 *
 *     constructor() { }
 *
 *     onPropertyChanged(newProp: any, oldProp: any) {
 *         // Called when property changed
 *     }
 * }
 * ```
 * @private
 */ // eslint-disable-next-line
            function NotifyPropertyChanges(classConstructor) {
            /** Need to code */ }
            /**
 * Method  used to create the builderObject for the target component.
 *
 * @param {BuildInfo} target ?
 * @param {string} key ?
 * @param {string} propertyType ?
 * @param {Object} defaultValue ?
 * @param {Function} type ?
 * @returns {void} ?
 * @private
 */ function addPropertyCollection(target, key, propertyType, defaultValue, type) {
                util_isUndefined(target.propList) && (target.propList = {
                    props: [],
                    complexProps: [],
                    colProps: [],
                    events: [],
                    propNames: [],
                    complexPropNames: [],
                    colPropNames: [],
                    eventNames: []
                }), // eslint-disable-next-line
                target.propList[propertyType + 's'].push({
                    propertyName: key,
                    defaultValue: defaultValue,
                    type: type
                }), // eslint-disable-next-line
                target.propList[propertyType + 'Names'].push(key);
            }
            var __extends = (extendStatics = function(d, b) {
                return (extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), __decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, Animation = /** @class */ function(_super) {
                var Animation_1;
                function Animation(options) {
                    var _this = _super.call(this, options, void 0) || this;
                    return(/**
         * @private
         */ _this.easing = {
                        ease: 'cubic-bezier(0.250, 0.100, 0.250, 1.000)',
                        linear: 'cubic-bezier(0.250, 0.250, 0.750, 0.750)',
                        easeIn: 'cubic-bezier(0.420, 0.000, 1.000, 1.000)',
                        easeOut: 'cubic-bezier(0.000, 0.000, 0.580, 1.000)',
                        easeInOut: 'cubic-bezier(0.420, 0.000, 0.580, 1.000)',
                        elasticInOut: 'cubic-bezier(0.5,-0.58,0.38,1.81)',
                        elasticIn: 'cubic-bezier(0.17,0.67,0.59,1.81)',
                        elasticOut: 'cubic-bezier(0.7,-0.75,0.99,1.01)'
                    }, _this);
                }
                return __extends(Animation, _super), Animation_1 = Animation, /**
     * Applies animation to the current element.
     *
     * @param {string | HTMLElement} element - Element which needs to be animated.
     * @param {AnimationModel} options - Overriding default animation settings.
     * @returns {void} ?
     */ Animation.prototype.animate = function(element, options) {
                    options = options || {};
                    var model = this.getModel(options);
                    if ('string' == typeof element) for(var elements = Array.prototype.slice.call(selectAll(element, document)), _i = 0; _i < elements.length; _i++){
                        var element_1 = elements[_i];
                        model.element = element_1, Animation_1.delayAnimation(model);
                    }
                    else model.element = element, Animation_1.delayAnimation(model);
                }, /**
     * Stop the animation effect on animated element.
     *
     * @param {HTMLElement} element - Element which needs to be stop the animation.
     * @param {AnimationOptions} model - Handling the animation model at stop function.
     * @return {void}
     */ Animation.stop = function(element, model) {
                    element.style.animation = '', element.removeAttribute('e-animate');
                    var animationId = element.getAttribute('e-animation-id');
                    animationId && (cancelAnimationFrame(parseInt(animationId, 10)), element.removeAttribute('e-animation-id')), model && model.end && model.end.call(this, model);
                }, /**
     * Set delay to animation element
     *
     * @param {AnimationModel} model ?
     * @returns {void}
     */ Animation.delayAnimation = function(model) {
                    'Disable' === animationMode ? (model.begin && model.begin.call(this, model), model.end && model.end.call(this, model)) : model.delay ? setTimeout(function() {
                        Animation_1.applyAnimation(model);
                    }, model.delay) : Animation_1.applyAnimation(model);
                }, /**
     * Triggers animation
     *
     * @param {AnimationModel} model ?
     * @returns {void}
     */ Animation.applyAnimation = function(model) {
                    var _this = this;
                    model.timeStamp = 0;
                    var step = 0, timerId = 0, prevTimeStamp = 0, duration = model.duration;
                    model.element.setAttribute('e-animate', 'true');
                    var startAnimation = function(timeStamp) {
                        try {
                            if (timeStamp) {
                                // let step: number = model.timeStamp = timeStamp - startTime;
                                /** phantomjs workaround for timestamp fix */ prevTimeStamp = 0 === prevTimeStamp ? timeStamp : prevTimeStamp, model.timeStamp = timeStamp + model.timeStamp - prevTimeStamp, prevTimeStamp = timeStamp, !step && model.begin && model.begin.call(_this, model), step += 1;
                                var avg = model.timeStamp / step;
                                model.timeStamp < duration && model.timeStamp + avg < duration && model.element.getAttribute('e-animate') ? (// apply animation effect to the current element
                                model.element.style.animation = model.name + ' ' + model.duration + 'ms ' + model.timingFunction, model.progress && model.progress.call(_this, model), // repeat requestAnimationFrame
                                requestAnimationFrame(startAnimation)) : (// clear requestAnimationFrame
                                cancelAnimationFrame(timerId), model.element.removeAttribute('e-animation-id'), model.element.removeAttribute('e-animate'), model.element.style.animation = '', model.end && model.end.call(_this, model));
                            } else //startTime = performance.now();
                            // set initial requestAnimationFrame
                            timerId = requestAnimationFrame(startAnimation), model.element.setAttribute('e-animation-id', timerId.toString());
                        } catch (e) {
                            cancelAnimationFrame(timerId), model.element.removeAttribute('e-animation-id'), model.fail && model.fail.call(_this, e);
                        }
                    };
                    startAnimation();
                }, /**
     * Returns Animation Model
     *
     * @param {AnimationModel} options ?
     * @returns {AnimationModel} ?
     */ Animation.prototype.getModel = function(options) {
                    return {
                        name: options.name || this.name,
                        delay: options.delay || this.delay,
                        duration: void 0 !== options.duration ? options.duration : this.duration,
                        begin: options.begin || this.begin,
                        end: options.end || this.end,
                        fail: options.fail || this.fail,
                        progress: options.progress || this.progress,
                        timingFunction: this.easing[options.timingFunction] ? this.easing[options.timingFunction] : options.timingFunction || this.easing[this.timingFunction]
                    };
                }, /**
     * @private
     * @param {AnimationModel} newProp ?
     * @param {AnimationModel} oldProp ?
     * @returns {void} ?
     */ // eslint-disable-next-line
                Animation.prototype.onPropertyChanged = function(newProp, oldProp) {
                // no code needed
                }, /**
     * Returns module name as animation
     *
     * @private
     * @returns {void} ?
     */ Animation.prototype.getModuleName = function() {
                    return 'animation';
                }, /**
     *
     * @private
     * @returns {void} ?
     */ Animation.prototype.destroy = function() {
                //Override base destroy;
                }, __decorate([
                    Property('FadeIn')
                ], Animation.prototype, "name", void 0), __decorate([
                    Property(400)
                ], Animation.prototype, "duration", void 0), __decorate([
                    Property('ease')
                ], Animation.prototype, "timingFunction", void 0), __decorate([
                    Property(0)
                ], Animation.prototype, "delay", void 0), __decorate([
                    notify_property_change_Event()
                ], Animation.prototype, "progress", void 0), __decorate([
                    notify_property_change_Event()
                ], Animation.prototype, "begin", void 0), __decorate([
                    notify_property_change_Event()
                ], Animation.prototype, "end", void 0), __decorate([
                    notify_property_change_Event()
                ], Animation.prototype, "fail", void 0), Animation = Animation_1 = __decorate([
                    NotifyPropertyChanges
                ], Animation);
            }(Base);
            /**
 * Ripple provides material theme's wave effect when an element is clicked
 * ```html
 * <div id='ripple'></div>
 * <script>
 *   rippleEffect(document.getElementById('ripple'));
 * </script>
 * ```
 *
 * @private
 * @param {HTMLElement} element - Target element
 * @param {RippleOptions} rippleOptions - Ripple options .
 * @param {Function} done .
 * @returns {void} .
 */ function rippleEffect(element, rippleOptions, done) {
                var rippleModel = {
                    selector: rippleOptions && rippleOptions.selector ? rippleOptions.selector : null,
                    ignore: rippleOptions && rippleOptions.ignore ? rippleOptions.ignore : null,
                    rippleFlag: rippleOptions && rippleOptions.rippleFlag,
                    isCenterRipple: rippleOptions && rippleOptions.isCenterRipple,
                    duration: rippleOptions && rippleOptions.duration ? rippleOptions.duration : 350
                };
                return !1 !== rippleModel.rippleFlag && (void 0 !== rippleModel.rippleFlag || isRippleEnabled) ? (element.setAttribute('data-ripple', 'true'), EventHandler.add(element, 'mousedown', rippleHandler, {
                    parent: element,
                    rippleOptions: rippleModel
                }), EventHandler.add(element, 'mouseup', rippleUpHandler, {
                    parent: element,
                    rippleOptions: rippleModel,
                    done: done
                }), EventHandler.add(element, 'mouseleave', rippleLeaveHandler, {
                    parent: element,
                    rippleOptions: rippleModel
                }), Browser.isPointer && EventHandler.add(element, 'transitionend', rippleLeaveHandler, {
                    parent: element,
                    rippleOptions: rippleModel
                }), function() {
                    element.removeAttribute('data-ripple'), EventHandler.remove(element, 'mousedown', rippleHandler), EventHandler.remove(element, 'mouseup', rippleUpHandler), EventHandler.remove(element, 'mouseleave', rippleLeaveHandler), EventHandler.remove(element, 'transitionend', rippleLeaveHandler);
                }) : function() {};
            }
            /**
 * Handler for ripple event
 *
 * @param {MouseEvent} e ?
 * @returns {void} ?
 * @private
 */ function rippleHandler(e) {
                var target = e.target, selector = this.rippleOptions.selector, element = selector ? closest(target, selector) : target;
                if (!(!element || this.rippleOptions && closest(target, this.rippleOptions.ignore))) {
                    var offset = element.getBoundingClientRect(), offsetX = e.pageX - document.body.scrollLeft, offsetY = e.pageY - (!document.body.scrollTop && document.documentElement ? document.documentElement.scrollTop : document.body.scrollTop), pageX = Math.max(Math.abs(offsetX - offset.left), Math.abs(offsetX - offset.right)), pageY = Math.max(Math.abs(offsetY - offset.top), Math.abs(offsetY - offset.bottom)), radius = Math.sqrt(pageX * pageX + pageY * pageY), diameter = 2 * radius + 'px', x = offsetX - offset.left - radius, y = offsetY - offset.top - radius;
                    this.rippleOptions && this.rippleOptions.isCenterRipple && (x = 0, y = 0, diameter = '100%'), element.classList.add('e-ripple');
                    var rippleElement = createElement('div', {
                        className: 'e-ripple-element',
                        styles: 'width: ' + diameter + ';height: ' + diameter + ';left: ' + x + 'px;top: ' + y + "px;transition-duration: " + this.rippleOptions.duration.toString() + 'ms;'
                    });
                    element.appendChild(rippleElement), window.getComputedStyle(rippleElement).getPropertyValue('opacity'), rippleElement.style.transform = 'scale(1)', element !== this.parent && EventHandler.add(element, 'mouseleave', rippleLeaveHandler, {
                        parent: this.parent,
                        rippleOptions: this.rippleOptions
                    });
                }
            }
            /**
 * Handler for ripple element mouse up event
 *
 * @param {MouseEvent} e ?
 * @returns {void} ?
 * @private
 */ function rippleUpHandler(e) {
                removeRipple(e, this);
            }
            /**
 * Handler for ripple element mouse move event
 *
 * @param {MouseEvent} e ?
 * @returns {void} ?
 * @private
 */ function rippleLeaveHandler(e) {
                removeRipple(e, this);
            }
            /**
 * Handler for removing ripple element
 *
 * @param {MouseEvent} e ?
 * @param {RippleArgs} eventArgs ?
 * @returns {void} ?
 * @private
 */ function removeRipple(e, eventArgs) {
                var duration = eventArgs.rippleOptions.duration, target = e.target, selector = eventArgs.rippleOptions.selector, element = selector ? closest(target, selector) : target;
                if (element && (!element || -1 !== element.className.indexOf('e-ripple'))) {
                    var rippleElements = selectAll('.e-ripple-element', element), rippleElement = rippleElements[rippleElements.length - 1];
                    rippleElement && (rippleElement.style.opacity = '0.5'), eventArgs.parent !== element && EventHandler.remove(element, 'mouseleave', rippleLeaveHandler), /* tslint:disable:align */ setTimeout(function() {
                        rippleElement && rippleElement.parentNode && rippleElement.parentNode.removeChild(rippleElement), element.getElementsByClassName('e-ripple-element').length || element.classList.remove('e-ripple'), eventArgs.done && eventArgs.done(e);
                    }, duration);
                }
            }
            var isRippleEnabled = !1, animationMode = '', ModuleLoader = /** @class */ function() {
                function ModuleLoader(parent) {
                    this.loadedModules = [], this.parent = parent;
                }
                return(/**
     * Inject required modules in component library
     *
     * @returns {void} ?
     * @param {ModuleDeclaration[]} requiredModules - Array of modules to be required
     * @param {Function[]} moduleList - Array of modules to be injected from sample side
     */ ModuleLoader.prototype.inject = function(requiredModules, moduleList) {
                    var reqLength = requiredModules.length;
                    if (0 === reqLength) {
                        this.clean();
                        return;
                    }
                    this.loadedModules.length && this.clearUnusedModule(requiredModules);
                    for(var i = 0; i < reqLength; i++)for(var modl = requiredModules[i], _i = 0; _i < moduleList.length; _i++){
                        var module = moduleList[_i], modName = modl.member;
                        if (module.prototype.getModuleName() === modl.member && !this.isModuleLoaded(modName)) {
                            var moduleObject = createInstance(module, modl.args), memberName = this.getMemberName(modName);
                            modl.isProperty ? setValue(memberName, module, this.parent) : setValue(memberName, moduleObject, this.parent), modl.member = memberName, this.loadedModules.push(modl);
                        }
                    }
                }, /**
     * To remove the created object while destroying the control
     *
     * @returns {void}
     */ ModuleLoader.prototype.clean = function() {
                    for(var _i = 0, _a = this.loadedModules; _i < _a.length; _i++){
                        var modules = _a[_i];
                        modules.isProperty || util_getValue(modules.member, this.parent).destroy();
                    }
                    this.loadedModules = [];
                }, /**
     * Removes all unused modules
     *
     * @param {ModuleDeclaration[]} moduleList ?
     * @returns {void} ?
     */ ModuleLoader.prototype.clearUnusedModule = function(moduleList) {
                    for(var _this = this, usedModules = moduleList.map(function(arg) {
                        return _this.getMemberName(arg.member);
                    }), removableModule = this.loadedModules.filter(function(module) {
                        return -1 === usedModules.indexOf(module.member);
                    }), _i = 0; _i < removableModule.length; _i++){
                        var mod = removableModule[_i];
                        mod.isProperty || util_getValue(mod.member, this.parent).destroy(), this.loadedModules.splice(this.loadedModules.indexOf(mod), 1), deleteObject(this.parent, mod.member);
                    }
                }, /**
     * To get the name of the member.
     *
     * @param {string} name ?
     * @returns {string} ?
     */ ModuleLoader.prototype.getMemberName = function(name) {
                    return name[0].toLowerCase() + name.substring(1) + 'Module';
                }, /**
     * Returns boolean based on whether the module specified is loaded or not
     *
     * @param {string} modName ?
     * @returns {boolean} ?
     */ ModuleLoader.prototype.isModuleLoaded = function(modName) {
                    for(var _i = 0, _a = this.loadedModules; _i < _a.length; _i++)if (_a[_i].member === this.getMemberName(modName)) return !0;
                    return !1;
                }, ModuleLoader);
            }(), ChildProperty = /** @class */ function() {
                function ChildProperty(parent, propName, defaultValue, isArray) {
                    this.isComplexArraySetter = !1, this.properties = {}, this.changedProperties = {}, this.childChangedProperties = {}, this.oldProperties = {}, // eslint-disable-next-line
                    this.finalUpdate = function() {}, this.callChildDataBind = util_getValue('callChildDataBind', Base), this.parentObj = parent, this.controlParent = this.parentObj.controlParent || this.parentObj, this.propName = propName, this.isParentArray = isArray, this.setProperties(defaultValue, !0);
                }
                return(/**
     * Updates the property changes
     *
     * @param {boolean} val ?
     * @param {string} propName ?
     * @returns {void} ?
     */ ChildProperty.prototype.updateChange = function(val, propName) {
                    !0 === val ? this.parentObj.childChangedProperties[propName] = val : delete this.parentObj.childChangedProperties[propName], this.parentObj.updateChange && this.parentObj.updateChange(val, this.parentObj.propName);
                }, /**
     * Updates time out duration
     *
     * @returns {void} ?
     */ ChildProperty.prototype.updateTimeOut = function() {
                    if (this.parentObj.updateTimeOut) this.parentObj.finalUpdate(), this.parentObj.updateTimeOut();
                    else {
                        var changeTime_1 = setTimeout(this.parentObj.dataBind.bind(this.parentObj));
                        this.finalUpdate = function() {
                            clearTimeout(changeTime_1);
                        };
                    }
                }, /**
     * Clears changed properties
     *
     * @returns {void} ?
     */ ChildProperty.prototype.clearChanges = function() {
                    this.finalUpdate(), this.updateChange(!1, this.propName), this.oldProperties = {}, this.changedProperties = {};
                }, /**
     * Set property changes
     *
     * @param {Object} prop ?
     * @param {boolean} muteOnChange ?
     * @returns {void} ?
     */ ChildProperty.prototype.setProperties = function(prop, muteOnChange) {
                    !0 === muteOnChange ? (util_merge(this, prop), this.updateChange(!1, this.propName), this.clearChanges()) : util_merge(this, prop);
                }, /**
     * Binds data
     *
     * @returns {void} ?
     */ ChildProperty.prototype.dataBind = function() {
                    if (this.callChildDataBind(this.childChangedProperties, this), this.isParentArray) {
                        var curIndex = this.parentObj[this.propName].indexOf(this);
                        Object.keys(this.changedProperties).length && (setValue(this.propName + '.' + curIndex, this.changedProperties, this.parentObj.changedProperties), setValue(this.propName + '.' + curIndex, this.oldProperties, this.parentObj.oldProperties));
                    } else this.parentObj.changedProperties[this.propName] = this.changedProperties, this.parentObj.oldProperties[this.propName] = this.oldProperties;
                    this.clearChanges();
                }, /**
     * Saves changes to newer values
     *
     * @param {string} key ?
     * @param {Object} newValue ?
     * @param {Object} oldValue ?
     * @param {boolean} restrictServerDataBind ?
     * @returns {void} ?
     */ ChildProperty.prototype.saveChanges = function(key, newValue, oldValue, restrictServerDataBind) {
                    this.controlParent.isProtectedOnChange || (restrictServerDataBind || this.serverDataBind(key, newValue, !0), this.oldProperties[key] = oldValue, this.changedProperties[key] = newValue, this.updateChange(!0, this.propName), this.finalUpdate(), this.updateTimeOut());
                }, ChildProperty.prototype.serverDataBind = function(key, value, isSaveChanges, action) {}, ChildProperty.prototype.getParentKey = function(isSaveChanges) {
                    // eslint-disable-next-line
                    var index = '', propName = this.propName;
                    /* istanbul ignore next */ if (this.isParentArray) {
                        index = this.parentObj[this.propName].indexOf(this);
                        var valueLength = this.parentObj[this.propName].length;
                        valueLength = isSaveChanges ? valueLength : valueLength > 0 ? valueLength - 1 : 0, propName += index = -1 !== index ? '-' + index : '-' + valueLength;
                    }
                    return this.controlParent !== this.parentObj && (propName = this.parentObj.getParentKey() + '.' + this.propName + index), propName;
                }, ChildProperty);
            }(), bypassKey = [
                115,
                121,
                110,
                99,
                102,
                117,
                115,
                105,
                111,
                110,
                46,
                105,
                115,
                76,
                105,
                99,
                86,
                97,
                108,
                105,
                100,
                97,
                116,
                101,
                100
            ], LicenseValidator = /** @class */ function() {
                function LicenseValidator(key) {
                    var licKey;
                    this.isValidated = !1, this.version = '20.2', this.platform = /JavaScript|ASPNET|ASPNETCORE|ASPNETMVC|FileFormats/i, this.errors = {
                        noLicense: 'This application was built using a trial version of Syncfusion Essential Studio. Please include a valid license to permanently remove this license validation message. You can also obtain a free 30 day evaluation license to temporarily remove this message during the evaluation period. Please refer to this <a class="e-license"href="https://help.syncfusion.com/common/essential-studio/licensing">help topic</a> for more information.',
                        trailExpired: 'Your Syncfusion trial license has expired. Please refer to this <a class="e-license"href="https://help.syncfusion.com/common/essential-studio/licensing/licensing-errors#trial-expired">help topic</a> for more information.',
                        versionMismatched: 'The included Syncfusion license (v##LicenseVersion) is invalid for version ##Requireversion. Please refer to this <a class="e-license" href="https://help.syncfusion.com/es/licensing/version-mismatch/">help topic</a> for more information.',
                        platformMismatched: 'The included Syncfusion license is invalid (Platform mismatch). Please refer to this <a class="e-license" href="https://help.syncfusion.com/common/essential-studio/licensing/licensing-errors#platform-mismatch">help topic</a> for more information.',
                        invalidKey: 'The included Syncfusion license is invalid. Please refer to this <a class="e-license" href="https://help.syncfusion.com/common/essential-studio/licensing/licensing-errors#invalid-key">help topic</a> for more information.'
                    }, /**
         * To manage licensing operation.
         */ this.manager = (licKey = null, {
                        setKey: function(key) {
                            licKey = key;
                        },
                        getKey: function() {
                            return licKey;
                        }
                    }), /**
         * To manage npx licensing operation.
         */ this.npxManager = {
                        getKey: function() {
                            return 'npxKeyReplace';
                        }
                    }, this.manager.setKey(key);
                }
                return(/**
     * To validate the provided license key.
    */ LicenseValidator.prototype.validate = function() {
                    if (!this.isValidated && containerObject && !util_getValue(convertToChar(bypassKey), containerObject) && !util_getValue('Blazor', containerObject)) {
                        var validateMsg = void 0;
                        if (this.manager && this.manager.getKey() || this.npxManager && 'npxKeyReplace' !== this.npxManager.getKey()) {
                            var result = this.getInfoFromKey();
                            if (result && result.length) for(var _i = 0; _i < result.length; _i++){
                                var res = result[_i];
                                if (!this.platform.test(res.platform) || res.invalidPlatform) validateMsg = this.errors.platformMismatched;
                                else if (-1 === res.version.indexOf(this.version)) validateMsg = (validateMsg = (validateMsg = this.errors.versionMismatched).replace('##LicenseVersion', res.version)).replace('##Requireversion', this.version + '.x');
                                else if (res.expiryDate) {
                                    var expDate = new Date(res.expiryDate), currDate = new Date();
                                    if (expDate !== currDate && expDate < currDate) validateMsg = this.errors.trailExpired;
                                    else break;
                                }
                            }
                            else validateMsg = this.errors.invalidKey;
                        } else validateMsg = this.errors.noLicense;
                        if (validateMsg && 'undefined' != typeof document && !util_isNullOrUndefined(document)) {
                            var errorDiv = createElement('div', {
                                innerHTML: validateMsg + '<span id="license-banner-error" class=".e-license-banner"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20"><line x1="5" y1="5" x2="15" y2="15" stroke="yellow" stroke-width="2.5" stroke-miterlimit="10" stroke-linecap="round"></line><line x1="15" y1="5" x2="5" y2="15" stroke="yellow" stroke-width="2.5" stroke-linecap="round" stroke-miterlimit="10"></line></svg></span>',
                                styles: 'position:fixed;top:0;left:0;right:0;font-family:"Segoe UI";font-size:16px;background:repeating-linear-gradient(45deg,#d70f0f,#d70f0f 10px,#e12121 10px,#e12121 17px);color:#ffffff;z-index:999999999;text-align:center;padding:10px 50px 10px 25px;'
                            });
                            errorDiv.setAttribute('id', 'js-licensing'), document.body.appendChild(errorDiv), document.getElementById('license-banner-error').addEventListener('click', function() {
                                document.getElementById('js-licensing').remove();
                            });
                        }
                        this.isValidated = !0, setValue(convertToChar(bypassKey), this.isValidated, containerObject);
                    }
                }, LicenseValidator.prototype.getDecryptedData = function(key) {
                    try {
                        return atob(key);
                    } catch (error) {
                        return '';
                    }
                }, /**
     * Get license information from key.
     */ LicenseValidator.prototype.getInfoFromKey = function() {
                    try {
                        var licKey = '', pkey = [
                            5439488,
                            7929856,
                            5111808,
                            6488064,
                            4587520,
                            7667712,
                            5439488,
                            6881280,
                            5177344,
                            7208960,
                            4194304,
                            4456448,
                            6619136,
                            7733248,
                            5242880,
                            7077888,
                            6356992,
                            7602176,
                            4587520,
                            7274496,
                            7471104,
                            7143424
                        ], decryptedStr = [], resultArray = [], invalidPlatform = !1, isNpxKey = !1;
                        this.manager.getKey() ? licKey = this.manager.getKey() : (isNpxKey = !0, licKey = this.npxManager.getKey().split('npxKeyReplace')[1]);
                        for(var licKeySplit = licKey.split(';'), _i = 0; _i < licKeySplit.length; _i++){
                            var lKey = licKeySplit[_i], decodeStr = this.getDecryptedData(lKey);
                            if (decodeStr) {
                                var k = 0, buffr = '';
                                if (isNpxKey) {
                                    for(var charKey = decodeStr[decodeStr.length - 1], decryptedKey = [], i = 0; i < decodeStr.length; i++)decryptedKey[i] = decodeStr[i].charCodeAt(0) - charKey.charCodeAt(0);
                                    for(var i = 0; i < decryptedKey.length; i++)buffr += String.fromCharCode(decryptedKey[i]);
                                } else for(var i = 0; i < decodeStr.length; i++, k++){
                                    k === pkey.length && (k = 0);
                                    var c = decodeStr.charCodeAt(i);
                                    buffr += String.fromCharCode(c ^ pkey[k] >> 16);
                                }
                                this.platform.test(buffr) ? (decryptedStr = buffr.split(';'), invalidPlatform = !1, decryptedStr.length > 3 && resultArray.push({
                                    platform: decryptedStr[0],
                                    version: decryptedStr[1],
                                    expiryDate: decryptedStr[2]
                                })) : buffr && buffr.split(';').length > 3 && (invalidPlatform = !0);
                            }
                        }
                        if (invalidPlatform && !resultArray.length) return [
                            {
                                invalidPlatform: invalidPlatform
                            }
                        ];
                        return resultArray.length ? resultArray : null;
                    } catch (error) {
                        return null;
                    }
                }, LicenseValidator);
            }(), licenseValidator = new LicenseValidator();
            function convertToChar(cArr) {
                for(var ret = '', _i = 0; _i < cArr.length; _i++)ret += String.fromCharCode(cArr[_i]);
                return ret;
            }
            var validateLicense = function(key) {
                key && (licenseValidator = new LicenseValidator(key)), licenseValidator.validate();
            }, component_extends = (extendStatics1 = function(d, b) {
                return (extendStatics1 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics1(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), component_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, componentCount = 0, lastHistoryLen = 0, Component = /** @class */ function(_super) {
                /**
     * Initialize the constructor for component base
     *
     * @param {Object} options ?
     * @param {string} selector ?
     */ function Component(options, selector) {
                    var _this = _super.call(this, options, selector) || this;
                    return _this.randomId = /**
 * Function to generate the unique id.
 *
 * @returns {any} ?
 * @private
 */ // eslint-disable-next-line
                    function() {
                        if ('undefined' != typeof window) {
                            // eslint-disable-next-line
                            var num = new Uint16Array(5);
                            return (window.msCrypto || window.crypto).getRandomValues(num);
                        }
                    }(), /**
         * string template option for Blazor template rendering
         *
         * @private
         */ _this.isStringTemplate = !1, _this.needsID = !1, _this.isReactHybrid = !1, util_isNullOrUndefined(_this.enableRtl) && _this.setProperties({
                        enableRtl: !1
                    }, !0), util_isNullOrUndefined(_this.locale) && _this.setProperties({
                        locale: defaultCulture
                    }, !0), _this.moduleLoader = new ModuleLoader(_this), _this.localObserver = new Observer(_this), // tslint:disable-next-line:no-function-constructor-with-string-args
                    onIntlChange.on('notifyExternalChange', _this.detectFunction, _this, _this.randomId), validateLicense(), util_isUndefined(selector) || _this.appendTo(), _this;
                }
                return component_extends(Component, _super), Component.prototype.requiredModules = function() {
                    return [];
                }, /**
     * Destroys the sub modules while destroying the widget
     *
     * @returns {void} ?
     */ Component.prototype.destroy = function() {
                    !this.isDestroyed && (this.enablePersistence && this.setPersistData(), this.localObserver.destroy(), this.refreshing || (removeClass([
                        this.element
                    ], [
                        'e-control'
                    ]), this.trigger('destroyed', {
                        cancel: !1
                    }), _super.prototype.destroy.call(this), this.moduleLoader.clean(), onIntlChange.off('notifyExternalChange', this.detectFunction, this.randomId)));
                }, /**
     * Applies all the pending property changes and render the component again.
     *
     * @returns {void} ?
     */ Component.prototype.refresh = function() {
                    this.refreshing = !0, this.moduleLoader.clean(), this.destroy(), this.clearChanges(), this.localObserver = new Observer(this), this.preRender(), this.injectModules(), this.render(), this.refreshing = !1;
                }, Component.prototype.accessMount = function() {
                    this.mount && !this.isReactHybrid && this.mount();
                }, /**
     * Returns the route element of the component
     *
     * @returns {HTMLElement} ?
     */ Component.prototype.getRootElement = function() {
                    return this.isReactHybrid ? this.actualElement : this.element;
                }, /**
     * Returns the persistence data for component
     *
     * @returns {any} ?
     */ // eslint-disable-next-line
                Component.prototype.getLocalData = function() {
                    var eleId = this.getModuleName() + this.element.id;
                    return window.localStorage.getItem(eleId);
                }, /**
     * Appends the control within the given HTML element
     *
     * @param {string | HTMLElement} selector - Target element where control needs to be appended
     * @returns {void} ?
     */ Component.prototype.appendTo = function(selector) {
                    if (util_isNullOrUndefined(selector) || 'string' != typeof selector ? util_isNullOrUndefined(selector) || (this.element = selector) : this.element = dom_select(selector, document), !util_isNullOrUndefined(this.element)) {
                        var moduleClass = 'e-' + this.getModuleName().toLowerCase();
                        addClass([
                            this.element
                        ], [
                            'e-control',
                            moduleClass
                        ]), this.isProtectedOnChange = !1, this.needsID && !this.element.id && (this.element.id = this.getUniqueID(this.getModuleName())), this.enablePersistence && (this.mergePersistData(), window.addEventListener('unload', this.setPersistData.bind(this)));
                        var inst = util_getValue('ej2_instances', this.element);
                        inst && -1 !== inst.indexOf(this) || _super.prototype.addInstance.call(this), this.preRender(), this.injectModules(), this.render(), this.mount ? this.accessMount() : this.trigger('created');
                    }
                }, /**
     * It is used to process the post rendering functionalities to a component.
     *
     * @param {Node} wrapperElement ?
     * @returns {void} ?
     */ Component.prototype.renderComplete = function(wrapperElement) {
                    this.isRendered = !0;
                }, /**
     * When invoked, applies the pending property changes immediately to the component.
     *
     * @returns {void} ?
     */ Component.prototype.dataBind = function() {
                    this.injectModules(), _super.prototype.dataBind.call(this);
                }, /**
     * Attach one or more  event handler to the current component context.
     * It is used for internal handling event internally within the component only.
     *
     * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.
     * @param {Function} handler - optional parameter Specifies the handler to run when the event occurs
     * @param {Object} context - optional parameter Specifies the context to be bind in the handler.
     * @returns {void} ?
     * @private
     */ Component.prototype.on = function(event, handler, context) {
                    if ('string' == typeof event) this.localObserver.on(event, handler, context);
                    else for(var _i = 0; _i < event.length; _i++){
                        var arg = event[_i];
                        this.localObserver.on(arg.event, arg.handler, arg.context);
                    }
                }, /**
     * To remove one or more event handler that has been attached with the on() method.
     *
     * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.
     * @param {Function} handler - optional parameter Specifies the function to run when the event occurs
     * @returns {void} ?
     * @private
     */ Component.prototype.off = function(event, handler) {
                    if ('string' == typeof event) this.localObserver.off(event, handler);
                    else for(var _i = 0; _i < event.length; _i++){
                        var arg = event[_i];
                        this.localObserver.off(arg.event, arg.handler);
                    }
                }, /**
     * To notify the handlers in the specified event.
     *
     * @param {string} property - Specifies the event to be notify.
     * @param {Object} argument - Additional parameters to pass while calling the handler.
     * @returns {void} ?
     * @private
     */ Component.prototype.notify = function(property, argument) {
                    !0 !== this.isDestroyed && this.localObserver.notify(property, argument);
                }, /**
     * Get injected modules
     *
     * @returns {Function} ?
     * @private
     */ Component.prototype.getInjectedModules = function() {
                    return this.injectedModules;
                }, /**
     * Dynamically injects the required modules to the component.
     *
     * @param {Function} moduleList ?
     * @returns {void} ?
     */ Component.Inject = function() {
                    for(var moduleList = [], _i = 0; _i < arguments.length; _i++)moduleList[_i] = arguments[_i];
                    this.prototype.injectedModules || (this.prototype.injectedModules = []);
                    for(var i = 0; i < moduleList.length; i++)-1 === this.prototype.injectedModules.indexOf(moduleList[i]) && this.prototype.injectedModules.push(moduleList[i]);
                }, /**
     * This is a instance method to create an element.
     *
     * @param {string} tagName ?
     * @param {ElementProperties} prop ?
     * @param {boolean} isVDOM ?
     * @returns {any} ?
     * @private
     */ // eslint-disable-next-line
                Component.prototype.createElement = function(tagName, prop, isVDOM) {
                    return createElement(tagName, prop);
                }, /**
     *
     * @param {Function} handler - handler to be triggered after state Updated.
     * @param {any} argument - Arguments to be passed to caller.
     * @returns {void} .
     * @private
     */ // eslint-disable-next-line
                Component.prototype.triggerStateChange = function(handler, argument) {
                    this.isReactHybrid && (// eslint-disable-next-line
                    this.setState(), this.currentContext = {
                        calls: handler,
                        args: argument
                    });
                }, // tslint: enable: no-any
                Component.prototype.injectModules = function() {
                    this.injectedModules && this.injectedModules.length && this.moduleLoader.inject(this.requiredModules(), this.injectedModules);
                }, Component.prototype.detectFunction = function(args) {
                    var prop = Object.keys(args);
                    prop.length && (this[prop[0]] = args[prop[0]]);
                }, Component.prototype.mergePersistData = function() {
                    var data;
                    util_isNullOrUndefined(data = window.localStorage.getItem(this.getModuleName() + this.element.id)) || '' === data || this.setProperties(JSON.parse(data), !0);
                }, Component.prototype.setPersistData = function() {
                    this.isDestroyed || window.localStorage.setItem(this.getModuleName() + this.element.id, this.getPersistData());
                }, //tslint:disable-next-line
                Component.prototype.renderReactTemplates = function() {
                //No Code
                }, // eslint-disable-next-line
                Component.prototype.clearTemplate = function(templateName, index) {
                //No Code
                }, Component.prototype.getUniqueID = function(definedName) {
                    return this.isHistoryChanged() && (componentCount = 0), lastPageID = this.pageID(location.href), lastHistoryLen = history.length, definedName + '_' + lastPageID + '_' + componentCount++;
                }, Component.prototype.pageID = function(url) {
                    var hash = 0;
                    if (0 === url.length) return hash;
                    for(var i = 0; i < url.length; i++)hash = (hash << 5) - hash + url.charCodeAt(i), hash &= hash;
                    return Math.abs(hash);
                }, Component.prototype.isHistoryChanged = function() {
                    return lastPageID !== this.pageID(location.href) || lastHistoryLen !== history.length;
                }, Component.prototype.addOnPersist = function(options) {
                    for(var _this = this, persistObj = {}, _i = 0; _i < options.length; _i++){
                        var key = options[_i], objValue = void 0;
                        util_isUndefined(// eslint-disable-next-line
                        objValue = util_getValue(key, this)) || setValue(key, this.getActualProperties(objValue), persistObj);
                    }
                    return JSON.stringify(persistObj, function(key, value) {
                        return _this.getActualProperties(value);
                    });
                }, Component.prototype.getActualProperties = function(obj) {
                    return obj instanceof ChildProperty ? util_getValue('properties', obj) : obj;
                }, Component.prototype.ignoreOnPersist = function(options) {
                    return JSON.stringify(this.iterateJsonProperties(this.properties, options));
                }, Component.prototype.iterateJsonProperties = function(obj, ignoreList) {
                    for(var newObj = {}, _loop_1 = function(key) {
                        if (-1 === ignoreList.indexOf(key)) {
                            // eslint-disable-next-line
                            var value = obj[key];
                            if ('object' != typeof value || value instanceof Array) newObj[key] = value;
                            else {
                                var newList = ignoreList.filter(function(str) {
                                    return RegExp(key + '.').test(str);
                                }).map(function(str) {
                                    return str.replace(key + '.', '');
                                });
                                newObj[key] = this_1.iterateJsonProperties(this_1.getActualProperties(value), newList);
                            }
                        }
                    }, this_1 = this, _i = 0, _a = Object.keys(obj); _i < _a.length; _i++)_loop_1(_a[_i]);
                    return newObj;
                }, component_decorate([
                    Property(!1)
                ], Component.prototype, "enablePersistence", void 0), component_decorate([
                    Property()
                ], Component.prototype, "enableRtl", void 0), component_decorate([
                    Property()
                ], Component.prototype, "locale", void 0), Component = component_decorate([
                    NotifyPropertyChanges
                ], Component);
            }(Base);
            'undefined' != typeof window && window.addEventListener('popstate', /* istanbul ignore next */ function() {
                componentCount = 0;
            });
            var draggable_extends = (extendStatics2 = function(d, b) {
                return (extendStatics2 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics2(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), draggable_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, defaultPosition = {
                left: 0,
                top: 0,
                bottom: 0,
                right: 0
            }, isDraggedObject = {
                isDragged: !1
            }, Position = /** @class */ function(_super) {
                function Position() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return draggable_extends(Position, _super), draggable_decorate([
                    Property(0)
                ], Position.prototype, "left", void 0), draggable_decorate([
                    Property(0)
                ], Position.prototype, "top", void 0), Position;
            }(ChildProperty), Draggable = /** @class */ function(_super) {
                var Draggable_1;
                function Draggable(element, options) {
                    var _this = _super.call(this, options, element) || this;
                    return _this.dragLimit = Draggable_1.getDefaultPosition(), _this.borderWidth = Draggable_1.getDefaultPosition(), _this.padding = Draggable_1.getDefaultPosition(), _this.diffX = 0, _this.prevLeft = 0, _this.prevTop = 0, _this.dragProcessStarted = !1, /* tslint:disable no-any */ _this.eleTop = 0, _this.tapHoldTimer = 0, _this.externalInitialize = !1, _this.diffY = 0, _this.parentScrollX = 0, _this.parentScrollY = 0, _this.droppables = {}, _this.bind(), _this;
                }
                return draggable_extends(Draggable, _super), Draggable_1 = Draggable, Draggable.prototype.bind = function() {
                    this.toggleEvents(), Browser.isIE && addClass([
                        this.element
                    ], 'e-block-touch'), this.droppables[this.scope] = {};
                }, Draggable.getDefaultPosition = function() {
                    return util_extend({}, defaultPosition);
                }, Draggable.prototype.toggleEvents = function(isUnWire) {
                    util_isUndefined(this.handle) || (ele = dom_select(this.handle, this.element));
                    var ele, handler = this.enableTapHold && Browser.isDevice && Browser.isTouch ? this.mobileInitialize : this.initialize;
                    isUnWire ? EventHandler.remove(ele || this.element, Browser.touchStartEvent, handler) : EventHandler.add(ele || this.element, Browser.touchStartEvent, handler, this);
                }, /* istanbul ignore next */ Draggable.prototype.mobileInitialize = function(evt) {
                    var _this = this, target = evt.currentTarget;
                    this.tapHoldTimer = setTimeout(function() {
                        _this.externalInitialize = !0, _this.removeTapholdTimer(), _this.initialize(evt, target);
                    }, this.tapHoldThreshold), EventHandler.add(document, Browser.touchMoveEvent, this.removeTapholdTimer, this), EventHandler.add(document, Browser.touchEndEvent, this.removeTapholdTimer, this);
                }, /* istanbul ignore next */ Draggable.prototype.removeTapholdTimer = function() {
                    clearTimeout(this.tapHoldTimer), EventHandler.remove(document, Browser.touchMoveEvent, this.removeTapholdTimer), EventHandler.remove(document, Browser.touchEndEvent, this.removeTapholdTimer);
                }, /* istanbul ignore next */ Draggable.prototype.getScrollableParent = function(element, axis) {
                    return util_isNullOrUndefined(element) ? null : element[({
                        vertical: 'scrollHeight',
                        horizontal: 'scrollWidth'
                    })[axis]] > element[({
                        vertical: 'clientHeight',
                        horizontal: 'clientWidth'
                    })[axis]] && ('vertical' === axis ? element.scrollTop > 0 : element.scrollLeft > 0) && ('vertical' === axis ? (this.parentScrollY = this.parentScrollY + (0 === this.parentScrollY ? element.scrollTop : element.scrollTop - this.parentScrollY), this.tempScrollHeight = element.scrollHeight) : (this.parentScrollX = this.parentScrollX + (0 === this.parentScrollX ? element.scrollLeft : element.scrollLeft - this.parentScrollX), this.tempScrollWidth = element.scrollWidth), util_isNullOrUndefined(element)) ? element : this.getScrollableParent(element.parentNode, axis);
                }, Draggable.prototype.getScrollableValues = function() {
                    this.parentScrollX = 0, this.parentScrollY = 0, this.element.classList.contains('e-dialog') && this.element.classList.contains('e-dlg-modal'), this.getScrollableParent(this.element.parentNode, 'vertical'), this.getScrollableParent(this.element.parentNode, 'horizontal');
                }, Draggable.prototype.initialize = function(evt, curTarget) {
                    if (this.currentStateTarget = evt.target, !this.isDragStarted()) {
                        if (this.isDragStarted(!0), this.externalInitialize = !1, this.target = evt.currentTarget || curTarget, this.dragProcessStarted = !1, this.abort) {
                            /* tslint:disable no-any */ var abortSelectors = this.abort;
                            'string' == typeof abortSelectors && (abortSelectors = [
                                abortSelectors
                            ]);
                            for(var i = 0; i < abortSelectors.length; i++)if (!util_isNullOrUndefined(closest(evt.target, abortSelectors[i]))) {
                                /* istanbul ignore next */ this.isDragStarted() && this.isDragStarted(!0);
                                return;
                            }
                        }
                        this.preventDefault && !util_isUndefined(evt.changedTouches) && 'touchstart' !== evt.type && evt.preventDefault(), this.element.setAttribute('aria-grabbed', 'true');
                        var intCoord = this.getCoordinates(evt);
                        if (this.initialPosition = {
                            x: intCoord.pageX,
                            y: intCoord.pageY
                        }, !this.clone) {
                            var pos = this.element.getBoundingClientRect();
                            this.getScrollableValues(), evt.clientX === evt.pageX && (this.parentScrollX = 0), evt.clientY === evt.pageY && (this.parentScrollY = 0), this.relativeXPosition = intCoord.pageX - (pos.left + this.parentScrollX), this.relativeYPosition = intCoord.pageY - (pos.top + this.parentScrollY);
                        }
                        this.externalInitialize ? this.intDragStart(evt) : (EventHandler.add(document, Browser.touchMoveEvent, this.intDragStart, this), EventHandler.add(document, Browser.touchEndEvent, this.intDestroy, this)), this.toggleEvents(!0), 'touchstart' !== evt.type && this.isPreventSelect && document.body.classList.add('e-prevent-select'), this.externalInitialize = !1, EventHandler.trigger(document.documentElement, Browser.touchStartEvent, evt);
                    }
                }, Draggable.prototype.intDragStart = function(evt) {
                    this.removeTapholdTimer();
                    var pos, isChangeTouch = !util_isUndefined(evt.changedTouches);
                    if (!isChangeTouch || 1 === evt.changedTouches.length) {
                        var intCordinate = this.getCoordinates(evt), styleProp = getComputedStyle(this.element);
                        this.margin = {
                            left: parseInt(styleProp.marginLeft, 10),
                            top: parseInt(styleProp.marginTop, 10),
                            right: parseInt(styleProp.marginRight, 10),
                            bottom: parseInt(styleProp.marginBottom, 10)
                        };
                        var element = this.element;
                        if (this.clone && this.dragTarget) {
                            var intClosest = closest(evt.target, this.dragTarget);
                            util_isNullOrUndefined(intClosest) || (element = intClosest);
                        }
                        this.isReplaceDragEle && (element = this.currentStateCheck(evt.target, element)), this.offset = this.calculateParentPosition(element), this.position = this.getMousePosition(evt, this.isDragScroll);
                        var x = this.initialPosition.x - intCordinate.pageX, y = this.initialPosition.y - intCordinate.pageY;
                        if (Math.sqrt(x * x + y * y) >= this.distance || this.externalInitialize) {
                            var ele = this.getHelperElement(evt);
                            if (!ele || util_isNullOrUndefined(ele)) return;
                            isChangeTouch && evt.preventDefault();
                            var dragTargetElement = this.helperElement = ele;
                            if (this.parentClientRect = this.calculateParentPosition(dragTargetElement.offsetParent), this.dragStart) {
                                var curTarget = this.getProperTargetElement(evt), args = {
                                    event: evt,
                                    element: element,
                                    target: curTarget,
                                    bindEvents: null,
                                    dragElement: dragTargetElement
                                };
                                this.trigger('dragStart', args);
                            }
                            this.dragArea ? this.setDragArea() : (this.dragLimit = {
                                left: 0,
                                right: 0,
                                bottom: 0,
                                top: 0
                            }, this.borderWidth = {
                                top: 0,
                                left: 0
                            }), pos = {
                                left: this.position.left - this.parentClientRect.left,
                                top: this.position.top - this.parentClientRect.top
                            }, this.clone && !this.enableTailMode && (this.diffX = this.position.left - this.offset.left, this.diffY = this.position.top - this.offset.top), this.getScrollableValues();
                            // when drag element has margin-top
                            var styles = getComputedStyle(element), marginTop = parseFloat(styles.marginTop);
                            this.clone && 0 !== marginTop && (pos.top += marginTop), this.eleTop = isNaN(parseFloat(styles.top)) ? 0 : parseFloat(styles.top) - this.offset.top, this.enableScrollHandler && !this.clone && (pos.top -= this.parentScrollY, pos.left -= this.parentScrollX);
                            var posValue = this.getProcessedPositionValue({
                                top: pos.top - this.diffY + 'px',
                                left: pos.left - this.diffX + 'px'
                            });
                            this.dragElePosition = {
                                top: pos.top,
                                left: pos.left
                            }, setStyleAttribute(dragTargetElement, this.getDragPosition({
                                position: 'absolute',
                                left: posValue.left,
                                top: posValue.top
                            })), EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart), EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy), this.bindDragEvents(dragTargetElement);
                        }
                    }
                }, Draggable.prototype.bindDragEvents = function(dragTargetElement) {
                    isVisible(dragTargetElement) ? (EventHandler.add(document, Browser.touchMoveEvent, this.intDrag, this), EventHandler.add(document, Browser.touchEndEvent, this.intDragStop, this), this.setGlobalDroppables(!1, this.element, dragTargetElement)) : (this.toggleEvents(), document.body.classList.remove('e-prevent-select'));
                }, Draggable.prototype.elementInViewport = function(el) {
                    for(this.top = el.offsetTop, this.left = el.offsetLeft, this.width = el.offsetWidth, this.height = el.offsetHeight; el.offsetParent;)el = el.offsetParent, this.top += el.offsetTop, this.left += el.offsetLeft;
                    return this.top >= window.pageYOffset && this.left >= window.pageXOffset && this.top + this.height <= window.pageYOffset + window.innerHeight && this.left + this.width <= window.pageXOffset + window.innerWidth;
                }, Draggable.prototype.getProcessedPositionValue = function(value) {
                    return this.queryPositionInfo ? this.queryPositionInfo(value) : value;
                }, Draggable.prototype.calculateParentPosition = function(ele) {
                    if (util_isNullOrUndefined(ele)) return {
                        left: 0,
                        top: 0
                    };
                    var rect = ele.getBoundingClientRect(), style = getComputedStyle(ele);
                    return {
                        left: rect.left + window.pageXOffset - parseInt(style.marginLeft, 10),
                        top: rect.top + window.pageYOffset - parseInt(style.marginTop, 10)
                    };
                }, // tslint:disable-next-line:max-func-body-length
                Draggable.prototype.intDrag = function(evt) {
                    if (util_isUndefined(evt.changedTouches) || 1 === evt.changedTouches.length) {
                        this.clone && evt.changedTouches && Browser.isDevice && Browser.isTouch && evt.preventDefault(), this.position = this.getMousePosition(evt, this.isDragScroll);
                        var left, top1, draEleTop, draEleLeft, docHeight = this.getDocumentWidthHeight('Height');
                        docHeight < this.position.top && (this.position.top = docHeight);
                        var docWidth = this.getDocumentWidthHeight('Width');
                        if (docWidth < this.position.left && (this.position.left = docWidth), this.drag) {
                            var curTarget = this.getProperTargetElement(evt);
                            this.trigger('drag', {
                                event: evt,
                                element: this.element,
                                target: curTarget
                            });
                        }
                        var eleObj = this.checkTargetElement(evt);
                        if (eleObj.target && eleObj.instance) {
                            /* tslint:disable no-any */ var flag = !0;
                            this.hoverObject && (this.hoverObject.instance !== eleObj.instance ? this.triggerOutFunction(evt, eleObj) : flag = !1), flag && (eleObj.instance.dragData[this.scope] = this.droppables[this.scope], eleObj.instance.intOver(evt, eleObj.target), this.hoverObject = eleObj);
                        } else this.hoverObject && this.triggerOutFunction(evt, eleObj);
                        var helperElement = this.droppables[this.scope].helper;
                        this.parentClientRect = this.calculateParentPosition(this.helperElement.offsetParent);
                        var tLeft = this.parentClientRect.left, tTop = this.parentClientRect.top, intCoord = this.getCoordinates(evt), pagex = intCoord.pageX, pagey = intCoord.pageY, dLeft = this.position.left - this.diffX, dTop = this.position.top - this.diffY, styles = getComputedStyle(helperElement);
                        if (this.dragArea) {
                            if (this.pageX !== pagex || this.skipDistanceCheck) {
                                var helperWidth = helperElement.offsetWidth + (parseFloat(styles.marginLeft) + parseFloat(styles.marginRight));
                                left = this.dragLimit.left > dLeft && dLeft > 0 ? this.dragLimit.left : this.dragLimit.right + window.pageXOffset < dLeft + helperWidth && dLeft > 0 ? dLeft - (dLeft - this.dragLimit.right) + window.pageXOffset - helperWidth : dLeft < 0 ? this.dragLimit.left : dLeft;
                            }
                            if (this.pageY !== pagey || this.skipDistanceCheck) {
                                var helperHeight = helperElement.offsetHeight + (parseFloat(styles.marginTop) + parseFloat(styles.marginBottom));
                                top1 = this.dragLimit.top > dTop && dTop > 0 ? this.dragLimit.top : this.dragLimit.bottom + window.pageYOffset < dTop + helperHeight && dTop > 0 ? dTop - (dTop - this.dragLimit.bottom) + window.pageYOffset - helperHeight : dTop < 0 ? this.dragLimit.top : dTop;
                            }
                        } else left = dLeft, top1 = dTop;
                        var iTop = tTop + this.borderWidth.top, iLeft = tLeft + this.borderWidth.left;
                        this.dragProcessStarted && (util_isNullOrUndefined(top1) && (top1 = this.prevTop), util_isNullOrUndefined(left) && (left = this.prevLeft)), this.dragArea ? (this.dragLimit.top = this.clone ? this.dragLimit.top : 0, draEleTop = top1 - iTop < 0 ? this.dragLimit.top : top1 - iTop, draEleLeft = left - iLeft < 0 ? this.dragElePosition.left : left - iLeft) : (draEleTop = top1 - iTop, draEleLeft = left - iLeft);
                        var marginTop = parseFloat(getComputedStyle(this.element).marginTop);
                        // when drag-element has margin-top
                        /* istanbul ignore next */ if (marginTop > 0 && (this.clone && (draEleTop += marginTop, dTop < 0 && (marginTop + dTop >= 0 ? draEleTop = marginTop + dTop : draEleTop -= marginTop), draEleTop = this.dragLimit.bottom < draEleTop ? this.dragLimit.bottom : draEleTop), top1 - iTop < 0)) {
                            if (dTop + marginTop + (helperElement.offsetHeight - iTop) >= 0) {
                                var tempDraEleTop = this.dragLimit.top + dTop - iTop;
                                tempDraEleTop + marginTop + iTop < 0 ? draEleTop -= marginTop + iTop : draEleTop = tempDraEleTop;
                            } else draEleTop -= marginTop + iTop;
                        }
                        this.enableScrollHandler && !this.clone && (draEleTop -= this.parentScrollY, draEleLeft -= this.parentScrollX);
                        var dragValue = this.getProcessedPositionValue({
                            top: draEleTop + 'px',
                            left: draEleLeft + 'px'
                        });
                        setStyleAttribute(helperElement, this.getDragPosition(dragValue)), this.elementInViewport(helperElement) || !this.enableAutoScroll || this.helperElement.classList.contains('e-treeview') || this.helperElement.scrollIntoView();
                        var elements = document.querySelectorAll(':hover');
                        if (this.enableAutoScroll && this.helperElement.classList.contains('e-treeview')) {
                            0 === elements.length && (elements = this.getPathElements(evt));
                            /* tslint:disable no-any */ var scrollParent = this.getScrollParent(elements, !1);
                            this.elementInViewport(this.helperElement) ? this.getScrollPosition(scrollParent, draEleTop) : this.elementInViewport(this.helperElement) || (0 === (elements = [].slice.call(document.querySelectorAll(':hover'))).length && (elements = this.getPathElements(evt)), scrollParent = this.getScrollParent(elements, !0), this.getScrollPosition(scrollParent, draEleTop));
                        }
                        this.dragProcessStarted = !0, this.prevLeft = left, this.prevTop = top1, this.position.left = left, this.position.top = top1, this.pageX = pagex, this.pageY = pagey;
                    }
                }, /* tslint:disable no-any */ Draggable.prototype.getScrollParent = function(node, reverse) {
                    for(var hasScroll, nodeEl = reverse ? node.reverse() : node, i = nodeEl.length - 1; i >= 0; i--)if (('auto' === (hasScroll = window.getComputedStyle(nodeEl[i])['overflow-y']) || 'scroll' === hasScroll) && nodeEl[i].scrollHeight > nodeEl[i].clientHeight) return nodeEl[i];
                    if ('visible' === (hasScroll = window.getComputedStyle(document.scrollingElement)['overflow-y'])) return document.scrollingElement.style.overflow = 'auto', document.scrollingElement;
                }, Draggable.prototype.getScrollPosition = function(nodeEle, draEleTop) {
                    nodeEle && nodeEle === document.scrollingElement ? nodeEle.clientHeight - nodeEle.getBoundingClientRect().top - this.helperElement.clientHeight < draEleTop && nodeEle.getBoundingClientRect().height > draEleTop ? nodeEle.scrollTop += this.helperElement.clientHeight : nodeEle.scrollHeight - nodeEle.clientHeight > draEleTop && (nodeEle.scrollTop -= this.helperElement.clientHeight) : nodeEle && nodeEle !== document.scrollingElement && (nodeEle.clientHeight + nodeEle.getBoundingClientRect().top - this.helperElement.clientHeight < draEleTop ? nodeEle.scrollTop += this.helperElement.clientHeight : nodeEle.getBoundingClientRect().top > draEleTop - this.helperElement.clientHeight && (nodeEle.scrollTop -= this.helperElement.clientHeight));
                }, Draggable.prototype.getPathElements = function(evt) {
                    var elementTop = evt.clientX > 0 ? evt.clientX : 0, elementLeft = evt.clientY > 0 ? evt.clientY : 0;
                    return document.elementsFromPoint(elementTop, elementLeft);
                }, Draggable.prototype.triggerOutFunction = function(evt, eleObj) {
                    this.hoverObject.instance.intOut(evt, eleObj.target), this.hoverObject.instance.dragData[this.scope] = null, this.hoverObject = null;
                }, Draggable.prototype.getDragPosition = function(dragValue) {
                    var temp = util_extend({}, dragValue);
                    return this.axis && ('x' === this.axis ? delete temp.top : 'y' === this.axis && delete temp.left), temp;
                }, Draggable.prototype.getDocumentWidthHeight = function(str) {
                    var docBody = document.body, docEle = document.documentElement;
                    return Math.max(docBody['scroll' + str], docEle['scroll' + str], docBody['offset' + str], docEle['offset' + str], docEle['client' + str]);
                }, Draggable.prototype.intDragStop = function(evt) {
                    if (this.dragProcessStarted = !1, util_isUndefined(evt.changedTouches) || 1 === evt.changedTouches.length) {
                        if (-1 !== [
                            'touchend',
                            'pointerup',
                            'mouseup'
                        ].indexOf(evt.type)) {
                            if (this.dragStop) {
                                var curTarget = this.getProperTargetElement(evt);
                                this.trigger('dragStop', {
                                    event: evt,
                                    element: this.element,
                                    target: curTarget,
                                    helper: this.helperElement
                                });
                            }
                            this.intDestroy(evt);
                        } else this.element.setAttribute('aria-grabbed', 'false');
                        var eleObj = this.checkTargetElement(evt);
                        eleObj.target && eleObj.instance && (eleObj.instance.dragStopCalled = !0, eleObj.instance.dragData[this.scope] = this.droppables[this.scope], eleObj.instance.intDrop(evt, eleObj.target)), this.setGlobalDroppables(!0), document.body.classList.remove('e-prevent-select');
                    }
                }, /**
     * @private
     */ Draggable.prototype.intDestroy = function(evt) {
                    this.dragProcessStarted = !1, this.toggleEvents(), document.body.classList.remove('e-prevent-select'), this.element.setAttribute('aria-grabbed', 'false'), EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart), EventHandler.remove(document, Browser.touchEndEvent, this.intDragStop), EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy), EventHandler.remove(document, Browser.touchMoveEvent, this.intDrag), this.isDragStarted() && this.isDragStarted(!0);
                }, // triggers when property changed
                Draggable.prototype.onPropertyChanged = function(newProp, oldProp) {
                //No Code to handle
                }, Draggable.prototype.getModuleName = function() {
                    return 'draggable';
                }, Draggable.prototype.isDragStarted = function(change) {
                    return change && (isDraggedObject.isDragged = !isDraggedObject.isDragged), isDraggedObject.isDragged;
                }, Draggable.prototype.setDragArea = function() {
                    var eleWidthBound, eleHeightBound, ele, top1 = 0, left = 0;
                    if (ele = 'string' == typeof this.dragArea ? dom_select(this.dragArea) : this.dragArea) {
                        var elementArea = ele.getBoundingClientRect();
                        eleWidthBound = ele.scrollWidth ? ele.scrollWidth : elementArea.right - elementArea.left, eleHeightBound = ele.scrollHeight ? ele.scrollHeight : elementArea.bottom - elementArea.top;
                        for(var keys = [
                            'Top',
                            'Left',
                            'Bottom',
                            'Right'
                        ], styles = getComputedStyle(ele), i = 0; i < keys.length; i++){
                            var key = keys[i], tborder = styles['border' + key + 'Width'], tpadding = styles['padding' + key], lowerKey = key.toLowerCase();
                            this.borderWidth[lowerKey] = isNaN(parseFloat(tborder)) ? 0 : parseFloat(tborder), this.padding[lowerKey] = isNaN(parseFloat(tpadding)) ? 0 : parseFloat(tpadding);
                        }
                        top1 = elementArea.top, left = elementArea.left, this.dragLimit.left = left + this.borderWidth.left + this.padding.left, this.dragLimit.top = ele.offsetTop + this.borderWidth.top + this.padding.top, this.dragLimit.right = left + eleWidthBound - (this.borderWidth.right + this.padding.right), this.dragLimit.bottom = top1 + eleHeightBound - (this.borderWidth.bottom + this.padding.bottom);
                    }
                }, Draggable.prototype.getProperTargetElement = function(evt) {
                    var ele, intCoord = this.getCoordinates(evt), prevStyle = this.helperElement.style.pointerEvents || '';
                    return compareElementParent(evt.target, this.helperElement) || -1 !== evt.type.indexOf('touch') ? (this.helperElement.style.pointerEvents = 'none', ele = document.elementFromPoint(intCoord.clientX, intCoord.clientY), this.helperElement.style.pointerEvents = prevStyle) : ele = evt.target, ele;
                }, /* istanbul ignore next */ Draggable.prototype.currentStateCheck = function(ele, oldEle) {
                    return util_isNullOrUndefined(this.currentStateTarget) || this.currentStateTarget === ele ? util_isNullOrUndefined(oldEle) ? ele : oldEle : this.currentStateTarget;
                }, Draggable.prototype.getMousePosition = function(evt, isdragscroll) {
                    /* tslint:disable no-any */ var pageX, pageY, dragEle = void 0 !== evt.srcElement ? evt.srcElement : evt.target, intCoord = this.getCoordinates(evt), isOffsetParent = util_isNullOrUndefined(dragEle.offsetParent);
                    return isdragscroll ? (pageX = this.clone ? intCoord.pageX : intCoord.pageX + (isOffsetParent ? 0 : dragEle.offsetParent.scrollLeft) - this.relativeXPosition, pageY = this.clone ? intCoord.pageY : intCoord.pageY + (isOffsetParent ? 0 : dragEle.offsetParent.scrollTop) - this.relativeYPosition) : (pageX = this.clone ? intCoord.pageX : intCoord.pageX + window.pageXOffset - this.relativeXPosition, pageY = this.clone ? intCoord.pageY : intCoord.pageY + window.pageYOffset - this.relativeYPosition), {
                        left: pageX - (this.margin.left + this.cursorAt.left),
                        top: pageY - (this.margin.top + this.cursorAt.top)
                    };
                }, Draggable.prototype.getCoordinates = function(evt) {
                    return evt.type.indexOf('touch') > -1 ? evt.changedTouches[0] : evt;
                }, Draggable.prototype.getHelperElement = function(evt) {
                    var element;
                    return this.clone ? this.helper ? element = this.helper({
                        sender: evt,
                        element: this.target
                    }) : (element = createElement('div', {
                        className: 'e-drag-helper e-block-touch',
                        innerHTML: 'Draggable'
                    }), document.body.appendChild(element)) : element = this.element, element;
                }, Draggable.prototype.setGlobalDroppables = function(reset, drag, helper) {
                    this.droppables[this.scope] = reset ? null : {
                        draggable: drag,
                        helper: helper,
                        draggedElement: this.element
                    };
                }, Draggable.prototype.checkTargetElement = function(evt) {
                    var target = this.getProperTargetElement(evt), dropIns = this.getDropInstance(target);
                    if (!dropIns && target && !util_isNullOrUndefined(target.parentNode)) {
                        var parent_1 = closest(target.parentNode, '.e-droppable') || target.parentElement;
                        parent_1 && (dropIns = this.getDropInstance(parent_1));
                    }
                    return {
                        target: target,
                        instance: dropIns
                    };
                }, Draggable.prototype.getDropInstance = function(ele) {
                    var drop, eleInst = ele && ele.ej2_instances;
                    if (eleInst) for(var _i = 0; _i < eleInst.length; _i++){
                        var inst = eleInst[_i];
                        if ('droppable' === inst.getModuleName()) {
                            drop = inst;
                            break;
                        }
                    }
                    return drop;
                }, Draggable.prototype.destroy = function() {
                    this.toggleEvents(!0), _super.prototype.destroy.call(this);
                }, draggable_decorate([
                    Complex({}, Position)
                ], Draggable.prototype, "cursorAt", void 0), draggable_decorate([
                    Property(!0)
                ], Draggable.prototype, "clone", void 0), draggable_decorate([
                    Property()
                ], Draggable.prototype, "dragArea", void 0), draggable_decorate([
                    Property()
                ], Draggable.prototype, "isDragScroll", void 0), draggable_decorate([
                    Property()
                ], Draggable.prototype, "isReplaceDragEle", void 0), draggable_decorate([
                    Property(!0)
                ], Draggable.prototype, "isPreventSelect", void 0), draggable_decorate([
                    notify_property_change_Event()
                ], Draggable.prototype, "drag", void 0), draggable_decorate([
                    notify_property_change_Event()
                ], Draggable.prototype, "dragStart", void 0), draggable_decorate([
                    notify_property_change_Event()
                ], Draggable.prototype, "dragStop", void 0), draggable_decorate([
                    Property(1)
                ], Draggable.prototype, "distance", void 0), draggable_decorate([
                    Property()
                ], Draggable.prototype, "handle", void 0), draggable_decorate([
                    Property()
                ], Draggable.prototype, "abort", void 0), draggable_decorate([
                    Property()
                ], Draggable.prototype, "helper", void 0), draggable_decorate([
                    Property('default')
                ], Draggable.prototype, "scope", void 0), draggable_decorate([
                    Property('')
                ], Draggable.prototype, "dragTarget", void 0), draggable_decorate([
                    Property()
                ], Draggable.prototype, "axis", void 0), draggable_decorate([
                    Property()
                ], Draggable.prototype, "queryPositionInfo", void 0), draggable_decorate([
                    Property(!1)
                ], Draggable.prototype, "enableTailMode", void 0), draggable_decorate([
                    Property(!1)
                ], Draggable.prototype, "skipDistanceCheck", void 0), draggable_decorate([
                    Property(!0)
                ], Draggable.prototype, "preventDefault", void 0), draggable_decorate([
                    Property(!1)
                ], Draggable.prototype, "enableAutoScroll", void 0), draggable_decorate([
                    Property(!1)
                ], Draggable.prototype, "enableTapHold", void 0), draggable_decorate([
                    Property(750)
                ], Draggable.prototype, "tapHoldThreshold", void 0), draggable_decorate([
                    Property(!1)
                ], Draggable.prototype, "enableScrollHandler", void 0), Draggable = Draggable_1 = draggable_decorate([
                    NotifyPropertyChanges
                ], Draggable);
            }(Base), droppable_extends = (extendStatics3 = function(d, b) {
                return (extendStatics3 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics3(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), droppable_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            !/** @class */ function(_super) {
                function Droppable(element, options) {
                    var _this = _super.call(this, options, element) || this;
                    return _this.mouseOver = !1, _this.dragData = {}, _this.dragStopCalled = !1, _this.bind(), _this;
                }
                droppable_extends(Droppable, _super), Droppable.prototype.bind = function() {
                    this.wireEvents();
                }, Droppable.prototype.wireEvents = function() {
                    EventHandler.add(this.element, Browser.touchEndEvent, this.intDrop, this);
                }, // triggers when property changed
                // eslint-disable-next-line
                Droppable.prototype.onPropertyChanged = function(newProp, oldProp) {
                //No Code to handle
                }, Droppable.prototype.getModuleName = function() {
                    return 'droppable';
                }, Droppable.prototype.intOver = function(event, element) {
                    if (!this.mouseOver) {
                        var drag = this.dragData[this.scope];
                        this.trigger('over', {
                            event: event,
                            target: element,
                            dragData: drag
                        }), this.mouseOver = !0;
                    }
                }, Droppable.prototype.intOut = function(event, element) {
                    this.mouseOver && (this.trigger('out', {
                        evt: event,
                        target: element
                    }), this.mouseOver = !1);
                }, Droppable.prototype.intDrop = function(evt, element) {
                    if (this.dragStopCalled) {
                        this.dragStopCalled = !1;
                        var area, accept = !0, drag = this.dragData[this.scope], isDrag = !!drag && drag.helper && isVisible(drag.helper);
                        isDrag && (area = this.isDropArea(evt, drag.helper, element), this.accept && (accept = matches(drag.helper, this.accept))), isDrag && this.drop && area.canDrop && accept && this.trigger('drop', {
                            event: evt,
                            target: area.target,
                            droppedElement: drag.helper,
                            dragData: drag
                        }), this.mouseOver = !1;
                    }
                }, Droppable.prototype.isDropArea = function(evt, helper, element) {
                    var area = {
                        canDrop: !0,
                        target: element || evt.target
                    }, isTouch = 'touchend' === evt.type;
                    if (isTouch || area.target === helper) {
                        helper.style.display = 'none';
                        var coord = isTouch ? evt.changedTouches[0] : evt, ele = document.elementFromPoint(coord.clientX, coord.clientY);
                        area.canDrop = !1, area.canDrop = compareElementParent(ele, this.element), area.canDrop && (area.target = ele), helper.style.display = '';
                    }
                    return area;
                }, Droppable.prototype.destroy = function() {
                    EventHandler.remove(this.element, Browser.touchEndEvent, this.intDrop), _super.prototype.destroy.call(this);
                }, droppable_decorate([
                    Property()
                ], Droppable.prototype, "accept", void 0), droppable_decorate([
                    Property('default')
                ], Droppable.prototype, "scope", void 0), droppable_decorate([
                    notify_property_change_Event()
                ], Droppable.prototype, "drop", void 0), droppable_decorate([
                    notify_property_change_Event()
                ], Droppable.prototype, "over", void 0), droppable_decorate([
                    notify_property_change_Event()
                ], Droppable.prototype, "out", void 0), Droppable = droppable_decorate([
                    NotifyPropertyChanges
                ], Droppable);
            }(Base);
            var keyboard_extends = (extendStatics4 = function(d, b) {
                return (extendStatics4 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics4(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), keyboard_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, keyCode = {
                backspace: 8,
                tab: 9,
                enter: 13,
                shift: 16,
                control: 17,
                alt: 18,
                pause: 19,
                capslock: 20,
                space: 32,
                escape: 27,
                pageup: 33,
                pagedown: 34,
                end: 35,
                home: 36,
                leftarrow: 37,
                uparrow: 38,
                rightarrow: 39,
                downarrow: 40,
                insert: 45,
                delete: 46,
                f1: 112,
                f2: 113,
                f3: 114,
                f4: 115,
                f5: 116,
                f6: 117,
                f7: 118,
                f8: 119,
                f9: 120,
                f10: 121,
                f11: 122,
                f12: 123,
                semicolon: 186,
                plus: 187,
                comma: 188,
                minus: 189,
                dot: 190,
                forwardslash: 191,
                graveaccent: 192,
                openbracket: 219,
                backslash: 220,
                closebracket: 221,
                singlequote: 222
            }, KeyboardEvents = /** @class */ function(_super) {
                var KeyboardEvents_1;
                /**
     * Initializes the KeyboardEvents
     *
     * @param {HTMLElement} element ?
     * @param {KeyboardEventsModel} options ?
     */ function KeyboardEvents(element, options) {
                    var _this = _super.call(this, options, element) || this;
                    return(/**
         * To handle a key press event returns null
         *
         * @param {KeyboardEventArgs} e ?
         * @returns {void} ?
         */ _this.keyPressHandler = function(e) {
                        for(var isAltKey = e.altKey, isCtrlKey = e.ctrlKey, isShiftKey = e.shiftKey, curkeyCode = e.which, keys = Object.keys(_this.keyConfigs), _i = 0; _i < keys.length; _i++)for(var key = keys[_i], configCollection = _this.keyConfigs[key].split(','), _a = 0; _a < configCollection.length; _a++){
                            var rconfig = configCollection[_a], rKeyObj = KeyboardEvents_1.getKeyConfigData(rconfig.trim());
                            isAltKey === rKeyObj.altKey && isCtrlKey === rKeyObj.ctrlKey && isShiftKey === rKeyObj.shiftKey && curkeyCode === rKeyObj.keyCode && (e.action = key, _this.keyAction && _this.keyAction(e));
                        }
                    }, _this.bind(), _this);
                }
                return keyboard_extends(KeyboardEvents, _super), KeyboardEvents_1 = KeyboardEvents, /**
     * Unwire bound events and destroy the instance.
     *
     * @returns {void} ?
     */ KeyboardEvents.prototype.destroy = function() {
                    this.unwireEvents(), _super.prototype.destroy.call(this);
                }, /**
     * Function can be used to specify certain action if a property is changed
     *
     * @param {KeyboardEventsModel} newProp ?
     * @param {KeyboardEventsModel} oldProp ?
     * @returns {void} ?
     * @private
     */ // eslint-disable-next-line
                KeyboardEvents.prototype.onPropertyChanged = function(newProp, oldProp) {
                // No code are needed
                }, KeyboardEvents.prototype.bind = function() {
                    this.wireEvents();
                }, /**
     * To get the module name, returns 'keyboard'.
     *
     * @returns {string} ?
     * @private
     */ KeyboardEvents.prototype.getModuleName = function() {
                    return 'keyboard';
                }, /**
     * Wiring event handlers to events
     *
     * @returns {void} ?
     * @private
     */ KeyboardEvents.prototype.wireEvents = function() {
                    this.element.addEventListener(this.eventName, this.keyPressHandler);
                }, /**
     * Unwiring event handlers to events
     *
     * @returns {void} ?
     * @private
     */ KeyboardEvents.prototype.unwireEvents = function() {
                    this.element.removeEventListener(this.eventName, this.keyPressHandler);
                }, /**
     * To get the key configuration data
     *
     * @param {string} config - configuration data
     * @returns {KeyData} ?
     */ KeyboardEvents.getKeyConfigData = function(config) {
                    if (config in this.configCache) return this.configCache[config];
                    var keys = config.toLowerCase().split('+'), keyData = {
                        altKey: -1 !== keys.indexOf('alt'),
                        ctrlKey: -1 !== keys.indexOf('ctrl'),
                        shiftKey: -1 !== keys.indexOf('shift'),
                        keyCode: null
                    };
                    return keys[keys.length - 1].length > 1 && Number(keys[keys.length - 1]) ? keyData.keyCode = Number(keys[keys.length - 1]) : keyData.keyCode = KeyboardEvents_1.getKeyCode(keys[keys.length - 1]), KeyboardEvents_1.configCache[config] = keyData, keyData;
                }, // Return the keycode value as string
                KeyboardEvents.getKeyCode = function(keyVal) {
                    return keyCode[keyVal] || keyVal.toUpperCase().charCodeAt(0);
                }, KeyboardEvents.configCache = {}, keyboard_decorate([
                    Property({})
                ], KeyboardEvents.prototype, "keyConfigs", void 0), keyboard_decorate([
                    Property('keyup')
                ], KeyboardEvents.prototype, "eventName", void 0), keyboard_decorate([
                    notify_property_change_Event()
                ], KeyboardEvents.prototype, "keyAction", void 0), KeyboardEvents = KeyboardEvents_1 = keyboard_decorate([
                    NotifyPropertyChanges
                ], KeyboardEvents);
            }(Base), L10n = /** @class */ function() {
                /**
     * Constructor
     *
     * @param {string} controlName ?
     * @param {Object} localeStrings ?
     * @param {string} locale ?
     */ function L10n(controlName, localeStrings, locale) {
                    this.controlName = controlName, this.localeStrings = localeStrings, this.setLocale(locale || defaultCulture);
                }
                return(/**
     * Sets the locale text
     *
     * @param {string} locale ?
     * @returns {void} ?
     */ L10n.prototype.setLocale = function(locale) {
                    var intLocale = this.intGetControlConstant(L10n.locale, locale);
                    this.currentLocale = intLocale || this.localeStrings;
                }, /**
     * Sets the global locale for all components.
     *
     * @param {Object} localeObject - specifies the localeObject to be set as global locale.
     * @returns {void} ?
     */ L10n.load = function(localeObject) {
                    this.locale = util_extend(this.locale, localeObject, {}, !0);
                }, /**
     * Returns current locale text for the property based on the culture name and control name.
     *
     * @param {string} prop - specifies the property for which localize text to be returned.
     * @returns {string} ?
     */ L10n.prototype.getConstant = function(prop) {
                    return(// Removed conditional operator because this method does not return correct value when passing 0 as value in localization
                    util_isNullOrUndefined(this.currentLocale[prop]) ? this.localeStrings[prop] || '' : this.currentLocale[prop]);
                }, /**
     * Returns the control constant object for current object and the locale specified.
     *
     * @param {Object} curObject ?
     * @param {string} locale ?
     * @returns {Object} ?
     */ L10n.prototype.intGetControlConstant = function(curObject, locale) {
                    return curObject[locale] ? curObject[locale][this.controlName] : null;
                }, L10n.locale = {}, L10n);
            }(), touch_extends = (extendStatics5 = function(d, b) {
                return (extendStatics5 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics5(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), touch_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, SwipeSettings = /** @class */ function(_super) {
                function SwipeSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return touch_extends(SwipeSettings, _super), touch_decorate([
                    Property(50)
                ], SwipeSettings.prototype, "swipeThresholdDistance", void 0), SwipeSettings;
            }(ChildProperty), swipeRegex = /(Up|Down)/, Touch = /** @class */ function(_super) {
                /* End-Properties */ function Touch(element, options) {
                    var _this = _super.call(this, options, element) || this;
                    return _this.touchAction = !0, _this.tapCount = 0, /**
         *
         * @param {MouseEventArgs | TouchEventArgs} evt ?
         * @returns {void} ?
         */ _this.startEvent = function(evt) {
                        if (!0 === _this.touchAction) {
                            var point = _this.updateChangeTouches(evt);
                            void 0 !== evt.changedTouches && (_this.touchAction = !1), _this.isTouchMoved = !1, _this.movedDirection = '', _this.startPoint = _this.lastMovedPoint = {
                                clientX: point.clientX,
                                clientY: point.clientY
                            }, _this.startEventData = point, _this.hScrollLocked = _this.vScrollLocked = !1, _this.tStampStart = Date.now(), _this.timeOutTapHold = setTimeout(function() {
                                _this.tapHoldEvent(evt);
                            }, _this.tapHoldThreshold), EventHandler.add(_this.element, Browser.touchMoveEvent, _this.moveEvent, _this), EventHandler.add(_this.element, Browser.touchEndEvent, _this.endEvent, _this), EventHandler.add(_this.element, Browser.touchCancelEvent, _this.cancelEvent, _this);
                        }
                    }, /**
         *
         * @param {MouseEventArgs | TouchEventArgs} evt ?
         * @returns {void} ?
         */ _this.moveEvent = function(evt) {
                        var point = _this.updateChangeTouches(evt);
                        _this.movedPoint = point, _this.isTouchMoved = !(point.clientX === _this.startPoint.clientX && point.clientY === _this.startPoint.clientY);
                        var eScrollArgs = {};
                        _this.isTouchMoved && (clearTimeout(_this.timeOutTapHold), _this.calcScrollPoints(evt), eScrollArgs = util_extend(eScrollArgs, {}, {
                            startEvents: _this.startEventData,
                            originalEvent: evt,
                            startX: _this.startPoint.clientX,
                            startY: _this.startPoint.clientY,
                            distanceX: _this.distanceX,
                            distanceY: _this.distanceY,
                            scrollDirection: _this.scrollDirection,
                            velocity: _this.getVelocity(point)
                        }), _this.trigger('scroll', eScrollArgs), _this.lastMovedPoint = {
                            clientX: point.clientX,
                            clientY: point.clientY
                        });
                    }, /**
         *
         * @param {MouseEventArgs | TouchEventArgs} evt ?
         * @returns {void} ?
         */ _this.cancelEvent = function(evt) {
                        clearTimeout(_this.timeOutTapHold), clearTimeout(_this.timeOutTap), _this.tapCount = 0, _this.swipeFn(evt), EventHandler.remove(_this.element, Browser.touchCancelEvent, _this.cancelEvent);
                    }, /**
         *
         * @param {MouseEventArgs | TouchEventArgs} evt ?
         * @returns {void} ?
         */ _this.endEvent = function(evt) {
                        _this.swipeFn(evt), _this.isTouchMoved || 'function' != typeof _this.tap || (_this.trigger('tap', {
                            originalEvent: evt,
                            tapCount: ++_this.tapCount
                        }), _this.timeOutTap = setTimeout(function() {
                            _this.tapCount = 0;
                        }, _this.tapThreshold)), _this.modeclear();
                    }, /**
         *
         * @param {MouseEventArgs | TouchEventArgs} evt ?
         * @returns {void} ?
         */ _this.swipeFn = function(evt) {
                        clearTimeout(_this.timeOutTapHold), clearTimeout(_this.timeOutTap);
                        var point = _this.updateChangeTouches(evt), diffX = point.clientX - _this.startPoint.clientX, diffY = point.clientY - _this.startPoint.clientY;
                        diffX = Math.floor(diffX < 0 ? -1 * diffX : diffX), diffY = Math.floor(diffY < 0 ? -1 * diffY : diffX), _this.isTouchMoved = diffX > 1 || diffY > 1, /Firefox/.test(Browser.userAgent) && 0 === point.clientX && 0 === point.clientY && 'mouseup' === evt.type && (_this.isTouchMoved = !1), _this.endPoint = point, _this.calcPoints(evt);
                        var swipeArgs = {
                            originalEvent: evt,
                            startEvents: _this.startEventData,
                            startX: _this.startPoint.clientX,
                            startY: _this.startPoint.clientY,
                            distanceX: _this.distanceX,
                            distanceY: _this.distanceY,
                            swipeDirection: _this.movedDirection,
                            velocity: _this.getVelocity(point)
                        };
                        if (_this.isTouchMoved) {
                            var eSwipeArgs = void 0, tDistance = _this.swipeSettings.swipeThresholdDistance;
                            // eslint-disable-next-line
                            eSwipeArgs = util_extend(eSwipeArgs, _this.defaultArgs, swipeArgs);
                            var canTrigger = !1, ele = _this.element, scrollBool = _this.isScrollable(ele), moved = swipeRegex.test(_this.movedDirection);
                            (tDistance < _this.distanceX && !moved || tDistance < _this.distanceY && moved) && (canTrigger = !scrollBool || _this.checkSwipe(ele, moved)), canTrigger && _this.trigger('swipe', eSwipeArgs);
                        }
                        _this.modeclear();
                    }, _this.modeclear = function() {
                        _this.modeClear = setTimeout(function() {
                            _this.touchAction = !0;
                        }, 'function' != typeof _this.tap ? 0 : 20), _this.lastTapTime = new Date().getTime(), EventHandler.remove(_this.element, Browser.touchMoveEvent, _this.moveEvent), EventHandler.remove(_this.element, Browser.touchEndEvent, _this.endEvent), EventHandler.remove(_this.element, Browser.touchCancelEvent, _this.cancelEvent);
                    }, _this.bind(), _this;
                }
                return touch_extends(Touch, _super), // triggers when property changed
                /**
     *
     * @private
     * @param {TouchModel} newProp ?
     * @param {TouchModel} oldProp ?
     * @returns {void} ?
     */ // eslint-disable-next-line
                Touch.prototype.onPropertyChanged = function(newProp, oldProp) {
                //No Code to handle
                }, Touch.prototype.bind = function() {
                    this.wireEvents(), Browser.isIE && this.element.classList.add('e-block-touch');
                }, /**
     * To destroy the touch instance.
     *
     * @returns {void}
     */ Touch.prototype.destroy = function() {
                    this.unwireEvents(), _super.prototype.destroy.call(this);
                }, // Need to changes the event binding once we updated the event handler.
                Touch.prototype.wireEvents = function() {
                    EventHandler.add(this.element, Browser.touchStartEvent, this.startEvent, this);
                }, Touch.prototype.unwireEvents = function() {
                    EventHandler.remove(this.element, Browser.touchStartEvent, this.startEvent);
                }, /**
     * Returns module name as touch
     *
     * @returns {string} ?
     * @private
     */ Touch.prototype.getModuleName = function() {
                    return 'touch';
                }, /**
     * Returns if the HTML element is Scrollable.
     *
     * @param {HTMLElement} element - HTML Element to check if Scrollable.
     * @returns {boolean} ?
     */ Touch.prototype.isScrollable = function(element) {
                    var eleStyle = getComputedStyle(element), style = eleStyle.overflow + eleStyle.overflowX + eleStyle.overflowY;
                    return !!/(auto|scroll)/.test(style);
                }, /**
     *
     * @param {MouseEventArgs | TouchEventArgs} evt ?
     * @returns {void} ?
     */ Touch.prototype.tapHoldEvent = function(evt) {
                    var eTapArgs;
                    this.tapCount = 0, this.touchAction = !0, EventHandler.remove(this.element, Browser.touchMoveEvent, this.moveEvent), EventHandler.remove(this.element, Browser.touchEndEvent, this.endEvent), // eslint-disable-next-line
                    eTapArgs = {
                        originalEvent: evt
                    }, this.trigger('tapHold', eTapArgs), EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);
                }, Touch.prototype.calcPoints = function(evt) {
                    var point = this.updateChangeTouches(evt);
                    this.defaultArgs = {
                        originalEvent: evt
                    }, this.distanceX = Math.abs(Math.abs(point.clientX) - Math.abs(this.startPoint.clientX)), this.distanceY = Math.abs(Math.abs(point.clientY) - Math.abs(this.startPoint.clientY)), this.distanceX > this.distanceY ? this.movedDirection = point.clientX > this.startPoint.clientX ? 'Right' : 'Left' : this.movedDirection = point.clientY < this.startPoint.clientY ? 'Up' : 'Down';
                }, Touch.prototype.calcScrollPoints = function(evt) {
                    var point = this.updateChangeTouches(evt);
                    this.defaultArgs = {
                        originalEvent: evt
                    }, this.distanceX = Math.abs(Math.abs(point.clientX) - Math.abs(this.lastMovedPoint.clientX)), this.distanceY = Math.abs(Math.abs(point.clientY) - Math.abs(this.lastMovedPoint.clientY)), (this.distanceX > this.distanceY || !0 === this.hScrollLocked) && !1 === this.vScrollLocked ? (this.scrollDirection = point.clientX > this.lastMovedPoint.clientX ? 'Right' : 'Left', this.hScrollLocked = !0) : (this.scrollDirection = point.clientY < this.lastMovedPoint.clientY ? 'Up' : 'Down', this.vScrollLocked = !0);
                }, Touch.prototype.getVelocity = function(pnt) {
                    var newX = pnt.clientX, newY = pnt.clientY, newT = Date.now(), xDist = newX - this.startPoint.clientX, yDist = newY - this.startPoint.clientX;
                    return Math.sqrt(xDist * xDist + yDist * yDist) / (newT - this.tStampStart);
                }, // eslint-disable-next-line
                Touch.prototype.checkSwipe = function(ele, flag) {
                    var temp = flag ? [
                        'Height',
                        'Top'
                    ] : [
                        'Width',
                        'Left'
                    ];
                    return ele['scroll' + temp[0]] <= ele['offset' + temp[0]] || 0 === ele['scroll' + temp[1]] || ele['offset' + temp[0]] + ele['scroll' + temp[1]] >= ele['scroll' + temp[0]];
                }, Touch.prototype.updateChangeTouches = function(evt) {
                    return evt.changedTouches && 0 !== evt.changedTouches.length ? evt.changedTouches[0] : evt;
                }, touch_decorate([
                    notify_property_change_Event()
                ], Touch.prototype, "tap", void 0), touch_decorate([
                    notify_property_change_Event()
                ], Touch.prototype, "tapHold", void 0), touch_decorate([
                    notify_property_change_Event()
                ], Touch.prototype, "swipe", void 0), touch_decorate([
                    notify_property_change_Event()
                ], Touch.prototype, "scroll", void 0), touch_decorate([
                    Property(350)
                ], Touch.prototype, "tapThreshold", void 0), touch_decorate([
                    Property(750)
                ], Touch.prototype, "tapHoldThreshold", void 0), touch_decorate([
                    Complex({}, SwipeSettings)
                ], Touch.prototype, "swipeSettings", void 0), Touch = touch_decorate([
                    NotifyPropertyChanges
                ], Touch);
            }(Base), LINES = RegExp('\\n|\\r|\\s\\s+', 'g'), QUOTES = new RegExp(/'|"/g), IF_STMT = RegExp('if ?\\('), ELSEIF_STMT = RegExp('else if ?\\('), ELSE_STMT = /else/, FOR_STMT = RegExp('for ?\\('), IF_OR_FOR = RegExp('(/if|/for)'), CALL_FUNCTION = RegExp('\\((.*)\\)', ''), NOT_NUMBER = RegExp('^[0-9]+$', 'g'), WORD = RegExp('[\\w"\'.\\s+]+', 'g'), DBL_QUOTED_STR = RegExp('"(.*?)"', 'g'), WORDIF = RegExp('[\\w"\'@#$.\\s-+]+', 'g'), exp = RegExp('\\${([^}]*)}', 'g'), ARR_OBJ = /^\..*/gm, SINGLE_SLASH = /\\/gi, DOUBLE_SLASH = /\\\\/gi, WORDFUNC = RegExp('[\\w"\'@#$.\\s+]+', 'g'), WINDOWFUNC = /\window\./gm;
            /**
 *
 * @param {string} str ?
 * @param {boolean} addNS ?
 * @param {string} nameSpace ?
 * @param {string[]} ignoreList ?
 * @param {boolean} ignorePrefix ?
 * @returns {string} ?
 */ function addNameSpace(str, addNS, nameSpace, ignoreList, ignorePrefix) {
                return !addNS || NOT_NUMBER.test(str) || -1 !== ignoreList.indexOf(str.split('.')[0]) || ignorePrefix ? str : nameSpace + '.' + str;
            }
            // // Create hashCode for template string to storeCached function
            // function hashCode(str: string): string {
            //     return str.split('').reduce((a: number, b: string) => { a = ((a << 5) - a) + b.charCodeAt(0); return a & a; }, 0).toString();
            // }
            /**
 *
 * @param {string} str ?
 * @param {boolean} addNS ?
 * @param {string} nameSpace ?
 * @param {string[]} ignoreList ?
 * @returns {string} ?
 */ function NameSpaceForspecialChar(str, addNS, nameSpace, ignoreList) {
                return addNS && !NOT_NUMBER.test(str) && -1 === ignoreList.indexOf(str.split('.')[0]) ? nameSpace + '["' + str : str;
            }
            // eslint-disable-next-line
            function SlashReplace(tempStr) {
                return tempStr.match(DOUBLE_SLASH) || (tempStr = tempStr.replace(SINGLE_SLASH, '\\\\')), tempStr;
            }
            /**
 *
 * @param {string} str ?
 * @param {string} nameSpaceNew ?
 * @param {string[]} keys ?
 * @param {boolean} ignorePrefix ?
 * @returns {string} ?
 */ function HandleSpecialCharArrObj(str, nameSpaceNew, keys, ignorePrefix) {
                if (str = str.trim(), /\window\./gm.test(str)) return str;
                var str1, quotes = /'|"/gm;
                return (/@|\$|#/gm.test(str) && (str = NameSpaceForspecialChar(str, -1 === keys.indexOf(str), nameSpaceNew, keys) + '"]'), ARR_OBJ.test(str)) ? (str1 = str, !(!quotes.test(str) && -1 === keys.indexOf(str)) || NOT_NUMBER.test(str1) || -1 !== keys.indexOf(str1.split('.')[0]) || /^\..*/gm.test(str1) ? str1 : nameSpaceNew + '.' + str1) : addNameSpace(str, !quotes.test(str) && -1 === keys.indexOf(str), nameSpaceNew, keys, ignorePrefix);
            }
            /**
 * Template Engine Bridge
 */ var HAS_ROW = /^[\n\r.]+<tr|^<tr/, HAS_SVG = /^[\n\r.]+<svg|^<path|^<g/;
            /**
 * Compile the template string into template function.
 *
 * @param {string} templateString - The template string which is going to convert.
 * @param {Object} helper - Helper functions as an object.
 * @param {boolean} ignorePrefix ?
 * @returns {NodeList} ?
 * @private
 */ // eslint-disable-next-line
            function template_engine_compile(templateString, helper, ignorePrefix) {
                var compiler = engineObj.compile(templateString, helper, ignorePrefix);
                // eslint-disable-next-line
                return function(data, component, propName, templateId, isStringTemplate, index, element, root) {
                    var result = compiler(data, component, propName, element, root);
                    if ('string' != typeof result) return result;
                    if (HAS_SVG.test(result)) {
                        var ele = createElement('svg', {
                            innerHTML: result
                        });
                        return ele.childNodes;
                    }
                    var ele = createElement(HAS_ROW.test(result) ? 'table' : 'div', {
                        innerHTML: result
                    });
                    return ele.childNodes;
                };
            }
            /**
 * Set your custom template engine for template rendering.
 *
 * @param  {ITemplateEngine} classObj - Class object for custom template.
 * @returns {void} ?
 * @private
 */ function setTemplateEngine(classObj) {
                engineObj.compile = classObj.compile;
            }
            /**
 * Get current template engine for template rendering
 *
 * @returns {string} ?
 * @private
 */ function getTemplateEngine() {
                return engineObj.compile;
            }
            var engineObj = {
                compile: new /** @class */ (function() {
                    function Engine() {}
                    return(// eslint-disable-next-line
                    Engine.prototype.compile = function(templateString, helper, ignorePrefix) {
                        var helper1, argName, str, nameSpace, helper2, ignorePrefix1, varCOunt, localKeys, isClass, singleSpace;
                        return void 0 === helper && (helper = {}), str = templateString, nameSpace = argName = 'data', helper2 = helper1 = helper, ignorePrefix1 = void 0, varCOunt = 0, localKeys = [], isClass = str.match(/class="([^"]+|)\s{2}/g), singleSpace = '', isClass && isClass.forEach(function(value) {
                            singleSpace = value.replace(/\s\s+/g, ' '), str = str.replace(value, singleSpace);
                        }), Function(argName, "var str=\"" + str.replace(LINES, '').replace(DBL_QUOTED_STR, '\'$1\'').replace(exp, // eslint-disable-next-line
                        function(match, cnt, offset, matchStr) {
                            var matches = cnt.match(CALL_FUNCTION);
                            // matches to detect any function calls
                            if (matches) {
                                var rlStr = matches[1];
                                if (ELSEIF_STMT.test(cnt)) //handling else-if condition
                                cnt = '";} ' + cnt.replace(matches[1], rlStr.replace(WORD, function(str) {
                                    return addNameSpace(str = str.trim(), !QUOTES.test(str) && -1 === localKeys.indexOf(str), nameSpace, localKeys, ignorePrefix1);
                                })) + '{ \n str = str + "';
                                else if (IF_STMT.test(cnt)) //handling if condition
                                cnt = '"; ' + cnt.replace(matches[1], rlStr.replace(WORDIF, function(strs) {
                                    return HandleSpecialCharArrObj(strs, nameSpace, localKeys, ignorePrefix1);
                                })) + '{ \n str = str + "';
                                else if (FOR_STMT.test(cnt)) {
                                    //handling for condition
                                    var rlStr_1 = matches[1].split(' of ');
                                    // replace for each into actual JavaScript
                                    // eslint-disable-next-line
                                    cnt = '"; ' + cnt.replace(matches[1], function(mtc) {
                                        // tslint:disable-next-line
                                        return localKeys.push(rlStr_1[0]), localKeys.push(rlStr_1[0] + 'Index'), 'var i' + (varCOunt += 1) + '=0; i' + varCOunt + ' < ' + addNameSpace(rlStr_1[1], !0, nameSpace, localKeys, ignorePrefix1) + '.length; i' + varCOunt + '++';
                                    }) + '{ \n ' + rlStr_1[0] + '= ' + addNameSpace(rlStr_1[1], !0, nameSpace, localKeys, ignorePrefix1) + '[i' + varCOunt + ']; \n var ' + rlStr_1[0] + 'Index=i' + varCOunt + '; \n str = str + "';
                                } else {
                                    //helper function handling
                                    var fnStr = cnt.split('('), fNameSpace = helper2 && helper2.hasOwnProperty(fnStr[0]) ? 'this.' : 'global';
                                    fNameSpace = /\./.test(fnStr[0]) ? '' : fNameSpace;
                                    var ftArray = matches[1].split(',');
                                    0 === matches[1].length || /data/.test(ftArray[0]) || /window./.test(ftArray[0]) || (matches[1] = 'global' === fNameSpace ? nameSpace + '.' + matches[1] : matches[1]), WINDOWFUNC.test(cnt) && /\]\./gm.test(cnt) || /@|\$|#/gm.test(cnt) ? /@|\$|#|\]\./gm.test(cnt) && // tslint:disable-next-line
                                    (cnt = '"+ ' + ('global' === fNameSpace ? '' : fNameSpace) + cnt.replace(matches[1], rlStr.replace(WORDFUNC, function(strs) {
                                        return HandleSpecialCharArrObj(strs, nameSpace, localKeys, ignorePrefix1);
                                    })) + '+ "') : cnt = '" + ' + ('global' === fNameSpace ? '' : fNameSpace) + cnt.replace(rlStr, addNameSpace(matches[1].replace(/,( |)data.|,/gi, ',' + nameSpace + '.').replace(/,( |)data.window/gi, ',window'), 'global' !== fNameSpace, nameSpace, localKeys, ignorePrefix1)) + '+"';
                                }
                            } else ELSE_STMT.test(cnt) ? // handling else condition
                            cnt = '"; ' + cnt.replace(ELSE_STMT, '} else { \n str = str + "') : cnt.match(IF_OR_FOR) ? // close condition
                            cnt = cnt.replace(IF_OR_FOR, '"; \n } \n str = str + "') : /@|#|\$/gm.test(cnt) ? (cnt.match(SINGLE_SLASH) && (cnt = SlashReplace(cnt)), cnt = '"+' + NameSpaceForspecialChar(cnt, -1 === localKeys.indexOf(cnt), nameSpace, localKeys) + '"]+"') : cnt = cnt.match(SINGLE_SLASH) ? '"+' + NameSpaceForspecialChar(cnt = SlashReplace(cnt), -1 === localKeys.indexOf(cnt), nameSpace, localKeys) + '"]+"' : '"+' + addNameSpace(cnt.replace(/,/gi, '+' + nameSpace + '.'), -1 === localKeys.indexOf(cnt), nameSpace, localKeys, ignorePrefix1) + '+"';
                            return cnt;
                        }) + "\";var valueRegEx = (/value=\\'([A-Za-z0-9 _]*)((.)([\\w)(!-;?-■\\s]+)['])/g);\n    var hrefRegex = (/(?:href)([\\s='\"./]+)([\\w-./?=&\\\\#\"]+)((.)([\\w)(!-;/?-■\\s]+)['])/g);\n    if(str.match(valueRegEx)){\n        var check = str.match(valueRegEx);\n        var str1 = str;\n        for (var i=0; i < check.length; i++) {\n            var check1 = str.match(valueRegEx)[i].split('value=')[1];\n            var change = check1.match(/^'/) !== null ? check1.replace(/^'/, '\"') : check1;\n            change =change.match(/.$/)[0] === '\\'' ? change.replace(/.$/,'\"') : change;\n            str1 = str1.replace(check1, change);\n        }\n        str = str.replace(str, str1);\n    }\n    else if (str.match(/(?:href='')/) === null) {\n        if(str.match(hrefRegex)) {\n            var check = str.match(hrefRegex);\n            var str1 = str;\n            for (var i=0; i < check.length; i++) {\n                var check1 = str.match(hrefRegex)[i].split('href=')[1];\n                if (check1) {\n                    var change = check1.match(/^'/) !== null ? check1.replace(/^'/, '\"') : check1;\n                    change =change.match(/.$/)[0] === '\\'' ? change.replace(/.$/,'\"') : change;\n                    str1 = str1.replace(check1, change);\n                }\n            }\n            str = str.replace(str, str1);\n        }\n    }\n     return str;").bind(helper1);
                    }, Engine);
                }())().compile
            }, removeTags = [
                'script',
                'style',
                'iframe[src]',
                'link[href*="javascript:"]',
                'object[type="text/x-scriptlet"]',
                'object[data^="data:text/html;base64"]',
                'img[src^="data:text/html;base64"]',
                '[src^="javascript:"]',
                '[dynsrc^="javascript:"]',
                '[lowsrc^="javascript:"]',
                '[type^="application/x-shockwave-flash"]'
            ], removeAttrs = [
                {
                    attribute: 'href',
                    selector: '[href*="javascript:"]'
                },
                {
                    attribute: 'background',
                    selector: '[background^="javascript:"]'
                },
                {
                    attribute: 'style',
                    selector: '[style*="javascript:"]'
                },
                {
                    attribute: 'style',
                    selector: '[style*="expression("]'
                },
                {
                    attribute: 'href',
                    selector: 'a[href^="data:text/html;base64"]'
                }
            ], jsEvents = [
                'onchange',
                'onclick',
                'onmouseover',
                'onmouseout',
                'onkeydown',
                'onload',
                'onerror',
                'onblur',
                'onfocus',
                'onbeforeload',
                'onbeforeunload',
                'onkeyup',
                'onsubmit',
                'onafterprint',
                'onbeforeonload',
                'onbeforeprint',
                'onblur',
                'oncanplay',
                'oncanplaythrough',
                'onchange',
                'onclick',
                'oncontextmenu',
                'ondblclick',
                'ondrag',
                'ondragend',
                'ondragenter',
                'ondragleave',
                'ondragover',
                'ondragstart',
                'ondrop',
                'ondurationchange',
                'onemptied',
                'onended',
                'onerror',
                'onerror',
                'onfocus',
                'onformchange',
                'onforminput',
                'onhaschange',
                'oninput',
                'oninvalid',
                'onkeydown',
                'onkeypress',
                'onkeyup',
                'onload',
                'onloadeddata',
                'onloadedmetadata',
                'onloadstart',
                'onmessage',
                'onmousedown',
                'onmousemove',
                'onmouseout',
                'onmouseover',
                'onmouseup',
                'onmousewheel',
                'onoffline',
                'onoine',
                'ononline',
                'onpagehide',
                'onpageshow',
                'onpause',
                'onplay',
                'onplaying',
                'onpopstate',
                'onprogress',
                'onratechange',
                'onreadystatechange',
                'onredo',
                'onresize',
                'onscroll',
                'onseeked',
                'onseeking',
                'onselect',
                'onstalled',
                'onstorage',
                'onsubmit',
                'onsuspend',
                'ontimeupdate',
                'onundo',
                'onunload',
                'onvolumechange',
                'onwaiting',
                'onmouseenter',
                'onmouseleave',
                'onmousewheel',
                'onstart',
                'onpropertychange'
            ], SanitizeHtmlHelper = /** @class */ function() {
                function SanitizeHtmlHelper() {}
                return SanitizeHtmlHelper.beforeSanitize = function() {
                    return {
                        selectors: {
                            tags: removeTags,
                            attributes: removeAttrs
                        }
                    };
                }, SanitizeHtmlHelper.sanitize = function(value) {
                    var item = this.beforeSanitize();
                    return this.serializeValue(item, value);
                }, SanitizeHtmlHelper.serializeValue = function(item, value) {
                    this.removeAttrs = item.selectors.attributes, this.removeTags = item.selectors.tags, this.wrapElement = document.createElement('div'), this.wrapElement.innerHTML = value, this.removeXssTags(), this.removeJsEvents(), this.removeXssAttrs();
                    var tempEleValue = this.wrapElement.innerHTML;
                    return this.removeElement(), tempEleValue.replace('&amp;', '&');
                }, SanitizeHtmlHelper.removeElement = function() {
                    for(var nodes = this.wrapElement.children, j = 0; j < nodes.length; j++)for(var attribute = nodes[j].attributes, i = 0; i < attribute.length; i++)this.wrapElement.children[j].removeAttribute(attribute[i].localName);
                }, SanitizeHtmlHelper.removeXssTags = function() {
                    var elements = this.wrapElement.querySelectorAll(this.removeTags.join(','));
                    elements.length > 0 && elements.forEach(function(element) {
                        detach(element);
                    });
                }, SanitizeHtmlHelper.removeJsEvents = function() {
                    var elements = this.wrapElement.querySelectorAll('[' + jsEvents.join('],[') + ']');
                    elements.length > 0 && elements.forEach(function(element) {
                        jsEvents.forEach(function(attr) {
                            element.hasAttribute(attr) && element.removeAttribute(attr);
                        });
                    });
                }, SanitizeHtmlHelper.removeXssAttrs = function() {
                    var _this = this;
                    // eslint-disable-next-line
                    this.removeAttrs.forEach(function(item, index) {
                        var elements = _this.wrapElement.querySelectorAll(item.selector);
                        elements.length > 0 && elements.forEach(function(element) {
                            element.removeAttribute(item.attribute);
                        });
                    });
                }, SanitizeHtmlHelper;
            }();
        /**
 * index
 */ /***/ },
        /***/ 78: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ z: function() {
                    return /* binding */ Button;
                }
            });
            /* unused harmony export buttonObserver */ /* harmony import */ var extendStatics, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1807), _common_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(759), __extends = (extendStatics = function(d, b) {
                return (extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), __decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Observer */ .Qj();
            var cssClassName = {
                RTL: 'e-rtl',
                BUTTON: 'e-btn',
                PRIMARY: 'e-primary',
                ICONBTN: 'e-icon-btn'
            }, Button = /** @class */ function(_super) {
                /**
     * Constructor for creating the widget
     *
     * @param  {ButtonModel} options - Specifies the button model
     * @param  {string|HTMLButtonElement} element - Specifies the target element
     */ function Button(options, element) {
                    return _super.call(this, options, element) || this;
                }
                return __extends(Button, _super), Button.prototype.preRender = function() {
                // pre render code snippets
                }, /**
     * Initialize the control rendering
     *
     * @returns {void}
     * @private
     */ Button.prototype.render = function() {
                    this.initialize(), this.removeRippleEffect = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .rippleEffect */ .qx)(this.element, {
                        selector: '.' + cssClassName.BUTTON
                    }), this.renderComplete();
                }, Button.prototype.initialize = function() {
                    if (this.cssClass && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        this.element
                    ], this.cssClass.split(' ')), this.isPrimary && this.element.classList.add(cssClassName.PRIMARY), !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isBlazor */ .xr)() || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isBlazor */ .xr)() && 'progress-btn' !== this.getModuleName()) {
                        if (this.content) {
                            var tempContent = this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .SanitizeHtmlHelper.sanitize */ .pJ.sanitize(this.content) : this.content;
                            this.element.innerHTML = tempContent;
                        }
                        this.setIconCss();
                    }
                    this.enableRtl && this.element.classList.add(cssClassName.RTL), this.disabled ? this.controlStatus(this.disabled) : this.wireEvents();
                }, Button.prototype.controlStatus = function(disabled) {
                    this.element.disabled = disabled;
                }, Button.prototype.setIconCss = function() {
                    if (this.iconCss) {
                        var span = this.createElement('span', {
                            className: 'e-btn-icon ' + this.iconCss
                        });
                        this.element.textContent.trim() ? (span.classList.add('e-icon-' + this.iconPosition.toLowerCase()), ('Top' === this.iconPosition || 'Bottom' === this.iconPosition) && this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn')) : this.element.classList.add(cssClassName.ICONBTN);
                        var node = this.element.childNodes[0];
                        node && ('Left' === this.iconPosition || 'Top' === this.iconPosition) ? this.element.insertBefore(span, node) : this.element.appendChild(span);
                    }
                }, Button.prototype.wireEvents = function() {
                    this.isToggle && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.element, 'click', this.btnClickHandler, this);
                }, Button.prototype.unWireEvents = function() {
                    this.isToggle && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.element, 'click', this.btnClickHandler);
                }, Button.prototype.btnClickHandler = function() {
                    this.element.classList.contains('e-active') ? this.element.classList.remove('e-active') : this.element.classList.add('e-active');
                }, /**
     * Destroys the widget.
     *
     * @returns {void}
     */ Button.prototype.destroy = function() {
                    var classList = [
                        cssClassName.PRIMARY,
                        cssClassName.RTL,
                        cssClassName.ICONBTN,
                        'e-success',
                        'e-info',
                        'e-danger',
                        'e-warning',
                        'e-flat',
                        'e-outline',
                        'e-small',
                        'e-bigger',
                        'e-active',
                        'e-round',
                        'e-top-icon-btn',
                        'e-bottom-icon-btn'
                    ];
                    this.cssClass && (classList = classList.concat(this.cssClass.split(' '))), _super.prototype.destroy.call(this), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        this.element
                    ], classList), this.element.getAttribute('class') || this.element.removeAttribute('class'), this.disabled && this.element.removeAttribute('disabled'), this.content && (this.element.innerHTML = this.element.innerHTML.replace(this.content, ''));
                    var span = this.element.querySelector('span.e-btn-icon');
                    span && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(span), this.unWireEvents(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isRippleEnabled */ .re && this.removeRippleEffect();
                }, /**
     * Get component name.
     *
     * @returns {string} - Module name
     * @private
     */ Button.prototype.getModuleName = function() {
                    return 'btn';
                }, /**
     * Get the properties to be maintained in the persisted state.
     *
     * @returns {string} - Persist Data
     * @private
     */ Button.prototype.getPersistData = function() {
                    return this.addOnPersist([]);
                }, /**
     * Dynamically injects the required modules to the component.
     *
     * @private
     * @returns {void}
     */ Button.Inject = function() {
                // Inject code snippets
                }, /**
     * Called internally if any of the property value changed.
     *
     * @param  {ButtonModel} newProp - Specifies new properties
     * @param  {ButtonModel} oldProp - Specifies old properties
     * @returns {void}
     * @private
     */ Button.prototype.onPropertyChanged = function(newProp, oldProp) {
                    for(var span = this.element.querySelector('span.e-btn-icon'), _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++)switch(_a[_i]){
                        case 'isPrimary':
                            newProp.isPrimary ? this.element.classList.add(cssClassName.PRIMARY) : this.element.classList.remove(cssClassName.PRIMARY);
                            break;
                        case 'disabled':
                            this.controlStatus(newProp.disabled);
                            break;
                        case 'iconCss':
                            span ? newProp.iconCss ? (span.className = 'e-btn-icon ' + newProp.iconCss, this.element.textContent.trim() && ('Left' === this.iconPosition ? span.classList.add('e-icon-left') : span.classList.add('e-icon-right'))) : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(span) : this.setIconCss();
                            break;
                        case 'iconPosition':
                            (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                                this.element
                            ], [
                                'e-top-icon-btn',
                                'e-bottom-icon-btn'
                            ]), (span = this.element.querySelector('span.e-btn-icon')) && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(span), this.setIconCss();
                            break;
                        case 'cssClass':
                            oldProp.cssClass && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                                this.element
                            ], oldProp.cssClass.split(' ')), newProp.cssClass && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                                this.element
                            ], newProp.cssClass.split(' '));
                            break;
                        case 'enableRtl':
                            newProp.enableRtl ? this.element.classList.add(cssClassName.RTL) : this.element.classList.remove(cssClassName.RTL);
                            break;
                        case 'content':
                            (0, _common_common__WEBPACK_IMPORTED_MODULE_1__ /* .getTextNode */ .UC)(this.element) || this.element.classList.remove(cssClassName.ICONBTN), (!(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isBlazor */ .xr)() || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isBlazor */ .xr)() && !this.isServerRendered && 'progress-btn' !== this.getModuleName()) && (this.enableHtmlSanitizer && (newProp.content = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .SanitizeHtmlHelper.sanitize */ .pJ.sanitize(newProp.content)), this.element.innerHTML = newProp.content, this.setIconCss());
                            break;
                        case 'isToggle':
                            newProp.isToggle ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.element, 'click', this.btnClickHandler, this) : (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.element, 'click', this.btnClickHandler), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                                this.element
                            ], [
                                'e-active'
                            ]));
                    }
                }, /**
     * Click the button element
     * its native method
     *
     * @public
     * @returns {void}
     */ Button.prototype.click = function() {
                    this.element.click();
                }, /**
     * Sets the focus to Button
     * its native method
     *
     * @public
     * @returns {void}
     */ Button.prototype.focusIn = function() {
                    this.element.focus();
                }, __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)('Left')
                ], Button.prototype, "iconPosition", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)('')
                ], Button.prototype, "iconCss", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(!1)
                ], Button.prototype, "disabled", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(!1)
                ], Button.prototype, "isPrimary", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)('')
                ], Button.prototype, "cssClass", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)('')
                ], Button.prototype, "content", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(!1)
                ], Button.prototype, "isToggle", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)()
                ], Button.prototype, "locale", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(!1)
                ], Button.prototype, "enableHtmlSanitizer", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Event */ .ju)()
                ], Button.prototype, "created", void 0), Button = __decorate([
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .NotifyPropertyChanges */ .Zl
                ], Button);
            }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Component */ .wA);
        /***/ },
        /***/ 759: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ Rm: function() {
                    return /* binding */ wrapperInitialize;
                },
                /* harmony export */ UC: function() {
                    return /* binding */ getTextNode;
                },
                /* harmony export */ Z5: function() {
                    return /* binding */ setHiddenInput;
                },
                /* harmony export */ sg: function() {
                    return /* binding */ rippleMouseHandler;
                }
            });
            /* unused harmony exports destroy, preRender, createCheckBox */ /* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1807);
            /**
 * Initialize wrapper element for angular.
 *
 * @private
 *
 * @param {CreateElementArgs} createElement - Specifies created element args
 * @param {string} tag - Specifies tag name
 * @param {string} type - Specifies type name
 * @param {HTMLInputElement} element - Specifies input element
 * @param {string} WRAPPER - Specifies wrapper element
 * @param {string} role - Specifies role
 * @returns {HTMLInputElement} - Input Element
 */ function wrapperInitialize(createElement, tag, type, element, WRAPPER, role) {
                var input = element;
                if (element.tagName === tag) {
                    var ejInstance = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getValue */ .NA)('ej2_instances', element);
                    input = createElement('input', {
                        attrs: {
                            type: type
                        }
                    });
                    for(var props = [
                        'change',
                        'cssClass',
                        'label',
                        'labelPosition',
                        'id'
                    ], index = 0, len = element.attributes.length; index < len; index++)-1 === props.indexOf(element.attributes[index].nodeName) && input.setAttribute(element.attributes[index].nodeName, element.attributes[index].nodeValue);
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(element, {
                        class: WRAPPER
                    }), element.appendChild(input), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setValue */ .sO)('ej2_instances', ejInstance, input), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .deleteObject */ .ex)(element, 'ej2_instances');
                }
                return input;
            }
            /**
 * Get the text node.
 *
 * @param {HTMLElement} element - Specifies html element
 * @private
 * @returns {Node} - Text node.
 */ function getTextNode(element) {
                for(var node, childnode = element.childNodes, i = 0; i < childnode.length; i++)if (3 === (node = childnode[i]).nodeType) return node;
                return null;
            }
            /**
 * Handles ripple mouse.
 *
 * @private
 * @param {MouseEvent} e - Specifies mouse event
 * @param {Element} rippleSpan - Specifies Ripple span element
 * @returns {void}
 */ function rippleMouseHandler(e, rippleSpan) {
                if (rippleSpan) {
                    var event_1 = document.createEvent('MouseEvents');
                    event_1.initEvent(e.type, !1, !0), rippleSpan.dispatchEvent(event_1);
                }
            }
            /**
 * Append hidden input to given element
 *
 * @private
 * @param {Switch | CheckBox} proxy - Specifies Proxy
 * @param {Element} wrap - Specifies Wrapper ELement
 * @returns {void}
 */ function setHiddenInput(proxy, wrap) {
                proxy.element.getAttribute('ejs-for') && wrap.appendChild(proxy.createElement('input', {
                    attrs: {
                        name: proxy.name || proxy.element.name,
                        value: 'false',
                        type: 'hidden'
                    }
                }));
            }
        /***/ },
        /***/ 3213: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ I: function() {
                    return /* binding */ Input;
                }
            });
            /* harmony import */ var Input, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1807), CLASSNAMES = {
                RTL: 'e-rtl',
                DISABLE: 'e-disabled',
                INPUT: 'e-input',
                TEXTAREA: 'e-multi-line-input',
                INPUTGROUP: 'e-input-group',
                FLOATINPUT: 'e-float-input',
                FLOATLINE: 'e-float-line',
                FLOATTEXT: 'e-float-text',
                FLOATTEXTCONTENT: 'e-float-text-content',
                CLEARICON: 'e-clear-icon',
                CLEARICONHIDE: 'e-clear-icon-hide',
                LABELTOP: 'e-label-top',
                LABELBOTTOM: 'e-label-bottom',
                NOFLOATLABEL: 'e-no-float-label',
                INPUTCUSTOMTAG: 'e-input-custom-tag',
                FLOATCUSTOMTAG: 'e-float-custom-tag'
            };
            !function(Input) {
                var floatType, isBindClearAction = !0;
                function bindInitialEvent(args) {
                    checkInputValue(args.floatLabelType, args.element), args.element.addEventListener('focus', function() {
                        var parent = getParentNode(this);
                        (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline') || parent.classList.contains('e-filled')) && parent.classList.add('e-input-focus');
                    }), args.element.addEventListener('blur', function() {
                        var parent = getParentNode(this);
                        (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline') || parent.classList.contains('e-filled')) && parent.classList.remove('e-input-focus');
                    }), args.element.addEventListener('input', function() {
                        checkInputValue(floatType, args.element);
                    });
                }
                function checkInputValue(floatLabelType, inputElement) {
                    var inputValue = inputElement.value;
                    '' !== inputValue && !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(inputValue) && inputElement.parentElement ? inputElement.parentElement.classList.add('e-valid-input') : 'Always' !== floatLabelType && inputElement.parentElement && inputElement.parentElement.classList.remove('e-valid-input');
                }
                function _focusFn() {
                    var label = getParentNode(this).getElementsByClassName('e-float-text')[0];
                    !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(label) && ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        label
                    ], CLASSNAMES.LABELTOP), label.classList.contains(CLASSNAMES.LABELBOTTOM) && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        label
                    ], CLASSNAMES.LABELBOTTOM));
                }
                function _blurFn() {
                    var parent = getParentNode(this);
                    if (parent.getElementsByTagName('textarea')[0] ? '' === parent.getElementsByTagName('textarea')[0].value : '' === parent.getElementsByTagName('input')[0].value) {
                        var label = parent.getElementsByClassName('e-float-text')[0];
                        (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(label) || (label.classList.contains(CLASSNAMES.LABELTOP) && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                            label
                        ], CLASSNAMES.LABELTOP), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                            label
                        ], CLASSNAMES.LABELBOTTOM));
                    }
                }
                function wireFloatingEvents(element) {
                    element.addEventListener('focus', _focusFn), element.addEventListener('blur', _blurFn);
                }
                function createFloatingInput(args, inputObject, internalCreateElement) {
                    var makeElement = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(internalCreateElement) ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .createElement */ .az : internalCreateElement;
                    'Auto' === args.floatLabelType && wireFloatingEvents(args.element), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(inputObject.container) ? (inputObject.container = createInputContainer(args, CLASSNAMES.FLOATINPUT, CLASSNAMES.FLOATCUSTOMTAG, 'div', makeElement), args.element.parentNode && args.element.parentNode.insertBefore(inputObject.container, args.element)) : ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(args.customTag) || inputObject.container.classList.add(CLASSNAMES.FLOATCUSTOMTAG), inputObject.container.classList.add(CLASSNAMES.FLOATINPUT));
                    var floatLinelement = makeElement('span', {
                        className: CLASSNAMES.FLOATLINE
                    }), floatLabelElement = makeElement('label', {
                        className: CLASSNAMES.FLOATTEXT
                    });
                    if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(args.element.id) || '' === args.element.id || (floatLabelElement.id = 'label_' + args.element.id.replace(/ /g, '_'), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(args.element, {
                        'aria-labelledby': floatLabelElement.id
                    })), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(args.element.placeholder) || '' === args.element.placeholder || (floatLabelElement.innerText = encodePlaceHolder(args.element.placeholder), args.element.removeAttribute('placeholder')), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(args.properties) || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(args.properties.placeholder) || '' === args.properties.placeholder || (floatLabelElement.innerText = encodePlaceHolder(args.properties.placeholder)), floatLabelElement.innerText || inputObject.container.classList.add(CLASSNAMES.NOFLOATLABEL), inputObject.container.classList.contains('e-float-icon-left')) {
                        var inputWrap = inputObject.container.querySelector('.e-input-in-wrap');
                        inputWrap.appendChild(args.element), inputWrap.appendChild(floatLinelement), inputWrap.appendChild(floatLabelElement);
                    } else inputObject.container.appendChild(args.element), inputObject.container.appendChild(floatLinelement), inputObject.container.appendChild(floatLabelElement);
                    updateLabelState(args.element.value, floatLabelElement), 'Always' === args.floatLabelType && (floatLabelElement.classList.contains(CLASSNAMES.LABELBOTTOM) && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        floatLabelElement
                    ], CLASSNAMES.LABELBOTTOM), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        floatLabelElement
                    ], CLASSNAMES.LABELTOP)), 'Auto' === args.floatLabelType && (// eslint-disable-next-line @typescript-eslint/no-unused-vars
                    args.element.addEventListener('input', function(event) {
                        updateLabelState(args.element.value, floatLabelElement, args.element);
                    }), // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    args.element.addEventListener('blur', function(event) {
                        updateLabelState(args.element.value, floatLabelElement);
                    })), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(args.element.getAttribute('id')) || floatLabelElement.setAttribute('for', args.element.getAttribute('id'));
                }
                function checkFloatLabelType(type, container) {
                    'Always' === type && container.classList.contains('e-outline') && container.classList.add('e-valid-input');
                }
                function updateIconState(value, button, readonly) {
                    value && !readonly ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        button
                    ], CLASSNAMES.CLEARICONHIDE) : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        button
                    ], CLASSNAMES.CLEARICONHIDE);
                }
                function updateLabelState(value, label, element) {
                    void 0 === element && (element = null), value ? ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        label
                    ], CLASSNAMES.LABELTOP), label.classList.contains(CLASSNAMES.LABELBOTTOM) && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        label
                    ], CLASSNAMES.LABELBOTTOM)) : (null == element || element !== document.activeElement) && (label.classList.contains(CLASSNAMES.LABELTOP) && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        label
                    ], CLASSNAMES.LABELTOP), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        label
                    ], CLASSNAMES.LABELBOTTOM));
                }
                function getParentNode(element) {
                    var parentNode = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(element.parentNode) ? element : element.parentNode;
                    return parentNode && parentNode.classList.contains('e-input-in-wrap') && (parentNode = parentNode.parentNode), parentNode;
                }
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                function wireClearBtnEvents(element, button, container) {
                    (void 0 == isBindClearAction || isBindClearAction) && button.addEventListener('click', function(event) {
                        element.classList.contains(CLASSNAMES.DISABLE) || element.readOnly || (event.preventDefault(), element !== document.activeElement && element.focus(), element.value = '', (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                            button
                        ], CLASSNAMES.CLEARICONHIDE));
                    }), // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    element.addEventListener('input', function(event) {
                        updateIconState(element.value, button);
                    }), // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    element.addEventListener('focus', function(event) {
                        updateIconState(element.value, button, element.readOnly);
                    }), // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    element.addEventListener('blur', function(event) {
                        setTimeout(function() {
                            (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                                button
                            ], CLASSNAMES.CLEARICONHIDE);
                        }, 200);
                    });
                }
                function validateLabel(element, floatLabelType) {
                    if (getParentNode(element).classList.contains(CLASSNAMES.FLOATINPUT) && 'Auto' === floatLabelType) {
                        var label = getParentNode(element).getElementsByClassName('e-float-text')[0];
                        updateLabelState(element.value, label, element);
                    }
                }
                /**
     * To create input box contianer.
     */ function createInputContainer(args, className, tagClass, tag, internalCreateElement) {
                    var container, makeElement = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(internalCreateElement) ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .createElement */ .az : internalCreateElement;
                    return (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(args.customTag) ? container = makeElement(tag, {
                        className: className
                    }) : (container = makeElement(args.customTag, {
                        className: className
                    })).classList.add(tagClass), container.classList.add('e-control-wrapper'), container;
                }
                function encodePlaceHolder(placeholder) {
                    var result = '';
                    if (!(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(placeholder) && '' !== placeholder) {
                        var spanEle = document.createElement('span');
                        spanEle.innerHTML = '<input  placeholder="' + placeholder + '"/>', result = spanEle.children[0].placeholder;
                    }
                    return result;
                }
                /**
     * Sets the single or multiple cssClass to wrapper of input element.
     * ```
     * E.g : Input.setCssClass('e-custom-class', [element]);
     * ```
     *
     * @param {string} cssClass - Css class names which are needed to add.
     * @param {Element[] | NodeList} elements - The elements which are needed to add / remove classes.
     * @param {string} oldClass
     * - Css class names which are needed to remove. If old classes are need to remove, can give this optional parameter.
     */ function setCssClass(cssClass, elements, oldClass) {
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(oldClass) || '' === oldClass || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)(elements, oldClass.split(' ')), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(cssClass) || '' === cssClass || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)(elements, cssClass.split(' '));
                }
                /**
     * Set the width to the placeholder when it overflows on the button such as spinbutton, clearbutton, icon etc
     * ```
     * E.g : Input.calculateWidth(element, container);
     * ```
     *
     * @param {any} element - Input element which is need to add.
     * @param {HTMLElement} container - The parent element which is need to get the label span to calculate width
     */ function calculateWidth(element, container) {
                    !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(container.getElementsByClassName('e-float-text-content')[0]) && (container.getElementsByClassName('e-float-text-content')[0].classList.contains('e-float-text-overflow') && container.getElementsByClassName('e-float-text-content')[0].classList.remove('e-float-text-overflow'), (element.clientWidth < container.getElementsByClassName('e-float-text-content')[0].clientWidth || element.clientWidth === container.getElementsByClassName('e-float-text-content')[0].clientWidth) && container.getElementsByClassName('e-float-text-content')[0].classList.add('e-float-text-overflow'));
                }
                /**
     * Set the placeholder attribute to the input element.
     * ```
     * E.g : Input.setPlaceholder('Search here', element);
     * ```
     *
     * @param {string} placeholder - Placeholder value which is need to add.
     * @param {HTMLInputElement | HTMLTextAreaElement} element - The element on which the placeholder is need to add.
     */ function setPlaceholder(placeholder, element) {
                    placeholder = encodePlaceHolder(placeholder);
                    var parentElement = getParentNode(element);
                    parentElement.classList.contains(CLASSNAMES.FLOATINPUT) ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(placeholder) || '' === placeholder ? (parentElement.classList.add(CLASSNAMES.NOFLOATLABEL), parentElement.getElementsByClassName('e-float-text-content')[0] ? parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].children[0].textContent = '' : parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '') : (parentElement.getElementsByClassName('e-float-text-content')[0] ? parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].children[0].textContent = placeholder : parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = placeholder, parentElement.classList.remove(CLASSNAMES.NOFLOATLABEL), element.removeAttribute('placeholder')) : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(placeholder) || '' === placeholder ? (element.removeAttribute('placeholder'), element.removeAttribute('aria-placeholder')) : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(element, {
                        placeholder: placeholder,
                        'aria-placeholder': placeholder
                    });
                }
                /**
     * Set the read only attribute to the input element
     * ```
     * E.g : Input.setReadonly(true, element);
     * ```
     *
     * @param {boolean} isReadonly
     * - Boolean value to specify whether to set read only. Setting "True" value enables read only.
     * @param {HTMLInputElement | HTMLTextAreaElement} element
     * - The element which is need to enable read only.
     */ function setReadonly(isReadonly, element, floatLabelType) {
                    isReadonly ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(element, {
                        readonly: ''
                    }) : element.removeAttribute('readonly'), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(floatLabelType) || validateLabel(element, floatLabelType);
                }
                /**
     * Displays the element direction from right to left when its enabled.
     * ```
     * E.g : Input.setEnableRtl(true, [inputObj.container]);
     * ```
     *
     * @param {boolean} isRtl
     * - Boolean value to specify whether to set RTL. Setting "True" value enables the RTL mode.
     * @param {Element[] | NodeList} elements
     * - The elements that are needed to enable/disable RTL.
     */ function setEnableRtl(isRtl, elements) {
                    isRtl ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)(elements, CLASSNAMES.RTL) : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)(elements, CLASSNAMES.RTL);
                }
                /**
     * Enables or disables the given input element.
     * ```
     * E.g : Input.setEnabled(false, element);
     * ```
     *
     * @param {boolean} isEnable
     * - Boolean value to specify whether to enable or disable.
     * @param {HTMLInputElement | HTMLTextAreaElement} element
     * - Element to be enabled or disabled.
     */ function setEnabled(isEnable, element, floatLabelType, inputContainer) {
                    var disabledAttrs = {
                        disabled: 'disabled',
                        'aria-disabled': 'true'
                    }, considerWrapper = !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(inputContainer);
                    isEnable ? (element.classList.remove(CLASSNAMES.DISABLE), removeAttributes(disabledAttrs, element), considerWrapper && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        inputContainer
                    ], CLASSNAMES.DISABLE)) : (element.classList.add(CLASSNAMES.DISABLE), addAttributes(disabledAttrs, element), considerWrapper && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        inputContainer
                    ], CLASSNAMES.DISABLE)), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(floatLabelType) || validateLabel(element, floatLabelType);
                }
                function setClearButton(isClear, element, inputObject, initial, internalCreateElement) {
                    var button, container, makeElement = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(internalCreateElement) ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .createElement */ .az : internalCreateElement;
                    isClear ? inputObject.clearButton = (button = ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(makeElement) ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .createElement */ .az : makeElement)('span', {
                        className: CLASSNAMES.CLEARICON
                    }), container = inputObject.container, (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(initial) ? (inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT) ? inputObject.container.querySelector('.' + CLASSNAMES.FLOATTEXT) : element).insertAdjacentElement('afterend', button) : container.appendChild(button), !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(container) && container.classList.contains(CLASSNAMES.FLOATINPUT) && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        container
                    ], CLASSNAMES.INPUTGROUP), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        button
                    ], CLASSNAMES.CLEARICONHIDE), wireClearBtnEvents(element, button, container), button.setAttribute('aria-label', 'close'), button) : ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .remove */ .Od)(inputObject.clearButton), inputObject.clearButton = null);
                }
                /**
     * Removing the multiple attributes from the given element such as "disabled","id" , etc.
     * ```
     * E.g : Input.removeAttributes({ 'disabled': 'disabled', 'aria-disabled': 'true' }, element);
     * ```
     *
     * @param {string} attrs
     * - Array of attributes which are need to removed from the element.
     * @param {HTMLInputElement | HTMLElement} element
     * - Element on which the attributes are needed to be removed.
     */ function removeAttributes(attrs, element) {
                    for(var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++){
                        var key = _a[_i], parentElement = getParentNode(element);
                        'disabled' === key && element.classList.remove(CLASSNAMES.DISABLE), 'disabled' === key && parentElement.classList.contains(CLASSNAMES.INPUTGROUP) && parentElement.classList.remove(CLASSNAMES.DISABLE), 'placeholder' === key && parentElement.classList.contains(CLASSNAMES.FLOATINPUT) ? parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '' : element.removeAttribute(key);
                    }
                }
                /**
     * Adding the multiple attributes to the given element such as "disabled","id" , etc.
     * ```
     * E.g : Input.addAttributes({ 'id': 'inputpopup' }, element);
     * ```
     *
     * @param {string} attrs
     * - Array of attributes which is added to element.
     * @param {HTMLInputElement | HTMLElement} element
     * - Element on which the attributes are needed to be added.
     */ function addAttributes(attrs, element) {
                    for(var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++){
                        var key = _a[_i], parentElement = getParentNode(element);
                        'disabled' === key && element.classList.add(CLASSNAMES.DISABLE), 'disabled' === key && parentElement.classList.contains(CLASSNAMES.INPUTGROUP) && parentElement.classList.add(CLASSNAMES.DISABLE), 'placeholder' === key && parentElement.classList.contains(CLASSNAMES.FLOATINPUT) ? parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = attrs[key] : element.setAttribute(key, attrs[key]);
                    }
                }
                /**
    * Create the span inside the label and add the label text into the span textcontent
    * ```
    * E.g : Input.createSpanElement(inputObject, makeElement);
    * ```
    *
    * @param {InputObject} inputObject
    * - Element which is need to get the label
    * @param {createElementParams} makeElement
    * - Element which is need to create the span
    */ function createSpanElement(inputObject, makeElement) {
                    if (inputObject.container.classList.contains('e-outline') && inputObject.container.getElementsByClassName('e-float-text')[0]) {
                        var labelSpanElement = makeElement('span', {
                            className: CLASSNAMES.FLOATTEXTCONTENT
                        });
                        labelSpanElement.innerHTML = inputObject.container.getElementsByClassName('e-float-text')[0].innerHTML, inputObject.container.getElementsByClassName('e-float-text')[0].innerHTML = '', inputObject.container.getElementsByClassName('e-float-text')[0].appendChild(labelSpanElement);
                    }
                }
                function _internalRipple(isRipple, container, button) {
                    var argsButton = [];
                    argsButton.push(button);
                    var buttons = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(button) ? container.querySelectorAll('.e-input-group-icon') : argsButton;
                    if (isRipple && buttons.length > 0) for(var index = 0; index < buttons.length; index++)buttons[index].addEventListener('mousedown', _onMouseDownRipple, !1), buttons[index].addEventListener('mouseup', _onMouseUpRipple, !1);
                    else if (buttons.length > 0) for(var index = 0; index < buttons.length; index++)buttons[index].removeEventListener('mousedown', _onMouseDownRipple, this), buttons[index].removeEventListener('mouseup', _onMouseUpRipple, this);
                }
                function _onMouseDownRipple() {
                    for(var container, parentEle = this.parentElement; !parentEle.classList.contains('e-input-group');)parentEle = parentEle.parentElement;
                    (container = parentEle).classList.contains('e-disabled') || container.querySelector('input').readOnly || this.classList.add('e-input-btn-ripple');
                }
                function _onMouseUpRipple() {
                    // eslint-disable-next-line @typescript-eslint/no-this-alias
                    var ele = this;
                    setTimeout(function() {
                        ele.classList.remove('e-input-btn-ripple');
                    }, 500);
                }
                function createIconEle(iconClass, makeElement) {
                    var button = makeElement('span', {
                        className: iconClass
                    });
                    return button.classList.add('e-input-group-icon'), button;
                }
                /**
     * Creates a new span element with the given icons added and prepend it in input element.
     * ```
     * E.g : Input.prependSpan('e-icon-spin', inputObj.container, inputElement);
     * ```
     *
     * @param {string} iconClass - Icon classes which are need to add to the span element which is going to created.
     * Span element acts as icon or button element for input.
     * @param {HTMLElement} container - The container on which created span element is going to append.
     * @param {HTMLElement} inputElement - The inputElement on which created span element is going to prepend.
     */ /* eslint-disable @typescript-eslint/indent */ function prependSpan(iconClass, container, inputElement, internalCreateElement) {
                    /* eslint-enable @typescript-eslint/indent */ var makeElement = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(internalCreateElement) ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .createElement */ .az : internalCreateElement, button = createIconEle(iconClass, makeElement);
                    container.classList.add('e-float-icon-left');
                    var innerWrapper = container.querySelector('.e-input-in-wrap');
                    if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(innerWrapper)) {
                        innerWrapper = makeElement('span', {
                            className: 'e-input-in-wrap'
                        }), inputElement.parentNode.insertBefore(innerWrapper, inputElement);
                        var result = container.querySelectorAll(inputElement.tagName + ' ~ *');
                        innerWrapper.appendChild(inputElement);
                        for(var i = 0; i < result.length; i++)innerWrapper.appendChild(result[i]);
                    }
                    return innerWrapper.parentNode.insertBefore(button, innerWrapper), container.classList.contains(CLASSNAMES.INPUTGROUP) || container.classList.add(CLASSNAMES.INPUTGROUP), _internalRipple(!0, container, button), button;
                }
                /**
     * Creates a new span element with the given icons added and append it in container element.
     * ```
     * E.g : Input.appendSpan('e-icon-spin', inputObj.container);
     * ```
     *
     * @param {string} iconClass - Icon classes which are need to add to the span element which is going to created.
     * Span element acts as icon or button element for input.
     * @param {HTMLElement} container - The container on which created span element is going to append.
     */ function appendSpan(iconClass, container, internalCreateElement) {
                    var button = createIconEle(iconClass, (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(internalCreateElement) ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .createElement */ .az : internalCreateElement);
                    return container.classList.contains(CLASSNAMES.INPUTGROUP) || container.classList.add(CLASSNAMES.INPUTGROUP), (container.classList.contains('e-float-icon-left') ? container.querySelector('.e-input-in-wrap') : container).appendChild(button), _internalRipple(!0, container, button), button;
                }
                function validateInputType(containerElement, input) {
                    'hidden' === input.type ? containerElement.classList.add('e-hidden') : containerElement.classList.contains('e-hidden') && containerElement.classList.remove('e-hidden');
                }
                Input.createInput = /**
     * Create a wrapper to input element with multiple span elements and set the basic properties to input based components.
     * ```
     * E.g : Input.createInput({ element: element, floatLabelType : "Auto", properties: { placeholder: 'Search' } });
     * ```
     *
     */ function(args, internalCreateElement) {
                    var makeElement = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(internalCreateElement) ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .createElement */ .az : internalCreateElement, inputObject = {
                        container: null,
                        buttons: [],
                        clearButton: null
                    };
                    if (floatType = args.floatLabelType, isBindClearAction = args.bindClearAction, (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(args.floatLabelType) || 'Never' === args.floatLabelType ? (inputObject.container = createInputContainer(args, CLASSNAMES.INPUTGROUP, CLASSNAMES.INPUTCUSTOMTAG, 'span', makeElement), args.element.parentNode.insertBefore(inputObject.container, args.element), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        args.element
                    ], CLASSNAMES.INPUT), inputObject.container.appendChild(args.element)) : createFloatingInput(args, inputObject, makeElement), bindInitialEvent(args), !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(args.properties) && !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(args.properties.showClearButton) && args.properties.showClearButton && 'TEXTAREA' !== args.element.tagName && (setClearButton(args.properties.showClearButton, args.element, inputObject, !0, makeElement), inputObject.clearButton.setAttribute('role', 'button'), inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT) && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        inputObject.container
                    ], CLASSNAMES.INPUTGROUP)), !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(args.buttons) && 'TEXTAREA' !== args.element.tagName) for(var i = 0; i < args.buttons.length; i++)inputObject.buttons.push(appendSpan(args.buttons[i], inputObject.container, makeElement));
                    return (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(args.element) || 'TEXTAREA' !== args.element.tagName || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        inputObject.container
                    ], CLASSNAMES.TEXTAREA), validateInputType(inputObject.container, args.element), createSpanElement(inputObject = function(args, inputObject) {
                        if (!(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(args.properties)) for(var _i = 0, _a = Object.keys(args.properties); _i < _a.length; _i++)switch(_a[_i]){
                            case 'cssClass':
                                setCssClass(args.properties.cssClass, [
                                    inputObject.container
                                ]), checkFloatLabelType(args.floatLabelType, inputObject.container);
                                break;
                            case 'enabled':
                                setEnabled(args.properties.enabled, args.element, args.floatLabelType, inputObject.container);
                                break;
                            case 'enableRtl':
                                setEnableRtl(args.properties.enableRtl, [
                                    inputObject.container
                                ]);
                                break;
                            case 'placeholder':
                                setPlaceholder(args.properties.placeholder, args.element);
                                break;
                            case 'readonly':
                                setReadonly(args.properties.readonly, args.element);
                        }
                        return inputObject;
                    }(args, inputObject), makeElement), inputObject;
                }, Input.bindInitialEvent = bindInitialEvent, Input.wireFloatingEvents = wireFloatingEvents, Input.wireClearBtnEvents = wireClearBtnEvents, Input.setValue = /**
     * Sets the value to the input element.
     * ```
     * E.g : Input.setValue('content', element, "Auto", true );
     * ```
     *
     * @param {string} value - Specify the value of the input element.
     * @param {HTMLInputElement | HTMLTextAreaElement} element - The element on which the specified value is updated.
     * @param {string} floatLabelType - Specify the float label type of the input element.
     * @param {boolean} clearButton - Boolean value to specify whether the clear icon is enabled / disabled on the input.
     */ function(value, element, floatLabelType, clearButton) {
                    if (element.value = value, (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(element.getAttribute('value')) && calculateWidth(element, element.parentElement), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(floatLabelType) || 'Auto' !== floatLabelType || validateLabel(element, floatLabelType), !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(clearButton) && clearButton) {
                        var parentElement = getParentNode(element);
                        if (!(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(parentElement)) {
                            var button = parentElement.getElementsByClassName(CLASSNAMES.CLEARICON)[0];
                            (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(button) || (element.value && parentElement.classList.contains('e-input-focus') ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                                button
                            ], CLASSNAMES.CLEARICONHIDE) : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                                button
                            ], CLASSNAMES.CLEARICONHIDE));
                        }
                    }
                    checkInputValue(floatLabelType, element);
                }, Input.setCssClass = setCssClass, Input.calculateWidth = calculateWidth, Input.setWidth = /**
     * Set the width to the wrapper of input element.
     * ```
     * E.g : Input.setWidth('200px', container);
     * ```
     *
     * @param {number | string} width - Width value which is need to add.
     * @param {HTMLElement} container - The element on which the width is need to add.
     */ function(width, container) {
                    'number' == typeof width ? container.style.width = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .formatUnit */ .Ac)(width) : 'string' == typeof width && (container.style.width = width.match(/px|%|em/) ? width : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .formatUnit */ .Ac)(width)), calculateWidth(container.firstChild, container);
                }, Input.setPlaceholder = setPlaceholder, Input.setReadonly = setReadonly, Input.setEnableRtl = setEnableRtl, Input.setEnabled = setEnabled, Input.setClearButton = setClearButton, Input.removeAttributes = removeAttributes, Input.addAttributes = addAttributes, Input.removeFloating = function(input) {
                    var container = input.container;
                    if (!(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(container) && container.classList.contains(CLASSNAMES.FLOATINPUT)) {
                        var inputEle = container.querySelector('textarea') ? container.querySelector('textarea') : container.querySelector('input'), placeholder = container.querySelector('.' + CLASSNAMES.FLOATTEXT).textContent, clearButton = null !== container.querySelector('.e-clear-icon');
                        (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(container.querySelector('.' + CLASSNAMES.FLOATLINE)), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(container.querySelector('.' + CLASSNAMES.FLOATTEXT)), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .classList */ .s1)(container, [
                            CLASSNAMES.INPUTGROUP
                        ], [
                            CLASSNAMES.FLOATINPUT
                        ]), inputEle.removeEventListener('focus', _focusFn), inputEle.removeEventListener('blur', _blurFn), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(inputEle, {
                            placeholder: placeholder
                        }), inputEle.classList.add(CLASSNAMES.INPUT), clearButton || 'INPUT' !== inputEle.tagName || inputEle.removeAttribute('required');
                    }
                }, Input.addFloating = function(input, type, placeholder, internalCreateElement) {
                    var makeElement = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(internalCreateElement) ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .createElement */ .az : internalCreateElement, container = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(input, '.' + CLASSNAMES.INPUTGROUP);
                    if (floatType = type, 'Never' !== type) {
                        var customTag = container.tagName, args = {
                            element: input,
                            floatLabelType: type,
                            customTag: customTag = 'DIV' !== customTag && 'SPAN' !== customTag ? customTag : null,
                            properties: {
                                placeholder: placeholder
                            }
                        }, iconEle = container.querySelector('.e-clear-icon'), inputObj = {
                            container: container
                        };
                        input.classList.remove(CLASSNAMES.INPUT), createFloatingInput(args, inputObj, makeElement), createSpanElement(inputObj, makeElement), calculateWidth(args.element, inputObj.container);
                        var isPrependIcon = container.classList.contains('e-float-icon-left');
                        if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(iconEle) && (iconEle = isPrependIcon ? container.querySelector('.e-input-in-wrap').querySelector('.e-input-group-icon') : container.querySelector('.e-input-group-icon')), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(iconEle)) isPrependIcon && (iconEle = container.querySelector('.e-input-group-icon')), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(iconEle) && container.classList.remove(CLASSNAMES.INPUTGROUP);
                        else {
                            var floatLine = container.querySelector('.' + CLASSNAMES.FLOATLINE), floatText = container.querySelector('.' + CLASSNAMES.FLOATTEXT), wrapper = isPrependIcon ? container.querySelector('.e-input-in-wrap') : container;
                            wrapper.insertBefore(input, iconEle), wrapper.insertBefore(floatLine, iconEle), wrapper.insertBefore(floatText, iconEle);
                        }
                    }
                    checkFloatLabelType(type, input.parentElement);
                }, Input.createSpanElement = createSpanElement, Input.setRipple = /**
     * Enable or Disable the ripple effect on the icons inside the Input. Ripple effect is only applicable for material theme.
     * ```
     * E.g : Input.setRipple(true, [inputObjects]);
     * ```
     *
     * @param {boolean} isRipple
     * - Boolean value to specify whether to enable the ripple effect.
     * @param {InputObject[]} inputObj
     * - Specify the collection of input objects.
     */ function(isRipple, inputObj) {
                    for(var i = 0; i < inputObj.length; i++)_internalRipple(isRipple, inputObj[i].container);
                }, Input.addIcon = /**
     * Creates a new span element with the given icons added and append it in container element.
     * ```
     * E.g : Input.addIcon('append', 'e-icon-spin', inputObj.container, inputElement);
     * ```
     *
     * @param {string} position - Specify the icon placement on the input.Possible values are append and prepend.
     * @param {string | string[]} icons - Icon classes which are need to add to the span element which is going to created.
     * Span element acts as icon or button element for input.
     * @param {HTMLElement} container - The container on which created span element is going to append.
     * @param {HTMLElement} input - The inputElement on which created span element is going to prepend.
     */ /* eslint-disable @typescript-eslint/indent */ function(position, icons, container, input, internalCreate) {
                    /* eslint-enable @typescript-eslint/indent */ var result = 'string' == typeof icons ? icons.split(',') : icons;
                    if ('append' === position.toLowerCase()) for(var _i = 0; _i < result.length; _i++){
                        var icon = result[_i];
                        appendSpan(icon, container, internalCreate);
                    }
                    else for(var _a = 0; _a < result.length; _a++){
                        var icon = result[_a];
                        prependSpan(icon, container, input, internalCreate);
                    }
                    container.getElementsByClassName('e-input-group-icon')[0] && container.getElementsByClassName('e-float-text-overflow')[0] && container.getElementsByClassName('e-float-text-overflow')[0].classList.add('e-icon');
                }, Input.prependSpan = prependSpan, Input.appendSpan = appendSpan, Input.validateInputType = validateInputType;
            }(Input || (Input = {}));
        /* eslint-enable valid-jsdoc, jsdoc/require-jsdoc, jsdoc/require-returns, jsdoc/require-param */ /***/ },
        /***/ 8801: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ N: function() {
                    return /* binding */ NumericTextBox;
                }
            });
            /* harmony import */ var extendStatics, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1807), _input_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3213), __extends = (extendStatics = function(d, b) {
                return (extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), __decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, SPINICON = 'e-input-group-icon', SPINUP = 'e-spin-up', ERROR = 'e-error', INCREMENT = 'increment', DECREMENT = 'decrement', INTREGEXP = RegExp('^(-)?(\\d*)$'), NUMERIC_FOCUS = 'e-input-focus', wrapperAttributes = [
                'title',
                'style',
                'class'
            ], NumericTextBox = /** @class */ function(_super) {
                /**
     *
     * @param {NumericTextBoxModel} options - Specifies the NumericTextBox model.
     * @param {string | HTMLInputElement} element - Specifies the element to render as component.
     * @private
     */ function NumericTextBox(options, element) {
                    var _this = _super.call(this, options, element) || this;
                    return _this.isVue = !1, _this.preventChange = !1, _this.isAngular = !1, _this.isDynamicChange = !1, _this.numericOptions = options, _this;
                }
                return __extends(NumericTextBox, _super), NumericTextBox.prototype.preRender = function() {
                    this.isPrevFocused = !1, this.decimalSeparator = '.', // eslint-disable-next-line no-useless-escape
                    this.intRegExp = RegExp('/^(-)?(\d*)$/'), this.isCalled = !1;
                    var ejInstance = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getValue */ .NA)('ej2_instances', this.element);
                    if (this.cloneElement = this.element.cloneNode(!0), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        this.cloneElement
                    ], [
                        'e-control',
                        'e-numerictextbox',
                        'e-lib'
                    ]), this.angularTagName = null, this.formEle = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(this.element, 'form'), 'EJS-NUMERICTEXTBOX' === this.element.tagName) {
                        this.angularTagName = this.element.tagName;
                        for(var input = this.createElement('input'), index = 0; index < this.element.attributes.length; index++){
                            var attributeName = this.element.attributes[index].nodeName;
                            'id' !== attributeName && 'class' !== attributeName ? (input.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue), input.innerHTML = this.element.innerHTML) : 'class' === attributeName && input.setAttribute(attributeName, this.element.className.split(' ').filter(function(item) {
                                return 0 !== item.indexOf('ng-');
                            }).join(' '));
                        }
                        this.element.hasAttribute('name') && this.element.removeAttribute('name'), this.element.classList.remove('e-control', 'e-numerictextbox'), this.element.appendChild(input), this.element = input, (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setValue */ .sO)('ej2_instances', ejInstance, this.element);
                    }
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(this.element, {
                        role: 'spinbutton',
                        tabindex: '0',
                        autocomplete: 'off',
                        'aria-live': 'assertive'
                    });
                    var localeText = {
                        incrementTitle: 'Increment value',
                        decrementTitle: 'Decrement value',
                        placeholder: this.placeholder
                    };
                    this.l10n = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .L10n */ .E7('numerictextbox', localeText, this.locale), '' !== this.l10n.getConstant('placeholder') && this.setProperties({
                        placeholder: this.placeholder || this.l10n.getConstant('placeholder')
                    }, !0), this.element.hasAttribute('id') || this.element.setAttribute('id', (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getUniqueID */ .QI)('numerictextbox')), this.isValidState = !0, this.inputStyle = null, this.inputName = null, this.cultureInfo = {}, this.initCultureInfo(), this.initCultureFunc(), this.prevValue = this.value, this.updateHTMLAttrToElement(), this.checkAttributes(!1), this.formEle && (this.inputEleValue = this.value), this.validateMinMax(), this.validateStep(), null === this.placeholder && this.updatePlaceholder();
                }, /**
     * To Initialize the control rendering
     *
     * @returns {void}
     * @private
     */ NumericTextBox.prototype.render = function() {
                    'input' === this.element.tagName.toLowerCase() && (this.createWrapper(), this.showSpinButton && this.spinBtnCreation(), this.setElementWidth(this.width), this.container.classList.contains('e-input-group') || this.container.classList.add('e-input-group'), this.changeValue(null === this.value || isNaN(this.value) ? null : this.strictMode ? this.trimValue(this.value) : this.value), this.wireEvents(), null !== this.value && !isNaN(this.value) && this.decimals && this.setProperties({
                        value: this.roundNumber(this.value, this.decimals)
                    }, !0), (this.element.getAttribute('value') || this.value) && (this.element.setAttribute('value', this.element.value), this.hiddenInput.setAttribute('value', this.hiddenInput.value)), this.elementPrevValue = this.element.value, this.element.hasAttribute('data-val') && this.element.setAttribute('data-val', 'false'), this.renderComplete());
                }, NumericTextBox.prototype.checkAttributes = function(isDynamic) {
                    for(var attributes = isDynamic ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : [
                        'value',
                        'min',
                        'max',
                        'step',
                        'disabled',
                        'readonly',
                        'style',
                        'name',
                        'placeholder'
                    ], _i = 0; _i < attributes.length; _i++){
                        var prop = attributes[_i];
                        if (!(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.element.getAttribute(prop))) switch(prop){
                            case 'disabled':
                                if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.numericOptions) || void 0 === this.numericOptions.enabled || isDynamic) {
                                    var enabled = 'disabled' !== this.element.getAttribute(prop) && '' !== this.element.getAttribute(prop) && 'true' !== this.element.getAttribute(prop);
                                    this.setProperties({
                                        enabled: enabled
                                    }, !isDynamic);
                                }
                                break;
                            case 'readonly':
                                if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.numericOptions) || void 0 === this.numericOptions.readonly || isDynamic) {
                                    var readonly = 'readonly' === this.element.getAttribute(prop) || '' === this.element.getAttribute(prop) || 'true' === this.element.getAttribute(prop);
                                    this.setProperties({
                                        readonly: readonly
                                    }, !isDynamic);
                                }
                                break;
                            case 'placeholder':
                                ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.numericOptions) || void 0 === this.numericOptions.placeholder || isDynamic) && this.setProperties({
                                    placeholder: this.element.placeholder
                                }, !isDynamic);
                                break;
                            case 'value':
                                if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.numericOptions) || void 0 === this.numericOptions.value || isDynamic) {
                                    var setNumber = this.instance.getNumberParser({
                                        format: 'n'
                                    })(this.element.getAttribute(prop));
                                    this.setProperties((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setValue */ .sO)(prop, setNumber, {}), !isDynamic);
                                }
                                break;
                            case 'min':
                                if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.numericOptions) || void 0 === this.numericOptions.min || isDynamic) {
                                    var minValue = this.instance.getNumberParser({
                                        format: 'n'
                                    })(this.element.getAttribute(prop));
                                    null === minValue || isNaN(minValue) || this.setProperties((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setValue */ .sO)(prop, minValue, {}), !isDynamic);
                                }
                                break;
                            case 'max':
                                if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.numericOptions) || void 0 === this.numericOptions.max || isDynamic) {
                                    var maxValue = this.instance.getNumberParser({
                                        format: 'n'
                                    })(this.element.getAttribute(prop));
                                    null === maxValue || isNaN(maxValue) || this.setProperties((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setValue */ .sO)(prop, maxValue, {}), !isDynamic);
                                }
                                break;
                            case 'step':
                                if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.numericOptions) || void 0 === this.numericOptions.step || isDynamic) {
                                    var stepValue = this.instance.getNumberParser({
                                        format: 'n'
                                    })(this.element.getAttribute(prop));
                                    null === stepValue || isNaN(stepValue) || this.setProperties((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setValue */ .sO)(prop, stepValue, {}), !isDynamic);
                                }
                                break;
                            case 'style':
                                this.inputStyle = this.element.getAttribute(prop);
                                break;
                            case 'name':
                                this.inputName = this.element.getAttribute(prop);
                                break;
                            default:
                                var value = this.instance.getNumberParser({
                                    format: 'n'
                                })(this.element.getAttribute(prop));
                                (null === value || isNaN(value)) && 'value' !== prop || this.setProperties((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setValue */ .sO)(prop, value, {}), !0);
                        }
                    }
                }, NumericTextBox.prototype.updatePlaceholder = function() {
                    this.setProperties({
                        placeholder: this.l10n.getConstant('placeholder')
                    }, !0);
                }, NumericTextBox.prototype.initCultureFunc = function() {
                    this.instance = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Internationalization */ .eC(this.locale);
                }, NumericTextBox.prototype.initCultureInfo = function() {
                    this.cultureInfo.format = this.format, null !== (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getValue */ .NA)('currency', this) && ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setValue */ .sO)('currency', this.currency, this.cultureInfo), this.setProperties({
                        currencyCode: this.currency
                    }, !0));
                }, /* Wrapper creation */ NumericTextBox.prototype.createWrapper = function() {
                    var updatedCssClassValue = this.cssClass;
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.cssClass) || '' === this.cssClass || (updatedCssClassValue = this.getNumericValidClassList(this.cssClass));
                    var inputObj = _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.createInput */ .I.createInput({
                        element: this.element,
                        floatLabelType: this.floatLabelType,
                        properties: {
                            readonly: this.readonly,
                            placeholder: this.placeholder,
                            cssClass: updatedCssClassValue,
                            enableRtl: this.enableRtl,
                            showClearButton: this.showClearButton,
                            enabled: this.enabled
                        }
                    }, this.createElement);
                    this.inputWrapper = inputObj, this.container = inputObj.container, this.container.setAttribute('class', "e-control-wrapper e-numeric " + this.container.getAttribute('class')), this.updateHTMLAttrToWrapper(), this.readonly && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(this.element, {
                        'aria-readonly': 'true'
                    }), this.hiddenInput = this.createElement('input', {
                        attrs: {
                            type: 'text',
                            validateHidden: 'true',
                            class: 'e-numeric-hidden'
                        }
                    }), this.inputName = null !== this.inputName ? this.inputName : this.element.id, this.element.removeAttribute('name'), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(this.hiddenInput, {
                        name: this.inputName
                    }), this.container.insertBefore(this.hiddenInput, this.container.childNodes[1]), this.updateDataAttribute(!1), null !== this.inputStyle && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(this.container, {
                        style: this.inputStyle
                    });
                }, NumericTextBox.prototype.updateDataAttribute = function(isDynamic) {
                    var attr = {};
                    if (isDynamic) attr = this.htmlAttributes;
                    else for(var a = 0; a < this.element.attributes.length; a++)attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
                    for(var _i = 0, _a = Object.keys(attr); _i < _a.length; _i++){
                        var key = _a[_i];
                        0 === key.indexOf('data') && this.hiddenInput.setAttribute(key, attr[key]);
                    }
                }, NumericTextBox.prototype.updateHTMLAttrToElement = function() {
                    if (!(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.htmlAttributes)) for(var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++){
                        var pro = _a[_i];
                        0 > wrapperAttributes.indexOf(pro) && this.element.setAttribute(pro, this.htmlAttributes[pro]);
                    }
                }, NumericTextBox.prototype.updateCssClass = function(newClass, oldClass) {
                    _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.setCssClass */ .I.setCssClass(this.getNumericValidClassList(newClass), [
                        this.container
                    ], this.getNumericValidClassList(oldClass));
                }, NumericTextBox.prototype.getNumericValidClassList = function(numericClassName) {
                    var result = numericClassName;
                    return (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(numericClassName) || '' === numericClassName || (result = numericClassName.replace(/\s+/g, ' ').trim()), result;
                }, NumericTextBox.prototype.updateHTMLAttrToWrapper = function() {
                    if (!(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.htmlAttributes)) for(var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++){
                        var pro = _a[_i];
                        if (wrapperAttributes.indexOf(pro) > -1) {
                            if ('class' === pro) {
                                var updatedClassValue = this.getNumericValidClassList(this.htmlAttributes[pro]);
                                '' !== updatedClassValue && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                                    this.container
                                ], updatedClassValue.split(' '));
                            } else if ('style' === pro) {
                                var numericStyle = this.container.getAttribute(pro);
                                numericStyle = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(numericStyle) ? this.htmlAttributes[pro] : numericStyle + this.htmlAttributes[pro], this.container.setAttribute(pro, numericStyle);
                            } else this.container.setAttribute(pro, this.htmlAttributes[pro]);
                        }
                    }
                }, NumericTextBox.prototype.setElementWidth = function(width) {
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(width) || ('number' == typeof width ? this.container.style.width = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .formatUnit */ .Ac)(width) : 'string' == typeof width && (this.container.style.width = width.match(/px|%|em/) ? width : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .formatUnit */ .Ac)(width)));
                }, /* Spinner creation */ NumericTextBox.prototype.spinBtnCreation = function() {
                    this.spinDown = _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.appendSpan */ .I.appendSpan(SPINICON + " e-spin-down", this.container, this.createElement), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(this.spinDown, {
                        title: this.l10n.getConstant('decrementTitle'),
                        'aria-label': this.l10n.getConstant('decrementTitle')
                    }), this.spinUp = _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.appendSpan */ .I.appendSpan(SPINICON + ' ' + SPINUP, this.container, this.createElement), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(this.spinUp, {
                        title: this.l10n.getConstant('incrementTitle'),
                        'aria-label': this.l10n.getConstant('incrementTitle')
                    }), this.wireSpinBtnEvents();
                }, NumericTextBox.prototype.validateMinMax = function() {
                    ('number' != typeof this.min || isNaN(this.min)) && this.setProperties({
                        min: -Number.MAX_VALUE
                    }, !0), ('number' != typeof this.max || isNaN(this.max)) && this.setProperties({
                        max: Number.MAX_VALUE
                    }, !0), null !== this.decimals && (this.min !== -Number.MAX_VALUE && this.setProperties({
                        min: this.instance.getNumberParser({
                            format: 'n'
                        })(this.formattedValue(this.decimals, this.min))
                    }, !0), this.max !== Number.MAX_VALUE && this.setProperties({
                        max: this.instance.getNumberParser({
                            format: 'n'
                        })(this.formattedValue(this.decimals, this.max))
                    }, !0)), this.setProperties({
                        min: this.min > this.max ? this.max : this.min
                    }, !0), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(this.element, {
                        'aria-valuemin': this.min.toString(),
                        'aria-valuemax': this.max.toString()
                    });
                }, NumericTextBox.prototype.formattedValue = function(decimals, value) {
                    return this.instance.getNumberFormat({
                        maximumFractionDigits: decimals,
                        minimumFractionDigits: decimals,
                        useGrouping: !1
                    })(value);
                }, NumericTextBox.prototype.validateStep = function() {
                    null !== this.decimals && this.setProperties({
                        step: this.instance.getNumberParser({
                            format: 'n'
                        })(this.formattedValue(this.decimals, this.step))
                    }, !0);
                }, NumericTextBox.prototype.action = function(operation, event) {
                    this.isInteract = !0;
                    var value = this.isFocused ? this.instance.getNumberParser({
                        format: 'n'
                    })(this.element.value) : this.value;
                    this.changeValue(this.performAction(value, this.step, operation)), this.raiseChangeEvent(event);
                }, NumericTextBox.prototype.checkErrorClass = function() {
                    this.isValidState ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        this.container
                    ], ERROR) : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        this.container
                    ], ERROR), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(this.element, {
                        'aria-invalid': this.isValidState ? 'false' : 'true'
                    });
                }, NumericTextBox.prototype.bindClearEvent = function() {
                    this.showClearButton && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler, this);
                }, NumericTextBox.prototype.resetHandler = function(e) {
                    e.preventDefault(), (!this.inputWrapper.clearButton.classList.contains('e-clear-icon-hide') || this.inputWrapper.container.classList.contains('e-static-clear')) && this.clear(e), this.isInteract = !0, this.raiseChangeEvent(e);
                }, // eslint-disable-next-line @typescript-eslint/no-unused-vars
                NumericTextBox.prototype.clear = function(event) {
                    if (this.setProperties({
                        value: null
                    }, !0), this.setElementValue(''), this.hiddenInput.value = '', (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(this.element, 'form')) {
                        var element = this.element.nextElementSibling, keyupEvent = document.createEvent('KeyboardEvent');
                        keyupEvent.initEvent('keyup', !1, !0), element.dispatchEvent(keyupEvent);
                    }
                }, NumericTextBox.prototype.resetFormHandler = function() {
                    'EJS-NUMERICTEXTBOX' === this.element.tagName ? this.updateValue(null) : this.updateValue(this.inputEleValue);
                }, NumericTextBox.prototype.setSpinButton = function() {
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.spinDown) || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(this.spinDown, {
                        title: this.l10n.getConstant('decrementTitle'),
                        'aria-label': this.l10n.getConstant('decrementTitle')
                    }), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.spinUp) || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(this.spinUp, {
                        title: this.l10n.getConstant('incrementTitle'),
                        'aria-label': this.l10n.getConstant('incrementTitle')
                    });
                }, NumericTextBox.prototype.wireEvents = function() {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.element, 'focus', this.focusHandler, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.element, 'blur', this.focusOutHandler, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.element, 'keydown', this.keyDownHandler, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.element, 'keyup', this.keyUpHandler, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.element, 'input', this.inputHandler, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.element, 'keypress', this.keyPressHandler, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.element, 'change', this.changeHandler, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.element, 'paste', this.pasteHandler, this), this.enabled && (this.bindClearEvent(), this.formEle && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.formEle, 'reset', this.resetFormHandler, this));
                }, NumericTextBox.prototype.wireSpinBtnEvents = function() {
                    /* bind spin button events */ _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchStartEvent */ .AR.touchStartEvent, this.mouseDownOnSpinner, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchStartEvent */ .AR.touchStartEvent, this.mouseDownOnSpinner, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchEndEvent */ .AR.touchEndEvent, this.mouseUpOnSpinner, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchEndEvent */ .AR.touchEndEvent, this.mouseUpOnSpinner, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchMoveEvent */ .AR.touchMoveEvent, this.touchMoveOnSpinner, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchMoveEvent */ .AR.touchMoveEvent, this.touchMoveOnSpinner, this);
                }, NumericTextBox.prototype.unwireEvents = function() {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.element, 'focus', this.focusHandler), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.element, 'blur', this.focusOutHandler), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.element, 'keyup', this.keyUpHandler), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.element, 'input', this.inputHandler), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.element, 'keydown', this.keyDownHandler), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.element, 'keypress', this.keyPressHandler), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.element, 'change', this.changeHandler), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.element, 'paste', this.pasteHandler), this.formEle && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.formEle, 'reset', this.resetFormHandler);
                }, NumericTextBox.prototype.unwireSpinBtnEvents = function() {
                    /* unbind spin button events */ _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchStartEvent */ .AR.touchStartEvent, this.mouseDownOnSpinner), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchStartEvent */ .AR.touchStartEvent, this.mouseDownOnSpinner), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchEndEvent */ .AR.touchEndEvent, this.mouseUpOnSpinner), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchEndEvent */ .AR.touchEndEvent, this.mouseUpOnSpinner), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.spinUp, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchMoveEvent */ .AR.touchMoveEvent, this.touchMoveOnSpinner), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.spinDown, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchMoveEvent */ .AR.touchMoveEvent, this.touchMoveOnSpinner);
                }, NumericTextBox.prototype.changeHandler = function(event) {
                    event.stopPropagation(), this.element.value.length || this.setProperties({
                        value: null
                    }, !0);
                    var parsedInput = this.instance.getNumberParser({
                        format: 'n'
                    })(this.element.value);
                    this.updateValue(parsedInput, event);
                }, NumericTextBox.prototype.raiseChangeEvent = function(event) {
                    if (this.prevValue !== this.value) {
                        var eventArgs = {};
                        this.changeEventArgs = {
                            value: this.value,
                            previousValue: this.prevValue,
                            isInteracted: this.isInteract,
                            isInteraction: this.isInteract,
                            event: event
                        }, event && (this.changeEventArgs.event = event), void 0 === this.changeEventArgs.event && (this.changeEventArgs.isInteracted = !1, this.changeEventArgs.isInteraction = !1), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .merge */ .TS)(eventArgs, this.changeEventArgs), this.prevValue = this.value, this.isInteract = !1, this.elementPrevValue = this.element.value, this.preventChange = !1, this.trigger('change', eventArgs);
                    }
                }, NumericTextBox.prototype.pasteHandler = function() {
                    var _this = this;
                    if (this.enabled && !this.readonly) {
                        var beforeUpdate = this.element.value;
                        setTimeout(function() {
                            _this.numericRegex().test(_this.element.value) || _this.setElementValue(beforeUpdate);
                        });
                    }
                }, NumericTextBox.prototype.preventHandler = function() {
                    var _this = this, iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
                    setTimeout(function() {
                        if (_this.element.selectionStart > 0) {
                            var currentPos = _this.element.selectionStart, prevPos = _this.element.selectionStart - 1, valArray = _this.element.value.split(''), numericObject = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getNumericObject */ .NE)(_this.locale), decimalSeparator = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getValue */ .NA)('decimal', numericObject), ignoreKeyCode = decimalSeparator.charCodeAt(0);
                            ' ' === _this.element.value[prevPos] && _this.element.selectionStart > 0 && !iOS ? ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(_this.prevVal) ? _this.element.value = _this.element.value.trim() : 0 !== prevPos ? _this.element.value = _this.prevVal : 0 === prevPos && (_this.element.value = _this.element.value.trim()), _this.element.setSelectionRange(prevPos, prevPos)) : isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && 45 !== _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) ? (valArray.indexOf(_this.element.value[_this.element.selectionStart - 1]) !== valArray.lastIndexOf(_this.element.value[_this.element.selectionStart - 1]) && _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) === ignoreKeyCode || _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) !== ignoreKeyCode) && (_this.element.value = _this.element.value.substring(0, prevPos) + _this.element.value.substring(currentPos, _this.element.value.length), _this.element.setSelectionRange(prevPos, prevPos), isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && _this.element.selectionStart > 0 && _this.element.value.length && _this.preventHandler()) : isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 2])) && _this.element.selectionStart > 1 && 45 !== _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) && (valArray.indexOf(_this.element.value[_this.element.selectionStart - 2]) !== valArray.lastIndexOf(_this.element.value[_this.element.selectionStart - 2]) && _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) === ignoreKeyCode || _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) !== ignoreKeyCode) && (_this.element.setSelectionRange(prevPos, prevPos), _this.nextEle = _this.element.value[_this.element.selectionStart], _this.cursorPosChanged = !0, _this.preventHandler()), !0 === _this.cursorPosChanged && _this.element.value[_this.element.selectionStart] === _this.nextEle && isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && (_this.element.setSelectionRange(_this.element.selectionStart + 1, _this.element.selectionStart + 1), _this.cursorPosChanged = !1, _this.nextEle = null), '' === _this.element.value.trim() && _this.element.setSelectionRange(0, 0), _this.element.selectionStart > 0 && (45 === _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) && _this.element.selectionStart > 1 && ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(_this.prevVal) ? // eslint-disable-next-line no-self-assign
                            _this.element.value = _this.element.value : _this.element.value = _this.prevVal, _this.element.setSelectionRange(_this.element.selectionStart, _this.element.selectionStart)), _this.element.value[_this.element.selectionStart - 1] === decimalSeparator && 0 === _this.decimals && _this.validateDecimalOnType && (_this.element.value = _this.element.value.substring(0, prevPos) + _this.element.value.substring(currentPos, _this.element.value.length))), _this.prevVal = _this.element.value;
                        }
                    });
                }, NumericTextBox.prototype.keyUpHandler = function() {
                    if (this.enabled && !this.readonly) {
                        !(navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform)) && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice && this.preventHandler();
                        var parseValue = this.instance.getNumberParser({
                            format: 'n'
                        })(this.element.value);
                        if (parseValue = null === parseValue || isNaN(parseValue) ? null : parseValue, this.hiddenInput.value = parseValue || 0 === parseValue ? parseValue.toString() : null, (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(this.element, 'form')) {
                            var element = this.element.nextElementSibling, keyupEvent = document.createEvent('KeyboardEvent');
                            keyupEvent.initEvent('keyup', !1, !0), element.dispatchEvent(keyupEvent);
                        }
                    }
                }, NumericTextBox.prototype.inputHandler = function(event) {
                    if (this.enabled && !this.readonly) {
                        var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
                        /* istanbul ignore next */ if ((navigator.userAgent.toLowerCase().indexOf('firefox') > -1 || iOS) && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice && this.preventHandler(), this.isAngular && this.element.value !== (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getValue */ .NA)('decimal', (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getNumericObject */ .NE)(this.locale)) && this.element.value !== (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getValue */ .NA)('minusSign', (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getNumericObject */ .NE)(this.locale))) {
                            var parsedValue = this.instance.getNumberParser({
                                format: 'n'
                            })(this.element.value);
                            parsedValue = isNaN(parsedValue) ? null : parsedValue, this.localChange({
                                value: parsedValue
                            }), this.preventChange = !0;
                        }
                        if (this.isVue) {
                            var current = this.instance.getNumberParser({
                                format: 'n'
                            })(this.element.value), previous = this.instance.getNumberParser({
                                format: 'n'
                            })(this.elementPrevValue);
                            RegExp('[^1-9]+$').test(this.element.value) && (current = this.value);
                            var eventArgs = {
                                event: event,
                                value: null === current || isNaN(current) ? null : current,
                                previousValue: null === previous || isNaN(previous) ? null : previous
                            };
                            this.preventChange = !0, this.elementPrevValue = this.element.value, this.trigger('input', eventArgs);
                        }
                    }
                }, NumericTextBox.prototype.keyDownHandler = function(event) {
                    if (!this.readonly) switch(event.keyCode){
                        case 38:
                            event.preventDefault(), this.action(INCREMENT, event);
                            break;
                        case 40:
                            event.preventDefault(), this.action(DECREMENT, event);
                    }
                }, NumericTextBox.prototype.performAction = function(value, step, operation) {
                    (null === value || isNaN(value)) && (value = 0);
                    var updatedValue = operation === INCREMENT ? value + step : value - step;
                    return updatedValue = this.correctRounding(value, step, updatedValue), this.strictMode ? this.trimValue(updatedValue) : updatedValue;
                }, NumericTextBox.prototype.correctRounding = function(value, step, result) {
                    var floatExp = RegExp('[,.](.*)'), floatValue = floatExp.test(value.toString()), floatStep = floatExp.test(step.toString());
                    if (floatValue || floatStep) {
                        var max = Math.max(floatValue ? floatExp.exec(value.toString())[0].length : 0, floatStep ? floatExp.exec(step.toString())[0].length : 0);
                        return value = this.roundValue(result, max);
                    }
                    return result;
                }, NumericTextBox.prototype.roundValue = function(result, precision) {
                    var divide = Math.pow(10, precision = precision || 0);
                    return result *= divide, result = Math.round(result) / divide;
                }, NumericTextBox.prototype.updateValue = function(value, event) {
                    event && (this.isInteract = !0), null !== value && !isNaN(value) && this.decimals && (value = this.roundNumber(value, this.decimals)), this.changeValue(null === value || isNaN(value) ? null : this.strictMode ? this.trimValue(value) : value), this.isDynamicChange || this.raiseChangeEvent(event);
                }, NumericTextBox.prototype.updateCurrency = function(prop, propVal) {
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setValue */ .sO)(prop, propVal, this.cultureInfo), this.updateValue(this.value);
                }, NumericTextBox.prototype.changeValue = function(value) {
                    if (value || 0 === value) {
                        var numberOfDecimals = this.getNumberOfDecimals(value);
                        this.setProperties({
                            value: this.roundNumber(value, numberOfDecimals)
                        }, !0);
                    } else value = null, this.setProperties({
                        value: value
                    }, !0);
                    this.modifyText(), this.strictMode || this.validateState();
                }, NumericTextBox.prototype.modifyText = function() {
                    if (this.value || 0 === this.value) {
                        var value = this.formatNumber(), elementValue = this.isFocused ? value : this.instance.getNumberFormat(this.cultureInfo)(this.value);
                        this.setElementValue(elementValue), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(this.element, {
                            'aria-valuenow': value
                        }), this.hiddenInput.value = this.value.toString(), null !== this.value && this.serverDecimalSeparator && (this.hiddenInput.value = this.hiddenInput.value.replace('.', this.serverDecimalSeparator));
                    } else this.setElementValue(''), this.element.removeAttribute('aria-valuenow'), this.hiddenInput.value = null;
                }, NumericTextBox.prototype.setElementValue = function(val, element) {
                    _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.setValue */ .I.setValue(val, element || this.element, this.floatLabelType, this.showClearButton);
                }, NumericTextBox.prototype.validateState = function() {
                    this.isValidState = !0, (this.value || 0 === this.value) && (this.isValidState = !(this.value > this.max || this.value < this.min)), this.checkErrorClass();
                }, NumericTextBox.prototype.getNumberOfDecimals = function(value) {
                    // eslint-disable-next-line no-useless-escape
                    var numberOfDecimals, EXPREGEXP = RegExp('[eE][\-+]?([0-9]+)'), valueString = value.toString();
                    if (EXPREGEXP.test(valueString)) {
                        var result = EXPREGEXP.exec(valueString);
                        (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(result) || (valueString = value.toFixed(Math.min(parseInt(result[1], 10), 20)));
                    }
                    var decimalPart = valueString.split('.')[1];
                    return numberOfDecimals = decimalPart && decimalPart.length ? decimalPart.length : 0, null !== this.decimals && (numberOfDecimals = numberOfDecimals < this.decimals ? numberOfDecimals : this.decimals), numberOfDecimals;
                }, NumericTextBox.prototype.formatNumber = function() {
                    var numberOfDecimals = this.getNumberOfDecimals(this.value);
                    return this.instance.getNumberFormat({
                        maximumFractionDigits: numberOfDecimals,
                        minimumFractionDigits: numberOfDecimals,
                        useGrouping: !1
                    })(this.value);
                }, NumericTextBox.prototype.trimValue = function(value) {
                    return value > this.max ? this.max : value < this.min ? this.min : value;
                }, NumericTextBox.prototype.roundNumber = function(value, precision) {
                    var result = value, decimals = precision || 0, result1 = result.toString().split('e'), result2 = (result = Math.round(Number(result1[0] + 'e' + (result1[1] ? Number(result1[1]) + decimals : decimals)))).toString().split('e');
                    return Number((result = Number(result2[0] + 'e' + (result2[1] ? Number(result2[1]) - decimals : -decimals))).toFixed(decimals));
                }, NumericTextBox.prototype.cancelEvent = function(event) {
                    return event.preventDefault(), !1;
                }, NumericTextBox.prototype.keyPressHandler = function(event) {
                    if (!this.enabled || this.readonly) return !0;
                    if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice && '11.0' === _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.info.version */ .AR.info.version && 13 === event.keyCode) {
                        var parsedInput = this.instance.getNumberParser({
                            format: 'n'
                        })(this.element.value);
                        return this.updateValue(parsedInput, event), !0;
                    }
                    if (0 === event.which || event.metaKey || event.ctrlKey || 8 === event.keyCode || 13 === event.keyCode) return !0;
                    var currentChar = String.fromCharCode(event.which), decimalSeparator = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getValue */ .NA)('decimal', (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getNumericObject */ .NE)(this.locale)), isAlterNumPadDecimalChar = "NumpadDecimal" === event.code && currentChar !== decimalSeparator;
                    isAlterNumPadDecimalChar && (currentChar = decimalSeparator);
                    var text = this.element.value;
                    if (text = text.substring(0, this.element.selectionStart) + currentChar + text.substring(this.element.selectionEnd), !this.numericRegex().test(text)) return event.preventDefault(), event.stopPropagation(), !1;
                    //EJ2-59813-update the numberpad decimal separator and update the cursor position
                    if (isAlterNumPadDecimalChar) {
                        var start = this.element.selectionStart + 1;
                        this.element.value = text, this.element.setSelectionRange(start, start), event.preventDefault(), event.stopPropagation();
                    }
                    return !0;
                }, NumericTextBox.prototype.numericRegex = function() {
                    var numericObject = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getNumericObject */ .NE)(this.locale), decimalSeparator = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getValue */ .NA)('decimal', numericObject), fractionRule = '*';
                    return ('.' === decimalSeparator && (decimalSeparator = '\\' + decimalSeparator), 0 === this.decimals && this.validateDecimalOnType) ? INTREGEXP : (this.decimals && this.validateDecimalOnType && (fractionRule = '{0,' + this.decimals + '}'), RegExp('^(-)?(((\\d+(' + decimalSeparator + '\\d' + fractionRule + ')?)|(' + decimalSeparator + '\\d' + fractionRule + ')))?$'));
                }, NumericTextBox.prototype.mouseWheel = function(event) {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    var delta;
                    event.preventDefault(), event.wheelDelta ? delta = event.wheelDelta / 120 : event.detail && (delta = -event.detail / 3), delta > 0 ? this.action(INCREMENT, event) : delta < 0 && this.action(DECREMENT, event), this.cancelEvent(event);
                }, NumericTextBox.prototype.focusHandler = function(event) {
                    var _this = this;
                    if (this.focusEventArgs = {
                        event: event,
                        value: this.value,
                        container: this.container
                    }, this.trigger('focus', this.focusEventArgs), this.enabled && !this.readonly) {
                        if (this.isFocused = !0, (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                            this.container
                        ], ERROR), this.prevValue = this.value, this.value || 0 === this.value) {
                            var formatValue_1 = this.formatNumber();
                            this.setElementValue(formatValue_1), this.isPrevFocused || (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice || '11.0' !== _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.info.version */ .AR.info.version ? setTimeout(function() {
                                _this.element.setSelectionRange(0, formatValue_1.length);
                            }, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isIos */ .AR.isIos ? 600 : 0) : this.element.setSelectionRange(0, formatValue_1.length));
                        }
                        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel, this);
                    }
                }, NumericTextBox.prototype.focusOutHandler = function(event) {
                    var _this = this;
                    if (this.blurEventArgs = {
                        event: event,
                        value: this.value,
                        container: this.container
                    }, this.trigger('blur', this.blurEventArgs), this.enabled && !this.readonly) {
                        if (this.isPrevFocused) {
                            if (event.preventDefault(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice) {
                                var value_1 = this.element.value;
                                this.element.focus(), this.isPrevFocused = !1;
                                var ele_1 = this.element;
                                setTimeout(function() {
                                    _this.setElementValue(value_1, ele_1);
                                }, 200);
                            }
                        } else {
                            this.isFocused = !1, this.element.value.length || this.setProperties({
                                value: null
                            }, !0);
                            var parsedInput = this.instance.getNumberParser({
                                format: 'n'
                            })(this.element.value);
                            this.updateValue(parsedInput), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel);
                        }
                        if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(this.element, 'form')) {
                            var element = this.element.nextElementSibling, focusEvent = document.createEvent('FocusEvent');
                            focusEvent.initEvent('focusout', !1, !0), element.dispatchEvent(focusEvent);
                        }
                    }
                }, NumericTextBox.prototype.mouseDownOnSpinner = function(event) {
                    var _this = this;
                    if (this.isFocused && (this.isPrevFocused = !0, event.preventDefault()), this.getElementData(event)) {
                        this.getElementData(event);
                        var target = event.currentTarget, action = target.classList.contains(SPINUP) ? INCREMENT : DECREMENT;
                        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(target, 'mouseleave', this.mouseUpClick, this), this.timeOut = setInterval(function() {
                            _this.isCalled = !0, _this.action(action, event);
                        }, 150), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(document, 'mouseup', this.mouseUpClick, this);
                    }
                }, NumericTextBox.prototype.touchMoveOnSpinner = function(event) {
                    var target;
                    if ("touchmove" === event.type) {
                        var touchEvent = event.touches;
                        target = touchEvent.length && document.elementFromPoint(touchEvent[0].pageX, touchEvent[0].pageY);
                    } else target = document.elementFromPoint(event.clientX, event.clientY);
                    target.classList.contains(SPINICON) || clearInterval(this.timeOut);
                }, NumericTextBox.prototype.mouseUpOnSpinner = function(event) {
                    if (this.prevValue = this.value, this.isPrevFocused && (this.element.focus(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice || (this.isPrevFocused = !1)), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice || event.preventDefault(), this.getElementData(event)) {
                        var target = event.currentTarget, action = target.classList.contains(SPINUP) ? INCREMENT : DECREMENT;
                        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(target, 'mouseleave', this.mouseUpClick), this.isCalled || this.action(action, event), this.isCalled = !1, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(document, 'mouseup', this.mouseUpClick), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(this.element, 'form')) {
                            var element = this.element.nextElementSibling, keyupEvent = document.createEvent('KeyboardEvent');
                            keyupEvent.initEvent('keyup', !1, !0), element.dispatchEvent(keyupEvent);
                        }
                    }
                }, NumericTextBox.prototype.getElementData = function(event) {
                    return (!event.which || 3 !== event.which) && (!event.button || 2 !== event.button) && !!this.enabled && !this.readonly && (clearInterval(this.timeOut), !0);
                }, NumericTextBox.prototype.floatLabelTypeUpdate = function() {
                    _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.removeFloating */ .I.removeFloating(this.inputWrapper);
                    var hiddenInput = this.hiddenInput;
                    this.hiddenInput.remove(), _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.addFloating */ .I.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement), this.container.insertBefore(hiddenInput, this.container.childNodes[1]);
                }, NumericTextBox.prototype.mouseUpClick = function(event) {
                    event.stopPropagation(), clearInterval(this.timeOut), this.isCalled = !1, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.spinUp, 'mouseleave', this.mouseUpClick), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.spinDown, 'mouseleave', this.mouseUpClick);
                }, /**
     * Increments the NumericTextBox value with the specified step value.
     *
     * @param {number} step - Specifies the value used to increment the NumericTextBox value.
     * if its not given then numeric value will be incremented based on the step property value.
     * @returns {void}
     */ NumericTextBox.prototype.increment = function(step) {
                    void 0 === step && (step = this.step), this.isInteract = !1, this.changeValue(this.performAction(this.value, step, INCREMENT)), this.raiseChangeEvent();
                }, /**
     * Decrements the NumericTextBox value with specified step value.
     *
     * @param {number} step - Specifies the value used to decrement the NumericTextBox value.
     * if its not given then numeric value will be decremented based on the step property value.
     * @returns {void}
     */ NumericTextBox.prototype.decrement = function(step) {
                    void 0 === step && (step = this.step), this.isInteract = !1, this.changeValue(this.performAction(this.value, step, DECREMENT)), this.raiseChangeEvent();
                }, /**
     * Removes the component from the DOM and detaches all its related event handlers.
     * Also it maintains the initial input element from the DOM.
     *
     * @method destroy
     * @returns {void}
     */ NumericTextBox.prototype.destroy = function() {
                    this.unwireEvents(), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(this.hiddenInput), this.showSpinButton && (this.unwireSpinBtnEvents(), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(this.spinUp), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(this.spinDown));
                    for(var attrArray = [
                        'aria-labelledby',
                        'role',
                        'autocomplete',
                        'aria-readonly',
                        'autocorrect',
                        'aria-disabled',
                        'aria-placeholder',
                        'autocapitalize',
                        'spellcheck',
                        'aria-autocomplete',
                        'tabindex',
                        'aria-valuemin',
                        'aria-valuemax',
                        'aria-live',
                        'aria-valuenow',
                        'aria-invalid'
                    ], i = 0; i < attrArray.length; i++)this.element.removeAttribute(attrArray[i]);
                    this.element.classList.remove('e-input'), this.container.insertAdjacentElement('afterend', this.element), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(this.container), _super.prototype.destroy.call(this);
                }, /* eslint-disable valid-jsdoc, jsdoc/require-returns */ /**
     * Returns the value of NumericTextBox with the format applied to the NumericTextBox.
     *
     */ NumericTextBox.prototype.getText = function() {
                    return this.element.value;
                }, /* eslint-enable valid-jsdoc, jsdoc/require-returns */ /**
     * Sets the focus to widget for interaction.
     *
     * @returns {void}
     */ NumericTextBox.prototype.focusIn = function() {
                    document.activeElement !== this.element && this.enabled && (this.element.focus(), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        this.container
                    ], [
                        NUMERIC_FOCUS
                    ]));
                }, /**
     * Remove the focus from widget, if the widget is in focus state.
     *
     * @returns {void}
     */ NumericTextBox.prototype.focusOut = function() {
                    document.activeElement === this.element && this.enabled && (this.element.blur(), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        this.container
                    ], [
                        NUMERIC_FOCUS
                    ]));
                }, /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */ /**
     * Gets the properties to be maintained in the persisted state.
     *
     * @returns {string}
     */ NumericTextBox.prototype.getPersistData = function() {
                    return this.addOnPersist([
                        'value'
                    ]);
                }, /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */ /**
     * Calls internally if any of the property value is changed.
     *
     * @param {NumericTextBoxModel} newProp - Returns the dynamic property value of the component.
     * @param {NumericTextBoxModel} oldProp - Returns the previous property value of the component.
     * @returns {void}
     * @private
     */ NumericTextBox.prototype.onPropertyChanged = function(newProp, oldProp) {
                    for(var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++){
                        var prop = _a[_i];
                        switch(prop){
                            case 'width':
                                this.setElementWidth(newProp.width), _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.calculateWidth */ .I.calculateWidth(this.element, this.container);
                                break;
                            case 'cssClass':
                                this.updateCssClass(newProp.cssClass, oldProp.cssClass);
                                break;
                            case 'enabled':
                                _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.setEnabled */ .I.setEnabled(newProp.enabled, this.element);
                                break;
                            case 'enableRtl':
                                _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.setEnableRtl */ .I.setEnableRtl(newProp.enableRtl, [
                                    this.container
                                ]);
                                break;
                            case 'readonly':
                                _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.setReadonly */ .I.setReadonly(newProp.readonly, this.element), this.readonly ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .attributes */ .Y4)(this.element, {
                                    'aria-readonly': 'true'
                                }) : this.element.removeAttribute('aria-readonly');
                                break;
                            case 'htmlAttributes':
                                this.updateHTMLAttrToElement(), this.updateHTMLAttrToWrapper(), this.updateDataAttribute(!0), this.checkAttributes(!0), _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.validateInputType */ .I.validateInputType(this.container, this.element);
                                break;
                            case 'placeholder':
                                _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.setPlaceholder */ .I.setPlaceholder(newProp.placeholder, this.element), _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.calculateWidth */ .I.calculateWidth(this.element, this.container);
                                break;
                            case 'step':
                                this.step = newProp.step, this.validateStep();
                                break;
                            case 'showSpinButton':
                                this.updateSpinButton(newProp);
                                break;
                            case 'showClearButton':
                                this.updateClearButton(newProp);
                                break;
                            case 'floatLabelType':
                                this.floatLabelType = newProp.floatLabelType, this.floatLabelTypeUpdate();
                                break;
                            case 'value':
                                this.isDynamicChange = (this.isAngular || this.isVue) && this.preventChange, this.updateValue(newProp.value), this.isDynamicChange && (this.preventChange = !1, this.isDynamicChange = !1);
                                break;
                            case 'min':
                            case 'max':
                                (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setValue */ .sO)(prop, (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getValue */ .NA)(prop, newProp), this), this.validateMinMax(), this.updateValue(this.value);
                                break;
                            case 'strictMode':
                                this.strictMode = newProp.strictMode, this.updateValue(this.value), this.validateState();
                                break;
                            case 'locale':
                                this.initCultureFunc(), this.l10n.setLocale(this.locale), this.setSpinButton(), this.updatePlaceholder(), _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.setPlaceholder */ .I.setPlaceholder(this.placeholder, this.element), this.updateValue(this.value);
                                break;
                            case 'currency':
                                var propVal = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getValue */ .NA)(prop, newProp);
                                this.setProperties({
                                    currencyCode: propVal
                                }, !0), this.updateCurrency(prop, propVal);
                                break;
                            case 'currencyCode':
                                var propValue = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getValue */ .NA)(prop, newProp);
                                this.setProperties({
                                    currency: propValue
                                }, !0), this.updateCurrency('currency', propValue);
                                break;
                            case 'format':
                                (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setValue */ .sO)(prop, (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getValue */ .NA)(prop, newProp), this), this.initCultureInfo(), this.updateValue(this.value);
                                break;
                            case 'decimals':
                                this.decimals = newProp.decimals, this.updateValue(this.value);
                        }
                    }
                }, NumericTextBox.prototype.updateClearButton = function(newProp) {
                    _input_input__WEBPACK_IMPORTED_MODULE_1__ /* .Input.setClearButton */ .I.setClearButton(newProp.showClearButton, this.element, this.inputWrapper, void 0, this.createElement), this.bindClearEvent();
                }, NumericTextBox.prototype.updateSpinButton = function(newProp) {
                    newProp.showSpinButton ? this.spinBtnCreation() : ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(this.spinUp), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(this.spinDown));
                }, /**
     * Gets the component name
     *
     * @returns {string} Returns the component name.
     * @private
     */ NumericTextBox.prototype.getModuleName = function() {
                    return 'numerictextbox';
                }, __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)('')
                ], NumericTextBox.prototype, "cssClass", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(null)
                ], NumericTextBox.prototype, "value", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(-Number.MAX_VALUE)
                ], NumericTextBox.prototype, "min", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(Number.MAX_VALUE)
                ], NumericTextBox.prototype, "max", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(1)
                ], NumericTextBox.prototype, "step", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(null)
                ], NumericTextBox.prototype, "width", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(null)
                ], NumericTextBox.prototype, "placeholder", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)({})
                ], NumericTextBox.prototype, "htmlAttributes", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(!0)
                ], NumericTextBox.prototype, "showSpinButton", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(!1)
                ], NumericTextBox.prototype, "readonly", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(!0)
                ], NumericTextBox.prototype, "enabled", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(!1)
                ], NumericTextBox.prototype, "showClearButton", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(!1)
                ], NumericTextBox.prototype, "enablePersistence", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)('n2')
                ], NumericTextBox.prototype, "format", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(null)
                ], NumericTextBox.prototype, "decimals", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(null)
                ], NumericTextBox.prototype, "currency", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(null)
                ], NumericTextBox.prototype, "currencyCode", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(!0)
                ], NumericTextBox.prototype, "strictMode", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(!1)
                ], NumericTextBox.prototype, "validateDecimalOnType", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)('Never')
                ], NumericTextBox.prototype, "floatLabelType", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Event */ .ju)()
                ], NumericTextBox.prototype, "created", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Event */ .ju)()
                ], NumericTextBox.prototype, "destroyed", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Event */ .ju)()
                ], NumericTextBox.prototype, "change", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Event */ .ju)()
                ], NumericTextBox.prototype, "focus", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Event */ .ju)()
                ], NumericTextBox.prototype, "blur", void 0), NumericTextBox = __decorate([
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .NotifyPropertyChanges */ .Zl
                ], NumericTextBox);
            }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Component */ .wA);
        /***/ },
        /***/ 4895: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ RR: function() {
                    return /* binding */ flip;
                },
                /* harmony export */ Tj: function() {
                    return /* binding */ fit;
                },
                /* harmony export */ vF: function() {
                    return /* binding */ isCollide;
                }
            });
            /* harmony import */ var parentDocument, targetContainer, _position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6216), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1807);
            /**
 *
 * @param {HTMLElement} element - specifies the element
 * @param {HTMLElement} viewPortElement - specifies the element
 * @param {CollisionCoordinates} axis - specifies the collision coordinates
 * @param {OffsetPosition} position - specifies the position
 * @returns {void}
 */ function fit(element, viewPortElement, axis, position) {
                if (void 0 === viewPortElement && (viewPortElement = null), void 0 === axis && (axis = {
                    X: !1,
                    Y: !1
                }), !axis.Y && !axis.X) return {
                    left: 0,
                    top: 0
                };
                var elemData = element.getBoundingClientRect();
                if (targetContainer = viewPortElement, parentDocument = element.ownerDocument, position || (position = (0, _position__WEBPACK_IMPORTED_MODULE_1__ /* .calculatePosition */ .k)(element, 'left', 'top')), axis.X) {
                    var containerWidth = targetContainer ? getTargetContainerWidth() : getViewPortWidth(), containerLeft = ContainerLeft(), containerRight = ContainerRight(), overLeft = containerLeft - position.left, overRight = position.left + elemData.width - containerRight;
                    elemData.width > containerWidth ? overLeft > 0 && overRight <= 0 ? position.left = containerRight - elemData.width : overRight > 0 && overLeft <= 0 ? position.left = containerLeft : position.left = overLeft > overRight ? containerRight - elemData.width : containerLeft : overLeft > 0 ? position.left += overLeft : overRight > 0 && (position.left -= overRight);
                }
                if (axis.Y) {
                    var containerHeight = targetContainer ? getTargetContainerHeight() : getViewPortHeight(), containerTop = ContainerTop(), containerBottom = ContainerBottom(), overTop = containerTop - position.top, overBottom = position.top + elemData.height - containerBottom;
                    elemData.height > containerHeight ? overTop > 0 && overBottom <= 0 ? position.top = containerBottom - elemData.height : overBottom > 0 && overTop <= 0 ? position.top = containerTop : position.top = overTop > overBottom ? containerBottom - elemData.height : containerTop : overTop > 0 ? position.top += overTop : overBottom > 0 && (position.top -= overBottom);
                }
                return position;
            }
            /**
 *
 * @param {HTMLElement} element - specifies the html element
 * @param {HTMLElement} viewPortElement - specifies the html element
 * @param {number} x - specifies the number
 * @param {number} y - specifies the number
 * @returns {string[]} - returns the string value
 */ function isCollide(element, viewPortElement, x, y) {
                void 0 === viewPortElement && (viewPortElement = null);
                var elemOffset = (0, _position__WEBPACK_IMPORTED_MODULE_1__ /* .calculatePosition */ .k)(element, 'left', 'top');
                x && (elemOffset.left = x), y && (elemOffset.top = y);
                var data = [];
                targetContainer = viewPortElement, parentDocument = element.ownerDocument;
                var elementRect = element.getBoundingClientRect(), top1 = elemOffset.top, left = elemOffset.left, right = elemOffset.left + elementRect.width, yAxis = topCollideCheck(top1, elemOffset.top + elementRect.height), xAxis = leftCollideCheck(left, right);
                return yAxis.topSide && data.push('top'), xAxis.rightSide && data.push('right'), xAxis.leftSide && data.push('left'), yAxis.bottomSide && data.push('bottom'), data;
            }
            /**
 *
 * @param {HTMLElement} element - specifies the element
 * @param {HTMLElement} target - specifies the element
 * @param {number} offsetX - specifies the number
 * @param {number} offsetY - specifies the number
 * @param {string} positionX - specifies the string value
 * @param {string} positionY - specifies the string value
 * @param {HTMLElement} viewPortElement - specifies the element
 * @param {CollisionCoordinates} axis - specifies the collision axis
 * @param {boolean} fixedParent - specifies the boolean
 * @returns {void}
 */ function flip(element, target, offsetX, offsetY, positionX, positionY, viewPortElement, /* eslint-disable */ axis, fixedParent) {
                if (void 0 === viewPortElement && (viewPortElement = null), void 0 === axis && (axis = {
                    X: !0,
                    Y: !0
                }), target && element && positionX && positionY && (axis.X || axis.Y)) {
                    // eslint-disable-next-line
                    var elementRect, elementRect1, tEdge = {
                        TL: null,
                        TR: null,
                        BL: null,
                        BR: null
                    }, eEdge = {
                        TL: null,
                        TR: null,
                        BL: null,
                        BR: null
                    };
                    if ('none' === window.getComputedStyle(element).display) {
                        var oldVisibility = element.style.visibility;
                        element.style.visibility = 'hidden', element.style.display = 'block', elementRect1 = element.getBoundingClientRect(), element.style.removeProperty('display'), element.style.visibility = oldVisibility;
                    } else elementRect1 = element.getBoundingClientRect();
                    var pos = {
                        posX: positionX,
                        posY: positionY,
                        offsetX: offsetX,
                        offsetY: offsetY,
                        position: {
                            left: 0,
                            top: 0
                        }
                    };
                    targetContainer = viewPortElement, parentDocument = target.ownerDocument, elementRect = elementRect1, pos.position = (0, _position__WEBPACK_IMPORTED_MODULE_1__ /* .calculatePosition */ .k)(target, pos.posX, pos.posY, fixedParent, elementRect), tEdge.TL = (0, _position__WEBPACK_IMPORTED_MODULE_1__ /* .calculatePosition */ .k)(target, 'left', 'top', fixedParent, elementRect), tEdge.TR = (0, _position__WEBPACK_IMPORTED_MODULE_1__ /* .calculatePosition */ .k)(target, 'right', 'top', fixedParent, elementRect), tEdge.BR = (0, _position__WEBPACK_IMPORTED_MODULE_1__ /* .calculatePosition */ .k)(target, 'left', 'bottom', fixedParent, elementRect), tEdge.BL = (0, _position__WEBPACK_IMPORTED_MODULE_1__ /* .calculatePosition */ .k)(target, 'right', 'bottom', fixedParent, elementRect), setPosition(eEdge, pos, elementRect1), axis.X && /**
 *
 * @param {HTMLElement} target - specifies the element
 * @param {EdgeOffset} edge - specifes the element
 * @param {EdgeOffset} tEdge - specifies the edge offset
 * @param {PositionLocation} pos - specifes the location
 * @param {ClientRect} elementRect - specifies the client
 * @param {boolean} deepCheck - specifies the boolean value
 * @returns {void}
 */ function leftFlip(target, edge, tEdge, pos, elementRect, deepCheck) {
                        var collideSide = leftCollideCheck(edge.TL.left, edge.TR.left);
                        tEdge.TL.left - getBodyScrollLeft() <= ContainerLeft() && (collideSide.leftSide = !1), tEdge.TR.left > ContainerRight() && (collideSide.rightSide = !1), (collideSide.leftSide && !collideSide.rightSide || !collideSide.leftSide && collideSide.rightSide) && ('right' === pos.posX ? pos.posX = 'left' : pos.posX = 'right', pos.offsetX = pos.offsetX + elementRect.width, pos.offsetX = -1 * pos.offsetX, pos.position = (0, _position__WEBPACK_IMPORTED_MODULE_1__ /* .calculatePosition */ .k)(target, pos.posX, pos.posY, !1), setPosition(edge, pos, elementRect), deepCheck && leftFlip(target, edge, tEdge, pos, elementRect, !1));
                    }(target, eEdge, tEdge, pos, elementRect1, !0), axis.Y && tEdge.TL.top > -1 && /**
 *
 * @param {HTMLElement} target - specifies the element
 * @param {EdgeOffset} edge - specifies the offset
 * @param {EdgeOffset} tEdge - specifies the offset
 * @param {PositionLocation} pos - specifies the location
 * @param {ClientRect} elementRect - specifies the client rect
 * @param {boolean} deepCheck - specifies the boolean
 * @returns {void}
 */ function topFlip(target, edge, tEdge, pos, elementRect, deepCheck) {
                        var collideSide = topCollideCheck(edge.TL.top, edge.BL.top);
                        tEdge.TL.top - getBodyScrollTop() <= ContainerTop() && (collideSide.topSide = !1), tEdge.BL.top >= ContainerBottom() && target.getBoundingClientRect().bottom < window.innerHeight && (collideSide.bottomSide = !1), (collideSide.topSide && !collideSide.bottomSide || !collideSide.topSide && collideSide.bottomSide) && ('top' === pos.posY ? pos.posY = 'bottom' : pos.posY = 'top', pos.offsetY = pos.offsetY + elementRect.height, pos.offsetY = -1 * pos.offsetY, pos.position = (0, _position__WEBPACK_IMPORTED_MODULE_1__ /* .calculatePosition */ .k)(target, pos.posX, pos.posY, !1, elementRect), setPosition(edge, pos, elementRect), deepCheck && topFlip(target, edge, tEdge, pos, elementRect, !1));
                    }(target, eEdge, tEdge, pos, elementRect1, !0), /**
 *
 * @param {HTMLElement} element - specifies the element
 * @param {PositionLocation} pos - specifies the location
 * @param {ClientRect} elementRect - specifies the client rect
 * @returns {void}
 */ function(element, pos, elementRect) {
                        //eslint-disable-next-line
                        var left = 0, top1 = 0;
                        if (null != element.offsetParent && ('absolute' === getComputedStyle(element.offsetParent).position || 'relative' === getComputedStyle(element.offsetParent).position)) {
                            var data = (0, _position__WEBPACK_IMPORTED_MODULE_1__ /* .calculatePosition */ .k)(element.offsetParent, 'left', 'top', !1, elementRect);
                            left = data.left, top1 = data.top;
                        }
                        element.style.top = pos.position.top + pos.offsetY - top1 + 'px', element.style.left = pos.position.left + pos.offsetX - left + 'px';
                    }(element, pos, elementRect1);
                }
            }
            /**
 *
 * @param {EdgeOffset} eStatus - specifies the status
 * @param {PositionLocation} pos - specifies the location
 * @param {ClientRect} elementRect - specifies the client
 * @returns {void}
 */ function setPosition(eStatus, pos, elementRect) {
                eStatus.TL = {
                    top: pos.position.top + pos.offsetY,
                    left: pos.position.left + pos.offsetX
                }, eStatus.TR = {
                    top: eStatus.TL.top,
                    left: eStatus.TL.left + elementRect.width
                }, eStatus.BL = {
                    top: eStatus.TL.top + elementRect.height,
                    left: eStatus.TL.left
                }, eStatus.BR = {
                    top: eStatus.TL.top + elementRect.height,
                    left: eStatus.TL.left + elementRect.width
                };
            }
            /**
 *
 * @param {number} left - specifies the  number
 * @param {number} right - specifies the number
 * @returns {LeftCorners} - returns the value
 */ function leftCollideCheck(left, right) {
                //eslint-disable-next-line
                var leftSide = !1, rightSide = !1;
                return left - getBodyScrollLeft() < ContainerLeft() && (leftSide = !0), right > ContainerRight() && (rightSide = !0), {
                    leftSide: leftSide,
                    rightSide: rightSide
                };
            }
            /**
 *
 * @param {number} top - specifies the number
 * @param {number} bottom - specifies the number
 * @returns {TopCorners} - retyrns the value
 */ function topCollideCheck(top1, bottom) {
                //eslint-disable-next-line
                var topSide = !1, bottomSide = !1;
                return top1 - getBodyScrollTop() < ContainerTop() && (topSide = !0), bottom > ContainerBottom() && (bottomSide = !0), {
                    topSide: topSide,
                    bottomSide: bottomSide
                };
            }
            /**
 * @returns {void}
 */ function getTargetContainerWidth() {
                return targetContainer.getBoundingClientRect().width;
            }
            /**
 * @returns {void}
 */ function getTargetContainerHeight() {
                return targetContainer.getBoundingClientRect().height;
            }
            /**
 * @returns {void}
 */ function getTargetContainerLeft() {
                return targetContainer.getBoundingClientRect().left;
            }
            /**
 * @returns {void}
 */ function getTargetContainerTop() {
                return targetContainer.getBoundingClientRect().top;
            }
            //eslint-disable-next-line
            function ContainerTop() {
                return targetContainer ? getTargetContainerTop() : 0;
            }
            //eslint-disable-next-line
            function ContainerLeft() {
                return targetContainer ? getTargetContainerLeft() : 0;
            }
            //eslint-disable-next-line
            function ContainerRight() {
                return targetContainer ? getBodyScrollLeft() + getTargetContainerLeft() + getTargetContainerWidth() : getBodyScrollLeft() + getViewPortWidth();
            }
            //eslint-disable-next-line
            function ContainerBottom() {
                return targetContainer ? getBodyScrollTop() + getTargetContainerTop() + getTargetContainerHeight() : getBodyScrollTop() + getViewPortHeight();
            }
            /**
 * @returns {void}
 */ function getBodyScrollTop() {
                // if(targetContainer)
                //     return targetContainer.scrollTop;
                return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;
            }
            /**
 * @returns {void}
 */ function getBodyScrollLeft() {
                // if(targetContainer)
                //     return targetContainer.scrollLeft;
                return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;
            }
            /**
 * @returns {void}
 */ function getViewPortHeight() {
                return window.innerHeight;
            }
            /**
 * @returns {void}
 */ function getViewPortWidth() {
                var windowWidth = window.innerWidth, documentReact = document.documentElement.getBoundingClientRect();
                return windowWidth - (windowWidth - ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(document.documentElement) ? 0 : documentReact.width));
            }
        /***/ },
        /***/ 6216: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ O: function() {
                    return /* binding */ calculateRelativeBasedPosition;
                },
                /* harmony export */ k: function() {
                    return /* binding */ calculatePosition;
                }
            });
            /* harmony import */ var elementRect, popupRect, element, parentDocument, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1807), fixedParent = !1;
            /**
 *
 * @param {HTMLElement} anchor - specifies the element
 * @param {HTMLElement} element - specifies the element
 * @returns {OffsetPosition} - returns the value
 */ function calculateRelativeBasedPosition(anchor, element) {
                var fixedElement = !1, anchorPos = {
                    left: 0,
                    top: 0
                }, tempAnchor = anchor;
                if (!anchor || !element) return anchorPos;
                for((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(element.offsetParent) && 'fixed' === element.style.position && (fixedElement = !0); (element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor;)anchorPos.left += anchor.offsetLeft, anchorPos.top += anchor.offsetTop, anchor = anchor.offsetParent;
                for(anchor = tempAnchor; (element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor;)anchorPos.left -= anchor.scrollLeft, anchorPos.top -= anchor.scrollTop, anchor = anchor.parentElement;
                return anchorPos;
            }
            /**
 *
 * @param {Element} currentElement - specifies the element
 * @param {string} positionX - specifies the position
 * @param {string} positionY - specifies the position
 * @param {boolean} parentElement - specifies the boolean
 * @param {ClientRect} targetValues - specifies the client
 * @returns {OffsetPosition} - returns the position
 */ function calculatePosition(currentElement, positionX, positionY, parentElement, targetValues) {
                return (//eslint-disable-next-line
                popupRect = void 0, popupRect = targetValues, fixedParent = !!parentElement, currentElement) ? (positionX || (positionX = 'left'), positionY || (positionY = 'top'), parentDocument = currentElement.ownerDocument, element = currentElement, /**
 *
 * @param {string} posX - specifies the position
 * @param {string} posY - specifies the position
 * @param {OffsetPosition} pos - specifies the position
 * @returns {OffsetPosition} - returns the postion
 */ function(posX, posY, pos) {
                    var value, value1, value2, value3, value4, value5, value6, value7, value8;
                    switch(elementRect = element.getBoundingClientRect(), posY + posX){
                        case 'topcenter':
                            setPosx(getElementHCenter(), pos), value = getElementTop(), pos.top = value;
                            break;
                        case 'topright':
                            setPosx(getElementRight(), pos), value1 = getElementTop(), pos.top = value1;
                            break;
                        case 'centercenter':
                            setPosx(getElementHCenter(), pos), value2 = getElementVCenter(), pos.top = value2;
                            break;
                        case 'centerright':
                            setPosx(getElementRight(), pos), value3 = getElementVCenter(), pos.top = value3;
                            break;
                        case 'centerleft':
                            setPosx(getElementLeft(), pos), value4 = getElementVCenter(), pos.top = value4;
                            break;
                        case 'bottomcenter':
                            setPosx(getElementHCenter(), pos), value5 = getElementBottom(), pos.top = value5;
                            break;
                        case 'bottomright':
                            setPosx(getElementRight(), pos), value6 = getElementBottom(), pos.top = value6;
                            break;
                        case 'bottomleft':
                            setPosx(getElementLeft(), pos), value7 = getElementBottom(), pos.top = value7;
                            break;
                        default:
                            setPosx(getElementLeft(), pos), value8 = getElementTop(), pos.top = value8;
                    }
                    return pos;
                }(positionX.toLowerCase(), positionY.toLowerCase(), {
                    left: 0,
                    top: 0
                })) : {
                    left: 0,
                    top: 0
                };
            }
            /**
 *
 * @param {number} value - specifies the number
 * @param {OffsetPosition} pos - specifies the position
 * @returns {void}
 */ function setPosx(value, pos) {
                pos.left = value;
            }
            /**
 * @returns {number} - specifies the number value
 */ function getBodyScrollTop() {
                return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;
            }
            /**
 * @returns {number} - specifies the number value
 */ function getBodyScrollLeft() {
                return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;
            }
            /**
 * @returns {number} - specifies the number value
 */ function getElementBottom() {
                return fixedParent ? elementRect.bottom : elementRect.bottom + getBodyScrollTop();
            }
            /**
 * @returns {number} - specifies the number value
 */ function getElementVCenter() {
                return getElementTop() + elementRect.height / 2;
            }
            /**
 * @returns {number} - specifies the number value
 */ function getElementTop() {
                return fixedParent ? elementRect.top : elementRect.top + getBodyScrollTop();
            }
            /**
 * @returns {number} - specifies the number value
 */ function getElementLeft() {
                return elementRect.left + getBodyScrollLeft();
            }
            /**
 * @returns {number} - specifies the number value
 */ function getElementRight() {
                var popupWidth = element && element.classList.contains('e-date-range-wrapper') ? popupRect ? popupRect.width : 0 : popupRect && elementRect.width >= popupRect.width ? popupRect.width : 0;
                return elementRect.right + getBodyScrollLeft() - popupWidth;
            }
            /**
 * @returns {number} - specifies the number value
 */ function getElementHCenter() {
                return getElementLeft() + elementRect.width / 2;
            }
        /***/ },
        /***/ 9486: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ GI: function() {
                    return /* binding */ Popup;
                },
                /* harmony export */ Mm: function() {
                    return /* binding */ getScrollableParent;
                },
                /* harmony export */ TE: function() {
                    return /* binding */ getZindexPartial;
                },
                /* harmony export */ WV: function() {
                    return /* binding */ PositionData;
                }
            });
            /* unused harmony export getMaxZindex */ /* harmony import */ var extendStatics, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1807), _common_position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6216), _common_collision__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4895), __extends = (extendStatics = function(d, b) {
                return (extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), __decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, PositionData = /** @class */ function(_super) {
                function PositionData() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return __extends(PositionData, _super), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)('left')
                ], PositionData.prototype, "X", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)('top')
                ], PositionData.prototype, "Y", void 0), PositionData;
            }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .ChildProperty */ .rt), CLASSNAMES = {
                ROOT: 'e-popup',
                RTL: 'e-rtl',
                OPEN: 'e-popup-open',
                CLOSE: 'e-popup-close'
            }, Popup = /** @class */ function(_super) {
                function Popup(element, options) {
                    return _super.call(this, options, element) || this;
                }
                return __extends(Popup, _super), /**
     * Called internally if any of the property value changed.
     *
     * @param {PopupModel} newProp - specifies the new property
     * @param {PopupModel} oldProp - specifies the old property
     * @private
     * @returns {void}
     */ Popup.prototype.onPropertyChanged = function(newProp, oldProp) {
                    for(var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++)switch(_a[_i]){
                        case 'width':
                            (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setStyleAttribute */ .V7)(this.element, {
                                width: (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .formatUnit */ .Ac)(newProp.width)
                            });
                            break;
                        case 'height':
                            (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setStyleAttribute */ .V7)(this.element, {
                                height: (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .formatUnit */ .Ac)(newProp.height)
                            });
                            break;
                        case 'zIndex':
                            (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setStyleAttribute */ .V7)(this.element, {
                                zIndex: newProp.zIndex
                            });
                            break;
                        case 'enableRtl':
                            this.setEnableRtl();
                            break;
                        case 'position':
                        case 'relateTo':
                            this.refreshPosition();
                            break;
                        case 'offsetX':
                            // eslint-disable-next-line
                            var x = newProp.offsetX - oldProp.offsetX;
                            this.element.style.left = (parseInt(this.element.style.left, 10) + x).toString() + 'px';
                            break;
                        case 'offsetY':
                            // eslint-disable-next-line
                            var y = newProp.offsetY - oldProp.offsetY;
                            this.element.style.top = (parseInt(this.element.style.top, 10) + y).toString() + 'px';
                            break;
                        case 'content':
                            this.setContent();
                            break;
                        case 'actionOnScroll':
                            'none' !== newProp.actionOnScroll ? this.wireScrollEvents() : this.unwireScrollEvents();
                    }
                }, /**
     * gets the Component module name.
     *
     * @returns {void}
     * @private
     */ Popup.prototype.getModuleName = function() {
                    return 'popup';
                }, /**
     * To resolve if any collision occurs.
     *
     * @returns {void}
     */ Popup.prototype.resolveCollision = function() {
                    this.checkCollision();
                }, /**
     * gets the persisted state properties of the Component.
     *
     * @returns {void}
     */ Popup.prototype.getPersistData = function() {
                    return this.addOnPersist([]);
                }, /**
     * To destroy the control.
     *
     * @returns {void}
     */ Popup.prototype.destroy = function() {
                    this.element.classList.remove(CLASSNAMES.ROOT, CLASSNAMES.RTL, CLASSNAMES.OPEN, CLASSNAMES.CLOSE), this.element.classList.contains('e-popup-open') && this.unwireEvents(), _super.prototype.destroy.call(this);
                }, /**
     * To Initialize the control rendering
     *
     * @returns {void}
     * @private
     */ Popup.prototype.render = function() {
                    this.element.classList.add(CLASSNAMES.ROOT);
                    var styles = {};
                    1000 !== this.zIndex && (styles.zIndex = this.zIndex), 'auto' !== this.width && (styles.width = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .formatUnit */ .Ac)(this.width)), 'auto' !== this.height && (styles.height = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .formatUnit */ .Ac)(this.height)), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setStyleAttribute */ .V7)(this.element, styles), this.fixedParent = !1, this.setEnableRtl(), this.setContent();
                }, Popup.prototype.wireEvents = function() {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(window, 'orientationchange', this.orientationOnChange, this), 'none' !== this.actionOnScroll && this.wireScrollEvents();
                }, Popup.prototype.wireScrollEvents = function() {
                    if (this.getRelateToElement()) for(var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++){
                        var parent_1 = _a[_i];
                        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(parent_1, 'scroll', this.scrollRefresh, this);
                    }
                }, Popup.prototype.unwireEvents = function() {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(window, 'orientationchange', this.orientationOnChange), 'none' !== this.actionOnScroll && this.unwireScrollEvents();
                }, Popup.prototype.unwireScrollEvents = function() {
                    if (this.getRelateToElement()) for(var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++){
                        var parent_2 = _a[_i];
                        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(parent_2, 'scroll', this.scrollRefresh);
                    }
                }, Popup.prototype.getRelateToElement = function() {
                    var relateToElement = '' === this.relateTo || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.relateTo) ? document.body : this.relateTo;
                    return this.setProperties({
                        relateTo: relateToElement
                    }, !0), 'string' == typeof this.relateTo ? document.querySelector(this.relateTo) : this.relateTo;
                }, Popup.prototype.scrollRefresh = function(e) {
                    if ('reposition' === this.actionOnScroll ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.element) || this.element.offsetParent === e.target || this.element.offsetParent && 'BODY' === this.element.offsetParent.tagName && null == e.target.parentElement || this.refreshPosition() : 'hide' === this.actionOnScroll && this.hide(), 'none' !== this.actionOnScroll && this.getRelateToElement()) {
                        var targetVisible = this.isElementOnViewport(this.getRelateToElement(), e.target);
                        targetVisible || this.targetInvisibleStatus ? targetVisible && (this.targetInvisibleStatus = !1) : (this.trigger('targetExitViewport'), this.targetInvisibleStatus = !0);
                    }
                }, /**
     * This method is to get the element visibility on viewport when scroll
     * the page. This method will returns true even though 1 px of element
     * part is in visible.
     *
     * @param {HTMLElement} relateToElement - specifies the element
     * @param {HTMLElement} scrollElement - specifies the scroll element
     * @returns {boolean} - retruns the boolean
     */ // eslint-disable-next-line
                Popup.prototype.isElementOnViewport = function(relateToElement, scrollElement) {
                    for(var scrollParents = this.getScrollableParent(relateToElement), parent_3 = 0; parent_3 < scrollParents.length; parent_3++)if (!this.isElementVisible(relateToElement, scrollParents[parent_3])) return !1;
                    return !0;
                }, Popup.prototype.isElementVisible = function(relateToElement, scrollElement) {
                    var rect = this.checkGetBoundingClientRect(relateToElement);
                    if (!rect.height || !rect.width) return !1;
                    if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.checkGetBoundingClientRect(scrollElement))) {
                        var win = window, windowView = {
                            top: win.scrollY,
                            left: win.scrollX,
                            right: win.scrollX + win.outerWidth,
                            bottom: win.scrollY + win.outerHeight
                        }, off = (0, _common_position__WEBPACK_IMPORTED_MODULE_1__ /* .calculatePosition */ .k)(relateToElement), ele = {
                            top: off.top,
                            left: off.left,
                            right: off.left + rect.width,
                            bottom: off.top + rect.height
                        }, elementView = {
                            top: windowView.bottom - ele.top,
                            left: windowView.right - ele.left,
                            bottom: ele.bottom - windowView.top,
                            right: ele.right - windowView.left
                        };
                        return elementView.top > 0 && elementView.left > 0 && elementView.right > 0 && elementView.bottom > 0;
                    }
                    var parent_4 = scrollElement.getBoundingClientRect();
                    return !(rect.bottom < parent_4.top) && !(rect.bottom > parent_4.bottom) && !(rect.right > parent_4.right) && !(rect.left < parent_4.left);
                }, /**
     * Initialize the event handler
     *
     * @returns {void}
     * @private
     */ Popup.prototype.preRender = function() {
                //There is no event handler
                }, Popup.prototype.setEnableRtl = function() {
                    this.reposition(), // eslint-disable-next-line
                    this.enableRtl ? this.element.classList.add(CLASSNAMES.RTL) : this.element.classList.remove(CLASSNAMES.RTL);
                }, Popup.prototype.setContent = function() {
                    if (!(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.content)) {
                        if (this.element.innerHTML = '', 'string' == typeof this.content) this.element.textContent = this.content;
                        else {
                            var relateToElem = this.getRelateToElement(), props = this.content.props;
                            (!relateToElem.classList.contains('e-dropdown-btn') || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(props)) && this.element.appendChild(this.content);
                        }
                    }
                }, Popup.prototype.orientationOnChange = function() {
                    var _this = this;
                    setTimeout(function() {
                        _this.refreshPosition();
                    }, 200);
                }, // eslint-disable-next-line
                /**
     * Based on the `relative` element and `offset` values, `Popup` element position will refreshed.
     *
     * @returns {void}
     */ Popup.prototype.refreshPosition = function(target, collision) {
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(target) || this.checkFixedParent(target), this.reposition(), collision || this.checkCollision();
                }, Popup.prototype.reposition = function() {
                    var pos, position, relateToElement = this.getRelateToElement();
                    if ('number' == typeof this.position.X && 'number' == typeof this.position.Y) pos = {
                        left: this.position.X,
                        top: this.position.Y
                    };
                    else if ('string' == typeof this.position.X && 'number' == typeof this.position.Y || 'number' == typeof this.position.X && 'string' == typeof this.position.Y) {
                        var parentDisplay = void 0, display = this.element.style.display;
                        this.element.style.display = 'block', this.element.classList.contains('e-dlg-modal') && (parentDisplay = this.element.parentElement.style.display, this.element.parentElement.style.display = 'block'), position = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY), pos = 'string' == typeof this.position.X ? {
                            left: position.left,
                            top: this.position.Y
                        } : {
                            left: this.position.X,
                            top: position.top
                        }, this.element.style.display = display, this.element.classList.contains('e-dlg-modal') && (this.element.parentElement.style.display = parentDisplay);
                    } else if (relateToElement) {
                        var display = this.element.style.display;
                        this.element.style.display = 'block', pos = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY), this.element.style.display = display;
                    } else pos = {
                        left: 0,
                        top: 0
                    };
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(pos) || (this.element.style.left = pos.left + 'px', this.element.style.top = pos.top + 'px');
                }, Popup.prototype.checkGetBoundingClientRect = function(ele) {
                    try {
                        return ele.getBoundingClientRect();
                    } catch (error) {
                        return null;
                    }
                }, Popup.prototype.getAnchorPosition = function(anchorEle, ele, position, offsetX, offsetY) {
                    var eleRect = this.checkGetBoundingClientRect(ele), anchorRect = this.checkGetBoundingClientRect(anchorEle);
                    if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(eleRect) || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(anchorRect)) return null;
                    var anchorPos = {
                        left: 0,
                        top: 0
                    };
                    switch(ele.offsetParent && 'BODY' === ele.offsetParent.tagName && 'BODY' === anchorEle.tagName ? anchorPos = (0, _common_position__WEBPACK_IMPORTED_MODULE_1__ /* .calculatePosition */ .k)(anchorEle) : (ele.classList.contains('e-dlg-modal') && 'BODY' !== anchorEle.tagName && (ele = ele.parentElement), anchorPos = (0, _common_position__WEBPACK_IMPORTED_MODULE_1__ /* .calculateRelativeBasedPosition */ .O)(anchorEle, ele)), position.X){
                        default:
                        case 'left':
                            break;
                        case 'center':
                            ele.classList.contains('e-dlg-modal') && 'BODY' === anchorEle.tagName && 'container' === this.targetType ? anchorPos.left += window.innerWidth / 2 - eleRect.width / 2 : 'container' === this.targetType ? anchorPos.left += anchorRect.width / 2 - eleRect.width / 2 : anchorPos.left += anchorRect.width / 2;
                            break;
                        case 'right':
                            ele.classList.contains('e-dlg-modal') && 'BODY' === anchorEle.tagName && 'container' === this.targetType ? anchorPos.left += window.innerWidth - eleRect.width : 'container' === this.targetType ? anchorPos.left += anchorRect.width - eleRect.width : anchorPos.left += anchorRect.width;
                    }
                    switch(position.Y){
                        default:
                        case 'top':
                            break;
                        case 'center':
                            ele.classList.contains('e-dlg-modal') && 'BODY' === anchorEle.tagName && 'container' === this.targetType ? anchorPos.top += window.innerHeight / 2 - eleRect.height / 2 : 'container' === this.targetType ? anchorPos.top += anchorRect.height / 2 - eleRect.height / 2 : anchorPos.top += anchorRect.height / 2;
                            break;
                        case 'bottom':
                            ele.classList.contains('e-dlg-modal') && 'BODY' === anchorEle.tagName && 'container' === this.targetType ? anchorPos.top += window.innerHeight - eleRect.height : 'container' === this.targetType ? anchorPos.top += anchorRect.height - eleRect.height : anchorPos.top += anchorRect.height;
                    }
                    return anchorPos.left += offsetX, anchorPos.top += offsetY, anchorPos;
                }, Popup.prototype.callFlip = function(param) {
                    var relateToElement = this.getRelateToElement();
                    (0, _common_collision__WEBPACK_IMPORTED_MODULE_2__ /* .flip */ .RR)(this.element, relateToElement, this.offsetX, this.offsetY, this.position.X, this.position.Y, this.viewPortElement, param, this.fixedParent);
                }, Popup.prototype.callFit = function(param) {
                    if (0 !== (0, _common_collision__WEBPACK_IMPORTED_MODULE_2__ /* .isCollide */ .vF)(this.element, this.viewPortElement).length) {
                        if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.viewPortElement)) {
                            var data = (0, _common_collision__WEBPACK_IMPORTED_MODULE_2__ /* .fit */ .Tj)(this.element, this.viewPortElement, param);
                            param.X && (this.element.style.left = data.left + 'px'), param.Y && (this.element.style.top = data.top + 'px');
                        } else {
                            var elementRect = this.checkGetBoundingClientRect(this.element), viewPortRect = this.checkGetBoundingClientRect(this.viewPortElement);
                            if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(elementRect) || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(viewPortRect)) return null;
                            param && !0 === param.Y && (viewPortRect.top > elementRect.top ? this.element.style.top = '0px' : viewPortRect.bottom < elementRect.bottom && (this.element.style.top = parseInt(this.element.style.top, 10) - (elementRect.bottom - viewPortRect.bottom) + 'px')), param && !0 === param.X && (viewPortRect.right < elementRect.right ? this.element.style.left = parseInt(this.element.style.left, 10) - (elementRect.right - viewPortRect.right) + 'px' : viewPortRect.left > elementRect.left && (this.element.style.left = parseInt(this.element.style.left, 10) + (viewPortRect.left - elementRect.left) + 'px'));
                        }
                    }
                }, Popup.prototype.checkCollision = function() {
                    var horz = this.collision.X, vert = this.collision.Y;
                    ('none' !== horz || 'none' !== vert) && ('flip' === horz && 'flip' === vert ? this.callFlip({
                        X: !0,
                        Y: !0
                    }) : 'fit' === horz && 'fit' === vert ? this.callFit({
                        X: !0,
                        Y: !0
                    }) : ('flip' === horz ? this.callFlip({
                        X: !0,
                        Y: !1
                    }) : 'flip' === vert && this.callFlip({
                        Y: !0,
                        X: !1
                    }), 'fit' === horz ? this.callFit({
                        X: !0,
                        Y: !1
                    }) : 'fit' === vert && this.callFit({
                        X: !1,
                        Y: !0
                    })));
                }, /**
     * Shows the popup element from screen.
     *
     * @returns {void}
     * @param {AnimationModel} animationOptions - specifies the model
     * @param { HTMLElement } relativeElement - To calculate the zIndex value dynamically.
     */ Popup.prototype.show = function(animationOptions, relativeElement) {
                    var _this = this;
                    if (this.wireEvents(), 1000 === this.zIndex || !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(relativeElement)) {
                        var zIndexElement = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(relativeElement) ? this.element : relativeElement;
                        this.zIndex = getZindexPartial(zIndexElement), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .setStyleAttribute */ .V7)(this.element, {
                            zIndex: this.zIndex
                        });
                    }
                    animationOptions = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(animationOptions) || 'object' != typeof animationOptions ? this.showAnimation : animationOptions, ('none' !== this.collision.X || 'none' !== this.collision.Y) && ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        this.element
                    ], CLASSNAMES.CLOSE), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        this.element
                    ], CLASSNAMES.OPEN), this.checkCollision(), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        this.element
                    ], CLASSNAMES.OPEN), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        this.element
                    ], CLASSNAMES.CLOSE)), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(animationOptions) ? ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        this.element
                    ], CLASSNAMES.CLOSE), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        this.element
                    ], CLASSNAMES.OPEN), this.trigger('open')) : (animationOptions.begin = function() {
                        _this.isDestroyed || ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                            _this.element
                        ], CLASSNAMES.CLOSE), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                            _this.element
                        ], CLASSNAMES.OPEN));
                    }, animationOptions.end = function() {
                        _this.isDestroyed || _this.trigger('open');
                    }, new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Animation */ .fw(animationOptions).animate(this.element));
                }, /**
     * Hides the popup element from screen.
     *
     * @param {AnimationModel} animationOptions - To give the animation options.
     * @returns {void}
     */ Popup.prototype.hide = function(animationOptions) {
                    var _this = this;
                    animationOptions = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(animationOptions) || 'object' != typeof animationOptions ? this.hideAnimation : animationOptions, (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(animationOptions) ? ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        this.element
                    ], CLASSNAMES.OPEN), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        this.element
                    ], CLASSNAMES.CLOSE), this.trigger('close')) : (animationOptions.end = function() {
                        _this.isDestroyed || ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                            _this.element
                        ], CLASSNAMES.OPEN), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                            _this.element
                        ], CLASSNAMES.CLOSE), _this.trigger('close'));
                    }, new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Animation */ .fw(animationOptions).animate(this.element)), this.unwireEvents();
                }, /**
     * Gets scrollable parent elements for the given element.
     *
     * @returns {void}
     * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.
     */ Popup.prototype.getScrollableParent = function(element) {
                    return this.checkFixedParent(element), getScrollableParent(element, this.fixedParent);
                }, Popup.prototype.checkFixedParent = function(element) {
                    for(var parent = element.parentElement; parent && 'HTML' !== parent.tagName;){
                        var parentStyle = getComputedStyle(parent);
                        'fixed' === parentStyle.position && !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.element) && this.element.offsetParent && 'BODY' === this.element.offsetParent.tagName && (this.element.style.top = window.scrollY > parseInt(this.element.style.top) ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .formatUnit */ .Ac)(window.scrollY - parseInt(this.element.style.top)) : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .formatUnit */ .Ac)(parseInt(this.element.style.top) - window.scrollY), this.element.style.position = 'fixed', this.fixedParent = !0), parent = parent.parentElement, !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.element) && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.element.offsetParent) && 'fixed' === parentStyle.position && 'fixed' === this.element.style.position && (this.fixedParent = !0);
                    }
                }, __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)('auto')
                ], Popup.prototype, "height", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)('auto')
                ], Popup.prototype, "width", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(null)
                ], Popup.prototype, "content", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)('container')
                ], Popup.prototype, "targetType", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(null)
                ], Popup.prototype, "viewPortElement", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)({
                        X: 'none',
                        Y: 'none'
                    })
                ], Popup.prototype, "collision", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)('')
                ], Popup.prototype, "relateTo", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Complex */ .Zz)({}, PositionData)
                ], Popup.prototype, "position", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(0)
                ], Popup.prototype, "offsetX", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(0)
                ], Popup.prototype, "offsetY", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(1000)
                ], Popup.prototype, "zIndex", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(!1)
                ], Popup.prototype, "enableRtl", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)('reposition')
                ], Popup.prototype, "actionOnScroll", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(null)
                ], Popup.prototype, "showAnimation", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Property */ .Z9)(null)
                ], Popup.prototype, "hideAnimation", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Event */ .ju)()
                ], Popup.prototype, "open", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Event */ .ju)()
                ], Popup.prototype, "close", void 0), __decorate([
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Event */ .ju)()
                ], Popup.prototype, "targetExitViewport", void 0), Popup = __decorate([
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .NotifyPropertyChanges */ .Zl
                ], Popup);
            }(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Component */ .wA);
            /**
 * Gets scrollable parent elements for the given element.
 *
 * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.
 * @param {boolean} fixedParent - specifies the parent element
 * @private
 * @returns {void}
 */ function getScrollableParent(element, fixedParent) {
                for(var eleStyle = getComputedStyle(element), scrollParents = [], overflowRegex = /(auto|scroll)/, parent = element.parentElement; parent && 'HTML' !== parent.tagName;){
                    var parentStyle = getComputedStyle(parent);
                    !('absolute' === eleStyle.position && 'static' === parentStyle.position) && overflowRegex.test(parentStyle.overflow + parentStyle.overflowY + parentStyle.overflowX) && scrollParents.push(parent), parent = parent.parentElement;
                }
                return fixedParent || scrollParents.push(document), scrollParents;
            }
            /**
 * Gets the maximum z-index of the given element.
 *
 * @returns {void}
 * @param { HTMLElement } element - Specify the element to get the maximum z-index of it.
 * @private
 */ function getZindexPartial(element) {
                for(// upto body traversal
                var parent = element.parentElement, parentZindex = []; parent;)if ('BODY' !== parent.tagName) {
                    var index = document.defaultView.getComputedStyle(parent, null).getPropertyValue('z-index'), position = document.defaultView.getComputedStyle(parent, null).getPropertyValue('position');
                    'auto' !== index && 'static' !== position && parentZindex.push(index), parent = parent.parentElement;
                } else break;
                for(var childrenZindex = [], i = 0; i < document.body.children.length; i++)if (!element.isEqualNode(document.body.children[i])) {
                    var index = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('z-index'), position = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('position');
                    'auto' !== index && 'static' !== position && childrenZindex.push(index);
                }
                childrenZindex.push('999');
                var siblingsZindex = [];
                if (!(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(element.parentElement) && 'BODY' !== element.parentElement.tagName) {
                    for(var childNodes = [].slice.call(element.parentElement.children), i = 0; i < childNodes.length; i++)if (!element.isEqualNode(childNodes[i])) {
                        var index = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue('z-index'), position = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue('position');
                        'auto' !== index && 'static' !== position && siblingsZindex.push(index);
                    }
                }
                var finalValue = parentZindex.concat(childrenZindex, siblingsZindex), currentZindexValue = Math.max.apply(Math, finalValue) + 1;
                return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;
            }
        /***/ },
        /***/ 2857: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                VZ: function() {
                    return /* reexport */ ComponentBase;
                },
                tB: function() {
                    return /* reexport */ Inject;
                },
                ef: function() {
                    return /* reexport */ applyMixins;
                }
            });
            // UNUSED EXPORTS: ComplexBase, compile
            // EXTERNAL MODULE: ./node_modules/react/index.js
            var extendStatics, extendStatics1, extendStatics2, react = __webpack_require__(7294), react_dom = __webpack_require__(3935), ej2_base = __webpack_require__(1807), __extends = (extendStatics = function(d, b) {
                return (extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), defaulthtmlkeys = [
                'alt',
                'className',
                'disabled',
                'form',
                'id',
                'readOnly',
                'style',
                'tabIndex',
                'title',
                'type',
                'name',
                'onClick',
                'onFocus',
                'onBlur'
            ], delayUpdate = [
                'accordion',
                'tab',
                'splitter'
            ], isColEName = /]/, ComponentBase = /** @class */ function(_super) {
                function ComponentBase() {
                    var _this = null !== _super && _super.apply(this, arguments) || this;
                    return _this.mountingState = !1, _this.attrKeys = [], _this.cachedTimeOut = 0, _this.isAppendCalled = !1, _this.initRenderCalled = !1, _this.isReactForeceUpdate = !1, _this.isReact = !0, _this.isshouldComponentUpdateCalled = !1, _this.isCreated = !1, _this;
                }
                return __extends(ComponentBase, _super), // Lifecycle methods are changed by React team and so we can deprecate this method and use
                // Reference link:https://reactjs.org/docs/react-component.html#unsafe_componentWillMount
                // tslint:disable-next-line:no-any
                ComponentBase.prototype.componentDidMount = function() {
                    this.refreshChild(!0), this.canDelayUpdate = -1 !== delayUpdate.indexOf(this.getModuleName()), // Used timeout to resolve template binding
                    // Reference link: https://github.com/facebook/react/issues/10309#issuecomment-318433235
                    // tslint:disable-next-line:no-any
                    this.renderReactComponent(), this.portals && this.portals.length && (this.mountingState = !0, this.renderReactTemplates(), this.mountingState = !1);
                }, ComponentBase.prototype.componentDidUpdate = function(prev) {
                    this.isshouldComponentUpdateCalled || !this.initRenderCalled || this.isReactForeceUpdate || (this.isshouldComponentUpdateCalled = !0, prev !== this.props && this.refreshProperties(this.props, !0));
                }, ComponentBase.prototype.renderReactComponent = function() {
                    var ele = this.reactElement;
                    ele && !this.isAppendCalled && (this.isAppendCalled = !0, this.appendTo(ele));
                }, // Lifecycle methods are changed by React team and so we can deprecate this method and use
                // Reference link:https://reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops
                // tslint:disable-next-line:no-any
                /**
     * @private
     */ ComponentBase.prototype.shouldComponentUpdate = function(nextProps) {
                    return (this.isshouldComponentUpdateCalled = !0, this.initRenderCalled) ? (this.isAppendCalled || (clearTimeout(this.cachedTimeOut), this.isAppendCalled = !0, this.appendTo(this.reactElement)), this.updateProperties(nextProps)) : this.updateProperties(nextProps, !0), !0;
                }, /**
     * @private
     */ ComponentBase.prototype.updateProperties = function(nextProps, silent) {
                    for(var _this = this, dProps = (0, ej2_base /* extend */ .l7)({}, nextProps), keys = Object.keys(nextProps), _i = 0; _i < keys.length; _i++){
                        var propkey = keys[_i], isClassName = 'className' === propkey;
                        if ('children' !== propkey) {
                            if (isClassName || (0, ej2_base /* isNullOrUndefined */ .le)(this.htmlattributes[propkey]) || this.htmlattributes[propkey] === dProps[propkey] || (this.htmlattributes[propkey] = dProps[propkey]), this.compareValues(this.props[propkey], nextProps[propkey])) delete dProps[propkey];
                            else if (-1 !== this.attrKeys.indexOf(propkey)) {
                                if (isClassName) {
                                    this.clsName = !0;
                                    for(var propsClsName = this.props[propkey].split(' '), i = 0; i < propsClsName.length; i++)this.element.classList.remove(propsClsName[i]);
                                    for(var dpropsClsName = dProps[propkey].split(' '), j = 0; j < dpropsClsName.length; j++)this.element.classList.add(dpropsClsName[j]);
                                } else 'disabled' !== propkey && delete dProps[propkey];
                            } else 'value' === propkey && nextProps[propkey] === this[propkey] ? delete dProps[propkey] : ('valueTemplate' === propkey || 'itemTemplate' === propkey || 'headerTemplate' === propkey) && nextProps[propkey].toString() === this[propkey].toString() ? delete dProps[propkey] : 'content' === propkey && 'function' == typeof dProps[propkey] && delete dProps[propkey];
                        }
                    }
                    dProps.children && delete dProps.children, this.initRenderCalled && (this.canDelayUpdate || this.props.delayUpdate) ? setTimeout(function() {
                        _this.refreshProperties(dProps, nextProps, silent);
                    }) : this.refreshProperties(dProps, nextProps, silent);
                }, ComponentBase.prototype.refreshProperties = function(dProps, nextProps, silent) {
                    Object.keys(dProps).length && (silent || // tslint:disable-next-line:no-any
                    this.processComplexTemplate(dProps, this), this.setProperties(dProps, silent)), this.refreshChild(silent, nextProps);
                }, ComponentBase.prototype.processComplexTemplate = function(curObject, context) {
                    var compTemplate = context.complexTemplate;
                    if (compTemplate) for(var prop in compTemplate){
                        var PropVal = compTemplate[prop];
                        curObject[prop] && (0, ej2_base /* setValue */ .sO)(PropVal, (0, ej2_base /* getValue */ .NA)(prop, curObject), curObject);
                    }
                }, ComponentBase.prototype.getDefaultAttributes = function() {
                    var _this = this;
                    this.isReact = !0;
                    var propKeys = Object.keys(this.props);
                    this.htmlattributes || (this.htmlattributes = {}), this.attrKeys = defaulthtmlkeys.concat(this.controlAttributes || []);
                    for(var _i = 0; _i < propKeys.length; _i++){
                        var prop = propKeys[_i];
                        (-1 !== prop.indexOf('data-') || -1 !== prop.indexOf('aria-') || -1 !== this.attrKeys.indexOf(prop)) && this.htmlattributes[prop] !== this.props[prop] && (this.htmlattributes[prop] = this.props[prop]);
                    }
                    if (!this.htmlattributes.ref && (/* tslint:disable:no-any */ this.htmlattributes.ref = function(ele) {
                        _this.reactElement = ele;
                    }, -1 !== [
                        'autocomplete',
                        'combobox',
                        'dropdownlist',
                        'dropdowntree',
                        'multiselect',
                        'listbox',
                        'colorpicker',
                        'numerictextbox',
                        'textbox',
                        'uploader',
                        'maskedtextbox',
                        'slider',
                        'datepicker',
                        'datetimepicker',
                        'daterangepicker',
                        'timepicker',
                        'checkbox',
                        'switch',
                        'radio'
                    ].indexOf(this.getModuleName()) && (this.htmlattributes.key = '' + ComponentBase.reactUid, ComponentBase.reactUid++)), this.clsName) {
                        for(var clsList = this.element.classList, className = this.htmlattributes.className, i = 0; i < clsList.length; i++)-1 == className.indexOf(clsList[i]) && (this.htmlattributes.className = this.htmlattributes.className + ' ' + clsList[i]);
                        this.clsName = !1;
                    }
                    return this.htmlattributes;
                }, /* tslint:disable:no-any */ ComponentBase.prototype.trigger = function(eventName, eventProp, successHandler) {
                    var _this = this;
                    if (!0 !== this.isDestroyed && this.modelObserver) {
                        if (isColEName.test(eventName)) {
                            var handler = (0, ej2_base /* getValue */ .NA)(eventName, this);
                            handler && handler.call(this, eventProp), successHandler && successHandler.call(this, eventProp);
                        }
                        ('change' === eventName || 'input' === eventName) && this.props.onChange && eventProp.event && this.props.onChange.call(void 0, {
                            syntheticEvent: eventProp.event,
                            nativeEvent: {
                                text: eventProp.value
                            },
                            value: eventProp.value,
                            target: this
                        });
                        var prevDetection = this.isProtectedOnChange;
                        this.isProtectedOnChange = !1, 'created' === eventName ? setTimeout(function() {
                            _this.isCreated = !0, _this.isDestroyed || _this.modelObserver.notify(eventName, eventProp, successHandler);
                        }) : this.modelObserver.notify(eventName, eventProp, successHandler), this.isProtectedOnChange = prevDetection;
                    }
                }, ComponentBase.prototype.compareValues = function(value1, value2) {
                    if (typeof value1 == typeof value2) {
                        if (value1 === value2) return !0;
                        if ((!(0, ej2_base /* isNullOrUndefined */ .le)(value1) && value1.constructor) !== (!(0, ej2_base /* isNullOrUndefined */ .le)(value2) && value2.constructor)) return !1;
                        if (value1 instanceof Date || value1 instanceof RegExp || value1 instanceof String || value1 instanceof Number) return value1.toString() === value2.toString();
                        if ((0, ej2_base /* isObject */ .Kn)(value1) || Array.isArray(value1)) {
                            var tempVal = value1, tempVal2 = value2;
                            return (0, ej2_base /* isObject */ .Kn)(tempVal) && (tempVal = [
                                value1
                            ], tempVal2 = [
                                value2
                            ]), this.compareObjects(tempVal, tempVal2).status;
                        }
                    }
                    return !1;
                }, ComponentBase.prototype.compareObjects = function(oldProps, newProps, propName) {
                    var status = !0, lenSimilarity = oldProps.length === newProps.length, diffArray = [];
                    if (lenSimilarity) for(var i = 0, len = newProps.length; i < len; i++){
                        var curObj = {}, oldProp = oldProps[i], newProp = newProps[i], keys = Object.keys(newProp);
                        if (0 !== keys.length) for(var _i = 0; _i < keys.length; _i++){
                            var key = keys[_i], oldValue = oldProp[key], newValue = newProp[key];
                            if ('items' === key) {
                                for(var _j = 0; _j < newValue.length; _j++)if ('richtexteditor' === this.getModuleName() && 'object' == typeof newValue[_j]) return {
                                    status: !0
                                };
                            }
                            if ('grid' === this.getModuleName() && 'field' === key && (curObj[key] = newValue), !oldProp.hasOwnProperty(key) || !this.compareValues(oldValue, newValue)) {
                                if (!propName) return {
                                    status: !1
                                };
                                status = !1, curObj[key] = newValue;
                            }
                        }
                        else if (newProp[i] === oldProp[i]) status = !0;
                        else {
                            if (!propName) return {
                                status: !1
                            };
                            status = !1;
                        }
                        Object.keys(curObj).length && diffArray.push({
                            index: i,
                            value: curObj,
                            key: propName
                        });
                    }
                    else status = !1;
                    return {
                        status: status,
                        changedProperties: diffArray
                    };
                }, ComponentBase.prototype.refreshChild = function(silent, props) {
                    if (this.checkInjectedModules) {
                        for(var prevModule = this.getInjectedModules() || [], curModule = this.getInjectedServices() || [], _i = 0; _i < curModule.length; _i++){
                            var mod = curModule[_i];
                            -1 === prevModule.indexOf(mod) && prevModule.push(mod);
                        }
                        this.injectedModules = prevModule;
                    }
                    if (this.directivekeys) {
                        var changedProps = [], directiveValue = this.validateChildren({}, this.directivekeys, props || this.props);
                        if (directiveValue && Object.keys(directiveValue).length) {
                            if (!silent && this.skipRefresh) for(var _a = 0, _b = this.skipRefresh; _a < _b.length; _a++){
                                var fields = _b[_a];
                                delete directiveValue[fields];
                            }
                            if (this.prevProperties) for(var dKeys = Object.keys(this.prevProperties), i = 0; i < dKeys.length; i++){
                                var key = dKeys[i];
                                if (directiveValue.hasOwnProperty(key)) {
                                    var compareOutput = this.compareObjects(this.prevProperties[key], directiveValue[key], key);
                                    if (compareOutput.status) delete directiveValue[key];
                                    else {
                                        compareOutput.changedProperties.length && (changedProps = changedProps.concat(compareOutput.changedProperties));
                                        var obj = {};
                                        obj[key] = directiveValue[key], this.prevProperties = (0, ej2_base /* extend */ .l7)(this.prevProperties, obj);
                                    }
                                }
                            }
                            else this.prevProperties = (0, ej2_base /* extend */ .l7)({}, directiveValue, {}, !0);
                            if (changedProps.length) {
                                if ('grid' === this.getModuleName() && 'columns' === key) for(var _c1 = 0, allColumns = this.columns; _c1 < allColumns.length; _c1++)if ((0, ej2_base /* getValue */ .NA)('field', allColumns[_c1]) === (0, ej2_base /* getValue */ .NA)(_c1 + '.value.field', changedProps)) {
                                    var propInstance = (0, ej2_base /* getValue */ .NA)(changedProps[_c1].key + '.' + changedProps[_c1].index, this);
                                    propInstance && propInstance.setProperties ? propInstance.setProperties(changedProps[_c1].value) : (0, ej2_base /* extend */ .l7)(propInstance, changedProps[_c1].value);
                                } else this.setProperties(directiveValue, silent);
                                else for(var _c = 0, changedProps_1 = changedProps; _c < changedProps_1.length; _c++){
                                    var changes = changedProps_1[_c], propInstance_1 = (0, ej2_base /* getValue */ .NA)(changes.key + '.' + changes.index, this);
                                    propInstance_1 && propInstance_1.setProperties ? propInstance_1.setProperties(changes.value) : (0, ej2_base /* extend */ .l7)(propInstance_1, changes.value);
                                }
                            } else this.setProperties(directiveValue, silent);
                        }
                    }
                }, ComponentBase.prototype.componentWillUnmount = function() {
                    clearTimeout(this.cachedTimeOut), this.initRenderCalled && this.isAppendCalled && this.element && ([
                        'dropdowntree',
                        'checkbox'
                    ].indexOf(this.getModuleName()) || document.body.contains(this.element)) && !this.isDestroyed && this.isCreated && this.destroy();
                }, // tslint:disable:no-any
                ComponentBase.prototype.appendReactElement = function(element, container) {
                    var portal = react_dom.createPortal(element, container);
                    this.portals ? this.portals.push(portal) : this.portals = [
                        portal
                    ];
                }, // tslint:disable:no-any
                ComponentBase.prototype.renderReactTemplates = function(callback) {
                    this.isReactForeceUpdate = !0, callback ? this.forceUpdate(callback) : this.forceUpdate(), this.isReactForeceUpdate = !1;
                }, // tslint:disable:no-any 
                ComponentBase.prototype.clearTemplate = function(templateNames, index, callback) {
                    var _this = this, tempPortal = [];
                    templateNames && templateNames.length ? Array.prototype.forEach.call(templateNames, function(propName) {
                        var indexCount = 0, propIndexCount = 0;
                        if (_this.portals.forEach(function(portal) {
                            portal.propName === propName && (tempPortal.push(propIndexCount), propIndexCount++);
                        }), index && _this.portals[tempPortal[index[indexCount]]].propName == propName) _this.portals.splice(index, 1), indexCount++;
                        else for(var i = 0; i < _this.portals.length; i++)_this.portals[i].propName == propName && (_this.portals.splice(i, 1), i--);
                    }) : this.portals = [], this.renderReactTemplates(callback);
                }, /* tslint:disable:no-any */ ComponentBase.prototype.validateChildren = function(childCache, mapper, props) {
                    for(var flag = !1, childs = react.Children.toArray(props.children), _i = 0; _i < childs.length; _i++){
                        var child = childs[_i], ifield = this.getChildType(child), key = mapper[ifield];
                        if (ifield && mapper) {
                            // tslint:disable
                            var childProps = this.getChildProps(react.Children.toArray(child.props.children), key);
                            childProps.length && (flag = !0, // tslint:disable
                            childCache[child.type.propertyName || ifield] = childProps);
                        }
                    }
                    return flag ? childCache : null;
                }, // tslint:disable:no-any
                ComponentBase.prototype.getChildType = function(child) {
                    return child.type && child.type.isDirective && child.type.moduleName || '';
                }, ComponentBase.prototype.getChildProps = function(subChild, matcher) {
                    for(var ret = [], _i = 0; _i < subChild.length; _i++){
                        var child = subChild[_i], accessProp = !1, key = void 0;
                        'string' == typeof matcher ? (accessProp = !0, key = matcher) : key = Object.keys(matcher)[0];
                        var prop = child.props;
                        if (this.getChildType(child) === key) {
                            if (accessProp || !prop.children) {
                                // tslint:disable
                                var cacheVal = (0, ej2_base /* extend */ .l7)({}, prop, {}, !0);
                                // tslint:disable
                                this.processComplexTemplate(cacheVal, child.type), ret.push(cacheVal);
                            } else {
                                var cachedValue = this.validateChildren((0, ej2_base /* extend */ .l7)({}, prop), matcher[key], prop) || prop;
                                cachedValue.children && delete cachedValue.children, // tslint:disable
                                this.processComplexTemplate(cachedValue, child.type), ret.push(cachedValue);
                            }
                        }
                    }
                    return ret;
                }, // tslint:disable:no-any
                ComponentBase.prototype.getInjectedServices = function() {
                    for(var childs = react.Children.toArray(this.props.children), _i = 0; _i < childs.length; _i++){
                        var child = childs[_i];
                        /* tslint:disable:no-any */ if (child.type.isService) return child.props.services;
                    }
                    return [];
                }, /**
     * @private
     */ ComponentBase.reactUid = 1, ComponentBase;
            }(react.Component);
            // tslint:disable-next-line:no-any
            function applyMixins(derivedClass, baseClass) {
                // tslint:disable:typedef
                baseClass.forEach(function(baseClass) {
                    Object.getOwnPropertyNames(baseClass.prototype).forEach(function(name) {
                        'isMounted' !== name && 'replaceState' !== name && (derivedClass.prototype[name] = baseClass.prototype[name]);
                    });
                });
            }
            var complex_base_extends = (extendStatics1 = function(d, b) {
                return (extendStatics1 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics1(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            });
            !/** @class */ function(_super) {
                function ComplexBase() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                complex_base_extends(ComplexBase, _super), ComplexBase.prototype.render = function() {
                    return null;
                }, ComplexBase.isDirective = !0;
            }(react.PureComponent);
            var services_extends = (extendStatics2 = function(d, b) {
                return (extendStatics2 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics2(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), Inject = /** @class */ function(_super) {
                function Inject() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return services_extends(Inject, _super), // tslint:disable-next-line:no-any
                Inject.prototype.render = function() {
                    return null;
                }, Inject.isService = !0, Inject;
            }(react.PureComponent), stringCompiler = (0, ej2_base /* getTemplateEngine */ .aR)();
            (0, ej2_base /* setTemplateEngine */ .Wr)({
                compile: function(templateElement, helper) {
                    return 'string' == typeof templateElement ? stringCompiler(templateElement, helper) : function(data, component, prop, element) {
                        var cEle, actTemplate = templateElement, actData = data;
                        'object' == typeof actTemplate && (actTemplate = templateElement.template, actData = (0, ej2_base /* extend */ .l7)({}, data, templateElement.data || {})), cEle = element || document.createElement('div');
                        var rele = react.createElement(actTemplate, actData), portal = react_dom.createPortal(rele, cEle);
                        if (portal.propName = prop, component.portals ? component.portals.push(portal) : component.portals = [
                            portal
                        ], !element) return [
                            cEle
                        ];
                    };
                }
            });
        /**
 * index
 */ /***/ },
        /***/ 3396: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                Y: function() {
                    return /* binding */ RichTextEditorComponent;
                }
            });
            // EXTERNAL MODULE: ./node_modules/react/index.js
            var extendStatics, extendStatics1, extendStatics2, extendStatics3, extendStatics4, extendStatics5, extendStatics6, extendStatics7, extendStatics8, extendStatics9, extendStatics10, extendStatics11, extendStatics12, extendStatics13, targetElement, selectedHandler, minHeight, maxHeight, minWidth, maxWidth, containerElement, resizeWestWidth, proxy, DialogUtility, react = __webpack_require__(7294), ej2_base = __webpack_require__(1807), popup = __webpack_require__(9486), constant = __webpack_require__(3386), classes = __webpack_require__(9805), base_enum = __webpack_require__(809), Render = /** @class */ function() {
                /**
     * Constructor for render module
     *
     * @param {IRichTextEditor} parent - specifies the parent
     * @param {ServiceLocator} locator - specifies the locator.
     * @returns {void}
     */ function Render(parent, locator) {
                    this.parent = parent, this.locator = locator, this.renderer = this.locator.getService('rendererFactory'), this.addEventListener();
                }
                return(/**
     * To initialize Rich Text Editor header, content and footer rendering
     *
     * @returns {void}
     * @hidden

     */ Render.prototype.render = function() {
                    this.parent, this.contentRenderer = this.renderer.getRenderer(base_enum /* RenderType.Content */ .y2.Content), this.contentRenderer.renderPanel();
                }, /**
     * Refresh the entire RichTextEditor.
     *
     * @param {NotifyArgs} e - specifies the arguments.
     * @returns {void}
     */ Render.prototype.refresh = function(e) {
                    void 0 === e && (e = {
                        requestType: 'refresh'
                    }), this.parent.notify(e.requestType + "-begin", e);
                }, /**
     * Destroy the entire RichTextEditor.
     *
     * @returns {void}
     */ Render.prototype.destroy = function() {
                    this.removeEventListener();
                }, Render.prototype.moduleDestroy = function() {
                    this.parent = null;
                }, Render.prototype.addEventListener = function() {
                    this.parent.isDestroyed || (this.parent.on(constant /* modelChanged */ .CC, this.refresh, this), this.parent.on(constant /* keyUp */ .yR, this.keyUp, this), this.parent.on(constant /* moduleDestroy */ .P0, this.moduleDestroy, this));
                }, Render.prototype.removeEventListener = function() {
                    this.parent.isDestroyed || (this.parent.off(constant /* modelChanged */ .CC, this.refresh), this.parent.off(constant /* keyUp */ .yR, this.keyUp), this.parent.off(constant /* moduleDestroy */ .P0, this.moduleDestroy));
                }, Render.prototype.keyUp = function(e) {
                    if ('HTML' === this.parent.editorMode) switch(e.args.which){
                        case 46:
                        case 8:
                            // eslint-disable-next-line
                            var childNodes = this.parent.contentModule.getEditPanel().childNodes;
                            if (0 === childNodes.length || 1 === childNodes.length && 0 === childNodes[0].childNodes.length && ('BR' === childNodes[0].tagName || ('P' === childNodes[0].tagName || 'DIV' === childNodes[0].tagName) && '' === childNodes[0].textContent)) {
                                var node = this.parent.contentModule.getEditPanel();
                                'DIV' === this.parent.enterKey ? node.innerHTML = '<div><br/></div>' : 'BR' === this.parent.enterKey ? node.innerHTML = '<br/>' : node.innerHTML = '<p><br/></p>', this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), node.childNodes[0], 0);
                            }
                    }
                }, Render);
            }(), common_constant = __webpack_require__(8082), __extends = (extendStatics = function(d, b) {
                return (extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), __decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, keyCode = {
                backspace: 8,
                tab: 9,
                enter: 13,
                shift: 16,
                control: 17,
                alt: 18,
                pause: 19,
                capslock: 20,
                space: 32,
                escape: 27,
                pageup: 33,
                pagedown: 34,
                end: 35,
                home: 36,
                leftarrow: 37,
                uparrow: 38,
                rightarrow: 39,
                downarrow: 40,
                insert: 45,
                delete: 46,
                f1: 112,
                f2: 113,
                f3: 114,
                f4: 115,
                f5: 116,
                f6: 117,
                f7: 118,
                f8: 119,
                f9: 120,
                f10: 121,
                f11: 122,
                f12: 123,
                semicolon: 186,
                plus: 187,
                comma: 188,
                minus: 189,
                dot: 190,
                forwardslash: 191,
                graveaccent: 192,
                openbracket: 219,
                backslash: 220,
                closebracket: 221,
                singlequote: 222,
                ']': 221,
                '[': 219,
                '=': 187
            }, KeyboardEvents = /** @class */ function(_super) {
                var KeyboardEvents_1;
                /**
     * Initializes the KeyboardEvents
     *
     * @param {HTMLElement} element - specifies the elements.
     * @param {KeyboardEventsModel} options - specify the options
     */ function KeyboardEvents(element, options) {
                    var _this = _super.call(this, options, element) || this;
                    return(/**
         * To handle a key press event returns null
         *
         * @param {KeyboardEventArgs} e - specifies the event arguments.
         * @returns {void}
         */ _this.keyPressHandler = function(e) {
                        for(var isAltKey = e.altKey, isCtrlKey = e.ctrlKey, isShiftKey = e.shiftKey, isMetaKey = e.metaKey, curkeyCode = e.which, keys = Object.keys(_this.keyConfigs), _i = 0; _i < keys.length; _i++)for(var key = keys[_i], configCollection = _this.keyConfigs[key].split(','), _a = 0; _a < configCollection.length; _a++){
                            var rconfig = configCollection[_a], rKeyObj = KeyboardEvents_1.getKeyConfigData(rconfig.trim());
                            isAltKey === rKeyObj.altKey && (isCtrlKey === rKeyObj.ctrlKey || isMetaKey) && isShiftKey === rKeyObj.shiftKey && curkeyCode === rKeyObj.keyCode && (e.action = key);
                        }
                        _this.keyAction && _this.keyAction(e);
                    }, _this.bind(), _this);
                }
                return __extends(KeyboardEvents, _super), KeyboardEvents_1 = KeyboardEvents, /**
     * Unwire bound events and destroy the instance.
     *
     * @returns {void}
     */ KeyboardEvents.prototype.destroy = function() {
                    this.unwireEvents(), _super.prototype.destroy.call(this);
                }, /**
     * Function can be used to specify certain action if a property is changed
     *
     * @param {KeyboardEventsModel} newProp - specifies the keyboard event.
     * @param {KeyboardEventsModel} oldProp - specifies the old property.
     * @returns {void}
     * @private
     */ // eslint-disable-next-line
                KeyboardEvents.prototype.onPropertyChanged = function(newProp, oldProp) {
                // No code are needed
                }, KeyboardEvents.prototype.bind = function() {
                    this.wireEvents();
                }, /**
     * To get the module name, returns 'keyboard'.
     *
     * @returns {void}
     */ KeyboardEvents.prototype.getModuleName = function() {
                    return 'keyboard';
                }, /**
     * Wiring event handlers to events
     *
     * @returns {void}
     */ KeyboardEvents.prototype.wireEvents = function() {
                    this.element.addEventListener(this.eventName, this.keyPressHandler);
                }, /**
     * Unwiring event handlers to events
     *
     * @returns {void}
     */ KeyboardEvents.prototype.unwireEvents = function() {
                    this.element.removeEventListener(this.eventName, this.keyPressHandler);
                }, /**
     * To get the key configuration data
     *
     * @param {string} config - configuration data
     * @returns {KeyData} - specifies the key data
     */ KeyboardEvents.getKeyConfigData = function(config) {
                    if (config in this.configCache) return this.configCache[config];
                    var keys = config.toLowerCase().split('+'), keyData = {
                        altKey: -1 !== keys.indexOf('alt'),
                        ctrlKey: -1 !== keys.indexOf('ctrl'),
                        shiftKey: -1 !== keys.indexOf('shift'),
                        keyCode: null
                    };
                    return keys[keys.length - 1].length > 1 && Number(keys[keys.length - 1]) ? keyData.keyCode = Number(keys[keys.length - 1]) : keyData.keyCode = KeyboardEvents_1.getKeyCode(keys[keys.length - 1]), KeyboardEvents_1.configCache[config] = keyData, keyData;
                }, // Return the keycode value as string
                KeyboardEvents.getKeyCode = function(keyVal) {
                    return keyCode[keyVal] || keyVal.toUpperCase().charCodeAt(0);
                }, KeyboardEvents.configCache = {}, __decorate([
                    (0, ej2_base /* Property */ .Z9)({})
                ], KeyboardEvents.prototype, "keyConfigs", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)('keyup')
                ], KeyboardEvents.prototype, "eventName", void 0), __decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], KeyboardEvents.prototype, "keyAction", void 0), KeyboardEvents = KeyboardEvents_1 = __decorate([
                    ej2_base /* NotifyPropertyChanges */ .Zl
                ], KeyboardEvents);
            }(ej2_base /* Base */ .XY), ViewSource = /** @class */ function() {
                /**
     * Constructor for view source module
     *
     * @param {IRichTextEditor} parent - specifies the parent element.
     * @param {ServiceLocator} locator - specifies the locator.
     * @returns {void}
     */ function ViewSource(parent, locator) {
                    this.parent = parent, this.rendererFactory = locator.getService('rendererFactory'), this.addEventListener();
                }
                return ViewSource.prototype.addEventListener = function() {
                    this.parent.on(constant /* sourceCode */ .sv, this.sourceCode, this), this.parent.on(constant /* initialEnd */ .Xr, this.onInitialEnd, this), this.parent.on(constant /* updateSource */ .v0, this.updateSourceCode, this), this.parent.on(constant /* destroy */ .ob, this.destroy, this), this.parent.on(constant /* moduleDestroy */ .P0, this.moduleDestroy, this);
                }, ViewSource.prototype.onInitialEnd = function() {
                    this.parent.formatter.editorManager.observer.on(common_constant /* KEY_DOWN_HANDLER */ .kT, this.onKeyDown, this);
                }, ViewSource.prototype.removeEventListener = function() {
                    this.unWireEvent(), this.parent.off(constant /* sourceCode */ .sv, this.sourceCode), this.parent.off(constant /* updateSource */ .v0, this.updateSourceCode), this.parent.off(constant /* initialEnd */ .Xr, this.onInitialEnd), this.parent.off(constant /* destroy */ .ob, this.destroy), this.parent.off(constant /* moduleDestroy */ .P0, this.moduleDestroy), this.parent.formatter.editorManager.observer.off(common_constant /* KEY_DOWN_HANDLER */ .kT, this.onKeyDown);
                }, ViewSource.prototype.getSourceCode = function() {
                    return this.parent.createElement('textarea', {
                        className: "e-rte-srctextarea " + this.parent.cssClass
                    });
                }, ViewSource.prototype.wireEvent = function(element) {
                    this.keyboardModule = new KeyboardEvents(element, {
                        keyAction: this.previewKeyDown.bind(this),
                        keyConfigs: this.parent.formatter.keyConfig,
                        eventName: 'keydown'
                    }), ej2_base /* EventHandler.add */ .bi.add(this.previewElement, 'mousedown', this.mouseDownHandler, this);
                }, ViewSource.prototype.unWireEvent = function() {
                    this.keyboardModule && this.keyboardModule.destroy(), this.previewElement && ej2_base /* EventHandler.remove */ .bi.remove(this.previewElement, 'mousedown', this.mouseDownHandler);
                }, ViewSource.prototype.wireBaseKeyDown = function() {
                    this.parent.keyboardModule = new KeyboardEvents(this.contentModule.getEditPanel(), {
                        keyAction: this.parent.keyDown.bind(this.parent),
                        keyConfigs: this.parent.formatter.keyConfig,
                        eventName: 'keydown'
                    });
                }, ViewSource.prototype.unWireBaseKeyDown = function() {
                    this.parent.keyboardModule.destroy();
                }, ViewSource.prototype.mouseDownHandler = function(e) {
                    this.parent.notify(constant /* sourceCodeMouseDown */ .tO, {
                        args: e
                    });
                }, ViewSource.prototype.previewKeyDown = function(event) {
                    switch(event.action){
                        case 'html-source':
                            this.updateSourceCode(event), event.preventDefault();
                            break;
                        case 'toolbar-focus':
                            this.parent.toolbarSettings.enable && this.parent.toolbarModule.baseToolbar.toolbarObj.element.querySelector('.e-toolbar-item[aria-disabled="false"][title] [tabindex]').focus();
                    }
                }, ViewSource.prototype.onKeyDown = function(e) {
                    'html-source' === e.event.action && (e.event.preventDefault(), this.sourceCode(e), e.callBack({
                        requestType: 'SourceCode',
                        editorMode: 'HTML',
                        event: e.event
                    }));
                }, /**
     * sourceCode method
     *
     * @param {ClickEventArgs} args - specifies the click event.
     * @returns {void}
     * @hidden

     */ ViewSource.prototype.sourceCode = function(args) {
                    this.parent.isBlur = !1, this.parent.trigger(constant /* actionBegin */ .m2, {
                        requestType: 'SourceCode',
                        targetItem: 'SourceCode',
                        args: args
                    });
                    var tbItems = (0, ej2_base /* selectAll */ .td)('.' + classes /* CLS_TB_ITEM */ .Xh, this.parent.element);
                    if (this.contentModule = this.rendererFactory.getRenderer(base_enum /* RenderType.Content */ .y2.Content), this.parent.notify(constant /* updateToolbarItem */ .W0, {
                        targetItem: 'SourceCode',
                        updateItem: 'Preview',
                        baseToolbar: this.parent.getBaseToolbarObject()
                    }), (0, ej2_base /* isNullOrUndefined */ .le)(this.previewElement) && (this.previewElement = this.getSourceCode()), this.parent.updateValueData(), this.parent.iframeSettings.enable) {
                        var rteContent = void 0;
                        (rteContent = (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.element.querySelector('#' + this.parent.element.id + '_source-view')) ? this.parent.createElement('div', {
                            className: 'e-source-content',
                            id: this.parent.element.id + '_source-view'
                        }) : this.parent.element.querySelector('#' + this.parent.element.id + '_source-view')).appendChild(this.previewElement), this.parent.element.appendChild(rteContent), rteContent.style.height = this.contentModule.getPanel().style.height, rteContent.style.marginTop = this.contentModule.getPanel().style.marginTop, this.getPanel().value = this.getTextAreaValue(), this.contentModule.getPanel().style.display = 'none', rteContent.style.display = 'block', this.getPanel().style.display = 'block';
                    } else this.contentModule.getPanel().appendChild(this.previewElement), this.getPanel().value = this.getTextAreaValue(), this.contentModule.getEditPanel().style.display = 'none', this.previewElement.style.display = 'block';
                    this.parent.isBlur = !1, this.parent.disableToolbarItem(this.parent.toolbarSettings.items), this.parent.enableToolbarItem('SourceCode'), this.parent.getToolbar() && (0, ej2_base /* removeClass */ .IV)([
                        this.parent.getToolbar()
                    ], [
                        classes /* CLS_EXPAND_OPEN */ .Yi
                    ]), (0, ej2_base /* removeClass */ .IV)(tbItems, [
                        classes /* CLS_ACTIVE */ .XS
                    ]), this.parent.setContentHeight('sourceCode', !0), this.wireEvent(this.previewElement), this.unWireBaseKeyDown(), this.previewElement.focus(), this.parent.updateValue(), (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.placeholder) || this.parent.iframeSettings.enable || (this.parent.element.querySelector('.rte-placeholder.e-rte-placeholder').style.display = 'none'), this.parent.trigger(constant /* actionComplete */ .i8, {
                        requestType: 'SourceCode',
                        targetItem: 'SourceCode',
                        args: args
                    }), this.parent.invokeChangeEvent();
                }, /**
     * updateSourceCode method
     *
     * @param {ClickEventArgs} args - specifies the click event.
     * @returns {void}
     * @hidden

     */ ViewSource.prototype.updateSourceCode = function(args) {
                    this.parent.isBlur = !1, this.parent.trigger(constant /* actionBegin */ .m2, {
                        requestType: 'Preview',
                        targetItem: 'Preview',
                        args: args
                    });
                    var value, editHTML = this.getPanel();
                    this.parent.notify(constant /* updateToolbarItem */ .W0, {
                        targetItem: 'Preview',
                        updateItem: 'SourceCode',
                        baseToolbar: this.parent.getBaseToolbarObject()
                    });
                    var serializeValue = this.parent.serializeValue(editHTML.value);
                    value = null === serializeValue || '' === serializeValue ? 'DIV' === this.parent.enterKey ? '<div><br/></div>' : 'BR' === this.parent.enterKey ? '<br/>' : '<p><br/></p>' : serializeValue, this.parent.iframeSettings.enable ? (editHTML.parentElement.style.display = 'none', editHTML.style.display = 'none', this.contentModule.getPanel().style.display = 'block') : (editHTML.style.display = 'none', this.contentModule.getEditPanel().style.display = 'block'), this.contentModule.getEditPanel().innerHTML = value, this.parent.isBlur = !1, this.parent.enableToolbarItem(this.parent.toolbarSettings.items), this.parent.getToolbar() && (0, ej2_base /* removeClass */ .IV)([
                        this.parent.getToolbar()
                    ], [
                        classes /* CLS_EXPAND_OPEN */ .Yi
                    ]), this.parent.setContentHeight('preview', !0), this.unWireEvent(), this.wireBaseKeyDown(), this.contentModule.getEditPanel().focus(), this.parent.updateValue(), (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.placeholder) || 0 !== this.contentModule.getEditPanel().innerText.length || (this.parent.element.querySelector('.rte-placeholder.e-rte-placeholder').style.display = 'block'), this.parent.trigger(constant /* actionComplete */ .i8, {
                        requestType: 'Preview',
                        targetItem: 'Preview',
                        args: args
                    }), this.parent.formatter.enableUndo(this.parent), this.parent.invokeChangeEvent(), this.parent.notify(constant /* tableclass */ .LF, {});
                }, ViewSource.prototype.getTextAreaValue = function() {
                    return '<p><br></p>' === this.contentModule.getEditPanel().innerHTML || '<div><br></div>' === this.contentModule.getEditPanel().innerHTML || '<br>' === this.contentModule.getEditPanel().innerHTML || 1 === this.contentModule.getEditPanel().childNodes.length && 'P' === this.contentModule.getEditPanel().childNodes[0].tagName && 7 === this.contentModule.getEditPanel().innerHTML.length || 'DIV' === this.contentModule.getEditPanel().childNodes[0].tagName && 11 === this.contentModule.getEditPanel().innerHTML.length ? '' : this.parent.value;
                }, /**
     * getPanel method
     *
     * @returns {void}
     * @hidden

     */ ViewSource.prototype.getPanel = function() {
                    return this.parent.element && this.parent.element.querySelector('.e-rte-srctextarea');
                }, /**
     * getViewPanel method
     *
     * @returns {void}
     * @hidden

     */ ViewSource.prototype.getViewPanel = function() {
                    return this.parent.iframeSettings.enable && this.getPanel() ? this.getPanel().parentElement : this.getPanel();
                }, /**
     * Destroy the entire RichTextEditor.
     *
     * @returns {void}
     * @hidden

     */ ViewSource.prototype.destroy = function() {
                    this.removeEventListener();
                }, ViewSource.prototype.moduleDestroy = function() {
                    this.parent = null;
                }, ViewSource;
            }(), executeGroup = {
                bold: {
                    command: 'Style',
                    subCommand: 'Bold',
                    value: 'strong'
                },
                italic: {
                    command: 'Style',
                    subCommand: 'Italic',
                    value: 'em'
                },
                underline: {
                    command: 'Style',
                    subCommand: 'Underline',
                    value: 'span'
                },
                strikeThrough: {
                    command: 'Style',
                    subCommand: 'StrikeThrough',
                    value: 'span'
                },
                insertCode: {
                    command: 'Formats',
                    subCommand: 'Pre',
                    value: 'pre'
                },
                superscript: {
                    command: 'Effects',
                    subCommand: 'SuperScript',
                    value: 'sup'
                },
                subscript: {
                    command: 'Effects',
                    subCommand: 'SubScript',
                    value: 'sub'
                },
                uppercase: {
                    command: 'Casing',
                    subCommand: 'UpperCase'
                },
                lowercase: {
                    command: 'Casing',
                    subCommand: 'LowerCase'
                },
                fontColor: {
                    command: 'font',
                    subCommand: 'fontcolor',
                    value: '#ff0000'
                },
                fontName: {
                    command: 'font',
                    subCommand: 'fontname',
                    value: 'Segoe UI'
                },
                fontSize: {
                    command: 'font',
                    subCommand: 'fontsize',
                    value: '10pt'
                },
                backColor: {
                    command: 'font',
                    subCommand: 'backgroundcolor',
                    value: '#ffff00'
                },
                justifyCenter: {
                    command: 'Alignments',
                    subCommand: 'JustifyCenter'
                },
                justifyFull: {
                    command: 'Alignments',
                    subCommand: 'JustifyFull'
                },
                justifyLeft: {
                    command: 'Alignments',
                    subCommand: 'JustifyLeft'
                },
                justifyRight: {
                    command: 'Alignments',
                    subCommand: 'JustifyRight'
                },
                undo: {
                    command: 'Actions',
                    subCommand: 'Undo'
                },
                redo: {
                    command: 'Actions',
                    subCommand: 'Redo'
                },
                createLink: {
                    command: 'Links',
                    subCommand: 'createLink'
                },
                editLink: {
                    command: 'Links',
                    subCommand: 'createLink'
                },
                createImage: {
                    command: 'Images',
                    subCommand: 'Images'
                },
                formatBlock: {
                    command: 'Formats',
                    value: 'P'
                },
                heading: {
                    command: 'Formats',
                    value: 'H1'
                },
                indent: {
                    command: 'Indents',
                    subCommand: 'Indent'
                },
                outdent: {
                    command: 'Indents',
                    subCommand: 'Outdent'
                },
                insertHTML: {
                    command: 'InsertHTML',
                    subCommand: 'InsertHTML',
                    value: ''
                },
                insertText: {
                    command: 'InsertText',
                    subCommand: 'InsertText',
                    value: ''
                },
                insertHorizontalRule: {
                    command: 'InsertHTML',
                    subCommand: 'InsertHTML',
                    value: '<hr/>'
                },
                insertImage: {
                    command: 'Images',
                    subCommand: 'Image'
                },
                editImage: {
                    command: 'Images',
                    subCommand: 'Image'
                },
                insertTable: {
                    command: 'Table',
                    subCommand: 'CreateTable'
                },
                insertBrOnReturn: {
                    command: 'InsertHTML',
                    subCommand: 'InsertHTML',
                    value: '<br/>'
                },
                insertOrderedList: {
                    command: 'Lists',
                    value: 'OL'
                },
                insertUnorderedList: {
                    command: 'Lists',
                    value: 'UL'
                },
                insertParagraph: {
                    command: 'Formats',
                    value: 'P'
                },
                removeFormat: {
                    command: 'Clear',
                    subCommand: 'ClearFormat'
                }
            }, service_locator = __webpack_require__(9336), renderer_factory = __webpack_require__(2503), ExecCommandCallBack = /** @class */ function() {
                function ExecCommandCallBack(parent) {
                    this.parent = parent, this.addEventListener();
                }
                return ExecCommandCallBack.prototype.addEventListener = function() {
                    this.parent.on(constant /* execCommandCallBack */ .s4, this.commandCallBack, this), this.parent.on(constant /* destroy */ .ob, this.removeEventListener, this);
                }, ExecCommandCallBack.prototype.commandCallBack = function(args) {
                    'Undo' !== args.requestType && 'Redo' !== args.requestType && this.parent.formatter.saveData(), this.parent.notify(constant /* toolbarRefresh */ .l0, {
                        args: args
                    }), this.parent.notify(constant /* count */ .QX, {});
                }, ExecCommandCallBack.prototype.removeEventListener = function() {
                    this.parent.off(constant /* execCommandCallBack */ .s4, this.commandCallBack), this.parent.off(constant /* destroy */ .ob, this.removeEventListener);
                }, ExecCommandCallBack;
            }(), ajax_settings_extends = (extendStatics1 = function(d, b) {
                return (extendStatics1 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics1(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), ajax_settings_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, AjaxSettings = /** @class */ function(_super) {
                function AjaxSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return ajax_settings_extends(AjaxSettings, _super), ajax_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], AjaxSettings.prototype, "downloadUrl", void 0), ajax_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], AjaxSettings.prototype, "getImageUrl", void 0), ajax_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], AjaxSettings.prototype, "uploadUrl", void 0), ajax_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], AjaxSettings.prototype, "url", void 0), AjaxSettings;
            }(ej2_base /* ChildProperty */ .rt), contextMenu_settings_extends = (extendStatics2 = function(d, b) {
                return (extendStatics2 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics2(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), contextMenu_settings_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, fileItems = [
                'Open',
                '|',
                'Cut',
                'Copy',
                '|',
                'Delete',
                'Download',
                'Rename',
                '|',
                'Details'
            ], folderItems = [
                'Open',
                '|',
                'Cut',
                'Copy',
                'Paste',
                '|',
                'Delete',
                'Rename',
                'Download',
                '|',
                'Details'
            ], layoutItems = [
                'SortBy',
                'View',
                'Refresh',
                '|',
                'Paste',
                '|',
                'NewFolder',
                'Upload',
                '|',
                'Details',
                '|',
                'SelectAll'
            ], ContextMenuSettings = /** @class */ function(_super) {
                function ContextMenuSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return contextMenu_settings_extends(ContextMenuSettings, _super), contextMenu_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(fileItems)
                ], ContextMenuSettings.prototype, "file", void 0), contextMenu_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(folderItems)
                ], ContextMenuSettings.prototype, "folder", void 0), contextMenu_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(layoutItems)
                ], ContextMenuSettings.prototype, "layout", void 0), contextMenu_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], ContextMenuSettings.prototype, "visible", void 0), ContextMenuSettings;
            }(ej2_base /* ChildProperty */ .rt), details_view_settings_extends = (extendStatics3 = function(d, b) {
                return (extendStatics3 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics3(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), details_view_settings_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, columnArray = [
                {
                    field: 'name',
                    headerText: 'Name',
                    minWidth: 120,
                    template: '<span class="e-fe-text">${name}</span>',
                    customAttributes: {
                        class: 'e-fe-grid-name'
                    }
                },
                {
                    field: '_fm_modified',
                    headerText: 'DateModified',
                    type: 'dateTime',
                    format: 'MMMM dd, yyyy HH:mm',
                    minWidth: 120,
                    width: '190'
                },
                {
                    field: 'size',
                    headerText: 'Size',
                    minWidth: 90,
                    width: '110',
                    template: '<span class="e-fe-size">${size}</span>'
                }
            ], DetailsViewSettings = /** @class */ function(_super) {
                function DetailsViewSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return details_view_settings_extends(DetailsViewSettings, _super), details_view_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], DetailsViewSettings.prototype, "columnResizing", void 0), details_view_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(columnArray)
                ], DetailsViewSettings.prototype, "columns", void 0), DetailsViewSettings;
            }(ej2_base /* ChildProperty */ .rt), navigation_pane_settings_extends = (extendStatics4 = function(d, b) {
                return (extendStatics4 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics4(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), navigation_pane_settings_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, NavigationPaneSettings = /** @class */ function(_super) {
                function NavigationPaneSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return navigation_pane_settings_extends(NavigationPaneSettings, _super), navigation_pane_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('650px')
                ], NavigationPaneSettings.prototype, "maxWidth", void 0), navigation_pane_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('240px')
                ], NavigationPaneSettings.prototype, "minWidth", void 0), navigation_pane_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], NavigationPaneSettings.prototype, "visible", void 0), navigation_pane_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('None')
                ], NavigationPaneSettings.prototype, "sortOrder", void 0), NavigationPaneSettings;
            }(ej2_base /* ChildProperty */ .rt), search_settings_extends = (extendStatics5 = function(d, b) {
                return (extendStatics5 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics5(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), search_settings_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, SearchSettings = /** @class */ function(_super) {
                function SearchSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return search_settings_extends(SearchSettings, _super), search_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], SearchSettings.prototype, "allowSearchOnTyping", void 0), search_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('contains')
                ], SearchSettings.prototype, "filterType", void 0), search_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], SearchSettings.prototype, "ignoreCase", void 0), search_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], SearchSettings.prototype, "placeholder", void 0), SearchSettings;
            }(ej2_base /* ChildProperty */ .rt), toolbar_settings_extends = (extendStatics6 = function(d, b) {
                return (extendStatics6 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics6(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), toolbar_settings_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, toolbarItems = [
                'NewFolder',
                'Upload',
                'Cut',
                'Copy',
                'Paste',
                'Delete',
                'Download',
                'Rename',
                'SortBy',
                'Refresh',
                'Selection',
                'View',
                'Details'
            ], ToolbarSettings = /** @class */ function(_super) {
                function ToolbarSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return toolbar_settings_extends(ToolbarSettings, _super), toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(toolbarItems)
                ], ToolbarSettings.prototype, "items", void 0), toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], ToolbarSettings.prototype, "visible", void 0), ToolbarSettings;
            }(ej2_base /* ChildProperty */ .rt), upload_settings_extends = (extendStatics7 = function(d, b) {
                return (extendStatics7 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics7(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), upload_settings_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, UploadSettings = /** @class */ function(_super) {
                function UploadSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return upload_settings_extends(UploadSettings, _super), upload_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], UploadSettings.prototype, "allowedExtensions", void 0), upload_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], UploadSettings.prototype, "autoUpload", void 0), upload_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], UploadSettings.prototype, "autoClose", void 0), upload_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(0)
                ], UploadSettings.prototype, "minFileSize", void 0), upload_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(30000000)
                ], UploadSettings.prototype, "maxFileSize", void 0), UploadSettings;
            }(ej2_base /* ChildProperty */ .rt), items = __webpack_require__(3276), models_toolbar_settings_extends = (extendStatics8 = function(d, b) {
                return (extendStatics8 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics8(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), models_toolbar_settings_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, toolbar_settings_ToolbarSettings = /** @class */ function(_super) {
                function ToolbarSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return models_toolbar_settings_extends(ToolbarSettings, _super), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], ToolbarSettings.prototype, "enable", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], ToolbarSettings.prototype, "enableFloating", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(base_enum /* ToolbarType.Expand */ .Bv.Expand)
                ], ToolbarSettings.prototype, "type", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(items /* predefinedItems */ .Gf)
                ], ToolbarSettings.prototype, "items", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)({})
                ], ToolbarSettings.prototype, "itemConfigs", void 0), ToolbarSettings;
            }(ej2_base /* ChildProperty */ .rt), ImageSettings = /** @class */ function(_super) {
                function ImageSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return models_toolbar_settings_extends(ImageSettings, _super), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)([
                        '.jpeg',
                        '.jpg',
                        '.png'
                    ])
                ], ImageSettings.prototype, "allowedTypes", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('inline')
                ], ImageSettings.prototype, "display", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('Blob')
                ], ImageSettings.prototype, "saveFormat", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('auto')
                ], ImageSettings.prototype, "width", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('auto')
                ], ImageSettings.prototype, "height", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], ImageSettings.prototype, "saveUrl", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], ImageSettings.prototype, "path", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], ImageSettings.prototype, "resize", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], ImageSettings.prototype, "removeUrl", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(0)
                ], ImageSettings.prototype, "minWidth", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], ImageSettings.prototype, "maxWidth", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(0)
                ], ImageSettings.prototype, "minHeight", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], ImageSettings.prototype, "maxHeight", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], ImageSettings.prototype, "resizeByPercent", void 0), ImageSettings;
            }(ej2_base /* ChildProperty */ .rt), FileManagerSettings = /** @class */ function(_super) {
                function FileManagerSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return models_toolbar_settings_extends(FileManagerSettings, _super), models_toolbar_settings_decorate([
                    (0, ej2_base /* Complex */ .Zz)({
                        getImageUrl: null,
                        url: null,
                        uploadUrl: null
                    }, AjaxSettings)
                ], FileManagerSettings.prototype, "ajaxSettings", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], FileManagerSettings.prototype, "allowDragAndDrop", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Complex */ .Zz)({
                        visible: !0,
                        file: [
                            'Open',
                            '|',
                            'Cut',
                            'Copy',
                            '|',
                            'Delete',
                            'Rename',
                            '|',
                            'Details'
                        ],
                        folder: [
                            'Open',
                            '|',
                            'Cut',
                            'Copy',
                            'Paste',
                            '|',
                            'Delete',
                            'Rename',
                            '|',
                            'Details'
                        ],
                        layout: [
                            'SortBy',
                            'View',
                            'Refresh',
                            '|',
                            'Paste',
                            '|',
                            'NewFolder',
                            'Upload',
                            '|',
                            'Details',
                            '|',
                            'SelectAll'
                        ]
                    }, ContextMenuSettings)
                ], FileManagerSettings.prototype, "contextMenuSettings", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], FileManagerSettings.prototype, "cssClass", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, DetailsViewSettings)
                ], FileManagerSettings.prototype, "detailsViewSettings", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], FileManagerSettings.prototype, "enable", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Complex */ .Zz)({
                        maxWidth: '650px',
                        minWidth: '240px',
                        visible: !0
                    }, NavigationPaneSettings)
                ], FileManagerSettings.prototype, "navigationPaneSettings", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('/')
                ], FileManagerSettings.prototype, "path", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], FileManagerSettings.prototype, "rootAliasName", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, SearchSettings)
                ], FileManagerSettings.prototype, "searchSettings", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], FileManagerSettings.prototype, "showFileExtension", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], FileManagerSettings.prototype, "showHiddenItems", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], FileManagerSettings.prototype, "showThumbnail", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('Ascending')
                ], FileManagerSettings.prototype, "sortOrder", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Complex */ .Zz)({
                        visible: !0,
                        items: [
                            'NewFolder',
                            'Upload',
                            'Cut',
                            'Copy',
                            'Paste',
                            'Delete',
                            'Download',
                            'Rename',
                            'SortBy',
                            'Refresh',
                            'Selection',
                            'View',
                            'Details'
                        ]
                    }, ToolbarSettings)
                ], FileManagerSettings.prototype, "toolbarSettings", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Complex */ .Zz)({
                        autoUpload: !0,
                        minFileSize: 0,
                        maxFileSize: 30000000,
                        allowedExtensions: '',
                        autoClose: !1
                    }, UploadSettings)
                ], FileManagerSettings.prototype, "uploadSettings", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('LargeIcons')
                ], FileManagerSettings.prototype, "view", void 0), FileManagerSettings;
            }(ej2_base /* ChildProperty */ .rt), TableSettings = /** @class */ function(_super) {
                function TableSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return models_toolbar_settings_extends(TableSettings, _super), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('100%')
                ], TableSettings.prototype, "width", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(items /* TableStyleItems */ ._f)
                ], TableSettings.prototype, "styles", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], TableSettings.prototype, "resize", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(0)
                ], TableSettings.prototype, "minWidth", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], TableSettings.prototype, "maxWidth", void 0), TableSettings;
            }(ej2_base /* ChildProperty */ .rt), QuickToolbarSettings = /** @class */ function(_super) {
                function QuickToolbarSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return models_toolbar_settings_extends(QuickToolbarSettings, _super), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], QuickToolbarSettings.prototype, "enable", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], QuickToolbarSettings.prototype, "showOnRightClick", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('hide')
                ], QuickToolbarSettings.prototype, "actionOnScroll", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)([
                        'Open',
                        'Edit',
                        'UnLink'
                    ])
                ], QuickToolbarSettings.prototype, "link", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)([
                        'Replace',
                        'Align',
                        'Caption',
                        'Remove',
                        '-',
                        'InsertLink',
                        'OpenImageLink',
                        'EditImageLink',
                        'RemoveImageLink',
                        'Display',
                        'AltText',
                        'Dimension'
                    ])
                ], QuickToolbarSettings.prototype, "image", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)([
                        'Cut',
                        'Copy',
                        'Paste'
                    ])
                ], QuickToolbarSettings.prototype, "text", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)([
                        'TableHeader',
                        'TableRows',
                        'TableColumns',
                        'BackgroundColor',
                        '-',
                        'TableRemove',
                        'Alignments',
                        'TableCellVerticalAlign',
                        'Styles'
                    ])
                ], QuickToolbarSettings.prototype, "table", void 0), QuickToolbarSettings;
            }(ej2_base /* ChildProperty */ .rt), PasteCleanupSettings = /** @class */ function(_super) {
                function PasteCleanupSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return models_toolbar_settings_extends(PasteCleanupSettings, _super), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], PasteCleanupSettings.prototype, "prompt", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], PasteCleanupSettings.prototype, "deniedAttrs", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)([
                        'background',
                        'background-color',
                        'border',
                        'border-bottom',
                        'border-left',
                        'border-radius',
                        'border-right',
                        'border-style',
                        'border-top',
                        'border-width',
                        'clear',
                        'color',
                        'cursor',
                        'direction',
                        'display',
                        'float',
                        'font',
                        'font-family',
                        'font-size',
                        'font-weight',
                        'font-style',
                        'height',
                        'left',
                        'line-height',
                        'list-style-type',
                        'margin',
                        'margin-top',
                        'margin-left',
                        'margin-right',
                        'margin-bottom',
                        'max-height',
                        'max-width',
                        'min-height',
                        'min-width',
                        'overflow',
                        'overflow-x',
                        'overflow-y',
                        'padding',
                        'padding-bottom',
                        'padding-left',
                        'padding-right',
                        'padding-top',
                        'position',
                        'right',
                        'table-layout',
                        'text-align',
                        'text-decoration',
                        'text-indent',
                        'top',
                        'vertical-align',
                        'visibility',
                        'white-space',
                        'width'
                    ])
                ], PasteCleanupSettings.prototype, "allowedStyleProps", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], PasteCleanupSettings.prototype, "deniedTags", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], PasteCleanupSettings.prototype, "keepFormat", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], PasteCleanupSettings.prototype, "plainText", void 0), PasteCleanupSettings;
            }(ej2_base /* ChildProperty */ .rt), FontFamily = /** @class */ function(_super) {
                function FontFamily() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return models_toolbar_settings_extends(FontFamily, _super), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], FontFamily.prototype, "default", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('65px')
                ], FontFamily.prototype, "width", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(items /* fontFamily */ .I8)
                ], FontFamily.prototype, "items", void 0), FontFamily;
            }(ej2_base /* ChildProperty */ .rt), FontSize = /** @class */ function(_super) {
                function FontSize() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return models_toolbar_settings_extends(FontSize, _super), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], FontSize.prototype, "default", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('35px')
                ], FontSize.prototype, "width", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(items /* fontSize */ .JB)
                ], FontSize.prototype, "items", void 0), FontSize;
            }(ej2_base /* ChildProperty */ .rt), Format = /** @class */ function(_super) {
                function Format() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return models_toolbar_settings_extends(Format, _super), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], Format.prototype, "default", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('65px')
                ], Format.prototype, "width", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(items /* formatItems */ .gk)
                ], Format.prototype, "types", void 0), Format;
            }(ej2_base /* ChildProperty */ .rt), FontColor = /** @class */ function(_super) {
                function FontColor() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return models_toolbar_settings_extends(FontColor, _super), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('#ff0000')
                ], FontColor.prototype, "default", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('Palette')
                ], FontColor.prototype, "mode", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(10)
                ], FontColor.prototype, "columns", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(items /* fontColor */ .B3)
                ], FontColor.prototype, "colorCode", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], FontColor.prototype, "modeSwitcher", void 0), FontColor;
            }(ej2_base /* ChildProperty */ .rt), BackgroundColor = /** @class */ function(_super) {
                function BackgroundColor() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return models_toolbar_settings_extends(BackgroundColor, _super), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('#ffff00')
                ], BackgroundColor.prototype, "default", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)('Palette')
                ], BackgroundColor.prototype, "mode", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(10)
                ], BackgroundColor.prototype, "columns", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(items /* backgroundColor */ .Cz)
                ], BackgroundColor.prototype, "colorCode", void 0), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], BackgroundColor.prototype, "modeSwitcher", void 0), BackgroundColor;
            }(ej2_base /* ChildProperty */ .rt), NumberFormatList = /** @class */ function(_super) {
                function NumberFormatList() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return models_toolbar_settings_extends(NumberFormatList, _super), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(items /* numberFormatList */ .UP)
                ], NumberFormatList.prototype, "types", void 0), NumberFormatList;
            }(ej2_base /* ChildProperty */ .rt), BulletFormatList = /** @class */ function(_super) {
                function BulletFormatList() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return models_toolbar_settings_extends(BulletFormatList, _super), models_toolbar_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(items /* bulletFormatList */ .Ju)
                ], BulletFormatList.prototype, "types", void 0), BulletFormatList;
            }(ej2_base /* ChildProperty */ .rt), iframe_settings_extends = (extendStatics9 = function(d, b) {
                return (extendStatics9 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics9(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), iframe_settings_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, Resources = /** @class */ function(_super) {
                function Resources() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return iframe_settings_extends(Resources, _super), iframe_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)([])
                ], Resources.prototype, "styles", void 0), iframe_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)([])
                ], Resources.prototype, "scripts", void 0), Resources;
            }(ej2_base /* ChildProperty */ .rt), IFrameSettings = /** @class */ function(_super) {
                function IFrameSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return iframe_settings_extends(IFrameSettings, _super), iframe_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], IFrameSettings.prototype, "enable", void 0), iframe_settings_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], IFrameSettings.prototype, "attributes", void 0), iframe_settings_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, Resources)
                ], IFrameSettings.prototype, "resources", void 0), IFrameSettings;
            }(ej2_base /* ChildProperty */ .rt), inline_mode_extends = (extendStatics10 = function(d, b) {
                return (extendStatics10 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics10(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), inline_mode_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, InlineMode = /** @class */ function(_super) {
                function InlineMode() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return inline_mode_extends(InlineMode, _super), inline_mode_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], InlineMode.prototype, "enable", void 0), inline_mode_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], InlineMode.prototype, "onSelection", void 0), InlineMode;
            }(ej2_base /* ChildProperty */ .rt), default_locale = __webpack_require__(8491);
            /**
 * @param {string} htmlAttributes - specifies the string value
 * @param {IRichTextEditor} rte - specifies the rte value
 * @param {boolean} isFrame - specifies the boolean value
 * @param {boolean} initial - specifies the boolean value
 * @returns {void}
 * @hidden
 */ function setAttributes(htmlAttributes, rte, isFrame, initial) {
                var target;
                if (target = isFrame ? rte.contentModule.getDocument().querySelector('body') : rte.element, Object.keys(htmlAttributes).length) for(var _i = 0, _a = Object.keys(htmlAttributes); _i < _a.length; _i++){
                    var htmlAttr = _a[_i];
                    'class' === htmlAttr ? target.classList.add(htmlAttributes[htmlAttr]) : 'disabled' === htmlAttr && 'disabled' === htmlAttributes[htmlAttr] ? (rte.enabled = !1, rte.setEnable()) : 'readonly' === htmlAttr && 'readonly' === htmlAttributes[htmlAttr] ? (rte.readonly = !0, rte.setReadOnly(initial)) : 'style' === htmlAttr ? target.setAttribute('style', htmlAttributes[htmlAttr]) : 'tabindex' === htmlAttr ? rte.inputElement.setAttribute('tabindex', htmlAttributes[htmlAttr]) : 'placeholder' === htmlAttr ? (rte.placeholder = htmlAttributes[htmlAttr], rte.setPlaceHolder()) : [
                        'name',
                        'required'
                    ].indexOf(htmlAttr) > -1 ? rte.valueContainer.setAttribute(htmlAttr, htmlAttributes[htmlAttr]) : target.setAttribute(htmlAttr, htmlAttributes[htmlAttr]);
                }
            }
            /**
 * `FullScreen` module is used to maximize and minimize screen
 */ var FullScreen = /** @class */ function() {
                function FullScreen(parent) {
                    this.parent = parent, this.addEventListener();
                }
                return(/**
     * showFullScreen method
     *
     * @param {MouseEvent} event - specifies the mouse event
     * @returns {void}
     * @hidden

     */ FullScreen.prototype.showFullScreen = function(event) {
                    var _this = this;
                    !0 !== this.parent.toolbarSettings.enable || 'Markdown' === this.parent.editorMode || (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.quickToolbarModule) || this.parent.quickToolbarModule.hideQuickToolbars(), this.scrollableParent = (0, popup /* getScrollableParent */ .Mm)(this.parent.element), this.parent.element.classList.contains(classes /* CLS_FULL_SCREEN */ .GY) || this.parent.trigger(constant /* actionBegin */ .m2, {
                        cancel: !1,
                        requestType: 'Maximize',
                        targetItem: 'Maximize',
                        args: event
                    }, function(beginEventArgs) {
                        if (!beginEventArgs.cancel) {
                            _this.parent.toolbarSettings.enableFloating && !_this.parent.inlineMode.enable && _this.parent.toolbarSettings.enable && (_this.parent.getToolbarElement().style.width = '100%', _this.parent.getToolbarElement().style.top = '0px'), _this.parent.element.classList.add(classes /* CLS_FULL_SCREEN */ .GY), _this.toggleParentOverflow(!0);
                            var isExpand = _this.parent.element.querySelectorAll('.e-toolbar-extended.e-popup-open').length > 0;
                            _this.parent.setContentHeight(null, isExpand), _this.parent.toolbarModule && (_this.parent.getBaseToolbarObject().toolbarObj.items[0].properties || _this.parent.getBaseToolbarObject().toolbarObj.removeItems(0), ej2_base /* Browser.isDevice */ .AR.isDevice && _this.parent.toolbarModule.removeFixedTBarClass(), _this.parent.toolbarModule.updateItem({
                                targetItem: 'Maximize',
                                updateItem: 'Minimize',
                                baseToolbar: _this.parent.getBaseToolbarObject()
                            })), _this.parent.refreshUI(), _this.parent.trigger(constant /* actionComplete */ .i8, {
                                requestType: 'Maximize',
                                targetItem: 'Maximize',
                                args: event
                            });
                        }
                    });
                }, /**
     * hideFullScreen method
     *
     * @param {MouseEvent} event - specifies the mouse event
     * @returns {void}
     * @hidden

     */ FullScreen.prototype.hideFullScreen = function(event) {
                    var _this = this;
                    !0 !== this.parent.toolbarSettings.enable || 'Markdown' === this.parent.editorMode || (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.quickToolbarModule) || this.parent.quickToolbarModule.hideQuickToolbars(), this.parent.element.classList.contains(classes /* CLS_FULL_SCREEN */ .GY) && this.parent.trigger(constant /* actionBegin */ .m2, {
                        cancel: !1,
                        requestType: 'Minimize',
                        targetItem: 'Minimize',
                        args: event
                    }, function(beginEventArgs) {
                        if (!beginEventArgs.cancel) {
                            _this.parent.element.classList.remove(classes /* CLS_FULL_SCREEN */ .GY);
                            for(var elem = document.querySelectorAll('.e-rte-overflow'), i = 0; i < elem.length; i++)(0, ej2_base /* removeClass */ .IV)([
                                elem[i]
                            ], [
                                'e-rte-overflow'
                            ]);
                            var isExpand = _this.parent.element.querySelectorAll('.e-toolbar-extended.e-popup-open').length > 0;
                            _this.parent.setContentHeight(null, isExpand), _this.parent.toolbarModule && (_this.parent.getBaseToolbarObject().toolbarObj.items[0].properties || _this.parent.getBaseToolbarObject().toolbarObj.removeItems(0), _this.parent.toolbarModule.updateItem({
                                targetItem: 'Minimize',
                                updateItem: 'Maximize',
                                baseToolbar: _this.parent.getBaseToolbarObject()
                            }), ej2_base /* Browser.isDevice */ .AR.isDevice && _this.parent.inlineMode.enable && _this.parent.toolbarModule.addFixedTBarClass()), _this.parent.trigger(constant /* actionComplete */ .i8, {
                                requestType: 'Minimize',
                                targetItem: 'Minimize',
                                args: event
                            });
                        }
                    });
                }, // eslint-disable-next-line
                FullScreen.prototype.toggleParentOverflow = function(isAdd) {
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.scrollableParent)) for(var i = 0; i < this.scrollableParent.length; i++)if ('#document' === this.scrollableParent[i].nodeName) {
                        var elem = document.querySelector('body');
                        (0, ej2_base /* addClass */ .cn)([
                            elem
                        ], [
                            'e-rte-overflow'
                        ]);
                    } else {
                        var elem = this.scrollableParent[i];
                        (0, ej2_base /* addClass */ .cn)([
                            elem
                        ], [
                            'e-rte-overflow'
                        ]);
                    }
                }, FullScreen.prototype.onKeyDown = function(event) {
                    var originalEvent = event.args;
                    switch(originalEvent.action){
                        case 'full-screen':
                            this.showFullScreen(event.args), originalEvent.preventDefault();
                            break;
                        case 'escape':
                            this.hideFullScreen(event.args), originalEvent.preventDefault();
                    }
                }, FullScreen.prototype.addEventListener = function() {
                    this.parent.on(constant /* keyDown */ .QG, this.onKeyDown, this), this.parent.on(constant /* destroy */ .ob, this.destroy, this), this.parent.on(constant /* moduleDestroy */ .P0, this.moduleDestroy, this);
                }, FullScreen.prototype.removeEventListener = function() {
                    this.parent.off(constant /* keyDown */ .QG, this.onKeyDown), this.parent.off(constant /* destroy */ .ob, this.destroy), this.parent.off(constant /* moduleDestroy */ .P0, this.moduleDestroy);
                }, /**
     * destroy method
     *
     * @returns {void}
     * @hidden

     */ FullScreen.prototype.destroy = function() {
                    this.parent.element.classList.contains(classes /* CLS_FULL_SCREEN */ .GY) && this.toggleParentOverflow(!1);
                    for(var elem = document.querySelectorAll('.e-rte-overflow'), i = 0; i < elem.length; i++)(0, ej2_base /* removeClass */ .IV)([
                        elem[i]
                    ], [
                        'e-rte-overflow'
                    ]);
                    this.removeEventListener();
                }, FullScreen.prototype.moduleDestroy = function() {
                    this.parent = null;
                }, FullScreen);
            }(), EnterKeyAction = /** @class */ function() {
                function EnterKeyAction(parent) {
                    this.parent = parent, this.addEventListener();
                }
                return EnterKeyAction.prototype.addEventListener = function() {
                    this.parent.on(constant /* enterHandler */ .dp, this.enterHandler, this), this.parent.on(constant /* destroy */ .ob, this.destroy, this), this.parent.on(constant /* moduleDestroy */ .P0, this.moduleDestroy, this);
                }, EnterKeyAction.prototype.destroy = function() {
                    this.removeEventListener();
                }, EnterKeyAction.prototype.moduleDestroy = function() {
                    this.parent = null;
                }, EnterKeyAction.prototype.removeEventListener = function() {
                    this.parent.off(constant /* enterHandler */ .dp, this.enterHandler), this.parent.off(constant /* destroy */ .ob, this.destroy), this.parent.off(constant /* moduleDestroy */ .P0, this.moduleDestroy);
                }, EnterKeyAction.prototype.getRangeNode = function() {
                    this.range = this.parent.getRange(), this.startNode = '#text' === this.range.startContainer.nodeName ? this.range.startContainer.parentElement : this.range.startContainer, this.endNode = '#text' === this.range.endContainer.nodeName ? this.range.endContainer.parentElement : this.range.endContainer;
                }, EnterKeyAction.prototype.enterHandler = function(e) {
                    var _this = this;
                    this.getRangeNode();
                    var isTableEnter = !0;
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.startNode.closest('TABLE')) && !(0, ej2_base /* isNullOrUndefined */ .le)(this.endNode.closest('TABLE'))) {
                        isTableEnter = !1;
                        for(var curElement = this.startNode, blockElement = curElement; !this.parent.formatter.editorManager.domNode.isBlockNode(curElement);)blockElement = curElement, curElement = curElement.parentElement;
                        isTableEnter = 'TD' !== blockElement.tagName && 'TBODY' !== blockElement.tagName;
                    }
                    if (13 === e.args.which && 'Enter' === e.args.code && (0, ej2_base /* isNullOrUndefined */ .le)(this.startNode.closest('LI')) && (0, ej2_base /* isNullOrUndefined */ .le)(this.endNode.closest('LI')) && isTableEnter && (0, ej2_base /* isNullOrUndefined */ .le)(this.startNode.closest('PRE')) && (0, ej2_base /* isNullOrUndefined */ .le)(this.endNode.closest('PRE'))) {
                        var shiftKey_1 = e.args.shiftKey, actionBeginArgs = {
                            cancel: !1,
                            name: constant /* actionBegin */ .m2,
                            requestType: shiftKey_1 ? 'ShiftEnterAction' : 'EnterAction',
                            originalEvent: e.args
                        };
                        this.parent.trigger(constant /* actionBegin */ .m2, actionBeginArgs, function(actionBeginArgs) {
                            if (!actionBeginArgs.cancel) {
                                if (!(_this.range.startOffset === _this.range.endOffset && _this.range.startContainer === _this.range.endContainer)) {
                                    if (_this.range.deleteContents(), '#text' === _this.range.startContainer.nodeName && 0 === _this.range.startContainer.textContent.length && _this.range.startContainer.parentElement !== _this.parent.inputElement) 'BR' === _this.parent.enterKey ? _this.range.startContainer.parentElement.innerHTML = '&#8203;' : _this.range.startContainer.parentElement.innerHTML = '<br>';
                                    else if (_this.range.startContainer === _this.parent.inputElement && '' === _this.range.startContainer.innerHTML) {
                                        _this.range.startContainer.innerHTML = '<br>';
                                        var focusElem = _this.range.startContainer.childNodes[_this.range.startOffset];
                                        _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), focusElem, 0);
                                    } else if (_this.parent.inputElement === _this.range.startContainer) {
                                        var focusElem = _this.range.startContainer.childNodes[_this.range.startOffset];
                                        if ('#text' === focusElem.nodeName && 0 === focusElem.textContent.length) _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), focusElem, focusElem.previousSibling.textContent.length);
                                        else if (_this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), focusElem, focusElem.textContent.length >= 0 ? 0 : 1), 0 === focusElem.previousSibling.textContent.length) (0, ej2_base /* detach */ .og)(focusElem.previousSibling);
                                        else if (0 === focusElem.textContent.length) {
                                            for(var currentFocusElem = focusElem.previousSibling.lastChild; '#text' !== currentFocusElem.nodeName;)currentFocusElem = currentFocusElem.lastChild;
                                            _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), currentFocusElem, currentFocusElem.textContent.length), (0, ej2_base /* detach */ .og)(focusElem);
                                        } else if ('BR' !== _this.parent.enterKey && 0 !== focusElem.previousSibling.textContent.length && 0 !== focusElem.textContent.length) {
                                            e.args.preventDefault();
                                            return;
                                        }
                                        _this.getRangeNode();
                                    }
                                }
                                if (_this.range.startContainer === _this.range.endContainer && _this.range.startOffset === _this.range.endOffset && _this.range.startContainer === _this.parent.inputElement && (_this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), _this.range.startContainer.childNodes[_this.range.startOffset], 0), _this.getRangeNode()), 'P' === _this.parent.enterKey && !shiftKey_1 || 'DIV' === _this.parent.enterKey && !shiftKey_1 || 'P' === _this.parent.shiftEnterKey && shiftKey_1 || 'DIV' === _this.parent.shiftEnterKey && shiftKey_1) {
                                    var nearBlockNode = void 0;
                                    nearBlockNode = isTableEnter && _this.parent.formatter.editorManager.domNode.isBlockNode(_this.startNode) ? _this.startNode : _this.parent.formatter.editorManager.domNode.blockParentNode(_this.startNode);
                                    var isImageNode = !1, isFocusedFirst = !1;
                                    if (0 != _this.range.startOffset && 0 != _this.range.endOffset && _this.range.startContainer === _this.range.endContainer && ((0, ej2_base /* isNullOrUndefined */ .le)(nearBlockNode.childNodes[0]) || 'IMG' !== nearBlockNode.childNodes[0].nodeName)) {
                                        var splitFirstText = _this.range.startContainer.textContent.substring(0, _this.range.startOffset);
                                        160 != splitFirstText.charCodeAt(_this.range.startOffset - 1) && 0 === splitFirstText.trim().length && (isFocusedFirst = !0);
                                    } else 0 === _this.range.startOffset && 0 === _this.range.endOffset && (isFocusedFirst = !0);
                                    if (_this.removeBRElement(nearBlockNode), (-1 == ej2_base /* Browser.userAgent.indexOf */ .AR.userAgent.indexOf('Firefox') || 0 !== _this.range.startOffset || _this.range.startContainer !== _this.range.endContainer || '#text' !== _this.range.startContainer.nodeName || _this.parent.formatter.editorManager.domNode.isBlockNode(_this.range.startContainer.previousSibling) || _this.range.startContainer.parentElement !== _this.range.startContainer.previousSibling.parentElement) && (0 === _this.range.startOffset && 0 === _this.range.endOffset || isFocusedFirst) && ((0, ej2_base /* isNullOrUndefined */ .le)(_this.range.startContainer.previousSibling) || 'IMG' !== _this.range.startContainer.previousSibling.nodeName && 'BR' !== _this.range.startContainer.previousSibling.nodeName)) {
                                        var isNearBlockLengthZero = void 0, newElem = void 0;
                                        'IMG' === _this.range.startContainer.nodeName ? (newElem = _this.createInsertElement(shiftKey_1), isImageNode = !0, isNearBlockLengthZero = !1) : 0 !== nearBlockNode.textContent.trim().length || 'IMG' === nearBlockNode.childNodes[0].nodeName ? (newElem = _this.parent.formatter.editorManager.nodeCutter.SplitNode(_this.range, nearBlockNode, !1).cloneNode(!0), isNearBlockLengthZero = !1) : (newElem = _this.parent.formatter.editorManager.nodeCutter.SplitNode(_this.range, nearBlockNode, !0).cloneNode(!0), isNearBlockLengthZero = !0);
                                        for(var insertElem = _this.createInsertElement(shiftKey_1); newElem.firstChild;)insertElem.appendChild(newElem.firstChild);
                                        if (nearBlockNode.parentElement.insertBefore(insertElem, nearBlockNode), !isNearBlockLengthZero) {
                                            for(var currentFocusElem = insertElem, finalFocusElem = void 0; !(0, ej2_base /* isNullOrUndefined */ .le)(currentFocusElem) && '#text' !== currentFocusElem.nodeName;)finalFocusElem = currentFocusElem, currentFocusElem = currentFocusElem.lastChild;
                                            finalFocusElem.innerHTML = '<br>', isImageNode || (0, ej2_base /* detach */ .og)(nearBlockNode);
                                        }
                                        _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), insertElem.nextElementSibling, 0);
                                    } else if (0 === nearBlockNode.textContent.length && ((0, ej2_base /* isNullOrUndefined */ .le)(nearBlockNode.childNodes[0]) || 'IMG' !== nearBlockNode.childNodes[0].nodeName)) {
                                        if ((0, ej2_base /* isNullOrUndefined */ .le)(nearBlockNode.children[0]) || 'BR' === nearBlockNode.children[0].tagName) {
                                            var insertElem = _this.createInsertElement(shiftKey_1);
                                            insertElem.innerHTML = '<br>', _this.parent.formatter.editorManager.domNode.insertAfter(insertElem, nearBlockNode), _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), insertElem, 0);
                                        } else {
                                            var newElem = _this.parent.formatter.editorManager.nodeCutter.SplitNode(_this.range, nearBlockNode, !1).cloneNode(!0);
                                            _this.parent.formatter.editorManager.domNode.insertAfter(newElem, nearBlockNode), _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), newElem, newElem.textContent.length >= 0 ? 0 : 1);
                                        }
                                    } else {
                                        var newElem = _this.parent.formatter.editorManager.nodeCutter.SplitNode(_this.range, nearBlockNode, !0);
                                        if ((0, ej2_base /* isNullOrUndefined */ .le)(newElem.childNodes[0]) || '#text' !== newElem.childNodes[0].nodeName || 0 !== newElem.childNodes[0].textContent.length || (0, ej2_base /* detach */ .og)(newElem.childNodes[0]), 0 === newElem.textContent.trim().length) {
                                            var brElm = _this.parent.createElement('br');
                                            if ('A' === _this.startNode.nodeName) {
                                                var startParentElem = _this.startNode.parentElement;
                                                _this.startNode.parentElement.insertBefore(brElm, _this.startNode), (0, ej2_base /* detach */ .og)(_this.startNode), _this.startNode = startParentElem;
                                            } else _this.startNode.appendChild(brElm);
                                            '\n' === newElem.childNodes[0].textContent && (0, ej2_base /* detach */ .og)(newElem.childNodes[0]), _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), _this.startNode, 0);
                                        }
                                        if (('P' === _this.parent.enterKey || 'DIV' === _this.parent.enterKey) && !shiftKey_1 || ('DIV' === _this.parent.shiftEnterKey || 'P' === _this.parent.shiftEnterKey) && shiftKey_1) {
                                            for(var insertElm = _this.createInsertElement(shiftKey_1); newElem.firstChild;)insertElm.appendChild(newElem.firstChild);
                                            _this.parent.formatter.editorManager.domNode.insertAfter(insertElm, newElem), (0, ej2_base /* detach */ .og)(newElem), _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), _this.parent.formatter.editorManager.domNode.isBlockNode(_this.startNode) ? insertElm : _this.startNode, 0);
                                        }
                                    }
                                    e.args.preventDefault();
                                }
                                if ('BR' === _this.parent.enterKey && !shiftKey_1 || 'BR' === _this.parent.shiftEnterKey && shiftKey_1) {
                                    var currentParent = void 0;
                                    if (_this.parent.formatter.editorManager.domNode.isBlockNode(_this.startNode)) currentParent = _this.startNode;
                                    else {
                                        for(var currentNode = _this.startNode, previousNode = currentNode; !_this.parent.formatter.editorManager.domNode.isBlockNode(currentNode);)previousNode = currentNode, currentNode = currentNode.parentElement;
                                        currentParent = currentNode === _this.parent.inputElement ? previousNode : currentNode;
                                    }
                                    _this.removeBRElement(currentParent);
                                    for(var currentParentLastChild = currentParent.lastChild; !(0, ej2_base /* isNullOrUndefined */ .le)(currentParentLastChild) && !('#text' === currentParentLastChild.nodeName || 'BR' === currentParentLastChild.nodeName);)currentParentLastChild = currentParentLastChild.lastChild;
                                    var isLastNodeLength = _this.range.startContainer === currentParentLastChild ? _this.range.startContainer.textContent.length : currentParent.textContent.length;
                                    if (currentParent !== _this.parent.inputElement && _this.parent.formatter.editorManager.domNode.isBlockNode(currentParent) && _this.range.startOffset === _this.range.endOffset && _this.range.startOffset === isLastNodeLength) {
                                        var focusBRElem = _this.parent.createElement('br');
                                        if ('BR' === currentParentLastChild.nodeName && 0 === currentParent.textContent.length) _this.parent.formatter.editorManager.domNode.insertAfter(focusBRElem, currentParentLastChild);
                                        else {
                                            var lineBreakBRElem = _this.parent.createElement('br');
                                            _this.parent.formatter.editorManager.domNode.insertAfter(focusBRElem, _this.range.startContainer), _this.parent.formatter.editorManager.domNode.insertAfter(lineBreakBRElem, _this.range.startContainer);
                                        }
                                        _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), focusBRElem, 0);
                                    } else if ((0, ej2_base /* isNullOrUndefined */ .le)(currentParent) || currentParent === _this.parent.inputElement || 'BR' === currentParent.nodeName) _this.insertBRElement();
                                    else if (0 === currentParent.textContent.trim().length || 1 === currentParent.textContent.trim().length && 8203 === currentParent.textContent.charCodeAt(0)) {
                                        var newElem = _this.parent.formatter.editorManager.nodeCutter.SplitNode(_this.range, currentParent, !0).cloneNode(!0);
                                        _this.parent.formatter.editorManager.domNode.insertAfter(newElem, currentParent);
                                        var outerBRElem = _this.parent.createElement('br');
                                        newElem.parentElement.insertBefore(outerBRElem, newElem), _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), newElem, 0);
                                    } else {
                                        var newElem = void 0, outerBRElem = _this.parent.createElement('br');
                                        if (0 !== _this.range.startOffset || 0 !== _this.range.endOffset || (0, ej2_base /* isNullOrUndefined */ .le)(currentParent.previousSibling) || 'BR' !== currentParent.previousSibling.nodeName) _this.insertBRElement();
                                        else {
                                            newElem = _this.parent.formatter.editorManager.nodeCutter.SplitNode(_this.range, currentParent, !1).cloneNode(!0), _this.parent.formatter.editorManager.domNode.insertAfter(outerBRElem, currentParent), _this.insertFocusContent();
                                            for(var currentFocusElem = outerBRElem.nextSibling; !(0, ej2_base /* isNullOrUndefined */ .le)(currentFocusElem) && '#text' !== currentFocusElem.nodeName;)currentFocusElem = currentFocusElem.lastChild;
                                            _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), currentFocusElem, 0);
                                        }
                                    }
                                    e.args.preventDefault();
                                }
                                _this.parent.trigger(constant /* actionComplete */ .i8, {
                                    requestType: shiftKey_1 ? 'ShiftEnterAction' : 'EnterAction',
                                    args: e.args
                                });
                            }
                        });
                    }
                }, EnterKeyAction.prototype.removeBRElement = function(currentElement) {
                    -1 != ej2_base /* Browser.userAgent.indexOf */ .AR.userAgent.indexOf('Firefox') && this.range.endOffset === currentElement.textContent.length && (0 !== currentElement.textContent.length || currentElement.querySelectorAll('BR').length > 1) && !(0, ej2_base /* isNullOrUndefined */ .le)(currentElement.lastChild) && 'BR' === currentElement.lastChild.nodeName && (0, ej2_base /* detach */ .og)(currentElement.lastChild);
                }, EnterKeyAction.prototype.insertBRElement = function() {
                    var isEmptyBrInserted = !1, brElm = this.parent.createElement('br');
                    if ('BR' === this.startNode.nodeName && 'BR' === this.endNode.nodeName && 0 === this.range.startOffset && this.range.startOffset === this.range.endOffset ? (this.parent.formatter.editorManager.domNode.insertAfter(brElm, this.startNode), isEmptyBrInserted = !0) : (this.startNode !== this.parent.inputElement || (0, ej2_base /* isNullOrUndefined */ .le)(this.range.startContainer.previousSibling) || 'BR' !== this.range.startContainer.previousSibling.nodeName || 0 !== this.range.startContainer.textContent.length || (isEmptyBrInserted = !0), this.range.insertNode(brElm)), isEmptyBrInserted || !(0, ej2_base /* isNullOrUndefined */ .le)(brElm.nextElementSibling) && 'BR' === brElm.nextElementSibling.tagName || !(0, ej2_base /* isNullOrUndefined */ .le)(brElm.nextSibling) && brElm.nextSibling.textContent.length > 0) this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), (0, ej2_base /* isNullOrUndefined */ .le)(brElm.nextSibling) ? brElm : brElm.nextSibling, 0), isEmptyBrInserted = !1;
                    else {
                        var brElm2 = this.parent.createElement('br');
                        this.range.insertNode(brElm2), this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), brElm, 0);
                    }
                }, EnterKeyAction.prototype.insertFocusContent = function() {
                    0 === this.range.startContainer.textContent.length && ('#text' === this.range.startContainer.nodeName ? this.range.startContainer.parentElement.innerHTML = '&#8203;' : this.range.startContainer.innerHTML = '&#8203;');
                }, EnterKeyAction.prototype.createInsertElement = function(shiftKey) {
                    var insertElem;
                    return 'DIV' === this.parent.enterKey && !shiftKey || 'DIV' === this.parent.shiftEnterKey && shiftKey ? insertElem = this.parent.createElement('div') : ('P' === this.parent.enterKey && !shiftKey || 'P' === this.parent.shiftEnterKey && shiftKey) && (insertElem = this.parent.createElement('p')), insertElem;
                }, EnterKeyAction;
            }(), util = __webpack_require__(5932), button_button = __webpack_require__(78), elementClass = [
                'north-west',
                'north',
                'north-east',
                'west',
                'east',
                'south-west',
                'south',
                'south-east'
            ], RESIZE_HANDLER = 'e-resize-handle', FOCUSED_HANDLER = 'e-focused-handle', RESTRICT_LEFT = [
                'e-restrict-left'
            ], RESIZE_WITHIN_VIEWPORT = 'e-resize-viewport', dialogBorderResize = [
                'north',
                'west',
                'east',
                'south'
            ], originalWidth = 0, originalHeight = 0, originalX = 0, originalY = 0, originalMouseX = 0, originalMouseY = 0, resizeStart = null, resize = null, resizeEnd = null, setLeft = !0, previousWidth = 0, setWidth = !0;
            /**
 *
 * @param {string} element - specifies the element
 * @returns {HTMLElement} - returns the element
 */ function getDOMElement(element) {
                var domElement;
                return (0, ej2_base /* isNullOrUndefined */ .le)(element) || (domElement = 'string' == typeof element ? document.querySelector(element) : element), domElement;
            }
            // eslint-disable-next-line
            function wireEvents(args) {
                (0, ej2_base /* isNullOrUndefined */ .le)(args) && (args = this);
                for(var resizers = targetElement.querySelectorAll('.' + RESIZE_HANDLER), i = 0; i < resizers.length; i++){
                    selectedHandler = resizers[i], ej2_base /* EventHandler.add */ .bi.add(selectedHandler, 'mousedown', onMouseDown, args);
                    var eventName = 'msie' === ej2_base /* Browser.info.name */ .AR.info.name ? 'pointerdown' : 'touchstart';
                    ej2_base /* EventHandler.add */ .bi.add(selectedHandler, eventName, onTouchStart, args);
                }
                var borderResizers = targetElement.querySelectorAll('.e-dialog-border-resize');
                if (!(0, ej2_base /* isNullOrUndefined */ .le)(borderResizers)) for(var i = 0; i < borderResizers.length; i++){
                    selectedHandler = borderResizers[i], ej2_base /* EventHandler.add */ .bi.add(selectedHandler, 'mousedown', onMouseDown, args);
                    var eventName = 'msie' === ej2_base /* Browser.info.name */ .AR.info.name ? 'pointerdown' : 'touchstart';
                    ej2_base /* EventHandler.add */ .bi.add(selectedHandler, eventName, onTouchStart, args);
                }
            }
            /* istanbul ignore next */ /**
 *
 * @param {string} e - specifies the string
 * @returns {string} - returns the string
 */ function getEventType(e) {
                return e.indexOf('mouse') > -1 ? 'mouse' : 'touch';
            }
            /* istanbul ignore next */ /**
 *
 * @param {MouseEvent} e - specifies the mouse event
 * @returns {void}
 */ function onMouseDown(e) {
                if (e.preventDefault(), targetElement = e.target.parentElement, calculateValues(), originalMouseX = e.pageX, originalMouseY = e.pageY, e.target.classList.add(FOCUSED_HANDLER), (0, ej2_base /* isNullOrUndefined */ .le)(resizeStart) || (proxy = this, !0 !== resizeStart(e, proxy))) {
                    this.targetEle && targetElement && targetElement.querySelector(".e-dlg-resizable") && (this.target, containerElement = null, maxWidth = this.targetEle.clientWidth, maxHeight = this.targetEle.clientHeight);
                    var target = (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) ? document : containerElement;
                    ej2_base /* EventHandler.add */ .bi.add(target, 'mousemove', onMouseMove, this), ej2_base /* EventHandler.add */ .bi.add(document, 'mouseup', onMouseUp, this);
                    for(var i = 0; i < RESTRICT_LEFT.length; i++)setLeft = !targetElement.classList.contains(RESTRICT_LEFT[i]);
                }
            }
            /* istanbul ignore next */ /**
 *
 * @param {MouseEvent} e - specifies the event
 * @returns {void}
 */ function onMouseUp(e) {
                var touchMoveEvent = 'msie' === ej2_base /* Browser.info.name */ .AR.info.name ? 'pointermove' : 'touchmove', touchEndEvent = 'msie' === ej2_base /* Browser.info.name */ .AR.info.name ? 'pointerup' : 'touchend', target = (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) ? document : containerElement, eventName = 'msie' === ej2_base /* Browser.info.name */ .AR.info.name ? 'pointerdown' : 'touchstart';
                ej2_base /* EventHandler.remove */ .bi.remove(target, 'mousemove', onMouseMove), ej2_base /* EventHandler.remove */ .bi.remove(target, touchMoveEvent, onMouseMove), ej2_base /* EventHandler.remove */ .bi.remove(target, eventName, onMouseMove), (0, ej2_base /* isNullOrUndefined */ .le)(document.body.querySelector('.' + FOCUSED_HANDLER)) || document.body.querySelector('.' + FOCUSED_HANDLER).classList.remove(FOCUSED_HANDLER), (0, ej2_base /* isNullOrUndefined */ .le)(resizeEnd) || (proxy = this, resizeEnd(e, proxy)), ej2_base /* EventHandler.remove */ .bi.remove(document, 'mouseup', onMouseUp), ej2_base /* EventHandler.remove */ .bi.remove(document, touchEndEvent, onMouseUp);
            }
            /* istanbul ignore next */ /**
 * @returns {void}
 */ function calculateValues() {
                originalWidth = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('width').replace('px', '')), originalHeight = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('height').replace('px', '')), originalX = targetElement.getBoundingClientRect().left, originalY = targetElement.getBoundingClientRect().top;
            }
            /* istanbul ignore next */ /**
 *
 * @param {MouseEvent} e - specifies the event
 * @returns {void}
 */ function onTouchStart(e) {
                targetElement = e.target.parentElement, calculateValues();
                var coordinates = e.touches ? e.changedTouches[0] : e;
                if (originalMouseX = coordinates.pageX, originalMouseY = coordinates.pageY, (0, ej2_base /* isNullOrUndefined */ .le)(resizeStart) || (proxy = this, !0 !== resizeStart(e, proxy))) {
                    var touchMoveEvent = 'msie' === ej2_base /* Browser.info.name */ .AR.info.name ? 'pointermove' : 'touchmove', touchEndEvent = 'msie' === ej2_base /* Browser.info.name */ .AR.info.name ? 'pointerup' : 'touchend', target = (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) ? document : containerElement;
                    ej2_base /* EventHandler.add */ .bi.add(target, touchMoveEvent, onMouseMove, this), ej2_base /* EventHandler.add */ .bi.add(document, touchEndEvent, onMouseUp);
                }
            }
            /* istanbul ignore next */ /**
 *
 * @param {MouseEvent} e - specifies the event
 * @returns {void}
 */ function onMouseMove(e) {
                if (e.target.classList.contains(RESIZE_HANDLER) && e.target.classList.contains(FOCUSED_HANDLER) ? selectedHandler = e.target : (0, ej2_base /* isNullOrUndefined */ .le)(document.body.querySelector('.' + FOCUSED_HANDLER)) || (selectedHandler = document.body.querySelector('.' + FOCUSED_HANDLER)), !(0, ej2_base /* isNullOrUndefined */ .le)(selectedHandler)) {
                    for(var resizeTowards = '', i = 0; i < elementClass.length; i++)selectedHandler.classList.contains('e-' + elementClass[i]) && (resizeTowards = elementClass[i]);
                    switch((0, ej2_base /* isNullOrUndefined */ .le)(resize) || (proxy = this, resize(e, proxy)), resizeTowards){
                        case 'south':
                            resizeSouth(e);
                            break;
                        case 'north':
                            resizeNorth(e);
                            break;
                        case 'west':
                            resizeWest(e);
                            break;
                        case 'east':
                            resizeEast(e);
                            break;
                        case 'south-east':
                            resizeSouth(e), resizeEast(e);
                            break;
                        case 'south-west':
                            resizeSouth(e), resizeWest(e);
                            break;
                        case 'north-east':
                            resizeNorth(e), resizeEast(e);
                            break;
                        case 'north-west':
                            resizeNorth(e), resizeWest(e);
                    }
                }
            }
            /* istanbul ignore next */ /**
 *
 * @param {HTMLElement} element - specifies the eleemnt
 * @returns {ClientRect} - returns the client
 */ function getClientRectValues(element) {
                return element.getBoundingClientRect();
            }
            /* istanbul ignore next */ // eslint-disable-next-line
            function resizeSouth(e) {
                var containerRectValues, documentHeight = document.documentElement.clientHeight, calculateValue = !1, currentpageY = (e.touches ? e.changedTouches[0] : e).pageY, targetRectValues = getClientRectValues(targetElement);
                (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) || (containerRectValues = getClientRectValues(containerElement)), (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) ? (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) && (documentHeight - currentpageY >= 0 || targetRectValues.top < 0) && (calculateValue = !0) : calculateValue = !0;
                var calculatedHeight = originalHeight + (currentpageY - originalMouseY);
                calculatedHeight = calculatedHeight > minHeight ? calculatedHeight : minHeight;
                var containerTop = 0;
                (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) || (containerTop = containerRectValues.top);
                var borderValue = (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) ? 0 : containerElement.offsetHeight - containerElement.clientHeight, topWithoutborder = targetRectValues.top - containerTop - borderValue / 2;
                if (topWithoutborder = topWithoutborder < 0 ? 0 : topWithoutborder, targetRectValues.top > 0 && topWithoutborder + calculatedHeight > maxHeight) {
                    if (calculateValue = !1, targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) return;
                    targetElement.style.height = maxHeight - parseInt(topWithoutborder.toString(), 10) + 'px';
                    return;
                }
                var targetTop = 0;
                if (calculateValue) {
                    targetRectValues.top < 0 && documentHeight + (targetRectValues.height + targetRectValues.top) > 0 && calculatedHeight + (targetTop = targetRectValues.top) <= 30 && (calculatedHeight = targetRectValues.height - (targetRectValues.height + targetRectValues.top) + 30), calculatedHeight + targetRectValues.top >= maxHeight && (targetElement.style.height = targetRectValues.height + (documentHeight - (targetRectValues.height + targetRectValues.top)) + 'px');
                    var calculatedTop = (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) ? targetTop : topWithoutborder;
                    calculatedHeight >= minHeight && calculatedHeight + calculatedTop <= maxHeight && (targetElement.style.height = calculatedHeight + 'px');
                }
            }
            /* istanbul ignore next */ // eslint-disable-next-line
            function resizeNorth(e) {
                var boundaryRectValues, calculateValue = !1, pageY = 'mouse' === getEventType(e.type) ? e.pageY : e.touches[0].pageY, targetRectValues = getClientRectValues(targetElement);
                (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) || (boundaryRectValues = getClientRectValues(containerElement)), !(0, ej2_base /* isNullOrUndefined */ .le)(containerElement) && targetRectValues.top - boundaryRectValues.top > 0 ? calculateValue = !0 : (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) && pageY > 0 && (calculateValue = !0);
                var currentHeight = originalHeight - (pageY - originalMouseY);
                if (calculateValue && currentHeight >= minHeight && currentHeight <= maxHeight) {
                    var containerTop = 0;
                    (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) || (containerTop = boundaryRectValues.top);
                    var top_1 = originalY - containerTop + (pageY - originalMouseY);
                    top_1 = top_1 > 0 ? top_1 : 1, targetElement.style.height = currentHeight + 'px', targetElement.style.top = top_1 + 'px';
                }
            }
            /* istanbul ignore next */ // eslint-disable-next-line
            function resizeWest(e) {
                var rectValues, documentWidth = document.documentElement.clientWidth, calculateValue = !1;
                (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) || (rectValues = getClientRectValues(containerElement));
                var pageX = 'mouse' === getEventType(e.type) ? e.pageX : e.touches[0].pageX, targetRectValues = getClientRectValues(targetElement), borderValue = (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) ? 0 : containerElement.offsetWidth - containerElement.clientWidth, left = (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) ? 0 : rectValues.left, containerWidth = (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) ? 0 : rectValues.width;
                (0, ej2_base /* isNullOrUndefined */ .le)(resizeWestWidth) && ((0, ej2_base /* isNullOrUndefined */ .le)(containerElement) ? resizeWestWidth = documentWidth : (resizeWestWidth = targetRectValues.left - left - borderValue / 2 + targetRectValues.width, resizeWestWidth += containerWidth - borderValue - resizeWestWidth)), !(0, ej2_base /* isNullOrUndefined */ .le)(containerElement) && Math.floor(targetRectValues.left - rectValues.left + targetRectValues.width + (rectValues.right - targetRectValues.right)) - borderValue <= maxWidth ? calculateValue = !0 : (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) && pageX >= 0 && (calculateValue = !0);
                var calculatedWidth = originalWidth - (pageX - originalMouseX);
                if (setLeft && (calculatedWidth = calculatedWidth > resizeWestWidth ? resizeWestWidth : calculatedWidth), calculateValue && calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {
                    var containerLeft = 0;
                    (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) || (containerLeft = rectValues.left);
                    var left_1 = originalX - containerLeft + (pageX - originalMouseX);
                    left_1 = left_1 > 0 ? left_1 : 1, calculatedWidth !== previousWidth && setWidth && (targetElement.style.width = calculatedWidth + 'px'), setLeft && (targetElement.style.left = left_1 + 'px', setWidth = 1 !== left_1);
                }
                previousWidth = calculatedWidth;
            }
            /* istanbul ignore next */ // eslint-disable-next-line
            function resizeEast(e) {
                var containerRectValues, documentWidth = document.documentElement.clientWidth, calculateValue = !1;
                (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) || (containerRectValues = getClientRectValues(containerElement));
                var pageX = (e.touches ? e.changedTouches[0] : e).pageX, targetRectValues = getClientRectValues(targetElement);
                !(0, ej2_base /* isNullOrUndefined */ .le)(containerElement) && (targetRectValues.left - containerRectValues.left + targetRectValues.width <= maxWidth || targetRectValues.right - containerRectValues.left >= targetRectValues.width) ? calculateValue = !0 : (0, ej2_base /* isNullOrUndefined */ .le)(containerElement) && documentWidth - pageX > 0 && (calculateValue = !0);
                var calculatedWidth = originalWidth + (pageX - originalMouseX), containerLeft = 0;
                if ((0, ej2_base /* isNullOrUndefined */ .le)(containerElement) || (containerLeft = containerRectValues.left), targetRectValues.left - containerLeft + calculatedWidth > maxWidth) {
                    if (calculateValue = !1, targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) return;
                    targetElement.style.width = maxWidth - (targetRectValues.left - containerLeft) + 'px';
                }
                calculateValue && calculatedWidth >= minWidth && calculatedWidth <= maxWidth && (targetElement.style.width = calculatedWidth + 'px');
            }
            /**
 * @returns {void}
 */ function removeResize() {
                for(var handlers = targetElement.querySelectorAll('.' + RESIZE_HANDLER), i = 0; i < handlers.length; i++)(0, ej2_base /* detach */ .og)(handlers[i]);
                var borderResizers = targetElement.querySelectorAll('.e-dialog-border-resize');
                if (!(0, ej2_base /* isNullOrUndefined */ .le)(borderResizers)) for(var i = 0; i < borderResizers.length; i++)(0, ej2_base /* detach */ .og)(borderResizers[i]);
            }
            var dialog_extends = (extendStatics11 = function(d, b) {
                return (extendStatics11 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics11(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), dialog_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, ButtonProps = /** @class */ function(_super) {
                function ButtonProps() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return dialog_extends(ButtonProps, _super), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], ButtonProps.prototype, "isFlat", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)()
                ], ButtonProps.prototype, "buttonModel", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)('Button')
                ], ButtonProps.prototype, "type", void 0), dialog_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], ButtonProps.prototype, "click", void 0), ButtonProps;
            }(ej2_base /* ChildProperty */ .rt), AnimationSettings = /** @class */ function(_super) {
                function AnimationSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return dialog_extends(AnimationSettings, _super), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)('Fade')
                ], AnimationSettings.prototype, "effect", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)(400)
                ], AnimationSettings.prototype, "duration", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)(0)
                ], AnimationSettings.prototype, "delay", void 0), AnimationSettings;
            }(ej2_base /* ChildProperty */ .rt), ROOT = 'e-dialog', RTL = 'e-rtl', DLG_HEADER_CONTENT = 'e-dlg-header-content', DLG_HEADER = 'e-dlg-header', DLG_FOOTER_CONTENT = 'e-footer-content', MODAL_DLG = 'e-dlg-modal', DLG_CLOSE_ICON = 'e-icon-dlg-close', DLG_TARGET = 'e-dlg-target', SCROLL_DISABLED = 'e-scroll-disabled', DEVICE = 'e-device', FULLSCREEN = 'e-dlg-fullscreen', DLG_CLOSE_ICON_BTN = 'e-dlg-closeicon-btn', DLG_SHOW = 'e-popup-open', DLG_UTIL_DEFAULT_TITLE = 'Information', DLG_UTIL_ROOT = 'e-scroll-disabled', DLG_UTIL_ALERT = 'e-alert-dialog', DLG_UTIL_CONFIRM = 'e-confirm-dialog', DLG_RESIZABLE = 'e-dlg-resizable', DLG_RESTRICT_LEFT_VALUE = 'e-restrict-left', DLG_RESTRICT_WIDTH_VALUE = 'e-resize-viewport', DLG_USER_ACTION_CLOSED = 'user action', Dialog = /** @class */ function(_super) {
                /*
     * * Constructor for creating the widget
     *
     * @param
     * @param
     * @hidden
     */ function Dialog(options, element) {
                    return _super.call(this, options, element) || this;
                }
                return dialog_extends(Dialog, _super), /**
     *Initialize the control rendering
     *
     * @returns {void}
     * @private
     */ Dialog.prototype.render = function() {
                    this.initialize(), this.initRender(), this.wireEvents(), '100%' === this.width && (this.element.style.width = ''), '' !== this.minHeight && (this.element.style.minHeight = (0, ej2_base /* formatUnit */ .Ac)(this.minHeight)), this.enableResize && (this.setResize(), 'None' === this.animationSettings.effect && this.getMinHeight()), this.renderComplete();
                }, Dialog.prototype.initializeValue = function() {
                    this.dlgClosedBy = DLG_USER_ACTION_CLOSED;
                }, /**
     *Initialize the event handler
     *
     * @returns {void}
     * @private
     */ Dialog.prototype.preRender = function() {
                    var _this = this;
                    if (this.initializeValue(), this.headerContent = null, this.allowMaxHeight = !0, this.preventVisibility = !0, this.clonedEle = this.element.cloneNode(!0), this.closeIconClickEventHandler = function(event) {
                        _this.dlgClosedBy = 'close icon', _this.hide(event);
                    }, // eslint-disable-next-line
                    this.dlgOverlayClickEventHandler = function(event) {
                        _this.dlgClosedBy = 'overlayClick', event.preventFocus = !1, _this.trigger('overlayClick', event, function(overlayClickEventArgs) {
                            overlayClickEventArgs.preventFocus || _this.focusContent(), _this.dlgClosedBy = DLG_USER_ACTION_CLOSED;
                        });
                    }, this.l10n = new ej2_base /* L10n */ .E7('dialog', {
                        close: 'Close'
                    }, this.locale), this.checkPositionData(), (0, ej2_base /* isNullOrUndefined */ .le)(this.target)) {
                        var prevOnChange = this.isProtectedOnChange;
                        this.isProtectedOnChange = !0, this.target = document.body, this.isProtectedOnChange = prevOnChange;
                    }
                }, Dialog.prototype.isNumberValue = function(value) {
                    return /^[-+]?\d*\.?\d+$/.test(value);
                }, Dialog.prototype.checkPositionData = function() {
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.position)) {
                        if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.position.X) && 'number' != typeof this.position.X) {
                            var isNumber = this.isNumberValue(this.position.X);
                            if (isNumber) {
                                var prevOnChange = this.isProtectedOnChange;
                                this.isProtectedOnChange = !0, this.position.X = parseFloat(this.position.X), this.isProtectedOnChange = prevOnChange;
                            }
                        }
                        if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.position.Y) && 'number' != typeof this.position.Y) {
                            var isNumber = this.isNumberValue(this.position.Y);
                            if (isNumber) {
                                var prevOnChange = this.isProtectedOnChange;
                                this.isProtectedOnChange = !0, this.position.Y = parseFloat(this.position.Y), this.isProtectedOnChange = prevOnChange;
                            }
                        }
                    }
                }, Dialog.prototype.getEle = function(list, selector) {
                    for(var element = void 0, i = 0; i < list.length; i++)if (list[i].classList.contains(selector)) {
                        element = list[i];
                        break;
                    }
                    return element;
                }, /* istanbul ignore next */ Dialog.prototype.getMinHeight = function() {
                    var computedHeaderHeight = '0px', computedFooterHeight = '0px';
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.element.querySelector('.' + DLG_HEADER_CONTENT)) || (computedHeaderHeight = getComputedStyle(this.headerContent).height);
                    var footerEle = this.getEle(this.element.children, DLG_FOOTER_CONTENT);
                    (0, ej2_base /* isNullOrUndefined */ .le)(footerEle) || (computedFooterHeight = getComputedStyle(footerEle).height);
                    var headerHeight = parseInt(computedHeaderHeight.slice(0, computedHeaderHeight.indexOf('p')), 10), footerHeight = parseInt(computedFooterHeight.slice(0, computedFooterHeight.indexOf('p')), 10);
                    return minHeight = headerHeight + 30 + (isNaN(footerHeight) ? 0 : footerHeight), headerHeight + 30 + footerHeight;
                }, Dialog.prototype.onResizeStart = function(args, dialogObj) {
                    return dialogObj.trigger('resizeStart', args), args.cancel;
                }, Dialog.prototype.onResizing = function(args, dialogObj) {
                    dialogObj.trigger('resizing', args);
                }, Dialog.prototype.onResizeComplete = function(args, dialogObj) {
                    dialogObj.trigger('resizeStop', args);
                }, Dialog.prototype.setResize = function() {
                    if (this.enableResize) {
                        if (!this.isBlazorServerRender() || (0, ej2_base /* isNullOrUndefined */ .le)(this.element.querySelector('.e-icons.e-resize-handle'))) {
                            this.element.classList.add(DLG_RESIZABLE);
                            for(var computedHeight = getComputedStyle(this.element).minHeight, computedWidth = getComputedStyle(this.element).minWidth, direction = '', i = 0; i < this.resizeHandles.length; i++){
                                if ('All' === this.resizeHandles[i]) {
                                    direction = 'south north east west north-east north-west south-east south-west';
                                    break;
                                }
                                var directionValue = '';
                                switch(this.resizeHandles[i].toString()){
                                    case 'SouthEast':
                                        directionValue = 'south-east';
                                        break;
                                    case 'SouthWest':
                                        directionValue = 'south-west';
                                        break;
                                    case 'NorthEast':
                                        directionValue = 'north-east';
                                        break;
                                    case 'NorthWest':
                                        directionValue = 'north-west';
                                        break;
                                    default:
                                        directionValue = this.resizeHandles[i].toString();
                                }
                                direction += directionValue.toLocaleLowerCase() + ' ';
                            }
                            this.enableRtl && 'south-east' === direction.trim() ? direction = 'south-west' : this.enableRtl && 'south-west' === direction.trim() && (direction = 'south-east'), this.isModal && this.enableRtl ? this.element.classList.add(DLG_RESTRICT_LEFT_VALUE) : this.isModal && this.target === document.body && this.element.classList.add(DLG_RESTRICT_WIDTH_VALUE), /**
 *
 * @param {ResizeArgs} args - specifies the resize args
 * @returns {void}
 */ function(args) {
                                resizeStart = args.resizeBegin, resize = args.resizing, resizeEnd = args.resizeComplete, targetElement = getDOMElement(args.element), containerElement = getDOMElement(args.boundary);
                                for(var directions = args.direction.split(' '), i = 0; i < directions.length; i++)if (dialogBorderResize.indexOf(directions[i]) >= 0 && directions[i]) /**
 *
 * @param {string} direction - specifies the string
 * @returns {void}
 */ (function(direction) {
                                    calculateValues();
                                    var borderBottom = (0, ej2_base /* createElement */ .az)('span', {
                                        attrs: {
                                            unselectable: 'on',
                                            contenteditable: 'false'
                                        }
                                    });
                                    borderBottom.setAttribute('class', 'e-dialog-border-resize e-' + direction), 'south' === direction && (borderBottom.style.height = '2px', borderBottom.style.width = '100%', borderBottom.style.bottom = '0px', borderBottom.style.left = '0px'), 'north' === direction && (borderBottom.style.height = '2px', borderBottom.style.width = '100%', borderBottom.style.top = '0px', borderBottom.style.left = '0px'), 'east' === direction && (borderBottom.style.height = '100%', borderBottom.style.width = '2px', borderBottom.style.right = '0px', borderBottom.style.top = '0px'), 'west' === direction && (borderBottom.style.height = '100%', borderBottom.style.width = '2px', borderBottom.style.left = '0px', borderBottom.style.top = '0px'), targetElement.appendChild(borderBottom);
                                })(directions[i]);
                                else if ('' !== directions[i].trim()) {
                                    var resizeHandler = (0, ej2_base /* createElement */ .az)('div', {
                                        className: 'e-icons ' + RESIZE_HANDLER + " e-" + directions[i]
                                    });
                                    targetElement.appendChild(resizeHandler);
                                }
                                minHeight = args.minHeight, minWidth = args.minWidth, maxWidth = args.maxWidth, maxHeight = args.maxHeight, args.proxy && args.proxy.element && args.proxy.element.classList.contains('e-dialog') ? wireEvents(args.proxy) : wireEvents();
                            }({
                                element: this.element,
                                direction: direction,
                                minHeight: parseInt(computedHeight.slice(0, computedWidth.indexOf('p')), 10),
                                maxHeight: this.targetEle.clientHeight,
                                minWidth: parseInt(computedWidth.slice(0, computedWidth.indexOf('p')), 10),
                                maxWidth: this.targetEle.clientWidth,
                                boundary: this.target === document.body ? null : this.targetEle,
                                resizeBegin: this.onResizeStart.bind(this),
                                resizeComplete: this.onResizeComplete.bind(this),
                                resizing: this.onResizing.bind(this),
                                proxy: this
                            }), this.wireWindowResizeEvent();
                        }
                    } else removeResize(), this.unWireWindowResizeEvent(), this.isModal ? this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE) : this.element.classList.remove(DLG_RESTRICT_WIDTH_VALUE), this.element.classList.remove(DLG_RESIZABLE);
                }, Dialog.prototype.getFocusElement = function(target) {
                    var items = target.querySelectorAll('input,select,textarea,button:enabled,a,[contenteditable="true"],[tabindex]');
                    return {
                        element: items[items.length - 1]
                    };
                }, /* istanbul ignore next */ Dialog.prototype.keyDown = function(event) {
                    var buttonIndex_1, _this = this;
                    if (9 === event.keyCode && this.isModal) {
                        var buttonObj = void 0;
                        (0, ej2_base /* isNullOrUndefined */ .le)(this.btnObj) || (buttonObj = this.btnObj[this.btnObj.length - 1]), (0, ej2_base /* isNullOrUndefined */ .le)(this.btnObj) && !(0, ej2_base /* isNullOrUndefined */ .le)(this.ftrTemplateContent) && (buttonObj = this.getFocusElement(this.ftrTemplateContent)), (0, ej2_base /* isNullOrUndefined */ .le)(this.btnObj) && (0, ej2_base /* isNullOrUndefined */ .le)(this.ftrTemplateContent) && !(0, ej2_base /* isNullOrUndefined */ .le)(this.contentEle) && (buttonObj = this.getFocusElement(this.contentEle)), (0, ej2_base /* isNullOrUndefined */ .le)(buttonObj) || document.activeElement !== buttonObj.element || event.shiftKey || (event.preventDefault(), this.focusableElements(this.element).focus()), document.activeElement === this.focusableElements(this.element) && event.shiftKey && (event.preventDefault(), (0, ej2_base /* isNullOrUndefined */ .le)(buttonObj) || buttonObj.element.focus());
                    }
                    var element = document.activeElement, isTagName = [
                        'input',
                        'textarea'
                    ].indexOf(element.tagName.toLowerCase()) > -1, isContentEdit = !1;
                    isTagName || (isContentEdit = element.hasAttribute('contenteditable') && 'true' === element.getAttribute('contenteditable')), 27 === event.keyCode && this.closeOnEscape && (this.dlgClosedBy = 'escape', document.querySelector('.e-popup-open:not(.e-dialog)') || this.hide(event)), (13 === event.keyCode && !event.ctrlKey && 'textarea' !== element.tagName.toLowerCase() && isTagName && !(0, ej2_base /* isNullOrUndefined */ .le)(this.primaryButtonEle) || 13 === event.keyCode && event.ctrlKey && ('textarea' === element.tagName.toLowerCase() || isContentEdit) && !(0, ej2_base /* isNullOrUndefined */ .le)(this.primaryButtonEle)) && this.buttons.some(function(data, index) {
                        buttonIndex_1 = index;
                        // eslint-disable-next-line
                        var buttonModel = data.buttonModel;
                        return !(0, ej2_base /* isNullOrUndefined */ .le)(buttonModel) && !0 === buttonModel.isPrimary;
                    }) && 'function' == typeof this.buttons[buttonIndex_1].click && setTimeout(function() {
                        _this.buttons[buttonIndex_1].click.call(_this, event);
                    });
                }, /**
     * Initialize the control rendering
     *
     * @returns {void}
     * @private
     */ Dialog.prototype.initialize = function() {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.target) || (this.targetEle = 'string' == typeof this.target ? document.querySelector(this.target) : this.target), this.isBlazorServerRender() || (0, ej2_base /* addClass */ .cn)([
                        this.element
                    ], ROOT), ej2_base /* Browser.isDevice */ .AR.isDevice && (0, ej2_base /* addClass */ .cn)([
                        this.element
                    ], DEVICE), this.isBlazorServerRender() || this.setCSSClass(), this.setMaxHeight();
                }, /**
     * Initialize the rendering
     *
     * @returns {void}
     * @private
     */ Dialog.prototype.initRender = function() {
                    var _this = this;
                    if (this.initialRender = !0, this.isBlazorServerRender() || (0, ej2_base /* attributes */ .Y4)(this.element, {
                        role: 'dialog'
                    }), 1000 === this.zIndex ? (this.setzIndex(this.element, !1), this.calculatezIndex = !0) : this.calculatezIndex = !1, this.isBlazorServerRender() && (0, ej2_base /* isNullOrUndefined */ .le)(this.headerContent) && (this.headerContent = this.element.getElementsByClassName('e-dlg-header-content')[0]), this.isBlazorServerRender() && (0, ej2_base /* isNullOrUndefined */ .le)(this.contentEle) && (this.contentEle = this.element.querySelector('#' + this.element.id + '_dialog-content')), this.isBlazorServerRender() || (this.setTargetContent(), '' === this.header || (0, ej2_base /* isNullOrUndefined */ .le)(this.header) || this.setHeader(), this.renderCloseIcon(), this.setContent(), '' === this.footerTemplate || (0, ej2_base /* isNullOrUndefined */ .le)(this.footerTemplate) ? (0, ej2_base /* isNullOrUndefined */ .le)(this.buttons[0].buttonModel) || this.setButton() : this.setFooterTemplate()), this.isBlazorServerRender() && !(0, ej2_base /* isNullOrUndefined */ .le)(this.buttons[0].buttonModel) && '' === this.footerTemplate && this.setButton(), this.allowDragging && !(0, ej2_base /* isNullOrUndefined */ .le)(this.headerContent) && this.setAllowDragging(), !this.isBlazorServerRender() && ((0, ej2_base /* attributes */ .Y4)(this.element, {
                        'aria-modal': this.isModal ? 'true' : 'false'
                    }), this.isModal && this.setIsModal()), this.isBlazorServerRender() && (0, ej2_base /* isNullOrUndefined */ .le)(this.dlgContainer)) {
                        this.dlgContainer = this.element.parentElement;
                        for(var i = 0, childNodes = this.dlgContainer.children; i < childNodes.length; i++)childNodes[i].classList.contains('e-dlg-overlay') && (this.dlgOverlay = childNodes[i]);
                    }
                    if (!0 !== this.element.classList.contains(DLG_UTIL_ALERT) && !0 !== this.element.classList.contains(DLG_UTIL_CONFIRM) && !(0, ej2_base /* isNullOrUndefined */ .le)(this.element.parentElement)) {
                        var parentEle = this.isModal ? this.dlgContainer.parentElement : this.element.parentElement;
                        this.refElement = this.createElement('div', {
                            className: 'e-dlg-ref-element'
                        }), parentEle.insertBefore(this.refElement, this.isModal ? this.dlgContainer : this.element);
                    }
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.targetEle) || // eslint-disable-next-line
                    (this.isModal ? this.targetEle.appendChild(this.dlgContainer) : this.targetEle.appendChild(this.element)), this.popupObj = new popup /* Popup */ .GI(this.element, {
                        height: this.height,
                        width: this.width,
                        zIndex: this.zIndex,
                        relateTo: this.target,
                        actionOnScroll: 'none',
                        enableRtl: this.enableRtl,
                        // eslint-disable-next-line
                        open: function(event) {
                            // eslint-disable-next-line
                            var eventArgs = {
                                container: _this.isModal ? _this.dlgContainer : _this.element,
                                element: _this.element,
                                target: _this.target,
                                preventFocus: !1
                            };
                            _this.enableResize && _this.resetResizeIcon(), // eslint-disable-next-line
                            _this.trigger('open', eventArgs, function(openEventArgs) {
                                openEventArgs.preventFocus || _this.focusContent();
                            });
                        },
                        // eslint-disable-next-line
                        close: function(event) {
                            _this.isModal && (0, ej2_base /* addClass */ .cn)([
                                _this.dlgOverlay
                            ], 'e-fade'), _this.unBindEvent(_this.element), _this.isModal && (_this.dlgContainer.style.display = 'none'), _this.trigger('close', _this.closeArgs);
                            var activeEle = document.activeElement;
                            (0, ej2_base /* isNullOrUndefined */ .le)(activeEle) || (0, ej2_base /* isNullOrUndefined */ .le)(activeEle.blur) || activeEle.blur(), (0, ej2_base /* isNullOrUndefined */ .le)(_this.storeActiveElement) || (0, ej2_base /* isNullOrUndefined */ .le)(_this.storeActiveElement.focus) || _this.storeActiveElement.focus();
                        }
                    }), this.positionChange(), this.setEnableRTL(), !this.isBlazorServerRender() && ((0, ej2_base /* addClass */ .cn)([
                        this.element
                    ], 'e-popup-close'), this.isModal && this.setOverlayZindex()), this.visible ? this.show() : this.isModal && (this.dlgOverlay.style.display = 'none'), this.initialRender = !1;
                }, Dialog.prototype.resetResizeIcon = function() {
                    var dialogConHeight = this.getMinHeight();
                    if (this.targetEle.offsetHeight < dialogConHeight) {
                        var className = this.enableRtl ? 'e-south-west' : 'e-south-east', resizeIcon = this.element.querySelector('.' + className);
                        (0, ej2_base /* isNullOrUndefined */ .le)(resizeIcon) || (resizeIcon.style.bottom = '-' + dialogConHeight.toString() + 'px');
                    }
                }, Dialog.prototype.setOverlayZindex = function(zIndexValue) {
                    var zIndex;
                    zIndex = (0, ej2_base /* isNullOrUndefined */ .le)(zIndexValue) ? parseInt(this.element.style.zIndex, 10) ? parseInt(this.element.style.zIndex, 10) : this.zIndex : zIndexValue, this.dlgOverlay.style.zIndex = (zIndex - 1).toString(), this.dlgContainer.style.zIndex = zIndex.toString();
                }, Dialog.prototype.positionChange = function() {
                    this.isModal && (isNaN(parseFloat(this.position.X)) || isNaN(parseFloat(this.position.Y))) ? !isNaN(parseFloat(this.position.X)) && isNaN(parseFloat(this.position.Y)) || isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y)) ? this.setPopupPosition() : (this.element.style.top = '0px', this.element.style.left = '0px', this.dlgContainer.classList.add('e-dlg-' + this.position.X + '-' + this.position.Y)) : this.setPopupPosition();
                }, Dialog.prototype.setPopupPosition = function() {
                    this.popupObj.setProperties({
                        position: {
                            X: this.position.X,
                            Y: this.position.Y
                        }
                    });
                }, Dialog.prototype.setAllowDragging = function() {
                    var _this = this, handleContent = '.' + DLG_HEADER_CONTENT;
                    this.element.classList.contains('e-draggable') || (this.dragObj = new ej2_base /* Draggable */ ._l(this.element, {
                        clone: !1,
                        isDragScroll: !0,
                        abort: '.e-dlg-closeicon-btn',
                        handle: handleContent,
                        // eslint-disable-next-line
                        dragStart: function(event) {
                            // eslint-disable-next-line
                            _this.trigger('dragStart', event, function(dragEventArgs) {
                                (0, ej2_base /* isBlazor */ .xr)() && dragEventArgs.bindEvents(event.dragElement);
                            });
                        },
                        // eslint-disable-next-line
                        dragStop: function(event) {
                            _this.isModal && ((0, ej2_base /* isNullOrUndefined */ .le)(_this.position) || _this.dlgContainer.classList.remove('e-dlg-' + _this.position.X + '-' + _this.position.Y), // Reset the dialog position after drag completion.
                            _this.element.style.position = 'relative'), _this.trigger('dragStop', event), _this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);
                        },
                        // eslint-disable-next-line
                        drag: function(event) {
                            _this.trigger('drag', event);
                        }
                    }), (0, ej2_base /* isNullOrUndefined */ .le)(this.targetEle) || (this.dragObj.dragArea = this.targetEle));
                }, Dialog.prototype.setButton = function() {
                    if (!this.isBlazorServerRender()) {
                        this.buttonContent = [], this.btnObj = [];
                        for(var footerBtn, i = 0; i < this.buttons.length; i++){
                            var buttonType = (0, ej2_base /* isNullOrUndefined */ .le)(this.buttons[i].type) ? 'button' : this.buttons[i].type.toLowerCase(), btn = this.createElement('button', {
                                attrs: {
                                    type: buttonType
                                }
                            });
                            this.buttonContent.push(btn.outerHTML);
                        }
                        this.setFooterTemplate();
                    }
                    for(var i = 0, childNodes = this.element.children; i < childNodes.length; i++)childNodes[i].classList.contains(DLG_FOOTER_CONTENT) && (footerBtn = childNodes[i].querySelectorAll('button'));
                    for(var i = 0; i < this.buttons.length; i++)this.isBlazorServerRender() || (this.btnObj[i] = new button_button /* Button */ .z(this.buttons[i].buttonModel)), this.isBlazorServerRender() && (this.ftrTemplateContent = this.element.querySelector('.' + DLG_FOOTER_CONTENT)), !(0, ej2_base /* isNullOrUndefined */ .le)(this.ftrTemplateContent) && footerBtn.length > 0 && ('function' == typeof this.buttons[i].click && ej2_base /* EventHandler.add */ .bi.add(footerBtn[i], 'click', this.buttons[i].click, this), 'object' == typeof this.buttons[i].click && ej2_base /* EventHandler.add */ .bi.add(footerBtn[i], 'click', this.buttonClickHandler.bind(this, i), this)), this.isBlazorServerRender() || (0, ej2_base /* isNullOrUndefined */ .le)(this.ftrTemplateContent) || (this.btnObj[i].appendTo(this.ftrTemplateContent.children[i]), this.buttons[i].isFlat && this.btnObj[i].element.classList.add('e-flat'), this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0]);
                }, Dialog.prototype.buttonClickHandler = function(index) {
                    this.trigger('buttons[' + index + '].click', {});
                }, Dialog.prototype.setContent = function() {
                    (0, ej2_base /* attributes */ .Y4)(this.element, {
                        'aria-describedby': this.element.id + '_dialog-content'
                    }), this.contentEle = this.createElement('div', {
                        className: 'e-dlg-content',
                        id: this.element.id + '_dialog-content'
                    }), this.innerContentElement ? this.contentEle.appendChild(this.innerContentElement) : ((0, ej2_base /* isNullOrUndefined */ .le)(this.content) || '' === this.content) && this.initialRender || (Object.keys(window), ('string' != typeof this.content || (0, ej2_base /* isBlazor */ .xr)()) && this.content instanceof HTMLElement ? this.contentEle.appendChild(this.content) : this.setTemplate(this.content, this.contentEle, 'content')), (0, ej2_base /* isNullOrUndefined */ .le)(this.headerContent) ? this.element.insertBefore(this.contentEle, this.element.children[0]) : this.element.insertBefore(this.contentEle, this.element.children[1]), 'auto' === this.height && (this.isBlazorServerRender() || !ej2_base /* Browser.isIE */ .AR.isIE || '' !== this.element.style.width || (0, ej2_base /* isNullOrUndefined */ .le)(this.width) || (this.element.style.width = (0, ej2_base /* formatUnit */ .Ac)(this.width)), this.setMaxHeight());
                }, Dialog.prototype.setTemplate = function(template, toElement, prop) {
                    Object.keys(window), templateProps = toElement.classList.contains(DLG_HEADER) ? this.element.id + 'header' : toElement.classList.contains(DLG_FOOTER_CONTENT) ? this.element.id + 'footerTemplate' : this.element.id + 'content', (0, ej2_base /* isNullOrUndefined */ .le)(template.outerHTML) ? ('string' == typeof template || 'string' != typeof template || (0, ej2_base /* isBlazor */ .xr)() && !this.isStringTemplate) && ('string' == typeof template && (template = this.sanitizeHelper(template)), this.isVue || 'string' != typeof template ? (templateFn = (0, ej2_base /* compile */ .MY)(template), templateValue = template) : toElement.innerHTML = template) : toElement.appendChild(template);
                    var templateFn, templateProps, templateValue, fromElements = [];
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(templateFn)) {
                        for(var isString = !(0, ej2_base /* isBlazor */ .xr)() || !!this.isStringTemplate || 0 !== templateValue.indexOf('<div>Blazor') || this.isStringTemplate, _i = 0, _a = templateFn({}, this, prop, templateProps, isString); _i < _a.length; _i++){
                            var item = _a[_i];
                            fromElements.push(item);
                        }
                        (0, ej2_base /* append */ .R3)([].slice.call(fromElements), toElement);
                    }
                }, /*
     * @returns {void}
     * @hidden
     * @value
     */ Dialog.prototype.sanitizeHelper = function(value) {
                    if (this.enableHtmlSanitizer) {
                        var dialogItem = ej2_base /* SanitizeHtmlHelper.beforeSanitize */ .pJ.beforeSanitize();
                        (0, ej2_base /* extend */ .l7)(dialogItem, dialogItem, {
                            cancel: !1,
                            helper: null
                        }), this.trigger('beforeSanitizeHtml', dialogItem), dialogItem.cancel && !(0, ej2_base /* isNullOrUndefined */ .le)(dialogItem.helper) ? value = dialogItem.helper(value) : dialogItem.cancel || (value = ej2_base /* SanitizeHtmlHelper.serializeValue */ .pJ.serializeValue(dialogItem, value));
                    }
                    return value;
                }, Dialog.prototype.setMaxHeight = function() {
                    if (this.allowMaxHeight) {
                        var display = this.element.style.display;
                        this.element.style.display = 'none', this.element.style.maxHeight = !(0, ej2_base /* isNullOrUndefined */ .le)(this.target) && this.targetEle.offsetHeight < window.innerHeight ? this.targetEle.offsetHeight - 20 + 'px' : window.innerHeight - 20 + 'px', this.element.style.display = display, ej2_base /* Browser.isIE */ .AR.isIE && 'auto' === this.height && !(0, ej2_base /* isNullOrUndefined */ .le)(this.contentEle) && this.element.offsetHeight < this.contentEle.offsetHeight && (this.element.style.height = 'inherit');
                    }
                }, Dialog.prototype.setEnableRTL = function() {
                    this.isBlazorServerRender() || // eslint-disable-next-line
                    (this.enableRtl ? (0, ej2_base /* addClass */ .cn)([
                        this.element
                    ], RTL) : (0, ej2_base /* removeClass */ .IV)([
                        this.element
                    ], RTL)), (0, ej2_base /* isNullOrUndefined */ .le)(this.element.querySelector('.e-resize-handle')) || (removeResize(), this.setResize());
                }, Dialog.prototype.setTargetContent = function() {
                    var _this = this;
                    if ((0, ej2_base /* isNullOrUndefined */ .le)(this.content) || '' === this.content) {
                        var isContent = '' !== this.element.innerHTML.replace(/\s|<(\/?|\/?)(!--!--)>/g, '');
                        (this.element.children.length > 0 || isContent) && (this.innerContentElement = document.createDocumentFragment(), [].slice.call(this.element.childNodes).forEach(function(el) {
                            8 !== el.nodeType && _this.innerContentElement.appendChild(el);
                        }));
                    }
                }, Dialog.prototype.setHeader = function() {
                    this.headerEle ? this.headerEle.innerHTML = '' : this.headerEle = this.createElement('div', {
                        id: this.element.id + '_title',
                        className: DLG_HEADER
                    }), this.createHeaderContent(), this.headerContent.appendChild(this.headerEle), this.setTemplate(this.header, this.headerEle, 'header'), (0, ej2_base /* attributes */ .Y4)(this.element, {
                        'aria-labelledby': this.element.id
                    }), this.element.insertBefore(this.headerContent, this.element.children[0]), this.allowDragging && !(0, ej2_base /* isNullOrUndefined */ .le)(this.headerContent) && this.setAllowDragging();
                }, Dialog.prototype.setFooterTemplate = function() {
                    this.ftrTemplateContent ? this.ftrTemplateContent.innerHTML = '' : this.ftrTemplateContent = this.createElement('div', {
                        className: DLG_FOOTER_CONTENT
                    }), '' === this.footerTemplate || (0, ej2_base /* isNullOrUndefined */ .le)(this.footerTemplate) ? this.ftrTemplateContent.innerHTML = this.buttonContent.join('') : this.setTemplate(this.footerTemplate, this.ftrTemplateContent, 'footerTemplate'), this.element.appendChild(this.ftrTemplateContent);
                }, Dialog.prototype.createHeaderContent = function() {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.headerContent) && (this.headerContent = this.createElement('div', {
                        id: this.element.id + '_dialog-header',
                        className: DLG_HEADER_CONTENT
                    }));
                }, Dialog.prototype.renderCloseIcon = function() {
                    this.showCloseIcon && (this.closeIcon = this.createElement('button', {
                        className: DLG_CLOSE_ICON_BTN,
                        attrs: {
                            type: 'button'
                        }
                    }), this.closeIconBtnObj = new button_button /* Button */ .z({
                        cssClass: 'e-flat',
                        iconCss: DLG_CLOSE_ICON + " e-icons"
                    }), this.closeIconTitle(), (0, ej2_base /* isNullOrUndefined */ .le)(this.headerContent) ? (this.createHeaderContent(), (0, ej2_base /* prepend */ .Ce)([
                        this.closeIcon
                    ], this.headerContent), this.element.insertBefore(this.headerContent, this.element.children[0])) : (0, ej2_base /* prepend */ .Ce)([
                        this.closeIcon
                    ], this.headerContent), this.closeIconBtnObj.appendTo(this.closeIcon));
                }, Dialog.prototype.closeIconTitle = function() {
                    this.l10n.setLocale(this.locale);
                    var closeIconTitle = this.l10n.getConstant('close');
                    this.closeIcon.setAttribute('title', closeIconTitle), this.closeIcon.setAttribute('aria-label', closeIconTitle);
                }, Dialog.prototype.setCSSClass = function(oldCSSClass) {
                    this.cssClass && (0, ej2_base /* addClass */ .cn)([
                        this.element
                    ], this.cssClass.split(' ')), oldCSSClass && (0, ej2_base /* removeClass */ .IV)([
                        this.element
                    ], oldCSSClass.split(' '));
                }, Dialog.prototype.setIsModal = function() {
                    this.dlgContainer = this.createElement('div', {
                        className: 'e-dlg-container'
                    }), this.element.classList.remove(DLG_SHOW), this.element.parentNode.insertBefore(this.dlgContainer, this.element), this.dlgContainer.appendChild(this.element), (0, ej2_base /* addClass */ .cn)([
                        this.element
                    ], MODAL_DLG), this.dlgOverlay = this.createElement('div', {
                        className: 'e-dlg-overlay'
                    }), this.dlgOverlay.style.zIndex = (this.zIndex - 1).toString(), this.dlgContainer.appendChild(this.dlgOverlay);
                }, Dialog.prototype.getValidFocusNode = function(items) {
                    for(var node, u = 0; u < items.length && (!((node = items[u]).clientHeight > 0 || 'a' === node.tagName.toLowerCase() && node.hasAttribute('href')) || !(node.tabIndex > -1) || node.disabled || this.disableElement(node, '[disabled],[aria-disabled="true"],[type="hidden"]')); u++)node = null;
                    return node;
                }, Dialog.prototype.focusableElements = function(content) {
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(content)) {
                        var items = content.querySelectorAll('input,select,textarea,button,a,[contenteditable="true"],[tabindex]');
                        return this.getValidFocusNode(items);
                    }
                    return null;
                }, Dialog.prototype.getAutoFocusNode = function(container) {
                    var node = container.querySelector('.' + DLG_CLOSE_ICON_BTN), items = container.querySelectorAll('[autofocus]'), validNode = this.getValidFocusNode(items);
                    if ((0, ej2_base /* isBlazor */ .xr)() && (this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0]), (0, ej2_base /* isNullOrUndefined */ .le)(validNode)) {
                        if (validNode = this.focusableElements(this.contentEle), !(0, ej2_base /* isNullOrUndefined */ .le)(validNode)) return validNode;
                        if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.primaryButtonEle)) return this.element.querySelector(".e-primary");
                    } else node = validNode;
                    return node;
                }, Dialog.prototype.disableElement = function(element, t) {
                    // eslint-disable-next-line
                    var elementMatch = element ? element.matches || element.webkitMatchesSelector || element.msGetRegionContent : null;
                    if (elementMatch) {
                        for(; element; element = element.parentNode)if (element instanceof Element && elementMatch.call(element, t)) /* istanbul ignore next */ return element;
                    }
                    return null;
                }, Dialog.prototype.focusContent = function() {
                    var element = this.getAutoFocusNode(this.element), node = (0, ej2_base /* isNullOrUndefined */ .le)(element) ? this.element : element, userAgent = ej2_base /* Browser.userAgent */ .AR.userAgent;
                    (userAgent.indexOf('MSIE ') > 0 || userAgent.indexOf('Trident/') > 0) && this.element.focus(), node.focus(), this.bindEvent(this.element);
                }, Dialog.prototype.bindEvent = function(element) {
                    ej2_base /* EventHandler.add */ .bi.add(element, 'keydown', this.keyDown, this);
                }, Dialog.prototype.unBindEvent = function(element) {
                    ej2_base /* EventHandler.remove */ .bi.remove(element, 'keydown', this.keyDown);
                }, Dialog.prototype.updateSanitizeContent = function() {
                    this.isBlazorServerRender() || (this.contentEle.innerHTML = this.sanitizeHelper(this.content));
                }, Dialog.prototype.isBlazorServerRender = function() {
                    return (0, ej2_base /* isBlazor */ .xr)() && this.isServerRendered;
                }, /**
     * Module required function
     *
     * @returns {void}
     * @private
     */ Dialog.prototype.getModuleName = function() {
                    return 'dialog';
                }, /**
     * Called internally if any of the property value changed
     *
     * @param {DialogModel} newProp - specifies the new property
     * @param {DialogModel} oldProp - specifies the old property
     * @private
     * @returns {void}
     */ Dialog.prototype.onPropertyChanged = function(newProp, oldProp) {
                    if (this.element.classList.contains(ROOT)) for(var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++)switch(_a[_i]){
                        case 'content':
                            (0, ej2_base /* isNullOrUndefined */ .le)(this.content) || '' === this.content ? (0, ej2_base /* isNullOrUndefined */ .le)(this.contentEle) || ((0, ej2_base /* detach */ .og)(this.contentEle), this.contentEle = null) : (this.isBlazorServerRender() && (this.contentEle = this.element.querySelector('.e-dlg-content')), (0, ej2_base /* isNullOrUndefined */ .le)(this.contentEle) || 'dialog' === this.contentEle.getAttribute('role') ? (!this.isBlazorServerRender() || (0, ej2_base /* isNullOrUndefined */ .le)(this.element.querySelector('.e-dlg-content'))) && this.setContent() : (this.isBlazorServerRender() || (this.contentEle.innerHTML = ''), 'function' == typeof this.content ? (this.clearTemplate([
                                'content'
                            ]), (0, ej2_base /* detach */ .og)(this.contentEle), this.contentEle = null, this.setContent()) : 'string' == typeof this.content ? this.isBlazorServerRender() && '' === this.contentEle.innerText ? this.contentEle.insertAdjacentHTML('beforeend', this.sanitizeHelper(this.content)) : this.updateSanitizeContent() : this.contentEle.appendChild(this.content), this.setMaxHeight()));
                            break;
                        case 'header':
                            '' === this.header || (0, ej2_base /* isNullOrUndefined */ .le)(this.header) ? this.headerEle && ((0, ej2_base /* detach */ .og)(this.headerEle), this.headerEle = null) : (!this.isBlazorServerRender() || (0, ej2_base /* isNullOrUndefined */ .le)(this.element.querySelector('.e-dlg-header-content'))) && this.setHeader();
                            break;
                        case 'footerTemplate':
                            if ('' === this.footerTemplate || (0, ej2_base /* isNullOrUndefined */ .le)(this.footerTemplate)) {
                                if (!this.ftrTemplateContent) return;
                                (0, ej2_base /* detach */ .og)(this.ftrTemplateContent), this.ftrTemplateContent = null, this.buttons = [
                                    {}
                                ];
                            } else (!this.isBlazorServerRender() || (0, ej2_base /* isNullOrUndefined */ .le)(this.element.querySelector('.e-footer-content'))) && this.setFooterTemplate(), this.buttons = [
                                {}
                            ];
                            break;
                        case 'showCloseIcon':
                            this.element.getElementsByClassName(DLG_CLOSE_ICON).length > 0 ? !this.showCloseIcon && ('' === this.header || (0, ej2_base /* isNullOrUndefined */ .le)(this.header)) ? ((0, ej2_base /* detach */ .og)(this.headerContent), this.headerContent = null) : this.showCloseIcon ? this.isBlazorServerRender() && this.wireEvents() : (0, ej2_base /* detach */ .og)(this.closeIcon) : (this.isBlazorServerRender() || this.renderCloseIcon(), this.wireEvents());
                            break;
                        case 'locale':
                            this.showCloseIcon && this.closeIconTitle();
                            break;
                        case 'visible':
                            // eslint-disable-next-line
                            this.visible ? this.show() : this.hide();
                            break;
                        case 'isModal':
                            this.updateIsModal();
                            break;
                        case 'height':
                            (0, ej2_base /* setStyleAttribute */ .V7)(this.element, {
                                height: (0, ej2_base /* formatUnit */ .Ac)(newProp.height)
                            });
                            break;
                        case 'width':
                            (0, ej2_base /* setStyleAttribute */ .V7)(this.element, {
                                width: (0, ej2_base /* formatUnit */ .Ac)(newProp.width)
                            });
                            break;
                        case 'zIndex':
                            this.popupObj.zIndex = this.zIndex, this.isModal && this.setOverlayZindex(this.zIndex), this.element.style.zIndex !== this.zIndex.toString() && (this.calculatezIndex = !1);
                            break;
                        case 'cssClass':
                            this.setCSSClass(oldProp.cssClass);
                            break;
                        case 'buttons':
                            var buttonCount = this.buttons.length;
                            (0, ej2_base /* isNullOrUndefined */ .le)(this.ftrTemplateContent) || this.isBlazorServerRender() || ((0, ej2_base /* detach */ .og)(this.ftrTemplateContent), this.ftrTemplateContent = null);
                            for(var i = 0; i < buttonCount; i++)(0, ej2_base /* isNullOrUndefined */ .le)(this.buttons[i].buttonModel) || (this.footerTemplate = '', this.setButton());
                            break;
                        case 'allowDragging':
                            this.allowDragging && !(0, ej2_base /* isNullOrUndefined */ .le)(this.headerContent) ? this.setAllowDragging() : this.dragObj.destroy();
                            break;
                        case 'target':
                            this.setTarget(newProp.target);
                            break;
                        case 'position':
                            if (this.checkPositionData(), this.isModal) {
                                var positionX = (0, ej2_base /* isNullOrUndefined */ .le)(oldProp.position.X) ? this.position.X : oldProp.position.X, positionY = (0, ej2_base /* isNullOrUndefined */ .le)(oldProp.position.Y) ? this.position.Y : oldProp.position.Y;
                                this.dlgContainer.classList.contains('e-dlg-' + positionX + '-' + positionY) && this.dlgContainer.classList.remove('e-dlg-' + positionX + '-' + positionY);
                            }
                            this.positionChange();
                            break;
                        case 'enableRtl':
                            this.setEnableRTL();
                            break;
                        case 'enableResize':
                            this.setResize();
                            break;
                        case 'minHeight':
                            '' !== this.minHeight && (this.element.style.minHeight = (0, ej2_base /* formatUnit */ .Ac)(this.minHeight));
                    }
                }, Dialog.prototype.setTarget = function(target) {
                    this.popupObj.relateTo = target, this.target = target, this.targetEle = 'string' == typeof this.target ? document.querySelector(this.target) : this.target, this.dragObj && (this.dragObj.dragArea = this.targetEle), this.setMaxHeight(), this.isModal && this.updateIsModal(), this.enableResize && this.setResize();
                }, Dialog.prototype.updateIsModal = function() {
                    if (this.element.setAttribute('aria-modal', this.isModal ? 'true' : 'false'), this.isModal) (0, ej2_base /* isNullOrUndefined */ .le)(this.dlgOverlay) && (this.setIsModal(), this.element.style.top = '0px', this.element.style.left = '0px', (0, ej2_base /* isNullOrUndefined */ .le)(this.targetEle) || this.targetEle.appendChild(this.dlgContainer));
                    else {
                        for((0, ej2_base /* removeClass */ .IV)([
                            this.element
                        ], MODAL_DLG), (0, ej2_base /* removeClass */ .IV)([
                            document.body
                        ], [
                            DLG_TARGET,
                            SCROLL_DISABLED
                        ]), (0, ej2_base /* detach */ .og)(this.dlgOverlay); this.dlgContainer.firstChild;)this.dlgContainer.parentElement.insertBefore(this.dlgContainer.firstChild, this.dlgContainer);
                        this.dlgContainer.parentElement.removeChild(this.dlgContainer);
                    }
                    this.visible && this.show(), this.positionChange(), this.isModal && this.dlgOverlay && ej2_base /* EventHandler.add */ .bi.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);
                }, Dialog.prototype.setzIndex = function(zIndexElement, setPopupZindex) {
                    var prevOnChange = this.isProtectedOnChange;
                    this.isProtectedOnChange = !0, this.zIndex = (0, popup /* getZindexPartial */ .TE)(zIndexElement), this.isProtectedOnChange = prevOnChange, setPopupZindex && (this.popupObj.zIndex = this.zIndex);
                }, Dialog.prototype.windowResizeHandler = function() {
                    maxWidth = this.targetEle.clientWidth, maxHeight = this.targetEle.clientHeight, this.setMaxHeight();
                }, /**
     * Get the properties to be maintained in the persisted state.
     *
     * @returns {void}
     * @private
     */ Dialog.prototype.getPersistData = function() {
                    return this.addOnPersist([]);
                }, /**
     * To destroy the widget
     *
     * @returns {void}
     */ Dialog.prototype.destroy = function() {
                    if (!this.isDestroyed) {
                        var classArray = [
                            RTL,
                            MODAL_DLG,
                            DLG_RESIZABLE,
                            DLG_RESTRICT_LEFT_VALUE,
                            FULLSCREEN,
                            DEVICE
                        ], attrs = [
                            'role',
                            'aria-modal',
                            'aria-labelledby',
                            'aria-describedby',
                            'aria-grabbed',
                            'tabindex',
                            'style'
                        ];
                        if ((0, ej2_base /* removeClass */ .IV)([
                            this.targetEle
                        ], [
                            DLG_TARGET,
                            SCROLL_DISABLED
                        ]), !(0, ej2_base /* isNullOrUndefined */ .le)(this.element) && this.element.classList.contains(FULLSCREEN) && (0, ej2_base /* removeClass */ .IV)([
                            document.body
                        ], [
                            DLG_TARGET,
                            SCROLL_DISABLED
                        ]), this.isModal && (0, ej2_base /* removeClass */ .IV)([
                            (0, ej2_base /* isNullOrUndefined */ .le)(this.targetEle) ? document.body : this.targetEle
                        ], SCROLL_DISABLED), this.unWireEvents(), !(0, ej2_base /* isNullOrUndefined */ .le)(this.btnObj)) for(var i = 0; i < this.btnObj.length; i++)this.btnObj[i].destroy();
                        if ((0, ej2_base /* isNullOrUndefined */ .le)(this.dragObj) || this.dragObj.destroy(), !(0, ej2_base /* isNullOrUndefined */ .le)(this.popupObj.element) && this.popupObj.element.classList.contains('e-popup') && this.popupObj.destroy(), (0, ej2_base /* removeClass */ .IV)([
                            this.element
                        ], classArray), (0, ej2_base /* isNullOrUndefined */ .le)(this.cssClass) || '' === this.cssClass || (0, ej2_base /* removeClass */ .IV)([
                            this.element
                        ], this.cssClass.split(' ')), (0, ej2_base /* isNullOrUndefined */ .le)(this.refElement) || (0, ej2_base /* isNullOrUndefined */ .le)(this.refElement.parentElement) || (this.refElement.parentElement.insertBefore(this.isModal ? this.dlgContainer : this.element, this.refElement), (0, ej2_base /* detach */ .og)(this.refElement), this.refElement = void 0), this.isModal && !this.isBlazorServerRender() && ((0, ej2_base /* detach */ .og)(this.dlgOverlay), this.dlgContainer.parentNode.insertBefore(this.element, this.dlgContainer), (0, ej2_base /* detach */ .og)(this.dlgContainer)), this.isBlazorServerRender() || (this.element.innerHTML = this.clonedEle.innerHTML), this.isBlazorServerRender() && !(0, ej2_base /* isNullOrUndefined */ .le)(this.element.children)) for(var i = 0; i <= this.element.children.length; i++)i -= i, (0, ej2_base /* detach */ .og)(this.element.children[i]);
                        for(var i = 0; i < attrs.length; i++)this.element.removeAttribute(attrs[i]);
                        this.isBlazorServerRender() ? this.isDestroyed = !0 : _super.prototype.destroy.call(this), this.isReact && this.clearTemplate();
                    }
                }, Dialog.prototype.wireWindowResizeEvent = function() {
                    window.addEventListener('resize', this.windowResizeHandler.bind(this));
                }, Dialog.prototype.unWireWindowResizeEvent = function() {
                    window.removeEventListener('resize', this.windowResizeHandler.bind(this));
                }, /**
     * Binding event to the element while widget creation
     *
     * @returns {void}
     * @hidden
     */ Dialog.prototype.wireEvents = function() {
                    this.isBlazorServerRender() && this.showCloseIcon && (this.closeIcon = this.element.getElementsByClassName('e-dlg-closeicon-btn')[0]), this.showCloseIcon && ej2_base /* EventHandler.add */ .bi.add(this.closeIcon, 'click', this.closeIconClickEventHandler, this), this.isModal && this.dlgOverlay && ej2_base /* EventHandler.add */ .bi.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);
                }, /**
     * Unbinding event to the element while widget destroy
     *
     * @returns {void}
     * @hidden
     */ Dialog.prototype.unWireEvents = function() {
                    if (this.showCloseIcon && ej2_base /* EventHandler.remove */ .bi.remove(this.closeIcon, 'click', this.closeIconClickEventHandler), this.isModal && ej2_base /* EventHandler.remove */ .bi.remove(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler), this.buttons.length > 0 && !(0, ej2_base /* isNullOrUndefined */ .le)(this.buttons[0].buttonModel) && '' === this.footerTemplate) for(var i = 0; i < this.buttons.length; i++)'function' == typeof this.buttons[i].click && ej2_base /* EventHandler.remove */ .bi.remove(this.ftrTemplateContent.children[i], 'click', this.buttons[i].click);
                }, /**
     * Refreshes the dialog's position when the user changes its header and footer height/width dynamically.
     *
     * @returns {void}
     */ Dialog.prototype.refreshPosition = function() {
                    this.popupObj.refreshPosition();
                }, /**
     * Returns the current width and height of the Dialog
     *
     * @returns {DialogDimension}
     * @public
     */ Dialog.prototype.getDimension = function() {
                    return {
                        width: this.element.offsetWidth,
                        height: this.element.offsetHeight
                    };
                }, /**
     * Opens the dialog if it is in hidden state.
     * To open the dialog with full screen width, set the parameter to true.
     *
     * @param { boolean } isFullScreen - Enable the fullScreen Dialog.
     * @returns {void}
     */ Dialog.prototype.show = function(isFullScreen) {
                    var _this = this;
                    if (this.element.classList.contains(ROOT)) {
                        if (!this.element.classList.contains(DLG_SHOW) || !(0, ej2_base /* isNullOrUndefined */ .le)(isFullScreen)) {
                            (0, ej2_base /* isNullOrUndefined */ .le)(isFullScreen) || this.fullScreen(isFullScreen);
                            var eventArgs_1 = (0, ej2_base /* isBlazor */ .xr)() ? {
                                cancel: !1,
                                element: this.element,
                                container: this.isModal ? this.dlgContainer : this.element,
                                maxHeight: this.element.style.maxHeight
                            } : {
                                cancel: !1,
                                element: this.element,
                                container: this.isModal ? this.dlgContainer : this.element,
                                target: this.target,
                                maxHeight: this.element.style.maxHeight
                            };
                            this.trigger('beforeOpen', eventArgs_1, function(beforeOpenArgs) {
                                if (!beforeOpenArgs.cancel) {
                                    _this.element.style.maxHeight !== eventArgs_1.maxHeight && (_this.allowMaxHeight = !1, _this.element.style.maxHeight = eventArgs_1.maxHeight), _this.storeActiveElement = document.activeElement, _this.element.tabIndex = -1, _this.isModal && !(0, ej2_base /* isNullOrUndefined */ .le)(_this.dlgOverlay) && (_this.dlgOverlay.style.display = 'block', _this.dlgContainer.style.display = 'flex', (0, ej2_base /* removeClass */ .IV)([
                                        _this.dlgOverlay
                                    ], 'e-fade'), (0, ej2_base /* isNullOrUndefined */ .le)(_this.targetEle) ? (0, ej2_base /* addClass */ .cn)([
                                        document.body
                                    ], [
                                        DLG_TARGET,
                                        SCROLL_DISABLED
                                    ]) : (_this.targetEle === document.body ? _this.dlgContainer.style.position = 'fixed' : _this.dlgContainer.style.position = 'absolute', _this.dlgOverlay.style.position = 'absolute', _this.element.style.position = 'relative', (0, ej2_base /* addClass */ .cn)([
                                        _this.targetEle
                                    ], [
                                        DLG_TARGET,
                                        SCROLL_DISABLED
                                    ])));
                                    // eslint-disable-next-line
                                    var openAnimation = {
                                        name: _this.animationSettings.effect + 'In',
                                        duration: _this.animationSettings.duration,
                                        delay: _this.animationSettings.delay
                                    }, zIndexElement = _this.isModal ? _this.element.parentElement : _this.element;
                                    _this.calculatezIndex && (_this.setzIndex(zIndexElement, !0), (0, ej2_base /* setStyleAttribute */ .V7)(_this.element, {
                                        zIndex: _this.zIndex
                                    }), _this.isModal && _this.setOverlayZindex(_this.zIndex)), // eslint-disable-next-line
                                    'None' === _this.animationSettings.effect ? _this.popupObj.show() : _this.popupObj.show(openAnimation), _this.dialogOpen = !0;
                                    var prevOnChange = _this.isProtectedOnChange;
                                    _this.isProtectedOnChange = !0, _this.visible = !0, _this.preventVisibility = !0, _this.isProtectedOnChange = prevOnChange;
                                }
                            });
                        }
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        this.isReact && this.renderReactTemplates();
                    }
                }, /**
     * Closes the dialog if it is in visible state.
     *
     * @param { Event } event - specifies the event
     * @returns {void}
     */ Dialog.prototype.hide = function(event) {
                    var _this = this;
                    if (this.element.classList.contains(ROOT) && this.preventVisibility) {
                        var eventArgs = (0, ej2_base /* isBlazor */ .xr)() ? {
                            cancel: !1,
                            isInteracted: !!event,
                            element: this.element,
                            container: this.isModal ? this.dlgContainer : this.element,
                            event: event
                        } : {
                            cancel: !1,
                            isInteracted: !!event,
                            element: this.element,
                            target: this.target,
                            container: this.isModal ? this.dlgContainer : this.element,
                            event: event,
                            closedBy: this.dlgClosedBy
                        };
                        this.closeArgs = eventArgs, this.trigger('beforeClose', eventArgs, function(beforeCloseArgs) {
                            if (!beforeCloseArgs.cancel) {
                                _this.isModal && !(0, ej2_base /* isNullOrUndefined */ .le)(_this.targetEle) && (0, ej2_base /* removeClass */ .IV)([
                                    _this.targetEle
                                ], [
                                    DLG_TARGET,
                                    SCROLL_DISABLED
                                ]), document.body.classList.contains(DLG_TARGET) && document.body.classList.contains(SCROLL_DISABLED) && (0, ej2_base /* removeClass */ .IV)([
                                    document.body
                                ], [
                                    DLG_TARGET,
                                    SCROLL_DISABLED
                                ]);
                                // eslint-disable-next-line
                                var closeAnimation = {
                                    name: _this.animationSettings.effect + 'Out',
                                    duration: _this.animationSettings.duration,
                                    delay: _this.animationSettings.delay
                                };
                                // eslint-disable-next-line
                                'None' === _this.animationSettings.effect ? _this.popupObj.hide() : _this.popupObj.hide(closeAnimation), _this.dialogOpen = !1;
                                var prevOnChange = _this.isProtectedOnChange;
                                _this.isProtectedOnChange = !0, _this.visible = !1, _this.preventVisibility = !1, _this.isProtectedOnChange = prevOnChange;
                            }
                            _this.dlgClosedBy = DLG_USER_ACTION_CLOSED;
                        });
                    }
                }, // eslint-disable-next-line
                /**
     * Specifies to view the Full screen Dialog.
     *
     * @returns {void}
     * @private
     */ Dialog.prototype.fullScreen = function(args) {
                    /* eslint-enable */ if (this.element.offsetTop, this.element.offsetLeft, args) {
                        this.element.style.top = document.scrollingElement.scrollTop + 'px', (0, ej2_base /* addClass */ .cn)([
                            this.element
                        ], FULLSCREEN);
                        var display = this.element.style.display;
                        this.element.style.display = 'none', this.element.style.maxHeight = (0, ej2_base /* isNullOrUndefined */ .le)(this.target) ? window.innerHeight + 'px' : this.targetEle.offsetHeight + 'px', this.element.style.display = display, (0, ej2_base /* addClass */ .cn)([
                            document.body
                        ], [
                            DLG_TARGET,
                            SCROLL_DISABLED
                        ]), this.allowDragging && !(0, ej2_base /* isNullOrUndefined */ .le)(this.dragObj) && this.dragObj.destroy();
                    } else (0, ej2_base /* removeClass */ .IV)([
                        this.element
                    ], FULLSCREEN), (0, ej2_base /* removeClass */ .IV)([
                        document.body
                    ], [
                        DLG_TARGET,
                        SCROLL_DISABLED
                    ]), this.allowDragging && !(0, ej2_base /* isNullOrUndefined */ .le)(this.headerContent) && this.setAllowDragging();
                    return args;
                }, /**
     * Returns the dialog button instances.
     * Based on that, you can dynamically change the button states.
     *
     * @param { number } index - Index of the button.
     * @returns {Button} - returns the button element
     */ Dialog.prototype.getButtons = function(index) {
                    return (0, ej2_base /* isNullOrUndefined */ .le)(index) ? this.btnObj : this.btnObj[index];
                }, dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Dialog.prototype, "content", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], Dialog.prototype, "enableHtmlSanitizer", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Dialog.prototype, "showCloseIcon", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Dialog.prototype, "isModal", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Dialog.prototype, "header", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], Dialog.prototype, "visible", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Dialog.prototype, "enableResize", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)([
                        'South-East'
                    ])
                ], Dialog.prototype, "resizeHandles", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)('auto')
                ], Dialog.prototype, "height", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Dialog.prototype, "minHeight", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)('100%')
                ], Dialog.prototype, "width", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Dialog.prototype, "cssClass", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)(1000)
                ], Dialog.prototype, "zIndex", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], Dialog.prototype, "target", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Dialog.prototype, "footerTemplate", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Dialog.prototype, "allowDragging", void 0), dialog_decorate([
                    (0, ej2_base /* Collection */ .FE)([
                        {}
                    ], ButtonProps)
                ], Dialog.prototype, "buttons", void 0), dialog_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], Dialog.prototype, "closeOnEscape", void 0), dialog_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, AnimationSettings)
                ], Dialog.prototype, "animationSettings", void 0), dialog_decorate([
                    (0, ej2_base /* Complex */ .Zz)({
                        X: 'center',
                        Y: 'center'
                    }, popup /* PositionData */ .WV)
                ], Dialog.prototype, "position", void 0), dialog_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Dialog.prototype, "created", void 0), dialog_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Dialog.prototype, "open", void 0), dialog_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Dialog.prototype, "beforeSanitizeHtml", void 0), dialog_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Dialog.prototype, "beforeOpen", void 0), dialog_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Dialog.prototype, "close", void 0), dialog_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Dialog.prototype, "beforeClose", void 0), dialog_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Dialog.prototype, "dragStart", void 0), dialog_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Dialog.prototype, "dragStop", void 0), dialog_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Dialog.prototype, "drag", void 0), dialog_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Dialog.prototype, "overlayClick", void 0), dialog_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Dialog.prototype, "resizeStart", void 0), dialog_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Dialog.prototype, "resizing", void 0), dialog_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Dialog.prototype, "resizeStop", void 0), dialog_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Dialog.prototype, "destroyed", void 0), Dialog = dialog_decorate([
                    ej2_base /* NotifyPropertyChanges */ .Zl
                ], Dialog);
            }(ej2_base /* Component */ .wA);
            !function(DialogUtility) {
                // eslint-disable-next-line
                function createDialog(options, element) {
                    var dialogObject = new Dialog(options);
                    return dialogObject.appendTo(element), dialogObject;
                }
                // eslint-disable-next-line
                function formOptions(options, option) {
                    return options.header = (0, ej2_base /* isNullOrUndefined */ .le)(option.title) ? DLG_UTIL_DEFAULT_TITLE : option.title, options.content = (0, ej2_base /* isNullOrUndefined */ .le)(option.content) ? '' : option.content, options.isModal = !!(0, ej2_base /* isNullOrUndefined */ .le)(option.isModal) || option.isModal, options.showCloseIcon = !(0, ej2_base /* isNullOrUndefined */ .le)(option.showCloseIcon) && option.showCloseIcon, options.allowDragging = !(0, ej2_base /* isNullOrUndefined */ .le)(option.isDraggable) && option.isDraggable, options.closeOnEscape = !(0, ej2_base /* isNullOrUndefined */ .le)(option.closeOnEscape) && option.closeOnEscape, options.position = (0, ej2_base /* isNullOrUndefined */ .le)(option.position) ? {
                        X: 'center',
                        Y: 'top'
                    } : option.position, options.animationSettings = (0, ej2_base /* isNullOrUndefined */ .le)(option.animationSettings) ? {
                        effect: 'Fade',
                        duration: 400,
                        delay: 0
                    } : option.animationSettings, options.cssClass = (0, ej2_base /* isNullOrUndefined */ .le)(option.cssClass) ? '' : option.cssClass, options.zIndex = (0, ej2_base /* isNullOrUndefined */ .le)(option.zIndex) ? 1000 : option.zIndex, options.open = (0, ej2_base /* isNullOrUndefined */ .le)(option.open) ? null : option.open, options;
                }
                // eslint-disable-next-line
                function formButtonModel(buttonModel, option, buttonPropModel) {
                    return (0, ej2_base /* isNullOrUndefined */ .le)(option.text) || (buttonPropModel.buttonModel.content = option.text), (0, ej2_base /* isNullOrUndefined */ .le)(option.icon) || (buttonPropModel.buttonModel.iconCss = option.icon), (0, ej2_base /* isNullOrUndefined */ .le)(option.cssClass) || (buttonPropModel.buttonModel.cssClass = option.cssClass), (0, ej2_base /* isNullOrUndefined */ .le)(option.click) || (buttonPropModel.click = option.click), buttonPropModel;
                }
                DialogUtility.alert = /**
     * An alert dialog box is used to display warning like messages to the users.
     * ```
     * Eg : DialogUtility.alert('Alert message');
     *
     * ```
     */ /* istanbul ignore next */ /**
     *
     * @param {AlertDialogArgs} args - specifies the string
     * @returns {Dialog} - returns the dialog element.
     */ function(args) {
                    var options, options1, alertButtonModel, alertDialogObj, dialogElement = (0, ej2_base /* createElement */ .az)('div', {
                        className: DLG_UTIL_ALERT
                    });
                    return document.body.appendChild(dialogElement), (alertDialogObj = 'string' == typeof args ? createDialog({
                        content: args,
                        position: {
                            X: 'center',
                            Y: 'top'
                        },
                        isModal: !0,
                        header: DLG_UTIL_DEFAULT_TITLE,
                        buttons: [
                            {
                                buttonModel: {
                                    isPrimary: !0,
                                    content: 'OK'
                                },
                                click: function() {
                                    this.hide();
                                }
                            }
                        ]
                    }, dialogElement) : createDialog(((options = {}).buttons = [], options1 = options = formOptions(options, args), alertButtonModel = [
                        {
                            buttonModel: {
                                isPrimary: !0,
                                content: 'OK'
                            },
                            click: function() {
                                this.hide();
                            }
                        }
                    ], (0, ej2_base /* isNullOrUndefined */ .le)(args.okButton) ? options1.buttons = alertButtonModel : options1.buttons[0] = formButtonModel(options1.buttons[0], args.okButton, alertButtonModel[0]), options = options1), dialogElement)).close = function() {
                        args && args.close && args.close.apply(alertDialogObj), alertDialogObj.destroy(), alertDialogObj.element.classList.contains('e-dlg-modal') ? (alertDialogObj.element.parentElement.remove(), alertDialogObj.target.classList.remove(DLG_UTIL_ROOT)) : alertDialogObj.element.remove();
                    }, alertDialogObj;
                }, DialogUtility.confirm = /**
     * A confirm dialog displays a specified message along with ‘OK’ and ‘Cancel’ button.
     * ```
     * Eg : DialogUtility.confirm('Confirm dialog message');
     *
     * ```
     */ /* istanbul ignore next */ /**
     *
     * @param {ConfirmDialogArgs} args - specifies the args
     * @returns {Dialog} - returns te element
     */ function(args) {
                    var options, options1, okButtonModel, cancelButtonModel, confirmDialogObj, dialogElement = (0, ej2_base /* createElement */ .az)('div', {
                        className: DLG_UTIL_CONFIRM
                    });
                    return document.body.appendChild(dialogElement), (confirmDialogObj = 'string' == typeof args ? createDialog({
                        position: {
                            X: 'center',
                            Y: 'top'
                        },
                        content: args,
                        isModal: !0,
                        header: DLG_UTIL_DEFAULT_TITLE,
                        buttons: [
                            {
                                buttonModel: {
                                    isPrimary: !0,
                                    content: 'OK'
                                },
                                click: function() {
                                    this.hide();
                                }
                            },
                            {
                                buttonModel: {
                                    content: 'Cancel'
                                },
                                click: function() {
                                    this.hide();
                                }
                            }
                        ]
                    }, dialogElement) : createDialog(((options = {}).buttons = [], options1 = options = formOptions(options, args), okButtonModel = {
                        buttonModel: {
                            isPrimary: !0,
                            content: 'OK'
                        },
                        click: function() {
                            this.hide();
                        }
                    }, cancelButtonModel = {
                        buttonModel: {
                            content: 'Cancel'
                        },
                        click: function() {
                            this.hide();
                        }
                    }, (0, ej2_base /* isNullOrUndefined */ .le)(args.okButton) ? options1.buttons[0] = okButtonModel : options1.buttons[0] = formButtonModel(options1.buttons[0], args.okButton, okButtonModel), (0, ej2_base /* isNullOrUndefined */ .le)(args.cancelButton) ? options1.buttons[1] = cancelButtonModel : options1.buttons[1] = formButtonModel(options1.buttons[1], args.cancelButton, cancelButtonModel), options = options1), dialogElement)).close = function() {
                        args && args.close && args.close.apply(confirmDialogObj), confirmDialogObj.destroy(), confirmDialogObj.element.classList.contains('e-dlg-modal') ? (confirmDialogObj.element.parentElement.remove(), confirmDialogObj.target.classList.remove(DLG_UTIL_ROOT)) : confirmDialogObj.element.remove();
                    }, confirmDialogObj;
                };
            }(DialogUtility || (DialogUtility = {}));
            /**
 * Dialog Renderer
 */ var DialogRenderer = /** @class */ function() {
                function DialogRenderer(parent) {
                    this.parent = parent, this.addEventListener();
                }
                return DialogRenderer.prototype.addEventListener = function() {
                    this.parent.isDestroyed || (this.parent.on(constant /* moduleDestroy */ .P0, this.moduleDestroy, this), this.parent.on(constant /* destroy */ .ob, this.removeEventListener, this));
                }, DialogRenderer.prototype.removeEventListener = function() {
                    this.parent.isDestroyed || (this.parent.off(constant /* destroy */ .ob, this.removeEventListener), this.parent.off(constant /* moduleDestroy */ .P0, this.moduleDestroy));
                }, /**
     * dialog render method
     *
     * @param {DialogModel} e - specifies the dialog model.
     * @returns {void}
     * @hidden

     */ DialogRenderer.prototype.render = function(e) {
                    var dlgObj;
                    return e.beforeOpen = this.beforeOpen.bind(this), e.open = this.open.bind(this), (0, ej2_base /* isNullOrUndefined */ .le)(e.close) && (e.close = this.close.bind(this)), e.beforeClose = this.beforeClose.bind(this), // eslint-disable-next-line
                    (dlgObj = new Dialog(e)).isStringTemplate = !0, dlgObj;
                }, DialogRenderer.prototype.beforeOpen = function(args) {
                    this.parent.trigger(constant /* beforeDialogOpen */ .Yb, args, this.beforeOpenCallback.bind(this, args));
                }, DialogRenderer.prototype.beforeOpenCallback = function(args) {
                    args.cancel && this.parent.notify(constant /* clearDialogObj */ .zA, null);
                }, DialogRenderer.prototype.open = function(args) {
                    this.parent.trigger(constant /* dialogOpen */ .p0, args);
                }, DialogRenderer.prototype.beforeClose = function(args) {
                    this.parent.trigger(constant /* beforeDialogClose */ .mf, args, function(closeArgs) {
                        !closeArgs.cancel && closeArgs.container.classList.contains('e-popup-close') && (closeArgs.cancel = !0);
                    });
                }, /**
     * dialog close method
     *
     * @param {Object} args - specifies the arguments.
     * @returns {void}
     * @hidden

     */ DialogRenderer.prototype.close = function(args) {
                    this.parent.trigger(constant /* dialogClose */ .z6, args);
                }, DialogRenderer.prototype.moduleDestroy = function() {
                    this.parent = null;
                }, DialogRenderer;
            }(), rich_text_editor_extends = (extendStatics12 = function(d, b) {
                return (extendStatics12 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics12(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), __assign = function() {
                return (__assign = Object.assign || function(t) {
                    for(var s, i = 1, n = arguments.length; i < n; i++)for(var p in s = arguments[i])Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
                    return t;
                }).apply(this, arguments);
            }, rich_text_editor_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, RichTextEditor = /** @class */ function(_super) {
                function RichTextEditor(options, element) {
                    var _this = _super.call(this, options, element) || this;
                    return _this.needsID = !0, _this;
                }
                return rich_text_editor_extends(RichTextEditor, _super), /**
     * To provide the array of modules needed for component rendering
     *
     * @returns {ModuleDeclaration[]} - specifies the declaration.
     * @hidden

     */ RichTextEditor.prototype.requiredModules = function() {
                    var modules = [];
                    return this.toolbarSettings.enable && (modules.push({
                        member: 'toolbar',
                        args: [
                            this,
                            this.serviceLocator
                        ]
                    }), modules.push({
                        member: 'link',
                        args: [
                            this,
                            this.serviceLocator
                        ]
                    }), modules.push({
                        member: 'table',
                        args: [
                            this,
                            this.serviceLocator
                        ]
                    }), modules.push({
                        member: 'image',
                        args: [
                            this,
                            this.serviceLocator
                        ]
                    }), this.quickToolbarSettings.enable && modules.push({
                        member: 'quickToolbar',
                        args: [
                            this,
                            this.serviceLocator
                        ]
                    })), this.showCharCount && modules.push({
                        member: 'count',
                        args: [
                            this,
                            this.serviceLocator
                        ]
                    }), 'Markdown' === this.editorMode && modules.push({
                        member: 'markdownEditor',
                        args: [
                            this,
                            this.serviceLocator
                        ]
                    }), 'HTML' === this.editorMode && (modules.push({
                        member: 'htmlEditor',
                        args: [
                            this,
                            this.serviceLocator
                        ]
                    }), modules.push({
                        member: 'pasteCleanup',
                        args: [
                            this,
                            this.serviceLocator
                        ]
                    })), this.fileManagerSettings.enable && modules.push({
                        member: 'fileManager',
                        args: [
                            this,
                            this.serviceLocator
                        ]
                    }), this.enableResize && modules.push({
                        member: 'resize',
                        args: [
                            this
                        ]
                    }), modules;
                }, RichTextEditor.prototype.updateEnable = function() {
                    this.enabled ? ((0, ej2_base /* removeClass */ .IV)([
                        this.element
                    ], classes /* CLS_DISABLED */ .xu), this.element.setAttribute('aria-disabled', 'false'), (0, ej2_base /* isNullOrUndefined */ .le)(this.htmlAttributes.tabindex) ? this.inputElement.setAttribute('tabindex', '0') : this.inputElement.setAttribute('tabindex', this.htmlAttributes.tabindex)) : (this.getToolbar() && ((0, ej2_base /* removeClass */ .IV)(this.getToolbar().querySelectorAll('.' + classes /* CLS_ACTIVE */ .XS), classes /* CLS_ACTIVE */ .XS), (0, ej2_base /* removeClass */ .IV)([
                        this.getToolbar()
                    ], [
                        classes /* CLS_TB_FLOAT */ .to,
                        classes /* CLS_TB_ABS_FLOAT */ .IW
                    ])), (0, ej2_base /* addClass */ .cn)([
                        this.element
                    ], classes /* CLS_DISABLED */ .xu), this.element.tabIndex = -1, this.element.setAttribute('aria-disabled', 'true'), this.inputElement.setAttribute('tabindex', '-1'));
                }, /**
     * setEnable method
     *
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.setEnable = function() {
                    this.updateEnable(), // eslint-disable-next-line
                    this.enabled ? this.eventInitializer() : this.unWireEvents();
                }, RichTextEditor.prototype.initializeValue = function() {
                    this.isFocusOut = !1, this.isRTE = !1, this.isBlur = !0, this.defaultResetValue = null, this.isResizeInitialized = !1;
                }, /**
     * For internal use only - Initialize the event handler;
     *
     * @returns {void}
     * @hidden
     * @private
     */ RichTextEditor.prototype.preRender = function() {
                    this.initializeValue(), this.onBlurHandler = this.blurHandler.bind(this), this.onFocusHandler = this.focusHandler.bind(this), this.onResizeHandler = this.resizeHandler.bind(this), this.clickPoints = {
                        clientX: 0,
                        clientY: 0
                    }, this.initialValue = this.value, this.serviceLocator = new service_locator /* ServiceLocator */ .S, this.initializeServices(), this.setContainer(), this.persistData(), (0, ej2_base /* setStyleAttribute */ .V7)(this.element, {
                        width: (0, ej2_base /* formatUnit */ .Ac)(this.width)
                    }), (0, ej2_base /* attributes */ .Y4)(this.element, {
                        role: 'application'
                    });
                }, RichTextEditor.prototype.persistData = function() {
                    if (this.enablePersistence && 'TEXTAREA' === this.originalElement.tagName) {
                        this.element.id = this.originalElement.id + '_wrapper';
                        var data = window.localStorage.getItem(this.getModuleName() + this.element.id);
                        (0, ej2_base /* isNullOrUndefined */ .le)(data) || '' === data || this.setProperties(JSON.parse(data), !0);
                    }
                }, RichTextEditor.prototype.setContainer = function() {
                    this.originalElement = this.element.cloneNode(!0), (null === this.value || null !== this.valueTemplate) && this.setValue(), this.element.hasAttribute('tabindex') && (this.htmlAttributes = {
                        tabindex: this.element.getAttribute('tabindex')
                    }, this.element.removeAttribute('tabindex')), this.element.innerHTML = '';
                    for(var invalidAttr = [
                        'class',
                        'style',
                        'id',
                        'ejs-for'
                    ], htmlAttr = {}, a = 0; a < this.element.attributes.length; a++)-1 !== invalidAttr.indexOf(this.element.attributes[a].name) || /^data-val/.test(this.element.attributes[a].name) || (htmlAttr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name));
                    if ((0, ej2_base /* extend */ .l7)(htmlAttr, this.htmlAttributes, htmlAttr), this.setProperties({
                        htmlAttributes: htmlAttr
                    }, !0), (0, ej2_base /* isNullOrUndefined */ .le)(this.htmlAttributes.id) || (this.element.id = this.htmlAttributes.id), 'TEXTAREA' === this.element.tagName) {
                        var rteOuterWrapper = this.createElement('div', {
                            className: this.element.getAttribute('class')
                        });
                        this.element.innerHTML = '', this.element.parentElement.insertBefore(rteOuterWrapper, this.element), this.valueContainer = this.element, (0, ej2_base /* removeClass */ .IV)([
                            this.valueContainer
                        ], this.element.getAttribute('class').split(' ')), this.element = rteOuterWrapper;
                    } else this.valueContainer = this.createElement('textarea', {
                        id: this.getID() + '-value',
                        attrs: {
                            'aria-labelledby': this.getID()
                        }
                    });
                    if (this.valueContainer.name = this.getID(), (0, ej2_base /* addClass */ .cn)([
                        this.valueContainer
                    ], classes /* CLS_RTE_HIDDEN */ .je), !(0, ej2_base /* isNullOrUndefined */ .le)(this.cssClass)) for(var currentClassList = this.cssClass.split(' '), i = 0; i < currentClassList.length; i++)(0, ej2_base /* addClass */ .cn)([
                        this.valueContainer
                    ], currentClassList[i]);
                    this.element.appendChild(this.valueContainer);
                }, /**
     * getPersistData method
     *
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.getPersistData = function() {
                    return this.addOnPersist([
                        'value'
                    ]);
                }, /**
     * Focuses the Rich Text Editor component
     *
     * @returns {void}
     * @public
     */ RichTextEditor.prototype.focusIn = function() {
                    this.enabled && (this.inputElement.focus(), this.focusHandler({}));
                }, /**
     * Blurs the Rich Text Editor component
     *
     * @returns {void}
     * @public
     */ RichTextEditor.prototype.focusOut = function() {
                    this.enabled && (this.inputElement.blur(), this.blurHandler({}));
                }, /**
     * Selects all the content in RichTextEditor
     *
     * @returns {void}
     * @public
     */ RichTextEditor.prototype.selectAll = function() {
                    this.notify(constant /* selectAll */ .td, {});
                }, /**
     * Selects a content range or an element
     *
     * @param {Range} range - Specify the range which you want to select within the content.
     * The method used to select a particular sentence or word or entire document.
     *
     * @returns {void}
     * @public
     */ RichTextEditor.prototype.selectRange = function(range) {
                    this.notify(constant /* selectRange */ .jh, {
                        range: range
                    });
                }, /**
     * Retrieves the HTML markup content from currently selected content of RichTextEditor.
     *
     * @returns {void}
     * @public
     */ RichTextEditor.prototype.getSelection = function() {
                    var str = '';
                    return this.notify(constant /* getSelectedHtml */ .Db, {
                        callBack: function(txt) {
                            str = txt;
                        }
                    }), str;
                }, /**
     * Executes the commands
     *
     * @returns {void}
     * @param {CommandName} commandName - Specifies the name of the command to be executed.
     * @param {string | HTMLElement | ILinkCommandsArgs | IImageCommandsArgs} value - Specifies the value that you want to execute.
     * @param {ExecuteCommandOption} option - specifies the command option
     * @public
     */ RichTextEditor.prototype.executeCommand = function(commandName, value, option) {
                    if (value = this.htmlPurifier(commandName, value), 'HTML' === this.editorMode) {
                        var range = this.getRange();
                        this.iframeSettings.enable && this.formatter.editorManager.nodeSelection.Clear(this.element.ownerDocument), (this.iframeSettings.enable && range.startContainer === this.inputElement || !this.inputElement.contains(range.startContainer)) && this.focusIn();
                    }
                    var tool = executeGroup[commandName];
                    if (option && option.undo && option.undo && 0 === this.formatter.getUndoRedoStack().length && this.formatter.saveData(), -1 !== this.maxLength && !(0, ej2_base /* isNullOrUndefined */ .le)(tool.command)) {
                        var currentInsertContentLength = 0;
                        if ('Links' === tool.command && (currentInsertContentLength = 0 === value.text.length ? value.url.length : value.text.length), ('Images' === tool.command || 'Table' === tool.command || 'Files' === tool.command) && (currentInsertContentLength = 1), 'InsertHTML' === tool.command) {
                            if ((0, ej2_base /* isNullOrUndefined */ .le)(value)) (0, ej2_base /* isNullOrUndefined */ .le)(tool.value) || '<hr/>' !== tool.value && '<br/>' !== tool.value || (currentInsertContentLength = 1);
                            else {
                                var tempElem = this.createElement('div');
                                tempElem.innerHTML = value, currentInsertContentLength = tempElem.textContent.length;
                            }
                        }
                        'InsertText' === tool.command && (currentInsertContentLength = value.length);
                        var totalLength = this.getText().trim().length - this.getSelection().length + currentInsertContentLength;
                        if (!(-1 === this.maxLength || totalLength <= this.maxLength)) return;
                    }
                    this.formatter.editorManager.execCommand(tool.command, tool.subCommand ? tool.subCommand : value || tool.value, null, null, value || tool.value, value || tool.value), option && option.undo && (this.formatter.saveData(), this.formatter.enableUndo(this)), this.setPlaceHolder(), this.notify(constant /* contentChanged */ .Ak, {});
                }, RichTextEditor.prototype.htmlPurifier = function(command, value) {
                    if ('HTML' === this.editorMode) switch(command){
                        case 'insertHTML':
                            this.enableHtmlSanitizer && (value = 'string' == typeof value ? this.htmlEditorModule.sanitizeHelper(value) : this.htmlEditorModule.sanitizeHelper(value.outerHTML));
                            break;
                        case 'insertTable':
                            (0, ej2_base /* isNullOrUndefined */ .le)(value.width) && (value.width = {
                                minWidth: this.tableSettings.minWidth,
                                maxWidth: this.tableSettings.maxWidth,
                                width: this.tableSettings.width
                            });
                            break;
                        case 'insertImage':
                            var temp = this.createElement('img', {
                                attrs: {
                                    src: value.url
                                }
                            }), imageValue = temp.outerHTML;
                            this.enableHtmlSanitizer && (imageValue = this.htmlEditorModule.sanitizeHelper(temp.outerHTML));
                            var url = '' !== imageValue && this.createElement('div', {
                                innerHTML: imageValue
                            }).firstElementChild.getAttribute('src') || null;
                            url = (0, ej2_base /* isNullOrUndefined */ .le)(url) ? '' : url, value.url = url, (0, ej2_base /* isNullOrUndefined */ .le)(value.width) && (value.width = {
                                minWidth: this.insertImageSettings.minWidth,
                                maxWidth: this.insertImageSettings.maxWidth,
                                width: this.insertImageSettings.width
                            }), (0, ej2_base /* isNullOrUndefined */ .le)(value.height) && (value.height = {
                                minHeight: this.insertImageSettings.minHeight,
                                maxHeight: this.insertImageSettings.maxHeight,
                                height: this.insertImageSettings.height
                            });
                            break;
                        case 'createLink':
                            var tempNode = this.createElement('a', {
                                attrs: {
                                    href: value.url
                                }
                            }), linkValue = tempNode.outerHTML;
                            this.enableHtmlSanitizer && (linkValue = this.htmlEditorModule.sanitizeHelper(tempNode.outerHTML));
                            var href = '' !== linkValue && this.createElement('div', {
                                innerHTML: linkValue
                            }).firstElementChild.getAttribute('href') || null;
                            href = (0, ej2_base /* isNullOrUndefined */ .le)(href) ? '' : href, value.url = href;
                    }
                    return value;
                }, RichTextEditor.prototype.encode = function(value) {
                    var divNode = this.createElement('div');
                    // eslint-disable-next-line
                    return divNode.innerText = value.trim(), divNode.innerHTML.replace(/<br\s*[\/]?>/gi, '\n');
                }, /**
     * For internal use only - To Initialize the component rendering.
     *
     * @returns {void}
     * @private

     */ RichTextEditor.prototype.render = function() {
                    this.value && !this.valueTemplate && this.setProperties({
                        value: this.serializeValue(this.value)
                    }, !0), this.renderModule = new Render(this, this.serviceLocator), this.sourceCodeModule = new ViewSource(this, this.serviceLocator), this.notify(constant /* initialLoad */ .T5, {}), this.trigger(constant /* load */ .zD), this.RTERender(), new ExecCommandCallBack(this), this.notify(constant /* initialEnd */ .Xr, {}), this.enableXhtml && this.setProperties({
                        value: this.getXhtml()
                    }, !0), this.toolbarSettings.enable && 'Expand' === this.toolbarSettings.type && !(0, ej2_base /* isNullOrUndefined */ .le)(this.getToolbar()) && this.toolbarSettings.items.indexOf('Undo') > -1 && this.toolbarSettings.items.indexOf('Redo') > -1 && this.disableToolbarItem([
                        'Undo',
                        'Redo'
                    ]), this.setContentHeight(), null !== this.value && (this.valueContainer.defaultValue = this.value), this.enabled ? this.eventInitializer() : this.unWireEvents(), this.notify(constant /* bindCssClass */ ._8, {
                        cssClass: this.cssClass
                    }), this.notify(constant /* tableclass */ .LF, {}), this.renderComplete();
                }, /**
     * For internal use only - Initialize the event handler
     *
     * @returns {void}
     * @private

     * @hidden
     */ RichTextEditor.prototype.eventInitializer = function() {
                    this.wireEvents();
                }, RichTextEditor.prototype.cleanList = function(e) {
                    var range = this.getRange(), currentStartContainer = range.startContainer, currentEndContainer = range.endContainer, currentStartOffset = range.startOffset, isSameContainer = currentStartContainer === currentEndContainer, currentEndOffset = currentEndContainer.textContent.length, endNode = '#text' === range.endContainer.nodeName ? range.endContainer.parentElement : range.endContainer, closestLI = (0, ej2_base /* closest */ .oq)(endNode, 'LI');
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(closestLI) && endNode.textContent.length === range.endOffset && !range.collapsed && (0, ej2_base /* isNullOrUndefined */ .le)(endNode.nextElementSibling)) {
                        for(var i = 0; i < closestLI.childNodes.length; i++)"#text" === closestLI.childNodes[i].nodeName && 0 === closestLI.childNodes[i].textContent.trim().length && ((0, ej2_base /* detach */ .og)(closestLI.childNodes[i]), i--);
                        for(var currentLastElem = closestLI; null !== currentLastElem.lastChild && '#text' !== currentLastElem.nodeName;)currentLastElem = currentLastElem.lastChild;
                        this.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), isSameContainer ? currentStartContainer : 'BR' !== currentLastElem.nodeName || (0, ej2_base /* isNullOrUndefined */ .le)(currentLastElem.previousSibling) ? currentStartContainer : currentLastElem.previousSibling, currentEndContainer, currentStartOffset, 'BR' === currentLastElem.nodeName ? 0 : currentEndOffset);
                    }
                }, /**
     * For internal use only - keydown the event handler;
     *
     * @param {KeyboardEvent} e - specifies the event.
     * @returns {void}
     * @private

     * @hidden
     */ RichTextEditor.prototype.keyDown = function(e) {
                    if (this.notify(constant /* keyDown */ .QG, {
                        member: 'keydown',
                        args: e
                    }), this.restrict(e), 'HTML' === this.editorMode && this.cleanList(e), 'HTML' === this.editorMode && (8 === e.which && 'Backspace' === e.code || 46 === e.which && 'Delete' === e.code)) {
                        var range = this.getRange(), startNode = '#text' === range.startContainer.nodeName ? range.startContainer.parentElement : range.startContainer;
                        if ((0, ej2_base /* closest */ .oq)(startNode, 'pre') && 8 === e.which && 8203 === range.startContainer.textContent.charCodeAt(range.startOffset - 1) || 46 === e.which && 8203 === range.startContainer.textContent.charCodeAt(range.startOffset)) {
                            var regEx = RegExp(String.fromCharCode(8203), 'g'), pointer = 8 === e.which ? range.startOffset - 1 : range.startOffset;
                            range.startContainer.textContent = range.startContainer.textContent.replace(regEx, ''), this.formatter.editorManager.nodeSelection.setCursorPoint(this.contentModule.getDocument(), range.startContainer, pointer);
                        } else if ('Backspace' === e.code && 8 === e.which && 8203 === range.startContainer.textContent.charCodeAt(0) && range.collapsed) {
                            var parentEle = range.startContainer.parentElement, index = void 0, i = void 0;
                            for(i = 0; i < parentEle.childNodes.length; i++)parentEle.childNodes[i] === range.startContainer && (index = i);
                            var bool = !0, removeNodeArray = [];
                            for(i = index; i >= 0; i--)3 === parentEle.childNodes[i].nodeType && 8203 === parentEle.childNodes[i].textContent.charCodeAt(0) && bool ? removeNodeArray.push(i) : bool = !1;
                            if (removeNodeArray.length > 0) for(i = removeNodeArray.length - 1; i > 0; i--)parentEle.childNodes[removeNodeArray[i]].textContent = '';
                            this.formatter.editorManager.nodeSelection.setCursorPoint(this.contentModule.getDocument(), range.startContainer, range.startOffset);
                        }
                    }
                    if (0 === this.formatter.getUndoRedoStack().length && this.formatter.saveData(), 'insert-link' !== e.action && (e.action && 'paste' !== e.action && 'space' !== e.action || 9 === e.which || 'Backspace' === e.code && 8 === e.which)) switch(this.formatter.process(this, null, e), e.action){
                        case 'toolbar-focus':
                            this.toolbarSettings.enable && this.toolbarModule.baseToolbar.toolbarObj.element.querySelector('.e-toolbar-item[aria-disabled="false"][title] [tabindex]').focus();
                            break;
                        case 'escape':
                            this.contentModule.getEditPanel().focus();
                    }
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.placeholder) || ((0, ej2_base /* isNullOrUndefined */ .le)(this.placeHolderWrapper) || 1 === this.inputElement.textContent.length ? this.setPlaceHolder() : this.placeHolderWrapper.style.display = 'none'), this.autoResize();
                }, RichTextEditor.prototype.keyUp = function(e) {
                    if ("HTML" === this.editorMode) {
                        var range = this.getRange();
                        if (-1 != ej2_base /* Browser.userAgent.indexOf */ .AR.userAgent.indexOf('Firefox') && '#text' === range.startContainer.nodeName && range.startContainer.parentElement === this.inputElement && 'BR' !== this.enterKey) {
                            var range_1 = this.getRange(), tempElem = this.createElement(this.enterKey);
                            range_1.startContainer.parentElement.insertBefore(tempElem, range_1.startContainer), tempElem.appendChild(range_1.startContainer), this.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), tempElem.childNodes[0], tempElem.childNodes[0], tempElem.childNodes[0].textContent.length, tempElem.childNodes[0].textContent.length);
                        }
                    }
                    this.notify(constant /* keyUp */ .yR, {
                        member: 'keyup',
                        args: e
                    }), 'KeyX' === e.code && 88 === e.which && 88 === e.keyCode && e.ctrlKey && ('' === this.inputElement.innerHTML || '<br>' === this.inputElement.innerHTML) && (this.inputElement.innerHTML = (0, util /* getEditValue */ .v7)((0, util /* getDefaultValue */ .oG)(this), this));
                    var allowedKeys = 32 === e.which || 13 === e.which || 8 === e.which || 46 === e.which;
                    ('shift' !== e.key && !e.ctrlKey && e.key && 1 === e.key.length || allowedKeys || 'Markdown' === this.editorMode && ('shift' !== e.key && !e.ctrlKey && e.key && 1 === e.key.length || allowedKeys) && !this.inlineMode.enable) && this.formatter.onKeyHandler(this, e), (this.inputElement && 0 !== this.inputElement.textContent.length || this.element.querySelectorAll('.e-toolbar-item.e-active').length > 0) && this.notify(constant /* toolbarRefresh */ .l0, {
                        args: e
                    }), (0, ej2_base /* isNullOrUndefined */ .le)(this.placeholder) || 'Enter' === e.key && 13 === e.keyCode || '<p><br></p>' !== this.inputElement.innerHTML && '<div><br></div>' !== this.inputElement.innerHTML && '<br>' !== this.inputElement.innerHTML || this.setPlaceHolder();
                }, /**
     * @param {string} value - specifies the value.
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.serializeValue = function(value) {
                    return 'HTML' !== this.editorMode || (0, ej2_base /* isNullOrUndefined */ .le)(value) || (this.enableHtmlEncode ? (value = this.htmlEditorModule.sanitizeHelper((0, util /* decode */ .Jx)(value)), value = this.encode(value)) : value = this.htmlEditorModule.sanitizeHelper(value)), value;
                }, /**
     * This method will clean up the HTML against cross-site scripting attack and return the HTML as string.
     * It's only applicable to editorMode as `HTML`.
     *
     * @param {string} value - Specifies the value that you want to sanitize.
     * @returns {string} - specifies the the string value
     */ RichTextEditor.prototype.sanitizeHtml = function(value) {
                    return this.serializeValue(value);
                }, /**
     * updateValue method
     *
     * @param {string} value - specifies the string value.
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.updateValue = function(value) {
                    if ((0, ej2_base /* isNullOrUndefined */ .le)(value)) {
                        var inputVal = this.inputElement.innerHTML;
                        this.setProperties({
                            value: (0, util /* isEditableValueEmpty */ .nu)(inputVal) ? null : inputVal
                        });
                    } else this.setProperties({
                        value: value
                    });
                }, RichTextEditor.prototype.triggerEditArea = function(e) {
                    if ((0, util /* isIDevice */ .FA)()) {
                        var touch = e.touches ? e.changedTouches[0] : e;
                        this.clickPoints.clientX === touch.clientX && this.clickPoints.clientY === touch.clientY && this.notify(constant /* editAreaClick */ .uU, {
                            member: 'editAreaClick',
                            args: e
                        });
                    } else this.notify(constant /* editAreaClick */ .uU, {
                        member: 'editAreaClick',
                        args: e
                    });
                }, RichTextEditor.prototype.notifyMouseUp = function(e) {
                    var touch = e.touches ? e.changedTouches[0] : e;
                    this.notify(constant /* mouseUp */ .vV, {
                        member: 'mouseUp',
                        args: e,
                        touchData: {
                            prevClientX: this.clickPoints.clientX,
                            prevClientY: this.clickPoints.clientY,
                            clientX: touch.clientX,
                            clientY: touch.clientY
                        }
                    }), this.inputElement && ('HTML' === this.editorMode && 0 !== this.inputElement.textContent.length || 'Markdown' === this.editorMode && 0 !== this.inputElement.value.length) && this.notify(constant /* toolbarRefresh */ .l0, {
                        args: e
                    }), this.triggerEditArea(e);
                }, RichTextEditor.prototype.mouseUp = function(e) {
                    if (this.quickToolbarSettings.showOnRightClick && ej2_base /* Browser.isDevice */ .AR.isDevice) {
                        var target = e.target, closestTable = (0, ej2_base /* closest */ .oq)(target, 'table');
                        if (target && 'A' === target.nodeName || 'IMG' === target.nodeName || 'TD' === target.nodeName || 'TH' === target.nodeName || 'TABLE' === target.nodeName || closestTable && this.contentModule.getEditPanel().contains(closestTable)) return;
                    }
                    if (this.notifyMouseUp(e), 3 === e.detail) {
                        var range = this.getRange(), selection = this.formatter.editorManager.domNode.getSelection();
                        /\s+$/.test(selection.toString()) && (!(0, ej2_base /* isNullOrUndefined */ .le)(range.startContainer.parentElement) && (!(0, ej2_base /* isNullOrUndefined */ .le)(range.startContainer.parentElement.nextSibling) && (3 !== range.startContainer.parentElement.nextSibling.nodeType || /\s+$/.test(range.startContainer.parentElement.nextSibling.textContent)) || range.startOffset === range.endOffset) || 'li' === range.startContainer.parentElement.tagName.toLocaleLowerCase()) && (range.setStart(range.startContainer, range.startOffset), range.setEnd(range.startContainer, range.startContainer.textContent.length));
                    }
                }, /**
     * @param {Function} module - specifies the module function.
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.ensureModuleInjected = function(module) {
                    return this.getInjectedModules().indexOf(module) >= 0;
                }, /**
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.onCopy = function() {
                    this.contentModule.getDocument().execCommand('copy', !1, null);
                }, /**
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.onCut = function() {
                    this.contentModule.getDocument().execCommand('cut', !1, null);
                }, /**
     * @param {KeyboardEvent} e - specifies the keyboard event.
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.onPaste = function(e) {
                    var _this = this;
                    this.trigger(constant /* actionBegin */ .m2, {
                        originalEvent: e,
                        cancel: !1,
                        requestType: 'Paste'
                    }, function(pasteArgs) {
                        var totalLength = _this.inputElement.textContent.length - _this.getSelection().length + ((0, ej2_base /* isNullOrUndefined */ .le)(e) || (0, ej2_base /* isNullOrUndefined */ .le)(e.clipboardData) ? 0 : e.clipboardData.getData('text/plain').length);
                        if ('Markdown' === _this.editorMode) {
                            var args_1 = {
                                requestType: 'Paste',
                                editorMode: _this.editorMode,
                                event: e
                            };
                            setTimeout(function() {
                                _this.formatter.onSuccess(_this, args_1);
                            }, 0), -1 === _this.maxLength || totalLength <= _this.maxLength || e.preventDefault();
                            return;
                        }
                        if (!pasteArgs.cancel && 'true' === _this.inputElement.contentEditable && (-1 === _this.maxLength || totalLength <= _this.maxLength)) {
                            if ((0, ej2_base /* isNullOrUndefined */ .le)(_this.pasteCleanupModule)) {
                                var args_2 = {
                                    requestType: 'Paste',
                                    editorMode: _this.editorMode,
                                    event: e
                                }, value = null, htmlValue = !1;
                                e && !(0, ej2_base /* isNullOrUndefined */ .le)(e.clipboardData) && (value = e.clipboardData.getData('text/plain'), htmlValue = e.clipboardData.getData('text/html').indexOf('MsoNormal') > 0);
                                var file = e && e.clipboardData && e.clipboardData.items.length > 0 ? e.clipboardData.items[0].getAsFile() : null;
                                null !== value && _this.notify(constant /* paste */ .RE, {
                                    file: file,
                                    args: e,
                                    text: value,
                                    isWordPaste: htmlValue
                                }), setTimeout(function() {
                                    _this.formatter.onSuccess(_this, args_2);
                                }, 0);
                            } else _this.notify(constant /* pasteClean */ .dI, {
                                args: e
                            });
                        } else e.preventDefault();
                    });
                }, /**
     * @param {string} action - specifies the string value.
     * @param {MouseEvent} event - specifies the event.
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.clipboardAction = function(action, event) {
                    switch(action.toLowerCase()){
                        case 'cut':
                            this.onCut(), this.formatter.onSuccess(this, {
                                requestType: 'Cut',
                                editorMode: this.editorMode,
                                event: event
                            });
                            break;
                        case 'copy':
                            this.onCopy(), this.formatter.onSuccess(this, {
                                requestType: 'Copy',
                                editorMode: this.editorMode,
                                event: event
                            });
                            break;
                        case 'paste':
                            this.onPaste(event);
                    }
                }, /**
     * Destroys the component (detaches/removes all event handlers, attributes, classes, and empties the component element).
     *
     * @returns {void}
     */ RichTextEditor.prototype.destroy = function() {
                    if (!this.isDestroyed && this.isRendered) {
                        if (null === this.element.offsetParent) {
                            (0, ej2_base /* isNullOrUndefined */ .le)(this.toolbarModule) || this.toolbarModule.destroy(), this.notify(constant /* moduleDestroy */ .P0, {});
                            return;
                        }
                        if (this.notify(constant /* destroy */ .ob, {}), this.destroyDependentModules(), (0, ej2_base /* isNullOrUndefined */ .le)(this.timeInterval) || (clearInterval(this.timeInterval), this.timeInterval = null), this.unWireEvents(), 'TEXTAREA' === this.originalElement.tagName) {
                            this.element.parentElement.insertBefore(this.valueContainer, this.element), this.valueContainer.id = this.getID(), this.valueContainer.removeAttribute('name'), (0, ej2_base /* detach */ .og)(this.element), '' !== this.originalElement.innerHTML.trim() ? (this.valueContainer.value = this.originalElement.innerHTML.trim(), this.setProperties({
                                value: (0, ej2_base /* isNullOrUndefined */ .le)(this.initialValue) ? null : this.initialValue
                            }, !0)) : this.valueContainer.value = this.valueContainer.defaultValue, this.element = this.valueContainer;
                            for(var i = 0; i < this.originalElement.classList.length; i++)(0, ej2_base /* addClass */ .cn)([
                                this.element
                            ], this.originalElement.classList[i]);
                            if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.cssClass)) for(var currentClassList = this.cssClass.split(' '), i = 0; i < currentClassList.length; i++)(0, ej2_base /* addClass */ .cn)([
                                this.element
                            ], currentClassList[i]);
                            (0, ej2_base /* removeClass */ .IV)([
                                this.element
                            ], classes /* CLS_RTE_HIDDEN */ .je);
                        } else '' !== this.originalElement.innerHTML.trim() ? (this.element.innerHTML = this.originalElement.innerHTML.trim(), this.setProperties({
                            value: (0, ej2_base /* isNullOrUndefined */ .le)(this.initialValue) ? null : this.initialValue
                        }, !0)) : this.element.innerHTML = '';
                        if (this.placeholder && this.placeHolderWrapper && (this.placeHolderWrapper = null), !(0, ej2_base /* isNullOrUndefined */ .le)(this.cssClass)) for(var allClassName = this.cssClass.split(' '), i = 0; i < allClassName.length; i++)'' !== allClassName[i].trim() && (0, ej2_base /* removeClass */ .IV)([
                            this.element
                        ], allClassName[i]);
                        this.removeHtmlAttributes(), this.removeAttributes(), _super.prototype.destroy.call(this), this.isRendered = !1, this.enablePersistence && window.localStorage.removeItem(this.getModuleName() + this.element.id);
                    }
                }, RichTextEditor.prototype.removeHtmlAttributes = function() {
                    if (this.htmlAttributes) for(var keys = Object.keys(this.htmlAttributes), i = 0; i < keys.length && this.element.hasAttribute(keys[i]); i++)this.element.removeAttribute(keys[i]);
                }, RichTextEditor.prototype.removeAttributes = function() {
                    this.enabled || (0, ej2_base /* removeClass */ .IV)([
                        this.element
                    ], classes /* CLS_DISABLED */ .xu), this.enableRtl && (0, ej2_base /* removeClass */ .IV)([
                        this.element
                    ], classes /* CLS_RTL */ .lm), this.readonly && (0, ej2_base /* removeClass */ .IV)([
                        this.element
                    ], classes /* CLS_RTE_READONLY */ .PW), '' !== this.element.style.width && '' === this.originalElement.style.width && this.element.style.removeProperty('width'), '' !== this.element.style.height && '' === this.originalElement.style.height && this.element.style.removeProperty('height'), this.element.removeAttribute('aria-disabled'), this.element.removeAttribute('role'), this.element.removeAttribute('tabindex');
                }, RichTextEditor.prototype.destroyDependentModules = function() {
                    /* destroy dependent modules */ this.renderModule.destroy(), this.formatter.editorManager.undoRedoManager.destroy(), this.sourceCodeModule.destroy();
                }, /**
     * Returns the HTML or Text inside the RichTextEditor.
     *
     * @returns {Element} - specifies the element.
     */ RichTextEditor.prototype.getContent = function() {
                    return this.contentModule.getPanel();
                }, /**
     * Returns the text content as string.
     *
     * @returns {string} - specifies the string value.
     */ RichTextEditor.prototype.getText = function() {
                    return this.contentModule.getText();
                }, /**
     * Returns the html value of the selected content as string.
     *
     * @returns {string} - specifies the string value.
     */ RichTextEditor.prototype.getSelectedHtml = function() {
                    var wrapperElm = this.createElement('div'), selection = this.contentModule.getDocument().getSelection();
                    if (selection.rangeCount > 0) {
                        var selectedHtml = selection.getRangeAt(0).cloneContents();
                        wrapperElm.appendChild(selectedHtml);
                    }
                    return wrapperElm.innerHTML;
                }, /**
     * It shows the inline quick toolbar
     *
     * @returns {void}
     */ RichTextEditor.prototype.showInlineToolbar = function() {
                    if (this.inlineMode.enable) {
                        var currentRange = this.getRange(), targetElm = '#text' === currentRange.endContainer.nodeName ? currentRange.endContainer.parentElement : currentRange.endContainer, x = currentRange.getClientRects()[0].left, y = currentRange.getClientRects()[0].top;
                        this.quickToolbarModule.showInlineQTBar(x, y, targetElm);
                    }
                }, /**
     * It hides the inline quick toolbar
     *
     * @returns {void}
     */ RichTextEditor.prototype.hideInlineToolbar = function() {
                    this.quickToolbarModule.hideInlineQTBar();
                }, /**
     * For internal use only - Get the module name.
     *
     * @returns {void}
     * @private

     */ RichTextEditor.prototype.getModuleName = function() {
                    return 'richtexteditor';
                }, /**
     * Called internally if any of the property value changed.
     *
     * @param {RichTextEditorModel} newProp - specifies the the property.
     * @param {RichTextEditorModel} oldProp - specifies the old property.
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.onPropertyChanged = function(newProp, oldProp) {
                    for(var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++){
                        var prop = _a[_i];
                        switch(prop){
                            case 'enterKey':
                            case 'value':
                                var nVal = void 0;
                                nVal = 'enterKey' === prop ? null === this.value || '<div><br></div>' === this.value || '<p><br></p>' === this.value || '<br>' === this.value ? null : this.value : newProp[prop];
                                var val = 'HTML' === this.editorMode ? (0, util /* getEditValue */ .v7)(nVal, this) : nVal;
                                ((0, ej2_base /* isNullOrUndefined */ .le)(nVal) || '' === nVal) && 'enterKey' !== prop || (this.value = this.serializeValue(this.enableHtmlEncode ? this.encode((0, util /* decode */ .Jx)(val)) : val)), this.updatePanelValue(), this.inputElement && this.notify(constant /* tableclass */ .LF, {}), this.setPlaceHolder(), this.notify(constant /* xhtmlValidation */ .F, {
                                    module: 'XhtmlValidation',
                                    newProp: newProp,
                                    oldProp: oldProp
                                }), this.enableXhtml && this.setProperties({
                                    value: this.getXhtml()
                                }, !0), this.showCharCount && this.countModule.refresh();
                                break;
                            case 'valueTemplate':
                                this.setValue(), this.showCharCount && this.countModule.refresh();
                                break;
                            case 'width':
                                this.setWidth(newProp[prop]), this.toolbarSettings.enable && !this.inlineMode.enable && (this.toolbarModule.refreshToolbarOverflow(), this.resizeHandler());
                                break;
                            case 'height':
                                this.setHeight(newProp[prop]), this.setContentHeight(), this.autoResize();
                                break;
                            case 'readonly':
                                this.setReadOnly(!1);
                                break;
                            case 'cssClass':
                                this.element.classList.remove(oldProp[prop]), this.setCssClass(newProp[prop]), this.notify(constant /* bindCssClass */ ._8, {
                                    cssClass: newProp[prop],
                                    oldCssClass: oldProp[prop]
                                });
                                break;
                            case 'enabled':
                                this.setEnable();
                                break;
                            case 'enableRtl':
                                this.updateRTL();
                                break;
                            case 'placeholder':
                                this.placeholder = newProp[prop], this.setPlaceHolder();
                                break;
                            case 'htmlAttributes':
                                setAttributes(this.htmlAttributes, this, !1, !1);
                                break;
                            case 'iframeSettings':
                                var frameSetting = oldProp[prop];
                                if (frameSetting.resources) {
                                    var header = this.contentModule.getDocument().querySelector('head'), files = void 0;
                                    frameSetting.resources.scripts && (files = header.querySelectorAll('.' + classes /* CLS_SCRIPT_SHEET */ .Z0), this.removeSheets(files)), frameSetting.resources.styles && (files = header.querySelectorAll('.' + classes /* CLS_STYLE_SHEET */ .Gp), this.removeSheets(files));
                                }
                                this.setIframeSettings();
                                break;
                            case 'locale':
                                _super.prototype.refresh.call(this);
                                break;
                            case 'inlineMode':
                                this.notify(constant /* modelChanged */ .CC, {
                                    module: 'quickToolbar',
                                    newProp: newProp,
                                    oldProp: oldProp
                                }), this.setContentHeight();
                                break;
                            case 'toolbarSettings':
                                this.notify(constant /* modelChanged */ .CC, {
                                    module: 'toolbar',
                                    newProp: newProp,
                                    oldProp: oldProp
                                }), this.setContentHeight();
                                break;
                            case 'maxLength':
                                this.showCharCount && this.countModule.refresh();
                                break;
                            case 'showCharCount':
                                newProp[prop] && this.countModule ? this.countModule.renderCount() : !1 === newProp[prop] && this.countModule && this.countModule.destroy();
                                break;
                            case 'enableHtmlEncode':
                                this.updateValueData(), this.updatePanelValue(), this.setPlaceHolder(), this.showCharCount && this.countModule.refresh();
                                break;
                            case 'undoRedoSteps':
                            case 'undoRedoTimer':
                                this.formatter.editorManager.observer.notify(common_constant /* MODEL_CHANGED */ .kR, {
                                    newProp: newProp,
                                    oldProp: oldProp
                                });
                                break;
                            case 'enableXhtml':
                                this.notify(constant /* xhtmlValidation */ .F, {
                                    module: 'XhtmlValidation',
                                    newProp: newProp,
                                    oldProp: oldProp
                                });
                                break;
                            case 'quickToolbarSettings':
                                // eslint-disable-next-line
                                newProp.quickToolbarSettings.showOnRightClick ? this.wireContextEvent() : this.unWireContextEvent(), this.notify(constant /* modelChanged */ .CC, {
                                    newProp: newProp,
                                    oldProp: oldProp
                                });
                                break;
                            default:
                                this.notify(constant /* modelChanged */ .CC, {
                                    newProp: newProp,
                                    oldProp: oldProp
                                });
                        }
                    }
                }, /**
     * @hidden
     * @returns {void}

     */ RichTextEditor.prototype.updateValueData = function() {
                    this.enableHtmlEncode ? this.setProperties({
                        value: this.encode((0, util /* decode */ .Jx)(this.inputElement.innerHTML))
                    }, !0) : this.setProperties({
                        value: /<[a-z][\s\S]*>/i.test(this.inputElement.innerHTML) ? this.inputElement.innerHTML : (0, util /* decode */ .Jx)(this.inputElement.innerHTML)
                    });
                }, RichTextEditor.prototype.removeSheets = function(srcList) {
                    var i;
                    for(i = 0; i < srcList.length; i++)(0, ej2_base /* detach */ .og)(srcList[i]);
                }, RichTextEditor.prototype.updatePanelValue = function() {
                    var value = this.value;
                    value = this.enableHtmlEncode && this.value ? (0, util /* decode */ .Jx)(value) : value;
                    var getTextArea = this.element.querySelector('.e-rte-srctextarea');
                    value ? (getTextArea && 'block' === getTextArea.style.display && (getTextArea.value = this.value), this.valueContainer && (this.valueContainer.value = this.enableHtmlEncode ? this.value : value), 'HTML' === this.editorMode && this.inputElement && this.inputElement.innerHTML.replace('&amp;', '&').trim() !== value.trim() ? this.inputElement.innerHTML = value : 'Markdown' === this.editorMode && this.inputElement && this.inputElement.value.trim() !== value.trim() && (this.inputElement.value = value)) : (getTextArea && 'block' === getTextArea.style.display && (getTextArea.value = ''), 'HTML' === this.editorMode ? 'DIV' === this.enterKey ? this.inputElement.innerHTML = '<div><br/></div>' : 'BR' === this.enterKey ? this.inputElement.innerHTML = '<br/>' : (this.inputElement.innerHTML = '<p><br/></p>', '' === value && this.formatter && this.inputElement && this.formatter.editorManager.nodeSelection.setCursorPoint(this.contentModule.getDocument(), this.inputElement.firstElementChild, this.inputElement.firstElementChild.childElementCount)) : this.inputElement.value = '', this.valueContainer && (this.valueContainer.value = '')), this.showCharCount && this.countModule.refresh();
                }, RichTextEditor.prototype.setHeight = function(height) {
                    'auto' !== height ? this.element.style.height = (0, ej2_base /* formatUnit */ .Ac)(height) : this.element.style.height = 'auto', 'Expand' === this.toolbarSettings.type && ('string' == typeof this.height && this.height.indexOf('px') > -1 || 'number' == typeof this.height) ? this.element.classList.add(classes /* CLS_RTE_FIXED_TB_EXPAND */ .yw) : this.element.classList.remove(classes /* CLS_RTE_FIXED_TB_EXPAND */ .yw);
                }, /**
     * setPlaceHolder method
     *
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.setPlaceHolder = function() {
                    this.inputElement && this.placeholder && !0 !== this.iframeSettings.enable && ('Markdown' !== this.editorMode ? (this.placeHolderWrapper || (this.placeHolderWrapper = this.createElement('span', {
                        className: "rte-placeholder e-rte-placeholder " + this.cssClass
                    }), this.inputElement && this.inputElement.parentElement.insertBefore(this.placeHolderWrapper, this.inputElement), (0, ej2_base /* attributes */ .Y4)(this.placeHolderWrapper, {
                        style: 'font-size: 14px; margin-left: 0px; margin-right: 0px;'
                    })), this.placeHolderWrapper.innerHTML = this.placeholder, 0 !== this.inputElement.textContent.length || (0, ej2_base /* isNullOrUndefined */ .le)(this.inputElement.firstChild) || 'BR' !== this.inputElement.firstChild.nodeName && ('P' !== this.inputElement.firstChild.nodeName && 'DIV' !== this.inputElement.firstChild.nodeName || (0, ej2_base /* isNullOrUndefined */ .le)(this.inputElement.firstChild.firstChild) || 'BR' !== this.inputElement.firstChild.firstChild.nodeName) ? this.placeHolderWrapper.style.display = 'none' : this.placeHolderWrapper.style.display = 'block') : this.inputElement.setAttribute('placeholder', this.placeholder));
                }, RichTextEditor.prototype.setWidth = function(width) {
                    'auto' !== width ? (0, ej2_base /* setStyleAttribute */ .V7)(this.element, {
                        width: (0, ej2_base /* formatUnit */ .Ac)(this.width)
                    }) : this.element.style.width = 'auto';
                }, RichTextEditor.prototype.setCssClass = function(cssClass) {
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(cssClass)) for(var allClassName = cssClass.split(' '), i = 0; i < allClassName.length; i++)'' !== allClassName[i].trim() && this.element.classList.add(allClassName[i]);
                }, RichTextEditor.prototype.updateRTL = function() {
                    this.notify(constant /* rtlMode */ .vN, {
                        enableRtl: this.enableRtl
                    }), this.enableRtl ? this.element.classList.add(classes /* CLS_RTL */ .lm) : this.element.classList.remove(classes /* CLS_RTL */ .lm);
                }, RichTextEditor.prototype.updateReadOnly = function() {
                    this.notify(constant /* readOnlyMode */ .Ed, {
                        editPanel: this.inputElement,
                        mode: this.readonly
                    });
                }, /**
     * setReadOnly method
     *
     * @param {boolean} initial - specifies the boolean value
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.setReadOnly = function(initial) {
                    this.updateReadOnly(), !initial && (this.readonly && this.enabled ? this.unbindEvents() : this.enabled && this.bindEvents());
                }, /**
     * By default, prints all the pages of the RichTextEditor.
     *
     * @returns {void}
     */ RichTextEditor.prototype.print = function() {
                    var printWind, _this = this, printArgs = {
                        element: this.inputElement,
                        requestType: 'print',
                        cancel: !1
                    };
                    this.trigger(constant /* actionBegin */ .m2, printArgs, function(printingArgs) {
                        printWind = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth), 'msie' === ej2_base /* Browser.info.name */ .AR.info.name && printWind.resizeTo(screen.availWidth, screen.availHeight), printWind = (0, ej2_base /* print */ .S0)(_this.inputElement, printWind), printingArgs.cancel || _this.trigger(constant /* actionComplete */ .i8, {
                            requestType: 'print'
                        });
                    });
                }, /**
     * Refresh the view of the editor.
     *
     * @returns {void}
     * @public
     */ RichTextEditor.prototype.refreshUI = function() {
                    this.renderModule.refresh();
                }, /**
     * Shows the Rich Text Editor component in full-screen mode.
     *
     * @returns {void}
     */ RichTextEditor.prototype.showFullScreen = function() {
                    this.fullScreenModule.showFullScreen();
                }, /**
     * Enables the give toolbar items in the Rich Text Editor component.
     *
     * @returns {void}
     * @param {string | string[]} items - Specifies the single or collection of items
     * @param {boolean} muteToolbarUpdate enable/disables the toolbar item status in RichTextEditor.
     * that you want to be enable in Rich Text Editor’s Toolbar.
     *
     * @public
     */ RichTextEditor.prototype.enableToolbarItem = function(items, muteToolbarUpdate) {
                    this.toolbarModule.enableTBarItems(this.getBaseToolbarObject(), items, !0, muteToolbarUpdate);
                }, /**
     * Disables the given toolbar items in the Rich Text Editor component.
     *
     * @returns {void}
     * @param {string | string[]} items - Specifies the single or collection of items
     * @param {boolean} muteToolbarUpdate enable/disables the toolbar item status in RichTextEditor.
     * that you want to be disable in Rich Text Editor’s Toolbar.
     *
     * @public
     */ RichTextEditor.prototype.disableToolbarItem = function(items, muteToolbarUpdate) {
                    this.toolbarModule.enableTBarItems(this.getBaseToolbarObject(), items, !1, muteToolbarUpdate);
                }, /**
     * Removes the give toolbar items from the Rich Text Editor component.
     *
     * @returns {void}
     * @param {string | string[]} items - Specifies the single or collection of items
     * that you want to be remove from Rich Text Editor’s Toolbar.
     *
     * @public
     */ RichTextEditor.prototype.removeToolbarItem = function(items) {
                    this.toolbarModule.removeTBarItems(items);
                }, /**
     * Get the selected range from the RichTextEditor's content.
     *
     * @returns {void}
     * @public

     */ RichTextEditor.prototype.getRange = function() {
                    return this.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
                }, RichTextEditor.prototype.initializeServices = function() {
                    this.serviceLocator.register('rendererFactory', new renderer_factory /* RendererFactory */ .z), this.serviceLocator.register('rteLocale', this.localeObj = new ej2_base /* L10n */ .E7(this.getModuleName(), default_locale /* defaultLocale */ .al, this.locale)), this.serviceLocator.register('dialogRenderObject', new DialogRenderer(this));
                }, RichTextEditor.prototype.RTERender = function() {
                    var rendererFactory = this.serviceLocator.getService('rendererFactory');
                    this.contentModule = rendererFactory.getRenderer(base_enum /* RenderType.Content */ .y2.Content), this.fullScreenModule = new FullScreen(this), this.enterKeyModule = new EnterKeyAction(this), this.renderModule.render(), this.inputElement = this.contentModule.getEditPanel(), this.setHeight(this.height), setAttributes(this.htmlAttributes, this, !1, !0), this.iframeSettings && this.setIframeSettings(), this.setCssClass(this.cssClass), this.updateEnable(), this.setPlaceHolder(), this.updateRTL(), this.updateReadOnly(), this.updatePanelValue(), this.enableHtmlEncode && !(0, ej2_base /* isNullOrUndefined */ .le)(this.value) && this.setProperties({
                        value: this.encode((0, util /* decode */ .Jx)(this.value))
                    });
                }, RichTextEditor.prototype.setIframeSettings = function() {
                    if (this.iframeSettings.resources) {
                        var styleSrc = this.iframeSettings.resources.styles, scriptSrc = this.iframeSettings.resources.scripts;
                        this.iframeSettings.resources.scripts.length > 0 && this.InjectSheet(!0, scriptSrc), this.iframeSettings.resources.styles.length > 0 && this.InjectSheet(!1, styleSrc);
                    }
                    this.iframeSettings.attributes && setAttributes(this.iframeSettings.attributes, this, !0, !1);
                }, RichTextEditor.prototype.InjectSheet = function(scriptSheet, srcList) {
                    try {
                        if (srcList && srcList.length > 0) for(var target = this.contentModule.getDocument().querySelector('head'), i = 0; i < srcList.length; i++)if (scriptSheet) {
                            var scriptEle = this.createScriptElement();
                            scriptEle.src = srcList[i], target.appendChild(scriptEle);
                        } else {
                            var styleEle = this.createStyleElement();
                            styleEle.href = srcList[i], target.appendChild(styleEle);
                        }
                    } catch (e) {
                        return;
                    }
                }, RichTextEditor.prototype.createScriptElement = function() {
                    var scriptEle = this.createElement('script', {
                        className: classes /* CLS_SCRIPT_SHEET */ .Z0
                    });
                    return scriptEle.type = 'text/javascript', scriptEle;
                }, RichTextEditor.prototype.createStyleElement = function() {
                    var styleEle = this.createElement('link', {
                        className: classes /* CLS_STYLE_SHEET */ .Gp
                    });
                    return styleEle.rel = 'stylesheet', styleEle;
                }, RichTextEditor.prototype.setValue = function() {
                    if (this.valueTemplate) {
                        if (new RegExp(/<(?=.*? .*?\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\/\1>/i).test(this.valueTemplate)) this.setProperties({
                            value: this.valueTemplate
                        });
                        else {
                            for(var compiledTemplate = (0, ej2_base /* compile */ .MY)(this.valueTemplate)('', this, 'valueTemplate'), i = 0; i < compiledTemplate.length; i++){
                                var item = compiledTemplate[i];
                                (0, ej2_base /* append */ .R3)([
                                    item
                                ], this.element);
                            }
                            this.setProperties({
                                value: this.element.innerHTML.trim()
                            });
                        }
                    } else {
                        // eslint-disable-next-line
                        var innerHtml = !(0, ej2_base /* isNullOrUndefined */ .le)(this.element.innerHTML) && this.element.innerHTML.replace(/<(\/?|\!?)(!--!--)>/g, '').trim();
                        '' !== innerHtml && ('TEXTAREA' === this.element.tagName ? this.setProperties({
                            value: (0, util /* decode */ .Jx)(innerHtml)
                        }) : this.setProperties({
                            value: innerHtml
                        }));
                    }
                }, RichTextEditor.prototype.updateResizeFlag = function() {
                    this.isResizeInitialized = !0;
                }, /**
     * Image max width calculation method
     *
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.getInsertImgMaxWidth = function() {
                    var maxWidth = this.insertImageSettings.maxWidth, editEle = this.contentModule.getEditPanel(), eleStyle = window.getComputedStyle(editEle), editEleMaxWidth = editEle.offsetWidth - (14 + parseFloat(eleStyle.paddingLeft.split('px')[0]) + parseFloat(eleStyle.paddingRight.split('px')[0]) + parseFloat(eleStyle.marginLeft.split('px')[0]) + parseFloat(eleStyle.marginRight.split('px')[0]));
                    return (0, ej2_base /* isNullOrUndefined */ .le)(maxWidth) ? editEleMaxWidth : maxWidth;
                }, /**
     * setContentHeight method
     *
     * @param {string} target - specifies the target value.
     * @param {boolean} isExpand - specifies  the bollean value.
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.setContentHeight = function(target, isExpand) {
                    var heightValue, rteHeightPercent, topValue = 0, heightPercent = 'string' == typeof this.height && this.height.indexOf('%') > -1, cntEle = this.sourceCodeModule.getPanel() && 'block' === this.sourceCodeModule.getPanel().parentElement.style.display ? this.sourceCodeModule.getPanel().parentElement : this.contentModule.getPanel(), rteHeight = this.element.offsetHeight;
                    0 === rteHeight && 'auto' !== this.height && !this.getToolbar() && (rteHeight = parseInt(this.height, 10), heightPercent && (rteHeightPercent = this.height));
                    var tbHeight = this.getToolbar() ? this.toolbarModule.getToolbarHeight() : 0, rzHandle = this.element.querySelector('.' + classes /* CLS_RTE_RES_HANDLE */ .Wk), rzHeight = this.enableResize ? (0, ej2_base /* isNullOrUndefined */ .le)(rzHandle) ? 0 : rzHandle.offsetHeight + 8 : 0, expandPopHeight = this.getToolbar() ? this.toolbarModule.getExpandTBarPopHeight() : 0;
                    if (this.toolbarSettings.type === base_enum /* ToolbarType.Expand */ .Bv.Expand && isExpand && 'preview' !== target ? (heightValue = 'auto' === this.height && 0 === rzHeight ? 'auto' : rteHeight - (tbHeight + expandPopHeight + rzHeight) + 'px', topValue = this.toolbarSettings.enableFloating ? 0 : expandPopHeight) : heightValue = 'auto' !== this.height || this.element.classList.contains('e-rte-full-screen') || this.isResizeInitialized ? heightPercent && rteHeightPercent ? rteHeightPercent : rteHeight - (tbHeight + rzHeight) + 'px' : 'auto', 'windowResize' !== target && (this.iframeSettings.enable ? 'auto' !== heightValue && (0, ej2_base /* setStyleAttribute */ .V7)(cntEle, {
                        height: heightValue,
                        marginTop: topValue + 'px'
                    }) : (0, ej2_base /* setStyleAttribute */ .V7)(cntEle, {
                        height: heightValue,
                        marginTop: topValue + 'px'
                    })), this.iframeSettings.enable && 'sourceCode' === target) {
                        var codeElement = (0, ej2_base /* select */ .Ys)('.' + classes /* CLS_RTE_CONTENT */ .s8, this.element);
                        (0, ej2_base /* setStyleAttribute */ .V7)(codeElement, {
                            height: heightValue,
                            marginTop: topValue + 'px'
                        });
                    }
                    this.toolbarSettings.enableFloating && this.getToolbar() && !this.inlineMode.enable && (0, ej2_base /* setStyleAttribute */ .V7)(this.getToolbar().parentElement, {
                        height: (isExpand ? tbHeight + expandPopHeight : tbHeight) + 'px'
                    }), 0 === rzHeight && this.autoResize();
                }, /**
     * Retrieves the HTML from RichTextEditor.
     *
     * @returns {void}
     * @public
     */ RichTextEditor.prototype.getHtml = function() {
                    return this.serializeValue(this.contentModule.getEditPanel().innerHTML);
                }, /**
     * Retrieves the Rich Text Editor's XHTML validated HTML content when `enableXhtml` property is enabled.
     *
     * @returns {void}
     * @public
     */ RichTextEditor.prototype.getXhtml = function() {
                    var currentValue = this.value;
                    return !(0, ej2_base /* isNullOrUndefined */ .le)(currentValue) && this.enableXhtml && (currentValue = this.htmlEditorModule.xhtmlValidation.selfEncloseValidation(currentValue)), currentValue;
                }, /**
     * Shows the source HTML/MD markup.
     *
     * @returns {void}
     * @public
     */ RichTextEditor.prototype.showSourceCode = function() {
                    this.readonly || this.notify(constant /* sourceCode */ .sv, {});
                }, /**
     * Returns the maximum number of characters in the Rich Text Editor.
     *
     * @returns {void}
     * @public
     */ RichTextEditor.prototype.getCharCount = function() {
                    var htmlText = 'Markdown' === this.editorMode ? this.inputElement.value.trim() : this.inputElement.textContent.trim();
                    return 'Markdown' !== this.editorMode && -1 !== htmlText.indexOf('\u200B') ? htmlText.replace(/\u200B/g, '').length : htmlText.length;
                }, /**
     * Show the dialog in the Rich Text Editor.
     *
     * @param {DialogType} type - specifies the dialog type.
     * @returns {void}
     * @public
     */ RichTextEditor.prototype.showDialog = function(type) {
                    type === base_enum /* DialogType.InsertLink */ .iR.InsertLink ? this.notify(constant /* showLinkDialog */ .nk, {}) : type === base_enum /* DialogType.InsertImage */ .iR.InsertImage ? this.notify(constant /* showImageDialog */ .lj, {}) : type === base_enum /* DialogType.InsertTable */ .iR.InsertTable && this.notify(constant /* showTableDialog */ .Np, {});
                }, /**
     * Close the dialog in the Rich Text Editor.
     *
     * @param {DialogType} type - specifies the dialog type.
     * @returns {void}
     * @public
     */ RichTextEditor.prototype.closeDialog = function(type) {
                    type === base_enum /* DialogType.InsertLink */ .iR.InsertLink ? this.notify(constant /* closeLinkDialog */ .OI, {}) : type === base_enum /* DialogType.InsertImage */ .iR.InsertImage ? this.notify(constant /* closeImageDialog */ .kq, {}) : type === base_enum /* DialogType.InsertTable */ .iR.InsertTable && this.notify(constant /* closeTableDialog */ .HB, {});
                }, /**
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.getBaseToolbarObject = function() {
                    return this.inlineMode.enable && (!ej2_base /* Browser.isDevice */ .AR.isDevice || (0, util /* isIDevice */ .FA)()) ? this.quickToolbarModule && this.quickToolbarModule.getInlineBaseToolbar() : this.toolbarModule && this.toolbarModule.getBaseToolbar();
                }, /**
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.getToolbar = function() {
                    return this.toolbarModule ? this.toolbarModule.getToolbarElement() : null;
                }, /**
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.getToolbarElement = function() {
                    return this.toolbarModule && this.toolbarModule.getToolbarElement();
                }, /**
     * @returns {void}
     * getID method
     *
     * @hidden

     */ RichTextEditor.prototype.getID = function() {
                    return 'TEXTAREA' === this.originalElement.tagName ? this.valueContainer.id : this.element.id;
                }, RichTextEditor.prototype.mouseDownHandler = function(e) {
                    var touch = e.touches ? e.changedTouches[0] : e;
                    (0, ej2_base /* addClass */ .cn)([
                        this.element
                    ], [
                        classes /* CLS_FOCUS */ .Mv
                    ]), this.preventDefaultResize(e), this.notify(constant /* mouseDown */ .uG, {
                        args: e
                    }), this.clickPoints = {
                        clientX: touch.clientX,
                        clientY: touch.clientY
                    };
                }, RichTextEditor.prototype.preventImgResize = function(e) {
                    'img' === e.target.nodeName.toLocaleLowerCase() && e.preventDefault();
                }, /**
     * preventDefaultResize method
     *
     * @param {FocusEvent} e - specifies the event.
     * @returns {void}
     * @hidden

     */ // eslint-disable-next-line
                RichTextEditor.prototype.preventDefaultResize = function(e) {
                    'msie' === ej2_base /* Browser.info.name */ .AR.info.name ? this.contentModule.getEditPanel().addEventListener('mscontrolselect', this.preventImgResize) : 'mozilla' === ej2_base /* Browser.info.name */ .AR.info.name && (this.contentModule.getDocument().execCommand('enableObjectResizing', !1, 'false'), this.contentModule.getDocument().execCommand('enableInlineTableEditing', !1, 'false'));
                }, // eslint-disable-next-line
                RichTextEditor.prototype.defaultResize = function(e) {
                    'msie' === ej2_base /* Browser.info.name */ .AR.info.name ? this.contentModule.getEditPanel().removeEventListener('mscontrolselect', this.preventImgResize) : 'mozilla' === ej2_base /* Browser.info.name */ .AR.info.name && (this.contentModule.getDocument().execCommand('enableObjectResizing', !0, 'true'), this.contentModule.getDocument().execCommand('enableInlineTableEditing', !0, 'true'));
                }, RichTextEditor.prototype.resizeHandler = function() {
                    var isExpand = !1;
                    if (!document.body.contains(this.element)) {
                        document.defaultView.removeEventListener('resize', this.onResizeHandler, !0);
                        return;
                    }
                    this.toolbarSettings.enable && !this.inlineMode.enable && (this.toolbarModule.refreshToolbarOverflow(), isExpand = this.toolbarModule.baseToolbar.toolbarObj.element.classList.contains(classes /* CLS_EXPAND_OPEN */ .Yi)), this.setContentHeight('windowResize', isExpand), this.notify(constant /* windowResize */ .Qr, null);
                }, RichTextEditor.prototype.scrollHandler = function(e) {
                    this.notify(constant /* scroll */ .AR, {
                        args: e
                    });
                }, RichTextEditor.prototype.contentScrollHandler = function(e) {
                    this.notify(constant /* contentscroll */ .sh, {
                        args: e
                    });
                }, RichTextEditor.prototype.focusHandler = function(e) {
                    if (!this.isRTE || this.isFocusOut) {
                        this.isRTE = !this.isFocusOut, this.isFocusOut = !1, (0, ej2_base /* addClass */ .cn)([
                            this.element
                        ], [
                            classes /* CLS_FOCUS */ .Mv
                        ]), 'HTML' === this.editorMode ? this.cloneValue = '<p><br></p>' === this.inputElement.innerHTML || '<div><br></div>' === this.inputElement.innerHTML || '<br>' === this.inputElement.innerHTML ? null : this.enableHtmlEncode ? this.encode((0, util /* decode */ .Jx)(this.inputElement.innerHTML)) : this.inputElement.innerHTML : this.cloneValue = '' === this.inputElement.value ? null : this.inputElement.value;
                        var active = document.activeElement;
                        if ((active === this.element || active === this.getToolbarElement() || active === this.contentModule.getEditPanel() || this.iframeSettings.enable && active === this.contentModule.getPanel() && e.target && !e.target.classList.contains('e-img-inner') && e.target && e.target.parentElement && !e.target.parentElement.classList.contains('e-img-wrap') || (0, ej2_base /* closest */ .oq)(active, '.e-rte-toolbar') === this.getToolbarElement()) && (this.contentModule.getEditPanel().focus(), !(0, ej2_base /* isNullOrUndefined */ .le)(this.getToolbarElement()))) {
                            this.getToolbarElement().setAttribute('tabindex', '-1');
                            for(var items = this.getToolbarElement().querySelectorAll('[tabindex="0"]'), i = 0; i < items.length; i++)items[i].setAttribute('tabindex', '-1');
                        }
                        this.preventDefaultResize(e), this.trigger('focus', {
                            event: e,
                            isInteracted: 0 !== Object.keys(e).length
                        }), (0, ej2_base /* isNullOrUndefined */ .le)(this.saveInterval) || !(this.saveInterval > 0) || this.autoSaveOnIdle || (this.timeInterval = setInterval(this.updateValueOnIdle.bind(this), this.saveInterval)), ej2_base /* EventHandler.add */ .bi.add(document, 'mousedown', this.onDocumentClick, this);
                    }
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.getToolbarElement())) for(var toolbarItem = this.getToolbarElement().querySelectorAll('input,select,button,a,[tabindex]'), i = 0; i < toolbarItem.length; i++)toolbarItem[i].classList.contains('e-rte-dropdown-btn') || toolbarItem[i].classList.contains('e-insert-table-btn') || toolbarItem[i].hasAttribute('tabindex') && '-1' === toolbarItem[i].getAttribute('tabindex') || toolbarItem[i].setAttribute('tabindex', '-1');
                }, RichTextEditor.prototype.getUpdatedValue = function() {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.tableModule) || this.tableModule.removeResizeElement();
                    var value, getTextArea = this.element.querySelector('.e-rte-srctextarea');
                    return 'HTML' === this.editorMode ? (value = '<p><br></p>' === this.inputElement.innerHTML || '<div><br></div>' === this.inputElement.innerHTML || '<br>' === this.inputElement.innerHTML ? null : this.enableHtmlEncode ? this.encode((0, util /* decode */ .Jx)(this.inputElement.innerHTML)) : this.inputElement.innerHTML, getTextArea && 'block' === getTextArea.style.display && (value = getTextArea.value)) : value = '' === this.inputElement.value ? null : this.inputElement.value, value;
                }, RichTextEditor.prototype.updateValueOnIdle = function() {
                    ((0, ej2_base /* isNullOrUndefined */ .le)(this.tableModule) || (0, ej2_base /* isNullOrUndefined */ .le)(this.inputElement.querySelector('.e-table-box.e-rbox-select'))) && (this.setProperties({
                        value: this.getUpdatedValue()
                    }, !0), this.valueContainer.value = this.value, this.isValueChangeBlurhandler = !1, this.invokeChangeEvent());
                }, RichTextEditor.prototype.updateIntervalValue = function() {
                    clearTimeout(this.idleInterval), this.idleInterval = setTimeout(this.updateValueOnIdle.bind(this), 0);
                }, RichTextEditor.prototype.updateStatus = function(e) {
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(e.html) || !(0, ej2_base /* isNullOrUndefined */ .le)(e.markdown)) {
                        var status_1 = this.formatter.editorManager.undoRedoManager.getUndoStatus(), eventArgs = {
                            undo: status_1.undo,
                            redo: status_1.redo,
                            html: e.html,
                            markdown: e.markdown
                        };
                        this.trigger(constant /* updatedToolbarStatus */ .Sy, eventArgs);
                    }
                }, RichTextEditor.prototype.onDocumentClick = function(e) {
                    var target = e.target, rteElement = (0, ej2_base /* closest */ .oq)(target, '.' + classes /* CLS_RTE */ .$E);
                    this.element.contains(e.target) || document === e.target || rteElement === this.element || (0, ej2_base /* closest */ .oq)(target, '[aria-owns="' + this.getID() + '"]') || (this.isBlur = !0, this.isRTE = !1), this.notify(constant /* docClick */ .v4, {
                        args: e
                    }), 'msie' !== ej2_base /* Browser.info.name */ .AR.info.name && e.detail > 3 && e.preventDefault();
                }, RichTextEditor.prototype.blurHandler = function(e) {
                    var trg = e.relatedTarget;
                    if (trg) {
                        var rteElement = (0, ej2_base /* closest */ .oq)(trg, '.' + classes /* CLS_RTE */ .$E);
                        rteElement && rteElement === this.element ? (this.isBlur = !1, trg === this.getToolbarElement() && trg.setAttribute('tabindex', '-1')) : (0, ej2_base /* closest */ .oq)(trg, '[aria-owns="' + this.getID() + '"]') ? this.isBlur = !1 : (this.isBlur = !0, trg = null);
                    }
                    if (this.isBlur && (0, ej2_base /* isNullOrUndefined */ .le)(trg)) {
                        (0, ej2_base /* removeClass */ .IV)([
                            this.element
                        ], [
                            classes /* CLS_FOCUS */ .Mv
                        ]), this.notify(constant /* focusChange */ .Z7, {});
                        var value = this.getUpdatedValue();
                        this.setProperties({
                            value: value
                        }), this.notify(constant /* toolbarRefresh */ .l0, {
                            args: e,
                            documentNode: document
                        }), this.isValueChangeBlurhandler = !0, this.invokeChangeEvent(), this.isFocusOut = !0, this.isBlur = !1, (0, util /* dispatchEvent */ .Nu)(this.valueContainer, 'focusout'), this.defaultResize(e), this.trigger('blur', {
                            event: e,
                            isInteracted: 0 !== Object.keys(e).length
                        }), (0, ej2_base /* isNullOrUndefined */ .le)(this.timeInterval) || (clearInterval(this.timeInterval), this.timeInterval = null), ej2_base /* EventHandler.remove */ .bi.remove(document, 'mousedown', this.onDocumentClick);
                    } else this.isRTE = !0;
                }, /**
     * invokeChangeEvent method
     *
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.contentChanged = function() {
                    this.autoSaveOnIdle && !(0, ej2_base /* isNullOrUndefined */ .le)(this.saveInterval) && (clearTimeout(this.timeInterval), this.timeInterval = setTimeout(this.updateIntervalValue.bind(this), this.saveInterval));
                }, /**
     * invokeChangeEvent method
     *
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.invokeChangeEvent = function() {
                    var eventArgs = {
                        value: this.enableXhtml ? this.getXhtml() : this.value,
                        isInteracted: this.isValueChangeBlurhandler
                    };
                    this.value !== this.cloneValue && (this.trigger('change', eventArgs), this.cloneValue = this.value);
                }, /**
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.wireScrollElementsEvents = function() {
                    this.scrollParentElements = (0, popup /* getScrollableParent */ .Mm)(this.element);
                    for(var _i = 0, _a = this.scrollParentElements; _i < _a.length; _i++){
                        var element = _a[_i];
                        ej2_base /* EventHandler.add */ .bi.add(element, 'scroll', this.scrollHandler, this);
                    }
                    this.iframeSettings.enable || ej2_base /* EventHandler.add */ .bi.add(this.contentModule.getPanel(), 'scroll', this.contentScrollHandler, this);
                }, RichTextEditor.prototype.wireContextEvent = function() {
                    this.quickToolbarSettings.showOnRightClick && (ej2_base /* EventHandler.add */ .bi.add(this.inputElement, 'contextmenu', this.contextHandler, this), ej2_base /* Browser.isDevice */ .AR.isDevice && (this.touchModule = new ej2_base /* Touch */ .Xh(this.inputElement, {
                        tapHold: this.touchHandler.bind(this),
                        tapHoldThreshold: 500
                    })));
                }, RichTextEditor.prototype.unWireContextEvent = function() {
                    ej2_base /* EventHandler.remove */ .bi.remove(this.inputElement, 'contextmenu', this.contextHandler), ej2_base /* Browser.isDevice */ .AR.isDevice && this.touchModule && this.touchModule.destroy();
                }, /**
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.unWireScrollElementsEvents = function() {
                    this.scrollParentElements = (0, popup /* getScrollableParent */ .Mm)(this.element);
                    for(var _i = 0, _a = this.scrollParentElements; _i < _a.length; _i++){
                        var element = _a[_i];
                        ej2_base /* EventHandler.remove */ .bi.remove(element, 'scroll', this.scrollHandler);
                    }
                    this.iframeSettings.enable || ej2_base /* EventHandler.remove */ .bi.remove(this.contentModule.getPanel(), 'scroll', this.contentScrollHandler);
                }, RichTextEditor.prototype.touchHandler = function(e) {
                    this.notifyMouseUp(e.originalEvent), this.triggerEditArea(e.originalEvent);
                }, RichTextEditor.prototype.contextHandler = function(e) {
                    var closestElem = (0, ej2_base /* closest */ .oq)(e.target, 'a, table, img');
                    (!1 === this.inlineMode.onSelection || !(0, ej2_base /* isNullOrUndefined */ .le)(closestElem) && this.inputElement.contains(closestElem) && ('IMG' === closestElem.tagName || 'TABLE' === closestElem.tagName || 'A' === closestElem.tagName)) && e.preventDefault();
                }, RichTextEditor.prototype.resetHandler = function() {
                    var defaultValue = this.valueContainer.defaultValue.trim();
                    this.setProperties({
                        value: '' === defaultValue ? null : defaultValue
                    });
                }, /**
     * @returns {void}
     * @hidden

     */ RichTextEditor.prototype.autoResize = function() {
                    var _this = this;
                    if ('auto' === this.height) {
                        if ('Markdown' === this.editorMode) setTimeout(function() {
                            _this.setAutoHeight(_this.inputElement);
                        }, 0);
                        else if (this.iframeSettings.enable) {
                            var iframeElement_1 = this.element.querySelector('#' + this.getID() + '_rte-view');
                            setTimeout(function() {
                                _this.setAutoHeight(iframeElement_1);
                            }, 100), this.inputElement.style.overflow = 'hidden';
                        }
                    } else this.inputElement.style.overflow = null;
                }, RichTextEditor.prototype.setAutoHeight = function(element) {
                    (0, ej2_base /* isNullOrUndefined */ .le)(element) || (element.style.height = '', element.style.height = this.inputElement.scrollHeight + 'px', element.style.overflow = 'hidden');
                }, RichTextEditor.prototype.wireEvents = function() {
                    this.element.addEventListener('focusin', this.onFocusHandler, !0), this.element.addEventListener('focusout', this.onBlurHandler, !0), this.on(constant /* contentChanged */ .Ak, this.contentChanged, this), this.on(constant /* resizeInitialized */ .zB, this.updateResizeFlag, this), this.on(constant /* updateTbItemsStatus */ .Wp, this.updateStatus, this), this.readonly && this.enabled || this.bindEvents();
                }, RichTextEditor.prototype.restrict = function(e) {
                    if (this.maxLength >= 0) {
                        var element = 'Markdown' === this.editorMode ? this.contentModule.getText() : e && e.currentTarget.textContent;
                        if (element) {
                            for(var array = [
                                8,
                                16,
                                17,
                                37,
                                38,
                                39,
                                40,
                                46,
                                65
                            ], arrayKey = void 0, i = 0; i <= array.length - 1; i++)if (e.which === array[i]) {
                                if (e.ctrlKey && 65 === e.which) return;
                                if (65 !== e.which) {
                                    arrayKey = array[i];
                                    return;
                                }
                            }
                            element.length >= this.maxLength && -1 !== this.maxLength && e.which !== arrayKey && e.preventDefault();
                        }
                    }
                }, RichTextEditor.prototype.bindEvents = function() {
                    this.keyboardModule = new KeyboardEvents(this.inputElement, {
                        keyAction: this.keyDown.bind(this),
                        keyConfigs: __assign({}, this.formatter.keyConfig, this.keyConfig),
                        eventName: 'keydown'
                    });
                    var formElement = (0, ej2_base /* closest */ .oq)(this.valueContainer, 'form');
                    formElement && ej2_base /* EventHandler.add */ .bi.add(formElement, 'reset', this.resetHandler, this), ej2_base /* EventHandler.add */ .bi.add(this.inputElement, 'keyup', this.keyUp, this), ej2_base /* EventHandler.add */ .bi.add(this.inputElement, 'paste', this.onPaste, this), ej2_base /* EventHandler.add */ .bi.add(this.inputElement, ej2_base /* Browser.touchEndEvent */ .AR.touchEndEvent, (0, ej2_base /* debounce */ .Ds)(this.mouseUp, 30), this), ej2_base /* EventHandler.add */ .bi.add(this.inputElement, ej2_base /* Browser.touchStartEvent */ .AR.touchStartEvent, this.mouseDownHandler, this), this.wireContextEvent(), this.formatter.editorManager.observer.on(common_constant /* KEY_DOWN_HANDLER */ .kT, this.editorKeyDown, this), this.element.ownerDocument.defaultView.addEventListener('resize', this.onResizeHandler, !0), this.iframeSettings.enable && (ej2_base /* EventHandler.add */ .bi.add(this.inputElement, 'focusin', this.focusHandler, this), ej2_base /* EventHandler.add */ .bi.add(this.inputElement, 'focusout', this.blurHandler, this), ej2_base /* EventHandler.add */ .bi.add(this.inputElement.ownerDocument, 'scroll', this.contentScrollHandler, this), ej2_base /* EventHandler.add */ .bi.add(this.inputElement.ownerDocument, ej2_base /* Browser.touchStartEvent */ .AR.touchStartEvent, this.onIframeMouseDown, this)), this.wireScrollElementsEvents();
                }, RichTextEditor.prototype.onIframeMouseDown = function(e) {
                    this.isBlur = !1, this.currentTarget = e.target, this.notify(constant /* iframeMouseDown */ .a$, e);
                }, RichTextEditor.prototype.editorKeyDown = function(e) {
                    switch(e.event.action){
                        case 'copy':
                            this.onCopy();
                            break;
                        case 'cut':
                            this.onCut();
                            break;
                        case 'tab':
                            this.iframeSettings.enable && (this.isBlur = !0);
                    }
                    e.callBack && ('copy' === e.event.action || 'cut' === e.event.action || 'delete' === e.event.action) && e.callBack({
                        requestType: e.event.action,
                        editorMode: 'HTML',
                        event: e.event
                    });
                }, RichTextEditor.prototype.unWireEvents = function() {
                    this.element.removeEventListener('focusin', this.onFocusHandler, !0), this.element.removeEventListener('focusout', this.onBlurHandler, !0), this.off(constant /* contentChanged */ .Ak, this.contentChanged), this.off(constant /* resizeInitialized */ .zB, this.updateResizeFlag), this.off(constant /* updateTbItemsStatus */ .Wp, this.updateStatus), this.readonly && this.enabled || this.unbindEvents();
                }, RichTextEditor.prototype.unbindEvents = function() {
                    this.keyboardModule && this.keyboardModule.destroy();
                    var formElement = (0, ej2_base /* closest */ .oq)(this.valueContainer, 'form');
                    formElement && ej2_base /* EventHandler.remove */ .bi.remove(formElement, 'reset', this.resetHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.inputElement, 'keyup', this.keyUp), ej2_base /* EventHandler.remove */ .bi.remove(this.inputElement, 'paste', this.onPaste), ej2_base /* EventHandler.remove */ .bi.remove(this.inputElement, ej2_base /* Browser.touchEndEvent */ .AR.touchEndEvent, (0, ej2_base /* debounce */ .Ds)(this.mouseUp, 30)), ej2_base /* EventHandler.remove */ .bi.remove(this.inputElement, ej2_base /* Browser.touchStartEvent */ .AR.touchStartEvent, this.mouseDownHandler), this.unWireContextEvent(), this.formatter && this.formatter.editorManager.observer.off(common_constant /* KEY_DOWN_HANDLER */ .kT, this.editorKeyDown), this.element.ownerDocument.defaultView.removeEventListener('resize', this.onResizeHandler, !0), this.iframeSettings.enable && (ej2_base /* EventHandler.remove */ .bi.remove(this.inputElement, 'focusin', this.focusHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.inputElement, 'focusout', this.blurHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.inputElement.ownerDocument, 'scroll', this.contentScrollHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.inputElement.ownerDocument, ej2_base /* Browser.touchStartEvent */ .AR.touchStartEvent, this.onIframeMouseDown)), this.unWireScrollElementsEvents();
                }, rich_text_editor_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, toolbar_settings_ToolbarSettings)
                ], RichTextEditor.prototype, "toolbarSettings", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, QuickToolbarSettings)
                ], RichTextEditor.prototype, "quickToolbarSettings", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, PasteCleanupSettings)
                ], RichTextEditor.prototype, "pasteCleanupSettings", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, IFrameSettings)
                ], RichTextEditor.prototype, "iframeSettings", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, ImageSettings)
                ], RichTextEditor.prototype, "insertImageSettings", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, TableSettings)
                ], RichTextEditor.prototype, "tableSettings", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(0)
                ], RichTextEditor.prototype, "floatingToolbarOffset", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, InlineMode)
                ], RichTextEditor.prototype, "inlineMode", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, FileManagerSettings)
                ], RichTextEditor.prototype, "fileManagerSettings", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)('100%')
                ], RichTextEditor.prototype, "width", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], RichTextEditor.prototype, "enablePersistence", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], RichTextEditor.prototype, "enableResize", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)({})
                ], RichTextEditor.prototype, "htmlAttributes", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], RichTextEditor.prototype, "placeholder", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], RichTextEditor.prototype, "autoSaveOnIdle", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], RichTextEditor.prototype, "readonly", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], RichTextEditor.prototype, "enabled", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], RichTextEditor.prototype, "enableHtmlSanitizer", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], RichTextEditor.prototype, "enableHtmlEncode", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], RichTextEditor.prototype, "enableXhtml", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)('auto')
                ], RichTextEditor.prototype, "height", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], RichTextEditor.prototype, "cssClass", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], RichTextEditor.prototype, "value", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)('P')
                ], RichTextEditor.prototype, "enterKey", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)('BR')
                ], RichTextEditor.prototype, "shiftEnterKey", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(30)
                ], RichTextEditor.prototype, "undoRedoSteps", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(300)
                ], RichTextEditor.prototype, "undoRedoTimer", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)('HTML')
                ], RichTextEditor.prototype, "editorMode", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], RichTextEditor.prototype, "keyConfig", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], RichTextEditor.prototype, "showCharCount", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], RichTextEditor.prototype, "enableTabKey", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], RichTextEditor.prototype, "enableAutoUrl", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(-1)
                ], RichTextEditor.prototype, "maxLength", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, Format)
                ], RichTextEditor.prototype, "format", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, NumberFormatList)
                ], RichTextEditor.prototype, "numberFormatList", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, BulletFormatList)
                ], RichTextEditor.prototype, "bulletFormatList", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, FontFamily)
                ], RichTextEditor.prototype, "fontFamily", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, FontSize)
                ], RichTextEditor.prototype, "fontSize", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, FontColor)
                ], RichTextEditor.prototype, "fontColor", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, BackgroundColor)
                ], RichTextEditor.prototype, "backgroundColor", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], RichTextEditor.prototype, "valueTemplate", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(10000)
                ], RichTextEditor.prototype, "saveInterval", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "actionBegin", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "actionComplete", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "beforeDialogOpen", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "dialogOpen", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "beforeDialogClose", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "dialogClose", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "beforeQuickToolbarOpen", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "quickToolbarOpen", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "quickToolbarClose", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "toolbarStatusUpdate", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "updatedToolbarStatus", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "imageSelected", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "beforeImageUpload", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "imageUploading", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "imageUploadSuccess", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "imageUploadFailed", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "imageRemoving", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "afterImageDelete", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "created", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "destroyed", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "beforeSanitizeHtml", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "blur", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "toolbarClick", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "focus", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "change", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "resizing", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "resizeStart", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "resizeStop", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "beforePasteCleanup", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "afterPasteCleanup", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RichTextEditor.prototype, "beforeImageDrop", void 0), rich_text_editor_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], RichTextEditor.prototype, "formatter", void 0), RichTextEditor = rich_text_editor_decorate([
                    ej2_base /* NotifyPropertyChanges */ .Zl
                ], RichTextEditor);
            }(ej2_base /* Component */ .wA), ej2_react_base = __webpack_require__(2857), richtexteditor_component_extends = (extendStatics13 = function(d, b) {
                return (extendStatics13 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics13(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), RichTextEditorComponent = /** @class */ function(_super) {
                function RichTextEditorComponent(props) {
                    var _this = _super.call(this, props) || this;
                    return _this.initRenderCalled = !1, _this.checkInjectedModules = !0, _this.immediateRender = !1, _this.portals = [], _this;
                }
                return richtexteditor_component_extends(RichTextEditorComponent, _super), RichTextEditorComponent.prototype.render = function() {
                    if ((!this.element || this.initRenderCalled) && !this.refreshing || this.isReactForeceUpdate) return react.createElement('div', this.getDefaultAttributes(), [].concat(this.props.children, this.portals));
                    _super.prototype.render.call(this), this.initRenderCalled = !0;
                }, RichTextEditorComponent;
            }(RichTextEditor);
            (0, ej2_react_base /* applyMixins */ .ef)(RichTextEditorComponent, [
                ej2_react_base /* ComponentBase */ .VZ,
                react.Component
            ]);
        /***/ },
        /***/ 103: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ i7: function() {
                    return /* binding */ selfClosingTags;
                },
                /* harmony export */ n4: function() {
                    return /* binding */ pasteCleanupGroupingTags;
                },
                /* harmony export */ qW: function() {
                    return /* binding */ htmlKeyConfig;
                }
            });
            /**
 * Default html key config for adapter
 */ var htmlKeyConfig = {
                'toolbar-focus': 'alt+f10',
                escape: '27',
                'insert-link': 'ctrl+k',
                'insert-image': 'ctrl+shift+i',
                'insert-table': 'ctrl+shift+e',
                undo: 'ctrl+z',
                redo: 'ctrl+y',
                copy: 'ctrl+c',
                cut: 'ctrl+x',
                paste: 'ctrl+v',
                bold: 'ctrl+b',
                italic: 'ctrl+i',
                underline: 'ctrl+u',
                strikethrough: 'ctrl+shift+s',
                uppercase: 'ctrl+shift+u',
                lowercase: 'ctrl+shift+l',
                superscript: 'ctrl+shift+=',
                subscript: 'ctrl+=',
                indents: 'ctrl+]',
                outdents: 'ctrl+[',
                'html-source': 'ctrl+shift+h',
                'full-screen': 'ctrl+shift+f',
                'decrease-fontsize': 'ctrl+shift+<',
                'increase-fontsize': 'ctrl+shift+>',
                'justify-center': 'ctrl+e',
                'justify-full': 'ctrl+j',
                'justify-left': 'ctrl+l',
                'justify-right': 'ctrl+r',
                'clear-format': 'ctrl+shift+r',
                'ordered-list': 'ctrl+shift+o',
                'unordered-list': 'ctrl+alt+o',
                space: '32',
                enter: '13',
                tab: 'tab',
                delete: '46'
            }, pasteCleanupGroupingTags = {
                b: [
                    'strong'
                ],
                strong: [
                    'b'
                ],
                i: [
                    'emp',
                    'cite'
                ],
                emp: [
                    'i',
                    'cite'
                ],
                cite: [
                    'i',
                    'emp'
                ]
            }, selfClosingTags = [
                'BR',
                'IMG'
            ];
        /***/ },
        /***/ 8082: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ Hb: function() {
                    return /* binding */ KEY_DOWN;
                },
                /* harmony export */ Ki: function() {
                    return /* binding */ MS_WORD_CLEANUP;
                },
                /* harmony export */ Kj: function() {
                    return /* binding */ FORMAT_TYPE;
                },
                /* harmony export */ M: function() {
                    return /* binding */ MS_WORD_CLEANUP_PLUGIN;
                },
                /* harmony export */ My: function() {
                    return /* binding */ KEY_UP_HANDLER;
                },
                /* harmony export */ O6: function() {
                    return /* binding */ ON_BEGIN;
                },
                /* harmony export */ PV: function() {
                    return /* binding */ LIST_TYPE;
                },
                /* harmony export */ R4: function() {
                    return /* binding */ KEY_UP;
                },
                /* harmony export */ hL: function() {
                    return /* binding */ MODEL_CHANGED_PLUGIN;
                },
                /* harmony export */ kR: function() {
                    return /* binding */ MODEL_CHANGED;
                },
                /* harmony export */ kT: function() {
                    return /* binding */ KEY_DOWN_HANDLER;
                },
                /* harmony export */ nD: function() {
                    return /* binding */ SPACE_ACTION;
                },
                /* harmony export */ om: function() {
                    return /* binding */ ACTION;
                }
            });
            /**
 * Constant values for Common
 */ /**
 * Keydown event trigger
 *
 * @hidden
 */ var KEY_DOWN = 'keydown', ACTION = 'action', FORMAT_TYPE = 'format-type', KEY_DOWN_HANDLER = 'keydown-handler', LIST_TYPE = 'list-type', KEY_UP_HANDLER = 'keyup-handler', KEY_UP = 'keyup', MODEL_CHANGED_PLUGIN = 'model_changed_plugin', MODEL_CHANGED = 'model_changed', MS_WORD_CLEANUP_PLUGIN = 'ms_word_cleanup_plugin', MS_WORD_CLEANUP = 'ms_word_cleanup', ON_BEGIN = 'onBegin', SPACE_ACTION = 'actionBegin';
        /***/ },
        /***/ 1386: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ FA: function() {
                    return /* binding */ isIDevice;
                },
                /* harmony export */ Hl: function() {
                    return /* binding */ updateTextNode;
                },
                /* harmony export */ No: function() {
                    return /* binding */ getLastTextNode;
                },
                /* harmony export */ q_: function() {
                    return /* binding */ getDefaultHtmlTbStatus;
                },
                /* harmony export */ ze: function() {
                    return /* binding */ setEditFrameFocus;
                }
            });
            /* unused harmony export getDefaultMDTbStatus */ /* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1807), inlineNode = [
                'a',
                'abbr',
                'acronym',
                'audio',
                'b',
                'bdi',
                'bdo',
                'big',
                'br',
                'button',
                'canvas',
                'cite',
                'code',
                'data',
                'datalist',
                'del',
                'dfn',
                'em',
                'embed',
                'font',
                'i',
                'iframe',
                'img',
                'input',
                'ins',
                'kbd',
                'label',
                'map',
                'mark',
                'meter',
                'noscript',
                'object',
                'output',
                'picture',
                'progress',
                'q',
                'ruby',
                's',
                'samp',
                'script',
                'select',
                'slot',
                'small',
                'span',
                'strong',
                'strike',
                'sub',
                'sup',
                'svg',
                'template',
                'textarea',
                'time',
                'u',
                'tt',
                'var',
                'video',
                'wbr'
            ];
            /**
 * @returns {void}
 * @hidden
 */ function isIDevice() {
                var result = !1;
                return _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isIos */ .AR.isIos && (result = !0), result;
            }
            /**
 * @param {Element} editableElement - specifies the editable element.
 * @param {string} selector - specifies the string values.
 * @returns {void}
 * @hidden
 */ function setEditFrameFocus(editableElement, selector) {
                if ('BODY' === editableElement.nodeName && !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(selector)) {
                    var iframe = top.window.document.querySelector(selector);
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(iframe) || iframe.contentWindow.focus();
                }
            }
            /**
 * @param {string} value - specifies the string value
 * @returns {void}
 * @hidden
 */ function updateTextNode(value) {
                var tempNode = document.createElement('div');
                tempNode.innerHTML = value, tempNode.setAttribute('class', 'tempDiv');
                var resultElm = document.createElement('div');
                if (tempNode.childNodes.length > 0) {
                    for(var isPreviousInlineElem = void 0, previousParent = void 0, paraElm = void 0; tempNode.firstChild;)'#text' === tempNode.firstChild.nodeName && (0 > tempNode.firstChild.textContent.indexOf('\n') || '' !== tempNode.firstChild.textContent.trim()) || inlineNode.indexOf(tempNode.firstChild.nodeName.toLocaleLowerCase()) >= 0 ? (isPreviousInlineElem ? previousParent.appendChild(tempNode.firstChild) : (paraElm = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .createElement */ .az)('p'), resultElm.appendChild(paraElm), paraElm.appendChild(tempNode.firstChild)), previousParent = paraElm, isPreviousInlineElem = !0) : '#text' === tempNode.firstChild.nodeName && ('\n' === tempNode.firstChild.textContent || tempNode.firstChild.textContent.indexOf('\n') >= 0 && '' === tempNode.firstChild.textContent.trim()) ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(tempNode.firstChild) : (resultElm.appendChild(tempNode.firstChild), isPreviousInlineElem = !1);
                    for(var tableElm = resultElm.querySelectorAll('table'), i = 0; i < tableElm.length; i++){
                        '0' === tableElm[i].getAttribute('border') && tableElm[i].removeAttribute('border');
                        for(var tdElm = tableElm[i].querySelectorAll('td'), j = 0; j < tdElm.length; j++)'none' === tdElm[j].style.borderLeft && tdElm[j].style.removeProperty('border-left'), 'none' === tdElm[j].style.borderRight && tdElm[j].style.removeProperty('border-right'), 'none' === tdElm[j].style.borderBottom && tdElm[j].style.removeProperty('border-bottom'), 'none' === tdElm[j].style.borderTop && tdElm[j].style.removeProperty('border-top'), 'none' === tdElm[j].style.border && tdElm[j].style.removeProperty('border');
                        tableElm[i].classList.contains('e-rte-table') || tableElm[i].classList.add('e-rte-table');
                    }
                    for(var imageElm = resultElm.querySelectorAll('img'), i = 0; i < imageElm.length; i++)imageElm[i].classList.contains('e-rte-image') || imageElm[i].classList.add('e-rte-image'), imageElm[i].classList.contains('e-imginline') || imageElm[i].classList.contains('e-imgbreak') || imageElm[i].classList.add('e-imginline');
                }
                return resultElm.innerHTML;
            }
            /**
 * @param {Node} startChildNodes - specifies the node
 * @returns {void}
 * @hidden
 */ function getLastTextNode(startChildNodes) {
                var finalNode = startChildNodes;
                do finalNode.childNodes.length > 0 && (finalNode = finalNode.childNodes[0]);
                while (finalNode.childNodes.length > 0)
                return finalNode;
            }
            /**
 * @returns {void}
 * @hidden
 */ function getDefaultHtmlTbStatus() {
                return {
                    bold: !1,
                    italic: !1,
                    subscript: !1,
                    superscript: !1,
                    strikethrough: !1,
                    orderedlist: !1,
                    unorderedlist: !1,
                    underline: !1,
                    alignments: null,
                    backgroundcolor: null,
                    fontcolor: null,
                    fontname: null,
                    fontsize: null,
                    formats: null,
                    createlink: !1,
                    insertcode: !1
                };
            }
        /***/ },
        /***/ 3473: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                J: function() {
                    return /* binding */ HtmlEditor;
                }
            });
            // EXTERNAL MODULE: ./node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/base/constant.js
            var extendStatics, extendStatics1, constant = __webpack_require__(3386), ej2_base = __webpack_require__(1807), util = __webpack_require__(5932), common_constant = __webpack_require__(8082), Formatter = /** @class */ function() {
                function Formatter() {}
                return(/**
     * To execute the command
     *
     * @param  {IRichTextEditor} self - specifies the self element.
     * @param  {ActionBeginEventArgs} args - specifies the event arguments.
     * @param  {MouseEvent|KeyboardEvent} event - specifies the keyboard event.
     * @param  {IItemCollectionArgs} value - specifies the collection arguments
     * @returns {void}
     * @hidden

     */ Formatter.prototype.process = function(self1, args, event, value) {
                    var saveSelection, _this = this, selection = self1.contentModule.getDocument().getSelection(), range = selection.rangeCount > 0 ? selection.getRangeAt(selection.rangeCount - 1) : null;
                    if ('HTML' === self1.editorMode && (saveSelection = this.editorManager.nodeSelection.save(range, self1.contentModule.getDocument())), (0, ej2_base /* isNullOrUndefined */ .le)(args) || !args.item.command || 'Table' === args.item.command || 'Actions' === args.item.command || 'Links' === args.item.command || 'Images' === args.item.command || 'Files' === args.item.command || !range || self1.contentModule.getEditPanel().contains(this.getAncestorNode(range.commonAncestorContainer)) || self1.contentModule.getEditPanel() === range.commonAncestorContainer || self1.contentModule.getPanel() === range.commonAncestorContainer) {
                        if (!(0, ej2_base /* isNullOrUndefined */ .le)(args) && -1 !== self1.maxLength && !(0, ej2_base /* isNullOrUndefined */ .le)(args.item.command)) {
                            var currentInsertContentLength = 0;
                            'Links' === args.item.command && (currentInsertContentLength = 0 === value.text.length ? value.url.length : value.text.length), ('Images' === args.item.command || 'Table' === args.item.command || 'Files' === args.item.command) && (currentInsertContentLength = 1);
                            var totalLength = self1.getText().trim().length - self1.getSelection().length + currentInsertContentLength;
                            if (!(-1 === self1.maxLength || totalLength <= self1.maxLength)) return;
                        }
                        if ((0, ej2_base /* isNullOrUndefined */ .le)(args)) {
                            var action_1 = event.action;
                            if ('tab' !== action_1 && 'enter' !== action_1 && 'space' !== action_1 && 'escape' !== action_1) {
                                args = {}, 'Markdown' === self1.editorMode && 'insert-table' === action_1 && (value = {
                                    headingText: self1.localeObj.getConstant('TableHeadingText'),
                                    colText: self1.localeObj.getConstant('TableColText')
                                });
                                var items = {
                                    originalEvent: event,
                                    cancel: !1,
                                    requestType: action_1 || event.key + 'Key',
                                    itemCollection: value
                                };
                                (0, ej2_base /* extend */ .l7)(args, args, items, !0), self1.trigger(constant /* actionBegin */ .m2, args, function(actionBeginArgs) {
                                    actionBeginArgs.cancel && ('paste' === action_1 || 'cut' === action_1 || 'copy' === action_1) && event.preventDefault();
                                });
                            }
                            var isTableModule = !!(0, ej2_base /* isNullOrUndefined */ .le)(self1.tableModule) || !!self1.tableModule && self1.tableModule.ensureInsideTableList;
                            (9 === event.which && isTableModule || 9 !== event.which) && (13 === event.which && 'HTML' === self1.editorMode && (value = {
                                enterAction: self1.enterKey
                            }), this.editorManager.observer.notify('keydown' === event.type ? common_constant /* KEY_DOWN */ .Hb : common_constant /* KEY_UP */ .R4, {
                                event: event,
                                callBack: this.onSuccess.bind(this, self1),
                                value: value,
                                enterAction: self1.enterKey
                            }));
                        } else !(0, ej2_base /* isNullOrUndefined */ .le)(args) && args.item.command && args.item.subCommand && (args.item.command !== args.item.subCommand && 'Font' !== args.item.command || ('FontName' === args.item.subCommand || 'FontSize' === args.item.subCommand) && 'dropDownSelect' === args.name || ('BackgroundColor' === args.item.subCommand || 'FontColor' === args.item.subCommand) && 'colorPickerChanged' === args.name) && ((0, ej2_base /* extend */ .l7)(args, args, {
                            requestType: args.item.subCommand,
                            cancel: !1,
                            itemCollection: value,
                            selectType: args.name
                        }, !0), self1.trigger(constant /* actionBegin */ .m2, args, function(actionBeginArgs) {
                            if (!actionBeginArgs.cancel) {
                                0 === _this.getUndoRedoStack().length && 'Links' !== actionBeginArgs.item.command && 'Images' !== actionBeginArgs.item.command && _this.saveData(), self1.isBlur = !1, self1.contentModule.getEditPanel().focus(), 'HTML' === self1.editorMode && saveSelection.restore();
                                var command = actionBeginArgs.item.subCommand.toLocaleLowerCase();
                                'paste' === command || 'cut' === command || 'copy' === command ? self1.clipboardAction(command, event) : (_this.editorManager.observer.notify(constant /* checkUndo */ .bi, {
                                    subCommand: actionBeginArgs.item.subCommand
                                }), _this.editorManager.execCommand(actionBeginArgs.item.command, actionBeginArgs.item.subCommand, event, _this.onSuccess.bind(_this, self1), actionBeginArgs.item.value, 'Pre' === actionBeginArgs.item.subCommand && 'dropDownSelect' === actionBeginArgs.selectType ? {
                                    name: actionBeginArgs.selectType
                                } : value, '#' + self1.getID() + ' iframe', self1.enterKey));
                            }
                        }));
                        ((0, ej2_base /* isNullOrUndefined */ .le)(event) || event && 'copy' !== event.action) && this.enableUndo(self1);
                    }
                }, Formatter.prototype.getAncestorNode = function(node) {
                    return node = 3 === node.nodeType ? node.parentNode : node;
                }, /**
     * onKeyHandler method
     *
     * @param {IRichTextEditor} self - specifies the self element.
     * @param {KeyboardEvent} e - specifies the keyboard event.
     * @returns {void}
     * @hidden

     */ Formatter.prototype.onKeyHandler = function(self1, e) {
                    var _this = this;
                    this.editorManager.observer.notify(common_constant /* KEY_UP */ .R4, {
                        event: e,
                        callBack: function() {
                            self1.notify(constant /* contentChanged */ .Ak, {}), _this.enableUndo(self1);
                        }
                    });
                }, /**
     * onSuccess method
     *
     * @param {IRichTextEditor} self - specifies the self element.
     * @param {IMarkdownFormatterCallBack} events - specifies the event call back
     * @returns {void}
     * @hidden

     */ Formatter.prototype.onSuccess = function(self1, events) {
                    self1.notify(constant /* contentChanged */ .Ak, {}), events && ((0, ej2_base /* isNullOrUndefined */ .le)(events.event) || 'copy' !== events.event.action) && (this.enableUndo(self1), self1.notify(constant /* execCommandCallBack */ .s4, events)), self1.trigger(constant /* actionComplete */ .i8, events, function(callbackArgs) {
                        if (self1.setPlaceHolder(), ('Images' === callbackArgs.requestType || 'Links' === callbackArgs.requestType) && 'HTML' === self1.editorMode) {
                            if ('Links' === callbackArgs.requestType && callbackArgs.event && 'keydown' === callbackArgs.event.type && 32 === callbackArgs.event.keyCode) return;
                            self1.notify(constant /* insertCompleted */ .IK, {
                                args: callbackArgs.event,
                                type: callbackArgs.requestType,
                                isNotify: !0,
                                elements: callbackArgs.elements
                            });
                        }
                        self1.autoResize();
                    });
                }, /**
     * Save the data for undo and redo action.
     *
     * @param {KeyboardEvent} e - specifies the keyboard event.
     * @returns {void}
     * @hidden

     */ Formatter.prototype.saveData = function(e) {
                    this.editorManager.undoRedoManager.saveData(e);
                }, /**
     * getUndoStatus method
     *
     * @returns {void}
     * @hidden

     */ Formatter.prototype.getUndoStatus = function() {
                    return this.editorManager.undoRedoManager.getUndoStatus();
                }, /* eslint-disable */ /**
     * getUndoRedoStack method
     *
     * @param {IHtmlUndoRedoData}  - specifies the redo data.
     * @returns {void}
     * @hidden

     */ /* eslint-enable */ Formatter.prototype.getUndoRedoStack = function() {
                    return this.editorManager.undoRedoManager.undoRedoStack;
                }, /**
     * enableUndo method
     *
     * @param {IRichTextEditor} self - specifies the self element.
     * @returns {void}
     * @hidden

     */ Formatter.prototype.enableUndo = function(self1) {
                    var status = this.getUndoStatus();
                    self1.inlineMode.enable && (!ej2_base /* Browser.isDevice */ .AR.isDevice || (0, util /* isIDevice */ .FA)()) ? (0, util /* updateUndoRedoStatus */ .j)(self1.quickToolbarModule.inlineQTBar.quickTBarObj, status) : self1.toolbarModule && (0, util /* updateUndoRedoStatus */ .j)(self1.toolbarModule.baseToolbar, status);
                }, Formatter);
            }(), IMAGE = 'INSERT-IMAGE', TABLE = 'INSERT-TABLE', LINK = 'INSERT-LINK', INSERT_ROW = 'INSERT-ROW', INSERT_COLUMN = 'INSERT-COLUMN', DELETEROW = 'DELETE-ROW', DELETECOLUMN = 'DELETE-COLUMN', REMOVETABLE = 'REMOVE-TABLE', TABLEHEADER = 'TABLE-HEADER', TABLE_VERTICAL_ALIGN = 'TABLE_VERTICAL_ALIGN', TABLE_MERGE = 'TABLE_MERGE', TABLE_VERTICAL_SPLIT = 'TABLE_VERTICAL_SPLIT', TABLE_HORIZONTAL_SPLIT = 'TABLE_HORIZONTAL_SPLIT', ALIGNMENT_TYPE = 'alignment-type', INDENT_TYPE = 'indent-type', BLOCK_TAGS = [
                'address',
                'article',
                'aside',
                'audio',
                'blockquote',
                'canvas',
                'details',
                'dd',
                'div',
                'dl',
                'dt',
                'fieldset',
                'figcaption',
                'figure',
                'footer',
                'form',
                'h1',
                'h2',
                'h3',
                'h4',
                'h5',
                'h6',
                'header',
                'hgroup',
                'hr',
                'li',
                'main',
                'nav',
                'noscript',
                'ol',
                'output',
                'p',
                'pre',
                'section',
                'table',
                'tbody',
                'td',
                'tfoot',
                'th',
                'thead',
                'tr',
                'ul',
                'video',
                'body'
            ], IGNORE_BLOCK_TAGS = [
                'td',
                'th'
            ], TABLE_BLOCK_TAGS = [
                'table',
                'tbody',
                'td',
                'tfoot',
                'th',
                'thead',
                'tr'
            ], SELECTION_TYPE = 'selection-type', INSERTHTML_TYPE = 'inserthtml-type', INSERT_TEXT_TYPE = 'insert-text-type', CLEAR_TYPE = 'clear-type', SELF_CLOSING_TAGS = [
                'area',
                'base',
                'br',
                'embed',
                'hr',
                'img',
                'input',
                'param',
                'source',
                'track',
                'wbr',
                'iframe',
                'td'
            ], selection = __webpack_require__(8867), config = __webpack_require__(103), common_util = __webpack_require__(1386), markerClassName = {
                startSelection: 'e-editor-select-start',
                endSelection: 'e-editor-select-end'
            }, DOMNode = /** @class */ function() {
                /**
     * Constructor for creating the DOMNode plugin
     *
     * @param {Element} parent - specifies the parent element
     * @param {Document} currentDocument - specifies the current document.
     * @hidden

     */ function DOMNode(parent, currentDocument) {
                    this.parent = parent, this.nodeSelection = new selection /* NodeSelection */ .q(), this.currentDocument = currentDocument;
                }
                return(/**
     * contents method
     *
     * @param {Element} element - specifies the element.
     * @returns {void}
     * @hidden

     */ DOMNode.prototype.contents = function(element) {
                    return element && 'IFRAME' !== element.tagName ? Array.prototype.slice.call(element.childNodes || []) : [];
                }, /**
     * isBlockNode method
     *
     * @param {Element} element - specifies the node element.
     * @returns {boolean} - sepcifies the boolean value
     * @hidden

     */ DOMNode.prototype.isBlockNode = function(element) {
                    return !!element && element.nodeType === Node.ELEMENT_NODE && BLOCK_TAGS.indexOf(element.tagName.toLowerCase()) >= 0;
                }, /**
     * isLink method
     *
     * @param {Element} element - specifies the element
     * @returns {boolean} -  specifies the boolean value
     * @hidden

     */ DOMNode.prototype.isLink = function(element) {
                    return !!element && element.nodeType === Node.ELEMENT_NODE && 'a' === element.tagName.toLowerCase();
                }, /**
     * blockParentNode method
     *
     * @param {Element} element - specifies the element
     * @returns {Element} - returns the element value
     * @hidden

     */ DOMNode.prototype.blockParentNode = function(element) {
                    for(; element && element.parentNode !== this.parent && (!element.parentNode || !this.hasClass(element.parentNode, 'e-node-inner')) && (element = element.parentNode, !this.isBlockNode(element)););
                    return element;
                }, /**
     * rawAttributes method
     *
     * @param {Element} element - specifies the element
     * @returns {string} - returns the string value
     * @hidden

     */ DOMNode.prototype.rawAttributes = function(element) {
                    var rawAttr = {}, attributes = element.attributes;
                    if (attributes.length > 0) for(var d = 0; d < attributes.length; d++){
                        var e = attributes[d];
                        rawAttr[e.nodeName] = e.value;
                    }
                    return rawAttr;
                }, /**
     * attributes method
     *
     * @param {Element} element - sepcifies the element.
     * @returns {string} - returns the string value.
     * @hidden

     */ DOMNode.prototype.attributes = function(element) {
                    if (!element) return '';
                    for(var attr = '', rawAttr = this.rawAttributes(element), orderRawAttr = Object.keys(rawAttr).sort(), e = 0; e < orderRawAttr.length; e++){
                        var attrKey = orderRawAttr[e], attrValue = rawAttr[attrKey];
                        /* eslint-disable */ 0 > attrValue.indexOf("'") && attrValue.indexOf('"') >= 0 ? attr += ' ' + attrKey + "='" + attrValue + "'" : attrValue.indexOf('"') >= 0 && attrValue.indexOf("'") >= 0 ? attr += ' ' + attrKey + '="' + /* eslint-enable */ (attrValue = attrValue.replace(/"/g, '&quot;')) + '"' : attr += ' ' + attrKey + '="' + attrValue + '"';
                    }
                    return attr;
                }, /**
     * clearAttributes method
     *
     * @param {Element} element - specifies the element
     * @returns {void}
     * @hidden

     */ DOMNode.prototype.clearAttributes = function(element) {
                    for(var attr = element.attributes, c = attr.length - 1; c >= 0; c--){
                        var key = attr[c];
                        element.removeAttribute(key.nodeName);
                    }
                }, /**
     * openTagString method
     *
     * @param {Element} element - specifies the element.
     * @returns {string} - returns the string
     * @hidden

     */ DOMNode.prototype.openTagString = function(element) {
                    return '<' + element.tagName.toLowerCase() + this.attributes(element) + '>';
                }, /**
     * closeTagString method
     *
     * @param {Element} element - specifies the element
     * @returns {string} - returns the string value
     * @hidden

     */ DOMNode.prototype.closeTagString = function(element) {
                    return '</' + element.tagName.toLowerCase() + '>';
                }, /**
     * createTagString method
     *
     * @param {string} tagName - specifies the tag name
     * @param {Element} relativeElement - specifies the relative element
     * @param {string} innerHTML - specifies the string value
     * @returns {string} - returns the string value.
     * @hidden

     */ DOMNode.prototype.createTagString = function(tagName, relativeElement, innerHTML) {
                    return '<' + tagName.toLowerCase() + this.attributes(relativeElement) + '>' + innerHTML + '</' + tagName.toLowerCase() + '>';
                }, /**
     * isList method
     *
     * @param {Element} element - specifes the element.
     * @returns {boolean} - returns the boolean value
     * @hidden

     */ DOMNode.prototype.isList = function(element) {
                    return !!element && [
                        'UL',
                        'OL'
                    ].indexOf(element.tagName) >= 0;
                }, /**
     * isElement method
     *
     * @param {Element} element - specifes the element.
     * @returns {boolean} - returns the boolean value
     * @hidden

     */ DOMNode.prototype.isElement = function(element) {
                    return element === this.parent;
                }, /**
     * isEditable method
     *
     * @param {Element} element - specifes the element.
     * @returns {boolean} - returns the boolean value
     * @hidden

     */ DOMNode.prototype.isEditable = function(element) {
                    return (!element.getAttribute || 'true' === element.getAttribute('contenteditable')) && 0 > [
                        'STYLE',
                        'SCRIPT'
                    ].indexOf(element.tagName);
                }, /**
     * hasClass method
     *
     * @param {Element} element - specifes the element.
     * @param {string} className - specifies the class name value
     * @returns {boolean} - returns the boolean value
     * @hidden

     */ DOMNode.prototype.hasClass = function(element, className) {
                    return element && element.classList && element.classList.contains(className);
                }, /**
     * replaceWith method
     *
     * @param {Element} element - specifes the element.
     * @param {string} value - specifies the string value
     * @returns {void}
     * @hidden

     */ DOMNode.prototype.replaceWith = function(element, value) {
                    element.parentNode.insertBefore(this.parseHTMLFragment(value), element), (0, ej2_base /* detach */ .og)(element);
                }, /**
     * parseHTMLFragment method
     *
     * @param {string} value - specifies the string value
     * @returns {Element} - returns the element
     * @hidden

     */ DOMNode.prototype.parseHTMLFragment = function(value) {
                    /* eslint-disable */ var temp = (0, ej2_base /* createElement */ .az)('template');
                    return (temp.innerHTML = value, temp.content instanceof DocumentFragment) ? temp.content : document.createRange().createContextualFragment(value);
                /* eslint-enable */ }, /**
     * wrap method
     *
     * @param {Element} element - specifies the element
     * @param {Element} wrapper - specifies the element.
     * @returns {Element} - returns the element
     * @hidden

     */ DOMNode.prototype.wrap = function(element, wrapper) {
                    return element.parentNode.insertBefore(wrapper, element), (wrapper = element.previousSibling).appendChild(element), wrapper;
                }, /**
     * insertAfter method
     *
     * @param {Element} newNode - specifies the new node element
     * @param {Element} referenceNode - specifies the referenece node
     * @returns {void}
     * @hidden

     */ DOMNode.prototype.insertAfter = function(newNode, referenceNode) {
                    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
                }, /**
     * wrapInner method
     *
     * @param {Element} parent - specifies the parent element.
     * @param {Element} wrapper - specifies the wrapper element.
     * @returns {Element} - returns the element
     * @hidden

     */ DOMNode.prototype.wrapInner = function(parent, wrapper) {
                    for(parent.appendChild(wrapper), (wrapper = parent.querySelector('.e-rte-wrap-inner')).classList.remove('e-rte-wrap-inner'), 0 === wrapper.classList.length && wrapper.removeAttribute('class'); parent.firstChild !== wrapper;)wrapper.appendChild(parent.firstChild);
                    return wrapper;
                }, /**
     * unWrap method
     *
     * @param {Element} element - specifies the element.
     * @returns {Element} - returns the element.
     * @hidden

     */ DOMNode.prototype.unWrap = function(element) {
                    for(var parent = element.parentNode, unWrapNode = []; element.firstChild;)unWrapNode.push(element.firstChild), parent.insertBefore(element.firstChild, element);
                    return unWrapNode = unWrapNode.length > 0 ? unWrapNode : [
                        element.parentNode
                    ], parent.removeChild(element), unWrapNode;
                }, /**
     * getSelectedNode method
     *
     * @param {Element} element - specifies the element
     * @param {number} index - specifies the index value.
     * @returns {Element} - returns the element
     * @hidden

     */ DOMNode.prototype.getSelectedNode = function(element, index) {
                    return element.nodeType === Node.ELEMENT_NODE && element.childNodes.length > 0 && element.childNodes[index - 1] && element.childNodes[index - 1].nodeType === Node.ELEMENT_NODE && (element.childNodes[index - 1].classList.contains(markerClassName.startSelection) || element.childNodes[index - 1].classList.contains(markerClassName.endSelection)) ? element = element.childNodes[index - 1] : element.nodeType === Node.ELEMENT_NODE && element.childNodes.length > 0 && element.childNodes[index] && (element = element.childNodes[index]), element.nodeType === Node.TEXT_NODE && (element = element.parentNode), element;
                }, /**
     * nodeFinds method
     *
     * @param {Element} element - specifies the element.
     * @param {Element[]} elements - specifies the array of elements
     * @returns {Element[]} - returnts the array elements
     * @hidden

     */ DOMNode.prototype.nodeFinds = function(element, elements) {
                    for(var existNodes = [], i = 0; i < elements.length; i++)element.contains(elements[i]) && element !== elements[i] && existNodes.push(elements[i]);
                    return existNodes;
                }, /**
     * isEditorArea method
     *
     * @returns {boolean} - returns the boolean value
     * @hidden

     */ DOMNode.prototype.isEditorArea = function() {
                    var element;
                    for(element = this.getRangePoint(0).commonAncestorContainer; element && !this.isElement(element);)element = element.parentNode;
                    return !!this.isElement(element);
                }, /**
     * getRangePoint method
     *
     * @param {number} point - specifies the number value.
     * @returns {Range} - returns the range.
     * @hidden

     */ DOMNode.prototype.getRangePoint = function(point) {
                    var selection = this.getSelection(), ranges = [];
                    if (selection && selection.getRangeAt && selection.rangeCount) {
                        ranges = [];
                        for(var f = 0; f < selection.rangeCount; f++)ranges.push(selection.getRangeAt(f));
                    } else ranges = [
                        this.currentDocument.createRange()
                    ];
                    return void 0 !== point ? ranges[point] : ranges;
                }, DOMNode.prototype.getSelection = function() {
                    return this.nodeSelection.get(this.currentDocument);
                }, /**
     * getPreviousNode method
     *
     * @param {Element} element - specifies the element
     * @returns {Element} - returns the element
     * @hidden

     */ DOMNode.prototype.getPreviousNode = function(element) {
                    for(element = element.previousElementSibling; element && '\n' === element.textContent;)element = element.previousElementSibling;
                    return element;
                }, /**
     * encode method
     *
     * @param {string} value - specifies the string value
     * @returns {string} - specifies the string value
     * @hidden

     */ DOMNode.prototype.encode = function(value) {
                    var divNode = document.createElement('div');
                    // eslint-disable-next-line
                    return divNode.innerText = value, divNode.innerHTML.replace(/<br\s*[\/]?>/gi, '\n');
                }, /**
     * saveMarker method
     *
     * @param {NodeSelection} save - specifies the node selection,
     * @param {string} action - specifies the action  value.
     * @returns {NodeSelection} - returns the value
     * @hidden

     */ DOMNode.prototype.saveMarker = function(save, action) {
                    var startTextNode, endTextNode, start = this.parent.querySelector('.' + markerClassName.startSelection), end = this.parent.querySelector('.' + markerClassName.endSelection);
                    if ('' === start.textContent && (0, ej2_base /* isNullOrUndefined */ .le)(end) && 'tab' !== action && (1 === start.childNodes.length && 'BR' === start.childNodes[0].nodeName ? start.innerHTML = '&#65279;&#65279;<br>' : start.innerHTML = '&#65279;&#65279;'), this.hasClass(start, markerClassName.startSelection) && start.classList.length > 1) {
                        var replace = this.createTagString('p', start, this.encode(start.textContent));
                        this.replaceWith(start, replace), (start = this.parent.querySelector('.' + markerClassName.startSelection)).classList.remove(markerClassName.startSelection), startTextNode = start.childNodes[0];
                    } else startTextNode = this.unWrap(start)[0];
                    if (this.hasClass(end, markerClassName.endSelection) && end.classList.length > 1) {
                        var replace = this.createTagString('p', end, this.encode(end.textContent));
                        this.replaceWith(end, replace), (end = this.parent.querySelector('.' + markerClassName.endSelection)).classList.remove(markerClassName.endSelection), endTextNode = end.childNodes[0];
                    } else endTextNode = end ? this.unWrap(end)[0] : startTextNode;
                    return save.startContainer = save.getNodeArray(startTextNode, !0), save.endContainer = save.getNodeArray(endTextNode, !1), save;
                }, DOMNode.prototype.marker = function(className, textContent) {
                    return '<span class="' + className + '">' + textContent + '</span>';
                }, /**
     * setMarker method
     *
     * @param {NodeSelection} save - specifies the node selection.
     * @returns {void}
     * @hidden

     */ DOMNode.prototype.setMarker = function(save) {
                    var range = save.range, startChildNodes = range.startContainer.childNodes, start = (startChildNodes.length > 1 && 'TABLE' === startChildNodes[0].nodeName ? (0, common_util /* getLastTextNode */ .No)(startChildNodes[range.startOffset + 1]) : startChildNodes[range.startOffset > 0 ? range.startOffset - 1 : range.startOffset]) || range.startContainer, end = range.endContainer.childNodes[range.endOffset > 0 ? range.endOffset - 1 : range.endOffset] || range.endContainer;
                    if (start.nodeType === Node.ELEMENT_NODE && end.nodeType === Node.ELEMENT_NODE && (start.contains(end) || end.contains(start))) {
                        var existNode = start.contains(end) ? start : end;
                        if (existNode.nodeType !== Node.TEXT_NODE) {
                            for(var nodes = [], textNodes = [], node = existNode; existNode.contains(node);)0 > nodes.indexOf(node) && node.childNodes && node.childNodes.length ? (nodes.push(node), node = node.childNodes[0]) : node.nextSibling ? node = node.nextSibling : node.parentNode && nodes.push(node = node.parentNode), 0 > textNodes.indexOf(node) && (node.nodeType === Node.TEXT_NODE || IGNORE_BLOCK_TAGS.indexOf(node.parentNode.tagName.toLocaleLowerCase()) >= 0 && ('BR' === node.tagName || 'IMG' === node.tagName)) && textNodes.push(node);
                            textNodes.length && (start = start.contains(end) ? textNodes[0] : start, end = textNodes[textNodes.length - 1]);
                        }
                    }
                    if (start !== end) {
                        if (start.nodeType !== Node.TEXT_NODE && ('BR' === start.tagName && IGNORE_BLOCK_TAGS.indexOf(start.parentNode.tagName.toLocaleLowerCase()) >= 0 || 'IMG' === start.tagName)) this.replaceWith(start, this.marker(markerClassName.startSelection, this.encode(start.textContent))), range.startContainer.querySelector('.' + markerClassName.startSelection).appendChild(start);
                        else if (3 != start.nodeType && '#text' != start.nodeName) {
                            var marker = this.marker(markerClassName.startSelection, '');
                            (0, ej2_base /* append */ .R3)([
                                this.parseHTMLFragment(marker)
                            ], start);
                        } else this.replaceWith(start, this.marker(markerClassName.startSelection, this.encode(start.textContent)));
                        end.nodeType !== Node.TEXT_NODE && 'BR' === end.tagName && IGNORE_BLOCK_TAGS.indexOf(end.parentNode.tagName.toLocaleLowerCase()) >= 0 ? (this.replaceWith(end, this.marker(markerClassName.endSelection, this.encode(end.textContent))), range.endContainer.querySelector('.' + markerClassName.endSelection).appendChild(end)) : this.ensureSelfClosingTag(end, markerClassName.endSelection, range);
                    } else this.ensureSelfClosingTag(start, markerClassName.startSelection, range);
                }, /**
     * ensureSelfClosingTag method
     *
     * @param {Element} start - specifies the element.
     * @param {string} className - specifes the class name string value
     * @param {Range} range - specifies the range value
     * @returns {void}
     * @hidden

     */ DOMNode.prototype.ensureSelfClosingTag = function(start, className, range) {
                    var isTable = !1;
                    if (3 === start.nodeType) this.replaceWith(start, this.marker(className, this.encode(start.textContent)));
                    else if ('BR' === start.tagName) this.replaceWith(start, this.marker(className, this.encode(start.textContent))), range.startContainer.querySelector('.' + className).appendChild(start);
                    else {
                        if ('IMG' === start.tagName) {
                            var parNode = document.createElement('p');
                            start.parentElement.insertBefore(parNode, start), parNode.appendChild(start), start = parNode.children[0];
                        }
                        if ('TABLE' === start.tagName) {
                            if (isTable = !0, '' === start.textContent) {
                                var tdNode = start.querySelectorAll('td');
                                start = tdNode[tdNode.length - 1], start = (0, ej2_base /* isNullOrUndefined */ .le)(start.childNodes[0]) ? start : start.childNodes[0];
                            } else {
                                for(var lastNode = start.lastChild; 3 !== lastNode.nodeType && '#text' !== lastNode.nodeName && 'BR' !== lastNode.nodeName;)lastNode = lastNode.lastChild;
                                start = lastNode;
                            }
                        }
                        for(var i = 0; i < config /* selfClosingTags.length */ .i7.length; i++)start = start.tagName !== config /* selfClosingTags */ .i7[i] || isTable ? start : start.parentNode;
                        if (3 === start.nodeType && '#text' === start.nodeName) this.replaceWith(start, this.marker(className, this.encode(start.textContent)));
                        else if ('BR' === start.nodeName) this.replaceWith(start, this.marker(markerClassName.endSelection, this.encode(start.textContent))), range.endContainer.querySelector('.' + markerClassName.endSelection).appendChild(start);
                        else {
                            var marker = this.marker(className, '');
                            (0, ej2_base /* append */ .R3)([
                                this.parseHTMLFragment(marker)
                            ], start);
                        }
                    }
                }, /**
     * createTempNode method
     *
     * @param {Element} element - specifies the element.
     * @returns {Element} - returns the element
     * @hidden

     */ DOMNode.prototype.createTempNode = function(element) {
                    var textContent = element.textContent;
                    if ('BR' === element.tagName) {
                        var wrapper = "<p></p>", node = element.parentNode;
                        IGNORE_BLOCK_TAGS.indexOf(node.tagName.toLocaleLowerCase()) >= 0 && (element = this.wrap(element, this.parseHTMLFragment(wrapper)));
                    } else if (element.nodeType !== Node.TEXT_NODE && (element.classList.contains(markerClassName.startSelection) || element.classList.contains(markerClassName.endSelection)) || textContent.replace(/\n/g, '').replace(/(^ *)|( *$)/g, '').length > 0 || textContent.length && 0 > textContent.indexOf('\n')) {
                        var wrapper = "<p></p>", target = element;
                        element = this.wrap(element, this.parseHTMLFragment(wrapper)), !(target.nodeType === Node.ELEMENT_NODE && target.firstChild && 'BR' === target.firstChild.nodeName && (target.classList.contains(markerClassName.startSelection) || target.classList.contains(markerClassName.endSelection))) && element.nextElementSibling && 'BR' === element.nextElementSibling.tagName && element.appendChild(element.nextElementSibling);
                    }
                    return element;
                }, /**
     * getImageTagInSelection method
     *
     * @returns {void}
     * @hidden

     */ DOMNode.prototype.getImageTagInSelection = function() {
                    var selection = this.getSelection();
                    return this.isEditorArea() && selection.rangeCount ? selection.focusNode.querySelectorAll('img') : null;
                }, /**
     * blockNodes method
     *
     * @returns {Node[]} - returns the node array values
     * @hidden

     */ DOMNode.prototype.blockNodes = function() {
                    var collectionNodes = [], selection = this.getSelection();
                    if (this.isEditorArea() && selection.rangeCount) for(var ranges = this.getRangePoint(), j = 0; j < ranges.length; j++){
                        var parentNode = void 0, range = ranges[j], startNode = this.getSelectedNode(range.startContainer, range.startOffset), endNode = this.getSelectedNode(range.endContainer, range.endOffset);
                        if (this.isBlockNode(startNode) && 0 > collectionNodes.indexOf(startNode) && collectionNodes.push(startNode), (parentNode = this.blockParentNode(startNode)) && 0 > collectionNodes.indexOf(parentNode)) {
                            if (IGNORE_BLOCK_TAGS.indexOf(parentNode.tagName.toLocaleLowerCase()) >= 0 && ('BR' === startNode.tagName || startNode.nodeType === Node.TEXT_NODE || startNode.classList.contains(markerClassName.startSelection) || startNode.classList.contains(markerClassName.endSelection))) {
                                var tempNode = startNode.previousSibling && startNode.previousSibling.nodeType === Node.TEXT_NODE ? startNode.previousSibling : startNode;
                                startNode.nextSibling || startNode.previousSibling || 'BR' !== startNode.tagName ? collectionNodes.push(this.createTempNode(tempNode)) : collectionNodes.push(tempNode);
                            } else collectionNodes.push(parentNode);
                        }
                        for(var nodes = [], node = startNode; node !== endNode && node !== this.parent;)0 > nodes.indexOf(node) && node.childNodes && node.childNodes.length ? (nodes.push(node), node = node.childNodes[0]) : node && 8 !== node.nodeType && ('BR' === node.tagName || node.nodeType === Node.TEXT_NODE && '' !== node.textContent.trim() || node.nodeType !== Node.TEXT_NODE && (node.classList.contains(markerClassName.startSelection) || node.classList.contains(markerClassName.endSelection))) && IGNORE_BLOCK_TAGS.indexOf(node.parentNode.tagName.toLocaleLowerCase()) >= 0 ? node = this.createTempNode(node) : node.nextSibling && 8 !== node.nextSibling.nodeType && ('BR' === node.nextSibling.tagName || node.nextSibling.nodeType === Node.TEXT_NODE || node.nextSibling.classList.contains(markerClassName.startSelection) || node.nextSibling.classList.contains(markerClassName.endSelection)) && IGNORE_BLOCK_TAGS.indexOf(node.nextSibling.parentNode.tagName.toLocaleLowerCase()) >= 0 ? node = this.createTempNode(node.nextSibling) : node.nextSibling ? node = node.nextSibling : node.parentNode && (node = node.parentNode, nodes.push(node)), 0 > collectionNodes.indexOf(node) && node.nodeType === Node.ELEMENT_NODE && IGNORE_BLOCK_TAGS.indexOf(node.parentNode.tagName.toLocaleLowerCase()) >= 0 && (node.classList.contains(markerClassName.startSelection) || node.classList.contains(markerClassName.endSelection)) && collectionNodes.push(this.createTempNode(node)), this.isBlockNode(node) && this.ignoreTableTag(node) && 0 > nodes.indexOf(node) && 0 > collectionNodes.indexOf(node) && (node !== endNode || range.endOffset > 0) && collectionNodes.push(node), 'IMG' === node.nodeName && 'true' === node.parentElement.contentEditable && collectionNodes.push(node);
                        (parentNode = this.blockParentNode(endNode)) && this.ignoreTableTag(parentNode) && 0 > collectionNodes.indexOf(parentNode) && !(0, ej2_base /* isNullOrUndefined */ .le)(parentNode.previousElementSibling) && 'IMG' !== parentNode.previousElementSibling.tagName && collectionNodes.push(parentNode);
                    }
                    for(var i = collectionNodes.length - 1; i > 0; i--){
                        var nodes = this.nodeFinds(collectionNodes[i], collectionNodes);
                        if (nodes.length) {
                            var listNodes = collectionNodes[i].querySelectorAll('ul, ol');
                            if ('LI' === collectionNodes[i].tagName && listNodes.length > 0) continue;
                            collectionNodes.splice(i, 1);
                        }
                    }
                    return collectionNodes;
                }, DOMNode.prototype.ignoreTableTag = function(element) {
                    return !(TABLE_BLOCK_TAGS.indexOf(element.tagName.toLocaleLowerCase()) >= 0);
                }, DOMNode);
            }(), Lists = /** @class */ function() {
                /**
     * Constructor for creating the Lists plugin
     *
     * @param {EditorManager} parent - specifies the parent element
     * @hidden

     */ function Lists(parent) {
                    this.parent = parent, this.domNode = this.parent.domNode, this.addEventListener();
                }
                return Lists.prototype.addEventListener = function() {
                    this.parent.observer.on(common_constant /* LIST_TYPE */ .PV, this.applyListsHandler, this), this.parent.observer.on(common_constant /* KEY_DOWN_HANDLER */ .kT, this.keyDownHandler, this), this.parent.observer.on(common_constant /* KEY_UP_HANDLER */ .My, this.onKeyUp, this), this.parent.observer.on(common_constant /* SPACE_ACTION */ .nD, this.spaceKeyAction, this);
                }, Lists.prototype.testList = function(elem) {
                    var olListRegex = [
                        /^[\d]+[.]+$/,
                        /^(?=[MDCLXVI])M*(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})[.]$/gi,
                        /^[a-zA-Z][.]+$/
                    ], elementStart = (0, ej2_base /* isNullOrUndefined */ .le)(elem) ? null : elem.innerText.trim().split('.')[0] + '.';
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(elementStart)) {
                        for(var i = 0; i < olListRegex.length; i++)if (olListRegex[i].test(elementStart)) return !0;
                    }
                    return !1;
                }, Lists.prototype.testCurrentList = function(range) {
                    var olListStartRegex = [
                        /^[1]+[.]+$/,
                        /^[i]+[.]+$/,
                        /^[a]+[.]+$/
                    ];
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(range.startContainer.textContent.slice(0, range.startOffset))) {
                        for(var currentContent = range.startContainer.textContent.replace(/\u200B/g, '').slice(0, range.startOffset).trim(), i = 0; i < olListStartRegex.length; i++)if (olListStartRegex[i].test(currentContent) && 2 === currentContent.length) return !0;
                    }
                    return !1;
                }, Lists.prototype.spaceList = function(e) {
                    var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                    this.saveSelection = this.parent.nodeSelection.save(range, this.parent.currentDocument);
                    var startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset);
                    // eslint-disable-next-line
                    this.parent.domNode.getSelectedNode(range.endContainer, range.endOffset);
                    var preElement = startNode.previousElementSibling, nextElement = startNode.nextElementSibling, preElemULStart = (0, ej2_base /* isNullOrUndefined */ .le)(preElement) ? null : preElement.innerText.trim().substring(0, 1), nextElemULStart = (0, ej2_base /* isNullOrUndefined */ .le)(nextElement) ? null : nextElement.innerText.trim().substring(0, 1), startElementOLTest = this.testCurrentList(range), preElementOLTest = this.testList(preElement), nextElementOLTest = this.testList(nextElement);
                    preElementOLTest || nextElementOLTest || '*' === preElemULStart || '*' === nextElemULStart || (startElementOLTest ? (range.startContainer.textContent = range.startContainer.textContent.slice(range.startOffset, range.startContainer.textContent.length), this.applyListsHandler({
                        subCommand: 'OL',
                        callBack: e.callBack
                    }), e.event.preventDefault()) : ('*' === range.startContainer.textContent.replace(/\u200B/g, '').slice(0, range.startOffset).trim() || '-' === range.startContainer.textContent.replace(/\u200B/g, '').slice(0, range.startOffset).trim()) && (range.startContainer.textContent = range.startContainer.textContent.slice(range.startOffset, range.startContainer.textContent.length), this.applyListsHandler({
                        subCommand: 'UL',
                        callBack: e.callBack
                    }), e.event.preventDefault()));
                }, Lists.prototype.enterList = function(e) {
                    var range = this.parent.nodeSelection.getRange(this.parent.currentDocument), startNode = 'LI' === range.startContainer.nodeName ? range.startContainer : range.startContainer.parentElement.closest('LI'), endNode = 'LI' === range.endContainer.nodeName ? range.endContainer : range.endContainer.parentElement.closest('LI');
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(startNode) && !(0, ej2_base /* isNullOrUndefined */ .le)(endNode) && startNode === endNode && 'LI' === startNode.tagName && '' === startNode.textContent.trim() && 0 === startNode.querySelectorAll('IMG').length) {
                        if (startNode.innerHTML.indexOf('&nbsp;') >= 0) return;
                        65279 === startNode.textContent.charCodeAt(0) && (startNode.textContent = '');
                        var startNodeParent = startNode.parentElement;
                        if ((0, ej2_base /* isNullOrUndefined */ .le)(startNodeParent.parentElement.closest('UL')) && (0, ej2_base /* isNullOrUndefined */ .le)(startNodeParent.parentElement.closest('OL'))) {
                            if (!(0, ej2_base /* isNullOrUndefined */ .le)(startNode.nextElementSibling)) {
                                var nearBlockNode = this.parent.domNode.blockParentNode(startNode);
                                this.parent.nodeCutter.GetSpliceNode(range, nearBlockNode);
                            }
                            var insertTag = void 0;
                            'DIV' === e.enterAction ? (insertTag = (0, ej2_base /* createElement */ .az)('div')).innerHTML = '<br>' : 'P' === e.enterAction ? (insertTag = (0, ej2_base /* createElement */ .az)('p')).innerHTML = '<br>' : insertTag = (0, ej2_base /* createElement */ .az)('br'), this.parent.domNode.insertAfter(insertTag, startNodeParent), e.event.preventDefault(), this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, insertTag, 0), '' === startNodeParent.textContent ? (0, ej2_base /* detach */ .og)(startNodeParent) : (0, ej2_base /* detach */ .og)(startNode);
                        }
                    }
                }, // eslint-disable-next-line
                Lists.prototype.backspaceList = function(e) {
                    var range = this.parent.nodeSelection.getRange(this.parent.currentDocument), startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset), endNode = this.parent.domNode.getSelectedNode(range.endContainer, range.endOffset);
                    if ((startNode = 'BR' === startNode.nodeName ? startNode.parentElement : startNode) !== (endNode = 'BR' === endNode.nodeName ? endNode.parentElement : endNode) || (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(startNode, 'li')) || ('' !== startNode.textContent.trim() || 65279 !== startNode.textContent.charCodeAt(0)) && (1 !== startNode.textContent.length || 8203 !== startNode.textContent.charCodeAt(0)) || (startNode.textContent = ''), startNode === endNode && 'LI' === startNode.tagName && 0 === startNode.textContent.length && (0, ej2_base /* isNullOrUndefined */ .le)(startNode.previousElementSibling) && startNode.removeAttribute('style'), startNode === endNode && '' === startNode.textContent) {
                        if ('LI' === startNode.parentElement.tagName && 'LI' === endNode.parentElement.tagName) (0, ej2_base /* detach */ .og)(startNode);
                        else if (startNode.closest('ul') || startNode.closest('ol')) {
                            var parentList = (0, ej2_base /* isNullOrUndefined */ .le)(startNode.closest('ul')) ? startNode.closest('ol') : startNode.closest('ul');
                            if (parentList.firstElementChild === startNode && !(0, ej2_base /* isNullOrUndefined */ .le)(parentList.children[1]) && ('OL' === parentList.children[1].tagName || 'UL' === parentList.children[1].tagName)) {
                                if (parentList.tagName === parentList.children[1].tagName) {
                                    for(; parentList.children[1].lastChild;)this.parent.domNode.insertAfter(parentList.children[1].lastChild, parentList.children[1]);
                                    (0, ej2_base /* detach */ .og)(parentList.children[1]);
                                } else parentList.parentElement.insertBefore(parentList.children[1], parentList);
                            }
                        }
                    } else if (!(0, ej2_base /* isNullOrUndefined */ .le)(startNode.firstChild) && 'BR' === startNode.firstChild.nodeName && !(0, ej2_base /* isNullOrUndefined */ .le)(startNode.childNodes[1]) && ('UL' === startNode.childNodes[1].nodeName || 'OL' === startNode.childNodes[1].nodeName)) {
                        var parentList = (0, ej2_base /* isNullOrUndefined */ .le)(startNode.closest('ul')) ? startNode.closest('ol') : startNode.closest('ul');
                        if (parentList.tagName === startNode.childNodes[1].nodeName) {
                            for(; startNode.childNodes[1].lastChild;)this.parent.domNode.insertAfter(startNode.children[1].lastChild, startNode);
                            (0, ej2_base /* detach */ .og)(startNode.childNodes[1]);
                        } else parentList.parentElement.insertBefore(startNode.children[1], parentList);
                    }
                    this.removeList(range, e), this.firstListBackSpace(range, e);
                }, Lists.prototype.removeList = function(range, e) {
                    var startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset), endNode = this.parent.domNode.getSelectedNode(range.endContainer, range.endOffset);
                    startNode = 'BR' === startNode.nodeName ? startNode.parentElement : startNode, endNode = 'BR' === endNode.nodeName ? endNode.parentElement : endNode, startNode = 'LI' === startNode.nodeName || (0, ej2_base /* isNullOrUndefined */ .le)(startNode.closest('LI')) ? startNode : startNode.closest('LI'), endNode = 'LI' === endNode.nodeName || (0, ej2_base /* isNullOrUndefined */ .le)(endNode.closest('LI')) ? endNode : endNode.closest('LI'), (('OL' === range.commonAncestorContainer.nodeName || 'UL' === range.commonAncestorContainer.nodeName || 'LI' === range.commonAncestorContainer.nodeName) && (0, ej2_base /* isNullOrUndefined */ .le)(endNode.nextElementSibling) && endNode.textContent.length === range.endOffset && (0, ej2_base /* isNullOrUndefined */ .le)(startNode.previousElementSibling) && 0 === range.startOffset || -1 != ej2_base /* Browser.userAgent.indexOf */ .AR.userAgent.indexOf('Firefox') && range.startContainer === range.endContainer && range.startContainer === this.parent.editableElement && 0 === range.startOffset && 1 === range.endOffset) && (-1 != ej2_base /* Browser.userAgent.indexOf */ .AR.userAgent.indexOf('Firefox') ? (0, ej2_base /* detach */ .og)(range.commonAncestorContainer.childNodes[0]) : 'LI' === range.commonAncestorContainer.nodeName ? (0, ej2_base /* detach */ .og)(range.commonAncestorContainer.parentElement) : (0, ej2_base /* detach */ .og)(range.commonAncestorContainer), e.event.preventDefault());
                }, Lists.prototype.onKeyUp = function() {
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.commonLIParent) && !(0, ej2_base /* isNullOrUndefined */ .le)(this.commonLIParent.querySelector('.removeList'))) {
                        for(var currentLIElem = this.commonLIParent.querySelector('.removeList'); !(0, ej2_base /* isNullOrUndefined */ .le)(currentLIElem.firstChild);)this.parent.domNode.insertAfter(currentLIElem.firstChild, currentLIElem);
                        (0, ej2_base /* detach */ .og)(currentLIElem);
                    }
                }, Lists.prototype.firstListBackSpace = function(range, e) {
                    var startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset);
                    if ((0, ej2_base /* isNullOrUndefined */ .le)(startNode.closest('OL')) ? (0, ej2_base /* isNullOrUndefined */ .le)(startNode.closest('UL')) || (this.commonLIParent = startNode.closest('UL')) : this.commonLIParent = startNode.closest('OL'), 'LI' === startNode.nodeName && 0 === range.startOffset && 0 === range.endOffset && (0, ej2_base /* isNullOrUndefined */ .le)(startNode.previousSibling) && !(0, ej2_base /* isNullOrUndefined */ .le)(this.commonLIParent) && (0, ej2_base /* isNullOrUndefined */ .le)(this.commonLIParent.previousSibling) && (0, ej2_base /* isNullOrUndefined */ .le)(this.commonLIParent.parentElement.closest('OL')) && (0, ej2_base /* isNullOrUndefined */ .le)(this.commonLIParent.parentElement.closest('UL')) && (0, ej2_base /* isNullOrUndefined */ .le)(this.commonLIParent.parentElement.closest('LI'))) {
                        var currentElem = (0, ej2_base /* createElement */ .az)('P');
                        currentElem.innerHTML = '&#8203;', startNode.classList.add('removeList'), this.commonLIParent.parentElement.insertBefore(currentElem, this.commonLIParent);
                    }
                }, Lists.prototype.keyDownHandler = function(e) {
                    if (13 === e.event.which && this.enterList(e), 32 === e.event.which && this.spaceList(e), 8 === e.event.which && this.backspaceList(e), 46 === e.event.which && 'delete' === e.event.action) {
                        var range = this.parent.nodeSelection.getRange(this.parent.currentDocument), commonAncestor = range.commonAncestorContainer, startEle = range.startContainer, endEle = range.endContainer, startNode = 3 === startEle.nodeType ? startEle.parentElement : startEle, endNode = 3 === endEle.nodeType ? endEle.parentElement : endEle;
                        'UL' !== commonAncestor.nodeName && 'OL' !== commonAncestor.nodeName || startNode === endNode || (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(startNode, 'ul')) && (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(startNode, 'ol')) || (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(endNode, 'ul')) && (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(endNode, 'ol')) || commonAncestor.lastElementChild !== (0, ej2_base /* closest */ .oq)(endNode, 'li') || range.collapsed || (0, ej2_base /* detach */ .og)(commonAncestor), this.removeList(range, e);
                    }
                    if (9 === e.event.which) {
                        var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                        e.event.action && 'indent' === e.event.action || (this.saveSelection = this.parent.nodeSelection.save(range, this.parent.currentDocument));
                        var blockNodes = void 0, startOffset = range.startOffset, endOffset = range.endOffset, startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset), endNode = this.parent.domNode.getSelectedNode(range.endContainer, range.endOffset);
                        if (startNode === endNode && ('BR' === startNode.nodeName || '#text' === startNode.nodeName) && IGNORE_BLOCK_TAGS.indexOf(startNode.parentNode.tagName.toLocaleLowerCase()) >= 0) return;
                        e.event.action && 'indent' === e.event.action || this.domNode.setMarker(this.saveSelection), blockNodes = this.domNode.blockNodes();
                        for(var nodes = [], isNested = !0, i = 0; i < blockNodes.length; i++)'LI' === blockNodes[i].parentNode.tagName ? nodes.push(blockNodes[i].parentNode) : 'LI' === blockNodes[i].tagName && 'P' !== blockNodes[i].childNodes[0].tagName && 'OL' !== blockNodes[i].childNodes[0].tagName && 'UL' !== blockNodes[i].childNodes[0].tagName && nodes.push(blockNodes[i]);
                        nodes.length > 1 || nodes.length && (0 === startOffset && 0 === endOffset || e.ignoreDefault) ? (e.event.preventDefault(), e.event.stopPropagation(), this.currentAction = this.getAction(nodes[0]), e.event.shiftKey ? (this.revertList(nodes, e), this.revertClean()) : isNested = this.nestedList(nodes), isNested && (this.cleanNode(), this.parent.editableElement.focus()), !(e.event.action && 'indent' === e.event.action) && (this.saveSelection = this.domNode.saveMarker(this.saveSelection), this.saveSelection.restore(), e.callBack && e.callBack({
                            requestType: this.currentAction,
                            editorMode: 'HTML',
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.domNode.blockNodes(),
                            event: e.event
                        }))) : e.event.action && 'indent' === e.event.action || (e.event && e.event.shiftKey && 'Tab' === e.event.key && (e.event.action = 'tab'), this.saveSelection = this.domNode.saveMarker(this.saveSelection, e.event.action), this.saveSelection.restore());
                    } else switch(e.event.action){
                        case 'ordered-list':
                            this.applyListsHandler({
                                subCommand: 'OL',
                                callBack: e.callBack
                            }), e.event.preventDefault();
                            break;
                        case 'unordered-list':
                            this.applyListsHandler({
                                subCommand: 'UL',
                                callBack: e.callBack
                            }), e.event.preventDefault();
                    }
                }, Lists.prototype.spaceKeyAction = function(e) {
                    32 === e.event.which && this.spaceList(e);
                }, Lists.prototype.getAction = function(element) {
                    return 'OL' === element.parentNode.nodeName ? 'OL' : 'UL';
                }, Lists.prototype.revertClean = function() {
                    for(var collectionNodes = this.parent.editableElement.querySelectorAll('ul, ol'), i = 0; i < collectionNodes.length; i++){
                        var listNodes = collectionNodes[i].querySelectorAll('ul, ol');
                        if (listNodes.length > 0) for(var j = 0; j < listNodes.length; j++){
                            var prevSibling = listNodes[j].previousSibling;
                            prevSibling && 'LI' === prevSibling.tagName && prevSibling.appendChild(listNodes[j]);
                        }
                    }
                }, Lists.prototype.noPreviousElement = function(elements) {
                    var firstNode, firstNodeOL, siblingListOL = elements.querySelectorAll('ol, ul'), siblingListLI = elements.querySelectorAll('li'), siblingListLIFirst = this.domNode.contents(siblingListLI[0])[0];
                    if (siblingListLI.length > 0 && ('OL' === siblingListLIFirst.nodeName || 'UL' === siblingListLIFirst.nodeName) ? firstNode = siblingListLI[0] : firstNodeOL = siblingListOL[0], firstNode) for(var h = this.domNode.contents(elements)[0]; h && !this.domNode.isList(h);){
                        var nextSibling = h.nextSibling;
                        (0, ej2_base /* prepend */ .Ce)([
                            h
                        ], firstNode), (0, ej2_base /* setStyleAttribute */ .V7)(elements, {
                            'list-style-type': 'none'
                        }), (0, ej2_base /* setStyleAttribute */ .V7)(firstNode, {
                            'list-style-type': ''
                        }), h = nextSibling;
                    }
                    else if (firstNodeOL) {
                        var nestedElement = (0, ej2_base /* createElement */ .az)('li');
                        (0, ej2_base /* prepend */ .Ce)([
                            nestedElement
                        ], firstNodeOL);
                        for(var h = this.domNode.contents(elements)[0]; h && !this.domNode.isList(h);){
                            var nextSibling = h.nextSibling;
                            nestedElement.appendChild(h), h = nextSibling;
                        }
                        (0, ej2_base /* prepend */ .Ce)([
                            firstNodeOL
                        ], elements.parentNode), (0, ej2_base /* detach */ .og)(elements);
                        var nestedElementLI = (0, ej2_base /* createElement */ .az)('li', {
                            styles: 'list-style-type: none;'
                        });
                        (0, ej2_base /* prepend */ .Ce)([
                            nestedElementLI
                        ], firstNodeOL.parentNode), (0, ej2_base /* append */ .R3)([
                            firstNodeOL
                        ], nestedElementLI);
                    } else {
                        var nestedElementLI = (0, ej2_base /* createElement */ .az)('li', {
                            styles: 'list-style-type: none;'
                        });
                        (0, ej2_base /* prepend */ .Ce)([
                            nestedElementLI
                        ], elements.parentNode);
                        var nestedElement = (0, ej2_base /* createElement */ .az)(elements.parentNode.tagName);
                        (0, ej2_base /* prepend */ .Ce)([
                            nestedElement
                        ], nestedElementLI), (0, ej2_base /* append */ .R3)([
                            elements
                        ], nestedElement);
                    }
                }, Lists.prototype.nestedList = function(elements) {
                    for(var isNested = !1, i = 0; i < elements.length; i++){
                        var prevSibling = this.domNode.getPreviousNode(elements[i]);
                        if (prevSibling) {
                            isNested = !0;
                            var firstNode = void 0, firstNodeLI = void 0, siblingListOL = elements[i].querySelectorAll('ol, ul'), siblingListLI = elements[i].querySelectorAll('li'), siblingListLIFirst = this.domNode.contents(siblingListLI[0])[0];
                            if (siblingListLI.length > 0 && ('OL' === siblingListLIFirst.nodeName || 'UL' === siblingListLIFirst.nodeName) ? firstNodeLI = siblingListLI[0] : firstNode = siblingListOL[0], firstNode) {
                                var nestedElement = (0, ej2_base /* createElement */ .az)('li');
                                (0, ej2_base /* prepend */ .Ce)([
                                    nestedElement
                                ], firstNode);
                                for(var h = this.domNode.contents(elements[i])[0]; h && !this.domNode.isList(h);){
                                    var nextSibling = h.nextSibling;
                                    nestedElement.appendChild(h), h = nextSibling;
                                }
                                (0, ej2_base /* append */ .R3)([
                                    firstNode
                                ], prevSibling), (0, ej2_base /* detach */ .og)(elements[i]);
                            } else if (firstNodeLI) {
                                if ('LI' === prevSibling.tagName) {
                                    for(var h = this.domNode.contents(elements[i])[0]; h && !this.domNode.isList(h);){
                                        var nextSibling = h.nextSibling;
                                        (0, ej2_base /* prepend */ .Ce)([
                                            h
                                        ], firstNodeLI), (0, ej2_base /* setStyleAttribute */ .V7)(elements[i], {
                                            'list-style-type': 'none'
                                        }), (0, ej2_base /* setStyleAttribute */ .V7)(firstNodeLI, {
                                            'list-style-type': ''
                                        }), h = nextSibling;
                                    }
                                    (0, ej2_base /* append */ .R3)([
                                        firstNodeLI.parentNode
                                    ], prevSibling), (0, ej2_base /* detach */ .og)(elements[i]);
                                }
                            } else if ('LI' === prevSibling.tagName) {
                                var nestedElement = (0, ej2_base /* createElement */ .az)(elements[i].parentNode.tagName);
                                (0, ej2_base /* append */ .R3)([
                                    nestedElement
                                ], prevSibling), (0, ej2_base /* append */ .R3)([
                                    elements[i]
                                ], nestedElement);
                            } else ('OL' === prevSibling.tagName || 'UL' === prevSibling.tagName) && (0, ej2_base /* append */ .R3)([
                                elements[i]
                            ], prevSibling);
                        } else {
                            var element = elements[i];
                            isNested = !0, this.noPreviousElement(element);
                        }
                    }
                    return isNested;
                }, Lists.prototype.applyListsHandler = function(e) {
                    var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                    if (-1 != ej2_base /* Browser.userAgent.indexOf */ .AR.userAgent.indexOf('Firefox') && range.startContainer === range.endContainer && range.startContainer === this.parent.editableElement) {
                        for(var startNode = range.startContainer.childNodes[range.startOffset > 0 ? range.startOffset - 1 : range.startOffset] || range.startContainer, endNode = range.endContainer.childNodes[range.endOffset > 0 ? range.endOffset - 1 : range.endOffset] || range.endContainer, lastSelectionNode = 'BR' === endNode.lastChild.nodeName ? (0, ej2_base /* isNullOrUndefined */ .le)(endNode.lastChild.previousSibling) ? endNode : endNode.lastChild.previousSibling : endNode.lastChild; !(0, ej2_base /* isNullOrUndefined */ .le)(lastSelectionNode) && '#text' !== lastSelectionNode.nodeName && 'IMG' !== lastSelectionNode.nodeName && 'BR' !== lastSelectionNode.nodeName && 'HR' !== lastSelectionNode.nodeName;)lastSelectionNode = lastSelectionNode.lastChild;
                        this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, startNode, lastSelectionNode, 0, lastSelectionNode.textContent.length), range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                    }
                    if (range.startContainer === range.endContainer && range.startContainer === this.parent.editableElement && range.startOffset === range.endOffset && 0 === range.startOffset && 0 === this.parent.editableElement.textContent.length && 'TABLE' != this.parent.editableElement.childNodes[0].nodeName && 'IMG' != this.parent.editableElement.childNodes[0].nodeName) {
                        var focusNode = range.startContainer.childNodes[0];
                        this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, focusNode, focusNode, 0, 0), range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                    }
                    this.saveSelection = this.parent.nodeSelection.save(range, this.parent.currentDocument), this.currentAction = e.subCommand, this.currentAction = e.subCommand = 'NumberFormatList' === this.currentAction ? 'OL' : 'BulletFormatList' === this.currentAction ? 'UL' : this.currentAction, this.domNode.setMarker(this.saveSelection);
                    var listsNodes = this.domNode.blockNodes();
                    if ('BR' === e.enterAction) {
                        this.setSelectionBRConfig();
                        var allSelectedNode = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument), selectedNodes = this.parent.nodeSelection.getSelectionNodes(allSelectedNode), currentFormatNodes = [];
                        0 === selectedNodes.length && selectedNodes.push(listsNodes[0]);
                        for(var i = 0; i < selectedNodes.length; i++){
                            for(var currentNode = selectedNodes[i], previousCurrentNode = void 0; !this.parent.domNode.isBlockNode(currentNode) && currentNode !== this.parent.editableElement;)previousCurrentNode = currentNode, currentNode = currentNode.parentElement;
                            this.parent.domNode.isBlockNode(currentNode) && currentNode === this.parent.editableElement && currentFormatNodes.push(previousCurrentNode);
                        }
                        for(var i = 0; i < currentFormatNodes.length; i++)if (!this.parent.domNode.isBlockNode(currentFormatNodes[i])) {
                            for(var currentNode = currentFormatNodes[i], previousNode = currentNode; currentNode === this.parent.editableElement;)previousNode = currentNode, currentNode = currentNode.parentElement;
                            var tempElem = void 0;
                            this.parent.domNode.isBlockNode(previousNode.parentElement) && previousNode.parentElement === this.parent.editableElement ? (tempElem = (0, ej2_base /* createElement */ .az)('p'), previousNode.parentElement.insertBefore(tempElem, previousNode), tempElem.appendChild(previousNode)) : tempElem = previousNode;
                            for(var preNode = tempElem.previousSibling; !(0, ej2_base /* isNullOrUndefined */ .le)(preNode) && 'BR' !== preNode.nodeName && !this.parent.domNode.isBlockNode(preNode);)tempElem.firstChild.parentElement.insertBefore(preNode, tempElem.firstChild), preNode = tempElem.previousSibling;
                            (0, ej2_base /* isNullOrUndefined */ .le)(preNode) || 'BR' !== preNode.nodeName || (0, ej2_base /* detach */ .og)(preNode);
                            for(var postNode = tempElem.nextSibling; !(0, ej2_base /* isNullOrUndefined */ .le)(postNode) && 'BR' !== postNode.nodeName && !this.parent.domNode.isBlockNode(postNode);)tempElem.appendChild(postNode), postNode = tempElem.nextSibling;
                            (0, ej2_base /* isNullOrUndefined */ .le)(postNode) || 'BR' !== postNode.nodeName || (0, ej2_base /* detach */ .og)(postNode);
                        }
                        this.setSelectionBRConfig(), listsNodes = this.parent.domNode.blockNodes();
                    }
                    for(var i = 0; i < listsNodes.length; i++)'TABLE' !== listsNodes[i].tagName || range.collapsed || listsNodes.splice(i, 1), listsNodes.length > 0 && 'LI' !== listsNodes[i].tagName && 'LI' === listsNodes[i].parentNode.tagName && (listsNodes[i] = listsNodes[i].parentNode);
                    this.applyLists(listsNodes, this.currentAction, e.selector, e.item, e), e.callBack && e.callBack({
                        requestType: this.currentAction,
                        event: e.event,
                        editorMode: 'HTML',
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: this.parent.domNode.blockNodes()
                    });
                }, Lists.prototype.setSelectionBRConfig = function() {
                    var startElem = this.parent.editableElement.querySelector('.' + markerClassName.startSelection), endElem = this.parent.editableElement.querySelector('.' + markerClassName.endSelection);
                    (0, ej2_base /* isNullOrUndefined */ .le)(endElem) ? this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, startElem, 0) : this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, startElem, endElem, 0, 0);
                }, Lists.prototype.applyLists = function(elements, type, selector, item, e) {
                    if (this.isRevert(elements, type, item) && (0, ej2_base /* isNullOrUndefined */ .le)(item)) this.revertList(elements, e), this.removeEmptyListElements();
                    else {
                        this.checkLists(elements, type, item);
                        for(var i = 0; i < elements.length; i++)if ((0, ej2_base /* isNullOrUndefined */ .le)(item) || (0, ej2_base /* isNullOrUndefined */ .le)(item.listStyle) || ('listImage' === item.listStyle ? (0, ej2_base /* setStyleAttribute */ .V7)(elements[i], {
                            'list-style-image': item.listImage
                        }) : ((0, ej2_base /* setStyleAttribute */ .V7)(elements[i], {
                            'list-style-image': 'none'
                        }), (0, ej2_base /* setStyleAttribute */ .V7)(elements[i], {
                            'list-style-type': item.listStyle.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase()
                        }))), 'true' === elements[i].getAttribute('contenteditable') && 1 === elements[i].childNodes.length && 'TABLE' === elements[i].childNodes[0].nodeName) {
                            var listEle = document.createElement(type);
                            listEle.innerHTML = '<li><br/></li>', elements[i].appendChild(listEle);
                        } else if ('LI' !== elements[i].tagName && (0, ej2_base /* isNullOrUndefined */ .le)(item)) {
                            var elemAtt = 'IMG' === elements[i].tagName ? '' : this.domNode.attributes(elements[i]), openTag = '<' + type + '>', closeTag = '</' + type + '>', newTag = 'li' + elemAtt, replaceHTML = 'p' === elements[i].tagName.toLowerCase() ? elements[i].innerHTML : elements[i].outerHTML, innerHTML = this.domNode.createTagString(newTag, null, replaceHTML), collectionString = openTag + innerHTML + closeTag;
                            this.domNode.replaceWith(elements[i], collectionString);
                        } else if (!(0, ej2_base /* isNullOrUndefined */ .le)(item) && 'LI' !== elements[i].tagName) {
                            var elemAtt = 'IMG' === elements[i].tagName ? '' : this.domNode.attributes(elements[i]), openTag = '<' + type + elemAtt + '>', closeTag = '</' + type + '>', newTag = 'li', replaceHTML = 'p' === elements[i].tagName.toLowerCase() ? elements[i].innerHTML : elements[i].outerHTML, innerHTML = this.domNode.createTagString(newTag, null, replaceHTML), collectionString = openTag + innerHTML + closeTag;
                            this.domNode.replaceWith(elements[i], collectionString);
                        }
                    }
                    this.cleanNode(), this.parent.editableElement.focus(), (0, common_util /* isIDevice */ .FA)() && (0, common_util /* setEditFrameFocus */ .ze)(this.parent.editableElement, selector), this.saveSelection = this.domNode.saveMarker(this.saveSelection), this.saveSelection.restore();
                }, Lists.prototype.removeEmptyListElements = function() {
                    for(var listElem = this.parent.editableElement.querySelectorAll('ol, ul'), i = 0; i < listElem.length; i++)'' === listElem[i].textContent.trim() && (0, ej2_base /* detach */ .og)(listElem[i]);
                }, Lists.prototype.isRevert = function(nodes, tagName, item) {
                    for(var isRevert = !0, i = 0; i < nodes.length; i++){
                        if ('LI' !== nodes[i].tagName) return !1;
                        (nodes[i].parentNode.tagName !== tagName || (0, ej2_base /* isNullOrUndefined */ .le)(item) && '' !== nodes[i].parentNode.style.listStyleType) && (isRevert = !1);
                    }
                    return isRevert;
                }, Lists.prototype.checkLists = function(nodes, tagName, item) {
                    for(var nodesTemp = [], i = 0; i < nodes.length; i++){
                        var node = nodes[i].parentNode;
                        (0, ej2_base /* isNullOrUndefined */ .le)(item) || 'LI' !== nodes[i].tagName || (0, ej2_base /* isNullOrUndefined */ .le)(item.listStyle) || ('listImage' === item.listStyle ? (0, ej2_base /* setStyleAttribute */ .V7)(node, {
                            'list-style-image': item.listImage
                        }) : ((0, ej2_base /* setStyleAttribute */ .V7)(node, {
                            'list-style-image': 'none'
                        }), (0, ej2_base /* setStyleAttribute */ .V7)(node, {
                            'list-style-type': item.listStyle.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase()
                        }))), ('LI' === nodes[i].tagName && node.tagName !== tagName && 0 > nodesTemp.indexOf(node) || 'LI' === nodes[i].tagName && node.tagName === tagName && 0 > nodesTemp.indexOf(node) && null !== item) && nodesTemp.push(node), (0, ej2_base /* isNullOrUndefined */ .le)(item) && (node.tagName === tagName || ('UL' === node.tagName || 'OL' === node.tagName) && node.hasAttribute('style')) && node.hasAttribute('style') && node.removeAttribute('style');
                    }
                    for(var j = nodesTemp.length - 1; j >= 0; j--){
                        var h = nodesTemp[j], replace = '<' + tagName.toLowerCase() + ' ' + this.domNode.attributes(h) + '>' + h.innerHTML + '</' + tagName.toLowerCase() + '>';
                        this.domNode.replaceWith(nodesTemp[j], replace);
                    }
                }, Lists.prototype.cleanNode = function() {
                    for(var liParents = this.parent.editableElement.querySelectorAll('ol + ol, ul + ul'), c = 0; c < liParents.length; c++){
                        var node = liParents[c];
                        if (this.domNode.isList(node.previousElementSibling) && this.domNode.openTagString(node) === this.domNode.openTagString(node.previousElementSibling)) {
                            for(var contentNodes = this.domNode.contents(node), f = 0; f < contentNodes.length; f++)node.previousElementSibling.appendChild(contentNodes[f]);
                            node.parentNode.removeChild(node);
                        }
                    }
                }, Lists.prototype.findUnSelected = function(temp, elements) {
                    if ((temp = temp.slice().reverse()).length > 0) {
                        var rightIndent = [], indentElements = [], lastElement = elements[elements.length - 1], lastElementChild = [], childElements = [];
                        lastElementChild = lastElement.childNodes;
                        for(var z = 0; z < lastElementChild.length; z++)if ('OL' === lastElementChild[z].tagName || 'UL' === lastElementChild[z].tagName) {
                            var childLI = lastElementChild[z].querySelectorAll('li');
                            if (childLI.length > 0) for(var y = 0; y < childLI.length; y++)childElements.push(childLI[y]);
                        }
                        for(var i = 0; i < childElements.length; i++){
                            for(var count = 0, j = 0; j < temp.length; j++)childElements[i].contains(temp[j]) || (count += 1);
                            count === temp.length && indentElements.push(childElements[i]);
                        }
                        if (indentElements.length > 0) for(var x = 0; x < indentElements.length; x++)'OL' !== this.domNode.contents(indentElements[x])[0].nodeName && 'UL' !== this.domNode.contents(indentElements[x])[0].nodeName && rightIndent.push(indentElements[x]);
                        rightIndent.length > 0 && this.nestedList(rightIndent);
                    }
                }, Lists.prototype.revertList = function(elements, e) {
                    for(var temp = [], i = elements.length - 1; i >= 0; i--)for(var j = i - 1; j >= 0; j--)if (elements[j].contains(elements[i]) || elements[j] === elements[i]) {
                        temp.push(elements[i]), elements.splice(i, 1);
                        break;
                    }
                    this.findUnSelected(temp, elements);
                    for(var viewNode = [], i = 0; i < elements.length; i++){
                        var element = elements[i];
                        3 === this.domNode.contents(element)[0].nodeType && 0 === this.domNode.contents(element)[0].textContent.trim().length && (0, ej2_base /* detach */ .og)(this.domNode.contents(element)[0]);
                        var parentNode = elements[i].parentNode, className = element.getAttribute('class');
                        if (0 === temp.length) {
                            var firstNode = elements[i].querySelectorAll('ul, ol')[0];
                            if (firstNode && firstNode.querySelectorAll('li')) {
                                var nestedElement = (0, ej2_base /* createElement */ .az)(firstNode.tagName);
                                (0, ej2_base /* append */ .R3)([
                                    nestedElement
                                ], firstNode.parentNode);
                                var nestedElementLI = (0, ej2_base /* createElement */ .az)('li', {
                                    styles: 'list-style-type: none;'
                                });
                                (0, ej2_base /* append */ .R3)([
                                    nestedElementLI
                                ], nestedElement), (0, ej2_base /* append */ .R3)([
                                    firstNode
                                ], nestedElementLI);
                            }
                        }
                        if (element.parentNode.insertBefore(this.closeTag(parentNode.tagName), element), 'LI' === parentNode.parentNode.tagName || 'OL' === parentNode.parentNode.tagName || 'UL' === parentNode.parentNode.tagName) element.parentNode.insertBefore(this.closeTag('LI'), element);
                        else {
                            if (0 === element.querySelectorAll(BLOCK_TAGS.join(', ')).length) {
                                var wrapper = "<p" + ((0, ej2_base /* isNullOrUndefined */ .le)(className) ? ' class="e-rte-wrap-inner"' : ' class="' + className + ' e-rte-wrap-inner"') + this.domNode.attributes(parentNode) + "></p>";
                                'BR' !== e.enterAction && this.domNode.wrapInner(element, this.domNode.parseHTMLFragment(wrapper));
                            } else if (3 === this.domNode.contents(element)[0].nodeType) {
                                var replace = this.domNode.createTagString('p', parentNode, this.parent.domNode.encode(this.domNode.contents(element)[0].textContent));
                                this.domNode.replaceWith(this.domNode.contents(element)[0], replace);
                            } else if (this.domNode.contents(element)[0].classList.contains(markerClassName.startSelection) || this.domNode.contents(element)[0].classList.contains(markerClassName.endSelection)) {
                                var replace = this.domNode.createTagString('p', parentNode, this.domNode.contents(element)[0].outerHTML);
                                this.domNode.replaceWith(this.domNode.contents(element)[0], replace);
                            } else {
                                var childNode = element.firstChild;
                                className = childNode.getAttribute('class'), (0, ej2_base /* attributes */ .Y4)(childNode, this.domNode.rawAttributes(parentNode)), className && childNode.getAttribute('class') && (0, ej2_base /* attributes */ .Y4)(childNode, {
                                    class: className + ' ' + childNode.getAttribute('class')
                                });
                            }
                            (0, ej2_base /* append */ .R3)([
                                this.openTag('LI')
                            ], element), (0, ej2_base /* prepend */ .Ce)([
                                this.closeTag('LI')
                            ], element);
                        }
                        this.domNode.insertAfter(this.openTag(parentNode.tagName), element), 'LI' === parentNode.parentNode.tagName && (parentNode = parentNode.parentNode.parentNode), 0 > viewNode.indexOf(parentNode) && viewNode.push(parentNode);
                    }
                    for(var i = 0; i < viewNode.length; i++){
                        var node = viewNode[i], nodeInnerHtml = node.innerHTML, closeTag = /<span class="e-rte-list-close-([a-z]*)"><\/span>/g, openTag = /<span class="e-rte-list-open-([a-z]*)"><\/span>/g;
                        nodeInnerHtml = (nodeInnerHtml = nodeInnerHtml.replace(closeTag, '</$1>')).replace(openTag, '<$1 ' + this.domNode.attributes(node) + '>'), this.domNode.replaceWith(node, this.domNode.openTagString(node) + nodeInnerHtml.trim() + this.domNode.closeTagString(node));
                    }
                    for(var emptyUl = this.parent.editableElement.querySelectorAll('ul:empty, ol:empty'), i = 0; i < emptyUl.length; i++)(0, ej2_base /* detach */ .og)(emptyUl[i]);
                    for(var emptyLi = this.parent.editableElement.querySelectorAll('li:empty'), i = 0; i < emptyLi.length; i++)(0, ej2_base /* detach */ .og)(emptyLi[i]);
                }, Lists.prototype.openTag = function(type) {
                    return this.domNode.parseHTMLFragment('<span class="e-rte-list-open-' + type.toLowerCase() + '"></span>');
                }, Lists.prototype.closeTag = function(type) {
                    return this.domNode.parseHTMLFragment('<span class="e-rte-list-close-' + type.toLowerCase() + '"></span>');
                }, Lists;
            }(), InsertMethods = /** @class */ function() {
                function InsertMethods() {}
                return(/**
     * WrapBefore method
     *
     * @param {Text} textNode - specifies the text node
     * @param {HTMLElement} parentNode - specifies the parent node
     * @param {boolean} isAfter - specifies the boolean value
     * @returns {Text} - returns the text value
     * @hidden

     */ InsertMethods.WrapBefore = function(textNode, parentNode, isAfter) {
                    return parentNode.innerText = textNode.textContent, isAfter ? this.AppendBefore(parentNode, textNode, !0) : this.AppendBefore(parentNode, textNode), textNode.parentNode && textNode.parentNode.removeChild(textNode), parentNode.childNodes[0];
                }, /**
     * Wrap method
     *
     * @param {HTMLElement} childNode - specifies the child node
     * @param {HTMLElement} parentNode - specifies the parent node.
     * @returns {HTMLElement} - returns the element
     * @hidden

     */ InsertMethods.Wrap = function(childNode, parentNode) {
                    return this.AppendBefore(parentNode, childNode), parentNode.appendChild(childNode), childNode;
                }, /**
     * unwrap method
     *
     * @param {Node} node - specifies the node element.
     * @returns {Node[]} - returns the array of value
     * @hidden

     */ InsertMethods.unwrap = function(node) {
                    for(var parent = node.parentNode, child = []; node.firstChild;)child.push(parent.insertBefore(node.firstChild, node));
                    return parent.removeChild(node), child;
                }, /**
     * AppendBefore method
     *
     * @param {HTMLElement} textNode - specifies the element
     * @param {HTMLElement} parentNode - specifies the parent node
     * @param {boolean} isAfter - specifies the boolean value
     * @returns {void}
     * @hidden

     */ InsertMethods.AppendBefore = function(textNode, parentNode, isAfter) {
                    return parentNode.parentNode ? isAfter ? parentNode.parentNode.insertBefore(textNode, parentNode.nextSibling) : parentNode.parentNode.insertBefore(textNode, parentNode) : parentNode;
                }, InsertMethods);
            }(), NodeCutter = /** @class */ function() {
                function NodeCutter() {
                    this.enterAction = 'P', this.position = -1, this.nodeSelection = new selection /* NodeSelection */ .q();
                }
                return(// Split Selection Node
                /**
     * GetSpliceNode method
     *
     * @param {Range} range - specifies the range
     * @param {HTMLElement} node - specifies the node element.
     * @returns {Node} - returns the node value
     * @hidden

     */ NodeCutter.prototype.GetSpliceNode = function(range, node) {
                    return node = this.SplitNode(range, node, !0), node = this.SplitNode(range, node, !1);
                }, /**
     * @param {Range} range - specifies the range
     * @param {HTMLElement} node - specifies the node element.
     * @param {boolean} isCollapsed - specifies the boolean value
     * @returns {HTMLElement} - returns the element
     * @hidden

     */ NodeCutter.prototype.SplitNode = function(range, node, isCollapsed) {
                    if (!node) return null;
                    var clone = range.cloneRange(), parent_1 = node.parentNode, index = this.nodeSelection.getIndex(node);
                    clone.collapse(isCollapsed), // eslint-disable-next-line
                    isCollapsed ? clone.setStartBefore(node) : clone.setEndAfter(node);
                    var fragment = clone.extractContents();
                    if (isCollapsed) {
                        if (node = parent_1.childNodes[index], (fragment = this.spliceEmptyNode(fragment, !1)) && fragment.childNodes.length > 0) {
                            var isEmpty = !!(1 === fragment.childNodes.length && 'IMG' !== fragment.childNodes[0].nodeName && this.isImgElm(fragment)) && '' === fragment.textContent;
                            if (!isEmpty) {
                                if (node) InsertMethods.AppendBefore(fragment, node);
                                else {
                                    parent_1.appendChild(fragment);
                                    var divNode = document.createElement('div');
                                    divNode.innerHTML = '&#65279;&#65279;', node = divNode.firstChild, parent_1.appendChild(node);
                                }
                            }
                        }
                    } else if (node = parent_1.childNodes.length > 1 ? parent_1.childNodes[index] : parent_1.childNodes[0], (fragment = this.spliceEmptyNode(fragment, !0)) && fragment.childNodes.length > 0) {
                        var isEmpty = !!(1 === fragment.childNodes.length && 'IMG' !== fragment.childNodes[0].nodeName && this.isImgElm(fragment)) && '' === fragment.textContent;
                        if (!isEmpty) {
                            if (node) InsertMethods.AppendBefore(fragment, node, !0);
                            else {
                                parent_1.appendChild(fragment);
                                var divNode = document.createElement('div');
                                divNode.innerHTML = '&#65279;&#65279;', parent_1.insertBefore(divNode.firstChild, parent_1.firstChild), node = parent_1.firstChild;
                            }
                        }
                    }
                    return node;
                }, NodeCutter.prototype.isImgElm = function(fragment) {
                    var result = !0;
                    if (1 === fragment.childNodes.length && 'IMG' !== fragment.childNodes[0].nodeName) for(var firstChild = fragment.childNodes[0], i = 0; !(0, ej2_base /* isNullOrUndefined */ .le)(firstChild.childNodes) && i < firstChild.childNodes.length; i++)'IMG' === firstChild.childNodes[i].nodeName && (result = !1);
                    else result = !0;
                    return result;
                }, NodeCutter.prototype.spliceEmptyNode = function(fragment, isStart) {
                    var len;
                    return (len = 1 === fragment.childNodes.length && '#text' === fragment.childNodes[0].nodeName && '' === fragment.childNodes[0].textContent || '' === fragment.textContent ? -1 : fragment.childNodes.length - 1) > -1 && !isStart ? this.spliceEmptyNode(fragment.childNodes[len], isStart) : len > -1 ? this.spliceEmptyNode(fragment.childNodes[0], isStart) : 3 !== fragment.nodeType && 11 !== fragment.nodeType && 'IMG' !== fragment.nodeName && fragment.parentNode.removeChild(fragment), fragment;
                }, // Cursor Position split
                NodeCutter.prototype.GetCursorStart = function(indexes, index, isStart) {
                    for(var position = (indexes = isStart ? indexes : indexes.reverse())[0], num = 0; num < indexes.length && (isStart ? indexes[num] < index : indexes[num] >= index); num++)position = indexes[num];
                    return position;
                }, /**
     * GetCursorRange method
     *
     * @param {Document} docElement - specifies the document
     * @param {Range} range - specifies the range
     * @param {Node} node - specifies the node.
     * @returns {Range} - returns the range value
     * @hidden

     */ NodeCutter.prototype.GetCursorRange = function(docElement, range, node) {
                    var cursorRange = docElement.createRange(), indexes = [];
                    indexes.push(0);
                    for(var str = this.TrimLineBreak(node.data), index = str.indexOf(' ', 0); -1 !== index;)0 > indexes.indexOf(index) && indexes.push(index), RegExp('\\s').test(str[index - 1]) && 0 > indexes.indexOf(index - 1) && indexes.push(index - 1), RegExp('\\s').test(str[index + 1]) && indexes.push(index + 1), index = str.indexOf(' ', index + 1);
                    if (indexes.push(str.length), indexes.indexOf(range.startOffset) >= 0 || indexes.indexOf(range.startOffset - 1) >= 0 && (1 !== range.startOffset || 1 === range.startOffset && RegExp('\\s').test(str[0])) || indexes[indexes.length - 1] - 1 === range.startOffset) cursorRange = range, this.position = 1;
                    else {
                        var startOffset = this.GetCursorStart(indexes, range.startOffset, !0);
                        this.position = range.startOffset - startOffset, cursorRange.setStart(range.startContainer, startOffset), cursorRange.setEnd(range.startContainer, this.GetCursorStart(indexes, range.startOffset, !1));
                    }
                    return cursorRange;
                }, /**
     * GetCursorNode method
     *
     * @param {Document} docElement - specifies the document
     * @param {Range} range - specifies the range
     * @param {Node} node - specifies the node.
     * @returns {Node} - returns the node value
     * @hidden

     */ NodeCutter.prototype.GetCursorNode = function(docElement, range, node) {
                    return this.GetSpliceNode(this.GetCursorRange(docElement, range, node), node);
                }, /**
     * TrimLineBreak method
     *
     * @param {string} line - specifies the string value.
     * @returns {string} - returns the string
     * @hidden

     */ NodeCutter.prototype.TrimLineBreak = function(line) {
                    return line.replace(/(\r\n\t|\n|\r\t)/gm, ' ');
                }, NodeCutter);
            }(), Formats = /** @class */ function() {
                /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the parent element.
     * @hidden

     */ function Formats(parent) {
                    this.parent = parent, this.addEventListener();
                }
                return Formats.prototype.addEventListener = function() {
                    this.parent.observer.on(common_constant /* FORMAT_TYPE */ .Kj, this.applyFormats, this), this.parent.observer.on(common_constant /* KEY_UP_HANDLER */ .My, this.onKeyUp, this), this.parent.observer.on(common_constant /* KEY_DOWN_HANDLER */ .kT, this.onKeyDown, this);
                }, Formats.prototype.getParentNode = function(node) {
                    for(; node.parentNode && node.parentNode !== this.parent.editableElement;)node = node.parentNode;
                    return node;
                }, Formats.prototype.onKeyUp = function(e) {
                    var range = this.parent.nodeSelection.getRange(this.parent.currentDocument), endCon = range.endContainer, lastChild = endCon.lastChild;
                    if (13 === e.event.which && range.startContainer === endCon && 3 !== endCon.nodeType) {
                        var pTag = (0, ej2_base /* createElement */ .az)('p');
                        if (pTag.innerHTML = '<br>', !(0, ej2_base /* isNullOrUndefined */ .le)(lastChild) && lastChild && 'BR' === lastChild.nodeName && lastChild.previousSibling && 'TABLE' === lastChild.previousSibling.nodeName) endCon.replaceChild(pTag, lastChild), this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, pTag, 0);
                        else {
                            var brNode = this.parent.nodeSelection.getSelectionNodeCollectionBr(range)[0];
                            !(0, ej2_base /* isNullOrUndefined */ .le)(brNode) && 'BR' === brNode.nodeName && brNode.previousSibling && 'TABLE' === brNode.previousSibling.nodeName && (endCon.replaceChild(pTag, brNode), this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, pTag, 0));
                        }
                    }
                }, Formats.prototype.onKeyDown = function(e) {
                    if (13 === e.event.which) {
                        var range = this.parent.nodeSelection.getRange(this.parent.currentDocument), startCon = 0 === range.startContainer.textContent.length || 'PRE' === range.startContainer.nodeName ? range.startContainer : range.startContainer.parentElement, endCon = 0 === range.endContainer.textContent.length || 'PRE' === range.endContainer.nodeName ? range.endContainer : range.endContainer.parentElement, preElem = (0, ej2_base /* closest */ .oq)(startCon, 'pre'), endPreElem = (0, ej2_base /* closest */ .oq)(endCon, 'pre');
                        if (((0, ej2_base /* isNullOrUndefined */ .le)(preElem) || (0, ej2_base /* isNullOrUndefined */ .le)(preElem.parentElement) || 'LI' !== preElem.parentElement.tagName) && (((0, ej2_base /* isNullOrUndefined */ .le)(preElem) && !(0, ej2_base /* isNullOrUndefined */ .le)(endPreElem) || !(0, ej2_base /* isNullOrUndefined */ .le)(preElem) && (0, ej2_base /* isNullOrUndefined */ .le)(endPreElem)) && (e.event.preventDefault(), this.deleteContent(range), this.removeCodeContent(range), range = this.parent.nodeSelection.getRange(this.parent.currentDocument), this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, endCon, 0)), 13 === e.event.which && !(0, ej2_base /* isNullOrUndefined */ .le)(preElem) && !(0, ej2_base /* isNullOrUndefined */ .le)(endPreElem))) {
                            e.event.preventDefault(), this.deleteContent(range), this.removeCodeContent(range);
                            var lastEmpty = (range = this.parent.nodeSelection.getRange(this.parent.currentDocument)).startContainer.childNodes[range.endOffset], lastBeforeBr = range.startContainer.childNodes[range.endOffset - 1], startParent = range.startContainer;
                            if (!(0, ej2_base /* isNullOrUndefined */ .le)(lastEmpty) && !(0, ej2_base /* isNullOrUndefined */ .le)(lastBeforeBr) && (0, ej2_base /* isNullOrUndefined */ .le)(lastEmpty.nextSibling) && 'BR' === lastEmpty.nodeName && 'BR' === lastBeforeBr.nodeName) this.paraFocus(range.startContainer, e.enterAction);
                            else if (8203 === startParent.textContent.charCodeAt(0) && 1 === startParent.textContent.length || 0 === startParent.textContent.length) {
                                //Double enter with any parent tag for the node
                                for(; 'PRE' !== startParent.parentElement.nodeName && (1 === startParent.textContent.length || 0 === startParent.textContent.length);)startParent = startParent.parentElement;
                                !(0, ej2_base /* isNullOrUndefined */ .le)(startParent.previousSibling) && 'BR' === startParent.previousSibling.nodeName && (0, ej2_base /* isNullOrUndefined */ .le)(startParent.nextSibling) ? this.paraFocus(startParent.parentElement) : this.isNotEndCursor(preElem, range);
                            } else //Cursor at start and middle
                            this.isNotEndCursor(preElem, range);
                        }
                    }
                }, Formats.prototype.removeCodeContent = function(range) {
                    var regEx = RegExp(String.fromCharCode(65279), 'g');
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(range.endContainer.textContent.match(regEx))) {
                        var pointer = 65279 === range.endContainer.textContent.charCodeAt(range.endOffset - 1) ? range.endOffset - 2 : range.endOffset;
                        range.endContainer.textContent = range.endContainer.textContent.replace(regEx, ''), '' === range.endContainer.textContent ? this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, range.endContainer.parentElement, 0) : this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, range.endContainer, pointer);
                    }
                }, Formats.prototype.deleteContent = function(range) {
                    (range.startContainer !== range.endContainer || range.startOffset !== range.endOffset) && range.deleteContents();
                }, Formats.prototype.paraFocus = function(referNode, enterAction) {
                    var insertTag;
                    'DIV' === enterAction ? (insertTag = (0, ej2_base /* createElement */ .az)('div')).innerHTML = '<br>' : 'BR' === enterAction ? insertTag = (0, ej2_base /* createElement */ .az)('br') : (insertTag = (0, ej2_base /* createElement */ .az)('p')).innerHTML = '<br>', this.parent.domNode.insertAfter(insertTag, referNode), this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, insertTag, 0), (0, ej2_base /* detach */ .og)(referNode.lastChild);
                }, Formats.prototype.isNotEndCursor = function(preElem, range) {
                    var nodeCutter = new NodeCutter(), isEnd = range.startOffset === preElem.lastChild.textContent.length && preElem.lastChild.textContent === range.startContainer.textContent;
                    //Cursor at start point
                    if (0 === preElem.textContent.indexOf(range.startContainer.textContent) && (0 === range.startOffset && 0 === range.endOffset || 'PRE' === range.startContainer.nodeName)) {
                        this.insertMarker(preElem, range);
                        var brTag = (0, ej2_base /* createElement */ .az)('br');
                        preElem.childNodes[range.endOffset].parentElement.insertBefore(brTag, preElem.childNodes[range.endOffset]);
                    } else {
                        //Cursor at middle
                        var cloneNode = nodeCutter.SplitNode(range, preElem, !0);
                        this.insertMarker(preElem, range);
                        var previousSib = preElem.previousElementSibling;
                        'PRE' === previousSib.tagName && (previousSib.insertAdjacentHTML('beforeend', '<br>' + cloneNode.innerHTML), (0, ej2_base /* detach */ .og)(preElem));
                    }
                    //To place the cursor position
                    this.setCursorPosition(isEnd, preElem);
                }, Formats.prototype.setCursorPosition = function(isEnd, preElem) {
                    var isEmpty = !1, markerElem = this.parent.editableElement.querySelector('.tempSpan'), mrkParentElem = markerElem.parentElement;
                    if (// eslint-disable-next-line
                    '' === markerElem.parentNode.textContent ? isEmpty = !0 : this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, markerElem, 0), isEnd) {
                        if (isEmpty) //Enter press when pre element is empty
                        mrkParentElem === preElem ? (this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, markerElem, 0), (0, ej2_base /* detach */ .og)(markerElem)) : this.focusSelectionParent(markerElem, mrkParentElem);
                        else {
                            var brElm = (0, ej2_base /* createElement */ .az)('br');
                            this.parent.domNode.insertAfter(brElm, markerElem), this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, markerElem, 0), (0, ej2_base /* detach */ .og)(markerElem);
                        }
                    } else // eslint-disable-next-line
                    isEmpty ? this.focusSelectionParent(markerElem, mrkParentElem) : (0, ej2_base /* detach */ .og)(markerElem);
                }, Formats.prototype.focusSelectionParent = function(markerElem, tempSpanPElem) {
                    (0, ej2_base /* detach */ .og)(markerElem), tempSpanPElem.innerHTML = '\u200B', this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, tempSpanPElem, 0);
                }, Formats.prototype.insertMarker = function(preElem, range) {
                    var tempSpan = (0, ej2_base /* createElement */ .az)('span', {
                        className: 'tempSpan'
                    });
                    'PRE' === range.startContainer.nodeName ? preElem.childNodes[range.endOffset].parentElement.insertBefore(tempSpan, preElem.childNodes[range.endOffset]) : range.startContainer.parentElement.insertBefore(tempSpan, range.startContainer);
                }, Formats.prototype.applyFormats = function(e) {
                    var range = this.parent.nodeSelection.getRange(this.parent.currentDocument), isSelectAll = !1;
                    this.parent.editableElement !== range.endContainer || (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.editableElement.children[range.endOffset - 1]) || 'TABLE' !== this.parent.editableElement.children[range.endOffset - 1].tagName || range.collapsed || (isSelectAll = !0);
                    var save = this.parent.nodeSelection.save(range, this.parent.currentDocument);
                    this.parent.domNode.setMarker(save);
                    var formatsNodes = this.parent.domNode.blockNodes();
                    if ('BR' === e.enterAction) {
                        this.setSelectionBRConfig();
                        var allSelectedNode = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument), selectedNodes = this.parent.nodeSelection.getSelectionNodes(allSelectedNode), currentFormatNodes = [];
                        0 === selectedNodes.length && selectedNodes.push(formatsNodes[0]);
                        for(var i = 0; i < selectedNodes.length; i++){
                            for(var currentNode = selectedNodes[i], previousCurrentNode = void 0; !this.parent.domNode.isBlockNode(currentNode) && currentNode !== this.parent.editableElement;)previousCurrentNode = currentNode, currentNode = currentNode.parentElement;
                            this.parent.domNode.isBlockNode(currentNode) && currentNode === this.parent.editableElement && currentFormatNodes.push(previousCurrentNode);
                        }
                        for(var i = 0; i < currentFormatNodes.length; i++)if (!this.parent.domNode.isBlockNode(currentFormatNodes[i])) {
                            for(var currentNode = currentFormatNodes[i], previousNode = currentNode; currentNode === this.parent.editableElement;)previousNode = currentNode, currentNode = currentNode.parentElement;
                            var tempElem = void 0;
                            this.parent.domNode.isBlockNode(previousNode.parentElement) && previousNode.parentElement === this.parent.editableElement ? (tempElem = (0, ej2_base /* createElement */ .az)('div'), previousNode.parentElement.insertBefore(tempElem, previousNode), tempElem.appendChild(previousNode)) : tempElem = previousNode;
                            for(var preNode = tempElem.previousSibling; !(0, ej2_base /* isNullOrUndefined */ .le)(preNode) && 'BR' !== preNode.nodeName && !this.parent.domNode.isBlockNode(preNode);)tempElem.firstChild.parentElement.insertBefore(preNode, tempElem.firstChild), preNode = tempElem.previousSibling;
                            (0, ej2_base /* isNullOrUndefined */ .le)(preNode) || 'BR' !== preNode.nodeName || (0, ej2_base /* detach */ .og)(preNode);
                            for(var postNode = tempElem.nextSibling; !(0, ej2_base /* isNullOrUndefined */ .le)(postNode) && 'BR' !== postNode.nodeName && !this.parent.domNode.isBlockNode(postNode);)tempElem.appendChild(postNode), postNode = tempElem.nextSibling;
                            (0, ej2_base /* isNullOrUndefined */ .le)(postNode) || 'BR' !== postNode.nodeName || (0, ej2_base /* detach */ .og)(postNode);
                        }
                        this.setSelectionBRConfig(), formatsNodes = this.parent.domNode.blockNodes();
                    }
                    for(var i = 0; i < formatsNodes.length; i++){
                        var parentNode = void 0, replaceHTML = void 0;
                        if ('blockquote' === e.subCommand.toLowerCase() ? (parentNode = this.getParentNode(formatsNodes[i]), replaceHTML = this.parent.domNode.isList(parentNode) || 'TABLE' === parentNode.tagName ? parentNode.outerHTML : parentNode.innerHTML) : replaceHTML = (parentNode = formatsNodes[i]).innerHTML, !(e.subCommand.toLowerCase() === parentNode.tagName.toLowerCase() && ('pre' !== e.subCommand.toLowerCase() || !(0, ej2_base /* isNullOrUndefined */ .le)(e.exeValue) && 'dropDownSelect' === e.exeValue.name) || (0, ej2_base /* isNullOrUndefined */ .le)(parentNode.parentNode)) && ('TABLE' !== parentNode.tagName || 'pre' !== e.subCommand.toLowerCase())) {
                            this.cleanFormats(parentNode, e.subCommand);
                            var replaceNode = 'pre' === e.subCommand.toLowerCase() && 'pre' === parentNode.tagName.toLowerCase() ? 'p' : e.subCommand, replaceTag = this.parent.domNode.createTagString(replaceNode, parentNode, replaceHTML.replace(/>\s+</g, '><'));
                            'LI' === parentNode.tagName ? (parentNode.innerHTML = '', parentNode.insertAdjacentHTML('beforeend', replaceTag)) : this.parent.domNode.replaceWith(parentNode, replaceTag);
                        }
                    }
                    this.preFormatMerge();
                    var startNode = this.parent.editableElement.querySelector('.' + markerClassName.startSelection), endNode = this.parent.editableElement.querySelector('.' + markerClassName.endSelection);
                    (0, ej2_base /* isNullOrUndefined */ .le)(startNode) || (0, ej2_base /* isNullOrUndefined */ .le)(endNode) || (startNode = startNode.lastChild, endNode = endNode.lastChild), save = this.parent.domNode.saveMarker(save, null), (0, common_util /* isIDevice */ .FA)() && (0, common_util /* setEditFrameFocus */ .ze)(this.parent.editableElement, e.selector), isSelectAll ? this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, startNode, endNode, 0, endNode.textContent.length) : save.restore(), e.callBack && e.callBack({
                        requestType: e.subCommand,
                        editorMode: 'HTML',
                        event: e.event,
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: this.parent.domNode.blockNodes()
                    });
                }, Formats.prototype.setSelectionBRConfig = function() {
                    var startElem = this.parent.editableElement.querySelector('.' + markerClassName.startSelection), endElem = this.parent.editableElement.querySelector('.' + markerClassName.endSelection);
                    (0, ej2_base /* isNullOrUndefined */ .le)(endElem) ? this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, startElem, 0) : this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, startElem, endElem, 0, 0);
                }, Formats.prototype.preFormatMerge = function() {
                    var preNodes = this.parent.editableElement.querySelectorAll('PRE');
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(preNodes)) for(var i = 0; i < preNodes.length; i++){
                        var previousSib = preNodes[i].previousElementSibling;
                        (0, ej2_base /* isNullOrUndefined */ .le)(previousSib) || 'PRE' !== previousSib.tagName || (previousSib.insertAdjacentHTML('beforeend', '<br>' + preNodes[i].innerHTML), (0, ej2_base /* detach */ .og)(preNodes[i]));
                    }
                }, Formats.prototype.cleanFormats = function(element, tagName) {
                    var ignoreAttr = [
                        'display',
                        'font-size',
                        'margin-top',
                        'margin-bottom',
                        'margin-left',
                        'margin-right',
                        'font-weight'
                    ];
                    tagName = tagName.toLowerCase();
                    for(var i = 0; i < ignoreAttr.length && 'p' !== tagName && 'blockquote' !== tagName && 'pre' !== tagName; i++)element.style.removeProperty(ignoreAttr[i]);
                }, Formats;
            }(), InsertHtml = /** @class */ function() {
                function InsertHtml() {}
                return InsertHtml.Insert = function(docElement, insertNode, editNode, isExternal) {
                    if ('string' == typeof insertNode) {
                        var node, divNode = document.createElement('div');
                        divNode.innerHTML = insertNode, node = isExternal ? divNode : divNode.firstChild;
                    } else if (isExternal && !(!(0, ej2_base /* isNullOrUndefined */ .le)(insertNode) && !(0, ej2_base /* isNullOrUndefined */ .le)(insertNode.classList) && insertNode.classList.contains('pasteContent'))) {
                        var divNode = document.createElement('div');
                        divNode.appendChild(insertNode), node = divNode;
                    } else node = insertNode;
                    var nodeSelection = new selection /* NodeSelection */ .q(), nodeCutter = new NodeCutter(), range = nodeSelection.getRange(docElement);
                    if (range.startContainer === editNode && range.startContainer === range.endContainer && 0 === range.startOffset && range.startOffset === range.endOffset && 0 === editNode.textContent.length && 'P' === editNode.children[0].tagName && (nodeSelection.setSelectionText(docElement, range.startContainer.children[0], range.startContainer.children[0], 0, 0), range = nodeSelection.getRange(docElement)), 'BR' === range.startContainer.nodeName && 0 === range.startOffset && range.startOffset === range.endOffset && range.startContainer === range.endContainer) {
                        var currentIndex = Array.prototype.slice.call(range.startContainer.parentElement.children).indexOf(range.startContainer);
                        nodeSelection.setSelectionText(docElement, range.startContainer.parentElement, range.startContainer.parentElement, currentIndex + 1, currentIndex + 1), range = nodeSelection.getRange(docElement);
                    }
                    var isCursor = range.startOffset === range.endOffset && 0 === range.startOffset && range.startContainer === range.endContainer, isCollapsed = range.collapsed, nodes = this.getNodeCollection(range, nodeSelection, node), closestParentNode = 'table' === node.nodeName.toLowerCase() ? this.closestEle(nodes[0].parentNode, editNode) : nodes[0];
                    if (isExternal || !(0, ej2_base /* isNullOrUndefined */ .le)(node) && !(0, ej2_base /* isNullOrUndefined */ .le)(node.classList) && node.classList.contains('pasteContent')) {
                        this.pasteInsertHTML(nodes, node, range, nodeSelection, nodeCutter, docElement, isCollapsed, closestParentNode, editNode);
                        return;
                    }
                    if (editNode === range.startContainer || (isCollapsed || closestParentNode.nodeType === Node.ELEMENT_NODE && -1 !== TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase())) && ('table' !== node.nodeName.toLowerCase() || !closestParentNode || -1 !== TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase()))) {
                        if (range.deleteContents(), isCursor && '' === range.startContainer.textContent && 'BR' !== range.startContainer.nodeName && (range.startContainer.innerHTML = ''), ej2_base /* Browser.isIE */ .AR.isIE) {
                            var frag = docElement.createDocumentFragment();
                            frag.appendChild(node), range.insertNode(frag);
                        } else if (1 === range.startContainer.nodeType && 'hr' === range.startContainer.nodeName.toLowerCase() && 'hr' === range.endContainer.nodeName.toLowerCase()) {
                            var paraElem = range.startContainer.nextElementSibling;
                            paraElem && (paraElem.querySelector('br') && (0, ej2_base /* detach */ .og)(paraElem.querySelector('br')), paraElem.appendChild(node));
                        } else 'BR' === range.startContainer.nodeName ? range.startContainer.parentElement.insertBefore(node, range.startContainer) : range.insertNode(node);
                        3 !== node.nodeType && node.childNodes.length > 0 ? nodeSelection.setSelectionText(docElement, node, node, 1, 1) : 'IMG' === node.nodeName ? this.imageFocus(node, nodeSelection, docElement) : 3 !== node.nodeType ? nodeSelection.setSelectionContents(docElement, node) : nodeSelection.setSelectionText(docElement, node, node, node.textContent.length, node.textContent.length);
                    } else {
                        var preNode = nodeCutter.GetSpliceNode(range, closestParentNode), sibNode = preNode.previousSibling, parentNode = preNode.parentNode;
                        if (1 === nodes.length || 'table' === node.nodeName.toLowerCase() && 0 === preNode.childElementCount) nodeSelection.setSelectionContents(docElement, preNode), range = nodeSelection.getRange(docElement);
                        else {
                            var lasNode = nodeCutter.GetSpliceNode(range, nodes[nodes.length - 1].parentElement);
                            lasNode = (0, ej2_base /* isNullOrUndefined */ .le)(lasNode) ? preNode : lasNode, nodeSelection.setSelectionText(docElement, preNode, lasNode, 0, 3 === lasNode.nodeType ? lasNode.textContent.length : lasNode.childNodes.length), range = nodeSelection.getRange(docElement);
                        }
                        range.extractContents(), 'TABLE' === insertNode.tagName && this.removeEmptyElements(editNode);
                        for(var index = 0; index < nodes.length; index++)if (3 !== nodes[index].nodeType && null != nodes[index].parentNode) {
                            if ('IMG' === nodes[index].nodeName) continue;
                            nodes[index].parentNode.removeChild(nodes[index]);
                        }
                        if (sibNode) InsertMethods.AppendBefore(node, sibNode, !0);
                        else {
                            for(var previousNode = null; parentNode !== editNode && parentNode.firstChild && '' === parentNode.textContent.trim();){
                                var parentNode1 = parentNode.parentNode;
                                previousNode = parentNode, parentNode = parentNode1;
                            }
                            null !== previousNode && (parentNode = previousNode), parentNode.firstChild && (parentNode !== editNode || 'TABLE' === node.nodeName && isCursor && parentNode === range.startContainer && parentNode === range.endContainer) ? '' === parentNode.textContent.trim() && parentNode !== editNode ? (InsertMethods.AppendBefore(node, parentNode, !1), (0, ej2_base /* detach */ .og)(parentNode)) : InsertMethods.AppendBefore(node, parentNode.firstChild, !1) : parentNode.appendChild(node);
                        }
                        'IMG' === node.nodeName ? this.imageFocus(node, nodeSelection, docElement) : 3 !== node.nodeType ? nodeSelection.setSelectionText(docElement, node, node, 0, node.childNodes.length) : nodeSelection.setSelectionText(docElement, node, node, 0, node.textContent.length);
                    }
                }, InsertHtml.pasteInsertHTML = function(nodes, node, range, nodeSelection, nodeCutter, docElement, isCollapsed, closestParentNode, editNode) {
                    var lasNode, sibNode, isSingleNode, preNode, lastSelectionNode, isCursor = range.startOffset === range.endOffset && range.startContainer === range.endContainer;
                    if (isCursor && range.startContainer === editNode && '' === editNode.textContent) {
                        var currentBlockNode = this.getImmediateBlockNode(nodes[nodes.length - 1], editNode);
                        nodeSelection.setSelectionText(docElement, currentBlockNode, currentBlockNode, 0, 0), range = nodeSelection.getRange(docElement);
                    }
                    editNode === range.startContainer || (isCollapsed || closestParentNode.nodeType === Node.ELEMENT_NODE && -1 !== TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase())) && ('table' !== node.nodeName.toLowerCase() || !closestParentNode || -1 !== TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase())) || (preNode = nodeCutter.GetSpliceNode(range, closestParentNode), sibNode = (0, ej2_base /* isNullOrUndefined */ .le)(preNode.previousSibling) ? preNode.parentNode.previousSibling : preNode.previousSibling, 1 === nodes.length ? (nodeSelection.setSelectionContents(docElement, preNode), range = nodeSelection.getRange(docElement), isSingleNode = !0) : (lasNode = nodeCutter.GetSpliceNode(range, nodes[nodes.length - 1].parentElement), lasNode = (0, ej2_base /* isNullOrUndefined */ .le)(lasNode) ? preNode : lasNode, nodeSelection.setSelectionText(docElement, preNode, lasNode, 0, 3 === lasNode.nodeType ? lasNode.textContent.length : lasNode.childNodes.length), range = nodeSelection.getRange(docElement), isSingleNode = !1));
                    var containsBlockNode = !1;
                    this.removingComments(node);
                    for(var allChildNodes = node.childNodes, i = 0; i < allChildNodes.length; i++)if (BLOCK_TAGS.indexOf(allChildNodes[i].nodeName.toLocaleLowerCase()) >= 0) {
                        containsBlockNode = !0;
                        break;
                    }
                    var fragment = document.createDocumentFragment();
                    if (containsBlockNode) {
                        this.insertTempNode(range, node, nodes, nodeCutter, editNode);
                        var isFirstTextNode = !0, isPreviousInlineElem = void 0, paraElm = void 0, previousParent = void 0;
                        for(this.contentsDeleted || range.deleteContents(); node.firstChild;){
                            if ('#text' === node.firstChild.nodeName && '' === node.firstChild.textContent.trim()) {
                                (0, ej2_base /* detach */ .og)(node.firstChild);
                                continue;
                            }
                            if ('#text' === node.firstChild.nodeName && isFirstTextNode || this.inlineNode.indexOf(node.firstChild.nodeName.toLocaleLowerCase()) >= 0 && isFirstTextNode) {
                                if (lastSelectionNode = node.firstChild, (0, ej2_base /* isNullOrUndefined */ .le)(node.previousElementSibling)) {
                                    var firstParaElm = (0, ej2_base /* createElement */ .az)('p');
                                    node.parentElement.insertBefore(firstParaElm, node);
                                }
                                node.previousElementSibling.appendChild(node.firstChild);
                            } else lastSelectionNode = node.firstChild, '#text' === node.firstChild.nodeName || this.inlineNode.indexOf(node.firstChild.nodeName.toLocaleLowerCase()) >= 0 ? (isPreviousInlineElem ? (previousParent.appendChild(node.firstChild), fragment.appendChild(previousParent)) : ((paraElm = (0, ej2_base /* createElement */ .az)('p')).appendChild(node.firstChild), fragment.appendChild(paraElm)), previousParent = paraElm, isPreviousInlineElem = !0) : (fragment.appendChild(node.firstChild), isPreviousInlineElem = !1), isFirstTextNode = !1;
                        }
                        node.parentNode.replaceChild(fragment, node);
                    } else if (isCursor) {
                        var tempSpan = (0, ej2_base /* createElement */ .az)('span', {
                            className: 'tempSpan'
                        }), nearestAnchor = (0, ej2_base /* closest */ .oq)(range.startContainer.parentElement, 'a');
                        if (3 === range.startContainer.nodeType && nearestAnchor && (0, ej2_base /* closest */ .oq)(nearestAnchor, 'span')) {
                            var immediateBlockNode = this.getImmediateBlockNode(range.startContainer, editNode);
                            immediateBlockNode.querySelectorAll('br').length > 0 && (0, ej2_base /* detach */ .og)(immediateBlockNode.querySelector('br')), (0, ej2_base /* closest */ .oq)(nearestAnchor, 'span').appendChild(tempSpan);
                        } else range.insertNode(tempSpan);
                        for(; node.firstChild;)lastSelectionNode = node.firstChild, fragment.appendChild(node.firstChild);
                        tempSpan.parentNode.replaceChild(fragment, tempSpan);
                    } else {
                        for(; node.firstChild;)lastSelectionNode = node.firstChild, fragment.appendChild(node.firstChild);
                        isSingleNode ? preNode.parentNode.replaceChild(fragment, preNode) : (range.deleteContents(), (0, ej2_base /* detach */ .og)(lasNode), // eslint-disable-next-line
                        (0, ej2_base /* isNullOrUndefined */ .le)(sibNode) ? editNode.appendChild(fragment) : sibNode.parentNode.appendChild(fragment));
                    }
                    '#text' === lastSelectionNode.nodeName ? this.placeCursorEnd(lastSelectionNode, node, nodeSelection, docElement, editNode) : this.cursorPos(lastSelectionNode, node, nodeSelection, docElement, editNode);
                }, InsertHtml.placeCursorEnd = function(lastSelectionNode, node, nodeSelection, docElement, editNode) {
                    for(lastSelectionNode = 'BR' === lastSelectionNode.nodeName ? (0, ej2_base /* isNullOrUndefined */ .le)(lastSelectionNode.previousSibling) ? lastSelectionNode.parentNode : lastSelectionNode.previousSibling : lastSelectionNode; !(0, ej2_base /* isNullOrUndefined */ .le)(lastSelectionNode) && '#text' !== lastSelectionNode.nodeName && 'IMG' !== lastSelectionNode.nodeName && 'BR' !== lastSelectionNode.nodeName && 'HR' !== lastSelectionNode.nodeName;)lastSelectionNode = lastSelectionNode.lastChild;
                    'IMG' === (lastSelectionNode = (0, ej2_base /* isNullOrUndefined */ .le)(lastSelectionNode) ? node : lastSelectionNode).nodeName ? this.imageFocus(lastSelectionNode, nodeSelection, docElement) : nodeSelection.setSelectionText(docElement, lastSelectionNode, lastSelectionNode, lastSelectionNode.textContent.length, lastSelectionNode.textContent.length), this.removeEmptyElements(editNode);
                }, InsertHtml.getNodeCollection = function(range, nodeSelection, node) {
                    var nodes = [];
                    return range.startOffset === range.endOffset && range.startContainer === range.endContainer && 'BR' != range.startContainer.nodeName && range.startContainer.childNodes.length > 0 && ('TD' === range.startContainer.nodeName || 3 !== range.startContainer.nodeType && node.classList && node.classList.contains('pasteContent')) ? nodes.push(range.startContainer.childNodes[range.endOffset]) : nodes = nodeSelection.getInsertNodeCollection(range), nodes;
                }, InsertHtml.insertTempNode = function(range, node, nodes, nodeCutter, editNode) {
                    if (range.startContainer !== editNode || (0, ej2_base /* isNullOrUndefined */ .le)(range.startContainer.childNodes[range.endOffset - 1]) || 'TABLE' !== range.startContainer.childNodes[range.endOffset - 1].nodeName) {
                        if (range.startContainer !== editNode || (0, ej2_base /* isNullOrUndefined */ .le)(range.startContainer.childNodes[range.endOffset]) || 'TABLE' !== range.startContainer.childNodes[range.endOffset].nodeName) {
                            if (range.startContainer === range.endContainer && 3 !== range.startContainer.nodeType && 'HR' === node.firstChild.nodeName) range.startContainer.classList.contains('e-content') || 'BODY' === range.startContainer.nodeName ? range.startContainer.appendChild(node) : range.startContainer.parentNode.insertBefore(node, range.startContainer);
                            else {
                                var blockNode = this.getImmediateBlockNode(nodes[nodes.length - 1], editNode);
                                if (((0, ej2_base /* isNullOrUndefined */ .le)(blockNode) || (0, ej2_base /* isNullOrUndefined */ .le)(blockNode.parentElement)) && 3 !== range.endContainer.nodeType && (blockNode = range.endContainer, range.setEnd(blockNode, range.endContainer.textContent.length)), 'BODY' === blockNode.nodeName && range.startContainer === range.endContainer && 1 === range.startContainer.nodeType && (blockNode = range.startContainer), blockNode.closest('LI') && node && node.firstElementChild && ('OL' === node.firstElementChild.tagName || 'UL' === node.firstElementChild.tagName)) for(var liNode = void 0; node.firstElementChild.lastElementChild && 'LI' === node.firstElementChild.lastElementChild.tagName;)(liNode = node.firstElementChild.lastElementChild).style.removeProperty('margin-left'), liNode.style.removeProperty('margin-top'), liNode.style.removeProperty('margin-bottom'), node.firstElementChild.insertAdjacentElement('afterend', liNode);
                                if ('TD' === blockNode.nodeName || 'TH' === blockNode.nodeName || 'TR' === blockNode.nodeName) {
                                    var tempSpan = (0, ej2_base /* createElement */ .az)('span', {
                                        className: 'tempSpan'
                                    });
                                    range.insertNode(tempSpan), tempSpan.parentNode.replaceChild(node, tempSpan);
                                } else {
                                    var nodeSelection = new selection /* NodeSelection */ .q(), currentNode = this.getNodeCollection(range, nodeSelection, node)[this.getNodeCollection(range, nodeSelection, node).length - 1], splitedElm = void 0;
                                    if ('BR' !== currentNode.nodeName && 'HR' !== currentNode.nodeName && ('#text' !== currentNode.nodeName || (0, ej2_base /* isNullOrUndefined */ .le)(currentNode.parentElement) || 'LI' !== currentNode.parentElement.nodeName) || (0, ej2_base /* isNullOrUndefined */ .le)(currentNode.parentElement) || 0 !== currentNode.parentElement.textContent.trim().length) {
                                        if ('#text' === currentNode.nodeName && !(0, ej2_base /* isNullOrUndefined */ .le)(currentNode.parentElement) && 'LI' === currentNode.parentElement.nodeName && currentNode.parentElement.textContent.trim().length > 0) {
                                            splitedElm = currentNode, 'LI' !== currentNode.parentElement.nodeName || (0, ej2_base /* isNullOrUndefined */ .le)(currentNode.nextSibling) || 'BR' !== currentNode.nextSibling.nodeName || (0, ej2_base /* detach */ .og)(currentNode.nextSibling), range.collapsed || range.deleteContents(), range.insertNode(node), this.contentsDeleted = !0;
                                            return;
                                        }
                                        splitedElm = nodeCutter.GetSpliceNode(range, blockNode);
                                    } else splitedElm = currentNode, 'LI' !== currentNode.parentElement.nodeName || (0, ej2_base /* isNullOrUndefined */ .le)(currentNode.nextSibling) || 'BR' !== currentNode.nextSibling.nodeName || (0, ej2_base /* detach */ .og)(currentNode.nextSibling);
                                    splitedElm.parentNode.replaceChild(node, splitedElm);
                                }
                            }
                        } else range.startContainer.insertBefore(node, range.startContainer.childNodes[range.endOffset]);
                    } else (0, ej2_base /* isNullOrUndefined */ .le)(range.startContainer.childNodes[range.endOffset - 1].nextSibling) ? range.startContainer.appendChild(node) : range.startContainer.insertBefore(node, range.startContainer.childNodes[range.endOffset - 1].nextSibling);
                }, InsertHtml.cursorPos = function(lastSelectionNode, node, nodeSelection, docElement, editNode) {
                    lastSelectionNode.classList.add('lastNode'), editNode.innerHTML = (0, common_util /* updateTextNode */ .Hl)(editNode.innerHTML), lastSelectionNode = editNode.querySelector('.lastNode'), (0, ej2_base /* isNullOrUndefined */ .le)(lastSelectionNode) || (this.placeCursorEnd(lastSelectionNode, node, nodeSelection, docElement, editNode), lastSelectionNode.classList.remove('lastNode'), 0 === lastSelectionNode.classList.length && lastSelectionNode.removeAttribute('class'));
                }, InsertHtml.imageFocus = function(node, nodeSelection, docElement) {
                    var focusNode = document.createTextNode(' ');
                    node.parentNode.insertBefore(focusNode, node.nextSibling), nodeSelection.setSelectionText(docElement, node.nextSibling, node.nextSibling, 0, 0);
                }, // eslint-disable-next-line
                InsertHtml.getImmediateBlockNode = function(node, editNode) {
                    do node = node.parentNode;
                    while (node && 0 > BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()))
                    return node;
                }, InsertHtml.removingComments = function(elm) {
                    var innerElement = elm.innerHTML;
                    innerElement = innerElement.replace(/<!--[\s\S]*?-->/g, ''), elm.innerHTML = innerElement;
                }, InsertHtml.findDetachEmptyElem = function(element) {
                    return (0, ej2_base /* isNullOrUndefined */ .le)(element.parentElement) ? null : '' === element.parentElement.textContent.trim() && 'true' !== element.parentElement.contentEditable ? this.findDetachEmptyElem(element.parentElement) : element;
                }, InsertHtml.removeEmptyElements = function(element) {
                    for(var emptyElements = element.querySelectorAll(':empty'), i = 0; i < emptyElements.length; i++)if (0 > SELF_CLOSING_TAGS.indexOf(emptyElements[i].tagName.toLowerCase())) {
                        var detachableElement = this.findDetachEmptyElem(emptyElements[i]);
                        (0, ej2_base /* isNullOrUndefined */ .le)(detachableElement) || (0, ej2_base /* detach */ .og)(detachableElement);
                    }
                }, InsertHtml.closestEle = function(element, editNode) {
                    for(var el = element; el && 1 === el.nodeType;){
                        if (el.parentNode === editNode || !(0, ej2_base /* isNullOrUndefined */ .le)(el.parentNode.tagName) && -1 !== IGNORE_BLOCK_TAGS.indexOf(el.parentNode.tagName.toLocaleLowerCase())) return el;
                        el = el.parentNode;
                    }
                    return null;
                }, /**
     * Insert method
     *
     * @hidden

     */ InsertHtml.inlineNode = [
                    'a',
                    'abbr',
                    'acronym',
                    'audio',
                    'b',
                    'bdi',
                    'bdo',
                    'big',
                    'br',
                    'button',
                    'canvas',
                    'cite',
                    'code',
                    'data',
                    'datalist',
                    'del',
                    'dfn',
                    'em',
                    'embed',
                    'font',
                    'i',
                    'iframe',
                    'img',
                    'input',
                    'ins',
                    'kbd',
                    'label',
                    'map',
                    'mark',
                    'meter',
                    'noscript',
                    'object',
                    'output',
                    'picture',
                    'progress',
                    'q',
                    'ruby',
                    's',
                    'samp',
                    'script',
                    'select',
                    'slot',
                    'small',
                    'span',
                    'strong',
                    'sub',
                    'sup',
                    'svg',
                    'template',
                    'textarea',
                    'time',
                    'u',
                    'tt',
                    'var',
                    'video',
                    'wbr'
                ], InsertHtml.contentsDeleted = !1, InsertHtml;
            }(), LinkCommand = /** @class */ function() {
                /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the editor manager
     * @hidden

     */ function LinkCommand(parent) {
                    this.parent = parent, this.addEventListener();
                }
                return LinkCommand.prototype.addEventListener = function() {
                    this.parent.observer.on(LINK, this.linkCommand, this);
                }, LinkCommand.prototype.linkCommand = function(e) {
                    switch(e.value.toString().toLocaleLowerCase()){
                        case 'createlink':
                        case 'editlink':
                            this.createLink(e);
                            break;
                        case 'openlink':
                            this.openLink(e);
                            break;
                        case 'removelink':
                            this.removeLink(e);
                    }
                }, LinkCommand.prototype.createLink = function(e) {
                    var closestAnchor = !(0, ej2_base /* isNullOrUndefined */ .le)(e.item.selectParent) && e.item.selectParent.length > 0 && (0, ej2_base /* closest */ .oq)(e.item.selectParent[0], 'a');
                    if (closestAnchor = (0, ej2_base /* isNullOrUndefined */ .le)(closestAnchor) ? !(0, ej2_base /* isNullOrUndefined */ .le)(e.item.selectParent) && e.item.selectParent.length > 0 ? e.item.selectParent[0] : null : closestAnchor, (0, ej2_base /* isNullOrUndefined */ .le)(closestAnchor) || 'A' !== closestAnchor.tagName) {
                        var domSelection = new selection /* NodeSelection */ .q(), range = domSelection.getRange(this.parent.currentDocument);
                        '#text' === range.endContainer.nodeName && range.startContainer.textContent.length === range.endOffset + 1 && ' ' === range.endContainer.textContent.charAt(range.endOffset) && 'A' === range.endContainer.nextSibling.nodeName && (domSelection.setSelectionText(this.parent.currentDocument, range.startContainer, range.endContainer, range.startOffset, range.endOffset + 1), range = domSelection.getRange(this.parent.currentDocument));
                        var text = !!(0, ej2_base /* isNullOrUndefined */ .le)(e.item.text) || 0 > e.item.text.replace(/ /g, '').localeCompare(range.toString().replace(/\n/g, ' ').replace(/ /g, ''));
                        if (e.event && 'keydown' === e.event.type && (32 === e.event.keyCode || 13 === e.event.keyCode) || 'Paste' === e.item.action || range.collapsed || text) {
                            var anchor = this.createAchorNode(e);
                            if (anchor.innerText = '' === e.item.text ? e.item.url : e.item.text, e.item.selection.restore(), InsertHtml.Insert(this.parent.currentDocument, anchor, this.parent.editableElement), e.event && 'keydown' === e.event.type && (32 === e.event.keyCode || 13 === e.event.keyCode)) {
                                var startContainer = e.item.selection.range.startContainer;
                                startContainer.textContent = this.removeText(startContainer.textContent, e.item.text);
                            } else {
                                var startIndex = 'Paste' === e.item.action ? anchor.childNodes[0].textContent.length : 0;
                                e.item.selection.setSelectionText(this.parent.currentDocument, anchor.childNodes[0], anchor.childNodes[0], startIndex, anchor.childNodes[0].textContent.length);
                            }
                        } else this.createLinkNode(e);
                    } else {
                        var anchorEle = closestAnchor, linkText = '';
                        if ((0, ej2_base /* isNullOrUndefined */ .le)(e.item.url) || anchorEle.setAttribute('href', e.item.url), (0, ej2_base /* isNullOrUndefined */ .le)(e.item.title) || anchorEle.setAttribute('title', e.item.title), (0, ej2_base /* isNullOrUndefined */ .le)(e.item.text) || '' === e.item.text || (linkText = anchorEle.innerText, anchorEle.innerText = e.item.text), (0, ej2_base /* isNullOrUndefined */ .le)(e.item.target) ? anchorEle.removeAttribute('target') : anchorEle.setAttribute('target', e.item.target), linkText === e.item.text) e.item.selection.setSelectionText(this.parent.currentDocument, anchorEle, anchorEle, 1, 1), e.item.selection.restore();
                        else {
                            var startIndex = 'Paste' === e.item.action ? anchorEle.childNodes[0].textContent.length : 0;
                            e.item.selection.setSelectionText(this.parent.currentDocument, anchorEle.childNodes[0], anchorEle.childNodes[0], startIndex, anchorEle.childNodes[0].textContent.length);
                        }
                    }
                    e.callBack && e.callBack({
                        requestType: 'Links',
                        editorMode: 'HTML',
                        event: e.event,
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                    });
                }, LinkCommand.prototype.createLinkNode = function(e) {
                    for(var currentNode, cloneNode, domSelection = new selection /* NodeSelection */ .q(), nodeCutter = new NodeCutter(), range = domSelection.getRange(this.parent.currentDocument), nodes = this.getSelectionNodes(domSelection.getNodeCollection(range)), save = domSelection.save(range, this.parent.currentDocument), txtArray = [], inlineNodes = [], removeNodes = [], anchorNodes = [], finalinlineNodes = [], index = 0; index < nodes.length; index++)nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]), txtArray[index] = nodes[index];
                    for(var i = 0; i < txtArray.length; i++){
                        var check = !0;
                        for(currentNode = txtArray[i]; !0 === check;){
                            if ('A' === currentNode.parentNode.nodeName) {
                                var anchorEle = currentNode.parentNode;
                                currentNode.parentNode.parentNode.insertBefore(anchorEle.firstChild, anchorEle), currentNode.parentNode.removeChild(anchorEle);
                            }
                            this.isBlockNode(currentNode.parentNode) || 0 === txtArray.length || 0 === i || i === txtArray.length - 1 || 3 === range.startContainer.nodeType ? (inlineNodes[i] = currentNode, check = !1) : currentNode = currentNode.parentNode;
                        }
                    }
                    for(var i = 0, j_1 = 0; i < inlineNodes.length; i++)if (0 === i && (finalinlineNodes[j_1] = inlineNodes[i]), inlineNodes.length > 1 && i < inlineNodes.length - 1) {
                        if (inlineNodes[i].parentElement === inlineNodes[i + 1].parentElement && inlineNodes[i] === inlineNodes[i + 1]) continue;
                        finalinlineNodes[j_1 + 1] = inlineNodes[i + 1], j_1++;
                    }
                    var j = 0;
                    anchorNodes[0] = this.createAchorNode(e);
                    for(var i = 0; i < finalinlineNodes.length; i++)if (0 === i && (cloneNode = finalinlineNodes[i].cloneNode(!0), anchorNodes[i].appendChild(cloneNode)), i < finalinlineNodes.length - 1) {
                        if (finalinlineNodes[i].parentNode === finalinlineNodes[i + 1].parentNode) {
                            var cln = finalinlineNodes[i + 1].cloneNode(!0);
                            anchorNodes[j].appendChild(cln);
                        } else anchorNodes[j += 1] = this.createAchorNode(e), cloneNode = finalinlineNodes[i + 1].cloneNode(!0), anchorNodes[j].appendChild(cloneNode);
                    }
                    this.parent.nodeSelection.setRange(document, save.range);
                    for(var i = 0, j_2 = 0, k = 0; i <= finalinlineNodes.length; i++)0 === i && (finalinlineNodes[i].parentNode.insertBefore(anchorNodes[j_2], finalinlineNodes[i].nextSibling), 1 === this.parent.domNode.blockNodes().length && this.parent.nodeSelection.setSelectionNode(this.parent.currentDocument, anchorNodes[j_2]), removeNodes[k] = finalinlineNodes[i], k++), i < finalinlineNodes.length - 1 && (finalinlineNodes[i].parentNode === finalinlineNodes[i + 1].parentNode || (j_2 += 1, finalinlineNodes[i + 1].parentNode.insertBefore(anchorNodes[j_2], finalinlineNodes[i + 1])), removeNodes[k] = finalinlineNodes[i + 1], k++);
                    for(var i = 0; i < removeNodes.length; i++)removeNodes[i].parentNode && removeNodes[i].parentNode.removeChild(removeNodes[i]);
                }, LinkCommand.prototype.createAchorNode = function(e) {
                    var anchorEle = (0, ej2_base /* createElement */ .az)('a', {
                        className: 'e-rte-anchor',
                        attrs: {
                            href: e.item.url,
                            title: (0, ej2_base /* isNullOrUndefined */ .le)(e.item.title) || '' === e.item.title ? e.item.url : e.item.title
                        }
                    });
                    return (0, ej2_base /* isNullOrUndefined */ .le)(e.item.target) || anchorEle.setAttribute('target', e.item.target), anchorEle;
                }, LinkCommand.prototype.getSelectionNodes = function(nodeCollection) {
                    nodeCollection = nodeCollection.reverse();
                    for(var index = 0; index < nodeCollection.length; index++)(3 !== nodeCollection[index].nodeType || '' === nodeCollection[index].textContent.trim()) && 'IMG' !== nodeCollection[index].nodeName && (nodeCollection.splice(index, 1), index--);
                    return nodeCollection.reverse();
                }, LinkCommand.prototype.isBlockNode = function(element) {
                    return !!element && element.nodeType === Node.ELEMENT_NODE && BLOCK_TAGS.indexOf(element.tagName.toLowerCase()) >= 0;
                }, LinkCommand.prototype.removeText = function(text, val) {
                    for(var arr = text.split(' '), i = 0; i < arr.length; i++)arr[i] === val && (arr.splice(i, 1), i--);
                    return arr.join(' ') + ' ';
                }, LinkCommand.prototype.openLink = function(e) {
                    document.defaultView.open(e.item.url, e.item.target), this.callBack(e);
                }, LinkCommand.prototype.removeLink = function(e) {
                    var blockNodes = this.parent.domNode.blockNodes();
                    if (blockNodes.length < 2) {
                        this.parent.domNode.setMarker(e.item.selection);
                        for(var closestAnchor = (0, ej2_base /* closest */ .oq)(e.item.selectParent[0], 'a'), selectParent = closestAnchor || e.item.selectParent[0], parent_1 = selectParent.parentNode, child = []; selectParent.firstChild;)child.push(parent_1.insertBefore(selectParent.firstChild, selectParent));
                        parent_1.removeChild(selectParent), child && 1 === child.length && (e.item.selection.startContainer = e.item.selection.getNodeArray(child[child.length - 1], !0), e.item.selection.endContainer = e.item.selection.startContainer), e.item.selection = this.parent.domNode.saveMarker(e.item.selection);
                    } else for(var i = 0; i < blockNodes.length; i++)for(var linkNode = blockNodes[i].querySelectorAll('a'), j = 0; j < linkNode.length; j++)document.getSelection().containsNode(linkNode[j], !0) && (linkNode[j].outerHTML = linkNode[j].innerHTML);
                    e.item.selection.restore(), this.callBack(e);
                }, LinkCommand.prototype.callBack = function(e) {
                    e.callBack && e.callBack({
                        requestType: e.item.subCommand,
                        editorMode: 'HTML',
                        event: e.event,
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                    });
                }, LinkCommand;
            }(), Alignments = /** @class */ function() {
                /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the parent element.
     * @returns {void}
     * @hidden

     */ function Alignments(parent) {
                    this.alignments = {
                        JustifyLeft: 'left',
                        JustifyCenter: 'center',
                        JustifyRight: 'right',
                        JustifyFull: 'justify'
                    }, this.parent = parent, this.addEventListener();
                }
                return Alignments.prototype.addEventListener = function() {
                    this.parent.observer.on(ALIGNMENT_TYPE, this.applyAlignment, this), this.parent.observer.on(common_constant /* KEY_DOWN_HANDLER */ .kT, this.onKeyDown, this);
                }, Alignments.prototype.onKeyDown = function(e) {
                    switch(e.event.action){
                        case 'justify-center':
                            this.applyAlignment({
                                subCommand: 'JustifyCenter',
                                callBack: e.callBack
                            }), e.event.preventDefault();
                            break;
                        case 'justify-full':
                            this.applyAlignment({
                                subCommand: 'JustifyFull',
                                callBack: e.callBack
                            }), e.event.preventDefault();
                            break;
                        case 'justify-left':
                            this.applyAlignment({
                                subCommand: 'JustifyLeft',
                                callBack: e.callBack
                            }), e.event.preventDefault();
                            break;
                        case 'justify-right':
                            this.applyAlignment({
                                subCommand: 'JustifyRight',
                                callBack: e.callBack
                            }), e.event.preventDefault();
                    }
                }, Alignments.prototype.getTableNode = function(range) {
                    var startNode = range.startContainer.nodeType === Node.ELEMENT_NODE ? range.startContainer : range.startContainer.parentNode;
                    return [
                        (0, ej2_base /* closest */ .oq)(startNode, 'td,th')
                    ];
                }, Alignments.prototype.applyAlignment = function(e) {
                    var isTableAlign = 'Table' === e.value, range = this.parent.nodeSelection.getRange(this.parent.currentDocument), save = this.parent.nodeSelection.save(range, this.parent.currentDocument);
                    if (isTableAlign) (0, ej2_base /* setStyleAttribute */ .V7)(this.getTableNode(range)[0], {
                        'text-align': this.alignments[e.subCommand]
                    });
                    else {
                        this.parent.domNode.setMarker(save);
                        for(var alignmentNodes = this.parent.domNode.blockNodes(), i = 0; i < alignmentNodes.length; i++){
                            var parentNode = alignmentNodes[i];
                            (0, ej2_base /* setStyleAttribute */ .V7)(parentNode, {
                                'text-align': this.alignments[e.subCommand]
                            });
                        }
                        for(var imageTags = this.parent.domNode.getImageTagInSelection(), i = 0; i < imageTags.length; i++){
                            var elementNode = [];
                            elementNode.push(imageTags[i]), this.parent.imgObj.imageCommand({
                                item: {
                                    selectNode: elementNode
                                },
                                subCommand: e.subCommand,
                                value: e.subCommand,
                                callBack: e.callBack,
                                selector: e.selector
                            });
                        }
                        this.parent.editableElement.focus(), save = this.parent.domNode.saveMarker(save), (0, common_util /* isIDevice */ .FA)() && (0, common_util /* setEditFrameFocus */ .ze)(this.parent.editableElement, e.selector), save.restore();
                    }
                    e.callBack && e.callBack({
                        requestType: e.subCommand,
                        editorMode: 'HTML',
                        event: e.event,
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: isTableAlign ? this.getTableNode(range) : this.parent.domNode.blockNodes()
                    });
                }, Alignments;
            }(), Indents = /** @class */ function() {
                /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the parent element
     * @hidden

     */ function Indents(parent) {
                    this.indentValue = 20, this.parent = parent, this.addEventListener();
                }
                return Indents.prototype.addEventListener = function() {
                    this.parent.observer.on(INDENT_TYPE, this.applyIndents, this), this.parent.observer.on(common_constant /* KEY_DOWN_HANDLER */ .kT, this.onKeyDown, this);
                }, Indents.prototype.onKeyDown = function(e) {
                    switch(e.event.action){
                        case 'indents':
                            this.applyIndents({
                                subCommand: 'Indent',
                                callBack: e.callBack
                            }), e.event.preventDefault();
                            break;
                        case 'outdents':
                            this.applyIndents({
                                subCommand: 'Outdent',
                                callBack: e.callBack
                            }), e.event.preventDefault();
                    }
                }, Indents.prototype.applyIndents = function(e) {
                    var editEle = this.parent.editableElement, isRtl = editEle.classList.contains('e-rtl'), range = this.parent.nodeSelection.getRange(this.parent.currentDocument), save = this.parent.nodeSelection.save(range, this.parent.currentDocument);
                    this.parent.domNode.setMarker(save);
                    for(var indentsNodes = this.parent.domNode.blockNodes(), parentNodes = indentsNodes.slice(), listsNodes = [], i = 0; i < parentNodes.length; i++)'LI' !== parentNodes[i].tagName && 'LI' === parentNodes[i].parentNode.tagName ? (indentsNodes.splice(indentsNodes.indexOf(parentNodes[i]), 1), listsNodes.push(parentNodes[i].parentNode)) : 'LI' === parentNodes[i].tagName && (indentsNodes.splice(indentsNodes.indexOf(parentNodes[i]), 1), listsNodes.push(parentNodes[i]));
                    listsNodes.length > 0 && this.parent.observer.notify(common_constant /* KEY_DOWN_HANDLER */ .kT, {
                        event: {
                            preventDefault: function() {},
                            stopPropagation: function() {},
                            shiftKey: 'Indent' !== e.subCommand,
                            which: 9,
                            action: 'indent'
                        },
                        ignoreDefault: !0
                    });
                    for(var i = 0; i < indentsNodes.length; i++){
                        var parentNode = indentsNodes[i], marginLeftOrRight = isRtl ? parentNode.style.marginRight : parentNode.style.marginLeft, indentsValue = void 0;
                        /* eslint-disable */ indentsValue = 'Indent' === e.subCommand ? '' === marginLeftOrRight ? this.indentValue + 'px' : parseInt(marginLeftOrRight, null) + this.indentValue + 'px' : '' === marginLeftOrRight || '0px' === marginLeftOrRight ? '' : parseInt(marginLeftOrRight, null) - this.indentValue + 'px', isRtl ? parentNode.style.marginRight = indentsValue : parentNode.style.marginLeft = indentsValue;
                    }
                    editEle.focus(), (0, common_util /* isIDevice */ .FA)() && (0, common_util /* setEditFrameFocus */ .ze)(editEle, e.selector), (save = this.parent.domNode.saveMarker(save)).restore(), e.callBack && e.callBack({
                        requestType: e.subCommand,
                        editorMode: 'HTML',
                        event: e.event,
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: this.parent.domNode.blockNodes()
                    });
                }, Indents;
            }(), CLASS_IMAGE_RIGHT = 'e-imgright', CLASS_IMAGE_LEFT = 'e-imgleft', CLASS_IMAGE_CENTER = 'e-imgcenter', CLASS_IMAGE_BREAK = 'e-imgbreak', CLASS_CAPTION = 'e-img-caption', CLASS_CAPTION_INLINE = 'e-caption-inline', ImageCommand = /** @class */ function() {
                /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the parent element
     * @hidden

     */ function ImageCommand(parent) {
                    this.parent = parent, this.addEventListener();
                }
                return ImageCommand.prototype.addEventListener = function() {
                    this.parent.observer.on(IMAGE, this.imageCommand, this);
                }, /**
     * imageCommand method
     *
     * @param {IHtmlItem} e - specifies the element
     * @returns {void}
     * @hidden

     */ ImageCommand.prototype.imageCommand = function(e) {
                    switch(e.value.toString().toLowerCase()){
                        case 'image':
                        case 'replace':
                            this.createImage(e);
                            break;
                        case 'insertlink':
                            this.insertImageLink(e);
                            break;
                        case 'openimagelink':
                            this.openImageLink(e);
                            break;
                        case 'editimagelink':
                            this.editImageLink(e);
                            break;
                        case 'removeimagelink':
                            this.removeImageLink(e);
                            break;
                        case 'remove':
                            this.removeImage(e);
                            break;
                        case 'alttext':
                            this.insertAltTextImage(e);
                            break;
                        case 'dimension':
                            this.imageDimension(e);
                            break;
                        case 'caption':
                            this.imageCaption(e);
                            break;
                        case 'justifyleft':
                            this.imageJustifyLeft(e);
                            break;
                        case 'justifycenter':
                            this.imageJustifyCenter(e);
                            break;
                        case 'justifyright':
                            this.imageJustifyRight(e);
                            break;
                        case 'inline':
                            this.imageInline(e);
                            break;
                        case 'break':
                            this.imageBreak(e);
                    }
                }, ImageCommand.prototype.createImage = function(e) {
                    var _this = this, isReplaced = !1;
                    if (e.item.url = (0, ej2_base /* isNullOrUndefined */ .le)(e.item.url) || 'undefined' === e.item.url ? e.item.src : e.item.url, (0, ej2_base /* isNullOrUndefined */ .le)(e.item.selectParent) || 'IMG' !== e.item.selectParent[0].tagName) {
                        var imgElement = (0, ej2_base /* createElement */ .az)('img');
                        this.setStyle(imgElement, e), (0, ej2_base /* isNullOrUndefined */ .le)(e.item.selection) || e.item.selection.restore(), (0, ej2_base /* isNullOrUndefined */ .le)(e.selector) || 'pasteCleanupModule' !== e.selector ? InsertHtml.Insert(this.parent.currentDocument, imgElement, this.parent.editableElement) : e.callBack({
                            requestType: 'Images',
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: [
                                imgElement
                            ]
                        });
                    } else {
                        var imgEle = e.item.selectParent[0];
                        this.setStyle(imgEle, e), isReplaced = !0;
                    }
                    if (e.callBack && ((0, ej2_base /* isNullOrUndefined */ .le)(e.selector) || !(0, ej2_base /* isNullOrUndefined */ .le)(e.selector) && 'pasteCleanupModule' !== e.selector)) {
                        var selectedNode = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)[0], imgElm_1 = 'Replace' === e.value || isReplaced ? e.item.selectParent[0] : ej2_base /* Browser.isIE */ .AR.isIE ? selectedNode.previousSibling : selectedNode.previousElementSibling;
                        imgElm_1.addEventListener('load', function() {
                            'Replace' === e.value && isReplaced || e.callBack({
                                requestType: 'Images',
                                editorMode: 'HTML',
                                event: e.event,
                                range: _this.parent.nodeSelection.getRange(_this.parent.currentDocument),
                                elements: [
                                    imgElm_1
                                ]
                            });
                        });
                    }
                }, ImageCommand.prototype.setStyle = function(imgElement, e) {
                    (0, ej2_base /* isNullOrUndefined */ .le)(e.item.url) || imgElement.setAttribute('src', e.item.url), imgElement.setAttribute('class', 'e-rte-image' + ((0, ej2_base /* isNullOrUndefined */ .le)(e.item.cssClass) ? '' : ' ' + e.item.cssClass)), (0, ej2_base /* isNullOrUndefined */ .le)(e.item.altText) || imgElement.setAttribute('alt', e.item.altText), (0, ej2_base /* isNullOrUndefined */ .le)(e.item.width) || (0, ej2_base /* isNullOrUndefined */ .le)(e.item.width.width) || imgElement.setAttribute('width', this.calculateStyleValue(e.item.width.width)), (0, ej2_base /* isNullOrUndefined */ .le)(e.item.height) || (0, ej2_base /* isNullOrUndefined */ .le)(e.item.height.height) || imgElement.setAttribute('height', this.calculateStyleValue(e.item.height.height)), (0, ej2_base /* isNullOrUndefined */ .le)(e.item.width) || (0, ej2_base /* isNullOrUndefined */ .le)(e.item.width.minWidth) || (imgElement.style.minWidth = this.calculateStyleValue(e.item.width.minWidth)), (0, ej2_base /* isNullOrUndefined */ .le)(e.item.width) || (0, ej2_base /* isNullOrUndefined */ .le)(e.item.width.maxWidth) || (imgElement.style.maxWidth = this.calculateStyleValue(e.item.width.maxWidth)), (0, ej2_base /* isNullOrUndefined */ .le)(e.item.height) || (0, ej2_base /* isNullOrUndefined */ .le)(e.item.height.minHeight) || (imgElement.style.minHeight = this.calculateStyleValue(e.item.height.minHeight)), (0, ej2_base /* isNullOrUndefined */ .le)(e.item.height) || (0, ej2_base /* isNullOrUndefined */ .le)(e.item.height.maxHeight) || (imgElement.style.maxHeight = this.calculateStyleValue(e.item.height.maxHeight));
                }, ImageCommand.prototype.calculateStyleValue = function(value) {
                    return 'string' == typeof value && (value.indexOf('px') || value.indexOf('%') || value.indexOf('auto')) ? value : value + 'px';
                }, ImageCommand.prototype.insertImageLink = function(e) {
                    var anchor = (0, ej2_base /* createElement */ .az)('a', {
                        attrs: {
                            href: e.item.url
                        }
                    });
                    e.item.selectNode[0].parentElement.classList.contains('e-img-wrap') && (e.item.selection.restore(), anchor.setAttribute('contenteditable', 'true')), anchor.appendChild(e.item.selectNode[0]), (0, ej2_base /* isNullOrUndefined */ .le)(e.item.target) || anchor.setAttribute('target', e.item.target), InsertHtml.Insert(this.parent.currentDocument, anchor, this.parent.editableElement), this.callBack(e);
                }, ImageCommand.prototype.openImageLink = function(e) {
                    document.defaultView.open(e.item.url, e.item.target), this.callBack(e);
                }, ImageCommand.prototype.removeImageLink = function(e) {
                    var selectParent = e.item.selectParent[0];
                    if (selectParent.classList.contains('e-img-caption')) {
                        var capImgWrap = (0, ej2_base /* select */ .Ys)('.e-img-wrap', selectParent), textEle = (0, ej2_base /* select */ .Ys)('.e-img-inner', selectParent), newTextEle = textEle.cloneNode(!0);
                        (0, ej2_base /* detach */ .og)((0, ej2_base /* select */ .Ys)('a', selectParent)), (0, ej2_base /* detach */ .og)(textEle), capImgWrap.appendChild(e.item.insertElement), capImgWrap.appendChild(newTextEle);
                    } else (0, ej2_base /* detach */ .og)(selectParent), ej2_base /* Browser.isIE */ .AR.isIE && e.item.selection.restore(), InsertHtml.Insert(this.parent.currentDocument, e.item.insertElement, this.parent.editableElement);
                    this.callBack(e);
                }, ImageCommand.prototype.editImageLink = function(e) {
                    e.item.selectNode[0].parentElement.href = e.item.url, (0, ej2_base /* isNullOrUndefined */ .le)(e.item.target) ? e.item.selectNode[0].parentElement.removeAttribute('target') : e.item.selectNode[0].parentElement.target = e.item.target, this.callBack(e);
                }, ImageCommand.prototype.removeImage = function(e) {
                    (0, ej2_base /* closest */ .oq)(e.item.selectNode[0], 'a') && ('A' !== e.item.selectNode[0].parentElement.nodeName || (0, ej2_base /* isNullOrUndefined */ .le)(e.item.selectNode[0].parentElement.innerText)) ? (0, ej2_base /* detach */ .og)((0, ej2_base /* closest */ .oq)(e.item.selectNode[0], 'a')) : (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(e.item.selectNode[0], '.' + CLASS_CAPTION)) ? (0, ej2_base /* detach */ .og)(e.item.selectNode[0]) : (0, ej2_base /* detach */ .og)((0, ej2_base /* closest */ .oq)(e.item.selectNode[0], '.' + CLASS_CAPTION)), this.callBack(e);
                }, ImageCommand.prototype.insertAltTextImage = function(e) {
                    e.item.selectNode[0].setAttribute('alt', e.item.altText), this.callBack(e);
                }, ImageCommand.prototype.imageDimension = function(e) {
                    var selectNode = e.item.selectNode[0];
                    selectNode.style.height = '', selectNode.style.width = '', 'auto' !== e.item.width ? selectNode.style.width = (0, ej2_base /* formatUnit */ .Ac)(e.item.width) : selectNode.removeAttribute('width'), 'auto' !== e.item.height ? selectNode.style.height = (0, ej2_base /* formatUnit */ .Ac)(e.item.height) : selectNode.removeAttribute('height'), this.callBack(e);
                }, ImageCommand.prototype.imageCaption = function(e) {
                    InsertHtml.Insert(this.parent.currentDocument, e.item.insertElement, this.parent.editableElement), this.callBack(e);
                }, ImageCommand.prototype.imageJustifyLeft = function(e) {
                    var selectNode = e.item.selectNode[0];
                    (0, ej2_base /* isNullOrUndefined */ .le)(selectNode) || (selectNode.removeAttribute('class'), (0, ej2_base /* addClass */ .cn)([
                        selectNode
                    ], 'e-rte-image'), (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)) || ((0, ej2_base /* removeClass */ .IV)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_IMAGE_RIGHT), (0, ej2_base /* addClass */ .cn)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_IMAGE_LEFT)), 'A' === selectNode.parentElement.nodeName && ((0, ej2_base /* removeClass */ .IV)([
                        selectNode.parentElement
                    ], CLASS_IMAGE_RIGHT), (0, ej2_base /* addClass */ .cn)([
                        selectNode.parentElement
                    ], CLASS_IMAGE_LEFT)), (0, ej2_base /* addClass */ .cn)([
                        selectNode
                    ], CLASS_IMAGE_LEFT), this.callBack(e));
                }, ImageCommand.prototype.imageJustifyCenter = function(e) {
                    var selectNode = e.item.selectNode[0];
                    (0, ej2_base /* isNullOrUndefined */ .le)(selectNode) || (selectNode.removeAttribute('class'), (0, ej2_base /* addClass */ .cn)([
                        selectNode
                    ], 'e-rte-image'), (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)) || ((0, ej2_base /* removeClass */ .IV)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_IMAGE_LEFT), (0, ej2_base /* removeClass */ .IV)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_IMAGE_RIGHT), (0, ej2_base /* addClass */ .cn)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_IMAGE_CENTER)), 'A' === selectNode.parentElement.nodeName && ((0, ej2_base /* removeClass */ .IV)([
                        selectNode.parentElement
                    ], CLASS_IMAGE_LEFT), (0, ej2_base /* removeClass */ .IV)([
                        selectNode.parentElement
                    ], CLASS_IMAGE_RIGHT), (0, ej2_base /* addClass */ .cn)([
                        selectNode.parentElement
                    ], CLASS_IMAGE_CENTER)), (0, ej2_base /* addClass */ .cn)([
                        selectNode
                    ], CLASS_IMAGE_CENTER), this.callBack(e));
                }, ImageCommand.prototype.imageJustifyRight = function(e) {
                    var selectNode = e.item.selectNode[0];
                    (0, ej2_base /* isNullOrUndefined */ .le)(selectNode) || (selectNode.removeAttribute('class'), (0, ej2_base /* addClass */ .cn)([
                        selectNode
                    ], 'e-rte-image'), (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)) || ((0, ej2_base /* removeClass */ .IV)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_IMAGE_LEFT), (0, ej2_base /* addClass */ .cn)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_IMAGE_RIGHT)), 'A' === selectNode.parentElement.nodeName && ((0, ej2_base /* removeClass */ .IV)([
                        selectNode.parentElement
                    ], CLASS_IMAGE_LEFT), (0, ej2_base /* addClass */ .cn)([
                        selectNode.parentElement
                    ], CLASS_IMAGE_RIGHT)), (0, ej2_base /* addClass */ .cn)([
                        selectNode
                    ], CLASS_IMAGE_RIGHT), this.callBack(e));
                }, ImageCommand.prototype.imageInline = function(e) {
                    var selectNode = e.item.selectNode[0];
                    selectNode.removeAttribute('class'), (0, ej2_base /* addClass */ .cn)([
                        selectNode
                    ], 'e-rte-image'), (0, ej2_base /* addClass */ .cn)([
                        selectNode
                    ], 'e-imginline'), (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)) || ((0, ej2_base /* removeClass */ .IV)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_IMAGE_BREAK), (0, ej2_base /* removeClass */ .IV)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_IMAGE_CENTER), (0, ej2_base /* removeClass */ .IV)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_IMAGE_LEFT), (0, ej2_base /* removeClass */ .IV)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_IMAGE_RIGHT), (0, ej2_base /* addClass */ .cn)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_CAPTION_INLINE)), this.callBack(e);
                }, ImageCommand.prototype.imageBreak = function(e) {
                    var selectNode = e.item.selectNode[0];
                    selectNode.removeAttribute('class'), (0, ej2_base /* addClass */ .cn)([
                        selectNode
                    ], CLASS_IMAGE_BREAK), (0, ej2_base /* addClass */ .cn)([
                        selectNode
                    ], 'e-rte-image'), (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)) || ((0, ej2_base /* removeClass */ .IV)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_CAPTION_INLINE), (0, ej2_base /* removeClass */ .IV)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_IMAGE_CENTER), (0, ej2_base /* removeClass */ .IV)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_IMAGE_LEFT), (0, ej2_base /* removeClass */ .IV)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_IMAGE_RIGHT), (0, ej2_base /* addClass */ .cn)([
                        (0, ej2_base /* closest */ .oq)(selectNode, '.' + CLASS_CAPTION)
                    ], CLASS_IMAGE_BREAK)), this.callBack(e);
                }, ImageCommand.prototype.callBack = function(e) {
                    e.callBack && e.callBack({
                        requestType: e.item.subCommand,
                        editorMode: 'HTML',
                        event: e.event,
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                    });
                }, ImageCommand;
            }(), TableCommand = /** @class */ function() {
                /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the parent element
     * @hidden

     */ function TableCommand(parent) {
                    this.parent = parent, this.addEventListener();
                }
                return TableCommand.prototype.addEventListener = function() {
                    this.parent.observer.on(TABLE, this.createTable, this), this.parent.observer.on(INSERT_ROW, this.insertRow, this), this.parent.observer.on(INSERT_COLUMN, this.insertColumn, this), this.parent.observer.on(DELETEROW, this.deleteRow, this), this.parent.observer.on(DELETECOLUMN, this.deleteColumn, this), this.parent.observer.on(REMOVETABLE, this.removeTable, this), this.parent.observer.on(TABLEHEADER, this.tableHeader, this), this.parent.observer.on(TABLE_VERTICAL_ALIGN, this.tableVerticalAlign, this), this.parent.observer.on(TABLE_MERGE, this.cellMerge, this), this.parent.observer.on(TABLE_HORIZONTAL_SPLIT, this.HorizontalSplit, this), this.parent.observer.on(TABLE_VERTICAL_SPLIT, this.VerticalSplit, this), this.parent.observer.on('TABLE_MOVE', this.tableMove, this);
                }, TableCommand.prototype.createTable = function(e) {
                    var table = (0, ej2_base /* createElement */ .az)('table', {
                        className: 'e-rte-table'
                    }), tblBody = (0, ej2_base /* createElement */ .az)('tbody');
                    (0, ej2_base /* isNullOrUndefined */ .le)(e.item.width.width) || (table.style.width = this.calculateStyleValue(e.item.width.width)), (0, ej2_base /* isNullOrUndefined */ .le)(e.item.width.minWidth) || (table.style.minWidth = this.calculateStyleValue(e.item.width.minWidth)), (0, ej2_base /* isNullOrUndefined */ .le)(e.item.width.maxWidth) || (table.style.maxWidth = this.calculateStyleValue(e.item.width.maxWidth));
                    for(var tdWid = parseInt(e.item.width.width, 10) > 100 ? 100 / e.item.columns : parseInt(e.item.width.width, 10) / e.item.columns, i = 0; i < e.item.rows; i++){
                        for(var row = (0, ej2_base /* createElement */ .az)('tr'), j = 0; j < e.item.columns; j++){
                            var cell = (0, ej2_base /* createElement */ .az)('td');
                            cell.appendChild((0, ej2_base /* createElement */ .az)('br')), cell.style.width = tdWid + '%', row.appendChild(cell);
                        }
                        tblBody.appendChild(row);
                    }
                    if (table.appendChild(tblBody), e.item.selection.restore(), InsertHtml.Insert(this.parent.currentDocument, table, this.parent.editableElement), this.removeEmptyNode(), e.item.selection.setSelectionText(this.parent.currentDocument, table.querySelector('td'), table.querySelector('td'), 0, 0), null === table.nextElementSibling) {
                        var insertElem = void 0;
                        'DIV' === e.enterAction ? (insertElem = (0, ej2_base /* createElement */ .az)('div')).appendChild((0, ej2_base /* createElement */ .az)('br')) : 'BR' === e.enterAction ? insertElem = (0, ej2_base /* createElement */ .az)('br') : (insertElem = (0, ej2_base /* createElement */ .az)('p')).appendChild((0, ej2_base /* createElement */ .az)('br')), this.insertAfter(insertElem, table);
                    }
                    return table.querySelector('td').classList.add('e-cell-select'), e.callBack && e.callBack({
                        requestType: 'Table',
                        editorMode: 'HTML',
                        event: e.event,
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: [
                            table
                        ]
                    }), table;
                }, TableCommand.prototype.calculateStyleValue = function(value) {
                    return 'string' == typeof value && (value.indexOf('px') || value.indexOf('%') || value.indexOf('auto')) ? value : value + 'px';
                }, TableCommand.prototype.removeEmptyNode = function() {
                    for(var emptyUl = this.parent.editableElement.querySelectorAll('ul:empty, ol:empty'), i = 0; i < emptyUl.length; i++)(0, ej2_base /* detach */ .og)(emptyUl[i]);
                    for(var emptyLiChild = this.parent.editableElement.querySelectorAll('li *:empty:not(img)'), i = 0; i < emptyLiChild.length; i++)(0, ej2_base /* detach */ .og)(emptyLiChild[i]), emptyLiChild.length === i + 1 && (emptyLiChild = this.parent.editableElement.querySelectorAll('li *:empty:not(img)'), i = -1);
                    for(var emptyLi = this.parent.editableElement.querySelectorAll('li:empty'), i = 0; i < emptyLi.length; i++)(0, ej2_base /* detach */ .og)(emptyLi[i]);
                }, TableCommand.prototype.insertAfter = function(newNode, referenceNode) {
                    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
                }, TableCommand.prototype.getSelectedCellMinMaxIndex = function(e) {
                    //eslint-disable-next-line
                    for(var selectedCells = this.curTable.querySelectorAll('.e-cell-select'), a = 0, minI = e.length, maxI = 0, minJ = e[0].length, maxJ = 0; a < selectedCells.length; a++){
                        var selectedCellIndex = this.getCorrespondingIndex(selectedCells[a], e), minMaxIndex = this.FindIndex(selectedCellIndex[0], selectedCellIndex[1], e);
                        //eslint-disable-next-line
                        minI = Math.min(selectedCellIndex[0], minI), maxI = Math.max(minMaxIndex[0], maxI), minJ = Math.min(selectedCellIndex[1], minJ), maxJ = Math.max(minMaxIndex[1], maxJ);
                    }
                    return {
                        startRow: minI,
                        endRow: maxI,
                        startColumn: minJ,
                        endColumn: maxJ
                    };
                }, TableCommand.prototype.insertRow = function(e) {
                    var isBelow = 'InsertRowBefore' !== e.item.subCommand, selectedCell = e.item.selection.range.startContainer;
                    if ('TH' === selectedCell.nodeName || 'TD' === selectedCell.nodeName || (selectedCell = (0, ej2_base /* closest */ .oq)(selectedCell.parentElement, 'td,th')), 'th' !== selectedCell.nodeName.toLowerCase() || 'InsertRowBefore' !== e.item.subCommand) {
                        if (this.curTable = (0, ej2_base /* closest */ .oq)(this.parent.nodeSelection.range.startContainer.parentElement, 'table'), 0 === this.curTable.querySelectorAll('.e-cell-select').length) {
                            var lastRow = this.curTable.rows[this.curTable.rows.length - 1], cloneRow = lastRow.cloneNode(!0);
                            cloneRow.removeAttribute('rowspan'), this.insertAfter(cloneRow, lastRow);
                        } else {
                            for(var allCells = this.getCorrespondingColumns(), minMaxIndex = this.getSelectedCellMinMaxIndex(allCells), minVal = isBelow ? minMaxIndex.endRow : minMaxIndex.startRow, newRow = (0, ej2_base /* createElement */ .az)('tr'), isHeaderSelect = this.curTable.querySelectorAll('th.e-cell-select').length > 0, i = 0; i < allCells[minVal].length; i++)if (isBelow && minVal < allCells.length - 1 && allCells[minVal][i] === allCells[minVal + 1][i] || !isBelow && 0 < minVal && allCells[minVal][i] === allCells[minVal - 1][i]) (0 === i || 0 < i && allCells[minVal][i] !== allCells[minVal][i - 1]) && allCells[minVal][i].setAttribute('rowspan', (parseInt(allCells[minVal][i].getAttribute('rowspan'), 10) + 1).toString());
                            else {
                                var tdElement = (0, ej2_base /* createElement */ .az)('td');
                                tdElement.appendChild((0, ej2_base /* createElement */ .az)('br')), newRow.appendChild(tdElement), tdElement.setAttribute('style', allCells[isHeaderSelect && isBelow && allCells[minVal + 1] ? minVal + 1 : minVal][i].getAttribute('style'));
                            }
                            var selectedRow = void 0;
                            selectedRow = isHeaderSelect && isBelow ? this.curTable.querySelector('tbody').childNodes[0] : this.curTable.rows[minVal], // eslint-disable-next-line
                            'InsertRowBefore' === e.item.subCommand ? selectedRow.parentElement.insertBefore(newRow, selectedRow) : isHeaderSelect ? selectedRow.parentElement.insertBefore(newRow, selectedRow) : this.insertAfter(newRow, selectedRow);
                        }
                        e.item.selection.setSelectionText(this.parent.currentDocument, e.item.selection.range.startContainer, e.item.selection.range.startContainer, 0, 0), e.callBack && e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                }, TableCommand.prototype.insertColumn = function(e) {
                    var curCell, selectedCell = e.item.selection.range.startContainer;
                    'TH' === selectedCell.nodeName || 'TD' === selectedCell.nodeName || (selectedCell = (0, ej2_base /* closest */ .oq)(selectedCell.parentElement, 'td,th'));
                    for(var curRow = (0, ej2_base /* closest */ .oq)(selectedCell, 'tr'), allRows = (0, ej2_base /* closest */ .oq)(curRow, 'table').rows, colIndex = Array.prototype.slice.call(curRow.querySelectorAll(':scope > td, :scope > th')).indexOf(selectedCell), previousWidth = parseInt(e.item.width, 10) / curRow.querySelectorAll(':scope > td, :scope > th').length, currentWidth = parseInt(e.item.width, 10) / (curRow.querySelectorAll(':scope > td, :scope > th').length + 1), currentTabElm = (0, ej2_base /* closest */ .oq)(curRow, 'table'), thTdElm = (0, ej2_base /* closest */ .oq)(curRow, 'table').querySelectorAll('th,td'), i = 0; i < thTdElm.length; i++)thTdElm[i].dataset.oldWidth = thTdElm[i].offsetWidth / currentTabElm.offsetWidth * 100 + '%';
                    for(var i = 0; i < allRows.length; i++){
                        var colTemplate = (curCell = allRows[i].querySelectorAll(':scope > td, :scope > th')[colIndex]).cloneNode(!0);
                        colTemplate.innerHTML = '', colTemplate.appendChild((0, ej2_base /* createElement */ .az)('br')), colTemplate.removeAttribute('class'), colTemplate.removeAttribute('colspan'), colTemplate.removeAttribute('rowspan'), // eslint-disable-next-line
                        'InsertColumnLeft' === e.item.subCommand ? curCell.parentElement.insertBefore(colTemplate, curCell) : this.insertAfter(colTemplate, curCell), colTemplate.style.width = currentWidth.toFixed(4) + '%', delete colTemplate.dataset.oldWidth;
                    }
                    for(var i = 0; i < thTdElm.length; i++)thTdElm[i].style.width = (Number(thTdElm[i].dataset.oldWidth.split('%')[0]) * currentWidth / previousWidth).toFixed(4) + '%', delete thTdElm[i].dataset.oldWidth;
                    e.item.selection.setSelectionText(this.parent.currentDocument, selectedCell, selectedCell, 0, 0), e.callBack && e.callBack({
                        requestType: e.item.subCommand,
                        editorMode: 'HTML',
                        event: e.event,
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                    });
                }, TableCommand.prototype.deleteColumn = function(e) {
                    var selectedCell = e.item.selection.range.startContainer;
                    3 === selectedCell.nodeType && (selectedCell = (0, ej2_base /* closest */ .oq)(selectedCell.parentElement, 'td,th'));
                    var tBodyHeadEle = (0, ej2_base /* closest */ .oq)(selectedCell, 'TH' === selectedCell.tagName ? 'thead' : 'tbody'), rowIndex = tBodyHeadEle && Array.prototype.indexOf.call(tBodyHeadEle.childNodes, selectedCell.parentNode);
                    if (this.curTable = (0, ej2_base /* closest */ .oq)(selectedCell, 'table'), 1 === (0, ej2_base /* closest */ .oq)(selectedCell, 'tr').querySelectorAll('th,td').length) e.item.selection.restore(), (0, ej2_base /* detach */ .og)((0, ej2_base /* closest */ .oq)(selectedCell.parentElement, 'table'));
                    else {
                        for(var deleteIndex = void 0, allCells = this.getCorrespondingColumns(), selectedMinMaxIndex = this.getSelectedCellMinMaxIndex(allCells), minCol = selectedMinMaxIndex.startColumn, maxCol = selectedMinMaxIndex.endColumn, i = 0; i < allCells.length; i++)for(var currentRow = allCells[i], j = 0; j < currentRow.length; j++){
                            var currentCell = currentRow[j], currentCellIndex = this.getCorrespondingIndex(currentCell, allCells), colSpanVal = parseInt(currentCell.getAttribute('colspan'), 10) || 1;
                            currentCellIndex[1] + (colSpanVal - 1) >= minCol && currentCellIndex[1] <= maxCol && (colSpanVal > 1 ? currentCell.setAttribute('colspan', (colSpanVal - 1).toString()) : ((0, ej2_base /* detach */ .og)(currentCell), deleteIndex = j, ej2_base /* Browser.isIE */ .AR.isIE && (e.item.selection.setSelectionText(this.parent.currentDocument, this.curTable.querySelector('td'), this.curTable.querySelector('td'), 0, 0), this.curTable.querySelector('td, th').classList.add('e-cell-select'))));
                        }
                        if (deleteIndex > -1) {
                            var rowHeadEle = tBodyHeadEle.children[rowIndex], nextFocusCell = rowHeadEle && rowHeadEle.children[deleteIndex <= rowHeadEle.children.length - 1 ? deleteIndex : deleteIndex - 1];
                            nextFocusCell && (e.item.selection.setSelectionText(this.parent.currentDocument, nextFocusCell, nextFocusCell, 0, 0), nextFocusCell.classList.add('e-cell-select'));
                        }
                    }
                    if (e.callBack) {
                        var sContainer = this.parent.nodeSelection.getRange(this.parent.currentDocument).startContainer;
                        if ('TD' !== sContainer.nodeName) {
                            var startChildLength = this.parent.nodeSelection.getRange(this.parent.currentDocument).startOffset, focusNode = sContainer.children[startChildLength];
                            focusNode && this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, focusNode, 0);
                        }
                        e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                }, TableCommand.prototype.deleteRow = function(e) {
                    var currentRow, maxI, j, selectedCell = e.item.selection.range.startContainer;
                    3 === selectedCell.nodeType && (selectedCell = (0, ej2_base /* closest */ .oq)(selectedCell.parentElement, 'td,th'));
                    var colIndex = Array.prototype.indexOf.call(selectedCell.parentNode.childNodes, selectedCell);
                    this.curTable = (0, ej2_base /* closest */ .oq)(selectedCell, 'table');
                    var allCells = this.getCorrespondingColumns(), minMaxIndex = this.getSelectedCellMinMaxIndex(allCells);
                    if (1 === this.curTable.rows.length) e.item.selection.restore(), (0, ej2_base /* detach */ .og)((0, ej2_base /* closest */ .oq)(selectedCell.parentElement, 'table'));
                    else for(maxI = minMaxIndex.endRow; maxI >= minMaxIndex.startRow; maxI--){
                        for(j = 0, currentRow = this.curTable.rows[maxI]; j < allCells[maxI].length; j++){
                            if ((0 === j || allCells[maxI][j] !== allCells[maxI][j - 1]) && 1 < parseInt(allCells[maxI][j].getAttribute('rowspan'), 10)) {
                                var rowSpanVal = parseInt(allCells[maxI][j].getAttribute('rowspan'), 10) - 1;
                                //eslint-disable-next-line
                                1 === rowSpanVal ? allCells[maxI][j].removeAttribute('rowspan') : allCells[maxI][j].setAttribute('rowspan', rowSpanVal.toString());
                            }
                            if (maxI < allCells.length - 1 && allCells[maxI][j] === allCells[maxI + 1][j] && (0 === maxI || allCells[maxI][j] !== allCells[maxI - 1][j])) {
                                var element = allCells[maxI][j], index = void 0;
                                for(index = j; 0 < index && allCells[maxI][index] === allCells[maxI][index - 1]; index--)0 === index ? this.curTable.rows[maxI + 1].prepend(element) : allCells[maxI + 1][index - 1].insertAdjacentElement('afterend', element);
                            }
                        }
                        var deleteIndex = currentRow.rowIndex;
                        this.curTable.deleteRow(deleteIndex);
                        var focusTrEle = (0, ej2_base /* isNullOrUndefined */ .le)(this.curTable.rows[deleteIndex]) ? this.curTable.querySelectorAll('tbody tr')[deleteIndex - 1] : this.curTable.querySelectorAll('tbody tr')[deleteIndex], nextFocusCell = focusTrEle && focusTrEle.querySelectorAll('td')[colIndex];
                        nextFocusCell ? (e.item.selection.setSelectionText(this.parent.currentDocument, nextFocusCell, nextFocusCell, 0, 0), nextFocusCell.classList.add('e-cell-select')) : (e.item.selection.setSelectionText(this.parent.currentDocument, this.curTable.querySelector('td'), this.curTable.querySelector('td'), 0, 0), this.curTable.querySelector('td, th').classList.add('e-cell-select'));
                    }
                    e.callBack && e.callBack({
                        requestType: e.item.subCommand,
                        editorMode: 'HTML',
                        event: e.event,
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                    });
                }, TableCommand.prototype.removeTable = function(e) {
                    var selectedCell = e.item.selection.range.startContainer;
                    selectedCell = 3 === selectedCell.nodeType ? selectedCell.parentNode : selectedCell;
                    var selectedTable = (0, ej2_base /* closest */ .oq)(selectedCell.parentElement, 'table');
                    selectedTable && (e.item.selection.restore(), (0, ej2_base /* detach */ .og)(selectedTable)), e.callBack && e.callBack({
                        requestType: e.item.subCommand,
                        editorMode: 'HTML',
                        event: e.event,
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                    });
                }, TableCommand.prototype.tableHeader = function(e) {
                    var headerExit = !1, selectedCell = e.item.selection.range.startContainer;
                    selectedCell = 3 === selectedCell.nodeType ? selectedCell.parentNode : selectedCell;
                    var table = (0, ej2_base /* closest */ .oq)(selectedCell.parentElement, 'table');
                    if ([].slice.call(table.childNodes).forEach(function(el) {
                        'THEAD' === el.nodeName && (headerExit = !0);
                    }), table && !headerExit) {
                        for(var cellCount = table.querySelector('tr').childElementCount, colSpanCount = 0, i = 0; i < cellCount; i++)colSpanCount += parseInt(table.querySelector('tr').children[i].getAttribute('colspan'), 10) || 1;
                        for(var row = table.createTHead().insertRow(0), j = 0; j < colSpanCount; j++){
                            var th = (0, ej2_base /* createElement */ .az)('th');
                            th.appendChild((0, ej2_base /* createElement */ .az)('br')), row.appendChild(th);
                        }
                    } else table.deleteTHead();
                    e.callBack && e.callBack({
                        requestType: e.item.subCommand,
                        editorMode: 'HTML',
                        event: e.event,
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                    });
                }, TableCommand.prototype.tableVerticalAlign = function(e) {
                    'AlignTop' === e.item.subCommand ? e.item.tableCell.style.verticalAlign = 'top' : 'AlignMiddle' === e.item.subCommand ? e.item.tableCell.style.verticalAlign = 'middle' : e.item.tableCell.style.verticalAlign = 'bottom', e.callBack && e.callBack({
                        requestType: e.item.subCommand,
                        editorMode: 'HTML',
                        event: e.event,
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                    });
                }, TableCommand.prototype.cellMerge = function(e) {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.curTable) && (this.curTable = (0, ej2_base /* closest */ .oq)(this.parent.nodeSelection.range.startContainer.parentElement, 'table'));
                    var selectedCells = this.curTable.querySelectorAll('.e-cell-select');
                    if (!(selectedCells.length < 2)) {
                        this.mergeCellContent();
                        var minMaxIndexes = this.getSelectedMinMaxIndexes(this.getCorrespondingColumns()), firstCell = selectedCells[0], rowSelectedCells = firstCell.parentElement.querySelectorAll('.e-cell-select');
                        minMaxIndexes.startColumn < minMaxIndexes.endColumn && firstCell.setAttribute('colspan', (minMaxIndexes.endColumn - minMaxIndexes.startColumn + 1).toString()), minMaxIndexes.startRow < minMaxIndexes.endRow && firstCell.setAttribute('rowspan', (minMaxIndexes.endRow - minMaxIndexes.startRow + 1).toString());
                        for(var totalWidth = 0, j = rowSelectedCells.length - 1; j >= 0; j--)totalWidth += parseFloat(rowSelectedCells[j].style.width);
                        firstCell.style.width = totalWidth + '%';
                        for(var i = 1; i <= selectedCells.length - 1; i++)(0, ej2_base /* detach */ .og)(selectedCells[i]);
                        for(var i = 0; i < this.curTable.rows.length; i++)'' === this.curTable.rows[i].innerHTML && (0, ej2_base /* detach */ .og)(this.curTable.rows[i]);
                        this.updateRowSpanStyle(minMaxIndexes.startRow, minMaxIndexes.endRow, this.getCorrespondingColumns()), this.updateColSpanStyle(minMaxIndexes.startColumn, minMaxIndexes.endColumn, this.getCorrespondingColumns()), e.item.selection.setSelectionText(this.parent.currentDocument, e.item.selection.range.startContainer, e.item.selection.range.startContainer, 0, 0), this.parent.nodeSelection.range && this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, // eslint-disable-next-line
                        this.parent.nodeSelection.range.endContainer, 0), e.callBack && e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                }, TableCommand.prototype.updateColSpanStyle = function(min, max, elements) {
                    var colValue, colIndex, colMin, attrValue, index = 0, count = 0;
                    //eslint-disable-next-line
                    if (min < (max = Math.min(max, elements[0].length - 1))) {
                        for(; colIndex <= max; colIndex++)// eslint-disable-next-line
                        if (!(min < colIndex && elements[0][colIndex] === elements[0][colIndex - 1]) && 1 < (index = Math.min(parseInt(elements[0][colIndex].getAttribute('colspan'), 10) || 1, max - min + 1)) && elements[0][colIndex] === elements[0][colIndex + 1]) for(count = index - 1, colValue = 1; colValue < elements.length; colValue++){
                            if (elements[colValue][colIndex] !== elements[colValue - 1][colIndex]) /* eslint-disable */ {
                                for(colMin = colIndex; colMin < colIndex + index; colMin++)if (1 < (attrValue = parseInt(elements[colValue][colMin].getAttribute('colspan'), 10) || 1) && elements[colValue][colMin] === elements[colValue][colMin + 1]) colMin += count = Math.min(count, attrValue - 1);
                                else if (!(count = Math.max(0, count - 1))) break;
                            /* eslint-enable */ }
                            if (!count) break;
                        }
                        count && this.updateCellAttribute(elements, count, 'colspan', 0, elements.length - 1, min, max);
                    }
                }, TableCommand.prototype.updateRowSpanStyle = function(min, max, ele) {
                    var rowValue, colIndex, rowMin, attrValue, index = 0, count = 0;
                    // eslint-disable-next-line
                    if (min < (max = Math.min(max, ele.length - 1))) {
                        for(rowValue = min; rowValue <= max; rowValue++)// eslint-disable-next-line
                        if (!(min < rowValue && ele[rowValue][0] === ele[rowValue - 1][0]) && ele[rowValue][0] && 1 < (index = Math.min(parseInt(ele[rowValue][0].getAttribute('rowspan'), 10) || 1, max - min + 1)) && ele[rowValue][0] === ele[rowValue + 1][0]) {
                            for(count = index - 1, colIndex = 1; colIndex < ele[0].length; colIndex++)if (ele[rowValue][colIndex] !== ele[rowValue][colIndex - 1]) {
                                for(rowMin = rowValue; rowMin < rowValue + index; rowMin++)// eslint-disable-next-line
                                if (1 < (attrValue = parseInt(ele[rowMin][colIndex].getAttribute('rowspan'), 10) || 1) && ele[rowMin][colIndex] === ele[rowMin + 1][colIndex]) rowMin += count = Math.min(count, attrValue - 1);
                                else if (!(count = Math.max(0, count - 1))) break;
                                if (!count) break;
                            }
                        }
                        count && this.updateCellAttribute(ele, count, 'rowspan', min, max, 0, ele[0].length - 1);
                    }
                }, TableCommand.prototype.updateCellAttribute = function(elements, index, attr, min, max, firstIndex, length) {
                    var rowIndex, colIndex, spanCount;
                    for(rowIndex = min; rowIndex <= max; rowIndex++)for(colIndex = firstIndex; colIndex <= length; colIndex++)// eslint-disable-next-line
                    min < rowIndex && elements[rowIndex][colIndex] === elements[rowIndex - 1][colIndex] || firstIndex < colIndex && elements[rowIndex][colIndex] === elements[rowIndex][colIndex - 1] || 1 < (spanCount = parseInt(elements[rowIndex][colIndex].getAttribute(attr), 10) || 1) && (1 < spanCount - index ? elements[rowIndex][colIndex].setAttribute(attr, (spanCount - index).toString()) : elements[rowIndex][colIndex].removeAttribute(attr));
                }, TableCommand.prototype.mergeCellContent = function() {
                    for(var selectedCells = this.curTable.querySelectorAll('.e-cell-select'), innerHtml = '<br>' === selectedCells[0].innerHTML ? '' : selectedCells[0].innerHTML, i = 1; i < selectedCells.length; i++)'<br>' !== selectedCells[i].innerHTML && (innerHtml = innerHtml ? innerHtml + '<br>' + selectedCells[i].innerHTML : innerHtml + selectedCells[i].innerHTML);
                    selectedCells[0].innerHTML = innerHtml;
                }, TableCommand.prototype.getSelectedMinMaxIndexes = function(correspondingCells) {
                    var selectedCells = this.curTable.querySelectorAll('.e-cell-select');
                    if (0 < selectedCells.length) {
                        for(var minRow = correspondingCells.length, maxRow = 0, minCol = correspondingCells[0].length, maxCol = 0, i = 0; i < selectedCells.length; i++){
                            var currentRowCol = this.getCorrespondingIndex(selectedCells[i], correspondingCells), targetRowCol = this.FindIndex(currentRowCol[0], currentRowCol[1], correspondingCells);
                            minRow = Math.min(currentRowCol[0], minRow), maxRow = Math.max(targetRowCol[0], maxRow), minCol = Math.min(currentRowCol[1], minCol), maxCol = Math.max(targetRowCol[1], maxCol);
                        }
                        return {
                            startRow: minRow,
                            endRow: maxRow,
                            startColumn: minCol,
                            endColumn: maxCol
                        };
                    }
                    return null;
                }, TableCommand.prototype.HorizontalSplit = function(e) {
                    var selectedCell = e.item.selection.range.startContainer;
                    if (this.curTable = (0, ej2_base /* closest */ .oq)(selectedCell.parentElement, 'table'), !(this.curTable.querySelectorAll('.e-cell-select').length > 1)) {
                        this.activeCell = this.curTable.querySelector('.e-cell-select');
                        var newCell = this.activeCell.cloneNode(!0);
                        newCell.removeAttribute('class'), newCell.innerHTML = '</br>';
                        var activeCellIndex = this.getCorrespondingIndex(this.activeCell, this.getCorrespondingColumns()), correspondingCells = this.getCorrespondingColumns(), activeCellRowSpan = this.activeCell.getAttribute('rowspan') ? parseInt(this.activeCell.getAttribute('rowspan'), 10) : 1;
                        if (activeCellRowSpan > 1) {
                            var avgCount = Math.ceil(activeCellRowSpan / 2);
                            // eslint-disable-next-line
                            1 < avgCount ? this.activeCell.setAttribute('rowspan', avgCount.toString()) : this.activeCell.removeAttribute('rowspan'), // eslint-disable-next-line
                            1 < activeCellRowSpan - avgCount ? newCell.setAttribute('rowspan', (activeCellRowSpan - avgCount).toString()) : newCell.removeAttribute('rowspan');
                            var avgRowIndex = void 0, colIndex = void 0;
                            for(avgRowIndex = activeCellIndex[0] + Math.ceil(activeCellRowSpan / 2), colIndex = 0 === activeCellIndex[1] ? activeCellIndex[1] : activeCellIndex[1] - 1; 0 <= colIndex && (correspondingCells[avgRowIndex][colIndex] === correspondingCells[avgRowIndex][colIndex - 1] || 0 < avgRowIndex && correspondingCells[avgRowIndex][colIndex] === correspondingCells[avgRowIndex - 1][colIndex]);)colIndex--;
                            -1 === colIndex ? // eslint-disable-next-line
                            this.curTable.rows[avgRowIndex].firstChild ? this.curTable.rows[avgRowIndex].prepend(newCell) : this.curTable.appendChild(newCell) : correspondingCells[avgRowIndex][colIndex].insertAdjacentElement('afterend', newCell);
                        } else {
                            var newTrEle = (0, ej2_base /* createElement */ .az)('tr');
                            newTrEle.appendChild(newCell);
                            for(var selectedRow = correspondingCells[activeCellIndex[0]], j = 0; j <= selectedRow.length - 1; j++)selectedRow[j] !== selectedRow[j - 1] && selectedRow[j] !== this.activeCell && selectedRow[j].setAttribute('rowspan', ((parseInt(selectedRow[j].getAttribute('rowspan'), 10) ? parseInt(selectedRow[j].getAttribute('rowspan'), 10) : 1) + 1).toString());
                            this.activeCell.parentNode.insertAdjacentElement('afterend', newTrEle);
                        }
                        e.callBack && e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                }, TableCommand.prototype.VerticalSplit = function(e) {
                    var selectedCell = e.item.selection.range.startContainer;
                    if (this.curTable = (0, ej2_base /* closest */ .oq)(selectedCell.parentElement, 'table'), !(this.curTable.querySelectorAll('.e-cell-select').length > 1)) {
                        this.activeCell = this.curTable.querySelector('.e-cell-select');
                        var allRows = this.curTable.rows, newCell = this.activeCell.cloneNode(!0);
                        newCell.removeAttribute('class'), newCell.innerHTML = '</br>';
                        var avgWidth = parseFloat(this.activeCell.style.width) / 2;
                        if ('TH' === this.activeCell.tagName && isNaN(avgWidth)) {
                            for(var cellCount = this.curTable.querySelector('tr').childElementCount, i = 0; i < cellCount; i++)parseInt(this.curTable.querySelector('tr').children[i].getAttribute('colspan'), 10);
                            avgWidth = parseFloat((this.activeCell.offsetWidth / 2 / this.curTable.offsetWidth * 100).toFixed(1));
                        }
                        var activeCellIndex = this.getCorrespondingIndex(this.activeCell, this.getCorrespondingColumns()), correspondingColumns = this.getCorrespondingColumns(), activeCellcolSpan = parseInt(this.activeCell.getAttribute('colspan'), 10);
                        if (activeCellcolSpan > 1) // eslint-disable-next-line
                        1 < Math.ceil(activeCellcolSpan / 2) ? this.activeCell.setAttribute('colspan', (activeCellcolSpan / 2).toString()) : this.activeCell.removeAttribute('colspan'), // eslint-disable-next-line
                        1 < activeCellcolSpan - activeCellcolSpan / 2 ? newCell.setAttribute('colspan', // eslint-disable-next-line
                        (activeCellcolSpan - activeCellcolSpan / 2).toString()) : newCell.removeAttribute('colspan');
                        else for(var i = 0; i <= allRows.length - 1; i++)if (0 === i || correspondingColumns[i][activeCellIndex[1]] !== correspondingColumns[i - 1][activeCellIndex[1]]) {
                            var currentCell = correspondingColumns[i][activeCellIndex[1]];
                            currentCell !== this.activeCell && currentCell.setAttribute('colspan', ((parseInt(currentCell.getAttribute('colspan'), 10) ? parseInt(currentCell.getAttribute('colspan'), 10) : 1) + 1).toString());
                        }
                        this.activeCell.style.width = avgWidth + '%', newCell.style.width = avgWidth + '%', this.activeCell.parentNode.insertBefore(newCell, this.activeCell.nextSibling), e.callBack && e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                }, TableCommand.prototype.getCorrespondingColumns = function() {
                    for(var elementArray = [], allRows = this.curTable.rows, i = 0; i <= allRows.length - 1; i++)for(var ele = allRows[i], index = 0, j = 0; j <= ele.children.length - 1; j++){
                        for(var colEle = ele.children[j], colspan_1 = parseInt(colEle.getAttribute('colspan'), 10) || 1, rowSpan = parseInt(colEle.getAttribute('rowspan'), 10) || 1, rowIndex = i; rowIndex < i + rowSpan; rowIndex++)for(var colIndex = index; colIndex < index + colspan_1; colIndex++)elementArray[rowIndex] || (elementArray[rowIndex] = []), elementArray[rowIndex][colIndex] ? index++ : elementArray[rowIndex][colIndex] = colEle;
                        index += 0;
                    }
                    return elementArray;
                }, // eslint-disable-next-line
                TableCommand.prototype.FindIndex = function(rowIndex, columnIndex, cells) {
                    var nextIndex, nextCol;
                    for(nextIndex = rowIndex + 1, nextCol = columnIndex + 1; nextIndex < cells.length;){
                        if (cells[nextIndex][columnIndex] !== cells[rowIndex][columnIndex]) {
                            nextIndex--;
                            break;
                        }
                        nextIndex++;
                    }
                    for(nextIndex === cells.length && nextIndex--; nextCol < cells[rowIndex].length;){
                        if (cells[rowIndex][nextCol] !== cells[rowIndex][columnIndex]) {
                            nextCol--;
                            break;
                        }
                        nextCol++;
                    }
                    return nextCol === cells[rowIndex].length && nextCol--, [
                        nextIndex,
                        nextCol
                    ];
                }, TableCommand.prototype.getCorrespondingIndex = function(cell, allCells) {
                    //let value: RowCol = new RowCol();
                    for(var i = 0; i < allCells.length; i++)for(var j = 0; j < allCells[i].length; j++)if (allCells[i][j] === cell) return [
                        i,
                        j
                    ];
                    return [];
                }, TableCommand.prototype.highlightCells = function(minRow, maxRow, minCol, maxCol, eleArray) {
                    var j, k, startCell, endCell, minRowIndex = minRow, maxRowIndex = maxRow, minColIndex = minCol, maxColIndex = maxCol, minMaxValues = new MinMax();
                    for(j = minRowIndex; j <= maxRowIndex; j++){
                        for((1 < (parseInt(eleArray[j][minColIndex].getAttribute('rowspan'), 10) || 1) || 1 < (parseInt(eleArray[j][minColIndex].getAttribute('colspan'), 10) || 1)) && (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[j][minColIndex], eleArray))[0], startCell[1], eleArray)) ? (minRowIndex = Math.min(startCell[0], minRowIndex), maxRowIndex = Math.max(endCell[0], maxRowIndex), minColIndex = Math.min(startCell[1], minColIndex), maxColIndex = Math.max(endCell[1], maxColIndex)) : (1 < (parseInt(eleArray[j][maxColIndex].getAttribute('rowspan'), 10) || 1) || 1 < (parseInt(eleArray[j][maxColIndex].getAttribute('colspan'), 10) || 1)) && (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[j][maxColIndex], eleArray))[0], startCell[1], eleArray)) && (minRowIndex = Math.min(startCell[0], minRowIndex), maxRowIndex = Math.max(endCell[0], maxRowIndex), minColIndex = Math.min(startCell[1], minColIndex), maxColIndex = Math.max(endCell[1], maxColIndex)), k = minColIndex; k <= maxColIndex; k++)(1 < (parseInt(eleArray[minRowIndex][k].getAttribute('rowspan'), 10) || 1) || 1 < (parseInt(eleArray[minRowIndex][k].getAttribute('colspan'), 10) || 1)) && (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[minRowIndex][k], eleArray))[0], startCell[1], eleArray)) ? (minRowIndex = Math.min(startCell[0], minRowIndex), maxRowIndex = Math.max(endCell[0], maxRowIndex), minColIndex = Math.min(startCell[1], minColIndex), maxColIndex = Math.max(endCell[1], maxColIndex)) : (1 < (parseInt(eleArray[maxRowIndex][k].getAttribute('rowspan'), 10) || 1) || 1 < (parseInt(eleArray[maxRowIndex][k].getAttribute('colspan'), 10) || 1)) && (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[maxRowIndex][k], eleArray))[0], startCell[1], eleArray)) && (minRowIndex = Math.min(startCell[0], minRowIndex), maxRowIndex = Math.max(endCell[0], maxRowIndex), minColIndex = Math.min(startCell[1], minColIndex), maxColIndex = Math.max(endCell[1], maxColIndex));
                        minMaxValues = minRowIndex === minRow && maxRowIndex === maxRow && minColIndex === minCol && maxColIndex === maxCol ? {
                            startRow: minRow,
                            endRow: maxRow,
                            startColumn: minCol,
                            endColumn: maxCol
                        } : this.highlightCells(minRowIndex, maxRowIndex, minColIndex, maxColIndex, eleArray);
                    }
                    return minMaxValues;
                /* eslint-enable */ }, TableCommand.prototype.tableMove = function(e) {
                    this.activeCell = e.selectNode[0];
                    var target = e.event.target, activeCellTag = this.activeCell.tagName, targetCellTag = target.tagName;
                    if (this.curTable = (0, ej2_base /* closest */ .oq)(target, 'table'), this.curTable.querySelectorAll('.e-cell-select').length > 1 && this.parent.nodeSelection.Clear(this.parent.currentDocument), 'TD' === target.tagName || 'TH' === target.tagName || activeCellTag === targetCellTag) {
                        for(var activeRowIndex = Array.prototype.slice.call(this.activeCell.parentElement.parentElement.children).indexOf(this.activeCell.parentElement), activeColumnIndex = Array.prototype.slice.call(this.activeCell.parentElement.children).indexOf(this.activeCell), targetRowIndex = Array.prototype.slice.call(target.parentElement.parentElement.children).indexOf(target.parentElement), targetColumnIndex = Array.prototype.slice.call(target.parentElement.children).indexOf(target), activeCellList = this.curTable.querySelectorAll('.e-cell-select'), i = activeCellList.length - 1; i >= 0; i--)this.activeCell !== activeCellList[i] && activeCellList[i].classList.remove('e-cell-select');
                        if (activeRowIndex !== targetRowIndex || activeColumnIndex !== targetColumnIndex) {
                            for(var correspondingCells = this.getCorrespondingColumns(), activeIndexes = this.getCorrespondingIndex(this.activeCell, correspondingCells), targetIndexes = this.getCorrespondingIndex(target, correspondingCells), minMaxIndexes = this.highlightCells(Math.min(activeIndexes[0], targetIndexes[0]), Math.max(activeIndexes[0], /* eslint-disable */ targetIndexes[0]), Math.min(activeIndexes[1], targetIndexes[1]), Math.max(activeIndexes[1], targetIndexes[1]), correspondingCells), rowIndex = minMaxIndexes.startRow; rowIndex <= minMaxIndexes.endRow; rowIndex++)for(var colIndex = minMaxIndexes.startColumn; colIndex <= minMaxIndexes.endColumn; colIndex++)correspondingCells[rowIndex][colIndex].classList.add('e-cell-select');
                            this.parent.nodeSelection.range && (this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, this.parent.nodeSelection.range.endContainer, this.parent.nodeSelection.range.endContainer, 0, 0), this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, this.parent.nodeSelection.range.endContainer, 0));
                        }
                    }
                }, TableCommand;
            }(), MinMax = function() {}, IsFormatted = /** @class */ function() {
                function IsFormatted() {}
                return(/**
     * getFormattedNode method
     *
     * @param {Node} node - specifies the node.
     * @param {string} format - specifies the string value.
     * @param {Node} endNode - specifies the end node
     * @returns {Node} - returns the node
     * @hidden

     */ IsFormatted.prototype.getFormattedNode = function(node, format, endNode) {
                    var parentNode = this.getFormatParent(node, format, endNode);
                    return null !== parentNode && parentNode !== endNode ? parentNode : null;
                }, IsFormatted.prototype.getFormatParent = function(node, format, endNode) {
                    do node = node.parentNode;
                    while (node && node !== endNode && !this.isFormattedNode(node, format))
                    return node;
                }, IsFormatted.prototype.isFormattedNode = function(node, format) {
                    switch(format){
                        case 'bold':
                            return IsFormatted.isBold(node);
                        case 'italic':
                            return IsFormatted.isItalic(node);
                        case 'underline':
                            return IsFormatted.isUnderline(node);
                        case 'strikethrough':
                            return IsFormatted.isStrikethrough(node);
                        case 'superscript':
                            return IsFormatted.isSuperscript(node);
                        case 'subscript':
                            return IsFormatted.isSubscript(node);
                        case 'fontcolor':
                            return this.isFontColor(node);
                        case 'fontname':
                            return this.isFontName(node);
                        case 'fontsize':
                            return this.isFontSize(node);
                        case 'backgroundcolor':
                            return this.isBackgroundColor(node);
                        default:
                            return !1;
                    }
                }, /**
     * isBold method
     *
     * @param {Node} node - specifies the node value
     * @returns {boolean} - returns the boolean value
     * @hidden

     */ IsFormatted.isBold = function(node) {
                    return -1 !== [
                        'strong',
                        'b'
                    ].indexOf(node.nodeName.toLowerCase()) || -1 !== this.inlineTags.indexOf(node.nodeName.toLowerCase()) && !!node.style && 'bold' === node.style.fontWeight;
                }, /**
     * isItalic method
     *
     * @param {Node} node - specifies the node value
     * @returns {boolean} - returns the boolean value
     * @hidden

     */ IsFormatted.isItalic = function(node) {
                    return -1 !== [
                        'em',
                        'i'
                    ].indexOf(node.nodeName.toLowerCase()) || -1 !== this.inlineTags.indexOf(node.nodeName.toLowerCase()) && !!node.style && 'italic' === node.style.fontStyle;
                }, /**
     * isUnderline method
     *
     * @param {Node} node - specifies the node value
     * @returns {boolean} - returns the boolean value
     * @hidden

     */ IsFormatted.isUnderline = function(node) {
                    return -1 !== [
                        'u'
                    ].indexOf(node.nodeName.toLowerCase()) || -1 !== this.inlineTags.indexOf(node.nodeName.toLowerCase()) && !!node.style && 'underline' === node.style.textDecoration;
                }, /**
     * isStrikethrough method
     *
     * @param {Node} node - specifies the node value
     * @returns {boolean} - returns the boolean value
     * @hidden

     */ IsFormatted.isStrikethrough = function(node) {
                    return -1 !== [
                        'del',
                        'strike'
                    ].indexOf(node.nodeName.toLowerCase()) || -1 !== this.inlineTags.indexOf(node.nodeName.toLowerCase()) && !!node.style && 'line-through' === node.style.textDecoration;
                }, /**
     * isSuperscript method
     *
     * @param {Node} node - specifies the node value
     * @returns {boolean} - returns the boolean value
     * @hidden

     */ IsFormatted.isSuperscript = function(node) {
                    return -1 !== [
                        'sup'
                    ].indexOf(node.nodeName.toLowerCase());
                }, /**
     * isSubscript method
     *
     * @param {Node} node - specifies the node value
     * @returns {boolean} - returns the boolean value
     * @hidden

     */ IsFormatted.isSubscript = function(node) {
                    return -1 !== [
                        'sub'
                    ].indexOf(node.nodeName.toLowerCase());
                }, IsFormatted.prototype.isFontColor = function(node) {
                    var color = node.style && node.style.color;
                    return -1 !== IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) && null !== color && '' !== color && void 0 !== color;
                }, IsFormatted.prototype.isBackgroundColor = function(node) {
                    var backColor = node.style && node.style.backgroundColor;
                    return -1 !== IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) && null !== backColor && '' !== backColor && void 0 !== backColor;
                }, IsFormatted.prototype.isFontSize = function(node) {
                    var size = node.style && node.style.fontSize;
                    return -1 !== IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) && null !== size && '' !== size && void 0 !== size;
                }, IsFormatted.prototype.isFontName = function(node) {
                    var name = node.style && node.style.fontFamily;
                    return -1 !== IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) && null !== name && '' !== name && void 0 !== name;
                }, // Get Formatted Node
                IsFormatted.inlineTags = [
                    'a',
                    'abbr',
                    'acronym',
                    'b',
                    'bdo',
                    'big',
                    'cite',
                    'code',
                    'dfn',
                    'em',
                    'i',
                    'kbd',
                    'label',
                    'q',
                    'samp',
                    'small',
                    'span',
                    'strong',
                    'sub',
                    'sup',
                    'tt',
                    'u',
                    'var',
                    'del'
                ], IsFormatted);
            }(), SelectionCommands = /** @class */ function() {
                function SelectionCommands() {}
                return(/**
     * applyFormat method
     *
     * @param {Document} docElement - specifies the document
     * @param {string} format - specifies the string value
     * @param {Node} endNode - specifies the end node
     * @param {string} enterAction - specifies the enter key action
     * @param {string} value - specifies the string value
     * @param {string} selector - specifies the string
     * @returns {void}
     * @hidden

     */ SelectionCommands.applyFormat = function(docElement, format, endNode, enterAction, value, selector) {
                    if (this.enterAction = enterAction, [
                        'bold',
                        'italic',
                        'underline',
                        'strikethrough',
                        'superscript',
                        'subscript',
                        'uppercase',
                        'lowercase',
                        'fontcolor',
                        'fontname',
                        'fontsize',
                        'backgroundcolor'
                    ].indexOf(format) > -1) {
                        'backgroundcolor' === format && '' === value && (value = 'transparent');
                        var domSelection = new selection /* NodeSelection */ .q(), domNode = new DOMNode(endNode, docElement), nodeCutter = new NodeCutter(), isFormatted = new IsFormatted(), range = domSelection.getRange(docElement), save = domSelection.save(range, docElement), nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) : domSelection.getSelectionNodeCollectionBr(range), isCollapsed = !1, isFormat = !1, isCursor = !1, preventRestore = !1, isFontStyle = [
                            'fontcolor',
                            'fontname',
                            'fontsize',
                            'backgroundcolor'
                        ].indexOf(format) > -1;
                        if (range.collapsed) {
                            var currentFormatNode = isFormatted.getFormattedNode(range.startContainer, format, endNode), currentSelector = (0, ej2_base /* isNullOrUndefined */ .le)(currentFormatNode) ? null : null === currentFormatNode.getAttribute('style') ? currentFormatNode.nodeName : currentFormatNode.nodeName + "[style='" + currentFormatNode.getAttribute('style') + "']";
                            if (nodes.length > 0) isCollapsed = !0, range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);
                            else if (3 === range.startContainer.nodeType && (range.startContainer.parentElement.childElementCount > 0 && range.startOffset > 0 && 'br' !== range.startContainer.parentElement.firstElementChild.tagName.toLowerCase() || !(0, ej2_base /* isNullOrUndefined */ .le)(currentFormatNode) && currentFormatNode === range.startContainer.parentElement.closest(currentSelector) && 0 != range.startContainer.parentElement.closest(currentSelector).textContent.replace(RegExp(String.fromCharCode(8203), 'g'), '').trim().length)) isCollapsed = !0, range = nodeCutter.GetCursorRange(docElement, range, range.startContainer), nodes.push(range.startContainer);
                            else {
                                var cursorNode = this.insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode);
                                domSelection.endContainer = domSelection.startContainer = domSelection.getNodeArray(cursorNode, !0);
                                var childNodes = 'BR' === cursorNode.nodeName && cursorNode.parentNode.childNodes;
                                (0, ej2_base /* isNullOrUndefined */ .le)(childNodes) || 1 !== childNodes.length || 'BR' !== childNodes[0].nodeName || 0 !== nodes.length ? domSelection.endOffset = domSelection.startOffset = 1 : (domSelection.setSelectionText(docElement, range.startContainer, range.endContainer, 0, 0), preventRestore = !0), 'BR' === cursorNode.nodeName && 0 === cursorNode.parentNode.textContent.length && (preventRestore = !0);
                            }
                        }
                        isCursor = range.collapsed;
                        for(var isSubSup = !1, index = 0; index < nodes.length; index++){
                            var formatNode = isFormatted.getFormattedNode(nodes[index], format, endNode);
                            null === formatNode && ('subscript' === format ? isSubSup = null !== (formatNode = isFormatted.getFormattedNode(nodes[index], 'superscript', endNode)) : 'superscript' === format && (isSubSup = null !== (formatNode = isFormatted.getFormattedNode(nodes[index], 'subscript', endNode)))), 0 === index && null === formatNode && (isFormat = !0), null !== formatNode && (!isFormat || isFontStyle) ? nodes[index] = this.removeFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode) : nodes[index] = this.insertFormat(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value), domSelection = this.applySelection(nodes, domSelection, nodeCutter, index, isCollapsed);
                        }
                        (0, common_util /* isIDevice */ .FA)() && (0, common_util /* setEditFrameFocus */ .ze)(endNode, selector), preventRestore || save.restore(), isSubSup && this.applyFormat(docElement, format, endNode, enterAction);
                    }
                }, SelectionCommands.insertCursorNode = function(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode) {
                    var cursorNodes = domSelection.getNodeCollection(range), domNode = new DOMNode(endNode, docElement), cursorFormat = cursorNodes.length > 0 ? cursorNodes.length > 1 && range.startContainer === range.endContainer ? this.getCursorFormat(isFormatted, cursorNodes, format, endNode) : isFormatted.getFormattedNode(cursorNodes[0], format, endNode) : null, cursorNode = null;
                    if (cursorFormat) {
                        if (cursorNode = cursorNodes[0], 8203 === cursorFormat.firstChild.textContent.charCodeAt(0) && 3 === cursorFormat.firstChild.nodeType) {
                            var regEx = RegExp(String.fromCharCode(8203), 'g'), emptySpaceNode = void 0;
                            cursorFormat.firstChild === cursorNode ? (cursorNode.textContent = cursorFormat.parentElement && (domNode.isBlockNode(cursorFormat.parentElement) && cursorFormat.parentElement.textContent.length <= 1 ? cursorFormat.parentElement.childElementCount > 1 : 0 === cursorFormat.childElementCount) && (cursorFormat.parentElement.textContent.length > 1 || cursorFormat.parentElement.firstChild && 1 === cursorFormat.parentElement.firstChild.nodeType) ? cursorNode.textContent : cursorNode.textContent.replace(regEx, ''), emptySpaceNode = cursorNode) : (cursorFormat.firstChild.textContent = cursorFormat.firstChild.textContent.replace(regEx, ''), emptySpaceNode = cursorFormat.firstChild);
                            var pointer = void 0;
                            if (0 === emptySpaceNode.textContent.length) {
                                if ((0, ej2_base /* isNullOrUndefined */ .le)(emptySpaceNode.previousSibling)) {
                                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(emptySpaceNode.parentElement) && 0 === emptySpaceNode.parentElement.textContent.length) {
                                        var brElem = document.createElement('BR');
                                        emptySpaceNode.parentElement.appendChild(brElem), (0, ej2_base /* detach */ .og)(emptySpaceNode), cursorNode = brElem, domSelection.setCursorPoint(docElement, cursorNode.parentElement, 0);
                                    }
                                } else cursorNode = emptySpaceNode.previousSibling, pointer = emptySpaceNode.textContent.length - 1, domSelection.setCursorPoint(docElement, emptySpaceNode, pointer);
                            }
                        }
                        [
                            'fontcolor',
                            'fontname',
                            'fontsize',
                            'backgroundcolor'
                        ].indexOf(format) > -1 ? ('fontcolor' === format ? cursorFormat.style.color = value : 'fontname' === format ? cursorFormat.style.fontFamily = value : 'fontsize' === format ? cursorFormat.style.fontSize = value : cursorFormat.style.backgroundColor = value, cursorNode = cursorFormat) : InsertMethods.unwrap(cursorFormat);
                    } else cursorNodes.length > 1 && range.startOffset > 0 && cursorNodes[0].firstElementChild && 'br' === cursorNodes[0].firstElementChild.tagName.toLowerCase() && (cursorNodes[0].innerHTML = ''), 1 === cursorNodes.length && 0 === range.startOffset && ('BR' === cursorNodes[0].nodeName || 'BR' === cursorNodes[0].nextSibling.nodeName) && (0, ej2_base /* detach */ .og)('#text' === cursorNodes[0].nodeName ? cursorNodes[0].nextSibling : cursorNodes[0]), cursorNode = this.getInsertNode(docElement, range, format, value).firstChild;
                    return cursorNode;
                }, SelectionCommands.getCursorFormat = function(isFormatted, cursorNodes, format, endNode) {
                    for(var currentNode, index = 0; index < cursorNodes.length; index++)currentNode = cursorNodes[index].lastElementChild ? cursorNodes[index].lastElementChild : cursorNodes[index];
                    return isFormatted.getFormattedNode(currentNode, format, endNode);
                }, SelectionCommands.removeFormat = function(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode) {
                    var fontStyle, bgStyle, splitNode = null, startText = '#text' === range.startContainer.nodeName ? range.startContainer.textContent.substring(range.startOffset, range.startContainer.textContent.length) : range.startContainer.textContent;
                    if (!(range.startContainer === range.endContainer && 0 === range.startOffset && range.endOffset === range.startContainer.length)) {
                        var nodeIndex = [], cloneNode = nodes[index];
                        do nodeIndex.push(domSelection.getIndex(cloneNode)), cloneNode = cloneNode.parentNode;
                        while (cloneNode && cloneNode !== formatNode)
                        if ('BR' !== nodes[index].nodeName && (cloneNode = splitNode = isCursor && formatNode.textContent.length - 1 === range.startOffset ? nodeCutter.SplitNode(range, formatNode, !0) : nodeCutter.GetSpliceNode(range, formatNode)), isCursor) {
                            for(var lastNode = splitNode; null !== lastNode.firstChild && 3 !== lastNode.firstChild.nodeType;)lastNode = lastNode.firstChild;
                            lastNode.innerHTML = '&#8203;', nodes[index] = lastNode.firstChild;
                        } else {
                            for(; cloneNode && cloneNode.childNodes.length > 0 && nodeIndex.length - 1 >= 0 && cloneNode.childNodes.length > nodeIndex[nodeIndex.length - 1];)cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 1]], nodeIndex.pop();
                            if ('BR' !== nodes[index].nodeName) {
                                if (3 !== cloneNode.nodeType || isCursor && '' === cloneNode.nodeValue) {
                                    var divNode = document.createElement('div');
                                    divNode.innerHTML = '&#8203;', 3 !== cloneNode.nodeType ? (cloneNode.insertBefore(divNode.firstChild, cloneNode.firstChild), nodes[index] = cloneNode.firstChild) : (cloneNode.parentNode.insertBefore(divNode.firstChild, cloneNode), nodes[index] = cloneNode.previousSibling, cloneNode.parentNode.removeChild(cloneNode));
                                } else nodes[index] = cloneNode;
                            }
                        }
                    }
                    if ('backgroundcolor' === format && (fontStyle = formatNode.style.fontSize), 'fontsize' === format) {
                        var bg = (0, ej2_base /* closest */ .oq)(nodes[index].parentElement, "span[style*=background-color]");
                        (0, ej2_base /* isNullOrUndefined */ .le)(bg) || (bgStyle = bg.style.backgroundColor);
                    }
                    var formatNodeStyles = formatNode.getAttribute('style'), formatNodeTagName = formatNode.tagName, child = InsertMethods.unwrap(formatNode);
                    if (child[0] && !isFontStyle) for(var nodeTraverse = child[index] ? child[index] : child[0], textNode = nodeTraverse; nodeTraverse && nodeTraverse.parentElement && nodeTraverse.parentElement !== endNode; nodeTraverse){
                        var nodeTraverseCondition = void 0;
                        if (nodeTraverseCondition = 'SPAN' === formatNode.nodeName ? nodeTraverse.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase() && nodeTraverse.parentElement.getAttribute('style') === formatNodeStyles : nodeTraverse.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase(), nodeTraverse.parentElement && nodeTraverseCondition && (nodeTraverse.parentElement.childElementCount > 1 || range.startOffset > 1)) {
                            if (textNode.parentElement && textNode.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase() && range.startOffset === range.endOffset && 1 !== textNode.nodeType && !(0, ej2_base /* isNullOrUndefined */ .le)(textNode.textContent) && textNode.parentElement.childElementCount > 1 && (range.setStart(textNode, 0), range.setEnd(textNode, textNode.textContent.length), nodeCutter.SplitNode(range, textNode.parentElement, !1)), 'span' === nodeTraverse.parentElement.tagName.toLocaleLowerCase() && 'underline' === formatNode.style.textDecoration && 'underline' !== nodeTraverse.parentElement.style.textDecoration) {
                                nodeTraverse = nodeTraverse.parentElement;
                                continue;
                            }
                            InsertMethods.unwrap(nodeTraverse.parentElement), nodeTraverse = (0, ej2_base /* isNullOrUndefined */ .le)(nodeTraverse.parentElement) || domNode.isBlockNode(nodeTraverse.parentElement) ? nodeTraverse.parentElement : textNode;
                        } else nodeTraverse = nodeTraverse.parentElement;
                    }
                    if (child.length > 0 && isFontStyle) {
                        for(var num = 0; num < child.length; num++)(3 !== child[num].nodeType || child[num].textContent && child[num].textContent.trim().length > 0) && (child[num] = InsertMethods.Wrap(child[num], this.GetFormatNode(format, value, formatNodeTagName, formatNodeStyles)), child[num].textContent === startText && (0 === num ? range.setStartBefore(child[num]) : num === child.length - 1 && range.setEndAfter(child[num])));
                        var currentNodeElem = nodes[index].parentElement;
                        if ((0, ej2_base /* isNullOrUndefined */ .le)(fontStyle) || '' === fontStyle || (currentNodeElem.style.fontSize = fontStyle), (0, ej2_base /* isNullOrUndefined */ .le)(bgStyle) || '' === bgStyle || (currentNodeElem.style.backgroundColor = bgStyle), 'backgroundcolor' === format && !(0, ej2_base /* isNullOrUndefined */ .le)(fontStyle) && '' !== fontStyle && currentNodeElem.parentElement.innerHTML === currentNodeElem.outerHTML) {
                            var curParentElem = currentNodeElem.parentElement;
                            curParentElem.parentElement.insertBefore(currentNodeElem, curParentElem), (0, ej2_base /* detach */ .og)(curParentElem);
                        }
                        if ('fontsize' === format || 'fontcolor' === format) {
                            for(var liElement = nodes[index].parentElement, parentElement = nodes[index].parentElement; !(0, ej2_base /* isNullOrUndefined */ .le)(parentElement) && 'li' !== parentElement.tagName.toLowerCase();)liElement = parentElement = parentElement.parentElement;
                            (0, ej2_base /* isNullOrUndefined */ .le)(liElement) || 'li' !== liElement.tagName.toLowerCase() || liElement.textContent.trim() !== nodes[index].textContent.trim() || ('fontsize' === format ? liElement.style.fontSize = value : (liElement.style.color = value, liElement.style.textDecoration = 'inherit'));
                        }
                    }
                    return nodes[index];
                }, SelectionCommands.insertFormat = function(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value) {
                    if (isCursor) {
                        if ('uppercase' !== format && 'lowercase' !== format) {
                            var element = this.getInsertNode(docElement, range, format, value);
                            nodes[index] = element.firstChild, nodeCutter.position = 1;
                        } else nodeCutter.position = range.startOffset;
                    } else if (null === formatNode && isFormat || isFontStyle) {
                        if ('BR' !== nodes[index].nodeName && (nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]), nodes[index].textContent = nodeCutter.TrimLineBreak(nodes[index].textContent)), 'uppercase' === format || 'lowercase' === format) nodes[index].textContent = 'uppercase' === format ? nodes[index].textContent.toLocaleUpperCase() : nodes[index].textContent.toLocaleLowerCase();
                        else if (!(!0 === isFontStyle && '' === value)) {
                            var element = this.GetFormatNode(format, value);
                            if ('fontsize' === format || 'fontcolor' === format) {
                                for(var liElement = nodes[index].parentElement, parentElement = nodes[index].parentElement; !(0, ej2_base /* isNullOrUndefined */ .le)(parentElement) && 'li' !== parentElement.tagName.toLowerCase();)liElement = parentElement = parentElement.parentElement;
                                if ((0, ej2_base /* isNullOrUndefined */ .le)(liElement) || 'li' !== liElement.tagName.toLowerCase() || liElement.textContent.trim() !== nodes[index].textContent.trim() || ('fontsize' === format ? liElement.style.fontSize = value : (liElement.style.color = value, liElement.style.textDecoration = 'inherit')), nodes[index] = this.applyStyles(nodes, index, element), 'fontsize' === format) {
                                    var bg = (0, ej2_base /* closest */ .oq)(nodes[index].parentElement, "span[style*=background-color]");
                                    (0, ej2_base /* isNullOrUndefined */ .le)(bg) || (nodes[index].parentElement.style.backgroundColor = bg.style.backgroundColor);
                                }
                            } else nodes[index] = this.applyStyles(nodes, index, element);
                        }
                    } else nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);
                    return nodes[index];
                }, SelectionCommands.applyStyles = function(nodes, index, element) {
                    return 'BR' === nodes[index].nodeName && 'BR' === this.enterAction || (nodes[index] = index === nodes.length - 1 || 'BR' === nodes[index].nodeName ? InsertMethods.Wrap(nodes[index], element) : InsertMethods.WrapBefore(nodes[index], element, !0), nodes[index] = this.getChildNode(nodes[index], element)), nodes[index];
                }, SelectionCommands.getInsertNode = function(docElement, range, format, value) {
                    var element = this.GetFormatNode(format, value);
                    if (element.innerHTML = '&#8203;', ej2_base /* Browser.isIE */ .AR.isIE) {
                        var frag = docElement.createDocumentFragment();
                        frag.appendChild(element), range.insertNode(frag);
                    } else range.insertNode(element);
                    return element;
                }, SelectionCommands.getChildNode = function(node, element) {
                    return null == node && (element.innerHTML = '&#8203;', node = element.firstChild), node;
                }, SelectionCommands.applySelection = function(nodes, domSelection, nodeCutter, index, isCollapsed) {
                    return 1 !== nodes.length || isCollapsed ? 1 === nodes.length && isCollapsed ? (domSelection.startContainer = domSelection.getNodeArray(nodes[index], !0), domSelection.endContainer = domSelection.startContainer, domSelection.startOffset = nodeCutter.position, domSelection.endOffset = nodeCutter.position) : 0 === index ? (domSelection.startContainer = domSelection.getNodeArray(nodes[index], !0), domSelection.startOffset = 0) : index === nodes.length - 1 && (domSelection.endContainer = domSelection.getNodeArray(nodes[index], !1), domSelection.endOffset = nodes[index].textContent.length) : (domSelection.startContainer = domSelection.getNodeArray(nodes[index], !0), domSelection.endContainer = domSelection.startContainer, domSelection.startOffset = 0, domSelection.endOffset = nodes[index].textContent.length), domSelection;
                }, SelectionCommands.GetFormatNode = function(format, value, tagName, styles) {
                    var node;
                    switch(format){
                        case 'bold':
                            return document.createElement('strong');
                        case 'italic':
                            return document.createElement('em');
                        case 'underline':
                            return node = document.createElement('span'), this.updateStyles(node, tagName, styles), node.style.textDecoration = 'underline', node;
                        case 'strikethrough':
                            return node = document.createElement('span'), this.updateStyles(node, tagName, styles), node.style.textDecoration = 'line-through', node;
                        case 'superscript':
                            return document.createElement('sup');
                        case 'subscript':
                            return document.createElement('sub');
                        case 'fontcolor':
                            return node = document.createElement('span'), this.updateStyles(node, tagName, styles), node.style.color = value, node.style.textDecoration = 'inherit', node;
                        case 'fontname':
                            return node = document.createElement('span'), this.updateStyles(node, tagName, styles), node.style.fontFamily = value, node;
                        case 'fontsize':
                            return node = document.createElement('span'), this.updateStyles(node, tagName, styles), node.style.fontSize = value, node;
                        default:
                            return node = document.createElement('span'), this.updateStyles(node, tagName, styles), node.style.backgroundColor = value, node;
                    }
                }, SelectionCommands.updateStyles = function(ele, tag, styles) {
                    null !== styles && 'SPAN' === tag && ele.setAttribute('style', styles);
                }, SelectionCommands.enterAction = 'P', SelectionCommands);
            }(), SelectionBasedExec = /** @class */ function() {
                /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the parent element
     * @hidden

     */ function SelectionBasedExec(parent) {
                    this.parent = parent, this.addEventListener();
                }
                return SelectionBasedExec.prototype.addEventListener = function() {
                    this.parent.observer.on(SELECTION_TYPE, this.applySelection, this), this.parent.observer.on(common_constant /* KEY_DOWN_HANDLER */ .kT, this.keyDownHandler, this);
                }, SelectionBasedExec.prototype.keyDownHandler = function(e) {
                    e.event.ctrlKey && [
                        'bold',
                        'italic',
                        'underline',
                        'strikethrough',
                        'superscript',
                        'subscript',
                        'uppercase',
                        'lowercase'
                    ].indexOf(e.event.action) > -1 && (e.event.preventDefault(), SelectionCommands.applyFormat(this.parent.currentDocument, e.event.action, this.parent.editableElement, e.enterAction), this.callBack(e, e.event.action));
                }, SelectionBasedExec.prototype.applySelection = function(e) {
                    SelectionCommands.applyFormat(this.parent.currentDocument, e.subCommand.toLocaleLowerCase(), this.parent.editableElement, e.enterAction, e.value, e.selector), this.callBack(e, e.subCommand);
                }, SelectionBasedExec.prototype.callBack = function(event, action) {
                    event.callBack && event.callBack({
                        requestType: action,
                        event: event.event,
                        editorMode: 'HTML',
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                    });
                }, SelectionBasedExec;
            }(), InsertHtmlExec = /** @class */ function() {
                /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - sepcifies the parent element
     * @hidden

     */ function InsertHtmlExec(parent) {
                    this.parent = parent, this.addEventListener();
                }
                return InsertHtmlExec.prototype.addEventListener = function() {
                    this.parent.observer.on(INSERTHTML_TYPE, this.applyHtml, this);
                }, InsertHtmlExec.prototype.applyHtml = function(e) {
                    if (InsertHtml.Insert(this.parent.currentDocument, e.value, this.parent.editableElement, !0), 'pasteCleanup' === e.subCommand) {
                        var pastedElements = this.parent.editableElement.querySelectorAll('.pasteContent_RTE'), allPastedElements = [].slice.call(pastedElements), imgElements = this.parent.editableElement.querySelectorAll('.pasteContent_Img'), allImgElm = [].slice.call(imgElements);
                        e.callBack({
                            requestType: e.subCommand,
                            editorMode: 'HTML',
                            elements: allPastedElements,
                            imgElem: allImgElm
                        });
                    } else e.callBack && e.callBack({
                        requestType: e.subCommand,
                        editorMode: 'HTML',
                        event: e.event,
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                    });
                }, InsertHtmlExec;
            }(), ClearFormat = /** @class */ function() {
                function ClearFormat() {}
                return(/**
     * clear method
     *
     * @param {Document} docElement - specifies the document element.
     * @param {Node} endNode - specifies the end node
     * @param {string} enterAction - specifies the enter key action
     * @param {string} selector - specifies the string value
     * @returns {void}
     * @hidden

     */ ClearFormat.clear = function(docElement, endNode, enterAction, selector) {
                    this.domNode = new DOMNode(endNode, docElement), this.defaultTag = 'P' === enterAction ? this.defaultTag : 'div';
                    var nodeSelection = new selection /* NodeSelection */ .q(), nodeCutter = new NodeCutter(), range = nodeSelection.getRange(docElement), isCollapsed = range.collapsed, nodes = nodeSelection.getInsertNodeCollection(range), save = nodeSelection.save(range, docElement);
                    if (!isCollapsed) {
                        var preNode = void 0;
                        if (preNode = 'BR' === nodes[0].nodeName && (0, ej2_base /* closest */ .oq)(nodes[0], 'table') ? nodeCutter.GetSpliceNode(range, (0, ej2_base /* closest */ .oq)(nodes[0], 'table')) : nodeCutter.GetSpliceNode(range, nodes[nodes.length > 1 && 'IMG' === nodes[0].nodeName ? 1 : 0]), 1 === nodes.length) nodeSelection.setSelectionContents(docElement, preNode), range = nodeSelection.getRange(docElement);
                        else {
                            for(var i = 1, lastText = nodes[nodes.length - i]; nodes.length <= i && 'BR' === nodes[nodes.length - i].nodeName;)i++, lastText = nodes[nodes.length - i];
                            var lasNode = nodeCutter.GetSpliceNode(range, lastText);
                            nodeSelection.setSelectionText(docElement, preNode, lasNode, 0, 3 === lasNode.nodeType ? lasNode.textContent.length : lasNode.childNodes.length), range = nodeSelection.getRange(docElement);
                        }
                        var exactNodes = nodeSelection.getNodeCollection(range), cloneSelectNodes = exactNodes.slice();
                        this.clearInlines(nodeSelection.getSelectionNodes(cloneSelectNodes), cloneSelectNodes, nodeSelection.getRange(docElement), nodeCutter, endNode), this.reSelection(docElement, save, exactNodes), range = nodeSelection.getRange(docElement);
                        var cloneParentNodes = (exactNodes = nodeSelection.getNodeCollection(range)).slice();
                        this.clearBlocks(docElement, cloneParentNodes, endNode, nodeCutter, nodeSelection), (0, common_util /* isIDevice */ .FA)() && (0, common_util /* setEditFrameFocus */ .ze)(endNode, selector), this.reSelection(docElement, save, exactNodes);
                    }
                }, ClearFormat.reSelection = function(docElement, save, exactNodes) {
                    var selectionNodes = save.getInsertNodes(exactNodes);
                    save.startContainer = save.getNodeArray(selectionNodes[0], !0, docElement), save.startOffset = 0, save.endContainer = save.getNodeArray(selectionNodes[selectionNodes.length - 1], !1, docElement);
                    var endIndexNode = selectionNodes[selectionNodes.length - 1];
                    save.endOffset = 3 === endIndexNode.nodeType ? endIndexNode.textContent.length : endIndexNode.childNodes.length, save.restore();
                }, ClearFormat.clearBlocks = function(docElement, nodes, endNode, nodeCutter, nodeSelection) {
                    for(var parentNodes = [], index = 0; index < nodes.length; index++)this.BLOCK_TAGS.indexOf(nodes[index].nodeName.toLocaleLowerCase()) > -1 && -1 === parentNodes.indexOf(nodes[index]) ? parentNodes.push(nodes[index]) : this.BLOCK_TAGS.indexOf(nodes[index].parentNode.nodeName.toLocaleLowerCase()) > -1 && -1 === parentNodes.indexOf(nodes[index].parentNode) && endNode !== nodes[index].parentNode && parentNodes.push(nodes[index].parentNode);
                    parentNodes = this.spliceParent(parentNodes, nodes)[0], parentNodes = this.removeParent(parentNodes), this.unWrap(docElement, parentNodes, nodeCutter, nodeSelection);
                }, ClearFormat.spliceParent = function(parentNodes, nodes) {
                    for(var index1 = 0; index1 < parentNodes.length; index1++)for(var len = parentNodes[index1].childNodes.length, index2 = 0; index2 < len; index2++)if (nodes.indexOf(parentNodes[index1].childNodes[index2]) > 0 && parentNodes[index1].childNodes[index2].childNodes.length > 0 && (nodes = this.spliceParent([
                        parentNodes[index1].childNodes[index2]
                    ], nodes)[1]), -1 >= nodes.indexOf(parentNodes[index1].childNodes[index2]) && '' !== parentNodes[index1].childNodes[index2].textContent.trim()) {
                        for(var index3 = 0; index3 < len; index3++)nodes.indexOf(parentNodes[index1].childNodes[index3]) > -1 && nodes.splice(nodes.indexOf(parentNodes[index1].childNodes[index3]), 1);
                        index2 = parentNodes[index1].childNodes.length;
                        var parentIndex = parentNodes.indexOf(parentNodes[index1].parentNode), nodeIndex = nodes.indexOf(parentNodes[index1].parentNode);
                        parentIndex > -1 && parentNodes.splice(parentIndex, 1), nodeIndex > -1 && nodes.splice(nodeIndex, 1);
                        var elementIndex = nodes.indexOf(parentNodes[index1]);
                        elementIndex > -1 && nodes.splice(elementIndex, 1), parentNodes.splice(index1, 1), index1--;
                    }
                    return [
                        parentNodes,
                        nodes
                    ];
                }, ClearFormat.removeChild = function(parentNodes, parentNode) {
                    var count = parentNode.childNodes.length;
                    if (count > 0) for(var index = 0; index < count; index++)parentNodes.indexOf(parentNode.childNodes[index]) > -1 && (parentNodes = this.removeChild(parentNodes, parentNode.childNodes[index])).splice(parentNodes.indexOf(parentNode.childNodes[index]), 1);
                    return parentNodes;
                }, ClearFormat.removeParent = function(parentNodes) {
                    for(var index = 0; index < parentNodes.length; index++)parentNodes.indexOf(parentNodes[index].parentNode) > -1 && ((parentNodes = this.removeChild(parentNodes, parentNodes[index])).splice(index, 1), index--);
                    return parentNodes;
                }, ClearFormat.unWrap = function(docElement, parentNodes, nodeCutter, nodeSelection) {
                    for(var index1 = 0; index1 < parentNodes.length; index1++)if (this.NONVALID_TAGS.indexOf(parentNodes[index1].nodeName.toLowerCase()) > -1 && parentNodes[index1].parentNode && this.NONVALID_PARENT_TAGS.indexOf(parentNodes[index1].parentNode.nodeName.toLowerCase()) > -1 && (nodeSelection.setSelectionText(docElement, parentNodes[index1], parentNodes[index1], 0, parentNodes[index1].childNodes.length), InsertMethods.unwrap(nodeCutter.GetSpliceNode(nodeSelection.getRange(docElement), parentNodes[index1].parentNode))), 'p' !== parentNodes[index1].nodeName.toLocaleLowerCase()) {
                        !(0 > this.NONVALID_PARENT_TAGS.indexOf(parentNodes[index1].nodeName.toLowerCase())) || 'p' === parentNodes[index1].parentNode.nodeName.toLocaleLowerCase() || ('blockquote' === parentNodes[index1].nodeName.toLocaleLowerCase() || 'li' === parentNodes[index1].nodeName.toLocaleLowerCase()) && this.IGNORE_PARENT_TAGS.indexOf(parentNodes[index1].childNodes[0].nodeName.toLocaleLowerCase()) > -1 || 1 === parentNodes[index1].childNodes.length && 'p' === parentNodes[index1].childNodes[0].nodeName.toLocaleLowerCase() || InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));
                        var childNodes = InsertMethods.unwrap(parentNodes[index1]);
                        1 === childNodes.length && 'p' === childNodes[0].parentNode.nodeName.toLocaleLowerCase() && (InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag)), InsertMethods.unwrap(parentNodes[index1]));
                        for(var index2 = 0; index2 < childNodes.length; index2++)if (this.NONVALID_TAGS.indexOf(childNodes[index2].nodeName.toLowerCase()) > -1) this.unWrap(docElement, [
                            childNodes[index2]
                        ], nodeCutter, nodeSelection);
                        else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 && 'p' !== childNodes[index2].nodeName.toLocaleLowerCase()) {
                            var blockNodes = this.removeParent([
                                childNodes[index2]
                            ]);
                            this.unWrap(docElement, blockNodes, nodeCutter, nodeSelection);
                        } else this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 && childNodes[index2].parentNode.nodeName.toLocaleLowerCase() === childNodes[index2].nodeName.toLocaleLowerCase() ? InsertMethods.unwrap(childNodes[index2]) : this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 && 'p' === childNodes[index2].nodeName.toLocaleLowerCase() && (InsertMethods.Wrap(childNodes[index2], docElement.createElement(this.defaultTag)), InsertMethods.unwrap(childNodes[index2]));
                    } else InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag)), InsertMethods.unwrap(parentNodes[index1]);
                }, ClearFormat.clearInlines = function(textNodes, nodes, range, nodeCutter, // eslint-disable-next-line
                endNode) {
                    for(var index = 0; index < textNodes.length; index++){
                        for(var currentInlineNode = textNodes[index], currentNode = void 0; !this.domNode.isBlockNode(currentInlineNode) && currentInlineNode.parentElement && !currentInlineNode.parentElement.classList.contains('e-img-inner');)currentNode = currentInlineNode, currentInlineNode = currentInlineNode.parentElement;
                        currentNode && IsFormatted.inlineTags.indexOf(currentNode.nodeName.toLocaleLowerCase()) > -1 && (nodeCutter.GetSpliceNode(range, currentNode), this.removeInlineParent(currentNode));
                    }
                }, ClearFormat.removeInlineParent = function(textNodes) {
                    for(var nodes = InsertMethods.unwrap(textNodes), index = 0; index < nodes.length; index++)1 === nodes[index].parentNode.childNodes.length && !nodes[index].parentNode.classList.contains('e-img-inner') && IsFormatted.inlineTags.indexOf(nodes[index].parentNode.nodeName.toLocaleLowerCase()) > -1 ? this.removeInlineParent(nodes[index].parentNode) : IsFormatted.inlineTags.indexOf(nodes[index].nodeName.toLocaleLowerCase()) > -1 && this.removeInlineParent(nodes[index]);
                }, ClearFormat.BLOCK_TAGS = [
                    'address',
                    'article',
                    'aside',
                    'blockquote',
                    'details',
                    'dd',
                    'div',
                    'dl',
                    'dt',
                    'fieldset',
                    'figcaption',
                    'figure',
                    'footer',
                    'form',
                    'h1',
                    'h2',
                    'h3',
                    'h4',
                    'h5',
                    'h6',
                    'header',
                    'hgroup',
                    'li',
                    'main',
                    'nav',
                    'noscript',
                    'ol',
                    'p',
                    'pre',
                    'section',
                    'ul'
                ], ClearFormat.NONVALID_PARENT_TAGS = [
                    'thead',
                    'tbody',
                    'ul',
                    'ol',
                    'table',
                    'tfoot',
                    'tr'
                ], ClearFormat.IGNORE_PARENT_TAGS = [
                    'ul',
                    'ol',
                    'table'
                ], ClearFormat.NONVALID_TAGS = [
                    'thead',
                    'tbody',
                    'figcaption',
                    'td',
                    'tr',
                    'th',
                    'tfoot',
                    'figcaption',
                    'li'
                ], ClearFormat.defaultTag = 'p', ClearFormat);
            }(), ClearFormatExec = /** @class */ function() {
                /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the parent element.
     * @returns {void}
     * @hidden

     */ function ClearFormatExec(parent) {
                    this.parent = parent, this.addEventListener();
                }
                return ClearFormatExec.prototype.addEventListener = function() {
                    this.parent.observer.on(CLEAR_TYPE, this.applyClear, this), this.parent.observer.on(common_constant /* KEY_DOWN_HANDLER */ .kT, this.onKeyDown, this);
                }, ClearFormatExec.prototype.onKeyDown = function(e) {
                    'clear-format' === e.event.action && (this.applyClear({
                        subCommand: 'ClearFormat',
                        callBack: e.callBack,
                        enterAction: e.enterAction
                    }), e.event.preventDefault());
                }, ClearFormatExec.prototype.applyClear = function(e) {
                    'ClearFormat' === e.subCommand && (ClearFormat.clear(this.parent.currentDocument, this.parent.editableElement, e.enterAction, e.selector), e.callBack && e.callBack({
                        requestType: e.subCommand,
                        event: e.event,
                        editorMode: 'HTML',
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                    }));
                }, ClearFormatExec;
            }(), UndoRedoManager = /** @class */ function() {
                function UndoRedoManager(parent, options) {
                    this.undoRedoStack = [], this.parent = parent, this.undoRedoSteps = (0, ej2_base /* isNullOrUndefined */ .le)(options) ? 30 : options.undoRedoSteps, this.undoRedoTimer = (0, ej2_base /* isNullOrUndefined */ .le)(options) ? 300 : options.undoRedoTimer, this.addEventListener();
                }
                return UndoRedoManager.prototype.addEventListener = function() {
                    var debounceListener = (0, ej2_base /* debounce */ .Ds)(this.keyUp, this.undoRedoTimer);
                    this.parent.observer.on(common_constant /* KEY_UP_HANDLER */ .My, debounceListener, this), this.parent.observer.on(common_constant /* KEY_DOWN_HANDLER */ .kT, this.keyDown, this), this.parent.observer.on(common_constant /* ACTION */ .om, this.onAction, this), this.parent.observer.on(common_constant /* MODEL_CHANGED_PLUGIN */ .hL, this.onPropertyChanged, this);
                }, UndoRedoManager.prototype.onPropertyChanged = function(props) {
                    for(var _i = 0, _a = Object.keys(props.newProp); _i < _a.length; _i++)switch(_a[_i]){
                        case 'undoRedoSteps':
                            this.undoRedoSteps = props.newProp.undoRedoSteps;
                            break;
                        case 'undoRedoTimer':
                            this.undoRedoTimer = props.newProp.undoRedoTimer;
                    }
                }, UndoRedoManager.prototype.removeEventListener = function() {
                    this.parent.observer.off(common_constant /* KEY_UP_HANDLER */ .My, this.keyUp), this.parent.observer.off(common_constant /* KEY_DOWN_HANDLER */ .kT, this.keyDown), this.parent.observer.off(common_constant /* ACTION */ .om, this.onAction);
                }, /**
     * onAction method
     *
     * @param {IHtmlSubCommands} e - specifies the sub command
     * @returns {void}
     * @hidden

     */ UndoRedoManager.prototype.onAction = function(e) {
                    'Undo' === e.subCommand ? this.undo(e) : this.redo(e);
                }, /**
     * Destroys the ToolBar.
     *
     * @function destroy
     * @returns {void}
     * @hidden

     */ UndoRedoManager.prototype.destroy = function() {
                    this.removeEventListener();
                }, UndoRedoManager.prototype.keyDown = function(e) {
                    var event = e.event;
                    switch(event.action){
                        case 'undo':
                            event.preventDefault(), this.undo(e);
                            break;
                        case 'redo':
                            event.preventDefault(), this.redo(e);
                    }
                }, UndoRedoManager.prototype.keyUp = function(e) {
                    17 === e.event.keyCode || e.event.ctrlKey || this.saveData(e);
                }, /**
     * RTE collection stored html format.
     *
     * @function saveData
     * @param {KeyboardEvent} e - specifies the keyboard event
     * @returns {void}
     * @hidden

     */ UndoRedoManager.prototype.saveData = function(e) {
                    for(var range = new selection /* NodeSelection */ .q().getRange(this.parent.currentDocument), currentContainer = this.parent.editableElement === range.startContainer.parentElement ? range.startContainer.parentElement : range.startContainer, i = currentContainer.childNodes.length - 1; i >= 0; i--)!(0, ej2_base /* isNullOrUndefined */ .le)(currentContainer.childNodes[i]) && '#text' === currentContainer.childNodes[i].nodeName && 0 === currentContainer.childNodes[i].textContent.length && 'IMG' !== currentContainer.childNodes[i].nodeName && 'BR' !== currentContainer.childNodes[i].nodeName && currentContainer.childNodes[i].nodeName && (0, ej2_base /* detach */ .og)(currentContainer.childNodes[i]);
                    range = new selection /* NodeSelection */ .q().getRange(this.parent.currentDocument);
                    var save = new selection /* NodeSelection */ .q().save(range, this.parent.currentDocument), changEle = {
                        text: this.parent.editableElement.innerHTML,
                        range: save
                    };
                    this.undoRedoStack.length >= this.steps && (this.undoRedoStack = this.undoRedoStack.slice(0, this.steps + 1)), (!(this.undoRedoStack.length > 1) || this.undoRedoStack[this.undoRedoStack.length - 1].range.range.collapsed !== range.collapsed || this.undoRedoStack[this.undoRedoStack.length - 1].range.startOffset !== save.range.startOffset || this.undoRedoStack[this.undoRedoStack.length - 1].range.endOffset !== save.range.endOffset || this.undoRedoStack[this.undoRedoStack.length - 1].range.range.startContainer !== save.range.startContainer || this.undoRedoStack[this.undoRedoStack.length - 1].text.trim() !== changEle.text.trim()) && (this.undoRedoStack.push(changEle), this.steps = this.undoRedoStack.length - 1, this.steps > this.undoRedoSteps && (this.undoRedoStack.shift(), this.steps--), e && e.callBack && e.callBack());
                }, /**
     * Undo the editable text.
     *
     * @function undo
     * @param {IHtmlSubCommands} e - specifies the sub commands
     * @returns {void}
     * @hidden

     */ UndoRedoManager.prototype.undo = function(e) {
                    if (this.steps > 0) {
                        var range = this.undoRedoStack[this.steps - 1].range, removedContent = this.undoRedoStack[this.steps - 1].text;
                        this.parent.editableElement.innerHTML = removedContent, this.parent.editableElement.focus(), (0, common_util /* isIDevice */ .FA)() && (0, common_util /* setEditFrameFocus */ .ze)(this.parent.editableElement, e.selector), range.restore(), this.steps--, e.callBack && e.callBack({
                            requestType: 'Undo',
                            editorMode: 'HTML',
                            range: range,
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument),
                            event: e.event
                        });
                    }
                }, /**
     * Redo the editable text.
     *
     * @param {IHtmlSubCommands} e - specifies the sub commands
     * @function redo
     * @returns {void}
     * @hidden

     */ UndoRedoManager.prototype.redo = function(e) {
                    if (null != this.undoRedoStack[this.steps + 1]) {
                        var range = this.undoRedoStack[this.steps + 1].range;
                        this.parent.editableElement.innerHTML = this.undoRedoStack[this.steps + 1].text, this.parent.editableElement.focus(), (0, common_util /* isIDevice */ .FA)() && (0, common_util /* setEditFrameFocus */ .ze)(this.parent.editableElement, e.selector), range.restore(), this.steps++, e.callBack && e.callBack({
                            requestType: 'Redo',
                            editorMode: 'HTML',
                            range: range,
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument),
                            event: e.event
                        });
                    }
                }, /**
     * getUndoStatus method
     *
     * @returns {boolean} - returns the boolean value
     * @hidden

     */ UndoRedoManager.prototype.getUndoStatus = function() {
                    var status = {
                        undo: !1,
                        redo: !1
                    };
                    return this.steps > 0 && (status.undo = !0), null != this.undoRedoStack[this.steps + 1] && (status.redo = !0), status;
                }, UndoRedoManager;
            }(), MsWordPaste = /** @class */ function() {
                function MsWordPaste(parent) {
                    this.olData = [
                        'decimal',
                        'lower-alpha',
                        'lower-roman',
                        'upper-alpha',
                        'upper-roman',
                        'lower-greek'
                    ], this.ulData = [
                        'disc',
                        'square',
                        'circle',
                        'disc',
                        'square',
                        'circle'
                    ], this.ignorableNodes = [
                        'A',
                        'APPLET',
                        'B',
                        'BLOCKQUOTE',
                        'BR',
                        'BUTTON',
                        'CENTER',
                        'CODE',
                        'COL',
                        'COLGROUP',
                        'DD',
                        'DEL',
                        'DFN',
                        'DIR',
                        'DIV',
                        'DL',
                        'DT',
                        'EM',
                        'FIELDSET',
                        'FONT',
                        'FORM',
                        'FRAME',
                        'FRAMESET',
                        'H1',
                        'H2',
                        'H3',
                        'H4',
                        'H5',
                        'H6',
                        'HR',
                        'I',
                        'IMG',
                        'IFRAME',
                        'INPUT',
                        'INS',
                        'LABEL',
                        'LI',
                        'OL',
                        'OPTION',
                        'P',
                        'PARAM',
                        'PRE',
                        'Q',
                        'S',
                        'SELECT',
                        'SPAN',
                        'STRIKE',
                        'STRONG',
                        'SUB',
                        'SUP',
                        'TABLE',
                        'TBODY',
                        'TD',
                        'TEXTAREA',
                        'TFOOT',
                        'TH',
                        'THEAD',
                        'TITLE',
                        'TR',
                        'TT',
                        'U',
                        'UL'
                    ], this.blockNode = [
                        'div',
                        'p',
                        'h1',
                        'h2',
                        'h3',
                        'h4',
                        'h5',
                        'h6',
                        'address',
                        'blockquote',
                        'button',
                        'center',
                        'dd',
                        'dir',
                        'dl',
                        'dt',
                        'fieldset',
                        'frameset',
                        'hr',
                        'iframe',
                        'isindex',
                        'li',
                        'map',
                        'menu',
                        'noframes',
                        'noscript',
                        'object',
                        'ol',
                        'pre',
                        'table',
                        'tbody',
                        'td',
                        'tfoot',
                        'th',
                        'thead',
                        'tr',
                        'ul',
                        'header',
                        'article',
                        'nav',
                        'footer',
                        'section',
                        'aside',
                        'main',
                        'figure',
                        'figcaption'
                    ], this.borderStyle = [
                        'border-top',
                        'border-right',
                        'border-bottom',
                        'border-left'
                    ], this.removableElements = [
                        'o:p',
                        'style'
                    ], this.listContents = [], this.parent = parent, this.addEventListener();
                }
                return MsWordPaste.prototype.addEventListener = function() {
                    this.parent.observer.on(common_constant /* MS_WORD_CLEANUP_PLUGIN */ .M, this.wordCleanup, this);
                }, MsWordPaste.prototype.wordCleanup = function(e) {
                    var wordPasteStyleConfig = (0, ej2_base /* isNullOrUndefined */ .le)(e.allowedStylePropertiesArray) ? [] : e.allowedStylePropertiesArray, listNodes = [], tempHTMLContent = e.args.clipboardData.getData('text/HTML'), rtfData = e.args.clipboardData.getData('text/rtf'), elm = (0, ej2_base /* createElement */ .az)('p');
                    elm.setAttribute('id', 'MSWord-Content'), elm.innerHTML = tempHTMLContent;
                    var pattern4 = /style='mso-width-source:/i;
                    (/class='?Mso|style='[^ ]*\bmso-/i.test(tempHTMLContent) || /class="?Mso|style="[^ ]*\bmso-/i.test(tempHTMLContent) || /(class="?Mso|class='?Mso|class="?Xl|class='?Xl|class=Xl|style="[^"]*\bmso-|style='[^']*\bmso-|w:WordDocument)/gi.test(tempHTMLContent) || pattern4.test(tempHTMLContent)) && (this.imageConversion(elm, rtfData), tempHTMLContent = tempHTMLContent.replace(/<img[^>]+>/i, ''), this.addListClass(elm), listNodes = this.cleanUp(elm, listNodes), (0, ej2_base /* isNullOrUndefined */ .le)(listNodes[0]) || 'UL' === listNodes[0].parentElement.tagName || 'OL' === listNodes[0].parentElement.tagName || this.listConverter(listNodes), this.styleCorrection(elm, wordPasteStyleConfig), this.removingComments(elm), this.removeUnwantedElements(elm), this.removeEmptyElements(elm), this.breakLineAddition(elm), this.removeClassName(elm), pattern4.test(tempHTMLContent) && this.addTableBorderClass(elm)), e.callBack(elm.innerHTML);
                }, MsWordPaste.prototype.addListClass = function(elm) {
                    for(var allNodes = elm.querySelectorAll('*'), index = 0; index < allNodes.length; index++)!(0, ej2_base /* isNullOrUndefined */ .le)(allNodes[index].getAttribute('style')) && allNodes[index].getAttribute('style').replace(/ /g, '').replace('\n', '').indexOf('mso-list:l') >= 0 && -1 === allNodes[index].className.toLowerCase().indexOf('msolistparagraph') && 'H' !== allNodes[index].tagName.charAt(0) && allNodes[index].classList.add('msolistparagraph');
                }, MsWordPaste.prototype.addTableBorderClass = function(elm) {
                    for(var allTableElm = elm.querySelectorAll('table'), hasTableBorder = !1, i = 0; i < allTableElm.length; i++){
                        for(var j = 0; j < this.borderStyle.length; j++)if (allTableElm[i].innerHTML.indexOf(this.borderStyle[j]) >= 0) {
                            hasTableBorder = !0;
                            break;
                        }
                        hasTableBorder && (allTableElm[i].classList.add('e-rte-table-border'), hasTableBorder = !1);
                    }
                }, MsWordPaste.prototype.imageConversion = function(elm, rtfData) {
                    this.checkVShape(elm);
                    for(var imgElem = elm.querySelectorAll('img'), i = 0; i < imgElem.length; i++)!(0, ej2_base /* isNullOrUndefined */ .le)(imgElem[i].getAttribute('v:shapes')) && 0 > imgElem[i].getAttribute('v:shapes').indexOf('Picture') && 0 > imgElem[i].getAttribute('v:shapes').indexOf('Image') && (0, ej2_base /* detach */ .og)(imgElem[i]);
                    imgElem = elm.querySelectorAll('img');
                    var imgSrc = [], base64Src = [], imgName = [], linkRegex = new RegExp(/([^\S]|^)(((https?\:\/\/)|(www\.))(\S+))/gi);
                    if (imgElem.length > 0) {
                        for(var i = 0; i < imgElem.length; i++)imgSrc.push(imgElem[i].getAttribute('src')), imgName.push(imgElem[i].getAttribute('src').split('/')[imgElem[i].getAttribute('src').split('/').length - 1].split('.')[0]);
                        for(var hexValue = this.hexConversion(rtfData), i = 0; i < hexValue.length; i++)base64Src.push(this.convertToBase64(hexValue[i]));
                        for(var i = 0; i < imgElem.length; i++)imgSrc[i].match(linkRegex) ? imgElem[i].setAttribute('src', imgSrc[i]) : imgElem[i].setAttribute('src', base64Src[i]), imgElem[i].setAttribute('id', 'msWordImg-' + imgName[i]);
                    }
                }, MsWordPaste.prototype.checkVShape = function(elm) {
                    for(var allNodes = elm.querySelectorAll('*'), i = 0; i < allNodes.length; i++)switch(allNodes[i].nodeName){
                        case 'V:SHAPETYPE':
                            (0, ej2_base /* detach */ .og)(allNodes[i]);
                            break;
                        case 'V:SHAPE':
                            if ('V:IMAGEDATA' === allNodes[i].firstElementChild.nodeName) {
                                var src = allNodes[i].firstElementChild.getAttribute('src'), imgElement = (0, ej2_base /* createElement */ .az)('img');
                                imgElement.setAttribute('src', src), allNodes[i].parentElement.insertBefore(imgElement, allNodes[i]), (0, ej2_base /* detach */ .og)(allNodes[i]);
                            }
                    }
                }, MsWordPaste.prototype.convertToBase64 = function(hexValue) {
                    var byteArr = this.conHexStringToBytes(hexValue.hex), base64String = this.conBytesToBase64(byteArr);
                    return hexValue.type ? 'data:' + hexValue.type + ';base64,' + base64String : null;
                }, MsWordPaste.prototype.conBytesToBase64 = function(byteArr) {
                    for(var base64Str = '', byteArrLen = byteArr.length, i = 0; i < byteArrLen; i += 3){
                        var array3 = byteArr.slice(i, i + 3), array3length = array3.length, array4 = [];
                        if (array3length < 3) for(var j = array3length; j < 3; j++)array3[j] = 0;
                        array4[0] = (0xFC & array3[0]) >> 2, array4[1] = (0x03 & array3[0]) << 4 | array3[1] >> 4, array4[2] = (0x0F & array3[1]) << 2 | (0xC0 & array3[2]) >> 6, array4[3] = 0x3F & array3[2];
                        for(var j = 0; j < 4; j++)j <= array3length ? base64Str += 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.charAt(array4[j]) : base64Str += '=';
                    }
                    return base64Str;
                }, MsWordPaste.prototype.conHexStringToBytes = function(hex) {
                    for(var byteArr = [], byteArrLen = hex.length / 2, i = 0; i < byteArrLen; i++)byteArr.push(parseInt(hex.substr(2 * i, 2), 16));
                    return byteArr;
                }, MsWordPaste.prototype.hexConversion = function(rtfData) {
                    // eslint-disable-next-line
                    var imgType, picHead = /\{\\pict[\s\S]+?\\bliptag\-?\d+(\\blipupi\-?\d+)?(\{\\\*\\blipuid\s?[\da-fA-F]+)?[\s\}]*?/, pic = RegExp('(?:(' + picHead.source + '))([\\da-fA-F\\s]+)\\}', 'g'), fullImg = rtfData.match(pic), result = [];
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(fullImg)) {
                        for(var i = 0; i < fullImg.length; i++)if (picHead.test(fullImg[i])) {
                            if (-1 !== fullImg[i].indexOf('\\pngblip')) imgType = 'image/png';
                            else {
                                if (-1 === fullImg[i].indexOf('\\jpegblip')) continue;
                                imgType = 'image/jpeg';
                            }
                            result.push({
                                hex: imgType ? fullImg[i].replace(picHead, '').replace(/[^\da-fA-F]/g, '') : null,
                                type: imgType
                            });
                        }
                    }
                    return result;
                }, MsWordPaste.prototype.removeClassName = function(elm) {
                    for(var elmWithClass = elm.querySelectorAll('*[class]'), i = 0; i < elmWithClass.length; i++)elmWithClass[i].removeAttribute('class');
                }, MsWordPaste.prototype.breakLineAddition = function(elm) {
                    for(var allElements = elm.querySelectorAll('*'), i = 0; i < allElements.length; i++)if (0 === allElements[i].children.length && '&nbsp;' === allElements[i].innerHTML && '&nbsp;' === allElements[i].innerHTML && !allElements[i].closest('li') && !allElements[i].closest('td')) {
                        var detachableElement = this.findDetachElem(allElements[i]), brElement = (0, ej2_base /* createElement */ .az)('br');
                        (0, ej2_base /* isNullOrUndefined */ .le)(detachableElement.parentElement) || (detachableElement.parentElement.insertBefore(brElement, detachableElement), (0, ej2_base /* detach */ .og)(detachableElement));
                    }
                }, MsWordPaste.prototype.findDetachElem = function(element) {
                    return !(0, ej2_base /* isNullOrUndefined */ .le)(element.parentElement) && '' === element.parentElement.textContent.trim() && 'TD' !== element.parentElement.tagName && (0, ej2_base /* isNullOrUndefined */ .le)(element.parentElement.querySelector('img')) ? this.findDetachElem(element.parentElement) : element;
                }, MsWordPaste.prototype.removeUnwantedElements = function(elm) {
                    for(var innerElement = elm.innerHTML, i = 0; i < this.removableElements.length; i++){
                        var regExpStartElem = RegExp('<' + this.removableElements[i] + '>', 'g'), regExpEndElem = RegExp('</' + this.removableElements[i] + '>', 'g');
                        innerElement = (innerElement = innerElement.replace(regExpStartElem, '')).replace(regExpEndElem, '');
                    }
                    elm.innerHTML = innerElement, elm.querySelectorAll(':empty');
                }, MsWordPaste.prototype.findDetachEmptyElem = function(element) {
                    return (0, ej2_base /* isNullOrUndefined */ .le)(element.parentElement) ? null : '' === element.parentElement.textContent.trim() && 'MSWord-Content' !== element.parentElement.getAttribute('id') && (0, ej2_base /* isNullOrUndefined */ .le)(element.parentElement.querySelector('img')) ? this.findDetachEmptyElem(element.parentElement) : element;
                }, MsWordPaste.prototype.removeEmptyElements = function(element) {
                    for(var emptyElements = element.querySelectorAll(':empty'), i = 0; i < emptyElements.length; i++)if ((0, ej2_base /* isNullOrUndefined */ .le)(emptyElements[i].closest('td')) || (0, ej2_base /* isNullOrUndefined */ .le)(emptyElements[i].closest('td').querySelector('.MsoNormal')) || (emptyElements[i].innerHTML = '-'), 'IMG' !== emptyElements[i].tagName && 'BR' !== emptyElements[i].tagName && 'IFRAME' !== emptyElements[i].tagName && 'TD' !== emptyElements[i].tagName && 'HR' !== emptyElements[i].tagName) {
                        var detachableElement = this.findDetachEmptyElem(emptyElements[i]);
                        (0, ej2_base /* isNullOrUndefined */ .le)(detachableElement) || (0, ej2_base /* detach */ .og)(detachableElement);
                    }
                }, MsWordPaste.prototype.styleCorrection = function(elm, wordPasteStyleConfig) {
                    var styleElement = elm.querySelectorAll('style');
                    if (styleElement.length > 0) {
                        var styles = styleElement[0].innerHTML.match(/[\S ]+\s+{[\s\S]+?}/gi), styleClassObject_1 = (0, ej2_base /* isNullOrUndefined */ .le)(styles) ? null : this.findStyleObject(styles), keys = Object.keys(styleClassObject_1), values = keys.map(function(key) {
                            return styleClassObject_1[key];
                        });
                        values = this.removeUnwantedStyle(values, wordPasteStyleConfig), this.filterStyles(elm, wordPasteStyleConfig);
                        for(var resultElem = void 0, fromClass = !1, i = 0; i < keys.length; i++){
                            if ('' === keys[i].split('.')[0]) resultElem = elm.getElementsByClassName(keys[i].split('.')[1]), fromClass = !0;
                            else {
                                if (1 === keys[i].split('.').length && keys[i].split('.')[0].indexOf('@') >= 0) continue;
                                resultElem = 1 === keys[i].split('.').length && 0 > keys[i].split('.')[0].indexOf('@') ? elm.getElementsByTagName(keys[i]) : elm.querySelectorAll(keys[i]);
                            }
                            for(var j = 0; j < resultElem.length; j++){
                                var styleProperty = resultElem[j].getAttribute('style');
                                if ((0, ej2_base /* isNullOrUndefined */ .le)(styleProperty) || '' === styleProperty.trim()) values[i] = values[i].replace(/text-indent:-(.*?)(?=;|$)/gm, ''), resultElem[j].setAttribute('style', values[i]);
                                else {
                                    var valueSplit = values[i].split(';');
                                    if (!fromClass) for(var k = 0; k < valueSplit.length; k++)styleProperty.indexOf(valueSplit[k].split(':')[0]) >= 0 && (valueSplit.splice(k, 1), k--);
                                    values[i] = valueSplit.join(';') + ';';
                                    var changedValue = styleProperty + values[i];
                                    resultElem[j].setAttribute('style', changedValue);
                                }
                            }
                            fromClass = !1;
                        }
                    }
                }, MsWordPaste.prototype.filterStyles = function(elm, wordPasteStyleConfig) {
                    for(var elmWithStyles = elm.querySelectorAll('*[style]'), i = 0; i < elmWithStyles.length; i++){
                        for(var elemStyleProperty = elmWithStyles[i].getAttribute('style').split(';'), styleValue = '', j = 0; j < elemStyleProperty.length; j++)wordPasteStyleConfig.indexOf(elemStyleProperty[j].split(':')[0].trim()) >= 0 && (styleValue += elemStyleProperty[j] + ';');
                        elmWithStyles[i].setAttribute('style', styleValue);
                    }
                }, MsWordPaste.prototype.removeUnwantedStyle = function(values, wordPasteStyleConfig) {
                    for(var i = 0; i < values.length; i++){
                        var styleValues = values[i].split(';');
                        values[i] = '';
                        for(var j = 0; j < styleValues.length; j++)wordPasteStyleConfig.indexOf(styleValues[j].split(':')[0]) >= 0 && (values[i] += styleValues[j] + ';');
                    }
                    return values;
                }, MsWordPaste.prototype.findStyleObject = function(styles) {
                    for(var styleClassObject = {}, i = 0; i < styles.length; i++){
                        var tempStyle = styles[i], classNameCollection = tempStyle.replace(/([\S ]+\s+){[\s\S]+?}/gi, '$1'), stylesCollection = tempStyle.replace(/[\S ]+\s+{([\s\S]+?)}/gi, '$1');
                        classNameCollection = classNameCollection.replace(/^[\s]|[\s]$/gm, ''), stylesCollection = stylesCollection.replace(/^[\s]|[\s]$/gm, ''), classNameCollection = classNameCollection.replace(/\n|\r|\n\r/g, ''), stylesCollection = stylesCollection.replace(/\n|\r|\n\r/g, '');
                        for(var classNames = classNameCollection.split(', '), j = 0; j < classNames.length; j++)styleClassObject[classNames[j]] = stylesCollection;
                    }
                    return styleClassObject;
                }, MsWordPaste.prototype.removingComments = function(elm) {
                    var innerElement = elm.innerHTML;
                    innerElement = innerElement.replace(/<!--[\s\S]*?-->/g, ''), elm.innerHTML = innerElement;
                }, MsWordPaste.prototype.cleanUp = function(node, listNodes) {
                    for(var prevflagState, tempCleaner = [], allNodes = node.querySelectorAll('*'), index = 0; index < allNodes.length; index++){
                        if (-1 === this.ignorableNodes.indexOf(allNodes[index].nodeName) || 3 === allNodes[index].nodeType && '' === allNodes[index].textContent.trim()) {
                            tempCleaner.push(allNodes[index]);
                            continue;
                        }
                        allNodes[index].className && -1 !== allNodes[index].className.toLowerCase().indexOf('msolistparagraph') && 1 !== allNodes[index].childElementCount && !(0, ej2_base /* isNullOrUndefined */ .le)(allNodes[index].getAttribute('style')) && allNodes[index].getAttribute('style').indexOf('mso-list:') >= 0 && (allNodes[index].className.indexOf('MsoListParagraphCxSpFirst') >= 0 && listNodes.length > 0 && null !== listNodes[listNodes.length - 1] && listNodes.push(null), listNodes.push(allNodes[index])), prevflagState && -1 !== this.blockNode.indexOf(allNodes[index].nodeName.toLowerCase()) && !(allNodes[index].className && -1 !== allNodes[index].className.toLowerCase().indexOf('msolistparagraph') && !(0, ej2_base /* isNullOrUndefined */ .le)(allNodes[index].getAttribute('style')) && allNodes[index].getAttribute('style').indexOf('mso-list:') >= 0) && listNodes.push(null), -1 !== this.blockNode.indexOf(allNodes[index].nodeName.toLowerCase()) && (prevflagState = !!(allNodes[index].className && -1 !== allNodes[index].className.toLowerCase().indexOf('msolistparagraph') && !(0, ej2_base /* isNullOrUndefined */ .le)(allNodes[index].getAttribute('style')) && allNodes[index].getAttribute('style').indexOf('mso-list:') >= 0));
                    }
                    return listNodes.length && null !== listNodes[listNodes.length - 1] && listNodes.push(null), listNodes;
                }, MsWordPaste.prototype.listConverter = function(listNodes) {
                    for(var level, stNode, data = [], collection = [], content = '', currentListStyle = '', i = 0; i < listNodes.length; i++){
                        if (null === listNodes[i]) {
                            data.push({
                                content: this.makeConversion(collection),
                                node: listNodes[i - 1]
                            }), collection = [];
                            continue;
                        }
                        listNodes[i].getAttribute('style') && -1 !== listNodes[i].getAttribute('style').indexOf('mso-outline-level') && listNodes[i].setAttribute('style', listNodes[i].getAttribute('style').replace('mso-outline-level', 'mso-outline')), // eslint-disable-next-line
                        level = (content = listNodes[i].getAttribute('style')) && -1 !== content.indexOf('level') ? parseInt(content.charAt(content.indexOf('level') + 5), null) : 1, this.listContents = [], this.getListContent(listNodes[i]);
                        var type = void 0, listStyleType = void 0;
                        if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.listContents[0])) {
                            type = this.listContents[0].trim().length > 1 ? 'ol' : 'ul', listStyleType = this.getlistStyleType(this.listContents[0], type);
                            for(var tempNode = [], j = 1; j < this.listContents.length; j++)tempNode.push(this.listContents[j]);
                            var currentClassName = void 0;
                            (0, ej2_base /* isNullOrUndefined */ .le)(listNodes[i].className) || (currentClassName = listNodes[i].className), (0, ej2_base /* isNullOrUndefined */ .le)(listNodes[i].getAttribute('style')) || (listNodes[i].setAttribute('style', listNodes[i].getAttribute('style').replace('text-align:start;', '')), '' !== listNodes[i].style.textAlign && (listNodes[i].setAttribute('style', 'text-align:' + listNodes[i].style.textAlign), currentListStyle = listNodes[i].getAttribute('style'))), collection.push({
                                listType: type,
                                content: tempNode,
                                nestedLevel: level,
                                class: currentClassName,
                                listStyle: currentListStyle,
                                listStyleTypeName: listStyleType
                            });
                        }
                    }
                    for(stNode = listNodes.shift(); stNode;){
                        for(var elemColl = [], temp1 = 0; temp1 < data.length; temp1++)if (data[temp1].node === stNode) {
                            for(var index = 0; index < data[temp1].content.childNodes.length; index++)elemColl.push(data[temp1].content.childNodes[index]);
                            for(var index = 0; index < elemColl.length; index++)stNode.parentElement.insertBefore(elemColl[index], stNode);
                            break;
                        }
                        stNode.remove(), (stNode = listNodes.shift()) || (stNode = listNodes.shift());
                    }
                }, MsWordPaste.prototype.getlistStyleType = function(listContent, type) {
                    var currentListClass;
                    if ('ol' === type) switch(listContent.split('.')[0]){
                        case "A":
                            currentListClass = "upper-alpha";
                            break;
                        case "a":
                            currentListClass = "lower-alpha";
                            break;
                        case "I":
                            currentListClass = "upper-roman";
                            break;
                        case "i":
                            currentListClass = "lower-roman";
                            break;
                        case "α":
                            currentListClass = "lower-greek";
                            break;
                        default:
                            currentListClass = "decimal";
                    }
                    else switch(listContent.split('.')[0]){
                        case "o":
                            currentListClass = "circle";
                            break;
                        case "§":
                            currentListClass = "square";
                            break;
                        default:
                            currentListClass = "disc";
                    }
                    return currentListClass;
                }, MsWordPaste.prototype.makeConversion = function(collection) {
                    for(var temp, prevList, elem, root = (0, ej2_base /* createElement */ .az)('div'), pLevel = 1, listCount = 0, index = 0; index < collection.length; index++){
                        var pElement = (0, ej2_base /* createElement */ .az)('p');
                        if (pElement.innerHTML = collection[index].content.join(' '), 1 === collection[index].nestedLevel && 0 === listCount && collection[index].content) root.appendChild(temp = (0, ej2_base /* createElement */ .az)(collection[index].listType)), (prevList = (0, ej2_base /* createElement */ .az)('li')).appendChild(pElement), temp.appendChild(prevList), temp.setAttribute('level', collection[index].nestedLevel.toString()), temp.style.listStyleType = collection[index].listStyleTypeName;
                        else if (collection[index].nestedLevel === pLevel) prevList.parentElement.tagName.toLowerCase() === collection[index].listType ? (prevList.parentElement.appendChild(prevList = (0, ej2_base /* createElement */ .az)('li')), prevList.appendChild(pElement)) : ((temp = (0, ej2_base /* createElement */ .az)(collection[index].listType)).style.listStyleType = collection[index].listStyleTypeName, prevList.parentElement.parentElement.appendChild(temp), (prevList = (0, ej2_base /* createElement */ .az)('li')).appendChild(pElement), temp.appendChild(prevList), temp.setAttribute('level', collection[index].nestedLevel.toString()));
                        else if (collection[index].nestedLevel > pLevel) {
                            if ((0, ej2_base /* isNullOrUndefined */ .le)(prevList)) root.appendChild(temp = (0, ej2_base /* createElement */ .az)(collection[index].listType)), (prevList = (0, ej2_base /* createElement */ .az)('li')).appendChild(pElement), temp.appendChild(prevList), temp.setAttribute('level', collection[index].nestedLevel.toString()), temp.style.listStyleType = collection[index].listStyleTypeName;
                            else {
                                for(var j = 0; j < collection[index].nestedLevel - pLevel; j++)prevList.appendChild(temp = (0, ej2_base /* createElement */ .az)(collection[index].listType)), prevList = (0, ej2_base /* createElement */ .az)('li'), j != collection[index].nestedLevel - pLevel - 1 && collection[index].nestedLevel - pLevel > 1 && (prevList.style.listStyleType = "none"), temp.appendChild(prevList);
                                prevList.appendChild(pElement), temp.setAttribute('level', collection[index].nestedLevel.toString()), temp.style.listStyleType = collection[index].listStyleTypeName;
                            }
                        } else if (1 === collection[index].nestedLevel) root.lastChild.tagName.toLowerCase() === collection[index].listType ? temp = root.lastChild : (root.appendChild(temp = (0, ej2_base /* createElement */ .az)(collection[index].listType)), temp.style.listStyleType = collection[index].listStyleTypeName), (prevList = (0, ej2_base /* createElement */ .az)('li')).appendChild(pElement), temp.appendChild(prevList), temp.setAttribute('level', collection[index].nestedLevel.toString());
                        else for(elem = prevList; elem.parentElement;)if ((elem = elem.parentElement).attributes.getNamedItem('level')) {
                            // eslint-disable-next-line
                            if (parseInt(elem.attributes.getNamedItem('level').textContent, null) === collection[index].nestedLevel) {
                                (prevList = (0, ej2_base /* createElement */ .az)('li')).appendChild(pElement), elem.appendChild(prevList);
                                break;
                            // eslint-disable-next-line
                            }
                            if (collection[index].nestedLevel > parseInt(elem.attributes.getNamedItem('level').textContent, null)) {
                                elem.appendChild(temp = (0, ej2_base /* createElement */ .az)(collection[index].listType)), (prevList = (0, ej2_base /* createElement */ .az)('li')).appendChild(pElement), temp.appendChild(prevList), temp.setAttribute('level', collection[index].nestedLevel.toString()), temp.style.listStyleType = collection[index].listStyleTypeName;
                                break;
                            }
                        }
                        prevList.setAttribute('class', collection[index].class);
                        var currentStyle = prevList.getAttribute('style');
                        prevList.setAttribute('style', (0, ej2_base /* isNullOrUndefined */ .le)(currentStyle) ? '' : currentStyle), pLevel = collection[index].nestedLevel, listCount++;
                    }
                    return root;
                }, MsWordPaste.prototype.getListContent = function(elem) {
                    var pushContent = '', firstChild = elem.firstElementChild;
                    if ('' !== firstChild.textContent.trim() || (0, ej2_base /* isNullOrUndefined */ .le)(firstChild.firstElementChild) || 'IMG' !== firstChild.firstElementChild.nodeName) {
                        var styleNodes = [
                            'b',
                            'em'
                        ];
                        if (firstChild.childNodes.length > 0 && (firstChild.querySelectorAll('b').length > 0 || firstChild.querySelectorAll('em').length > 0)) for(var i = 0; i < firstChild.childNodes.length; i++){
                            var nodeName = firstChild.childNodes[i].nodeName.toLowerCase();
                            firstChild.childNodes[i].textContent.trim().length > 1 && -1 !== styleNodes.indexOf(nodeName) ? (pushContent = '<' + nodeName + '>' + firstChild.childNodes[i].textContent + '</' + nodeName + '>', this.listContents.push(pushContent)) : 1 === firstChild.childNodes[i].textContent.trim().length && this.listContents.push(firstChild.childNodes[i].textContent.trim());
                        }
                        else pushContent = firstChild.textContent.trim(), this.listContents.push(pushContent);
                    } else pushContent = elem.innerHTML.trim(), this.listContents.push(''), this.listContents.push(pushContent);
                    (0, ej2_base /* detach */ .og)(firstChild), this.listContents.push(elem.innerHTML);
                }, MsWordPaste;
            }(), InsertTextExec = /** @class */ function() {
                /**
     * Constructor for creating the InsertText plugin
     *
     * @param {EditorManager} parent - specifies the parent element
     * @hidden

     */ function InsertTextExec(parent) {
                    this.parent = parent, this.addEventListener();
                }
                return InsertTextExec.prototype.addEventListener = function() {
                    this.parent.observer.on(INSERT_TEXT_TYPE, this.insertText, this);
                }, InsertTextExec.prototype.insertText = function(e) {
                    var node = document.createTextNode(e.value);
                    InsertHtml.Insert(this.parent.currentDocument, node, this.parent.editableElement), e.callBack && e.callBack({
                        requestType: e.subCommand,
                        editorMode: 'HTML',
                        event: e.event,
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                    });
                }, InsertTextExec;
            }(), EditorManager = /** @class */ function() {
                /**
     * Constructor for creating the component
     *
     * @hidden

     * @param {ICommandModel} options - specifies the command Model
     */ function EditorManager(options) {
                    this.currentDocument = options.document, this.editableElement = options.editableElement, this.nodeSelection = new selection /* NodeSelection */ .q(), this.nodeCutter = new NodeCutter(), this.domNode = new DOMNode(this.editableElement, this.currentDocument), this.observer = new ej2_base /* Observer */ .Qj(this), this.listObj = new Lists(this), this.formatObj = new Formats(this), this.alignmentObj = new Alignments(this), this.indentsObj = new Indents(this), this.linkObj = new LinkCommand(this), this.imgObj = new ImageCommand(this), this.selectionObj = new SelectionBasedExec(this), this.inserthtmlObj = new InsertHtmlExec(this), this.insertTextObj = new InsertTextExec(this), this.clearObj = new ClearFormatExec(this), this.tableObj = new TableCommand(this), this.undoRedoManager = new UndoRedoManager(this, options.options), this.msWordPaste = new MsWordPaste(this), this.wireEvents();
                }
                return EditorManager.prototype.wireEvents = function() {
                    this.observer.on(common_constant /* KEY_DOWN */ .Hb, this.editorKeyDown, this), this.observer.on(common_constant /* KEY_UP */ .R4, this.editorKeyUp, this), this.observer.on(common_constant /* KEY_UP */ .R4, this.editorKeyUp, this), this.observer.on(common_constant /* MODEL_CHANGED */ .kR, this.onPropertyChanged, this), this.observer.on(common_constant /* MS_WORD_CLEANUP */ .Ki, this.onWordPaste, this), this.observer.on(common_constant /* ON_BEGIN */ .O6, this.onBegin, this);
                }, EditorManager.prototype.onWordPaste = function(e) {
                    this.observer.notify(common_constant /* MS_WORD_CLEANUP_PLUGIN */ .M, e);
                }, EditorManager.prototype.onPropertyChanged = function(props) {
                    this.observer.notify(common_constant /* MODEL_CHANGED_PLUGIN */ .hL, props);
                }, EditorManager.prototype.editorKeyDown = function(e) {
                    this.observer.notify(common_constant /* KEY_DOWN_HANDLER */ .kT, e);
                }, EditorManager.prototype.editorKeyUp = function(e) {
                    this.observer.notify(common_constant /* KEY_UP_HANDLER */ .My, e);
                }, EditorManager.prototype.onBegin = function(e) {
                    this.observer.notify(common_constant /* SPACE_ACTION */ .nD, e);
                }, /* eslint-disable */ /**
     * execCommand
     *
     * @param {ExecCommand} command - specifies the execution command
     * @param {T} value - specifes the value.
     * @param {Event} event - specifies the call back event
     * @param {Function} callBack - specifies the function
     * @param {string} text - specifies the string value
     * @param {T} exeValue - specifies the values to be executed
     * @param {string} selector - specifies the selector values
     * @returns {void}
     * @hidden

     */ /* eslint-enable */ EditorManager.prototype.execCommand = function(command, value, event, callBack, text, exeValue, selector, enterAction) {
                    switch(command.toLowerCase()){
                        case 'lists':
                            this.observer.notify(common_constant /* LIST_TYPE */ .PV, {
                                subCommand: value,
                                event: event,
                                callBack: callBack,
                                selector: selector,
                                item: exeValue,
                                enterAction: enterAction
                            });
                            break;
                        case 'formats':
                            this.observer.notify(common_constant /* FORMAT_TYPE */ .Kj, {
                                subCommand: value,
                                event: event,
                                callBack: callBack,
                                selector: selector,
                                exeValue: exeValue,
                                enterAction: enterAction
                            });
                            break;
                        case 'alignments':
                            this.observer.notify(ALIGNMENT_TYPE, {
                                subCommand: value,
                                event: event,
                                callBack: callBack,
                                selector: selector,
                                value: exeValue
                            });
                            break;
                        case 'indents':
                            this.observer.notify(INDENT_TYPE, {
                                subCommand: value,
                                event: event,
                                callBack: callBack,
                                selector: selector
                            });
                            break;
                        case 'links':
                            this.observer.notify(LINK, {
                                command: command,
                                value: value,
                                item: exeValue,
                                event: event,
                                callBack: callBack
                            });
                            break;
                        case 'files':
                            this.observer.notify(IMAGE, {
                                command: command,
                                value: 'Image',
                                item: exeValue,
                                event: event,
                                callBack: callBack,
                                selector: selector
                            });
                            break;
                        case 'images':
                            this.observer.notify(IMAGE, {
                                command: command,
                                value: value,
                                item: exeValue,
                                event: event,
                                callBack: callBack,
                                selector: selector
                            });
                            break;
                        case 'table':
                            switch(value.toString().toLocaleLowerCase()){
                                case 'createtable':
                                    this.observer.notify(TABLE, {
                                        item: exeValue,
                                        event: event,
                                        callBack: callBack,
                                        enterAction: enterAction
                                    });
                                    break;
                                case 'insertrowbefore':
                                case 'insertrowafter':
                                    this.observer.notify(INSERT_ROW, {
                                        item: exeValue,
                                        event: event,
                                        callBack: callBack
                                    });
                                    break;
                                case 'insertcolumnleft':
                                case 'insertcolumnright':
                                    this.observer.notify(INSERT_COLUMN, {
                                        item: exeValue,
                                        event: event,
                                        callBack: callBack
                                    });
                                    break;
                                case 'deleterow':
                                    this.observer.notify(DELETEROW, {
                                        item: exeValue,
                                        event: event,
                                        callBack: callBack
                                    });
                                    break;
                                case 'deletecolumn':
                                    this.observer.notify(DELETECOLUMN, {
                                        item: exeValue,
                                        event: event,
                                        callBack: callBack
                                    });
                                    break;
                                case 'tableremove':
                                    this.observer.notify(REMOVETABLE, {
                                        item: exeValue,
                                        event: event,
                                        callBack: callBack
                                    });
                                    break;
                                case 'tableheader':
                                    this.observer.notify(TABLEHEADER, {
                                        item: exeValue,
                                        event: event,
                                        callBack: callBack
                                    });
                                    break;
                                case 'aligntop':
                                case 'alignmiddle':
                                case 'alignbottom':
                                    this.observer.notify(TABLE_VERTICAL_ALIGN, {
                                        item: exeValue,
                                        event: event,
                                        callBack: callBack
                                    });
                                    break;
                                case 'merge':
                                    this.observer.notify(TABLE_MERGE, {
                                        item: exeValue,
                                        event: event,
                                        callBack: callBack
                                    });
                                    break;
                                case 'horizontalsplit':
                                    this.observer.notify(TABLE_HORIZONTAL_SPLIT, {
                                        item: exeValue,
                                        event: event,
                                        callBack: callBack
                                    });
                                    break;
                                case 'verticalsplit':
                                    this.observer.notify(TABLE_VERTICAL_SPLIT, {
                                        item: exeValue,
                                        event: event,
                                        callBack: callBack
                                    });
                            }
                            break;
                        case 'font':
                        case 'style':
                        case 'effects':
                        case 'casing':
                            this.observer.notify(SELECTION_TYPE, {
                                subCommand: value,
                                event: event,
                                callBack: callBack,
                                value: text,
                                selector: selector,
                                enterAction: enterAction
                            });
                            break;
                        case 'inserthtml':
                            this.observer.notify(INSERTHTML_TYPE, {
                                subCommand: value,
                                callBack: callBack,
                                value: text
                            });
                            break;
                        case 'inserttext':
                            this.observer.notify(INSERT_TEXT_TYPE, {
                                subCommand: value,
                                callBack: callBack,
                                value: text
                            });
                            break;
                        case 'clear':
                            this.observer.notify(CLEAR_TYPE, {
                                subCommand: value,
                                event: event,
                                callBack: callBack,
                                selector: selector,
                                enterAction: enterAction
                            });
                            break;
                        case 'actions':
                            this.observer.notify(common_constant /* ACTION */ .om, {
                                subCommand: value,
                                event: event,
                                callBack: callBack,
                                selector: selector
                            });
                    }
                }, EditorManager;
            }(), __extends = (extendStatics = function(d, b) {
                return (extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), HTMLFormatter = /** @class */ function(_super) {
                function HTMLFormatter(options) {
                    var _this = _super.call(this) || this;
                    return _this.initialize(), (0, ej2_base /* extend */ .l7)(_this, _this, options, !0), _this.currentDocument && _this.element && _this.updateFormatter(_this.element, _this.currentDocument, options.options), _this;
                }
                return __extends(HTMLFormatter, _super), HTMLFormatter.prototype.initialize = function() {
                    this.keyConfig = config /* htmlKeyConfig */ .qW;
                }, /**
     * Update the formatter of RichTextEditor
     *
     * @param  {Element} editElement - specifies the edit element.
     * @param  {Document} doc - specifies the doucment
     * @param {number} options - specifies the options
     * @returns {void}
     * @hidden

     */ HTMLFormatter.prototype.updateFormatter = function(editElement, doc, options) {
                    editElement && doc && (this.editorManager = new EditorManager({
                        document: doc,
                        editableElement: editElement,
                        options: options
                    }));
                }, HTMLFormatter;
            }(Formatter), base_enum = __webpack_require__(809), classes = __webpack_require__(9805), statusCollection = (0, common_util /* getDefaultHtmlTbStatus */ .q_)(), ToolbarStatus = /** @class */ function() {
                function ToolbarStatus() {}
                return(/**
     * get method
     *
     * @param {Document} docElement - specifies the document element
     * @param {Node} targetNode - specifies the target node
     * @param {string[]} formatNode - specifies the format node
     * @param {string[]} fontSize - specifies the font size
     * @param {string[]} fontName - specifies the font name.
     * @param {Node} documentNode - specifies the document node.
     * @returns {IToolbarStatus} - returns the toolbar status
     * @hidden

     */ ToolbarStatus.get = function(docElement, targetNode, formatNode, fontSize, fontName, documentNode) {
                    for(var formatCollection = JSON.parse(JSON.stringify(statusCollection)), nodeCollection = JSON.parse(JSON.stringify(statusCollection)), nodeSelection = new selection /* NodeSelection */ .q(), nodes = documentNode ? [
                        documentNode
                    ] : nodeSelection.getNodeCollection(nodeSelection.getRange(docElement)), nodesLength = nodes.length, isNodeChanged = !1, range = nodeSelection.getRange(docElement), index = 0; index < nodes.length; index++){
                        for(; 3 === nodes[index].nodeType && 3 === range.startContainer.nodeType && nodes[index].parentNode && nodes[index].parentNode.lastElementChild && 'BR' !== nodes[index].parentNode.lastElementChild.nodeName && 0 === this.getImmediateBlockNode(nodes[index].parentNode).textContent.replace(/\u200B/g, '').length && 0 === range.startContainer.textContent.replace(/\u200B/g, '').length && 0 === nodeSelection.get(docElement).toString().replace(/\u200B/g, '').length;)nodes[index] = nodes[index].parentNode.lastElementChild.firstChild, isNodeChanged = !0;
                        isNodeChanged && nodes[index] && (nodeSelection.setCursorPoint(docElement, nodes[index], nodes[index].textContent.length), isNodeChanged = !1), ('BR' !== nodes[index].nodeName && 3 !== nodes[index].nodeType || nodesLength > 1 && 3 === nodes[index].nodeType && '' === nodes[index].textContent.trim()) && (nodes.splice(index, 1), index--);
                    }
                    for(var index = 0; index < nodes.length; index++)formatCollection = this.getFormatParent(docElement, formatCollection, nodes[index], targetNode, formatNode, fontSize, fontName), (0 === index && formatCollection.bold || !formatCollection.bold) && (nodeCollection.bold = formatCollection.bold), (0 === index && formatCollection.insertcode || !formatCollection.insertcode) && (nodeCollection.insertcode = formatCollection.insertcode), (0 === index && formatCollection.italic || !formatCollection.italic) && (nodeCollection.italic = formatCollection.italic), (0 === index && formatCollection.underline || !formatCollection.underline) && (nodeCollection.underline = formatCollection.underline), (0 === index && formatCollection.strikethrough || !formatCollection.strikethrough) && (nodeCollection.strikethrough = formatCollection.strikethrough), (0 === index && formatCollection.superscript || !formatCollection.superscript) && (nodeCollection.superscript = formatCollection.superscript), (0 === index && formatCollection.subscript || !formatCollection.subscript) && (nodeCollection.subscript = formatCollection.subscript), (0 === index && formatCollection.fontcolor || !formatCollection.fontcolor) && (nodeCollection.fontcolor = formatCollection.fontcolor), (0 === index && formatCollection.fontname || !formatCollection.fontname) && (nodeCollection.fontname = formatCollection.fontname), (0 === index && formatCollection.fontsize || !formatCollection.fontsize) && (nodeCollection.fontsize = formatCollection.fontsize), (0 === index && formatCollection.backgroundcolor || !formatCollection.backgroundcolor) && (nodeCollection.backgroundcolor = formatCollection.backgroundcolor), (0 === index && formatCollection.orderedlist || !formatCollection.orderedlist) && (nodeCollection.orderedlist = formatCollection.orderedlist), (0 === index && formatCollection.unorderedlist || !formatCollection.unorderedlist) && (nodeCollection.unorderedlist = formatCollection.unorderedlist), (0 === index && formatCollection.alignments || !formatCollection.alignments) && (nodeCollection.alignments = formatCollection.alignments), (0 === index && formatCollection.formats || !formatCollection.formats) && (nodeCollection.formats = formatCollection.formats), (0 === index && formatCollection.createlink || !formatCollection.createlink) && (nodeCollection.createlink = formatCollection.createlink), (0 === index && formatCollection.numberFormatList || !formatCollection.numberFormatList) && (nodeCollection.numberFormatList = formatCollection.numberFormatList), (0 === index && formatCollection.bulletFormatList || !formatCollection.bulletFormatList) && (nodeCollection.bulletFormatList = formatCollection.bulletFormatList), formatCollection = JSON.parse(JSON.stringify(statusCollection));
                    return nodeCollection;
                }, ToolbarStatus.getImmediateBlockNode = function(node) {
                    do node = node.parentNode;
                    while (node && 0 > BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()))
                    return node;
                }, ToolbarStatus.getFormatParent = function(docElement, formatCollection, node, targetNode, formatNode, fontSize, fontName) {
                    if (targetNode.contains(node) || 3 === node.nodeType && 3 !== targetNode.nodeType && targetNode.contains(node.parentNode)) do formatCollection = this.isFormattedNode(docElement, formatCollection, node, formatNode, fontSize, fontName), node = node.parentNode;
                    while (node && node !== targetNode)
                    return formatCollection;
                }, ToolbarStatus.isFormattedNode = function(docElement, formatCollection, node, formatNode, fontSize, fontName) {
                    return formatCollection.bold || (formatCollection.bold = IsFormatted.isBold(node)), formatCollection.italic || (formatCollection.italic = IsFormatted.isItalic(node)), formatCollection.underline || (formatCollection.underline = IsFormatted.isUnderline(node)), formatCollection.strikethrough || (formatCollection.strikethrough = IsFormatted.isStrikethrough(node)), formatCollection.superscript || (formatCollection.superscript = IsFormatted.isSuperscript(node)), formatCollection.subscript || (formatCollection.subscript = IsFormatted.isSubscript(node)), formatCollection.fontcolor || (formatCollection.fontcolor = this.isFontColor(docElement, node)), formatCollection.fontname || (formatCollection.fontname = this.isFontName(docElement, node, fontName)), formatCollection.fontsize || (formatCollection.fontsize = this.isFontSize(node, fontSize)), formatCollection.backgroundcolor || (formatCollection.backgroundcolor = this.isBackgroundColor(node)), formatCollection.orderedlist || (formatCollection.orderedlist = this.isOrderedList(node)), formatCollection.unorderedlist || (formatCollection.unorderedlist = this.isUnorderedList(node)), formatCollection.alignments || (formatCollection.alignments = this.isAlignment(node)), formatCollection.formats || (formatCollection.formats = this.isFormats(node, formatNode), 'pre' !== formatCollection.formats || (formatCollection.insertcode = !0)), formatCollection.createlink || (formatCollection.createlink = this.isLink(node)), formatCollection.numberFormatList || (formatCollection.numberFormatList = this.isNumberFormatList(node)), formatCollection.bulletFormatList || (formatCollection.bulletFormatList = this.isBulletFormatList(node)), formatCollection;
                }, ToolbarStatus.isFontColor = function(docElement, node) {
                    var color = node.style && node.style.color;
                    return ((null == color || '' === color) && 3 !== node.nodeType && (color = this.getComputedStyle(docElement, node, 'color')), null !== color && '' !== color && void 0 !== color) ? color : null;
                }, ToolbarStatus.isLink = function(node) {
                    return 'a' === node.nodeName.toLocaleLowerCase();
                }, ToolbarStatus.isBackgroundColor = function(node) {
                    var backColor = node.style && node.style.backgroundColor;
                    return null !== backColor && '' !== backColor && void 0 !== backColor ? backColor : null;
                }, ToolbarStatus.isFontSize = function(node, fontSize) {
                    var size = node.style && node.style.fontSize;
                    return null !== size && '' !== size && void 0 !== size && (null == fontSize || fontSize.indexOf(size) > -1) ? size : null;
                }, ToolbarStatus.isFontName = function(docElement, node, fontName) {
                    var name = node.style && node.style.fontFamily;
                    (null == name || '' === name) && 3 !== node.nodeType && (name = this.getComputedStyle(docElement, node, 'font-family'));
                    var index = null;
                    return null !== name && '' !== name && void 0 !== name && (null == fontName || fontName.filter(function(value, pos) {
                        var pattern = RegExp(name, 'i');
                        (value.replace(/"/g, '').replace(/ /g, '').toLowerCase() === name.replace(/"/g, '').replace(/ /g, '').toLowerCase() || value.search(pattern) > -1) && (index = pos);
                    }) && null !== index) ? null !== index ? fontName[index] : name.replace(/"/g, '') : null;
                }, ToolbarStatus.isOrderedList = function(node) {
                    return 'ol' === node.nodeName.toLocaleLowerCase();
                }, ToolbarStatus.isUnorderedList = function(node) {
                    return 'ul' === node.nodeName.toLocaleLowerCase();
                }, ToolbarStatus.isAlignment = function(node) {
                    var align = node.style && node.style.textAlign;
                    return 'left' === align ? 'justifyleft' : 'center' === align ? 'justifycenter' : 'right' === align ? 'justifyright' : 'justify' === align ? 'justifyfull' : null;
                }, ToolbarStatus.isFormats = function(node, formatNode) {
                    return null == formatNode && BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()) > -1 || null != formatNode && formatNode.indexOf(node.nodeName.toLocaleLowerCase()) > -1 ? node.nodeName.toLocaleLowerCase() : null;
                }, ToolbarStatus.getComputedStyle = function(docElement, node, prop) {
                    return docElement.defaultView.getComputedStyle(node, null).getPropertyValue(prop);
                }, ToolbarStatus.isNumberFormatList = function(node) {
                    var list = node.style && node.style.listStyleType;
                    return 'lower-alpha' === list ? 'Lower Alpha' : 'number' === list ? 'Number' : 'upper-alpha' === list ? 'Upper Alpha' : 'lower-roman' === list ? 'Lower Roman' : 'upper-roman' === list ? 'Upper Roman' : 'lower-greek' === list ? 'Lower Greek' : 'none' === list ? 'None' : null;
                }, ToolbarStatus.isBulletFormatList = function(node) {
                    var list = node.style && node.style.listStyleType;
                    return 'circle' === list ? 'Circle' : 'square' === list ? 'Square' : 'none' === list ? 'None' : 'disc' === list ? 'Disc' : null;
                }, ToolbarStatus);
            }(), HtmlToolbarStatus = /** @class */ function() {
                function HtmlToolbarStatus(parent) {
                    this.parent = parent, this.toolbarStatus = this.prevToolbarStatus = (0, common_util /* getDefaultHtmlTbStatus */ .q_)(), this.addEventListener();
                }
                return HtmlToolbarStatus.prototype.addEventListener = function() {
                    this.parent.on(constant /* toolbarRefresh */ .l0, this.onRefreshHandler, this), this.parent.on(constant /* destroy */ .ob, this.removeEventListener, this);
                }, HtmlToolbarStatus.prototype.removeEventListener = function() {
                    this.parent.off(constant /* toolbarRefresh */ .l0, this.onRefreshHandler), this.parent.off(constant /* destroy */ .ob, this.removeEventListener);
                }, HtmlToolbarStatus.prototype.onRefreshHandler = function(args) {
                    if (!this.parent.readonly) {
                        var fontsize = [], fontName = [], formats = [];
                        this.parent.fontSize.items.forEach(function(item) {
                            fontsize.push(item.value);
                        }), this.parent.fontFamily.items.forEach(function(item) {
                            fontName.push(item.value);
                        }), this.parent.format.types.forEach(function(item) {
                            formats.push(item.value.toLocaleLowerCase());
                        }), this.toolbarStatus = ToolbarStatus.get(this.parent.contentModule.getDocument(), this.parent.contentModule.getEditPanel(), formats, fontsize, fontName, args.documentNode);
                        var tbStatusString = JSON.stringify(this.toolbarStatus);
                        this.parent.notify(constant /* toolbarUpdated */ .ko, this.toolbarStatus), JSON.stringify(this.prevToolbarStatus) !== tbStatusString && (this.parent.notify(constant /* updateTbItemsStatus */ .Wp, {
                            html: JSON.parse(tbStatusString),
                            markdown: null
                        }), this.prevToolbarStatus = JSON.parse(tbStatusString));
                    }
                }, HtmlToolbarStatus;
            }(), ContentRender = /** @class */ function() {
                /**
     * Constructor for content renderer module
     *
     * @param {IRichTextEditor} parent - specifies the parent element.
     * @param {ServiceLocator} serviceLocator - specifies the service.
     * @returns {void}
     */ function ContentRender(parent, serviceLocator) {
                    this.parent = parent, this.serviceLocator = serviceLocator;
                }
                return(/**
     * The function is used to render Rich Text Editor content div
     *
     * @returns {void}
     * @hidden

     */ ContentRender.prototype.renderPanel = function() {
                    var rteObj = this.parent, div = this.parent.createElement('div', {
                        className: 'e-rte-content',
                        id: this.parent.getID() + 'rte-view'
                    }), rteContent = (0, util /* getEditValue */ .v7)(rteObj.value, rteObj);
                    this.editableElement = this.parent.createElement('div', {
                        className: 'e-content',
                        id: this.parent.getID() + '_rte-edit-view',
                        attrs: {
                            contenteditable: 'true'
                        },
                        innerHTML: rteContent
                    }), div.appendChild(this.editableElement), this.setPanel(div), rteObj.element.appendChild(div);
                }, /**
     * Get the content div element of RichTextEditor
     *
     * @returns {Element} - specifies the element.
     * @hidden

     */ ContentRender.prototype.getPanel = function() {
                    return this.contentPanel;
                }, /**
     * Get the editable element of RichTextEditor
     *
     * @returns {Element} - specifies the return element.
     * @hidden

     */ ContentRender.prototype.getEditPanel = function() {
                    return this.editableElement;
                }, /**
     * Returns the text content as string.
     *
     * @returns {string} - specifies the string element.
     */ ContentRender.prototype.getText = function() {
                    var textString = this.getEditPanel().innerText;
                    return '\n' === textString ? '' : textString;
                }, /**
     * Set the content div element of RichTextEditor
     *
     * @param {Element} panel - specifies the panel element.
     * @returns {void}
     * @hidden

     */ ContentRender.prototype.setPanel = function(panel) {
                    this.contentPanel = panel;
                }, /**
     * Get the document of RichTextEditor
     *
     * @returns {Document} - specifies the document.
     * @hidden

     */ ContentRender.prototype.getDocument = function() {
                    return this.getEditPanel().ownerDocument;
                }, ContentRender);
            }(), iframe_content_renderer_extends = (extendStatics1 = function(d, b) {
                return (extendStatics1 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics1(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), IframeContentRender = /** @class */ function(_super) {
                function IframeContentRender() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return iframe_content_renderer_extends(IframeContentRender, _super), /**
     * The function is used to render Rich Text Editor iframe
     *
     * @hidden

     */ IframeContentRender.prototype.renderPanel = function() {
                    var rteObj = this.parent, iFrameContent = '\n<!DOCTYPE html> \n    <html>\n         <head>\n            <meta charset=\'utf-8\' /> \n            <style>\n                @charset "UTF-8";\n                body {\n                    font-family: "Roboto", sans-serif;\n                    font-size: 14px;\n                }\n                html, body{height: 100%;margin: 0;}\n                body.e-cursor{cursor:default}\n                span.e-selected-node	{background-color: #939393;color: white;}\n                span.e-selected-node.e-highlight {background-color: #1d9dd8;}\n                body{color:#333;word-wrap:break-word;padding: 8px;box-sizing: border-box;}\n                .e-rte-image {border: 0;cursor: pointer;display:\n                    block;float: none;height: auto;margin: 5px auto;max-width: 100%;position: relative;}\n                .e-rte-image.e-imginline {display: inline-block;float: none;max-width: calc(100% - (2 * 5px));padding: 1px;vertical-align: bottom;}\n                .e-rte-image.e-imgcenter {cursor: pointer;display: block;float: none;margin: 5px auto;max-width: 100%;position: relative;}\n                .e-rte-image.e-imgright { float: right; margin: 0 auto;margin-left: 5px;text-align: right;}\n                .e-rte-image.e-imgleft {float: left;margin: 0 auto;margin-right: 5px;text-align: left;}\n                .e-img-caption { display: inline-block; float: none; margin: 5px auto; max-width: 100%;position: relative;}\n                .e-img-caption.e-caption-inline {display: inline-block;float: none;\n                    margin: 5px auto;margin-left: 5px;margin-right: 5px;max-width: calc(100% - (2 * 5px));\n                    position: relativetext-align: center;vertical-align: bottom;}\n                .e-img-inner {box-sizing: border-box;display: block;font-size: 16px;font-weight: initial;\n                    margin: auto;opacity: .9;text-align: center;width: 100%;}\n                .e-img-wrap {display: inline-block;margin: auto;padding: 0;text-align: center;width: 100%;}\n                .e-imgleft {float: left;margin: 0 5px 0 0;text-align: left;}\n                .e-imgright {float: right;margin: 0 0 0 5px;text-align: right;}\n                .e-imgcenter {cursor: pointer;display: block;float: none;height: auto;margin: 5px auto;max-width: 100%;position: relative;}\n                .e-control img:not(.e-resize) {border: 2px solid transparent; z-index: 1000}\n                .e-imginline {display: inline-block;float: none;margin-left: 5px;margin-right: 5px;\n                    max-width: calc(100% - (2 * 5px));vertical-align: bottom;}\n                .e-imgbreak {border: 0;cursor: pointer;\n                    display: block;float: none;height: auto;margin: 5px auto;max-width: 100%;position: relative;}\n                .e-rte-image.e-img-focus:not(.e-resize) {border: solid 2px #4a90e2;}\n                img.e-img-focus::selection { background: transparent;color: transparent;}\n                span.e-rte-imageboxmark {  width: 10px; height: 10px; position: absolute; display: block;\n                    background: #4a90e2; border: 1px solid #fff; z-index: 1000;}\n                .e-mob-rte.e-mob-span span.e-rte-imageboxmark { background: #4a90e2; border: 1px solid #fff; }\n                .e-mob-rte span.e-rte-imageboxmark { background: #fff; border: 1px solid #4a90e2;\n                    border-radius: 15px; height: 20px; width: 20px; }\n                .e-mob-rte.e-mob-span span.e-rte-imageboxmark { background: #4a90e2; border: 1px solid #fff; }\n                .e-rte-content .e-content img.e-resize { z-index: 1000; }\n                .e-img-caption .e-img-inner { outline: 0; }\n                .e-img-caption a:focus-visible { outline: none; }\n                .e-img-caption .e-rte-image.e-imgright, .e-img-caption .e-rte-image.e-imgleft { float: none; margin: 0;}\n                body{box-sizing: border-box;min-height: 100px;outline: 0 solid transparent;\n                    overflow-x: auto;padding: 16px;position: relative;text-align: inherit;z-index: 2;}\n                p{margin: 0 0 10px;margin-bottom: 10px;}\n                li{margin-bottom: 10px;}\n                h1{font-size: 2.17em;font-weight: 400;line-height: 1;margin: 10px 0;}\n                h2{font-size: 1.74em;font-weight: 400;margin: 10px 0;}\n                h3{font-size: 1.31em;font-weight: 400;margin: 10px 0;}\n                h4{font-size: 16px;font-weight: 400;line-height: 1.5;margin: 0;}\n                h5{font-size: 00.8em;font-weight: 400;margin: 0;}\n                h6{font-size: 00.65em;font-weight: 400;margin: 0;}\n                blockquote{margin: 10px 0;margin-left: 0;padding-left: 5px;border-left: solid 2px #5c5c5c;}\n                pre{background-color: inherit;border: 0;border-radius: 0;color: #333;\n                    font-size: inherit;line-height: inherit;margin: 0 0 10px;overflow: visible;padding: 0;\n                    white-space: pre-wrap;word-break: inherit;word-wrap: break-word;}\n                strong, b{font-weight: 700;}\n                a{text-decoration: none;user-select: auto;}\n                a:hover{text-decoration: underline;};\n                p:last-child, pre:last-child, blockquote:last-child{margin-bottom: 0;}\n                h3+h4, h4+h5, h5+h6{margin-top: 00.6em;}\n                ul:last-child{margin-bottom: 0;}\n                table { border-collapse: collapse; empty-cells: show;}\n                table td,table th {border: 1px solid #BDBDBD; height: 20px; padding: 2px 5px; vertical-align: middle;}\n                table.e-alternate-border tbody tr:nth-child(2n) {background-color: #F5F5F5;}\n                table th {background-color: #E0E0E0;}\n                table.e-dashed-border td,table.e-dashed-border th { border: 1px dashed #BDBDBD} \n                table .e-cell-select {border: 1px double #4a90e2;}\n                span.e-table-box { cursor: nwse-resize; display: block; height: 10px; position: absolute; width: 10px; }\n                span.e-table-box.e-rmob {height: 14px;width: 14px;}\n                .e-row-resize, .e-column-resize { background-color: transparent; background-repeat: repeat;\n                    bottom: 0;cursor: col-resize;height: 1px;overflow: visible;position: absolute;width: 1px; }\n                .e-row-resize { cursor: row-resize; height: 1px;}\n                .e-table-rhelper { cursor: col-resize; opacity: .87;position: absolute;}\n                .e-table-rhelper.e-column-helper { width: 1px; }\n                .e-table-rhelper.e-row-helper {height: 1px;}\n                .e-reicon::before { border-bottom: 6px solid transparent; border-right: 6px solid;\n                    border-top: 6px solid transparent; content: \'\'; display: block; height: 0;\n                    position: absolute; right: 4px; top: 4px; width: 20px; }\n                .e-reicon::after { border-bottom: 6px solid transparent; border-left: 6px solid;\n                    border-top: 6px solid transparent; content: \'\'; display: block;\n                    height: 0; left: 4px; position: absolute; top: 4px; width: 20px; z-index: 3; }\n                .e-row-helper.e-reicon::after { top: 10px; transform: rotate(90deg); }\n                .e-row-helper.e-reicon::before { left: 4px; top: -20px; transform: rotate(90deg); }\n                span.e-table-box { background-color: #ffffff; border: 1px solid #BDBDBD; }\n                span.e-table-box.e-rbox-select { background-color: #BDBDBD; border: 1px solid #BDBDBD; }\n                .e-table-rhelper { background-color: #4a90e2;}\n                .e-rtl { direction: rtl; }\n            </style>\n        </head><body spellcheck="false" autocorrect="off" contenteditable="true">' + (0, util /* getEditValue */ .v7)(rteObj.value, rteObj) + '</body></html>', iframe = this.parent.createElement('iframe', {
                        id: this.parent.getID() + '_rte-view',
                        className: 'e-rte-content',
                        styles: 'display:block;',
                        attrs: {
                            srcdoc: iFrameContent
                        }
                    });
                    this.setPanel(iframe), rteObj.element.appendChild(iframe), iframe.contentDocument.body.id = this.parent.getID() + '_rte-edit-view', iframe.contentDocument.body.setAttribute('aria-owns', this.parent.getID()), iframe.contentDocument.open(), iFrameContent = this.setThemeColor(iFrameContent, {
                        color: '#333'
                    }), iframe.contentDocument.write(iFrameContent), iframe.contentDocument.close(), rteObj.enableRtl && this.contentPanel.contentDocument.body.setAttribute('class', 'e-rtl');
                }, IframeContentRender.prototype.setThemeColor = function(content, styles) {
                    var fontColor = getComputedStyle(this.parent.element, '.e-richtexteditor').getPropertyValue('color');
                    return content.replace(styles.color, fontColor);
                }, /**
     * Get the editable element of RichTextEditor
     *
     * @returns {Element} - specifies the element.
     * @hidden

     */ IframeContentRender.prototype.getEditPanel = function() {
                    return (0, ej2_base /* isNullOrUndefined */ .le)(this.contentPanel.contentDocument) ? this.parent.inputElement : this.contentPanel.contentDocument.body;
                }, /**
     * Get the document of RichTextEditor
     *
     * @returns {void}
     * @hidden

     */ IframeContentRender.prototype.getDocument = function() {
                    return this.getEditPanel().ownerDocument;
                }, IframeContentRender;
            }(ContentRender), items = __webpack_require__(3276), ColorPickerInput = /** @class */ function() {
                function ColorPickerInput(parent, serviceLocator) {
                    this.tools = {}, this.parent = parent, this.locator = serviceLocator, this.renderFactory = this.locator.getService('rendererFactory'), this.addEventListener(), this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0 ? (0, ej2_base /* extend */ .l7)(this.tools, items /* tools */ .rj, (0, util /* toObjectLowerCase */ .E)(this.parent.toolbarSettings.itemConfigs), !0) : this.tools = items /* tools */ .rj;
                }
                return ColorPickerInput.prototype.initializeInstance = function() {
                    this.toolbarRenderer = this.renderFactory.getRenderer(base_enum /* RenderType.Toolbar */ .y2.Toolbar);
                }, /**
     * renderColorPickerInput method
     *
     * @param {IColorPickerRenderArgs} args - specify the arguments.
     * @returns {void}
     * @hidden

     */ ColorPickerInput.prototype.renderColorPickerInput = function(args) {
                    var targetID, options, _this = this;
                    this.initializeInstance();
                    var suffixID = args.containerType, tbElement = args.container;
                    items /* templateItems.forEach */ .rS.forEach(function(item) {
                        if (-1 !== (0, util /* getIndex */ .rw)(item, args.items)) switch(item){
                            case 'fontcolor':
                                targetID = _this.parent.getID() + '_' + suffixID + '_FontColor_Target';
                                var fontNode = _this.parent.createElement('input');
                                if (fontNode.id = targetID, fontNode.classList.add(classes /* CLS_FONT_COLOR_TARGET */ .Ds), !(0, ej2_base /* isNullOrUndefined */ .le)(_this.parent.cssClass)) for(var allClassName = _this.parent.cssClass.split(' '), i = 0; i < allClassName.length; i++)'' !== allClassName[i].trim() && fontNode.classList.add(allClassName[i]);
                                document.body.appendChild(fontNode), options = {
                                    cssClass: _this.tools[item.toLocaleLowerCase()].icon + ' ' + classes /* CLS_RTE_ELEMENTS */ .i7 + ' ' + classes /* CLS_ICONS */ .Cd + ' ' + _this.parent.cssClass,
                                    value: _this.tools[item.toLocaleLowerCase()].value,
                                    command: _this.tools[item.toLocaleLowerCase()].command,
                                    subCommand: _this.tools[item.toLocaleLowerCase()].subCommand,
                                    element: (0, ej2_base /* select */ .Ys)('#' + _this.parent.getID() + '_' + suffixID + '_FontColor', tbElement),
                                    target: targetID
                                }, _this.fontColorPicker = _this.toolbarRenderer.renderColorPicker(options, 'fontcolor'), _this.fontColorDropDown = _this.toolbarRenderer.renderColorPickerDropDown(options, 'fontcolor', _this.fontColorPicker);
                                break;
                            case 'backgroundcolor':
                                targetID = _this.parent.getID() + '_' + suffixID + '_BackgroundColor_Target';
                                var backNode = _this.parent.createElement('input');
                                if (backNode.id = targetID, backNode.classList.add(classes /* CLS_BACKGROUND_COLOR_TARGET */ .Ig), !(0, ej2_base /* isNullOrUndefined */ .le)(_this.parent.cssClass)) for(var allClassName = _this.parent.cssClass.split(' '), i = 0; i < allClassName.length; i++)'' !== allClassName[i].trim() && backNode.classList.add(allClassName[i]);
                                document.body.appendChild(backNode), options = {
                                    cssClass: _this.tools[item.toLocaleLowerCase()].icon + ' ' + classes /* CLS_RTE_ELEMENTS */ .i7 + ' ' + classes /* CLS_ICONS */ .Cd + ' ' + _this.parent.cssClass,
                                    value: _this.tools[item.toLocaleLowerCase()].value,
                                    command: _this.tools[item.toLocaleLowerCase()].command,
                                    subCommand: _this.tools[item.toLocaleLowerCase()].subCommand,
                                    element: (0, ej2_base /* select */ .Ys)('#' + _this.parent.getID() + '_' + suffixID + '_BackgroundColor', tbElement),
                                    target: targetID
                                }, _this.backgroundColorPicker = _this.toolbarRenderer.renderColorPicker(options, 'backgroundcolor'), _this.backgroundColorDropDown = _this.toolbarRenderer.renderColorPickerDropDown(options, 'backgroundcolor', _this.backgroundColorPicker, _this.defaultColorPicker);
                        }
                    }), this.parent.inlineMode.enable && this.setCssClass({
                        cssClass: this.parent.cssClass
                    });
                }, ColorPickerInput.prototype.destroy = function() {
                    this.removeEventListener(), this.destroyColorPicker();
                }, /**
     * destroyColorPicker method
     *
     * @returns {void}
     * @hidden

     */ ColorPickerInput.prototype.destroyColorPicker = function() {
                    if (this.fontColorPicker && !this.fontColorPicker.isDestroyed && this.fontColorPicker.destroy(), this.backgroundColorPicker && !this.backgroundColorPicker.isDestroyed && this.backgroundColorPicker.destroy(), this.fontColorDropDown && !this.fontColorDropDown.isDestroyed) {
                        var innerEle = this.fontColorDropDown.element.querySelector('.e-rte-color-content');
                        innerEle && (0, ej2_base /* detach */ .og)(innerEle), this.fontColorDropDown.destroy();
                    }
                    if (this.backgroundColorDropDown && !this.backgroundColorDropDown.isDestroyed) {
                        var innerEle = this.backgroundColorDropDown.element.querySelector('.e-rte-color-content');
                        innerEle && (this.defaultColorPicker = innerEle.children[0].style.borderBottomColor, (0, ej2_base /* detach */ .og)(innerEle)), this.backgroundColorDropDown.destroy();
                    }
                }, ColorPickerInput.prototype.setRtl = function(args) {
                    this.fontColorPicker && (this.fontColorPicker.setProperties({
                        enableRtl: args.enableRtl
                    }), this.fontColorDropDown.setProperties({
                        enableRtl: args.enableRtl
                    })), this.backgroundColorPicker && (this.backgroundColorPicker.setProperties({
                        enableRtl: args.enableRtl
                    }), this.backgroundColorDropDown.setProperties({
                        enableRtl: args.enableRtl
                    }));
                }, ColorPickerInput.prototype.setCssClass = function(e) {
                    this.updateCss(this.fontColorPicker, this.fontColorDropDown, e), this.updateCss(this.backgroundColorPicker, this.backgroundColorDropDown, e);
                }, ColorPickerInput.prototype.updateCss = function(colorPickerObj, dropDownObj, e) {
                    colorPickerObj && e.cssClass && ((0, ej2_base /* isNullOrUndefined */ .le)(e.oldCssClass) ? (colorPickerObj.setProperties({
                        cssClass: (colorPickerObj.cssClass + ' ' + e.cssClass).trim()
                    }), dropDownObj.setProperties({
                        cssClass: (dropDownObj.cssClass + ' ' + e.cssClass).trim()
                    })) : (colorPickerObj.setProperties({
                        cssClass: (colorPickerObj.cssClass.replace(e.oldCssClass, '').replace('  ', ' ').trim() + ' ' + e.cssClass).trim()
                    }), dropDownObj.setProperties({
                        cssClass: (dropDownObj.cssClass.replace(e.oldCssClass, '').replace('  ', ' ').trim() + ' ' + e.cssClass).trim()
                    })));
                }, ColorPickerInput.prototype.addEventListener = function() {
                    this.parent.on(constant /* toolbarRenderComplete */ .vW, this.renderColorPickerInput, this), this.parent.on(constant /* rtlMode */ .vN, this.setRtl, this), this.parent.on(constant /* destroy */ .ob, this.destroy, this), this.parent.on(constant /* destroyColorPicker */ .c0, this.destroyColorPicker, this), this.parent.on(constant /* modelChanged */ .CC, this.onPropertyChanged, this), this.parent.on(constant /* bindCssClass */ ._8, this.setCssClass, this);
                }, ColorPickerInput.prototype.onPropertyChanged = function(model) {
                    for(var newProp = model.newProp, _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++)switch(_a[_i]){
                        case 'fontColor':
                            if (this.fontColorPicker) for(var _b = 0, _c = Object.keys(newProp.fontColor); _b < _c.length; _b++)switch(_c[_b]){
                                case 'default':
                                    this.fontColorPicker.setProperties({
                                        value: newProp.fontColor.default
                                    }), (0, this.fontColorDropDown.element).querySelector('.' + this.tools.fontcolor.icon).style.borderBottomColor = newProp.fontColor.default;
                                    break;
                                case 'mode':
                                    this.fontColorPicker.setProperties({
                                        mode: newProp.fontColor.mode
                                    });
                                    break;
                                case 'columns':
                                    this.fontColorPicker.setProperties({
                                        columns: newProp.fontColor.columns
                                    });
                                    break;
                                case 'colorCode':
                                    this.fontColorPicker.setProperties({
                                        presetColors: newProp.fontColor.colorCode
                                    });
                                    break;
                                case 'modeSwitcher':
                                    this.fontColorPicker.setProperties({
                                        modeSwitcher: newProp.fontColor.modeSwitcher
                                    });
                            }
                            break;
                        case 'backgroundColor':
                            if (this.backgroundColorPicker) for(var _d = 0, _e = Object.keys(newProp.backgroundColor); _d < _e.length; _d++)switch(_e[_d]){
                                case 'default':
                                    this.backgroundColorPicker.setProperties({
                                        value: newProp.backgroundColor.default
                                    }), (0, this.backgroundColorDropDown.element).querySelector('.' + this.tools.backgroundcolor.icon).style.borderBottomColor = newProp.backgroundColor.default;
                                    break;
                                case 'mode':
                                    this.backgroundColorPicker.setProperties({
                                        mode: newProp.backgroundColor.mode
                                    });
                                    break;
                                case 'columns':
                                    this.backgroundColorPicker.setProperties({
                                        columns: newProp.backgroundColor.columns
                                    });
                                    break;
                                case 'colorCode':
                                    this.backgroundColorPicker.setProperties({
                                        presetColors: newProp.backgroundColor.colorCode
                                    });
                                    break;
                                case 'modeSwitcher':
                                    this.backgroundColorPicker.setProperties({
                                        modeSwitcher: newProp.backgroundColor.modeSwitcher
                                    });
                            }
                    }
                }, ColorPickerInput.prototype.removeEventListener = function() {
                    this.parent.off(constant /* toolbarRenderComplete */ .vW, this.renderColorPickerInput), this.parent.off(constant /* destroy */ .ob, this.destroy), this.parent.off(constant /* rtlMode */ .vN, this.setRtl), this.parent.off(constant /* destroyColorPicker */ .c0, this.destroyColorPicker), this.parent.off(constant /* modelChanged */ .CC, this.onPropertyChanged), this.parent.off(constant /* bindCssClass */ ._8, this.setCssClass);
                }, ColorPickerInput;
            }(), XhtmlValidation = /** @class */ function() {
                function XhtmlValidation(parent) {
                    this.parent = parent, this.addEventListener();
                }
                return XhtmlValidation.prototype.addEventListener = function() {
                    this.parent.on(constant /* xhtmlValidation */ .F, this.enableXhtmlValidation, this), this.parent.on(constant /* destroy */ .ob, this.removeEventListener, this);
                }, XhtmlValidation.prototype.removeEventListener = function() {
                    this.parent.off(constant /* xhtmlValidation */ .F, this.enableXhtmlValidation), this.parent.off(constant /* destroy */ .ob, this.removeEventListener);
                }, XhtmlValidation.prototype.enableXhtmlValidation = function() {
                    this.parent.enableXhtml && ((0, ej2_base /* isNullOrUndefined */ .le)(this.parent.inputElement) ? this.currentElement = this.parent.element : this.currentElement = this.parent.inputElement, this.clean(this.currentElement), this.AddRootElement(), this.ImageTags(), this.removeTags(), this.RemoveUnsupported(), this.currentElement.innerHTML = this.selfEncloseValidation(this.currentElement.innerHTML, "\n" === this.currentElement.innerText ? this.currentElement.innerText.length : this.currentElement.innerText.trim().length), this.parent.setProperties({
                        value: this.currentElement.innerHTML
                    }, !0));
                }, /**
     * @param {string} currentValue - specifies the string value.
     * @param {number} valueLength - specifies the length of the current value.
     * @returns {void}

     */ XhtmlValidation.prototype.selfEncloseValidation = function(currentValue, valueLength) {
                    if (0 === valueLength && 0 > currentValue.indexOf('table') && 0 > currentValue.indexOf('img')) {
                        var valueTemp, arrayValue = currentValue.split('&nbsp;');
                        arrayValue[arrayValue.length - 1] = '&#8203;' + arrayValue[arrayValue.length - 1], currentValue = arrayValue.join('');
                    }
                    currentValue = currentValue.replace(/<br>/g, '<br/>').replace(/<hr>/g, '<hr/>').replace(/ /g, ' ');
                    for(var valueDupe = [], valueOriginal = [], imgRegexp = [
                        /<img(.*?)>/gi,
                        /<area(.*?)>/gi,
                        /<base(.*?)>/gi,
                        /<col (.*?)>/gi,
                        /<embed(.*?)>/gi,
                        /<input(.*?)>/gi,
                        /<link(.*?)>/gi,
                        /<meta(.*?)>/gi,
                        /<param(.*?)>/gi,
                        /<source(.*?)>/gi,
                        /<track(.*?)>/gi,
                        /<wbr(.*?)>/gi
                    ], j = 0; j < imgRegexp.length; j++){
                        for(valueTemp = imgRegexp[j].exec(currentValue); null !== valueTemp;)valueDupe.push(valueTemp[0].toString()), valueTemp = imgRegexp[j].exec(currentValue);
                        valueOriginal = valueDupe.slice(0);
                        for(var i = 0; i < valueDupe.length; i++)(-1 === valueDupe[i].indexOf('/') || valueDupe[i].lastIndexOf('/') !== valueDupe[i].length - 2) && (valueDupe[i] = valueDupe[i].substr(0, valueDupe[i].length - 1) + ' /' + valueDupe[i].substr(valueDupe[i].length - 1, valueDupe[i].length));
                        for(var g = 0; g <= valueDupe.length - 1; g++)currentValue = currentValue.replace(valueOriginal[g], valueDupe[g]);
                    }
                    return currentValue;
                }, XhtmlValidation.prototype.AddRootElement = function() {
                    if (1 === this.currentElement.childNodes.length && 'DIV' !== this.currentElement.firstChild.nodeName || this.currentElement.childNodes.length > 1) {
                        for(var parentEle = this.parent.createElement('div'); this.currentElement.childNodes.length > 0;)parentEle.appendChild(this.currentElement.childNodes[0]);
                        this.currentElement.appendChild(parentEle);
                    }
                }, XhtmlValidation.prototype.clean = function(node) {
                    for(var n = 0; n < node.childNodes.length; n++){
                        var child = node.childNodes[n];
                        8 === child.nodeType || 'V:IMAGE' === child.nodeName ? (node.removeChild(child), n--) : 1 === child.nodeType && this.clean(child);
                    }
                    return this.currentElement.innerHTML;
                }, XhtmlValidation.prototype.ImageTags = function() {
                    for(var imgNodes = this.currentElement.querySelectorAll('IMG'), i = imgNodes.length - 1; i >= 0; i--)imgNodes[i].hasAttribute('alt') || imgNodes[i].setAttribute('alt', '');
                }, XhtmlValidation.prototype.removeTags = function() {
                    for(var removeAttribute = [
                        [
                            'br',
                            'ul'
                        ],
                        [
                            'br',
                            'ol'
                        ],
                        [
                            'table',
                            'span'
                        ],
                        [
                            'div',
                            'span'
                        ],
                        [
                            'p',
                            'span'
                        ]
                    ], i = 0; i < removeAttribute.length; i++)this.RemoveElementNode(removeAttribute[i][0], removeAttribute[i][1]);
                }, XhtmlValidation.prototype.RemoveElementNode = function(rmvNode, parentNode) {
                    for(var parentArray = this.currentElement.querySelectorAll(parentNode), i = 0; i < parentArray.length; i++)for(var rmvArray = parentArray[i].querySelectorAll(rmvNode), j = rmvArray.length; j > 0; j--)(0, ej2_base /* detach */ .og)(rmvArray[j - 1]);
                }, XhtmlValidation.prototype.RemoveUnsupported = function() {
                    for(var underlineEle = this.currentElement.querySelectorAll('u'), i = underlineEle.length - 1; i >= 0; i--){
                        var spanEle = this.parent.createElement('span');
                        spanEle.style.textDecoration = 'underline', spanEle.innerHTML = underlineEle[i].innerHTML, underlineEle[i].parentNode.insertBefore(spanEle, underlineEle[i]), (0, ej2_base /* detach */ .og)(underlineEle[i]);
                    }
                    for(var strongEle = this.currentElement.querySelectorAll('strong'), i = strongEle.length - 1; i >= 0; i--){
                        var boldEle = this.parent.createElement('b');
                        boldEle.innerHTML = strongEle[i].innerHTML, strongEle[i].parentNode.insertBefore(boldEle, strongEle[i]), (0, ej2_base /* detach */ .og)(strongEle[i]);
                    }
                    for(var attrArray = [
                        'language',
                        'role',
                        'target',
                        'contenteditable',
                        'cellspacing',
                        'cellpadding',
                        'border',
                        'valign',
                        'colspan'
                    ], i = 0; i <= attrArray.length; i++)this.RemoveAttributeByName(attrArray[i]);
                }, XhtmlValidation.prototype.RemoveAttributeByName = function(attrName) {
                    if (null !== this.currentElement.firstChild && 3 !== this.currentElement.firstChild.nodeType) for(var i = 0; i < this.currentElement.childNodes.length; i++){
                        var ele = this.currentElement.childNodes[i];
                        if (3 !== ele.nodeType && 'TABLE' !== ele.nodeName && 'TBODY' !== ele.nodeName && 'THEAD' !== ele.nodeName && 'TH' !== ele.nodeName && 'TR' !== ele.nodeName && 'TD' !== ele.nodeName && (ele.hasAttribute(attrName) && ele.removeAttribute(attrName), ele.hasChildNodes())) for(var j = 0; j < ele.childNodes.length; j++){
                            var childEle = ele.childNodes[j];
                            if (3 !== childEle.nodeType && 'TABLE' !== childEle.nodeName && 'TBODY' !== childEle.nodeName && 'THEAD' !== childEle.nodeName && 'TH' !== childEle.nodeName && 'TR' !== childEle.nodeName && 'TD' !== childEle.nodeName && childEle.hasAttribute(attrName) && childEle.removeAttribute(attrName), childEle.hasChildNodes()) for(var k = 0; k < childEle.childNodes.length; k++)3 !== childEle.childNodes[k].nodeType && 'TABLE' !== childEle.childNodes[k].nodeName && 'TBODY' !== childEle.childNodes[k].nodeName && 'THEAD' !== childEle.childNodes[k].nodeName && 'TH' !== childEle.childNodes[k].nodeName && 'TR' !== childEle.childNodes[k].nodeName && 'TD' !== childEle.childNodes[k].nodeName && childEle.childNodes[k].hasAttribute(attrName) && childEle.childNodes[k].removeAttribute(attrName);
                        }
                    }
                }, XhtmlValidation;
            }(), HtmlEditor = /** @class */ function() {
                function HtmlEditor(parent, serviceLocator) {
                    this.rangeCollection = [], this.isImageDelete = !1, this.parent = parent, this.locator = serviceLocator, this.renderFactory = this.locator.getService('rendererFactory'), this.xhtmlValidation = new XhtmlValidation(parent), this.addEventListener();
                }
                return(/**
     * Destroys the Markdown.
     *
     * @function destroy
     * @returns {void}
     * @hidden

     */ HtmlEditor.prototype.destroy = function() {
                    this.removeEventListener();
                }, /**
     * @param {string} value - specifies the string value
     * @returns {void}
     * @hidden

     */ HtmlEditor.prototype.sanitizeHelper = function(value) {
                    return value = (0, util /* sanitizeHelper */ .cC)(value, this.parent);
                }, HtmlEditor.prototype.addEventListener = function() {
                    this.parent.isDestroyed || (this.nodeSelectionObj = new selection /* NodeSelection */ .q(), this.colorPickerModule = new ColorPickerInput(this.parent, this.locator), this.parent.on(constant /* initialLoad */ .T5, this.instantiateRenderer, this), this.parent.on(constant /* htmlToolbarClick */ .s0, this.onToolbarClick, this), this.parent.on(constant /* keyDown */ .QG, this.onKeyDown, this), this.parent.on(constant /* keyUp */ .yR, this.onKeyUp, this), this.parent.on(constant /* renderColorPicker */ .jm, this.renderColorPicker, this), this.parent.on(constant /* initialEnd */ .Xr, this.render, this), this.parent.on(constant /* modelChanged */ .CC, this.onPropertyChanged, this), this.parent.on(constant /* destroy */ .ob, this.destroy, this), this.parent.on(constant /* selectAll */ .td, this.selectAll, this), this.parent.on(constant /* selectRange */ .jh, this.selectRange, this), this.parent.on(constant /* getSelectedHtml */ .Db, this.getSelectedHtml, this), this.parent.on(constant /* selectionSave */ .gA, this.onSelectionSave, this), this.parent.on(constant /* selectionRestore */ .Wz, this.onSelectionRestore, this), this.parent.on(constant /* readOnlyMode */ .Ed, this.updateReadOnly, this), this.parent.on(constant /* paste */ .RE, this.onPaste, this), this.parent.on(constant /* tableclass */ .LF, this.isTableClassAdded, this));
                }, HtmlEditor.prototype.updateReadOnly = function() {
                    this.parent.readonly ? ((0, ej2_base /* attributes */ .Y4)(this.parent.contentModule.getEditPanel(), {
                        contenteditable: 'false'
                    }), (0, ej2_base /* addClass */ .cn)([
                        this.parent.element
                    ], classes /* CLS_RTE_READONLY */ .PW)) : ((0, ej2_base /* attributes */ .Y4)(this.parent.contentModule.getEditPanel(), {
                        contenteditable: 'true'
                    }), (0, ej2_base /* removeClass */ .IV)([
                        this.parent.element
                    ], classes /* CLS_RTE_READONLY */ .PW));
                }, HtmlEditor.prototype.isTableClassAdded = function() {
                    for(var tableElement = this.parent.inputElement.querySelectorAll('table'), i = 0; i < tableElement.length; i++)tableElement[i].classList.contains('e-rte-table') || tableElement[i].classList.add('e-rte-table');
                }, HtmlEditor.prototype.onSelectionSave = function() {
                    var currentDocument = this.contentRenderer.getDocument(), range = this.nodeSelectionObj.getRange(currentDocument);
                    this.saveSelection = this.nodeSelectionObj.save(range, currentDocument);
                }, HtmlEditor.prototype.onSelectionRestore = function(e) {
                    this.parent.isBlur = !1, this.contentRenderer.getEditPanel().focus(), ((0, ej2_base /* isNullOrUndefined */ .le)(e.items) || e.items) && this.saveSelection.restore();
                }, HtmlEditor.prototype.onKeyUp = function(e) {
                    var pointer, args = e.args, range = this.parent.getRange(), regEx = RegExp(String.fromCharCode(8203), 'g');
                    !(0 > [
                        8,
                        9,
                        13,
                        16,
                        17,
                        18,
                        20,
                        27,
                        37,
                        38,
                        39,
                        40,
                        44,
                        45,
                        46,
                        91,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123
                    ].indexOf(args.keyCode)) || args.shiftKey || args.ctrlKey || args.altKey || (8203 === range.startContainer.textContent.charCodeAt(0) && (pointer = range.startOffset - 1, range.startContainer.textContent = range.startContainer.textContent.replace(regEx, ''), this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), range.startContainer, pointer)), (0, ej2_base /* isNullOrUndefined */ .le)(range.startContainer.previousSibling) || (0, ej2_base /* isNullOrUndefined */ .le)(range.startContainer.previousSibling.parentElement) || range.startContainer.parentElement !== range.startContainer.previousSibling.parentElement || 8203 !== range.startContainer.previousSibling.textContent.charCodeAt(0) || !(range.startContainer.previousSibling.textContent.length <= 1) || (range.startContainer.previousSibling.textContent = range.startContainer.previousSibling.textContent.replace(regEx, '')), 8203 === range.endContainer.textContent.charCodeAt(range.endOffset) && (pointer = range.startOffset, range.endContainer.textContent = range.endContainer.textContent.replace(regEx, ''), this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), range.startContainer, pointer)));
                }, HtmlEditor.prototype.onKeyDown = function(e) {
                    var currentRange, _this = this, args = e.args;
                    if ('chrome' === ej2_base /* Browser.info.name */ .AR.info.name && (currentRange = this.parent.getRange(), this.backSpaceCleanup(e, currentRange), this.deleteCleanup(e, currentRange)), 9 === args.keyCode && this.parent.enableTabKey && !(0, ej2_base /* isNullOrUndefined */ .le)(args.target) && (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(args.target, '.e-rte-toolbar'))) {
                        var range = this.nodeSelectionObj.getRange(this.contentRenderer.getDocument()), parentNode = this.nodeSelectionObj.getParentNodeCollection(range);
                        if (!(('LI' === parentNode[0].nodeName || (0, ej2_base /* closest */ .oq)(parentNode[0], 'li') || (0, ej2_base /* closest */ .oq)(parentNode[0], 'table')) && 0 === range.startOffset)) {
                            if (args.preventDefault(), args.shiftKey) {
                                if (this.rangeCollection.length > 0 && 4 === this.rangeCollection[this.rangeCollection.length - 1].startContainer.textContent.length) {
                                    var textCont = this.rangeCollection[this.rangeCollection.length - 1].startContainer;
                                    this.nodeSelectionObj.setSelectionText(this.contentRenderer.getDocument(), textCont, textCont, 0, textCont.textContent.length), InsertHtml.Insert(this.contentRenderer.getDocument(), document.createTextNode('')), this.rangeCollection.pop();
                                }
                            } else InsertHtml.Insert(this.contentRenderer.getDocument(), '&nbsp;&nbsp;&nbsp;&nbsp;'), this.rangeCollection.push(this.nodeSelectionObj.getRange(this.contentRenderer.getDocument()));
                        }
                    }
                    if (('space' === e.args.action || 'enter' === e.args.action || 13 === e.args.keyCode) && (this.spaceLink(e.args), 'HTML' === this.parent.editorMode && !this.parent.readonly)) {
                        var currentLength = this.parent.getText().trim().length, selectionLength = this.parent.getSelection().length;
                        if (-1 === this.parent.maxLength || currentLength - selectionLength + 1 <= this.parent.maxLength || 13 !== e.args.keyCode) this.parent.notify(constant /* enterHandler */ .dp, {
                            args: e.args
                        });
                        else {
                            e.args.preventDefault();
                            return;
                        }
                    }
                    if ('space' === e.args.action) {
                        var currentRange_1 = this.parent.getRange(), editorValue = currentRange_1.startContainer.textContent.slice(0, currentRange_1.startOffset), orderedList_1 = this.isOrderedList(editorValue), unOrderedList = this.isUnOrderedList(editorValue);
                        if (orderedList_1 && !unOrderedList || unOrderedList && !orderedList_1) {
                            var eventArgs_1 = {
                                callBack: null,
                                event: e.args,
                                name: 'keydown-handler'
                            }, actionBeginArgs = {
                                cancel: !1,
                                item: {
                                    command: 'Lists',
                                    subCommand: orderedList_1 ? 'OL' : 'UL'
                                },
                                name: 'actionBegin',
                                originalEvent: e.args,
                                requestType: orderedList_1 ? 'OL' : 'UL'
                            };
                            this.parent.trigger(constant /* actionBegin */ .m2, actionBeginArgs, function(actionBeginArgs) {
                                actionBeginArgs.cancel || (_this.parent.formatter.editorManager.observer.notify(common_constant /* ON_BEGIN */ .O6, eventArgs_1), _this.parent.trigger(constant /* actionComplete */ .i8, {
                                    editorMode: _this.parent.editorMode,
                                    elements: _this.parent.formatter.editorManager.domNode.blockNodes(),
                                    event: e.args,
                                    name: constant /* actionComplete */ .i8,
                                    range: _this.parent.getRange(),
                                    requestType: orderedList_1 ? 'OL' : 'UL'
                                }));
                            });
                        }
                    }
                    'chrome' !== ej2_base /* Browser.info.name */ .AR.info.name || ((0, ej2_base /* isNullOrUndefined */ .le)(this.rangeElement) || (0, ej2_base /* isNullOrUndefined */ .le)(this.oldRangeElement)) && ((0, ej2_base /* isNullOrUndefined */ .le)(this.deleteRangeElement) || (0, ej2_base /* isNullOrUndefined */ .le)(this.deleteOldRangeElement)) || 'TD' === currentRange.startContainer.parentElement.tagName || 'TH' === currentRange.startContainer.parentElement.tagName || (this.rangeElement = null, this.oldRangeElement = null, this.deleteRangeElement = null, this.deleteOldRangeElement = null, this.isImageDelete || args.preventDefault(), args.preventDefault());
                }, HtmlEditor.prototype.isOrderedList = function(editorValue) {
                    editorValue = editorValue.replace(/\u200B/g, '');
                    var olListStartRegex = [
                        /^[1]+[.]+$/,
                        /^[i]+[.]+$/,
                        /^[a]+[.]+$/
                    ];
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(editorValue)) {
                        for(var i = 0; i < olListStartRegex.length; i++)if (olListStartRegex[i].test(editorValue)) return !0;
                    }
                    return !1;
                }, HtmlEditor.prototype.isUnOrderedList = function(editorValue) {
                    editorValue = editorValue.replace(/\u200B/g, '');
                    var ulListStartRegex = [
                        /^[*]$/,
                        /^[-]$/
                    ];
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(editorValue)) {
                        for(var i = 0; i < ulListStartRegex.length; i++)if (ulListStartRegex[i].test(editorValue)) return !0;
                    }
                    return !1;
                }, HtmlEditor.prototype.backSpaceCleanup = function(e, currentRange) {
                    var isLiElement = !1;
                    if ('Backspace' === e.args.code && 8 === e.args.keyCode && 0 === currentRange.startOffset && 0 === currentRange.endOffset && 0 === this.parent.getSelection().length && currentRange.startContainer.textContent.length > 0 && 'TD' !== currentRange.startContainer.parentElement.tagName && 'TH' !== currentRange.startContainer.parentElement.tagName) {
                        if (this.rangeElement = this.getRootBlockNode(currentRange.startContainer), 'OL' === this.rangeElement.tagName || 'UL' === this.rangeElement.tagName) {
                            var liElement = this.getRangeLiNode(currentRange.startContainer);
                            liElement.previousElementSibling && liElement.previousElementSibling.childElementCount > 0 && (this.oldRangeElement = 'BR' === liElement.previousElementSibling.lastElementChild.nodeName ? liElement.previousElementSibling : liElement.previousElementSibling.lastElementChild, (0, ej2_base /* isNullOrUndefined */ .le)(liElement.lastElementChild) || 'BR' === liElement.lastElementChild.nodeName ? this.rangeElement = liElement : (this.rangeElement = liElement.lastElementChild, isLiElement = !0));
                        } else {
                            if (this.rangeElement === this.parent.inputElement || 'TABLE' === this.rangeElement.tagName || !(0, ej2_base /* isNullOrUndefined */ .le)(this.rangeElement.previousElementSibling) && 'TABLE' === this.rangeElement.previousElementSibling.tagName) return;
                            this.oldRangeElement = this.rangeElement.previousElementSibling;
                        }
                        if ((0, ej2_base /* isNullOrUndefined */ .le)(this.oldRangeElement)) return;
                        if (('OL' === this.oldRangeElement.tagName || 'UL' === this.oldRangeElement.tagName) && (this.oldRangeElement = this.oldRangeElement.lastElementChild.lastElementChild ? this.oldRangeElement.lastElementChild.lastElementChild : this.oldRangeElement.lastElementChild), this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), // eslint-disable-next-line
                        this.oldRangeElement, this.oldRangeElement.childNodes.length), this.oldRangeElement.querySelector('BR') && (0, ej2_base /* detach */ .og)(this.oldRangeElement.querySelector('BR')), !(0, ej2_base /* isNullOrUndefined */ .le)(this.rangeElement) && this.oldRangeElement !== this.rangeElement) {
                            for(; this.rangeElement.firstChild;)this.oldRangeElement.appendChild(this.rangeElement.childNodes[0]);
                            // eslint-disable-next-line
                            isLiElement ? (0, ej2_base /* detach */ .og)(this.rangeElement.parentElement) : (0, ej2_base /* detach */ .og)(this.rangeElement), this.oldRangeElement.normalize();
                        }
                    }
                }, HtmlEditor.prototype.deleteCleanup = function(e, currentRange) {
                    var liElement, rootElement, isLiElement = !1;
                    if ('Delete' === e.args.code && 46 === e.args.keyCode && 0 !== this.parent.contentModule.getText().trim().length && 0 === this.parent.getSelection().length && 'TD' !== currentRange.startContainer.parentElement.tagName && 'TH' !== currentRange.startContainer.parentElement.tagName) {
                        if (this.deleteRangeElement = rootElement = this.getRootBlockNode(currentRange.startContainer), 'OL' === this.deleteRangeElement.tagName || 'UL' === this.deleteRangeElement.tagName) (liElement = this.getRangeLiNode(currentRange.startContainer)).nextElementSibling && liElement.nextElementSibling.childElementCount > 0 && !liElement.nextElementSibling.querySelector('BR') ? (0, ej2_base /* isNullOrUndefined */ .le)(liElement.lastElementChild) ? this.deleteRangeElement = liElement : (this.deleteRangeElement = liElement.lastElementChild, isLiElement = !0) : this.deleteRangeElement = this.getRangeElement(liElement);
                        else if (3 === this.deleteRangeElement.nodeType || 'TABLE' === this.deleteRangeElement.tagName || !(0, ej2_base /* isNullOrUndefined */ .le)(this.deleteRangeElement.nextElementSibling) && 'TABLE' === this.deleteRangeElement.nextElementSibling.tagName) return;
                        if (this.getCaretIndex(currentRange, this.deleteRangeElement) === this.deleteRangeElement.textContent.length) {
                            if ((0, ej2_base /* isNullOrUndefined */ .le)(liElement) ? this.deleteOldRangeElement = this.deleteRangeElement.nextElementSibling : isLiElement || !(0, ej2_base /* isNullOrUndefined */ .le)(liElement.nextElementSibling) ? this.deleteOldRangeElement = this.getRangeElement(liElement.nextElementSibling) : this.deleteOldRangeElement = rootElement.nextElementSibling, (0, ej2_base /* isNullOrUndefined */ .le)(this.deleteOldRangeElement)) return;
                            if (0 === currentRange.startOffset && 1 === currentRange.endOffset && 'IMG' === this.deleteRangeElement.childNodes[0].nodeName ? (this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.parent.contentModule.getDocument(), this.deleteRangeElement, this.deleteRangeElement, 0, 1), this.isImageDelete = !0) : (this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), this.deleteRangeElement, this.deleteRangeElement.childNodes.length), this.isImageDelete = !1), this.deleteRangeElement.querySelector('BR') && (0, ej2_base /* detach */ .og)(this.deleteRangeElement.querySelector('BR')), (0, ej2_base /* isNullOrUndefined */ .le)(this.deleteRangeElement) || 'OL' === this.deleteOldRangeElement.tagName || 'UL' === this.deleteOldRangeElement.tagName || this.deleteOldRangeElement === this.deleteRangeElement) this.deleteRangeElement = null, this.deleteOldRangeElement = null;
                            else {
                                for(; this.deleteOldRangeElement.firstChild;)this.deleteRangeElement.appendChild(this.deleteOldRangeElement.childNodes[0]);
                                isLiElement ? (0, ej2_base /* detach */ .og)(this.deleteOldRangeElement.parentElement) : (0, ej2_base /* detach */ .og)(this.deleteOldRangeElement), this.deleteRangeElement.normalize();
                            }
                        } else this.deleteRangeElement = null;
                    }
                }, HtmlEditor.prototype.getCaretIndex = function(currentRange, element) {
                    var position = 0;
                    if (0 !== this.parent.contentModule.getDocument().getSelection().rangeCount) {
                        var preCaretRange = currentRange.cloneRange();
                        preCaretRange.selectNodeContents(element), preCaretRange.setEnd(currentRange.endContainer, currentRange.endOffset), position = preCaretRange.toString().length;
                    }
                    return position;
                }, HtmlEditor.prototype.getRangeElement = function(element) {
                    return element.lastElementChild ? 'BR' === element.lastElementChild.tagName ? element.lastElementChild.previousElementSibling ? element.lastElementChild.previousElementSibling : element : element.lastElementChild : element;
                }, HtmlEditor.prototype.getRootBlockNode = function(rangeBlockNode) {
                    // eslint-disable-next-line
                    for(; rangeBlockNode && this.parent && this.parent.inputElement !== rangeBlockNode && rangeBlockNode.parentElement !== this.parent.inputElement; rangeBlockNode)rangeBlockNode = rangeBlockNode.parentElement;
                    return rangeBlockNode;
                }, HtmlEditor.prototype.getRangeLiNode = function(rangeLiNode) {
                    for(var node = rangeLiNode.parentElement; node !== this.parent.inputElement && (1 !== node.nodeType || 'LI' !== node.tagName);)node = node.parentElement;
                    return node;
                }, HtmlEditor.prototype.onPaste = function(e) {
                    // eslint-disable-next-line
                    var regex = new RegExp(/([^\S]|^)(((https?\:\/\/)|(www\.))(\S+))/gi);
                    if (e.text.match(regex)) {
                        if (e.isWordPaste) return;
                        e.args.preventDefault();
                        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
                        this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
                        for(var httpRegex = new RegExp(/([^\S]|^)(((https?\:\/\/)))/gi), wwwRegex = new RegExp(/([^\S]|^)(((www\.))(\S+))/gi), enterSplitText = e.text.split('\n'), contentInnerElem = '', i = 0; i < enterSplitText.length; i++)if ('' === enterSplitText[i].trim()) contentInnerElem += (0, util /* getDefaultValue */ .oG)(this.parent);
                        else {
                            for(var contentWithSpace = '', spaceBetweenContent = !0, spaceSplit = enterSplitText[i].split(' '), j = 0; j < spaceSplit.length; j++)'' === spaceSplit[j].trim() ? contentWithSpace += spaceBetweenContent ? '&nbsp;' : ' ' : (spaceBetweenContent = !1, contentWithSpace += spaceSplit[j] + ' ');
                            0 === i ? contentInnerElem += '<span>' + contentWithSpace.trim() + '</span>' : contentInnerElem += '<p>' + contentWithSpace.trim() + '</p>';
                        }
                        // eslint-disable-next-line
                        var divElement = this.parent.createElement('div');
                        divElement.setAttribute('class', 'pasteContent'), divElement.style.display = 'inline', divElement.innerHTML = contentInnerElem.replace('&para', '&amp;para');
                        for(var paraElem = divElement.querySelectorAll('span, p'), i = 0; i < paraElem.length; i++){
                            for(var splitTextContent = paraElem[i].innerHTML.split(' '), resultSplitContent = '', j = 0; j < splitTextContent.length; j++)splitTextContent[j].match(httpRegex) || splitTextContent[j].match(wwwRegex) ? resultSplitContent += '<a className="e-rte-anchor" href="' + splitTextContent[j] + '" title="' + splitTextContent[j] + '"target="_blank">' + splitTextContent[j] + ' </a>' : resultSplitContent += splitTextContent[j] + ' ';
                            paraElem[i].innerHTML = resultSplitContent.trim();
                        }
                        (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.pasteCleanupModule) ? this.parent.formatter.editorManager.execCommand('insertHTML', null, null, null, divElement) : e.callBack(divElement.innerHTML);
                    }
                }, HtmlEditor.prototype.spaceLink = function(e) {
                    var range = this.nodeSelectionObj.getRange(this.contentRenderer.getDocument()), selectNodeEle = this.nodeSelectionObj.getParentNodeCollection(range), text = range.startContainer.textContent.substr(0, range.endOffset), splitText = text.split(' '), urlText = splitText[splitText.length - 1], urlTextRange = range.startOffset - (text.length - splitText[splitText.length - 1].length);
                    urlText = urlText.slice(0, urlTextRange);
                    // eslint-disable-next-line
                    var regex = new RegExp(/([^\S]|^)(((https?\:\/\/)|(www\.))(\S+))/gi);
                    if ('A' !== selectNodeEle[0].nodeName && urlText.match(regex)) {
                        var selection = this.nodeSelectionObj.save(range, this.parent.contentModule.getDocument()), value = {
                            url: urlText.indexOf('http') > -1 ? urlText : 'http://' + urlText,
                            selection: selection,
                            selectParent: this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range),
                            text: urlText,
                            title: '',
                            target: '_blank'
                        };
                        this.parent.formatter.process(this.parent, {
                            item: {
                                command: 'Links',
                                subCommand: 'CreateLink'
                            }
                        }, e, value);
                    }
                }, HtmlEditor.prototype.onToolbarClick = function(args) {
                    var save, selectNodeEle, selectParentEle, item = args.item, closestElement = (0, ej2_base /* closest */ .oq)(args.originalEvent.target, '.e-rte-quick-popup');
                    if (closestElement && !closestElement.classList.contains('e-rte-inline-popup')) {
                        if (!('SourceCode' === item.subCommand || 'Preview' === item.subCommand || 'FontColor' === item.subCommand || 'BackgroundColor' === item.subCommand)) {
                            (0, common_util /* isIDevice */ .FA)() && 'Images' === item.command && this.nodeSelectionObj.restore();
                            var range = this.nodeSelectionObj.getRange(this.parent.contentModule.getDocument());
                            save = this.nodeSelectionObj.save(range, this.parent.contentModule.getDocument()), selectNodeEle = this.nodeSelectionObj.getNodeCollection(range), selectParentEle = this.nodeSelectionObj.getParentNodeCollection(range);
                        }
                        'Images' === item.command && this.parent.notify(constant /* imageToolbarAction */ .YV, {
                            member: 'image',
                            args: args,
                            selectNode: selectNodeEle,
                            selection: save,
                            selectParent: selectParentEle
                        }), 'Links' === item.command && this.parent.notify(constant /* linkToolbarAction */ .Tc, {
                            member: 'link',
                            args: args,
                            selectNode: selectNodeEle,
                            selection: save,
                            selectParent: selectParentEle
                        }), 'Table' === item.command && this.parent.notify(constant /* tableToolbarAction */ .ZY, {
                            member: 'table',
                            args: args,
                            selectNode: selectNodeEle,
                            selection: save,
                            selectParent: selectParentEle
                        });
                    } else {
                        var linkDialog = document.getElementById(this.parent.getID() + '_rtelink'), imageDialog = document.getElementById(this.parent.getID() + '_image');
                        if (!('SourceCode' === item.subCommand || 'Preview' === item.subCommand || 'FontColor' === item.subCommand || 'BackgroundColor' === item.subCommand)) {
                            var range = this.nodeSelectionObj.getRange(this.parent.contentModule.getDocument());
                            (0, ej2_base /* isNullOrUndefined */ .le)(linkDialog) && (0, ej2_base /* isNullOrUndefined */ .le)(imageDialog) && (save = this.nodeSelectionObj.save(range, this.parent.contentModule.getDocument())), selectNodeEle = this.nodeSelectionObj.getNodeCollection(range), selectParentEle = this.nodeSelectionObj.getParentNodeCollection(range);
                        }
                        switch(item.subCommand){
                            case 'Maximize':
                                this.parent.notify(constant /* enableFullScreen */ .ex, {
                                    args: args
                                });
                                break;
                            case 'Minimize':
                                this.parent.notify(constant /* disableFullScreen */ .Fx, {
                                    args: args
                                });
                                break;
                            case 'CreateLink':
                                this.parent.notify(constant /* insertLink */ .T8, {
                                    member: 'link',
                                    args: args,
                                    selectNode: selectNodeEle,
                                    selection: save,
                                    selectParent: selectParentEle
                                });
                                break;
                            case 'RemoveLink':
                                this.parent.notify(constant /* unLink */ .tC, {
                                    member: 'link',
                                    args: args,
                                    selectNode: selectNodeEle,
                                    selection: save,
                                    selectParent: selectParentEle
                                });
                                break;
                            case 'Print':
                                this.parent.print();
                                break;
                            case 'Image':
                                this.parent.notify(constant /* insertImage */ .rL, {
                                    member: 'image',
                                    args: args,
                                    selectNode: selectNodeEle,
                                    selection: save,
                                    selectParent: selectParentEle
                                });
                                break;
                            case 'CreateTable':
                                this.parent.notify(constant /* createTable */ .W_, {
                                    member: 'table',
                                    args: args,
                                    selection: save
                                });
                                break;
                            case 'SourceCode':
                                this.parent.notify(constant /* sourceCode */ .sv, {
                                    member: 'viewSource',
                                    args: args
                                });
                                break;
                            case 'Preview':
                                this.parent.notify(constant /* updateSource */ .v0, {
                                    member: 'updateSource',
                                    args: args
                                });
                                break;
                            case 'FontColor':
                            case 'BackgroundColor':
                                break;
                            case 'File':
                                this.parent.notify(constant /* renderFileManager */ ._I, {
                                    member: 'fileManager',
                                    args: args,
                                    selectNode: selectNodeEle,
                                    selection: save,
                                    selectParent: selectParentEle
                                });
                                break;
                            default:
                                this.parent.formatter.process(this.parent, args, args.originalEvent, null);
                        }
                    }
                }, HtmlEditor.prototype.renderColorPicker = function(args) {
                    this.colorPickerModule.renderColorPickerInput(args);
                }, HtmlEditor.prototype.instantiateRenderer = function() {
                    this.parent.iframeSettings.enable ? this.renderFactory.addRenderer(base_enum /* RenderType.Content */ .y2.Content, new IframeContentRender(this.parent, this.locator)) : this.renderFactory.addRenderer(base_enum /* RenderType.Content */ .y2.Content, new ContentRender(this.parent, this.locator));
                }, HtmlEditor.prototype.removeEventListener = function() {
                    this.parent.isDestroyed || (this.parent.off(constant /* initialEnd */ .Xr, this.render), this.parent.off(constant /* modelChanged */ .CC, this.onPropertyChanged), this.parent.off(constant /* htmlToolbarClick */ .s0, this.onToolbarClick), this.parent.off(constant /* renderColorPicker */ .jm, this.renderColorPicker), this.parent.off(constant /* destroy */ .ob, this.destroy), this.parent.off(constant /* keyDown */ .QG, this.onKeyDown), this.parent.off(constant /* initialLoad */ .T5, this.instantiateRenderer), this.parent.off(constant /* selectAll */ .td, this.selectAll), this.parent.off(constant /* selectRange */ .jh, this.selectRange), this.parent.off(constant /* getSelectedHtml */ .Db, this.getSelectedHtml), this.parent.off(constant /* selectionSave */ .gA, this.onSelectionSave), this.parent.off(constant /* selectionRestore */ .Wz, this.onSelectionRestore), this.parent.off(constant /* readOnlyMode */ .Ed, this.updateReadOnly), this.parent.off(constant /* paste */ .RE, this.onPaste), this.parent.off(constant /* tableclass */ .LF, this.isTableClassAdded));
                }, HtmlEditor.prototype.render = function() {
                    this.contentRenderer = this.renderFactory.getRenderer(base_enum /* RenderType.Content */ .y2.Content);
                    var editElement = this.contentRenderer.getEditPanel(), option = {
                        undoRedoSteps: this.parent.undoRedoSteps,
                        undoRedoTimer: this.parent.undoRedoTimer
                    };
                    if ((0, ej2_base /* isNullOrUndefined */ .le)(this.parent.formatter)) {
                        var formatterClass = new HTMLFormatter({
                            currentDocument: this.contentRenderer.getDocument(),
                            element: editElement,
                            options: option
                        });
                        this.parent.setProperties({
                            formatter: formatterClass
                        }, !0);
                    } else this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);
                    this.parent.enableXhtml && this.parent.notify(constant /* xhtmlValidation */ .F, {}), this.parent.toolbarSettings.enable && (this.toolbarUpdate = new HtmlToolbarStatus(this.parent)), this.parent.inlineMode.enable && ((0, ej2_base /* isNullOrUndefined */ .le)(this.parent.fontFamily.default) || (editElement.style.fontFamily = this.parent.fontFamily.default), (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.fontSize.default) || (editElement.style.fontSize = this.parent.fontSize.default)), this.parent.notify(constant /* bindOnEnd */ .$d, {});
                }, /**
     * Called internally if any of the property value changed.
     *
     * @param {RichTextEditorModel} e - specifies the editor model
     * @returns {void}
     * @hidden

     */ HtmlEditor.prototype.onPropertyChanged = function(e) {
                    // On property code change here
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(e.newProp.formatter)) {
                        var editElement = this.contentRenderer.getEditPanel(), option = {
                            undoRedoSteps: this.parent.undoRedoSteps,
                            undoRedoTimer: this.parent.undoRedoTimer
                        };
                        this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);
                    }
                }, /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - returns the string value
     * @hidden
     */ HtmlEditor.prototype.getModuleName = function() {
                    return 'htmlEditor';
                }, /**
     * For selecting all content in RTE
     *
     * @returns {void}
     * @private
     * @hidden
     */ HtmlEditor.prototype.selectAll = function() {
                    var nodes = (0, util /* getTextNodesUnder */ .wX)(this.parent.contentModule.getDocument(), this.parent.contentModule.getEditPanel());
                    nodes.length > 0 && this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.parent.contentModule.getDocument(), nodes[0], nodes[nodes.length - 1], 0, nodes[nodes.length - 1].textContent.length);
                }, /**
     * For selecting all content in RTE
     *
     * @param {NotifyArgs} e - specifies the notified arguments
     * @returns {void}
     * @private
     * @hidden
     */ HtmlEditor.prototype.selectRange = function(e) {
                    this.parent.formatter.editorManager.nodeSelection.setRange(this.parent.contentModule.getDocument(), e.range);
                }, /**
     * For get a selected text in RTE
     *
     * @param {NotifyArgs} e - specifies the notified arguments
     * @returns {void}
     * @hidden
     */ HtmlEditor.prototype.getSelectedHtml = function(e) {
                    e.callBack(this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument()).toString());
                }, HtmlEditor);
            }();
        /***/ },
        /***/ 3725: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                q: function() {
                    return /* binding */ PasteCleanup;
                }
            });
            // EXTERNAL MODULE: ./node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/base/constant.js
            var extendStatics, extendStatics1, constant = __webpack_require__(3386), popup = __webpack_require__(9486), ej2_base = __webpack_require__(1807), common = __webpack_require__(759), __extends = (extendStatics = function(d, b) {
                return (extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), __decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, LABEL = 'e-label', RIPPLE = 'e-ripple-container', RTL = 'e-rtl', WRAPPER = 'e-radio-wrapper', ATTRIBUTES = [
                'title',
                'class',
                'style',
                'disabled',
                'readonly',
                'name',
                'value'
            ], RadioButton = /** @class */ function(_super) {
                var RadioButton_1;
                /**
     * Constructor for creating the widget
     *
     * @private
     * @param {RadioButtonModel} options - Specifies Radio button model
     * @param {string | HTMLInputElement} element - Specifies target element
     */ function RadioButton(options, element) {
                    var _this = _super.call(this, options, element) || this;
                    return _this.isFocused = !1, _this;
                }
                return __extends(RadioButton, _super), RadioButton_1 = RadioButton, RadioButton.prototype.changeHandler = function(event) {
                    this.checked = !0, this.dataBind();
                    var value = this.element.getAttribute('value');
                    value = this.isVue && value ? this.element.value : this.value, this.trigger('change', {
                        value: value,
                        event: event
                    }), 'EJS-RADIOBUTTON' === this.tagName && event.stopPropagation();
                }, RadioButton.prototype.updateChange = function() {
                    for(var input, instance, radioGrp = this.getRadioGroup(), i = 0; i < radioGrp.length; i++)(input = radioGrp[i]) !== this.element && ((instance = (0, ej2_base /* getInstance */ .s8)(input, RadioButton_1)).checked = !1, 'EJS-RADIOBUTTON' === this.tagName && (instance.angularValue = this.value));
                }, /**
     * Destroys the widget.
     *
     * @returns {void}
     */ RadioButton.prototype.destroy = function() {
                    var _this = this, radioWrap = this.wrapper;
                    _super.prototype.destroy.call(this), radioWrap && (this.disabled || this.unWireEvents(), 'INPUT' === this.tagName ? (radioWrap.parentNode && radioWrap.parentNode.insertBefore(this.element, radioWrap), (0, ej2_base /* detach */ .og)(radioWrap), this.element.checked = !1, [
                        'name',
                        'value',
                        'disabled'
                    ].forEach(function(key) {
                        _this.element.removeAttribute(key);
                    })) : ([
                        'role',
                        'aria-checked',
                        'class'
                    ].forEach(function(key) {
                        radioWrap.removeAttribute(key);
                    }), radioWrap.innerHTML = ''));
                }, RadioButton.prototype.focusHandler = function() {
                    this.isFocused = !0;
                }, RadioButton.prototype.focusOutHandler = function() {
                    var label = this.getLabel();
                    label && label.classList.remove('e-focus');
                }, RadioButton.prototype.getModuleName = function() {
                    return 'radio';
                }, /**
     * To get the value of selected radio button in a group.
     *
     * @method getSelectedValue
     * @returns {string} - Selected Value
     */ RadioButton.prototype.getSelectedValue = function() {
                    for(var input, radioGrp = this.getRadioGroup(), i = 0, len = radioGrp.length; i < len; i++)if ((input = radioGrp[i]).checked) return input.value;
                    return '';
                }, RadioButton.prototype.getRadioGroup = function() {
                    return document.querySelectorAll('input.e-radio[name="' + this.element.getAttribute('name') + '"]');
                }, /**
     * Gets the properties to be maintained in the persistence state.
     *
     * @private
     * @returns {string} - Persist Data
     */ RadioButton.prototype.getPersistData = function() {
                    return this.addOnPersist([
                        'checked'
                    ]);
                }, RadioButton.prototype.getWrapper = function() {
                    return this.element ? this.element.parentElement : null;
                }, RadioButton.prototype.getLabel = function() {
                    return this.element ? this.element.nextElementSibling : null;
                }, RadioButton.prototype.initialize = function() {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.initialCheckedValue) && (this.initialCheckedValue = this.checked), this.initWrapper(), this.updateHtmlAttribute(), this.name && this.element.setAttribute('name', this.name);
                    var value = this.element.getAttribute('value');
                    this.isVue && value && value === this.value && (this.checked = !0), (this.isVue ? this.value && !value : this.value) && this.element.setAttribute('value', this.value), this.checked && (this.element.checked = !0), this.disabled && this.setDisabled();
                }, RadioButton.prototype.initWrapper = function() {
                    var rippleSpan, wrapper = this.element.parentElement;
                    wrapper.classList.contains(WRAPPER) || (wrapper = this.createElement('div', {
                        className: WRAPPER
                    }), this.element.parentNode.insertBefore(wrapper, this.element));
                    var label = this.createElement('label', {
                        attrs: {
                            for: this.element.id
                        }
                    });
                    wrapper.appendChild(this.element), wrapper.appendChild(label), ej2_base /* isRippleEnabled */ .re && (rippleSpan = this.createElement('span', {
                        className: RIPPLE
                    }), label.appendChild(rippleSpan), (0, ej2_base /* rippleEffect */ .qx)(rippleSpan, {
                        duration: 400,
                        isCenterRipple: !0
                    })), wrapper.classList.add('e-wrapper'), this.enableRtl && label.classList.add(RTL), this.cssClass && (0, ej2_base /* addClass */ .cn)([
                        wrapper
                    ], this.cssClass.split(' ')), this.label && this.setText(this.label);
                }, RadioButton.prototype.keyUpHandler = function() {
                    this.isFocused && this.getLabel().classList.add('e-focus');
                }, RadioButton.prototype.labelRippleHandler = function(e) {
                    var ripple = this.getLabel().getElementsByClassName(RIPPLE)[0];
                    (0, common /* rippleMouseHandler */ .sg)(e, ripple);
                }, RadioButton.prototype.formResetHandler = function() {
                    this.checked = this.initialCheckedValue, this.initialCheckedValue && (0, ej2_base /* attributes */ .Y4)(this.element, {
                        checked: 'true'
                    });
                }, /**
     * Called internally if any of the property value changes.
     *
     * @private
     * @param {RadioButtonModel} newProp - Specifies New Properties
     * @param {RadioButtonModel} oldProp - Specifies Old Properties
     * @returns {void}
     */ RadioButton.prototype.onPropertyChanged = function(newProp, oldProp) {
                    for(var wrap = this.getWrapper(), label = this.getLabel(), _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++)switch(_a[_i]){
                        case 'checked':
                            newProp.checked && this.updateChange(), this.element.checked = newProp.checked;
                            break;
                        case 'disabled':
                            newProp.disabled ? (this.setDisabled(), this.unWireEvents()) : (this.element.disabled = !1, this.wireEvents());
                            break;
                        case 'cssClass':
                            oldProp.cssClass && (0, ej2_base /* removeClass */ .IV)([
                                wrap
                            ], oldProp.cssClass.split(' ')), newProp.cssClass && (0, ej2_base /* addClass */ .cn)([
                                wrap
                            ], newProp.cssClass.split(' '));
                            break;
                        case 'enableRtl':
                            newProp.enableRtl ? label.classList.add(RTL) : label.classList.remove(RTL);
                            break;
                        case 'label':
                            this.setText(newProp.label);
                            break;
                        case 'labelPosition':
                            'Before' === newProp.labelPosition ? label.classList.add('e-right') : label.classList.remove('e-right');
                            break;
                        case 'name':
                            this.element.setAttribute('name', newProp.name);
                            break;
                        case 'value':
                            if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.htmlAttributes) && this.htmlAttributes.value) break;
                            this.element.setAttribute('value', newProp.value);
                            break;
                        case 'htmlAttributes':
                            this.updateHtmlAttribute();
                    }
                }, /**
     * Initialize checked Property, Angular and React and Unique ID support.
     *
     * @private
     * @returns {void}
     */ RadioButton.prototype.preRender = function() {
                    var element = this.element;
                    if (this.formElement = (0, ej2_base /* closest */ .oq)(this.element, 'form'), this.tagName = this.element.tagName, element = (0, common /* wrapperInitialize */ .Rm)(this.createElement, 'EJS-RADIOBUTTON', 'radio', element, WRAPPER, 'radio'), this.element = element, 'radio' !== this.element.getAttribute('type') && this.element.setAttribute('type', 'radio'), this.element.id || (this.element.id = (0, ej2_base /* getUniqueID */ .QI)('e-' + this.getModuleName())), 'EJS-RADIOBUTTON' === this.tagName) {
                        var formControlName = this.element.getAttribute('formcontrolname');
                        formControlName && (this.setProperties({
                            name: formControlName
                        }, !0), this.element.setAttribute('name', formControlName));
                    }
                }, /**
     * Initialize the control rendering
     *
     * @private
     * @returns {void}
     */ RadioButton.prototype.render = function() {
                    this.initialize(), this.disabled || this.wireEvents(), this.renderComplete(), this.wrapper = this.getWrapper();
                }, RadioButton.prototype.setDisabled = function() {
                    this.element.disabled = !0;
                }, RadioButton.prototype.setText = function(text) {
                    var label = this.getLabel(), textLabel = label.getElementsByClassName(LABEL)[0];
                    textLabel ? textLabel.textContent = text : (text = this.enableHtmlSanitizer ? ej2_base /* SanitizeHtmlHelper.sanitize */ .pJ.sanitize(text) : text, textLabel = this.createElement('span', {
                        className: LABEL,
                        innerHTML: text
                    }), label.appendChild(textLabel)), 'Before' === this.labelPosition ? this.getLabel().classList.add('e-right') : this.getLabel().classList.remove('e-right');
                }, RadioButton.prototype.updateHtmlAttribute = function() {
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.htmlAttributes)) for(var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++){
                        var key = _a[_i];
                        if (ATTRIBUTES.indexOf(key) > -1) {
                            var wrapper = this.element.parentElement;
                            'class' === key ? (0, ej2_base /* addClass */ .cn)([
                                wrapper
                            ], this.htmlAttributes[key].split(' ')) : 'title' === key || 'style' === key ? wrapper.setAttribute(key, this.htmlAttributes[key]) : this.element.setAttribute(key, this.htmlAttributes[key]);
                        }
                    }
                }, RadioButton.prototype.unWireEvents = function() {
                    var label = this.wrapper;
                    ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'change', this.changeHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'focus', this.focusHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'focusout', this.focusOutHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'keyup', this.keyUpHandler);
                    var rippleLabel = label.getElementsByTagName('label')[0];
                    rippleLabel && (ej2_base /* EventHandler.remove */ .bi.remove(rippleLabel, 'mousedown', this.labelRippleHandler), ej2_base /* EventHandler.remove */ .bi.remove(rippleLabel, 'mouseup', this.labelRippleHandler)), this.formElement && ej2_base /* EventHandler.remove */ .bi.remove(this.formElement, 'reset', this.formResetHandler);
                }, RadioButton.prototype.wireEvents = function() {
                    var label = this.getLabel();
                    ej2_base /* EventHandler.add */ .bi.add(this.element, 'change', this.changeHandler, this), ej2_base /* EventHandler.add */ .bi.add(this.element, 'keyup', this.keyUpHandler, this), ej2_base /* EventHandler.add */ .bi.add(this.element, 'focus', this.focusHandler, this), ej2_base /* EventHandler.add */ .bi.add(this.element, 'focusout', this.focusOutHandler, this);
                    var rippleLabel = label.getElementsByClassName(LABEL)[0];
                    rippleLabel && (ej2_base /* EventHandler.add */ .bi.add(rippleLabel, 'mousedown', this.labelRippleHandler, this), ej2_base /* EventHandler.add */ .bi.add(rippleLabel, 'mouseup', this.labelRippleHandler, this)), this.formElement && ej2_base /* EventHandler.add */ .bi.add(this.formElement, 'reset', this.formResetHandler, this);
                }, /**
     * Click the RadioButton element
     * its native method
     *
     * @public
     * @returns {void}
     */ RadioButton.prototype.click = function() {
                    this.element.click();
                }, /**
     * Sets the focus to RadioButton
     * its native method
     *
     * @public
     * @returns {void}
     */ RadioButton.prototype.focusIn = function() {
                    this.element.focus();
                }, __decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RadioButton.prototype, "change", void 0), __decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], RadioButton.prototype, "created", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], RadioButton.prototype, "checked", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], RadioButton.prototype, "cssClass", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], RadioButton.prototype, "disabled", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], RadioButton.prototype, "label", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)('After')
                ], RadioButton.prototype, "labelPosition", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], RadioButton.prototype, "name", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], RadioButton.prototype, "value", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], RadioButton.prototype, "enableHtmlSanitizer", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)({})
                ], RadioButton.prototype, "htmlAttributes", void 0), RadioButton = RadioButton_1 = __decorate([
                    ej2_base /* NotifyPropertyChanges */ .Zl
                ], RadioButton);
            }(ej2_base /* Component */ .wA), classes = __webpack_require__(9805), config = __webpack_require__(103), selection = __webpack_require__(8867), common_constant = __webpack_require__(8082), base_enum = __webpack_require__(809), globalTimeOut = {}, CLS_SHOWSPIN = 'e-spin-show', CLS_HIDESPIN = 'e-spin-hide', CLS_MATERIALSPIN = 'e-spin-material', CLS_FABRICSPIN = 'e-spin-fabric', CLS_FLUENTSPIN = 'e-spin-fluent', CLS_TAILWINDSPIN = 'e-spin-tailwind', CLS_BOOT4SPIN = 'e-spin-bootstrap4', CLS_BOOT5SPIN = 'e-spin-bootstrap5', CLS_HIGHCONTRASTSPIN = 'e-spin-high-contrast', CLS_SPINWRAP = 'e-spinner-pane', CLS_SPININWRAP = 'e-spinner-inner', CLS_SPINCIRCLE = 'e-path-circle', CLS_SPINTEMPLATE = 'e-spin-template';
            /**
 * Create a spinner for the specified target element.
 * ```
 * E.g : createSpinner({ target: targetElement, width: '34px', label: 'Loading..' });
 * ```
 *
 * @param {SpinnerArgs} args - specifies the args
 * @param {CreateElementArgs} internalCreateElement - specifis the element args
 * @returns {void}
 * @private
 */ function createSpinner(args, internalCreateElement) {
                if (args.target) {
                    var target, spinnerContainer, spinnerInnerContainer, radius, makeElement = (0, ej2_base /* isNullOrUndefined */ .le)(internalCreateElement) ? ej2_base /* createElement */ .az : internalCreateElement, container = (target = args.target, spinnerContainer = makeElement('div', {}), spinnerInnerContainer = makeElement('div', {}), spinnerContainer.classList.add(CLS_SPINWRAP), spinnerInnerContainer.classList.add(CLS_SPININWRAP), target.appendChild(spinnerContainer), spinnerContainer.appendChild(spinnerInnerContainer), {
                        wrap: spinnerContainer,
                        inner_wrap: spinnerInnerContainer
                    });
                    if ((0, ej2_base /* isNullOrUndefined */ .le)(args.cssClass) || container.wrap.classList.add(args.cssClass), (0, ej2_base /* isNullOrUndefined */ .le)(args.template) && (0, ej2_base /* isNullOrUndefined */ .le)(null)) {
                        var container1, container2, label, labelEle, theme = (0, ej2_base /* isNullOrUndefined */ .le)(args.type) ? (container1 = container.wrap, window.getComputedStyle(container1, ':after').getPropertyValue('content').replace(/['"]+/g, '')) : args.type;
                        radius = /**
 *
 * @param {string} width - specifies the width
 * @param {string} theme - specifies the string
 * @returns {number} - returns the number
 */ function(width, theme) {
                            var defaultSize;
                            switch(theme){
                                case 'Material':
                                case 'Fabric':
                                case 'Tailwind':
                                case 'Tailwind-dark':
                                case 'Fluent':
                                default:
                                    defaultSize = 30;
                                    break;
                                case 'Bootstrap4':
                                case 'Bootstrap5':
                                    defaultSize = 36;
                            }
                            return width = width ? parseFloat(width + '') : defaultSize, 'Bootstrap' === theme ? width : width / 2;
                        }((0, ej2_base /* isNullOrUndefined */ .le)(args.width) ? void 0 : args.width, theme), /**
 *
 * @param {string} theme - specifies the theme
 * @param {HTMLElement} container - specifies the element
 * @param {number} radius - specifies the radius
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */ function(theme, container, radius, makeElement) {
                            var uniqueID, uniqueID1, uniqueID2, uniqueID3, uniqueID4, uniqueID5, uniqueID6, uniqueID7, innerContainer = container.querySelector('.' + CLS_SPININWRAP), svg = innerContainer.querySelector('svg');
                            switch((0, ej2_base /* isNullOrUndefined */ .le)(svg) || innerContainer.removeChild(svg), theme){
                                case 'Material':
                                    globalTimeOut[uniqueID1 = random_generator()] = {
                                        timeOut: 0,
                                        type: 'Material',
                                        radius: radius
                                    }, create_material_element(innerContainer, uniqueID1, makeElement, CLS_MATERIALSPIN), mat_calculate_attributes(radius, innerContainer, 'Material', CLS_MATERIALSPIN);
                                    break;
                                case 'Fabric':
                                    globalTimeOut[uniqueID2 = random_generator()] = {
                                        timeOut: 0,
                                        type: 'Fabric',
                                        radius: radius
                                    }, create_fabric_element(innerContainer, uniqueID2, CLS_FABRICSPIN, makeElement), fb_calculate_attributes(radius, innerContainer, CLS_FABRICSPIN);
                                    break;
                                case 'Fluent':
                                    globalTimeOut[uniqueID3 = random_generator()] = {
                                        timeOut: 0,
                                        type: 'Fluent',
                                        radius: radius
                                    }, create_fabric_element(innerContainer, uniqueID3, CLS_FLUENTSPIN, makeElement), fb_calculate_attributes(radius, innerContainer, CLS_FLUENTSPIN);
                                    break;
                                case 'Bootstrap':
                                    globalTimeOut[uniqueID = random_generator()] = {
                                        timeOut: 0,
                                        type: 'Bootstrap',
                                        radius: radius
                                    }, /**
 *
 * @param {HTMLElement} innerContainer - specifies the element
 * @param {string} uniqueID - specifies the id
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */ // eslint-disable-next-line
                                    function(innerContainer, uniqueID, makeElement) {
                                        var svgBoot = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                                        svgBoot.setAttribute('id', uniqueID), svgBoot.setAttribute('class', 'e-spin-bootstrap'), svgBoot.setAttribute('viewBox', "0 0 64 64"), innerContainer.insertBefore(svgBoot, innerContainer.firstChild);
                                        for(var item = 0; item <= 7; item++){
                                            var bootCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                                            bootCircle.setAttribute('class', CLS_SPINCIRCLE + '_' + item), bootCircle.setAttribute('r', "2"), bootCircle.setAttribute('transform', "translate(32,32)"), svgBoot.appendChild(bootCircle);
                                        }
                                    }(innerContainer, uniqueID, 0), /**
 *
 * @param {HTMLElement} innerContainer - specifies the element
 * @param {number} radius - specifies the radius
 * @returns {void}
 */ // eslint-disable-next-line
                                    function(innerContainer, radius) {
                                        var svg = innerContainer.querySelector('svg.e-spin-bootstrap');
                                        svg.style.width = svg.style.height = radius + 'px';
                                        for(var startArc = 90, item = 0; item <= 7; item++){
                                            var start = defineArcPoints(0, 0, 24, startArc), circleEle = svg.querySelector('.' + CLS_SPINCIRCLE + '_' + item);
                                            circleEle.setAttribute('cx', start.x + ''), circleEle.setAttribute('cy', start.y + ''), startArc = (startArc >= 360 ? 0 : startArc) + 45;
                                        }
                                    }(innerContainer, radius);
                                    break;
                                case 'HighContrast':
                                    globalTimeOut[uniqueID4 = random_generator()] = {
                                        timeOut: 0,
                                        type: 'HighContrast',
                                        radius: radius
                                    }, create_fabric_element(innerContainer, uniqueID4, CLS_HIGHCONTRASTSPIN, makeElement), fb_calculate_attributes(radius, innerContainer, CLS_HIGHCONTRASTSPIN);
                                    break;
                                case 'Bootstrap4':
                                    globalTimeOut[uniqueID5 = random_generator()] = {
                                        timeOut: 0,
                                        type: 'Bootstrap4',
                                        radius: radius
                                    }, create_material_element(innerContainer, uniqueID5, makeElement, CLS_BOOT4SPIN), mat_calculate_attributes(radius, innerContainer, 'Bootstrap4', CLS_BOOT4SPIN);
                                    break;
                                case 'Bootstrap5':
                                    globalTimeOut[uniqueID6 = random_generator()] = {
                                        timeOut: 0,
                                        type: 'Bootstrap5',
                                        radius: radius
                                    }, create_material_element(innerContainer, uniqueID6, makeElement, CLS_BOOT5SPIN), mat_calculate_attributes(radius, innerContainer, 'Bootstrap5', CLS_BOOT5SPIN);
                                    break;
                                case 'Tailwind':
                                case 'Tailwind-dark':
                                    globalTimeOut[uniqueID7 = random_generator()] = {
                                        timeOut: 0,
                                        type: 'Tailwind',
                                        radius: radius
                                    }, create_fabric_element(innerContainer, uniqueID7, CLS_TAILWINDSPIN, makeElement), fb_calculate_attributes(radius, innerContainer, CLS_TAILWINDSPIN);
                            }
                        }(theme, container.wrap, radius, makeElement), (0, ej2_base /* isNullOrUndefined */ .le)(args.label) || (container2 = container.inner_wrap, label = args.label, (labelEle = makeElement('div', {})).classList.add('e-spin-label'), labelEle.innerHTML = label, container2.appendChild(labelEle));
                    } else {
                        var container3, template = (0, ej2_base /* isNullOrUndefined */ .le)(args.template) ? null : args.template;
                        container.wrap.classList.add(CLS_SPINTEMPLATE), container3 = container.wrap, (0, ej2_base /* isNullOrUndefined */ .le)(null) || container3.classList.add(null), container3.querySelector('.e-spinner-inner').innerHTML = template;
                    }
                    container.wrap.classList.add(CLS_HIDESPIN);
                }
            }
            /**
 * @returns {string} - returns the string
 */ // eslint-disable-next-line
            function random_generator() {
                for(var random = '', combine = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789', i = 0; i < 5; i++)random += combine.charAt(Math.floor(Math.random() * combine.length));
                return random;
            }
            /**
 *
 * @param {HTMLElement} innerCon - specifies the element
 * @param {string} uniqueID - specifies the unique id
 * @param {string} themeClass - specifies the string
 * @param {createElementParams} makeElement - specifies the element
 * @returns {void}
 */ // eslint-disable-next-line
            function create_fabric_element(innerCon, uniqueID, themeClass, makeElement) {
                var svgFabric = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                svgFabric.setAttribute('id', uniqueID), svgFabric.setAttribute('class', themeClass);
                var fabricCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                fabricCirclePath.setAttribute('class', CLS_SPINCIRCLE);
                var fabricCircleArc = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                fabricCircleArc.setAttribute('class', 'e-path-arc'), innerCon.insertBefore(svgFabric, innerCon.firstChild), svgFabric.appendChild(fabricCirclePath), svgFabric.appendChild(fabricCircleArc);
            }
            /**
 *
 * @param {HTMLElement} innerContainer - specifies the element
 * @param {string} uniqueID - specifies the unique id
 * @param {createElementParams} makeElement - specifies the element
 * @param {string} cls - specifies the string
 * @returns {void}
 */ // eslint-disable-next-line
            function create_material_element(innerContainer, uniqueID, makeElement, cls) {
                var svgMaterial = document.createElementNS('http://www.w3.org/2000/svg', 'svg'), matCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                svgMaterial.setAttribute('class', cls), svgMaterial.setAttribute('id', uniqueID), matCirclePath.setAttribute('class', CLS_SPINCIRCLE), innerContainer.insertBefore(svgMaterial, innerContainer.firstChild), svgMaterial.appendChild(matCirclePath);
            }
            /**
 *
 * @param {number} radius - specifies the number
 * @param {HTMLElement} container - specifies the element
 * @param {string} type - specifies the string type
 * @param {string} cls - specifies the string
 * @returns {void}
 */ // eslint-disable-next-line
            function mat_calculate_attributes(radius, container, type, cls) {
                var radius1, offset, diameter = 2 * radius, svg = container.querySelector('svg.' + cls), path = svg.querySelector('path.e-path-circle'), strokeSize = 0.1 * diameter, transformOrigin = diameter / 2 + 'px';
                svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter), svg.style.width = svg.style.height = diameter + 'px', svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin, path.setAttribute('d', 'M' + (radius1 = diameter / 2) + ',' + (offset = strokeSize / 2) + 'A' + (radius1 - offset) + ',' + (radius1 - offset) + ' 0 1 1 ' + offset + ',' + radius1), 'Material' === type && (path.setAttribute('stroke-width', strokeSize + ''), path.setAttribute('stroke-dasharray', (diameter - strokeSize) * Math.PI * 0.75 + ''), path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, 1, 75) + ''));
            }
            /**
 *
 * @param {number} diameter - specifies the number
 * @param {number} strokeSize - specifies the stroke size
 * @param {number} value - specifies the value
 * @param {number} max - specifies the max number
 * @returns {number} - returns the number
 */ function getDashOffset(diameter, strokeSize, value, max) {
                return (diameter - strokeSize) * Math.PI * (3 * max / 100 - value / 100);
            }
            /**
 *
 * @param {number} current - specifies the number
 * @param {number} start - specifies the stroke size
 * @param {number} change - specifies the value
 * @param {number} duration - specifies the max number
 * @returns {number} - returns the number
 */ function easeAnimation(current, start, change, duration) {
                var timestamp = (current /= duration) * current, timecount = timestamp * current;
                return start + change * (6 * timecount * timestamp + -15 * timestamp * timestamp + 10 * timecount);
            }
            /**
 *
 * @param {number} radius - specifies the number
 * @param {HTMLElement} innerConainer - specifies the element
 * @param {string} trgClass - specifies the class
 * @returns {void}
 */ // eslint-disable-next-line
            function fb_calculate_attributes(radius, innerConainer, trgClass) {
                var start, end, diameter = 2 * radius, svg = innerConainer.querySelector('.' + trgClass), circle = svg.querySelector('.e-path-circle'), path = svg.querySelector('.e-path-arc'), transformOrigin = diameter / 2 + 'px';
                circle.setAttribute('d', [
                    'M',
                    radius,
                    radius,
                    'm',
                    -radius,
                    0,
                    'a',
                    radius,
                    radius,
                    0,
                    1,
                    0,
                    2 * radius,
                    0,
                    'a',
                    radius,
                    radius,
                    0,
                    1,
                    0,
                    -(2 * radius),
                    0
                ].join(' ')), path.setAttribute('d', (start = defineArcPoints(radius, radius, radius, 45), end = defineArcPoints(radius, radius, radius, 315), [
                    'M',
                    start.x,
                    start.y,
                    'A',
                    radius,
                    radius,
                    0,
                    0,
                    0,
                    end.x,
                    end.y
                ].join(' '))), svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter), svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin, svg.style.width = svg.style.height = diameter + 'px';
            }
            /**
 *
 * @param {number} centerX - specifies the number
 * @param {number} centerY - specifies the stroke size
 * @param {number} radius - specifies the value
 * @param {number} angle - specifies the max number
 * @returns {number} - returns the number
 */ function defineArcPoints(centerX, centerY, radius, angle) {
                var radians = (angle - 90) * Math.PI / 180.0;
                return {
                    x: centerX + radius * Math.cos(radians),
                    y: centerY + radius * Math.sin(radians)
                };
            }
            // eslint-disable-next-line
            /**
 * Function to show the Spinner.
 *
 * @param {HTMLElement} container - Specify the target of the Spinner.
 * @returns {void}
 * @private
 */ function showSpinner(container) {
                showHideSpinner(container, !1), container = null;
            }
            /**
 *
 * @param {HTMLElement} container - specifies the element
 * @param {boolean} isHide - specifies the boolean
 * @returns {void}
 */ function showHideSpinner(container, isHide) {
                var spinnerWrap;
                if (container && (spinnerWrap = container.classList.contains(CLS_SPINWRAP) ? container : container.querySelector('.' + CLS_SPINWRAP)), container && spinnerWrap) {
                    var inner = spinnerWrap.querySelector('.' + CLS_SPININWRAP);
                    if (isHide ? !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_HIDESPIN) : !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_SHOWSPIN)) {
                        var radius, globalObject, svgEle = spinnerWrap.querySelector('svg');
                        if ((0, ej2_base /* isNullOrUndefined */ .le)(svgEle)) return;
                        var id = svgEle.getAttribute('id');
                        switch(globalTimeOut[id].isAnimate = !isHide, globalTimeOut[id].type){
                            case 'Material':
                                // eslint-disable-next-line
                                isHide ? clearTimeout(globalTimeOut[id].timeOut) : (radius = globalTimeOut[id].radius, globalObject = {}, globalTimeOut[id].timeOut = 0, globalObject[id] = {
                                    radius: radius,
                                    count: 0,
                                    previousId: 0
                                }, /**
 *
 * @param {SpinnerInfo} spinnerInfo - specifies the spinner
 * @returns {void}
 */ function animateMaterial(spinnerInfo) {
                                    /**
 *
 * @param {number} start - specifies the number
 * @param {number} end - specifies the end number
 * @param {Function} easing - specifies the function
 * @param {number} duration - specifies the duration
 * @param {number} count - specifies the count
 * @param {number} max - specifies the max number
 * @param {SpinnerInfo} spinnerInfo - specifies the spinner info
 * @returns {void}
 */ // eslint-disable-next-line
                                    (function(start, end, easing, duration, count, max, spinnerInfo) {
                                        var id = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId, startTime = new Date().getTime(), diameter = parseFloat(2 * spinnerInfo.globalInfo[spinnerInfo.uniqueID].radius + ''), strokeSize = 0.1 * diameter, rotate = -90 * (spinnerInfo.globalInfo[spinnerInfo.uniqueID].count || 0);
                                        // eslint-disable-next-line
                                        (function mat_animation(spinnerInfo) {
                                            var currentTime = Math.max(0, Math.min(new Date().getTime() - startTime, 1333));
                                            /**
     *
     * @param {number} value - specifies the number value
     * @param {HTMLElement} container - specifies the container
     * @returns {void}
     */ (function(value, container) {
                                                if (!(0, ej2_base /* isNullOrUndefined */ .le)(container.querySelector('svg.e-spin-material')) && !(0, ej2_base /* isNullOrUndefined */ .le)(container.querySelector('svg.e-spin-material').querySelector('path.e-path-circle'))) {
                                                    var path = container.querySelector('svg.e-spin-material').querySelector('path.e-path-circle');
                                                    path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, value, 75) + ''), path.setAttribute('transform', 'rotate(' + rotate + ' ' + diameter / 2 + ' ' + diameter / 2 + ')');
                                                }
                                            })(easing(currentTime, 1, 148, 1333), spinnerInfo.container), id === spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId && currentTime < 1333 ? // eslint-disable-next-line
                                            globalTimeOut[spinnerInfo.uniqueID].timeOut = setTimeout(mat_animation.bind(null, spinnerInfo), 1) : animateMaterial(spinnerInfo);
                                        })(spinnerInfo);
                                    })(0, 0, easeAnimation, 0, spinnerInfo.globalInfo[spinnerInfo.uniqueID].count, 0, spinnerInfo), spinnerInfo.globalInfo[spinnerInfo.uniqueID].count = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].count % 4;
                                }({
                                    uniqueID: id,
                                    container: inner,
                                    globalInfo: globalObject,
                                    timeOutVar: 0
                                }));
                                break;
                            case 'Bootstrap':
                                // eslint-disable-next-line
                                isHide ? clearTimeout(globalTimeOut[id].timeOut) : /**
 *
 * @param {HTMLElement} innerContainer - specifies the element
 * @returns {void}
 */ function(innerContainer) {
                                    for(var id = innerContainer.querySelector('svg.e-spin-bootstrap').getAttribute('id'), i = 1; i <= 8; i++)!/**
     *
     * @param {SVGCircleElement} circle - specifies the circl element
     * @param {number} start - specifies the number
     * @param {number} end - specifies the end number
     * @param {number} series - specifies the series
     * @param {string} id - specifies the id
     * @returns {void}
     */ function(circle, start, end, series, id) {
                                        var count = 0;
                                        !// eslint-disable-next-line
                                        function boot_animate(radius) {
                                            globalTimeOut[id].isAnimate && (++count, circle.setAttribute('r', radius + ''), count >= series.length && (count = 0), // eslint-disable-next-line
                                            globalTimeOut[id].timeOut = setTimeout(boot_animate.bind(null, series[count]), 18));
                                        }(start);
                                    }(innerContainer.getElementsByClassName('e-path-circle_' + (8 === i ? 0 : i))[0], i, 0, /**
 *
 * @param {number} begin - specifies the number
 * @param {number} stop  - specifirs the number
 * @returns {number[]} - returns the array of number
 */ function(begin, stop) {
                                        var series = [], increment = !1, count = 1;
                                        return(/**
     *
     * @param {number} i - specifies the number
     * @returns {void}
     */ function formSeries(i) {
                                            series.push(i), (i !== stop || 1 === count) && (i <= begin && i > 1 && !increment ? i = parseFloat((i - 0.2).toFixed(2)) : 1 === i ? (i = parseFloat(((i = 7) + 0.2).toFixed(2)), increment = !0) : i < 8 && increment ? 8 === (i = parseFloat((i + 0.2).toFixed(2))) && (increment = !1) : i <= 8 && !increment && (i = parseFloat((i - 0.2).toFixed(2))), ++count, formSeries(i));
                                        }(begin), series);
                                    }(i, i), id);
                                }(inner);
                        }
                    }
                    // eslint-disable-next-line
                    isHide ? (0, ej2_base /* classList */ .s1)(spinnerWrap, [
                        CLS_HIDESPIN
                    ], [
                        CLS_SHOWSPIN
                    ]) : (0, ej2_base /* classList */ .s1)(spinnerWrap, [
                        CLS_SHOWSPIN
                    ], [
                        CLS_HIDESPIN
                    ]), container = null;
                }
            }
            /**
 * Function to hide the Spinner.
 *
 * @param {HTMLElement} container - Specify the target of the Spinner.
 * @returns {void}
 * @private
 */ function hideSpinner(container) {
                showHideSpinner(container, !0), container = null;
            }
            var uploader_extends = (extendStatics1 = function(d, b) {
                return (extendStatics1 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics1(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), uploader_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, INPUT_WRAPPER = 'e-file-select', DROP_AREA = 'e-file-drop', LIST_PARENT = 'e-upload-files', FILE = 'e-upload-file-list', STATUS = 'e-file-status', FILE_NAME = 'e-file-name', FILE_TYPE = 'e-file-type', FILE_SIZE = 'e-file-size', REMOVE_ICON = 'e-file-remove-btn', DELETE_ICON = 'e-file-delete-btn', SPINNER_PANE = 'e-spinner-pane', ABORT_ICON = 'e-file-abort-btn', RETRY_ICON = 'e-file-reload-btn', DRAG_HOVER = 'e-upload-drag-hover', PROGRESS_WRAPPER = 'e-upload-progress-wrap', PROGRESSBAR = 'e-upload-progress-bar', PROGRESSBAR_TEXT = 'e-progress-bar-text', UPLOAD_INPROGRESS = 'e-upload-progress', UPLOAD_SUCCESS = 'e-upload-success', UPLOAD_FAILED = 'e-upload-fails', TEXT_CONTAINER = 'e-file-container', VALIDATION_FAILS = 'e-validation-fails', uploader_RTL = 'e-rtl', DISABLED = 'e-disabled', RTL_CONTAINER = 'e-rtl-container', ICON_FOCUSED = 'e-clear-icon-focus', PAUSE_UPLOAD = 'e-file-pause-btn', RESUME_UPLOAD = 'e-file-play-btn', RESTRICT_RETRY = 'e-restrict-retry', wrapperAttr = [
                'title',
                'style',
                'class'
            ], FORM_UPLOAD = 'e-form-upload', INVALID_FILE = 'e-file-invalid', FilesProp = /** @class */ function(_super) {
                function FilesProp() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return uploader_extends(FilesProp, _super), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], FilesProp.prototype, "name", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], FilesProp.prototype, "size", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], FilesProp.prototype, "type", void 0), FilesProp;
            }(ej2_base /* ChildProperty */ .rt), ButtonsProps = /** @class */ function(_super) {
                function ButtonsProps() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return uploader_extends(ButtonsProps, _super), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)('Browse...')
                ], ButtonsProps.prototype, "browse", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)('Upload')
                ], ButtonsProps.prototype, "upload", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)('Clear')
                ], ButtonsProps.prototype, "clear", void 0), ButtonsProps;
            }(ej2_base /* ChildProperty */ .rt), AsyncSettings = /** @class */ function(_super) {
                function AsyncSettings() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return uploader_extends(AsyncSettings, _super), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], AsyncSettings.prototype, "saveUrl", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], AsyncSettings.prototype, "removeUrl", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)(0)
                ], AsyncSettings.prototype, "chunkSize", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)(3)
                ], AsyncSettings.prototype, "retryCount", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)(500)
                ], AsyncSettings.prototype, "retryAfterDelay", void 0), AsyncSettings;
            }(ej2_base /* ChildProperty */ .rt), Uploader = /** @class */ function(_super) {
                /**
     * Triggers when change the Uploader value.
     *
     * @param {UploaderModel} options - Specifies the Uploader model.
     * @param {string | HTMLInputElement} element - Specifies the element to render as component.
     * @private
     */ function Uploader(options, element) {
                    var _this = _super.call(this, options, element) || this;
                    return _this.initialAttr = {
                        accept: null,
                        multiple: !1,
                        disabled: !1
                    }, _this.uploadedFilesData = [], _this.base64String = [], _this.isForm = !1, _this.allTypes = !1, _this.pausedData = [], _this.uploadMetaData = [], _this.tabIndex = '0', _this.btnTabIndex = '0', _this.disableKeyboardNavigation = !1, _this.count = -1, _this.actionCompleteCount = 0, _this.flag = !0, _this.selectedFiles = [], _this.uploaderName = 'UploadFiles', _this.fileStreams = [], _this.newFileRef = 0, _this.isFirstFileOnSelection = !1, _this.dragCounter = 0, _this.isAngular = !1, /**
         * Get the file item(li) which are shown in file list.
         *
         * @private
         */ _this.fileList = [], /**
         * Get the data of files which are shown in file list.
         *
         * @private
         */ _this.filesData = [], _this.uploaderOptions = options, _this;
                }
                return uploader_extends(Uploader, _super), /**
     * Calls internally if any of the property value is changed.
     *
     * @param {UploaderModel} newProp - Returns the dynamic property value of the component.
     * @param {UploaderModel} oldProp - Returns the previous property value of the component.
     * @returns {void}
     * @private
     */ Uploader.prototype.onPropertyChanged = function(newProp, oldProp) {
                    for(var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++)switch(_a[_i]){
                        case 'allowedExtensions':
                            this.setExtensions(this.allowedExtensions), this.clearAll();
                            break;
                        case 'enabled':
                            this.setControlStatus();
                            break;
                        case 'multiple':
                            this.setMultipleSelection();
                            break;
                        case 'enableRtl':
                            this.setRTL(), this.reRenderFileList();
                            break;
                        case 'buttons':
                            this.buttons.browse = (0, ej2_base /* isNullOrUndefined */ .le)(this.buttons.browse) ? '' : this.buttons.browse, this.buttons.clear = (0, ej2_base /* isNullOrUndefined */ .le)(this.buttons.clear) ? '' : this.buttons.clear, this.buttons.upload = (0, ej2_base /* isNullOrUndefined */ .le)(this.buttons.upload) ? '' : this.buttons.upload, this.renderButtonTemplates();
                            break;
                        case 'dropArea':
                            this.unBindDropEvents(), this.updateDropArea();
                            break;
                        case 'htmlAttributes':
                            this.updateHTMLAttrToElement(), this.updateHTMLAttrToWrapper(), this.checkHTMLAttributes(!0);
                            break;
                        case 'files':
                            this.renderPreLoadFiles();
                            break;
                        case 'directoryUpload':
                            this.updateDirectoryAttributes();
                            break;
                        case 'template':
                        case 'minFileSize':
                        case 'maxFileSize':
                        case 'autoUpload':
                        case 'sequentialUpload':
                            this.clearAll();
                            break;
                        case 'locale':
                            this.l10n.setLocale(this.locale), this.setLocalizedTexts(), this.preLocaleObj = (0, ej2_base /* getValue */ .NA)('currentLocale', this.l10n);
                            break;
                        case 'cssClass':
                            this.setCSSClass(oldProp.cssClass);
                    }
                }, Uploader.prototype.setLocalizedTexts = function() {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.template) && ('string' == typeof this.buttons.browse && (this.browseButton.innerText = 'Browse...' === this.buttons.browse ? this.localizedTexts('Browse') : this.buttons.browse, this.browseButton.setAttribute('title', this.browseButton.innerText), this.uploadWrapper && !(0, ej2_base /* isNullOrUndefined */ .le)(this.uploadWrapper.querySelector('.' + DROP_AREA)) && (this.uploadWrapper.querySelector('.' + DROP_AREA).innerHTML = this.localizedTexts('dropFilesHint'))), this.updateFileList());
                }, Uploader.prototype.getKeyValue = function(val) {
                    for(var keyValue, _i = 0, _a = Object.keys(this.preLocaleObj); _i < _a.length; _i++){
                        var key = _a[_i];
                        this.preLocaleObj[key] === val && (keyValue = key);
                    }
                    return keyValue;
                }, Uploader.prototype.updateFileList = function() {
                    /* istanbul ignore next */ if (this.fileList.length > 0 && !(0, ej2_base /* isNullOrUndefined */ .le)(this.uploadWrapper.querySelector('.' + LIST_PARENT))) for(var i = 0; i < this.fileList.length; i++)this.fileList[i].querySelector('.e-file-status').innerHTML = this.localizedTexts(this.getKeyValue(this.filesData[i].status)), this.filesData[i].status = this.localizedTexts(this.getKeyValue(this.filesData[i].status)), this.fileList[i].classList.contains(UPLOAD_SUCCESS) && this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('delete')), this.fileList[i].querySelector('.e-file-play-btn') && this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('resume')), this.fileList[i].querySelector('.e-file-remove-btn') && this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('remove')), this.fileList[i].querySelector('.e-file-reload-btn') && this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('retry')), this.autoUpload || (this.uploadButton.innerText = 'Upload' === this.buttons.upload ? this.localizedTexts('Upload') : this.buttons.upload, this.uploadButton.setAttribute('title', this.localizedTexts('Upload')), this.clearButton.innerText = 'Clear' === this.buttons.clear ? this.localizedTexts('Clear') : this.buttons.clear, this.clearButton.setAttribute('title', this.localizedTexts('Clear')));
                }, Uploader.prototype.reRenderFileList = function() {
                    this.listParent && ((0, ej2_base /* detach */ .og)(this.listParent), this.listParent = null, this.fileList = [], this.createFileList(this.filesData), this.actionButtons && (this.removeActionButtons(), this.renderActionButtons(), this.checkActionButtonStatus()));
                }, Uploader.prototype.preRender = function() {
                    this.localeText = {
                        Browse: 'Browse...',
                        Clear: 'Clear',
                        Upload: 'Upload',
                        dropFilesHint: 'Or drop files here',
                        invalidMaxFileSize: 'File size is too large',
                        invalidMinFileSize: 'File size is too small',
                        invalidFileType: 'File type is not allowed',
                        uploadFailedMessage: 'File failed to upload',
                        uploadSuccessMessage: 'File uploaded successfully',
                        removedSuccessMessage: 'File removed successfully',
                        removedFailedMessage: 'Unable to remove file',
                        inProgress: 'Uploading',
                        readyToUploadMessage: 'Ready to upload',
                        abort: 'Abort',
                        remove: 'Remove',
                        cancel: 'Cancel',
                        delete: 'Delete file',
                        pauseUpload: 'File upload paused',
                        pause: 'Pause',
                        resume: 'Resume',
                        retry: 'Retry',
                        fileUploadCancel: 'File upload canceled',
                        invalidFileSelection: 'Invalid files selected',
                        totalFiles: 'Total files',
                        size: 'Size'
                    }, this.l10n = new ej2_base /* L10n */ .E7('uploader', this.localeText, this.locale), this.preLocaleObj = (0, ej2_base /* getValue */ .NA)('currentLocale', this.l10n), this.formRendered(), this.updateHTMLAttrToElement(), this.checkHTMLAttributes(!1);
                    var ejInstance = (0, ej2_base /* getValue */ .NA)('ej2_instances', this.element);
                    /* istanbul ignore next */ if ('EJS-UPLOADER' === this.element.tagName) {
                        for(var inputElement = this.createElement('input', {
                            attrs: {
                                type: 'file'
                            }
                        }), index = 0; index < this.element.attributes.length; index++)inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue), inputElement.innerHTML = this.element.innerHTML;
                        inputElement.hasAttribute('name') || inputElement.setAttribute('name', 'UploadFiles'), this.element.appendChild(inputElement), this.element = inputElement, (0, ej2_base /* setValue */ .sO)('ej2_instances', ejInstance, this.element);
                    }
                    ejInstance[0].isPureReactComponent && ((0, ej2_base /* isNullOrUndefined */ .le)(ejInstance[0].props.name) ? !(0, ej2_base /* isNullOrUndefined */ .le)(ejInstance[0].props.id) && (0, ej2_base /* isNullOrUndefined */ .le)(ejInstance[0].props.name) ? this.element.setAttribute('name', ejInstance[0].props.id) : this.element.setAttribute('name', 'UploadFiles') : this.element.setAttribute('name', ejInstance[0].props.name)), (0, ej2_base /* isNullOrUndefined */ .le)(this.element.getAttribute('name')) && this.element.setAttribute('name', this.element.getAttribute('id')), this.element.hasAttribute('type') || this.element.setAttribute('type', 'file'), this.updateDirectoryAttributes(), this.keyConfigs = {
                        enter: 'enter'
                    }, this.element.hasAttribute('tabindex') && (this.tabIndex = this.element.getAttribute('tabindex')), this.browserName = ej2_base /* Browser.info.name */ .AR.info.name, this.uploaderName = this.element.getAttribute('name');
                }, Uploader.prototype.formRendered = function() {
                    var parentEle = (0, ej2_base /* closest */ .oq)(this.element, 'form');
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(parentEle)) for(; parentEle && parentEle !== document.documentElement; parentEle = parentEle.parentElement)'FORM' === parentEle.tagName && (this.isForm = !0, this.formElement = parentEle, parentEle.setAttribute('enctype', 'multipart/form-data'), parentEle.setAttribute('encoding', 'multipart/form-data'));
                }, Uploader.prototype.getPersistData = function() {
                    return this.addOnPersist([
                        'filesData'
                    ]);
                }, /**
     * Return the module name of the component.
     *
     * @returns {string} Returns the component name.
     */ Uploader.prototype.getModuleName = function() {
                    return 'uploader';
                }, Uploader.prototype.updateDirectoryAttributes = function() {
                    this.directoryUpload ? (this.element.setAttribute('directory', 'true'), this.element.setAttribute('webkitdirectory', 'true')) : (this.element.removeAttribute('directory'), this.element.removeAttribute('webkitdirectory'));
                }, /**
     * To Initialize the control rendering
     *
     * @private
     * @returns {void}
     */ Uploader.prototype.render = function() {
                    this.renderBrowseButton(), this.initializeUpload(), this.updateHTMLAttrToWrapper(), this.wireEvents(), this.setMultipleSelection(), this.setExtensions(this.allowedExtensions), this.setRTL(), this.renderPreLoadFiles(), this.setControlStatus(), this.setCSSClass();
                }, Uploader.prototype.renderBrowseButton = function() {
                    this.browseButton = this.createElement('button', {
                        className: 'e-css e-btn',
                        attrs: {
                            type: 'button'
                        }
                    }), this.browseButton.setAttribute('tabindex', this.tabIndex), 'string' == typeof this.buttons.browse ? (this.browseButton.textContent = 'Browse...' === this.buttons.browse ? this.localizedTexts('Browse') : this.buttons.browse, this.browseButton.setAttribute('title', this.browseButton.innerText)) : this.browseButton.appendChild(this.buttons.browse), this.element.setAttribute('aria-label', 'Uploader');
                }, Uploader.prototype.renderActionButtons = function() {
                    this.element.setAttribute('tabindex', '-1'), this.actionButtons = this.createElement('div', {
                        className: 'e-upload-actions'
                    }), this.uploadButton = this.createElement('button', {
                        className: 'e-file-upload-btn e-css e-btn e-flat e-primary',
                        attrs: {
                            type: 'button',
                            tabindex: this.btnTabIndex
                        }
                    }), this.clearButton = this.createElement('button', {
                        className: 'e-file-clear-btn e-css e-btn e-flat',
                        attrs: {
                            type: 'button',
                            tabindex: this.btnTabIndex
                        }
                    }), this.actionButtons.appendChild(this.clearButton), this.actionButtons.appendChild(this.uploadButton), this.renderButtonTemplates(), this.uploadWrapper.appendChild(this.actionButtons), this.browseButton.blur(), this.isPreloadFiles || this.uploadButton.focus(), this.wireActionButtonEvents();
                }, /* istanbul ignore next */ Uploader.prototype.serverActionButtonsEventBind = function(element) {
                    element && !this.isForm && (this.browseButton.blur(), this.actionButtons = element, this.uploadButton = this.actionButtons.querySelector('.e-file-upload-btn'), this.clearButton = this.actionButtons.querySelector('.e-file-clear-btn'), this.uploadButton.focus(), this.unwireActionButtonEvents(), this.wireActionButtonEvents(), this.checkActionButtonStatus());
                }, Uploader.prototype.wireActionButtonEvents = function() {
                    ej2_base /* EventHandler.add */ .bi.add(this.uploadButton, 'click', this.uploadButtonClick, this), ej2_base /* EventHandler.add */ .bi.add(this.clearButton, 'click', this.clearButtonClick, this);
                }, Uploader.prototype.unwireActionButtonEvents = function() {
                    ej2_base /* EventHandler.remove */ .bi.remove(this.uploadButton, 'click', this.uploadButtonClick), ej2_base /* EventHandler.remove */ .bi.remove(this.clearButton, 'click', this.clearButtonClick);
                }, Uploader.prototype.removeActionButtons = function() {
                    this.actionButtons && (this.unwireActionButtonEvents(), (0, ej2_base /* detach */ .og)(this.actionButtons), this.actionButtons = null);
                }, Uploader.prototype.renderButtonTemplates = function() {
                    if ('string' == typeof this.buttons.browse ? (this.browseButton.textContent = 'Browse...' === this.buttons.browse ? this.localizedTexts('Browse') : this.buttons.browse, this.browseButton.setAttribute('title', this.browseButton.textContent)) : (this.browseButton.innerHTML = '', this.browseButton.appendChild(this.buttons.browse)), this.uploadButton) {
                        var uploadText = (0, ej2_base /* isNullOrUndefined */ .le)(this.buttons.upload) ? 'Upload' : this.buttons.upload;
                        this.buttons.upload = uploadText, 'string' == typeof this.buttons.upload ? (this.uploadButton.textContent = 'Upload' === this.buttons.upload ? this.localizedTexts('Upload') : this.buttons.upload, this.uploadButton.setAttribute('title', this.uploadButton.textContent)) : (this.uploadButton.innerHTML = '', this.uploadButton.appendChild(this.buttons.upload));
                    }
                    if (this.clearButton) {
                        var clearText = (0, ej2_base /* isNullOrUndefined */ .le)(this.buttons.clear) ? 'Clear' : this.buttons.clear;
                        this.buttons.clear = clearText, 'string' == typeof this.buttons.clear ? (this.clearButton.textContent = 'Clear' === this.buttons.clear ? this.localizedTexts('Clear') : this.buttons.clear, this.clearButton.setAttribute('title', this.clearButton.textContent)) : (this.clearButton.innerHTML = '', this.clearButton.appendChild(this.buttons.clear));
                    }
                }, Uploader.prototype.initializeUpload = function() {
                    this.element.setAttribute('tabindex', '-1');
                    var inputWrapper = this.createElement('span', {
                        className: INPUT_WRAPPER
                    });
                    this.element.parentElement.insertBefore(inputWrapper, this.element), this.dropAreaWrapper = this.createElement('div', {
                        className: 'e-file-select-wrap'
                    }), this.element.parentElement.insertBefore(this.dropAreaWrapper, this.element), inputWrapper.appendChild(this.element), this.dropAreaWrapper.appendChild(this.browseButton), this.dropAreaWrapper.appendChild(inputWrapper), this.uploadWrapper = this.createElement('div', {
                        className: 'e-upload e-control-wrapper'
                    }), this.dropAreaWrapper.parentElement.insertBefore(this.uploadWrapper, this.dropAreaWrapper), this.uploadWrapper.appendChild(this.dropAreaWrapper), this.setDropArea();
                }, Uploader.prototype.renderPreLoadFiles = function() {
                    if (this.files.length) {
                        if (this.enablePersistence && this.filesData.length) {
                            this.createFileList(this.filesData);
                            return;
                        }
                        if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.files[0].size)) {
                            this.isPreloadFiles = !0;
                            var files = [].slice.call(this.files), filesData = [];
                            this.multiple || (this.clearData(), files = [
                                files[0]
                            ]);
                            for(var _i = 0, files_1 = files; _i < files_1.length; _i++){
                                var data = files_1[_i], fileData = {
                                    name: data.name + '.' + data.type.split('.')[data.type.split('.').length - 1],
                                    rawFile: '',
                                    size: data.size,
                                    status: this.localizedTexts('uploadSuccessMessage'),
                                    type: data.type,
                                    validationMessages: {
                                        minSize: '',
                                        maxSize: ''
                                    },
                                    statusCode: '2'
                                };
                                filesData.push(fileData), this.filesData.push(fileData);
                            }
                            this.createFileList(filesData), !this.autoUpload && this.listParent && !this.actionButtons && (!this.isForm || this.allowUpload()) && this.showFileList && this.renderActionButtons(), this.checkActionButtonStatus(), this.sequentialUpload && (this.count = this.filesData.length - 1), this.isPreloadFiles = !1;
                        }
                    }
                }, Uploader.prototype.checkActionButtonStatus = function() {
                    if (this.actionButtons) {
                        var length_1 = this.uploadWrapper.querySelectorAll('.' + VALIDATION_FAILS).length + this.uploadWrapper.querySelectorAll('.e-upload-fails:not(.e-upload-progress)').length + this.uploadWrapper.querySelectorAll('span.' + UPLOAD_SUCCESS).length + this.uploadWrapper.querySelectorAll('span.' + UPLOAD_INPROGRESS).length;
                        length_1 > 0 && length_1 === this.uploadWrapper.querySelectorAll('li').length ? this.uploadButton.setAttribute('disabled', 'disabled') : this.uploadButton.removeAttribute('disabled');
                    }
                }, Uploader.prototype.setDropArea = function() {
                    var dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');
                    if (this.dropArea) {
                        this.dropZoneElement = 'string' != typeof this.dropArea ? this.dropArea : (0, ej2_base /* select */ .Ys)(this.dropArea, document);
                        for(var element = this.element, enableDropText = !1; element.parentNode;)(element = element.parentNode) === this.dropZoneElement && (enableDropText = !0, dropTextArea ? dropTextArea.innerHTML = this.localizedTexts('dropFilesHint') : this.createDropTextHint());
                        !enableDropText && dropTextArea && (0, ej2_base /* remove */ .Od)(dropTextArea);
                    } else (0, ej2_base /* isNullOrUndefined */ .le)(this.uploaderOptions) || void 0 !== this.uploaderOptions.dropArea || (this.createDropTextHint(), this.dropZoneElement = this.uploadWrapper, this.setProperties({
                        dropArea: this.uploadWrapper
                    }, !0));
                    this.bindDropEvents();
                }, Uploader.prototype.updateDropArea = function() {
                    if (this.dropArea) this.setDropArea();
                    else {
                        this.dropZoneElement = null;
                        var dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');
                        dropTextArea && (0, ej2_base /* remove */ .Od)(dropTextArea);
                    }
                }, Uploader.prototype.createDropTextHint = function() {
                    var fileDropArea = this.createElement('span', {
                        className: DROP_AREA
                    });
                    fileDropArea.innerHTML = this.localizedTexts('dropFilesHint'), this.dropAreaWrapper.appendChild(fileDropArea);
                }, Uploader.prototype.updateHTMLAttrToElement = function() {
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.htmlAttributes)) for(var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++){
                        var pro = _a[_i];
                        0 > wrapperAttr.indexOf(pro) && this.element.setAttribute(pro, this.htmlAttributes[pro]);
                    }
                }, Uploader.prototype.updateHTMLAttrToWrapper = function() {
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.htmlAttributes)) for(var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++){
                        var pro = _a[_i];
                        if (wrapperAttr.indexOf(pro) > -1) {
                            if ('class' === pro) {
                                var updatedClassValues = this.htmlAttributes[pro].replace(/\s+/g, ' ').trim();
                                '' !== updatedClassValues && (0, ej2_base /* addClass */ .cn)([
                                    this.uploadWrapper
                                ], updatedClassValues.split(' '));
                            } else if ('style' === pro) {
                                var uploadStyle = this.uploadWrapper.getAttribute(pro);
                                uploadStyle = (0, ej2_base /* isNullOrUndefined */ .le)(uploadStyle) ? this.htmlAttributes[pro] : uploadStyle + this.htmlAttributes[pro], this.uploadWrapper.setAttribute(pro, uploadStyle);
                            } else this.uploadWrapper.setAttribute(pro, this.htmlAttributes[pro]);
                        }
                    }
                }, Uploader.prototype.setMultipleSelection = function() {
                    if (this.multiple && !this.element.hasAttribute('multiple')) {
                        var newAttr = document.createAttribute('multiple');
                        newAttr.value = 'multiple', this.element.setAttributeNode(newAttr);
                    } else this.multiple || this.element.removeAttribute('multiple');
                }, Uploader.prototype.checkAutoUpload = function(fileData) {
                    this.autoUpload ? (this.sequentialUpload ? /* istanbul ignore next */ this.sequenceUpload(fileData) : this.upload(fileData), this.removeActionButtons()) : this.actionButtons || this.renderActionButtons(), this.checkActionButtonStatus();
                }, Uploader.prototype.sequenceUpload = function(fileData) {
                    if (this.filesData.length - fileData.length == 0 || '1' !== this.filesData[this.filesData.length - fileData.length - 1].statusCode) {
                        ++this.count;
                        var isFileListCreated = !this.showFileList;
                        'object' == typeof this.filesData[this.count] ? (this.isFirstFileOnSelection = !1, this.upload(this.filesData[this.count], isFileListCreated), '0' === this.filesData[this.count].statusCode && this.sequenceUpload(fileData)) : --this.count;
                    }
                }, Uploader.prototype.setCSSClass = function(oldCSSClass) {
                    var updatedCssClassValue = this.cssClass;
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.cssClass) || '' === this.cssClass || (updatedCssClassValue = this.cssClass.replace(/\s+/g, ' ').trim()), (0, ej2_base /* isNullOrUndefined */ .le)(this.cssClass) || '' === updatedCssClassValue || (0, ej2_base /* addClass */ .cn)([
                        this.uploadWrapper
                    ], updatedCssClassValue.split(updatedCssClassValue.indexOf(',') > -1 ? ',' : ' '));
                    var updatedOldCssClass = oldCSSClass;
                    (0, ej2_base /* isNullOrUndefined */ .le)(oldCSSClass) || (updatedOldCssClass = oldCSSClass.replace(/\s+/g, ' ').trim()), (0, ej2_base /* isNullOrUndefined */ .le)(oldCSSClass) || '' === updatedOldCssClass || (0, ej2_base /* removeClass */ .IV)([
                        this.uploadWrapper
                    ], updatedOldCssClass.split(' '));
                }, Uploader.prototype.wireEvents = function() {
                    ej2_base /* EventHandler.add */ .bi.add(this.browseButton, 'click', this.browseButtonClick, this), ej2_base /* EventHandler.add */ .bi.add(this.element, 'change', this.onSelectFiles, this), ej2_base /* EventHandler.add */ .bi.add(document, 'click', this.removeFocus, this), this.keyboardModule = new ej2_base /* KeyboardEvents */ .nv(this.uploadWrapper, {
                        keyAction: this.keyActionHandler.bind(this),
                        keyConfigs: this.keyConfigs,
                        eventName: 'keydown'
                    }), this.isForm && ej2_base /* EventHandler.add */ .bi.add(this.formElement, 'reset', this.resetForm, this);
                }, Uploader.prototype.unWireEvents = function() {
                    ej2_base /* EventHandler.remove */ .bi.remove(this.browseButton, 'click', this.browseButtonClick), ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'change', this.onSelectFiles), ej2_base /* EventHandler.remove */ .bi.remove(document, 'click', this.removeFocus), this.isForm && ej2_base /* EventHandler.remove */ .bi.remove(this.formElement, 'reset', this.resetForm), this.keyboardModule && this.keyboardModule.destroy();
                }, Uploader.prototype.resetForm = function() {
                    this.clearAll();
                }, Uploader.prototype.keyActionHandler = function(e) {
                    var targetElement = e.target;
                    if ('enter' === e.action) {
                        if (e.target === this.clearButton) this.clearButtonClick();
                        else if (e.target === this.uploadButton) this.uploadButtonClick();
                        else if (e.target === this.browseButton) this.browseButtonClick();
                        else if (targetElement.classList.contains(PAUSE_UPLOAD)) {
                            var metaData = this.getCurrentMetaData(null, e);
                            metaData.file.statusCode = '4', metaData.file.status = this.localizedTexts('pauseUpload'), this.abortUpload(metaData, !1);
                        } else if (targetElement.classList.contains(RESUME_UPLOAD)) this.resumeUpload(this.getCurrentMetaData(null, e), e);
                        else if (targetElement.classList.contains(RETRY_ICON)) {
                            var metaData = this.getCurrentMetaData(null, e);
                            if ((0, ej2_base /* isNullOrUndefined */ .le)(metaData)) {
                                var target = e.target.parentElement, fileData = this.filesData[this.fileList.indexOf(target)];
                                this.retry(fileData);
                            } else metaData.file.statusCode = '1', metaData.file.status = this.localizedTexts('readyToUploadMessage'), this.chunkUpload(metaData.file);
                        } else this.removeFiles(e), targetElement.classList.contains(ABORT_ICON) || this.browseButton.focus();
                        e.preventDefault(), e.stopPropagation();
                    }
                }, Uploader.prototype.getCurrentMetaData = function(fileInfo, e) {
                    if ((0, ej2_base /* isNullOrUndefined */ .le)(fileInfo)) {
                        var fileData, targetMetaData, target = e.target.parentElement;
                        fileData = this.filesData[this.fileList.indexOf(target)];
                    } else fileData = fileInfo;
                    for(var i = 0; i < this.uploadMetaData.length; i++)this.uploadMetaData[i].file.name === fileData.name && (targetMetaData = this.uploadMetaData[i]);
                    return targetMetaData;
                }, Uploader.prototype.removeFocus = function() {
                    this.uploadWrapper && this.listParent && this.listParent.querySelector('.' + ICON_FOCUSED) && (document.activeElement.blur(), this.listParent.querySelector('.' + ICON_FOCUSED).classList.remove(ICON_FOCUSED));
                }, Uploader.prototype.browseButtonClick = function() {
                    this.element.click();
                }, Uploader.prototype.uploadButtonClick = function() {
                    this.sequentialUpload ? this.sequenceUpload(this.filesData) : this.upload(this.filesData);
                }, Uploader.prototype.clearButtonClick = function() {
                    this.clearAll(), this.sequentialUpload && (this.count = -1), this.actionCompleteCount = 0;
                }, Uploader.prototype.bindDropEvents = function() {
                    this.dropZoneElement && (ej2_base /* EventHandler.add */ .bi.add(this.dropZoneElement, 'drop', this.dropElement, this), ej2_base /* EventHandler.add */ .bi.add(this.dropZoneElement, 'dragover', this.dragHover, this), ej2_base /* EventHandler.add */ .bi.add(this.dropZoneElement, 'dragleave', this.onDragLeave, this), ej2_base /* EventHandler.add */ .bi.add(this.dropZoneElement, 'paste', this.onPasteFile, this), ej2_base /* EventHandler.add */ .bi.add(this.dropZoneElement, 'dragenter', this.onDragEnter, this));
                }, Uploader.prototype.unBindDropEvents = function() {
                    this.dropZoneElement && (ej2_base /* EventHandler.remove */ .bi.remove(this.dropZoneElement, 'drop', this.dropElement), ej2_base /* EventHandler.remove */ .bi.remove(this.dropZoneElement, 'dragover', this.dragHover), ej2_base /* EventHandler.remove */ .bi.remove(this.dropZoneElement, 'dragleave', this.onDragLeave), ej2_base /* EventHandler.remove */ .bi.remove(this.dropZoneElement, 'dragenter', this.onDragEnter));
                }, Uploader.prototype.onDragEnter = function(e) {
                    this.enabled && (this.dropZoneElement.classList.add(DRAG_HOVER), this.dragCounter = this.dragCounter + 1, e.preventDefault(), e.stopPropagation());
                }, Uploader.prototype.onDragLeave = function() {
                    this.enabled && (this.dragCounter = this.dragCounter - 1, this.dragCounter || this.dropZoneElement.classList.remove(DRAG_HOVER));
                }, Uploader.prototype.dragHover = function(e) {
                    this.enabled && ('Default' !== this.dropEffect && (e.dataTransfer.dropEffect = this.dropEffect.toLowerCase()), e.preventDefault(), e.stopPropagation());
                }, /* istanbul ignore next */ Uploader.prototype.dropElement = function(e) {
                    this.dragCounter = 0, this.dropZoneElement.classList.remove(DRAG_HOVER), this.onSelectFiles(e), e.preventDefault(), e.stopPropagation();
                }, /* istanbul ignore next */ Uploader.prototype.onPasteFile = function(event) {
                    var item = event.clipboardData.items;
                    if ('paste' == event.type && 'msie' !== this.browserName && 'edge' !== this.browserName && 'safari' !== this.browserName && (this.element.files = event.clipboardData.files), 1 === item.length) {
                        var pasteFile = [].slice.call(item)[0];
                        'file' === pasteFile.kind && pasteFile.type.match('^image/') && this.renderSelectedFiles(event, [
                            pasteFile.getAsFile()
                        ], !1, !0);
                    }
                }, Uploader.prototype.getSelectedFiles = function(index) {
                    for(var data = [], liElement = this.fileList[index], allFiles = this.getFilesData(), nameElements = +liElement.getAttribute('data-files-count'), startIndex = 0, i = 0; i < index; i++)startIndex += +this.fileList[i].getAttribute('data-files-count');
                    for(var j = startIndex; j < startIndex + nameElements; j++)data.push(allFiles[j]);
                    return data;
                }, Uploader.prototype.removeFiles = function(args) {
                    if (this.enabled) {
                        var selectedElement = args.target.parentElement, index = this.fileList.indexOf(selectedElement), liElement = this.fileList[index], formUpload = this.isFormUpload(), fileData = formUpload ? this.getSelectedFiles(index) : this.getFilesInArray(this.filesData[index]);
                        if (!(0, ej2_base /* isNullOrUndefined */ .le)(fileData)) {
                            if (args.target.classList.contains(ABORT_ICON) && !formUpload) {
                                if (fileData[0].statusCode = '5', !(0, ej2_base /* isNullOrUndefined */ .le)(liElement)) {
                                    var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);
                                    createSpinner({
                                        target: spinnerTarget,
                                        width: '20px'
                                    }), showSpinner(spinnerTarget);
                                }
                                this.sequentialUpload && /* istanbul ignore next */ this.uploadSequential(), liElement.classList.contains(RESTRICT_RETRY) || this.checkActionComplete(!0);
                            } else (0, ej2_base /* closest */ .oq)(args.target, '.' + SPINNER_PANE) || this.remove(fileData, !1, !1, !0, args);
                            this.element.value = '', this.checkActionButtonStatus();
                        }
                    }
                }, Uploader.prototype.removeFilesData = function(file, customTemplate) {
                    if (customTemplate) {
                        this.showFileList || (index = this.filesData.indexOf(file), this.filesData.splice(index, 1));
                        return;
                    }
                    var index, selectedElement = this.getLiElement(file);
                    !(0, ej2_base /* isNullOrUndefined */ .le)(selectedElement) && ((0, ej2_base /* detach */ .og)(selectedElement), index = this.fileList.indexOf(selectedElement), this.fileList.splice(index, 1), this.filesData.splice(index, 1), 0 !== this.fileList.length || (0, ej2_base /* isNullOrUndefined */ .le)(this.listParent) || ((0, ej2_base /* detach */ .og)(this.listParent), this.listParent = null, this.removeActionButtons()), this.sequentialUpload && index <= this.count && --this.count);
                }, Uploader.prototype.removeUploadedFile = function(file, eventArgs, removeDirectly, custom) {
                    var _this = this, ajax = new ej2_base /* Ajax */ .tk(this.asyncSettings.removeUrl, 'POST', !0, null);
                    ajax.emitError = !1;
                    var formData = new FormData();
                    ajax.beforeSend = function(e) {
                        eventArgs.currentRequest = ajax.httpRequest, removeDirectly ? _this.removingEventCallback(eventArgs, formData, file, file) : _this.trigger('removing', eventArgs, function(eventArgs) {
                            eventArgs.cancel ? e.cancel = !0 : _this.removingEventCallback(eventArgs, formData, file, file);
                        });
                    }, ajax.onLoad = function(e) {
                        return _this.removeCompleted(e, file, custom), {};
                    }, /* istanbul ignore next */ ajax.onError = function(e) {
                        return _this.removeFailed(e, file, custom), {};
                    }, ajax.send(formData);
                }, Uploader.prototype.removingEventCallback = function(eventArgs, formData, selectedFiles, file) {
                    /* istanbul ignore next */ var name = this.element.getAttribute('name'), liElement = this.getLiElement(file);
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(liElement) && (!(0, ej2_base /* isNullOrUndefined */ .le)(liElement.querySelector('.' + DELETE_ICON)) || !(0, ej2_base /* isNullOrUndefined */ .le)(liElement.querySelector('.' + REMOVE_ICON)))) {
                        var spinnerTarget = liElement.querySelector('.' + DELETE_ICON) ? liElement.querySelector('.' + DELETE_ICON) : liElement.querySelector('.' + REMOVE_ICON);
                        createSpinner({
                            target: spinnerTarget,
                            width: '20px'
                        }), showSpinner(spinnerTarget);
                    }
                    eventArgs.postRawFile && !(0, ej2_base /* isNullOrUndefined */ .le)(selectedFiles.rawFile) && '' !== selectedFiles.rawFile ? formData.append(name, selectedFiles.rawFile, selectedFiles.name) : formData.append(name, selectedFiles.name), this.updateFormData(formData, eventArgs.customFormData);
                }, /* istanbul ignore next */ Uploader.prototype.updateFormData = function(formData, customData) {
                    if (customData.length > 0 && customData[0]) for(var i = 0; i < customData.length; i++)!function(i) {
                        var data = customData[i], value = Object.keys(data).map(function(e) {
                            return data[e];
                        });
                        formData.append(Object.keys(data)[0], value);
                    }(i);
                }, /* istanbul ignore next */ Uploader.prototype.updateCustomheader = function(request, currentRequest) {
                    if (currentRequest.length > 0 && currentRequest[0]) for(var i = 0; i < currentRequest.length; i++)!function(i) {
                        var data = currentRequest[i], value = Object.keys(data).map(function(e) {
                            return data[e];
                        });
                        request.setRequestHeader(Object.keys(data)[0], value);
                    }(i);
                }, Uploader.prototype.removeCompleted = function(e, files, customTemplate) {
                    var response = e && e.currentTarget ? this.getResponse(e) : null, status = e.target;
                    if (4 === status.readyState && status.status >= 200 && status.status <= 299) {
                        var args = {
                            e: e,
                            response: response,
                            operation: 'remove',
                            file: this.updateStatus(files, this.localizedTexts('removedSuccessMessage'), '2')
                        };
                        this.trigger('success', args), this.removeFilesData(files, customTemplate);
                        var index = this.uploadedFilesData.indexOf(files);
                        this.uploadedFilesData.splice(index, 1), this.trigger('change', {
                            files: this.uploadedFilesData
                        });
                    } else this.removeFailed(e, files, customTemplate);
                }, Uploader.prototype.removeFailed = function(e, files, customTemplate) {
                    var response = e && e.currentTarget ? this.getResponse(e) : null, args = {
                        e: e,
                        response: response,
                        operation: 'remove',
                        file: this.updateStatus(files, this.localizedTexts('removedFailedMessage'), '0')
                    };
                    if (!customTemplate) {
                        var index = this.filesData.indexOf(files), rootElement = this.fileList[index];
                        if (rootElement) {
                            rootElement.classList.remove(UPLOAD_SUCCESS), rootElement.classList.add(UPLOAD_FAILED);
                            var statusElement = rootElement.querySelector('.' + STATUS);
                            statusElement && (statusElement.classList.remove(UPLOAD_SUCCESS), statusElement.classList.add(UPLOAD_FAILED));
                        }
                        this.checkActionButtonStatus();
                    }
                    this.trigger('failure', args);
                    var liElement = this.getLiElement(files);
                    /* istanbul ignore next */ (0, ej2_base /* isNullOrUndefined */ .le)(liElement) || (0, ej2_base /* isNullOrUndefined */ .le)(liElement.querySelector('.' + DELETE_ICON)) || (hideSpinner(liElement.querySelector('.' + DELETE_ICON)), (0, ej2_base /* detach */ .og)(liElement.querySelector('.e-spinner-pane')));
                }, /* istanbul ignore next */ Uploader.prototype.getFilesFromFolder = function(event) {
                    this.filesEntries = [];
                    var items = this.multiple ? event.dataTransfer.items : [
                        event.dataTransfer.items[0]
                    ];
                    if (this.checkDirectoryUpload(items)) for(var this_1 = this, i = 0; i < items.length; i++)!function(i) {
                        var item = items[i].webkitGetAsEntry();
                        if (item.isFile) {
                            var files_2 = [];
                            item.file(function(fileObj) {
                                var path = item.fullPath;
                                files_2.push({
                                    path: path,
                                    file: fileObj
                                });
                            }), this_1.renderSelectedFiles(event, files_2, !0);
                        } else item.isDirectory && this_1.traverseFileTree(item, event);
                    }(i);
                }, /* istanbul ignore next */ Uploader.prototype.checkDirectoryUpload = function(items) {
                    for(var i = 0; items && i < items.length; i++)if (items[i].webkitGetAsEntry().isDirectory) return !0;
                    return !1;
                }, /* eslint-disable @typescript-eslint/explicit-module-boundary-types */ /* istanbul ignore next */ Uploader.prototype.traverseFileTree = function(item, event) {
                    /* eslint-enable @typescript-eslint/explicit-module-boundary-types */ if (item.isFile) this.filesEntries.push(item);
                    else if (item.isDirectory) {
                        var directoryReader = item.createReader();
                        this.readFileFromDirectory(directoryReader, event);
                    }
                }, /* istanbul ignore next */ Uploader.prototype.readFileFromDirectory = function(directoryReader, event) {
                    var _this = this;
                    directoryReader.readEntries(function(entries) {
                        for(var i = 0; i < entries.length; i++)_this.traverseFileTree(entries[i], event);
                        _this.pushFilesEntries(event), entries.length && _this.readFileFromDirectory(directoryReader);
                    });
                }, Uploader.prototype.pushFilesEntries = function(event) {
                    for(var _this = this, files = [], _loop_4 = function(i) {
                        this_2.filesEntries[i].file(function(fileObj) {
                            if (_this.filesEntries.length) {
                                var path = _this.filesEntries[i].fullPath;
                                files.push({
                                    path: path,
                                    file: fileObj
                                }), i === _this.filesEntries.length - 1 && (_this.filesEntries = [], _this.renderSelectedFiles(event, files, !0));
                            }
                        });
                    }, this_2 = this, i = 0; i < this.filesEntries.length; i++)_loop_4(i);
                }, Uploader.prototype.onSelectFiles = function(args) {
                    if (this.enabled) {
                        /* istanbul ignore next */ if ('drop' === args.type) {
                            if (this.directoryUpload) this.getFilesFromFolder(args);
                            else {
                                var targetFiles, files = this.sortFilesList = args.dataTransfer.files;
                                'msie' !== this.browserName && 'edge' !== this.browserName && 'safari' !== this.browserName && (this.element.files = files), files.length > 0 && (targetFiles = this.multiple ? this.sortFileList(files) : [
                                    files[0]
                                ], this.renderSelectedFiles(args, targetFiles));
                            }
                        } else targetFiles = [].slice.call(args.target.files), this.renderSelectedFiles(args, targetFiles);
                        this.isAngular && args.stopPropagation();
                    }
                }, /* istanbul ignore next */ Uploader.prototype.getBase64 = function(file) {
                    return new Promise(function(resolve, reject) {
                        var fileReader = new FileReader();
                        fileReader.readAsDataURL(file), fileReader.onload = function() {
                            return resolve(fileReader.result);
                        }, fileReader.onerror = function(error) {
                            return reject(error);
                        };
                    });
                }, /* istanbul ignore next */ /* tslint:ignore */ Uploader.prototype.renderSelectedFiles = function(args, targetFiles, directory, paste) {
                    var _this = this;
                    this.base64String = [];
                    var eventArgs = {
                        event: args,
                        cancel: !1,
                        filesData: [],
                        isModified: !1,
                        modifiedFilesData: [],
                        progressInterval: '',
                        isCanceled: !1,
                        currentRequest: null,
                        customFormData: null
                    };
                    /* istanbul ignore next */ if (targetFiles.length < 1) {
                        eventArgs.isCanceled = !0, this.trigger('selected', eventArgs);
                        return;
                    }
                    this.flag = !0;
                    var fileData = [];
                    this.multiple || (this.clearData(!0), targetFiles = [
                        targetFiles[0]
                    ]);
                    for(var i = 0; i < targetFiles.length; i++){
                        var file = directory ? targetFiles[i].file : targetFiles[i];
                        this.updateInitialFileDetails(args, targetFiles, file, i, fileData, directory, paste);
                    }
                    eventArgs.filesData = fileData, this.allowedExtensions.indexOf('*') > -1 && (this.allTypes = !0), this.allTypes || (fileData = this.checkExtension(fileData)), this.trigger('selected', eventArgs, function(eventArgs) {
                        _this._internalRenderSelect(eventArgs, fileData);
                    });
                }, Uploader.prototype.updateInitialFileDetails = function(args, // eslint-disable-next-line @typescript-eslint/indent
                targetFiles, file, i, fileData, directory, paste) {
                    var fileDetails = {
                        name: directory ? targetFiles[i].path.substring(1, targetFiles[i].path.length) : paste ? (0, ej2_base /* getUniqueID */ .QI)(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name) : this.directoryUpload ? targetFiles[i].webkitRelativePath : file.name,
                        rawFile: file,
                        size: file.size,
                        status: this.localizedTexts('readyToUploadMessage'),
                        type: this.getFileType(file.name),
                        validationMessages: this.validatedFileSize(file.size),
                        statusCode: '1',
                        id: (0, ej2_base /* getUniqueID */ .QI)(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name)
                    };
                    paste && (fileDetails.fileSource = 'paste'), fileDetails.status = '' !== fileDetails.validationMessages.minSize ? this.localizedTexts('invalidMinFileSize') : '' !== fileDetails.validationMessages.maxSize ? this.localizedTexts('invalidMaxFileSize') : fileDetails.status, ('' !== fileDetails.validationMessages.minSize || '' !== fileDetails.validationMessages.maxSize) && (fileDetails.statusCode = '0'), fileData.push(fileDetails);
                }, Uploader.prototype._internalRenderSelect = function(eventArgs, fileData) {
                    if (!eventArgs.cancel) {
                        if (/* istanbul ignore next */ this.selectedFiles = this.selectedFiles.concat(fileData), this.btnTabIndex = this.disableKeyboardNavigation ? '-1' : '0', this.showFileList) {
                            if (eventArgs.isModified && eventArgs.modifiedFilesData.length > 0) {
                                for(var j = 0; j < eventArgs.modifiedFilesData.length; j++)for(var k = 0; k < fileData.length; k++)eventArgs.modifiedFilesData[j].id === fileData[k].id && (eventArgs.modifiedFilesData[j].rawFile = fileData[k].rawFile);
                                var dataFiles = this.allTypes ? eventArgs.modifiedFilesData : this.checkExtension(eventArgs.modifiedFilesData);
                                this.updateSortedFileList(dataFiles), this.filesData = dataFiles, (!this.isForm || this.allowUpload()) && this.checkAutoUpload(dataFiles);
                            } else this.createFileList(fileData, !0), this.filesData = this.filesData.concat(fileData), (!this.isForm || this.allowUpload()) && this.checkAutoUpload(fileData);
                            (0, ej2_base /* isNullOrUndefined */ .le)(eventArgs.progressInterval) || '' === eventArgs.progressInterval || (this.progressInterval = eventArgs.progressInterval);
                        } else this.filesData = this.filesData.concat(fileData), this.autoUpload && this.upload(this.filesData, !0);
                        this.raiseActionComplete(), this.isFirstFileOnSelection = !0;
                    }
                }, Uploader.prototype.allowUpload = function() {
                    var allowFormUpload = !1;
                    return this.isForm && !(0, ej2_base /* isNullOrUndefined */ .le)(this.asyncSettings.saveUrl) && '' !== this.asyncSettings.saveUrl && (allowFormUpload = !0), allowFormUpload;
                }, Uploader.prototype.isFormUpload = function() {
                    var isFormUpload = !1;
                    return this.isForm && ((0, ej2_base /* isNullOrUndefined */ .le)(this.asyncSettings.saveUrl) || '' === this.asyncSettings.saveUrl) && ((0, ej2_base /* isNullOrUndefined */ .le)(this.asyncSettings.removeUrl) || '' === this.asyncSettings.removeUrl) && (isFormUpload = !0), isFormUpload;
                }, Uploader.prototype.clearData = function(singleUpload) {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.listParent) || ((0, ej2_base /* detach */ .og)(this.listParent), this.listParent = null), 'msie' === this.browserName || singleUpload || (this.element.value = ''), this.fileList = [], this.filesData = [], this.removeActionButtons();
                }, Uploader.prototype.updateSortedFileList = function(filesData) {
                    var removedList, previousListClone = this.createElement('div', {
                        id: 'clonewrapper'
                    }), added = -1;
                    if (this.listParent) {
                        for(var i = 0; i < this.listParent.querySelectorAll('li').length; i++){
                            var liElement = this.listParent.querySelectorAll('li')[i];
                            previousListClone.appendChild(liElement.cloneNode(!0));
                        }
                        removedList = this.listParent.querySelectorAll('li');
                        for(var _i = 0; _i < removedList.length; _i++){
                            var item = removedList[_i];
                            (0, ej2_base /* detach */ .og)(item);
                        }
                        this.removeActionButtons();
                        var oldList = [].slice.call(previousListClone.childNodes);
                        (0, ej2_base /* detach */ .og)(this.listParent), this.listParent = null, this.fileList = [], this.createParentUL();
                        for(var index = 0; index < filesData.length; index++){
                            for(var j = 0; j < this.filesData.length; j++)this.filesData[j].name === filesData[index].name && (this.listParent.appendChild(oldList[j]), ej2_base /* EventHandler.add */ .bi.add(oldList[j].querySelector('.e-icons'), 'click', this.removeFiles, this), this.fileList.push(oldList[j]), added = index);
                            added !== index && this.createFileList([
                                filesData[index]
                            ]);
                        }
                    } else this.createFileList(filesData);
                }, Uploader.prototype.isBlank = function(str) {
                    return !str || /^\s*$/.test(str);
                }, Uploader.prototype.checkExtension = function(files) {
                    if (!this.isBlank(this.allowedExtensions)) {
                        for(var allowedExtensions = [], extensions = this.allowedExtensions.split(','), _i = 0; _i < extensions.length; _i++){
                            var extension = extensions[_i];
                            allowedExtensions.push(extension.trim().toLocaleLowerCase());
                        }
                        for(var i = 0; i < files.length; i++)-1 === allowedExtensions.indexOf(('.' + files[i].type).toLocaleLowerCase()) && (files[i].status = this.localizedTexts('invalidFileType'), files[i].statusCode = '0');
                    }
                    return files;
                }, Uploader.prototype.validatedFileSize = function(fileSize) {
                    var minSizeError = '', maxSizeError = '';
                    return fileSize < this.minFileSize ? minSizeError = this.localizedTexts('invalidMinFileSize') : fileSize > this.maxFileSize ? maxSizeError = this.localizedTexts('invalidMaxFileSize') : (minSizeError = '', maxSizeError = ''), {
                        minSize: minSizeError,
                        maxSize: maxSizeError
                    };
                }, Uploader.prototype.isPreLoadFile = function(fileData) {
                    for(var isPreload = !1, i = 0; i < this.files.length; i++)this.files[i].name === fileData.name.slice(0, fileData.name.lastIndexOf('.')) && this.files[i].type === fileData.type && (isPreload = !0);
                    return isPreload;
                }, Uploader.prototype.createCustomfileList = function(fileData) {
                    this.createParentUL();
                    for(var _i = 0; _i < fileData.length; _i++){
                        var listItem = fileData[_i], listElement = this.createElement('li', {
                            className: FILE,
                            attrs: {
                                'data-file-name': listItem.name
                            }
                        });
                        this.uploadTemplateFn = this.templateComplier(this.template);
                        var liTempCompiler = this.uploadTemplateFn(listItem, this, 'template', this.element.id + 'Template', this.isStringTemplate, null, listElement);
                        if (liTempCompiler) {
                            var fromElements = [].slice.call(liTempCompiler);
                            (0, ej2_base /* append */ .R3)(fromElements, listElement);
                        }
                        var index = fileData.indexOf(listItem), eventArgs = {
                            element: listElement,
                            fileInfo: listItem,
                            index: index,
                            isPreload: this.isPreLoadFile(listItem)
                        }, eventsArgs = {
                            element: listElement,
                            fileInfo: listItem,
                            index: index,
                            isPreload: this.isPreLoadFile(listItem)
                        };
                        this.trigger('rendering', eventArgs), this.trigger('fileListRendering', eventsArgs), this.listParent.appendChild(listElement), this.fileList.push(listElement);
                    }
                    this.renderReactTemplates();
                }, Uploader.prototype.createParentUL = function() {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.listParent) && (this.listParent = this.createElement('ul', {
                        className: LIST_PARENT
                    }), this.uploadWrapper.appendChild(this.listParent));
                }, // eslint-disable-next-line @typescript-eslint/no-unused-vars
                Uploader.prototype.formFileList = function(fileData, files) {
                    var statusMessage, fileList = this.createElement('li', {
                        className: FILE
                    });
                    fileList.setAttribute('data-files-count', fileData.length + '');
                    for(var fileContainer = this.createElement('span', {
                        className: TEXT_CONTAINER
                    }), _i = 0; _i < fileData.length; _i++){
                        var listItem = fileData[_i], fileNameEle = this.createElement('span', {
                            className: FILE_NAME
                        });
                        fileNameEle.innerHTML = this.getFileNameOnly(listItem.name);
                        var fileTypeEle = this.createElement('span', {
                            className: FILE_TYPE
                        }), fileType = this.getFileType(listItem.name);
                        if (fileTypeEle.innerHTML = '.' + fileType, fileType || fileTypeEle.classList.add('e-hidden'), this.enableRtl) {
                            var rtlContainer = this.createElement('span', {
                                className: RTL_CONTAINER
                            });
                            rtlContainer.appendChild(fileTypeEle), rtlContainer.appendChild(fileNameEle), fileContainer.appendChild(rtlContainer);
                        } else fileContainer.appendChild(fileNameEle), fileContainer.appendChild(fileTypeEle);
                        this.truncateName(fileNameEle), statusMessage = this.formValidateFileInfo(listItem, fileList);
                    }
                    fileList.appendChild(fileContainer), this.setListToFileInfo(fileData, fileList);
                    var index = this.listParent.querySelectorAll('li').length, infoEle = this.createElement('span');
                    if (fileList.classList.contains(INVALID_FILE) ? (infoEle.classList.add(STATUS), infoEle.classList.add(INVALID_FILE), infoEle.innerText = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage) : (infoEle.classList.add(fileData.length > 1 ? 'e-file-information' : FILE_SIZE), infoEle.innerText = fileData.length > 1 ? this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , ' + this.localizedTexts('size') + ': ' + this.bytesToSize(this.getFileSize(fileData)) : this.bytesToSize(fileData[0].size), this.createFormInput(fileData)), fileContainer.appendChild(infoEle), (0, ej2_base /* isNullOrUndefined */ .le)(fileList.querySelector('.e-icons'))) {
                        var iconElement = this.createElement('span', {
                            className: 'e-icons',
                            attrs: {
                                tabindex: this.btnTabIndex
                            }
                        });
                        'msie' === this.browserName && iconElement.classList.add('e-msie'), iconElement.setAttribute('title', this.localizedTexts('remove')), fileList.appendChild(fileContainer), fileList.appendChild(iconElement), ej2_base /* EventHandler.add */ .bi.add(iconElement, 'click', this.removeFiles, this), iconElement.classList.add(REMOVE_ICON);
                    }
                    var eventArgs = {
                        element: fileList,
                        fileInfo: this.mergeFileInfo(fileData, fileList),
                        index: index,
                        isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))
                    }, eventsArgs = {
                        element: fileList,
                        fileInfo: this.mergeFileInfo(fileData, fileList),
                        index: index,
                        isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))
                    };
                    this.trigger('rendering', eventArgs), this.trigger('fileListRendering', eventsArgs), this.listParent.appendChild(fileList), this.fileList.push(fileList);
                }, Uploader.prototype.formValidateFileInfo = function(listItem, fileList) {
                    var statusMessage = listItem.status, validationMessages = this.validatedFileSize(listItem.size);
                    ('' !== validationMessages.minSize || '' !== validationMessages.maxSize) && (this.addInvalidClass(fileList), statusMessage = '' !== validationMessages.minSize ? this.localizedTexts('invalidMinFileSize') : '' !== validationMessages.maxSize ? this.localizedTexts('invalidMaxFileSize') : statusMessage);
                    var typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;
                    return typeValidationMessage === this.localizedTexts('invalidFileType') && (this.addInvalidClass(fileList), statusMessage = typeValidationMessage), statusMessage;
                }, Uploader.prototype.addInvalidClass = function(fileList) {
                    fileList.classList.add(INVALID_FILE);
                }, Uploader.prototype.createFormInput = function(fileData) {
                    if ('safari' !== this.browserName) {
                        var inputElement = this.element.cloneNode(!0);
                        inputElement.classList.add('e-hidden-file-input');
                        for(var _i = 0; _i < fileData.length; _i++)fileData[_i].input = inputElement;
                        inputElement.setAttribute('name', this.uploaderName), this.uploadWrapper.querySelector('.' + INPUT_WRAPPER).appendChild(inputElement), 'msie' !== this.browserName && 'edge' !== this.browserName && (this.element.value = '');
                    }
                }, Uploader.prototype.getFileSize = function(fileData) {
                    for(var fileSize = 0, _i = 0; _i < fileData.length; _i++)fileSize += fileData[_i].size;
                    return fileSize;
                }, Uploader.prototype.mergeFileInfo = function(fileData, fileList) {
                    for(var result = {
                        name: '',
                        rawFile: '',
                        size: 0,
                        status: '',
                        type: '',
                        validationMessages: {
                            minSize: '',
                            maxSize: ''
                        },
                        statusCode: '1',
                        list: fileList
                    }, fileNames = [], type = '', _i = 0; _i < fileData.length; _i++){
                        var listItem = fileData[_i];
                        fileNames.push(listItem.name), type = listItem.type;
                    }
                    return result.name = fileNames.join(', '), result.size = this.getFileSize(fileData), result.type = type, result.status = this.statusForFormUpload(fileData, fileList), result;
                }, Uploader.prototype.statusForFormUpload = function(fileData, fileList) {
                    for(var statusMessage, isValid = !0, _i = 0; _i < fileData.length; _i++){
                        var listItem = fileData[_i];
                        statusMessage = listItem.status;
                        var validationMessages = this.validatedFileSize(listItem.size);
                        ('' !== validationMessages.minSize || '' !== validationMessages.maxSize) && (isValid = !1, statusMessage = '' !== validationMessages.minSize ? this.localizedTexts('invalidMinFileSize') : '' !== validationMessages.maxSize ? this.localizedTexts('invalidMaxFileSize') : statusMessage);
                        var typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;
                        typeValidationMessage === this.localizedTexts('invalidFileType') && (isValid = !1, statusMessage = typeValidationMessage);
                    }
                    return isValid ? statusMessage = this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , ' + this.localizedTexts('size') + ': ' + this.bytesToSize(this.getFileSize(fileData)) : (fileList.classList.add(INVALID_FILE), statusMessage = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage), statusMessage;
                }, // eslint-disable-next-line @typescript-eslint/no-unused-vars
                Uploader.prototype.formCustomFileList = function(fileData, files) {
                    this.createParentUL();
                    var fileList = this.createElement('li', {
                        className: FILE
                    });
                    fileList.setAttribute('data-files-count', fileData.length + ''), this.setListToFileInfo(fileData, fileList);
                    var result = this.mergeFileInfo(fileData, fileList);
                    fileList.setAttribute('data-file-name', result.name), this.uploadTemplateFn = this.templateComplier(this.template);
                    var liTempCompiler = this.uploadTemplateFn(result, this, 'template', this.element.id + 'Template', this.isStringTemplate, null, fileList);
                    if (liTempCompiler) {
                        var fromElements = [].slice.call(liTempCompiler);
                        (0, ej2_base /* append */ .R3)(fromElements, fileList);
                    }
                    var index = this.listParent.querySelectorAll('li').length;
                    fileList.classList.contains(INVALID_FILE) || this.createFormInput(fileData);
                    var eventArgs = {
                        element: fileList,
                        fileInfo: result,
                        index: index,
                        isPreload: this.isPreLoadFile(result)
                    }, eventsArgs = {
                        element: fileList,
                        fileInfo: result,
                        index: index,
                        isPreload: this.isPreLoadFile(result)
                    };
                    this.trigger('rendering', eventArgs), this.trigger('fileListRendering', eventsArgs), this.listParent.appendChild(fileList), this.fileList.push(fileList), this.renderReactTemplates();
                }, /* eslint-disable valid-jsdoc, jsdoc/require-param */ /**
     * Create the file list for specified files data.
     *
     * @param { FileInfo[] } fileData - Specifies the files data for file list creation.
     * @returns {void}
     */ Uploader.prototype.createFileList = function(fileData, isSelectedFile) {
                    if (/* eslint-enable valid-jsdoc, jsdoc/require-param */ this.createParentUL(), '' === this.template || (0, ej2_base /* isNullOrUndefined */ .le)(this.template)) {
                        if (this.isFormUpload()) this.uploadWrapper.classList.add(FORM_UPLOAD), this.formFileList(fileData, this.element.files);
                        else for(var _i = 0; _i < fileData.length; _i++){
                            var listItem = fileData[_i], liElement = this.createElement('li', {
                                className: FILE,
                                attrs: {
                                    'data-file-name': listItem.name,
                                    'data-files-count': '1'
                                }
                            }), textContainer = this.createElement('span', {
                                className: TEXT_CONTAINER
                            }), textElement = this.createElement('span', {
                                className: FILE_NAME,
                                attrs: {
                                    title: listItem.name
                                }
                            });
                            textElement.innerHTML = this.getFileNameOnly(listItem.name);
                            var fileExtension = this.createElement('span', {
                                className: FILE_TYPE
                            }), fileType = this.getFileType(listItem.name);
                            if (fileExtension.innerHTML = '.' + fileType, fileType || fileExtension.classList.add('e-hidden'), this.enableRtl) {
                                var rtlContainer = this.createElement('span', {
                                    className: RTL_CONTAINER
                                });
                                rtlContainer.appendChild(fileExtension), rtlContainer.appendChild(textElement), textContainer.appendChild(rtlContainer);
                            } else textContainer.appendChild(textElement), textContainer.appendChild(fileExtension);
                            var fileSize = this.createElement('span', {
                                className: FILE_SIZE
                            });
                            fileSize.innerHTML = this.bytesToSize(listItem.size), textContainer.appendChild(fileSize);
                            var statusElement = this.createElement('span', {
                                className: STATUS
                            });
                            textContainer.appendChild(statusElement), statusElement.innerHTML = listItem.status, liElement.appendChild(textContainer);
                            var iconElement = this.createElement('span', {
                                className: ' e-icons',
                                attrs: {
                                    tabindex: this.btnTabIndex
                                }
                            });
                            'msie' === this.browserName && iconElement.classList.add('e-msie'), iconElement.setAttribute('title', this.localizedTexts('remove')), liElement.appendChild(iconElement), ej2_base /* EventHandler.add */ .bi.add(iconElement, 'click', this.removeFiles, this), '2' === listItem.statusCode ? (statusElement.classList.add(UPLOAD_SUCCESS), iconElement.classList.add(DELETE_ICON), iconElement.setAttribute('title', this.localizedTexts('delete'))) : '1' !== listItem.statusCode && (statusElement.classList.remove(UPLOAD_SUCCESS), statusElement.classList.add(VALIDATION_FAILS)), this.autoUpload && '1' === listItem.statusCode && '' !== this.asyncSettings.saveUrl && (statusElement.innerHTML = ''), iconElement.classList.contains(DELETE_ICON) || iconElement.classList.add(REMOVE_ICON);
                            var index = fileData.indexOf(listItem), eventArgs = {
                                element: liElement,
                                fileInfo: listItem,
                                index: index,
                                isPreload: this.isPreLoadFile(listItem)
                            }, eventsArgs = {
                                element: liElement,
                                fileInfo: listItem,
                                index: index,
                                isPreload: this.isPreLoadFile(listItem)
                            };
                            this.trigger('rendering', eventArgs), this.trigger('fileListRendering', eventsArgs), this.listParent.appendChild(liElement), this.fileList.push(liElement), this.truncateName(textElement);
                            var preventActionComplete = this.flag;
                            this.isPreLoadFile(listItem) && (this.flag = !1, this.checkActionComplete(!0), this.flag = preventActionComplete);
                        }
                    } else this.isFormUpload() ? (this.uploadWrapper.classList.add(FORM_UPLOAD), this.formCustomFileList(fileData, this.element.files)) : this.createCustomfileList(fileData);
                }, Uploader.prototype.getSlicedName = function(nameElement) {
                    var text = nameElement.textContent;
                    nameElement.dataset.tail = text.slice(text.length - 10);
                }, Uploader.prototype.setListToFileInfo = function(fileData, fileList) {
                    for(var _i = 0; _i < fileData.length; _i++)fileData[_i].list = fileList;
                }, Uploader.prototype.truncateName = function(name) {
                    'edge' !== this.browserName && name.offsetWidth < name.scrollWidth ? this.getSlicedName(name) : name.offsetWidth + 1 < name.scrollWidth && this.getSlicedName(name);
                }, Uploader.prototype.getFileType = function(name) {
                    var extension, index = name.lastIndexOf('.');
                    return index >= 0 && (extension = name.substring(index + 1)), extension || '';
                }, Uploader.prototype.getFileNameOnly = function(name) {
                    var type = this.getFileType(name);
                    return name.split('.' + type)[0];
                }, Uploader.prototype.setInitialAttributes = function() {
                    if (this.initialAttr.accept && this.element.setAttribute('accept', this.initialAttr.accept), this.initialAttr.disabled && this.element.setAttribute('disabled', 'disabled'), this.initialAttr.multiple) {
                        var newAttr = document.createAttribute('multiple');
                        this.element.setAttributeNode(newAttr);
                    }
                }, Uploader.prototype.filterfileList = function(files) {
                    for(var filterFiles = [], i = 0; i < files.length; i++)this.getLiElement(files[i]).classList.contains(UPLOAD_SUCCESS) || filterFiles.push(files[i]);
                    return filterFiles;
                }, Uploader.prototype.updateStatus = function(files, status, statusCode, updateLiStatus) {
                    if (void 0 === updateLiStatus && (updateLiStatus = !0), '' === status || (0, ej2_base /* isNullOrUndefined */ .le)(status) || '' === statusCode || (0, ej2_base /* isNullOrUndefined */ .le)(statusCode) || (files.status = status, files.statusCode = statusCode), updateLiStatus) {
                        var li = this.getLiElement(files);
                        (0, ej2_base /* isNullOrUndefined */ .le)(li) || (0, ej2_base /* isNullOrUndefined */ .le)(li.querySelector('.' + STATUS)) || '' === status || (0, ej2_base /* isNullOrUndefined */ .le)(status) || (li.querySelector('.' + STATUS).textContent = status);
                    }
                    return files;
                }, Uploader.prototype.getLiElement = function(files) {
                    for(var index, i = 0; i < this.filesData.length; i++)(0, ej2_base /* isNullOrUndefined */ .le)(files) || ((0, ej2_base /* isNullOrUndefined */ .le)(this.filesData[i].id) || (0, ej2_base /* isNullOrUndefined */ .le)(files.id) ? this.filesData[i].name !== files.name : this.filesData[i].name !== files.name || this.filesData[i].id !== files.id) || (index = i);
                    return this.fileList[index];
                }, Uploader.prototype.createProgressBar = function(liElement) {
                    var progressbarWrapper = this.createElement('span', {
                        className: PROGRESS_WRAPPER
                    }), progressBar = this.createElement('progressbar', {
                        className: PROGRESSBAR,
                        attrs: {
                            value: '0',
                            max: '100'
                        }
                    }), progressbarInnerWrapper = this.createElement('span', {
                        className: 'e-progress-inner-wrap'
                    });
                    progressBar.setAttribute('style', 'width: 0%');
                    var progressbarText = this.createElement('span', {
                        className: PROGRESSBAR_TEXT
                    });
                    progressbarText.textContent = '0%', progressbarInnerWrapper.appendChild(progressBar), progressbarWrapper.appendChild(progressbarInnerWrapper), progressbarWrapper.appendChild(progressbarText), liElement.querySelector('.' + TEXT_CONTAINER).appendChild(progressbarWrapper);
                }, /* istanbul ignore next */ Uploader.prototype.updateProgressbar = function(e, li) {
                    if (!isNaN(Math.round(e.loaded / e.total * 100)) && !(0, ej2_base /* isNullOrUndefined */ .le)(li.querySelector('.' + PROGRESSBAR))) {
                        if ((0, ej2_base /* isNullOrUndefined */ .le)(this.progressInterval) || '' === this.progressInterval) this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + '%');
                        else {
                            var value = Math.round(e.loaded / e.total * 100) % parseInt(this.progressInterval, 10);
                            (0 === value || 100 === value) && this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + '%');
                        }
                    }
                }, Uploader.prototype.changeProgressValue = function(li, progressValue) {
                    li.querySelector('.' + PROGRESSBAR).setAttribute('style', 'width:' + progressValue), li.querySelector('.' + PROGRESSBAR_TEXT).textContent = progressValue;
                }, Uploader.prototype.uploadInProgress = function(e, files, customUI, request) {
                    var li = this.getLiElement(files);
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(li) || customUI) {
                        if ((0, ej2_base /* isNullOrUndefined */ .le)(li)) this.cancelUploadingFile(files, e, request);
                        else {
                            '5' === files.statusCode && this.cancelUploadingFile(files, e, request, li), !(li.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0) && li.querySelector('.' + STATUS) && (li.querySelector('.' + STATUS).classList.add(UPLOAD_INPROGRESS), this.createProgressBar(li), this.updateProgressBarClasses(li, UPLOAD_INPROGRESS), li.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED)), this.updateProgressbar(e, li);
                            var iconEle = li.querySelector('.' + REMOVE_ICON);
                            (0, ej2_base /* isNullOrUndefined */ .le)(iconEle) || (iconEle.classList.add(ABORT_ICON, UPLOAD_INPROGRESS), iconEle.setAttribute('title', this.localizedTexts('abort')), iconEle.classList.remove(REMOVE_ICON));
                        }
                        var args = {
                            e: e,
                            operation: 'upload',
                            file: this.updateStatus(files, this.localizedTexts('inProgress'), '3')
                        };
                        this.trigger('progress', args);
                    }
                }, /* istanbul ignore next */ Uploader.prototype.cancelUploadingFile = function(files, e, request, li) {
                    var _this = this;
                    '5' === files.statusCode && this.trigger('canceling', {
                        event: e,
                        fileData: files,
                        cancel: !1,
                        customFormData: []
                    }, function(eventArgs) {
                        if (eventArgs.cancel) {
                            if (files.statusCode = '3', !(0, ej2_base /* isNullOrUndefined */ .le)(li)) {
                                var spinnerTarget = li.querySelector('.' + ABORT_ICON);
                                (0, ej2_base /* isNullOrUndefined */ .le)(spinnerTarget) || (hideSpinner(spinnerTarget), (0, ej2_base /* detach */ .og)(li.querySelector('.e-spinner-pane')));
                            }
                        } else {
                            request.emitError = !1, request.httpRequest.abort();
                            var formData = new FormData();
                            if ('5' === files.statusCode) {
                                var name_1 = _this.element.getAttribute('name');
                                formData.append(name_1, files.name), formData.append('cancel-uploading', files.name), _this.updateFormData(formData, eventArgs.customFormData);
                                var ajax = new ej2_base /* Ajax */ .tk(_this.asyncSettings.removeUrl, 'POST', !0, null);
                                ajax.emitError = !1, ajax.onLoad = function(e) {
                                    return _this.removecanceledFile(e, files), {};
                                }, ajax.send(formData);
                            }
                        }
                    });
                }, Uploader.prototype.removecanceledFile = function(e, file) {
                    var liElement = this.getLiElement(file);
                    if (!((0, ej2_base /* isNullOrUndefined */ .le)(liElement) || liElement.querySelector('.' + RETRY_ICON) || (0, ej2_base /* isNullOrUndefined */ .le)(liElement.querySelector('.' + ABORT_ICON)))) {
                        this.updateStatus(file, this.localizedTexts('fileUploadCancel'), '5'), this.renderFailureState(e, file, liElement);
                        var spinnerTarget = liElement.querySelector('.' + REMOVE_ICON);
                        (0, ej2_base /* isNullOrUndefined */ .le)(liElement) || (hideSpinner(spinnerTarget), (0, ej2_base /* isNullOrUndefined */ .le)(liElement.querySelector('.e-spinner-pane')) || (0, ej2_base /* detach */ .og)(liElement.querySelector('.e-spinner-pane')));
                        var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
                        this.trigger('success', {
                            event: e,
                            response: requestResponse,
                            operation: 'cancel',
                            file: file
                        });
                    }
                }, Uploader.prototype.renderFailureState = function(e, file, liElement) {
                    var _this = this;
                    this.updateProgressBarClasses(liElement, UPLOAD_FAILED), this.removeProgressbar(liElement, 'failure'), (0, ej2_base /* isNullOrUndefined */ .le)(liElement.querySelector('.e-file-status')) || liElement.querySelector('.e-file-status').classList.add(UPLOAD_FAILED);
                    var deleteIcon = liElement.querySelector('.' + ABORT_ICON);
                    (0, ej2_base /* isNullOrUndefined */ .le)(deleteIcon) || (deleteIcon.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS), deleteIcon.classList.add(REMOVE_ICON), deleteIcon.setAttribute('title', this.localizedTexts('remove')), this.pauseButton = this.createElement('span', {
                        className: 'e-icons e-file-reload-btn',
                        attrs: {
                            tabindex: this.btnTabIndex
                        }
                    }), deleteIcon.parentElement.insertBefore(this.pauseButton, deleteIcon), this.pauseButton.setAttribute('title', this.localizedTexts('retry')), /* istanbul ignore next */ liElement.querySelector('.' + RETRY_ICON).addEventListener('click', function(e) {
                        _this.reloadcanceledFile(e, file, liElement, !1);
                    }, !1));
                }, Uploader.prototype.reloadcanceledFile = function(e, file, liElement, custom) {
                    file.statusCode = '1', file.status = this.localizedTexts('readyToUploadMessage'), custom || ((0, ej2_base /* isNullOrUndefined */ .le)(liElement.querySelector('.' + STATUS)) || liElement.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED), (0, ej2_base /* isNullOrUndefined */ .le)(liElement.querySelector('.' + RETRY_ICON)) || (0, ej2_base /* detach */ .og)(liElement.querySelector('.' + RETRY_ICON)), this.pauseButton = null), /* istanbul ignore next */ liElement.classList.add(RESTRICT_RETRY), this.upload([
                        file
                    ]);
                }, /* istanbul ignore next */ Uploader.prototype.uploadComplete = function(e, file, customUI) {
                    var status = e.target;
                    if (4 === status.readyState && status.status >= 200 && status.status <= 299) {
                        var li = this.getLiElement(file);
                        if ((0, ej2_base /* isNullOrUndefined */ .le)(li) && (!customUI || (0, ej2_base /* isNullOrUndefined */ .le)(customUI))) return;
                        if (!(0, ej2_base /* isNullOrUndefined */ .le)(li)) {
                            this.updateProgressBarClasses(li, UPLOAD_SUCCESS), this.removeProgressbar(li, 'success');
                            var iconEle = li.querySelector('.' + ABORT_ICON);
                            (0, ej2_base /* isNullOrUndefined */ .le)(iconEle) || (iconEle.classList.add(DELETE_ICON), iconEle.setAttribute('title', this.localizedTexts('delete')), iconEle.classList.remove(ABORT_ICON), iconEle.classList.remove(UPLOAD_INPROGRESS));
                        }
                        this.raiseSuccessEvent(e, file);
                    } else this.uploadFailed(e, file);
                }, Uploader.prototype.getResponse = function(e) {
                    var target = e.currentTarget;
                    return {
                        readyState: target.readyState,
                        statusCode: target.status,
                        statusText: target.statusText,
                        headers: target.getAllResponseHeaders(),
                        withCredentials: target.withCredentials
                    };
                }, Uploader.prototype.raiseSuccessEvent = function(e, file) {
                    var _this = this, response = e && e.currentTarget ? this.getResponse(e) : null, statusMessage = this.localizedTexts('uploadSuccessMessage'), args = {
                        e: e,
                        response: response,
                        operation: 'upload',
                        file: this.updateStatus(file, statusMessage, '2', !1),
                        statusText: statusMessage
                    }, liElement = this.getLiElement(file);
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(liElement)) {
                        var spinnerEle = liElement.querySelector('.' + SPINNER_PANE);
                        (0, ej2_base /* isNullOrUndefined */ .le)(spinnerEle) || (hideSpinner(liElement), (0, ej2_base /* detach */ .og)(spinnerEle));
                    }
                    this.trigger('success', args, function(args) {
                        _this.updateStatus(file, args.statusText, '2'), _this.uploadedFilesData.push(file), _this.trigger('change', {
                            file: _this.uploadedFilesData
                        }), _this.checkActionButtonStatus(), _this.fileList.length > 0 && (_this.getLiElement(file).classList.contains(RESTRICT_RETRY) ? /* istanbul ignore next */ _this.getLiElement(file).classList.remove(RESTRICT_RETRY) : (_this.uploadSequential(), _this.checkActionComplete(!0)));
                    });
                }, Uploader.prototype.uploadFailed = function(e, file) {
                    var _this = this, li = this.getLiElement(file), response = e && e.currentTarget ? this.getResponse(e) : null, statusMessage = this.localizedTexts('uploadFailedMessage'), args = {
                        e: e,
                        response: response,
                        operation: 'upload',
                        file: this.updateStatus(file, statusMessage, '0', !1),
                        statusText: statusMessage
                    };
                    (0, ej2_base /* isNullOrUndefined */ .le)(li) || this.renderFailureState(e, file, li), this.trigger('failure', args, function(args) {
                        _this.updateStatus(file, args.statusText, '0'), _this.checkActionButtonStatus(), _this.uploadSequential(), _this.checkActionComplete(!0);
                    });
                }, Uploader.prototype.uploadSequential = function() {
                    this.sequentialUpload && (this.autoUpload ? /* istanbul ignore next */ this.checkAutoUpload(this.filesData) : this.uploadButtonClick());
                }, Uploader.prototype.checkActionComplete = function(increment) {
                    increment ? ++this.actionCompleteCount : --this.actionCompleteCount, this.raiseActionComplete();
                }, Uploader.prototype.raiseActionComplete = function() {
                    if (this.filesData.length === this.actionCompleteCount && this.flag) {
                        this.flag = !1;
                        var eventArgs = {
                            fileData: []
                        };
                        eventArgs.fileData = this.getSelectedFileStatus(this.selectedFiles), this.trigger('actionComplete', eventArgs);
                    }
                }, Uploader.prototype.getSelectedFileStatus = function(selectedFiles) {
                    for(var matchFiles = [], matchFilesIndex = 0, selectFileIndex = 0; selectFileIndex < selectedFiles.length; selectFileIndex++)for(var selectedFileData = selectedFiles[selectFileIndex], fileDataIndex = 0; fileDataIndex < this.filesData.length; fileDataIndex++)this.filesData[fileDataIndex].name === selectedFileData.name && (matchFiles[matchFilesIndex] = this.filesData[fileDataIndex], ++matchFilesIndex);
                    return matchFiles;
                }, Uploader.prototype.updateProgressBarClasses = function(li, className) {
                    var progressBar = li.querySelector('.' + PROGRESSBAR);
                    (0, ej2_base /* isNullOrUndefined */ .le)(progressBar) || progressBar.classList.add(className);
                }, Uploader.prototype.removeProgressbar = function(li, callType) {
                    var _this = this;
                    (0, ej2_base /* isNullOrUndefined */ .le)(li.querySelector('.' + PROGRESS_WRAPPER)) || (this.progressAnimation = new ej2_base /* Animation */ .fw({
                        duration: 1250
                    }), this.progressAnimation.animate(li.querySelector('.' + PROGRESS_WRAPPER), {
                        name: 'FadeOut'
                    }), this.progressAnimation.animate(li.querySelector('.' + PROGRESSBAR_TEXT), {
                        name: 'FadeOut'
                    }), setTimeout(function() {
                        _this.animateProgressBar(li, callType);
                    }, 750));
                }, /* istanbul ignore next */ Uploader.prototype.animateProgressBar = function(li, callType) {
                    'success' === callType ? (li.classList.add(UPLOAD_SUCCESS), (0, ej2_base /* isNullOrUndefined */ .le)(li.querySelector('.' + STATUS)) || (li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS), this.progressAnimation.animate(li.querySelector('.' + STATUS), {
                        name: 'FadeIn'
                    }), li.querySelector('.' + STATUS).classList.add(UPLOAD_SUCCESS))) : (0, ej2_base /* isNullOrUndefined */ .le)(li.querySelector('.' + STATUS)) || (li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS), this.progressAnimation.animate(li.querySelector('.' + STATUS), {
                        name: 'FadeIn'
                    }), li.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED)), li.querySelector('.' + PROGRESS_WRAPPER) && (0, ej2_base /* detach */ .og)(li.querySelector('.' + PROGRESS_WRAPPER));
                }, Uploader.prototype.setExtensions = function(extensions) {
                    '' === extensions || (0, ej2_base /* isNullOrUndefined */ .le)(extensions) ? this.element.removeAttribute('accept') : this.element.setAttribute('accept', extensions);
                }, Uploader.prototype.templateComplier = function(uploadTemplate) {
                    if (uploadTemplate) try {
                        if ((0, ej2_base /* selectAll */ .td)(uploadTemplate, document).length) return (0, ej2_base /* compile */ .MY)((0, ej2_base /* select */ .Ys)(uploadTemplate, document).innerHTML.trim());
                        return (0, ej2_base /* compile */ .MY)(uploadTemplate);
                    } catch (exception) {
                        return (0, ej2_base /* compile */ .MY)(uploadTemplate);
                    }
                }, Uploader.prototype.setRTL = function() {
                    this.enableRtl ? (0, ej2_base /* addClass */ .cn)([
                        this.uploadWrapper
                    ], uploader_RTL) : (0, ej2_base /* removeClass */ .IV)([
                        this.uploadWrapper
                    ], uploader_RTL);
                }, Uploader.prototype.localizedTexts = function(localeText) {
                    return this.l10n.setLocale(this.locale), this.l10n.getConstant(localeText);
                }, Uploader.prototype.setControlStatus = function() {
                    this.enabled ? (this.uploadWrapper.classList.contains(DISABLED) && this.uploadWrapper.classList.remove(DISABLED), !(0, ej2_base /* isNullOrUndefined */ .le)(this.browseButton) && this.element.hasAttribute('disabled') && (this.element.removeAttribute('disabled'), this.browseButton.removeAttribute('disabled')), !(0, ej2_base /* isNullOrUndefined */ .le)(this.clearButton) && this.clearButton.hasAttribute('disabled') && this.clearButton.removeAttribute('disabled'), !(0, ej2_base /* isNullOrUndefined */ .le)(this.uploadButton) && this.uploadButton.hasAttribute('disabled') && this.uploadButton.hasAttribute('disabled')) : (this.uploadWrapper.classList.add(DISABLED), this.element.setAttribute('disabled', 'disabled'), this.browseButton.setAttribute('disabled', 'disabled'), (0, ej2_base /* isNullOrUndefined */ .le)(this.clearButton) || this.clearButton.setAttribute('disabled', 'disabled'), (0, ej2_base /* isNullOrUndefined */ .le)(this.uploadButton) || this.uploadButton.setAttribute('disabled', 'disabled'));
                }, Uploader.prototype.checkHTMLAttributes = function(isDynamic) {
                    for(var attributes = isDynamic ? (0, ej2_base /* isNullOrUndefined */ .le)(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : [
                        'accept',
                        'multiple',
                        'disabled'
                    ], _i = 0; _i < attributes.length; _i++){
                        var prop = attributes[_i];
                        if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.element.getAttribute(prop))) switch(prop){
                            case 'accept':
                                ((0, ej2_base /* isNullOrUndefined */ .le)(this.uploaderOptions) || void 0 === this.uploaderOptions.allowedExtensions || isDynamic) && (this.setProperties({
                                    allowedExtensions: this.element.getAttribute('accept')
                                }, !isDynamic), this.initialAttr.accept = this.allowedExtensions);
                                break;
                            case 'multiple':
                                if ((0, ej2_base /* isNullOrUndefined */ .le)(this.uploaderOptions) || void 0 === this.uploaderOptions.multiple || isDynamic) {
                                    var isMutiple = 'multiple' === this.element.getAttribute(prop) || '' === this.element.getAttribute(prop) || 'true' === this.element.getAttribute(prop);
                                    this.setProperties({
                                        multiple: isMutiple
                                    }, !isDynamic), this.initialAttr.multiple = !0;
                                }
                                break;
                            case 'disabled':
                                if ((0, ej2_base /* isNullOrUndefined */ .le)(this.uploaderOptions) || void 0 === this.uploaderOptions.enabled || isDynamic) {
                                    var isDisabled = 'disabled' !== this.element.getAttribute(prop) && '' !== this.element.getAttribute(prop) && 'true' !== this.element.getAttribute(prop);
                                    this.setProperties({
                                        enabled: isDisabled
                                    }, !isDynamic), this.initialAttr.disabled = !0;
                                }
                        }
                    }
                }, Uploader.prototype.chunkUpload = function(file, custom, fileIndex) {
                    var end = Math.min(this.asyncSettings.chunkSize, file.size), blob = file.rawFile.slice(0, end);
                    this.sendRequest(file, {
                        chunkIndex: 0,
                        blob: blob,
                        file: file,
                        start: 0,
                        end: end,
                        retryCount: 0,
                        request: null
                    }, custom, fileIndex);
                }, // eslint-disable-next-line @typescript-eslint/no-unused-vars
                Uploader.prototype.sendRequest = function(file, metaData, custom, fileIndex) {
                    var _this = this, formData = new FormData(), blob = file.rawFile.slice(metaData.start, metaData.end);
                    formData.append(this.uploaderName, blob, file.name), formData.append('chunk-index', metaData.chunkIndex.toString()), formData.append('chunkIndex', metaData.chunkIndex.toString());
                    var totalChunk = Math.max(Math.ceil(file.size / this.asyncSettings.chunkSize), 1);
                    formData.append('total-chunk', totalChunk.toString()), formData.append('totalChunk', totalChunk.toString());
                    var ajax = new ej2_base /* Ajax */ .tk({
                        url: this.asyncSettings.saveUrl,
                        type: 'POST',
                        async: !0,
                        contentType: null
                    });
                    ajax.emitError = !1, ajax.onLoad = function(e) {
                        return _this.chunkUploadComplete(e, metaData, custom), {};
                    }, ajax.onUploadProgress = function(e) {
                        return _this.chunkUploadInProgress(e, metaData, custom), {};
                    };
                    var eventArgs = {
                        fileData: file,
                        customFormData: [],
                        cancel: !1,
                        chunkSize: 0 === this.asyncSettings.chunkSize ? null : this.asyncSettings.chunkSize
                    };
                    ajax.beforeSend = function(e) {
                        eventArgs.currentRequest = ajax.httpRequest, eventArgs.currentChunkIndex = metaData.chunkIndex, 0 === eventArgs.currentChunkIndex ? // This event is currently not required but to avoid breaking changes for previous customer, we have included.
                        _this.trigger('uploading', eventArgs, function(eventArgs) {
                            _this.uploadingEventCallback(formData, eventArgs, e, file);
                        }) : _this.trigger('chunkUploading', eventArgs, function(eventArgs) {
                            _this.uploadingEventCallback(formData, eventArgs, e, file);
                        });
                    }, /* istanbul ignore next */ ajax.onError = function(e) {
                        return _this.chunkUploadFailed(e, metaData, custom), {};
                    }, ajax.send(formData), metaData.request = ajax;
                }, Uploader.prototype.uploadingEventCallback = function(formData, eventArgs, e, file) {
                    eventArgs.cancel ? this.eventCancelByArgs(e, eventArgs, file) : this.updateFormData(formData, eventArgs.customFormData);
                }, Uploader.prototype.eventCancelByArgs = function(e, eventArgs, file) {
                    var _this = this;
                    if (e.cancel = !0, '5' !== eventArgs.fileData.statusCode) {
                        eventArgs.fileData.statusCode = '5', eventArgs.fileData.status = this.localizedTexts('fileUploadCancel');
                        var liElement = this.getLiElement(eventArgs.fileData);
                        if (liElement) {
                            (0, ej2_base /* isNullOrUndefined */ .le)(liElement.querySelector('.' + STATUS)) || (liElement.querySelector('.' + STATUS).innerHTML = this.localizedTexts('fileUploadCancel'), liElement.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED)), this.pauseButton = this.createElement('span', {
                                className: 'e-icons e-file-reload-btn',
                                attrs: {
                                    tabindex: this.btnTabIndex
                                }
                            });
                            var removeIcon = liElement.querySelector('.' + REMOVE_ICON);
                            removeIcon && removeIcon.parentElement.insertBefore(this.pauseButton, removeIcon), this.pauseButton.setAttribute('title', this.localizedTexts('retry')), /* istanbul ignore next */ this.pauseButton.addEventListener('click', function(e) {
                                _this.reloadcanceledFile(e, file, liElement);
                            }, !1), this.checkActionButtonStatus();
                        }
                    }
                }, Uploader.prototype.checkChunkUpload = function() {
                    return !(this.asyncSettings.chunkSize <= 0 || (0, ej2_base /* isNullOrUndefined */ .le)(this.asyncSettings.chunkSize));
                }, Uploader.prototype.chunkUploadComplete = function(e, metaData, custom) {
                    var liElement, _this = this, response = e.target;
                    if (4 === response.readyState && response.status >= 200 && response.status < 300) {
                        var requestResponse = e && e.currentTarget ? this.getResponse(e) : null, totalChunk = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1), eventArgs = {
                            event: e,
                            file: metaData.file,
                            chunkIndex: metaData.chunkIndex,
                            totalChunk: totalChunk,
                            chunkSize: this.asyncSettings.chunkSize,
                            response: requestResponse
                        };
                        if (this.trigger('chunkSuccess', eventArgs), ((0, ej2_base /* isNullOrUndefined */ .le)(custom) || !custom) && (liElement = this.getLiElement(metaData.file)), this.updateMetaData(metaData), metaData.end === metaData.file.size && (metaData.file.statusCode = '3'), '5' === metaData.file.statusCode) {
                            var eventArgs_1 = {
                                event: e,
                                fileData: metaData.file,
                                cancel: !1,
                                customFormData: []
                            };
                            this.trigger('canceling', eventArgs_1, function(eventArgs) {
                                /* istanbul ignore next */ if (eventArgs.cancel) {
                                    metaData.file.statusCode = '3';
                                    var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);
                                    (0, ej2_base /* isNullOrUndefined */ .le)(liElement) || (0, ej2_base /* isNullOrUndefined */ .le)(spinnerTarget) || (hideSpinner(spinnerTarget), (0, ej2_base /* detach */ .og)(liElement.querySelector('.e-spinner-pane'))), _this.sendNextRequest(metaData);
                                } else {
                                    metaData.request.emitError = !1, response.abort();
                                    var formData = new FormData(), name_2 = _this.element.getAttribute('name');
                                    formData.append(name_2, metaData.file.name), formData.append('cancel-uploading', metaData.file.name), formData.append('cancelUploading', metaData.file.name), _this.updateFormData(formData, eventArgs.customFormData);
                                    var ajax = new ej2_base /* Ajax */ .tk(_this.asyncSettings.removeUrl, 'POST', !0, null);
                                    ajax.emitError = !1, ajax.onLoad = function(e) {
                                        return _this.removeChunkFile(e, metaData, custom), {};
                                    }, ajax.send(formData);
                                }
                            });
                        } else {
                            if (totalChunk - 1 === metaData.chunkIndex && totalChunk > metaData.chunkIndex) {
                                var index = this.pausedData.indexOf(metaData);
                                index >= 0 && this.pausedData.splice(index, 1), (0, ej2_base /* isNullOrUndefined */ .le)(this.template) && ((0, ej2_base /* isNullOrUndefined */ .le)(custom) || !custom) && liElement && (liElement && !(0, ej2_base /* isNullOrUndefined */ .le)(liElement.querySelector('.' + PAUSE_UPLOAD)) && (0, ej2_base /* detach */ .og)(liElement.querySelector('.' + PAUSE_UPLOAD)), this.removeChunkProgressBar(metaData)), this.raiseSuccessEvent(e, metaData.file);
                                return;
                            }
                            '4' !== metaData.file.statusCode && this.sendNextRequest(metaData);
                        }
                    } else this.chunkUploadFailed(e, metaData);
                }, Uploader.prototype.sendNextRequest = function(metaData) {
                    metaData.start = metaData.end, metaData.end += this.asyncSettings.chunkSize, metaData.end = Math.min(metaData.end, metaData.file.size), metaData.chunkIndex += 1, this.sendRequest(metaData.file, metaData);
                }, Uploader.prototype.removeChunkFile = function(e, metaData, custom) {
                    if ((0, ej2_base /* isNullOrUndefined */ .le)(this.template) && (0, ej2_base /* isNullOrUndefined */ .le)(custom) && !custom) {
                        var liElement = this.getLiElement(metaData.file), deleteIcon = liElement.querySelector('.' + ABORT_ICON);
                        this.updateStatus(metaData.file, this.localizedTexts('fileUploadCancel'), '5'), this.updateProgressBarClasses(liElement, UPLOAD_FAILED), this.removeProgressbar(liElement, 'failure'), deleteIcon && deleteIcon.classList.remove(ABORT_ICON), deleteIcon && deleteIcon.classList.add(REMOVE_ICON), deleteIcon && deleteIcon.setAttribute('title', this.localizedTexts('remove'));
                        var pauseIcon = liElement.querySelector('.' + PAUSE_UPLOAD);
                        pauseIcon && pauseIcon.classList.add(RETRY_ICON), pauseIcon && pauseIcon.classList.remove(PAUSE_UPLOAD), pauseIcon && pauseIcon.setAttribute('title', this.localizedTexts('retry')), (0, ej2_base /* isNullOrUndefined */ .le)(liElement) || (0, ej2_base /* isNullOrUndefined */ .le)(deleteIcon) || (0, ej2_base /* isNullOrUndefined */ .le)(liElement.querySelector('.e-spinner-pane')) || (hideSpinner(deleteIcon), (0, ej2_base /* detach */ .og)(liElement.querySelector('.e-spinner-pane')));
                    }
                }, Uploader.prototype.pauseUpload = function(metaData, e, custom) {
                    metaData.file.statusCode = '4', metaData.file.status = this.localizedTexts('pause'), this.updateMetaData(metaData);
                    var eventArgs = {
                        event: e || null,
                        file: metaData.file,
                        chunkIndex: metaData.chunkIndex,
                        chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),
                        chunkSize: this.asyncSettings.chunkSize
                    };
                    this.abortUpload(metaData, custom, eventArgs);
                }, Uploader.prototype.abortUpload = function(metaData, custom, eventArgs) {
                    '4' !== metaData.file.statusCode && (metaData.request.emitError = !1, metaData.request.httpRequest.abort());
                    var liElement = this.getLiElement(metaData.file);
                    if ((0, ej2_base /* isNullOrUndefined */ .le)(this.template) && ((0, ej2_base /* isNullOrUndefined */ .le)(custom) || !custom)) {
                        var targetElement = liElement.querySelector('.' + PAUSE_UPLOAD);
                        targetElement.classList.remove(PAUSE_UPLOAD), targetElement.classList.add(RESUME_UPLOAD), targetElement.setAttribute('title', this.localizedTexts('resume')), targetElement.nextElementSibling.classList.add(REMOVE_ICON), targetElement.nextElementSibling.classList.remove(ABORT_ICON), targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('remove'));
                    }
                    for(var i = 0; i < this.pausedData.length; i++)this.pausedData[i].file.name === metaData.file.name && this.pausedData.splice(i, 1);
                    this.pausedData.push(metaData), this.trigger('pausing', eventArgs);
                }, Uploader.prototype.resumeUpload = function(metaData, e, custom) {
                    var targetElement, liElement = this.getLiElement(metaData.file);
                    (0, ej2_base /* isNullOrUndefined */ .le)(liElement) || (targetElement = liElement.querySelector('.' + RESUME_UPLOAD)), !(0, ej2_base /* isNullOrUndefined */ .le)(targetElement) && ((0, ej2_base /* isNullOrUndefined */ .le)(custom) || !custom) && (targetElement.classList.remove(RESUME_UPLOAD), targetElement.classList.add(PAUSE_UPLOAD), targetElement.setAttribute('title', this.localizedTexts('pause')), targetElement.nextElementSibling.classList.remove(REMOVE_ICON), targetElement.nextElementSibling.classList.add(ABORT_ICON), targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('abort'))), metaData.file.status = this.localizedTexts('inProgress'), metaData.file.statusCode = '3', this.updateMetaData(metaData);
                    var eventArgs = {
                        event: e || null,
                        file: metaData.file,
                        chunkIndex: metaData.chunkIndex,
                        chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),
                        chunkSize: this.asyncSettings.chunkSize
                    };
                    this.trigger('resuming', eventArgs);
                    for(var i = 0; i < this.pausedData.length; i++)this.pausedData[i].end === this.pausedData[i].file.size ? this.chunkUploadComplete(e, metaData, custom) : this.pausedData[i].file.name === metaData.file.name && (this.pausedData[i].start = this.pausedData[i].end, this.pausedData[i].end = this.pausedData[i].end + this.asyncSettings.chunkSize, this.pausedData[i].end = Math.min(this.pausedData[i].end, this.pausedData[i].file.size), this.pausedData[i].chunkIndex = this.pausedData[i].chunkIndex + 1, this.sendRequest(this.pausedData[i].file, this.pausedData[i], custom));
                }, Uploader.prototype.updateMetaData = function(metaData) {
                    -1 === this.uploadMetaData.indexOf(metaData) || this.uploadMetaData.splice(this.uploadMetaData.indexOf(metaData), 1), this.uploadMetaData.push(metaData);
                }, Uploader.prototype.removeChunkProgressBar = function(metaData) {
                    var liElement = this.getLiElement(metaData.file);
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(liElement)) {
                        this.updateProgressBarClasses(liElement, UPLOAD_SUCCESS), this.removeProgressbar(liElement, 'success');
                        var cancelButton = liElement.querySelector('.' + ABORT_ICON);
                        (0, ej2_base /* isNullOrUndefined */ .le)(cancelButton) || (cancelButton.classList.add(DELETE_ICON), cancelButton.setAttribute('title', this.localizedTexts('delete')), cancelButton.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS));
                    }
                }, Uploader.prototype.chunkUploadFailed = function(e, metaData, custom) {
                    var liElement, _this = this, chunkCount = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.template) && ((0, ej2_base /* isNullOrUndefined */ .le)(custom) || !custom) && (liElement = this.getLiElement(metaData.file));
                    var requestResponse = e && e.currentTarget ? this.getResponse(e) : null, eventArgs = {
                        event: e,
                        file: metaData.file,
                        chunkIndex: metaData.chunkIndex,
                        totalChunk: chunkCount,
                        chunkSize: this.asyncSettings.chunkSize,
                        cancel: !1,
                        response: requestResponse
                    };
                    this.trigger('chunkFailure', eventArgs, function(eventArgs) {
                        // To prevent triggering of failure event
                        if (!eventArgs.cancel) {
                            if (metaData.retryCount < _this.asyncSettings.retryCount) setTimeout(function() {
                                _this.retryRequest(liElement, metaData, custom);
                            }, _this.asyncSettings.retryAfterDelay);
                            else {
                                if (!(0, ej2_base /* isNullOrUndefined */ .le)(liElement)) {
                                    var pauseButton = liElement.querySelector('.' + PAUSE_UPLOAD) ? liElement.querySelector('.' + PAUSE_UPLOAD) : liElement.querySelector('.' + RESUME_UPLOAD);
                                    (0, ej2_base /* isNullOrUndefined */ .le)(pauseButton) || (pauseButton.classList.add(RETRY_ICON), pauseButton.classList.remove(PAUSE_UPLOAD, RESUME_UPLOAD)), _this.updateProgressBarClasses(liElement, UPLOAD_FAILED), _this.removeProgressbar(liElement, 'failure'), liElement.querySelector('.e-icons').classList.remove(UPLOAD_INPROGRESS);
                                    var iconElement = liElement.querySelector('.' + ABORT_ICON) ? liElement.querySelector('.' + ABORT_ICON) : liElement.querySelector('.' + REMOVE_ICON);
                                    iconElement.classList.remove(ABORT_ICON), (0, ej2_base /* isNullOrUndefined */ .le)(liElement.querySelector('.' + PAUSE_UPLOAD)) || (0, ej2_base /* detach */ .og)(liElement.querySelector('.' + PAUSE_UPLOAD)), metaData.start > 0 ? (iconElement.classList.add(DELETE_ICON), iconElement.setAttribute('title', _this.localizedTexts('delete'))) : (iconElement.classList.add(REMOVE_ICON), iconElement.setAttribute('title', _this.localizedTexts('remove')));
                                }
                                metaData.retryCount = 0;
                                var file_1 = metaData.file, failureMessage = _this.localizedTexts('uploadFailedMessage'), args = {
                                    e: e,
                                    response: requestResponse,
                                    operation: 'upload',
                                    file: _this.updateStatus(file_1, failureMessage, '0', !1),
                                    statusText: failureMessage
                                };
                                _this.trigger('failure', args, function(args) {
                                    _this.updateStatus(file_1, args.statusText, '0'), _this.uploadSequential(), _this.checkActionComplete(!0);
                                });
                            }
                        }
                    });
                }, Uploader.prototype.retryRequest = function(liElement, metaData, custom) {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.template) && ((0, ej2_base /* isNullOrUndefined */ .le)(custom) || !custom) && liElement && this.updateProgressBarClasses(liElement, UPLOAD_FAILED), metaData.retryCount += 1, this.sendRequest(metaData.file, metaData);
                }, Uploader.prototype.checkPausePlayAction = function(e) {
                    var targetElement = e.target, selectedElement = e.target.parentElement, index = this.fileList.indexOf(selectedElement), fileData = this.filesData[index], metaData = this.getCurrentMetaData(fileData);
                    targetElement.classList.contains(PAUSE_UPLOAD) ? /* istanbul ignore next */ this.pauseUpload(metaData, e) : targetElement.classList.contains(RESUME_UPLOAD) ? /* istanbul ignore next */ this.resumeUpload(metaData, e) : targetElement.classList.contains(RETRY_ICON) && (metaData.file.status === this.localizedTexts('fileUploadCancel') ? this.retryUpload(metaData, !1) : this.retryUpload(metaData, !0));
                }, Uploader.prototype.retryUpload = function(metaData, fromcanceledStage) {
                    fromcanceledStage ? (metaData.end = metaData.end + this.asyncSettings.chunkSize, metaData.start = metaData.start + this.asyncSettings.chunkSize, this.sendRequest(metaData.file, metaData)) : (metaData.file.statusCode = '1', metaData.file.status = this.localizedTexts('readyToUploadMessage'), this.chunkUpload(metaData.file)), /* istanbul ignore next */ this.getLiElement(metaData.file).classList.add(RESTRICT_RETRY);
                }, // eslint-disable-next-line @typescript-eslint/no-unused-vars
                Uploader.prototype.chunkUploadInProgress = function(e, metaData, custom) {
                    var _this = this;
                    if ('4' !== metaData.file.statusCode) {
                        '4' !== metaData.file.statusCode && '5' !== metaData.file.statusCode && (metaData.file.statusCode = '3', metaData.file.status = this.localizedTexts('inProgress')), this.updateMetaData(metaData);
                        var liElement = this.getLiElement(metaData.file);
                        if (!(0, ej2_base /* isNullOrUndefined */ .le)(liElement)) {
                            var retryElement = liElement.querySelector('.' + RETRY_ICON);
                            if ((0, ej2_base /* isNullOrUndefined */ .le)(retryElement) || (retryElement.classList.add(PAUSE_UPLOAD), retryElement.setAttribute('title', this.localizedTexts('pause')), retryElement.classList.remove(RETRY_ICON)), !(0, ej2_base /* isNullOrUndefined */ .le)(liElement)) {
                                if (!(liElement.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0)) {
                                    var statusElement = liElement.querySelector('.' + STATUS);
                                    (0, ej2_base /* isNullOrUndefined */ .le)(this.template) && (statusElement.classList.add(UPLOAD_INPROGRESS), statusElement.classList.remove(UPLOAD_FAILED), this.createProgressBar(liElement), this.updateProgressBarClasses(liElement, UPLOAD_INPROGRESS));
                                    var clearIcon = liElement.querySelector('.' + REMOVE_ICON) ? liElement.querySelector('.' + REMOVE_ICON) : liElement.querySelector('.' + DELETE_ICON);
                                    (0, ej2_base /* isNullOrUndefined */ .le)(clearIcon) || (clearIcon.classList.add(ABORT_ICON), clearIcon.setAttribute('title', this.localizedTexts('abort')), clearIcon.classList.remove(REMOVE_ICON));
                                }
                                if (!isNaN(Math.round(e.loaded / e.total * 100)) && (0, ej2_base /* isNullOrUndefined */ .le)(this.template) && '4' !== metaData.file.statusCode) {
                                    var progressVal = void 0, totalChunks = Math.ceil(metaData.file.size / this.asyncSettings.chunkSize) - 1;
                                    this.asyncSettings.chunkSize && totalChunks && (progressVal = Math.round(metaData.chunkIndex / totalChunks * 100), this.changeProgressValue(liElement, progressVal.toString() + '%'));
                                }
                                0 === metaData.chunkIndex && this.checkActionButtonStatus();
                            }
                            if ((0, ej2_base /* isNullOrUndefined */ .le)(liElement.querySelector('.' + PAUSE_UPLOAD)) && (0, ej2_base /* isNullOrUndefined */ .le)(this.template) && (0, ej2_base /* isNullOrUndefined */ .le)(liElement.querySelector('.' + DELETE_ICON))) {
                                this.pauseButton = this.createElement('span', {
                                    className: 'e-icons e-file-pause-btn',
                                    attrs: {
                                        tabindex: this.btnTabIndex
                                    }
                                }), 'msie' === this.browserName && this.pauseButton.classList.add('e-msie');
                                var abortIcon = liElement.querySelector('.' + ABORT_ICON);
                                abortIcon.parentElement.insertBefore(this.pauseButton, abortIcon), this.pauseButton.setAttribute('title', this.localizedTexts('pause')), this.pauseButton.addEventListener('click', function(e) {
                                    _this.checkPausePlayAction(e);
                                }, !1);
                            }
                        }
                    }
                }, /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */ /**
     * It is used to convert bytes value into kilobytes or megabytes depending on the size based
     * on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).
     *
     * @param { number } bytes - Specifies the file size in bytes.
     * @returns {string}
     */ Uploader.prototype.bytesToSize = function(bytes) {
                    var i = -1;
                    if (!bytes) return '0.0 KB';
                    do bytes /= 1024, i++;
                    while (bytes > 99)
                    return i >= 2 && (bytes *= 1024, i = 1), Math.max(bytes, 0).toFixed(1) + ' ' + [
                        'KB',
                        'MB'
                    ][i];
                }, /**
     * Allows you to sort the file data alphabetically based on its file name clearly.
     *
     * @param { FileList } filesData - specifies the files data for upload.
     * @returns {File[]}
     */ /* istanbul ignore next */ Uploader.prototype.sortFileList = function(filesData) {
                    for(var files = filesData = filesData || this.sortFilesList, fileNames = [], i = 0; i < files.length; i++)fileNames.push(files[i].name);
                    for(var sortedFileNames = fileNames.sort(), sortedFilesData = [], _i = 0; _i < sortedFileNames.length; _i++)for(var name_3 = sortedFileNames[_i], i = 0; i < files.length; i++)name_3 === files[i].name && sortedFilesData.push(files[i]);
                    return sortedFilesData;
                }, /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */ /**
     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
     *
     * @method destroy
     * @returns {void}
     */ Uploader.prototype.destroy = function() {
                    this.element.value = null, this.clearTemplate(), this.clearAll(), this.unWireEvents(), this.unBindDropEvents(), this.multiple && this.element.removeAttribute('multiple'), this.enabled || this.element.removeAttribute('disabled'), this.element.removeAttribute('accept'), this.setInitialAttributes();
                    for(var _i = 0, attributes_2 = [
                        'aria-label',
                        'directory',
                        'webkitdirectory',
                        'tabindex'
                    ]; _i < attributes_2.length; _i++){
                        var key = attributes_2[_i];
                        this.element.removeAttribute(key);
                    }
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.uploadWrapper) || (this.uploadWrapper.parentElement.appendChild(this.element), (0, ej2_base /* detach */ .og)(this.uploadWrapper)), this.uploadWrapper = null, _super.prototype.destroy.call(this);
                }, /**
     * Allows you to call the upload process manually by calling save URL action.
     * To process the selected files (added in upload queue), pass an empty argument otherwise
     * upload the specific file based on its argument.
     *
     * @param { FileInfo | FileInfo[] } files - Specifies the files data for upload.
     * @param {boolean} custom - Specifies whether the uploader is rendered with custom file list.
     * @returns {void}
     */ Uploader.prototype.upload = function(files, custom) {
                    var _this = this;
                    if (files = files || this.filesData, this.sequentialUpload && (this.isFirstFileOnSelection || custom)) this.sequenceUpload(files);
                    else {
                        var uploadFiles_1 = this.getFilesInArray(files);
                        this.trigger('beforeUpload', {
                            customFormData: [],
                            currentRequest: null,
                            cancel: !1
                        }, function(eventArgs) {
                            eventArgs.cancel || _this.uploadFiles(uploadFiles_1, custom);
                        });
                    }
                }, Uploader.prototype.getFilesInArray = function(files) {
                    var uploadFiles = [];
                    return files instanceof Array ? uploadFiles = files : uploadFiles.push(files), uploadFiles;
                }, /* istanbul ignore next */ Uploader.prototype.serverReadFileBase64 = function(fileIndex, position, totalCount) {
                    var _this = this;
                    return new Promise(function(resolve, reject) {
                        var file = _this.fileStreams[fileIndex].rawFile;
                        try {
                            var reader = new FileReader();
                            reader.onload = function() {
                                try {
                                    var contents = reader.result, data = contents ? contents.split(';base64,')[1] : null;
                                    resolve(data);
                                } catch (e) {
                                    reject(e);
                                }
                            }, reader.readAsDataURL(file.slice(position, position + totalCount));
                        } catch (e) {
                            reject(e);
                        }
                    });
                }, /* eslint-disable @typescript-eslint/no-unused-vars */ /* istanbul ignore next */ Uploader.prototype.uploadFileCount = function(ele) {
                    /* eslint-enable @typescript-eslint/no-unused-vars */ var files = this.filesData;
                    return files && 0 !== files.length ? files.length : -1;
                }, /* eslint-disable @typescript-eslint/no-unused-vars */ /* istanbul ignore next */ Uploader.prototype.getFileRead = function(index, ele) {
                    /* eslint-enable @typescript-eslint/no-unused-vars */ var files = this.filesData;
                    if (!files || 0 === files.length) return -1;
                    var file = files[index], fileCount = this.newFileRef++;
                    return this.fileStreams[fileCount] = file, fileCount;
                }, /* eslint-disable @typescript-eslint/no-unused-vars */ /* istanbul ignore next */ Uploader.prototype.getFileInfo = function(index, ele) {
                    /* eslint-enable @typescript-eslint/no-unused-vars */ var files = this.filesData;
                    return files && 0 !== files.length && files[index] ? this.filesData[index] : null;
                }, Uploader.prototype.uploadFiles = function(files, custom) {
                    var selectedFiles = [];
                    if (!('' === this.asyncSettings.saveUrl || (0, ej2_base /* isNullOrUndefined */ .le)(this.asyncSettings.saveUrl))) {
                        if (!custom || (0, ej2_base /* isNullOrUndefined */ .le)(custom)) {
                            if (this.multiple) selectedFiles = this.filterfileList(files);
                            else {
                                var file = [];
                                file.push(files[0]), selectedFiles = this.filterfileList(file);
                            }
                        } else selectedFiles = files;
                        for(var i = 0; i < selectedFiles.length; i++)this.uploadFilesRequest(selectedFiles, i, custom);
                    }
                }, Uploader.prototype.uploadFilesRequest = function(selectedFiles, i, custom) {
                    var _this = this, chunkEnabled = this.checkChunkUpload(), ajax = new ej2_base /* Ajax */ .tk(this.asyncSettings.saveUrl, 'POST', !0, null);
                    ajax.emitError = !1;
                    var eventArgs = {
                        fileData: selectedFiles[i],
                        customFormData: [],
                        cancel: !1
                    }, formData = new FormData();
                    if (ajax.beforeSend = function(e) {
                        eventArgs.currentRequest = ajax.httpRequest, _this.trigger('uploading', eventArgs, function(eventArgs) {
                            eventArgs.cancel && _this.eventCancelByArgs(e, eventArgs, selectedFiles[i]), _this.updateFormData(formData, eventArgs.customFormData);
                        });
                    }, '1' === selectedFiles[i].statusCode) {
                        var name_4 = this.element.getAttribute('name');
                        formData.append(name_4, selectedFiles[i].rawFile, selectedFiles[i].name), chunkEnabled && selectedFiles[i].size > this.asyncSettings.chunkSize ? this.chunkUpload(selectedFiles[i], custom, i) : (ajax.onLoad = function(e) {
                            return eventArgs.cancel || _this.uploadComplete(e, selectedFiles[i], custom), {};
                        }, ajax.onUploadProgress = function(e) {
                            return eventArgs.cancel || _this.uploadInProgress(e, selectedFiles[i], custom, ajax), {};
                        }, /* istanbul ignore next */ ajax.onError = function(e) {
                            return _this.uploadFailed(e, selectedFiles[i]), {};
                        }, ajax.send(formData));
                    }
                }, Uploader.prototype.spliceFiles = function(liIndex) {
                    for(var liElement = this.fileList[liIndex], allFiles = this.getFilesData(), nameElements = +liElement.getAttribute('data-files-count'), startIndex = 0, i = 0; i < liIndex; i++)startIndex += +this.fileList[i].getAttribute('data-files-count');
                    for(var endIndex = startIndex + nameElements - 1, j = endIndex; j >= startIndex; j--)allFiles.splice(j, 1);
                }, /* eslint-disable valid-jsdoc, jsdoc/require-param */ /**
     * Remove the uploaded file from server manually by calling the remove URL action.
     * If you pass an empty argument to this method, the complete file list can be cleared,
     * otherwise remove the specific file based on its argument (“file_data”).
     *
     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to remove from file list/server.
     * @param { boolean } customTemplate - Set true if the component rendering with customize template.
     * @param { boolean } removeDirectly - Set true if files remove without removing event.
     * @param { boolean } postRawFile - Set false, to post file name only to the remove action.
     * @returns {void}
     */ Uploader.prototype.remove = function(fileData, customTemplate, removeDirectly, postRawFile, args) {
                    var _this = this;
                    (0, ej2_base /* isNullOrUndefined */ .le)(postRawFile) && (postRawFile = !0);
                    var eventArgs = {
                        event: args,
                        cancel: !1,
                        filesData: [],
                        customFormData: [],
                        postRawFile: postRawFile,
                        currentRequest: null
                    };
                    this.trigger('beforeRemove', {
                        cancel: !1,
                        customFormData: [],
                        currentRequest: null
                    }, function(beforeEventArgs) {
                        if (!beforeEventArgs.cancel) {
                            if (_this.isFormUpload()) eventArgs.filesData = fileData, _this.trigger('removing', eventArgs, function(eventArgs) {
                                if (!eventArgs.cancel) for(var removingFiles = _this.getFilesInArray(fileData), isLiRemoved = !1, liIndex = void 0, _i = 0; _i < removingFiles.length; _i++){
                                    var data = removingFiles[_i];
                                    if (isLiRemoved || (liIndex = _this.fileList.indexOf(data.list)), liIndex > -1) {
                                        var inputElement = (0, ej2_base /* isNullOrUndefined */ .le)(data.input) ? null : data.input;
                                        inputElement && (0, ej2_base /* detach */ .og)(inputElement), _this.spliceFiles(liIndex), (0, ej2_base /* detach */ .og)(_this.fileList[liIndex]), _this.fileList.splice(liIndex, 1), isLiRemoved = !0, liIndex = -1;
                                    }
                                }
                            });
                            else if (_this.isForm && ((0, ej2_base /* isNullOrUndefined */ .le)(_this.asyncSettings.removeUrl) || '' === _this.asyncSettings.removeUrl)) eventArgs.filesData = _this.getFilesData(), _this.trigger('removing', eventArgs, function(eventArgs) {
                                eventArgs.cancel || _this.clearAll();
                            });
                            else {
                                var removeFiles = [];
                                (fileData = (0, ej2_base /* isNullOrUndefined */ .le)(fileData) ? _this.filesData : fileData) instanceof Array ? removeFiles = fileData : removeFiles.push(fileData), eventArgs.filesData = removeFiles;
                                for(var removeUrl = _this.asyncSettings.removeUrl, validUrl = !('' === removeUrl || (0, ej2_base /* isNullOrUndefined */ .le)(removeUrl)), _loop_5 = function(files) {
                                    var fileUploadedIndex = _this.uploadedFilesData.indexOf(files);
                                    ('2' === files.statusCode || '4' === files.statusCode || '0' === files.statusCode && -1 !== fileUploadedIndex) && validUrl ? _this.removeUploadedFile(files, eventArgs, removeDirectly, customTemplate) : removeDirectly ? _this.removeFilesData(files, customTemplate) : _this.trigger('removing', eventArgs, function(eventArgs) {
                                        eventArgs.cancel || _this.removeFilesData(files, customTemplate);
                                    }), args && !args.target.classList.contains(REMOVE_ICON) && _this.checkActionComplete(!1);
                                }, _i = 0, removeFiles_1 = removeFiles; _i < removeFiles_1.length; _i++)_loop_5(removeFiles_1[_i]);
                            }
                        }
                    });
                }, /* eslint-enable valid-jsdoc, jsdoc/require-param */ /**
     * Clear all the file entries from list that can be uploaded files or added in upload queue.
     *
     * @returns {void}
     */ Uploader.prototype.clearAll = function() {
                    var _this = this;
                    if ((0, ej2_base /* isNullOrUndefined */ .le)(this.listParent)) {
                        'msie' !== this.browserName && (this.element.value = ''), this.filesData = [];
                        return;
                    }
                    var eventArgs = {
                        cancel: !1,
                        filesData: this.filesData
                    };
                    this.trigger('clearing', eventArgs, function(eventArgs) {
                        eventArgs.cancel || (_this.clearData(), _this.actionCompleteCount = 0, _this.count = -1);
                    });
                }, /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */ /**
     * Get the data of files which are shown in file list.
     *
     * @param { number } index - specifies the file list item(li) index.
     * @returns {FileInfo[]}
     */ Uploader.prototype.getFilesData = function(index) {
                    return (0, ej2_base /* isNullOrUndefined */ .le)(index) ? this.filesData : this.getSelectedFiles(index);
                }, /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */ /**
     * Pauses the in-progress chunked upload based on the file data.
     *
     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to pause from uploading.
     * @param { boolean } custom - Set true if used custom UI.
     * @returns {void}
     */ Uploader.prototype.pause = function(fileData, custom) {
                    fileData = fileData || this.filesData;
                    var fileDataFiles = this.getFilesInArray(fileData);
                    this.pauseUploading(fileDataFiles, custom);
                }, Uploader.prototype.pauseUploading = function(fileData, custom) {
                    for(var files = this.getFiles(fileData), i = 0; i < files.length; i++)'3' === files[i].statusCode && this.pauseUpload(this.getCurrentMetaData(files[i], null), null, custom);
                }, Uploader.prototype.getFiles = function(fileData) {
                    var files = [];
                    return (0, ej2_base /* isNullOrUndefined */ .le)(fileData) || fileData instanceof Array ? files = fileData : files.push(fileData), files;
                }, /**
     * Resumes the chunked upload that is previously paused based on the file data.
     *
     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to resume the paused file.
     * @param { boolean } custom - Set true if used custom UI.
     * @returns {void}
     */ Uploader.prototype.resume = function(fileData, custom) {
                    fileData = fileData || this.filesData;
                    var fileDataFiles = this.getFilesInArray(fileData);
                    this.resumeFiles(fileDataFiles, custom);
                }, Uploader.prototype.resumeFiles = function(fileData, custom) {
                    for(var files = this.getFiles(fileData), i = 0; i < files.length; i++)'4' === files[i].statusCode && this.resumeUpload(this.getCurrentMetaData(files[i], null), null, custom);
                }, /**
     * Retries the canceled or failed file upload based on the file data.
     *
     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to retry the canceled or failed file.
     * @param { boolean } fromcanceledStage - Set true to retry from canceled stage and set false to retry from initial stage.
     * @param {boolean} custom -Specifies whether the uploader is rendered with custom file list.
     * @returns {void}
     */ Uploader.prototype.retry = function(fileData, fromcanceledStage, custom) {
                    fileData = fileData || this.filesData;
                    var fileDataFiles = this.getFilesInArray(fileData);
                    this.sequentialUpload && this.isFirstFileOnSelection && (this.isFirstFileOnSelection = !1), this.retryFailedFiles(fileDataFiles, fromcanceledStage, custom);
                }, Uploader.prototype.retryFailedFiles = function(fileData, fromcanceledStage, custom) {
                    for(var files = this.getFiles(fileData), i = 0; i < files.length; i++)if ('5' === files[i].statusCode || '0' === files[i].statusCode) {
                        if (this.asyncSettings.chunkSize > 0) this.retryUpload(this.getCurrentMetaData(files[i], null), fromcanceledStage);
                        else {
                            var liElement = void 0;
                            custom || (liElement = this.fileList[this.filesData.indexOf(files[i])]), this.reloadcanceledFile(null, files[i], liElement, custom);
                        }
                    }
                }, /**
     * Stops the in-progress chunked upload based on the file data.
     * When the file upload is canceled, the partially uploaded file is removed from server.
     *
     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to cancel the progressing file.
     * @returns {void}
     */ Uploader.prototype.cancel = function(fileData) {
                    fileData = fileData || this.filesData;
                    var cancelingFiles = this.getFilesInArray(fileData);
                    this.cancelUpload(cancelingFiles);
                }, Uploader.prototype.cancelUpload = function(fileData) {
                    var files = this.getFiles(fileData);
                    if (this.asyncSettings.chunkSize > 0) {
                        for(var i = 0; i < files.length; i++)if ('3' === files[i].statusCode) {
                            var metaData = this.getCurrentMetaData(files[i], null);
                            metaData.file.statusCode = '5', metaData.file.status = this.localizedTexts('fileUploadCancel'), this.updateMetaData(metaData), this.showHideUploadSpinner(files[i]);
                        }
                    } else for(var i = 0; i < files.length; i++)'3' === files[i].statusCode && (files[i].statusCode = '5', files[i].status = this.localizedTexts('fileUploadCancel'), this.showHideUploadSpinner(files[i]));
                }, Uploader.prototype.showHideUploadSpinner = function(files) {
                    var liElement = this.getLiElement(files);
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(liElement) && (0, ej2_base /* isNullOrUndefined */ .le)(this.template)) {
                        var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);
                        createSpinner({
                            target: spinnerTarget,
                            width: '20px'
                        }), showSpinner(spinnerTarget);
                    }
                }, uploader_decorate([
                    (0, ej2_base /* Complex */ .Zz)({
                        saveUrl: '',
                        removeUrl: ''
                    }, AsyncSettings)
                ], Uploader.prototype, "asyncSettings", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Uploader.prototype, "sequentialUpload", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)({})
                ], Uploader.prototype, "htmlAttributes", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Uploader.prototype, "cssClass", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], Uploader.prototype, "enabled", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], Uploader.prototype, "template", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], Uploader.prototype, "multiple", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], Uploader.prototype, "autoUpload", void 0), uploader_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, ButtonsProps)
                ], Uploader.prototype, "buttons", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Uploader.prototype, "allowedExtensions", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)(0)
                ], Uploader.prototype, "minFileSize", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)(30000000)
                ], Uploader.prototype, "maxFileSize", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], Uploader.prototype, "dropArea", void 0), uploader_decorate([
                    (0, ej2_base /* Collection */ .FE)([
                        {}
                    ], FilesProp)
                ], Uploader.prototype, "files", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], Uploader.prototype, "showFileList", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Uploader.prototype, "directoryUpload", void 0), uploader_decorate([
                    (0, ej2_base /* Property */ .Z9)('Default')
                ], Uploader.prototype, "dropEffect", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "created", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "actionComplete", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "rendering", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "beforeUpload", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "fileListRendering", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "selected", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "uploading", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "success", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "failure", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "removing", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "beforeRemove", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "clearing", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "progress", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "change", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "chunkSuccess", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "chunkFailure", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "chunkUploading", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "canceling", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "pausing", void 0), uploader_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Uploader.prototype, "resuming", void 0), Uploader = uploader_decorate([
                    ej2_base /* NotifyPropertyChanges */ .Zl
                ], Uploader);
            }(ej2_base /* Component */ .wA), util = __webpack_require__(5932), PasteCleanup = /** @class */ function() {
                function PasteCleanup(parent, serviceLocator) {
                    this.inlineNode = [
                        'a',
                        'abbr',
                        'acronym',
                        'audio',
                        'b',
                        'bdi',
                        'bdo',
                        'big',
                        'br',
                        'button',
                        'canvas',
                        'cite',
                        'code',
                        'data',
                        'datalist',
                        'del',
                        'dfn',
                        'em',
                        'embed',
                        'font',
                        'i',
                        'iframe',
                        'img',
                        'input',
                        'ins',
                        'kbd',
                        'label',
                        'map',
                        'mark',
                        'meter',
                        'noscript',
                        'object',
                        'output',
                        'picture',
                        'progress',
                        'q',
                        'ruby',
                        's',
                        'samp',
                        'script',
                        'select',
                        'slot',
                        'small',
                        'span',
                        'strong',
                        'sub',
                        'sup',
                        'svg',
                        'template',
                        'textarea',
                        'time',
                        'u',
                        'tt',
                        'var',
                        'video',
                        'wbr'
                    ], this.blockNode = [
                        'div',
                        'h1',
                        'h2',
                        'h3',
                        'h4',
                        'h5',
                        'h6',
                        'address',
                        'blockquote',
                        'button',
                        'center',
                        'dd',
                        'dir',
                        'dl',
                        'dt',
                        'fieldset',
                        'frameset',
                        'hr',
                        'iframe',
                        'isindex',
                        'li',
                        'map',
                        'menu',
                        'noframes',
                        'noscript',
                        'object',
                        'ol',
                        'pre',
                        'td',
                        'tr',
                        'th',
                        'tbody',
                        'tfoot',
                        'thead',
                        'table',
                        'ul',
                        'header',
                        'article',
                        'nav',
                        'footer',
                        'section',
                        'aside',
                        'main',
                        'figure',
                        'figcaption'
                    ], this.isNotFromHtml = !1, this.containsHtml = !1, this.parent = parent, this.locator = serviceLocator, this.renderFactory = this.locator.getService('rendererFactory'), this.i10n = serviceLocator.getService('rteLocale'), this.dialogRenderObj = serviceLocator.getService('dialogRenderObject'), this.addEventListener();
                }
                return PasteCleanup.prototype.addEventListener = function() {
                    this.nodeSelectionObj = new selection /* NodeSelection */ .q(), this.parent.isDestroyed || (this.parent.on(constant /* pasteClean */ .dI, this.pasteClean, this), this.parent.on(constant /* bindCssClass */ ._8, this.setCssClass, this), this.parent.on(constant /* destroy */ .ob, this.destroy, this));
                }, PasteCleanup.prototype.destroy = function() {
                    this.removeEventListener();
                }, PasteCleanup.prototype.removeEventListener = function() {
                    this.parent.isDestroyed || (this.parent.off(constant /* pasteClean */ .dI, this.pasteClean), this.parent.off(constant /* bindCssClass */ ._8, this.setCssClass), this.parent.off(constant /* destroy */ .ob, this.destroy));
                }, PasteCleanup.prototype.pasteClean = function(e) {
                    var _this = this, args = {
                        requestType: 'Paste',
                        editorMode: this.parent.editorMode,
                        event: e
                    }, value = null;
                    if (e.args && !(0, ej2_base /* isNullOrUndefined */ .le)(e.args.clipboardData) && (value = e.args.clipboardData.getData('text/html')), this.parent.trigger(constant /* beforePasteCleanup */ .xu, {
                        value: value
                    }), e.args && null !== value && 'HTML' === this.parent.editorMode) {
                        if (0 === value.length) {
                            var htmlRegex = new RegExp(/<\/[a-z][\s\S]*>/i);
                            value = e.args.clipboardData.getData('text/plain'), this.isNotFromHtml = '' !== value, value = (value = value.replace(/</g, '&lt;')).replace(/>/g, '&gt;'), this.containsHtml = htmlRegex.test(value);
                            var file = e && e.args.clipboardData && e.args.clipboardData.items.length > 0 ? null === e.args.clipboardData.items[0].getAsFile() ? (0, ej2_base /* isNullOrUndefined */ .le)(e.args.clipboardData.items[1]) ? null : e.args.clipboardData.items[1].getAsFile() : e.args.clipboardData.items[0].getAsFile() : null;
                            if (this.parent.notify(constant /* paste */ .RE, {
                                file: file,
                                args: e.args,
                                text: value,
                                callBack: function(b) {
                                    'object' == typeof b ? _this.parent.formatter.editorManager.execCommand('Images', 'Image', e.args, _this.imageFormatting.bind(_this, args), 'pasteCleanup', b, 'pasteCleanupModule') : value = b;
                                }
                            }), !htmlRegex.test(value)) {
                                var divElement = this.parent.createElement('div');
                                divElement.innerHTML = this.splitBreakLine(value), value = divElement.innerHTML;
                            }
                        } else value.length > 0 && this.parent.formatter.editorManager.observer.notify(common_constant /* MS_WORD_CLEANUP */ .Ki, {
                            args: e.args,
                            text: e.text,
                            allowedStylePropertiesArray: this.parent.pasteCleanupSettings.allowedStyleProps,
                            callBack: function(a) {
                                value = a.trim();
                            }
                        });
                        this.contentRenderer = this.renderFactory.getRenderer(base_enum /* RenderType.Content */ .y2.Content);
                        var currentDocument = this.contentRenderer.getDocument(), range = this.nodeSelectionObj.getRange(currentDocument);
                        if (this.saveSelection = this.nodeSelectionObj.save(range, currentDocument), this.parent.trigger(constant /* afterPasteCleanup */ .v, {
                            value: value
                        }, function(updatedArgs) {
                            value = updatedArgs.value;
                        }), this.parent.pasteCleanupSettings.prompt) {
                            e.args.preventDefault();
                            var tempDivElem = this.parent.createElement('div');
                            tempDivElem.innerHTML = value, '' === tempDivElem.textContent && (0, ej2_base /* isNullOrUndefined */ .le)(tempDivElem.querySelector('img')) && (0, ej2_base /* isNullOrUndefined */ .le)(tempDivElem.querySelector('table')) || this.pasteDialog(value, args);
                        } else this.parent.pasteCleanupSettings.plainText ? (e.args.preventDefault(), this.plainFormatting(value, args)) : this.parent.pasteCleanupSettings.keepFormat ? (e.args.preventDefault(), this.formatting(value, !1, args)) : (e.args.preventDefault(), this.formatting(value, !0, args));
                    }
                }, PasteCleanup.prototype.splitBreakLine = function(value) {
                    for(var enterSplitText = value.split('\n'), contentInnerElem = '', i = 0; i < enterSplitText.length; i++)'' === enterSplitText[i].trim() ? contentInnerElem += (0, util /* getDefaultValue */ .oG)(this.parent) : contentInnerElem += '<p>' + this.makeSpace(enterSplitText[i]).trim() + '</p>';
                    return contentInnerElem;
                }, PasteCleanup.prototype.makeSpace = function(enterSplitText) {
                    for(var contentWithSpace = '', spaceBetweenContent = !0, spaceSplit = enterSplitText.split(' '), j = 0; j < spaceSplit.length; j++)'' === spaceSplit[j].trim() ? contentWithSpace += spaceBetweenContent ? '&nbsp;' : ' ' : (spaceBetweenContent = !1, contentWithSpace += spaceSplit[j] + ' ');
                    return contentWithSpace;
                }, PasteCleanup.prototype.imgUploading = function(elm) {
                    var allImgElm = elm.querySelectorAll('.pasteContent_Img');
                    if (this.parent.insertImageSettings.saveUrl && allImgElm.length > 0) {
                        for(var base64Src = [], imgName = [], uploadImg = [], i = 0; i < allImgElm.length; i++)allImgElm[i].getAttribute('src').split(',')[0].indexOf('base64') >= 0 && (base64Src.push(allImgElm[i].getAttribute('src')), imgName.push((0, ej2_base /* getUniqueID */ .QI)('rte_image')), uploadImg.push(allImgElm[i]));
                        for(var fileList = [], i = 0; i < base64Src.length; i++)fileList.push(this.base64ToFile(base64Src[i], imgName[i]));
                        for(var i = 0; i < fileList.length; i++)this.uploadMethod(fileList[i], uploadImg[i]);
                        (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.insertImageSettings.path) && 'Blob' === this.parent.insertImageSettings.saveFormat && this.getBlob(allImgElm);
                    } else 'Blob' === this.parent.insertImageSettings.saveFormat && this.getBlob(allImgElm);
                    for(var allImgElmId = elm.querySelectorAll('.pasteContent_Img'), i = 0; i < allImgElmId.length; i++)allImgElmId[i].classList.remove('pasteContent_Img'), '' === allImgElmId[i].getAttribute('class').trim() && allImgElm[i].removeAttribute('class');
                }, PasteCleanup.prototype.getBlob = function(allImgElm) {
                    for(var i = 0; i < allImgElm.length; i++)if (!(0, ej2_base /* isNullOrUndefined */ .le)(allImgElm[i].getAttribute('src')) && allImgElm[i].getAttribute('src').split(',')[0].indexOf('base64') >= 0) {
                        var blopUrl = URL.createObjectURL((0, util /* convertToBlob */ .K_)(allImgElm[i].getAttribute('src')));
                        allImgElm[i].setAttribute('src', blopUrl);
                    }
                }, PasteCleanup.prototype.toolbarEnableDisable = function(state) {
                    this.parent.inlineMode.enable || this.parent.toolbarModule.baseToolbar.toolbarObj.disable(state);
                }, PasteCleanup.prototype.uploadMethod = function(fileList, imgElem) {
                    var rawFile, beforeUploadArgs, _this = this, uploadEle = document.createElement('div');
                    document.body.appendChild(uploadEle), uploadEle.setAttribute('display', 'none'), imgElem.style.opacity = '0.5';
                    var popupEle = this.parent.createElement('div');
                    this.parent.element.appendChild(popupEle);
                    var contentEle = this.parent.createElement('input', {
                        id: this.parent.element.id + '_upload',
                        attrs: {
                            type: 'File',
                            name: 'UploadFiles'
                        }
                    }), offsetY = this.parent.iframeSettings.enable ? -50 : -90;
                    this.popupObj = new popup /* Popup */ .GI(popupEle, {
                        relateTo: imgElem,
                        height: '85px',
                        width: '300px',
                        offsetY: offsetY,
                        content: contentEle,
                        viewPortElement: this.parent.element,
                        position: {
                            X: 'center',
                            Y: 'top'
                        },
                        enableRtl: this.parent.enableRtl,
                        zIndex: 10001,
                        // eslint-disable-next-line
                        close: function(event) {
                            _this.parent.isBlur = !1, _this.popupObj.destroy(), (0, ej2_base /* detach */ .og)(_this.popupObj.element);
                        }
                    }), this.popupObj.element.style.display = 'none', (0, ej2_base /* addClass */ .cn)([
                        this.popupObj.element
                    ], [
                        classes /* CLS_POPUP_OPEN */ ._R,
                        classes /* CLS_RTE_UPLOAD_POPUP */ .MO
                    ]), (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.cssClass) || (0, ej2_base /* addClass */ .cn)([
                        this.popupObj.element
                    ], this.parent.cssClass), setTimeout(function() {
                        _this.refreshPopup(imgElem, _this.popupObj);
                    }, fileList.size > 1000000 ? 300 : 100), this.uploadObj = new Uploader({
                        asyncSettings: {
                            saveUrl: this.parent.insertImageSettings.saveUrl,
                            removeUrl: this.parent.insertImageSettings.removeUrl
                        },
                        cssClass: classes /* CLS_RTE_DIALOG_UPLOAD */ .VE,
                        dropArea: this.parent.inputElement,
                        allowedExtensions: this.parent.insertImageSettings.allowedTypes.toString(),
                        success: function(e) {
                            setTimeout(function() {
                                _this.popupClose(_this.popupObj, _this.uploadObj, imgElem, e);
                            }, 900);
                        },
                        uploading: function(e) {
                            _this.parent.isServerRendered || _this.parent.trigger(constant /* imageUploading */ .Go, e, function(imageUploadingArgs) {
                                imageUploadingArgs.cancel ? ((0, ej2_base /* isNullOrUndefined */ .le)(imgElem) || (0, ej2_base /* detach */ .og)(imgElem), (0, ej2_base /* isNullOrUndefined */ .le)(_this.popupObj.element) || (0, ej2_base /* detach */ .og)(_this.popupObj.element)) : _this.parent.inputElement.contentEditable = 'false';
                            });
                        },
                        beforeUpload: function(args) {
                            _this.parent.isServerRendered ? ((beforeUploadArgs = JSON.parse(JSON.stringify(args))).filesData = rawFile, args.cancel = !0, _this.parent.trigger(constant /* imageUploading */ .Go, beforeUploadArgs, function(beforeUploadArgs) {
                                beforeUploadArgs.cancel || (_this.toolbarEnableDisable(!0), /* eslint-disable */ _this.uploadObj.currentRequestHeader = beforeUploadArgs.currentRequest ? beforeUploadArgs.currentRequest : _this.uploadObj.currentRequestHeader, _this.uploadObj.customFormDatas = beforeUploadArgs.customFormData && beforeUploadArgs.customFormData.length > 0 ? beforeUploadArgs.customFormData : _this.uploadObj.customFormDatas, _this.uploadObj.uploadFiles(rawFile, null));
                            /* eslint-enable */ })) : (_this.parent.trigger(constant /* beforeImageUpload */ .cA, args), _this.toolbarEnableDisable(!0));
                        },
                        // eslint-disable-next-line
                        failure: function(e) {
                            setTimeout(function() {
                                _this.uploadFailure(imgElem, _this.uploadObj, _this.popupObj, e);
                            }, 900);
                        },
                        canceling: function() {
                            _this.parent.inputElement.contentEditable = 'true', ' ' === imgElem.nextSibling.textContent && (0, ej2_base /* detach */ .og)(imgElem.nextSibling), (0, ej2_base /* detach */ .og)(imgElem), _this.popupObj.close();
                        },
                        selected: function(e) {
                            e.cancel = !0, _this.parent.isServerRendered && (rawFile = e.filesData);
                        },
                        removing: function() {
                            _this.parent.inputElement.contentEditable = 'true', ' ' === imgElem.nextSibling.textContent && (0, ej2_base /* detach */ .og)(imgElem.nextSibling), (0, ej2_base /* detach */ .og)(imgElem), _this.popupObj.close();
                        }
                    }), this.uploadObj.appendTo(this.popupObj.element.childNodes[0]);
                    /* eslint-disable */ var fileData = [
                        {
                            name: fileList.name,
                            rawFile: fileList,
                            size: fileList.size,
                            type: fileList.type,
                            validationMessages: {
                                minSize: "",
                                maxSize: ""
                            },
                            statusCode: '1'
                        }
                    ];
                    this.uploadObj.createFileList(fileData), this.uploadObj.filesData.push(fileData[0]), /* eslint-enable */ rawFile = fileData, this.uploadObj.upload(fileData), this.popupObj.element.getElementsByClassName('e-file-select-wrap')[0].style.display = 'none', (0, ej2_base /* detach */ .og)(this.popupObj.element.querySelector('.e-rte-dialog-upload .e-file-select-wrap'));
                }, PasteCleanup.prototype.uploadFailure = function(imgElem, uploadObj, popupObj, e) {
                    this.parent.inputElement.contentEditable = 'true', (0, ej2_base /* detach */ .og)(imgElem), popupObj && popupObj.close(), this.parent.trigger(constant /* imageUploadFailed */ .vD, e), uploadObj.destroy();
                }, PasteCleanup.prototype.popupClose = function(popupObj, uploadObj, imgElem, e) {
                    var _this = this;
                    this.parent.inputElement.contentEditable = 'true', e.element = imgElem, this.parent.trigger(constant /* imageUploadSuccess */ .AL, e, function(e) {
                        if (!(0, ej2_base /* isNullOrUndefined */ .le)(_this.parent.insertImageSettings.path)) {
                            var url = _this.parent.insertImageSettings.path + e.file.name;
                            imgElem.src = url, imgElem.setAttribute('alt', e.file.name);
                        }
                    }), popupObj.close(), imgElem.style.opacity = '1', uploadObj.destroy(), this.toolbarEnableDisable(!1);
                }, PasteCleanup.prototype.refreshPopup = function(imageElement, popupObj) {
                    (this.parent.iframeSettings.enable ? this.parent.element.offsetTop + imageElement.offsetTop : imageElement.offsetTop) > this.parent.element.offsetTop + this.parent.element.offsetHeight ? (popupObj.relateTo = this.parent.inputElement, popupObj.offsetY = this.parent.iframeSettings.enable ? -30 : -65, popupObj.element.style.display = 'block') : popupObj && (popupObj.refreshPosition(imageElement), popupObj.element.style.display = 'block');
                }, PasteCleanup.prototype.base64ToFile = function(base64, filename) {
                    for(var baseStr = base64.split(','), extension = baseStr[0].match(/:(.*?);/)[1].split('/')[1], decodeStr = atob(baseStr[1]), strLen = decodeStr.length, decodeArr = new Uint8Array(strLen); strLen--;)decodeArr[strLen] = decodeStr.charCodeAt(strLen);
                    if (!(ej2_base /* Browser.isIE */ .AR.isIE || navigator.appVersion.indexOf('Edge') > -1)) return new File([
                        decodeArr
                    ], filename + '.' + ((0, ej2_base /* isNullOrUndefined */ .le)(extension) ? '' : extension), {
                        type: extension
                    });
                    var blob = new Blob([
                        decodeArr
                    ], {
                        type: extension
                    });
                    return (0, ej2_base /* extend */ .l7)(blob, {
                        name: filename + '.' + ((0, ej2_base /* isNullOrUndefined */ .le)(extension) ? '' : extension)
                    }), blob;
                }, /**
     * Method for image formatting when pasting
     *
     * @param {Object} pasteArgs - specifies the paste arguments.
     * @param {Element []} imgElement - specifies the array elements.
     * @returns {void}
     * @hidden

     */ PasteCleanup.prototype.imageFormatting = function(pasteArgs, imgElement) {
                    var imageElement = this.parent.createElement('span');
                    imageElement.appendChild(imgElement.elements[0]);
                    var imageValue = imageElement.innerHTML;
                    this.contentRenderer = this.renderFactory.getRenderer(base_enum /* RenderType.Content */ .y2.Content);
                    var currentDocument = this.contentRenderer.getDocument(), range = this.nodeSelectionObj.getRange(currentDocument);
                    this.saveSelection = this.nodeSelectionObj.save(range, currentDocument), this.parent.pasteCleanupSettings.prompt ? this.pasteDialog(imageValue, pasteArgs) : this.parent.pasteCleanupSettings.plainText ? this.plainFormatting(imageValue, pasteArgs) : this.parent.pasteCleanupSettings.keepFormat ? this.formatting(imageValue, !1, pasteArgs) : this.formatting(imageValue, !0, pasteArgs);
                }, PasteCleanup.prototype.radioRender = function() {
                    this.keepRadioButton = new RadioButton({
                        label: this.i10n.getConstant('keepFormat'),
                        name: 'pasteOption',
                        checked: !0
                    }), this.keepRadioButton.isStringTemplate = !0;
                    var keepFormatElement = this.parent.element.querySelector('#keepFormating');
                    this.keepRadioButton.appendTo(keepFormatElement), this.cleanRadioButton = new RadioButton({
                        label: this.i10n.getConstant('cleanFormat'),
                        name: 'pasteOption'
                    }), this.cleanRadioButton.isStringTemplate = !0;
                    var cleanFormatElement = this.parent.element.querySelector('#cleanFormat');
                    this.cleanRadioButton.appendTo(cleanFormatElement), this.plainTextRadioButton = new RadioButton({
                        label: this.i10n.getConstant('plainText'),
                        name: 'pasteOption'
                    }), this.plainTextRadioButton.isStringTemplate = !0;
                    var plainTextElement = this.parent.element.querySelector('#plainTextFormat');
                    this.plainTextRadioButton.appendTo(plainTextElement);
                }, PasteCleanup.prototype.selectFormatting = function(value, args, keepChecked, cleanChecked) {
                    keepChecked ? this.formatting(value, !1, args) : cleanChecked ? this.formatting(value, !0, args) : this.plainFormatting(value, args);
                }, PasteCleanup.prototype.pasteDialog = function(value, args) {
                    var _this = this, isHeight = !1, preRTEHeight = this.parent.height, dialogModel = {
                        buttons: [
                            {
                                click: function() {
                                    if (!_this.dialogObj.isDestroyed) {
                                        var keepChecked = _this.parent.element.querySelector('#keepFormating').checked, cleanChecked = _this.parent.element.querySelector('#cleanFormat').checked;
                                        _this.dialogObj.hide(), _this.parent.height = isHeight ? preRTEHeight : _this.parent.height, isHeight = !1;
                                        var argument = _this.dialogObj;
                                        _this.dialogRenderObj.close(argument), _this.dialogObj.destroy(), _this.selectFormatting(value, args, keepChecked, cleanChecked);
                                    }
                                },
                                buttonModel: {
                                    isPrimary: !0,
                                    cssClass: 'e-flat ' + classes /* CLS_RTE_PASTE_OK */ .mO,
                                    content: this.i10n.getConstant('pasteDialogOk')
                                }
                            },
                            {
                                click: function() {
                                    if (!_this.dialogObj.isDestroyed) {
                                        _this.dialogObj.hide(), _this.parent.height = isHeight ? preRTEHeight : _this.parent.height, isHeight = !1;
                                        var args_1 = _this.dialogObj;
                                        _this.dialogRenderObj.close(args_1), _this.dialogObj.destroy();
                                    }
                                },
                                buttonModel: {
                                    cssClass: 'e-flat ' + classes /* CLS_RTE_PASTE_CANCEL */ .Gj,
                                    content: this.i10n.getConstant('pasteDialogCancel')
                                }
                            }
                        ],
                        header: this.i10n.getConstant('pasteFormat'),
                        content: this.i10n.getConstant('pasteFormatContent') + '<br/><div><div style="padding-top:24px;"><input type="radio" class="' + classes /* CLS_RTE_PASTE_KEEP_FORMAT */ .cm + '" id="keepFormating"/></div><div style="padding-top:20px;"><input type="radio" class="' + classes /* CLS_RTE_PASTE_REMOVE_FORMAT */ .jC + '" id="cleanFormat"/></div><div style="padding-top:20px;"><input type="radio" class="' + classes /* CLS_RTE_PASTE_PLAIN_FORMAT */ .OC + '" id="plainTextFormat"/></div></div>',
                        target: this.parent.element,
                        width: '300px',
                        height: '265px',
                        cssClass: classes /* CLS_RTE_DIALOG_MIN_HEIGHT */ .Rw,
                        isModal: !0,
                        visible: !1
                    };
                    this.dialogObj = this.dialogRenderObj.render(dialogModel);
                    var rteDialogWrapper = this.parent.element.querySelector('#' + this.parent.getID() + '_pasteCleanupDialog');
                    null !== rteDialogWrapper && '' !== rteDialogWrapper.innerHTML && this.destroyDialog(rteDialogWrapper), null === rteDialogWrapper && (rteDialogWrapper = this.parent.createElement('div', {
                        id: this.parent.getID() + '_pasteCleanupDialog'
                    }), this.parent.element.appendChild(rteDialogWrapper)), this.dialogObj.appendTo(rteDialogWrapper), this.radioRender(), this.parent.element.offsetHeight < parseInt(this.dialogObj.height.split('px')[0], null) && (this.parent.height = parseInt(this.dialogObj.height.split('px')[0], null) + 40, /* eslint-enable */ isHeight = !0), this.dialogObj.show(), this.setCssClass({
                        cssClass: this.parent.cssClass
                    });
                }, PasteCleanup.prototype.updateCss = function(currentObj, e) {
                    currentObj && e.cssClass && ((0, ej2_base /* isNullOrUndefined */ .le)(e.oldCssClass) ? currentObj.setProperties({
                        cssClass: (currentObj.cssClass + ' ' + e.cssClass).trim()
                    }) : currentObj.setProperties({
                        cssClass: (currentObj.cssClass.replace(e.oldCssClass, '').trim() + ' ' + e.cssClass).trim()
                    }));
                }, PasteCleanup.prototype.setCssClass = function(e) {
                    this.popupObj && e.cssClass && ((0, ej2_base /* isNullOrUndefined */ .le)(e.oldCssClass) || (0, ej2_base /* removeClass */ .IV)([
                        this.popupObj.element
                    ], e.oldCssClass), (0, ej2_base /* addClass */ .cn)([
                        this.popupObj.element
                    ], e.cssClass)), this.updateCss(this.dialogObj, e), this.updateCss(this.uploadObj, e), this.updateCss(this.plainTextRadioButton, e), this.updateCss(this.cleanRadioButton, e), this.updateCss(this.keepRadioButton, e);
                }, PasteCleanup.prototype.destroyDialog = function(rteDialogWrapper) {
                    var rteDialogContainer = this.parent.element.querySelector('.e-dlg-container');
                    (0, ej2_base /* detach */ .og)(rteDialogContainer);
                    for(var rteDialogWrapperChildLength = rteDialogWrapper.children.length, i = 0; i < rteDialogWrapperChildLength; i++)(0, ej2_base /* detach */ .og)(rteDialogWrapper.children[0]);
                }, PasteCleanup.prototype.cleanAppleClass = function(elem) {
                    for(var appleClassElem = elem.querySelectorAll('br.Apple-interchange-newline'), i = 0; i < appleClassElem.length; i++)(0, ej2_base /* detach */ .og)(appleClassElem[i]);
                    return elem;
                }, PasteCleanup.prototype.formatting = function(value, clean, args) {
                    var _this = this, clipBoardElem = this.parent.createElement('div', {
                        className: 'pasteContent',
                        styles: 'display:inline;'
                    });
                    this.isNotFromHtml && this.containsHtml && (value = this.splitBreakLine(value)), clipBoardElem.innerHTML = value, clipBoardElem = this.cleanAppleClass(clipBoardElem), null !== this.parent.pasteCleanupSettings.deniedTags && (clipBoardElem = this.deniedTags(clipBoardElem)), clean ? clipBoardElem = this.deniedAttributes(clipBoardElem, clean) : null !== this.parent.pasteCleanupSettings.deniedAttrs && (clipBoardElem = this.deniedAttributes(clipBoardElem, clean)), null !== this.parent.pasteCleanupSettings.allowedStyleProps && (clipBoardElem = this.allowedStyle(clipBoardElem)), this.saveSelection.restore(), clipBoardElem.innerHTML = this.sanitizeHelper(clipBoardElem.innerHTML);
                    for(var allImg = clipBoardElem.querySelectorAll('img'), i = 0; i < allImg.length; i++)allImg[i].classList.add('pasteContent_Img'), 'auto' !== this.parent.insertImageSettings.width && allImg[i].setAttribute('width', this.parent.insertImageSettings.width), '0' !== this.parent.insertImageSettings.minWidth && 0 !== this.parent.insertImageSettings.minWidth && (allImg[i].style.minWidth = this.parent.insertImageSettings.minWidth.toString()), null !== this.parent.insertImageSettings.maxWidth && (allImg[i].style.maxWidth = this.parent.getInsertImgMaxWidth().toString()), 'auto' !== this.parent.insertImageSettings.height && allImg[i].setAttribute('height', this.parent.insertImageSettings.height), '0' !== this.parent.insertImageSettings.minHeight && 0 !== this.parent.insertImageSettings.minHeight && (allImg[i].style.minHeight = this.parent.insertImageSettings.minHeight.toString()), null !== this.parent.insertImageSettings.maxHeight && (allImg[i].style.maxHeight = this.parent.insertImageSettings.maxHeight.toString());
                    this.addTempClass(clipBoardElem), '' === clipBoardElem.textContent && (0, ej2_base /* isNullOrUndefined */ .le)(clipBoardElem.querySelector('img')) && (0, ej2_base /* isNullOrUndefined */ .le)(clipBoardElem.querySelector('table')) || (this.parent.formatter.editorManager.execCommand('inserthtml', 'pasteCleanup', args, function(returnArgs) {
                        (0, ej2_base /* extend */ .l7)(args, {
                            elements: returnArgs.elements,
                            imageElements: returnArgs.imgElem
                        }, !0), _this.parent.formatter.onSuccess(_this.parent, args);
                    }, clipBoardElem), this.removeTempClass(), this.parent.notify(constant /* toolbarRefresh */ .l0, {}), this.imgUploading(this.parent.inputElement), this.parent.iframeSettings.enable && this.parent.updateValue());
                }, PasteCleanup.prototype.addTempClass = function(clipBoardElem) {
                    for(var allChild = clipBoardElem.children, i = 0; i < allChild.length; i++)allChild[i].classList.add('pasteContent_RTE');
                }, PasteCleanup.prototype.removeTempClass = function() {
                    for(var classElm = this.parent.inputElement.querySelectorAll('.pasteContent_RTE'), i = 0; i < classElm.length; i++)classElm[i].classList.remove('pasteContent_RTE'), '' === classElm[i].getAttribute('class') && classElm[i].removeAttribute('class');
                }, PasteCleanup.prototype.sanitizeHelper = function(value) {
                    return value = (0, util /* sanitizeHelper */ .cC)(value, this.parent);
                }, //Plain Formatting
                PasteCleanup.prototype.plainFormatting = function(value, args) {
                    var _this = this, clipBoardElem = this.parent.createElement('div', {
                        className: 'pasteContent',
                        styles: 'display:inline;'
                    });
                    if (clipBoardElem.innerHTML = value, this.detachInlineElements(clipBoardElem), this.getTextContent(clipBoardElem), '' !== clipBoardElem.textContent.trim()) {
                        if (!(0, ej2_base /* isNullOrUndefined */ .le)(clipBoardElem.firstElementChild) && 'BR' !== clipBoardElem.firstElementChild.tagName) {
                            var firstElm = clipBoardElem.firstElementChild;
                            if (!(0, ej2_base /* isNullOrUndefined */ .le)(clipBoardElem.firstElementChild)) {
                                for(var spanElm = this.parent.createElement('span'), i = 0, j = 0; i < firstElm.childNodes.length; i++, j++)if ('#text' === firstElm.childNodes[i].nodeName) spanElm.appendChild(firstElm.childNodes[i]), clipBoardElem.insertBefore(spanElm, clipBoardElem.firstElementChild), i--;
                                else if ('#text' !== firstElm.childNodes[i].nodeName && 0 === j) {
                                    for(var k = 0; k < firstElm.childNodes[i].childNodes.length; k++)spanElm.appendChild(firstElm.childNodes[i].childNodes[k]), clipBoardElem.insertBefore(spanElm, clipBoardElem.firstElementChild), k--;
                                    i--;
                                } else break;
                                firstElm.hasChildNodes() || (0, ej2_base /* detach */ .og)(firstElm);
                            }
                        }
                        this.removeEmptyElements(clipBoardElem), this.saveSelection.restore(), clipBoardElem.innerHTML = this.sanitizeHelper(clipBoardElem.innerHTML), this.addTempClass(clipBoardElem), this.parent.formatter.editorManager.execCommand('inserthtml', 'pasteCleanup', args, function(returnArgs) {
                            (0, ej2_base /* extend */ .l7)(args, {
                                elements: returnArgs.elements,
                                imageElements: returnArgs.imgElem
                            }, !0), _this.parent.formatter.onSuccess(_this.parent, args);
                        }, clipBoardElem), this.removeTempClass();
                    } else this.saveSelection.restore(), (0, ej2_base /* extend */ .l7)(args, {
                        elements: []
                    }, !0), this.parent.formatter.onSuccess(this.parent, args);
                }, PasteCleanup.prototype.getTextContent = function(clipBoardElem) {
                    for(var i = 0; i < this.blockNode.length; i++)for(var inElem = clipBoardElem.querySelectorAll(this.blockNode[i]), j = 0; j < inElem.length; j++){
                        for(var parElem = void 0, k = 0, l = 0, preNode = void 0; k < inElem[j].childNodes.length; k++, l++)if ('DIV' === inElem[j].childNodes[k].nodeName || 'P' === inElem[j].childNodes[k].nodeName || '#text' === inElem[j].childNodes[k].nodeName && '&nbsp;' !== inElem[j].childNodes[k].nodeValue.replace(/\u00a0/g, '&nbsp;') && '' === inElem[j].childNodes[k].textContent.trim()) parElem = inElem[j].childNodes[k].parentElement, inElem[j].childNodes[k].parentElement.parentElement.insertBefore(inElem[j].childNodes[k], inElem[j].childNodes[k].parentElement), k--;
                        else {
                            if (parElem = inElem[j].childNodes[k].parentElement, 'text' === preNode) parElem.previousElementSibling.appendChild(inElem[j].childNodes[k]);
                            else {
                                var divElement = this.parent.createElement('div', {
                                    id: 'newDiv'
                                });
                                divElement.appendChild(inElem[j].childNodes[k]), parElem.parentElement.insertBefore(divElement, parElem);
                            }
                            k--, preNode = 'text';
                        }
                        (0, ej2_base /* isNullOrUndefined */ .le)(parElem) || (0, ej2_base /* detach */ .og)(parElem);
                    }
                    for(var allElems = clipBoardElem.querySelectorAll('*'), i = 0; i < allElems.length; i++)for(var allAtr = allElems[i].attributes, j = 0; j < allAtr.length; j++)allElems[i].removeAttribute(allAtr[j].name), j--;
                }, PasteCleanup.prototype.detachInlineElements = function(clipBoardElem) {
                    for(var i = 0; i < this.inlineNode.length; i++)for(var inElem = clipBoardElem.querySelectorAll(this.inlineNode[i]), j = 0; j < inElem.length; j++){
                        for(var parElem = void 0, k = 0; k < inElem[j].childNodes.length; k++)parElem = inElem[j].childNodes[k].parentElement, inElem[j].childNodes[k].parentElement.parentElement.insertBefore(inElem[j].childNodes[k], inElem[j].childNodes[k].parentElement), k--;
                        (0, ej2_base /* isNullOrUndefined */ .le)(parElem) || (0, ej2_base /* detach */ .og)(parElem);
                    }
                }, PasteCleanup.prototype.findDetachEmptyElem = function(element) {
                    return (0, ej2_base /* isNullOrUndefined */ .le)(element.parentElement) ? null : '' === element.parentElement.textContent.trim() && 'pasteContent' !== element.parentElement.getAttribute('class') ? this.findDetachEmptyElem(element.parentElement) : element;
                }, PasteCleanup.prototype.removeEmptyElements = function(element) {
                    for(var emptyElements = element.querySelectorAll(':empty'), i = 0; i < emptyElements.length; i++)if ('BR' !== emptyElements[i].tagName) {
                        var detachableElement = this.findDetachEmptyElem(emptyElements[i]);
                        (0, ej2_base /* isNullOrUndefined */ .le)(detachableElement) || (0, ej2_base /* detach */ .og)(detachableElement);
                    }
                }, //GroupingTags
                PasteCleanup.prototype.tagGrouping = function(deniedTags) {
                    for(var groupingTags = deniedTags.slice(), keys = Object.keys(config /* pasteCleanupGroupingTags */ .n4), values = keys.map(function(key) {
                        return config /* pasteCleanupGroupingTags */ .n4[key];
                    }), addTags = [], i = 0; i < groupingTags.length; i++)if (groupingTags[i].split('[').length > 1 && (groupingTags[i] = groupingTags[i].split('[')[0].trim()), keys.indexOf(groupingTags[i]) > -1) for(var j = 0; j < values[keys.indexOf(groupingTags[i])].length; j++)0 > groupingTags.indexOf(values[keys.indexOf(groupingTags[i])][j]) && 0 > addTags.indexOf(values[keys.indexOf(groupingTags[i])][j]) && addTags.push(values[keys.indexOf(groupingTags[i])][j]);
                    return deniedTags = deniedTags.concat(addTags);
                }, //Filter Attributes in Denied Tags
                PasteCleanup.prototype.attributesfilter = function(deniedTags) {
                    for(var i = 0; i < deniedTags.length; i++)if (deniedTags[i].split('[').length > 1) {
                        for(var userAttributes = deniedTags[i].split('[')[1].split(']')[0].split(','), allowedAttributeArray = [], deniedAttributeArray = [], j = 0; j < userAttributes.length; j++)// eslint-disable-next-line
                        0 > userAttributes[j].indexOf('!') ? allowedAttributeArray.push(userAttributes[j].trim()) : deniedAttributeArray.push(userAttributes[j].split('!')[1].trim());
                        var allowedAttribute = allowedAttributeArray.length > 1 ? allowedAttributeArray.join('][') : allowedAttributeArray.join(), deniedAttribute = deniedAttributeArray.length > 1 ? deniedAttributeArray.join('][') : deniedAttributeArray.join();
                        if (deniedAttribute.length > 0) {
                            var select = '' !== allowedAttribute ? deniedTags[i].split('[')[0] + '[' + allowedAttribute + ']' : deniedTags[i].split('[')[0];
                            deniedTags[i] = select + ':not([' + deniedAttribute + '])';
                        } else deniedTags[i] = deniedTags[i].split('[')[0] + '[' + allowedAttribute + ']';
                    }
                    return deniedTags;
                }, //Denied Tags
                PasteCleanup.prototype.deniedTags = function(clipBoardElem) {
                    var deniedTags = (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.pasteCleanupSettings.deniedTags) ? [] : this.parent.pasteCleanupSettings.deniedTags.slice();
                    deniedTags = this.attributesfilter(deniedTags), deniedTags = this.tagGrouping(deniedTags);
                    for(var i = 0; i < deniedTags.length; i++)for(var removableElement = clipBoardElem.querySelectorAll(deniedTags[i]), j = removableElement.length - 1; j >= 0; j--){
                        for(var parentElem = removableElement[j].parentNode; removableElement[j].firstChild;)parentElem.insertBefore(removableElement[j].firstChild, removableElement[j]);
                        parentElem.removeChild(removableElement[j]);
                    }
                    return clipBoardElem;
                }, //Denied Attributes
                PasteCleanup.prototype.deniedAttributes = function(clipBoardElem, clean) {
                    var deniedAttrs = (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.pasteCleanupSettings.deniedAttrs) ? [] : this.parent.pasteCleanupSettings.deniedAttrs.slice();
                    clean && deniedAttrs.push('style');
                    for(var i = 0; i < deniedAttrs.length; i++)for(var removableAttrElement = clipBoardElem.querySelectorAll('[' + deniedAttrs[i] + ']'), j = 0; j < removableAttrElement.length; j++)removableAttrElement[j].removeAttribute(deniedAttrs[i]);
                    return clipBoardElem;
                }, //Allowed Style Properties
                PasteCleanup.prototype.allowedStyle = function(clipBoardElem) {
                    var allowedStyleProps = (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.pasteCleanupSettings.allowedStyleProps) ? [] : this.parent.pasteCleanupSettings.allowedStyleProps.slice();
                    allowedStyleProps.push('list-style-type', 'list-style');
                    for(var styleElement = clipBoardElem.querySelectorAll('[style]'), i = 0; i < styleElement.length; i++){
                        for(var allowedStyleValue = '', allowedStyleValueArray = [], styleValue = styleElement[i].getAttribute('style').split(';'), k = 0; k < styleValue.length; k++)allowedStyleProps.indexOf(styleValue[k].split(':')[0].trim()) >= 0 && allowedStyleValueArray.push(styleValue[k]);
                        styleElement[i].removeAttribute('style'), (allowedStyleValue = '' === allowedStyleValueArray.join(';').trim() ? allowedStyleValueArray.join(';') : allowedStyleValueArray.join(';') + ';') && styleElement[i].setAttribute('style', allowedStyleValue);
                    }
                    return clipBoardElem;
                }, /**
     * For internal use only - Get the module name.
     *
     * @returns {void}
     * @hidden
     */ PasteCleanup.prototype.getModuleName = function() {
                    return 'pasteCleanup';
                }, PasteCleanup;
            }();
        /***/ },
        /***/ 8773: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                o: function() {
                    return /* binding */ toolbar_Toolbar;
                }
            });
            // EXTERNAL MODULE: ./node_modules/@syncfusion/ej2-base/index.js + 30 modules
            var extendStatics, extendStatics1, extendStatics2, extendStatics3, extendStatics4, extendStatics5, extendStatics6, extendStatics7, extendStatics8, ej2_base = __webpack_require__(1807), constant = __webpack_require__(3386), classes = __webpack_require__(9805), base_enum = __webpack_require__(809), util = __webpack_require__(5932), items = __webpack_require__(3276), popup_popup = __webpack_require__(9486), position = __webpack_require__(6216), button_button = __webpack_require__(78), __extends = (extendStatics = function(d, b) {
                return (extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), __decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, CLS_RTL = 'e-rtl', CLS_DISABLE = 'e-overlay', CLS_NAVARROW = 'e-nav-arrow', CLS_NAVRIGHTARROW = 'e-nav-right-arrow', CLS_NAVLEFTARROW = 'e-nav-left-arrow', CLS_HSCROLLNAV = 'e-scroll-nav', CLS_HSCROLLNAVRIGHT = 'e-scroll-right-nav', CLS_HSCROLLNAVLEFT = 'e-scroll-left-nav', CLS_DEVICE = 'e-scroll-device', CLS_OVERLAY = 'e-scroll-overlay', CLS_RIGHTOVERLAY = 'e-scroll-right-overlay', CLS_LEFTOVERLAY = 'e-scroll-left-overlay', HScroll = /** @class */ function(_super) {
                /**
     * Initializes a new instance of the HScroll class.
     *
     * @param {HScrollModel} options  - Specifies HScroll model properties as options.
     * @param {string | HTMLElement} element  - Specifies the element for which horizontal scrolling applies.
     */ function HScroll(options, element) {
                    return _super.call(this, options, element) || this;
                }
                return __extends(HScroll, _super), /**
     * Initialize the event handler
     *
     * @private
     * @returns {void}
     */ HScroll.prototype.preRender = function() {
                    this.browser = ej2_base /* Browser.info.name */ .AR.info.name, this.browserCheck = 'mozilla' === this.browser, this.isDevice = ej2_base /* Browser.isDevice */ .AR.isDevice, this.customStep = !0;
                    var element = this.element;
                    this.ieCheck = 'edge' === this.browser || 'msie' === this.browser, this.initialize(), '' === element.id && (element.id = (0, ej2_base /* getUniqueID */ .QI)('hscroll'), this.uniqueId = !0), element.style.display = 'block', this.enableRtl && element.classList.add(CLS_RTL);
                }, /**
     * To Initialize the horizontal scroll  rendering
     *
     * @private
     * @returns {void}
     */ HScroll.prototype.render = function() {
                    this.touchModule = new ej2_base /* Touch */ .Xh(this.element, {
                        scroll: this.touchHandler.bind(this),
                        swipe: this.swipeHandler.bind(this)
                    }), ej2_base /* EventHandler.add */ .bi.add(this.scrollEle, 'scroll', this.scrollHandler, this), this.isDevice ? (this.element.classList.add(CLS_DEVICE), this.createOverlay(this.element)) : this.createNavIcon(this.element), this.setScrollState();
                }, HScroll.prototype.setScrollState = function() {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.scrollStep) || this.scrollStep < 0 ? (this.scrollStep = this.scrollEle.offsetWidth, this.customStep = !1) : this.customStep = !0;
                }, HScroll.prototype.initialize = function() {
                    var scrollEle = this.createElement('div', {
                        className: 'e-hscroll-content'
                    }), scrollDiv = this.createElement('div', {
                        className: 'e-hscroll-bar'
                    });
                    scrollDiv.setAttribute('tabindex', '-1');
                    for(var ele = this.element, innerEle = [].slice.call(ele.children), _i = 0; _i < innerEle.length; _i++){
                        var ele_1 = innerEle[_i];
                        scrollEle.appendChild(ele_1);
                    }
                    scrollDiv.appendChild(scrollEle), ele.appendChild(scrollDiv), scrollDiv.style.overflowX = 'hidden', this.scrollEle = scrollDiv, this.scrollItems = scrollEle;
                }, HScroll.prototype.getPersistData = function() {
                    return this.addOnPersist([
                        'scrollStep'
                    ]);
                }, /**
     * Returns the current module name.
     *
     * @returns {string} - It returns the current module name.
     * @private
     */ HScroll.prototype.getModuleName = function() {
                    return 'hScroll';
                }, /**
     * Removes the control from the DOM and also removes all its related events.
     *
     * @returns {void}
     */ HScroll.prototype.destroy = function() {
                    var ele = this.element;
                    ele.style.display = '', ele.classList.remove('e-hscroll'), ele.classList.remove(CLS_DEVICE);
                    var nav = (0, ej2_base /* selectAll */ .td)('.e-' + ele.id + '_nav.' + CLS_HSCROLLNAV, ele), overlay = (0, ej2_base /* selectAll */ .td)('.' + CLS_OVERLAY, ele);
                    [].slice.call(overlay).forEach(function(ele) {
                        (0, ej2_base /* detach */ .og)(ele);
                    });
                    for(var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++){
                        var elem = _a[_i];
                        ele.appendChild(elem);
                    }
                    this.uniqueId && this.element.removeAttribute('id'), (0, ej2_base /* detach */ .og)(this.scrollEle), nav.length > 0 && ((0, ej2_base /* detach */ .og)(nav[0]), (0, ej2_base /* isNullOrUndefined */ .le)(nav[1]) || (0, ej2_base /* detach */ .og)(nav[1])), ej2_base /* EventHandler.remove */ .bi.remove(this.scrollEle, 'scroll', this.scrollHandler), this.touchModule.destroy(), this.touchModule = null, _super.prototype.destroy.call(this);
                }, /**
     * Specifies the value to disable/enable the HScroll component.
     * When set to `true` , the component will be disabled.
     *
     * @param  {boolean} value - Based on this Boolean value, HScroll will be enabled (false) or disabled (true).
     * @returns {void}.
     */ HScroll.prototype.disable = function(value) {
                    var navEles = (0, ej2_base /* selectAll */ .td)('.e-scroll-nav:not(.' + CLS_DISABLE + ')', this.element);
                    value ? this.element.classList.add(CLS_DISABLE) : this.element.classList.remove(CLS_DISABLE), [].slice.call(navEles).forEach(function(el) {
                        el.setAttribute('tabindex', value ? '-1' : '0');
                    });
                }, HScroll.prototype.createOverlay = function(element) {
                    var id = element.id.concat('_nav'), rightOverlayEle = this.createElement('div', {
                        className: CLS_OVERLAY + ' ' + CLS_RIGHTOVERLAY
                    }), clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT), rightEle = this.createElement('div', {
                        id: id.concat('_right'),
                        className: clsRight
                    }), navItem = this.createElement('div', {
                        className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons'
                    });
                    rightEle.appendChild(navItem);
                    var leftEle = this.createElement('div', {
                        className: CLS_OVERLAY + ' ' + CLS_LEFTOVERLAY
                    });
                    this.ieCheck && rightEle.classList.add('e-ie-align'), element.appendChild(rightOverlayEle), element.appendChild(rightEle), element.insertBefore(leftEle, element.firstChild), this.eventBinding([
                        rightEle
                    ]);
                }, HScroll.prototype.createNavIcon = function(element) {
                    var id = element.id.concat('_nav'), clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT), rightAttributes = {
                        role: 'button',
                        id: id.concat('_right'),
                        'aria-label': 'Scroll right'
                    }, nav = this.createElement('div', {
                        className: clsRight,
                        attrs: rightAttributes
                    });
                    nav.setAttribute('aria-disabled', 'false');
                    var navItem = this.createElement('div', {
                        className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons'
                    }), clsLeft = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVLEFT), leftAttributes = {
                        role: 'button',
                        id: id.concat('_left'),
                        'aria-label': 'Scroll left'
                    }, navEle = this.createElement('div', {
                        className: clsLeft + ' ' + CLS_DISABLE,
                        attrs: leftAttributes
                    });
                    navEle.setAttribute('aria-disabled', 'true');
                    var navLeftItem = this.createElement('div', {
                        className: CLS_NAVLEFTARROW + ' ' + CLS_NAVARROW + ' e-icons'
                    });
                    navEle.appendChild(navLeftItem), nav.appendChild(navItem), element.appendChild(nav), element.insertBefore(navEle, element.firstChild), this.ieCheck && (nav.classList.add('e-ie-align'), navEle.classList.add('e-ie-align')), this.eventBinding([
                        nav,
                        navEle
                    ]);
                }, HScroll.prototype.onKeyPress = function(e) {
                    var _this = this;
                    if ('Enter' === e.key) {
                        var timeoutFun_1 = function() {
                            _this.keyTimeout = !0, _this.eleScrolling(10, e.target, !0);
                        };
                        this.keyTimer = window.setTimeout(function() {
                            timeoutFun_1();
                        }, 100);
                    }
                }, HScroll.prototype.onKeyUp = function(e) {
                    'Enter' === e.key && (this.keyTimeout ? this.keyTimeout = !1 : e.target.click(), clearTimeout(this.keyTimer));
                }, HScroll.prototype.eventBinding = function(ele) {
                    var _this = this;
                    [].slice.call(ele).forEach(function(el) {
                        new ej2_base /* Touch */ .Xh(el, {
                            tapHold: _this.tabHoldHandler.bind(_this),
                            tapHoldThreshold: 500
                        }), el.addEventListener('keydown', _this.onKeyPress.bind(_this)), el.addEventListener('keyup', _this.onKeyUp.bind(_this)), el.addEventListener('mouseup', _this.repeatScroll.bind(_this)), el.addEventListener('touchend', _this.repeatScroll.bind(_this)), el.addEventListener('contextmenu', function(e) {
                            e.preventDefault();
                        }), ej2_base /* EventHandler.add */ .bi.add(el, 'click', _this.clickEventHandler, _this);
                    });
                }, HScroll.prototype.repeatScroll = function() {
                    clearInterval(this.timeout);
                }, HScroll.prototype.tabHoldHandler = function(e) {
                    var _this = this, trgt = e.originalEvent.target;
                    trgt = this.contains(trgt, CLS_HSCROLLNAV) ? trgt.firstElementChild : trgt;
                    var timeoutFun = function() {
                        _this.eleScrolling(10, trgt, !0);
                    };
                    this.timeout = window.setInterval(function() {
                        timeoutFun();
                    }, 50);
                }, HScroll.prototype.contains = function(ele, className) {
                    return ele.classList.contains(className);
                }, HScroll.prototype.eleScrolling = function(scrollDis, trgt, isContinuous) {
                    var rootEle = this.element, classList = trgt.classList;
                    classList.contains(CLS_HSCROLLNAV) && (classList = trgt.querySelector('.' + CLS_NAVARROW).classList), this.contains(rootEle, CLS_RTL) && this.browserCheck && (scrollDis = -scrollDis), !this.contains(rootEle, CLS_RTL) || this.browserCheck || this.ieCheck ? classList.contains(CLS_NAVRIGHTARROW) ? this.frameScrollRequest(scrollDis, 'add', isContinuous) : this.frameScrollRequest(scrollDis, '', isContinuous) : classList.contains(CLS_NAVLEFTARROW) ? this.frameScrollRequest(scrollDis, 'add', isContinuous) : this.frameScrollRequest(scrollDis, '', isContinuous);
                }, HScroll.prototype.clickEventHandler = function(e) {
                    this.eleScrolling(this.scrollStep, e.target, !1);
                }, HScroll.prototype.swipeHandler = function(e) {
                    var distance, swipeEle = this.scrollEle;
                    distance = e.velocity <= 1 ? e.distanceX / (10 * e.velocity) : e.distanceX / e.velocity;
                    var start = 0.5, animate = function() {
                        var step = Math.sin(start);
                        step <= 0 ? window.cancelAnimationFrame(step) : ('Left' === e.swipeDirection ? swipeEle.scrollLeft += distance * step : 'Right' === e.swipeDirection && (swipeEle.scrollLeft -= distance * step), start -= 0.5, window.requestAnimationFrame(animate));
                    };
                    animate();
                }, HScroll.prototype.scrollUpdating = function(scrollVal, action) {
                    'add' === action ? this.scrollEle.scrollLeft += scrollVal : this.scrollEle.scrollLeft -= scrollVal;
                }, HScroll.prototype.frameScrollRequest = function(scrollVal, action, isContinuous) {
                    var _this = this;
                    if (isContinuous) {
                        this.scrollUpdating(scrollVal, action);
                        return;
                    }
                    this.customStep || [].slice.call((0, ej2_base /* selectAll */ .td)('.' + CLS_OVERLAY, this.element)).forEach(function(el) {
                        scrollVal -= el.offsetWidth;
                    });
                    var animate = function() {
                        var scrollValue, scrollStep;
                        _this.contains(_this.element, CLS_RTL) && _this.browserCheck ? (scrollValue = -scrollVal, scrollStep = -10) : (scrollValue = scrollVal, scrollStep = 10), scrollValue < 10 ? window.cancelAnimationFrame(scrollStep) : (_this.scrollUpdating(scrollStep, action), scrollVal -= scrollStep, window.requestAnimationFrame(animate));
                    };
                    animate();
                }, HScroll.prototype.touchHandler = function(e) {
                    var ele = this.scrollEle, distance = e.distanceX;
                    this.ieCheck && this.contains(this.element, CLS_RTL) && (distance = -distance), 'Left' === e.scrollDirection ? ele.scrollLeft = ele.scrollLeft + distance : 'Right' === e.scrollDirection && (ele.scrollLeft = ele.scrollLeft - distance);
                }, HScroll.prototype.arrowDisabling = function(addDisable, removeDisable) {
                    if (this.isDevice) {
                        var arrowIcon = ((0, ej2_base /* isNullOrUndefined */ .le)(addDisable) ? removeDisable : addDisable).querySelector('.' + CLS_NAVARROW);
                        (0, ej2_base /* isNullOrUndefined */ .le)(addDisable) ? (0, ej2_base /* classList */ .s1)(arrowIcon, [
                            CLS_NAVRIGHTARROW
                        ], [
                            CLS_NAVLEFTARROW
                        ]) : (0, ej2_base /* classList */ .s1)(arrowIcon, [
                            CLS_NAVLEFTARROW
                        ], [
                            CLS_NAVRIGHTARROW
                        ]);
                    } else addDisable && removeDisable && (addDisable.classList.add(CLS_DISABLE), addDisable.setAttribute('aria-disabled', 'true'), addDisable.removeAttribute('tabindex'), removeDisable.classList.remove(CLS_DISABLE), removeDisable.setAttribute('aria-disabled', 'false'), removeDisable.setAttribute('tabindex', '0'));
                    this.repeatScroll();
                }, HScroll.prototype.scrollHandler = function(e) {
                    var target = e.target, width = target.offsetWidth;
                    this.element;
                    var navLeftEle = this.element.querySelector('.' + CLS_HSCROLLNAVLEFT), navRightEle = this.element.querySelector('.' + CLS_HSCROLLNAVRIGHT), leftOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY), rightOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY), scrollLeft = target.scrollLeft;
                    if (scrollLeft <= 0 && (scrollLeft = -scrollLeft), this.isDevice && (this.enableRtl && !(this.browserCheck || this.ieCheck) && (leftOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY), rightOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY)), scrollLeft < 40 ? leftOverlay.style.width = scrollLeft + 'px' : leftOverlay.style.width = '40px', target.scrollWidth - Math.ceil(width + scrollLeft) < 40 ? rightOverlay.style.width = target.scrollWidth - Math.ceil(width + scrollLeft) + 'px' : rightOverlay.style.width = '40px'), 0 === scrollLeft) this.arrowDisabling(navLeftEle, navRightEle);
                    else if (Math.ceil(width + scrollLeft + .1) >= target.scrollWidth) this.arrowDisabling(navRightEle, navLeftEle);
                    else {
                        var disEle = this.element.querySelector('.' + CLS_HSCROLLNAV + '.' + CLS_DISABLE);
                        disEle && (disEle.classList.remove(CLS_DISABLE), disEle.setAttribute('aria-disabled', 'false'), disEle.setAttribute('tabindex', '0'));
                    }
                }, /**
     * Gets called when the model property changes.The data that describes the old and new values of property that changed.
     *
     * @param  {HScrollModel} newProp - It contains the new value of data.
     * @param  {HScrollModel} oldProp - It contains the old value of data.
     * @returns {void}
     * @private
     */ HScroll.prototype.onPropertyChanged = function(newProp, oldProp) {
                    for(var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++)switch(_a[_i]){
                        case 'scrollStep':
                            this.setScrollState();
                            break;
                        case 'enableRtl':
                            newProp.enableRtl ? this.element.classList.add(CLS_RTL) : this.element.classList.remove(CLS_RTL);
                    }
                }, __decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], HScroll.prototype, "scrollStep", void 0), HScroll = __decorate([
                    ej2_base /* NotifyPropertyChanges */ .Zl
                ], HScroll);
            }(ej2_base /* Component */ .wA), v_scroll_extends = (extendStatics1 = function(d, b) {
                return (extendStatics1 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics1(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), v_scroll_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, v_scroll_CLS_RTL = 'e-rtl', v_scroll_CLS_DISABLE = 'e-overlay', v_scroll_CLS_NAVARROW = 'e-nav-arrow', CLS_NAVUPARROW = 'e-nav-up-arrow', CLS_NAVDOWNARROW = 'e-nav-down-arrow', CLS_VSCROLLNAV = 'e-scroll-nav', CLS_VSCROLLNAVUP = 'e-scroll-up-nav', CLS_VSCROLLNAVDOWN = 'e-scroll-down-nav', v_scroll_CLS_DEVICE = 'e-scroll-device', v_scroll_CLS_OVERLAY = 'e-scroll-overlay', CLS_UPOVERLAY = 'e-scroll-up-overlay', CLS_DOWNOVERLAY = 'e-scroll-down-overlay', VScroll = /** @class */ function(_super) {
                /**
     * Initializes a new instance of the VScroll class.
     *
     * @param {VScrollModel} options  - Specifies VScroll model properties as options.
     * @param {string | HTMLElement} element  - Specifies the element for which vertical scrolling applies.
     */ function VScroll(options, element) {
                    return _super.call(this, options, element) || this;
                }
                return v_scroll_extends(VScroll, _super), /**
     * Initialize the event handler
     *
     * @private
     * @returns {void}
     */ VScroll.prototype.preRender = function() {
                    this.browser = ej2_base /* Browser.info.name */ .AR.info.name, this.browserCheck = 'mozilla' === this.browser, this.isDevice = ej2_base /* Browser.isDevice */ .AR.isDevice, this.customStep = !0;
                    var ele = this.element;
                    this.ieCheck = 'edge' === this.browser || 'msie' === this.browser, this.initialize(), '' === ele.id && (ele.id = (0, ej2_base /* getUniqueID */ .QI)('vscroll'), this.uniqueId = !0), ele.style.display = 'block', this.enableRtl && ele.classList.add(v_scroll_CLS_RTL);
                }, /**
     * To Initialize the vertical scroll rendering
     *
     * @private
     * @returns {void}
     */ VScroll.prototype.render = function() {
                    this.touchModule = new ej2_base /* Touch */ .Xh(this.element, {
                        scroll: this.touchHandler.bind(this),
                        swipe: this.swipeHandler.bind(this)
                    }), ej2_base /* EventHandler.add */ .bi.add(this.scrollEle, 'scroll', this.scrollEventHandler, this), this.isDevice ? (this.element.classList.add(v_scroll_CLS_DEVICE), this.createOverlayElement(this.element)) : this.createNavIcon(this.element), this.setScrollState(), ej2_base /* EventHandler.add */ .bi.add(this.element, 'wheel', this.wheelEventHandler, this);
                }, VScroll.prototype.setScrollState = function() {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.scrollStep) || this.scrollStep < 0 ? (this.scrollStep = this.scrollEle.offsetHeight, this.customStep = !1) : this.customStep = !0;
                }, VScroll.prototype.initialize = function() {
                    var scrollCnt = (0, ej2_base /* createElement */ .az)('div', {
                        className: 'e-vscroll-content'
                    }), scrollBar = (0, ej2_base /* createElement */ .az)('div', {
                        className: 'e-vscroll-bar'
                    });
                    scrollBar.setAttribute('tabindex', '-1');
                    for(var ele = this.element, innerEle = [].slice.call(ele.children), _i = 0; _i < innerEle.length; _i++){
                        var ele_1 = innerEle[_i];
                        scrollCnt.appendChild(ele_1);
                    }
                    scrollBar.appendChild(scrollCnt), ele.appendChild(scrollBar), scrollBar.style.overflow = 'hidden', this.scrollEle = scrollBar, this.scrollItems = scrollCnt;
                }, VScroll.prototype.getPersistData = function() {
                    return this.addOnPersist([
                        'scrollStep'
                    ]);
                }, /**
     * Returns the current module name.
     *
     * @returns {string} - It returns the current module name.
     * @private
     */ VScroll.prototype.getModuleName = function() {
                    return 'vScroll';
                }, /**
     * Removes the control from the DOM and also removes all its related events.
     *
     * @returns {void}
     */ VScroll.prototype.destroy = function() {
                    var el = this.element;
                    el.style.display = '', (0, ej2_base /* removeClass */ .IV)([
                        this.element
                    ], [
                        'e-vscroll',
                        v_scroll_CLS_DEVICE
                    ]);
                    var navs = (0, ej2_base /* selectAll */ .td)('.e-' + el.id + '_nav.' + CLS_VSCROLLNAV, el), overlays = (0, ej2_base /* selectAll */ .td)('.' + v_scroll_CLS_OVERLAY, el);
                    [].slice.call(overlays).forEach(function(ele) {
                        (0, ej2_base /* detach */ .og)(ele);
                    });
                    for(var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++){
                        var elem = _a[_i];
                        el.appendChild(elem);
                    }
                    this.uniqueId && this.element.removeAttribute('id'), (0, ej2_base /* detach */ .og)(this.scrollEle), navs.length > 0 && ((0, ej2_base /* detach */ .og)(navs[0]), (0, ej2_base /* isNullOrUndefined */ .le)(navs[1]) || (0, ej2_base /* detach */ .og)(navs[1])), ej2_base /* EventHandler.remove */ .bi.remove(this.scrollEle, 'scroll', this.scrollEventHandler), this.touchModule.destroy(), this.touchModule = null, _super.prototype.destroy.call(this);
                }, /**
     * Specifies the value to disable/enable the VScroll component.
     * When set to `true` , the component will be disabled.
     *
     * @param  {boolean} value - Based on this Boolean value, VScroll will be enabled (false) or disabled (true).
     * @returns {void}.
     */ VScroll.prototype.disable = function(value) {
                    var navEle = (0, ej2_base /* selectAll */ .td)('.e-scroll-nav:not(.' + v_scroll_CLS_DISABLE + ')', this.element);
                    value ? this.element.classList.add(v_scroll_CLS_DISABLE) : this.element.classList.remove(v_scroll_CLS_DISABLE), [].slice.call(navEle).forEach(function(el) {
                        el.setAttribute('tabindex', value ? '-1' : '0');
                    });
                }, VScroll.prototype.createOverlayElement = function(element) {
                    var id = element.id.concat('_nav'), downOverlayEle = (0, ej2_base /* createElement */ .az)('div', {
                        className: v_scroll_CLS_OVERLAY + ' ' + CLS_DOWNOVERLAY
                    }), clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN), downEle = (0, ej2_base /* createElement */ .az)('div', {
                        id: id.concat('down'),
                        className: clsDown
                    }), navItem = (0, ej2_base /* createElement */ .az)('div', {
                        className: CLS_NAVDOWNARROW + ' ' + v_scroll_CLS_NAVARROW + ' e-icons'
                    });
                    downEle.appendChild(navItem);
                    var upEle = (0, ej2_base /* createElement */ .az)('div', {
                        className: v_scroll_CLS_OVERLAY + ' ' + CLS_UPOVERLAY
                    });
                    this.ieCheck && downEle.classList.add('e-ie-align'), element.appendChild(downOverlayEle), element.appendChild(downEle), element.insertBefore(upEle, element.firstChild), this.eventBinding([
                        downEle
                    ]);
                }, VScroll.prototype.createNavIcon = function(element) {
                    var id = element.id.concat('_nav'), clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN), nav = (0, ej2_base /* createElement */ .az)('div', {
                        id: id.concat('_down'),
                        className: clsDown
                    });
                    nav.setAttribute('aria-disabled', 'false');
                    var navItem = (0, ej2_base /* createElement */ .az)('div', {
                        className: CLS_NAVDOWNARROW + ' ' + v_scroll_CLS_NAVARROW + ' e-icons'
                    }), clsUp = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVUP), navElement = (0, ej2_base /* createElement */ .az)('div', {
                        id: id.concat('_up'),
                        className: clsUp + ' ' + v_scroll_CLS_DISABLE
                    });
                    navElement.setAttribute('aria-disabled', 'true');
                    var navUpItem = (0, ej2_base /* createElement */ .az)('div', {
                        className: CLS_NAVUPARROW + ' ' + v_scroll_CLS_NAVARROW + ' e-icons'
                    });
                    navElement.appendChild(navUpItem), nav.appendChild(navItem), nav.setAttribute('tabindex', '0'), element.appendChild(nav), element.insertBefore(navElement, element.firstChild), this.ieCheck && (nav.classList.add('e-ie-align'), navElement.classList.add('e-ie-align')), this.eventBinding([
                        nav,
                        navElement
                    ]);
                }, VScroll.prototype.onKeyPress = function(ev) {
                    var _this = this;
                    if ('Enter' === ev.key) {
                        var timeoutFun_1 = function() {
                            _this.keyTimeout = !0, _this.eleScrolling(10, ev.target, !0);
                        };
                        this.keyTimer = window.setTimeout(function() {
                            timeoutFun_1();
                        }, 100);
                    }
                }, VScroll.prototype.onKeyUp = function(ev) {
                    'Enter' === ev.key && (this.keyTimeout ? this.keyTimeout = !1 : ev.target.click(), clearTimeout(this.keyTimer));
                }, VScroll.prototype.eventBinding = function(element) {
                    var _this = this;
                    [].slice.call(element).forEach(function(ele) {
                        new ej2_base /* Touch */ .Xh(ele, {
                            tapHold: _this.tabHoldHandler.bind(_this),
                            tapHoldThreshold: 500
                        }), ele.addEventListener('keydown', _this.onKeyPress.bind(_this)), ele.addEventListener('keyup', _this.onKeyUp.bind(_this)), ele.addEventListener('mouseup', _this.repeatScroll.bind(_this)), ele.addEventListener('touchend', _this.repeatScroll.bind(_this)), ele.addEventListener('contextmenu', function(e) {
                            e.preventDefault();
                        }), ej2_base /* EventHandler.add */ .bi.add(ele, 'click', _this.clickEventHandler, _this);
                    });
                }, VScroll.prototype.repeatScroll = function() {
                    clearInterval(this.timeout);
                }, VScroll.prototype.tabHoldHandler = function(ev) {
                    var _this = this, trgt = ev.originalEvent.target;
                    trgt = this.contains(trgt, CLS_VSCROLLNAV) ? trgt.firstElementChild : trgt;
                    var timeoutFun = function() {
                        _this.eleScrolling(10, trgt, !0);
                    };
                    this.timeout = window.setInterval(function() {
                        timeoutFun();
                    }, 50);
                }, VScroll.prototype.contains = function(element, className) {
                    return element.classList.contains(className);
                }, VScroll.prototype.eleScrolling = function(scrollDis, trgt, isContinuous) {
                    var classList = trgt.classList;
                    classList.contains(CLS_VSCROLLNAV) && (classList = trgt.querySelector('.' + v_scroll_CLS_NAVARROW).classList), classList.contains(CLS_NAVDOWNARROW) ? this.frameScrollRequest(scrollDis, 'add', isContinuous) : classList.contains(CLS_NAVUPARROW) && this.frameScrollRequest(scrollDis, '', isContinuous);
                }, VScroll.prototype.clickEventHandler = function(event) {
                    this.eleScrolling(this.scrollStep, event.target, !1);
                }, VScroll.prototype.wheelEventHandler = function(e) {
                    e.preventDefault(), this.frameScrollRequest(this.scrollStep, e.deltaY > 0 ? 'add' : '', !1);
                }, VScroll.prototype.swipeHandler = function(e) {
                    var distance, swipeElement = this.scrollEle;
                    distance = e.velocity <= 1 ? e.distanceY / (10 * e.velocity) : e.distanceY / e.velocity;
                    var start = 0.5, animate = function() {
                        var step = Math.sin(start);
                        step <= 0 ? window.cancelAnimationFrame(step) : ('Up' === e.swipeDirection ? swipeElement.scrollTop += distance * step : 'Down' === e.swipeDirection && (swipeElement.scrollTop -= distance * step), start -= 0.02, window.requestAnimationFrame(animate));
                    };
                    animate();
                }, VScroll.prototype.scrollUpdating = function(scrollVal, action) {
                    'add' === action ? this.scrollEle.scrollTop += scrollVal : this.scrollEle.scrollTop -= scrollVal;
                }, VScroll.prototype.frameScrollRequest = function(scrollValue, action, isContinuous) {
                    var _this = this;
                    if (isContinuous) {
                        this.scrollUpdating(scrollValue, action);
                        return;
                    }
                    this.customStep || [].slice.call((0, ej2_base /* selectAll */ .td)('.' + v_scroll_CLS_OVERLAY, this.element)).forEach(function(el) {
                        scrollValue -= el.offsetHeight;
                    });
                    var animate = function() {
                        scrollValue < 10 ? window.cancelAnimationFrame(10) : (_this.scrollUpdating(10, action), scrollValue -= 10, window.requestAnimationFrame(animate));
                    };
                    animate();
                }, VScroll.prototype.touchHandler = function(e) {
                    var el = this.scrollEle, distance = e.distanceY;
                    'Up' === e.scrollDirection ? el.scrollTop = el.scrollTop + distance : 'Down' === e.scrollDirection && (el.scrollTop = el.scrollTop - distance);
                }, VScroll.prototype.arrowDisabling = function(addDisableCls, removeDisableCls) {
                    if (this.isDevice) {
                        var arrowIcon = ((0, ej2_base /* isNullOrUndefined */ .le)(addDisableCls) ? removeDisableCls : addDisableCls).querySelector('.' + v_scroll_CLS_NAVARROW);
                        (0, ej2_base /* isNullOrUndefined */ .le)(addDisableCls) ? (0, ej2_base /* classList */ .s1)(arrowIcon, [
                            CLS_NAVDOWNARROW
                        ], [
                            CLS_NAVUPARROW
                        ]) : (0, ej2_base /* classList */ .s1)(arrowIcon, [
                            CLS_NAVUPARROW
                        ], [
                            CLS_NAVDOWNARROW
                        ]);
                    } else addDisableCls.classList.add(v_scroll_CLS_DISABLE), addDisableCls.setAttribute('aria-disabled', 'true'), addDisableCls.removeAttribute('tabindex'), removeDisableCls.classList.remove(v_scroll_CLS_DISABLE), removeDisableCls.setAttribute('aria-disabled', 'false'), removeDisableCls.setAttribute('tabindex', '0');
                    this.repeatScroll();
                }, VScroll.prototype.scrollEventHandler = function(e) {
                    var target = e.target, height = target.offsetHeight, navUpEle = this.element.querySelector('.' + CLS_VSCROLLNAVUP), navDownEle = this.element.querySelector('.' + CLS_VSCROLLNAVDOWN), upOverlay = this.element.querySelector('.' + CLS_UPOVERLAY), downOverlay = this.element.querySelector('.' + CLS_DOWNOVERLAY), scrollTop = target.scrollTop;
                    if (scrollTop <= 0 && (scrollTop = -scrollTop), this.isDevice && (scrollTop < 40 ? upOverlay.style.height = scrollTop + 'px' : upOverlay.style.height = '40px', target.scrollHeight - Math.ceil(height + scrollTop) < 40 ? downOverlay.style.height = target.scrollHeight - Math.ceil(height + scrollTop) + 'px' : downOverlay.style.height = '40px'), 0 === scrollTop) this.arrowDisabling(navUpEle, navDownEle);
                    else if (Math.ceil(height + scrollTop + .1) >= target.scrollHeight) this.arrowDisabling(navDownEle, navUpEle);
                    else {
                        var disEle = this.element.querySelector('.' + CLS_VSCROLLNAV + '.' + v_scroll_CLS_DISABLE);
                        disEle && (disEle.classList.remove(v_scroll_CLS_DISABLE), disEle.setAttribute('aria-disabled', 'false'), disEle.setAttribute('tabindex', '0'));
                    }
                }, /**
     * Gets called when the model property changes.The data that describes the old and new values of property that changed.
     *
     * @param  {VScrollModel} newProp - It contains the new value of data.
     * @param  {VScrollModel} oldProp - It contains the old value of data.
     * @returns {void}
     * @private
     */ VScroll.prototype.onPropertyChanged = function(newProp, oldProp) {
                    for(var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++)switch(_a[_i]){
                        case 'scrollStep':
                            this.setScrollState();
                            break;
                        case 'enableRtl':
                            newProp.enableRtl ? this.element.classList.add(v_scroll_CLS_RTL) : this.element.classList.remove(v_scroll_CLS_RTL);
                    }
                }, v_scroll_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], VScroll.prototype, "scrollStep", void 0), VScroll = v_scroll_decorate([
                    ej2_base /* NotifyPropertyChanges */ .Zl
                ], VScroll);
            }(ej2_base /* Component */ .wA), toolbar_extends = (extendStatics2 = function(d, b) {
                return (extendStatics2 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics2(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), toolbar_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, CLS_VERTICAL = 'e-vertical', CLS_ITEMS = 'e-toolbar-items', CLS_ITEM = 'e-toolbar-item', toolbar_CLS_RTL = 'e-rtl', CLS_SEPARATOR = 'e-separator', CLS_POPUPICON = 'e-popup-up-icon', CLS_POPUPDOWN = 'e-popup-down-icon', CLS_POPUPOPEN = 'e-popup-open', CLS_TEMPLATE = 'e-template', toolbar_CLS_DISABLE = 'e-overlay', CLS_POPUPTEXT = 'e-toolbar-text', CLS_TBARTEXT = 'e-popup-text', CLS_TBAROVERFLOW = 'e-overflow-show', CLS_POPOVERFLOW = 'e-overflow-hide', CLS_TBARNAV = 'e-hor-nav', CLS_TBARSCRLNAV = 'e-scroll-nav', CLS_TBARCENTER = 'e-toolbar-center', CLS_TBARPOS = 'e-tbar-pos', toolbar_CLS_HSCROLLBAR = 'e-hscroll-bar', CLS_POPUPCLASS = 'e-toolbar-pop', CLS_POPUP = 'e-toolbar-popup', CLS_TBARNAVACT = 'e-nav-active', CLS_TBARIGNORE = 'e-ignore', CLS_POPPRI = 'e-popup-alone', CLS_HIDDEN = 'e-hidden', CLS_MULTIROW = 'e-toolbar-multirow', CLS_MULTIROWPOS = 'e-multirow-pos', CLS_MULTIROW_SEPARATOR = 'e-multirow-separator', CLS_EXTENDABLE_SEPARATOR = 'e-extended-separator', CLS_EXTEANDABLE_TOOLBAR = 'e-extended-toolbar', CLS_EXTENDABLECLASS = 'e-toolbar-extended', CLS_EXTENDEDPOPOPEN = 'e-tbar-extended', Item = /** @class */ function(_super) {
                function Item() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return toolbar_extends(Item, _super), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Item.prototype, "id", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Item.prototype, "text", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('auto')
                ], Item.prototype, "width", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Item.prototype, "cssClass", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Item.prototype, "showAlwaysInPopup", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Item.prototype, "disabled", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Item.prototype, "prefixIcon", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Item.prototype, "suffixIcon", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], Item.prototype, "visible", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('None')
                ], Item.prototype, "overflow", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Item.prototype, "template", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('Button')
                ], Item.prototype, "type", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('Both')
                ], Item.prototype, "showTextOn", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], Item.prototype, "htmlAttributes", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Item.prototype, "tooltipText", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('Left')
                ], Item.prototype, "align", void 0), toolbar_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Item.prototype, "click", void 0), Item;
            }(ej2_base /* ChildProperty */ .rt), Toolbar = /** @class */ function(_super) {
                /**
     * Initializes a new instance of the Toolbar class.
     *
     * @param {ToolbarModel} options  - Specifies Toolbar model properties as options.
     * @param { string | HTMLElement} element  - Specifies the element that is rendered as a Toolbar.
     */ function Toolbar(options, element) {
                    var _this = _super.call(this, options, element) || this;
                    return _this.resizeContext = _this.resize.bind(_this), /**
         * Contains the keyboard configuration of the Toolbar.
         */ _this.keyConfigs = {
                        moveLeft: 'leftarrow',
                        moveRight: 'rightarrow',
                        moveUp: 'uparrow',
                        moveDown: 'downarrow',
                        popupOpen: 'enter',
                        popupClose: 'escape',
                        tab: 'tab',
                        home: 'home',
                        end: 'end'
                    }, _this;
                }
                return toolbar_extends(Toolbar, _super), /**
     * Removes the control from the DOM and also removes all its related events.
     *
     * @returns {void}.
     */ Toolbar.prototype.destroy = function() {
                    var _this = this;
                    (this.isReact || this.isAngular) && this.clearTemplate();
                    var btnItems = this.element.querySelectorAll('.e-control.e-btn');
                    for([].slice.call(btnItems).forEach(function(el) {
                        (0, ej2_base /* isNullOrUndefined */ .le)(el) || (0, ej2_base /* isNullOrUndefined */ .le)(el.ej2_instances) || (0, ej2_base /* isNullOrUndefined */ .le)(el.ej2_instances[0]) || el.ej2_instances[0].isDestroyed || el.ej2_instances[0].destroy();
                    }), this.unwireEvents(), this.tempId.forEach(function(ele) {
                        (0, ej2_base /* isNullOrUndefined */ .le)(_this.element.querySelector(ele)) || (document.body.appendChild(_this.element.querySelector(ele)).style.display = 'none');
                    }), this.destroyItems(); this.element.lastElementChild;)this.element.removeChild(this.element.lastElementChild);
                    this.trgtEle && (this.element.appendChild(this.ctrlTem), this.trgtEle = null, this.ctrlTem = null), this.popObj && (this.popObj.destroy(), (0, ej2_base /* detach */ .og)(this.popObj.element)), this.activeEle && (this.activeEle = null), this.popObj = null, this.tbarAlign = null, this.tbarItemsCol = [], this.remove(this.element, 'e-toolpop'), this.cssClass && (0, ej2_base /* removeClass */ .IV)([
                        this.element
                    ], this.cssClass.split(' ')), this.element.removeAttribute('style'), [
                        'aria-disabled',
                        'aria-orientation',
                        'aria-haspopup',
                        'role'
                    ].forEach(function(attrb) {
                        return _this.element.removeAttribute(attrb);
                    }), _super.prototype.destroy.call(this);
                }, /**
     * Initialize the event handler
     *
     * @private
     * @returns {void}
     */ Toolbar.prototype.preRender = function() {
                    var eventArgs = {
                        enableCollision: this.enableCollision,
                        scrollStep: this.scrollStep
                    };
                    this.trigger('beforeCreate', eventArgs), this.enableCollision = eventArgs.enableCollision, this.scrollStep = eventArgs.scrollStep, this.scrollModule = null, this.popObj = null, this.tempId = [], this.tbarItemsCol = this.items, this.isVertical = !!this.element.classList.contains(CLS_VERTICAL), this.isExtendedOpen = !1, this.popupPriCount = 0, this.enableRtl && this.add(this.element, toolbar_CLS_RTL);
                }, Toolbar.prototype.wireEvents = function() {
                    ej2_base /* EventHandler.add */ .bi.add(this.element, 'click', this.clickHandler, this), window.addEventListener('resize', this.resizeContext), this.allowKeyboard && this.wireKeyboardEvent();
                }, Toolbar.prototype.wireKeyboardEvent = function() {
                    this.keyModule = new ej2_base /* KeyboardEvents */ .nv(this.element, {
                        keyAction: this.keyActionHandler.bind(this),
                        keyConfigs: this.keyConfigs
                    }), ej2_base /* EventHandler.add */ .bi.add(this.element, 'keydown', this.docKeyDown, this), this.element.setAttribute('tabIndex', '0');
                }, Toolbar.prototype.unwireKeyboardEvent = function() {
                    this.keyModule && (ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'keydown', this.docKeyDown), this.keyModule.destroy(), this.keyModule = null);
                }, Toolbar.prototype.docKeyDown = function(e) {
                    if ('INPUT' !== e.target.tagName) {
                        var popCheck = !(0, ej2_base /* isNullOrUndefined */ .le)(this.popObj) && (0, ej2_base /* isVisible */ .pn)(this.popObj.element) && 'Extended' !== this.overflowMode;
                        9 === e.keyCode && !0 === e.target.classList.contains('e-hor-nav') && popCheck && this.popObj.hide({
                            name: 'FadeOut',
                            duration: 100
                        }), (40 === e.keyCode || 38 === e.keyCode || 35 === e.keyCode || 36 === e.keyCode) && e.preventDefault();
                    }
                }, Toolbar.prototype.unwireEvents = function() {
                    ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'click', this.clickHandler), this.destroyScroll(), this.unwireKeyboardEvent(), window.removeEventListener('resize', this.resizeContext), ej2_base /* EventHandler.remove */ .bi.remove(document, 'scroll', this.docEvent), ej2_base /* EventHandler.remove */ .bi.remove(document, 'click', this.docEvent);
                }, Toolbar.prototype.clearProperty = function() {
                    this.tbarEle = [], this.tbarAlgEle = {
                        lefts: [],
                        centers: [],
                        rights: []
                    };
                }, Toolbar.prototype.docEvent = function(e) {
                    var popEle = (0, ej2_base /* closest */ .oq)(e.target, '.e-popup');
                    this.popObj && (0, ej2_base /* isVisible */ .pn)(this.popObj.element) && !popEle && 'Popup' === this.overflowMode && this.popObj.hide({
                        name: 'FadeOut',
                        duration: 100
                    });
                }, Toolbar.prototype.destroyScroll = function() {
                    this.scrollModule && (this.tbarAlign && this.add(this.scrollModule.element, CLS_TBARPOS), this.scrollModule.destroy(), this.scrollModule = null);
                }, Toolbar.prototype.destroyItems = function() {
                    if (this.element && [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM)).forEach(function(el) {
                        (0, ej2_base /* detach */ .og)(el);
                    }), this.tbarAlign) {
                        var tbarItems = this.element.querySelector('.' + CLS_ITEMS);
                        [].slice.call(tbarItems.children).forEach(function(el) {
                            (0, ej2_base /* detach */ .og)(el);
                        }), this.tbarAlign = !1, this.remove(tbarItems, CLS_TBARPOS);
                    }
                    this.clearProperty();
                }, Toolbar.prototype.destroyMode = function() {
                    this.scrollModule && (this.remove(this.scrollModule.element, toolbar_CLS_RTL), this.destroyScroll()), this.remove(this.element, CLS_EXTENDEDPOPOPEN), this.remove(this.element, CLS_EXTEANDABLE_TOOLBAR);
                    var tempEle = this.element.querySelector('.e-toolbar-multirow');
                    tempEle && this.remove(tempEle, CLS_MULTIROW), this.popObj && this.popupRefresh(this.popObj.element, !0);
                }, Toolbar.prototype.add = function(ele, val) {
                    ele.classList.add(val);
                }, Toolbar.prototype.remove = function(ele, val) {
                    ele.classList.remove(val);
                }, Toolbar.prototype.elementFocus = function(ele) {
                    var fChild = ele.firstElementChild;
                    fChild ? (fChild.focus(), this.activeEleSwitch(ele)) : ele.focus();
                }, Toolbar.prototype.clstElement = function(tbrNavChk, trgt) {
                    return tbrNavChk && this.popObj && (0, ej2_base /* isVisible */ .pn)(this.popObj.element) ? this.popObj.element.querySelector('.' + CLS_ITEM) : this.element === trgt || tbrNavChk ? this.element.querySelector('.' + CLS_ITEM + ':not(.' + toolbar_CLS_DISABLE + ' ):not(.' + CLS_SEPARATOR + ' ):not(.' + CLS_HIDDEN + ' )') : (0, ej2_base /* closest */ .oq)(trgt, '.' + CLS_ITEM);
                }, Toolbar.prototype.keyHandling = function(clst, e, trgt, navChk, scrollChk) {
                    var ele, nodes, popObj = this.popObj, rootEle = this.element, popAnimate = {
                        name: 'FadeOut',
                        duration: 100
                    }, value = 'moveUp' === e.action ? 'previous' : 'next';
                    switch(e.action){
                        case 'moveRight':
                            if (this.isVertical) return;
                            rootEle === trgt ? this.elementFocus(clst) : navChk || this.eleFocus(clst, 'next');
                            break;
                        case 'moveLeft':
                            if (this.isVertical) return;
                            navChk || this.eleFocus(clst, 'previous');
                            break;
                        case 'home':
                        case 'end':
                            if (clst) {
                                var popupCheck = (0, ej2_base /* closest */ .oq)(clst, '.e-popup'), extendedPopup = this.element.querySelector('.' + CLS_EXTENDABLECLASS);
                                'Extended' === this.overflowMode && extendedPopup && extendedPopup.classList.contains('e-popup-open') && (popupCheck = 'end' === e.action ? extendedPopup : null), popupCheck ? (0, ej2_base /* isVisible */ .pn)(this.popObj.element) && (nodes = [].slice.call(popupCheck.children), ele = 'home' === e.action ? nodes[0] : nodes[nodes.length - 1]) : (nodes = this.element.querySelectorAll('.' + CLS_ITEMS + ' .' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + ')'), ele = 'home' === e.action ? nodes[0] : nodes[nodes.length - 1]), ele && this.elementFocus(ele);
                            }
                            break;
                        case 'moveUp':
                        case 'moveDown':
                            if (this.isVertical) 'moveUp' === e.action ? this.eleFocus(clst, 'previous') : this.eleFocus(clst, 'next');
                            else if (popObj && (0, ej2_base /* closest */ .oq)(trgt, '.e-popup')) {
                                var popEle = popObj.element, popFrstEle = popEle.firstElementChild;
                                if ('previous' === value && popFrstEle === clst || 'next' === value && popEle.lastElementChild === clst) return;
                                this.eleFocus(clst, value);
                            } else 'moveDown' === e.action && popObj && (0, ej2_base /* isVisible */ .pn)(popObj.element) && this.elementFocus(clst);
                            break;
                        case 'tab':
                            if (!scrollChk && !navChk) {
                                var ele_1 = clst.firstElementChild;
                                rootEle === trgt && (this.activeEle ? this.activeEle.focus() : (this.activeEleRemove(ele_1), ele_1.focus()), this.element.removeAttribute('tabindex'));
                            }
                            break;
                        case 'popupClose':
                            popObj && 'Extended' !== this.overflowMode && popObj.hide(popAnimate);
                            break;
                        case 'popupOpen':
                            if (!navChk) return;
                            popObj && !(0, ej2_base /* isVisible */ .pn)(popObj.element) ? (popObj.element.style.top = rootEle.offsetHeight + 'px', popObj.show({
                                name: 'FadeIn',
                                duration: 100
                            })) : popObj.hide(popAnimate);
                    }
                }, Toolbar.prototype.keyActionHandler = function(e) {
                    var trgt = e.target;
                    if (!('INPUT' === trgt.tagName || 'TEXTAREA' === trgt.tagName || this.element.classList.contains(toolbar_CLS_DISABLE))) {
                        e.preventDefault();
                        var tbrNavChk = trgt.classList.contains(CLS_TBARNAV), tbarScrollChk = trgt.classList.contains(CLS_TBARSCRLNAV), clst = this.clstElement(tbrNavChk, trgt);
                        (clst || tbarScrollChk) && this.keyHandling(clst, e, trgt, tbrNavChk, tbarScrollChk);
                    }
                }, /**
     * Specifies the value to disable/enable the Toolbar component.
     * When set to `true`, the component will be disabled.
     *
     * @param  {boolean} value - Based on this Boolean value, Toolbar will be enabled (false) or disabled (true).
     * @returns {void}.
     */ Toolbar.prototype.disable = function(value) {
                    var rootEle = this.element;
                    value ? rootEle.classList.add(toolbar_CLS_DISABLE) : rootEle.classList.remove(toolbar_CLS_DISABLE), rootEle.setAttribute('tabindex', value ? '-1' : '0'), this.activeEle && this.activeEle.setAttribute('tabindex', value ? '-1' : '0'), this.scrollModule && this.scrollModule.disable(value), this.popObj && ((0, ej2_base /* isVisible */ .pn)(this.popObj.element) && 'Extended' !== this.overflowMode && this.popObj.hide(), rootEle.querySelector('#' + rootEle.id + '_nav').setAttribute('tabindex', value ? '-1' : '0'));
                }, Toolbar.prototype.eleContains = function(el) {
                    return el.classList.contains(CLS_SEPARATOR) || el.classList.contains(toolbar_CLS_DISABLE) || el.getAttribute('disabled') || el.classList.contains(CLS_HIDDEN) || !(0, ej2_base /* isVisible */ .pn)(el);
                }, Toolbar.prototype.eleFocus = function(closest, pos) {
                    var sib = Object(closest)[pos + 'ElementSibling'];
                    if (sib) {
                        if (this.eleContains(sib)) {
                            this.eleFocus(sib, pos);
                            return;
                        }
                        this.elementFocus(sib);
                    } else if (this.tbarAlign) {
                        var elem = Object(closest.parentElement)[pos + 'ElementSibling'];
                        if ((0, ej2_base /* isNullOrUndefined */ .le)(elem) || 0 !== elem.children.length || (elem = Object(elem)[pos + 'ElementSibling']), !(0, ej2_base /* isNullOrUndefined */ .le)(elem) && elem.children.length > 0) {
                            if ('next' === pos) {
                                var el = elem.querySelector('.' + CLS_ITEM);
                                this.eleContains(el) ? this.eleFocus(el, pos) : (el.firstElementChild.focus(), this.activeEleSwitch(el));
                            } else {
                                var el = elem.lastElementChild;
                                this.eleContains(el) ? this.eleFocus(el, pos) : this.elementFocus(el);
                            }
                        }
                    }
                }, Toolbar.prototype.clickHandler = function(e) {
                    var itemObj, _this = this, trgt = e.target, ele = this.element, isPopupElement = !(0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(trgt, '.' + CLS_POPUPCLASS)), clsList = trgt.classList, popupNav = (0, ej2_base /* closest */ .oq)(trgt, '.' + CLS_TBARNAV);
                    popupNav || (popupNav = trgt), !ele.children[0].classList.contains('e-hscroll') && !ele.children[0].classList.contains('e-vscroll') && clsList.contains(CLS_TBARNAV) && (clsList = trgt.querySelector('.e-icons').classList), (clsList.contains(CLS_POPUPICON) || clsList.contains(CLS_POPUPDOWN)) && this.popupClickHandler(ele, popupNav, toolbar_CLS_RTL);
                    var clst = (0, ej2_base /* closest */ .oq)(e.target, '.' + CLS_ITEM);
                    if (!((0, ej2_base /* isNullOrUndefined */ .le)(clst) || clst.classList.contains(toolbar_CLS_DISABLE)) || popupNav.classList.contains(CLS_TBARNAV)) {
                        clst && (itemObj = this.items[this.tbarEle.indexOf(clst)]);
                        var eventArgs = {
                            originalEvent: e,
                            item: itemObj
                        };
                        itemObj && !(0, ej2_base /* isNullOrUndefined */ .le)(itemObj.click) && this.trigger('items[' + this.tbarEle.indexOf(clst) + '].click', eventArgs), eventArgs.cancel || this.trigger('clicked', eventArgs, function(clickedArgs) {
                            !(0, ej2_base /* isNullOrUndefined */ .le)(_this.popObj) && isPopupElement && !clickedArgs.cancel && 'Popup' === _this.overflowMode && clickedArgs.item && 'Input' !== clickedArgs.item.type && _this.popObj.hide({
                                name: 'FadeOut',
                                duration: 100
                            });
                        });
                    }
                }, Toolbar.prototype.popupClickHandler = function(ele, popupNav, CLS_RTL) {
                    var popObj = this.popObj;
                    (0, ej2_base /* isVisible */ .pn)(popObj.element) ? (popupNav.classList.remove(CLS_TBARNAVACT), popObj.hide({
                        name: 'FadeOut',
                        duration: 100
                    })) : (ele.classList.contains(CLS_RTL) && (popObj.enableRtl = !0, popObj.position = {
                        X: 'left',
                        Y: 'top'
                    }), 0 !== popObj.offsetX || ele.classList.contains(CLS_RTL) || (popObj.enableRtl = !1, popObj.position = {
                        X: 'right',
                        Y: 'top'
                    }), popObj.dataBind(), popObj.refreshPosition(), popObj.element.style.top = this.getElementOffsetY() + 'px', 'Extended' === this.overflowMode && (popObj.element.style.minHeight = '0px'), popupNav.classList.add(CLS_TBARNAVACT), popObj.show({
                        name: 'FadeIn',
                        duration: 100
                    }));
                }, /**
     * To Initialize the control rendering
     *
     * @private
     * @returns {void}
     */ Toolbar.prototype.render = function() {
                    this.initialize(), this.renderControl(), this.wireEvents(), this.renderComplete();
                }, Toolbar.prototype.initialize = function() {
                    var width = (0, ej2_base /* formatUnit */ .Ac)(this.width), height = (0, ej2_base /* formatUnit */ .Ac)(this.height);
                    ('msie' !== ej2_base /* Browser.info.name */ .AR.info.name || 'auto' !== this.height || 'MultiRow' === this.overflowMode) && (0, ej2_base /* setStyleAttribute */ .V7)(this.element, {
                        height: height
                    }), (0, ej2_base /* setStyleAttribute */ .V7)(this.element, {
                        width: width
                    });
                    var ariaAttr = {
                        role: 'toolbar',
                        'aria-disabled': 'false',
                        'aria-haspopup': 'false',
                        'aria-orientation': this.isVertical ? 'vertical' : 'horizontal'
                    };
                    (0, ej2_base /* attributes */ .Y4)(this.element, ariaAttr), this.cssClass && (0, ej2_base /* addClass */ .cn)([
                        this.element
                    ], this.cssClass.split(' '));
                }, Toolbar.prototype.renderControl = function() {
                    var ele = this.element;
                    this.trgtEle = ele.children.length > 0 ? ele.querySelector('div') : null, this.tbarAlgEle = {
                        lefts: [],
                        centers: [],
                        rights: []
                    }, this.renderItems(), this.renderLayout();
                }, Toolbar.prototype.renderLayout = function() {
                    this.renderOverflowMode(), this.tbarAlign && this.itemPositioning(), this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(this.element, this.popObj.element) && this.popupRefresh(this.popObj.element, !1), this.separator();
                }, Toolbar.prototype.itemsAlign = function(items, itemEleDom) {
                    this.tbarEle || (this.tbarEle = []);
                    for(var innerItem, innerPos, i = 0; i < items.length; i++)innerItem = this.renderSubComponent(items[i], i), -1 === this.tbarEle.indexOf(innerItem) && this.tbarEle.push(innerItem), this.tbarAlign || this.tbarItemAlign(items[i], itemEleDom, i), (innerPos = itemEleDom.querySelector('.e-toolbar-' + items[i].align.toLowerCase())) ? (items[i].showAlwaysInPopup && 'Show' !== items[i].overflow || this.tbarAlgEle[(items[i].align + 's').toLowerCase()].push(innerItem), innerPos.appendChild(innerItem)) : itemEleDom.appendChild(innerItem);
                    this.isReact && (this.notify('render-react-toolbar-template', this.portals), this.renderReactTemplates());
                }, /**
     * @hidden
     * @returns {void}
     */ Toolbar.prototype.changeOrientation = function() {
                    var ele = this.element;
                    this.isVertical ? (ele.classList.remove(CLS_VERTICAL), this.isVertical = !1, ('auto' === this.height || '100%' === this.height) && (ele.style.height = this.height), ele.setAttribute('aria-orientation', 'horizontal')) : (ele.classList.add(CLS_VERTICAL), this.isVertical = !0, ele.setAttribute('aria-orientation', 'vertical'), (0, ej2_base /* setStyleAttribute */ .V7)(this.element, {
                        height: (0, ej2_base /* formatUnit */ .Ac)(this.height),
                        width: (0, ej2_base /* formatUnit */ .Ac)(this.width)
                    })), this.destroyMode(), this.refreshOverflow();
                }, Toolbar.prototype.initScroll = function(element, innerItems) {
                    !this.scrollModule && this.checkOverflow(element, innerItems[0]) && (this.tbarAlign && this.element.querySelector('.' + CLS_ITEMS + ' .' + CLS_TBARCENTER).removeAttribute('style'), this.isVertical ? this.scrollModule = new VScroll({
                        scrollStep: this.scrollStep,
                        enableRtl: this.enableRtl
                    }, innerItems[0]) : this.scrollModule = new HScroll({
                        scrollStep: this.scrollStep,
                        enableRtl: this.enableRtl
                    }, innerItems[0]), this.cssClass && (0, ej2_base /* addClass */ .cn)([
                        innerItems[0]
                    ], this.cssClass.split(' ')), this.remove(this.scrollModule.element, CLS_TBARPOS), (0, ej2_base /* setStyleAttribute */ .V7)(this.element, {
                        overflow: 'hidden'
                    }));
                }, Toolbar.prototype.itemWidthCal = function(items) {
                    var style, _this = this, width = 0;
                    return [].slice.call((0, ej2_base /* selectAll */ .td)('.' + CLS_ITEM, items)).forEach(function(el) {
                        (0, ej2_base /* isVisible */ .pn)(el) && (style = window.getComputedStyle(el), width += (_this.isVertical ? el.offsetHeight : el.offsetWidth) + parseFloat(_this.isVertical ? style.marginTop : style.marginRight) + parseFloat(_this.isVertical ? style.marginBottom : style.marginLeft));
                    }), width;
                }, Toolbar.prototype.getScrollCntEle = function(innerItem) {
                    var trgClass = this.isVertical ? '.e-vscroll-content' : '.e-hscroll-content';
                    return innerItem.querySelector(trgClass);
                }, Toolbar.prototype.checkOverflow = function(element, innerItem) {
                    if ((0, ej2_base /* isNullOrUndefined */ .le)(element) || (0, ej2_base /* isNullOrUndefined */ .le)(innerItem) || !(0, ej2_base /* isVisible */ .pn)(element)) return !1;
                    var eleWidth = this.isVertical ? element.offsetHeight : element.offsetWidth, itemWidth = this.isVertical ? innerItem.offsetHeight : innerItem.offsetWidth;
                    (this.tbarAlign || this.scrollModule || eleWidth === itemWidth) && (itemWidth = this.itemWidthCal(this.scrollModule ? this.getScrollCntEle(innerItem) : innerItem));
                    var popNav = element.querySelector('.' + CLS_TBARNAV), scrollNav = element.querySelector('.' + CLS_TBARSCRLNAV), navEleWidth = 0;
                    return popNav ? navEleWidth = this.isVertical ? popNav.offsetHeight : popNav.offsetWidth : scrollNav && (navEleWidth = this.isVertical ? 2 * scrollNav.offsetHeight : 2 * scrollNav.offsetWidth), itemWidth > eleWidth - navEleWidth;
                }, /**
     * Refresh the whole Toolbar component without re-rendering.
     * - It is used to manually refresh the Toolbar overflow modes such as scrollable, popup, multi row, and extended.
     * - It will refresh the Toolbar component after loading items dynamically.
     *
     * @returns {void}.
     */ Toolbar.prototype.refreshOverflow = function() {
                    this.resize();
                }, Toolbar.prototype.toolbarAlign = function(innerItems) {
                    this.tbarAlign && (this.add(innerItems, CLS_TBARPOS), this.itemPositioning());
                }, Toolbar.prototype.renderOverflowMode = function() {
                    var ele = this.element, innerItems = ele.querySelector('.' + CLS_ITEMS), priorityCheck = this.popupPriCount > 0;
                    if (ele && ele.children.length > 0) switch(this.offsetWid = ele.offsetWidth, this.remove(this.element, 'e-toolpop'), 'msie' === ej2_base /* Browser.info.name */ .AR.info.name && 'auto' === this.height && (ele.style.height = ''), this.overflowMode){
                        case 'Scrollable':
                            (0, ej2_base /* isNullOrUndefined */ .le)(this.scrollModule) && this.initScroll(ele, [].slice.call(ele.getElementsByClassName(CLS_ITEMS)));
                            break;
                        case 'Popup':
                            this.add(this.element, 'e-toolpop'), this.tbarAlign && this.removePositioning(), (this.checkOverflow(ele, innerItems) || priorityCheck) && this.setOverflowAttributes(ele), this.toolbarAlign(innerItems);
                            break;
                        case 'MultiRow':
                            this.add(innerItems, CLS_MULTIROW), this.checkOverflow(ele, innerItems) && this.tbarAlign && (this.removePositioning(), this.add(innerItems, CLS_MULTIROWPOS)), 'hidden' === ele.style.overflow && (ele.style.overflow = ''), ('msie' === ej2_base /* Browser.info.name */ .AR.info.name || 'auto' !== ele.style.height) && (ele.style.height = 'auto');
                            break;
                        case 'Extended':
                            this.add(this.element, CLS_EXTEANDABLE_TOOLBAR), (this.checkOverflow(ele, innerItems) || priorityCheck) && (this.tbarAlign && this.removePositioning(), this.setOverflowAttributes(ele)), this.toolbarAlign(innerItems);
                    }
                }, Toolbar.prototype.setOverflowAttributes = function(ele) {
                    this.createPopupEle(ele, [].slice.call((0, ej2_base /* selectAll */ .td)('.' + CLS_ITEMS + ' .' + CLS_ITEM, ele))), this.element.querySelector('.' + CLS_TBARNAV).setAttribute('tabIndex', '0'), this.element.querySelector('.' + CLS_TBARNAV).setAttribute('role', 'list');
                }, Toolbar.prototype.separator = function() {
                    var element = this.element, eleItem = [].slice.call(element.querySelectorAll('.' + CLS_SEPARATOR)), multiVar = element.querySelector('.' + CLS_MULTIROW_SEPARATOR), extendVar = element.querySelector('.' + CLS_EXTENDABLE_SEPARATOR), eleInlineItem = 'MultiRow' === this.overflowMode ? multiVar : extendVar;
                    null !== eleInlineItem && ('MultiRow' === this.overflowMode ? eleInlineItem.classList.remove(CLS_MULTIROW_SEPARATOR) : 'Extended' === this.overflowMode && eleInlineItem.classList.remove(CLS_EXTENDABLE_SEPARATOR));
                    for(var i = 0; i <= eleItem.length - 1; i++)eleItem[i].offsetLeft < 30 && 0 !== eleItem[i].offsetLeft && ('MultiRow' === this.overflowMode ? eleItem[i].classList.add(CLS_MULTIROW_SEPARATOR) : 'Extended' === this.overflowMode && eleItem[i].classList.add(CLS_EXTENDABLE_SEPARATOR));
                }, Toolbar.prototype.createPopupEle = function(ele, innerEle) {
                    var innerNav = ele.querySelector('.' + CLS_TBARNAV), vertical = this.isVertical;
                    innerNav || this.createPopupIcon(ele), innerNav = ele.querySelector('.' + CLS_TBARNAV);
                    var innerNavDom = vertical ? innerNav.offsetHeight : innerNav.offsetWidth, eleWidth = (vertical ? ele.offsetHeight : ele.offsetWidth) - innerNavDom;
                    this.element.classList.remove('e-rtl'), (0, ej2_base /* setStyleAttribute */ .V7)(this.element, {
                        direction: 'initial'
                    }), this.checkPriority(ele, innerEle, eleWidth, !0), this.enableRtl && this.element.classList.add('e-rtl'), this.element.style.removeProperty('direction'), this.createPopup();
                }, Toolbar.prototype.pushingPoppedEle = function(tbarObj, popupPri, ele, eleHeight, sepHeight) {
                    var element = tbarObj.element, poppedEle = [].slice.call((0, ej2_base /* selectAll */ .td)('.' + CLS_POPUP, element.querySelector('.' + CLS_ITEMS))), nodes = (0, ej2_base /* selectAll */ .td)('.' + CLS_TBAROVERFLOW, ele), nodeIndex = 0, nodePri = 0;
                    poppedEle.forEach(function(el, index) {
                        nodes = (0, ej2_base /* selectAll */ .td)('.' + CLS_TBAROVERFLOW, ele), el.classList.contains(CLS_TBAROVERFLOW) && nodes.length > 0 ? (tbarObj.tbResize && nodes.length > index ? ele.insertBefore(el, nodes[index]) : ele.insertBefore(el, ele.children[nodes.length]), ++nodePri) : el.classList.contains(CLS_TBAROVERFLOW) ? (ele.insertBefore(el, ele.firstChild), ++nodePri) : tbarObj.tbResize && el.classList.contains(CLS_POPOVERFLOW) && ele.children.length > 0 && 0 === nodes.length ? (ele.insertBefore(el, ele.firstChild), ++nodePri) : el.classList.contains(CLS_POPOVERFLOW) ? popupPri.push(el) : tbarObj.tbResize ? (ele.insertBefore(el, ele.childNodes[nodeIndex + nodePri]), ++nodeIndex) : ele.appendChild(el), el.classList.contains(CLS_SEPARATOR) ? (0, ej2_base /* setStyleAttribute */ .V7)(el, {
                            display: '',
                            height: sepHeight + 'px'
                        }) : (0, ej2_base /* setStyleAttribute */ .V7)(el, {
                            display: '',
                            height: eleHeight + 'px'
                        });
                    }), popupPri.forEach(function(el) {
                        ele.appendChild(el);
                    });
                    for(var tbarEle = (0, ej2_base /* selectAll */ .td)('.' + CLS_ITEM, element.querySelector('.' + CLS_ITEMS)), i = tbarEle.length - 1; i >= 0; i--){
                        var tbarElement = tbarEle[i];
                        if (tbarElement.classList.contains(CLS_SEPARATOR) && 'Extended' !== this.overflowMode) (0, ej2_base /* setStyleAttribute */ .V7)(tbarElement, {
                            display: 'none'
                        });
                        else break;
                    }
                }, Toolbar.prototype.createPopup = function() {
                    var sepHeight, sepItem, ele, element = this.element;
                    'Extended' === this.overflowMode && (sepItem = element.querySelector('.' + CLS_SEPARATOR + ':not(.' + CLS_POPUP + ')'), sepHeight = 'auto' === element.style.height || '' === element.style.height ? null : sepItem.offsetHeight);
                    var eleItem = element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_POPUP + ')'), eleHeight = 'auto' === element.style.height || '' === element.style.height ? null : eleItem && eleItem.offsetHeight;
                    if ((0, ej2_base /* select */ .Ys)('#' + element.id + '_popup.' + CLS_POPUPCLASS, element)) ele = (0, ej2_base /* select */ .Ys)('#' + element.id + '_popup.' + CLS_POPUPCLASS, element);
                    else {
                        var extendEle = this.createElement('div', {
                            id: element.id + '_popup',
                            className: CLS_POPUPCLASS + ' ' + CLS_EXTENDABLECLASS
                        }), popupEle = this.createElement('div', {
                            id: element.id + '_popup',
                            className: CLS_POPUPCLASS
                        });
                        ele = 'Extended' === this.overflowMode ? extendEle : popupEle;
                    }
                    this.pushingPoppedEle(this, [], ele, eleHeight, sepHeight), this.popupInit(element, ele);
                }, Toolbar.prototype.getElementOffsetY = function() {
                    return 'Extended' === this.overflowMode && 'border-box' === window.getComputedStyle(this.element).getPropertyValue('box-sizing') ? this.element.clientHeight : this.element.offsetHeight;
                }, Toolbar.prototype.popupInit = function(element, ele) {
                    if (this.popObj) {
                        var popupEle = this.popObj.element;
                        (0, ej2_base /* setStyleAttribute */ .V7)(popupEle, {
                            maxHeight: '',
                            display: 'block'
                        }), (0, ej2_base /* setStyleAttribute */ .V7)(popupEle, {
                            maxHeight: popupEle.offsetHeight + 'px',
                            display: ''
                        });
                    } else {
                        element.appendChild(ele), this.cssClass && (0, ej2_base /* addClass */ .cn)([
                            ele
                        ], this.cssClass.split(' ')), (0, ej2_base /* setStyleAttribute */ .V7)(this.element, {
                            overflow: ''
                        });
                        var eleStyles = window.getComputedStyle(this.element), popup = new popup_popup /* Popup */ .GI(null, {
                            relateTo: this.element,
                            offsetY: this.isVertical ? 0 : this.getElementOffsetY(),
                            enableRtl: this.enableRtl,
                            open: this.popupOpen.bind(this),
                            close: this.popupClose.bind(this),
                            collision: {
                                Y: this.enableCollision ? 'flip' : 'none'
                            },
                            position: this.enableRtl ? {
                                X: 'left',
                                Y: 'top'
                            } : {
                                X: 'right',
                                Y: 'top'
                            }
                        });
                        if (popup.appendTo(ele), 'Extended' === this.overflowMode && (popup.width = parseFloat(eleStyles.width) + 2 * parseFloat(eleStyles.borderRightWidth), popup.offsetX = 0), ej2_base /* EventHandler.add */ .bi.add(document, 'scroll', this.docEvent.bind(this)), ej2_base /* EventHandler.add */ .bi.add(document, 'click ', this.docEvent.bind(this)), popup.element.style.maxHeight = popup.element.offsetHeight + 'px', this.isVertical && (popup.element.style.visibility = 'hidden'), this.isExtendedOpen) {
                            var popupNav = this.element.querySelector('.' + CLS_TBARNAV);
                            popupNav.classList.add(CLS_TBARNAVACT), (0, ej2_base /* classList */ .s1)(popupNav.firstElementChild, [
                                CLS_POPUPICON
                            ], [
                                CLS_POPUPDOWN
                            ]), this.element.querySelector('.' + CLS_EXTENDABLECLASS).classList.add(CLS_POPUPOPEN);
                        } else popup.hide();
                        this.popObj = popup, this.element.setAttribute('aria-haspopup', 'true');
                    }
                }, Toolbar.prototype.tbarPopupHandler = function(isOpen) {
                    'Extended' === this.overflowMode && (isOpen ? this.add(this.element, CLS_EXTENDEDPOPOPEN) : this.remove(this.element, CLS_EXTENDEDPOPOPEN));
                }, // eslint-disable-next-line @typescript-eslint/no-unused-vars
                Toolbar.prototype.popupOpen = function(e) {
                    var popObj = this.popObj;
                    this.isVertical || (popObj.offsetY = this.getElementOffsetY(), popObj.dataBind());
                    var popupEle = this.popObj.element, toolEle = this.popObj.element.parentElement, popupNav = toolEle.querySelector('.' + CLS_TBARNAV);
                    (0, ej2_base /* setStyleAttribute */ .V7)(popObj.element, {
                        height: 'auto',
                        maxHeight: ''
                    }), popObj.element.style.maxHeight = popObj.element.offsetHeight + 'px', 'Extended' === this.overflowMode && (popObj.element.style.minHeight = '');
                    var popupElePos = popupEle.offsetTop + popupEle.offsetHeight + (0, position /* calculatePosition */ .k)(toolEle).top, popIcon = popupNav.firstElementChild;
                    popupNav.classList.add(CLS_TBARNAVACT), (0, ej2_base /* classList */ .s1)(popIcon, [
                        CLS_POPUPICON
                    ], [
                        CLS_POPUPDOWN
                    ]), this.tbarPopupHandler(!0);
                    var scrollVal = (0, ej2_base /* isNullOrUndefined */ .le)(window.scrollY) ? 0 : window.scrollY;
                    if (!this.isVertical && window.innerHeight + scrollVal < popupElePos && this.element.offsetTop < popupEle.offsetHeight) {
                        var overflowHeight = popupEle.offsetHeight - (popupElePos - window.innerHeight - scrollVal + 5);
                        popObj.height = overflowHeight + 'px';
                        for(var i = 0; i <= popupEle.childElementCount; i++){
                            var ele = popupEle.children[i];
                            if (ele.offsetTop + ele.offsetHeight > overflowHeight) {
                                overflowHeight = ele.offsetTop;
                                break;
                            }
                        }
                        (0, ej2_base /* setStyleAttribute */ .V7)(popObj.element, {
                            maxHeight: overflowHeight + 'px'
                        });
                    } else if (this.isVertical) {
                        var tbEleData = this.element.getBoundingClientRect();
                        (0, ej2_base /* setStyleAttribute */ .V7)(popObj.element, {
                            maxHeight: tbEleData.top + this.element.offsetHeight + 'px',
                            bottom: 0,
                            visibility: ''
                        });
                    }
                    if (popObj) {
                        var popupOffset = popupEle.getBoundingClientRect();
                        popupOffset.right > document.documentElement.clientWidth && popupOffset.width > toolEle.getBoundingClientRect().width && (popObj.collision = {
                            Y: 'none'
                        }, popObj.dataBind()), popObj.refreshPosition();
                    }
                }, // eslint-disable-next-line @typescript-eslint/no-unused-vars
                Toolbar.prototype.popupClose = function(e) {
                    var popupNav = this.element.querySelector('.' + CLS_TBARNAV), popIcon = popupNav.firstElementChild;
                    popupNav.classList.remove(CLS_TBARNAVACT), (0, ej2_base /* classList */ .s1)(popIcon, [
                        CLS_POPUPDOWN
                    ], [
                        CLS_POPUPICON
                    ]), this.tbarPopupHandler(!1);
                }, Toolbar.prototype.checkPriority = function(ele, inEle, eleWidth, pre) {
                    for(var eleOffset, popPriority = this.popupPriCount > 0, len = inEle.length, eleWid = eleWidth, sepCheck = 0, itemCount = 0, itemPopCount = 0, checkClass = function(ele, val) {
                        var rVal = !1;
                        return val.forEach(function(cls) {
                            ele.classList.contains(cls) && (rVal = !0);
                        }), rVal;
                    }, i = len - 1; i >= 0; i--){
                        var mrgn = void 0, compuStyle = window.getComputedStyle(inEle[i]);
                        mrgn = this.isVertical ? parseFloat(compuStyle.marginTop) + parseFloat(compuStyle.marginBottom) : parseFloat(compuStyle.marginRight) + parseFloat(compuStyle.marginLeft);
                        var fstEleCheck = inEle[i] === this.tbarEle[0];
                        fstEleCheck && (this.tbarEleMrgn = mrgn), eleOffset = this.isVertical ? inEle[i].offsetHeight : inEle[i].offsetWidth;
                        var eleWid_1 = fstEleCheck ? eleOffset + mrgn : eleOffset;
                        if (checkClass(inEle[i], [
                            CLS_POPPRI
                        ]) && popPriority && (inEle[i].classList.add(CLS_POPUP), this.isVertical ? (0, ej2_base /* setStyleAttribute */ .V7)(inEle[i], {
                            display: 'none',
                            minHeight: eleWid_1 + 'px'
                        }) : (0, ej2_base /* setStyleAttribute */ .V7)(inEle[i], {
                            display: 'none',
                            minWidth: eleWid_1 + 'px'
                        }), itemPopCount++), this.isVertical ? inEle[i].offsetTop + inEle[i].offsetHeight + mrgn > eleWidth : inEle[i].offsetLeft + inEle[i].offsetWidth + mrgn > eleWidth) {
                            if (inEle[i].classList.contains(CLS_SEPARATOR)) {
                                if ('Extended' === this.overflowMode) {
                                    if (itemCount === itemPopCount) {
                                        var sepEle = inEle[i];
                                        checkClass(sepEle, [
                                            CLS_SEPARATOR,
                                            CLS_TBARIGNORE
                                        ]) && (inEle[i].classList.add(CLS_POPUP), itemPopCount++);
                                    }
                                    itemCount++;
                                } else if ('Popup' === this.overflowMode) {
                                    if (sepCheck > 0 && itemCount === itemPopCount) {
                                        var sepEle = inEle[i + itemCount + (sepCheck - 1)];
                                        checkClass(sepEle, [
                                            CLS_SEPARATOR,
                                            CLS_TBARIGNORE
                                        ]) && (0, ej2_base /* setStyleAttribute */ .V7)(sepEle, {
                                            display: 'none'
                                        });
                                    }
                                    sepCheck++, itemCount = 0, itemPopCount = 0;
                                }
                            } else itemCount++;
                            inEle[i].classList.contains(CLS_TBAROVERFLOW) && pre ? eleWidth -= (this.isVertical ? inEle[i].offsetHeight : inEle[i].offsetWidth) + mrgn : checkClass(inEle[i], [
                                CLS_SEPARATOR,
                                CLS_TBARIGNORE
                            ]) ? eleWidth -= (this.isVertical ? inEle[i].offsetHeight : inEle[i].offsetWidth) + mrgn : (inEle[i].classList.add(CLS_POPUP), this.isVertical ? (0, ej2_base /* setStyleAttribute */ .V7)(inEle[i], {
                                display: 'none',
                                minHeight: eleWid_1 + 'px'
                            }) : (0, ej2_base /* setStyleAttribute */ .V7)(inEle[i], {
                                display: 'none',
                                minWidth: eleWid_1 + 'px'
                            }), itemPopCount++);
                        }
                    }
                    if (pre) {
                        var popedEle = (0, ej2_base /* selectAll */ .td)('.' + CLS_ITEM + ':not(.' + CLS_POPUP + ')', this.element);
                        this.checkPriority(ele, popedEle, eleWid, !1);
                    }
                }, Toolbar.prototype.createPopupIcon = function(element) {
                    var id = element.id.concat('_nav'), className = 'e-' + element.id.concat("_nav e-hor-nav");
                    className = 'Extended' === this.overflowMode ? className + " e-expended-nav" : className;
                    var nav = this.createElement('div', {
                        id: id,
                        className: className
                    });
                    ('msie' === ej2_base /* Browser.info.name */ .AR.info.name || 'edge' === ej2_base /* Browser.info.name */ .AR.info.name) && nav.classList.add('e-ie-align');
                    var navItem = this.createElement('div', {
                        className: CLS_POPUPDOWN + ' e-icons'
                    });
                    nav.appendChild(navItem), nav.setAttribute('tabindex', '0'), nav.setAttribute('role', 'list'), element.appendChild(nav);
                }, Toolbar.prototype.tbarPriRef = function(inEle, indx, sepPri, el, des, elWid, wid, ig) {
                    var popEle = this.popObj.element, query = '.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_TBAROVERFLOW + ')', priEleCnt = (0, ej2_base /* selectAll */ .td)('.' + CLS_POPUP + ':not(.' + CLS_TBAROVERFLOW + ')', popEle).length, checkClass = function(ele, val) {
                        return ele.classList.contains(val);
                    };
                    if (0 === (0, ej2_base /* selectAll */ .td)(query, inEle).length) {
                        var eleSep = inEle.children[indx - (indx - sepPri) - 1], ignoreCheck = !(0, ej2_base /* isNullOrUndefined */ .le)(eleSep) && checkClass(eleSep, CLS_TBARIGNORE);
                        if (!(0, ej2_base /* isNullOrUndefined */ .le)(eleSep) && checkClass(eleSep, CLS_SEPARATOR) && !(0, ej2_base /* isVisible */ .pn)(eleSep) || ignoreCheck) {
                            eleSep.style.display = 'inherit';
                            var eleSepWidth = eleSep.offsetWidth + 2 * parseFloat(window.getComputedStyle(eleSep).marginRight), prevSep = eleSep.previousElementSibling;
                            elWid + eleSepWidth < wid || des ? (inEle.insertBefore(el, inEle.children[indx + ig - (indx - sepPri)]), (0, ej2_base /* isNullOrUndefined */ .le)(prevSep) || (prevSep.style.display = '')) : prevSep.classList.contains(CLS_SEPARATOR) && (prevSep.style.display = 'none'), eleSep.style.display = '';
                        } else inEle.insertBefore(el, inEle.children[indx + ig - (indx - sepPri)]);
                    } else inEle.insertBefore(el, inEle.children[indx + ig - priEleCnt]);
                }, Toolbar.prototype.popupRefresh = function(popupEle, destroy) {
                    var dimension, _this = this, ele = this.element, isVer = this.isVertical, innerEle = ele.querySelector('.' + CLS_ITEMS), popNav = ele.querySelector('.' + CLS_TBARNAV);
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(popNav)) {
                        innerEle.removeAttribute('style'), popupEle.style.display = 'block', dimension = isVer ? ele.offsetHeight - (popNav.offsetHeight + innerEle.offsetHeight) : ele.offsetWidth - (popNav.offsetWidth + innerEle.offsetWidth);
                        var popupEleWidth = 0;
                        [].slice.call(popupEle.children).forEach(function(el) {
                            popupEleWidth += _this.popupEleWidth(el), (0, ej2_base /* setStyleAttribute */ .V7)(el, {
                                position: ''
                            });
                        }), dimension + (isVer ? popNav.offsetHeight : popNav.offsetWidth) > popupEleWidth && 0 === this.popupPriCount && (destroy = !0), this.popupEleRefresh(dimension, popupEle, destroy), popupEle.style.display = '', 0 === popupEle.children.length && popNav && this.popObj && ((0, ej2_base /* detach */ .og)(popNav), popNav = null, this.popObj.destroy(), (0, ej2_base /* detach */ .og)(this.popObj.element), this.popObj = null, ele.setAttribute('aria-haspopup', 'false'));
                    }
                }, Toolbar.prototype.ignoreEleFetch = function(index, innerEle) {
                    var ignoreEle = [].slice.call(innerEle.querySelectorAll('.' + CLS_TBARIGNORE)), ignoreInx = [], count = 0;
                    return ignoreEle.length > 0 ? (ignoreEle.forEach(function(ele) {
                        ignoreInx.push([].slice.call(innerEle.children).indexOf(ele));
                    }), ignoreInx.forEach(function(val) {
                        val <= index && count++;
                    }), count) : 0;
                }, Toolbar.prototype.checkPopupRefresh = function(root, popEle) {
                    popEle.style.display = 'block';
                    var elWid = this.popupEleWidth(popEle.firstElementChild);
                    popEle.firstElementChild.style.removeProperty('Position');
                    var tbarWidth = root.offsetWidth - root.querySelector('.' + CLS_TBARNAV).offsetWidth, tbarItemsWid = root.querySelector('.' + CLS_ITEMS).offsetWidth;
                    return popEle.style.removeProperty('display'), tbarWidth > elWid + tbarItemsWid;
                }, Toolbar.prototype.popupEleWidth = function(el) {
                    el.style.position = 'absolute';
                    var elWidth = this.isVertical ? el.offsetHeight : el.offsetWidth, btnText = el.querySelector(".e-tbar-btn-text");
                    if (el.classList.contains('e-tbtn-align') || el.classList.contains(CLS_TBARTEXT)) {
                        var btn = el.children[0];
                        !(0, ej2_base /* isNullOrUndefined */ .le)(btnText) && el.classList.contains(CLS_TBARTEXT) ? btnText.style.display = 'none' : !(0, ej2_base /* isNullOrUndefined */ .le)(btnText) && el.classList.contains(CLS_POPUPTEXT) && (btnText.style.display = 'block'), btn.style.minWidth = '0%', elWidth = parseFloat(this.isVertical ? el.style.minHeight : el.style.minWidth), btn.style.minWidth = '', btn.style.minHeight = '', (0, ej2_base /* isNullOrUndefined */ .le)(btnText) || (btnText.style.display = '');
                    }
                    return elWidth;
                }, Toolbar.prototype.popupEleRefresh = function(width, popupEle, destroy) {
                    for(var priEleCnt, index, popPriority = this.popupPriCount > 0, eleSplice = this.tbarEle, innerEle = this.element.querySelector('.' + CLS_ITEMS), ignoreCount = 0, this_1 = this, _i = 0, _a = [].slice.call(popupEle.children); _i < _a.length && "break" !== function(el) {
                        if (el.classList.contains(CLS_POPPRI) && popPriority && !destroy) return "continue";
                        var elWidth = this_1.popupEleWidth(el);
                        if (el === this_1.tbarEle[0] && (elWidth += this_1.tbarEleMrgn), el.style.position = '', !(elWidth < width) && !destroy) return "break";
                        if ((0, ej2_base /* setStyleAttribute */ .V7)(el, {
                            minWidth: '',
                            height: '',
                            minHeight: ''
                        }), el.classList.contains(CLS_POPOVERFLOW) || el.classList.remove(CLS_POPUP), index = this_1.tbarEle.indexOf(el), this_1.tbarAlign) {
                            var pos = this_1.items[index].align;
                            index = this_1.tbarAlgEle[(pos + 's').toLowerCase()].indexOf(el), eleSplice = this_1.tbarAlgEle[(pos + 's').toLowerCase()], innerEle = this_1.element.querySelector('.' + CLS_ITEMS + " .e-toolbar-" + pos.toLowerCase());
                        }
                        var sepBeforePri_1 = 0;
                        'Extended' !== this_1.overflowMode && eleSplice.slice(0, index).forEach(function(el) {
                            (el.classList.contains(CLS_TBAROVERFLOW) || el.classList.contains(CLS_SEPARATOR)) && (el.classList.contains(CLS_SEPARATOR) && (el.style.display = '', width -= el.offsetWidth), sepBeforePri_1++);
                        }), ignoreCount = this_1.ignoreEleFetch(index, innerEle), el.classList.contains(CLS_TBAROVERFLOW) ? this_1.tbarPriRef(innerEle, index, sepBeforePri_1, el, destroy, elWidth, width, ignoreCount) : 0 === index ? innerEle.insertBefore(el, innerEle.firstChild) : (priEleCnt = (0, ej2_base /* selectAll */ .td)('.' + CLS_TBAROVERFLOW, this_1.popObj.element).length, innerEle.insertBefore(el, innerEle.children[index + ignoreCount - priEleCnt])), width -= el.offsetWidth, el.style.height = '';
                    }(_a[_i]); _i++);
                    this.checkOverflow(this.element, this.element.getElementsByClassName(CLS_ITEMS)[0]) && !destroy && this.renderOverflowMode();
                }, Toolbar.prototype.removePositioning = function() {
                    var item = this.element.querySelector('.' + CLS_ITEMS);
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(item) && item.classList.contains(CLS_TBARPOS)) {
                        this.remove(item, CLS_TBARPOS);
                        var innerItem = [].slice.call(item.childNodes);
                        innerItem[1].removeAttribute('style'), innerItem[2].removeAttribute('style');
                    }
                }, Toolbar.prototype.refreshPositioning = function() {
                    var item = this.element.querySelector('.' + CLS_ITEMS);
                    this.add(item, CLS_TBARPOS), this.itemPositioning();
                }, Toolbar.prototype.itemPositioning = function() {
                    var margin, innerItem, item = this.element.querySelector('.' + CLS_ITEMS);
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(item) && item.classList.contains(CLS_TBARPOS)) {
                        var popupNav = this.element.querySelector('.' + CLS_TBARNAV);
                        if (this.scrollModule) {
                            var trgClass = this.isVertical ? 'e-vscroll-content' : 'e-hscroll-content';
                            innerItem = [].slice.call(item.querySelector('.' + trgClass).children);
                        } else innerItem = [].slice.call(item.childNodes);
                        margin = this.isVertical ? innerItem[0].offsetHeight + innerItem[2].offsetHeight : innerItem[0].offsetWidth + innerItem[2].offsetWidth;
                        var tbarWid = this.isVertical ? this.element.offsetHeight : this.element.offsetWidth;
                        if (popupNav) {
                            tbarWid -= this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth;
                            var popWid = (this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth) + 'px';
                            innerItem[2].removeAttribute('style'), this.isVertical ? this.enableRtl ? innerItem[2].style.top = popWid : innerItem[2].style.bottom = popWid : this.enableRtl ? innerItem[2].style.left = popWid : innerItem[2].style.right = popWid;
                        }
                        if (!(tbarWid <= margin)) {
                            var value = (tbarWid - margin - (this.isVertical ? innerItem[1].offsetHeight : innerItem[1].offsetWidth)) / 2;
                            innerItem[1].removeAttribute('style');
                            var mrgn = (this.isVertical ? innerItem[0].offsetHeight : innerItem[0].offsetWidth) + value + 'px';
                            this.isVertical ? this.enableRtl ? innerItem[1].style.marginBottom = mrgn : innerItem[1].style.marginTop = mrgn : this.enableRtl ? innerItem[1].style.marginRight = mrgn : innerItem[1].style.marginLeft = mrgn;
                        }
                    }
                }, Toolbar.prototype.tbarItemAlign = function(item, itemEle, pos) {
                    var _this = this;
                    if (!item.showAlwaysInPopup || 'Show' === item.overflow) {
                        var alignDiv = [];
                        if (alignDiv.push(this.createElement('div', {
                            className: 'e-toolbar-left'
                        })), alignDiv.push(this.createElement('div', {
                            className: CLS_TBARCENTER
                        })), alignDiv.push(this.createElement('div', {
                            className: 'e-toolbar-right'
                        })), 0 === pos && 'Left' !== item.align) alignDiv.forEach(function(ele) {
                            itemEle.appendChild(ele);
                        }), this.tbarAlign = !0, this.add(itemEle, CLS_TBARPOS);
                        else if ('Left' !== item.align) {
                            var alignEle = itemEle.childNodes, leftAlign_1 = alignDiv[0];
                            [].slice.call(alignEle).forEach(function(el) {
                                _this.tbarAlgEle.lefts.push(el), leftAlign_1.appendChild(el);
                            }), itemEle.appendChild(leftAlign_1), itemEle.appendChild(alignDiv[1]), itemEle.appendChild(alignDiv[2]), this.tbarAlign = !0, this.add(itemEle, CLS_TBARPOS);
                        }
                    }
                }, Toolbar.prototype.ctrlTemplate = function() {
                    var _this = this;
                    this.ctrlTem = this.trgtEle.cloneNode(!0), this.add(this.trgtEle, CLS_ITEMS), this.tbarEle = [], [].slice.call(this.trgtEle.children).forEach(function(ele) {
                        'DIV' === ele.tagName && (_this.tbarEle.push(ele), ele.setAttribute('aria-disabled', 'false'), _this.add(ele, CLS_ITEM));
                    });
                }, Toolbar.prototype.renderItems = function() {
                    var ele = this.element, items = this.items;
                    if (null != this.trgtEle) this.ctrlTemplate();
                    else if (ele && items.length > 0) {
                        var itemEleDom = void 0;
                        ele && ele.children.length > 0 && (itemEleDom = ele.querySelector('.' + CLS_ITEMS)), itemEleDom || (itemEleDom = this.createElement('div', {
                            className: CLS_ITEMS
                        })), this.itemsAlign(items, itemEleDom), ele.appendChild(itemEleDom);
                    }
                }, Toolbar.prototype.setAttr = function(attr, element) {
                    for(var keyVal, key = Object.keys(attr), i = 0; i < key.length; i++)'class' === (keyVal = key[i]) ? this.add(element, attr[keyVal]) : element.setAttribute(keyVal, attr[keyVal]);
                }, /**
     * Enables or disables the specified Toolbar item.
     *
     * @param  {number|HTMLElement|NodeList} items - DOM element or an array of items to be enabled or disabled.
     * @param  {boolean} isEnable  - Boolean value that determines whether the command should be enabled or disabled.
     * By default, `isEnable` is set to true.
     * @returns {void}.
     */ Toolbar.prototype.enableItems = function(items, isEnable) {
                    var ele, len = items.length;
                    (0, ej2_base /* isNullOrUndefined */ .le)(isEnable) && (isEnable = !0);
                    var enable = function(isEnable, ele) {
                        isEnable ? (ele.classList.remove(toolbar_CLS_DISABLE), ele.setAttribute('aria-disabled', 'false')) : (ele.classList.add(toolbar_CLS_DISABLE), ele.setAttribute('aria-disabled', 'true'));
                    };
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(len) && len >= 1) {
                        for(var a = 0, element = [].slice.call(items); a < len; a++){
                            var itemElement = element[a];
                            if ('number' == typeof itemElement) {
                                if (ele = this.getElementByIndex(itemElement), (0, ej2_base /* isNullOrUndefined */ .le)(ele)) return;
                                items[a] = ele;
                            } else ele = itemElement;
                            enable(isEnable, ele);
                        }
                        isEnable ? (0, ej2_base /* removeClass */ .IV)(items, toolbar_CLS_DISABLE) : (0, ej2_base /* addClass */ .cn)(items, toolbar_CLS_DISABLE);
                    } else {
                        if ('number' == typeof items) {
                            if (ele = this.getElementByIndex(items), (0, ej2_base /* isNullOrUndefined */ .le)(ele)) return;
                        } else ele = items;
                        enable(isEnable, ele);
                    }
                }, Toolbar.prototype.getElementByIndex = function(index) {
                    return this.tbarEle[index] ? this.tbarEle[index] : null;
                }, /**
     * Adds new items to the Toolbar that accepts an array as Toolbar items.
     *
     * @param  {ItemModel[]} items - DOM element or an array of items to be added to the Toolbar.
     * @param  {number} index - Number value that determines where the command is to be added. By default, index is 0.
     * @returns {void}.
     */ Toolbar.prototype.addItems = function(items, index) {
                    this.extendedOpen();
                    var innerItems, innerEle, itemsDiv = this.element.querySelector('.' + CLS_ITEMS);
                    if ((0, ej2_base /* isNullOrUndefined */ .le)(itemsDiv)) {
                        this.itemsRerender(items);
                        return;
                    }
                    var itemAgn = 'Left';
                    (0, ej2_base /* isNullOrUndefined */ .le)(index) && (index = 0), items.forEach(function(e) {
                        (0, ej2_base /* isNullOrUndefined */ .le)(e.align) || 'Left' === e.align || 'Left' !== itemAgn || (itemAgn = e.align);
                    });
                    for(var _i = 0; _i < items.length; _i++){
                        var item = items[_i];
                        if ((0, ej2_base /* isNullOrUndefined */ .le)(item.type) && (item.type = 'Button'), innerItems = (0, ej2_base /* selectAll */ .td)('.' + CLS_ITEM, this.element), item.align = itemAgn, innerEle = this.renderSubComponent(item, index), this.tbarEle.length >= index && innerItems.length >= 0) {
                            (0, ej2_base /* isNullOrUndefined */ .le)(this.scrollModule) && this.destroyMode();
                            var algIndex = 'L' === item.align[0] ? 0 : 'C' === item.align[0] ? 1 : 2, ele = void 0;
                            this.tbarAlign || 'Left' === itemAgn ? this.tbarAlign ? ((ele = (0, ej2_base /* closest */ .oq)(innerItems[0], '.' + CLS_ITEMS).children[algIndex]).insertBefore(innerEle, ele.children[index]), this.tbarAlgEle[(item.align + 's').toLowerCase()].splice(index, 0, innerEle), this.refreshPositioning()) : 0 === innerItems.length ? (innerItems = (0, ej2_base /* selectAll */ .td)('.' + CLS_ITEMS, this.element))[0].appendChild(innerEle) : innerItems[0].parentNode.insertBefore(innerEle, innerItems[index]) : (this.tbarItemAlign(item, itemsDiv, 1), this.tbarAlign = !0, (ele = (0, ej2_base /* closest */ .oq)(innerItems[0], '.' + CLS_ITEMS).children[algIndex]).appendChild(innerEle), this.tbarAlgEle[(item.align + 's').toLowerCase()].push(innerEle), this.refreshPositioning()), this.items.splice(index, 0, item), item.template && this.tbarEle.splice(this.tbarEle.length - 1, 1), this.tbarEle.splice(index, 0, innerEle), index++, this.offsetWid = itemsDiv.offsetWidth;
                        }
                    }
                    itemsDiv.style.width = '', this.renderOverflowMode(), this.isReact && this.renderReactTemplates();
                }, /**
     * Removes the items from the Toolbar. Acceptable arguments are index of item/HTMLElement/node list.
     *
     * @param  {number|HTMLElement|NodeList|HTMLElement[]} args
     * Index or DOM element or an Array of item which is to be removed from the Toolbar.
     * @returns {void}.
     */ Toolbar.prototype.removeItems = function(args) {
                    var index, innerItems = [].slice.call((0, ej2_base /* selectAll */ .td)('.' + CLS_ITEM, this.element));
                    if ('number' == typeof args) index = parseInt(args.toString(), 10), this.removeItemByIndex(index, innerItems);
                    else if (args && args.length > 1) for(var _i = 0, _a = [].slice.call(args); _i < _a.length; _i++){
                        var ele = _a[_i];
                        index = this.tbarEle.indexOf(ele), this.removeItemByIndex(index, innerItems), innerItems = (0, ej2_base /* selectAll */ .td)('.' + CLS_ITEM, this.element);
                    }
                    else {
                        var ele = args && args.length && 1 === args.length ? args[0] : args;
                        index = innerItems.indexOf(ele), this.removeItemByIndex(index, innerItems);
                    }
                    this.resize();
                }, Toolbar.prototype.removeItemByIndex = function(index, innerItems) {
                    if (this.tbarEle[index] && innerItems[index]) {
                        var eleIdx = this.tbarEle.indexOf(innerItems[index]);
                        if (this.tbarAlign) {
                            var indexAgn = this.tbarAlgEle[(this.items[eleIdx].align + 's').toLowerCase()].indexOf(this.tbarEle[eleIdx]);
                            this.tbarAlgEle[(this.items[eleIdx].align + 's').toLowerCase()].splice(indexAgn, 1);
                        }
                        this.isReact && this.clearTemplate();
                        var btnItem = innerItems[index].querySelector('.e-control.e-btn');
                        (0, ej2_base /* isNullOrUndefined */ .le)(btnItem) || (0, ej2_base /* isNullOrUndefined */ .le)(btnItem.ej2_instances[0]) || btnItem.ej2_instances[0].isDestroyed || btnItem.ej2_instances[0].destroy(), (0, ej2_base /* detach */ .og)(innerItems[index]), this.items.splice(eleIdx, 1), this.tbarEle.splice(eleIdx, 1);
                    }
                }, Toolbar.prototype.templateRender = function(templateProp, innerEle, item, index) {
                    var isComponent, itemType = item.type;
                    if ('object' == typeof templateProp && (isComponent = 'function' == typeof templateProp.appendTo), 'string' != typeof templateProp && isComponent) {
                        if ('Input' === itemType) {
                            var ele = this.createElement('input');
                            item.id ? ele.id = item.id : ele.id = (0, ej2_base /* getUniqueID */ .QI)('tbr-ipt'), innerEle.appendChild(ele), templateProp.appendTo(ele);
                        }
                    } else {
                        var templateFn = void 0, val = templateProp, regEx = new RegExp(/<(?=.*? .*?\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\/\1>/i);
                        val = 'string' == typeof templateProp ? templateProp.trim() : templateProp;
                        try {
                            if ('object' != typeof templateProp || (0, ej2_base /* isNullOrUndefined */ .le)(templateProp.tagName)) {
                                if ('string' == typeof templateProp && regEx.test(val)) innerEle.innerHTML = val;
                                else if (document.querySelectorAll(val).length) {
                                    var ele = document.querySelector(val), tempStr = ele.outerHTML.trim();
                                    innerEle.appendChild(ele), ele.style.display = '', (0, ej2_base /* isNullOrUndefined */ .le)(tempStr) || this.tempId.push(val);
                                } else templateFn = (0, ej2_base /* compile */ .MY)(val);
                            } else innerEle.appendChild(templateProp);
                        } catch (e) {
                            templateFn = (0, ej2_base /* compile */ .MY)(val);
                        }
                        var tempArray = void 0;
                        (0, ej2_base /* isNullOrUndefined */ .le)(templateFn) || (tempArray = templateFn({}, this, 'template', this.element.id + index + '_template', this.isStringTemplate)), !(0, ej2_base /* isNullOrUndefined */ .le)(tempArray) && tempArray.length > 0 && [].slice.call(tempArray).forEach(function(ele) {
                            (0, ej2_base /* isNullOrUndefined */ .le)(ele.tagName) || (ele.style.display = ''), innerEle.appendChild(ele);
                        });
                    }
                    this.add(innerEle, CLS_TEMPLATE), this.tbarEle.push(innerEle);
                }, Toolbar.prototype.buttonRendering = function(item, innerEle) {
                    var iconCss, iconPos, dom = this.createElement('button', {
                        className: 'e-tbar-btn'
                    });
                    dom.setAttribute('type', 'button');
                    var textStr = item.text;
                    item.id ? dom.id = item.id : dom.id = (0, ej2_base /* getUniqueID */ .QI)('e-tbr-btn');
                    var btnTxt = this.createElement('span', {
                        className: 'e-tbar-btn-text'
                    });
                    textStr ? (btnTxt.innerHTML = this.enableHtmlSanitizer ? ej2_base /* SanitizeHtmlHelper.sanitize */ .pJ.sanitize(textStr) : textStr, dom.appendChild(btnTxt), dom.classList.add('e-tbtn-txt')) : this.add(innerEle, 'e-tbtn-align'), (item.prefixIcon || item.suffixIcon) && (item.prefixIcon && item.suffixIcon || item.prefixIcon ? (iconCss = item.prefixIcon + ' e-icons', iconPos = 'Left') : (iconCss = item.suffixIcon + ' e-icons', iconPos = 'Right'));
                    var btnObj = new button_button /* Button */ .z({
                        iconCss: iconCss,
                        iconPosition: iconPos
                    });
                    return btnObj.createElement = this.createElement, btnObj.appendTo(dom), item.width && (0, ej2_base /* setStyleAttribute */ .V7)(dom, {
                        width: (0, ej2_base /* formatUnit */ .Ac)(item.width)
                    }), dom;
                }, Toolbar.prototype.renderSubComponent = function(item, index) {
                    var dom, innerEle = this.createElement('div', {
                        className: CLS_ITEM
                    });
                    innerEle.setAttribute('aria-disabled', 'false');
                    var tempDom = this.createElement('div', {
                        innerHTML: this.enableHtmlSanitizer ? ej2_base /* SanitizeHtmlHelper.sanitize */ .pJ.sanitize(item.tooltipText) : item.tooltipText
                    });
                    if (this.tbarEle || (this.tbarEle = []), item.htmlAttributes && this.setAttr(item.htmlAttributes, innerEle), item.tooltipText && innerEle.setAttribute('title', tempDom.textContent), item.cssClass && (innerEle.className = innerEle.className + ' ' + item.cssClass), item.template) this.templateRender(item.template, innerEle, item, index);
                    else switch(item.type){
                        case 'Button':
                            (dom = this.buttonRendering(item, innerEle)).setAttribute('tabindex', '-1'), dom.setAttribute('aria-label', item.text || item.tooltipText), innerEle.appendChild(dom), innerEle.addEventListener('click', this.itemClick.bind(this));
                            break;
                        case 'Separator':
                            this.add(innerEle, CLS_SEPARATOR);
                    }
                    if (item.showTextOn) {
                        var sTxt = item.showTextOn;
                        'Toolbar' === sTxt ? (this.add(innerEle, CLS_POPUPTEXT), this.add(innerEle, 'e-tbtn-align')) : 'Overflow' === sTxt && this.add(innerEle, CLS_TBARTEXT);
                    }
                    if (item.overflow) {
                        var overflow = item.overflow;
                        'Show' === overflow ? this.add(innerEle, CLS_TBAROVERFLOW) : 'Hide' !== overflow || innerEle.classList.contains(CLS_SEPARATOR) || this.add(innerEle, CLS_POPOVERFLOW);
                    }
                    return 'Show' !== item.overflow && item.showAlwaysInPopup && !innerEle.classList.contains(CLS_SEPARATOR) && (this.add(innerEle, CLS_POPPRI), this.popupPriCount++), item.disabled && this.add(innerEle, toolbar_CLS_DISABLE), !1 === item.visible && this.add(innerEle, CLS_HIDDEN), innerEle;
                }, Toolbar.prototype.itemClick = function(e) {
                    this.activeEleSwitch(e.currentTarget);
                }, Toolbar.prototype.activeEleSwitch = function(ele) {
                    this.activeEleRemove(ele.firstElementChild), this.activeEle.focus();
                }, Toolbar.prototype.activeEleRemove = function(curEle) {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.activeEle) || this.activeEle.setAttribute('tabindex', '-1'), this.activeEle = curEle, (0, ej2_base /* isNullOrUndefined */ .le)(this.trgtEle) && !curEle.parentElement.classList.contains(CLS_TEMPLATE) ? curEle.removeAttribute('tabindex') : this.activeEle.setAttribute('tabindex', '0');
                }, Toolbar.prototype.getPersistData = function() {
                    return this.addOnPersist([]);
                }, /**
     * Returns the current module name.
     *
     * @returns {string} - Returns the module name as string.
     * @private
     */ Toolbar.prototype.getModuleName = function() {
                    return 'toolbar';
                }, Toolbar.prototype.itemsRerender = function(newProp) {
                    this.items = this.tbarItemsCol, (this.isReact || this.isAngular) && this.clearTemplate(), this.destroyMode(), this.destroyItems(), this.items = newProp, this.tbarItemsCol = this.items, this.renderItems(), this.renderOverflowMode(), this.isReact && this.renderReactTemplates();
                }, Toolbar.prototype.resize = function() {
                    var ele = this.element;
                    this.tbResize = !0, this.tbarAlign && this.itemPositioning(), this.popObj && 'Popup' === this.overflowMode && this.popObj.hide();
                    var checkOverflow = this.checkOverflow(ele, ele.getElementsByClassName(CLS_ITEMS)[0]);
                    if (!checkOverflow) {
                        this.destroyScroll();
                        var multirowele = ele.querySelector('.' + CLS_ITEMS);
                        !(0, ej2_base /* isNullOrUndefined */ .le)(multirowele) && (this.remove(multirowele, CLS_MULTIROWPOS), this.tbarAlign && this.add(multirowele, CLS_TBARPOS));
                    }
                    if (!checkOverflow || !this.scrollModule || this.offsetWid !== ele.offsetWidth) {
                        if ((this.offsetWid > ele.offsetWidth || checkOverflow) && this.renderOverflowMode(), this.popObj) {
                            if ('Extended' === this.overflowMode) {
                                var eleStyles = window.getComputedStyle(this.element);
                                this.popObj.width = parseFloat(eleStyles.width) + 2 * parseFloat(eleStyles.borderRightWidth);
                            }
                            this.tbarAlign && this.removePositioning(), this.popupRefresh(this.popObj.element, !1), this.tbarAlign && this.refreshPositioning();
                        }
                        this.element.querySelector('.' + toolbar_CLS_HSCROLLBAR) && (this.scrollStep = this.element.querySelector('.' + toolbar_CLS_HSCROLLBAR).offsetWidth), this.offsetWid = ele.offsetWidth, this.tbResize = !1, this.separator();
                    }
                }, Toolbar.prototype.extendedOpen = function() {
                    var sib = this.element.querySelector('.' + CLS_EXTENDABLECLASS);
                    'Extended' === this.overflowMode && sib && (this.isExtendedOpen = sib.classList.contains(CLS_POPUPOPEN));
                }, /**
     * Gets called when the model property changes.The data that describes the old and new values of the property that changed.
     *
     * @param  {ToolbarModel} newProp - It contains new value of the data.
     * @param  {ToolbarModel} oldProp - It contains old value of the data.
     * @returns {void}
     * @private
     */ Toolbar.prototype.onPropertyChanged = function(newProp, oldProp) {
                    var tEle = this.element, wid = tEle.offsetWidth;
                    this.extendedOpen();
                    for(var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++)switch(_a[_i]){
                        case 'items':
                            if (newProp.items instanceof Array && oldProp.items instanceof Array) this.itemsRerender(newProp.items);
                            else for(var changedProb = Object.keys(newProp.items), i = 0; i < changedProb.length; i++){
                                var index = parseInt(Object.keys(newProp.items)[i], 10), property = Object.keys(newProp.items[index])[0], newProperty = Object(newProp.items[index])[property];
                                if ('function' != typeof newProperty) {
                                    if (this.tbarAlign || 'align' === property) {
                                        this.refresh(), this.trigger('created');
                                        break;
                                    }
                                    var popupPriCheck = 'showAlwaysInPopup' === property && !newProperty, booleanCheck = 'overflow' === property && 0 !== this.popupPriCount;
                                    (popupPriCheck || this.items[index].showAlwaysInPopup && booleanCheck) && --this.popupPriCount, (0, ej2_base /* isNullOrUndefined */ .le)(this.scrollModule) && this.destroyMode();
                                    var itemCol = [].slice.call((0, ej2_base /* selectAll */ .td)('.' + CLS_ITEMS + ' .' + CLS_ITEM, tEle));
                                    this.isReact && this.clearTemplate(), (0, ej2_base /* detach */ .og)(itemCol[index]), this.tbarEle.splice(index, 1), this.addItems([
                                        this.items[index]
                                    ], index), this.items.splice(index, 1), this.items[index].template && this.tbarEle.splice(this.items.length, 1);
                                }
                            }
                            break;
                        case 'width':
                            (0, ej2_base /* setStyleAttribute */ .V7)(tEle, {
                                width: (0, ej2_base /* formatUnit */ .Ac)(newProp.width)
                            }), this.renderOverflowMode(), this.popObj && wid < tEle.offsetWidth && this.popupRefresh(this.popObj.element, !1);
                            break;
                        case 'height':
                            (0, ej2_base /* setStyleAttribute */ .V7)(this.element, {
                                height: (0, ej2_base /* formatUnit */ .Ac)(newProp.height)
                            });
                            break;
                        case 'overflowMode':
                            this.destroyMode(), this.renderOverflowMode(), this.enableRtl && this.add(tEle, toolbar_CLS_RTL), this.refreshOverflow();
                            break;
                        case 'enableRtl':
                            newProp.enableRtl ? this.add(tEle, toolbar_CLS_RTL) : this.remove(tEle, toolbar_CLS_RTL), (0, ej2_base /* isNullOrUndefined */ .le)(this.scrollModule) || (newProp.enableRtl ? this.add(this.scrollModule.element, toolbar_CLS_RTL) : this.remove(this.scrollModule.element, toolbar_CLS_RTL)), (0, ej2_base /* isNullOrUndefined */ .le)(this.popObj) || (newProp.enableRtl ? this.add(this.popObj.element, toolbar_CLS_RTL) : this.remove(this.popObj.element, toolbar_CLS_RTL)), this.tbarAlign && this.itemPositioning();
                            break;
                        case 'scrollStep':
                            this.scrollModule && (this.scrollModule.scrollStep = this.scrollStep);
                            break;
                        case 'enableCollision':
                            this.popObj && (this.popObj.collision = {
                                Y: this.enableCollision ? 'flip' : 'none'
                            });
                            break;
                        case 'cssClass':
                            oldProp.cssClass && (0, ej2_base /* removeClass */ .IV)([
                                this.element
                            ], oldProp.cssClass.split(' ')), newProp.cssClass && (0, ej2_base /* addClass */ .cn)([
                                this.element
                            ], newProp.cssClass.split(' '));
                            break;
                        case 'allowKeyboard':
                            this.unwireKeyboardEvent(), newProp.allowKeyboard && this.wireKeyboardEvent();
                    }
                }, /**
     * Shows or hides the Toolbar item that is in the specified index.
     *
     * @param  {number | HTMLElement} index - Index value of target item or DOM element  of items to be hidden or shown.
     * @param  {boolean} value - Based on this Boolean value, item will be hide (true) or show (false). By default, value is false.
     * @returns {void}.
     */ Toolbar.prototype.hideItem = function(index, value) {
                    var initIndex, ele, isElement = 'object' == typeof index, eleIndex = index, innerItems = [].slice.call((0, ej2_base /* selectAll */ .td)('.' + CLS_ITEM, this.element));
                    if (isElement ? ele = index : this.tbarEle[eleIndex] && (ele = [].slice.call((0, ej2_base /* selectAll */ .td)('.' + CLS_ITEM, this.element))[eleIndex]), ele) {
                        if (value ? ele.classList.add(CLS_HIDDEN) : ele.classList.remove(CLS_HIDDEN), value && (0, ej2_base /* isNullOrUndefined */ .le)(this.element.getAttribute('tabindex')) && !ele.classList.contains(CLS_SEPARATOR)) {
                            if ((0, ej2_base /* isNullOrUndefined */ .le)(ele.firstElementChild.getAttribute('tabindex'))) {
                                ele.firstElementChild.setAttribute('tabindex', '-1');
                                var innerItems_2 = [].slice.call((0, ej2_base /* selectAll */ .td)('.' + CLS_ITEM, this.element));
                                isElement && (eleIndex = innerItems_2.indexOf(ele));
                                for(var nextEle = innerItems_2[++eleIndex]; nextEle;){
                                    var skipEle = this.eleContains(nextEle);
                                    if (!skipEle) {
                                        nextEle.firstElementChild.removeAttribute('tabindex');
                                        break;
                                    }
                                    nextEle = innerItems_2[++eleIndex];
                                }
                            }
                        } else if ((0, ej2_base /* isNullOrUndefined */ .le)(this.element.getAttribute('tabindex')) && !ele.classList.contains(CLS_SEPARATOR)) for(var setFlag = !1, removeFlag = !1, initELe = innerItems[initIndex = 0]; initELe;)if (initELe.classList.contains(CLS_SEPARATOR)) initELe = innerItems[++initIndex];
                        else if ((0, ej2_base /* isNullOrUndefined */ .le)(initELe.firstElementChild.getAttribute('tabindex'))) initELe.firstElementChild.setAttribute('tabindex', '-1'), setFlag = !0;
                        else {
                            if (setFlag && removeFlag) break;
                            var skipEle = this.eleContains(initELe);
                            skipEle || (initELe.firstElementChild.removeAttribute('tabindex'), removeFlag = !0), initELe = innerItems[++initIndex];
                        }
                        this.refreshOverflow();
                    }
                }, toolbar_decorate([
                    (0, ej2_base /* Collection */ .FE)([], Item)
                ], Toolbar.prototype, "items", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('auto')
                ], Toolbar.prototype, "width", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('auto')
                ], Toolbar.prototype, "height", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Toolbar.prototype, "cssClass", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)('Scrollable')
                ], Toolbar.prototype, "overflowMode", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)()
                ], Toolbar.prototype, "scrollStep", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], Toolbar.prototype, "enableCollision", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], Toolbar.prototype, "enableHtmlSanitizer", void 0), toolbar_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], Toolbar.prototype, "allowKeyboard", void 0), toolbar_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Toolbar.prototype, "clicked", void 0), toolbar_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Toolbar.prototype, "created", void 0), toolbar_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Toolbar.prototype, "destroyed", void 0), toolbar_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Toolbar.prototype, "beforeCreate", void 0), Toolbar = toolbar_decorate([
                    ej2_base /* NotifyPropertyChanges */ .Zl
                ], Toolbar);
            }(ej2_base /* Component */ .wA), common_extends = (extendStatics3 = function(d, b) {
                return (extendStatics3 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics3(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), common_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            /**
 * @param {Object} props - Specifies the properties
 * @param {string[]} model - Specifies the model
 * @returns {Object} Component Model
 */ function getModel(props, model) {
                for(var obj = (0, ej2_base /* extend */ .l7)({}, props), _i = 0, _a = Object.keys(obj); _i < _a.length; _i++){
                    var prop = _a[_i];
                    0 > model.indexOf(prop) && (0, ej2_base /* deleteObject */ .ex)(obj, prop);
                }
                return obj;
            }
            /**
 * Defines the items of Split Button/DropDownButton.
 */ var common_Item = /** @class */ function(_super) {
                function Item() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return common_extends(Item, _super), common_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Item.prototype, "iconCss", void 0), common_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Item.prototype, "id", void 0), common_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Item.prototype, "separator", void 0), common_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Item.prototype, "text", void 0), common_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Item.prototype, "url", void 0), common_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Item.prototype, "disabled", void 0), Item;
            }(ej2_base /* ChildProperty */ .rt), drop_down_button_extends = (extendStatics4 = function(d, b) {
                return (extendStatics4 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics4(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), drop_down_button_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, classNames = {
                ICON: 'e-menu-icon',
                ITEM: 'e-item',
                POPUP: 'e-dropdown-popup',
                SEPARATOR: 'e-separator',
                VERTICAL: 'e-vertical'
            }, DropDownButton = /** @class */ function(_super) {
                /**
     * Constructor for creating the widget
     *
     * @param  {DropDownButtonModel} options - Specifies dropdown button model
     * @param  {string|HTMLButtonElement} element - Specifies element
     * @hidden
     */ function DropDownButton(options, element) {
                    var _this = _super.call(this, options, element) || this;
                    return _this.isPopupCreated = !0, _this;
                }
                return drop_down_button_extends(DropDownButton, _super), DropDownButton.prototype.preRender = function() {
                /** */ }, /**
     * Get the properties to be maintained in the persisted state.
     *
     * @returns {string} - Persist data
     */ DropDownButton.prototype.getPersistData = function() {
                    return this.addOnPersist([]);
                }, /**
     * To open/close DropDownButton popup based on current state of the DropDownButton.
     *
     * @returns {void}
     */ DropDownButton.prototype.toggle = function() {
                    this.canOpen() ? this.openPopUp() : this.closePopup();
                }, /**
     * Initialize the Component rendering
     *
     * @returns {void}
     * @private
     */ DropDownButton.prototype.render = function() {
                    this.initialize(), this.disabled || this.wireEvents(), this.renderComplete();
                }, /**
     * Adds a new item to the menu. By default, new item appends to the list as the last item,
     * but you can insert based on the text parameter.
     *
     * @param  { ItemModel[] } items - Specifies an array of JSON data.
     * @param { string } text - Specifies the text to insert the newly added item in the menu.
     * @returns {void}.
     */ DropDownButton.prototype.addItems = function(items, text) {
                    for(var newItem, idx = this.items.length, j = 0, len = this.items.length; j < len; j++)if (text === this.items[j].text) {
                        idx = j;
                        break;
                    }
                    for(var i = items.length - 1; i >= 0; i--)// eslint-disable-next-line @typescript-eslint/no-explicit-any
                    newItem = new common_Item(this, 'items', items[i], !0), this.items.splice(idx, 0, newItem);
                    this.canOpen() || this.createItems();
                }, /**
     * Removes the items from the menu.
     *
     * @param  { string[] } items - Specifies an array of string to remove the items.
     * @param { string } isUniqueId - Set `true` if specified items is a collection of unique id.
     * @returns {void}.
     */ DropDownButton.prototype.removeItems = function(items, isUniqueId) {
                    for(var refresh = !1, i = 0, len = items.length; i < len; i++)for(var j = 0, len_1 = this.items.length; j < len_1; j++)if (items[i] === (isUniqueId ? this.items[j].id : this.items[j].text)) {
                        this.items.splice(j, 1), refresh = !0;
                        break;
                    }
                    refresh && this.getULElement() && this.createItems();
                }, DropDownButton.prototype.createPopup = function() {
                    var _a, div = this.createElement('div', {
                        className: classNames.POPUP,
                        id: this.element.id + '-popup'
                    });
                    document.body.appendChild(div), this.dropDown = new popup_popup /* Popup */ .GI(div, {
                        relateTo: this.element,
                        collision: {
                            X: 'fit',
                            Y: 'flip'
                        },
                        position: {
                            X: 'left',
                            Y: 'bottom'
                        },
                        targetType: 'relative',
                        content: this.target ? this.getTargetElement() : '',
                        enableRtl: this.enableRtl
                    }), 'fixed' === this.dropDown.element.style.position && this.dropDown.refreshPosition(this.element), this.dropDown.hide(), (0, ej2_base /* attributes */ .Y4)(this.element, ((_a = {})['aria-haspopup'] = this.items.length || this.target ? 'true' : 'false', _a['aria-expanded'] = 'false', _a['aria-owns'] = this.getPopUpElement().id, _a.type = 'button', _a['aria-label'] = this.element.textContent ? this.element.textContent : 'dropdownbutton', _a)), this.cssClass && (0, ej2_base /* addClass */ .cn)([
                        div
                    ], this.cssClass.split(' ')), this.isPopupCreated = !0;
                }, DropDownButton.prototype.getTargetElement = function() {
                    return 'string' == typeof this.target ? (0, ej2_base /* select */ .Ys)(this.target) : this.target;
                }, DropDownButton.prototype.createItems = function(appendItems) {
                    var span, item, li, eventArgs, items = this.items, showIcon = this.hasIcon(this.items, 'iconCss'), ul = this.getULElement();
                    ul ? ul.innerHTML = '' : ul = this.createElement('ul', {
                        attrs: {
                            role: 'menu',
                            tabindex: '0'
                        }
                    });
                    for(var i = 0; i < items.length; i++){
                        var tempItem = (item = items[i]).text;
                        li = this.createElement('li', {
                            innerHTML: item.url ? '' : tempItem,
                            className: item.separator ? classNames.ITEM + ' ' + classNames.SEPARATOR : classNames.ITEM,
                            attrs: {
                                role: 'menuItem',
                                tabindex: '-1',
                                'aria-label': tempItem
                            },
                            id: item.id ? item.id : (0, ej2_base /* getUniqueID */ .QI)('e-' + this.getModuleName() + '-item')
                        }), this.enableHtmlSanitizer ? li.textContent = item.url ? '' : tempItem : li.innerHTML = item.url ? '' : tempItem, item.url && (li.appendChild(this.createAnchor(item)), li.classList.add('e-url')), item.iconCss ? (span = this.createElement('span', {
                            className: classNames.ICON + ' ' + item.iconCss
                        }), item.url ? li.childNodes[0].appendChild(span) : li.insertBefore(span, li.childNodes[0])) : showIcon && !item.separator && li.classList.add('e-blank-icon'), item.disabled && li.classList.add('e-disabled'), eventArgs = {
                            item: item,
                            element: li
                        }, this.trigger('beforeItemRender', eventArgs), ul.appendChild(li);
                    }
                    appendItems && this.getPopUpElement().appendChild(ul), showIcon && /** @hidden
 * @param {HTMLElement} popup - Specifies the popup element.
 * @returns {void}
 */ function(popup) {
                        var cssProp, blankIconList = [].slice.call(popup.getElementsByClassName('e-blank-icon'));
                        if (blankIconList.length) {
                            var iconLi = popup.querySelector('.e-item:not(.e-blank-icon):not(.e-separator)');
                            if (!(0, ej2_base /* isNullOrUndefined */ .le)(iconLi)) {
                                iconLi.classList.contains('e-url') && (iconLi = iconLi.querySelector('.e-menu-url'));
                                var icon = iconLi.querySelector('.e-menu-icon');
                                cssProp = popup.classList.contains('e-rtl') ? {
                                    padding: 'paddingRight',
                                    margin: 'marginLeft'
                                } : {
                                    padding: 'paddingLeft',
                                    margin: 'marginRight'
                                };
                                /* eslint-disable */ var size = parseInt(getComputedStyle(icon).fontSize, 10) + parseInt(getComputedStyle(icon)[cssProp.margin], 10) + parseInt(getComputedStyle(iconLi).paddingLeft, 10) + "px";
                                blankIconList.forEach(function(li) {
                                    li.classList.contains('e-url') ? li.querySelector('.e-menu-url').style[cssProp.padding] = size : li.style[cssProp.padding] = size;
                                });
                            }
                        }
                    /* eslint-enable */ }(this.getPopUpElement());
                }, DropDownButton.prototype.hasIcon = function(items, field) {
                    for(var i = 0, len = items.length; i < len; i++)if (items[i][field]) return !0;
                    return !1;
                }, DropDownButton.prototype.createAnchor = function(item) {
                    var tempItem = this.enableHtmlSanitizer ? ej2_base /* SanitizeHtmlHelper.sanitize */ .pJ.sanitize(item.text) : item.text;
                    return this.createElement('a', {
                        className: 'e-menu-text e-menu-url',
                        innerHTML: tempItem,
                        attrs: {
                            href: item.url
                        }
                    });
                }, DropDownButton.prototype.initialize = function() {
                    this.button = new button_button /* Button */ .z({
                        iconCss: this.iconCss,
                        iconPosition: this.iconPosition,
                        cssClass: this.cssClass,
                        content: this.content,
                        disabled: this.disabled,
                        enableRtl: this.enableRtl,
                        enablePersistence: this.enablePersistence
                    }), this.button.createElement = this.createElement, this.button.appendTo(this.element), this.element.id || (this.element.id = (0, ej2_base /* getUniqueID */ .QI)('e-' + this.getModuleName())), this.appendArrowSpan(), this.setActiveElem([
                        this.element
                    ]), (!this.target || this.isColorPicker()) && this.createPopupOnClick ? this.isPopupCreated = !1 : this.createPopup();
                }, DropDownButton.prototype.isColorPicker = function() {
                    if (!this.element) return !1;
                    var prevElem = this.element.previousSibling;
                    return !!(prevElem && prevElem.classList && prevElem.classList.contains('e-split-colorpicker'));
                }, DropDownButton.prototype.appendArrowSpan = function() {
                    this.element.appendChild(this.createElement('span', {
                        className: "e-btn-icon e-icons e-icon-" + (this.cssClass.indexOf(classNames.VERTICAL) > -1 ? 'bottom' : 'right') + ' e-caret'
                    }));
                }, DropDownButton.prototype.setActiveElem = function(elem) {
                    this.activeElem = elem;
                }, /**
     * Get component name.
     *
     * @returns {string} - Module Name
     * @private
     */ DropDownButton.prototype.getModuleName = function() {
                    return 'dropdown-btn';
                }, DropDownButton.prototype.canOpen = function() {
                    var val = !1;
                    return this.isPopupCreated && (val = this.getPopUpElement().classList.contains('e-popup-close')), val;
                }, /**
     * Destroys the widget.
     *
     * @returns {void}
     */ DropDownButton.prototype.destroy = function() {
                    var classList_1, _this = this;
                    _super.prototype.destroy.call(this), 'dropdown-btn' === this.getModuleName() && (this.element.querySelector('span.e-caret') && (0, ej2_base /* detach */ .og)(this.element.querySelector('span.e-caret')), this.cssClass && (classList_1 = this.cssClass.split(' ')), this.button.destroy(), classList_1 && (0, ej2_base /* removeClass */ .IV)([
                        this.element
                    ], classList_1), (0, ej2_base /* removeClass */ .IV)(this.activeElem, [
                        'e-active'
                    ]), (this.element.getAttribute('class') ? [
                        'aria-haspopup',
                        'aria-expanded',
                        'aria-owns',
                        'type'
                    ] : [
                        'aria-haspopup',
                        'aria-expanded',
                        'aria-owns',
                        'type',
                        'class'
                    ]).forEach(function(key) {
                        _this.element.removeAttribute(key);
                    }), this.popupUnWireEvents(), this.destroyPopup(), this.isPopupCreated = !1, this.disabled || this.unWireEvents());
                }, DropDownButton.prototype.destroyPopup = function() {
                    if (this.isPopupCreated) {
                        if (this.dropDown.destroy(), this.getPopUpElement()) {
                            var popupEle = document.getElementById(this.getPopUpElement().id);
                            popupEle && ((0, ej2_base /* removeClass */ .IV)([
                                popupEle
                            ], [
                                'e-popup-open',
                                'e-popup-close'
                            ]), (0, ej2_base /* detach */ .og)(popupEle));
                        }
                        ej2_base /* EventHandler.remove */ .bi.remove(this.getPopUpElement(), 'click', this.clickHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.getPopUpElement(), 'keydown', this.keyBoardHandler), this.isPopupCreated && (this.dropDown = void 0);
                    }
                    this.isPopupCreated = !1;
                }, DropDownButton.prototype.getPopUpElement = function() {
                    var val = null;
                    return this.dropDown && (val = this.dropDown.element), val;
                }, DropDownButton.prototype.getULElement = function() {
                    var val = null;
                    return this.getPopUpElement() && (val = this.getPopUpElement().children[0]), val;
                }, DropDownButton.prototype.wireEvents = function() {
                    this.delegateMousedownHandler = this.mousedownHandler.bind(this), this.createPopupOnClick || ej2_base /* EventHandler.add */ .bi.add(document, 'mousedown touchstart', this.delegateMousedownHandler, this), ej2_base /* EventHandler.add */ .bi.add(this.element, 'click', this.clickHandler, this), ej2_base /* EventHandler.add */ .bi.add(this.element, 'keydown', this.keyBoardHandler, this);
                }, DropDownButton.prototype.popupWireEvents = function() {
                    var popupElement = this.getPopUpElement();
                    this.createPopupOnClick && ej2_base /* EventHandler.add */ .bi.add(document, 'mousedown touchstart', this.delegateMousedownHandler, this), popupElement && (ej2_base /* EventHandler.add */ .bi.add(popupElement, 'click', this.clickHandler, this), ej2_base /* EventHandler.add */ .bi.add(popupElement, 'keydown', this.keyBoardHandler, this), this.closeActionEvents && ej2_base /* EventHandler.add */ .bi.add(popupElement, this.closeActionEvents, this.focusoutHandler, this)), this.rippleFn = (0, ej2_base /* rippleEffect */ .qx)(popupElement, {
                        selector: '.' + classNames.ITEM
                    });
                }, DropDownButton.prototype.popupUnWireEvents = function() {
                    var popupElement = this.getPopUpElement();
                    this.createPopupOnClick && ej2_base /* EventHandler.remove */ .bi.remove(document, 'mousedown touchstart', this.delegateMousedownHandler), popupElement && popupElement.parentElement && (ej2_base /* EventHandler.remove */ .bi.remove(popupElement, 'click', this.clickHandler), ej2_base /* EventHandler.remove */ .bi.remove(popupElement, 'keydown', this.keyBoardHandler), this.closeActionEvents && ej2_base /* EventHandler.remove */ .bi.remove(popupElement, this.closeActionEvents, this.focusoutHandler));
                }, /**
     * Handles the keyboard interactions.
     *
     * @param {KeyboardEventArgs} e - Specifies keyboard event args.
     * @returns {void}
     * @hidden
     */ DropDownButton.prototype.keyBoardHandler = function(e) {
                    if (e.target !== this.element || 9 !== e.keyCode && (e.altKey || 40 !== e.keyCode) && 38 !== e.keyCode) switch(e.keyCode){
                        case 38:
                        case 40:
                            e.altKey && (38 === e.keyCode || 40 === e.keyCode) ? this.keyEventHandler(e) : this.upDownKeyHandler(e);
                            break;
                        case 9:
                        case 13:
                        case 27:
                        case 32:
                            this.keyEventHandler(e);
                    }
                }, DropDownButton.prototype.upDownKeyHandler = function(e) {
                    this.target && (38 === e.keyCode || 40 === e.keyCode) || (e.preventDefault(), /** @hidden
 * @param {HTMLElement} ul - Specifies the UL element
 * @param {number} keyCode - Specifies the keycode
 * @returns {void}
 */ function(ul, keyCode) {
                        var li, defaultIdx = 40 === keyCode ? 0 : ul.childElementCount - 1, liIdx = defaultIdx, selectedLi = ul.querySelector('.e-selected');
                        selectedLi && selectedLi.classList.remove('e-selected');
                        for(var i = 0, len = ul.children.length; i < len; i++)ul.children[i].classList.contains('e-focused') && (li = ul.children[i], liIdx = i, li.classList.remove('e-focused'), 40 === keyCode ? liIdx++ : liIdx--, liIdx === (40 === keyCode ? ul.childElementCount : -1) && (liIdx = defaultIdx));
                        li = ul.children[liIdx], -1 !== (liIdx = /**
 * Get Valid LI element
 *
 * @param {HTMLElement} ul - Specifies the UL element
 * @param {Element} li - Specifies the LI element
 * @param {number} index - Specifies the index
 * @param {number} keyCode - Specifies the keycode
 * @param {number} count - Specifies the count
 * @returns {number} - Index
 */ function isValidLI(ul, li, index, keyCode, count) {
                            if (void 0 === count && (count = 0), (li.classList.contains('e-separator') || li.classList.contains('e-disabled')) && (index === (40 === keyCode ? ul.childElementCount - 1 : 0) ? index = 40 === keyCode ? 0 : ul.childElementCount - 1 : 40 === keyCode ? index++ : index--), (li = ul.children[index]).classList.contains('e-separator') || li.classList.contains('e-disabled')) {
                                if (++count === ul.childElementCount) return index = -1;
                                index = isValidLI(ul, li, index, keyCode, count);
                            }
                            return index;
                        }(ul, li, liIdx, keyCode)) && ((0, ej2_base /* addClass */ .cn)([
                            ul.children[liIdx]
                        ], 'e-focused'), ul.children[liIdx].focus());
                    }(this.getULElement(), e.keyCode));
                }, DropDownButton.prototype.keyEventHandler = function(e) {
                    !(this.target && (13 === e.keyCode || 9 === e.keyCode) || e.target && e.target.className.indexOf('e-edit-template') > -1 && 32 === e.keyCode) && (9 !== e.keyCode && e.preventDefault(), 27 === e.keyCode || 38 === e.keyCode || 9 === e.keyCode ? this.canOpen() || this.closePopup(e, this.element) : this.clickHandler(e));
                }, DropDownButton.prototype.getLI = function(elem) {
                    return 'LI' === elem.tagName ? elem : (0, ej2_base /* closest */ .oq)(elem, 'li');
                }, DropDownButton.prototype.mousedownHandler = function(e) {
                    var trgt = e.target;
                    !this.dropDown || this.canOpen() || (0, ej2_base /* closest */ .oq)(trgt, '[id="' + this.getPopUpElement().id + '"]') || (0, ej2_base /* closest */ .oq)(trgt, '[id="' + this.element.id + '"]') || this.closePopup(e);
                }, DropDownButton.prototype.focusoutHandler = function(e) {
                    this.isPopupCreated && !this.canOpen() && this.closePopup(e);
                }, DropDownButton.prototype.clickHandler = function(e) {
                    var trgt = e.target;
                    if ((0, ej2_base /* closest */ .oq)(trgt, '[id="' + this.element.id + '"]')) this.createPopupOnClick && (!this.target || this.isColorPicker()) ? this.isPopupCreated ? this.closePopup(e, this.activeElem[0]) : (this.createPopup(), this.openPopUp(e)) : this.getPopUpElement().classList.contains('e-popup-close') ? this.openPopUp(e) : this.closePopup(e);
                    else if ((0, ej2_base /* closest */ .oq)(trgt, '[id="' + this.getPopUpElement().id + '"]')) {
                        var eventArgs = void 0, liIdx = void 0, item = void 0, li = this.getLI(trgt);
                        li && (liIdx = Array.prototype.indexOf.call(this.getULElement().children, li), (item = this.items[liIdx]) && (eventArgs = {
                            element: li,
                            item: item
                        }, this.trigger('select', eventArgs)), this.closePopup(e, this.activeElem[0]));
                    }
                }, DropDownButton.prototype.openPopUp = function(e) {
                    var _this = this;
                    void 0 === e && (e = null);
                    var popupElem = this.getPopUpElement();
                    if (this.target) {
                        if (this.activeElem.length > 1) {
                            var splitButton = (0, ej2_base /* getComponent */ .Xr)(this.activeElem[0], 'split-btn');
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            splitButton.isReact && popupElem.childNodes.length < 1 && (// eslint-disable-next-line @typescript-eslint/no-explicit-any
                            splitButton.appendReactElement(this.getTargetElement(), this.getPopUpElement()), this.renderReactTemplates());
                        } else // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        this.isReact && popupElem.childNodes.length < 1 && (// eslint-disable-next-line @typescript-eslint/no-explicit-any
                        this.appendReactElement(this.getTargetElement(), this.getPopUpElement()), this.renderReactTemplates());
                    } else this.createItems(!0);
                    var ul = this.getULElement();
                    this.popupWireEvents();
                    var beforeOpenArgs = {
                        element: ul,
                        items: this.items,
                        event: e,
                        cancel: !1
                    };
                    this.trigger('beforeOpen', beforeOpenArgs, function(observedArgs) {
                        if (!observedArgs.cancel) {
                            var ul_1 = _this.getULElement();
                            _this.dropDown.show(null, _this.element), (0, ej2_base /* addClass */ .cn)([
                                _this.element
                            ], 'e-active'), _this.element.setAttribute('aria-expanded', 'true'), ul_1 && ul_1.focus();
                            var openArgs = {
                                element: ul_1,
                                items: _this.items
                            };
                            _this.trigger('open', openArgs);
                        }
                    });
                }, DropDownButton.prototype.closePopup = function(e, focusEle) {
                    var _this = this;
                    void 0 === e && (e = null);
                    var beforeCloseArgs = {
                        element: this.getULElement(),
                        items: this.items,
                        event: e,
                        cancel: !1
                    }, popupElement = this.getPopUpElement();
                    popupElement && ej2_base /* EventHandler.remove */ .bi.remove(popupElement, 'keydown', this.keyBoardHandler), this.trigger('beforeClose', beforeCloseArgs, function(observedArgs) {
                        if (!observedArgs.cancel) {
                            _this.popupUnWireEvents();
                            var ul_2 = _this.getULElement(), selectedLi = void 0;
                            ul_2 && (selectedLi = ul_2.querySelector('.e-selected')), selectedLi && selectedLi.classList.remove('e-selected'), _this.dropDown.hide(), (0, ej2_base /* removeClass */ .IV)(_this.activeElem, 'e-active'), _this.element.setAttribute('aria-expanded', 'false'), focusEle && focusEle.focus();
                            var closeArgs = {
                                element: ul_2,
                                items: _this.items
                            };
                            _this.trigger('close', closeArgs), !_this.target && ul_2 && (0, ej2_base /* detach */ .og)(ul_2), (!_this.target || _this.isColorPicker()) && _this.createPopupOnClick && _this.destroyPopup(), _this.target && (_this.isPopupCreated = !_this.createPopupOnClick);
                        }
                    });
                }, DropDownButton.prototype.unWireEvents = function() {
                    this.createPopupOnClick || ej2_base /* EventHandler.remove */ .bi.remove(document, 'mousedown touchstart', this.delegateMousedownHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'click', this.clickHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'keydown', this.keyBoardHandler), this.isPopupCreated && (ej2_base /* EventHandler.remove */ .bi.remove(this.getPopUpElement(), 'click', this.clickHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.getPopUpElement(), 'keydown', this.keyBoardHandler));
                }, /**
     * Called internally if any of the property value changed.
     *
     * @param  {DropDownButtonModel} newProp - Specifies new properties
     * @param  {DropDownButtonModel} oldProp - Specifies old properties
     * @returns {void}
     * @private
     */ DropDownButton.prototype.onPropertyChanged = function(newProp, oldProp) {
                    var popupElement;
                    this.button.setProperties(getModel(newProp, [
                        'content',
                        'cssClass',
                        'iconCss',
                        'iconPosition',
                        'disabled',
                        'enableRtl'
                    ])), this.isPopupCreated && (popupElement = this.getPopUpElement(), this.dropDown.setProperties(getModel(newProp, [
                        'enableRtl'
                    ])));
                    for(var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++)switch(_a[_i]){
                        case 'content':
                            this.element.querySelector('span.e-caret') || this.appendArrowSpan();
                            break;
                        case 'disabled':
                            newProp.disabled ? (this.unWireEvents(), this.isPopupCreated && !this.canOpen() && this.closePopup()) : this.wireEvents();
                            break;
                        case 'cssClass':
                            if (newProp.cssClass.indexOf(classNames.VERTICAL) > -1) {
                                var arrowSpan = this.element.querySelector('span.e-caret');
                                (0, ej2_base /* classList */ .s1)(arrowSpan, [
                                    'e-icon-bottom'
                                ], [
                                    'e-icon-right'
                                ]);
                            }
                            this.isPopupCreated && (oldProp.cssClass && (0, ej2_base /* removeClass */ .IV)([
                                popupElement
                            ], oldProp.cssClass.split(' ')), newProp.cssClass && (0, ej2_base /* addClass */ .cn)([
                                popupElement
                            ], newProp.cssClass.split(' ')));
                            break;
                        case 'target':
                            this.dropDown.content = this.getTargetElement(), this.dropDown.dataBind();
                            break;
                        case 'items':
                            this.isPopupCreated && this.getULElement() && this.createItems();
                            break;
                        case 'createPopupOnClick':
                            newProp.createPopupOnClick ? this.destroyPopup() : this.createPopup();
                    }
                }, /**
     * Sets the focus to DropDownButton
     * its native method
     *
     * @public
     * @returns {void}
     */ DropDownButton.prototype.focusIn = function() {
                    this.element.focus();
                }, drop_down_button_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], DropDownButton.prototype, "content", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], DropDownButton.prototype, "cssClass", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], DropDownButton.prototype, "disabled", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], DropDownButton.prototype, "iconCss", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Property */ .Z9)('Left')
                ], DropDownButton.prototype, "iconPosition", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], DropDownButton.prototype, "enableHtmlSanitizer", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Collection */ .FE)([], common_Item)
                ], DropDownButton.prototype, "items", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], DropDownButton.prototype, "createPopupOnClick", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], DropDownButton.prototype, "target", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], DropDownButton.prototype, "closeActionEvents", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], DropDownButton.prototype, "beforeItemRender", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], DropDownButton.prototype, "beforeOpen", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], DropDownButton.prototype, "beforeClose", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], DropDownButton.prototype, "close", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], DropDownButton.prototype, "open", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], DropDownButton.prototype, "select", void 0), drop_down_button_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], DropDownButton.prototype, "created", void 0), DropDownButton = drop_down_button_decorate([
                    ej2_base /* NotifyPropertyChanges */ .Zl
                ], DropDownButton);
            }(ej2_base /* Component */ .wA), split_button_extends = (extendStatics5 = function(d, b) {
                return (extendStatics5 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics5(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), split_button_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, RTL = 'e-rtl', TAGNAME = 'EJS-SPLITBUTTON', SplitButton = /** @class */ function(_super) {
                /**
     * Constructor for creating the widget
     *
     * @param  {SplitButtonModel} options - Specifies the splitbutton model
     * @param  {string|HTMLButtonElement} element - Specifies the element
     * @hidden
     */ function SplitButton(options, element) {
                    return _super.call(this, options, element) || this;
                }
                return split_button_extends(SplitButton, _super), /**
     * Initialize Angular support.
     *
     * @private
     * @returns {void}
     */ SplitButton.prototype.preRender = function() {
                    var ele = this.element;
                    if (ele.tagName === TAGNAME) {
                        for(var ejInstance = (0, ej2_base /* getValue */ .NA)('ej2_instances', ele), btn = this.createElement('button', {
                            attrs: {
                                type: 'button'
                            }
                        }), wrapper = this.createElement(TAGNAME, {
                            className: 'e-' + this.getModuleName() + '-wrapper'
                        }), idx = 0, len = ele.attributes.length; idx < len; idx++)btn.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
                        ele.parentNode.insertBefore(wrapper, ele), (0, ej2_base /* detach */ .og)(ele), ele = btn, wrapper.appendChild(ele), (0, ej2_base /* setValue */ .sO)('ej2_instances', ejInstance, ele), this.wrapper = wrapper, this.element = ele;
                    }
                    this.element.id || (this.element.id = (0, ej2_base /* getUniqueID */ .QI)('e-' + this.getModuleName()));
                }, /**
     * Initialize the Component rendering.
     *
     * @returns {void}
     * @private
     */ SplitButton.prototype.render = function() {
                    this.initWrapper(), this.createPrimaryButton(), this.renderControl();
                }, SplitButton.prototype.renderControl = function() {
                    this.createSecondaryButton(), this.setActiveElem([
                        this.element,
                        this.secondaryBtnObj.element
                    ]), this.setAria(), this.wireEvents(), this.renderComplete();
                }, /**
     * Adds a new item to the menu. By default, new item appends to the list as the last item,
     * but you can insert based on the text parameter.
     *
     * @param  { ItemModel[] } items - Specifies an array of JSON data.
     * @param { string } text - Specifies the text to insert the newly added item in the menu.
     * @returns {void}.
     */ SplitButton.prototype.addItems = function(items, text) {
                    _super.prototype.addItems.call(this, items, text), this.secondaryBtnObj.items = this.items;
                }, /**
     * Removes the items from the menu.
     *
     * @param  { string[] } items - Specifies an array of string to remove the items.
     * @param { string } isUniqueId - Set `true` if specified items is a collection of unique id.
     * @returns {void}.
     */ SplitButton.prototype.removeItems = function(items, isUniqueId) {
                    _super.prototype.removeItems.call(this, items, isUniqueId), this.secondaryBtnObj.items = this.items;
                }, SplitButton.prototype.initWrapper = function() {
                    this.wrapper || (this.wrapper = this.createElement('div', {
                        className: 'e-' + this.getModuleName() + '-wrapper'
                    }), this.element.parentNode.insertBefore(this.wrapper, this.element)), this.element.classList.remove('e-' + this.getModuleName()), this.enableRtl && this.wrapper.classList.add(RTL), this.cssClass && (0, ej2_base /* addClass */ .cn)([
                        this.wrapper
                    ], this.cssClass.split(' '));
                }, SplitButton.prototype.createPrimaryButton = function() {
                    var btnModel = {
                        cssClass: this.cssClass,
                        enableRtl: this.enableRtl,
                        iconCss: this.iconCss,
                        iconPosition: this.iconPosition,
                        content: this.content,
                        disabled: this.disabled
                    };
                    this.primaryBtnObj = new button_button /* Button */ .z(btnModel), this.primaryBtnObj.createElement = this.createElement, this.primaryBtnObj.appendTo(this.element), this.element.classList.add('e-' + this.getModuleName()), this.element.type = 'button', this.wrapper.appendChild(this.element);
                }, SplitButton.prototype.createSecondaryButton = function() {
                    var _this = this, btnElem = this.createElement('button', {
                        className: 'e-icon-btn',
                        attrs: {
                            tabindex: '-1'
                        },
                        id: this.element.id + '_dropdownbtn'
                    });
                    this.wrapper.appendChild(btnElem);
                    var dropDownBtnModel = {
                        cssClass: this.cssClass,
                        disabled: this.disabled,
                        enableRtl: this.enableRtl,
                        items: this.items,
                        target: this.target,
                        createPopupOnClick: this.createPopupOnClick
                    };
                    dropDownBtnModel.beforeItemRender = function(args) {
                        _this.createPopupOnClick && (_this.secondaryBtnObj.dropDown.relateTo = _this.wrapper, _this.dropDown = _this.secondaryBtnObj.dropDown), _this.trigger('beforeItemRender', args);
                    }, dropDownBtnModel.open = function(args) {
                        _this.trigger('open', args);
                    }, dropDownBtnModel.close = function(args) {
                        _this.trigger('close', args);
                    }, dropDownBtnModel.select = function(args) {
                        _this.trigger('select', args);
                    }, dropDownBtnModel.beforeOpen = function(args) {
                        var callBackPromise = new Deferred();
                        return _this.trigger('beforeOpen', args, function(observedArgs) {
                            callBackPromise.resolve(observedArgs);
                        }), callBackPromise;
                    }, dropDownBtnModel.beforeClose = function(args) {
                        var callBackPromise = new Deferred();
                        return _this.trigger('beforeClose', args, function(observedArgs) {
                            callBackPromise.resolve(observedArgs);
                        }), callBackPromise;
                    }, this.secondaryBtnObj = new DropDownButton(dropDownBtnModel), this.secondaryBtnObj.createElement = this.createElement, this.secondaryBtnObj.appendTo(btnElem), this.createPopupOnClick || (this.secondaryBtnObj.dropDown.relateTo = this.wrapper, this.dropDown = this.secondaryBtnObj.dropDown), this.secondaryBtnObj.activeElem = [
                        this.element,
                        this.secondaryBtnObj.element
                    ], this.secondaryBtnObj.element.querySelector('.e-btn-icon').classList.remove('e-icon-right');
                }, SplitButton.prototype.setAria = function() {
                    (0, ej2_base /* attributes */ .Y4)(this.element, {
                        'aria-expanded': 'false',
                        'aria-haspopup': 'true',
                        'aria-label': this.element.textContent + ' splitbutton',
                        'aria-owns': this.element.id + '_dropdownbtn-popup'
                    });
                }, /**
     * Get component name.
     *
     * @returns {string} - Module Name
     * @private
     */ SplitButton.prototype.getModuleName = function() {
                    return 'split-btn';
                }, /**
     * To open/close SplitButton popup based on current state of the SplitButton.
     *
     * @returns {void}
     */ SplitButton.prototype.toggle = function() {
                    this.secondaryBtnObj.toggle();
                }, SplitButton.prototype.destroy = function() {
                    var _this = this, classList = [
                        RTL
                    ];
                    if (this.cssClass && (classList = classList.concat(this.cssClass.split(' '))), this.element) {
                        var element = document.getElementById(this.element.id);
                        element && element.parentElement === this.wrapper && (this.wrapper.tagName === TAGNAME ? (this.wrapper.innerHTML = '', (0, ej2_base /* removeClass */ .IV)([
                            this.wrapper
                        ], [
                            'e-rtl',
                            'e-' + this.getModuleName() + '-wrapper'
                        ]), (0, ej2_base /* removeClass */ .IV)([
                            this.wrapper
                        ], this.cssClass.split(' '))) : ((0, ej2_base /* removeClass */ .IV)([
                            this.element
                        ], classList), [
                            'aria-label',
                            'aria-haspopup',
                            'aria-expanded',
                            'aria-owns',
                            'type'
                        ].forEach(function(key) {
                            _this.element.removeAttribute(key);
                        }), this.wrapper.parentNode.insertBefore(this.element, this.wrapper), (0, ej2_base /* remove */ .Od)(this.wrapper)), this.unWireEvents());
                    }
                    this.primaryBtnObj.destroy(), this.secondaryBtnObj.destroy(), _super.prototype.destroy.call(this), this.element.getAttribute('class') || this.element.removeAttribute('class');
                }, SplitButton.prototype.wireEvents = function() {
                    ej2_base /* EventHandler.add */ .bi.add(this.element, 'click', this.primaryBtnClickHandler, this), new ej2_base /* KeyboardEvents */ .nv(this.element, {
                        keyAction: this.btnKeyBoardHandler.bind(this),
                        keyConfigs: {
                            altdownarrow: 'alt+downarrow'
                        }
                    });
                }, SplitButton.prototype.unWireEvents = function() {
                    ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'click', this.primaryBtnClickHandler), (0, ej2_base /* getInstance */ .s8)(this.element, ej2_base /* KeyboardEvents */ .nv).destroy();
                }, SplitButton.prototype.primaryBtnClickHandler = function() {
                    this.trigger('click', {
                        element: this.element
                    });
                }, SplitButton.prototype.btnKeyBoardHandler = function(e) {
                    'altdownarrow' === e.action && this.clickHandler(e);
                }, /**
     * Called internally if any of the property value changed.
     *
     * @param  {SplitButtonModel} newProp - Specifies new properties
     * @param  {SplitButtonModel} oldProp - Specifies old properties
     * @returns {void}
     */ SplitButton.prototype.onPropertyChanged = function(newProp, oldProp) {
                    var model = [
                        'content',
                        'iconCss',
                        'iconPosition',
                        'cssClass',
                        'disabled',
                        'enableRtl'
                    ];
                    this.primaryBtnObj.setProperties(getModel(newProp, model)), model = [
                        'beforeOpen',
                        'beforeItemRender',
                        'select',
                        'open',
                        'close',
                        'cssClass',
                        'disabled',
                        'enableRtl',
                        'createPopupOnClick'
                    ], Object.keys(newProp).indexOf('items') > -1 && (this.secondaryBtnObj.items = newProp.items, this.secondaryBtnObj.dataBind()), this.secondaryBtnObj.setProperties(getModel(newProp, model));
                    for(var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++)switch(_a[_i]){
                        case 'cssClass':
                            oldProp.cssClass && (0, ej2_base /* removeClass */ .IV)([
                                this.wrapper
                            ], oldProp.cssClass.split(' ')), (0, ej2_base /* addClass */ .cn)([
                                this.wrapper
                            ], newProp.cssClass.split(' '));
                            break;
                        case 'enableRtl':
                            newProp.enableRtl ? (0, ej2_base /* addClass */ .cn)([
                                this.wrapper
                            ], RTL) : (0, ej2_base /* removeClass */ .IV)([
                                this.wrapper
                            ], RTL);
                    }
                }, /**
     * Sets the focus to SplitButton
     * its native method
     *
     * @public
     * @returns {void}
     */ SplitButton.prototype.focusIn = function() {
                    this.element.focus();
                }, split_button_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], SplitButton.prototype, "content", void 0), split_button_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], SplitButton.prototype, "cssClass", void 0), split_button_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], SplitButton.prototype, "disabled", void 0), split_button_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], SplitButton.prototype, "iconCss", void 0), split_button_decorate([
                    (0, ej2_base /* Property */ .Z9)('Left')
                ], SplitButton.prototype, "iconPosition", void 0), split_button_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], SplitButton.prototype, "createPopupOnClick", void 0), split_button_decorate([
                    (0, ej2_base /* Collection */ .FE)([], common_Item)
                ], SplitButton.prototype, "items", void 0), split_button_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], SplitButton.prototype, "target", void 0), split_button_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], SplitButton.prototype, "beforeItemRender", void 0), split_button_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], SplitButton.prototype, "beforeOpen", void 0), split_button_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], SplitButton.prototype, "beforeClose", void 0), split_button_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], SplitButton.prototype, "click", void 0), split_button_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], SplitButton.prototype, "close", void 0), split_button_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], SplitButton.prototype, "open", void 0), split_button_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], SplitButton.prototype, "select", void 0), split_button_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], SplitButton.prototype, "created", void 0), SplitButton = split_button_decorate([
                    ej2_base /* NotifyPropertyChanges */ .Zl
                ], SplitButton);
            }(DropDownButton), Deferred = function() {
                var _this = this;
                /**
         * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.
         */ this.promise = new Promise(function(resolve, reject) {
                    _this.resolve = resolve, _this.reject = reject;
                }), /**
         * Defines the callback function triggers when the Deferred object is rejected.
         */ this.catch = this.promise.catch.bind(this.promise), /**
         * Defines the callback function triggers when the Deferred object is resolved.
         */ this.then = this.promise.then.bind(this.promise);
            }, collision = __webpack_require__(4895), tooltip_extends = (extendStatics6 = function(d, b) {
                return (extendStatics6 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics6(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), tooltip_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, ROOT = 'e-tooltip', tooltip_RTL = 'e-rtl', TOOLTIP_WRAP = 'e-tooltip-wrap', CONTENT = 'e-tip-content', ARROW_TIP = 'e-arrow-tip', ARROW_TIP_OUTER = 'e-arrow-tip-outer', ARROW_TIP_INNER = 'e-arrow-tip-inner', TIP_BOTTOM = 'e-tip-bottom', TIP_TOP = 'e-tip-top', TIP_LEFT = 'e-tip-left', TIP_RIGHT = 'e-tip-right', POPUP_ROOT = 'e-popup', POPUP_OPEN = 'e-popup-open', POPUP_CLOSE = 'e-popup-close', POPUP_LIB = 'e-lib', POPUP_CONTAINER = 'e-tooltip-popup-container', Animation = /** @class */ function(_super) {
                function Animation() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return tooltip_extends(Animation, _super), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)({
                        effect: 'FadeIn',
                        duration: 150,
                        delay: 0
                    })
                ], Animation.prototype, "open", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)({
                        effect: 'FadeOut',
                        duration: 150,
                        delay: 0
                    })
                ], Animation.prototype, "close", void 0), Animation;
            }(ej2_base /* ChildProperty */ .rt), Tooltip = /** @class */ function(_super) {
                /* eslint-enable */ /**
     * Constructor for creating the Tooltip Component
     *
     * @param {TooltipModel} options - specifies the options for the constructor
     * @param {string| HTMLElement} element - specifies the element for the constructor
     *
     */ function Tooltip(options, element) {
                    var _this = _super.call(this, options, element) || this;
                    return _this.mouseMoveEvent = null, _this.mouseMoveTarget = null, _this.containerElement = null, _this.isBodyContainer = !0, _this;
                }
                return tooltip_extends(Tooltip, _super), Tooltip.prototype.initialize = function() {
                    this.formatPosition(), (0, ej2_base /* addClass */ .cn)([
                        this.element
                    ], ROOT);
                }, Tooltip.prototype.formatPosition = function() {
                    var _a, _b;
                    0 === this.position.indexOf('Top') || 0 === this.position.indexOf('Bottom') ? (_a = this.position.split(/(?=[A-Z])/), this.tooltipPositionY = _a[0], this.tooltipPositionX = _a[1]) : (_b = this.position.split(/(?=[A-Z])/), this.tooltipPositionX = _b[0], this.tooltipPositionY = _b[1]);
                }, Tooltip.prototype.renderArrow = function() {
                    this.setTipClass(this.position);
                    var tip = this.createElement('div', {
                        className: ARROW_TIP + ' ' + this.tipClass
                    });
                    tip.appendChild(this.createElement('div', {
                        className: ARROW_TIP_OUTER + ' ' + this.tipClass
                    })), tip.appendChild(this.createElement('div', {
                        className: ARROW_TIP_INNER + ' ' + this.tipClass
                    })), this.tooltipEle.appendChild(tip);
                }, Tooltip.prototype.setTipClass = function(position) {
                    0 === position.indexOf('Right') ? this.tipClass = TIP_LEFT : 0 === position.indexOf('Bottom') ? this.tipClass = TIP_TOP : 0 === position.indexOf('Left') ? this.tipClass = TIP_RIGHT : this.tipClass = TIP_BOTTOM;
                }, Tooltip.prototype.renderPopup = function(target) {
                    var elePos = this.mouseTrail ? {
                        top: 0,
                        left: 0
                    } : this.getTooltipPosition(target);
                    this.tooltipEle.classList.remove(POPUP_LIB), this.popupObj = new popup_popup /* Popup */ .GI(this.tooltipEle, {
                        height: this.height,
                        width: this.width,
                        position: {
                            X: elePos.left,
                            Y: elePos.top
                        },
                        enableRtl: this.enableRtl,
                        open: this.openPopupHandler.bind(this),
                        close: this.closePopupHandler.bind(this)
                    });
                }, Tooltip.prototype.getTooltipPosition = function(target) {
                    this.tooltipEle.style.display = 'block';
                    var pos = (0, position /* calculatePosition */ .k)(target, this.tooltipPositionX, this.tooltipPositionY, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect()), offsetPos = this.calculateTooltipOffset(this.position), collisionPosition = this.calculateElementPosition(pos, offsetPos), collisionLeft = collisionPosition[0], collisionTop = collisionPosition[1], elePos = this.collisionFlipFit(target, collisionLeft, collisionTop);
                    return this.tooltipEle.style.display = '', elePos;
                }, Tooltip.prototype.windowResize = function() {
                    this.reposition(this.findTarget());
                }, Tooltip.prototype.reposition = function(target) {
                    if (this.popupObj && target) {
                        var elePos = this.getTooltipPosition(target);
                        this.popupObj.position = {
                            X: elePos.left,
                            Y: elePos.top
                        }, this.popupObj.dataBind();
                    }
                }, Tooltip.prototype.openPopupHandler = function() {
                    !this.mouseTrail && this.needTemplateReposition() && this.reposition(this.findTarget()), this.trigger('afterOpen', this.tooltipEventArgs);
                }, Tooltip.prototype.closePopupHandler = function() {
                    this.clearTemplate([
                        'content'
                    ]), this.clear(), this.trigger('afterClose', this.tooltipEventArgs);
                }, Tooltip.prototype.calculateTooltipOffset = function(position) {
                    var pos = {
                        top: 0,
                        left: 0
                    }, tooltipEleWidth = this.tooltipEle.offsetWidth, tooltipEleHeight = this.tooltipEle.offsetHeight, arrowEle = (0, ej2_base /* select */ .Ys)('.' + ARROW_TIP, this.tooltipEle), tipWidth = arrowEle ? arrowEle.offsetWidth : 0, tipHeight = arrowEle ? arrowEle.offsetHeight : 0, tipAdjust = this.showTipPointer ? 0 : 8, tipHeightAdjust = tipHeight / 2 + 2 + (this.tooltipEle.offsetHeight - this.tooltipEle.clientHeight), tipWidthAdjust = tipWidth / 2 + 2 + (this.tooltipEle.offsetWidth - this.tooltipEle.clientWidth);
                    switch(this.mouseTrail && (tipAdjust += 2), position){
                        case 'RightTop':
                            pos.left += tipWidth + tipAdjust, pos.top -= tooltipEleHeight - tipHeightAdjust;
                            break;
                        case 'RightCenter':
                            pos.left += tipWidth + tipAdjust, pos.top -= tooltipEleHeight / 2;
                            break;
                        case 'RightBottom':
                            pos.left += tipWidth + tipAdjust, pos.top -= tipHeightAdjust;
                            break;
                        case 'BottomRight':
                            pos.top += tipHeight + tipAdjust, pos.left -= tipWidthAdjust;
                            break;
                        case 'BottomCenter':
                            pos.top += tipHeight + tipAdjust, pos.left -= tooltipEleWidth / 2;
                            break;
                        case 'BottomLeft':
                            pos.top += tipHeight + tipAdjust, pos.left -= tooltipEleWidth - tipWidthAdjust;
                            break;
                        case 'LeftBottom':
                            pos.left -= tipWidth + tooltipEleWidth + tipAdjust, pos.top -= tipHeightAdjust;
                            break;
                        case 'LeftCenter':
                            pos.left -= tipWidth + tooltipEleWidth + tipAdjust, pos.top -= tooltipEleHeight / 2;
                            break;
                        case 'LeftTop':
                            pos.left -= tipWidth + tooltipEleWidth + tipAdjust, pos.top -= tooltipEleHeight - tipHeightAdjust;
                            break;
                        case 'TopLeft':
                            pos.top -= tooltipEleHeight + tipHeight + tipAdjust, pos.left -= tooltipEleWidth - tipWidthAdjust;
                            break;
                        case 'TopRight':
                            pos.top -= tooltipEleHeight + tipHeight + tipAdjust, pos.left -= tipWidthAdjust;
                            break;
                        default:
                            pos.top -= tooltipEleHeight + tipHeight + tipAdjust, pos.left -= tooltipEleWidth / 2;
                    }
                    return pos.left += this.offsetX, pos.top += this.offsetY, pos;
                }, Tooltip.prototype.updateTipPosition = function(position) {
                    var selEle = (0, ej2_base /* selectAll */ .td)('.' + ARROW_TIP + ',.' + ARROW_TIP_OUTER + ',.' + ARROW_TIP_INNER, this.tooltipEle), removeList = [
                        TIP_BOTTOM,
                        TIP_TOP,
                        TIP_LEFT,
                        TIP_RIGHT
                    ];
                    (0, ej2_base /* removeClass */ .IV)(selEle, removeList), this.setTipClass(position), (0, ej2_base /* addClass */ .cn)(selEle, this.tipClass);
                }, Tooltip.prototype.adjustArrow = function(target, position, tooltipPositionX, tooltipPositionY) {
                    if (!1 !== this.showTipPointer) {
                        this.updateTipPosition(position), this.tooltipEle.style.display = 'block';
                        var leftValue, topValue, tooltipWidth = this.tooltipEle.clientWidth, tooltipHeight = this.tooltipEle.clientHeight, arrowEle = (0, ej2_base /* select */ .Ys)('.' + ARROW_TIP, this.tooltipEle), arrowInnerELe = (0, ej2_base /* select */ .Ys)('.' + ARROW_TIP_INNER, this.tooltipEle), tipWidth = arrowEle.offsetWidth, tipHeight = arrowEle.offsetHeight;
                        if (this.tooltipEle.style.display = '', this.tipClass === TIP_BOTTOM || this.tipClass === TIP_TOP) {
                            if (this.tipClass === TIP_BOTTOM ? (topValue = '99.9%', // Arrow icon aligned -2px height from ArrowOuterTip div
                            arrowInnerELe.style.top = '-' + (tipHeight - 2) + 'px') : (topValue = -(tipHeight - 1) + 'px', // Arrow icon aligned -6px height from ArrowOuterTip div
                            arrowInnerELe.style.top = '-' + (tipHeight - 6) + 'px'), target) {
                                var tipPosExclude = 'Center' !== tooltipPositionX || tooltipWidth > target.offsetWidth || this.mouseTrail;
                                leftValue = tipPosExclude && 'Left' === tooltipPositionX || !tipPosExclude && 'End' === this.tipPointerPosition ? tooltipWidth - tipWidth - 2 + 'px' : tipPosExclude && 'Right' === tooltipPositionX || !tipPosExclude && 'Start' === this.tipPointerPosition ? "2px" : tipPosExclude && ('End' === this.tipPointerPosition || 'Start' === this.tipPointerPosition) ? 'End' === this.tipPointerPosition ? target.offsetWidth + (this.tooltipEle.offsetWidth - target.offsetWidth) / 2 - tipWidth / 2 - 2 + 'px' : (this.tooltipEle.offsetWidth - target.offsetWidth) / 2 - tipWidth / 2 + 2 + 'px' : tooltipWidth / 2 - tipWidth / 2 + 'px';
                            }
                        } else {
                            this.tipClass === TIP_RIGHT ? (leftValue = '99.9%', // Arrow icon aligned -2px left from ArrowOuterTip div
                            arrowInnerELe.style.left = '-' + (tipWidth - 2) + 'px') : (leftValue = -(tipWidth - 1) + 'px', // Arrow icon aligned -2px from ArrowOuterTip width
                            arrowInnerELe.style.left = -tipWidth + (tipWidth - 2) + 'px');
                            var tipPosExclude = 'Center' !== tooltipPositionY || tooltipHeight > target.offsetHeight || this.mouseTrail;
                            topValue = tipPosExclude && 'Top' === tooltipPositionY || !tipPosExclude && 'End' === this.tipPointerPosition ? tooltipHeight - tipHeight - 2 + 'px' : tipPosExclude && 'Bottom' === tooltipPositionY || !tipPosExclude && 'Start' === this.tipPointerPosition ? "2px" : tooltipHeight / 2 - tipHeight / 2 + 'px';
                        }
                        arrowEle.style.top = topValue, arrowEle.style.left = leftValue;
                    }
                }, Tooltip.prototype.renderContent = function(target) {
                    var tooltipContent = (0, ej2_base /* select */ .Ys)('.' + CONTENT, this.tooltipEle);
                    if (this.cssClass && (0, ej2_base /* addClass */ .cn)([
                        this.tooltipEle
                    ], this.cssClass.split(' ')), target && !(0, ej2_base /* isNullOrUndefined */ .le)(target.getAttribute('title')) && (target.setAttribute('data-content', target.getAttribute('title')), target.removeAttribute('title')), (0, ej2_base /* isNullOrUndefined */ .le)(this.content)) target && !(0, ej2_base /* isNullOrUndefined */ .le)(target.getAttribute('data-content')) && (tooltipContent.innerHTML = target.getAttribute('data-content'));
                    else if (tooltipContent.innerHTML = '', this.content instanceof HTMLElement) tooltipContent.appendChild(this.content);
                    else if ('string' == typeof this.content) {
                        this.enableHtmlSanitizer && this.setProperties({
                            content: ej2_base /* SanitizeHtmlHelper.sanitize */ .pJ.sanitize(this.content)
                        }, !0);
                        var tempArr = (0, ej2_base /* compile */ .MY)(this.content)({}, this, 'content', this.element.id + 'content', void 0, void 0, tooltipContent);
                        if (tempArr) {
                            if (this.enableHtmlParse) for(var nodeList = tempArr.length, i = 0; i < nodeList; i++)tooltipContent[(0, ej2_base /* append */ .R3)(tempArr, tooltipContent), 'innerHTML'] = this.content;
                            else tooltipContent.textContent = this.content;
                        }
                    } else {
                        var tempArr = (0, ej2_base /* compile */ .MY)(this.content)({}, this, 'content', this.element.id + 'content', void 0, void 0, tooltipContent);
                        tempArr && (0, ej2_base /* append */ .R3)(tempArr, tooltipContent), this.renderReactTemplates();
                    }
                }, Tooltip.prototype.renderCloseIcon = function() {
                    if (this.isSticky) {
                        var tipClose = this.createElement('div', {
                            className: "e-icons e-tooltip-close"
                        });
                        this.tooltipEle.appendChild(tipClose), ej2_base /* EventHandler.add */ .bi.add(tipClose, ej2_base /* Browser.touchStartEvent */ .AR.touchStartEvent, this.onStickyClose, this);
                    }
                }, Tooltip.prototype.addDescribedBy = function(target, id) {
                    var describedby = (target.getAttribute('aria-describedby') || '').split(/\s+/);
                    0 > describedby.indexOf(id) && describedby.push(id), (0, ej2_base /* attributes */ .Y4)(target, {
                        'aria-describedby': describedby.join(' ').trim(),
                        'data-tooltip-id': id
                    });
                }, Tooltip.prototype.removeDescribedBy = function(target) {
                    var id = target.getAttribute('data-tooltip-id'), describedby = (target.getAttribute('aria-describedby') || '').split(/\s+/), index = describedby.indexOf(id);
                    -1 !== index && describedby.splice(index, 1), target.removeAttribute('data-tooltip-id');
                    var orgdescribedby = describedby.join(' ').trim();
                    orgdescribedby ? target.setAttribute('aria-describedby', orgdescribedby) : target.removeAttribute('aria-describedby');
                }, Tooltip.prototype.tapHoldHandler = function(evt) {
                    clearTimeout(this.autoCloseTimer), this.targetHover(evt.originalEvent);
                }, Tooltip.prototype.touchEndHandler = function(e) {
                    var _this = this;
                    this.isSticky || (this.autoCloseTimer = setTimeout(function() {
                        _this.close();
                    }, 1500));
                }, Tooltip.prototype.targetClick = function(e) {
                    var target;
                    target = this.target ? (0, ej2_base /* closest */ .oq)(e.target, this.target) : this.element, !(0, ej2_base /* isNullOrUndefined */ .le)(target) && (null === target.getAttribute('data-tooltip-id') ? this.targetHover(e) : this.isSticky || this.hideTooltip(this.animation.close, e, target));
                }, Tooltip.prototype.targetHover = function(e) {
                    if (target = this.target ? (0, ej2_base /* closest */ .oq)(e.target, this.target) : this.element, !(0, ej2_base /* isNullOrUndefined */ .le)(target) && (null === target.getAttribute('data-tooltip-id') || 0 !== this.closeDelay)) {
                        for(var target, targetList = [].slice.call((0, ej2_base /* selectAll */ .td)('[data-tooltip-id= "' + this.ctrlId + '_content"]', document)), _i = 0; _i < targetList.length; _i++){
                            var target_1 = targetList[_i];
                            this.restoreElement(target_1);
                        }
                        this.showTooltip(target, this.animation.open, e);
                    }
                }, Tooltip.prototype.mouseMoveBeforeOpen = function(e) {
                    this.mouseMoveEvent = e;
                }, Tooltip.prototype.mouseMoveBeforeRemove = function() {
                    this.mouseMoveTarget && ej2_base /* EventHandler.remove */ .bi.remove(this.mouseMoveTarget, 'mousemove touchstart', this.mouseMoveBeforeOpen);
                }, Tooltip.prototype.showTooltip = function(target, showAnimation, e) {
                    var _this = this;
                    clearTimeout(this.showTimer), clearTimeout(this.hideTimer), this.openDelay && this.mouseTrail && (this.mouseMoveBeforeRemove(), this.mouseMoveTarget = target, ej2_base /* EventHandler.add */ .bi.add(this.mouseMoveTarget, 'mousemove touchstart', this.mouseMoveBeforeOpen, this)), this.tooltipEventArgs = {
                        type: e ? e.type : null,
                        cancel: !1,
                        target: target,
                        event: e || null,
                        element: this.tooltipEle,
                        isInteracted: !(0, ej2_base /* isNullOrUndefined */ .le)(e)
                    }, this.trigger('beforeRender', this.tooltipEventArgs, (function(beforeRenderArgs) {
                        _this.beforeRenderCallback(beforeRenderArgs, target, e, showAnimation);
                    }).bind(this));
                }, Tooltip.prototype.beforeRenderCallback = function(beforeRenderArgs, target, e, showAnimation) {
                    beforeRenderArgs.cancel ? (this.isHidden = !0, this.clear(), this.mouseMoveBeforeRemove()) : (this.isHidden = !1, (0, ej2_base /* isNullOrUndefined */ .le)(this.tooltipEle) ? (this.ctrlId = this.element.getAttribute('id') ? (0, ej2_base /* getUniqueID */ .QI)(this.element.getAttribute('id')) : (0, ej2_base /* getUniqueID */ .QI)('tooltip'), this.tooltipEle = this.createElement('div', {
                        className: TOOLTIP_WRAP + ' ' + POPUP_ROOT + ' ' + POPUP_LIB,
                        attrs: {
                            role: 'tooltip',
                            'aria-hidden': 'false',
                            id: this.ctrlId + '_content'
                        },
                        styles: 'width:' + (0, ej2_base /* formatUnit */ .Ac)(this.width) + ';height:' + (0, ej2_base /* formatUnit */ .Ac)(this.height) + ';position:absolute;'
                    }), this.tooltipBeforeRender(target, this), this.tooltipAfterRender(target, e, showAnimation, this)) : target && (this.adjustArrow(target, this.position, this.tooltipPositionX, this.tooltipPositionY), this.addDescribedBy(target, this.ctrlId + '_content'), this.renderContent(target), ej2_base /* Animation.stop */ .fw.stop(this.tooltipEle), this.reposition(target), this.tooltipAfterRender(target, e, showAnimation, this)));
                }, Tooltip.prototype.appendContainer = function(ctrlObj) {
                    'string' == typeof this.container ? 'body' === this.container ? this.containerElement = document.body : (this.isBodyContainer = !1, this.containerElement = (0, ej2_base /* select */ .Ys)(this.container, document)) : this.container instanceof HTMLElement && (this.containerElement = this.container, this.isBodyContainer = 'BODY' === this.containerElement.tagName), this.isBodyContainer || (0, ej2_base /* addClass */ .cn)([
                        this.containerElement
                    ], POPUP_CONTAINER), this.containerElement.appendChild(ctrlObj.tooltipEle);
                }, Tooltip.prototype.tooltipBeforeRender = function(target, ctrlObj) {
                    target && (ej2_base /* Browser.isDevice */ .AR.isDevice && (0, ej2_base /* addClass */ .cn)([
                        ctrlObj.tooltipEle
                    ], 'e-bigger'), 'auto' !== ctrlObj.width && (ctrlObj.tooltipEle.style.maxWidth = (0, ej2_base /* formatUnit */ .Ac)(ctrlObj.width)), ctrlObj.tooltipEle.appendChild(ctrlObj.createElement('div', {
                        className: CONTENT
                    })), this.appendContainer(ctrlObj), (0, ej2_base /* removeClass */ .IV)([
                        ctrlObj.tooltipEle
                    ], 'e-hidden'), ctrlObj.addDescribedBy(target, ctrlObj.ctrlId + '_content'), ctrlObj.renderContent(target), (0, ej2_base /* addClass */ .cn)([
                        ctrlObj.tooltipEle
                    ], POPUP_OPEN), ctrlObj.showTipPointer && ctrlObj.renderArrow(), ctrlObj.renderCloseIcon(), ctrlObj.renderPopup(target), ctrlObj.adjustArrow(target, ctrlObj.position, ctrlObj.tooltipPositionX, ctrlObj.tooltipPositionY), ej2_base /* Animation.stop */ .fw.stop(ctrlObj.tooltipEle), ctrlObj.reposition(target));
                }, Tooltip.prototype.tooltipAfterRender = function(target, e, showAnimation, ctrlObj) {
                    target && ((0, ej2_base /* removeClass */ .IV)([
                        ctrlObj.tooltipEle
                    ], POPUP_OPEN), (0, ej2_base /* addClass */ .cn)([
                        ctrlObj.tooltipEle
                    ], POPUP_CLOSE), ctrlObj.tooltipEventArgs = {
                        type: e ? e.type : null,
                        cancel: !1,
                        target: target,
                        event: e || null,
                        element: ctrlObj.tooltipEle,
                        isInteracted: !(0, ej2_base /* isNullOrUndefined */ .le)(e)
                    }, ctrlObj.needTemplateReposition() && !ctrlObj.mouseTrail && (ctrlObj.tooltipEle.style.display = 'none'), ctrlObj.trigger('beforeOpen', ctrlObj.tooltipEventArgs, (function(observedArgs) {
                        ctrlObj.beforeOpenCallback(observedArgs, target, showAnimation, e);
                    }).bind(ctrlObj)));
                }, Tooltip.prototype.beforeOpenCallback = function(observedArgs, target, showAnimation, e) {
                    var _this = this;
                    if (observedArgs.cancel) this.isHidden = !0, this.clear(), this.mouseMoveBeforeRemove(), this.restoreElement(target);
                    else {
                        // eslint-disable-next-line
                        var openAnimation_1 = {
                            name: showAnimation.effect,
                            duration: showAnimation.duration,
                            delay: showAnimation.delay,
                            timingFunction: 'easeOut'
                        };
                        'None' === showAnimation.effect && (openAnimation_1 = void 0), this.openDelay > 0 ? this.showTimer = setTimeout(function() {
                            _this.mouseTrail && ej2_base /* EventHandler.add */ .bi.add(target, 'mousemove touchstart mouseenter', _this.onMouseMove, _this), _this.popupObj && (_this.popupObj.show(openAnimation_1, target), _this.mouseMoveEvent && _this.mouseTrail && _this.onMouseMove(_this.mouseMoveEvent));
                        }, this.openDelay) : this.popupObj && this.popupObj.show(openAnimation_1, target);
                    }
                    e && this.wireMouseEvents(e, target);
                }, Tooltip.prototype.needTemplateReposition = function() {
                    return !(0, ej2_base /* isNullOrUndefined */ .le)(this.viewContainerRef) && 'string' != typeof this.viewContainerRef;
                }, Tooltip.prototype.checkCollision = function(target, x, y) {
                    var elePos = {
                        left: x,
                        top: y,
                        position: this.position,
                        horizontal: this.tooltipPositionX,
                        vertical: this.tooltipPositionY
                    }, affectedPos = (0, collision /* isCollide */ .vF)(this.tooltipEle, this.checkCollideTarget(), x, y);
                    return affectedPos.length > 0 && (elePos.horizontal = affectedPos.indexOf('left') >= 0 ? 'Right' : affectedPos.indexOf('right') >= 0 ? 'Left' : this.tooltipPositionX, elePos.vertical = affectedPos.indexOf('top') >= 0 ? 'Bottom' : affectedPos.indexOf('bottom') >= 0 ? 'Top' : this.tooltipPositionY), elePos;
                }, Tooltip.prototype.calculateElementPosition = function(pos, offsetPos) {
                    return [
                        this.isBodyContainer ? pos.left + offsetPos.left : pos.left - this.containerElement.offsetLeft + offsetPos.left + window.pageXOffset + this.containerElement.scrollLeft,
                        this.isBodyContainer ? pos.top + offsetPos.top : pos.top - this.containerElement.offsetTop + offsetPos.top + window.pageYOffset + this.containerElement.scrollTop
                    ];
                }, Tooltip.prototype.collisionFlipFit = function(target, x, y) {
                    var elePos = this.checkCollision(target, x, y), newpos = elePos.position;
                    this.tooltipPositionY !== elePos.vertical && (newpos = 0 === this.position.indexOf('Bottom') || 0 === this.position.indexOf('Top') ? elePos.vertical + this.tooltipPositionX : this.tooltipPositionX + elePos.vertical), this.tooltipPositionX !== elePos.horizontal && (0 === newpos.indexOf('Left') && (elePos.vertical = 'LeftTop' === newpos || 'LeftCenter' === newpos ? 'Top' : 'Bottom', newpos = elePos.vertical + 'Left'), 0 === newpos.indexOf('Right') && (elePos.vertical = 'RightTop' === newpos || 'RightCenter' === newpos ? 'Top' : 'Bottom', newpos = elePos.vertical + 'Right'), elePos.horizontal = this.tooltipPositionX), this.tooltipEventArgs = {
                        type: null,
                        cancel: !1,
                        target: target,
                        event: null,
                        element: this.tooltipEle,
                        collidedPosition: newpos
                    }, this.trigger('beforeCollision', this.tooltipEventArgs);
                    var elePosVertical = elePos.vertical, elePosHorizontal = elePos.horizontal;
                    if (elePos.position !== newpos) {
                        var pos = (0, position /* calculatePosition */ .k)(target, elePosHorizontal, elePosVertical, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());
                        this.adjustArrow(target, newpos, elePosHorizontal, elePosVertical);
                        var offsetPos = this.calculateTooltipOffset(newpos);
                        offsetPos.top -= this.getOffSetPosition('TopBottom', newpos, this.offsetY), offsetPos.left -= this.getOffSetPosition('RightLeft', newpos, this.offsetX), elePos.position = newpos;
                        var elePosition = this.calculateElementPosition(pos, offsetPos);
                        elePos.left = elePosition[0], elePos.top = elePosition[1];
                    } else this.adjustArrow(target, newpos, elePosHorizontal, elePosVertical);
                    var eleOffset = {
                        left: elePos.left,
                        top: elePos.top
                    }, left = this.isBodyContainer ? (0, collision /* fit */ .Tj)(this.tooltipEle, this.checkCollideTarget(), {
                        X: !0,
                        Y: !1
                    }, eleOffset).left : eleOffset.left;
                    if (this.tooltipEle.style.display = 'block', this.showTipPointer && (0 === newpos.indexOf('Bottom') || 0 === newpos.indexOf('Top'))) {
                        var arrowEle = (0, ej2_base /* select */ .Ys)('.' + ARROW_TIP, this.tooltipEle), arrowleft = parseInt(arrowEle.style.left, 10) - (left - elePos.left);
                        arrowleft < 0 ? arrowleft = 0 : arrowleft + arrowEle.offsetWidth > this.tooltipEle.clientWidth && (arrowleft = this.tooltipEle.clientWidth - arrowEle.offsetWidth), arrowEle.style.left = arrowleft.toString() + 'px';
                    }
                    return this.tooltipEle.style.display = '', eleOffset.left = left, eleOffset;
                }, Tooltip.prototype.getOffSetPosition = function(positionString, newPos, offsetType) {
                    return -1 !== positionString.indexOf(this.position.split(/(?=[A-Z])/)[0]) && -1 !== positionString.indexOf(newPos.split(/(?=[A-Z])/)[0]) ? 2 * offsetType : 0;
                }, Tooltip.prototype.checkCollideTarget = function() {
                    return !this.windowCollision && this.target ? this.element : null;
                }, Tooltip.prototype.hideTooltip = function(hideAnimation, e, targetElement) {
                    var _this = this;
                    this.closeDelay > 0 ? (clearTimeout(this.hideTimer), clearTimeout(this.showTimer), this.hideTimer = setTimeout(function() {
                        _this.closeDelay && _this.tooltipEle && _this.isTooltipOpen || _this.tooltipHide(hideAnimation, e, targetElement);
                    }, this.closeDelay)) : this.tooltipHide(hideAnimation, e, targetElement);
                }, Tooltip.prototype.tooltipHide = function(hideAnimation, e, targetElement) {
                    var target, _this = this;
                    target = e ? this.target ? targetElement || e.target : this.element : (0, ej2_base /* select */ .Ys)('[data-tooltip-id= "' + this.ctrlId + '_content"]', document), this.tooltipEventArgs = {
                        type: e ? e.type : null,
                        cancel: !1,
                        target: target,
                        event: e || null,
                        element: this.tooltipEle,
                        isInteracted: !(0, ej2_base /* isNullOrUndefined */ .le)(e)
                    }, // this line commented for close the tooltip popup element even the target element destroyed in a page.
                    //if (isNullOrUndefined(target)) { return; }
                    this.trigger('beforeClose', this.tooltipEventArgs, function(observedArgs) {
                        observedArgs.cancel ? _this.isHidden = !1 : (_this.mouseMoveBeforeRemove(), _this.popupHide(hideAnimation, target));
                    });
                }, Tooltip.prototype.popupHide = function(hideAnimation, target) {
                    target && this.restoreElement(target), this.isHidden = !0;
                    // eslint-disable-next-line
                    var closeAnimation = {
                        name: hideAnimation.effect,
                        duration: hideAnimation.duration,
                        delay: hideAnimation.delay,
                        timingFunction: 'easeIn'
                    };
                    'None' === hideAnimation.effect && (closeAnimation = void 0), this.popupObj && this.popupObj.hide(closeAnimation);
                }, Tooltip.prototype.restoreElement = function(target) {
                    this.unwireMouseEvents(target), (0, ej2_base /* isNullOrUndefined */ .le)(target.getAttribute('data-content')) || (target.setAttribute('title', target.getAttribute('data-content')), target.removeAttribute('data-content')), this.removeDescribedBy(target);
                }, Tooltip.prototype.clear = function() {
                    this.tooltipEle && ((0, ej2_base /* removeClass */ .IV)([
                        this.tooltipEle
                    ], POPUP_CLOSE), (0, ej2_base /* addClass */ .cn)([
                        this.tooltipEle
                    ], POPUP_OPEN)), this.isHidden && (this.popupObj && this.popupObj.destroy(), this.tooltipEle && (0, ej2_base /* remove */ .Od)(this.tooltipEle), this.tooltipEle = null, this.popupObj = null);
                }, Tooltip.prototype.tooltipHover = function(e) {
                    this.tooltipEle && (this.isTooltipOpen = !0);
                }, Tooltip.prototype.tooltipMouseOut = function(e) {
                    this.isTooltipOpen = !1, this.hideTooltip(this.animation.close, e, this.findTarget());
                }, Tooltip.prototype.onMouseOut = function(e) {
                    var enteredElement = e.relatedTarget;
                    // don't close the tooltip only if it is tooltip content element
                    if (enteredElement && !this.mouseTrail) {
                        var checkForTooltipElement = (0, ej2_base /* closest */ .oq)(enteredElement, "." + TOOLTIP_WRAP + "." + POPUP_LIB + "." + POPUP_ROOT);
                        checkForTooltipElement ? ej2_base /* EventHandler.add */ .bi.add(checkForTooltipElement, 'mouseleave', this.tooltipElementMouseOut, this) : (this.hideTooltip(this.animation.close, e, this.findTarget()), 0 === this.closeDelay && this.clear());
                    } else this.hideTooltip(this.animation.close, e, this.findTarget()), this.clear();
                }, Tooltip.prototype.tooltipElementMouseOut = function(e) {
                    this.hideTooltip(this.animation.close, e, this.findTarget()), ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'mouseleave', this.tooltipElementMouseOut), this.clear();
                }, Tooltip.prototype.onStickyClose = function(e) {
                    this.close();
                }, Tooltip.prototype.onMouseMove = function(event) {
                    var eventPageX = 0, eventPageY = 0;
                    event.type.indexOf('touch') > -1 ? (event.preventDefault(), eventPageX = event.touches[0].pageX, eventPageY = event.touches[0].pageY) : (eventPageX = event.pageX, eventPageY = event.pageY), ej2_base /* Animation.stop */ .fw.stop(this.tooltipEle), (0, ej2_base /* removeClass */ .IV)([
                        this.tooltipEle
                    ], POPUP_CLOSE), (0, ej2_base /* addClass */ .cn)([
                        this.tooltipEle
                    ], POPUP_OPEN), this.adjustArrow(event.target, this.position, this.tooltipPositionX, this.tooltipPositionY);
                    var pos = this.calculateTooltipOffset(this.position), x = eventPageX + pos.left + this.offsetX, y = eventPageY + pos.top + this.offsetY, elePos = this.checkCollision(event.target, x, y);
                    if (this.tooltipPositionX !== elePos.horizontal || this.tooltipPositionY !== elePos.vertical) {
                        var newpos = 0 === this.position.indexOf('Bottom') || 0 === this.position.indexOf('Top') ? elePos.vertical + elePos.horizontal : elePos.horizontal + elePos.vertical;
                        elePos.position = newpos, this.adjustArrow(event.target, elePos.position, elePos.horizontal, elePos.vertical);
                        var colpos = this.calculateTooltipOffset(elePos.position);
                        elePos.left = eventPageX + colpos.left - this.offsetX, elePos.top = eventPageY + colpos.top - this.offsetY;
                    }
                    this.tooltipEle.style.left = elePos.left + 'px', this.tooltipEle.style.top = elePos.top + 'px';
                }, Tooltip.prototype.keyDown = function(event) {
                    this.tooltipEle && 27 === event.keyCode && this.close();
                }, Tooltip.prototype.touchEnd = function(e) {
                    this.tooltipEle && null === (0, ej2_base /* closest */ .oq)(e.target, '.' + ROOT) && !this.isSticky && this.close();
                }, Tooltip.prototype.scrollHandler = function(e) {
                    this.tooltipEle && !(0, ej2_base /* closest */ .oq)(e.target, "." + TOOLTIP_WRAP + "." + POPUP_LIB + "." + POPUP_ROOT) && this.close();
                }, /**
     * Core method that initializes the control rendering.
     *
     * @private
     * @returns {void}
     */ Tooltip.prototype.render = function() {
                    this.initialize(), this.wireEvents(this.opensOn), this.renderComplete();
                }, /**
     * Initializes the values of private members.
     *
     * @private
     * @returns {void}
     */ Tooltip.prototype.preRender = function() {
                    this.tipClass = TIP_BOTTOM, this.tooltipPositionX = 'Center', this.tooltipPositionY = 'Top', this.isHidden = !0;
                }, /**
     * Binding events to the Tooltip element.
     *
     * @hidden
     * @param {string} trigger - specify the trigger string to the function
     * @returns {void}
     *
     */ Tooltip.prototype.wireEvents = function(trigger) {
                    for(var triggerList = this.getTriggerList(trigger), _i = 0; _i < triggerList.length; _i++){
                        var opensOn = triggerList[_i];
                        if ('Custom' === opensOn) return;
                        'Focus' === opensOn && this.wireFocusEvents(), 'Click' === opensOn && ej2_base /* EventHandler.add */ .bi.add(this.element, ej2_base /* Browser.touchStartEvent */ .AR.touchStartEvent, this.targetClick, this), 'Hover' === opensOn && (ej2_base /* Browser.isDevice */ .AR.isDevice ? (this.touchModule = new ej2_base /* Touch */ .Xh(this.element, {
                            tapHoldThreshold: 500,
                            tapHold: this.tapHoldHandler.bind(this)
                        }), ej2_base /* EventHandler.add */ .bi.add(this.element, ej2_base /* Browser.touchEndEvent */ .AR.touchEndEvent, this.touchEndHandler, this)) : ej2_base /* EventHandler.add */ .bi.add(this.element, 'mouseover', this.targetHover, this));
                    }
                    ej2_base /* EventHandler.add */ .bi.add(document, 'touchend', this.touchEnd, this), ej2_base /* EventHandler.add */ .bi.add(document, 'scroll wheel', this.scrollHandler, this), ej2_base /* EventHandler.add */ .bi.add(window, 'resize', this.windowResize, this), ej2_base /* EventHandler.add */ .bi.add(document, 'keydown', this.keyDown, this);
                }, Tooltip.prototype.getTriggerList = function(trigger) {
                    return 'Auto' === trigger && (trigger = ej2_base /* Browser.isDevice */ .AR.isDevice ? 'Hover' : 'Hover Focus'), trigger.split(' ');
                }, Tooltip.prototype.wireFocusEvents = function() {
                    if ((0, ej2_base /* isNullOrUndefined */ .le)(this.target)) ej2_base /* EventHandler.add */ .bi.add(this.element, 'focus', this.targetHover, this);
                    else for(var targetList = [].slice.call((0, ej2_base /* selectAll */ .td)(this.target, this.element)), _i = 0; _i < targetList.length; _i++){
                        var target = targetList[_i];
                        ej2_base /* EventHandler.add */ .bi.add(target, 'focus', this.targetHover, this);
                    }
                }, Tooltip.prototype.wireMouseEvents = function(e, target) {
                    this.tooltipEle && (!this.isSticky && ('focus' === e.type && ej2_base /* EventHandler.add */ .bi.add(target, 'blur', this.onMouseOut, this), 'mouseover' === e.type && ej2_base /* EventHandler.add */ .bi.add(target, 'mouseleave', this.onMouseOut, this), this.closeDelay && (ej2_base /* EventHandler.add */ .bi.add(this.tooltipEle, 'mouseenter', this.tooltipHover, this), ej2_base /* EventHandler.add */ .bi.add(this.tooltipEle, 'mouseleave', this.tooltipMouseOut, this))), this.mouseTrail && 0 === this.openDelay && ej2_base /* EventHandler.add */ .bi.add(target, 'mousemove touchstart mouseenter', this.onMouseMove, this));
                }, /**
     * Unbinding events from the element on widget destroy.
     *
     * @hidden
     *
     * @param {string} trigger - specify the trigger string to the function
     * @returns {void}
     *
     */ Tooltip.prototype.unwireEvents = function(trigger) {
                    for(var triggerList = this.getTriggerList(trigger), _i = 0; _i < triggerList.length; _i++){
                        var opensOn = triggerList[_i];
                        if ('Custom' === opensOn) return;
                        'Focus' === opensOn && this.unwireFocusEvents(), 'Click' === opensOn && ej2_base /* EventHandler.remove */ .bi.remove(this.element, ej2_base /* Browser.touchStartEvent */ .AR.touchStartEvent, this.targetClick), 'Hover' === opensOn && (ej2_base /* Browser.isDevice */ .AR.isDevice ? (this.touchModule && this.touchModule.destroy(), ej2_base /* EventHandler.remove */ .bi.remove(this.element, ej2_base /* Browser.touchEndEvent */ .AR.touchEndEvent, this.touchEndHandler)) : ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'mouseover', this.targetHover));
                    }
                    ej2_base /* EventHandler.remove */ .bi.remove(document, 'touchend', this.touchEnd), ej2_base /* EventHandler.remove */ .bi.remove(document, 'scroll wheel', this.scrollHandler), ej2_base /* EventHandler.remove */ .bi.remove(window, 'resize', this.windowResize), ej2_base /* EventHandler.remove */ .bi.remove(document, 'keydown', this.keyDown);
                }, Tooltip.prototype.unwireFocusEvents = function() {
                    if ((0, ej2_base /* isNullOrUndefined */ .le)(this.target)) ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'focus', this.targetHover);
                    else for(var targetList = [].slice.call((0, ej2_base /* selectAll */ .td)(this.target, this.element)), _i = 0; _i < targetList.length; _i++){
                        var target = targetList[_i];
                        ej2_base /* EventHandler.remove */ .bi.remove(target, 'focus', this.targetHover);
                    }
                }, Tooltip.prototype.unwireMouseEvents = function(target) {
                    if (!this.isSticky) {
                        for(var triggerList = this.getTriggerList(this.opensOn), _i = 0; _i < triggerList.length; _i++){
                            var opensOn = triggerList[_i];
                            'Focus' === opensOn && ej2_base /* EventHandler.remove */ .bi.remove(target, 'blur', this.onMouseOut), 'Hover' !== opensOn || ej2_base /* Browser.isDevice */ .AR.isDevice || ej2_base /* EventHandler.remove */ .bi.remove(target, 'mouseleave', this.onMouseOut);
                        }
                        this.closeDelay && (ej2_base /* EventHandler.remove */ .bi.remove(target, 'mouseenter', this.tooltipHover), ej2_base /* EventHandler.remove */ .bi.remove(target, 'mouseleave', this.tooltipMouseOut));
                    }
                    this.mouseTrail && ej2_base /* EventHandler.remove */ .bi.remove(target, 'mousemove touchstart mouseenter', this.onMouseMove);
                }, Tooltip.prototype.findTarget = function() {
                    return (0, ej2_base /* select */ .Ys)('[data-tooltip-id= "' + this.ctrlId + '_content"]', document);
                }, /**
     * Core method to return the component name.
     *
     * @private
     *
     * @returns {string} - this method returns module name.
     */ Tooltip.prototype.getModuleName = function() {
                    return 'tooltip';
                }, /**
     * Returns the properties to be maintained in the persisted state.
     *
     * @private
     *
     * @returns {string} - this method returns persisted data.
     */ Tooltip.prototype.getPersistData = function() {
                    return this.addOnPersist([]);
                }, /**
     * Called internally, if any of the property value changed.
     *
     * @private
     *
     * @param {TooltipModel} newProp - this param gives new property values to the method
     * @param {TooltipModel} oldProp - this param gives old property values to the method
     * @returns {void}
     *
     */ Tooltip.prototype.onPropertyChanged = function(newProp, oldProp) {
                    for(var targetElement = this.findTarget(), _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++)switch(_a[_i]){
                        case 'width':
                            this.tooltipEle && targetElement && (this.tooltipEle.style.width = this.tooltipEle.style.maxWidth = (0, ej2_base /* formatUnit */ .Ac)(newProp.width), this.reposition(targetElement));
                            break;
                        case 'height':
                            this.tooltipEle && targetElement && (this.tooltipEle.style.height = (0, ej2_base /* formatUnit */ .Ac)(newProp.height), this.reposition(targetElement));
                            break;
                        case 'content':
                            this.tooltipEle && this.renderContent();
                            break;
                        case 'opensOn':
                            this.unwireEvents(oldProp.opensOn), this.wireEvents(newProp.opensOn);
                            break;
                        case 'position':
                            if (this.formatPosition(), this.tooltipEle && targetElement) {
                                var arrowInnerELe = (0, ej2_base /* select */ .Ys)('.' + ARROW_TIP_INNER, this.tooltipEle);
                                arrowInnerELe.style.top = arrowInnerELe.style.left = null, this.reposition(targetElement);
                            }
                            break;
                        case 'tipPointerPosition':
                            this.tooltipEle && targetElement && this.reposition(targetElement);
                            break;
                        case 'offsetX':
                            if (this.tooltipEle) {
                                var x = newProp.offsetX - oldProp.offsetX;
                                this.tooltipEle.style.left = (parseInt(this.tooltipEle.style.left, 10) + x).toString() + 'px';
                            }
                            break;
                        case 'offsetY':
                            if (this.tooltipEle) {
                                var y = newProp.offsetY - oldProp.offsetY;
                                this.tooltipEle.style.top = (parseInt(this.tooltipEle.style.top, 10) + y).toString() + 'px';
                            }
                            break;
                        case 'cssClass':
                            this.tooltipEle && (oldProp.cssClass && (0, ej2_base /* removeClass */ .IV)([
                                this.tooltipEle
                            ], oldProp.cssClass.split(' ')), newProp.cssClass && (0, ej2_base /* addClass */ .cn)([
                                this.tooltipEle
                            ], newProp.cssClass.split(' ')));
                            break;
                        case 'enableRtl':
                            this.tooltipEle && (this.enableRtl ? (0, ej2_base /* addClass */ .cn)([
                                this.tooltipEle
                            ], tooltip_RTL) : (0, ej2_base /* removeClass */ .IV)([
                                this.tooltipEle
                            ], tooltip_RTL));
                            break;
                        case 'container':
                            (0, ej2_base /* isNullOrUndefined */ .le)(this.containerElement) || (0, ej2_base /* removeClass */ .IV)([
                                this.containerElement
                            ], POPUP_CONTAINER), this.container = newProp.container, this.tooltipEle && targetElement && (this.appendContainer(this), this.reposition(targetElement));
                    }
                }, /**
     * It is used to show the Tooltip on the specified target with specific animation settings.
     *
     * @param {HTMLElement} element - Target element where the Tooltip is to be displayed. (It is an optional parameter)
     * @param {TooltipAnimationSettings} animation - Sets the specific animation, while showing the Tooltip on the screen. (It is an optional parameter)
     * @returns {void}
     */ Tooltip.prototype.open = function(element, animation) {
                    (0, ej2_base /* isNullOrUndefined */ .le)(animation) && (animation = this.animation.open), (0, ej2_base /* isNullOrUndefined */ .le)(element) && (element = this.element), 'none' !== element.style.display && this.showTooltip(element, animation);
                }, /**
     * It is used to hide the Tooltip with specific animation effect.
     *
     * @param {TooltipAnimationSettings} animation - Sets the specific animation when hiding Tooltip from the screen. (It is an optional parameter)
     * @returns {void}
     */ Tooltip.prototype.close = function(animation) {
                    animation || (animation = this.animation.close), this.hideTooltip(animation);
                }, /**
     * It is used to refresh the Tooltip content and its position.
     *
     * @param {HTMLElement} target - Target element where the Tooltip content or position needs to be refreshed.
     * @returns {void}
     */ Tooltip.prototype.refresh = function(target) {
                    this.tooltipEle && this.renderContent(target), this.popupObj && target && this.reposition(target);
                }, /**
     * It is used to destroy the Tooltip component.
     * @method destroy
     * @returns {void}
     * @memberof Tooltip
     */ Tooltip.prototype.destroy = function() {
                    _super.prototype.destroy.call(this), this.tooltipEle && (0, ej2_base /* remove */ .Od)(this.tooltipEle), this.popupObj && this.popupObj.destroy(), (0, ej2_base /* removeClass */ .IV)([
                        this.element
                    ], ROOT), this.unwireEvents(this.opensOn), this.unwireMouseEvents(this.element), this.tooltipEle = null, this.popupObj = null;
                }, tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)('auto')
                ], Tooltip.prototype, "width", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)('auto')
                ], Tooltip.prototype, "height", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)()
                ], Tooltip.prototype, "content", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)('body')
                ], Tooltip.prototype, "container", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)()
                ], Tooltip.prototype, "target", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)('TopCenter')
                ], Tooltip.prototype, "position", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)(0)
                ], Tooltip.prototype, "offsetX", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)(0)
                ], Tooltip.prototype, "offsetY", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], Tooltip.prototype, "showTipPointer", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], Tooltip.prototype, "enableHtmlParse", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Tooltip.prototype, "windowCollision", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)('Auto')
                ], Tooltip.prototype, "tipPointerPosition", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)('Auto')
                ], Tooltip.prototype, "opensOn", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Tooltip.prototype, "mouseTrail", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Tooltip.prototype, "isSticky", void 0), tooltip_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, Animation)
                ], Tooltip.prototype, "animation", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)(0)
                ], Tooltip.prototype, "openDelay", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)(0)
                ], Tooltip.prototype, "closeDelay", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)()
                ], Tooltip.prototype, "cssClass", void 0), tooltip_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Tooltip.prototype, "enableHtmlSanitizer", void 0), tooltip_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Tooltip.prototype, "beforeRender", void 0), tooltip_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Tooltip.prototype, "beforeOpen", void 0), tooltip_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Tooltip.prototype, "afterOpen", void 0), tooltip_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Tooltip.prototype, "beforeClose", void 0), tooltip_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Tooltip.prototype, "afterClose", void 0), tooltip_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Tooltip.prototype, "beforeCollision", void 0), tooltip_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Tooltip.prototype, "created", void 0), tooltip_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Tooltip.prototype, "destroyed", void 0), Tooltip = tooltip_decorate([
                    ej2_base /* NotifyPropertyChanges */ .Zl
                ], Tooltip);
            }(ej2_base /* Component */ .wA), input = __webpack_require__(3213), numerictextbox = __webpack_require__(8801), slider_extends = (extendStatics7 = function(d, b) {
                return (extendStatics7 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics7(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), slider_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, TicksData = /** @class */ function(_super) {
                function TicksData() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return slider_extends(TicksData, _super), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)('None')
                ], TicksData.prototype, "placement", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(10)
                ], TicksData.prototype, "largeStep", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(1)
                ], TicksData.prototype, "smallStep", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], TicksData.prototype, "showSmallTicks", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], TicksData.prototype, "format", void 0), TicksData;
            }(ej2_base /* ChildProperty */ .rt), ColorRangeData = /** @class */ function(_super) {
                function ColorRangeData() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return slider_extends(ColorRangeData, _super), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], ColorRangeData.prototype, "color", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], ColorRangeData.prototype, "start", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], ColorRangeData.prototype, "end", void 0), ColorRangeData;
            }(ej2_base /* ChildProperty */ .rt), LimitData = /** @class */ function(_super) {
                function LimitData() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return slider_extends(LimitData, _super), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], LimitData.prototype, "enabled", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], LimitData.prototype, "minStart", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], LimitData.prototype, "minEnd", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], LimitData.prototype, "maxStart", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], LimitData.prototype, "maxEnd", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], LimitData.prototype, "startHandleFixed", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], LimitData.prototype, "endHandleFixed", void 0), LimitData;
            }(ej2_base /* ChildProperty */ .rt), TooltipData = /** @class */ function(_super) {
                function TooltipData() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return slider_extends(TooltipData, _super), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], TooltipData.prototype, "cssClass", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)('Before')
                ], TooltipData.prototype, "placement", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)('Focus')
                ], TooltipData.prototype, "showOn", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], TooltipData.prototype, "isVisible", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], TooltipData.prototype, "format", void 0), TooltipData;
            }(ej2_base /* ChildProperty */ .rt), slider_classNames = {
                root: 'e-slider',
                rtl: 'e-rtl',
                sliderHiddenInput: 'e-slider-input',
                controlWrapper: 'e-control-wrapper',
                sliderHandle: 'e-handle',
                rangeBar: 'e-range',
                sliderButton: 'e-slider-button',
                firstButton: 'e-first-button',
                secondButton: 'e-second-button',
                scale: 'e-scale',
                tick: 'e-tick',
                large: 'e-large',
                tickValue: 'e-tick-value',
                sliderTooltip: 'e-slider-tooltip',
                sliderHover: 'e-slider-hover',
                sliderFirstHandle: 'e-handle-first',
                sliderSecondHandle: 'e-handle-second',
                sliderDisabled: 'e-disabled',
                sliderContainer: 'e-slider-container',
                horizontalTooltipBefore: 'e-slider-horizontal-before',
                horizontalTooltipAfter: 'e-slider-horizontal-after',
                verticalTooltipBefore: 'e-slider-vertical-before',
                verticalTooltipAfter: 'e-slider-vertical-after',
                materialTooltipOpen: 'e-material-tooltip-open',
                materialTooltipActive: 'e-tooltip-active',
                materialSlider: 'e-material-slider',
                sliderTrack: 'e-slider-track',
                sliderHorizantalColor: 'e-slider-horizantal-color',
                sliderVerticalColor: 'e-slider-vertical-color',
                sliderHandleFocused: 'e-handle-focused',
                verticalSlider: 'e-vertical',
                horizontalSlider: 'e-horizontal',
                sliderHandleStart: 'e-handle-start',
                sliderTooltipStart: 'e-material-tooltip-start',
                sliderTabHandle: 'e-tab-handle',
                sliderButtonIcon: 'e-button-icon',
                sliderSmallSize: 'e-small-size',
                sliderTickPosition: 'e-tick-pos',
                sliderFirstTick: 'e-first-tick',
                sliderLastTick: 'e-last-tick',
                sliderButtonClass: 'e-slider-btn',
                sliderTabTrack: 'e-tab-track',
                sliderTabRange: 'e-tab-range',
                sliderActiveHandle: 'e-handle-active',
                sliderMaterialHandle: 'e-material-handle',
                sliderMaterialRange: 'e-material-range',
                sliderMaterialDefault: 'e-material-default',
                materialTooltipShow: 'e-material-tooltip-show',
                materialTooltipHide: 'e-material-tooltip-hide',
                readonly: 'e-read-only',
                limits: 'e-limits',
                limitBarDefault: 'e-limit-bar',
                limitBarFirst: 'e-limit-first',
                limitBarSecond: 'e-limit-second',
                dragHorizontal: 'e-drag-horizontal',
                dragVertical: 'e-drag-vertical'
            }, Slider = /** @class */ function(_super) {
                function Slider(options, element) {
                    var _this = _super.call(this, options, element) || this;
                    return _this.horDir = 'left', _this.verDir = 'bottom', _this.transition = {
                        handle: "left .4s cubic-bezier(.25, .8, .25, 1), right .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1) , bottom .4s cubic-bezier(.25, .8, .25, 1)",
                        rangeBar: 'all .4s cubic-bezier(.25, .8, .25, 1)'
                    }, _this.transitionOnMaterialTooltip = {
                        handle: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, top 1ms ease-out',
                        rangeBar: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, width 1ms ease-out, height 1ms ease-out'
                    }, _this.scaleTransform = 'transform .4s cubic-bezier(.25, .8, .25, 1)', _this.customAriaText = null, _this.drag = !0, _this.isDragComplete = !1, _this.initialTooltip = !0, _this;
                }
                return slider_extends(Slider, _super), Slider.prototype.preRender = function() {
                    this.l10n = new ej2_base /* L10n */ .E7('slider', {
                        incrementTitle: 'Increase',
                        decrementTitle: 'Decrease'
                    }, this.locale), this.isElementFocused = !1, this.tickElementCollection = [], this.tooltipFormatInfo = {}, this.ticksFormatInfo = {}, this.initCultureInfo(), this.initCultureFunc(), this.formChecker();
                }, Slider.prototype.formChecker = function() {
                    var formElement = (0, ej2_base /* closest */ .oq)(this.element, 'form');
                    formElement ? (this.isForm = !0, (0, ej2_base /* isNullOrUndefined */ .le)(this.formResetValue) || this.setProperties({
                        value: this.formResetValue
                    }, !0), this.formResetValue = this.value, 'Range' === this.type && ((0, ej2_base /* isNullOrUndefined */ .le)(this.formResetValue) || 'object' != typeof this.formResetValue) ? this.formResetValue = [
                        parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.min)),
                        parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.max))
                    ] : (0, ej2_base /* isNullOrUndefined */ .le)(this.formResetValue) && (this.formResetValue = parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.min))), this.formElement = formElement) : this.isForm = !1;
                }, Slider.prototype.initCultureFunc = function() {
                    this.internationalization = new ej2_base /* Internationalization */ .eC(this.locale);
                }, Slider.prototype.initCultureInfo = function() {
                    this.tooltipFormatInfo.format = (0, ej2_base /* isNullOrUndefined */ .le)(this.tooltip.format) ? null : this.tooltip.format, this.ticksFormatInfo.format = (0, ej2_base /* isNullOrUndefined */ .le)(this.ticks.format) ? null : this.ticks.format;
                }, Slider.prototype.formatString = function(value, formatInfo) {
                    var formatValue = null, formatString = null;
                    if (value || 0 === value) {
                        formatValue = this.formatNumber(value);
                        var numberOfDecimals = this.numberOfDecimals(value);
                        formatString = this.internationalization.getNumberFormat(formatInfo)(this.makeRoundNumber(value, numberOfDecimals));
                    }
                    return {
                        elementVal: formatValue,
                        formatString: formatString
                    };
                }, Slider.prototype.formatNumber = function(value) {
                    var numberOfDecimals = this.numberOfDecimals(value);
                    return this.internationalization.getNumberFormat({
                        maximumFractionDigits: numberOfDecimals,
                        minimumFractionDigits: numberOfDecimals,
                        useGrouping: !1
                    })(value);
                }, Slider.prototype.numberOfDecimals = function(value) {
                    var decimalPart = value.toString().split('.')[1];
                    return decimalPart && decimalPart.length ? decimalPart.length : 0;
                }, Slider.prototype.makeRoundNumber = function(value, precision) {
                    return Number(value.toFixed(precision || 0));
                }, Slider.prototype.fractionalToInteger = function(value) {
                    value = 0 === this.numberOfDecimals(value) ? Number(value).toFixed(this.noOfDecimals) : value;
                    for(var tens = 1, i = 0; i < this.noOfDecimals; i++)tens *= 10;
                    return value = Number((value * tens).toFixed(0));
                }, /**
     * To Initialize the control rendering
     * @private
     */ Slider.prototype.render = function() {
                    var _this = this;
                    this.initialize(), this.initRender(), this.wireEvents(), this.setZindex(), this.renderComplete(), 'EJS-SLIDER' === this.element.tagName && "none" == this.getTheme(this.sliderContainer) && setTimeout(function() {
                        _this.refresh();
                    }, 0);
                }, Slider.prototype.initialize = function() {
                    (0, ej2_base /* addClass */ .cn)([
                        this.element
                    ], slider_classNames.root), this.setCSSClass();
                }, Slider.prototype.setElementWidth = function(width) {
                    (0, ej2_base /* isNullOrUndefined */ .le)(width) || ('number' == typeof width ? this.sliderContainer.style.width = (0, ej2_base /* formatUnit */ .Ac)(width) : 'string' == typeof width && (this.sliderContainer.style.width = width.match(/px|%|em/) ? width : (0, ej2_base /* formatUnit */ .Ac)(width)));
                }, Slider.prototype.setCSSClass = function(oldCSSClass) {
                    oldCSSClass && (0, ej2_base /* removeClass */ .IV)([
                        this.element
                    ], oldCSSClass.split(' ')), this.cssClass && (0, ej2_base /* addClass */ .cn)([
                        this.element
                    ], this.cssClass.split(' '));
                }, Slider.prototype.setEnabled = function() {
                    this.enabled ? ((0, ej2_base /* removeClass */ .IV)([
                        this.sliderContainer
                    ], [
                        slider_classNames.sliderDisabled
                    ]), this.tooltip.isVisible && this.tooltipElement && 'Always' === this.tooltip.showOn && this.tooltipElement.classList.remove(slider_classNames.sliderDisabled), this.wireEvents()) : ((0, ej2_base /* addClass */ .cn)([
                        this.sliderContainer
                    ], [
                        slider_classNames.sliderDisabled
                    ]), this.tooltip.isVisible && this.tooltipElement && 'Always' === this.tooltip.showOn && this.tooltipElement.classList.add(slider_classNames.sliderDisabled), this.unwireEvents());
                }, Slider.prototype.getTheme = function(container) {
                    return window.getComputedStyle(container, ':after').getPropertyValue('content').replace(/['"]+/g, '');
                }, /**
     * Initialize the rendering
     * @private
     */ Slider.prototype.initRender = function() {
                    this.sliderContainer = this.createElement('div', {
                        className: slider_classNames.sliderContainer + ' ' + slider_classNames.controlWrapper
                    }), this.element.parentNode.insertBefore(this.sliderContainer, this.element), this.sliderContainer.appendChild(this.element), this.sliderTrack = this.createElement('div', {
                        className: slider_classNames.sliderTrack
                    }), this.element.appendChild(this.sliderTrack), this.setElementWidth(this.width), this.element.tabIndex = -1, this.getThemeInitialization(), this.setHandler(), this.createRangeBar(), this.limits.enabled && this.createLimitBar(), this.setOrientClass(), this.hiddenInput = this.createElement('input', {
                        attrs: {
                            type: 'hidden',
                            value: (0, ej2_base /* isNullOrUndefined */ .le)(this.value) ? this.min.toString() : this.value.toString(),
                            name: this.element.getAttribute('name') || this.element.getAttribute('id') || '_' + (1000 * Math.random()).toFixed(0) + 'slider',
                            class: slider_classNames.sliderHiddenInput
                        }
                    }), this.hiddenInput.tabIndex = -1, this.sliderContainer.appendChild(this.hiddenInput), this.showButtons && this.setButtons(), this.setEnableRTL(), 'Range' === this.type ? this.rangeValueUpdate() : this.value = (0, ej2_base /* isNullOrUndefined */ .le)(this.value) ? parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.min.toString())) : this.value, this.previousVal = 'Range' !== this.type ? this.checkHandleValue(parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.value.toString()))) : [
                        this.checkHandleValue(parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.value[0].toString()))),
                        this.checkHandleValue(parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.value[1].toString())))
                    ], this.previousChanged = this.previousVal, (0, ej2_base /* isNullOrUndefined */ .le)(this.element.hasAttribute('name')) || this.element.removeAttribute('name'), this.setValue(), this.limits.enabled && this.setLimitBar(), 'None' !== this.ticks.placement && this.renderScale(), this.tooltip.isVisible && this.renderTooltip(), this.enabled ? (0, ej2_base /* removeClass */ .IV)([
                        this.sliderContainer
                    ], [
                        slider_classNames.sliderDisabled
                    ]) : (0, ej2_base /* addClass */ .cn)([
                        this.sliderContainer
                    ], [
                        slider_classNames.sliderDisabled
                    ]), this.readonly ? (0, ej2_base /* addClass */ .cn)([
                        this.sliderContainer
                    ], [
                        slider_classNames.readonly
                    ]) : (0, ej2_base /* removeClass */ .IV)([
                        this.sliderContainer
                    ], [
                        slider_classNames.readonly
                    ]);
                }, Slider.prototype.getThemeInitialization = function() {
                    this.isMaterial = 'material' === this.getTheme(this.sliderContainer) || 'material-dark' === this.getTheme(this.sliderContainer), this.isBootstrap = 'bootstrap' === this.getTheme(this.sliderContainer) || 'bootstrap-dark' === this.getTheme(this.sliderContainer), this.isBootstrap4 = 'bootstrap4' === this.getTheme(this.sliderContainer), this.isTailwind = 'tailwind' === this.getTheme(this.sliderContainer) || 'tailwind-dark' === this.getTheme(this.sliderContainer), this.isBootstrap5 = 'bootstrap5' === this.getTheme(this.sliderContainer), this.isFluent = 'FluentUI' === this.getTheme(this.sliderContainer), this.isMaterialTooltip = this.isMaterial && 'Range' !== this.type && this.tooltip.isVisible;
                }, Slider.prototype.createRangeBar = function() {
                    'Default' !== this.type && (this.rangeBar = this.createElement('div', {
                        attrs: {
                            class: slider_classNames.rangeBar
                        }
                    }), this.element.appendChild(this.rangeBar), this.drag && 'Range' === this.type && ('Horizontal' === this.orientation ? this.rangeBar.classList.add(slider_classNames.dragHorizontal) : this.rangeBar.classList.add(slider_classNames.dragVertical)));
                }, Slider.prototype.createLimitBar = function() {
                    var firstElementClassName = 'Range' !== this.type ? slider_classNames.limitBarDefault : slider_classNames.limitBarFirst;
                    firstElementClassName += ' ' + slider_classNames.limits, this.limitBarFirst = this.createElement('div', {
                        attrs: {
                            class: firstElementClassName
                        }
                    }), this.element.appendChild(this.limitBarFirst), 'Range' === this.type && (this.limitBarSecond = this.createElement('div', {
                        attrs: {
                            class: slider_classNames.limitBarSecond + ' ' + slider_classNames.limits
                        }
                    }), this.element.appendChild(this.limitBarSecond));
                }, Slider.prototype.setOrientClass = function() {
                    'Vertical' !== this.orientation ? (this.sliderContainer.classList.remove(slider_classNames.verticalSlider), this.sliderContainer.classList.add(slider_classNames.horizontalSlider), this.firstHandle.setAttribute('aria-orientation', 'horizontal'), 'Range' === this.type && this.secondHandle.setAttribute('aria-orientation', 'horizontal')) : (this.sliderContainer.classList.remove(slider_classNames.horizontalSlider), this.sliderContainer.classList.add(slider_classNames.verticalSlider), this.firstHandle.setAttribute('aria-orientation', 'vertical'), 'Range' === this.type && this.secondHandle.setAttribute('aria-orientation', 'vertical'));
                }, Slider.prototype.setAriaAttributes = function(element) {
                    var _this = this, min = this.min, max = this.max;
                    !(0, ej2_base /* isNullOrUndefined */ .le)(this.customValues) && this.customValues.length > 0 && (min = this.customValues[0], max = this.customValues[this.customValues.length - 1]), 'Range' !== this.type ? (0, ej2_base /* attributes */ .Y4)(element, {
                        'aria-valuemin': min.toString(),
                        'aria-valuemax': max.toString()
                    }) : (!(0, ej2_base /* isNullOrUndefined */ .le)(this.customValues) && this.customValues.length > 0 ? [
                        [
                            min.toString(),
                            this.customValues[this.value[1]].toString()
                        ],
                        [
                            this.customValues[this.value[0]].toString(),
                            max.toString()
                        ]
                    ] : [
                        [
                            min.toString(),
                            this.value[1].toString()
                        ],
                        [
                            this.value[0].toString(),
                            max.toString()
                        ]
                    ]).forEach(function(range, index) {
                        var element = 0 === index ? _this.firstHandle : _this.secondHandle;
                        element && (0, ej2_base /* attributes */ .Y4)(element, {
                            'aria-valuemin': range[0],
                            'aria-valuemax': range[1]
                        });
                    });
                }, Slider.prototype.createSecondHandle = function() {
                    this.secondHandle = this.createElement('div', {
                        attrs: {
                            class: slider_classNames.sliderHandle,
                            role: 'slider',
                            tabIndex: '0'
                        }
                    }), this.secondHandle.classList.add(slider_classNames.sliderSecondHandle), this.element.appendChild(this.secondHandle);
                }, Slider.prototype.createFirstHandle = function() {
                    this.firstHandle = this.createElement('div', {
                        attrs: {
                            class: slider_classNames.sliderHandle,
                            role: 'slider',
                            tabIndex: '0'
                        }
                    }), this.firstHandle.classList.add(slider_classNames.sliderFirstHandle), this.element.appendChild(this.firstHandle), this.isMaterialTooltip && (this.materialHandle = this.createElement('div', {
                        attrs: {
                            class: slider_classNames.sliderHandle + ' ' + slider_classNames.sliderMaterialHandle
                        }
                    }), this.element.appendChild(this.materialHandle));
                }, Slider.prototype.wireFirstHandleEvt = function(destroy) {
                    destroy ? (ej2_base /* EventHandler.remove */ .bi.remove(this.firstHandle, 'mousedown touchstart', this.handleFocus), ej2_base /* EventHandler.remove */ .bi.remove(this.firstHandle, 'transitionend', this.transitionEnd), ej2_base /* EventHandler.remove */ .bi.remove(this.firstHandle, 'mouseenter touchenter', this.handleOver), ej2_base /* EventHandler.remove */ .bi.remove(this.firstHandle, 'mouseleave touchend', this.handleLeave)) : (ej2_base /* EventHandler.add */ .bi.add(this.firstHandle, 'mousedown touchstart', this.handleFocus, this), ej2_base /* EventHandler.add */ .bi.add(this.firstHandle, 'transitionend', this.transitionEnd, this), ej2_base /* EventHandler.add */ .bi.add(this.firstHandle, 'mouseenter touchenter', this.handleOver, this), ej2_base /* EventHandler.add */ .bi.add(this.firstHandle, 'mouseleave touchend', this.handleLeave, this));
                }, Slider.prototype.wireSecondHandleEvt = function(destroy) {
                    destroy ? (ej2_base /* EventHandler.remove */ .bi.remove(this.secondHandle, 'mousedown touchstart', this.handleFocus), ej2_base /* EventHandler.remove */ .bi.remove(this.secondHandle, 'transitionend', this.transitionEnd), ej2_base /* EventHandler.remove */ .bi.remove(this.secondHandle, 'mouseenter touchenter', this.handleOver), ej2_base /* EventHandler.remove */ .bi.remove(this.secondHandle, 'mouseleave touchend', this.handleLeave)) : (ej2_base /* EventHandler.add */ .bi.add(this.secondHandle, 'mousedown touchstart', this.handleFocus, this), ej2_base /* EventHandler.add */ .bi.add(this.secondHandle, 'transitionend', this.transitionEnd, this), ej2_base /* EventHandler.add */ .bi.add(this.secondHandle, 'mouseenter touchenter', this.handleOver, this), ej2_base /* EventHandler.add */ .bi.add(this.secondHandle, 'mouseleave touchend', this.handleLeave, this));
                }, Slider.prototype.handleStart = function() {
                    'Range' !== this.type && (this.firstHandle.classList[0 === this.handlePos1 ? 'add' : 'remove'](slider_classNames.sliderHandleStart), this.isMaterialTooltip && (this.materialHandle.classList[0 === this.handlePos1 ? 'add' : 'remove'](slider_classNames.sliderHandleStart), this.tooltipElement && this.tooltipElement.classList[0 === this.handlePos1 ? 'add' : 'remove'](slider_classNames.sliderTooltipStart)));
                }, Slider.prototype.transitionEnd = function(e) {
                    'transform' !== e.propertyName && (this.handleStart(), this.enableAnimation || (this.getHandle().style.transition = 'none'), 'Default' !== this.type && (this.rangeBar.style.transition = 'none'), this.isMaterial && this.tooltip.isVisible && 'Default' === this.type && (this.tooltipElement.style.transition = this.transition.handle), this.tooltipToggle(this.getHandle()), this.closeTooltip());
                }, Slider.prototype.handleFocusOut = function() {
                    this.firstHandle.classList.contains(slider_classNames.sliderHandleFocused) && this.firstHandle.classList.remove(slider_classNames.sliderHandleFocused), 'Range' === this.type && this.secondHandle.classList.contains(slider_classNames.sliderHandleFocused) && this.secondHandle.classList.remove(slider_classNames.sliderHandleFocused);
                }, Slider.prototype.handleFocus = function(e) {
                    this.focusSliderElement(), this.sliderBarClick(e), e.currentTarget === this.firstHandle ? (this.firstHandle.classList.add(slider_classNames.sliderHandleFocused), this.firstHandle.classList.add(slider_classNames.sliderTabHandle)) : (this.secondHandle.classList.add(slider_classNames.sliderHandleFocused), this.secondHandle.classList.add(slider_classNames.sliderTabHandle)), ej2_base /* EventHandler.add */ .bi.add(document, 'mousemove touchmove', this.sliderBarMove, this), ej2_base /* EventHandler.add */ .bi.add(document, 'mouseup touchend', this.sliderBarUp, this);
                }, Slider.prototype.handleOver = function(e) {
                    this.tooltip.isVisible && 'Hover' === this.tooltip.showOn && this.tooltipToggle(e.currentTarget), 'Default' === this.type && this.tooltipToggle(this.getHandle());
                }, Slider.prototype.handleLeave = function(e) {
                    !this.tooltip.isVisible || 'Hover' !== this.tooltip.showOn || e.currentTarget.classList.contains(slider_classNames.sliderHandleFocused) || e.currentTarget.classList.contains(slider_classNames.sliderTabHandle) || this.closeTooltip();
                }, Slider.prototype.setHandler = function() {
                    this.min > this.max && (this.min = this.max), this.createFirstHandle(), 'Range' === this.type && this.createSecondHandle();
                }, Slider.prototype.setEnableRTL = function() {
                    this.enableRtl && 'Vertical' !== this.orientation ? (0, ej2_base /* addClass */ .cn)([
                        this.sliderContainer
                    ], slider_classNames.rtl) : (0, ej2_base /* removeClass */ .IV)([
                        this.sliderContainer
                    ], slider_classNames.rtl);
                    var preDir = 'Vertical' !== this.orientation ? this.horDir : this.verDir;
                    this.enableRtl ? this.horDir = 'right' : this.horDir = 'left', this.verDir = 'bottom', preDir !== ('Vertical' !== this.orientation ? this.horDir : this.verDir) && 'Horizontal' === this.orientation && ((0, ej2_base /* setStyleAttribute */ .V7)(this.firstHandle, {
                        right: '',
                        left: 'auto'
                    }), 'Range' === this.type && (0, ej2_base /* setStyleAttribute */ .V7)(this.secondHandle, {
                        top: '',
                        left: 'auto'
                    })), this.setBarColor();
                }, Slider.prototype.tooltipValue = function() {
                    var text, _this = this, args = {
                        value: this.value,
                        text: ''
                    };
                    this.initialTooltip && (this.initialTooltip = !1, this.setTooltipContent(), args.text = text = this.tooltipObj.content, this.trigger('tooltipChange', args, function(observedArgs) {
                        _this.addTooltipClass(observedArgs.text), text !== observedArgs.text && (_this.customAriaText = observedArgs.text, _this.tooltipObj.content = observedArgs.text, _this.setAriaAttrValue(_this.firstHandle), 'Range' === _this.type && _this.setAriaAttrValue(_this.secondHandle));
                    }), this.isMaterialTooltip && this.setPreviousVal('change', this.value));
                }, Slider.prototype.setTooltipContent = function() {
                    var content;
                    content = this.formatContent(this.tooltipFormatInfo, !1), this.tooltipObj.content = content;
                }, Slider.prototype.formatContent = function(formatInfo, ariaContent) {
                    var content = '', handle1 = this.handleVal1, handle2 = this.handleVal2;
                    return (!(0, ej2_base /* isNullOrUndefined */ .le)(this.customValues) && this.customValues.length > 0 && (handle1 = this.customValues[this.handleVal1], handle2 = this.customValues[this.handleVal2]), ariaContent) ? 'Range' === this.type ? content = this.enableRtl && 'Vertical' !== this.orientation ? (0, ej2_base /* isNullOrUndefined */ .le)(this.tooltip) || (0, ej2_base /* isNullOrUndefined */ .le)(this.tooltip.format) ? handle2.toString() + ' - ' + handle1.toString() : this.formatString(handle2, formatInfo).elementVal + ' - ' + this.formatString(handle1, formatInfo).elementVal : (0, ej2_base /* isNullOrUndefined */ .le)(this.tooltip) || (0, ej2_base /* isNullOrUndefined */ .le)(this.tooltip.format) ? handle1.toString() + ' - ' + handle2.toString() : this.formatString(handle1, formatInfo).elementVal + ' - ' + this.formatString(handle2, formatInfo).elementVal : (0, ej2_base /* isNullOrUndefined */ .le)(handle1) || (content = (0, ej2_base /* isNullOrUndefined */ .le)(this.tooltip) || (0, ej2_base /* isNullOrUndefined */ .le)(this.tooltip.format) ? handle1.toString() : this.formatString(handle1, formatInfo).elementVal) : 'Range' === this.type ? content = this.enableRtl && 'Vertical' !== this.orientation ? (0, ej2_base /* isNullOrUndefined */ .le)(formatInfo.format) ? handle2.toString() + ' - ' + handle1.toString() : this.formatString(handle2, formatInfo).formatString + ' - ' + this.formatString(handle1, formatInfo).formatString : (0, ej2_base /* isNullOrUndefined */ .le)(formatInfo.format) ? handle1.toString() + ' - ' + handle2.toString() : this.formatString(handle1, formatInfo).formatString + ' - ' + this.formatString(handle2, formatInfo).formatString : (0, ej2_base /* isNullOrUndefined */ .le)(handle1) || (content = (0, ej2_base /* isNullOrUndefined */ .le)(formatInfo.format) ? handle1.toString() : this.formatString(handle1, formatInfo).formatString), content;
                }, Slider.prototype.addTooltipClass = function(content) {
                    if (this.isMaterialTooltip) {
                        var count = content.toString().length;
                        if (this.tooltipElement) {
                            var cssClass = count > 4 ? {
                                oldCss: slider_classNames.sliderMaterialDefault,
                                newCss: slider_classNames.sliderMaterialRange
                            } : {
                                oldCss: slider_classNames.sliderMaterialRange,
                                newCss: slider_classNames.sliderMaterialDefault
                            };
                            this.tooltipElement.classList.remove(cssClass.oldCss), this.tooltipElement.classList.contains(cssClass.newCss) || (this.tooltipElement.classList.add(cssClass.newCss), this.tooltipElement.style.transform = count > 4 ? 'scale(1)' : this.getTooltipTransformProperties(this.previousTooltipClass).rotate);
                        } else {
                            var cssClass = count > 4 ? slider_classNames.sliderMaterialRange : slider_classNames.sliderMaterialDefault;
                            this.tooltipObj.cssClass = slider_classNames.sliderTooltip + ' ' + cssClass;
                        }
                    }
                }, Slider.prototype.tooltipPlacement = function() {
                    return 'Horizontal' === this.orientation ? 'Before' === this.tooltip.placement ? 'TopCenter' : 'BottomCenter' : 'Before' === this.tooltip.placement ? 'LeftCenter' : 'RightCenter';
                }, Slider.prototype.tooltipBeforeOpen = function(args) {
                    this.tooltipElement = args.element, this.tooltip.cssClass && (0, ej2_base /* addClass */ .cn)([
                        this.tooltipElement
                    ], this.tooltip.cssClass.split(' ').filter(function(css) {
                        return css;
                    })), args.target.removeAttribute('aria-describedby'), this.isMaterialTooltip && (this.tooltipElement.firstElementChild.classList.add(slider_classNames.materialTooltipHide), this.handleStart(), this.setTooltipTransform());
                }, Slider.prototype.tooltipCollision = function(position) {
                    if (this.isBootstrap || this.isBootstrap4 || this.isMaterial && !this.isMaterialTooltip) {
                        var tooltipOffsetValue = this.isBootstrap4 ? 3 : 6;
                        switch(position){
                            case 'TopCenter':
                                this.tooltipObj.setProperties({
                                    offsetY: -tooltipOffsetValue
                                }, !1);
                                break;
                            case 'BottomCenter':
                                this.tooltipObj.setProperties({
                                    offsetY: tooltipOffsetValue
                                }, !1);
                                break;
                            case 'LeftCenter':
                                this.tooltipObj.setProperties({
                                    offsetX: -tooltipOffsetValue
                                }, !1);
                                break;
                            case 'RightCenter':
                                this.tooltipObj.setProperties({
                                    offsetX: tooltipOffsetValue
                                }, !1);
                        }
                    }
                }, Slider.prototype.materialTooltipEventCallBack = function(event) {
                    this.sliderBarClick(event), ej2_base /* EventHandler.add */ .bi.add(document, 'mousemove touchmove', this.sliderBarMove, this), ej2_base /* EventHandler.add */ .bi.add(document, 'mouseup touchend', this.sliderBarUp, this);
                }, Slider.prototype.wireMaterialTooltipEvent = function(destroy) {
                    this.isMaterialTooltip && (destroy ? ej2_base /* EventHandler.remove */ .bi.remove(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack) : ej2_base /* EventHandler.add */ .bi.add(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack, this));
                }, Slider.prototype.tooltipPositionCalculation = function(position) {
                    var cssClass;
                    switch(position){
                        case 'TopCenter':
                            cssClass = slider_classNames.horizontalTooltipBefore;
                            break;
                        case 'BottomCenter':
                            cssClass = slider_classNames.horizontalTooltipAfter;
                            break;
                        case 'LeftCenter':
                            cssClass = slider_classNames.verticalTooltipBefore;
                            break;
                        case 'RightCenter':
                            cssClass = slider_classNames.verticalTooltipAfter;
                    }
                    return cssClass;
                }, Slider.prototype.getTooltipTransformProperties = function(className) {
                    var transformProperties;
                    if (this.tooltipElement) {
                        var position = 'Horizontal' === this.orientation ? this.tooltipElement.clientHeight + 14 - this.tooltipElement.clientHeight / 2 : this.tooltipElement.clientWidth + 14 - this.tooltipElement.clientWidth / 2;
                        transformProperties = 'Horizontal' === this.orientation ? className === slider_classNames.horizontalTooltipBefore ? {
                            rotate: 'rotate(45deg)',
                            translate: "translateY(" + position + "px)"
                        } : {
                            rotate: 'rotate(225deg)',
                            translate: "translateY(" + -position + "px)"
                        } : className === slider_classNames.verticalTooltipBefore ? {
                            rotate: 'rotate(-45deg)',
                            translate: "translateX(" + position + "px)"
                        } : {
                            rotate: 'rotate(-225deg)',
                            translate: "translateX(" + -position + "px)"
                        };
                    }
                    return transformProperties;
                }, Slider.prototype.openMaterialTooltip = function() {
                    var _this = this;
                    if (this.isMaterialTooltip) {
                        this.refreshTooltip(this.firstHandle);
                        var tooltipContentElement = this.tooltipElement.firstElementChild;
                        tooltipContentElement.classList.remove(slider_classNames.materialTooltipHide), tooltipContentElement.classList.add(slider_classNames.materialTooltipShow), this.firstHandle.style.cursor = 'default', this.tooltipElement.style.transition = this.scaleTransform, this.tooltipElement.classList.add(slider_classNames.materialTooltipOpen), this.materialHandle.style.transform = 'scale(0)', tooltipContentElement.innerText.length > 4 ? this.tooltipElement.style.transform = 'scale(1)' : this.tooltipElement.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate, 'Default' === this.type ? setTimeout(function() {
                            _this.tooltipElement.style.transition = _this.transition.handle;
                        }, 2500) : setTimeout(function() {
                            _this.tooltipElement.style.transition = 'none';
                        }, 2500);
                    }
                }, Slider.prototype.closeMaterialTooltip = function() {
                    var _this = this;
                    if (this.isMaterialTooltip) {
                        var tooltipContentElement = this.tooltipElement.firstElementChild;
                        this.tooltipElement.style.transition = this.scaleTransform, tooltipContentElement.classList.remove(slider_classNames.materialTooltipShow), tooltipContentElement.classList.add(slider_classNames.materialTooltipHide), this.firstHandle.style.cursor = '-webkit-grab', this.firstHandle.style.cursor = 'grab', this.materialHandle && (this.materialHandle.style.transform = 'scale(1)'), this.tooltipElement.classList.remove(slider_classNames.materialTooltipOpen), this.setTooltipTransform(), this.tooltipTarget = void 0, setTimeout(function() {
                            _this.tooltipElement.style.transition = 'none';
                        }, 2500);
                    }
                }, Slider.prototype.checkTooltipPosition = function(args) {
                    var tooltipClass = this.tooltipPositionCalculation(args.collidedPosition);
                    void 0 !== this.tooltipCollidedPosition && this.tooltipCollidedPosition === args.collidedPosition && args.element.classList.contains(tooltipClass) || (this.isMaterialTooltip && (void 0 !== tooltipClass && (args.element.classList.remove(this.previousTooltipClass), args.element.classList.add(tooltipClass), this.previousTooltipClass = tooltipClass), args.element.style.transform && args.element.classList.contains(slider_classNames.materialTooltipOpen) && args.element.firstElementChild.innerText.length <= 4 && (args.element.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate)), this.tooltipCollidedPosition = args.collidedPosition), this.isMaterialTooltip && this.tooltipElement && -1 !== this.tooltipElement.style.transform.indexOf('translate') && this.setTooltipTransform();
                }, Slider.prototype.setTooltipTransform = function() {
                    var transformProperties = this.getTooltipTransformProperties(this.previousTooltipClass);
                    this.tooltipElement.firstElementChild.innerText.length > 4 ? this.tooltipElement.style.transform = transformProperties.translate + " scale(0.01)" : this.tooltipElement.style.transform = transformProperties.translate + " " + transformProperties.rotate + " scale(0.01)";
                }, Slider.prototype.renderTooltip = function() {
                    this.tooltipObj = new Tooltip({
                        showTipPointer: this.isBootstrap || this.isMaterial || this.isBootstrap4 || this.isTailwind || this.isBootstrap5 || this.isFluent,
                        cssClass: slider_classNames.sliderTooltip,
                        height: this.isMaterial ? 30 : 'auto',
                        animation: {
                            open: {
                                effect: 'None'
                            },
                            close: {
                                effect: 'FadeOut',
                                duration: 500
                            }
                        },
                        opensOn: 'Custom',
                        beforeOpen: this.tooltipBeforeOpen.bind(this),
                        beforeCollision: this.checkTooltipPosition.bind(this),
                        beforeClose: this.tooltipBeforeClose.bind(this),
                        enableHtmlSanitizer: this.enableHtmlSanitizer
                    }), this.tooltipObj.appendTo(this.firstHandle), this.initializeTooltipProps();
                }, Slider.prototype.initializeTooltipProps = function() {
                    var tooltipShowOn = 'Auto' === this.tooltip.showOn ? 'Hover' : this.tooltip.showOn;
                    this.setProperties({
                        tooltip: {
                            showOn: tooltipShowOn
                        }
                    }, !0), this.tooltipObj.position = this.tooltipPlacement(), this.tooltipCollision(this.tooltipObj.position), [
                        this.firstHandle,
                        this.rangeBar,
                        this.secondHandle
                    ].forEach(function(handle) {
                        (0, ej2_base /* isNullOrUndefined */ .le)(handle) || (handle.style.transition = 'none');
                    }), this.isMaterialTooltip && (this.sliderContainer.classList.add(slider_classNames.materialSlider), this.tooltipValue(), this.tooltipObj.animation.close.effect = 'None', this.tooltipObj.open(this.firstHandle));
                }, Slider.prototype.tooltipBeforeClose = function() {
                    this.tooltipElement = void 0, this.tooltipCollidedPosition = void 0;
                }, Slider.prototype.setButtons = function() {
                    this.firstBtn = this.createElement('div', {
                        className: slider_classNames.sliderButton + ' ' + slider_classNames.firstButton
                    }), this.firstBtn.appendChild(this.createElement('span', {
                        className: slider_classNames.sliderButtonIcon
                    })), this.isTailwind && this.firstBtn.querySelector('span').classList.add('e-icons'), this.firstBtn.tabIndex = -1, this.secondBtn = this.createElement('div', {
                        className: slider_classNames.sliderButton + ' ' + slider_classNames.secondButton
                    }), this.secondBtn.appendChild(this.createElement('span', {
                        className: slider_classNames.sliderButtonIcon
                    })), this.isTailwind && this.secondBtn.querySelector('span').classList.add('e-icons'), this.secondBtn.tabIndex = -1, this.sliderContainer.classList.add(slider_classNames.sliderButtonClass), this.sliderContainer.appendChild(this.firstBtn), this.sliderContainer.appendChild(this.secondBtn), this.sliderContainer.appendChild(this.element), this.buttonTitle();
                }, Slider.prototype.buttonTitle = function() {
                    var enabledRTL = this.enableRtl && 'Vertical' !== this.orientation;
                    this.l10n.setLocale(this.locale);
                    var decrementTitle = this.l10n.getConstant('decrementTitle'), incrementTitle = this.l10n.getConstant('incrementTitle');
                    (0, ej2_base /* attributes */ .Y4)(enabledRTL ? this.secondBtn : this.firstBtn, {
                        'aria-label': decrementTitle,
                        title: decrementTitle
                    }), (0, ej2_base /* attributes */ .Y4)(enabledRTL ? this.firstBtn : this.secondBtn, {
                        'aria-label': incrementTitle,
                        title: incrementTitle
                    });
                }, Slider.prototype.buttonFocusOut = function() {
                    this.isMaterial && this.getHandle().classList.remove('e-large-thumb-size');
                }, Slider.prototype.repeatButton = function(args) {
                    var value, hVal = this.handleValueUpdate(), enabledRTL = this.enableRtl && 'Vertical' !== this.orientation;
                    args.target.parentElement.classList.contains(slider_classNames.firstButton) || args.target.classList.contains(slider_classNames.firstButton) ? value = enabledRTL ? this.add(hVal, parseFloat(this.step.toString()), !0) : this.add(hVal, parseFloat(this.step.toString()), !1) : (args.target.parentElement.classList.contains(slider_classNames.secondButton) || args.target.classList.contains(slider_classNames.secondButton)) && (value = enabledRTL ? this.add(hVal, parseFloat(this.step.toString()), !1) : this.add(hVal, parseFloat(this.step.toString()), !0)), this.limits.enabled && (value = this.getLimitCorrectedValues(value)), value >= this.min && value <= this.max && (this.changeHandleValue(value), this.tooltipToggle(this.getHandle()));
                }, Slider.prototype.repeatHandlerMouse = function(args) {
                    args.preventDefault(), ('mousedown' === args.type || 'touchstart' === args.type) && (this.buttonClick(args), this.repeatInterval = setInterval(this.repeatButton.bind(this), 180, args));
                }, Slider.prototype.materialChange = function() {
                    this.getHandle().classList.contains('e-large-thumb-size') || this.getHandle().classList.add('e-large-thumb-size');
                }, Slider.prototype.focusHandle = function() {
                    this.getHandle().classList.contains(slider_classNames.sliderTabHandle) || this.getHandle().classList.add(slider_classNames.sliderTabHandle);
                }, Slider.prototype.repeatHandlerUp = function(e) {
                    this.changeEvent('changed', e), this.closeTooltip(), clearInterval(this.repeatInterval), this.getHandle().focus();
                }, Slider.prototype.customTickCounter = function(bigNum) {
                    var tickCount = 4;
                    return !(0, ej2_base /* isNullOrUndefined */ .le)(this.customValues) && this.customValues.length > 0 && (bigNum > 4 && (tickCount = 3), bigNum > 7 && (tickCount = 2), bigNum > 14 && (tickCount = 1), bigNum > 28 && (tickCount = 0)), tickCount;
                }, // tslint:disable-next-line:max-func-body-length
                Slider.prototype.renderScale = function() {
                    var li, islargeTick, orien = 'Vertical' === this.orientation ? 'v' : 'h';
                    this.noOfDecimals = this.numberOfDecimals(this.step), this.ul = this.createElement('ul', {
                        className: slider_classNames.scale + " e-" + orien + '-scale ' + slider_classNames.tick + '-' + this.ticks.placement.toLowerCase(),
                        attrs: {
                            role: 'presentation',
                            tabIndex: '-1',
                            'aria-hidden': 'true'
                        }
                    }), this.ul.style.zIndex = '-1', ej2_base /* Browser.isAndroid */ .AR.isAndroid && 'h' === orien && this.ul.classList.add(slider_classNames.sliderTickPosition);
                    var smallStep = this.ticks.smallStep;
                    this.ticks.showSmallTicks ? smallStep <= 0 && (smallStep = parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.step))) : smallStep = this.ticks.largeStep > 0 ? this.ticks.largeStep : parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.max)) - parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.min));
                    var min = this.fractionalToInteger(this.min), max = this.fractionalToInteger(this.max), steps = this.fractionalToInteger(smallStep), bigNum = !(0, ej2_base /* isNullOrUndefined */ .le)(this.customValues) && this.customValues.length > 0 && this.customValues.length - 1, customStep = this.customTickCounter(bigNum), count = !(0, ej2_base /* isNullOrUndefined */ .le)(this.customValues) && this.customValues.length > 0 ? bigNum * customStep + bigNum : Math.abs((max - min) / steps);
                    this.element.appendChild(this.ul);
                    var start = parseFloat(this.min.toString());
                    'v' === orien && (start = parseFloat(this.max.toString()));
                    var left = 0, tickWidth = 100 / count;
                    tickWidth === 1 / 0 && (tickWidth = 5);
                    for(var i = 0, y = !(0, ej2_base /* isNullOrUndefined */ .le)(this.customValues) && this.customValues.length > 0 ? this.customValues.length - 1 : 0, k = 0; i <= count; i++){
                        if (li = this.createElement('li', {
                            attrs: {
                                class: slider_classNames.tick,
                                role: 'presentation',
                                tabIndex: '-1',
                                'aria-hidden': 'true'
                            }
                        }), !(0, ej2_base /* isNullOrUndefined */ .le)(this.customValues) && this.customValues.length > 0) (islargeTick = i % (customStep + 1) == 0) && ('h' === orien ? (start = this.customValues[k], k++) : (start = this.customValues[y], y--), li.setAttribute('title', start.toString()));
                        else if (li.setAttribute('title', start.toString()), 0 === this.numberOfDecimals(this.max) && 0 === this.numberOfDecimals(this.min) && 0 === this.numberOfDecimals(this.step)) islargeTick = 'h' === orien ? (start - parseFloat(this.min.toString())) % this.ticks.largeStep == 0 : Math.abs(start - parseFloat(this.max.toString())) % this.ticks.largeStep == 0;
                        else {
                            var largestep = this.fractionalToInteger(this.ticks.largeStep), startValue = this.fractionalToInteger(start);
                            islargeTick = 'h' === orien ? (startValue - min) % largestep == 0 : Math.abs(startValue - parseFloat(max.toString())) % largestep == 0;
                        }
                        islargeTick && li.classList.add(slider_classNames.large), 'h' === orien ? li.style.width = tickWidth + '%' : li.style.height = tickWidth + '%';
                        var repeat = islargeTick ? 'Both' === this.ticks.placement ? 2 : 1 : 0;
                        if (islargeTick) for(var j = 0; j < repeat; j++)this.createTick(li, start, tickWidth);
                        else (0, ej2_base /* isNullOrUndefined */ .le)(this.customValues) && this.formatTicksValue(li, start);
                        this.ul.appendChild(li), this.tickElementCollection.push(li);
                        var decimalPoints = void 0;
                        (0, ej2_base /* isNullOrUndefined */ .le)(this.customValues) && (decimalPoints = this.numberOfDecimals(smallStep) > this.numberOfDecimals(start) ? this.numberOfDecimals(smallStep) : this.numberOfDecimals(start), start = 'h' === orien ? this.makeRoundNumber(start + smallStep, decimalPoints) : this.makeRoundNumber(start - smallStep, decimalPoints), left = this.makeRoundNumber(left + smallStep, decimalPoints));
                    }
                    this.ticksAlignment(orien, tickWidth);
                }, Slider.prototype.ticksAlignment = function(orien, tickWidth, triggerEvent) {
                    void 0 === triggerEvent && (triggerEvent = !0), this.firstChild = this.ul.firstElementChild, this.lastChild = this.ul.lastElementChild, this.firstChild.classList.add(slider_classNames.sliderFirstTick), this.lastChild.classList.add(slider_classNames.sliderLastTick), this.sliderContainer.classList.add(slider_classNames.scale + '-' + this.ticks.placement.toLowerCase()), 'h' === orien ? (this.firstChild.style.width = tickWidth / 2 + '%', this.lastChild.style.width = tickWidth / 2 + '%') : (this.firstChild.style.height = tickWidth / 2 + '%', this.lastChild.style.height = tickWidth / 2 + '%');
                    var eventArgs = {
                        ticksWrapper: this.ul,
                        tickElements: this.tickElementCollection
                    };
                    triggerEvent && this.trigger('renderedTicks', eventArgs), this.scaleAlignment();
                }, Slider.prototype.createTick = function(li, start, tickWidth) {
                    var span = this.createElement('span', {
                        className: slider_classNames.tickValue + ' ' + slider_classNames.tick + '-' + this.ticks.placement.toLowerCase(),
                        attrs: {
                            role: 'presentation',
                            tabIndex: '-1',
                            'aria-hidden': 'true'
                        }
                    });
                    li.appendChild(span), (0, ej2_base /* isNullOrUndefined */ .le)(this.customValues) ? this.formatTicksValue(li, start, span, tickWidth) : this.enableHtmlSanitizer ? span.innerHTML = ej2_base /* SanitizeHtmlHelper.sanitize */ .pJ.sanitize(start.toString()) : span.innerHTML = start.toString();
                }, Slider.prototype.formatTicksValue = function(li, start, spanElement, tickWidth) {
                    var _this = this, tickText = this.formatNumber(start), text = (0, ej2_base /* isNullOrUndefined */ .le)(this.ticks) || (0, ej2_base /* isNullOrUndefined */ .le)(this.ticks.format) ? tickText : this.formatString(start, this.ticksFormatInfo).formatString;
                    this.trigger('renderingTicks', {
                        value: start,
                        text: text,
                        tickElement: li
                    }, function(observedArgs) {
                        li.setAttribute('title', observedArgs.text.toString()), spanElement && (_this.enableHtmlSanitizer ? spanElement.innerHTML = ej2_base /* SanitizeHtmlHelper.sanitize */ .pJ.sanitize(observedArgs.text.toString()) : spanElement.innerHTML = observedArgs.text.toString());
                    });
                }, Slider.prototype.scaleAlignment = function() {
                    this.tickValuePosition(), this.orientation, 'Vertical' === this.orientation ? this.element.getBoundingClientRect().width <= 15 ? this.sliderContainer.classList.add(slider_classNames.sliderSmallSize) : this.sliderContainer.classList.remove(slider_classNames.sliderSmallSize) : this.element.getBoundingClientRect().height <= 15 ? this.sliderContainer.classList.add(slider_classNames.sliderSmallSize) : this.sliderContainer.classList.remove(slider_classNames.sliderSmallSize);
                }, Slider.prototype.tickValuePosition = function() {
                    this.firstChild = this.element.querySelector('ul').children[0];
                    var firstChild, otherChild, other, first = this.firstChild.getBoundingClientRect(), smallStep = this.ticks.smallStep, count = Math.abs(parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.max)) - parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.min))) / smallStep;
                    this.firstChild.children.length > 0 && (firstChild = this.firstChild.children[0].getBoundingClientRect());
                    var tickElements = [
                        this.sliderContainer.querySelectorAll('.' + slider_classNames.tick + '.' + slider_classNames.large + ' .' + slider_classNames.tickValue)
                    ];
                    other = 'Both' === this.ticks.placement ? [].slice.call(tickElements[0], 2) : [].slice.call(tickElements[0], 1);
                    for(var tickWidth = 'Vertical' === this.orientation ? 2 * first.height : 2 * first.width, i = 0; i < this.firstChild.children.length; i++)'Vertical' === this.orientation ? this.firstChild.children[i].style.top = -(firstChild.height / 2) + 'px' : this.enableRtl ? this.firstChild.children[i].style.left = (tickWidth - this.firstChild.children[i].getBoundingClientRect().width) / 2 + 'px' : this.firstChild.children[i].style.left = -(firstChild.width / 2) + 'px';
                    for(var i = 0; i < other.length; i++)otherChild = other[i].getBoundingClientRect(), 'Vertical' === this.orientation ? (0, ej2_base /* setStyleAttribute */ .V7)(other[i], {
                        top: (tickWidth - otherChild.height) / 2 + 'px'
                    }) : (0, ej2_base /* setStyleAttribute */ .V7)(other[i], {
                        left: (tickWidth - otherChild.width) / 2 + 'px'
                    });
                    this.enableRtl && this.lastChild.children.length && 0 !== count && (this.lastChild.children[0].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px', 'Both' === this.ticks.placement && (this.lastChild.children[1].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px')), 0 === count && ('Horizontal' === this.orientation && (this.enableRtl ? (this.firstChild.classList.remove(slider_classNames.sliderLastTick), this.firstChild.style.right = this.firstHandle.style.right, this.firstChild.children[0].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + 'px', 'Both' === this.ticks.placement && (this.firstChild.children[1].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + 'px')) : (this.firstChild.classList.remove(slider_classNames.sliderLastTick), this.firstChild.style.left = this.firstHandle.style.left)), 'Vertical' === this.orientation && this.firstChild.classList.remove(slider_classNames.sliderLastTick));
                }, Slider.prototype.setAriaAttrValue = function(element) {
                    var ariaValueText, isTickFormatted = !((0, ej2_base /* isNullOrUndefined */ .le)(this.ticks) || (0, ej2_base /* isNullOrUndefined */ .le)(this.ticks.format)), text = isTickFormatted ? this.formatContent(this.tooltipFormatInfo, !1) : this.formatContent(this.ticksFormatInfo, !1), valuenow = isTickFormatted ? this.formatContent(this.ticksFormatInfo, !0) : this.formatContent(this.tooltipFormatInfo, !0);
                    ariaValueText = 2 === (text = this.customAriaText ? this.customAriaText : text).split(' - ').length ? text.split(' - ') : [
                        text,
                        text
                    ], this.setAriaAttributes(element), 'Range' !== this.type ? (0, ej2_base /* attributes */ .Y4)(element, {
                        'aria-valuenow': valuenow,
                        'aria-valuetext': text
                    }) : this.enableRtl ? element === this.firstHandle ? (0, ej2_base /* attributes */ .Y4)(element, {
                        'aria-valuenow': valuenow.split(' - ')[1],
                        'aria-valuetext': ariaValueText[1]
                    }) : (0, ej2_base /* attributes */ .Y4)(element, {
                        'aria-valuenow': valuenow.split(' - ')[0],
                        'aria-valuetext': ariaValueText[0]
                    }) : element === this.firstHandle ? (0, ej2_base /* attributes */ .Y4)(element, {
                        'aria-valuenow': valuenow.split(' - ')[0],
                        'aria-valuetext': ariaValueText[0]
                    }) : (0, ej2_base /* attributes */ .Y4)(element, {
                        'aria-valuenow': valuenow.split(' - ')[1],
                        'aria-valuetext': ariaValueText[1]
                    });
                }, Slider.prototype.handleValueUpdate = function() {
                    return 'Range' === this.type ? 1 === this.activeHandle ? this.handleVal1 : this.handleVal2 : this.handleVal1;
                }, Slider.prototype.getLimitCorrectedValues = function(value) {
                    return value = 'MinRange' === this.type || 'Default' === this.type ? this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0] : 1 === this.activeHandle ? this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0] : this.getLimitValueAndPosition(value, this.limits.maxStart, this.limits.maxEnd)[0];
                }, Slider.prototype.focusSliderElement = function() {
                    this.isElementFocused || (this.element.focus(), this.isElementFocused = !0);
                }, Slider.prototype.buttonClick = function(args) {
                    this.focusSliderElement();
                    var value, enabledRTL = this.enableRtl && 'Vertical' !== this.orientation, hVal = this.handleValueUpdate();
                    40 === args.keyCode || 37 === args.keyCode || args.currentTarget.classList.contains(slider_classNames.firstButton) ? value = // eslint-disable-next-line
                    enabledRTL ? this.add(hVal, parseFloat(this.step.toString()), !0) : this.add(hVal, parseFloat(this.step.toString()), !1) : 38 === args.keyCode || 39 === args.keyCode || args.currentTarget.classList.contains(slider_classNames.secondButton) ? value = // eslint-disable-next-line
                    enabledRTL ? this.add(hVal, parseFloat(this.step.toString()), !1) : this.add(hVal, parseFloat(this.step.toString()), !0) : 33 === args.keyCode || args.currentTarget.classList.contains(slider_classNames.firstButton) ? value = // eslint-disable-next-line
                    enabledRTL ? this.add(hVal, parseFloat(this.ticks.largeStep.toString()), !1) : this.add(hVal, parseFloat(this.ticks.largeStep.toString()), !0) : 34 === args.keyCode || args.currentTarget.classList.contains(slider_classNames.secondButton) ? value = // eslint-disable-next-line
                    enabledRTL ? this.add(hVal, parseFloat(this.ticks.largeStep.toString()), !0) : this.add(hVal, parseFloat(this.ticks.largeStep.toString()), !1) : 36 === args.keyCode ? value = parseFloat(this.min.toString()) : 35 === args.keyCode && (value = parseFloat(this.max.toString())), this.limits.enabled && (value = this.getLimitCorrectedValues(value)), this.changeHandleValue(value), !this.isMaterial || this.tooltip.isVisible || this.getHandle().classList.contains(slider_classNames.sliderTabHandle) || this.materialChange(), this.tooltipToggle(this.getHandle()), this.getHandle().focus(), this.focusHandle(), args.currentTarget.classList.contains(slider_classNames.firstButton) && ej2_base /* EventHandler.add */ .bi.add(this.firstBtn, 'mouseup touchend', this.buttonUp, this), args.currentTarget.classList.contains(slider_classNames.secondButton) && ej2_base /* EventHandler.add */ .bi.add(this.secondBtn, 'mouseup touchend', this.buttonUp, this);
                }, Slider.prototype.tooltipToggle = function(target) {
                    this.isMaterialTooltip ? // eslint-disable-next-line
                    this.tooltipElement.classList.contains(slider_classNames.materialTooltipOpen) ? this.refreshTooltip(this.firstHandle) : this.openMaterialTooltip() : // eslint-disable-next-line
                    this.tooltipElement ? this.refreshTooltip(target) : this.openTooltip(target);
                }, Slider.prototype.buttonUp = function(args) {
                    args.currentTarget.classList.contains(slider_classNames.firstButton) && ej2_base /* EventHandler.remove */ .bi.remove(this.firstBtn, 'mouseup touchend', this.buttonUp), args.currentTarget.classList.contains(slider_classNames.secondButton) && ej2_base /* EventHandler.remove */ .bi.remove(this.secondBtn, 'mouseup touchend', this.buttonUp);
                }, Slider.prototype.setRangeBar = function() {
                    'Horizontal' === this.orientation ? 'MinRange' === this.type ? (// eslint-disable-next-line
                    this.enableRtl ? this.rangeBar.style.right = '0px' : this.rangeBar.style.left = '0px', (0, ej2_base /* setStyleAttribute */ .V7)(this.rangeBar, {
                        width: (0, ej2_base /* isNullOrUndefined */ .le)(this.handlePos1) ? 0 : this.handlePos1 + 'px'
                    })) : (// eslint-disable-next-line
                    this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + 'px' : this.rangeBar.style.left = this.handlePos1 + 'px', (0, ej2_base /* setStyleAttribute */ .V7)(this.rangeBar, {
                        width: this.handlePos2 - this.handlePos1 + 'px'
                    })) : 'MinRange' === this.type ? (this.rangeBar.style.bottom = '0px', (0, ej2_base /* setStyleAttribute */ .V7)(this.rangeBar, {
                        height: (0, ej2_base /* isNullOrUndefined */ .le)(this.handlePos1) ? 0 : this.handlePos1 + 'px'
                    })) : (this.rangeBar.style.bottom = this.handlePos1 + 'px', (0, ej2_base /* setStyleAttribute */ .V7)(this.rangeBar, {
                        height: this.handlePos2 - this.handlePos1 + 'px'
                    }));
                }, Slider.prototype.checkValidValueAndPos = function(value) {
                    return value = this.checkHandleValue(value), value = this.checkHandlePosition(value);
                }, Slider.prototype.setLimitBarPositions = function(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion) {
                    'Horizontal' === this.orientation ? (this.enableRtl ? this.limitBarFirst.style.right = fromMinPostion + 'px' : this.limitBarFirst.style.left = fromMinPostion + 'px', this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + 'px') : (this.limitBarFirst.style.bottom = fromMinPostion + 'px', this.limitBarFirst.style.height = fromMaxpostion - fromMinPostion + 'px'), 'Range' === this.type && ('Horizontal' === this.orientation ? (this.enableRtl ? this.limitBarSecond.style.right = toMinPostion + 'px' : this.limitBarSecond.style.left = toMinPostion + 'px', this.limitBarSecond.style.width = toMaxpostion - toMinPostion + 'px') : (this.limitBarSecond.style.bottom = toMinPostion + 'px', this.limitBarSecond.style.height = toMaxpostion - toMinPostion + 'px'));
                }, Slider.prototype.setLimitBar = function() {
                    if ('Default' === this.type || 'MinRange' === this.type) {
                        var fromPosition = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, !0)[0];
                        fromPosition = this.checkValidValueAndPos(fromPosition);
                        var toPosition = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, !0)[0];
                        toPosition = this.checkValidValueAndPos(toPosition), this.setLimitBarPositions(fromPosition, toPosition);
                    } else if ('Range' === this.type) {
                        var fromMinPostion = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, !0)[0];
                        fromMinPostion = this.checkValidValueAndPos(fromMinPostion);
                        var fromMaxpostion = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, !0)[0];
                        fromMaxpostion = this.checkValidValueAndPos(fromMaxpostion);
                        var toMinPostion = this.getLimitValueAndPosition(this.limits.maxStart, this.limits.maxStart, this.limits.maxEnd, !0)[0];
                        toMinPostion = this.checkValidValueAndPos(toMinPostion);
                        var toMaxpostion = this.getLimitValueAndPosition(this.limits.maxEnd, this.limits.maxStart, this.limits.maxEnd, !0)[0];
                        toMaxpostion = this.checkValidValueAndPos(toMaxpostion), this.setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion);
                    }
                }, Slider.prototype.getLimitValueAndPosition = function(currentValue, minValue, maxValue, limitBar) {
                    return (0, ej2_base /* isNullOrUndefined */ .le)(minValue) && (minValue = this.min, (0, ej2_base /* isNullOrUndefined */ .le)(currentValue) && limitBar && (currentValue = minValue)), (0, ej2_base /* isNullOrUndefined */ .le)(maxValue) && (maxValue = this.max, (0, ej2_base /* isNullOrUndefined */ .le)(currentValue) && limitBar && (currentValue = maxValue)), currentValue < minValue && (currentValue = minValue), currentValue > maxValue && (currentValue = maxValue), [
                        currentValue,
                        this.checkHandlePosition(currentValue)
                    ];
                }, Slider.prototype.setValue = function() {
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.customValues) && this.customValues.length > 0 && (this.min = 0, this.max = this.customValues.length - 1, this.setBarColor()), this.setAriaAttributes(this.firstHandle), this.handleVal1 = (0, ej2_base /* isNullOrUndefined */ .le)(this.value) ? this.checkHandleValue(parseFloat(this.min.toString())) : this.checkHandleValue(parseFloat(this.value.toString())), this.handlePos1 = this.checkHandlePosition(this.handleVal1), this.preHandlePos1 = this.handlePos1, // eslint-disable-next-line
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.activeHandle) ? 'Range' === this.type ? this.activeHandle = 2 : this.activeHandle = 1 : // eslint-disable-next-line no-self-assign
                    this.activeHandle = this.activeHandle, 'Default' === this.type || 'MinRange' === this.type) {
                        if (this.limits.enabled) {
                            var values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
                            this.handleVal1 = values[0], this.handlePos1 = values[1], this.preHandlePos1 = this.handlePos1;
                        }
                        this.setHandlePosition(null), this.handleStart(), this.value = this.handleVal1, this.setAriaAttrValue(this.firstHandle), this.changeEvent('changed', null);
                    } else this.validateRangeValue();
                    'Default' !== this.type && this.setRangeBar(), this.limits.enabled && this.setLimitBar();
                }, Slider.prototype.rangeValueUpdate = function() {
                    (null === this.value || 'object' != typeof this.value) && (this.value = [
                        parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.min)),
                        parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.max))
                    ]);
                }, Slider.prototype.validateRangeValue = function() {
                    this.rangeValueUpdate(), this.setRangeValue();
                }, Slider.prototype.modifyZindex = function() {
                    'Range' === this.type ? 1 === this.activeHandle ? (this.firstHandle.style.zIndex = this.zIndex + 4 + '', this.secondHandle.style.zIndex = this.zIndex + 3 + '') : (this.firstHandle.style.zIndex = this.zIndex + 3 + '', this.secondHandle.style.zIndex = this.zIndex + 4 + '') : this.isMaterialTooltip && this.tooltipElement && (this.tooltipElement.style.zIndex = (0, popup_popup /* getZindexPartial */ .TE)(this.element) + '');
                }, Slider.prototype.setHandlePosition = function(event) {
                    var handle, _this = this, pos = 1 === this.activeHandle ? this.handlePos1 : this.handlePos2;
                    handle = this.isMaterialTooltip ? [
                        this.firstHandle,
                        this.materialHandle
                    ] : [
                        this.getHandle()
                    ], this.handleStart(), handle.forEach(function(handle) {
                        'Horizontal' === _this.orientation ? // eslint-disable-next-line
                        _this.enableRtl ? handle.style.right = pos + "px" : handle.style.left = pos + "px" : handle.style.bottom = pos + "px";
                    }), this.changeEvent('change', event);
                }, Slider.prototype.getHandle = function() {
                    return 1 === this.activeHandle ? this.firstHandle : this.secondHandle;
                }, Slider.prototype.setRangeValue = function() {
                    this.updateRangeValue(), this.activeHandle = 1, this.setHandlePosition(null), this.activeHandle = 2, this.setHandlePosition(null), this.activeHandle = 1;
                }, Slider.prototype.changeEvent = function(eventName, e) {
                    var previous = 'change' === eventName ? this.previousVal : this.previousChanged;
                    if ('Range' !== this.type) this.setProperties({
                        value: this.handleVal1
                    }, !0), previous === this.value || this.isMaterialTooltip && this.initialTooltip || (this.trigger(eventName, this.changeEventArgs(eventName, e)), this.initialTooltip = !0, this.setPreviousVal(eventName, this.value)), this.setAriaAttrValue(this.firstHandle);
                    else {
                        var value = this.value = [
                            this.handleVal1,
                            this.handleVal2
                        ];
                        this.setProperties({
                            value: value
                        }, !0), (previous.length === this.value.length && this.value[0] !== previous[0] || this.value[1] !== previous[1]) && (this.initialTooltip = !1, this.trigger(eventName, this.changeEventArgs(eventName, e)), this.initialTooltip = !0, this.setPreviousVal(eventName, this.value)), this.setAriaAttrValue(this.getHandle());
                    }
                    this.hiddenInput.value = this.value.toString();
                }, Slider.prototype.changeEventArgs = function(eventName, e) {
                    var eventArgs;
                    return this.tooltip.isVisible && this.tooltipObj && this.initialTooltip ? (this.tooltipValue(), eventArgs = {
                        value: this.value,
                        previousValue: 'change' === eventName ? this.previousVal : this.previousChanged,
                        action: eventName,
                        text: this.tooltipObj.content,
                        isInteracted: !(0, ej2_base /* isNullOrUndefined */ .le)(e)
                    }) : eventArgs = {
                        value: this.value,
                        previousValue: 'change' === eventName ? this.previousVal : this.previousChanged,
                        action: eventName,
                        text: (0, ej2_base /* isNullOrUndefined */ .le)(this.ticksFormatInfo.format) ? this.value.toString() : 'Range' !== this.type ? this.formatString(this.value, this.ticksFormatInfo).formatString : this.formatString(this.value[0], this.ticksFormatInfo).formatString + ' - ' + this.formatString(this.value[1], this.ticksFormatInfo).formatString,
                        isInteracted: !(0, ej2_base /* isNullOrUndefined */ .le)(e)
                    }, eventArgs;
                }, Slider.prototype.setPreviousVal = function(eventName, value) {
                    'change' === eventName ? this.previousVal = value : this.previousChanged = value;
                }, Slider.prototype.updateRangeValue = function() {
                    var values = this.value.toString().split(',').map(Number);
                    if (this.enableRtl && 'Vertical' !== this.orientation || this.rtl ? this.value = [
                        values[1],
                        values[0]
                    ] : this.value = [
                        values[0],
                        values[1]
                    ], this.enableRtl && 'Vertical' !== this.orientation ? (this.handleVal1 = this.checkHandleValue(this.value[1]), this.handleVal2 = this.checkHandleValue(this.value[0])) : (this.handleVal1 = this.checkHandleValue(this.value[0]), this.handleVal2 = this.checkHandleValue(this.value[1])), this.handlePos1 = this.checkHandlePosition(this.handleVal1), this.handlePos2 = this.checkHandlePosition(this.handleVal2), this.handlePos1 > this.handlePos2 && (this.handlePos1 = this.handlePos2, this.handleVal1 = this.handleVal2), this.preHandlePos1 = this.handlePos1, this.preHandlePos2 = this.handlePos2, this.limits.enabled) {
                        this.activeHandle = 1;
                        var values_1 = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
                        this.handleVal1 = values_1[0], this.handlePos1 = values_1[1], this.preHandlePos1 = this.handlePos1, this.activeHandle = 2, values_1 = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd), this.handleVal2 = values_1[0], this.handlePos2 = values_1[1], this.preHandlePos2 = this.handlePos2;
                    }
                }, Slider.prototype.checkHandlePosition = function(value) {
                    var pos;
                    return value = 100 * (value - parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.min))) / (parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.max)) - parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.min))), pos = 'Horizontal' === this.orientation ? this.element.getBoundingClientRect().width * (value / 100) : this.element.getBoundingClientRect().height * (value / 100), parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.max)) === parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.min)) && (pos = 'Horizontal' === this.orientation ? this.element.getBoundingClientRect().width : this.element.getBoundingClientRect().height), pos;
                }, Slider.prototype.checkHandleValue = function(value) {
                    if (this.min > this.max && (this.min = this.max), this.min === this.max) return parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.max));
                    var handle = this.tempStartEnd();
                    return value < handle.start ? value = handle.start : value > handle.end && (value = handle.end), value;
                }, /**
     * It is used to reposition slider.
     * @returns void
     */ Slider.prototype.reposition = function() {
                    var _this = this;
                    this.firstHandle.style.transition = 'none', 'Default' !== this.type && (this.rangeBar.style.transition = 'none'), 'Range' === this.type && (this.secondHandle.style.transition = 'none'), this.handlePos1 = this.checkHandlePosition(this.handleVal1), this.handleVal2 && (this.handlePos2 = this.checkHandlePosition(this.handleVal2)), 'Horizontal' === this.orientation ? (// eslint-disable-next-line
                    this.enableRtl ? this.firstHandle.style.right = this.handlePos1 + "px" : this.firstHandle.style.left = this.handlePos1 + "px", this.isMaterialTooltip && // eslint-disable-next-line
                    (this.enableRtl ? this.materialHandle.style.right = this.handlePos1 + "px" : this.materialHandle.style.left = this.handlePos1 + "px"), 'MinRange' === this.type ? (// eslint-disable-next-line
                    this.enableRtl ? this.rangeBar.style.right = '0px' : this.rangeBar.style.left = '0px', (0, ej2_base /* setStyleAttribute */ .V7)(this.rangeBar, {
                        width: (0, ej2_base /* isNullOrUndefined */ .le)(this.handlePos1) ? 0 : this.handlePos1 + 'px'
                    })) : 'Range' === this.type && (// eslint-disable-next-line
                    this.enableRtl ? this.secondHandle.style.right = this.handlePos2 + "px" : this.secondHandle.style.left = this.handlePos2 + "px", // eslint-disable-next-line
                    this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + 'px' : this.rangeBar.style.left = this.handlePos1 + 'px', (0, ej2_base /* setStyleAttribute */ .V7)(this.rangeBar, {
                        width: this.handlePos2 - this.handlePos1 + 'px'
                    }))) : (this.firstHandle.style.bottom = this.handlePos1 + "px", this.isMaterialTooltip && (this.materialHandle.style.bottom = this.handlePos1 + "px"), 'MinRange' === this.type ? (this.rangeBar.style.bottom = '0px', (0, ej2_base /* setStyleAttribute */ .V7)(this.rangeBar, {
                        height: (0, ej2_base /* isNullOrUndefined */ .le)(this.handlePos1) ? 0 : this.handlePos1 + 'px'
                    })) : 'Range' === this.type && (this.secondHandle.style.bottom = this.handlePos2 + "px", this.rangeBar.style.bottom = this.handlePos1 + 'px', (0, ej2_base /* setStyleAttribute */ .V7)(this.rangeBar, {
                        height: this.handlePos2 - this.handlePos1 + 'px'
                    }))), this.limits.enabled && this.setLimitBar(), 'None' !== this.ticks.placement && this.ul && (this.removeElement(this.ul), this.ul = void 0, this.renderScale()), this.handleStart(), this.tooltip.isVisible || setTimeout(function() {
                        _this.firstHandle.style.transition = _this.scaleTransform, 'Range' === _this.type && (_this.secondHandle.style.transition = _this.scaleTransform);
                    }), this.refreshTooltip(this.tooltipTarget), this.setBarColor();
                }, Slider.prototype.changeHandleValue = function(value) {
                    var position = null;
                    1 === this.activeHandle ? this.limits.enabled && this.limits.startHandleFixed || (this.handleVal1 = this.checkHandleValue(value), this.handlePos1 = this.checkHandlePosition(this.handleVal1), 'Range' === this.type && this.handlePos1 > this.handlePos2 && (this.handlePos1 = this.handlePos2, this.handleVal1 = this.handleVal2), this.handlePos1 === this.preHandlePos1 || (position = this.preHandlePos1 = this.handlePos1)) : this.limits.enabled && this.limits.endHandleFixed || (this.handleVal2 = this.checkHandleValue(value), this.handlePos2 = this.checkHandlePosition(this.handleVal2), 'Range' === this.type && this.handlePos2 < this.handlePos1 && (this.handlePos2 = this.handlePos1, this.handleVal2 = this.handleVal1), this.handlePos2 === this.preHandlePos2 || (position = this.preHandlePos2 = this.handlePos2)), this.modifyZindex(), null !== position && ('Default' !== this.type && this.setRangeBar(), this.setHandlePosition(null));
                }, // eslint-disable-next-line
                Slider.prototype.tempStartEnd = function() {
                    return this.min > this.max ? {
                        start: this.max,
                        end: this.min
                    } : {
                        start: this.min,
                        end: this.max
                    };
                }, // eslint-disable-next-line
                Slider.prototype.xyToPosition = function(position) {
                    if (this.min === this.max) return 100;
                    if ('Horizontal' === this.orientation) {
                        var left = position.x - this.element.getBoundingClientRect().left, num = this.element.offsetWidth / 100;
                        this.val = left / num;
                    } else {
                        var top_1 = position.y - this.element.getBoundingClientRect().top, num = this.element.offsetHeight / 100;
                        this.val = 100 - top_1 / num;
                    }
                    var val = this.stepValueCalculation(this.val);
                    return val < 0 ? val = 0 : val > 100 && (val = 100), this.enableRtl && 'Vertical' !== this.orientation && (val = 100 - val), 'Horizontal' === this.orientation ? this.element.getBoundingClientRect().width * (val / 100) : this.element.getBoundingClientRect().height * (val / 100);
                }, Slider.prototype.stepValueCalculation = function(value) {
                    0 === this.step && (this.step = 1);
                    var percentStep = parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.step)) / ((parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.max)) - parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.min))) / 100), remain = value % Math.abs(percentStep);
                    return 0 !== remain && (percentStep / 2 > remain ? value -= remain : value += Math.abs(percentStep) - remain), value;
                }, Slider.prototype.add = function(a, b, addition) {
                    return addition ? (Math.round(1000 * a) + Math.round(1000 * b)) / 1000 : (Math.round(1000 * a) - Math.round(1000 * b)) / 1000;
                }, Slider.prototype.positionToValue = function(pos) {
                    var val, diff = parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.max)) - parseFloat((0, ej2_base /* formatUnit */ .Ac)(this.min));
                    return val = 'Horizontal' === this.orientation ? pos / this.element.getBoundingClientRect().width * diff : pos / this.element.getBoundingClientRect().height * diff, this.add(val, parseFloat(this.min.toString()), !0);
                }, Slider.prototype.sliderBarClick = function(evt) {
                    evt.preventDefault(), 'mousedown' === evt.type || 'mouseup' === evt.type || 'click' === evt.type ? pos = {
                        x: evt.clientX,
                        y: evt.clientY
                    } : ('touchend' === evt.type || 'touchstart' === evt.type) && (pos = {
                        x: evt.changedTouches[0].clientX,
                        y: evt.changedTouches[0].clientY
                    });
                    var pos, handlepos = this.xyToPosition(pos), handleVal = this.positionToValue(handlepos);
                    if ('Range' === this.type && this.handlePos2 - handlepos < handlepos - this.handlePos1) {
                        if (this.activeHandle = 2, !(this.limits.enabled && this.limits.endHandleFixed)) {
                            if (this.limits.enabled) {
                                var value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);
                                handleVal = value[0], handlepos = value[1];
                            }
                            this.secondHandle.classList.add(slider_classNames.sliderActiveHandle), this.handlePos2 = this.preHandlePos2 = handlepos, this.handleVal2 = handleVal;
                        }
                        this.modifyZindex(), this.secondHandle.focus();
                    } else {
                        if (this.activeHandle = 1, !(this.limits.enabled && this.limits.startHandleFixed)) {
                            if (this.limits.enabled) {
                                var value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
                                handleVal = value[0], handlepos = value[1];
                            }
                            this.firstHandle.classList.add(slider_classNames.sliderActiveHandle), this.handlePos1 = this.preHandlePos1 = handlepos, this.handleVal1 = handleVal;
                        }
                        this.modifyZindex(), this.firstHandle.focus();
                    }
                    this.isMaterialTooltip && this.tooltipElement.classList.add(slider_classNames.materialTooltipActive);
                    var focusedElement = this.element.querySelector('.' + slider_classNames.sliderTabHandle);
                    focusedElement && this.getHandle() !== focusedElement && focusedElement.classList.remove(slider_classNames.sliderTabHandle);
                    var handle = 1 === this.activeHandle ? this.firstHandle : this.secondHandle;
                    if (evt.target === handle) {
                        !this.isMaterial || this.tooltip.isVisible || this.getHandle().classList.contains(slider_classNames.sliderTabHandle) || this.materialChange(), this.sliderBarUp(evt), this.tooltipToggle(this.getHandle());
                        return;
                    }
                    if (this.checkRepeatedValue(handleVal)) {
                        var transition = this.isMaterial && this.tooltip.isVisible ? this.transitionOnMaterialTooltip : this.transition;
                        this.getHandle().style.transition = transition.handle, 'Default' !== this.type && (this.rangeBar.style.transition = transition.rangeBar), this.setHandlePosition(evt), this.isMaterialTooltip && (this.initialTooltip = !1), this.changeEvent('changed', evt), 'Default' !== this.type && this.setRangeBar();
                    }
                }, Slider.prototype.handleValueAdjust = function(handleValue, assignValue, handleNumber) {
                    1 === handleNumber ? (this.handleVal1 = assignValue, this.handleVal2 = this.handleVal1 + this.minDiff) : 2 === handleNumber && (this.handleVal2 = assignValue, this.handleVal1 = this.handleVal2 - this.minDiff), this.handlePos1 = this.checkHandlePosition(this.handleVal1), this.handlePos2 = this.checkHandlePosition(this.handleVal2);
                }, Slider.prototype.dragRangeBarMove = function(event) {
                    if ('touchmove' !== event.type && event.preventDefault(), this.rangeBarDragged = !0, this.rangeBar.style.transition = 'none', this.firstHandle.style.transition = 'none', this.secondHandle.style.transition = 'none', 'mousemove' === event.type ? (xPostion = (_a = [
                        event.clientX,
                        event.clientY
                    ])[0], yPostion = _a[1]) : (xPostion = (_b = [
                        event.changedTouches[0].clientX,
                        event.changedTouches[0].clientY
                    ])[0], yPostion = _b[1]), !(this.limits.enabled && this.limits.startHandleFixed) && !(this.limits.enabled && this.limits.endHandleFixed)) {
                        if (pos = this.enableRtl ? {
                            x: xPostion + this.secondPartRemain,
                            y: yPostion + this.secondPartRemain
                        } : {
                            x: xPostion - this.firstPartRemain,
                            y: yPostion + this.secondPartRemain
                        }, this.handlePos1 = this.xyToPosition(pos), this.handleVal1 = this.positionToValue(this.handlePos1), pos = this.enableRtl ? {
                            x: xPostion - this.firstPartRemain,
                            y: yPostion - this.firstPartRemain
                        } : {
                            x: xPostion + this.secondPartRemain,
                            y: yPostion - this.firstPartRemain
                        }, this.handlePos2 = this.xyToPosition(pos), this.handleVal2 = this.positionToValue(this.handlePos2), this.limits.enabled) {
                            var _a, _b, pos, xPostion, yPostion, value = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
                            this.handleVal1 = value[0], this.handlePos1 = value[1], this.handleVal1 === this.limits.minEnd && this.handleValueAdjust(this.handleVal1, this.limits.minEnd, 1), this.handleVal1 === this.limits.minStart && this.handleValueAdjust(this.handleVal1, this.limits.minStart, 1), value = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd), this.handleVal2 = value[0], this.handlePos2 = value[1], this.handleVal2 === this.limits.maxStart && this.handleValueAdjust(this.handleVal2, this.limits.maxStart, 2), this.handleVal2 === this.limits.maxEnd && this.handleValueAdjust(this.handleVal2, this.limits.maxEnd, 2);
                        }
                        this.handleVal2 === this.max && this.handleValueAdjust(this.handleVal2, this.max, 2), this.handleVal1 === this.min && this.handleValueAdjust(this.handleVal1, this.min, 1);
                    }
                    this.activeHandle = 1, this.setHandlePosition(event), this.activeHandle = 2, this.setHandlePosition(event), this.tooltipToggle(this.rangeBar), this.setRangeBar();
                }, Slider.prototype.sliderBarUp = function(event) {
                    this.changeEvent('changed', event), this.handleFocusOut(), this.firstHandle.classList.remove(slider_classNames.sliderActiveHandle), 'Range' === this.type && (this.initialTooltip = !1, this.secondHandle.classList.remove(slider_classNames.sliderActiveHandle)), this.closeTooltip(), this.isMaterial && (this.getHandle().classList.remove('e-large-thumb-size'), this.isMaterialTooltip && this.tooltipElement.classList.remove(slider_classNames.materialTooltipActive)), ej2_base /* EventHandler.remove */ .bi.remove(document, 'mousemove touchmove', this.sliderBarMove), ej2_base /* EventHandler.remove */ .bi.remove(document, 'mouseup touchend', this.sliderBarUp);
                }, Slider.prototype.sliderBarMove = function(evt) {
                    'touchmove' !== evt.type && evt.preventDefault(), pos = 'mousemove' === evt.type ? {
                        x: evt.clientX,
                        y: evt.clientY
                    } : {
                        x: evt.changedTouches[0].clientX,
                        y: evt.changedTouches[0].clientY
                    };
                    var pos, handlepos = this.xyToPosition(pos), handleVal = this.positionToValue(handlepos);
                    if (handlepos = Math.round(handlepos), 'Range' !== this.type && 1 === this.activeHandle) {
                        if (!(this.limits.enabled && this.limits.startHandleFixed)) {
                            if (this.limits.enabled) {
                                var valueAndPostion = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
                                handlepos = valueAndPostion[1], handleVal = valueAndPostion[0];
                            }
                            this.handlePos1 = handlepos, this.handleVal1 = handleVal;
                        }
                        this.firstHandle.classList.add(slider_classNames.sliderActiveHandle);
                    }
                    if ('Range' === this.type) {
                        if (1 === this.activeHandle) {
                            if (this.firstHandle.classList.add(slider_classNames.sliderActiveHandle), !(this.limits.enabled && this.limits.startHandleFixed) && (handlepos > this.handlePos2 && (handlepos = this.handlePos2, handleVal = this.handleVal2), handlepos !== this.preHandlePos1)) {
                                if (this.limits.enabled) {
                                    var value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
                                    handleVal = value[0], handlepos = value[1];
                                }
                                this.handlePos1 = this.preHandlePos1 = handlepos, this.handleVal1 = handleVal, this.activeHandle = 1;
                            }
                        } else if (2 === this.activeHandle && (this.secondHandle.classList.add(slider_classNames.sliderActiveHandle), !(this.limits.enabled && this.limits.endHandleFixed) && (handlepos < this.handlePos1 && (handlepos = this.handlePos1, handleVal = this.handleVal1), handlepos !== this.preHandlePos2))) {
                            if (this.limits.enabled) {
                                var value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);
                                handleVal = value[0], handlepos = value[1];
                            }
                            this.handlePos2 = this.preHandlePos2 = handlepos, this.handleVal2 = handleVal, this.activeHandle = 2;
                        }
                    }
                    this.checkRepeatedValue(handleVal) && (this.getHandle().style.transition = this.scaleTransform, 'Default' !== this.type && (this.rangeBar.style.transition = 'none'), this.setHandlePosition(evt), !this.isMaterial || this.tooltip.isVisible || this.getHandle().classList.contains(slider_classNames.sliderTabHandle) || this.materialChange(), this.tooltipToggle(this.getHandle()), 'Default' !== this.type && this.setRangeBar());
                }, Slider.prototype.dragRangeBarUp = function(event) {
                    this.rangeBarDragged ? this.isDragComplete = !0 : (this.focusSliderElement(), this.sliderBarClick(event)), this.changeEvent('changed', event), this.closeTooltip(), ej2_base /* EventHandler.remove */ .bi.remove(document, 'mousemove touchmove', this.dragRangeBarMove), ej2_base /* EventHandler.remove */ .bi.remove(document, 'mouseup touchend', this.dragRangeBarUp), this.rangeBarDragged = !1;
                }, Slider.prototype.checkRepeatedValue = function(currentValue) {
                    if ('Range' === this.type) {
                        if (currentValue === (this.enableRtl && 'Vertical' !== this.orientation ? 1 === this.activeHandle ? this.previousVal[1] : this.previousVal[0] : 1 === this.activeHandle ? this.previousVal[0] : this.previousVal[1])) return 0;
                    } else if (currentValue === this.previousVal) return 0;
                    return 1;
                }, Slider.prototype.refreshTooltip = function(target) {
                    this.tooltip.isVisible && this.tooltipObj && (this.tooltipValue(), target && (this.tooltipObj.refresh(target), this.tooltipTarget = target));
                }, Slider.prototype.openTooltip = function(target) {
                    this.tooltip.isVisible && this.tooltipObj && !this.isMaterialTooltip && (this.tooltipValue(), this.tooltipObj.open(target), this.tooltipTarget = target);
                }, Slider.prototype.closeTooltip = function() {
                    this.tooltip.isVisible && this.tooltipObj && 'Always' !== this.tooltip.showOn && !this.isMaterialTooltip && (this.tooltipValue(), this.tooltipObj.close(), this.tooltipTarget = void 0);
                }, Slider.prototype.keyDown = function(event) {
                    switch(event.keyCode){
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 33:
                        case 34:
                        case 36:
                        case 35:
                            event.preventDefault(), this.buttonClick(event);
                    }
                }, Slider.prototype.wireButtonEvt = function(destroy) {
                    destroy ? (ej2_base /* EventHandler.remove */ .bi.remove(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut), ej2_base /* EventHandler.remove */ .bi.remove(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut), ej2_base /* EventHandler.remove */ .bi.remove(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse), ej2_base /* EventHandler.remove */ .bi.remove(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp), ej2_base /* EventHandler.remove */ .bi.remove(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse), ej2_base /* EventHandler.remove */ .bi.remove(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp), ej2_base /* EventHandler.remove */ .bi.remove(this.firstBtn, 'focusout', this.sliderFocusOut), ej2_base /* EventHandler.remove */ .bi.remove(this.secondBtn, 'focusout', this.sliderFocusOut)) : (ej2_base /* EventHandler.add */ .bi.add(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut, this), ej2_base /* EventHandler.add */ .bi.add(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut, this), ej2_base /* EventHandler.add */ .bi.add(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse, this), ej2_base /* EventHandler.add */ .bi.add(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this), ej2_base /* EventHandler.add */ .bi.add(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse, this), ej2_base /* EventHandler.add */ .bi.add(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this), ej2_base /* EventHandler.add */ .bi.add(this.firstBtn, 'focusout', this.sliderFocusOut, this), ej2_base /* EventHandler.add */ .bi.add(this.secondBtn, 'focusout', this.sliderFocusOut, this));
                }, Slider.prototype.rangeBarMousedown = function(event) {
                    var _a, _b;
                    if (event.preventDefault(), this.focusSliderElement(), 'Range' === this.type && this.drag && event.target === this.rangeBar) {
                        var xPostion = void 0, yPostion = void 0;
                        'mousedown' === event.type ? (xPostion = (_a = [
                            event.clientX,
                            event.clientY
                        ])[0], yPostion = _a[1]) : 'touchstart' === event.type && (xPostion = (_b = [
                            event.changedTouches[0].clientX,
                            event.changedTouches[0].clientY
                        ])[0], yPostion = _b[1]), 'Horizontal' === this.orientation ? (this.firstPartRemain = xPostion - this.rangeBar.getBoundingClientRect().left, this.secondPartRemain = this.rangeBar.getBoundingClientRect().right - xPostion) : (this.firstPartRemain = yPostion - this.rangeBar.getBoundingClientRect().top, this.secondPartRemain = this.rangeBar.getBoundingClientRect().bottom - yPostion), this.minDiff = this.handleVal2 - this.handleVal1, this.tooltipToggle(this.rangeBar);
                        var focusedElement = this.element.querySelector('.' + slider_classNames.sliderTabHandle);
                        focusedElement && focusedElement.classList.remove(slider_classNames.sliderTabHandle), ej2_base /* EventHandler.add */ .bi.add(document, 'mousemove touchmove', this.dragRangeBarMove, this), ej2_base /* EventHandler.add */ .bi.add(document, 'mouseup touchend', this.dragRangeBarUp, this);
                    }
                }, Slider.prototype.elementClick = function(event) {
                    if (this.isDragComplete) {
                        this.isDragComplete = !1;
                        return;
                    }
                    event.preventDefault(), this.focusSliderElement(), this.sliderBarClick(event), this.focusHandle();
                }, Slider.prototype.wireEvents = function() {
                    this.onresize = this.reposition.bind(this), window.addEventListener('resize', this.onresize), this.enabled && !this.readonly && (ej2_base /* EventHandler.add */ .bi.add(this.element, 'click', this.elementClick, this), 'Range' === this.type && this.drag && ej2_base /* EventHandler.add */ .bi.add(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown, this), ej2_base /* EventHandler.add */ .bi.add(this.sliderContainer, 'keydown', this.keyDown, this), ej2_base /* EventHandler.add */ .bi.add(this.sliderContainer, 'keyup', this.keyUp, this), ej2_base /* EventHandler.add */ .bi.add(this.element, 'focusout', this.sliderFocusOut, this), ej2_base /* EventHandler.add */ .bi.add(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover, this), this.wireFirstHandleEvt(!1), 'Range' === this.type && this.wireSecondHandleEvt(!1), this.showButtons && this.wireButtonEvt(!1), this.wireMaterialTooltipEvent(!1), this.isForm && ej2_base /* EventHandler.add */ .bi.add(this.formElement, 'reset', this.formResetHandler, this));
                }, Slider.prototype.unwireEvents = function() {
                    ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'click', this.elementClick), 'Range' === this.type && this.drag && ej2_base /* EventHandler.remove */ .bi.remove(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown), ej2_base /* EventHandler.remove */ .bi.remove(this.sliderContainer, 'keydown', this.keyDown), ej2_base /* EventHandler.remove */ .bi.remove(this.sliderContainer, 'keyup', this.keyUp), ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'focusout', this.sliderFocusOut), ej2_base /* EventHandler.remove */ .bi.remove(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover), this.wireFirstHandleEvt(!0), 'Range' === this.type && this.wireSecondHandleEvt(!0), this.showButtons && this.wireButtonEvt(!0), this.wireMaterialTooltipEvent(!0), ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'reset', this.formResetHandler);
                }, Slider.prototype.formResetHandler = function() {
                    this.setProperties({
                        value: this.formResetValue
                    }, !0), this.setValue();
                }, Slider.prototype.keyUp = function(event) {
                    if (9 === event.keyCode && event.target.classList.contains(slider_classNames.sliderHandle) && (this.focusSliderElement(), !event.target.classList.contains(slider_classNames.sliderTabHandle))) {
                        this.element.querySelector('.' + slider_classNames.sliderTabHandle) && this.element.querySelector('.' + slider_classNames.sliderTabHandle).classList.remove(slider_classNames.sliderTabHandle), event.target.classList.add(slider_classNames.sliderTabHandle);
                        var parentElement = event.target.parentElement;
                        parentElement === this.element && (parentElement.querySelector('.' + slider_classNames.sliderTrack).classList.add(slider_classNames.sliderTabTrack), ('Range' === this.type || 'MinRange' === this.type) && parentElement.querySelector('.' + slider_classNames.rangeBar).classList.add(slider_classNames.sliderTabRange)), 'Range' === this.type && (event.target.previousSibling.classList.contains(slider_classNames.sliderHandle) ? this.activeHandle = 2 : this.activeHandle = 1), this.getHandle().focus(), this.tooltipToggle(this.getHandle());
                    }
                    this.closeTooltip(), this.changeEvent('changed', event);
                }, Slider.prototype.hover = function(event) {
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(event)) {
                        if ('mouseover' === event.type || 'touchmove' === event.type || 'mousemove' === event.type || 'pointermove' === event.type || 'touchstart' === event.type) this.sliderContainer.classList.add(slider_classNames.sliderHover);
                        else {
                            this.sliderContainer.classList.remove(slider_classNames.sliderHover);
                            var curTarget = event.currentTarget;
                            this.tooltip.isVisible && 'Always' !== this.tooltip.showOn && this.tooltipObj && this.isMaterialTooltip && !curTarget.classList.contains(slider_classNames.sliderHandleFocused) && !curTarget.classList.contains(slider_classNames.sliderTabHandle) && this.closeMaterialTooltip();
                        }
                    }
                }, Slider.prototype.sliderFocusOut = function(event) {
                    event.relatedTarget !== this.secondHandle && event.relatedTarget !== this.firstHandle && event.relatedTarget !== this.element && event.relatedTarget !== this.firstBtn && event.relatedTarget !== this.secondBtn && (this.closeMaterialTooltip(), this.closeTooltip(), this.element.querySelector('.' + slider_classNames.sliderTabHandle) && this.element.querySelector('.' + slider_classNames.sliderTabHandle).classList.remove(slider_classNames.sliderTabHandle), this.element.querySelector('.' + slider_classNames.sliderTabTrack) && (this.element.querySelector('.' + slider_classNames.sliderTabTrack).classList.remove(slider_classNames.sliderTabTrack), ('Range' === this.type || 'MinRange' === this.type) && this.element.querySelector('.' + slider_classNames.sliderTabRange) && this.element.querySelector('.' + slider_classNames.sliderTabRange).classList.remove(slider_classNames.sliderTabRange)), this.hiddenInput.focus(), this.hiddenInput.blur(), this.isElementFocused = !1);
                }, Slider.prototype.removeElement = function(element) {
                    element.parentNode && element.parentNode.removeChild(element);
                }, Slider.prototype.changeSliderType = function(type, args) {
                    this.isMaterialTooltip && this.materialHandle && (this.sliderContainer.classList.remove(slider_classNames.materialSlider), this.removeElement(this.materialHandle), this.materialHandle = void 0), this.removeElement(this.firstHandle), this.firstHandle = void 0, 'Default' !== type && ('Range' === type && (this.removeElement(this.secondHandle), this.secondHandle = void 0), this.removeElement(this.rangeBar), this.rangeBar = void 0), this.tooltip.isVisible && !(0, ej2_base /* isNullOrUndefined */ .le)(this.tooltipObj) && (this.tooltipObj.destroy(), this.tooltipElement = void 0, this.tooltipCollidedPosition = void 0), !this.limits.enabled || ('MinRange' === type || 'Default' === type ? (0, ej2_base /* isNullOrUndefined */ .le)(this.limitBarFirst) || (this.removeElement(this.limitBarFirst), this.limitBarFirst = void 0) : (0, ej2_base /* isNullOrUndefined */ .le)(this.limitBarSecond) || (this.removeElement(this.limitBarSecond), this.limitBarSecond = void 0)), this.activeHandle = 1, this.getThemeInitialization(), 'Range' === this.type && this.rangeValueUpdate(), this.createRangeBar(), this.limits.enabled && this.createLimitBar(), this.setHandler(), this.setOrientClass(), this.wireFirstHandleEvt(!1), 'Range' === this.type && this.wireSecondHandleEvt(!1), this.setValue(), this.tooltip.isVisible && (this.renderTooltip(), this.wireMaterialTooltipEvent(!1)), this.setBarColor(), 'tooltip' !== args && this.updateConfig();
                }, Slider.prototype.changeRtl = function() {
                    if (this.enableRtl || 'Range' !== this.type || (this.value = [
                        this.handleVal2,
                        this.handleVal1
                    ]), this.updateConfig(), this.tooltip.isVisible && this.tooltipObj.refresh(this.firstHandle), this.showButtons) {
                        var enabledRTL = this.enableRtl && 'Vertical' !== this.orientation;
                        (0, ej2_base /* attributes */ .Y4)(enabledRTL ? this.secondBtn : this.firstBtn, {
                            'aria-label': 'Decrease',
                            title: 'Decrease'
                        }), (0, ej2_base /* attributes */ .Y4)(enabledRTL ? this.firstBtn : this.secondBtn, {
                            'aria-label': 'Increase',
                            title: 'Increase'
                        });
                    }
                }, Slider.prototype.changeOrientation = function() {
                    this.changeSliderType(this.type, 'null');
                }, Slider.prototype.updateConfig = function() {
                    this.setEnableRTL(), this.setValue(), this.tooltip.isVisible && this.refreshTooltip(this.tooltipTarget), 'None' !== this.ticks.placement && this.ul && (this.removeElement(this.ul), this.ul = void 0, this.renderScale()), this.limitsPropertyChange();
                }, Slider.prototype.limitsPropertyChange = function() {
                    this.limits.enabled ? ((0, ej2_base /* isNullOrUndefined */ .le)(this.limitBarFirst) && 'Range' !== this.type && this.createLimitBar(), (0, ej2_base /* isNullOrUndefined */ .le)(this.limitBarFirst) && (0, ej2_base /* isNullOrUndefined */ .le)(this.limitBarSecond) && 'Range' === this.type && this.createLimitBar(), this.setLimitBar(), this.setValue()) : ((0, ej2_base /* isNullOrUndefined */ .le)(this.limitBarFirst) || (0, ej2_base /* detach */ .og)(this.limitBarFirst), (0, ej2_base /* isNullOrUndefined */ .le)(this.limitBarSecond) || (0, ej2_base /* detach */ .og)(this.limitBarSecond));
                }, /**
     * Get the properties to be maintained in the persisted state.
     * @private
     */ Slider.prototype.getPersistData = function() {
                    return this.addOnPersist([
                        'value'
                    ]);
                }, /**
     * Removes the component from the DOM and detaches all its related event handlers.
     * Also it removes the attributes and classes.
     * @method destroy
     * @return {void}
     */ Slider.prototype.destroy = function() {
                    _super.prototype.destroy.call(this), this.unwireEvents(), window.removeEventListener('resize', this.onresize), (0, ej2_base /* removeClass */ .IV)([
                        this.sliderContainer
                    ], [
                        slider_classNames.sliderDisabled
                    ]), this.firstHandle.removeAttribute('aria-orientation'), 'Range' === this.type && this.secondHandle.removeAttribute('aria-orientation'), this.sliderContainer.parentNode.insertBefore(this.element, this.sliderContainer), (0, ej2_base /* detach */ .og)(this.sliderContainer), this.tooltip.isVisible && this.tooltipObj.destroy(), this.element.innerHTML = '';
                }, /**
     * Calls internally if any of the property value is changed.
     * @private
     */ // tslint:disable-next-line
                Slider.prototype.onPropertyChanged = function(newProp, oldProp) {
                    for(var _this = this, _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++){
                        var prop = _a[_i];
                        switch(prop){
                            case 'cssClass':
                                this.setCSSClass(oldProp.cssClass);
                                break;
                            case 'value':
                                if (newProp && oldProp) {
                                    var value = (0, ej2_base /* isNullOrUndefined */ .le)(newProp.value) ? 'Range' === this.type ? [
                                        this.min,
                                        this.max
                                    ] : this.min : newProp.value;
                                    this.setProperties({
                                        value: value
                                    }, !0), (0, ej2_base /* isNullOrUndefined */ .le)(oldProp.value) || oldProp.value.toString() === value.toString() || (this.setValue(), this.refreshTooltip(this.tooltipTarget), 'Range' === this.type && ((0, ej2_base /* isNullOrUndefined */ .le)(newProp.value) || oldProp.value[1] === value[1] ? this.activeHandle = 1 : this.activeHandle = 2));
                                }
                                break;
                            case 'min':
                            case 'step':
                            case 'max':
                                this.setMinMaxValue();
                                break;
                            case 'tooltip':
                                (0, ej2_base /* isNullOrUndefined */ .le)(newProp.tooltip) || (0, ej2_base /* isNullOrUndefined */ .le)(oldProp.tooltip) || this.setTooltip(prop);
                                break;
                            case 'type':
                                (0, ej2_base /* isNullOrUndefined */ .le)(oldProp) || !Object.keys(oldProp).length || (0, ej2_base /* isNullOrUndefined */ .le)(oldProp.type) || (this.changeSliderType(oldProp.type, prop), this.setZindex());
                                break;
                            case 'enableRtl':
                                oldProp.enableRtl !== newProp.enableRtl && 'Vertical' !== this.orientation && (this.rtl = oldProp.enableRtl, this.changeRtl());
                                break;
                            case 'limits':
                                this.limitsPropertyChange();
                                break;
                            case 'orientation':
                                this.changeOrientation();
                                break;
                            case 'ticks':
                                (0, ej2_base /* isNullOrUndefined */ .le)(this.sliderContainer.querySelector('.' + slider_classNames.scale)) || ((0, ej2_base /* detach */ .og)(this.ul), Array.prototype.forEach.call(this.sliderContainer.classList, function(className) {
                                    className.match(/e-scale-/) && _this.sliderContainer.classList.remove(className);
                                })), 'None' !== this.ticks.placement && (this.renderScale(), this.setZindex());
                                break;
                            case 'locale':
                                this.showButtons && this.buttonTitle();
                                break;
                            case 'showButtons':
                                newProp.showButtons ? (this.setButtons(), this.reposition(), this.enabled && !this.readonly && this.wireButtonEvt(!1)) : this.firstBtn && this.secondBtn && (this.sliderContainer.removeChild(this.firstBtn), this.sliderContainer.removeChild(this.secondBtn), this.sliderContainer.classList.remove(slider_classNames.sliderButtonClass), this.firstBtn = void 0, this.secondBtn = void 0, this.reposition());
                                break;
                            case 'enabled':
                                this.setEnabled();
                                break;
                            case 'readonly':
                                this.setReadOnly();
                                break;
                            case 'customValues':
                                this.setValue(), this.reposition();
                                break;
                            case 'colorRange':
                                this.reposition();
                                break;
                            case 'width':
                                this.setElementWidth(newProp.width), this.setMinMaxValue(), this.limits && this.limitsPropertyChange();
                        }
                    }
                }, Slider.prototype.setReadOnly = function() {
                    this.readonly ? (this.unwireEvents(), this.sliderContainer.classList.add(slider_classNames.readonly)) : (this.wireEvents(), this.sliderContainer.classList.remove(slider_classNames.readonly));
                }, Slider.prototype.setMinMaxValue = function() {
                    var _this = this;
                    this.setValue(), this.refreshTooltip(this.tooltipTarget), !(0, ej2_base /* isNullOrUndefined */ .le)(this.sliderContainer.querySelector('.' + slider_classNames.scale)) && this.ul && ((0, ej2_base /* detach */ .og)(this.ul), Array.prototype.forEach.call(this.sliderContainer.classList, function(className) {
                        className.match(/e-scale-/) && _this.sliderContainer.classList.remove(className);
                    })), 'None' !== this.ticks.placement && (this.renderScale(), this.setZindex());
                }, Slider.prototype.setZindex = function() {
                    this.zIndex = 6, (0, ej2_base /* isNullOrUndefined */ .le)(this.ticks) || 'None' === this.ticks.placement || (this.ul.style.zIndex = this.zIndex + -7 + '', this.element.style.zIndex = this.zIndex + 2 + ''), this.isMaterial || (0, ej2_base /* isNullOrUndefined */ .le)(this.ticks) || 'Both' !== this.ticks.placement || (this.element.style.zIndex = this.zIndex + 2 + ''), this.firstHandle.style.zIndex = this.zIndex + 3 + '', 'Range' === this.type && (this.secondHandle.style.zIndex = this.zIndex + 4 + '');
                }, Slider.prototype.setTooltip = function(args) {
                    this.changeSliderType(this.type, args);
                }, Slider.prototype.setBarColor = function() {
                    for(var trackPosition, trackClassName, child = this.sliderTrack.lastElementChild; child;)this.sliderTrack.removeChild(child), child = this.sliderTrack.lastElementChild;
                    for(var i = 0; i < this.colorRange.length; i++)if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.colorRange[i].start) && !(0, ej2_base /* isNullOrUndefined */ .le)(this.colorRange[i].end) && this.colorRange[i].end > this.colorRange[i].start) {
                        this.colorRange[i].start < this.min && (this.colorRange[i].start = this.min), this.colorRange[i].end > this.max && (this.colorRange[i].end = this.max);
                        var startingPosition = this.checkHandlePosition(this.colorRange[i].start), endPosition = this.checkHandlePosition(this.colorRange[i].end), trackContainer = this.createElement('div');
                        trackContainer.style.backgroundColor = this.colorRange[i].color, trackContainer.style.border = '1px solid ' + this.colorRange[i].color, 'Horizontal' === this.orientation ? (trackClassName = slider_classNames.sliderHorizantalColor, trackPosition = this.enableRtl ? (0, ej2_base /* isNullOrUndefined */ .le)(this.customValues) ? this.checkHandlePosition(this.max) - this.checkHandlePosition(this.colorRange[i].end) : this.checkHandlePosition(this.customValues.length - this.colorRange[i].end - 1) : this.checkHandlePosition(this.colorRange[i].start), trackContainer.style.width = endPosition - startingPosition + 'px', trackContainer.style.left = trackPosition + 'px') : (trackClassName = slider_classNames.sliderVerticalColor, trackPosition = this.checkHandlePosition(this.colorRange[i].start), trackContainer.style.height = endPosition - startingPosition + 'px', trackContainer.style.bottom = trackPosition + 'px'), trackContainer.classList.add(trackClassName), this.sliderTrack.appendChild(trackContainer);
                    }
                }, /**
     * Gets the component name
     * @private
     */ Slider.prototype.getModuleName = function() {
                    return 'slider';
                }, slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], Slider.prototype, "value", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], Slider.prototype, "customValues", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(1)
                ], Slider.prototype, "step", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], Slider.prototype, "width", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(0)
                ], Slider.prototype, "min", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(100)
                ], Slider.prototype, "max", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Slider.prototype, "readonly", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)('Default')
                ], Slider.prototype, "type", void 0), slider_decorate([
                    (0, ej2_base /* Collection */ .FE)([
                        {}
                    ], ColorRangeData)
                ], Slider.prototype, "colorRange", void 0), slider_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, TicksData)
                ], Slider.prototype, "ticks", void 0), slider_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, LimitData)
                ], Slider.prototype, "limits", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], Slider.prototype, "enabled", void 0), slider_decorate([
                    (0, ej2_base /* Complex */ .Zz)({}, TooltipData)
                ], Slider.prototype, "tooltip", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Slider.prototype, "showButtons", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], Slider.prototype, "enableAnimation", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)('Horizontal')
                ], Slider.prototype, "orientation", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], Slider.prototype, "cssClass", void 0), slider_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], Slider.prototype, "enableHtmlSanitizer", void 0), slider_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Slider.prototype, "created", void 0), slider_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Slider.prototype, "change", void 0), slider_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Slider.prototype, "changed", void 0), slider_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Slider.prototype, "renderingTicks", void 0), slider_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Slider.prototype, "renderedTicks", void 0), slider_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], Slider.prototype, "tooltipChange", void 0), Slider = slider_decorate([
                    ej2_base /* NotifyPropertyChanges */ .Zl
                ], Slider);
            }(ej2_base /* Component */ .wA), color_picker_extends = (extendStatics8 = function(d, b) {
                return (extendStatics8 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics8(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), color_picker_decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, APPLY = 'e-apply', CANCEL = 'e-cancel', CURRENT = 'e-current', CTRLBTN = 'e-ctrl-btn', CTRLSWITCH = 'e-switch-ctrl-btn', DISABLED = 'e-disabled', FORMATSWITCH = 'e-value-switch-btn', HANDLER = 'e-handler', HEX = 'e-hex', HIDEHEX = 'e-hide-hex-value', HIDEOPACITY = 'e-hide-opacity', HIDERGBA = 'e-hide-switchable-value', HIDEVALUE = 'e-hide-value', HIDEVALUESWITCH = 'e-hide-valueswitcher', HSVAREA = 'e-hsv-color', HSVCONTAINER = 'e-hsv-container', INPUTWRAPPER = 'e-selected-value', MODESWITCH = 'e-mode-switch-btn', NOCOLOR = 'e-nocolor-item', OPACITY = 'e-opacity-value', PALETTES = 'e-palette', PALETTECONTENT = 'e-color-palette', PICKERCONTENT = 'e-color-picker', PREVIEW = 'e-preview-container', PREVIOUS = 'e-previous', SHOWVALUE = 'e-show-value', SELECT = 'e-selected', SPLITPREVIEW = 'e-split-preview', TILE = 'e-tile', presets = {
                default: [
                    '#000000',
                    '#f44336',
                    '#e91e63',
                    '#9c27b0',
                    '#673ab7',
                    '#2196f3',
                    '#03a9f4',
                    '#00bcd4',
                    '#009688',
                    '#ffeb3b',
                    '#ffffff',
                    '#ffebee',
                    '#fce4ec',
                    '#f3e5f5',
                    '#ede7f6',
                    '#e3f2fd',
                    '#e1f5fe',
                    '#e0f7fa',
                    '#e0f2f1',
                    '#fffde7',
                    '#f2f2f2',
                    '#ffcdd2',
                    '#f8bbd0',
                    '#e1bee7',
                    '#d1c4e9',
                    '#bbdefb',
                    '#b3e5fc',
                    '#b2ebf2',
                    '#b2dfdb',
                    '#fff9c4',
                    '#e6e6e6',
                    '#ef9a9a',
                    '#f48fb1',
                    '#ce93d8',
                    '#b39ddb',
                    '#90caf9',
                    '#81d4fa',
                    '#80deea',
                    '#80cbc4',
                    '#fff59d',
                    '#cccccc',
                    '#e57373',
                    '#f06292',
                    '#ba68c8',
                    '#9575cd',
                    '#64b5f6',
                    '#4fc3f7',
                    '#4dd0e1',
                    '#4db6ac',
                    '#fff176',
                    '#b3b3b3',
                    '#ef5350',
                    '#ec407a',
                    '#ab47bc',
                    '#7e57c2',
                    '#42a5f5',
                    '#29b6f6',
                    '#26c6da',
                    '#26a69a',
                    '#ffee58',
                    '#999999',
                    '#e53935',
                    '#d81b60',
                    '#8e24aa',
                    '#5e35b1',
                    '#1e88e5',
                    '#039be5',
                    '#00acc1',
                    '#00897b',
                    '#fdd835',
                    '#808080',
                    '#d32f2f',
                    '#c2185b',
                    '#7b1fa2',
                    '#512da8',
                    '#1976d2',
                    '#0288d1',
                    '#0097a7',
                    '#00796b',
                    '#fbc02d',
                    '#666666',
                    '#c62828',
                    '#ad1457',
                    '#6a1b9a',
                    '#4527a0',
                    '#1565c0',
                    '#0277bd',
                    '#00838f',
                    '#00695c',
                    '#f9a825',
                    '#4d4d4d',
                    '#b71c1c',
                    '#880e4f',
                    '#4a148c',
                    '#311b92',
                    '#0d47a1',
                    '#01579b',
                    '#006064',
                    '#004d40',
                    '#f57f17'
                ]
            }, ColorPicker = /** @class */ function(_super) {
                function ColorPicker(options, element) {
                    return _super.call(this, options, element) || this;
                }
                return color_picker_extends(ColorPicker, _super), ColorPicker.prototype.preRender = function() {
                    var ele = this.element;
                    this.formElement = (0, ej2_base /* closest */ .oq)(this.element, 'form'), this.formElement && ej2_base /* EventHandler.add */ .bi.add(this.formElement, 'reset', this.formResetHandler, this), this.l10n = new ej2_base /* L10n */ .E7('colorpicker', {
                        Apply: 'Apply',
                        Cancel: 'Cancel',
                        ModeSwitcher: 'Switch Mode'
                    }, this.locale), ele.getAttribute('ejs-for') && !ele.getAttribute('name') && ele.setAttribute('name', ele.id);
                }, /**
     * To Initialize the component rendering
     *
     * @private
     * @returns {void}
     */ ColorPicker.prototype.render = function() {
                    this.initWrapper(), this.inline ? this.createWidget() : this.createSplitBtn(), this.enableOpacity || (0, ej2_base /* addClass */ .cn)([
                        this.container.parentElement
                    ], HIDEOPACITY), this.renderComplete();
                }, ColorPicker.prototype.initWrapper = function() {
                    var wrapper = this.createElement('div', {
                        className: 'e-' + this.getModuleName() + '-wrapper'
                    });
                    this.element.parentNode.insertBefore(wrapper, this.element), wrapper.appendChild(this.element), (0, ej2_base /* attributes */ .Y4)(this.element, {
                        tabindex: '-1',
                        spellcheck: 'false'
                    }), this.container = this.createElement('div', {
                        className: 'e-container'
                    }), this.getWrapper().appendChild(this.container);
                    var value = this.value ? this.roundValue(this.value).toLowerCase() : '#008000ff';
                    this.noColor && 'Palette' === this.mode && '' === this.value && (value = '');
                    var slicedValue = value.slice(0, 7);
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.initialInputValue) && (this.initialInputValue = slicedValue), this.element.value = slicedValue, this.enableOpacity ? this.setProperties({
                        value: value
                    }, !0) : this.setProperties({
                        value: slicedValue
                    }, !0), this.enableRtl && wrapper.classList.add('e-rtl'), this.cssClass && (0, ej2_base /* addClass */ .cn)([
                        wrapper
                    ], this.cssClass.split(' ')), this.tileRipple = (0, ej2_base /* rippleEffect */ .qx)(this.container, {
                        selector: '.' + TILE
                    }), this.ctrlBtnRipple = (0, ej2_base /* rippleEffect */ .qx)(this.container, {
                        selector: '.e-btn'
                    });
                }, ColorPicker.prototype.getWrapper = function() {
                    return this.element.parentElement;
                }, ColorPicker.prototype.createWidget = function() {
                    'Palette' === this.mode ? (this.createPalette(), this.inline || this.firstPaletteFocus()) : (this.createPicker(), this.inline || this.getDragHandler().focus()), this.isRgb = !0, this.createInput(), this.createCtrlBtn(), this.disabled || this.wireEvents(), this.inline && this.disabled && this.toggleDisabled(!0), ej2_base /* Browser.isDevice */ .AR.isDevice && this.refreshPopupPos();
                }, ColorPicker.prototype.createSplitBtn = function() {
                    var _this = this, splitButton = this.createElement('button', {
                        className: 'e-split-colorpicker'
                    });
                    this.getWrapper().appendChild(splitButton), this.splitBtn = new SplitButton({
                        iconCss: 'e-selected-color',
                        target: this.container,
                        disabled: this.disabled,
                        enableRtl: this.enableRtl,
                        createPopupOnClick: this.createPopupOnClick,
                        open: this.onOpen.bind(this),
                        click: function() {
                            _this.trigger('change', {
                                currentValue: {
                                    hex: _this.value.slice(0, 7),
                                    rgba: _this.convertToRgbString(_this.hexToRgb(_this.value))
                                },
                                previousValue: {
                                    hex: null,
                                    rgba: null
                                },
                                value: _this.value
                            });
                        }
                    }), this.splitBtn.createElement = this.createElement, this.splitBtn.appendTo(splitButton);
                    var preview = this.createElement('span', {
                        className: SPLITPREVIEW
                    });
                    (0, ej2_base /* select */ .Ys)('.e-selected-color', splitButton).appendChild(preview), preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
                    var popupEle = this.getPopupEle();
                    if ((0, ej2_base /* addClass */ .cn)([
                        popupEle
                    ], 'e-colorpicker-popup'), this.cssClass && (0, ej2_base /* addClass */ .cn)([
                        popupEle
                    ], this.cssClass.split(' ')), ej2_base /* Browser.isDevice */ .AR.isDevice) {
                        var popupInst = this.getPopupInst();
                        popupInst.relateTo = document.body, popupInst.position = {
                            X: 'center',
                            Y: 'center'
                        }, popupInst.targetType = 'container', popupInst.collision = {
                            X: 'fit',
                            Y: 'fit'
                        }, popupInst.offsetY = 4, popupEle.style.zIndex = (0, popup_popup /* getZindexPartial */ .TE)(this.splitBtn.element).toString();
                    }
                    this.bindCallBackEvent();
                }, ColorPicker.prototype.onOpen = function() {
                    this.trigger('open', {
                        element: this.container
                    });
                }, ColorPicker.prototype.getPopupInst = function() {
                    return (0, ej2_base /* getInstance */ .s8)(this.getPopupEle(), popup_popup /* Popup */ .GI);
                }, ColorPicker.prototype.bindCallBackEvent = function() {
                    var _this = this;
                    this.splitBtn.beforeOpen = function(args) {
                        var callBackPromise = new Deferred();
                        return _this.trigger('beforeOpen', args, function(observeOpenArgs) {
                            if (!observeOpenArgs.cancel) {
                                var popupEle = _this.getPopupEle();
                                popupEle.style.top = (0, ej2_base /* formatUnit */ .Ac)(0 + pageYOffset), popupEle.style.left = (0, ej2_base /* formatUnit */ .Ac)(0 + pageXOffset), popupEle.style.display = 'block', _this.createWidget(), popupEle.style.display = '', ej2_base /* Browser.isDevice */ .AR.isDevice && (_this.modal = _this.createElement('div'), _this.modal.className = 'e-' + _this.getModuleName() + ' e-modal', _this.modal.style.display = 'none', document.body.insertBefore(_this.modal, popupEle), document.body.className += ' e-colorpicker-overflow', _this.modal.style.display = 'block', _this.modal.style.zIndex = (Number(popupEle.style.zIndex) - 1).toString());
                            }
                            args.cancel = observeOpenArgs.cancel, callBackPromise.resolve(observeOpenArgs);
                        }), callBackPromise;
                    }, this.splitBtn.beforeClose = function(args) {
                        var callBackPromise = new Deferred();
                        if ((0, ej2_base /* isNullOrUndefined */ .le)(args.event)) callBackPromise.resolve(args);
                        else {
                            var beforeCloseArgs = {
                                element: _this.container,
                                event: args.event,
                                cancel: !1
                            };
                            _this.trigger('beforeClose', beforeCloseArgs, function(observedCloseArgs) {
                                ej2_base /* Browser.isDevice */ .AR.isDevice && args.event.target === _this.modal && (observedCloseArgs.cancel = !0), observedCloseArgs.cancel || _this.onPopupClose(), args.cancel = observedCloseArgs.cancel, callBackPromise.resolve(observedCloseArgs);
                            });
                        }
                        return callBackPromise;
                    };
                }, ColorPicker.prototype.onPopupClose = function() {
                    this.unWireEvents(), this.destroyOtherComp(), this.container.style.width = '', (0, ej2_base /* select */ .Ys)('.' + SPLITPREVIEW, this.splitBtn.element).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value)), this.container.innerHTML = '', (0, ej2_base /* removeClass */ .IV)([
                        this.container
                    ], [
                        PICKERCONTENT,
                        PALETTECONTENT
                    ]), ej2_base /* Browser.isDevice */ .AR.isDevice && this.modal && ((0, ej2_base /* removeClass */ .IV)([
                        document.body
                    ], 'e-colorpicker-overflow'), this.modal.style.display = 'none', this.modal.outerHTML = '', this.modal = null);
                }, ColorPicker.prototype.createPalette = function() {
                    if ((0, ej2_base /* classList */ .s1)(this.container, [
                        PALETTECONTENT
                    ], [
                        PICKERCONTENT
                    ]), this.presetColors) {
                        var paletteGroup = this.createElement('div', {
                            className: 'e-custom-palette'
                        });
                        this.appendElement(paletteGroup);
                        var keys = Object.keys(this.presetColors);
                        if (1 === keys.length) this.appendPalette(this.presetColors[keys[0]], keys[0], paletteGroup);
                        else for(var i = 0, len = keys.length; i < len; i++)this.appendPalette(this.presetColors[keys[i]], keys[i], paletteGroup);
                        (0, ej2_base /* selectAll */ .td)('.e-row', paletteGroup).length > 10 && (0, ej2_base /* addClass */ .cn)([
                            paletteGroup
                        ], 'e-palette-group');
                    } else this.appendPalette(presets.default, 'default');
                    'Palette' === this.mode && !this.modeSwitcher && this.noColor && this.setNoColor();
                    var width = parseInt(getComputedStyle(this.container).borderBottomWidth, 10);
                    this.container.style.width = (0, ej2_base /* formatUnit */ .Ac)(this.container.children[0].offsetWidth + width + width), this.rgb = this.hexToRgb(this.roundValue(this.value)), this.hsv = this.rgbToHsv.apply(this, this.rgb);
                }, ColorPicker.prototype.firstPaletteFocus = function() {
                    (0, ej2_base /* select */ .Ys)('.' + SELECT, this.container.children[0]) || (0, ej2_base /* selectAll */ .td)('.' + PALETTES, this.container)[0].focus();
                }, ColorPicker.prototype.appendPalette = function(colors, key, refEle) {
                    var row, tile, roundedColor, palette = this.createElement('div', {
                        className: PALETTES,
                        attrs: {
                            tabindex: '0'
                        }
                    });
                    refEle ? refEle.appendChild(palette) : this.appendElement(palette);
                    for(var i = 0, len = colors.length; i < len; i++)(0 === i || i % this.columns == 0) && (row = this.createElement('div', {
                        className: 'e-row',
                        attrs: {
                            role: 'presentation'
                        }
                    }), palette.appendChild(row)), roundedColor = this.roundValue(colors[i]).toLowerCase(), tile = this.createElement('span', {
                        className: TILE,
                        attrs: {
                            role: 'gridcell',
                            'aria-label': roundedColor,
                            'aria-selected': 'false',
                            tabindex: '0'
                        }
                    }), this.trigger('beforeTileRender', {
                        element: tile,
                        presetName: key,
                        value: colors[i]
                    }), row.appendChild(tile), this.value === roundedColor && (this.addTileSelection(tile), palette.focus()), tile.style.backgroundColor = this.convertToRgbString(this.hexToRgb(roundedColor));
                }, ColorPicker.prototype.setNoColor = function() {
                    var noColorEle = this.container.querySelector('.e-row').children[0];
                    noColorEle.classList.add(NOCOLOR), this.value || (noColorEle.classList.add(SELECT), (0, ej2_base /* closest */ .oq)(noColorEle, '.' + PALETTES).focus()), [
                        'aria-selected',
                        'aria-label'
                    ].forEach(function(attr) {
                        noColorEle.removeAttribute(attr);
                    }), noColorEle.style.backgroundColor = '';
                }, ColorPicker.prototype.appendElement = function(ele, insertPos) {
                    void 0 === insertPos && (insertPos = 0);
                    var refEle = this.container.children[insertPos];
                    refEle ? this.container.insertBefore(ele, refEle) : this.container.appendChild(ele);
                }, ColorPicker.prototype.addTileSelection = function(ele) {
                    ele.classList.add(SELECT), ele.setAttribute('aria-selected', 'true');
                }, ColorPicker.prototype.createPicker = function() {
                    (0, ej2_base /* classList */ .s1)(this.container, [
                        PICKERCONTENT
                    ], [
                        PALETTECONTENT
                    ]);
                    var hsvContainer = this.createElement('div', {
                        className: HSVCONTAINER
                    });
                    this.appendElement(hsvContainer), hsvContainer.appendChild(this.createElement('div', {
                        className: HSVAREA
                    }));
                    var dragHandler = this.createElement('span', {
                        className: HANDLER,
                        attrs: {
                            tabindex: '0'
                        }
                    });
                    hsvContainer.appendChild(dragHandler), null === this.value && (this.value = '#008000ff'), this.rgb = this.hexToRgb(this.value), this.hsv = this.rgbToHsv.apply(this, this.rgb), this.setHsvContainerBg(), this.setHandlerPosition(), this.createSlider(), this.createDragTooltip();
                }, ColorPicker.prototype.setHsvContainerBg = function(h) {
                    void 0 === h && (h = this.hsv[0]), this.getHsvContainer().style.backgroundColor = this.convertToRgbString(this.hsvToRgb(h, 100, 100, 1));
                }, ColorPicker.prototype.getHsvContainer = function() {
                    return (0, ej2_base /* select */ .Ys)('.' + HSVCONTAINER, this.container);
                }, ColorPicker.prototype.setHandlerPosition = function() {
                    var dragHandler = this.getDragHandler(), hsvArea = (0, ej2_base /* select */ .Ys)('.' + HSVAREA, this.container);
                    this.enableRtl ? dragHandler.style.left = (0, ej2_base /* formatUnit */ .Ac)(hsvArea.offsetWidth * Math.abs(100 - this.hsv[1]) / 100) : dragHandler.style.left = (0, ej2_base /* formatUnit */ .Ac)(hsvArea.offsetWidth * this.hsv[1] / 100), dragHandler.style.top = (0, ej2_base /* formatUnit */ .Ac)(hsvArea.offsetHeight * (100 - this.hsv[2]) / 100);
                }, ColorPicker.prototype.createSlider = function() {
                    var sliderPreviewWrapper = this.createElement('div', {
                        className: 'e-slider-preview'
                    });
                    this.appendElement(sliderPreviewWrapper, 1), this.createPreview(sliderPreviewWrapper);
                    var sliderWrapper = this.createElement('div', {
                        className: 'e-colorpicker-slider'
                    });
                    sliderPreviewWrapper.insertBefore(sliderWrapper, sliderPreviewWrapper.children[0]);
                    var slider = this.createElement('div', {
                        className: 'e-hue-slider'
                    });
                    sliderWrapper.appendChild(slider), this.hueSlider = new Slider({
                        value: this.hsv[0],
                        min: 0,
                        max: 359,
                        enableRtl: this.enableRtl,
                        enabled: !this.disabled,
                        change: this.hueChange.bind(this)
                    }), this.hueSlider.createElement = this.createElement, this.hueSlider.appendTo(slider), this.enableOpacity && (slider = this.createElement('div', {
                        className: 'e-opacity-slider'
                    }), sliderWrapper.appendChild(slider), this.createOpacitySlider(slider));
                }, ColorPicker.prototype.createOpacitySlider = function(slider) {
                    this.opacitySlider = new Slider({
                        value: 100 * this.rgb[3],
                        min: 0,
                        max: 100,
                        enableRtl: this.enableRtl,
                        enabled: !this.disabled,
                        change: this.opacityChange.bind(this)
                    }), this.opacitySlider.createElement = this.createElement, this.opacitySlider.appendTo(slider);
                    var opacityBgTrack = this.createElement('div', {
                        className: 'e-opacity-empty-track'
                    });
                    slider.appendChild(opacityBgTrack), this.updateOpacitySliderBg();
                }, ColorPicker.prototype.updateOpacitySliderBg = function() {
                    var direction = this.enableRtl ? 'to left' : 'to right', opacityEle = (0, ej2_base /* select */ .Ys)('.e-opacity-empty-track', this.opacitySlider.element);
                    opacityEle && (opacityEle.style.background = 'linear-gradient(' + direction + ', rgba(' + this.rgb.slice(0, 3) + ', 0) 0%, ' + this.convertToRgbString(this.rgb.slice(0, 3)) + ' 100%)');
                }, ColorPicker.prototype.hueChange = function(args) {
                    this.hsv[0] = args.value, this.setHsvContainerBg(), this.convertToOtherFormat();
                }, ColorPicker.prototype.opacityChange = function(args) {
                    var value = args.value, pValue = this.rgbToHex(this.rgb);
                    this.hsv[3] = value / 100, this.rgb[3] = value / 100;
                    var cValue = this.rgbToHex(this.rgb);
                    this.updateOpacityInput(value);
                    var rgb = this.convertToRgbString(this.rgb);
                    this.updatePreview(rgb), this.triggerEvent(cValue, pValue, rgb);
                }, ColorPicker.prototype.updateOpacityInput = function(value) {
                    if (this.enableOpacity && !this.getWrapper().classList.contains(HIDEVALUE)) {
                        var opacityTextBoxInst = (0, ej2_base /* getInstance */ .s8)((0, ej2_base /* select */ .Ys)('.' + OPACITY, this.container), numerictextbox /* NumericTextBox */ .N);
                        opacityTextBoxInst.value = value, opacityTextBoxInst.dataBind();
                    }
                }, ColorPicker.prototype.createPreview = function(parentEle) {
                    var previewContainer = this.createElement('div', {
                        className: PREVIEW
                    });
                    parentEle.appendChild(previewContainer);
                    var preview = this.createElement('span', {
                        className: 'e-preview ' + CURRENT
                    });
                    previewContainer.appendChild(preview);
                    var colorValue = this.convertToRgbString(this.rgb);
                    preview.style.backgroundColor = colorValue, preview = this.createElement('span', {
                        className: 'e-preview ' + PREVIOUS
                    }), previewContainer.appendChild(preview), preview.style.backgroundColor = colorValue;
                }, ColorPicker.prototype.isPicker = function() {
                    return !this.container.classList.contains(PALETTECONTENT);
                }, ColorPicker.prototype.getPopupEle = function() {
                    return this.container.parentElement;
                }, ColorPicker.prototype.createNumericInput = function(element, value, label, max) {
                    var _this = this, numericInput = new numerictextbox /* NumericTextBox */ .N({
                        value: value,
                        placeholder: label,
                        min: 0,
                        max: max,
                        format: '###.##',
                        showSpinButton: !1,
                        floatLabelType: 'Always',
                        enableRtl: this.enableRtl,
                        enabled: !this.disabled,
                        readonly: !this.isPicker(),
                        change: function(args) {
                            args.event && _this.inputHandler(args.event);
                        }
                    });
                    numericInput.createElement = this.createElement, numericInput.appendTo(element);
                }, ColorPicker.prototype.createInput = function() {
                    var isPicker = this.isPicker(), wrapper = this.getWrapper();
                    if (isPicker && !wrapper.classList.contains(HIDEVALUE) || !isPicker && wrapper.classList.contains(SHOWVALUE)) {
                        var inputWrap = this.createElement('div', {
                            className: INPUTWRAPPER
                        });
                        isPicker ? this.appendElement(inputWrap, 2) : this.appendElement(inputWrap, 1);
                        var container = this.createElement('div', {
                            className: 'e-input-container'
                        });
                        if (inputWrap.appendChild(container), wrapper.classList.contains(HIDEVALUESWITCH) || this.appendValueSwitchBtn(inputWrap), !wrapper.classList.contains(HIDEHEX)) {
                            var hexInput = this.createElement('input', {
                                className: HEX,
                                attrs: {
                                    maxlength: '7',
                                    spellcheck: 'false'
                                }
                            });
                            container.appendChild(hexInput), input /* Input.createInput */ .I.createInput({
                                element: hexInput,
                                floatLabelType: 'Always',
                                properties: {
                                    placeholder: 'HEX',
                                    enableRtl: this.enableRtl,
                                    enabled: !this.disabled,
                                    readonly: !this.isPicker()
                                }
                            }, this.createElement), input /* Input.setValue */ .I.setValue(this.value.slice(0, 7), hexInput), hexInput.addEventListener('input', this.inputHandler.bind(this));
                        }
                        if (!wrapper.classList.contains(HIDERGBA)) {
                            var label = void 0, value = void 0;
                            this.isRgb ? (label = 'RGB', value = this.rgb) : (label = 'HSV', value = this.hsv);
                            for(var clsName = [
                                'rh',
                                'gs',
                                'bv'
                            ], i = 0; i < 3; i++)this.createNumericInput(container.appendChild(this.createElement('input', {
                                className: 'e-' + clsName[i] + '-value'
                            })), value[i], label[i], 255);
                            this.enableOpacity && this.appendOpacityValue(container);
                        }
                    }
                }, ColorPicker.prototype.appendOpacityValue = function(container) {
                    this.createNumericInput(container.appendChild(this.createElement('input', {
                        className: OPACITY
                    })), 100 * this.rgb[3], 'A', 100);
                }, ColorPicker.prototype.appendValueSwitchBtn = function(targetEle) {
                    var valueSwitchBtn = this.createElement('button', {
                        className: 'e-icons e-css e-btn e-flat e-icon-btn ' + FORMATSWITCH
                    });
                    targetEle.appendChild(valueSwitchBtn), this.isPicker() && !this.getWrapper().classList.contains(HIDERGBA) && valueSwitchBtn.addEventListener('click', this.formatSwitchHandler.bind(this));
                }, ColorPicker.prototype.createCtrlBtn = function() {
                    if (this.modeSwitcher || this.showButtons) {
                        this.l10n.setLocale(this.locale);
                        var btnWrapper = this.createElement('div', {
                            className: CTRLSWITCH
                        });
                        if (this.container.appendChild(btnWrapper), this.showButtons) {
                            var controlBtnWrapper = this.createElement('div', {
                                className: CTRLBTN
                            });
                            btnWrapper.appendChild(controlBtnWrapper);
                            var apply = this.l10n.getConstant('Apply');
                            controlBtnWrapper.appendChild(this.createElement('button', {
                                innerHTML: apply,
                                className: 'e-btn e-css e-flat e-primary e-small ' + APPLY,
                                attrs: {
                                    title: apply
                                }
                            }));
                            var cancel = this.l10n.getConstant('Cancel');
                            controlBtnWrapper.appendChild(this.createElement('button', {
                                innerHTML: cancel,
                                className: 'e-btn e-css e-flat e-small ' + CANCEL,
                                attrs: {
                                    title: cancel
                                }
                            }));
                        }
                        this.modeSwitcher && this.appendModeSwitchBtn();
                    }
                }, ColorPicker.prototype.appendModeSwitchBtn = function() {
                    var modeSwitcher = this.createElement('button', {
                        className: 'e-icons e-btn e-flat e-icon-btn ' + MODESWITCH,
                        attrs: {
                            title: this.l10n.getConstant('ModeSwitcher')
                        }
                    });
                    (0, ej2_base /* select */ .Ys)('.' + CTRLSWITCH, this.container).insertBefore(modeSwitcher, (0, ej2_base /* select */ .Ys)('.' + CTRLBTN, this.container));
                }, ColorPicker.prototype.createDragTooltip = function() {
                    var _this = this, tooltip = new Tooltip({
                        opensOn: 'Custom',
                        showTipPointer: !1,
                        cssClass: 'e-color-picker-tooltip',
                        beforeOpen: function(args) {
                            _this.tooltipEle = args.element;
                        },
                        animation: {
                            open: {
                                effect: 'None'
                            },
                            close: {
                                effect: 'None'
                            }
                        }
                    });
                    tooltip.createElement = this.createElement, tooltip.appendTo(this.container), tooltip.open(this.container), this.tooltipEle.style.zIndex = (0, popup_popup /* getZindexPartial */ .TE)(this.tooltipEle).toString(), (0, ej2_base /* select */ .Ys)('.e-tip-content', this.tooltipEle).appendChild(this.createElement('div', {
                        className: 'e-tip-transparent'
                    }));
                }, ColorPicker.prototype.getTooltipInst = function() {
                    return (0, ej2_base /* getInstance */ .s8)(this.container, Tooltip);
                }, ColorPicker.prototype.setTooltipOffset = function(value) {
                    this.getTooltipInst().offsetY = value;
                }, ColorPicker.prototype.toggleDisabled = function(enable) {
                    enable ? this.getWrapper().classList.add(DISABLED) : this.getWrapper().classList.remove(DISABLED), this.showButtons && [].slice.call((0, ej2_base /* selectAll */ .td)('.e-btn', this.container)).forEach(function(ele) {
                        enable ? (0, ej2_base /* attributes */ .Y4)(ele, {
                            disabled: ''
                        }) : ele.removeAttribute('disabled');
                    });
                }, ColorPicker.prototype.convertToRgbString = function(rgb) {
                    return rgb.length ? 4 === rgb.length ? 'rgba(' + rgb.join() + ')' : 'rgb(' + rgb.join() + ')' : '';
                }, ColorPicker.prototype.convertToHsvString = function(hsv) {
                    return 4 === hsv.length ? 'hsva(' + hsv.join() + ')' : 'hsv(' + hsv.join() + ')';
                }, ColorPicker.prototype.updateHsv = function() {
                    this.hsv[1] = this.hsv[1] > 100 ? 100 : this.hsv[1], this.hsv[2] = this.hsv[2] > 100 ? 100 : this.hsv[2], this.setHandlerPosition();
                }, ColorPicker.prototype.convertToOtherFormat = function(isKey) {
                    void 0 === isKey && (isKey = !1);
                    var pValue = this.rgbToHex(this.rgb);
                    this.rgb = this.hsvToRgb.apply(this, this.hsv);
                    var cValue = this.rgbToHex(this.rgb), rgba = this.convertToRgbString(this.rgb);
                    this.updatePreview(rgba), this.updateInput(cValue), this.triggerEvent(cValue, pValue, rgba, isKey);
                }, ColorPicker.prototype.updateInput = function(value) {
                    var wrapper = this.getWrapper();
                    wrapper.classList.contains(HIDEVALUE) || (wrapper.classList.contains(HIDEHEX) || input /* Input.setValue */ .I.setValue(value.substr(0, 7), (0, ej2_base /* select */ .Ys)('.' + HEX, this.container)), wrapper.classList.contains(HIDERGBA) || (this.isRgb ? this.updateValue(this.rgb, !1) : this.updateValue(this.hsv, !1)));
                }, ColorPicker.prototype.updatePreview = function(value) {
                    this.enableOpacity && this.updateOpacitySliderBg(), (0, ej2_base /* select */ .Ys)('.e-tip-transparent', this.tooltipEle).style.backgroundColor = value, (0, ej2_base /* select */ .Ys)('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = value, (0, ej2_base /* select */ .Ys)('.' + PREVIEW + ' .' + PREVIOUS, this.container).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
                }, ColorPicker.prototype.getDragHandler = function() {
                    return (0, ej2_base /* select */ .Ys)('.' + HANDLER, this.container);
                }, ColorPicker.prototype.removeTileSelection = function() {
                    [].slice.call((0, ej2_base /* selectAll */ .td)('.' + SELECT, this.container.children[0])).forEach(function(ele) {
                        ele.classList.remove(SELECT), ele.setAttribute('aria-selected', 'false');
                    });
                }, ColorPicker.prototype.convertRgbToNumberArray = function(value) {
                    return value.slice(value.indexOf('(') + 1, value.indexOf(')')).split(',').map(function(n, i) {
                        return 3 !== i ? parseInt(n, 10) : parseFloat(n);
                    });
                }, /**
     * To get color value in specified type.
     *
     * @param {string} value - Specify the color value.
     * @param {string} type - Specify the type to which the specified color needs to be converted.
     * @method getValue
     * @returns {string} - Color value
     */ ColorPicker.prototype.getValue = function(value, type) {
                    if (value || (value = this.value), type = type ? type.toLowerCase() : 'hex', 'r' === value[0]) {
                        var cValue = this.convertRgbToNumberArray(value);
                        if ('hex' === type || 'hexa' === type) {
                            var hex = this.rgbToHex(cValue);
                            return 'hex' === type ? hex.slice(0, 7) : hex;
                        }
                        return 'hsv' === type ? this.convertToHsvString(this.rgbToHsv.apply(this, cValue.slice(0, 3))) : 'hsva' === type ? this.convertToHsvString(this.rgbToHsv.apply(this, cValue)) : 'null';
                    }
                    if ('h' === value[0]) {
                        var cValue = this.hsvToRgb.apply(this, this.convertRgbToNumberArray(value));
                        if ('rgba' === type) return this.convertToRgbString(cValue);
                        if ('hex' === type || 'hexa' === type) {
                            var hex = this.rgbToHex(cValue);
                            return 'hex' === type ? hex.slice(0, 7) : hex;
                        }
                        return 'rgb' === type ? this.convertToRgbString(cValue.slice(0, 3)) : 'null';
                    }
                    value = this.roundValue(value);
                    var rgb = this.hexToRgb(value);
                    return (('rgb' === type || 'hsv' === type) && (rgb = rgb.slice(0, 3)), 'rgba' === type || 'rgb' === type) ? this.convertToRgbString(rgb) : 'hsva' === type || 'hsv' === type ? this.convertToHsvString(this.rgbToHsv.apply(this, rgb)) : 'hex' === type ? value.slice(0, 7) : 'a' === type ? rgb[3].toString() : 'null';
                }, /**
     * To show/hide ColorPicker popup based on current state of the SplitButton.
     *
     * @method toggle
     * @returns {void}
     */ ColorPicker.prototype.toggle = function() {
                    this.container.parentElement.classList.contains('e-popup-close') ? this.splitBtn.toggle() : this.closePopup(null);
                }, /**
     * Get component name.
     *
     * @returns {string} - Module Name
     * @private
     */ ColorPicker.prototype.getModuleName = function() {
                    return 'colorpicker';
                }, /**
     * Gets the properties to be maintained in the persisted state.
     *
     * @returns {string} - Persist data
     */ ColorPicker.prototype.getPersistData = function() {
                    return this.addOnPersist([
                        'value'
                    ]);
                }, ColorPicker.prototype.wireEvents = function() {
                    if (this.isPicker()) {
                        var dragHandler = this.getDragHandler();
                        ej2_base /* EventHandler.add */ .bi.add(dragHandler, 'keydown', this.pickerKeyDown, this), ej2_base /* EventHandler.add */ .bi.add(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown, this), (this.modeSwitcher || this.showButtons) && this.addCtrlSwitchEvent(), ej2_base /* EventHandler.add */ .bi.add((0, ej2_base /* select */ .Ys)('.' + PREVIOUS, this.container), 'click', this.previewHandler, this);
                    } else ej2_base /* EventHandler.add */ .bi.add(this.container, 'click', this.paletteClickHandler, this), ej2_base /* EventHandler.add */ .bi.add(this.container, 'keydown', this.paletteKeyDown, this);
                }, ColorPicker.prototype.formResetHandler = function() {
                    this.value = this.initialInputValue, (0, ej2_base /* attributes */ .Y4)(this.element, {
                        value: this.initialInputValue
                    });
                }, ColorPicker.prototype.addCtrlSwitchEvent = function() {
                    var ctrlSwitchBtn = (0, ej2_base /* select */ .Ys)('.' + CTRLSWITCH, this.container);
                    ctrlSwitchBtn && ej2_base /* EventHandler.add */ .bi.add(ctrlSwitchBtn, 'click', this.btnClickHandler, this);
                }, ColorPicker.prototype.pickerKeyDown = function(e) {
                    switch(e.keyCode){
                        case 39:
                            this.handlerDragPosition(1, this.enableRtl ? -1 : 1, e);
                            break;
                        case 37:
                            this.handlerDragPosition(1, this.enableRtl ? 1 : -1, e);
                            break;
                        case 38:
                            this.handlerDragPosition(2, 1, e);
                            break;
                        case 40:
                            this.handlerDragPosition(2, -1, e);
                            break;
                        case 13:
                            e.preventDefault();
                            var cValue = this.rgbToHex(this.rgb);
                            this.enterKeyHandler(cValue, e);
                    }
                }, ColorPicker.prototype.enterKeyHandler = function(value, e) {
                    this.triggerChangeEvent(value), this.inline || (this.closePopup(e), this.splitBtn.element.focus());
                }, ColorPicker.prototype.closePopup = function(e) {
                    var _this = this, beforeCloseArgs = {
                        element: this.container,
                        event: e,
                        cancel: !1
                    };
                    this.trigger('beforeClose', beforeCloseArgs, function(observedcloseArgs) {
                        observedcloseArgs.cancel || (_this.splitBtn.toggle(), _this.onPopupClose());
                    });
                }, ColorPicker.prototype.triggerChangeEvent = function(value) {
                    var hex = value.slice(0, 7);
                    this.trigger('change', {
                        currentValue: {
                            hex: hex,
                            rgba: this.convertToRgbString(this.rgb)
                        },
                        previousValue: {
                            hex: this.value.slice(0, 7),
                            rgba: this.convertToRgbString(this.hexToRgb(this.value))
                        },
                        value: this.enableOpacity ? value : hex
                    }), this.enableOpacity ? this.setProperties({
                        value: value
                    }, !0) : this.setProperties({
                        value: hex
                    }, !0), this.element.value = hex || '#000000';
                }, ColorPicker.prototype.handlerDragPosition = function(prob, value, e) {
                    e.preventDefault(), this.hsv[prob] += value * (e.ctrlKey ? 1 : 3), this.hsv[prob] < 0 && (this.hsv[prob] = 0), this.updateHsv(), this.convertToOtherFormat(!0);
                }, ColorPicker.prototype.handlerDown = function(e) {
                    e.preventDefault(), 'mousedown' === e.type ? (this.clientX = Math.abs(e.pageX - pageXOffset), this.clientY = Math.abs(e.pageY - pageYOffset), this.setTooltipOffset(8)) : (this.clientX = Math.abs(e.changedTouches[0].pageX - pageXOffset), this.clientY = Math.abs(e.changedTouches[0].pageY - pageYOffset), this.setTooltipOffset(-8)), this.setHsv(this.clientX, this.clientY), this.getDragHandler().style.transition = 'left .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1)', this.updateHsv(), this.convertToOtherFormat(), this.getDragHandler().focus(), ej2_base /* EventHandler.add */ .bi.add(document, 'mousemove touchmove', this.handlerMove, this), ej2_base /* EventHandler.add */ .bi.add(document, 'mouseup touchend', this.handlerEnd, this);
                }, ColorPicker.prototype.handlerMove = function(e) {
                    'touchmove' !== e.type && e.preventDefault(), 'mousemove' === e.type ? (x = Math.abs(e.pageX - pageXOffset), y = Math.abs(e.pageY - pageYOffset)) : (x = Math.abs(e.changedTouches[0].pageX - pageXOffset), y = Math.abs(e.changedTouches[0].pageY - pageYOffset)), this.setHsv(x, y);
                    var x, y, dragHandler = this.getDragHandler();
                    this.updateHsv(), this.convertToOtherFormat(), this.getTooltipInst().refresh(dragHandler), !this.tooltipEle.style.transform && (Math.abs(this.clientX - x) > 8 || Math.abs(this.clientY - y) > 8) && ((0, ej2_base /* select */ .Ys)('.' + HSVAREA, this.container).style.cursor = 'pointer', dragHandler.style.transition = 'none', this.inline || (this.tooltipEle.style.zIndex = (parseInt(this.getPopupEle().style.zIndex, 10) + 1).toString()), this.tooltipEle.style.transform = 'rotate(45deg)', dragHandler.classList.add('e-hide-handler'));
                }, ColorPicker.prototype.setHsv = function(clientX, clientY) {
                    var ele = (0, ej2_base /* select */ .Ys)('.' + HSVAREA, this.container), position = ele.getBoundingClientRect();
                    clientX = this.enableRtl ? clientX > position.right ? 0 : Math.abs(clientX - position.right) : clientX > position.left ? Math.abs(clientX - position.left) : 0, clientY = clientY > position.top ? Math.abs(clientY - position.top) : 0, this.hsv[2] = Math.round(10 * Number(100 * (ele.offsetHeight - Math.max(0, Math.min(ele.offsetHeight, clientY - ele.offsetTop))) / ele.offsetHeight)) / 10, this.hsv[1] = Math.round(10 * Number(100 * Math.max(0, Math.min(ele.offsetWidth, clientX - ele.offsetLeft)) / ele.offsetWidth)) / 10;
                }, ColorPicker.prototype.handlerEnd = function(e) {
                    'touchend' !== e.type && e.preventDefault(), ej2_base /* EventHandler.remove */ .bi.remove(document, 'mousemove touchmove', this.handlerMove), ej2_base /* EventHandler.remove */ .bi.remove(document, 'mouseup touchend', this.handlerEnd);
                    var dragHandler = this.getDragHandler();
                    (0, ej2_base /* select */ .Ys)('.' + HSVAREA, this.container).style.cursor = '', this.tooltipEle.style.transform && (this.tooltipEle.style.transform = '', dragHandler.classList.remove('e-hide-handler')), this.inline || this.showButtons || this.closePopup(e);
                }, ColorPicker.prototype.btnClickHandler = function(e) {
                    var target = e.target;
                    (0, ej2_base /* closest */ .oq)(target, '.' + MODESWITCH) ? (e.stopPropagation(), this.switchToPalette()) : (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) && this.ctrlBtnClick(target, e);
                }, ColorPicker.prototype.switchToPalette = function() {
                    this.trigger('beforeModeSwitch', {
                        element: this.container,
                        mode: 'Palette'
                    }), this.unWireEvents(), this.destroyOtherComp(), (0, ej2_base /* detach */ .og)((0, ej2_base /* select */ .Ys)('.e-slider-preview', this.container)), this.getWrapper().classList.contains(HIDEVALUE) || (0, ej2_base /* remove */ .Od)((0, ej2_base /* select */ .Ys)('.' + INPUTWRAPPER, this.container)), (0, ej2_base /* detach */ .og)(this.getHsvContainer()), this.createPalette(), this.firstPaletteFocus(), this.createInput(), this.refreshPopupPos(), this.wireEvents(), this.trigger('onModeSwitch', {
                        element: this.container,
                        mode: 'Palette'
                    });
                }, ColorPicker.prototype.refreshPopupPos = function() {
                    if (!this.inline) {
                        var popupEle = this.getPopupEle();
                        popupEle.style.left = (0, ej2_base /* formatUnit */ .Ac)(0 + pageXOffset), popupEle.style.top = (0, ej2_base /* formatUnit */ .Ac)(0 + pageYOffset), this.getPopupInst().refreshPosition(this.splitBtn.element.parentElement);
                    }
                }, ColorPicker.prototype.formatSwitchHandler = function() {
                    this.isRgb ? (this.updateValue(this.hsv, !0, 3, [
                        360,
                        100,
                        100
                    ]), this.isRgb = !1) : (this.updateValue(this.rgb, !0, 2), this.isRgb = !0);
                }, ColorPicker.prototype.updateValue = function(value, format, idx, max) {
                    for(var inst, clsName = [
                        'e-rh-value',
                        'e-gs-value',
                        'e-bv-value'
                    ], i = 0, len = clsName.length; i < len; i++)(inst = (0, ej2_base /* getInstance */ .s8)((0, ej2_base /* select */ .Ys)('.' + clsName[i], this.container), numerictextbox /* NumericTextBox */ .N)).value = Math.round(value[i]), format && (inst.placeholder = clsName[i].substr(idx, 1).toUpperCase(), inst.max = max ? max[i] : 255), inst.dataBind();
                }, ColorPicker.prototype.previewHandler = function(e) {
                    var target = e.target, pValue = this.rgbToHex(this.rgb);
                    this.rgb = this.convertRgbToNumberArray(target.style.backgroundColor), this.rgb[3] || (this.rgb[3] = 1);
                    var cValue = this.rgbToHex(this.rgb), hsv = this.rgbToHsv.apply(this, this.rgb);
                    hsv[0] !== this.hsv[0] && (this.hueSlider.setProperties({
                        value: hsv[0]
                    }, !0), this.hueSlider.refresh()), this.setHsvContainerBg(hsv[0]), this.enableOpacity && hsv[3] !== this.hsv[3] && (this.opacitySlider.setProperties({
                        value: 100 * hsv[3]
                    }, !0), this.opacitySlider.refresh(), this.updateOpacitySliderBg()), this.hsv = hsv, this.setHandlerPosition(), this.updateInput(cValue), (0, ej2_base /* select */ .Ys)('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = this.convertToRgbString(this.rgb), this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));
                }, ColorPicker.prototype.paletteClickHandler = function(e) {
                    e.preventDefault();
                    var target = e.target;
                    if (target.classList.contains(TILE)) {
                        if (this.removeTileSelection(), this.addTileSelection(target), target.classList.contains(NOCOLOR)) this.noColorTile();
                        else {
                            var cValue = target.getAttribute('aria-label'), pValue = this.rgbToHex(this.rgb);
                            this.rgb = this.hexToRgb(this.roundValue(cValue)), this.hsv = this.rgbToHsv.apply(this, this.rgb), this.getWrapper().classList.contains(SHOWVALUE) && this.updateInput(cValue), this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));
                        }
                        this.inline || this.showButtons || this.closePopup(e);
                    } else (0, ej2_base /* closest */ .oq)(target, '.' + MODESWITCH) ? this.switchToPicker() : target.classList.contains(APPLY) || target.classList.contains(CANCEL) ? this.ctrlBtnClick(target, e) : this.getWrapper().classList.contains(SHOWVALUE) && (0, ej2_base /* closest */ .oq)(target, '.' + FORMATSWITCH) && this.formatSwitchHandler();
                }, ColorPicker.prototype.noColorTile = function(isKey) {
                    void 0 === isKey && (isKey = !1);
                    var pValue = this.rgbToHex(this.rgb);
                    this.rgb = [], this.hsv = [], this.triggerEvent('', pValue, '', isKey);
                }, ColorPicker.prototype.switchToPicker = function() {
                    var wrapper = this.getWrapper();
                    this.trigger('beforeModeSwitch', {
                        element: this.container,
                        mode: 'Picker'
                    }), this.unWireEvents(), [].slice.call((0, ej2_base /* selectAll */ .td)('.' + PALETTES, this.container)).forEach(function(ele) {
                        (0, ej2_base /* detach */ .og)(ele);
                    }), wrapper.classList.contains(SHOWVALUE) && (0, ej2_base /* detach */ .og)((0, ej2_base /* select */ .Ys)('.' + INPUTWRAPPER, this.container)), this.container.style.width = '';
                    var grpEle = (0, ej2_base /* select */ .Ys)('.e-custom-palette', this.container);
                    this.presetColors && (0, ej2_base /* remove */ .Od)(grpEle), this.createPicker(), this.getDragHandler().focus(), this.createInput(), this.refreshPopupPos(), this.wireEvents(), this.trigger('onModeSwitch', {
                        element: this.container,
                        mode: 'Picker'
                    });
                }, ColorPicker.prototype.ctrlBtnClick = function(ele, e) {
                    if (ele.classList.contains(APPLY)) {
                        var cValue = this.rgbToHex(this.rgb);
                        this.triggerChangeEvent(cValue);
                    }
                    this.inline || (this.closePopup(e), this.splitBtn.element.focus());
                }, ColorPicker.prototype.paletteKeyDown = function(e) {
                    var selectedEle, idx, target = e.target;
                    if (target.classList.contains(PALETTES)) {
                        var tiles = [].slice.call((0, ej2_base /* selectAll */ .td)('.' + TILE, target)), prevSelectedEle = tiles.filter(function(tile) {
                            return tile.classList.contains('e-selected');
                        }).pop();
                        switch(!e.altKey && e.keyCode){
                            case 39:
                                e.preventDefault(), selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? -1 : 1)] : tiles[this.enableRtl ? tiles.length - 1 : 0], this.keySelectionChanges(selectedEle);
                                break;
                            case 37:
                                e.preventDefault(), selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? 1 : -1)] : tiles[this.enableRtl ? 0 : tiles.length - 1], this.keySelectionChanges(selectedEle);
                                break;
                            case 38:
                                e.preventDefault(), idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, -this.columns) : 0, selectedEle = tiles[idx] ? tiles[idx] : tiles[idx - this.columns], this.keySelectionChanges(selectedEle);
                                break;
                            case 40:
                                e.preventDefault(), idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, this.columns) : tiles.length - 1, tiles[idx] || (idx %= tiles.length, idx += tiles[tiles.length - 1].parentElement.childElementCount), selectedEle = tiles[idx], this.keySelectionChanges(selectedEle);
                                break;
                            case 13:
                                if (e.preventDefault(), prevSelectedEle) {
                                    var cValue = prevSelectedEle.getAttribute('aria-label');
                                    this.enterKeyHandler(cValue || '', e);
                                }
                        }
                    }
                }, ColorPicker.prototype.keySelectionChanges = function(newEle) {
                    if (this.removeTileSelection(), this.addTileSelection(newEle), newEle.classList.contains(NOCOLOR)) this.noColorTile(!0);
                    else {
                        var cValue = newEle.getAttribute('aria-label'), pValue = this.rgbToHex(this.rgb);
                        this.rgb = this.hexToRgb(cValue), this.hsv = this.rgbToHsv.apply(this, this.rgb), this.getWrapper().classList.contains(SHOWVALUE) && this.updateInput(cValue), this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb), !0);
                    }
                }, ColorPicker.prototype.tilePosition = function(items, element, cIdx) {
                    var n = (items = Array.prototype.slice.call(items)).length, emptyCount = this.columns - items[n - 1].parentElement.childElementCount, idx = items.indexOf(element);
                    return (idx += cIdx) < 0 ? idx += n + emptyCount : idx %= n + emptyCount, idx;
                }, ColorPicker.prototype.inputHandler = function(e) {
                    var hsv, pValue, target = e.target;
                    if (target.value.length) switch((0, ej2_base /* select */ .Ys)('.e-float-text', target.parentElement).textContent){
                        case 'HEX':
                            var value = '';
                            if (('#' === target.value[0] && 5 !== target.value.length || '#' !== target.value[0] && 4 !== target.value.length) && (value = this.roundValue(target.value)), 9 !== value.length) return;
                            pValue = this.rgbToHex(this.rgb), this.rgb = this.hexToRgb(value + value.substr(-2)), this.inputValueChange(this.rgbToHsv.apply(this, this.rgb), pValue, target.value);
                            break;
                        case 'R':
                            this.rgb[0] !== Number(target.value) && (pValue = this.rgbToHex(this.rgb), this.rgb[0] = Number(target.value), hsv = this.rgbToHsv.apply(this, this.rgb), this.inputValueChange(hsv, pValue));
                            break;
                        case 'G':
                            this.rgb[1] !== Number(target.value) && (pValue = this.rgbToHex(this.rgb), this.rgb[1] = Number(target.value), hsv = this.rgbToHsv.apply(this, this.rgb), this.inputValueChange(hsv, pValue));
                            break;
                        case 'B':
                            this.rgb[2] !== Number(target.value) && (pValue = this.rgbToHex(this.rgb), this.rgb[2] = Number(target.value), hsv = this.rgbToHsv.apply(this, this.rgb), this.inputValueChange(hsv, pValue));
                            break;
                        case 'H':
                            this.hueSlider.value = Number(target.value);
                            break;
                        case 'S':
                            this.hsv[1] !== Number(target.value) && (this.hsv[1] = Number(target.value), this.updateHsv(), this.convertToOtherFormat());
                            break;
                        case 'V':
                            this.hsv[2] !== Number(target.value) && (this.hsv[2] = Number(target.value), this.updateHsv(), this.convertToOtherFormat());
                            break;
                        case 'A':
                            this.opacitySlider.value = Number(target.value);
                    }
                }, ColorPicker.prototype.inputValueChange = function(hsv, pValue, value) {
                    hsv[0] !== this.hsv[0] && (this.hueSlider.setProperties({
                        value: hsv[0]
                    }, !0), this.hueSlider.refresh(), this.setHsvContainerBg(hsv[0])), this.hsv = hsv;
                    var cValue = this.rgbToHex(this.rgb);
                    this.setHandlerPosition(), this.updateInput(value || cValue);
                    var rgba = this.convertToRgbString(this.rgb);
                    this.updatePreview(rgba), this.triggerEvent(cValue, pValue, rgba);
                }, ColorPicker.prototype.triggerEvent = function(cValue, pValue, rgba, isKey) {
                    void 0 === isKey && (isKey = !1);
                    var hex = cValue.slice(0, 7);
                    this.showButtons || isKey ? this.trigger('select', {
                        currentValue: {
                            hex: hex,
                            rgba: rgba
                        },
                        previousValue: {
                            hex: pValue.slice(0, 7),
                            rgba: this.convertToRgbString(this.hexToRgb(pValue))
                        }
                    }) : (this.trigger('change', {
                        currentValue: {
                            hex: hex,
                            rgba: rgba
                        },
                        previousValue: {
                            hex: this.value.slice(0, 7),
                            rgba: this.convertToRgbString(this.hexToRgb(this.value))
                        },
                        value: cValue
                    }), this.enableOpacity ? this.setProperties({
                        value: cValue
                    }, !0) : this.setProperties({
                        value: hex
                    }, !0), this.element.value = hex || '#000000');
                }, /**
     * Removes the component from the DOM and detaches all its related event handlers.
     * Also it maintains the initial input element from the DOM.
     *
     * @method destroy
     * @returns {void}
     */ ColorPicker.prototype.destroy = function() {
                    var _this = this, wrapper = this.getWrapper();
                    _super.prototype.destroy.call(this), [
                        'tabindex',
                        'spellcheck'
                    ].forEach(function(attr) {
                        _this.element.removeAttribute(attr);
                    }), this.inline ? (this.unWireEvents(), this.destroyOtherComp()) : (this.isPopupOpen() && (this.unWireEvents(), this.destroyOtherComp()), this.splitBtn.destroy(), this.splitBtn = null), this.tileRipple(), this.tileRipple = null, this.ctrlBtnRipple(), this.ctrlBtnRipple = null, this.element.nextElementSibling && (0, ej2_base /* detach */ .og)(this.element.nextElementSibling), wrapper && (wrapper.parentElement.insertBefore(this.element, wrapper), (0, ej2_base /* detach */ .og)(wrapper)), this.container = null, this.formElement && ej2_base /* EventHandler.remove */ .bi.remove(this.formElement, 'reset', this.formResetHandler);
                }, ColorPicker.prototype.destroyOtherComp = function() {
                    if (this.isPicker()) {
                        this.hueSlider.destroy(), this.enableOpacity && (this.opacitySlider.destroy(), this.opacitySlider = null), this.hueSlider = null;
                        var tooltipInst = this.getTooltipInst();
                        tooltipInst.close(), tooltipInst.destroy(), this.tooltipEle = null;
                    }
                }, ColorPicker.prototype.isPopupOpen = function() {
                    return this.getPopupEle().classList.contains('e-popup-open');
                }, ColorPicker.prototype.unWireEvents = function() {
                    if (this.isPicker()) {
                        var dragHandler = this.getDragHandler();
                        ej2_base /* EventHandler.remove */ .bi.remove(dragHandler, 'keydown', this.pickerKeyDown), ej2_base /* EventHandler.remove */ .bi.remove(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown), (this.modeSwitcher || this.showButtons) && ej2_base /* EventHandler.remove */ .bi.remove((0, ej2_base /* select */ .Ys)('.' + CTRLSWITCH, this.container), 'click', this.btnClickHandler), ej2_base /* EventHandler.remove */ .bi.remove((0, ej2_base /* select */ .Ys)('.' + PREVIOUS, this.container), 'click', this.previewHandler);
                    } else ej2_base /* EventHandler.remove */ .bi.remove(this.container, 'click', this.paletteClickHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.container, 'keydown', this.paletteKeyDown);
                }, ColorPicker.prototype.roundValue = function(value) {
                    if (!value) return '';
                    '#' !== value[0] && (value = '#' + value);
                    var len = value.length;
                    if (4 === len && (value += 'f', len = 5), 5 === len) {
                        for(var tempValue = '', i = 1, len_1 = value.length; i < len_1; i++)tempValue += value.charAt(i) + value.charAt(i);
                        value = '#' + tempValue, len = 9;
                    }
                    return 7 === len && (value += 'ff'), value;
                }, ColorPicker.prototype.hexToRgb = function(hex) {
                    if (!hex) return [];
                    9 !== (hex = hex.trim()).length && (hex = this.roundValue(hex));
                    var opacity = Number((parseInt(hex.slice(-2), 16) / 255).toFixed(2)), bigInt = parseInt(hex = hex.slice(1, 7), 16), h = [];
                    return h.push(bigInt >> 16 & 255), h.push(bigInt >> 8 & 255), h.push(255 & bigInt), h.push(opacity), h;
                }, ColorPicker.prototype.rgbToHsv = function(r, g, b, opacity) {
                    if (this.rgb && !this.rgb.length) return [];
                    var h, max = Math.max(r /= 255, g /= 255, b /= 255), min = Math.min(r, g, b), d = max - min;
                    if (max === min) h = 0;
                    else {
                        switch(max){
                            case r:
                                h = (g - b) / d + (g < b ? 6 : 0);
                                break;
                            case g:
                                h = (b - r) / d + 2;
                                break;
                            case b:
                                h = (r - g) / d + 4;
                        }
                        h /= 6;
                    }
                    var hsv = [
                        Math.round(360 * h),
                        Math.round(1000 * (0 === max ? 0 : d / max)) / 10,
                        Math.round(1000 * max) / 10
                    ];
                    return (0, ej2_base /* isNullOrUndefined */ .le)(opacity) || hsv.push(opacity), hsv;
                }, ColorPicker.prototype.hsvToRgb = function(h, s, v, opacity) {
                    if (v /= 100, 0 == (s /= 100)) return [
                        Math.round(255 * (r = g = b = v)),
                        Math.round(255 * g),
                        Math.round(255 * b),
                        opacity
                    ];
                    var r, g, b, i = Math.floor(h /= 60), f = h - i, p = v * (1 - s), q = v * (1 - s * f), t = v * (1 - s * (1 - f));
                    switch(i){
                        case 0:
                            r = v, g = t, b = p;
                            break;
                        case 1:
                            r = q, g = v, b = p;
                            break;
                        case 2:
                            r = p, g = v, b = t;
                            break;
                        case 3:
                            r = p, g = q, b = v;
                            break;
                        case 4:
                            r = t, g = p, b = v;
                            break;
                        default:
                            r = v, g = p, b = q;
                    }
                    var rgb = [
                        Math.round(255 * r),
                        Math.round(255 * g),
                        Math.round(255 * b)
                    ];
                    return (0, ej2_base /* isNullOrUndefined */ .le)(opacity) || rgb.push(opacity), rgb;
                }, ColorPicker.prototype.rgbToHex = function(rgb) {
                    return rgb.length ? '#' + this.hex(rgb[0]) + this.hex(rgb[1]) + this.hex(rgb[2]) + ((0, ej2_base /* isNullOrUndefined */ .le)(rgb[3]) ? '' : 0 !== rgb[3] ? (Math.round(255 * rgb[3]) + 0x10000).toString(16).substr(-2) : '00') : '';
                }, ColorPicker.prototype.hex = function(x) {
                    return ('0' + x.toString(16)).slice(-2);
                }, ColorPicker.prototype.changeModeSwitcherProp = function(prop) {
                    var ctrlSwitchWrapper = (0, ej2_base /* select */ .Ys)('.' + CTRLSWITCH, this.container);
                    prop ? ctrlSwitchWrapper ? this.appendModeSwitchBtn() : (this.createCtrlBtn(), this.isPicker() && !this.disabled && this.addCtrlSwitchEvent()) : ctrlSwitchWrapper && (this.showButtons ? (0, ej2_base /* detach */ .og)((0, ej2_base /* select */ .Ys)('.' + MODESWITCH, ctrlSwitchWrapper)) : (0, ej2_base /* remove */ .Od)(ctrlSwitchWrapper));
                }, ColorPicker.prototype.changeShowBtnProps = function(prop) {
                    var ctrlBtnWrapper = (0, ej2_base /* select */ .Ys)('.' + CTRLSWITCH, this.container);
                    prop ? (ctrlBtnWrapper && (0, ej2_base /* remove */ .Od)(ctrlBtnWrapper), this.createCtrlBtn(), this.isPicker() && !this.disabled && this.addCtrlSwitchEvent()) : this.modeSwitcher ? (0, ej2_base /* detach */ .og)((0, ej2_base /* select */ .Ys)('.' + CTRLBTN, ctrlBtnWrapper)) : (0, ej2_base /* remove */ .Od)(ctrlBtnWrapper);
                }, ColorPicker.prototype.changeValueProp = function(newProp) {
                    if (this.isPicker()) this.rgb = this.hexToRgb(newProp), this.hsv = this.rgbToHsv.apply(this, this.rgb), this.setHandlerPosition(), (0, ej2_base /* detach */ .og)((0, ej2_base /* closest */ .oq)(this.hueSlider.element, '.e-slider-preview')), this.createSlider(), this.setHsvContainerBg(), this.updateInput(newProp), 4 === this.rgb.length && this.updateOpacityInput(100 * this.rgb[3]);
                    else {
                        this.removeTileSelection();
                        var ele = this.container.querySelector('span[aria-label="' + this.roundValue(newProp) + '"]');
                        ele && this.addTileSelection(ele);
                    }
                }, ColorPicker.prototype.setInputEleProps = function() {
                    (0, ej2_base /* remove */ .Od)((0, ej2_base /* select */ .Ys)('.' + INPUTWRAPPER, this.container)), this.createInput();
                }, ColorPicker.prototype.changeDisabledProp = function(newProp) {
                    this.isPicker() && (this.hueSlider.enabled = !newProp, this.opacitySlider.enabled = !newProp, this.setInputEleProps()), newProp ? (this.toggleDisabled(!0), this.unWireEvents()) : (this.toggleDisabled(!1), this.wireEvents());
                }, ColorPicker.prototype.changeCssClassProps = function(newProp, oldProp) {
                    var wrapper = this.getWrapper(), popupWrapper = this.getPopupEle();
                    oldProp && (0, ej2_base /* removeClass */ .IV)([
                        wrapper,
                        popupWrapper
                    ], oldProp.split(' ')), newProp && (0, ej2_base /* addClass */ .cn)([
                        wrapper,
                        popupWrapper
                    ], newProp.split(' '));
                }, ColorPicker.prototype.changeRtlProps = function(newProp) {
                    newProp ? (0, ej2_base /* addClass */ .cn)([
                        this.getWrapper()
                    ], 'e-rtl') : (0, ej2_base /* removeClass */ .IV)([
                        this.getWrapper()
                    ], 'e-rtl');
                }, ColorPicker.prototype.changePaletteProps = function() {
                    (0, ej2_base /* detach */ .og)(this.container.children[0]), this.container.style.width = '', this.createPalette();
                }, ColorPicker.prototype.changeOpacityProps = function(newProp) {
                    var wrapper = this.getWrapper();
                    newProp ? ((0, ej2_base /* removeClass */ .IV)([
                        this.container.parentElement
                    ], HIDEOPACITY), this.createOpacitySlider((0, ej2_base /* select */ .Ys)('.e-colorpicker-slider', this.container).appendChild(this.createElement('div', {
                        className: 'e-opacity-slider'
                    }))), wrapper.classList.contains(HIDEVALUE) || wrapper.classList.contains(HIDERGBA) || this.appendOpacityValue((0, ej2_base /* select */ .Ys)('.e-input-container', this.container))) : ((0, ej2_base /* addClass */ .cn)([
                        this.container.parentElement
                    ], HIDEOPACITY), this.opacitySlider.destroy(), (0, ej2_base /* remove */ .Od)(this.opacitySlider.element), this.opacitySlider = null, wrapper.classList.contains(HIDEVALUE) || wrapper.classList.contains(HIDERGBA) || (0, ej2_base /* remove */ .Od)((0, ej2_base /* select */ .Ys)('.' + OPACITY, this.container).parentElement));
                }, /**
     * Called internally if any of the property value changed.
     *
     * @param  {ColorPickerModel} newProp - Specifies new properties
     * @param  {ColorPickerModel} oldProp - Specifies old properties
     * @returns {void}
     * @private
     */ ColorPicker.prototype.onPropertyChanged = function(newProp, oldProp) {
                    var _this = this;
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(newProp.value)) {
                        var value = this.roundValue(newProp.value);
                        if (9 === value.length) {
                            this.element.value = this.roundValue(value).slice(0, 7);
                            var preview = this.splitBtn && (0, ej2_base /* select */ .Ys)('.' + SPLITPREVIEW, this.splitBtn.element);
                            preview && (preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(newProp.value)));
                        } else this.value = oldProp.value;
                    }
                    if (!this.inline && (0, ej2_base /* isNullOrUndefined */ .le)(newProp.inline) && (this.splitBtn.setProperties(getModel(newProp, [
                        'disabled',
                        'enableRtl'
                    ])), !this.isPopupOpen())) {
                        this.changeCssClassProps(newProp.cssClass, oldProp.cssClass), this.changeRtlProps(newProp.enableRtl);
                        return;
                    }
                    for(var this_1 = this, _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++)!function(prop) {
                        switch(prop){
                            case 'inline':
                                newProp.inline ? (this_1.getWrapper().appendChild(this_1.container), this_1.splitBtn.destroy(), (0, ej2_base /* detach */ .og)(this_1.element.nextElementSibling), this_1.container.children.length || this_1.createWidget()) : (this_1.destroyOtherComp(), this_1.unWireEvents(), this_1.container.innerHTML = '', this_1.createSplitBtn());
                                break;
                            case 'cssClass':
                                this_1.changeCssClassProps(newProp.cssClass, oldProp.cssClass);
                                var props = newProp.cssClass.split(' ').concat(oldProp.cssClass.split(' '));
                                props = props.reduce(function(a, b) {
                                    return 0 > a.indexOf(b) && a.push(b), a;
                                }, []);
                                var count_1 = 0;
                                props.forEach(function(cls) {
                                    0 === count_1 && (cls === HIDEVALUE || cls === HIDEVALUESWITCH || cls === SHOWVALUE || cls === HIDEHEX || cls === HIDERGBA) && ((0, ej2_base /* select */ .Ys)('.' + INPUTWRAPPER, _this.container) && (0, ej2_base /* remove */ .Od)((0, ej2_base /* select */ .Ys)('.' + INPUTWRAPPER, _this.container)), _this.createInput(), count_1++);
                                });
                                break;
                            case 'enableRtl':
                                this_1.isPicker() && (this_1.hueSlider.enableRtl = newProp.enableRtl, this_1.enableOpacity && (this_1.opacitySlider.enableRtl = newProp.enableRtl), this_1.setInputEleProps()), this_1.changeRtlProps(newProp.enableRtl);
                                break;
                            case 'disabled':
                                this_1.changeDisabledProp(newProp.disabled);
                                break;
                            case 'value':
                                this_1.value !== oldProp.value && this_1.changeValueProp(newProp.value);
                                break;
                            case 'showButtons':
                                this_1.changeShowBtnProps(newProp.showButtons);
                                break;
                            case 'mode':
                                'Picker' === newProp.mode ? this_1.switchToPicker() : this_1.switchToPalette();
                                break;
                            case 'modeSwitcher':
                                this_1.changeModeSwitcherProp(newProp.modeSwitcher);
                                break;
                            case 'columns':
                            case 'presetColors':
                                this_1.isPicker() || this_1.changePaletteProps();
                                break;
                            case 'noColor':
                                newProp.noColor ? 'Palette' !== this_1.mode || this_1.modeSwitcher || this_1.setNoColor() : this_1.changePaletteProps();
                                break;
                            case 'enableOpacity':
                                this_1.changeOpacityProps(newProp.enableOpacity);
                        }
                    }(_a[_i]);
                }, /**
     * Sets the focus to Colorpicker
     * its native method
     *
     * @public
     * @returns {void}
     */ ColorPicker.prototype.focusIn = function() {
                    this.element.parentElement.focus();
                }, color_picker_decorate([
                    (0, ej2_base /* Property */ .Z9)('#008000ff')
                ], ColorPicker.prototype, "value", void 0), color_picker_decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], ColorPicker.prototype, "cssClass", void 0), color_picker_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], ColorPicker.prototype, "disabled", void 0), color_picker_decorate([
                    (0, ej2_base /* Property */ .Z9)('Picker')
                ], ColorPicker.prototype, "mode", void 0), color_picker_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], ColorPicker.prototype, "modeSwitcher", void 0), color_picker_decorate([
                    (0, ej2_base /* Property */ .Z9)(null)
                ], ColorPicker.prototype, "presetColors", void 0), color_picker_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], ColorPicker.prototype, "showButtons", void 0), color_picker_decorate([
                    (0, ej2_base /* Property */ .Z9)(10)
                ], ColorPicker.prototype, "columns", void 0), color_picker_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], ColorPicker.prototype, "inline", void 0), color_picker_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], ColorPicker.prototype, "noColor", void 0), color_picker_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], ColorPicker.prototype, "enablePersistence", void 0), color_picker_decorate([
                    (0, ej2_base /* Property */ .Z9)(!0)
                ], ColorPicker.prototype, "enableOpacity", void 0), color_picker_decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], ColorPicker.prototype, "createPopupOnClick", void 0), color_picker_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], ColorPicker.prototype, "select", void 0), color_picker_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], ColorPicker.prototype, "change", void 0), color_picker_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], ColorPicker.prototype, "beforeTileRender", void 0), color_picker_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], ColorPicker.prototype, "beforeOpen", void 0), color_picker_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], ColorPicker.prototype, "open", void 0), color_picker_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], ColorPicker.prototype, "beforeClose", void 0), color_picker_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], ColorPicker.prototype, "beforeModeSwitch", void 0), color_picker_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], ColorPicker.prototype, "onModeSwitch", void 0), color_picker_decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], ColorPicker.prototype, "created", void 0), ColorPicker = color_picker_decorate([
                    ej2_base /* NotifyPropertyChanges */ .Zl
                ], ColorPicker);
            }(ej2_base /* Component */ .wA), ToolbarRenderer = /** @class */ function() {
                /**
     * Constructor for toolbar renderer module
     *
     * @param {IRichTextEditor} parent - specifies the parent element.
     */ function ToolbarRenderer(parent) {
                    this.parent = parent, this.wireEvent();
                }
                return ToolbarRenderer.prototype.wireEvent = function() {
                    this.parent.on(constant /* destroy */ .ob, this.unWireEvent, this);
                }, ToolbarRenderer.prototype.unWireEvent = function() {
                    this.parent.off(constant /* destroy */ .ob, this.unWireEvent), this.popupOverlay && ej2_base /* EventHandler.remove */ .bi.remove(this.popupOverlay, 'click touchmove', this.onPopupOverlay), this.removePopupContainer();
                }, ToolbarRenderer.prototype.toolbarBeforeCreate = function(e) {
                    'Extended' === this.mode && (e.enableCollision = !1);
                }, ToolbarRenderer.prototype.toolbarCreated = function() {
                    this.parent.notify(constant /* toolbarCreated */ .CK, this);
                }, ToolbarRenderer.prototype.toolbarClicked = function(args) {
                    this.parent.enabled && ((!this.parent.readonly || (0, ej2_base /* isNullOrUndefined */ .le)(args.item)) && this.parent.notify(constant /* toolbarClick */ .kE, args), this.parent.trigger('toolbarClick', args));
                }, ToolbarRenderer.prototype.dropDownSelected = function(args) {
                    this.parent.notify(constant /* dropDownSelect */ .s7, args), this.onPopupOverlay();
                }, ToolbarRenderer.prototype.beforeDropDownItemRender = function(args) {
                    !this.parent.readonly && this.parent.enabled && this.parent.notify(constant /* beforeDropDownItemRender */ .nd, args);
                }, ToolbarRenderer.prototype.dropDownOpen = function(args) {
                    if (args.element.parentElement.getAttribute('id').indexOf('TableCell') > -1 && !(0, ej2_base /* isNullOrUndefined */ .le)(args.element.parentElement.querySelector('.e-cell-merge')) && (!(0, ej2_base /* isNullOrUndefined */ .le)(args.element.parentElement.querySelector('.e-cell-horizontal-split')) || !(0, ej2_base /* isNullOrUndefined */ .le)(args.element.parentElement.querySelector('.e-cell-vertical-split')))) {
                        var listEle = args.element.querySelectorAll('li');
                        1 === this.parent.inputElement.querySelectorAll('.e-cell-select').length ? ((0, ej2_base /* addClass */ .cn)([
                            listEle[0]
                        ], 'e-disabled'), (0, ej2_base /* removeClass */ .IV)([
                            listEle[1],
                            listEle[2]
                        ], 'e-disabled')) : this.parent.inputElement.querySelectorAll('.e-cell-select').length > 1 && ((0, ej2_base /* removeClass */ .IV)([
                            listEle[0]
                        ], 'e-disabled'), (0, ej2_base /* addClass */ .cn)([
                            listEle[1],
                            listEle[2]
                        ], 'e-disabled'));
                    }
                    ej2_base /* Browser.isDevice */ .AR.isDevice && !args.element.parentElement.classList.contains(classes /* CLS_QUICK_DROPDOWN */ .uO) && this.popupModal(args.element.parentElement), this.parent.notify(constant /* selectionSave */ .gA, args);
                }, ToolbarRenderer.prototype.dropDownClose = function(args) {
                    this.removePopupContainer(), this.parent.notify(constant /* selectionRestore */ .Wz, args);
                }, ToolbarRenderer.prototype.removePopupContainer = function() {
                    if (ej2_base /* Browser.isDevice */ .AR.isDevice && !(0, ej2_base /* isNullOrUndefined */ .le)(this.popupContainer)) {
                        var popupEle = this.popupContainer.querySelector('.e-dropdown-popup.e-tbar-btn.e-control');
                        popupEle && (this.popupContainer.parentNode.insertBefore(popupEle, this.popupContainer.nextSibling), popupEle.style.removeProperty('position'), (0, ej2_base /* removeClass */ .IV)([
                            popupEle
                        ], 'e-popup-modal')), (0, ej2_base /* detach */ .og)(this.popupContainer), this.popupContainer = void 0;
                    }
                }, /**
     * renderToolbar method
     *
     * @param {IToolbarOptions} args - specifies the arguments.
     * @returns {void}
     * @hidden

     */ ToolbarRenderer.prototype.renderToolbar = function(args) {
                    this.setPanel(args.target), this.renderPanel(), this.mode = args.overflowMode, args.rteToolbarObj.toolbarObj = new Toolbar({
                        items: args.items,
                        width: '100%',
                        overflowMode: args.overflowMode,
                        beforeCreate: this.toolbarBeforeCreate.bind(this),
                        created: this.toolbarCreated.bind(this),
                        clicked: this.toolbarClicked.bind(this),
                        enablePersistence: args.enablePersistence,
                        enableRtl: args.enableRtl,
                        cssClass: args.cssClass
                    }), args.rteToolbarObj.toolbarObj.isStringTemplate = !0, args.rteToolbarObj.toolbarObj.createElement = this.parent.createElement, args.rteToolbarObj.toolbarObj.appendTo(args.target);
                }, /**
     * renderDropDownButton method
     *
     * @param {IDropDownModel} args - specifies the the arguments.
     * @returns {void}
     * @hidden

     */ ToolbarRenderer.prototype.renderDropDownButton = function(args) {
                    var css, _this = this;
                    args.element.classList.add(classes /* CLS_DROPDOWN_BTN */ .zD), css = args.cssClass + ' ' + classes /* CLS_RTE_ELEMENTS */ .i7 + ' ' + classes /* CLS_TB_BTN */ .Fs, this.parent.inlineMode.enable && ej2_base /* Browser.isDevice */ .AR.isDevice && (css = css + ' ' + classes /* CLS_INLINE_DROPDOWN */ .ZV);
                    // eslint-disable-next-line
                    var proxy = this, dropDown = new DropDownButton({
                        items: args.items,
                        iconCss: args.iconCss,
                        cssClass: css,
                        content: args.content,
                        enablePersistence: this.parent.enablePersistence,
                        enableRtl: this.parent.enableRtl,
                        select: this.dropDownSelected.bind(this),
                        beforeOpen: function(args) {
                            if (proxy.parent.readonly || !proxy.parent.enabled) {
                                args.cancel = !0;
                                return;
                            }
                            // eslint-disable-next-line
                            for(var index = 0; index < args.element.childNodes.length; index++){
                                var divNode = _this.parent.createElement('div');
                                divNode.innerHTML = dropDown.content.trim(), '' !== divNode.textContent.trim() && args.element.childNodes[index].textContent.trim() === divNode.textContent.trim() ? args.element.childNodes[index].classList.contains('e-active') || (0, ej2_base /* addClass */ .cn)([
                                    args.element.childNodes[index]
                                ], 'e-active') : (0, ej2_base /* removeClass */ .IV)([
                                    args.element.childNodes[index]
                                ], 'e-active');
                            }
                            proxy.parent.notify(constant /* beforeDropDownOpen */ .rc, args);
                        },
                        close: this.dropDownClose.bind(this),
                        open: this.dropDownOpen.bind(this),
                        beforeItemRender: this.beforeDropDownItemRender.bind(this)
                    });
                    return dropDown.isStringTemplate = !0, dropDown.createElement = proxy.parent.createElement, dropDown.appendTo(args.element), args.element.tabIndex = -1, document.getElementById(dropDown.element.id + '-popup').setAttribute('aria-owns', this.parent.getID()), dropDown;
                }, /**
     * renderListDropDown method
     *
     * @param {IDropDownModel} args - specifies the the arguments.
     * @returns {void}
     * @hidden

     */ ToolbarRenderer.prototype.renderListDropDown = function(args) {
                    // eslint-disable-next-line
                    var proxy = this, css = classes /* CLS_RTE_ELEMENTS */ .i7 + ' ' + classes /* CLS_TB_BTN */ .Fs + (this.parent.inlineMode ? ' ' + classes /* CLS_INLINE_DROPDOWN */ .ZV : '');
                    css += ' ' + ('NumberFormatList' === args.itemName ? classes /* CLS_NUMBERFORMATLIST_TB_BTN */ .CY : classes /* CLS_BULLETFORMATLIST_TB_BTN */ .Cs);
                    var content = proxy.parent.createElement('span', {
                        className: classes /* CLS_LIST_PRIMARY_CONTENT */ .$j
                    }), inlineEle = proxy.parent.createElement('span', {
                        className: args.cssClass
                    });
                    content.appendChild(inlineEle);
                    var dropDown = new DropDownButton({
                        items: args.items,
                        cssClass: css,
                        content: args.content,
                        enablePersistence: this.parent.enablePersistence,
                        enableRtl: this.parent.enableRtl,
                        select: this.dropDownSelected.bind(this),
                        beforeOpen: function(args) {
                            if (proxy.parent.readonly || !proxy.parent.enabled) {
                                args.cancel = !0;
                                return;
                            }
                            var element = args.event ? args.event.target : null;
                            if (proxy.currentElement = dropDown.element, proxy.currentDropdown = dropDown, args.event && 'click' === args.event.type && (element.classList.contains(classes /* CLS_LIST_PRIMARY_CONTENT */ .$j) || element.parentElement.classList.contains(classes /* CLS_LIST_PRIMARY_CONTENT */ .$j))) {
                                args.cancel = !0;
                                return;
                            }
                            proxy.parent.notify(constant /* beforeDropDownOpen */ .rc, args);
                        },
                        close: this.dropDownClose.bind(this),
                        open: this.dropDownOpen.bind(this),
                        beforeItemRender: this.beforeDropDownItemRender.bind(this)
                    });
                    return dropDown.isStringTemplate = !0, dropDown.createElement = proxy.parent.createElement, dropDown.appendTo(args.element), args.element.tabIndex = -1, document.getElementById(dropDown.element.id + '-popup').setAttribute('aria-owns', this.parent.getID()), 1 === args.element.childElementCount && dropDown.element.insertBefore(content, dropDown.element.querySelector('.e-caret')), args.element.tabIndex = -1, dropDown.element.removeAttribute('type'), dropDown;
                }, // eslint-disable-next-line
                ToolbarRenderer.prototype.onPopupOverlay = function(args) {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.popupOverlay) || ((0, ej2_base /* closest */ .oq)(this.popupOverlay, '.e-popup-container').style.display = 'none', this.popupOverlay.style.display = 'none', (0, ej2_base /* removeClass */ .IV)([
                        this.popupOverlay
                    ], 'e-popup-overlay'));
                }, ToolbarRenderer.prototype.setIsModel = function(element) {
                    (0, ej2_base /* closest */ .oq)(element, '.e-popup-container') ? (element.parentElement.style.display = 'flex', this.popupOverlay = element.nextElementSibling, this.popupOverlay.style.display = 'block', (0, ej2_base /* addClass */ .cn)([
                        this.popupOverlay
                    ], 'e-popup-overlay')) : (this.popupContainer = this.parent.createElement('div', {
                        className: 'e-rte-modal-popup e-popup-container e-center'
                    }), element.parentNode.insertBefore(this.popupContainer, element), this.popupContainer.appendChild(element), this.popupContainer.style.zIndex = element.style.zIndex, this.popupContainer.style.display = 'flex', element.style.position = 'relative', (0, ej2_base /* addClass */ .cn)([
                        element
                    ], 'e-popup-modal'), this.popupOverlay = this.parent.createElement('div', {
                        className: 'e-popup-overlay'
                    }), // eslint-disable-next-line
                    this.popupOverlay.style.zIndex = (parseInt(element.style.zIndex, null) - 1).toString(), this.popupOverlay.style.display = 'block', this.popupContainer.appendChild(this.popupOverlay), ej2_base /* EventHandler.add */ .bi.add(this.popupOverlay, 'click touchmove', this.onPopupOverlay, this));
                }, ToolbarRenderer.prototype.paletteSelection = function(dropDownArgs, currentElement) {
                    var ele = dropDownArgs.element.querySelector('.e-control.e-colorpicker'), colorbox = [].slice.call((0, ej2_base /* selectAll */ .td)('.e-tile', ele.parentElement));
                    (0, ej2_base /* removeClass */ .IV)(colorbox, 'e-selected');
                    var style = currentElement.querySelector('.' + classes /* CLS_RTE_ELEMENTS */ .i7).style.borderBottomColor;
                    colorbox.filter(function(colorbox) {
                        colorbox.style.backgroundColor === style && (0, ej2_base /* addClass */ .cn)([
                            colorbox
                        ], 'e-selected');
                    });
                }, /**
     * renderColorPickerDropDown method
     *
     * @param {IColorPickerModel} args - specifies the arguments.
     * @param {string} item - specifies the item.
     * @param {ColorPicker} colorPicker - specifies the colorpicker.
     * @returns {void}
     * @hidden

     */ ToolbarRenderer.prototype.renderColorPickerDropDown = function(args, item, colorPicker, defaultColor) {
                    var range, _this = this, proxy = this, css = classes /* CLS_RTE_ELEMENTS */ .i7 + ' ' + classes /* CLS_TB_BTN */ .Fs + (this.parent.inlineMode ? ' ' + classes /* CLS_INLINE_DROPDOWN */ .ZV : '');
                    css += ' ' + ('backgroundcolor' === item ? classes /* CLS_BACKGROUND_COLOR_DROPDOWN */ .Z8 : classes /* CLS_FONT_COLOR_DROPDOWN */ .UQ) + ' ' + this.parent.cssClass;
                    var content = proxy.parent.createElement('span', {
                        className: classes /* CLS_COLOR_CONTENT */ .uN
                    }), inlineEle = proxy.parent.createElement('span', {
                        className: args.cssClass
                    }), initialBackgroundColor = (0, ej2_base /* isNullOrUndefined */ .le)(defaultColor) ? proxy.parent.backgroundColor.default : defaultColor;
                    inlineEle.style.borderBottomColor = 'backgroundcolor' === item ? initialBackgroundColor : proxy.parent.fontColor.default, content.appendChild(inlineEle);
                    var dropDown = new DropDownButton({
                        target: colorPicker.element.parentElement,
                        cssClass: css,
                        enablePersistence: this.parent.enablePersistence,
                        enableRtl: this.parent.enableRtl,
                        beforeOpen: function(dropDownArgs) {
                            if (proxy.parent.readonly || !proxy.parent.enabled) {
                                dropDownArgs.cancel = !0;
                                return;
                            }
                            var element = dropDownArgs.event ? dropDownArgs.event.target : null;
                            if (proxy.currentElement = dropDown.element, proxy.currentDropdown = dropDown, proxy.paletteSelection(dropDownArgs, proxy.currentElement), dropDownArgs.event && 'click' === dropDownArgs.event.type && (element.classList.contains(classes /* CLS_COLOR_CONTENT */ .uN) || element.parentElement.classList.contains(classes /* CLS_COLOR_CONTENT */ .uN))) {
                                dropDownArgs.cancel = !0;
                                var colorpickerValue = element.classList.contains(classes /* CLS_RTE_ELEMENTS */ .i7) ? element.style.borderBottomColor : element.querySelector('.' + classes /* CLS_RTE_ELEMENTS */ .i7).style.borderBottomColor;
                                proxy.parent.notify(constant /* selectionRestore */ .Wz, {});
                                var parentNode = (range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument())).startContainer.parentNode, closestElement = (0, ej2_base /* closest */ .oq)(range.startContainer.parentNode, 'table');
                                ('TD' === range.startContainer.nodeName || 'TH' === range.startContainer.nodeName || (0, ej2_base /* closest */ .oq)(range.startContainer.parentNode, 'td,th') || proxy.parent.iframeSettings.enable && !(0, util /* hasClass */ .pv)(parentNode.ownerDocument.querySelector('body'), 'e-lib')) && range.collapsed && 'BackgroundColor' === args.subCommand && (0, ej2_base /* closest */ .oq)(closestElement, '.' + classes /* CLS_RTE */ .$E) ? proxy.parent.notify(constant /* tableColorPickerChanged */ .Yo, {
                                    item: {
                                        command: args.command,
                                        subCommand: args.subCommand,
                                        value: colorpickerValue
                                    }
                                }) : proxy.parent.notify(constant /* colorPickerChanged */ .Kz, {
                                    item: {
                                        command: args.command,
                                        subCommand: args.subCommand,
                                        value: colorpickerValue
                                    }
                                });
                                return;
                            }
                            var ele = dropDownArgs.element.querySelector('.e-control.e-colorpicker'), inst = (0, ej2_base /* getInstance */ .s8)(ele, ColorPicker);
                            inst.showButtons = !dropDownArgs.element.querySelector('.e-color-palette'), inst.dataBind(), dropDownArgs.element.onclick = function(args) {
                                args.target.classList.contains('e-cancel') && dropDown.toggle();
                            };
                        },
                        open: function(dropDownArgs) {
                            _this.setColorPickerContentWidth(colorPicker);
                            var focusEle, ele = dropDownArgs.element.querySelector('.e-control.e-colorpicker');
                            (focusEle = dropDownArgs.element.querySelector('.e-color-palette') ? ele.parentElement.querySelector('.e-palette') : ele.parentElement.querySelector('e-handler')) && focusEle.focus(), ej2_base /* Browser.isDevice */ .AR.isDevice && _this.popupModal(dropDownArgs.element.parentElement), _this.pickerRefresh(dropDownArgs);
                        },
                        beforeClose: function(dropDownArgs) {
                            var element = dropDownArgs.event ? dropDownArgs.event.target : null;
                            if (dropDownArgs.event && 'click' === dropDownArgs.event.type && (element.classList.contains(classes /* CLS_COLOR_CONTENT */ .uN) || element.parentElement.classList.contains(classes /* CLS_COLOR_CONTENT */ .uN))) {
                                var colorpickerValue = element.classList.contains(classes /* CLS_RTE_ELEMENTS */ .i7) ? element.style.borderBottomColor : element.querySelector('.' + classes /* CLS_RTE_ELEMENTS */ .i7).style.borderBottomColor;
                                ('TD' === (range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument())).startContainer.nodeName || 'TH' === range.startContainer.nodeName || (0, ej2_base /* closest */ .oq)(range.startContainer.parentNode, 'td,th')) && range.collapsed ? proxy.parent.notify(constant /* tableColorPickerChanged */ .Yo, {
                                    item: {
                                        command: args.command,
                                        subCommand: args.subCommand,
                                        value: colorpickerValue
                                    }
                                }) : proxy.parent.notify(constant /* colorPickerChanged */ .Kz, {
                                    item: {
                                        command: args.command,
                                        subCommand: args.subCommand,
                                        value: colorpickerValue
                                    }
                                });
                                return;
                            }
                        },
                        close: function(dropDownArgs) {
                            proxy.parent.notify(constant /* selectionRestore */ .Wz, {});
                            var dropElement = (0, ej2_base /* closest */ .oq)(dropDownArgs.element.parentElement, '.e-popup-container');
                            if (dropElement && (dropElement.style.display = 'none', dropElement.lastElementChild.style.display = 'none', (0, ej2_base /* removeClass */ .IV)([
                                dropElement.lastElementChild
                            ], 'e-popup-overlay')), ej2_base /* Browser.isDevice */ .AR.isDevice && !(0, ej2_base /* isNullOrUndefined */ .le)(dropElement)) {
                                var popupEle = dropElement.querySelector('.e-dropdown-popup.e-tbar-btn.e-control');
                                popupEle && (dropElement.parentNode.insertBefore(popupEle, dropElement.nextSibling), popupEle.style.removeProperty('position'), (0, ej2_base /* removeClass */ .IV)([
                                    popupEle
                                ], 'e-popup-modal')), (0, ej2_base /* detach */ .og)(dropElement), proxy.popupContainer = void 0;
                            }
                        }
                    });
                    return dropDown.isStringTemplate = !0, dropDown.createElement = proxy.parent.createElement, args.element.setAttribute('role', 'button'), dropDown.appendTo(args.element), document.getElementById(dropDown.element.id + '-popup').setAttribute('aria-owns', this.parent.getID()), dropDown.element.insertBefore(content, dropDown.element.querySelector('.e-caret')), args.element.tabIndex = -1, dropDown.element.removeAttribute('type'), dropDown.element.onmousedown = function() {
                        proxy.parent.notify(constant /* selectionSave */ .gA, {});
                    }, dropDown.element.onkeydown = function() {
                        proxy.parent.notify(constant /* selectionSave */ .gA, {});
                    }, dropDown;
                }, ToolbarRenderer.prototype.pickerRefresh = function(dropDownArgs) {
                    if ('Picker' === this.parent.backgroundColor.mode) {
                        var popupElem = dropDownArgs.element.parentElement;
                        popupElem.style.width = (popupElem.offsetWidth + 5).toString() + 'px', (0, ej2_base /* getInstance */ .s8)(popupElem, popup_popup /* Popup */ .GI).refreshPosition(popupElem), popupElem.style.width = (popupElem.offsetWidth - 5).toString() + 'px';
                    }
                }, ToolbarRenderer.prototype.popupModal = function(element) {
                    var popupInst = (0, ej2_base /* getInstance */ .s8)(element, popup_popup /* Popup */ .GI);
                    popupInst.relateTo = document.body, popupInst.position = {
                        X: 0,
                        Y: 0
                    }, popupInst.targetType = 'container', popupInst.collision = {
                        X: 'fit',
                        Y: 'fit'
                    }, popupInst.offsetY = 4, popupInst.dataBind(), this.setIsModel(element);
                }, ToolbarRenderer.prototype.setColorPickerContentWidth = function(colorPicker) {
                    var colorPickerContent = colorPicker.element.nextSibling;
                    if ('0px' === colorPickerContent.style.width) {
                        colorPickerContent.style.width = '';
                        var borderWidth = parseInt(getComputedStyle(colorPickerContent).borderBottomWidth, 10);
                        colorPickerContent.style.width = (0, ej2_base /* formatUnit */ .Ac)(colorPickerContent.children[0].offsetWidth + borderWidth + borderWidth);
                    }
                }, /**
     * renderColorPicker method
     *
     * @param {IColorPickerModel} args - specifies the arguments
     * @param {string} item - specifies the string values
     * @returns {void}
     * @hidden

     */ ToolbarRenderer.prototype.renderColorPicker = function(args, item) {
                    var _this = this, proxy = this, colorPicker = new ColorPicker({
                        enablePersistence: this.parent.enablePersistence,
                        enableRtl: this.parent.enableRtl,
                        inline: !0,
                        value: '#fff',
                        created: function() {
                            var value = 'backgroundcolor' === item ? proxy.parent.backgroundColor.default : proxy.parent.fontColor.default;
                            colorPicker.setProperties({
                                value: value
                            });
                        },
                        mode: 'backgroundcolor' === item ? proxy.parent.backgroundColor.mode : proxy.parent.fontColor.mode,
                        modeSwitcher: 'backgroundcolor' === item ? proxy.parent.backgroundColor.modeSwitcher : proxy.parent.fontColor.modeSwitcher,
                        beforeTileRender: function(args) {
                            if (args.element.classList.add(classes /* CLS_COLOR_PALETTE */ .kR), args.element.classList.add(classes /* CLS_CUSTOM_TILE */ .rG), !(0, ej2_base /* isNullOrUndefined */ .le)(_this.parent.cssClass)) for(var allClassName = _this.parent.cssClass.split(' '), i = 0; i < allClassName.length; i++)'' !== allClassName[i].trim() && args.element.classList.add(allClassName[i]);
                            '' === args.value && args.element.classList.add(classes /* CLS_NOCOLOR_ITEM */ .Vb);
                        },
                        change: function(colorPickerArgs) {
                            var colorpickerValue = colorPickerArgs.currentValue.rgba;
                            colorPickerArgs.item = {
                                command: args.command,
                                subCommand: args.subCommand,
                                value: colorpickerValue
                            }, proxy.parent.notify(constant /* selectionRestore */ .Wz, {}), proxy.currentElement.querySelector('.' + classes /* CLS_RTE_ELEMENTS */ .i7).style.borderBottomColor = colorpickerValue;
                            var range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument()), closestElement = (0, ej2_base /* closest */ .oq)(range.startContainer.parentNode, 'table');
                            ('TD' === range.startContainer.nodeName || 'TH' === range.startContainer.nodeName || 'BODY' === range.startContainer.nodeName || (0, ej2_base /* closest */ .oq)(range.startContainer.parentNode, 'td,th')) && range.collapsed && 'BackgroundColor' === args.subCommand && (0, ej2_base /* closest */ .oq)(closestElement, '.' + classes /* CLS_RTE */ .$E) ? proxy.parent.notify(constant /* tableColorPickerChanged */ .Yo, colorPickerArgs) : proxy.parent.notify(constant /* colorPickerChanged */ .Kz, colorPickerArgs), proxy.currentDropdown.toggle();
                        },
                        beforeModeSwitch: function(args) {
                            '' === colorPicker.value && colorPicker.setProperties({
                                value: 'Picker' === args.mode ? '#008000ff' : ''
                            }, !0), colorPicker.showButtons = 'Palette' !== args.mode;
                        }
                    });
                    return colorPicker.isStringTemplate = !0, colorPicker.columns = 'backgroundcolor' === item ? this.parent.backgroundColor.columns : this.parent.fontColor.columns, colorPicker.presetColors = 'backgroundcolor' === item ? this.parent.backgroundColor.colorCode : this.parent.fontColor.colorCode, colorPicker.cssClass = ('backgroundcolor' === item ? classes /* CLS_BACKGROUND_COLOR_PICKER */ .oO : classes /* CLS_FONT_COLOR_PICKER */ .o7) + ' ' + args.cssClass, colorPicker.createElement = this.parent.createElement, colorPicker.appendTo(document.getElementById(args.target)), colorPicker;
                }, /**
     * The function is used to render Rich Text Editor toolbar
     *
     * @returns {void}
     * @hidden

     */ ToolbarRenderer.prototype.renderPanel = function() {
                    this.getPanel().classList.add(classes /* CLS_TOOLBAR */ .zE);
                }, /**
     * Get the toolbar element of RichTextEditor
     *
     * @returns {Element} - specifies the element.
     * @hidden

     */ ToolbarRenderer.prototype.getPanel = function() {
                    return this.toolbarPanel;
                }, /**
     * Set the toolbar element of RichTextEditor
     *
     * @returns {void}
     * @param  {Element} panel - specifies the element.
     * @hidden

     */ ToolbarRenderer.prototype.setPanel = function(panel) {
                    this.toolbarPanel = panel;
                }, ToolbarRenderer;
            }(), BaseToolbar = /** @class */ function() {
                function BaseToolbar(parent, serviceLocator) {
                    this.tools = {}, this.parent = parent, this.locator = serviceLocator, this.renderFactory = this.locator.getService('rendererFactory'), this.addEventListener(), this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0 ? (0, ej2_base /* extend */ .l7)(this.tools, items /* tools */ .rj, (0, util /* toObjectLowerCase */ .E)(this.parent.toolbarSettings.itemConfigs), !0) : this.tools = items /* tools */ .rj;
                }
                return BaseToolbar.prototype.addEventListener = function() {
                    this.parent.on(constant /* rtlMode */ .vN, this.setRtl, this), this.parent.on(constant /* bindCssClass */ ._8, this.setCssClass, this), this.parent.on(constant /* destroy */ .ob, this.removeEventListener, this);
                }, BaseToolbar.prototype.removeEventListener = function() {
                    this.parent.off(constant /* rtlMode */ .vN, this.setRtl), this.parent.off(constant /* bindCssClass */ ._8, this.setCssClass), this.parent.off(constant /* destroy */ .ob, this.removeEventListener);
                }, BaseToolbar.prototype.setCssClass = function(e) {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.toolbarObj) || ((0, ej2_base /* isNullOrUndefined */ .le)(e.oldCssClass) ? this.toolbarObj.setProperties({
                        cssClass: (this.toolbarObj.cssClass + ' ' + e.cssClass).trim()
                    }) : this.toolbarObj.setProperties({
                        cssClass: (this.toolbarObj.cssClass.replace(e.oldCssClass, '').trim() + ' ' + e.cssClass).trim()
                    }));
                }, BaseToolbar.prototype.setRtl = function(args) {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.toolbarObj) || this.toolbarObj.setProperties({
                        enableRtl: args.enableRtl
                    });
                }, BaseToolbar.prototype.getClass = function(item) {
                    var classes;
                    switch(item){
                        case 'fontsize':
                            classes = 'e-rte-inline-size-template';
                            break;
                        case 'fontcolor':
                        case 'backgroundcolor':
                            classes = 'e-rte-inline-color-template';
                            break;
                        default:
                            classes = 'e-rte-inline-template';
                    }
                    return classes;
                }, BaseToolbar.prototype.getTemplateObject = function(itemStr, container) {
                    var tagName;
                    switch(itemStr){
                        case 'fontcolor':
                        case 'backgroundcolor':
                        case 'numberformatlist':
                        case 'bulletformatlist':
                            tagName = 'span';
                            break;
                        default:
                            tagName = 'button';
                    }
                    return {
                        command: this.tools[itemStr.toLocaleLowerCase()].command,
                        subCommand: this.tools[itemStr.toLocaleLowerCase()].subCommand,
                        template: this.parent.createElement(tagName, {
                            id: this.parent.getID() + '_' + container + '_' + this.tools[itemStr.toLocaleLowerCase()].id
                        }).outerHTML,
                        cssClass: this.parent.inlineMode.enable ? this.getClass(itemStr) : '',
                        tooltipText: (0, util /* getTooltipText */ .rX)(itemStr, this.locator)
                    };
                }, /**
     * getObject method
     *
     * @param {string} item - specifies the string value
     * @param {string} container - specifies the value of string
     * @returns {IToolbarItemModel} - returns the model element
     * @hidden

     */ BaseToolbar.prototype.getObject = function(item, container) {
                    var itemStr = item.toLowerCase();
                    if (-1 !== items /* templateItems.indexOf */ .rS.indexOf(itemStr)) return this.getTemplateObject(itemStr, container);
                    switch(itemStr){
                        case '|':
                            return {
                                type: 'Separator'
                            };
                        case '-':
                            return {
                                type: 'Separator',
                                cssClass: classes /* CLS_HR_SEPARATOR */ .in
                            };
                        default:
                            return {
                                id: this.parent.getID() + '_' + container + '_' + this.tools[itemStr.toLocaleLowerCase()].id,
                                prefixIcon: this.tools[itemStr.toLocaleLowerCase()].icon,
                                tooltipText: (0, util /* getTooltipText */ .rX)(itemStr, this.locator),
                                command: this.tools[itemStr.toLocaleLowerCase()].command,
                                subCommand: this.tools[itemStr.toLocaleLowerCase()].subCommand
                            };
                    }
                }, /**
     * @param {string} tbItems - specifies the string value
     * @param {string} container - specifies the container value
     * @returns {ItemModel} - retunrs the model element
     * @hidden

     */ BaseToolbar.prototype.getItems = function(tbItems, container) {
                    var _this = this;
                    if (this.parent.toolbarSettings.items.length < 1) return [];
                    for(var items = [], _loop_1 = function(item) {
                        if ('string' == typeof item) items.push(this_1.getObject(item, container));
                        else {
                            if (!(0, ej2_base /* isNullOrUndefined */ .le)(item.click)) {
                                var callback_1 = item.click;
                                item.click = function() {
                                    item.undo && 0 === _this.parent.formatter.getUndoRedoStack().length && _this.parent.formatter.saveData(), callback_1.call(_this), _this.parent.formatter.getUndoRedoStack()[_this.parent.formatter.getUndoRedoStack().length - 1].text.trim() !== _this.parent.inputElement.innerHTML.trim() && item.undo && _this.parent.formatter.saveData();
                                };
                            }
                            items.push(item);
                        }
                    }, this_1 = this, _i = 0; _i < tbItems.length; _i++)_loop_1(tbItems[_i]);
                    return items;
                }, BaseToolbar.prototype.getToolbarOptions = function(args) {
                    return {
                        target: args.target,
                        rteToolbarObj: this,
                        items: this.getItems(args.items, args.container),
                        overflowMode: args.mode,
                        enablePersistence: this.parent.enablePersistence,
                        enableRtl: this.parent.enableRtl,
                        cssClass: args.cssClass
                    };
                }, /**
     * render method
     *
     * @param {IToolbarRenderOptions} args - specifies the toolbar options
     * @returns {void}
     * @hidden

     */ BaseToolbar.prototype.render = function(args) {
                    this.toolbarRenderer = this.renderFactory.getRenderer(base_enum /* RenderType.Toolbar */ .y2.Toolbar), this.toolbarRenderer.renderToolbar(this.getToolbarOptions(args));
                }, BaseToolbar;
            }(), DropDownButtons = /** @class */ function() {
                function DropDownButtons(parent, serviceLocator) {
                    this.parent = parent, this.locator = serviceLocator, this.renderFactory = this.locator.getService('rendererFactory'), this.addEventListener();
                }
                return DropDownButtons.prototype.initializeInstance = function() {
                    this.toolbarRenderer = this.renderFactory.getRenderer(base_enum /* RenderType.Toolbar */ .y2.Toolbar);
                }, DropDownButtons.prototype.beforeRender = function(args) {
                    var item = args.item;
                    item.cssClass && (0, ej2_base /* addClass */ .cn)([
                        args.element
                    ], item.cssClass), ('Alignments' === item.command || 'JustifyLeft' === item.subCommand || 'JustifyRight' === item.subCommand || 'JustifyCenter' === item.subCommand) && args.element.setAttribute('title', (0, util /* getTooltipText */ .rX)(item.subCommand.toLocaleLowerCase(), this.locator));
                }, DropDownButtons.prototype.dropdownContent = function(width, type, content) {
                    return '<span style="display: inline-flex;width:' + ('quick' === type ? 'auto' : width) + '" ><span class="e-rte-dropdown-btn-text">' + content + '</span></span>';
                }, /**
     * renderDropDowns method
     *
     * @param {IDropDownRenderArgs} args - specifies the arguments
     * @returns {void}
     * @hidden

     */ DropDownButtons.prototype.renderDropDowns = function(args) {
                    var _this = this;
                    this.initializeInstance();
                    var type = args.containerType, tbElement = args.container;
                    items /* templateItems.forEach */ .rS.forEach(function(item) {
                        var targetElement = void 0;
                        if (-1 !== (0, util /* getIndex */ .rw)(item, args.items)) switch(item){
                            case 'numberformatlist':
                                if (targetElement = (0, ej2_base /* select */ .Ys)('#' + _this.parent.getID() + '_' + type + '_NumberFormatList', tbElement), (0, ej2_base /* isNullOrUndefined */ .le)(targetElement) || targetElement.classList.contains(classes /* CLS_DROPDOWN_BTN */ .zD)) return;
                                var formatOLItem = _this.parent.numberFormatList.types.slice();
                                formatOLItem.forEach(function(item) {
                                    Object.defineProperties(item, {
                                        command: {
                                            value: 'Lists',
                                            enumerable: !0
                                        },
                                        subCommand: {
                                            value: 'NumberFormatList',
                                            enumerable: !0
                                        }
                                    });
                                }), _this.numberFormatListDropDown = _this.toolbarRenderer.renderListDropDown({
                                    cssClass: "e-order-list " + classes /* CLS_RTE_ELEMENTS */ .i7 + ' ' + classes /* CLS_ICONS */ .Cd,
                                    itemName: 'NumberFormatList',
                                    items: formatOLItem,
                                    element: targetElement
                                });
                                break;
                            case 'bulletformatlist':
                                if (targetElement = (0, ej2_base /* select */ .Ys)('#' + _this.parent.getID() + '_' + type + '_BulletFormatList', tbElement), (0, ej2_base /* isNullOrUndefined */ .le)(targetElement) || targetElement.classList.contains(classes /* CLS_DROPDOWN_BTN */ .zD)) return;
                                var formatULItem = _this.parent.bulletFormatList.types.slice();
                                formatULItem.forEach(function(item) {
                                    Object.defineProperties(item, {
                                        command: {
                                            value: 'Lists',
                                            enumerable: !0
                                        },
                                        subCommand: {
                                            value: 'BulletFormatList',
                                            enumerable: !0
                                        }
                                    });
                                }), _this.bulletFormatListDropDown = _this.toolbarRenderer.renderListDropDown({
                                    cssClass: "e-unorder-list " + classes /* CLS_RTE_ELEMENTS */ .i7 + ' ' + classes /* CLS_ICONS */ .Cd,
                                    itemName: 'BulletFormatList',
                                    items: formatULItem,
                                    element: targetElement
                                });
                                break;
                            case 'formats':
                                if (targetElement = (0, ej2_base /* select */ .Ys)('#' + _this.parent.getID() + '_' + type + '_Formats', tbElement), (0, ej2_base /* isNullOrUndefined */ .le)(targetElement) || targetElement.classList.contains(classes /* CLS_DROPDOWN_BTN */ .zD)) return;
                                var formatItem = _this.parent.format.types.slice();
                                formatItem.forEach(function(item) {
                                    Object.defineProperties(item, {
                                        command: {
                                            value: 'Formats',
                                            enumerable: !0
                                        },
                                        subCommand: {
                                            value: item.value,
                                            enumerable: !0
                                        }
                                    });
                                });
                                var formatContent = (0, ej2_base /* isNullOrUndefined */ .le)(_this.parent.format.default) ? formatItem[0].text : _this.parent.format.default;
                                _this.formatDropDown = _this.toolbarRenderer.renderDropDownButton({
                                    iconCss: 'quick' === type ? 'e-formats e-icons' : '',
                                    content: _this.dropdownContent(_this.parent.format.width, type, 'quick' === type ? '' : (0, util /* getDropDownValue */ .Iw)(formatItem, formatContent, 'text', 'text')),
                                    cssClass: classes /* CLS_DROPDOWN_POPUP */ .LK + ' ' + classes /* CLS_DROPDOWN_ITEMS */ .br + ' ' + classes /* CLS_FORMATS_TB_BTN */ .dc,
                                    itemName: 'Formats',
                                    items: formatItem,
                                    element: targetElement
                                });
                                break;
                            case 'fontname':
                                if (targetElement = (0, ej2_base /* select */ .Ys)('#' + _this.parent.getID() + '_' + type + '_FontName', tbElement), (0, ej2_base /* isNullOrUndefined */ .le)(targetElement) || targetElement.classList.contains(classes /* CLS_DROPDOWN_BTN */ .zD)) return;
                                var fontItem = _this.parent.fontFamily.items.slice();
                                fontItem.forEach(function(item) {
                                    Object.defineProperties(item, {
                                        command: {
                                            value: 'Font',
                                            enumerable: !0
                                        },
                                        subCommand: {
                                            value: 'FontName',
                                            enumerable: !0
                                        }
                                    });
                                });
                                var fontNameContent = (0, ej2_base /* isNullOrUndefined */ .le)(_this.parent.fontFamily.default) ? fontItem[0].text : _this.parent.fontFamily.default;
                                _this.fontNameDropDown = _this.toolbarRenderer.renderDropDownButton({
                                    iconCss: 'quick' === type ? 'e-font-name e-icons' : '',
                                    content: _this.dropdownContent(_this.parent.fontFamily.width, type, 'quick' === type ? '' : (0, util /* getDropDownValue */ .Iw)(fontItem, fontNameContent, 'text', 'text')),
                                    cssClass: classes /* CLS_DROPDOWN_POPUP */ .LK + ' ' + classes /* CLS_DROPDOWN_ITEMS */ .br + ' ' + classes /* CLS_FONT_NAME_TB_BTN */ .D6,
                                    itemName: 'FontName',
                                    items: fontItem,
                                    element: targetElement
                                }), (0, ej2_base /* isNullOrUndefined */ .le)(_this.parent.fontFamily.default) || (_this.getEditNode().style.fontFamily = _this.parent.fontFamily.default);
                                break;
                            case 'fontsize':
                                if (targetElement = (0, ej2_base /* select */ .Ys)('#' + _this.parent.getID() + '_' + type + '_FontSize', tbElement), (0, ej2_base /* isNullOrUndefined */ .le)(targetElement) || targetElement.classList.contains(classes /* CLS_DROPDOWN_BTN */ .zD)) return;
                                var fontsize = _this.parent.fontSize.items.slice();
                                fontsize.forEach(function(item) {
                                    Object.defineProperties(item, {
                                        command: {
                                            value: 'Font',
                                            enumerable: !0
                                        },
                                        subCommand: {
                                            value: 'FontSize',
                                            enumerable: !0
                                        }
                                    });
                                });
                                var fontSizeContent = (0, ej2_base /* isNullOrUndefined */ .le)(_this.parent.fontSize.default) ? fontsize[1].text : _this.parent.fontSize.default;
                                _this.fontSizeDropDown = _this.toolbarRenderer.renderDropDownButton({
                                    content: _this.dropdownContent(_this.parent.fontSize.width, type, (0, util /* getFormattedFontSize */ .R1)((0, util /* getDropDownValue */ .Iw)(fontsize, fontSizeContent.replace(/\s/g, ''), 'value', 'text'))),
                                    cssClass: classes /* CLS_DROPDOWN_POPUP */ .LK + ' ' + classes /* CLS_DROPDOWN_ITEMS */ .br + ' ' + classes /* CLS_FONT_SIZE_TB_BTN */ .Jh,
                                    itemName: 'FontSize',
                                    items: fontsize,
                                    element: targetElement
                                }), (0, ej2_base /* isNullOrUndefined */ .le)(_this.parent.fontSize.default) || (_this.getEditNode().style.fontSize = _this.parent.fontSize.default);
                                break;
                            case 'alignments':
                                if (targetElement = (0, ej2_base /* select */ .Ys)('#' + _this.parent.getID() + '_' + type + '_Alignments', tbElement), (0, ej2_base /* isNullOrUndefined */ .le)(targetElement) || targetElement.classList.contains(classes /* CLS_DROPDOWN_BTN */ .zD)) return;
                                _this.alignDropDown = _this.toolbarRenderer.renderDropDownButton({
                                    iconCss: 'e-justify-left e-icons',
                                    cssClass: classes /* CLS_DROPDOWN_POPUP */ .LK + ' ' + classes /* CLS_DROPDOWN_ITEMS */ .br + ' ' + classes /* CLS_ALIGN_TB_BTN */ .Cb,
                                    itemName: 'Alignments',
                                    items: items /* alignmentItems */ .Fg,
                                    element: targetElement
                                });
                                break;
                            case 'align':
                                _this.imageAlignmentDropDown(type, tbElement, targetElement);
                                break;
                            case 'display':
                                _this.imageDisplayDropDown(type, tbElement, targetElement);
                                break;
                            case 'tablerows':
                                _this.rowDropDown(type, tbElement, targetElement);
                                break;
                            case 'tablecolumns':
                                _this.columnDropDown(type, tbElement, targetElement);
                                break;
                            case 'tablecell':
                                _this.cellDropDown(type, tbElement, targetElement);
                                break;
                            case 'tablecellverticalalign':
                                _this.verticalAlignDropDown(type, tbElement, targetElement);
                                break;
                            case 'styles':
                                _this.tableStylesDropDown(type, tbElement, targetElement);
                        }
                    }), this.parent.inlineMode.enable && this.setCssClass({
                        cssClass: this.parent.cssClass
                    });
                }, DropDownButtons.prototype.getUpdateItems = function(items, value) {
                    var dropDownItems = items.slice();
                    return dropDownItems.forEach(function(item) {
                        Object.defineProperties(item, {
                            command: {
                                value: 'Format' === value ? 'Formats' : 'Font',
                                enumerable: !0
                            },
                            subCommand: {
                                value: 'Format' === value ? item.value : value,
                                enumerable: !0
                            }
                        });
                    }), dropDownItems;
                }, DropDownButtons.prototype.onPropertyChanged = function(model) {
                    for(var type, content, newProp = model.newProp, _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++)switch(_a[_i]){
                        case 'fontFamily':
                            if (this.fontNameDropDown) for(var _b = 0, _c = Object.keys(newProp.fontFamily); _b < _c.length; _b++)switch(_c[_b]){
                                case 'default':
                                case 'width':
                                    var fontItems = this.fontNameDropDown.items;
                                    type = (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(this.fontNameDropDown.element, '.' + classes /* CLS_QUICK_TB */ .gr)) ? 'toolbar' : 'quick';
                                    var fontNameContent = (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.fontFamily.default) ? fontItems[0].text : this.parent.fontFamily.default;
                                    content = this.dropdownContent(this.parent.fontFamily.width, type, 'quick' === type ? '' : (0, util /* getDropDownValue */ .Iw)(fontItems, fontNameContent, 'text', 'text')), this.fontNameDropDown.setProperties({
                                        content: content
                                    }), (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.fontFamily.default) ? this.getEditNode().style.removeProperty('font-family') : this.getEditNode().style.fontFamily = this.parent.fontFamily.default;
                                    break;
                                case 'items':
                                    this.fontNameDropDown.setProperties({
                                        items: this.getUpdateItems(newProp.fontFamily.items, 'FontName')
                                    });
                            }
                            break;
                        case 'fontSize':
                            if (this.fontSizeDropDown) for(var _d = 0, _e = Object.keys(newProp.fontSize); _d < _e.length; _d++)switch(_e[_d]){
                                case 'default':
                                case 'width':
                                    var fontsize = this.fontSizeDropDown.items;
                                    type = (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(this.fontSizeDropDown.element, '.' + classes /* CLS_QUICK_TB */ .gr)) ? 'toolbar' : 'quick';
                                    var fontSizeContent = (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.fontSize.default) ? fontsize[1].text : this.parent.fontSize.default;
                                    content = this.dropdownContent(this.parent.fontSize.width, type, (0, util /* getFormattedFontSize */ .R1)((0, util /* getDropDownValue */ .Iw)(fontsize, fontSizeContent.replace(/\s/g, ''), 'value', 'text'))), this.fontSizeDropDown.setProperties({
                                        content: content
                                    }), (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.fontSize.default) ? this.getEditNode().style.removeProperty('font-size') : this.getEditNode().style.fontSize = this.parent.fontSize.default;
                                    break;
                                case 'items':
                                    this.fontSizeDropDown.setProperties({
                                        items: this.getUpdateItems(newProp.fontSize.items, 'FontSize')
                                    });
                            }
                            break;
                        case 'format':
                            if (this.formatDropDown) for(var _f = 0, _g = Object.keys(newProp.format); _f < _g.length; _f++)switch(_g[_f]){
                                case 'default':
                                case 'width':
                                    var formatItems = this.formatDropDown.items;
                                    type = (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(this.formatDropDown.element, '.' + classes /* CLS_QUICK_TB */ .gr)) ? 'toolbar' : 'quick';
                                    var formatContent = (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.format.default) ? formatItems[0].text : this.parent.format.default;
                                    content = this.dropdownContent(this.parent.format.width, type, 'quick' === type ? '' : (0, util /* getDropDownValue */ .Iw)(formatItems, formatContent, 'text', 'text')), this.formatDropDown.setProperties({
                                        content: content
                                    });
                                    break;
                                case 'types':
                                    this.formatDropDown.setProperties({
                                        items: this.getUpdateItems(newProp.format.types, 'Format')
                                    });
                            }
                    }
                }, DropDownButtons.prototype.getEditNode = function() {
                    return this.parent.contentModule.getEditPanel();
                }, DropDownButtons.prototype.rowDropDown = function(type, tbElement, targetElement) {
                    (targetElement = (0, ej2_base /* select */ .Ys)('#' + this.parent.getID() + '_' + type + '_TableRows', tbElement)).classList.contains(classes /* CLS_DROPDOWN_BTN */ .zD) || (this.tableRowsDropDown = this.toolbarRenderer.renderDropDownButton({
                        iconCss: 'e-table-rows e-icons',
                        cssClass: classes /* CLS_DROPDOWN_POPUP */ .LK + ' ' + classes /* CLS_DROPDOWN_ITEMS */ .br + ' ' + classes /* CLS_QUICK_DROPDOWN */ .uO,
                        itemName: 'TableRows',
                        items: items /* tableRowsItems */ .D1,
                        element: targetElement
                    }));
                }, DropDownButtons.prototype.columnDropDown = function(type, tbElement, targetElement) {
                    (targetElement = (0, ej2_base /* select */ .Ys)('#' + this.parent.getID() + '_' + type + '_TableColumns', tbElement)).classList.contains(classes /* CLS_DROPDOWN_BTN */ .zD) || (this.tableColumnsDropDown = this.toolbarRenderer.renderDropDownButton({
                        iconCss: 'e-table-columns e-icons',
                        cssClass: classes /* CLS_DROPDOWN_POPUP */ .LK + ' ' + classes /* CLS_DROPDOWN_ITEMS */ .br + ' ' + classes /* CLS_QUICK_DROPDOWN */ .uO,
                        itemName: 'TableColumns',
                        items: items /* tableColumnsItems */ .AW,
                        element: targetElement
                    }));
                }, DropDownButtons.prototype.cellDropDown = function(type, tbElement, targetElement) {
                    (targetElement = (0, ej2_base /* select */ .Ys)('#' + this.parent.getID() + '_' + type + '_TableCell', tbElement)).classList.contains(classes /* CLS_DROPDOWN_BTN */ .zD) || (this.tableRowsDropDown = this.toolbarRenderer.renderDropDownButton({
                        iconCss: 'e-table-cell e-icons',
                        cssClass: classes /* CLS_DROPDOWN_POPUP */ .LK + ' ' + classes /* CLS_DROPDOWN_ITEMS */ .br + ' ' + classes /* CLS_QUICK_DROPDOWN */ .uO,
                        itemName: 'TableCell',
                        items: items /* tableCellItems */ .Sz,
                        element: targetElement
                    }));
                }, DropDownButtons.prototype.verticalAlignDropDown = function(type, tbElement, targetElement) {
                    (targetElement = (0, ej2_base /* select */ .Ys)('#' + this.parent.getID() + '_' + type + '_TableCellVerticalAlign', tbElement)).classList.contains(classes /* CLS_DROPDOWN_BTN */ .zD) || (this.tableCellVerticalAlignDropDown = this.toolbarRenderer.renderDropDownButton({
                        iconCss: 'e-table-cell-ver-align e-icons',
                        cssClass: classes /* CLS_DROPDOWN_POPUP */ .LK + ' ' + classes /* CLS_DROPDOWN_ITEMS */ .br + ' ' + classes /* CLS_QUICK_DROPDOWN */ .uO,
                        itemName: 'TableCellVerticalAlign',
                        items: items /* TableCellVerticalAlignItems */ .Tg,
                        element: targetElement
                    }));
                }, DropDownButtons.prototype.imageDisplayDropDown = function(type, tbElement, targetElement) {
                    (targetElement = (0, ej2_base /* select */ .Ys)('#' + this.parent.getID() + '_' + type + '_Display', tbElement)).classList.contains(classes /* CLS_DROPDOWN_BTN */ .zD) || (this.displayDropDown = this.toolbarRenderer.renderDropDownButton({
                        iconCss: 'e-display e-icons',
                        cssClass: classes /* CLS_DROPDOWN_POPUP */ .LK + ' ' + classes /* CLS_DROPDOWN_ITEMS */ .br + ' ' + classes /* CLS_QUICK_DROPDOWN */ .uO,
                        itemName: 'Display',
                        items: items /* imageDisplayItems */ .NO,
                        element: targetElement
                    }));
                }, DropDownButtons.prototype.imageAlignmentDropDown = function(type, tbElement, targetElement) {
                    (targetElement = (0, ej2_base /* select */ .Ys)('#' + this.parent.getID() + '_' + type + '_Align', tbElement)).classList.contains(classes /* CLS_DROPDOWN_BTN */ .zD) || (this.imageAlignDropDown = this.toolbarRenderer.renderDropDownButton({
                        iconCss: 'e-justify-left e-icons',
                        cssClass: classes /* CLS_DROPDOWN_POPUP */ .LK + ' ' + classes /* CLS_DROPDOWN_ICONS */ .yH + ' ' + classes /* CLS_QUICK_DROPDOWN */ .uO,
                        itemName: 'Align',
                        items: items /* imageAlignItems */ .ry,
                        element: targetElement
                    }));
                }, DropDownButtons.prototype.tableStylesDropDown = function(type, tbElement, targetElement) {
                    (targetElement = (0, ej2_base /* select */ .Ys)('#' + this.parent.getID() + '_' + type + '_Styles', tbElement)).classList.contains(classes /* CLS_DROPDOWN_BTN */ .zD) || (this.imageAlignDropDown = this.toolbarRenderer.renderDropDownButton({
                        iconCss: 'e-style e-icons',
                        cssClass: classes /* CLS_DROPDOWN_POPUP */ .LK + ' ' + classes /* CLS_DROPDOWN_ICONS */ .yH + ' ' + classes /* CLS_QUICK_DROPDOWN */ .uO,
                        itemName: 'Styles',
                        items: this.parent.tableSettings.styles,
                        element: targetElement
                    }));
                }, DropDownButtons.prototype.removeDropDownClasses = function(target) {
                    (0, ej2_base /* removeClass */ .IV)([
                        target
                    ], [
                        classes /* CLS_DROPDOWN_BTN */ .zD,
                        classes /* CLS_DROPDOWN_POPUP */ .LK,
                        classes /* CLS_DROPDOWN_ICONS */ .yH,
                        classes /* CLS_DROPDOWN_ITEMS */ .br
                    ]);
                }, /**
     * destroyDropDowns method
     *
     * @returns {void}
     * @hidden

     */ DropDownButtons.prototype.destroyDropDowns = function() {
                    this.formatDropDown && (this.removeDropDownClasses(this.formatDropDown.element), this.formatDropDown.destroy()), this.fontNameDropDown && (this.removeDropDownClasses(this.fontNameDropDown.element), this.fontNameDropDown.destroy()), this.fontSizeDropDown && (this.removeDropDownClasses(this.fontSizeDropDown.element), this.fontSizeDropDown.destroy()), this.alignDropDown && (this.removeDropDownClasses(this.alignDropDown.element), this.alignDropDown.destroy()), this.imageAlignDropDown && (this.removeDropDownClasses(this.imageAlignDropDown.element), this.imageAlignDropDown.destroy()), this.displayDropDown && (this.removeDropDownClasses(this.displayDropDown.element), this.displayDropDown.destroy()), this.tableRowsDropDown && (this.removeDropDownClasses(this.tableRowsDropDown.element), this.tableRowsDropDown.destroy()), this.tableColumnsDropDown && (this.removeDropDownClasses(this.tableColumnsDropDown.element), this.tableColumnsDropDown.destroy()), this.tableCellVerticalAlignDropDown && (this.removeDropDownClasses(this.tableCellVerticalAlignDropDown.element), this.tableCellVerticalAlignDropDown.destroy()), this.numberFormatListDropDown && (this.removeDropDownClasses(this.numberFormatListDropDown.element), this.numberFormatListDropDown.destroy()), this.bulletFormatListDropDown && (this.removeDropDownClasses(this.bulletFormatListDropDown.element), this.bulletFormatListDropDown.destroy());
                }, DropDownButtons.prototype.setRtl = function(args) {
                    this.formatDropDown && this.formatDropDown.setProperties({
                        enableRtl: args.enableRtl
                    }), this.fontNameDropDown && this.fontNameDropDown.setProperties({
                        enableRtl: args.enableRtl
                    }), this.fontSizeDropDown && this.fontSizeDropDown.setProperties({
                        enableRtl: args.enableRtl
                    }), this.alignDropDown && this.alignDropDown.setProperties({
                        enableRtl: args.enableRtl
                    }), this.imageAlignDropDown && this.imageAlignDropDown.setProperties({
                        enableRtl: args.enableRtl
                    }), this.displayDropDown && this.displayDropDown.setProperties({
                        enableRtl: args.enableRtl
                    }), this.numberFormatListDropDown && this.numberFormatListDropDown.setProperties({
                        enableRtl: args.enableRtl
                    }), this.bulletFormatListDropDown && this.bulletFormatListDropDown.setProperties({
                        enableRtl: args.enableRtl
                    });
                }, DropDownButtons.prototype.updateCss = function(dropDownObj, e) {
                    dropDownObj && e.cssClass && ((0, ej2_base /* isNullOrUndefined */ .le)(e.oldCssClass) ? dropDownObj.setProperties({
                        cssClass: (dropDownObj.cssClass + ' ' + e.cssClass).trim()
                    }) : dropDownObj.setProperties({
                        cssClass: (dropDownObj.cssClass.replace(e.oldCssClass, '').trim() + ' ' + e.cssClass).trim()
                    }));
                }, DropDownButtons.prototype.setCssClass = function(e) {
                    for(var dropDownObj = [
                        this.formatDropDown,
                        this.fontNameDropDown,
                        this.fontSizeDropDown,
                        this.alignDropDown,
                        this.imageAlignDropDown,
                        this.displayDropDown,
                        this.numberFormatListDropDown,
                        this.bulletFormatListDropDown,
                        this.tableRowsDropDown,
                        this.tableColumnsDropDown,
                        this.tableCellVerticalAlignDropDown
                    ], i = 0; i < dropDownObj.length; i++)this.updateCss(dropDownObj[i], e);
                }, DropDownButtons.prototype.addEventListener = function() {
                    this.parent.isDestroyed || (this.parent.on(constant /* beforeDropDownItemRender */ .nd, this.beforeRender, this), this.parent.on(constant /* iframeMouseDown */ .a$, this.onIframeMouseDown, this), this.parent.on(constant /* rtlMode */ .vN, this.setRtl, this), this.parent.on(constant /* destroy */ .ob, this.removeEventListener, this), this.parent.on(constant /* modelChanged */ .CC, this.onPropertyChanged, this), this.parent.on(constant /* bindCssClass */ ._8, this.setCssClass, this));
                }, DropDownButtons.prototype.onIframeMouseDown = function() {
                    (0, util /* dispatchEvent */ .Nu)(document, 'mousedown');
                }, DropDownButtons.prototype.removeEventListener = function() {
                    this.parent.isDestroyed || (this.parent.off(constant /* iframeMouseDown */ .a$, this.onIframeMouseDown), this.parent.off(constant /* rtlMode */ .vN, this.setRtl), this.parent.off(constant /* beforeDropDownItemRender */ .nd, this.beforeRender), this.parent.off(constant /* destroy */ .ob, this.removeEventListener), this.parent.off(constant /* modelChanged */ .CC, this.onPropertyChanged), this.parent.off(constant /* bindCssClass */ ._8, this.setCssClass));
                }, DropDownButtons;
            }(), service_locator = __webpack_require__(9336), renderer_factory = __webpack_require__(2503), ToolbarAction = /** @class */ function() {
                function ToolbarAction(parent) {
                    this.parent = parent, this.addEventListener(), this.serviceLocator = new service_locator /* ServiceLocator */ .S, this.serviceLocator.register('rendererFactory', new renderer_factory /* RendererFactory */ .z);
                }
                return ToolbarAction.prototype.addEventListener = function() {
                    this.parent.on(constant /* toolbarClick */ .kE, this.toolbarClick, this), this.parent.on(constant /* dropDownSelect */ .s7, this.dropDownSelect, this), this.parent.on(constant /* colorPickerChanged */ .Kz, this.renderSelection, this), this.parent.on(constant /* destroy */ .ob, this.removeEventListener, this);
                }, ToolbarAction.prototype.toolbarClick = function(args) {
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(args.item)) {
                        if (!(0, ej2_base /* isNullOrUndefined */ .le)(args.item.controlParent)) {
                            // eslint-disable-next-line
                            var activeEle = args.item.controlParent.activeEle;
                            activeEle && (activeEle.tabIndex = -1);
                        }
                        ('NumberFormatList' === args.item.command || 'BulletFormatList' === args.item.command) && (args.originalEvent.target.classList.contains('e-order-list') || args.originalEvent.target.classList.contains('e-unorder-list')) && (args.item.command = 'Lists', args.item.subCommand = 'NumberFormatList' === args.item.subCommand ? 'OL' : 'UL'), 'Lists' === args.item.command && args.originalEvent.target.classList.contains('e-caret') && (args.originalEvent.target.parentElement.classList.contains('e-rte-bulletformatlist-dropdown') || args.originalEvent.target.parentElement.classList.contains('e-rte-numberformatlist-dropdown')) && (args.item.command = args.item.subCommand = null), this.parent.notify(constant /* htmlToolbarClick */ .s0, args), this.parent.notify(constant /* markdownToolbarClick */ .gk, args);
                    }
                }, ToolbarAction.prototype.dropDownSelect = function(e) {
                    if (this.parent.notify(constant /* selectionRestore */ .Wz, {}), !(document.body.contains(document.body.querySelector('.e-rte-quick-toolbar')) && e.item && ('Images' === e.item.command || 'Display' === e.item.command || 'Table' === e.item.command))) {
                        var value = e.item.controlParent && this.parent.quickToolbarModule && this.parent.quickToolbarModule.tableQTBar && this.parent.quickToolbarModule.tableQTBar.element.contains(e.item.controlParent.element) ? 'Table' : null;
                        if ('Lists' === e.item.command) {
                            var listItem = {
                                listStyle: e.item.value,
                                listImage: e.item.listImage,
                                type: e.item.subCommand
                            };
                            this.parent.formatter.process(this.parent, e, e.originalEvent, listItem);
                        } else this.parent.formatter.process(this.parent, e, e.originalEvent, value);
                    }
                    this.parent.notify(constant /* selectionSave */ .gA, {});
                }, ToolbarAction.prototype.renderSelection = function(args) {
                    this.parent.notify(constant /* selectionRestore */ .Wz, {}), this.parent.formatter.process(this.parent, args, args.originalEvent, null), this.parent.notify(constant /* selectionSave */ .gA, {});
                }, ToolbarAction.prototype.removeEventListener = function() {
                    this.parent.off(constant /* toolbarClick */ .kE, this.toolbarClick), this.parent.off(constant /* dropDownSelect */ .s7, this.dropDownSelect), this.parent.off(constant /* colorPickerChanged */ .Kz, this.renderSelection), this.parent.off(constant /* destroy */ .ob, this.removeEventListener);
                }, ToolbarAction;
            }(), toolbar_Toolbar = /** @class */ function() {
                function Toolbar(parent, serviceLocator) {
                    this.parent = parent, this.isToolbar = !1, this.locator = serviceLocator, this.isTransformChild = !1, this.renderFactory = this.locator.getService('rendererFactory'), items /* updateDropDownLocale */ .QP(this.parent), (0, util /* updateDropDownFontFormatLocale */ .AV)(this.parent), this.renderFactory.addRenderer(base_enum /* RenderType.Toolbar */ .y2.Toolbar, new ToolbarRenderer(this.parent)), this.toolbarRenderer = this.renderFactory.getRenderer(base_enum /* RenderType.Toolbar */ .y2.Toolbar), this.baseToolbar = new BaseToolbar(this.parent, this.locator), this.addEventListener(), this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0 ? (0, ej2_base /* extend */ .l7)(this.tools, items /* tools */ .rj, (0, util /* toObjectLowerCase */ .E)(this.parent.toolbarSettings.itemConfigs), !0) : this.tools = items /* tools */ .rj;
                }
                return Toolbar.prototype.initializeInstance = function() {
                    this.contentRenderer = this.renderFactory.getRenderer(base_enum /* RenderType.Content */ .y2.Content), this.editableElement = this.contentRenderer.getEditPanel(), this.editPanel = this.contentRenderer.getPanel();
                }, Toolbar.prototype.toolbarBindEvent = function() {
                    this.parent.inlineMode.enable || (this.keyBoardModule = new ej2_base /* KeyboardEvents */ .nv(this.getToolbarElement(), {
                        keyAction: this.toolBarKeyDown.bind(this),
                        keyConfigs: this.parent.formatter.keyConfig,
                        eventName: 'keydown'
                    }));
                }, Toolbar.prototype.toolBarKeyDown = function(e) {
                    'escape' === e.action && this.parent.contentModule.getEditPanel().focus();
                }, Toolbar.prototype.createToolbarElement = function() {
                    this.tbElement = this.parent.createElement('div', {
                        id: this.parent.getID() + '_toolbar'
                    }), !ej2_base /* Browser.isDevice */ .AR.isDevice && this.parent.inlineMode.enable && (0, util /* isIDevice */ .FA)() || (this.parent.toolbarSettings.enableFloating && !this.parent.inlineMode.enable ? (this.tbWrapper = this.parent.createElement('div', {
                        id: this.parent.getID() + '_toolbar_wrapper',
                        innerHTML: this.tbElement.outerHTML,
                        className: classes /* CLS_TB_WRAP */ .Rj
                    }), this.tbElement = this.tbWrapper.firstElementChild, this.parent.element.insertBefore(this.tbWrapper, this.editPanel)) : this.parent.element.insertBefore(this.tbElement, this.editPanel));
                }, Toolbar.prototype.getToolbarMode = function() {
                    var tbMode;
                    switch(this.parent.toolbarSettings.type){
                        case base_enum /* ToolbarType.Expand */ .Bv.Expand:
                            tbMode = 'Extended';
                            break;
                        case base_enum /* ToolbarType.Scrollable */ .Bv.Scrollable:
                            tbMode = 'Scrollable';
                            break;
                        default:
                            tbMode = 'MultiRow';
                    }
                    return (0, util /* isIDevice */ .FA)() && this.parent.toolbarSettings.type === base_enum /* ToolbarType.Expand */ .Bv.Expand && (tbMode = base_enum /* ToolbarType.Scrollable */ .Bv.Scrollable), tbMode;
                }, Toolbar.prototype.checkToolbarResponsive = function(ele) {
                    var tBarMode;
                    return !(!ej2_base /* Browser.isDevice */ .AR.isDevice || (0, util /* isIDevice */ .FA)()) && (tBarMode = this.parent.toolbarSettings.type === base_enum /* ToolbarType.Expand */ .Bv.Expand ? base_enum /* ToolbarType.MultiRow */ .Bv.MultiRow : this.parent.toolbarSettings.type, this.baseToolbar.render({
                        container: this.parent.inlineMode.enable ? 'quick' : 'toolbar',
                        items: this.parent.toolbarSettings.items,
                        mode: tBarMode,
                        target: ele,
                        cssClass: this.parent.cssClass
                    }), this.parent.toolbarSettings.type === base_enum /* ToolbarType.Expand */ .Bv.Expand && ((0, ej2_base /* addClass */ .cn)([
                        ele
                    ], [
                        'e-rte-tb-mobile'
                    ]), this.parent.inlineMode.enable ? this.addFixedTBarClass() : (0, ej2_base /* addClass */ .cn)([
                        ele
                    ], [
                        classes /* CLS_TB_STATIC */ .iu
                    ])), this.wireEvents(), this.dropDownModule.renderDropDowns({
                        container: ele,
                        containerType: this.parent.inlineMode.enable ? 'quick' : 'toolbar',
                        items: this.parent.toolbarSettings.items
                    }), this.parent.notify(constant /* renderColorPicker */ .jm, {
                        container: this.tbElement,
                        containerType: this.parent.inlineMode.enable ? 'quick' : 'toolbar',
                        items: this.parent.toolbarSettings.items
                    }), !0);
                }, Toolbar.prototype.checkIsTransformChild = function() {
                    this.isTransformChild = !1;
                    for(var transformElements = (0, ej2_base /* selectAll */ .td)('[style*="transform"]', document), i = 0; i < transformElements.length; i++)if (!(0, ej2_base /* isNullOrUndefined */ .le)(transformElements[i].contains) && transformElements[i].contains(this.parent.element)) {
                        this.isTransformChild = !0;
                        break;
                    }
                }, Toolbar.prototype.toggleFloatClass = function(e) {
                    var topValue, scrollParent, isBody = !1, isFloat = !1, floatOffset = this.parent.floatingToolbarOffset;
                    e && this.parent.iframeSettings.enable && this.parent.inputElement.ownerDocument === e.target ? scrollParent = e.target.body : e && e.target !== document ? scrollParent = e.target : (isBody = !0, scrollParent = document.body);
                    var tbHeight = this.getToolbarHeight() + this.getExpandTBarPopHeight();
                    if (this.isTransformChild) {
                        topValue = 0;
                        var scrollParentRelativeTop = 0, trgHeight = this.parent.element.offsetHeight;
                        if (isBody) {
                            var bodyStyle = window.getComputedStyle(scrollParent);
                            scrollParentRelativeTop = parseFloat(bodyStyle.marginTop.split('px')[0]) + parseFloat(bodyStyle.paddingTop.split('px')[0]);
                        }
                        var targetTop = this.parent.element.getBoundingClientRect().top, scrollParentYOffset = ej2_base /* Browser.isMSPointer */ .AR.isMSPointer && isBody ? window.pageYOffset : scrollParent.parentElement.scrollTop, scrollParentRect = scrollParent.getBoundingClientRect(), scrollParentTop = isBody ? scrollParentRect.top + scrollParentYOffset : scrollParentRect.top, outOfRange = !(targetTop - (isBody ? 0 : scrollParentTop) + trgHeight > tbHeight + floatOffset);
                        targetTop > scrollParentTop + floatOffset || targetTop < -trgHeight || targetTop < 0 && outOfRange ? (isFloat = !1, (0, ej2_base /* removeClass */ .IV)([
                            this.tbElement
                        ], [
                            classes /* CLS_TB_ABS_FLOAT */ .IW
                        ])) : targetTop < scrollParentTop + floatOffset && (topValue = targetTop < 0 ? -targetTop + scrollParentTop : scrollParentTop - targetTop, topValue = isBody ? topValue - scrollParentRelativeTop : topValue, (0, ej2_base /* addClass */ .cn)([
                            this.tbElement
                        ], [
                            classes /* CLS_TB_ABS_FLOAT */ .IW
                        ]), isFloat = !0);
                    } else {
                        var parent_1 = this.parent.element.getBoundingClientRect();
                        if (window.innerHeight < parent_1.top) return;
                        topValue = e && e.target !== document ? scrollParent.getBoundingClientRect().top : 0, parent_1.bottom < floatOffset + tbHeight + topValue || parent_1.bottom < 0 || parent_1.top > floatOffset + topValue ? isFloat = !1 : (parent_1.top < floatOffset || parent_1.top < floatOffset + topValue) && (isFloat = !0);
                    }
                    isFloat ? ((0, ej2_base /* addClass */ .cn)([
                        this.tbElement
                    ], [
                        classes /* CLS_TB_FLOAT */ .to
                    ]), (0, ej2_base /* setStyleAttribute */ .V7)(this.tbElement, {
                        width: this.parent.element.offsetWidth + 'px',
                        top: floatOffset + topValue + 'px'
                    })) : ((0, ej2_base /* removeClass */ .IV)([
                        this.tbElement
                    ], [
                        classes /* CLS_TB_FLOAT */ .to
                    ]), (0, ej2_base /* setStyleAttribute */ .V7)(this.tbElement, {
                        top: "0px",
                        width: '100%'
                    }));
                }, Toolbar.prototype.renderToolbar = function() {
                    if (this.initializeInstance(), this.createToolbarElement(), !this.checkToolbarResponsive(this.tbElement)) {
                        this.parent.inlineMode.enable ? this.parent.notify(constant /* renderInlineToolbar */ .bb, {}) : (this.baseToolbar.render({
                            container: 'toolbar',
                            items: this.parent.toolbarSettings.items,
                            mode: this.getToolbarMode(),
                            target: this.tbElement,
                            cssClass: this.parent.cssClass
                        }), this.parent.inlineMode.enable || (this.parent.toolbarSettings.enableFloating && (this.checkIsTransformChild(), this.toggleFloatClass()), (0, ej2_base /* addClass */ .cn)([
                            this.parent.element
                        ], [
                            classes /* CLS_RTE_TB_ENABLED */ .bs
                        ]), this.parent.toolbarSettings.type === base_enum /* ToolbarType.Expand */ .Bv.Expand && (0, ej2_base /* addClass */ .cn)([
                            this.parent.element
                        ], [
                            classes /* CLS_RTE_EXPAND_TB */ .re
                        ]))), this.wireEvents(), this.parent.inlineMode.enable && !(0, util /* isIDevice */ .FA)() && this.addFixedTBarClass(), this.parent.inlineMode.enable || (this.dropDownModule.renderDropDowns({
                            container: this.tbElement,
                            containerType: 'toolbar',
                            items: this.parent.toolbarSettings.items
                        }), this.parent.notify(constant /* renderColorPicker */ .jm, {
                            container: this.tbElement,
                            containerType: 'toolbar',
                            items: this.parent.toolbarSettings.items
                        }), this.refreshToolbarOverflow());
                        var divEle = this.parent.element.querySelector('.e-rte-srctextarea'), iframeEle = this.parent.element.querySelector('.e-source-content');
                        (this.parent.iframeSettings.enable || (0, ej2_base /* isNullOrUndefined */ .le)(divEle) || 'block' !== divEle.style.display) && (!this.parent.iframeSettings.enable || (0, ej2_base /* isNullOrUndefined */ .le)(iframeEle) || 'block' !== iframeEle.style.display) || (this.parent.notify(constant /* updateToolbarItem */ .W0, {
                            targetItem: 'SourceCode',
                            updateItem: 'Preview',
                            baseToolbar: this.parent.getBaseToolbarObject()
                        }), this.parent.disableToolbarItem(this.parent.toolbarSettings.items));
                    }
                }, /**
     * addFixedTBarClass method
     *
     * @returns {void}
     * @hidden

     */ Toolbar.prototype.addFixedTBarClass = function() {
                    (0, ej2_base /* addClass */ .cn)([
                        this.tbElement
                    ], [
                        classes /* CLS_TB_FIXED */ .TN
                    ]);
                }, /**
     * removeFixedTBarClass method
     *
     * @returns {void}
     * @hidden

     */ Toolbar.prototype.removeFixedTBarClass = function() {
                    (0, ej2_base /* removeClass */ .IV)([
                        this.tbElement
                    ], [
                        classes /* CLS_TB_FIXED */ .TN
                    ]);
                }, Toolbar.prototype.showFixedTBar = function() {
                    (0, ej2_base /* addClass */ .cn)([
                        this.tbElement
                    ], [
                        classes /* CLS_SHOW */ .X7
                    ]), ej2_base /* Browser.isIos */ .AR.isIos && (0, ej2_base /* addClass */ .cn)([
                        this.tbElement
                    ], [
                        classes /* CLS_TB_IOS_FIX */ .ok
                    ]);
                }, Toolbar.prototype.hideFixedTBar = function() {
                    this.isToolbar ? this.isToolbar = !1 : (0, ej2_base /* removeClass */ .IV)([
                        this.tbElement
                    ], [
                        classes /* CLS_SHOW */ .X7,
                        classes /* CLS_TB_IOS_FIX */ .ok
                    ]);
                }, /**
     * updateItem method
     *
     * @param {IUpdateItemsModel} args - specifies the arguments.
     * @returns {void}
     * @hidden

     */ Toolbar.prototype.updateItem = function(args) {
                    var item = this.tools[args.updateItem.toLocaleLowerCase()], trgItem = this.tools[args.targetItem.toLocaleLowerCase()], index = (0, util /* getTBarItemsIndex */ .a_)((0, util /* getCollection */ ._N)(trgItem.subCommand), args.baseToolbar.toolbarObj.items)[0];
                    if ((0, ej2_base /* isNullOrUndefined */ .le)(index)) this.addTBarItem(args, 0);
                    else {
                        var prefixId = this.parent.inlineMode.enable ? '_quick_' : '_toolbar_';
                        args.baseToolbar.toolbarObj.items[index].id = this.parent.getID() + prefixId + item.id, args.baseToolbar.toolbarObj.items[index].prefixIcon = item.icon, args.baseToolbar.toolbarObj.items[index].tooltipText = item.tooltip, args.baseToolbar.toolbarObj.items[index].subCommand = item.subCommand, args.baseToolbar.toolbarObj.dataBind();
                    }
                }, Toolbar.prototype.updateToolbarStatus = function(args) {
                    if (!(!this.tbElement || this.parent.inlineMode.enable && ((0, util /* isIDevice */ .FA)() || !ej2_base /* Browser.isDevice */ .AR.isDevice))) {
                        var options = {
                            args: args,
                            dropDownModule: this.dropDownModule,
                            parent: this.parent,
                            tbElements: (0, ej2_base /* selectAll */ .td)('.' + classes /* CLS_TB_ITEM */ .Xh, this.tbElement),
                            tbItems: this.baseToolbar.toolbarObj.items
                        };
                        (0, util /* setToolbarStatus */ .kj)(options, !!this.parent.inlineMode.enable, this.parent);
                    }
                }, Toolbar.prototype.fullScreen = function(e) {
                    this.parent.fullScreenModule.showFullScreen(e);
                }, Toolbar.prototype.hideScreen = function(e) {
                    this.parent.fullScreenModule.hideFullScreen(e);
                }, /**
     * getBaseToolbar method
     *
     * @returns {void}
     * @hidden

     */ Toolbar.prototype.getBaseToolbar = function() {
                    return this.baseToolbar;
                }, /**
     * addTBarItem method
     *
     * @param {IUpdateItemsModel} args - specifies the arguments.
     * @param {number} index - specifies the index value.
     * @returns {void}
     * @hidden

     */ Toolbar.prototype.addTBarItem = function(args, index) {
                    args.baseToolbar.toolbarObj.addItems([
                        args.baseToolbar.getObject(args.updateItem, 'toolbar')
                    ], index);
                }, /**
     * enableTBarItems method
     *
     * @param {BaseToolbar} baseToolbar - specifies the toolbar.
     * @param {string} items - specifies the string value.
     * @param {boolean} isEnable - specifies the boolean value.
     * @param {boolean} muteToolbarUpdate - specifies the toolbar.
     * @returns {void}
     * @hidden

     */ Toolbar.prototype.enableTBarItems = function(baseToolbar, items, isEnable, muteToolbarUpdate) {
                    var trgItems = (0, util /* getTBarItemsIndex */ .a_)((0, util /* getCollection */ ._N)(items), baseToolbar.toolbarObj.items);
                    this.tbItems = (0, ej2_base /* selectAll */ .td)('.' + classes /* CLS_TB_ITEM */ .Xh, baseToolbar.toolbarObj.element);
                    for(var i = 0; i < trgItems.length; i++){
                        var item = this.tbItems[trgItems[i]];
                        item && baseToolbar.toolbarObj.enableItems(item, isEnable);
                    }
                    (0, ej2_base /* select */ .Ys)('.e-rte-srctextarea', this.parent.element) || muteToolbarUpdate || (0, util /* updateUndoRedoStatus */ .j)(baseToolbar, this.parent.formatter.editorManager.undoRedoManager.getUndoStatus());
                }, /**
     * removeTBarItems method
     *
     * @param {string} items - specifies the string value.
     * @returns {void}
     * @hidden

     */ Toolbar.prototype.removeTBarItems = function(items) {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.baseToolbar.toolbarObj) && (this.baseToolbar = this.parent.getBaseToolbarObject());
                    var trgItems = (0, util /* getTBarItemsIndex */ .a_)((0, util /* getCollection */ ._N)(items), this.baseToolbar.toolbarObj.items);
                    this.tbItems = this.parent.inlineMode.enable ? (0, ej2_base /* selectAll */ .td)('.' + classes /* CLS_TB_ITEM */ .Xh, this.baseToolbar.toolbarObj.element) : (0, ej2_base /* selectAll */ .td)('.' + classes /* CLS_TB_ITEM */ .Xh, this.parent.element);
                    for(var i = 0; i < trgItems.length; i++)this.baseToolbar.toolbarObj.removeItems(this.tbItems[trgItems[i]]);
                }, /**
     * getExpandTBarPopHeight method
     *
     * @returns {void}
     * @hidden

     */ Toolbar.prototype.getExpandTBarPopHeight = function() {
                    var popHeight = 0;
                    if (this.parent.toolbarSettings.type === base_enum /* ToolbarType.Expand */ .Bv.Expand && this.tbElement.classList.contains('e-extended-toolbar')) {
                        var expandPopup = (0, ej2_base /* select */ .Ys)('.e-toolbar-extended', this.tbElement);
                        expandPopup && this.tbElement.classList.contains('e-expand-open') || expandPopup && expandPopup.classList.contains('e-popup-open') ? ((0, ej2_base /* addClass */ .cn)([
                            expandPopup
                        ], [
                            classes /* CLS_VISIBLE */ .Hy
                        ]), popHeight += expandPopup.offsetHeight, (0, ej2_base /* removeClass */ .IV)([
                            expandPopup
                        ], [
                            classes /* CLS_VISIBLE */ .Hy
                        ])) : (0, ej2_base /* removeClass */ .IV)([
                            this.tbElement
                        ], [
                            classes /* CLS_EXPAND_OPEN */ .Yi
                        ]);
                    }
                    return popHeight;
                }, /**
     * getToolbarHeight method
     *
     * @returns {void}
     * @hidden

     */ Toolbar.prototype.getToolbarHeight = function() {
                    return this.tbElement.offsetHeight;
                }, /**
     * getToolbarElement method
     *
     * @returns {void}
     * @hidden

     */ Toolbar.prototype.getToolbarElement = function() {
                    return (0, ej2_base /* select */ .Ys)('.' + classes /* CLS_TOOLBAR */ .zE, this.parent.element);
                }, /**
     * refreshToolbarOverflow method
     *
     * @returns {void}
     * @hidden

     */ Toolbar.prototype.refreshToolbarOverflow = function() {
                    this.baseToolbar.toolbarObj.refreshOverflow();
                }, Toolbar.prototype.isToolbarDestroyed = function() {
                    return this.baseToolbar.toolbarObj && !this.baseToolbar.toolbarObj.isDestroyed;
                }, Toolbar.prototype.destroyToolbar = function() {
                    if (this.isToolbarDestroyed()) {
                        this.parent.unWireScrollElementsEvents(), this.unWireEvents(), this.parent.notify(constant /* destroyColorPicker */ .c0, {}), this.dropDownModule.destroyDropDowns(), this.baseToolbar.toolbarObj.destroy(), this.removeEventListener(), (0, ej2_base /* removeClass */ .IV)([
                            this.parent.element
                        ], [
                            classes /* CLS_RTE_TB_ENABLED */ .bs
                        ]), (0, ej2_base /* removeClass */ .IV)([
                            this.parent.element
                        ], [
                            classes /* CLS_RTE_EXPAND_TB */ .re
                        ]);
                        var tbWrapper = (0, ej2_base /* select */ .Ys)('.' + classes /* CLS_TB_WRAP */ .Rj, this.parent.element), tbElement = (0, ej2_base /* select */ .Ys)('.' + classes /* CLS_TOOLBAR */ .zE, this.parent.element);
                        (0, ej2_base /* isNullOrUndefined */ .le)(tbWrapper) ? (0, ej2_base /* isNullOrUndefined */ .le)(tbElement) || (0, ej2_base /* detach */ .og)(tbElement) : (0, ej2_base /* detach */ .og)(tbWrapper);
                    }
                }, /**
     * Destroys the ToolBar.
     *
     * @function destroy
     * @returns {void}
     * @hidden

     */ Toolbar.prototype.destroy = function() {
                    this.isToolbarDestroyed() && (this.destroyToolbar(), this.keyBoardModule && this.keyBoardModule.destroy());
                }, Toolbar.prototype.moduleDestroy = function() {
                    this.parent = null, this.baseToolbar.parent = null, this.toolbarActionModule.parent = null, this.dropDownModule.parent = null;
                }, Toolbar.prototype.scrollHandler = function(e) {
                    !this.parent.inlineMode.enable && this.parent.toolbarSettings.enableFloating && this.getDOMVisibility(this.tbElement) && this.toggleFloatClass(e.args);
                }, Toolbar.prototype.getDOMVisibility = function(el) {
                    return !!el.offsetParent || 0 !== el.offsetWidth || 0 !== el.offsetHeight;
                }, Toolbar.prototype.mouseDownHandler = function() {
                    ej2_base /* Browser.isDevice */ .AR.isDevice && this.parent.inlineMode.enable && !(0, util /* isIDevice */ .FA)() && this.showFixedTBar();
                }, Toolbar.prototype.focusChangeHandler = function() {
                    ej2_base /* Browser.isDevice */ .AR.isDevice && this.parent.inlineMode.enable && !(0, util /* isIDevice */ .FA)() && (this.isToolbar = !1, this.hideFixedTBar());
                }, Toolbar.prototype.dropDownBeforeOpenHandler = function() {
                    this.isToolbar = !0;
                }, // eslint-disable-next-line
                Toolbar.prototype.tbFocusHandler = function(e) {
                    var activeElm = document.activeElement, isToolbaractive = (0, ej2_base /* closest */ .oq)(activeElm, '.e-rte-toolbar');
                    if (activeElm === this.parent.getToolbarElement() || isToolbaractive === this.parent.getToolbarElement()) for(var toolbarItem = this.parent.getToolbarElement().querySelectorAll('.e-expended-nav'), i = 0; i < toolbarItem.length; i++)(0, ej2_base /* isNullOrUndefined */ .le)(this.parent.getToolbarElement().querySelector('.e-insert-table-btn')) ? toolbarItem[i].setAttribute('tabindex', '0') : toolbarItem[i].setAttribute('tabindex', '1');
                }, Toolbar.prototype.tbKeydownHandler = function(e) {
                    (e.target.classList.contains('e-dropdown-btn') || e.target.getAttribute('id') === this.parent.getID() + '_toolbar_CreateTable') && e.target.setAttribute('tabindex', '0');
                }, Toolbar.prototype.toolbarClickHandler = function(e) {
                    var trg = (0, ej2_base /* closest */ .oq)(e.originalEvent.target, '.e-hor-nav');
                    trg && this.parent.toolbarSettings.type === base_enum /* ToolbarType.Expand */ .Bv.Expand && !(0, ej2_base /* isNullOrUndefined */ .le)(trg) ? trg.classList.contains('e-nav-active') ? ((0, ej2_base /* addClass */ .cn)([
                        this.tbElement
                    ], [
                        classes /* CLS_EXPAND_OPEN */ .Yi
                    ]), this.parent.setContentHeight('toolbar', !0)) : ((0, ej2_base /* removeClass */ .IV)([
                        this.tbElement
                    ], [
                        classes /* CLS_EXPAND_OPEN */ .Yi
                    ]), this.parent.setContentHeight('toolbar', !1)) : (ej2_base /* Browser.isDevice */ .AR.isDevice || this.parent.inlineMode.enable) && (this.isToolbar = !0), (0, ej2_base /* isNullOrUndefined */ .le)(trg) && this.parent.toolbarSettings.type === base_enum /* ToolbarType.Expand */ .Bv.Expand && (0, ej2_base /* removeClass */ .IV)([
                        this.tbElement
                    ], [
                        classes /* CLS_EXPAND_OPEN */ .Yi
                    ]);
                }, Toolbar.prototype.wireEvents = function() {
                    this.parent.inlineMode.enable && (0, util /* isIDevice */ .FA)() || (ej2_base /* EventHandler.add */ .bi.add(this.tbElement, 'focusin', this.tbFocusHandler, this), ej2_base /* EventHandler.add */ .bi.add(this.tbElement, 'keydown', this.tbKeydownHandler, this));
                }, Toolbar.prototype.unWireEvents = function() {
                    ej2_base /* EventHandler.remove */ .bi.remove(this.tbElement, 'focusin', this.tbFocusHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.tbElement, 'keydown', this.tbKeydownHandler);
                }, Toolbar.prototype.addEventListener = function() {
                    !this.parent.isDestroyed && (this.dropDownModule = new DropDownButtons(this.parent, this.locator), this.toolbarActionModule = new ToolbarAction(this.parent), this.parent.on(constant /* initialEnd */ .Xr, this.renderToolbar, this), this.parent.on(constant /* scroll */ .AR, this.scrollHandler, this), this.parent.on(constant /* bindOnEnd */ .$d, this.toolbarBindEvent, this), this.parent.on(constant /* toolbarUpdated */ .ko, this.updateToolbarStatus, this), this.parent.on(constant /* modelChanged */ .CC, this.onPropertyChanged, this), this.parent.on(constant /* refreshBegin */ .Jz, this.onRefresh, this), this.parent.on(constant /* destroy */ .ob, this.destroy, this), this.parent.on(constant /* enableFullScreen */ .ex, this.fullScreen, this), this.parent.on(constant /* disableFullScreen */ .Fx, this.hideScreen, this), this.parent.on(constant /* updateToolbarItem */ .W0, this.updateItem, this), this.parent.on(constant /* beforeDropDownOpen */ .rc, this.dropDownBeforeOpenHandler, this), this.parent.on(constant /* expandPopupClick */ .IJ, this.parent.setContentHeight, this.parent), this.parent.on(constant /* focusChange */ .Z7, this.focusChangeHandler, this), this.parent.on(constant /* mouseDown */ .uG, this.mouseDownHandler, this), this.parent.on(constant /* sourceCodeMouseDown */ .tO, this.mouseDownHandler, this), this.parent.on(constant /* bindCssClass */ ._8, this.setCssClass, this), this.parent.on(constant /* moduleDestroy */ .P0, this.moduleDestroy, this), this.parent.inlineMode.enable || (0, util /* isIDevice */ .FA)() || this.parent.on(constant /* toolbarClick */ .kE, this.toolbarClickHandler, this));
                }, Toolbar.prototype.removeEventListener = function() {
                    !this.parent.isDestroyed && (this.parent.off(constant /* initialEnd */ .Xr, this.renderToolbar), this.parent.off(constant /* scroll */ .AR, this.scrollHandler), this.parent.off(constant /* bindOnEnd */ .$d, this.toolbarBindEvent), this.parent.off(constant /* toolbarUpdated */ .ko, this.updateToolbarStatus), this.parent.off(constant /* modelChanged */ .CC, this.onPropertyChanged), this.parent.off(constant /* refreshBegin */ .Jz, this.onRefresh), this.parent.off(constant /* destroy */ .ob, this.destroy), this.parent.off(constant /* enableFullScreen */ .ex, this.parent.fullScreenModule.showFullScreen), this.parent.off(constant /* disableFullScreen */ .Fx, this.parent.fullScreenModule.hideFullScreen), this.parent.off(constant /* updateToolbarItem */ .W0, this.updateItem), this.parent.off(constant /* beforeDropDownOpen */ .rc, this.dropDownBeforeOpenHandler), this.parent.off(constant /* expandPopupClick */ .IJ, this.parent.setContentHeight), this.parent.off(constant /* focusChange */ .Z7, this.focusChangeHandler), this.parent.off(constant /* mouseDown */ .uG, this.mouseDownHandler), this.parent.off(constant /* sourceCodeMouseDown */ .tO, this.mouseDownHandler), this.parent.off(constant /* bindCssClass */ ._8, this.setCssClass), this.parent.off(constant /* moduleDestroy */ .P0, this.moduleDestroy), this.parent.inlineMode.enable || (0, util /* isIDevice */ .FA)() || this.parent.off(constant /* toolbarClick */ .kE, this.toolbarClickHandler));
                }, Toolbar.prototype.setCssClass = function(e) {
                    this.toolbarObj && e.cssClass && ((0, ej2_base /* isNullOrUndefined */ .le)(e.oldCssClass) ? this.toolbarObj.setProperties({
                        cssClass: (this.toolbarObj.cssClass + ' ' + e.cssClass).trim()
                    }) : this.toolbarObj.setProperties({
                        cssClass: (this.toolbarObj.cssClass.replace(e.oldCssClass, '').trim() + ' ' + e.cssClass).trim()
                    }));
                }, Toolbar.prototype.onRefresh = function() {
                    this.parent.inlineMode.enable || this.refreshToolbarOverflow(), this.parent.setContentHeight('', !0);
                }, /**
     * Called internally if any of the property value changed.
     *
     * @param {RichTextEditorModel} e - specifies the string value
     * @returns {void}
     * @hidden

     */ Toolbar.prototype.onPropertyChanged = function(e) {
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(e.newProp.inlineMode)) for(var _i = 0, _a = Object.keys(e.newProp.inlineMode); _i < _a.length; _i++)'enable' === _a[_i] && this.refreshToolbar();
                    e.module === this.getModuleName() && this.refreshToolbar();
                }, Toolbar.prototype.refreshToolbar = function() {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.baseToolbar.toolbarObj) && (this.baseToolbar = this.parent.getBaseToolbarObject());
                    var tbWrapper = (0, ej2_base /* select */ .Ys)('.' + classes /* CLS_TB_WRAP */ .Rj, this.parent.element);
                    ((0, ej2_base /* select */ .Ys)('.' + classes /* CLS_TOOLBAR */ .zE, this.parent.element) || tbWrapper) && this.destroyToolbar(), this.parent.toolbarSettings.enable && (this.addEventListener(), this.renderToolbar(), this.parent.wireScrollElementsEvents(), (0, ej2_base /* select */ .Ys)('.e-rte-srctextarea', this.parent.element) || (0, util /* updateUndoRedoStatus */ .j)(this.baseToolbar, this.parent.formatter.editorManager.undoRedoManager.getUndoStatus()), this.parent.notify(constant /* dynamicModule */ .ny, {}));
                }, /**
     * For internal use only - Get the module name.
     *
     * @returns {void}
     * @hidden
     */ Toolbar.prototype.getModuleName = function() {
                    return 'toolbar';
                }, Toolbar;
            }();
        /***/ },
        /***/ 9805: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ $E: function() {
                    return /* binding */ CLS_RTE;
                },
                /* harmony export */ $j: function() {
                    return /* binding */ CLS_LIST_PRIMARY_CONTENT;
                },
                /* harmony export */ Bn: function() {
                    return /* binding */ CLS_IMGBREAK;
                },
                /* harmony export */ CY: function() {
                    return /* binding */ CLS_NUMBERFORMATLIST_TB_BTN;
                },
                /* harmony export */ Cb: function() {
                    return /* binding */ CLS_ALIGN_TB_BTN;
                },
                /* harmony export */ Cd: function() {
                    return /* binding */ CLS_ICONS;
                },
                /* harmony export */ Cs: function() {
                    return /* binding */ CLS_BULLETFORMATLIST_TB_BTN;
                },
                /* harmony export */ D6: function() {
                    return /* binding */ CLS_FONT_NAME_TB_BTN;
                },
                /* harmony export */ Ds: function() {
                    return /* binding */ CLS_FONT_COLOR_TARGET;
                },
                /* harmony export */ Dw: function() {
                    return /* binding */ CLS_TB_ROW_RES;
                },
                /* harmony export */ Em: function() {
                    return /* binding */ CLS_IMGINLINE;
                },
                /* harmony export */ Fs: function() {
                    return /* binding */ CLS_TB_BTN;
                },
                /* harmony export */ GY: function() {
                    return /* binding */ CLS_FULL_SCREEN;
                },
                /* harmony export */ Gj: function() {
                    return /* binding */ CLS_RTE_PASTE_CANCEL;
                },
                /* harmony export */ Gp: function() {
                    return /* binding */ CLS_STYLE_SHEET;
                },
                /* harmony export */ HC: function() {
                    return /* binding */ CLS_TABLE_SEL;
                },
                /* harmony export */ Hy: function() {
                    return /* binding */ CLS_VISIBLE;
                },
                /* harmony export */ IJ: function() {
                    return /* binding */ CLS_RTE_TABLE_RESIZE;
                },
                /* harmony export */ IW: function() {
                    return /* binding */ CLS_TB_ABS_FLOAT;
                },
                /* harmony export */ Ig: function() {
                    return /* binding */ CLS_BACKGROUND_COLOR_TARGET;
                },
                /* harmony export */ Jh: function() {
                    return /* binding */ CLS_FONT_SIZE_TB_BTN;
                },
                /* harmony export */ LK: function() {
                    return /* binding */ CLS_DROPDOWN_POPUP;
                },
                /* harmony export */ MO: function() {
                    return /* binding */ CLS_RTE_UPLOAD_POPUP;
                },
                /* harmony export */ Mv: function() {
                    return /* binding */ CLS_FOCUS;
                },
                /* harmony export */ OC: function() {
                    return /* binding */ CLS_RTE_PASTE_PLAIN_FORMAT;
                },
                /* harmony export */ PW: function() {
                    return /* binding */ CLS_RTE_READONLY;
                },
                /* harmony export */ Qk: function() {
                    return /* binding */ CLS_RTE_IMAGE;
                },
                /* harmony export */ Rj: function() {
                    return /* binding */ CLS_TB_WRAP;
                },
                /* harmony export */ Rw: function() {
                    return /* binding */ CLS_RTE_DIALOG_MIN_HEIGHT;
                },
                /* harmony export */ TN: function() {
                    return /* binding */ CLS_TB_FIXED;
                },
                /* harmony export */ UQ: function() {
                    return /* binding */ CLS_FONT_COLOR_DROPDOWN;
                },
                /* harmony export */ VE: function() {
                    return /* binding */ CLS_RTE_DIALOG_UPLOAD;
                },
                /* harmony export */ Vb: function() {
                    return /* binding */ CLS_NOCOLOR_ITEM;
                },
                /* harmony export */ Wk: function() {
                    return /* binding */ CLS_RTE_RES_HANDLE;
                },
                /* harmony export */ X7: function() {
                    return /* binding */ CLS_SHOW;
                },
                /* harmony export */ XS: function() {
                    return /* binding */ CLS_ACTIVE;
                },
                /* harmony export */ Xh: function() {
                    return /* binding */ CLS_TB_ITEM;
                },
                /* harmony export */ Yi: function() {
                    return /* binding */ CLS_EXPAND_OPEN;
                },
                /* harmony export */ Z0: function() {
                    return /* binding */ CLS_SCRIPT_SHEET;
                },
                /* harmony export */ Z8: function() {
                    return /* binding */ CLS_BACKGROUND_COLOR_DROPDOWN;
                },
                /* harmony export */ ZV: function() {
                    return /* binding */ CLS_INLINE_DROPDOWN;
                },
                /* harmony export */ _G: function() {
                    return /* binding */ CLS_TABLE_BORDER;
                },
                /* harmony export */ _R: function() {
                    return /* binding */ CLS_POPUP_OPEN;
                },
                /* harmony export */ br: function() {
                    return /* binding */ CLS_DROPDOWN_ITEMS;
                },
                /* harmony export */ bs: function() {
                    return /* binding */ CLS_RTE_TB_ENABLED;
                },
                /* harmony export */ cm: function() {
                    return /* binding */ CLS_RTE_PASTE_KEEP_FORMAT;
                },
                /* harmony export */ dc: function() {
                    return /* binding */ CLS_FORMATS_TB_BTN;
                },
                /* harmony export */ gr: function() {
                    return /* binding */ CLS_QUICK_TB;
                },
                /* harmony export */ i7: function() {
                    return /* binding */ CLS_RTE_ELEMENTS;
                },
                /* harmony export */ in: function() {
                    return /* binding */ CLS_HR_SEPARATOR;
                },
                /* harmony export */ iu: function() {
                    return /* binding */ CLS_TB_STATIC;
                },
                /* harmony export */ jC: function() {
                    return /* binding */ CLS_RTE_PASTE_REMOVE_FORMAT;
                },
                /* harmony export */ jQ: function() {
                    return /* binding */ CLS_TB_DASH_BOR;
                },
                /* harmony export */ je: function() {
                    return /* binding */ CLS_RTE_HIDDEN;
                },
                /* harmony export */ kR: function() {
                    return /* binding */ CLS_COLOR_PALETTE;
                },
                /* harmony export */ lm: function() {
                    return /* binding */ CLS_RTL;
                },
                /* harmony export */ mO: function() {
                    return /* binding */ CLS_RTE_PASTE_OK;
                },
                /* harmony export */ o7: function() {
                    return /* binding */ CLS_FONT_COLOR_PICKER;
                },
                /* harmony export */ oO: function() {
                    return /* binding */ CLS_BACKGROUND_COLOR_PICKER;
                },
                /* harmony export */ ok: function() {
                    return /* binding */ CLS_TB_IOS_FIX;
                },
                /* harmony export */ rG: function() {
                    return /* binding */ CLS_CUSTOM_TILE;
                },
                /* harmony export */ re: function() {
                    return /* binding */ CLS_RTE_EXPAND_TB;
                },
                /* harmony export */ rp: function() {
                    return /* binding */ CLS_TB_COL_RES;
                },
                /* harmony export */ s8: function() {
                    return /* binding */ CLS_RTE_CONTENT;
                },
                /* harmony export */ to: function() {
                    return /* binding */ CLS_TB_FLOAT;
                },
                /* harmony export */ uN: function() {
                    return /* binding */ CLS_COLOR_CONTENT;
                },
                /* harmony export */ uO: function() {
                    return /* binding */ CLS_QUICK_DROPDOWN;
                },
                /* harmony export */ uX: function() {
                    return /* binding */ CLS_TB_BOX_RES;
                },
                /* harmony export */ xu: function() {
                    return /* binding */ CLS_DISABLED;
                },
                /* harmony export */ yH: function() {
                    return /* binding */ CLS_DROPDOWN_ICONS;
                },
                /* harmony export */ yW: function() {
                    return /* binding */ CLS_TB_ALT_BOR;
                },
                /* harmony export */ yw: function() {
                    return /* binding */ CLS_RTE_FIXED_TB_EXPAND;
                },
                /* harmony export */ zD: function() {
                    return /* binding */ CLS_DROPDOWN_BTN;
                },
                /* harmony export */ zE: function() {
                    return /* binding */ CLS_TOOLBAR;
                }
            });
            /* unused harmony exports CLS_CONTENT, CLS_INLINE, CLS_TB_INLINE, CLS_POP, CLS_QUICK_POP, CLS_IMAGE_POP, CLS_INLINE_POP, CLS_TB_EXTENDED, CLS_POPUP, CLS_SEPARATOR, CLS_MINIMIZE, CLS_MAXIMIZE, CLS_BACK, CLS_HIDE, CLS_RM_WHITE_SPACE, CLS_IMGRIGHT, CLS_IMGLEFT, CLS_IMGCENTER, CLS_CAPTION, CLS_RTE_CAPTION, CLS_CAPINLINE, CLS_COUNT, CLS_WARNING, CLS_ERROR, CLS_RTE_RES_EAST, CLS_RESIZE, CLS_IMG_FOCUS, CLS_RTE_DRAG_IMAGE, CLS_IMG_RESIZE, CLS_DROPAREA, CLS_IMG_INNER, CLS_UPLOAD_FILES, CLS_RTE_RES_CNT, CLS_TABLE, CLS_RTE_RES_WEST */ /**
 * Rich Text Editor classes defined here.
 */ /**
 * @hidden

 */ var CLS_RTE = 'e-richtexteditor', CLS_RTL = 'e-rtl', CLS_DISABLED = 'e-disabled', CLS_SCRIPT_SHEET = 'rte-iframe-script-sheet', CLS_STYLE_SHEET = 'rte-iframe-style-sheet', CLS_TOOLBAR = 'e-rte-toolbar', CLS_TB_FIXED = 'e-rte-tb-fixed', CLS_TB_FLOAT = 'e-rte-tb-float', CLS_TB_ABS_FLOAT = 'e-rte-tb-abs-float', CLS_RTE_EXPAND_TB = 'e-rte-tb-expand', CLS_FULL_SCREEN = 'e-rte-full-screen', CLS_QUICK_TB = 'e-rte-quick-toolbar', CLS_TB_STATIC = 'e-tb-static', CLS_QUICK_DROPDOWN = 'e-quick-dropdown', CLS_INLINE_DROPDOWN = 'e-rte-inline-dropdown', CLS_DROPDOWN_POPUP = 'e-rte-dropdown-popup', CLS_DROPDOWN_ICONS = 'e-rte-dropdown-icons', CLS_DROPDOWN_ITEMS = 'e-rte-dropdown-items', CLS_DROPDOWN_BTN = 'e-rte-dropdown-btn', CLS_RTE_CONTENT = 'e-rte-content', CLS_TB_ITEM = 'e-toolbar-item', CLS_TB_WRAP = 'e-toolbar-wrapper', CLS_SHOW = 'e-show', CLS_VISIBLE = 'e-visible', CLS_FOCUS = 'e-focused', CLS_IMGBREAK = 'e-imgbreak', CLS_IMGINLINE = 'e-imginline', CLS_ICONS = 'e-icons', CLS_ACTIVE = 'e-active', CLS_EXPAND_OPEN = 'e-expand-open', CLS_RTE_ELEMENTS = 'e-rte-elements', CLS_TB_BTN = 'e-tbar-btn', CLS_HR_SEPARATOR = 'e-rte-horizontal-separator', CLS_TB_IOS_FIX = 'e-tbar-ios-fixed', CLS_LIST_PRIMARY_CONTENT = 'e-rte-list-primary-content', CLS_NUMBERFORMATLIST_TB_BTN = 'e-rte-numberformatlist-dropdown', CLS_BULLETFORMATLIST_TB_BTN = 'e-rte-bulletformatlist-dropdown', CLS_FORMATS_TB_BTN = 'e-formats-tbar-btn', CLS_FONT_NAME_TB_BTN = 'e-font-name-tbar-btn', CLS_FONT_SIZE_TB_BTN = 'e-font-size-tbar-btn', CLS_ALIGN_TB_BTN = 'e-alignment-tbar-btn', CLS_FONT_COLOR_TARGET = 'e-rte-fontcolor-element', CLS_BACKGROUND_COLOR_TARGET = 'e-rte-backgroundcolor-element', CLS_COLOR_CONTENT = 'e-rte-color-content', CLS_FONT_COLOR_DROPDOWN = 'e-rte-fontcolor-dropdown', CLS_BACKGROUND_COLOR_DROPDOWN = 'e-rte-backgroundcolor-dropdown', CLS_COLOR_PALETTE = 'e-rte-square-palette', CLS_FONT_COLOR_PICKER = 'e-rte-fontcolor-colorpicker', CLS_BACKGROUND_COLOR_PICKER = 'e-rte-backgroundcolor-colorpicker', CLS_RTE_READONLY = 'e-rte-readonly', CLS_TABLE_SEL = 'e-cell-select', CLS_TB_DASH_BOR = 'e-dashed-border', CLS_TB_ALT_BOR = 'e-alternate-border', CLS_TB_COL_RES = 'e-column-resize', CLS_TB_ROW_RES = 'e-row-resize', CLS_TB_BOX_RES = 'e-table-box', CLS_RTE_HIDDEN = 'e-rte-hidden', CLS_RTE_PASTE_KEEP_FORMAT = 'e-rte-keepformat', CLS_RTE_PASTE_REMOVE_FORMAT = 'e-rte-removeformat', CLS_RTE_PASTE_PLAIN_FORMAT = 'e-rte-plainformat', CLS_RTE_PASTE_OK = 'e-rte-pasteok', CLS_RTE_PASTE_CANCEL = 'e-rte-pastecancel', CLS_RTE_DIALOG_MIN_HEIGHT = 'e-rte-dialog-minheight', CLS_RTE_RES_HANDLE = 'e-resize-handle', CLS_RTE_IMAGE = 'e-rte-image', CLS_RTE_UPLOAD_POPUP = 'e-rte-upload-popup', CLS_POPUP_OPEN = 'e-popup-open', CLS_RTE_DIALOG_UPLOAD = 'e-rte-dialog-upload', CLS_CUSTOM_TILE = 'e-custom-tile', CLS_NOCOLOR_ITEM = 'e-nocolor-item', CLS_TABLE_BORDER = 'e-rte-table-border', CLS_RTE_TABLE_RESIZE = 'e-rte-table-resize', CLS_RTE_FIXED_TB_EXPAND = 'e-rte-fixed-tb-expand', CLS_RTE_TB_ENABLED = 'e-rte-toolbar-enabled';
        /***/ },
        /***/ 3386: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ $d: function() {
                    return /* binding */ bindOnEnd;
                },
                /* harmony export */ AL: function() {
                    return /* binding */ imageUploadSuccess;
                },
                /* harmony export */ AR: function() {
                    return /* binding */ scroll;
                },
                /* harmony export */ Ak: function() {
                    return /* binding */ contentChanged;
                },
                /* harmony export */ CC: function() {
                    return /* binding */ modelChanged;
                },
                /* harmony export */ CK: function() {
                    return /* binding */ toolbarCreated;
                },
                /* harmony export */ Db: function() {
                    return /* binding */ getSelectedHtml;
                },
                /* harmony export */ Ed: function() {
                    return /* binding */ readOnlyMode;
                },
                /* harmony export */ F: function() {
                    return /* binding */ xhtmlValidation;
                },
                /* harmony export */ F7: function() {
                    return /* binding */ blockEmptyNodes;
                },
                /* harmony export */ Fx: function() {
                    return /* binding */ disableFullScreen;
                },
                /* harmony export */ Go: function() {
                    return /* binding */ imageUploading;
                },
                /* harmony export */ HB: function() {
                    return /* binding */ closeTableDialog;
                },
                /* harmony export */ IJ: function() {
                    return /* binding */ expandPopupClick;
                },
                /* harmony export */ IK: function() {
                    return /* binding */ insertCompleted;
                },
                /* harmony export */ Jz: function() {
                    return /* binding */ refreshBegin;
                },
                /* harmony export */ KS: function() {
                    return /* binding */ inlineEmptyNodes;
                },
                /* harmony export */ Kz: function() {
                    return /* binding */ colorPickerChanged;
                },
                /* harmony export */ LF: function() {
                    return /* binding */ tableclass;
                },
                /* harmony export */ Np: function() {
                    return /* binding */ showTableDialog;
                },
                /* harmony export */ OI: function() {
                    return /* binding */ closeLinkDialog;
                },
                /* harmony export */ P0: function() {
                    return /* binding */ moduleDestroy;
                },
                /* harmony export */ QG: function() {
                    return /* binding */ keyDown;
                },
                /* harmony export */ QX: function() {
                    return /* binding */ count;
                },
                /* harmony export */ Qr: function() {
                    return /* binding */ windowResize;
                },
                /* harmony export */ RE: function() {
                    return /* binding */ paste;
                },
                /* harmony export */ Sy: function() {
                    return /* binding */ updatedToolbarStatus;
                },
                /* harmony export */ T5: function() {
                    return /* binding */ initialLoad;
                },
                /* harmony export */ T8: function() {
                    return /* binding */ insertLink;
                },
                /* harmony export */ Tc: function() {
                    return /* binding */ linkToolbarAction;
                },
                /* harmony export */ W0: function() {
                    return /* binding */ updateToolbarItem;
                },
                /* harmony export */ W_: function() {
                    return /* binding */ createTable;
                },
                /* harmony export */ Wp: function() {
                    return /* binding */ updateTbItemsStatus;
                },
                /* harmony export */ Wz: function() {
                    return /* binding */ selectionRestore;
                },
                /* harmony export */ Xr: function() {
                    return /* binding */ initialEnd;
                },
                /* harmony export */ YV: function() {
                    return /* binding */ imageToolbarAction;
                },
                /* harmony export */ Yb: function() {
                    return /* binding */ beforeDialogOpen;
                },
                /* harmony export */ Yo: function() {
                    return /* binding */ tableColorPickerChanged;
                },
                /* harmony export */ Z7: function() {
                    return /* binding */ focusChange;
                },
                /* harmony export */ ZY: function() {
                    return /* binding */ tableToolbarAction;
                },
                /* harmony export */ _8: function() {
                    return /* binding */ bindCssClass;
                },
                /* harmony export */ _I: function() {
                    return /* binding */ renderFileManager;
                },
                /* harmony export */ a$: function() {
                    return /* binding */ iframeMouseDown;
                },
                /* harmony export */ bb: function() {
                    return /* binding */ renderInlineToolbar;
                },
                /* harmony export */ bi: function() {
                    return /* binding */ checkUndo;
                },
                /* harmony export */ c0: function() {
                    return /* binding */ destroyColorPicker;
                },
                /* harmony export */ cA: function() {
                    return /* binding */ beforeImageUpload;
                },
                /* harmony export */ d$: function() {
                    return /* binding */ resizeStop;
                },
                /* harmony export */ dI: function() {
                    return /* binding */ pasteClean;
                },
                /* harmony export */ dp: function() {
                    return /* binding */ enterHandler;
                },
                /* harmony export */ ex: function() {
                    return /* binding */ enableFullScreen;
                },
                /* harmony export */ gA: function() {
                    return /* binding */ selectionSave;
                },
                /* harmony export */ gk: function() {
                    return /* binding */ markdownToolbarClick;
                },
                /* harmony export */ i8: function() {
                    return /* binding */ actionComplete;
                },
                /* harmony export */ ib: function() {
                    return /* binding */ onResize;
                },
                /* harmony export */ jh: function() {
                    return /* binding */ selectRange;
                },
                /* harmony export */ jm: function() {
                    return /* binding */ renderColorPicker;
                },
                /* harmony export */ kE: function() {
                    return /* binding */ toolbarClick;
                },
                /* harmony export */ ko: function() {
                    return /* binding */ toolbarUpdated;
                },
                /* harmony export */ kq: function() {
                    return /* binding */ closeImageDialog;
                },
                /* harmony export */ l0: function() {
                    return /* binding */ toolbarRefresh;
                },
                /* harmony export */ lj: function() {
                    return /* binding */ showImageDialog;
                },
                /* harmony export */ m2: function() {
                    return /* binding */ actionBegin;
                },
                /* harmony export */ mf: function() {
                    return /* binding */ beforeDialogClose;
                },
                /* harmony export */ nG: function() {
                    return /* binding */ openLink;
                },
                /* harmony export */ nd: function() {
                    return /* binding */ beforeDropDownItemRender;
                },
                /* harmony export */ nk: function() {
                    return /* binding */ showLinkDialog;
                },
                /* harmony export */ ny: function() {
                    return /* binding */ dynamicModule;
                },
                /* harmony export */ ob: function() {
                    return /* binding */ destroy;
                },
                /* harmony export */ p0: function() {
                    return /* binding */ dialogOpen;
                },
                /* harmony export */ rL: function() {
                    return /* binding */ insertImage;
                },
                /* harmony export */ rc: function() {
                    return /* binding */ beforeDropDownOpen;
                },
                /* harmony export */ s0: function() {
                    return /* binding */ htmlToolbarClick;
                },
                /* harmony export */ s4: function() {
                    return /* binding */ execCommandCallBack;
                },
                /* harmony export */ s7: function() {
                    return /* binding */ dropDownSelect;
                },
                /* harmony export */ sh: function() {
                    return /* binding */ contentscroll;
                },
                /* harmony export */ sv: function() {
                    return /* binding */ sourceCode;
                },
                /* harmony export */ tC: function() {
                    return /* binding */ unLink;
                },
                /* harmony export */ tO: function() {
                    return /* binding */ sourceCodeMouseDown;
                },
                /* harmony export */ td: function() {
                    return /* binding */ selectAll;
                },
                /* harmony export */ tw: function() {
                    return /* binding */ resizeStart;
                },
                /* harmony export */ uG: function() {
                    return /* binding */ mouseDown;
                },
                /* harmony export */ uU: function() {
                    return /* binding */ editAreaClick;
                },
                /* harmony export */ v: function() {
                    return /* binding */ afterPasteCleanup;
                },
                /* harmony export */ v0: function() {
                    return /* binding */ updateSource;
                },
                /* harmony export */ v4: function() {
                    return /* binding */ docClick;
                },
                /* harmony export */ vD: function() {
                    return /* binding */ imageUploadFailed;
                },
                /* harmony export */ vN: function() {
                    return /* binding */ rtlMode;
                },
                /* harmony export */ vV: function() {
                    return /* binding */ mouseUp;
                },
                /* harmony export */ vW: function() {
                    return /* binding */ toolbarRenderComplete;
                },
                /* harmony export */ xD: function() {
                    return /* binding */ editLink;
                },
                /* harmony export */ xu: function() {
                    return /* binding */ beforePasteCleanup;
                },
                /* harmony export */ yR: function() {
                    return /* binding */ keyUp;
                },
                /* harmony export */ z6: function() {
                    return /* binding */ dialogClose;
                },
                /* harmony export */ zA: function() {
                    return /* binding */ clearDialogObj;
                },
                /* harmony export */ zB: function() {
                    return /* binding */ resizeInitialized;
                },
                /* harmony export */ zD: function() {
                    return /* binding */ load;
                }
            });
            /**
 * @hidden

 */ var tableclass = 'tableclass', load = 'load', initialLoad = 'initial-load', contentChanged = 'content-changed', initialEnd = 'initial-end', iframeMouseDown = 'iframe-click', destroy = 'destroy', toolbarClick = 'toolbarClick', toolbarRefresh = 'toolbar-refresh', refreshBegin = 'refresh-begin', toolbarUpdated = 'toolbar-updated', bindOnEnd = 'bind-on-end', renderColorPicker = 'render-color-picker', htmlToolbarClick = 'html-toolbar-click', markdownToolbarClick = 'markdown-toolbar-click', destroyColorPicker = 'destroy-color-picker', modelChanged = 'model-changed', keyUp = 'keyUp', keyDown = 'keyDown', mouseUp = 'mouseUp', toolbarCreated = 'toolbarCreated', toolbarRenderComplete = 'toolbarRenderComplete', enableFullScreen = 'enableFullScreen', disableFullScreen = 'disableFullScreen', dropDownSelect = 'dropDownSelect', beforeDropDownItemRender = 'beforeDropDownItemRender', execCommandCallBack = 'execCommandCallBack', imageToolbarAction = 'image-toolbar-action', linkToolbarAction = 'link-toolbar-action', windowResize = 'resize', resizeStart = 'resizeStart', onResize = 'resizing', resizeStop = 'resizeStop', insertLink = 'insertLink', unLink = 'unLink', editLink = 'editLink', openLink = 'openLink', actionBegin = 'actionBegin', actionComplete = 'actionComplete', updatedToolbarStatus = 'updatedToolbarStatus', updateToolbarItem = 'updateToolbarItem', insertImage = 'insertImage', insertCompleted = 'insertCompleted', sourceCode = 'sourceCode', updateSource = 'updateSource', beforeDropDownOpen = 'beforeDropDownOpen', selectionSave = 'selection-save', selectionRestore = 'selection-restore', expandPopupClick = 'expandPopupClick', count = 'count', mouseDown = 'mouseDown', sourceCodeMouseDown = 'sourceCodeMouseDown', editAreaClick = 'editAreaClick', scroll = 'scroll', contentscroll = 'contentscroll', colorPickerChanged = 'colorPickerChanged', tableColorPickerChanged = 'tableColorPickerChanged', focusChange = 'focusChange', selectAll = 'selectAll', selectRange = 'selectRange', getSelectedHtml = 'getSelectedHtml', renderInlineToolbar = 'renderInlineToolbar', paste = 'paste-content', rtlMode = 'rtl-mode', createTable = 'createTable', docClick = 'docClick', tableToolbarAction = 'table-toolbar-action', checkUndo = 'checkUndoStack', readOnlyMode = 'readOnlyMode', moduleDestroy = 'moduleDestroy', pasteClean = 'pasteClean', enterHandler = 'enterHandler', beforeDialogOpen = 'beforeDialogOpen', clearDialogObj = 'clearDialogObj', dialogOpen = 'dialogOpen', beforeDialogClose = 'beforeDialogClose', dialogClose = 'dialogClose', imageUploading = 'imageUploading', imageUploadSuccess = 'imageUploadSuccess', imageUploadFailed = 'imageUploadFailed', xhtmlValidation = 'xhtmlValidation', beforeImageUpload = 'beforeImageUpload', resizeInitialized = 'resizeInitialized', renderFileManager = 'renderFileManager', dynamicModule = 'dynamicModule', beforePasteCleanup = 'beforePasteCleanup', afterPasteCleanup = 'afterPasteCleanup', updateTbItemsStatus = 'updateTbItemsStatus', showLinkDialog = 'showLinkDialog', closeLinkDialog = 'closeLinkDialog', showImageDialog = 'showImageDialog', closeImageDialog = 'closeImageDialog', showTableDialog = 'showTableDialog', closeTableDialog = 'closeTableDialog', bindCssClass = 'closeTableDialog', blockEmptyNodes = "address:empty, article:empty, aside:empty, blockquote:empty,\n details:empty, dd:empty, div:empty, dl:empty, dt:empty, fieldset:empty, footer:empty,form:empty, h1:empty,\n h2:empty, h3:empty, h4:empty, h5:empty, h6:empty, header:empty, hgroup:empty, li:empty, main:empty, nav:empty,\n noscript:empty, output:empty, p:empty, pre:empty, section:empty, td:empty, th:empty", inlineEmptyNodes = "a:empty, abbr:empty, acronym:empty, b:empty, bdi:empty, bdo:empty, big:empty, button:empty,\n canvas:empty, cite:empty, code:empty, data:empty, datalist:empty, del:empty, dfn:empty, em:empty, font:empty, i:empty, iframe:empty,\n ins:empty, kbd:empty, label:empty, map:empty, mark:empty, meter:empty, noscript:empty, object:empty, output:empty, picture:empty, progress:empty,\n q:empty, ruby:empty, s:empty, samp:empty, script:empty, select:empty, slot:empty, small:empty, span:empty, strong:empty, strike:empty, sub:empty, sup:empty, svg:empty,\n template:empty, textarea:empty, time:empty, u:empty, tt:empty, var:empty, wbr:empty";
        /***/ },
        /***/ 809: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            var RenderType, ToolbarType, DialogType, RenderType1, ToolbarType1, DialogType1;
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ Bv: function() {
                    return /* binding */ ToolbarType;
                },
                /* harmony export */ iR: function() {
                    return /* binding */ DialogType;
                },
                /* harmony export */ y2: function() {
                    return /* binding */ RenderType;
                }
            }), /* eslint-disable */ /** Defines RenderType as Toolbar */ (RenderType1 = RenderType || (RenderType = {}))[RenderType1.Toolbar = 0] = "Toolbar", /** Defines RenderType as Content */ RenderType1[RenderType1.Content = 1] = "Content", /** Defines RenderType as Popup */ RenderType1[RenderType1.Popup = 2] = "Popup", /** Defines RenderType as LinkToolbar */ RenderType1[RenderType1.LinkToolbar = 3] = "LinkToolbar", /** Defines RenderType as TextToolbar */ RenderType1[RenderType1.TextToolbar = 4] = "TextToolbar", /** Defines RenderType as ImageToolbar */ RenderType1[RenderType1.ImageToolbar = 5] = "ImageToolbar", /** Defines RenderType as InlineToolbar */ RenderType1[RenderType1.InlineToolbar = 6] = "InlineToolbar", /** Defines RenderType as TableToolbar */ RenderType1[RenderType1.TableToolbar = 7] = "TableToolbar", /* eslint-disable */ /** Defines ToolbarType as Standard */ (ToolbarType1 = ToolbarType || (ToolbarType = {})).Expand = "Expand", /** Defines ToolbarType as MultiRow */ ToolbarType1.MultiRow = "MultiRow", /** Defines ToolbarType as Scrollable */ ToolbarType1.Scrollable = "Scrollable", /* eslint-disable */ /** Defines ToolbarType as Standard */ (DialogType1 = DialogType || (DialogType = {})).InsertLink = "InsertLink", /** Defines ToolbarType as MultiRow */ DialogType1.InsertImage = "InsertImage", /** Defines ToolbarType as Scrollable */ DialogType1.InsertTable = "InsertTable";
        /***/ },
        /***/ 5932: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ AV: function() {
                    return /* binding */ updateDropDownFontFormatLocale;
                },
                /* harmony export */ E: function() {
                    return /* binding */ toObjectLowerCase;
                },
                /* harmony export */ FA: function() {
                    return /* binding */ isIDevice;
                },
                /* harmony export */ Iw: function() {
                    return /* binding */ getDropDownValue;
                },
                /* harmony export */ Jx: function() {
                    return /* binding */ decode;
                },
                /* harmony export */ K_: function() {
                    return /* binding */ convertToBlob;
                },
                /* harmony export */ Nu: function() {
                    return /* binding */ dispatchEvent;
                },
                /* harmony export */ R1: function() {
                    return /* binding */ getFormattedFontSize;
                },
                /* harmony export */ _N: function() {
                    return /* binding */ getCollection;
                },
                /* harmony export */ a_: function() {
                    return /* binding */ getTBarItemsIndex;
                },
                /* harmony export */ cC: function() {
                    return /* binding */ sanitizeHelper;
                },
                /* harmony export */ dW: function() {
                    return /* binding */ parseHtml;
                },
                /* harmony export */ j: function() {
                    return /* binding */ updateUndoRedoStatus;
                },
                /* harmony export */ kj: function() {
                    return /* binding */ setToolbarStatus;
                },
                /* harmony export */ nu: function() {
                    return /* binding */ isEditableValueEmpty;
                },
                /* harmony export */ oG: function() {
                    return /* binding */ getDefaultValue;
                },
                /* harmony export */ pv: function() {
                    return /* binding */ hasClass;
                },
                /* harmony export */ rX: function() {
                    return /* binding */ getTooltipText;
                },
                /* harmony export */ rw: function() {
                    return /* binding */ getIndex;
                },
                /* harmony export */ v7: function() {
                    return /* binding */ getEditValue;
                },
                /* harmony export */ wX: function() {
                    return(/**
 * @param {Document} docElement - specifies the document element
 * @param {Element} node - specifies the node
 * @returns {Node[]} - returns the node array
 * @hidden
 */ function getTextNodesUnder(docElement, node) {
                        var nodes = [];
                        for(node = node.firstChild; node; node = node.nextSibling)3 === node.nodeType ? nodes.push(node) : nodes = nodes.concat(getTextNodesUnder(docElement, node));
                        return nodes;
                    });
                }
            });
            /* unused harmony exports pageYOffset, updateTextNode, getLocaleFontFormat */ /* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1807), _base_classes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9805), _base_constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3386), _models_items__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3276), _models_default_locale__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8491), undoRedoItems = [
                'Undo',
                'Redo'
            ], inlineNode = [
                'a',
                'abbr',
                'acronym',
                'audio',
                'b',
                'bdi',
                'bdo',
                'big',
                'br',
                'button',
                'canvas',
                'cite',
                'code',
                'data',
                'datalist',
                'del',
                'dfn',
                'em',
                'embed',
                'font',
                'i',
                'iframe',
                'img',
                'input',
                'ins',
                'kbd',
                'label',
                'map',
                'mark',
                'meter',
                'noscript',
                'object',
                'output',
                'picture',
                'progress',
                'q',
                'ruby',
                's',
                'samp',
                'script',
                'select',
                'slot',
                'small',
                'span',
                'strong',
                'strike',
                'sub',
                'sup',
                'svg',
                'template',
                'textarea',
                'time',
                'u',
                'tt',
                'var',
                'video',
                'wbr'
            ];
            /**
 * @param {string} val - specifies the string value
 * @param {string} items - specifies the value
 * @returns {number} - returns the number value
 * @hidden
 */ function getIndex(val, items) {
                var index = -1;
                return items.some(function(item, i) {
                    return 'string' == typeof item && val === item.toLocaleLowerCase() && (index = i, !0);
                }), index;
            }
            /**
 * @param {Element} element - specifies the element
 * @param {string} className - specifies the string value
 * @returns {boolean} - returns the boolean value
 * @hidden
 */ function hasClass(element, className) {
                var hasClass = !1;
                return element.classList.contains(className) && (hasClass = !0), hasClass;
            }
            /**
 * @param {IDropDownItemModel} items - specifies the item model
 * @param {string} value - specifies the string value
 * @param {string} type - specifies the string value
 * @param {string} returnType - specifies the return type
 * @returns {string} - returns the string value
 * @hidden
 */ function getDropDownValue(items, value, type, returnType) {
                for(var data, result, k = 0; k < items.length; k++)if ('value' === type && items[k].value.toLocaleLowerCase() === value.toLocaleLowerCase() || 'text' === type && items[k].text.toLocaleLowerCase() === value.toLocaleLowerCase() || 'subCommand' === type && items[k].subCommand.toLocaleLowerCase() === value.toLocaleLowerCase()) {
                    data = items[k];
                    break;
                }
                if (!(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(data)) switch(returnType){
                    case 'text':
                        result = data.text;
                        break;
                    case 'value':
                        result = data.value;
                        break;
                    case 'iconCss':
                        result = data.iconCss;
                }
                return result;
            }
            /**
 * @returns {boolean} - returns the boolean value
 * @hidden
 */ function isIDevice() {
                var result = !1;
                return _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isIos */ .AR.isIos && (result = !0), result;
            }
            /**
 * @param {string} value - specifies the value
 * @returns {string} - returns the string value
 * @hidden
 */ function getFormattedFontSize(value) {
                return (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(value) ? '' : value;
            }
            /**
 * @param {string} item - specifies the string
 * @param {ServiceLocator} serviceLocator - specifies the service locator
 * @returns {string} - returns the string
 * @hidden
 */ function getTooltipText(item, serviceLocator) {
                var i10n = serviceLocator.getService('rteLocale'), itemLocale = _models_default_locale__WEBPACK_IMPORTED_MODULE_1__ /* .toolsLocale */ .Y7[item];
                return i10n.getConstant(itemLocale);
            }
            /**
 * @param {ISetToolbarStatusArgs} e - specifies the e element
 * @param {boolean} isPopToolbar - specifies the boolean value
 * @param {IRichTextEditor} self - specifies the parent element
 * @returns {void}
 * @hidden
 */ function setToolbarStatus(e, isPopToolbar, self1) {
                updateDropDownFontFormatLocale(self1);
                for(var dropDown = e.dropDownModule, data = e.args, keys = Object.keys(e.args), _i = 0; _i < keys.length; _i++)for(var key = keys[_i], j = 0; j < e.tbItems.length; j++){
                    var item = e.tbItems[j].subCommand, itemStr = item && item.toLocaleLowerCase();
                    if (item && itemStr === key || 'UL' === item && 'unorderedlist' === key || 'OL' === item && 'orderedlist' === key || 'pre' === itemStr && 'insertcode' === key) {
                        if ('boolean' == typeof data[key]) !0 === data[key] ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                            e.tbElements[j]
                        ], [
                            _base_classes__WEBPACK_IMPORTED_MODULE_2__ /* .CLS_ACTIVE */ .XS
                        ]) : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                            e.tbElements[j]
                        ], [
                            _base_classes__WEBPACK_IMPORTED_MODULE_2__ /* .CLS_ACTIVE */ .XS
                        ]);
                        else if (('string' == typeof data[key] || null === data[key]) && getIndex(key, e.parent.toolbarSettings.items) > -1) {
                            var value = data[key] ? data[key] : '', result = '';
                            switch(key){
                                case 'formats':
                                    if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(dropDown.formatDropDown) || isPopToolbar || !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(dropDown.formatDropDown) && dropDown.formatDropDown.isDestroyed) break;
                                    var formatItems = e.parent.format.types, formatContent = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(e.parent.format.default) ? formatItems[0].text : e.parent.format.default;
                                    result = getDropDownValue(formatItems, value, 'subCommand', 'text'), dropDown.formatDropDown.content = '<span style="display: inline-flex;width:' + e.parent.format.width + '" ><span class="e-rte-dropdown-btn-text ' + e.parent.cssClass + '">' + ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(result) ? formatContent : result) + '</span></span>', dropDown.formatDropDown.dataBind();
                                    break;
                                case 'alignments':
                                    if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(dropDown.alignDropDown) || !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(dropDown.alignDropDown) && dropDown.alignDropDown.isDestroyed) break;
                                    result = getDropDownValue(_models_items__WEBPACK_IMPORTED_MODULE_3__ /* .alignmentItems */ .Fg, value, 'subCommand', 'iconCss'), dropDown.alignDropDown.iconCss = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(result) ? 'e-icons e-justify-left' : result, dropDown.alignDropDown.dataBind();
                                    break;
                                case 'fontname':
                                    if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(dropDown.fontNameDropDown) || isPopToolbar || !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(dropDown.fontNameDropDown) && dropDown.fontNameDropDown.isDestroyed) break;
                                    var fontNameItems = e.parent.fontFamily.items;
                                    result = getDropDownValue(fontNameItems, value, 'value', 'text');
                                    var fontNameContent = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(e.parent.fontFamily.default) ? fontNameItems[0].text : e.parent.fontFamily.default, name_1 = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(result) ? fontNameContent : result;
                                    e.tbElements[j].title = name_1, dropDown.fontNameDropDown.content = '<span style="display: inline-flex;width:' + e.parent.fontFamily.width + '" ><span class="e-rte-dropdown-btn-text ' + e.parent.cssClass + '">' + name_1 + '</span></span>', dropDown.fontNameDropDown.dataBind();
                                    break;
                                case 'fontsize':
                                    if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(dropDown.fontSizeDropDown) || !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(dropDown.fontSizeDropDown) && dropDown.fontSizeDropDown.isDestroyed) break;
                                    var fontSizeItems = e.parent.fontSize.items, fontSizeContent = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(e.parent.fontSize.default) ? fontSizeItems[1].text : e.parent.fontSize.default;
                                    result = getDropDownValue(fontSizeItems, '' === value ? fontSizeContent.replace(/\s/g, '') : value, 'value', 'text'), dropDown.fontSizeDropDown.content = '<span style="display: inline-flex;width:' + e.parent.fontSize.width + '" ><span class="e-rte-dropdown-btn-text ' + e.parent.cssClass + '">' + getFormattedFontSize(result) + '</span></span>', dropDown.fontSizeDropDown.dataBind();
                            }
                        }
                    }
                }
            }
            /**
 * @param {string} items - specifies the string value
 * @returns {string[]} - returns the array value
 * @hidden
 */ function getCollection(items) {
                return 'object' == typeof items ? items : [
                    items
                ];
            }
            /**
 * @param {string[]} items - specifies the array of string value
 * @param {IToolbarItemModel} toolbarItems - specifies the tool bar model
 * @returns {number} - returns the number
 * @hidden
 */ function getTBarItemsIndex(items, toolbarItems) {
                for(var itemsIndex = [], i = 0; i < items.length; i++)for(var j = 0; j < toolbarItems.length; j++)if ('Separator' !== toolbarItems[j].type) {
                    if ('OrderedList' === items[i] && 'OL' === toolbarItems[j].subCommand || 'UnorderedList' === items[i] && 'UL' === toolbarItems[j].subCommand || 'InsertCode' === items[i] && 'Pre' === toolbarItems[j].subCommand || 'FileManager' === items[i] && 'File' === toolbarItems[j].subCommand) {
                        itemsIndex.push(j);
                        break;
                    }
                    if ('object' == typeof items[i] && 'Custom' === items[i].command) {
                        itemsIndex.push(i);
                        break;
                    }
                    if (items[i] === toolbarItems[j].subCommand) {
                        itemsIndex.push(j);
                        break;
                    }
                }
                return itemsIndex;
            }
            /**
 * @param {BaseToolbar} baseToolbar - specifies the base
 * @param {boolean} undoRedoStatus - specifies the boolean value
 * @returns {void}
 * @hidden
 */ function updateUndoRedoStatus(baseToolbar, undoRedoStatus) {
                for(var i = 0, trgItems = getTBarItemsIndex(getCollection(undoRedoItems), baseToolbar.toolbarObj.items), tbItems = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .selectAll */ .td)('.' + _base_classes__WEBPACK_IMPORTED_MODULE_2__ /* .CLS_TB_ITEM */ .Xh, baseToolbar.toolbarObj.element), keys = Object.keys(undoRedoStatus), _i = 0; _i < keys.length; _i++){
                    var key = keys[_i], target = tbItems[trgItems[i]];
                    target && baseToolbar.toolbarObj.enableItems(target, undoRedoStatus[key]), i++;
                }
            }
            /**
 * To dispatch the event manually
 *
 * @param {Element} element - specifies the element.
 * @param {string} type - specifies the string type.
 * @returns {void}
 * @hidden

 */ function dispatchEvent(element, type) {
                var evt = document.createEvent('HTMLEvents');
                evt.initEvent(type, !1, !0), element.dispatchEvent(evt);
            }
            /**
 * To parse the HTML
 *
 * @param {string} value - specifies the string value
 * @returns {DocumentFragment} - returns the document
 * @hidden
 */ function parseHtml(value) {
                var tempNode = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .createElement */ .az)('template');
                return (tempNode.innerHTML = value, tempNode.content instanceof DocumentFragment) ? tempNode.content : document.createRange().createContextualFragment(value);
            }
            /**
 * @param {IToolsItemConfigs} obj - specifies the configuration
 * @returns {void}
 * @hidden
 */ function toObjectLowerCase(obj) {
                for(var convertedValue = {}, keys = Object.keys(obj), i = 0; i < Object.keys(obj).length; i++)convertedValue[keys[i].toLocaleLowerCase()] = obj[keys[i]];
                return convertedValue;
            }
            /**
 * @param {string} value - specifies the string value
 * @param {IRichTextEditor} rteObj - specifies the rte object
 * @returns {string} - returns the string
 * @hidden
 */ function getEditValue(value, rteObj) {
                var val;
                return null !== value && '' !== value ? (val = rteObj.enableHtmlEncode ? updateTextNode(decode(value), rteObj) : updateTextNode(value, rteObj), rteObj.setProperties({
                    value: val
                }, !0)) : val = 'DIV' === rteObj.enterKey ? rteObj.enableHtmlEncode ? '&lt;div&gt;&lt;br/&gt;&lt;/div&gt;' : '<div><br/></div>' : 'BR' === rteObj.enterKey ? rteObj.enableHtmlEncode ? '&lt;br/&gt;' : '<br/>' : rteObj.enableHtmlEncode ? '&lt;p&gt;&lt;br/&gt;&lt;/p&gt;' : '<p><br/></p>', val;
            }
            /**
 * @param {string} value - specifies the value
 * @param {IRichTextEditor} rteObj - specifies the rich text editor instance.
 * @returns {string} - returns the string
 * @hidden
 */ function updateTextNode(value, rteObj) {
                var tempNode = document.createElement('div'), resultElm = document.createElement('div'), childNodes = tempNode.childNodes;
                if (tempNode.innerHTML = value, tempNode.setAttribute('class', 'tempDiv'), childNodes.length > 0) {
                    for(var isPreviousInlineElem = void 0, previousParent = void 0, insertElem = void 0; tempNode.firstChild;){
                        for(var emptyBlockElem = tempNode.querySelectorAll(_base_constant__WEBPACK_IMPORTED_MODULE_4__ /* .blockEmptyNodes */ .F7), i = 0; i < emptyBlockElem.length; i++)emptyBlockElem[i].innerHTML = '<br>';
                        for(var emptyInlineElem = tempNode.querySelectorAll(_base_constant__WEBPACK_IMPORTED_MODULE_4__ /* .inlineEmptyNodes */ .KS), i = 0; i < emptyInlineElem.length; i++)emptyInlineElem[i].innerHTML = '&ZeroWidthSpace;';
                        'BR' !== rteObj.enterKey && ('#text' === tempNode.firstChild.nodeName && (0 > tempNode.firstChild.textContent.indexOf('\n') || '' !== tempNode.firstChild.textContent.trim()) || inlineNode.indexOf(tempNode.firstChild.nodeName.toLocaleLowerCase()) >= 0) ? (isPreviousInlineElem ? previousParent.appendChild(tempNode.firstChild) : (insertElem = 'DIV' === rteObj.enterKey ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .createElement */ .az)('div') : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .createElement */ .az)('p'), resultElm.appendChild(insertElem), insertElem.appendChild(tempNode.firstChild)), previousParent = insertElem, isPreviousInlineElem = !0) : '#text' === tempNode.firstChild.nodeName && ('\n' === tempNode.firstChild.textContent || tempNode.firstChild.textContent.indexOf('\n') >= 0 && '' === tempNode.firstChild.textContent.trim()) ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(tempNode.firstChild) : (resultElm.appendChild(tempNode.firstChild), isPreviousInlineElem = !1);
                    }
                    for(var imageElm = resultElm.querySelectorAll('img'), i = 0; i < imageElm.length; i++)imageElm[i].classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_2__ /* .CLS_RTE_IMAGE */ .Qk) || imageElm[i].classList.add(_base_classes__WEBPACK_IMPORTED_MODULE_2__ /* .CLS_RTE_IMAGE */ .Qk), imageElm[i].classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_2__ /* .CLS_IMGINLINE */ .Em) || imageElm[i].classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_2__ /* .CLS_IMGBREAK */ .Bn) || imageElm[i].classList.add(_base_classes__WEBPACK_IMPORTED_MODULE_2__ /* .CLS_IMGINLINE */ .Em);
                }
                return resultElm.innerHTML;
            }
            /**
 * @param {IRichTextEditor} rteObj - specifies the rte object
 * @returns {string} - returns the value based on enter configuration.
 * @hidden
 */ function getDefaultValue(rteObj) {
                return 'DIV' === rteObj.enterKey ? rteObj.enableHtmlEncode ? '&lt;div&gt;&lt;br/&gt;&lt;/div&gt;' : '<div><br/></div>' : 'BR' === rteObj.enterKey ? rteObj.enableHtmlEncode ? '&lt;br/&gt;' : '<br/>' : rteObj.enableHtmlEncode ? '&lt;p&gt;&lt;br/&gt;&lt;/p&gt;' : '<p><br/></p>';
            }
            /**
 * @param {string} value - specifies the value
 * @returns {boolean} - returns the boolean value
 * @hidden
 */ function isEditableValueEmpty(value) {
                return '<p><br></p>' === value || '&lt;p&gt;&lt;br&gt;&lt;/p&gt;' === value || '<div><br></div>' === value || '&lt;div&gt;&lt;br&gt;&lt;/div&gt;' === value || '<br>' === value || '&lt;br&gt;' === value || '' === value;
            }
            /**
 * @param {string} value - specifies the string value
 * @returns {string} - returns the string
 * @hidden
 */ function decode(value) {
                return value.replace(/&amp;/g, '&').replace(/&amp;lt;/g, '<').replace(/&lt;/g, '<').replace(/&amp;gt;/g, '>').replace(/&gt;/g, '>').replace(/&nbsp;/g, ' ').replace(/&amp;nbsp;/g, ' ').replace(/&quot;/g, '');
            }
            /**
 * @param {string} value - specifies the string value
 * @param {IRichTextEditor} parent - specifies the rte
 * @returns {string} - returns the string value
 * @hidden
 */ function sanitizeHelper(value, parent) {
                if (parent.enableHtmlSanitizer) {
                    var item = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .SanitizeHtmlHelper.beforeSanitize */ .pJ.beforeSanitize();
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .extend */ .l7)(item, item, {
                        cancel: !1,
                        helper: null
                    }), parent.trigger('beforeSanitizeHtml', item), item.cancel && !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(item.helper) ? value = item.helper(value) : item.cancel || (value = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .SanitizeHtmlHelper.serializeValue */ .pJ.serializeValue(item, value));
                }
                return value;
            }
            /**
 * @param {string} dataUrl - specifies the string value
 * @returns {BaseToolbar} - returns the value
 * @hidden
 */ //Converting the base64 url to blob
            function convertToBlob(dataUrl) {
                for(var arr = dataUrl.split(','), mime = arr[0].match(/:(.*?);/)[1], bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n); n--;)u8arr[n] = bstr.charCodeAt(n);
                return new Blob([
                    u8arr
                ], {
                    type: mime
                });
            }
            /**
 * @param {IRichTextEditor} self - specifies the rte
 * @param {string} localeItems - specifies the locale items
 * @param {IDropDownItemModel} item - specifies the dropdown item
 * @returns {string} - returns the value
 * @hidden
 */ function getLocaleFontFormat(self1, localeItems, item) {
                for(var i = 0; localeItems.length > i; i++)if (localeItems[i].value === item.value || localeItems[i].value === item.subCommand) return self1.localeObj.getConstant(localeItems[i].locale);
                return item.text;
            }
            /**
 * @param {IRichTextEditor} self - specifies the rte
 * @returns {void}
 * @hidden
 */ function updateDropDownFontFormatLocale(self1) {
                _models_items__WEBPACK_IMPORTED_MODULE_3__ /* .fontFamily.forEach */ .I8.forEach(function(item, i) {
                    _models_items__WEBPACK_IMPORTED_MODULE_3__ /* .fontFamily */ .I8[i].text = getLocaleFontFormat(self1, _models_default_locale__WEBPACK_IMPORTED_MODULE_1__ /* .fontNameLocale */ .Jk, _models_items__WEBPACK_IMPORTED_MODULE_3__ /* .fontFamily */ .I8[i]);
                }), _models_items__WEBPACK_IMPORTED_MODULE_3__ /* .formatItems.forEach */ .gk.forEach(function(item, i) {
                    _models_items__WEBPACK_IMPORTED_MODULE_3__ /* .formatItems */ .gk[i].text = getLocaleFontFormat(self1, _models_default_locale__WEBPACK_IMPORTED_MODULE_1__ /* .formatsLocale */ .Sv, _models_items__WEBPACK_IMPORTED_MODULE_3__ /* .formatItems */ .gk[i]);
                }), _models_items__WEBPACK_IMPORTED_MODULE_3__ /* .numberFormatList.forEach */ .UP.forEach(function(item, i) {
                    _models_items__WEBPACK_IMPORTED_MODULE_3__ /* .numberFormatList */ .UP[i].text = getLocaleFontFormat(self1, _models_default_locale__WEBPACK_IMPORTED_MODULE_1__ /* .numberFormatListLocale */ .Jz, _models_items__WEBPACK_IMPORTED_MODULE_3__ /* .numberFormatList */ .UP[i]);
                }), _models_items__WEBPACK_IMPORTED_MODULE_3__ /* .bulletFormatList.forEach */ .Ju.forEach(function(item, i) {
                    _models_items__WEBPACK_IMPORTED_MODULE_3__ /* .bulletFormatList */ .Ju[i].text = getLocaleFontFormat(self1, _models_default_locale__WEBPACK_IMPORTED_MODULE_1__ /* .bulletFormatListLocale */ .zD, _models_items__WEBPACK_IMPORTED_MODULE_3__ /* .bulletFormatList */ .Ju[i]);
                });
            }
        /***/ },
        /***/ 8491: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ Jk: function() {
                    return /* binding */ fontNameLocale;
                },
                /* harmony export */ Jz: function() {
                    return /* binding */ numberFormatListLocale;
                },
                /* harmony export */ Sv: function() {
                    return /* binding */ formatsLocale;
                },
                /* harmony export */ Y7: function() {
                    return /* binding */ toolsLocale;
                },
                /* harmony export */ al: function() {
                    return /* binding */ defaultLocale;
                },
                /* harmony export */ zD: function() {
                    return /* binding */ bulletFormatListLocale;
                }
            });
            /* eslint-disable */ /**
 * Export default locale
 */ var defaultLocale = {
                alignments: 'Alignments',
                justifyLeft: 'Align Left',
                justifyCenter: 'Align Center',
                justifyRight: 'Align Right',
                justifyFull: 'Align Justify',
                fontName: 'Font Name',
                fontSize: 'Font Size',
                fontColor: 'Font Color',
                backgroundColor: 'Background Color',
                bold: 'Bold',
                italic: 'Italic',
                underline: 'Underline',
                strikethrough: 'Strikethrough',
                clearFormat: 'Clear Format',
                clearAll: 'Clear All',
                cut: 'Cut',
                copy: 'Copy',
                paste: 'Paste',
                unorderedList: 'Bulleted List',
                orderedList: 'Numbered List',
                indent: 'Increase Indent',
                outdent: 'Decrease Indent',
                undo: 'Undo',
                redo: 'Redo',
                superscript: 'Superscript',
                subscript: 'Subscript',
                createLink: 'Insert Link',
                openLink: 'Open Link',
                editLink: 'Edit Link',
                removeLink: 'Remove Link',
                image: 'Insert Image',
                replace: 'Replace',
                align: 'Align',
                caption: 'Image Caption',
                remove: 'Remove',
                insertLink: 'Insert Link',
                display: 'Display',
                altText: 'Alternative Text',
                dimension: 'Change Size',
                fullscreen: 'Maximize',
                maximize: 'Maximize',
                minimize: 'Minimize',
                lowerCase: 'Lower Case',
                upperCase: 'Upper Case',
                print: 'Print',
                formats: 'Formats',
                numberFormatList: 'Number Format List',
                bulletFormatList: 'Bullet Format List',
                sourcecode: 'Code View',
                preview: 'Preview',
                viewside: 'ViewSide',
                insertCode: 'Insert Code',
                linkText: 'Display Text',
                linkTooltipLabel: 'Title',
                linkWebUrl: 'Web Address',
                linkTitle: 'Enter a title',
                linkurl: 'http://example.com',
                linkOpenInNewWindow: 'Open Link in New Window',
                linkHeader: 'Insert Link',
                dialogInsert: 'Insert',
                dialogCancel: 'Cancel',
                dialogUpdate: 'Update',
                imageHeader: 'Insert Image',
                imageLinkHeader: 'You can also provide a link from the web',
                mdimageLink: 'Please provide a URL for your image',
                imageUploadMessage: 'Drop image here or browse to upload',
                imageDeviceUploadMessage: 'Click here to upload',
                imageAlternateText: 'Alternate Text',
                alternateHeader: 'Alternative Text',
                browse: 'Browse',
                imageUrl: 'http://example.com/image.png',
                imageCaption: 'Caption',
                imageSizeHeader: 'Image Size',
                imageHeight: 'Height',
                imageWidth: 'Width',
                textPlaceholder: 'Enter Text',
                inserttablebtn: 'Insert Table',
                tabledialogHeader: 'Insert Table',
                tableWidth: 'Width',
                cellpadding: 'Cell Padding',
                cellspacing: 'Cell Spacing',
                columns: 'Number of columns',
                rows: 'Number of rows',
                tableRows: 'Table Rows',
                tableColumns: 'Table Columns',
                tableCellHorizontalAlign: 'Table Cell Horizontal Align',
                tableCellVerticalAlign: 'Table Cell Vertical Align',
                createTable: 'Create Table',
                removeTable: 'Remove Table',
                tableHeader: 'Table Header',
                tableRemove: 'Table Remove',
                tableCellBackground: 'Table Cell Background',
                tableEditProperties: 'Table Edit Properties',
                styles: 'Styles',
                insertColumnLeft: 'Insert Column Left',
                insertColumnRight: 'Insert Column Right',
                deleteColumn: 'Delete Column',
                insertRowBefore: 'Insert Row Before',
                insertRowAfter: 'Insert Row After',
                deleteRow: 'Delete Row',
                tableEditHeader: 'Edit Table',
                TableHeadingText: 'Heading',
                TableColText: 'Col',
                imageInsertLinkHeader: 'Insert Link',
                editImageHeader: 'Edit Image',
                alignmentsDropDownLeft: 'Align Left',
                alignmentsDropDownCenter: 'Align Center',
                alignmentsDropDownRight: 'Align Right',
                alignmentsDropDownJustify: 'Align Justify',
                imageDisplayDropDownInline: 'Inline',
                imageDisplayDropDownBreak: 'Break',
                tableInsertRowDropDownBefore: 'Insert row before',
                tableInsertRowDropDownAfter: 'Insert row after',
                tableInsertRowDropDownDelete: 'Delete row',
                tableInsertColumnDropDownLeft: 'Insert column left',
                tableInsertColumnDropDownRight: 'Insert column right',
                tableInsertColumnDropDownDelete: 'Delete column',
                tableVerticalAlignDropDownTop: 'Align Top',
                tableVerticalAlignDropDownMiddle: 'Align Middle',
                tableVerticalAlignDropDownBottom: 'Align Bottom',
                tableStylesDropDownDashedBorder: 'Dashed Borders',
                tableStylesDropDownAlternateRows: 'Alternate Rows',
                pasteFormat: 'Paste Format',
                pasteFormatContent: 'Choose the formatting action',
                plainText: 'Plain Text',
                cleanFormat: 'Clean',
                keepFormat: 'Keep',
                pasteDialogOk: 'OK',
                pasteDialogCancel: 'Cancel',
                fileManager: 'File Manager',
                fileDialogHeader: 'File Browser',
                formatsDropDownParagraph: 'Paragraph',
                formatsDropDownCode: 'Code',
                formatsDropDownQuotation: 'Quotation',
                formatsDropDownHeading1: 'Heading 1',
                formatsDropDownHeading2: 'Heading 2',
                formatsDropDownHeading3: 'Heading 3',
                formatsDropDownHeading4: 'Heading 4',
                fontNameSegoeUI: 'Segoe UI',
                fontNameArial: 'Arial',
                fontNameGeorgia: 'Georgia',
                fontNameImpact: 'Impact',
                fontNameTahoma: 'Tahoma',
                fontNameTimesNewRoman: 'Times New Roman',
                fontNameVerdana: 'Verdana',
                numberFormatListNumber: 'Number',
                numberFormatListLowerAlpha: 'LowerAlpha',
                numberFormatListUpperAlpha: 'UpperAlpha',
                numberFormatListLowerRoman: 'LowerRoman',
                numberFormatListUpperRoman: 'UpperRoman',
                numberFormatListLowerGreek: 'LowerGreek',
                bulletFormatListDisc: 'Disc',
                bulletFormatListCircle: 'Circle',
                bulletFormatListSquare: 'Square',
                numberFormatListNone: 'None',
                bulletFormatListNone: 'None'
            }, toolsLocale = {
                alignments: 'alignments',
                justifyleft: 'justifyLeft',
                justifycenter: 'justifyCenter',
                justifyright: 'justifyRight',
                justifyfull: 'justifyFull',
                fontname: 'fontName',
                fontsize: 'fontSize',
                fontcolor: 'fontColor',
                backgroundcolor: 'backgroundColor',
                bold: 'bold',
                italic: 'italic',
                underline: 'underline',
                strikethrough: 'strikethrough',
                clearformat: 'clearFormat',
                clearall: 'clearAll',
                cut: 'cut',
                copy: 'copy',
                paste: 'paste',
                unorderedlist: 'unorderedList',
                orderedlist: 'orderedList',
                indent: 'indent',
                outdent: 'outdent',
                undo: 'undo',
                redo: 'redo',
                superscript: 'superscript',
                subscript: 'subscript',
                createlink: 'createLink',
                openlink: 'openLink',
                editlink: 'editLink',
                removelink: 'removeLink',
                openimagelink: 'openLink',
                editimagelink: 'editLink',
                removeimagelink: 'removeLink',
                image: 'image',
                replace: 'replace',
                align: 'align',
                caption: 'caption',
                remove: 'remove',
                insertlink: 'insertLink',
                display: 'display',
                alttext: 'altText',
                dimension: 'dimension',
                fullscreen: 'fullscreen',
                maximize: 'maximize',
                minimize: 'minimize',
                lowercase: 'lowerCase',
                uppercase: 'upperCase',
                print: 'print',
                formats: 'formats',
                numberformatlist: 'numberFormatList',
                bulletformatlist: 'bulletFormatList',
                sourcecode: 'sourcecode',
                preview: 'preview',
                viewside: 'viewside',
                insertcode: 'insertCode',
                tablerows: 'tableRows',
                tablecolumns: 'tableColumns',
                tablecellhorizontalalign: 'tableCellHorizontalAlign',
                tablecellverticalalign: 'tableCellVerticalAlign',
                createtable: 'createTable',
                removetable: 'removeTable',
                tableheader: 'tableHeader',
                tableremove: 'tableRemove',
                tablecellbackground: 'tableCellBackground',
                tableeditproperties: 'tableEditProperties',
                styles: 'styles',
                insertcolumnleft: 'insertColumnLeft',
                insertcolumnright: 'insertColumnRight',
                deletecolumn: 'deleteColumn',
                aligntop: 'AlignTop',
                alignmiddle: 'AlignMiddle',
                alignbottom: 'AlignBottom',
                insertrowbefore: 'insertRowBefore',
                insertrowafter: 'insertRowAfter',
                deleterow: 'deleteRow'
            }, fontNameLocale = [
                {
                    locale: 'fontNameSegoeUI',
                    value: 'Segoe UI'
                },
                {
                    locale: 'fontNameArial',
                    value: 'Arial,Helvetica,sans-serif'
                },
                {
                    locale: 'fontNameGeorgia',
                    value: 'Georgia,serif'
                },
                {
                    locale: 'fontNameImpact',
                    value: 'Impact,Charcoal,sans-serif'
                },
                {
                    locale: 'fontNameTahoma',
                    value: 'Tahoma,Geneva,sans-serif'
                },
                {
                    locale: 'fontNameTimesNewRoman',
                    value: 'Times New Roman,Times,serif'
                },
                {
                    locale: 'fontNameVerdana',
                    value: 'Verdana,Geneva,sans-serif'
                }
            ], formatsLocale = [
                {
                    locale: 'formatsDropDownParagraph',
                    value: 'P'
                },
                {
                    locale: 'formatsDropDownCode',
                    value: 'Pre'
                },
                {
                    locale: 'formatsDropDownQuotation',
                    value: 'BlockQuote'
                },
                {
                    locale: 'formatsDropDownHeading1',
                    value: 'H1'
                },
                {
                    locale: 'formatsDropDownHeading2',
                    value: 'H2'
                },
                {
                    locale: 'formatsDropDownHeading3',
                    value: 'H3'
                },
                {
                    locale: 'formatsDropDownHeading4',
                    value: 'H4'
                }
            ], numberFormatListLocale = [
                {
                    locale: 'numberFormatListNone',
                    value: 'none'
                },
                {
                    locale: 'numberFormatListNumber',
                    value: 'decimal'
                },
                {
                    locale: 'numberFormatListLowerAlpha',
                    value: 'lower-alpha'
                },
                {
                    locale: 'numberFormatListUpperAlpha',
                    value: 'upper-alpha'
                },
                {
                    locale: 'numberFormatListLowerRoman',
                    value: 'lower-roman'
                },
                {
                    locale: 'numberFormatListUpperRoman',
                    value: 'upper-roman'
                },
                {
                    locale: 'numberFormatListLowerGreek',
                    value: 'lower-greek'
                }
            ], bulletFormatListLocale = [
                {
                    locale: 'bulletFormatListNone',
                    value: 'none'
                },
                {
                    locale: 'bulletFormatListDisc',
                    value: 'disc'
                },
                {
                    locale: 'bulletFormatListCircle',
                    value: 'circle'
                },
                {
                    locale: 'bulletFormatListSquare',
                    value: 'square'
                }
            ];
        /***/ },
        /***/ 3276: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ AW: function() {
                    return /* binding */ tableColumnsItems;
                },
                /* harmony export */ B3: function() {
                    return /* binding */ fontColor;
                },
                /* harmony export */ Cz: function() {
                    return /* binding */ backgroundColor;
                },
                /* harmony export */ D1: function() {
                    return /* binding */ tableRowsItems;
                },
                /* harmony export */ Fg: function() {
                    return /* binding */ alignmentItems;
                },
                /* harmony export */ Gf: function() {
                    return /* binding */ predefinedItems;
                },
                /* harmony export */ I8: function() {
                    return /* binding */ fontFamily;
                },
                /* harmony export */ JB: function() {
                    return /* binding */ fontSize;
                },
                /* harmony export */ Ju: function() {
                    return /* binding */ bulletFormatList;
                },
                /* harmony export */ NO: function() {
                    return /* binding */ imageDisplayItems;
                },
                /* harmony export */ QP: function() {
                    return /* binding */ updateDropDownLocale;
                },
                /* harmony export */ Sz: function() {
                    return /* binding */ tableCellItems;
                },
                /* harmony export */ Tg: function() {
                    return /* binding */ TableCellVerticalAlignItems;
                },
                /* harmony export */ UP: function() {
                    return /* binding */ numberFormatList;
                },
                /* harmony export */ _f: function() {
                    return /* binding */ TableStyleItems;
                },
                /* harmony export */ gk: function() {
                    return /* binding */ formatItems;
                },
                /* harmony export */ rS: function() {
                    return /* binding */ templateItems;
                },
                /* harmony export */ rj: function() {
                    return /* binding */ tools;
                },
                /* harmony export */ ry: function() {
                    return /* binding */ imageAlignItems;
                }
            });
            /* eslint-disable */ /**
 * Export items model
 */ var templateItems = [
                'alignments',
                'formats',
                'fontname',
                'fontsize',
                'fontcolor',
                'backgroundcolor',
                'align',
                'display',
                'tablerows',
                'tablecolumns',
                'tablecell',
                'tablecellhorizontalalign',
                'tablecellverticalalign',
                'styles',
                'numberformatlist',
                'bulletformatlist'
            ], tools = {
                alignments: {
                    id: 'Alignments',
                    icon: 'e-alignments',
                    tooltip: 'Alignments',
                    command: 'Alignments',
                    subCommand: 'Alignments'
                },
                justifyleft: {
                    id: 'JustifyLeft',
                    icon: 'e-justify-left',
                    tooltip: 'JustifyLeft',
                    command: 'Alignments',
                    subCommand: 'JustifyLeft'
                },
                justifycenter: {
                    id: 'JustifyCenter',
                    icon: 'e-justify-center',
                    tooltip: 'JustifyCenter',
                    command: 'Alignments',
                    subCommand: 'JustifyCenter'
                },
                justifyright: {
                    id: 'JustifyRight',
                    icon: 'e-justify-right',
                    tooltip: 'JustifyRight',
                    command: 'Alignments',
                    subCommand: 'JustifyRight'
                },
                justifyfull: {
                    id: 'JustifyFull',
                    icon: 'e-justify-full',
                    tooltip: 'JustifyFull',
                    command: 'Alignments',
                    subCommand: 'JustifyFull'
                },
                fontname: {
                    id: 'FontName',
                    icon: 'e-font-name',
                    tooltip: 'Font Name',
                    command: 'Font',
                    subCommand: 'FontName'
                },
                fontsize: {
                    id: 'FontSize',
                    icon: 'e-font-size',
                    tooltip: 'Font Size',
                    command: 'Font',
                    subCommand: 'FontSize'
                },
                fontcolor: {
                    id: 'FontColor',
                    icon: 'e-font-color',
                    tooltip: 'Font Color',
                    command: 'Font',
                    subCommand: 'FontColor',
                    value: '#ff0000ff'
                },
                backgroundcolor: {
                    id: 'BackgroundColor',
                    icon: 'e-background-color',
                    tooltip: 'Background Color',
                    command: 'Font',
                    subCommand: 'BackgroundColor',
                    value: '#ffff00ff'
                },
                bold: {
                    id: 'Bold',
                    icon: 'e-bold',
                    tooltip: 'Bold',
                    command: 'Style',
                    subCommand: 'Bold'
                },
                italic: {
                    id: 'Italic',
                    icon: 'e-italic',
                    tooltip: 'Italic',
                    command: 'Style',
                    subCommand: 'Italic'
                },
                underline: {
                    id: 'Underline',
                    icon: 'e-underline',
                    tooltip: 'Underline',
                    command: 'Style',
                    subCommand: 'Underline'
                },
                strikethrough: {
                    id: 'StrikeThrough',
                    icon: 'e-strike-through',
                    tooltip: 'StrikeThrough',
                    command: 'Style',
                    subCommand: 'StrikeThrough'
                },
                clearformat: {
                    id: 'ClearFormat',
                    icon: 'e-clear-format',
                    tooltip: 'Clear Format',
                    command: 'Clear',
                    subCommand: 'ClearFormat'
                },
                clearall: {
                    id: 'ClearAll',
                    icon: 'e-clear-all',
                    tooltip: 'Clear All',
                    command: 'Clear',
                    subCommand: 'ClearAll'
                },
                cut: {
                    id: 'Cut',
                    icon: 'e-cut',
                    tooltip: 'Cut',
                    command: 'ClipBoard',
                    subCommand: 'Cut'
                },
                copy: {
                    id: 'Copy',
                    icon: 'e-copy',
                    tooltip: 'Copy',
                    command: 'ClipBoard',
                    subCommand: 'Copy'
                },
                paste: {
                    id: 'Paste',
                    icon: 'e-paste',
                    tooltip: 'Paste',
                    command: 'ClipBoard',
                    subCommand: 'Paste'
                },
                unorderedlist: {
                    id: 'UnorderedList',
                    icon: 'e-unorder-list',
                    tooltip: 'Bulleted List',
                    command: 'Lists',
                    subCommand: 'UL'
                },
                orderedlist: {
                    id: 'OrderedList',
                    icon: 'e-order-list',
                    tooltip: 'Numbered List',
                    command: 'Lists',
                    subCommand: 'OL'
                },
                numberformatlist: {
                    id: 'NumberFormatList',
                    icon: 'e-order-list',
                    tooltip: 'Number Format List',
                    command: 'NumberFormatList',
                    subCommand: 'NumberFormatList'
                },
                bulletformatlist: {
                    id: 'BulletFormatList',
                    icon: 'e-unorder-list',
                    tooltip: 'Bullet Format List',
                    command: 'BulletFormatList',
                    subCommand: 'BulletFormatList'
                },
                indent: {
                    id: 'Indent',
                    icon: 'e-indent',
                    tooltip: 'Increase Indent',
                    command: 'Indents',
                    subCommand: 'Indent'
                },
                outdent: {
                    id: 'Outdent',
                    icon: 'e-outdent',
                    tooltip: 'Decrease Indent',
                    command: 'Indents',
                    subCommand: 'Outdent'
                },
                undo: {
                    id: 'Undo',
                    icon: 'e-undo',
                    tooltip: 'Undo',
                    command: 'Actions',
                    subCommand: 'Undo'
                },
                redo: {
                    id: 'Redo',
                    icon: 'e-redo',
                    tooltip: 'Redo',
                    command: 'Actions',
                    subCommand: 'Redo'
                },
                superscript: {
                    id: 'SuperScript',
                    icon: 'e-super-script',
                    tooltip: 'Superscript',
                    command: 'Effects',
                    subCommand: 'SuperScript'
                },
                subscript: {
                    id: 'SubScript',
                    icon: 'e-sub-script',
                    tooltip: 'Subscript',
                    command: 'Effects',
                    subCommand: 'SubScript'
                },
                createlink: {
                    id: 'CreateLink',
                    icon: 'e-create-link',
                    tooltip: 'Insert Hyperlink',
                    command: 'Links',
                    subCommand: 'CreateLink'
                },
                openlink: {
                    id: 'OpenLink',
                    icon: 'e-open-link',
                    tooltip: 'Open Link',
                    command: 'Links',
                    subCommand: 'OpenLink'
                },
                editlink: {
                    id: 'EditLink',
                    icon: 'e-edit-link',
                    tooltip: 'Edit Link',
                    command: 'Links',
                    subCommand: 'EditLink'
                },
                removelink: {
                    id: 'RemoveLink',
                    icon: 'e-remove-link',
                    tooltip: 'Remove Link',
                    command: 'Links',
                    subCommand: 'RemoveLink'
                },
                image: {
                    id: 'Image',
                    icon: 'e-image',
                    tooltip: 'Insert Image',
                    command: 'Images',
                    subCommand: 'Image'
                },
                filemanager: {
                    id: 'FileManager',
                    icon: 'e-rte-file-manager',
                    tooltip: 'File Manager',
                    command: 'Files',
                    subCommand: 'File'
                },
                createtable: {
                    id: 'CreateTable',
                    icon: 'e-create-table',
                    tooltip: 'Create Table',
                    command: 'Table',
                    subCommand: 'CreateTable'
                },
                removetable: {
                    id: 'removeTable',
                    icon: 'e-remove-table',
                    tooltip: 'Remove Table',
                    command: 'removeTable',
                    subCommand: 'removeTable'
                },
                replace: {
                    id: 'Replace',
                    icon: 'e-replace',
                    tooltip: 'Replace',
                    command: 'Images',
                    subCommand: 'Replace'
                },
                align: {
                    id: 'Align',
                    icon: 'e-align',
                    tooltip: 'Align',
                    command: 'Images',
                    subCommand: 'Align'
                },
                caption: {
                    id: 'Caption',
                    icon: 'e-caption',
                    tooltip: 'Image Caption',
                    command: 'Images',
                    subCommand: 'Caption'
                },
                remove: {
                    id: 'Remove',
                    icon: 'e-remove',
                    tooltip: 'Remove',
                    command: 'Images',
                    subCommand: 'Remove'
                },
                openimagelink: {
                    id: 'OpenImageLink',
                    icon: 'e-open-link',
                    tooltip: 'Open Link',
                    command: 'Images',
                    subCommand: 'OpenImageLink'
                },
                editimagelink: {
                    id: 'EditImageLink',
                    icon: 'e-edit-link',
                    tooltip: 'Edit Link',
                    command: 'Images',
                    subCommand: 'EditImageLink'
                },
                removeimagelink: {
                    id: 'RemoveImageLink',
                    icon: 'e-remove-link',
                    tooltip: 'Remove Link',
                    command: 'Images',
                    subCommand: 'RemoveImageLink'
                },
                insertlink: {
                    id: 'InsertLink',
                    icon: 'e-insert-link',
                    tooltip: 'Insert Link',
                    command: 'Images',
                    subCommand: 'InsertLink'
                },
                display: {
                    id: 'Display',
                    icon: 'e-display',
                    tooltip: 'Display',
                    command: 'Images',
                    subCommand: 'Display'
                },
                alttext: {
                    id: 'AltText',
                    icon: 'e-alt-text',
                    tooltip: 'Alternative Text',
                    command: 'Images',
                    subCommand: 'AltText'
                },
                dimension: {
                    id: 'Dimension',
                    icon: 'e-img-dimension',
                    tooltip: 'Change Size',
                    command: 'Images',
                    subCommand: 'Dimension'
                },
                fullscreen: {
                    id: 'Maximize',
                    icon: 'e-maximize',
                    tooltip: 'Maximize',
                    command: 'View',
                    subCommand: 'Maximize'
                },
                maximize: {
                    id: 'Maximize',
                    icon: 'e-maximize',
                    tooltip: 'Maximize',
                    command: 'FullScreen',
                    subCommand: 'Maximize'
                },
                minimize: {
                    id: 'Minimize',
                    icon: 'e-minimize',
                    tooltip: 'Minimize',
                    command: 'FullScreen',
                    subCommand: 'Minimize'
                },
                lowercase: {
                    id: 'LowerCase',
                    icon: 'e-lower-case',
                    tooltip: 'Lower Case',
                    command: 'Casing',
                    subCommand: 'LowerCase'
                },
                uppercase: {
                    id: 'UpperCase',
                    icon: 'e-upper-case',
                    tooltip: 'Upper Case',
                    command: 'Casing',
                    subCommand: 'UpperCase'
                },
                print: {
                    id: 'Print',
                    icon: 'e-print',
                    tooltip: 'Print',
                    command: 'Print',
                    subCommand: 'Print'
                },
                formats: {
                    id: 'Formats',
                    icon: 'e-formats',
                    tooltip: 'Formats',
                    command: 'Formats',
                    subCommand: 'Formats'
                },
                sourcecode: {
                    id: 'SourceCode',
                    icon: 'e-source-code',
                    tooltip: 'Source Code',
                    command: 'SourceCode',
                    subCommand: 'SourceCode'
                },
                preview: {
                    id: 'Preview',
                    icon: 'e-preview',
                    tooltip: 'Preview',
                    command: 'Preview',
                    subCommand: 'Preview'
                },
                viewside: {
                    id: 'ViewSide',
                    icon: 'e-view-side',
                    tooltip: 'ViewSide',
                    command: 'ViewSide',
                    subCommand: 'ViewSide'
                },
                insertcode: {
                    id: 'InsertCode',
                    icon: 'e-insert-code',
                    tooltip: 'Insert Code',
                    command: 'Formats',
                    subCommand: 'Pre'
                },
                tableheader: {
                    id: 'TableHeader',
                    icon: 'e-table-header',
                    tooltip: 'Table Header',
                    command: 'Table',
                    subCommand: 'TableHeader'
                },
                tableremove: {
                    id: 'TableRemove',
                    icon: 'e-table-remove',
                    tooltip: 'Table Remove',
                    command: 'Table',
                    subCommand: 'TableRemove'
                },
                tablerows: {
                    id: 'TableRows',
                    icon: 'e-table-rows',
                    tooltip: 'Table Rows',
                    command: 'Table',
                    subCommand: 'TableRows'
                },
                tablecolumns: {
                    id: 'TableColumns',
                    icon: 'e-table-columns',
                    tooltip: 'Table Columns',
                    command: 'Table',
                    subCommand: 'TableColumns'
                },
                tablecell: {
                    id: 'TableCell',
                    icon: 'e-table-cell',
                    tooltip: 'Table Cell',
                    command: 'Table',
                    subCommand: 'TableCell'
                },
                tablecellbackground: {
                    id: 'TableCellBackground',
                    icon: 'e-table-cell-background',
                    tooltip: 'Table Cell Background',
                    command: 'Table',
                    subCommand: 'TableCellBackground'
                },
                tablecellhorizontalalign: {
                    id: 'TableCellHorizontalAlign',
                    icon: 'e-table-cell-horizontalAlign',
                    tooltip: 'Table Cell HorizontalAlign',
                    command: 'Table',
                    subCommand: 'TableCellHorizontalAlign'
                },
                tablecellverticalalign: {
                    id: 'TableCellVerticalAlign',
                    icon: 'e-table-cell-verticalAlign',
                    tooltip: 'Table Cell VerticalAlign',
                    command: 'Table',
                    subCommand: 'TableCellVerticalAlign'
                },
                tableeditproperties: {
                    id: 'TableEditProperties',
                    icon: 'e-table-edit-properties',
                    tooltip: 'Table Edit Properties',
                    command: 'Table',
                    subCommand: 'TableEditProperties'
                },
                styles: {
                    id: 'Styles',
                    icon: 'e-table-styles',
                    tooltip: 'Styles',
                    command: 'Table',
                    subCommand: 'Styles'
                }
            }, alignmentLocale = [
                {
                    locale: 'alignmentsDropDownLeft',
                    value: 'JustifyLeft'
                },
                {
                    locale: 'alignmentsDropDownCenter',
                    value: 'JustifyCenter'
                },
                {
                    locale: 'alignmentsDropDownRight',
                    value: 'JustifyRight'
                },
                {
                    locale: 'alignmentsDropDownJustify',
                    value: 'JustifyFull'
                }
            ], alignmentItems = [
                {
                    iconCss: 'e-icons e-justify-left',
                    text: 'Align Left',
                    command: 'Alignments',
                    subCommand: 'JustifyLeft'
                },
                {
                    iconCss: 'e-icons e-justify-center',
                    text: 'Align Center',
                    command: 'Alignments',
                    subCommand: 'JustifyCenter'
                },
                {
                    iconCss: 'e-icons e-justify-right',
                    text: 'Align Right',
                    command: 'Alignments',
                    subCommand: 'JustifyRight'
                },
                {
                    iconCss: 'e-icons e-justify-full',
                    text: 'Align Justify',
                    command: 'Alignments',
                    subCommand: 'JustifyFull'
                }
            ], imageAlignItems = [
                {
                    iconCss: 'e-icons e-justify-left',
                    command: 'Images',
                    subCommand: 'JustifyLeft'
                },
                {
                    iconCss: 'e-icons e-justify-center',
                    command: 'Images',
                    subCommand: 'JustifyCenter'
                },
                {
                    iconCss: 'e-icons e-justify-right',
                    command: 'Images',
                    subCommand: 'JustifyRight'
                }
            ], displayLocale = [
                {
                    locale: 'imageDisplayDropDownInline',
                    value: 'Inline'
                },
                {
                    locale: 'imageDisplayDropDownBreak',
                    value: 'Break'
                }
            ], imageDisplayItems = [
                {
                    text: 'Inline',
                    cssClass: 'e-inline',
                    command: 'Images',
                    subCommand: 'Inline'
                },
                {
                    text: 'Break',
                    cssClass: 'e-break',
                    command: 'Images',
                    subCommand: 'Break'
                }
            ], tableCellItems = [
                {
                    iconCss: 'e-icons e-cell-merge',
                    text: 'Merge cells',
                    command: 'Table',
                    subCommand: 'Merge'
                },
                {
                    iconCss: 'e-icons e-cell-horizontal-split',
                    text: 'Horizontal split',
                    command: 'Table',
                    subCommand: 'HorizontalSplit'
                },
                {
                    iconCss: 'e-icons e-cell-vertical-split',
                    text: 'Vertical split',
                    command: 'Table',
                    subCommand: 'VerticalSplit'
                }
            ], tableRowLocale = [
                {
                    locale: 'tableInsertRowDropDownBefore',
                    value: 'InsertRowBefore'
                },
                {
                    locale: 'tableInsertRowDropDownAfter',
                    value: 'InsertRowAfter'
                },
                {
                    locale: 'tableInsertRowDropDownDelete',
                    value: 'DeleteRow'
                }
            ], tableRowsItems = [
                {
                    iconCss: 'e-icons e-insert-row-before',
                    text: 'Insert row before',
                    command: 'Table',
                    subCommand: 'InsertRowBefore'
                },
                {
                    iconCss: 'e-icons e-insert-row-after',
                    text: 'Insert row after',
                    command: 'Table',
                    subCommand: 'InsertRowAfter'
                },
                {
                    iconCss: 'e-icons e-delete-row',
                    text: 'Delete row',
                    command: 'Table',
                    subCommand: 'DeleteRow'
                }
            ], tableColumnLocale = [
                {
                    locale: 'tableInsertColumnDropDownLeft',
                    value: 'InsertColumnLeft'
                },
                {
                    locale: 'tableInsertColumnDropDownRight',
                    value: 'InsertColumnRight'
                },
                {
                    locale: 'tableInsertColumnDropDownDelete',
                    value: 'DeleteColumn'
                }
            ], tableColumnsItems = [
                {
                    iconCss: 'e-icons e-insert-column-left',
                    text: 'Insert column left',
                    command: 'Table',
                    subCommand: 'InsertColumnLeft'
                },
                {
                    iconCss: 'e-icons e-insert-column-right',
                    text: 'Insert column right',
                    command: 'Table',
                    subCommand: 'InsertColumnRight'
                },
                {
                    iconCss: 'e-icons e-delete-column',
                    text: 'Delete column',
                    command: 'Table',
                    subCommand: 'DeleteColumn'
                }
            ], tableVerticalLocale = [
                {
                    locale: 'tableVerticalAlignDropDownTop',
                    value: 'AlignTop'
                },
                {
                    locale: 'tableVerticalAlignDropDownMiddle',
                    value: 'AlignMiddle'
                },
                {
                    locale: 'tableVerticalAlignDropDownBottom',
                    value: 'AlignBottom'
                }
            ], TableCellVerticalAlignItems = [
                {
                    iconCss: 'e-icons e-align-top',
                    text: 'Align Top',
                    command: 'Table',
                    subCommand: 'AlignTop'
                },
                {
                    iconCss: 'e-icons e-align-middle',
                    text: 'Align Middle',
                    command: 'Table',
                    subCommand: 'AlignMiddle'
                },
                {
                    iconCss: 'e-icons e-align-bottom',
                    text: 'Align Bottom',
                    command: 'Table',
                    subCommand: 'AlignBottom'
                }
            ], tableStyleLocale = [
                {
                    locale: 'tableStylesDropDownDashedBorder',
                    value: 'Dashed'
                },
                {
                    locale: 'tableStylesDropDownAlternateRows',
                    value: 'Alternate'
                }
            ], TableStyleItems = [
                {
                    text: 'Dashed Borders',
                    cssClass: 'e-dashed-borders',
                    command: 'Table',
                    subCommand: 'Dashed'
                },
                {
                    text: 'Alternate Rows',
                    cssClass: 'e-alternate-rows',
                    command: 'Table',
                    subCommand: 'Alternate'
                }
            ], predefinedItems = [
                'Bold',
                'Italic',
                'Underline',
                '|',
                'Formats',
                'Alignments',
                'OrderedList',
                'UnorderedList',
                '|',
                'CreateLink',
                'Image',
                '|',
                'SourceCode',
                'Undo',
                'Redo'
            ], fontFamily = [
                {
                    cssClass: 'e-segoe-ui',
                    text: 'Segoe UI',
                    command: 'Font',
                    subCommand: 'FontName',
                    value: 'Segoe UI'
                },
                {
                    cssClass: 'e-arial',
                    text: 'Arial',
                    command: 'Font',
                    subCommand: 'FontName',
                    value: 'Arial,Helvetica,sans-serif'
                },
                {
                    cssClass: 'e-georgia',
                    text: 'Georgia',
                    command: 'Font',
                    subCommand: 'FontName',
                    value: 'Georgia,serif'
                },
                {
                    cssClass: 'e-impact',
                    text: 'Impact',
                    command: 'Font',
                    subCommand: 'FontName',
                    value: 'Impact,Charcoal,sans-serif'
                },
                {
                    cssClass: 'e-tahoma',
                    text: 'Tahoma',
                    command: 'Font',
                    subCommand: 'FontName',
                    value: 'Tahoma,Geneva,sans-serif'
                },
                {
                    cssClass: 'e-times-new-roman',
                    text: 'Times New Roman',
                    command: 'Font',
                    subCommand: 'FontName',
                    value: 'Times New Roman,Times,serif'
                },
                {
                    cssClass: 'e-verdana',
                    text: 'Verdana',
                    command: 'Font',
                    subCommand: 'FontName',
                    value: 'Verdana,Geneva,sans-serif'
                }
            ], fontSize = [
                {
                    text: '8 pt',
                    value: '8pt'
                },
                {
                    text: '10 pt',
                    value: '10pt'
                },
                {
                    text: '12 pt',
                    value: '12pt'
                },
                {
                    text: '14 pt',
                    value: '14pt'
                },
                {
                    text: '18 pt',
                    value: '18pt'
                },
                {
                    text: '24 pt',
                    value: '24pt'
                },
                {
                    text: '36 pt',
                    value: '36pt'
                }
            ], formatItems = [
                {
                    cssClass: 'e-paragraph',
                    text: 'Paragraph',
                    command: 'Formats',
                    subCommand: 'P',
                    value: 'P'
                },
                {
                    cssClass: 'e-code',
                    text: 'Code',
                    command: 'Formats',
                    subCommand: 'Pre',
                    value: 'Pre'
                },
                {
                    cssClass: 'e-quote',
                    text: 'Quotation',
                    command: 'Formats',
                    subCommand: 'BlockQuote',
                    value: 'BlockQuote'
                },
                {
                    cssClass: 'e-h1',
                    text: 'Heading 1',
                    command: 'Formats',
                    subCommand: 'H1',
                    value: 'H1'
                },
                {
                    cssClass: 'e-h2',
                    text: 'Heading 2',
                    command: 'Formats',
                    subCommand: 'H2',
                    value: 'H2'
                },
                {
                    cssClass: 'e-h3',
                    text: 'Heading 3',
                    command: 'Formats',
                    subCommand: 'H3',
                    value: 'H3'
                },
                {
                    cssClass: 'e-h4',
                    text: 'Heading 4',
                    command: 'Formats',
                    subCommand: 'H4',
                    value: 'H4'
                }
            ], fontColor = {
                Custom: [
                    '',
                    '#000000',
                    '#e7e6e6',
                    '#44546a',
                    '#4472c4',
                    '#ed7d31',
                    '#a5a5a5',
                    '#ffc000',
                    '#70ad47',
                    '#ff0000',
                    '#f2f2f2',
                    '#808080',
                    '#cfcdcd',
                    '#d5dce4',
                    '#d9e2f3',
                    '#fbe4d5',
                    '#ededed',
                    '#fff2cc',
                    '#e2efd9',
                    '#ffcccc',
                    '#d9d9d9',
                    '#595959',
                    '#aeaaaa',
                    '#acb9ca',
                    '#b4c6e7',
                    '#f7caac',
                    '#dbdbdb',
                    '#ffe599',
                    '#c5e0b3',
                    '#ff8080',
                    '#bfbfbf',
                    '#404040',
                    '#747070',
                    '#8496b0',
                    '#8eaadb',
                    '#f4b083',
                    '#c9c9c9',
                    '#ffd966',
                    '#a8d08d',
                    '#ff3333',
                    '#a6a6a6',
                    '#262626',
                    '#3b3838',
                    '#323e4f',
                    '#2f5496',
                    '#c45911',
                    '#7b7b7b',
                    '#bf8f00',
                    '#538135',
                    '#b30000',
                    '#7f7f7f',
                    '#0d0d0d',
                    '#161616',
                    '#212934',
                    '#1f3763',
                    '#823b0b',
                    '#525252',
                    '#7f5f00',
                    '#375623',
                    '#660000'
                ]
            }, backgroundColor = {
                Custom: [
                    '',
                    '#000000',
                    '#ffff00',
                    '#00ff00',
                    '#00ffff',
                    '#0000ff',
                    '#ff0000',
                    '#000080',
                    '#800080',
                    '#996633',
                    '#f2f2f2',
                    '#808080',
                    '#ffffcc',
                    '#b3ffb3',
                    '#ccffff',
                    '#ccccff',
                    '#ffcccc',
                    '#ccccff',
                    '#ff80ff',
                    '#f2e6d9',
                    '#d9d9d9',
                    '#595959',
                    '#ffff80',
                    '#80ff80',
                    '#b3ffff',
                    '#8080ff',
                    '#ff8080',
                    '#8080ff',
                    '#ff00ff',
                    '#dfbf9f',
                    '#bfbfbf',
                    '#404040',
                    '#ffff33',
                    '#33ff33',
                    '#33ffff',
                    '#3333ff',
                    '#ff3333',
                    '#0000b3',
                    '#b300b3',
                    '#c68c53',
                    '#a6a6a6',
                    '#262626',
                    '#e6e600',
                    '#00b300',
                    '#009999',
                    '#000099',
                    '#b30000',
                    '#000066',
                    '#660066',
                    '#86592d',
                    '#7f7f7f',
                    '#0d0d0d',
                    '#999900',
                    '#006600',
                    '#006666',
                    '#000066',
                    '#660000',
                    '#00004d',
                    '#4d004d',
                    '#734d26'
                ]
            }, numberFormatList = [
                {
                    text: 'None',
                    command: 'Lists',
                    subCommand: 'NumberFormatList',
                    value: 'none'
                },
                {
                    text: 'Number',
                    command: 'Lists',
                    subCommand: 'NumberFormatList',
                    value: 'decimal'
                },
                {
                    text: 'Lower Greek',
                    command: 'Lists',
                    subCommand: 'NumberFormatList',
                    value: 'lowerGreek'
                },
                {
                    text: 'Lower Roman',
                    command: 'Lists',
                    subCommand: 'NumberFormatList',
                    value: 'lowerRoman'
                },
                {
                    text: 'Upper Alpha',
                    command: 'Lists',
                    subCommand: 'NumberFormatList',
                    value: 'upperAlpha'
                },
                {
                    text: 'Lower Alpha',
                    command: 'Lists',
                    subCommand: 'NumberFormatList',
                    value: 'lowerAlpha'
                },
                {
                    text: 'Upper Roman',
                    command: 'Lists',
                    subCommand: 'NumberFormatList',
                    value: 'upperRoman'
                }
            ], bulletFormatList = [
                {
                    text: 'None',
                    command: 'Lists',
                    subCommand: 'BulletFormatList',
                    value: 'none'
                },
                {
                    text: 'Disc',
                    command: 'Lists',
                    subCommand: 'BulletFormatList',
                    value: 'disc'
                },
                {
                    text: 'Circle',
                    command: 'Lists',
                    subCommand: 'BulletFormatList',
                    value: 'circle'
                },
                {
                    text: 'Square',
                    command: 'Lists',
                    subCommand: 'BulletFormatList',
                    value: 'square'
                }
            ];
            function getLocale(self1, localeItems, item) {
                for(var i = 0; localeItems.length > i; i++)if (localeItems[i].value === item.subCommand) return self1.localeObj.getConstant(localeItems[i].locale);
                return item.text;
            }
            function updateDropDownLocale(self1) {
                alignmentItems.forEach(function(item, i) {
                    alignmentItems[i].text = getLocale(self1, alignmentLocale, alignmentItems[i]);
                }), imageDisplayItems.forEach(function(item, i) {
                    imageDisplayItems[i].text = getLocale(self1, displayLocale, imageDisplayItems[i]);
                }), tableRowsItems.forEach(function(item, i) {
                    tableRowsItems[i].text = getLocale(self1, tableRowLocale, tableRowsItems[i]);
                }), tableColumnsItems.forEach(function(item, i) {
                    tableColumnsItems[i].text = getLocale(self1, tableColumnLocale, tableColumnsItems[i]);
                }), TableCellVerticalAlignItems.forEach(function(item, i) {
                    TableCellVerticalAlignItems[i].text = getLocale(self1, tableVerticalLocale, TableCellVerticalAlignItems[i]);
                }), TableStyleItems.forEach(function(item, i) {
                    TableStyleItems[i].text = getLocale(self1, tableStyleLocale, TableStyleItems[i]);
                });
            }
        /***/ },
        /***/ 1860: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
                r: function() {
                    return /* binding */ Link;
                }
            });
            // EXTERNAL MODULE: ./node_modules/@syncfusion/ej2-base/index.js + 30 modules
            var extendStatics, ej2_base = __webpack_require__(1807), constant = __webpack_require__(3386), classes = __webpack_require__(9805), common = __webpack_require__(759), __extends = (extendStatics = function(d, b) {
                return (extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d, b) {
                    d.__proto__ = b;
                } || function(d, b) {
                    for(var p in b)b.hasOwnProperty(p) && (d[p] = b[p]);
                })(d, b);
            }, function(d, b) {
                function __() {
                    this.constructor = d;
                }
                extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
            }), __decorate = function(decorators, target, key, desc) {
                var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
                else for(var i = decorators.length - 1; i >= 0; i--)(d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }, CHECK = 'e-check', DISABLED = 'e-checkbox-disabled', FRAME = 'e-frame', INDETERMINATE = 'e-stop', LABEL = 'e-label', RIPPLE = 'e-ripple-container', RIPPLECHECK = 'e-ripple-check', RIPPLEINDETERMINATE = 'e-ripple-stop', RTL = 'e-rtl', WRAPPER = 'e-checkbox-wrapper', containerAttr = [
                'title',
                'class',
                'style',
                'disabled',
                'readonly',
                'name',
                'value'
            ], CheckBox = /** @class */ function(_super) {
                /**
     * Constructor for creating the widget
     *
     * @private
     * @param {CheckBoxModel} options - Specifies checkbox model
     * @param {string | HTMLInputElement} element - Specifies target element
     */ function CheckBox(options, element) {
                    var _this = _super.call(this, options, element) || this;
                    return _this.isFocused = !1, _this.isMouseClick = !1, _this.clickTriggered = !1, _this.validCheck = !0, _this;
                }
                return __extends(CheckBox, _super), CheckBox.prototype.changeState = function(state) {
                    var rippleSpan, frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];
                    ej2_base /* isRippleEnabled */ .re && (rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0]), 'check' === state ? (frameSpan.classList.remove(INDETERMINATE), frameSpan.classList.add(CHECK), rippleSpan && (rippleSpan.classList.remove(RIPPLEINDETERMINATE), rippleSpan.classList.add(RIPPLECHECK)), this.element.checked = !0, this.element.required && this.validCheck ? (this.element.checked = !1, this.validCheck = !1) : this.element.required && (this.validCheck = !0)) : 'uncheck' === state ? ((0, ej2_base /* removeClass */ .IV)([
                        frameSpan
                    ], [
                        CHECK,
                        INDETERMINATE
                    ]), rippleSpan && (0, ej2_base /* removeClass */ .IV)([
                        rippleSpan
                    ], [
                        RIPPLECHECK,
                        RIPPLEINDETERMINATE
                    ]), this.element.checked = !1, this.element.required && this.validCheck ? (this.element.checked = !0, this.validCheck = !1) : this.element.required && (this.validCheck = !0)) : (frameSpan.classList.remove(CHECK), frameSpan.classList.add(INDETERMINATE), rippleSpan && (rippleSpan.classList.remove(RIPPLECHECK), rippleSpan.classList.add(RIPPLEINDETERMINATE)), this.element.indeterminate = !0);
                }, CheckBox.prototype.clickHandler = function(event) {
                    if ('INPUT' === event.target.tagName && this.clickTriggered) {
                        this.clickTriggered = !1;
                        return;
                    }
                    ('SPAN' === event.target.tagName || 'LABEL' === event.target.tagName) && (this.clickTriggered = !0), this.isMouseClick && (this.focusOutHandler(), this.isMouseClick = !1), this.indeterminate ? (this.changeState(this.checked ? 'check' : 'uncheck'), this.indeterminate = !1, this.element.indeterminate = !1) : this.checked ? (this.changeState('uncheck'), this.checked = !1) : (this.changeState('check'), this.checked = !0);
                    var changeEventArgs = {
                        checked: this.updateVueArrayModel(!1),
                        event: event
                    };
                    this.trigger('change', changeEventArgs), event.stopPropagation();
                }, /**
     * Destroys the widget.
     *
     * @returns {void}
     */ CheckBox.prototype.destroy = function() {
                    var _this = this, wrapper = this.getWrapper();
                    _super.prototype.destroy.call(this), this.wrapper && (wrapper = this.wrapper, this.disabled || this.unWireEvents(), 'INPUT' === this.tagName ? (this.getWrapper() && wrapper.parentNode && wrapper.parentNode.insertBefore(this.element, wrapper), (0, ej2_base /* detach */ .og)(wrapper), this.element.checked = !1, this.indeterminate && (this.element.indeterminate = !1), [
                        'name',
                        'value',
                        'disabled'
                    ].forEach(function(key) {
                        _this.element.removeAttribute(key);
                    })) : ([
                        'class'
                    ].forEach(function(key) {
                        wrapper.removeAttribute(key);
                    }), wrapper.innerHTML = ''));
                }, CheckBox.prototype.focusHandler = function() {
                    this.isFocused = !0;
                }, CheckBox.prototype.focusOutHandler = function() {
                    var wrapper = this.getWrapper();
                    wrapper && wrapper.classList.remove('e-focus'), this.isFocused = !1;
                }, /**
     * Gets the module name.
     *
     * @private
     * @returns {string} - Module Name
     */ CheckBox.prototype.getModuleName = function() {
                    return 'checkbox';
                }, /**
     * Gets the properties to be maintained in the persistence state.
     *
     * @private
     * @returns {string} - Persist Data
     */ CheckBox.prototype.getPersistData = function() {
                    return this.addOnPersist([
                        'checked',
                        'indeterminate'
                    ]);
                }, CheckBox.prototype.getWrapper = function() {
                    return this.element && this.element.parentElement ? this.element.parentElement.parentElement : null;
                }, CheckBox.prototype.initialize = function() {
                    (0, ej2_base /* isNullOrUndefined */ .le)(this.initialCheckedValue) && (this.initialCheckedValue = this.checked), this.name && this.element.setAttribute('name', this.name), this.value && (this.element.setAttribute('value', this.value), this.isVue && 'boolean' == typeof this.value && !0 === this.value && this.setProperties({
                        checked: !0
                    }, !0)), this.checked && this.changeState('check'), this.indeterminate && this.changeState(), this.disabled && this.setDisabled();
                }, CheckBox.prototype.initWrapper = function() {
                    var wrapper = this.element.parentElement;
                    wrapper.classList.contains(WRAPPER) || (wrapper = this.createElement('div', {
                        className: WRAPPER
                    }), this.element.parentNode.insertBefore(wrapper, this.element));
                    var label = this.createElement('label', {
                        attrs: {
                            for: this.element.id
                        }
                    }), frameSpan = this.createElement('span', {
                        className: 'e-icons ' + FRAME
                    });
                    if (wrapper.classList.add('e-wrapper'), this.enableRtl && wrapper.classList.add(RTL), this.cssClass && (0, ej2_base /* addClass */ .cn)([
                        wrapper
                    ], this.cssClass.split(' ')), wrapper.appendChild(label), label.appendChild(this.element), (0, common /* setHiddenInput */ .Z5)(this, label), label.appendChild(frameSpan), ej2_base /* isRippleEnabled */ .re) {
                        var rippleSpan = this.createElement('span', {
                            className: RIPPLE
                        });
                        'Before' === this.labelPosition ? label.appendChild(rippleSpan) : label.insertBefore(rippleSpan, frameSpan), (0, ej2_base /* rippleEffect */ .qx)(rippleSpan, {
                            duration: 400,
                            isCenterRipple: !0
                        });
                    }
                    this.label && this.setText(this.label);
                }, CheckBox.prototype.keyUpHandler = function() {
                    this.isFocused && this.getWrapper().classList.add('e-focus');
                }, CheckBox.prototype.labelMouseDownHandler = function(e) {
                    this.isMouseClick = !0;
                    var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];
                    (0, common /* rippleMouseHandler */ .sg)(e, rippleSpan);
                }, CheckBox.prototype.labelMouseUpHandler = function(e) {
                    this.isMouseClick = !0;
                    var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];
                    if (rippleSpan) {
                        for(var rippleElem = rippleSpan.querySelectorAll('.e-ripple-element'), i = 0; i < rippleElem.length - 1; i++)rippleSpan.removeChild(rippleSpan.childNodes[i]);
                        (0, common /* rippleMouseHandler */ .sg)(e, rippleSpan);
                    }
                }, /**
     * Called internally if any of the property value changes.
     *
     * @private
     * @param {CheckBoxModel} newProp - Specifies new Properties
     * @param {CheckBoxModel} oldProp - Specifies old Properties
     *
     * @returns {void}
     */ CheckBox.prototype.onPropertyChanged = function(newProp, oldProp) {
                    for(var wrapper = this.getWrapper(), _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++)switch(_a[_i]){
                        case 'checked':
                            this.indeterminate = !1, this.element.indeterminate = !1, this.changeState(newProp.checked ? 'check' : 'uncheck');
                            break;
                        case 'indeterminate':
                            newProp.indeterminate ? this.changeState() : (this.element.indeterminate = !1, this.changeState(this.checked ? 'check' : 'uncheck'));
                            break;
                        case 'disabled':
                            newProp.disabled ? (this.setDisabled(), this.wrapper = this.getWrapper(), this.unWireEvents()) : (this.element.disabled = !1, wrapper.classList.remove(DISABLED), wrapper.setAttribute('aria-disabled', 'false'), this.wireEvents());
                            break;
                        case 'cssClass':
                            oldProp.cssClass && (0, ej2_base /* removeClass */ .IV)([
                                wrapper
                            ], oldProp.cssClass.split(' ')), newProp.cssClass && (0, ej2_base /* addClass */ .cn)([
                                wrapper
                            ], newProp.cssClass.split(' '));
                            break;
                        case 'enableRtl':
                            newProp.enableRtl ? wrapper.classList.add(RTL) : wrapper.classList.remove(RTL);
                            break;
                        case 'label':
                            this.setText(newProp.label);
                            break;
                        case 'labelPosition':
                            var label = wrapper.getElementsByClassName(LABEL)[0], labelWrap = wrapper.getElementsByTagName('label')[0];
                            (0, ej2_base /* detach */ .og)(label), 'After' === newProp.labelPosition ? labelWrap.appendChild(label) : labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);
                            break;
                        case 'name':
                            this.element.setAttribute('name', newProp.name);
                            break;
                        case 'value':
                            if (this.isVue && 'object' == typeof newProp.value) break;
                            this.element.setAttribute('value', newProp.value);
                            break;
                        case 'htmlAttributes':
                            this.updateHtmlAttributeToWrapper();
                    }
                }, /**
     * Initialize Angular, React and Unique ID support.
     *
     * @private
     * @returns {void}
     */ CheckBox.prototype.preRender = function() {
                    var element = this.element;
                    this.tagName = this.element.tagName, element = (0, common /* wrapperInitialize */ .Rm)(this.createElement, 'EJS-CHECKBOX', 'checkbox', element, WRAPPER, 'checkbox'), this.element = element, 'checkbox' !== this.element.getAttribute('type') && this.element.setAttribute('type', 'checkbox'), this.element.id || (this.element.id = (0, ej2_base /* getUniqueID */ .QI)('e-' + this.getModuleName()));
                }, /**
     * Initialize the control rendering.
     *
     * @private
     * @returns {void}
     */ CheckBox.prototype.render = function() {
                    this.initWrapper(), this.initialize(), this.disabled || this.wireEvents(), this.updateHtmlAttributeToWrapper(), this.updateVueArrayModel(!0), this.renderComplete(), this.wrapper = this.getWrapper();
                }, CheckBox.prototype.setDisabled = function() {
                    var wrapper = this.getWrapper();
                    this.element.disabled = !0, wrapper.classList.add(DISABLED), wrapper.setAttribute('aria-disabled', 'true');
                }, CheckBox.prototype.setText = function(text) {
                    var wrapper = this.getWrapper();
                    if (wrapper) {
                        var label = wrapper.getElementsByClassName(LABEL)[0];
                        if (label) label.textContent = text;
                        else {
                            text = this.enableHtmlSanitizer ? ej2_base /* SanitizeHtmlHelper.sanitize */ .pJ.sanitize(text) : text, label = this.createElement('span', {
                                className: LABEL,
                                innerHTML: text
                            });
                            var labelWrap = wrapper.getElementsByTagName('label')[0];
                            'Before' === this.labelPosition ? labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]) : labelWrap.appendChild(label);
                        }
                    }
                }, CheckBox.prototype.changeHandler = function(e) {
                    e.stopPropagation();
                }, CheckBox.prototype.formResetHandler = function() {
                    this.checked = this.initialCheckedValue, this.element.checked = this.initialCheckedValue;
                }, CheckBox.prototype.unWireEvents = function() {
                    var wrapper = this.wrapper;
                    ej2_base /* EventHandler.remove */ .bi.remove(wrapper, 'click', this.clickHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'keyup', this.keyUpHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'focus', this.focusHandler), ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'focusout', this.focusOutHandler);
                    var label = wrapper.getElementsByTagName('label')[0];
                    ej2_base /* EventHandler.remove */ .bi.remove(label, 'mousedown', this.labelMouseDownHandler), ej2_base /* EventHandler.remove */ .bi.remove(label, 'mouseup', this.labelMouseUpHandler);
                    var formElem = (0, ej2_base /* closest */ .oq)(this.element, 'form');
                    formElem && ej2_base /* EventHandler.remove */ .bi.remove(formElem, 'reset', this.formResetHandler), 'EJS-CHECKBOX' === this.tagName && ej2_base /* EventHandler.remove */ .bi.remove(this.element, 'change', this.changeHandler);
                }, CheckBox.prototype.wireEvents = function() {
                    var wrapper = this.getWrapper();
                    ej2_base /* EventHandler.add */ .bi.add(wrapper, 'click', this.clickHandler, this), ej2_base /* EventHandler.add */ .bi.add(this.element, 'keyup', this.keyUpHandler, this), ej2_base /* EventHandler.add */ .bi.add(this.element, 'focus', this.focusHandler, this), ej2_base /* EventHandler.add */ .bi.add(this.element, 'focusout', this.focusOutHandler, this);
                    var label = wrapper.getElementsByTagName('label')[0];
                    ej2_base /* EventHandler.add */ .bi.add(label, 'mousedown', this.labelMouseDownHandler, this), ej2_base /* EventHandler.add */ .bi.add(label, 'mouseup', this.labelMouseUpHandler, this);
                    var formElem = (0, ej2_base /* closest */ .oq)(this.element, 'form');
                    formElem && ej2_base /* EventHandler.add */ .bi.add(formElem, 'reset', this.formResetHandler, this), 'EJS-CHECKBOX' === this.tagName && ej2_base /* EventHandler.add */ .bi.add(this.element, 'change', this.changeHandler, this);
                }, CheckBox.prototype.updateVueArrayModel = function(init) {
                    if (this.isVue && 'object' == typeof this.value) {
                        var value = this.element.value;
                        if (value && this.value) {
                            if (init) for(var i = 0; i < this.value.length; i++)value === this.value[i] && (this.changeState('check'), this.setProperties({
                                checked: !0
                            }, !0));
                            else {
                                var index = this.value.indexOf(value);
                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                return this.checked ? index < 0 && this.value.push(value) : index > -1 && this.value.splice(index, 1), this.value;
                            }
                        }
                    }
                    return this.validCheck ? this.element.checked : !this.element.checked;
                }, CheckBox.prototype.updateHtmlAttributeToWrapper = function() {
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(this.htmlAttributes)) for(var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++){
                        var key = _a[_i];
                        if (containerAttr.indexOf(key) > -1) {
                            var wrapper = this.getWrapper();
                            'class' === key ? (0, ej2_base /* addClass */ .cn)([
                                wrapper
                            ], this.htmlAttributes[key].split(' ')) : 'title' === key ? wrapper.setAttribute(key, this.htmlAttributes[key]) : 'style' === key ? this.getWrapper().getElementsByClassName(FRAME)[0].setAttribute(key, this.htmlAttributes[key]) : this.element.setAttribute(key, this.htmlAttributes[key]);
                        }
                    }
                }, /**
     * Click the CheckBox element
     * its native method
     *
     * @public
     * @returns {void}
     */ CheckBox.prototype.click = function() {
                    this.element.click();
                }, /**
     * Sets the focus to CheckBox
     * its native method
     *
     * @public
     * @returns {void}
     */ CheckBox.prototype.focusIn = function() {
                    this.element.focus();
                }, __decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], CheckBox.prototype, "change", void 0), __decorate([
                    (0, ej2_base /* Event */ .ju)()
                ], CheckBox.prototype, "created", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], CheckBox.prototype, "checked", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], CheckBox.prototype, "cssClass", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], CheckBox.prototype, "disabled", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], CheckBox.prototype, "indeterminate", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], CheckBox.prototype, "label", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)('After')
                ], CheckBox.prototype, "labelPosition", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], CheckBox.prototype, "name", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)('')
                ], CheckBox.prototype, "value", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)(!1)
                ], CheckBox.prototype, "enableHtmlSanitizer", void 0), __decorate([
                    (0, ej2_base /* Property */ .Z9)({})
                ], CheckBox.prototype, "htmlAttributes", void 0), CheckBox = __decorate([
                    ej2_base /* NotifyPropertyChanges */ .Zl
                ], CheckBox);
            }(ej2_base /* Component */ .wA), base_enum = __webpack_require__(809), util = __webpack_require__(5932), common_util = __webpack_require__(1386), Link = /** @class */ function() {
                function Link(parent, serviceLocator) {
                    this.parent = parent, this.rteID = parent.element.id, this.i10n = serviceLocator.getService('rteLocale'), this.addEventListener(), this.serviceLocator = serviceLocator, this.rendererFactory = serviceLocator.getService('rendererFactory'), this.dialogRenderObj = serviceLocator.getService('dialogRenderObject');
                }
                return Link.prototype.addEventListener = function() {
                    this.parent.isDestroyed || (this.parent.on(constant /* insertLink */ .T8, this.linkDialog, this), this.parent.on(constant /* showLinkDialog */ .nk, this.showDialog, this), this.parent.on(constant /* closeLinkDialog */ .OI, this.closeDialog, this), this.parent.on(constant /* keyDown */ .QG, this.onKeyDown, this), this.parent.on(constant /* insertCompleted */ .IK, this.showLinkQuickToolbar, this), this.parent.on(constant /* clearDialogObj */ .zA, this.clearDialogObj, this), this.parent.on(constant /* linkToolbarAction */ .Tc, this.onToolbarAction, this), this.parent.on(constant /* iframeMouseDown */ .a$, this.onIframeMouseDown, this), this.parent.on(constant /* unLink */ .tC, this.removeLink, this), this.parent.on(constant /* editLink */ .xD, this.editLink, this), this.parent.on(constant /* openLink */ .nG, this.openLink, this), this.parent.on(constant /* editAreaClick */ .uU, this.editAreaClickHandler, this), this.parent.on(constant /* bindCssClass */ ._8, this.setCssClass, this), this.parent.on(constant /* destroy */ .ob, this.destroy, this), this.parent.on(constant /* moduleDestroy */ .P0, this.moduleDestroy, this));
                }, Link.prototype.onToolbarAction = function(args) {
                    switch(args.args.item.subCommand){
                        case 'OpenLink':
                            this.parent.notify(constant /* openLink */ .nG, args);
                            break;
                        case 'EditLink':
                            this.parent.notify(constant /* editLink */ .xD, args);
                            break;
                        case 'RemoveLink':
                            this.parent.notify(constant /* unLink */ .tC, args);
                    }
                }, Link.prototype.removeEventListener = function() {
                    this.parent.isDestroyed || (this.parent.off(constant /* insertLink */ .T8, this.linkDialog), this.parent.off(constant /* showLinkDialog */ .nk, this.showDialog), this.parent.off(constant /* closeLinkDialog */ .OI, this.closeDialog), this.parent.off(constant /* keyDown */ .QG, this.onKeyDown), this.parent.off(constant /* insertCompleted */ .IK, this.showLinkQuickToolbar), this.parent.off(constant /* clearDialogObj */ .zA, this.clearDialogObj), this.parent.off(constant /* linkToolbarAction */ .Tc, this.onToolbarAction), this.parent.off(constant /* unLink */ .tC, this.removeLink), this.parent.off(constant /* iframeMouseDown */ .a$, this.onIframeMouseDown), this.parent.off(constant /* editLink */ .xD, this.editLink), this.parent.off(constant /* openLink */ .nG, this.openLink), this.parent.off(constant /* editAreaClick */ .uU, this.editAreaClickHandler), this.parent.off(constant /* bindCssClass */ ._8, this.setCssClass), this.parent.off(constant /* destroy */ .ob, this.destroy), this.parent.off(constant /* moduleDestroy */ .P0, this.moduleDestroy));
                }, Link.prototype.onIframeMouseDown = function() {
                    this.dialogObj && this.dialogObj.hide({
                        returnValue: !0
                    });
                }, Link.prototype.updateCss = function(currentObj, e) {
                    currentObj && e.cssClass && ((0, ej2_base /* isNullOrUndefined */ .le)(e.oldCssClass) ? currentObj.setProperties({
                        cssClass: (currentObj.cssClass + ' ' + e.cssClass).trim()
                    }) : currentObj.setProperties({
                        cssClass: (currentObj.cssClass.replace(e.oldCssClass, '').trim() + ' ' + e.cssClass).trim()
                    }));
                }, Link.prototype.setCssClass = function(e) {
                    this.updateCss(this.checkBoxObj, e), this.updateCss(this.dialogObj, e);
                }, Link.prototype.showLinkQuickToolbar = function(e) {
                    if (!(0, ej2_base /* isNullOrUndefined */ .le)(e.args) && 'enter' !== e.args.action && 'space' !== e.args.action) {
                        var target_1, pageX = void 0, pageY = void 0;
                        if (!('Links' !== e.type || (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.quickToolbarModule) || (0, ej2_base /* isNullOrUndefined */ .le)(this.parent.quickToolbarModule.linkQTBar))) {
                            this.quickToolObj = this.parent.quickToolbarModule;
                            var parentTop = this.parent.element.getBoundingClientRect().top, parentLeft = this.parent.element.getBoundingClientRect().left, range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
                            if ([].forEach.call(e.elements, function(element, index) {
                                0 === index && (target_1 = '#text' === element.nodeName ? element.parentNode : element);
                            }), e.isNotify) {
                                var tbElement = this.parent.toolbarModule.getToolbarElement(), linkTop = target_1.getBoundingClientRect().top, linkLeft = target_1.getBoundingClientRect().left, tbHeight = tbElement ? tbElement.offsetHeight + this.parent.toolbarModule.getExpandTBarPopHeight() : 0;
                                pageX = this.parent.iframeSettings.enable ? parentLeft + linkLeft : target_1.getBoundingClientRect().left, pageY = window.pageYOffset + (this.parent.iframeSettings.enable ? parentTop + tbHeight + linkTop : parentTop + (linkTop - parentTop));
                            } else {
                                var args = void 0;
                                args = e.args.touches ? e.args.changedTouches[0] : args = e.args, pageX = this.parent.iframeSettings.enable ? window.pageXOffset + parentLeft + args.clientX : args.pageX, pageY = this.parent.iframeSettings.enable ? window.pageYOffset + parentTop + args.clientY : args.pageY;
                            }
                            this.quickToolObj.linkQTBar && this.quickToolObj.linkQTBar.showPopup(pageX, pageY, range.endContainer);
                        }
                    }
                }, Link.prototype.hideLinkQuickToolbar = function() {
                    this.quickToolObj && this.quickToolObj.linkQTBar && document.body.contains(this.quickToolObj.linkQTBar.element) && this.quickToolObj.linkQTBar.hidePopup();
                }, Link.prototype.editAreaClickHandler = function(e) {
                    if (this.parent.readonly) {
                        this.hideLinkQuickToolbar();
                        return;
                    }
                    var args = e.args, showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;
                    if (2 !== args.which && (!showOnRightClick || 1 !== args.which) && (showOnRightClick || 3 !== args.which) && 'HTML' === this.parent.editorMode && this.parent.quickToolbarModule && this.parent.quickToolbarModule.linkQTBar) {
                        this.quickToolObj = this.parent.quickToolbarModule;
                        var target = args.target;
                        target = this.getAnchorNode(target), this.contentModule = this.rendererFactory.getRenderer(base_enum /* RenderType.Content */ .y2.Content);
                        var isPopupOpen = this.quickToolObj.linkQTBar.element.classList.contains('e-rte-pop');
                        if ('A' !== target.nodeName || !(target.childNodes.length > 0) || 'IMG' === target.childNodes[0].nodeName || 'IMG' === e.args.target.nodeName || (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(this.parent.getRange().startContainer.parentElement, 'A')) || (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(this.parent.getRange().endContainer.parentElement, 'A'))) this.hideLinkQuickToolbar();
                        else {
                            if (isPopupOpen) return;
                            this.showLinkQuickToolbar({
                                args: args,
                                isNotify: !1,
                                type: 'Links',
                                elements: [
                                    args.target
                                ]
                            });
                        }
                    }
                }, Link.prototype.onKeyDown = function(event) {
                    var originalEvent = event.args;
                    switch(originalEvent.action){
                        case 'escape':
                            (0, ej2_base /* isNullOrUndefined */ .le)(this.dialogObj) || this.dialogObj.close();
                            break;
                        case 'insert-link':
                            this.openDialog(!0, event), originalEvent.preventDefault();
                    }
                }, Link.prototype.openDialog = function(isInternal, event) {
                    if (isInternal || this.parent.contentModule.getEditPanel().focus(), 'HTML' === this.parent.editorMode) {
                        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument()), save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument()), selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range), selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range), eventArgs = {
                            args: event ? event.args : {
                                item: {
                                    command: 'Links',
                                    subCommand: 'CreateLink'
                                },
                                originalEvent: void 0
                            },
                            selectNode: selectNodeEle,
                            selection: save,
                            selectParent: selectParentEle
                        };
                        this.linkDialog(eventArgs);
                    } else {
                        var textArea = this.parent.contentModule.getEditPanel();
                        this.parent.formatter.editorManager.markdownSelection.save(textArea.selectionStart, textArea.selectionEnd), this.linkDialog({
                            args: {
                                item: {
                                    command: 'Links',
                                    subCommand: 'Link'
                                },
                                originalEvent: event && event.args
                            },
                            member: 'link',
                            text: this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.contentModule.getEditPanel()),
                            module: 'Markdown',
                            name: 'insertLink'
                        });
                    }
                }, Link.prototype.showDialog = function() {
                    this.openDialog(!1), this.setCssClass({
                        cssClass: this.parent.cssClass
                    });
                }, Link.prototype.closeDialog = function() {
                    this.dialogObj && this.dialogObj.hide({
                        returnValue: !0
                    });
                }, Link.prototype.clearDialogObj = function() {
                    this.dialogObj && (this.dialogObj.destroy(), (0, ej2_base /* detach */ .og)(this.dialogObj.element), this.dialogObj = null);
                }, Link.prototype.linkDialog = function(e, inputDetails) {
                    var _this = this;
                    if (this.dialogObj) {
                        this.dialogObj.hide({
                            returnValue: !0
                        });
                        return;
                    }
                    if ('HTML' === this.parent.editorMode && e.selectParent.length > 0 && !(0, ej2_base /* isNullOrUndefined */ .le)(e.selectParent[0].classList) && e.selectParent[0].classList.contains('e-rte-anchor') && (0, ej2_base /* isNullOrUndefined */ .le)(inputDetails)) {
                        this.editLink(e);
                        return;
                    }
                    var linkWebAddress = this.i10n.getConstant('linkWebUrl'), linkDisplayText = this.i10n.getConstant('linkText'), linkTooltip = this.i10n.getConstant('linkTooltipLabel'), urlPlace = this.i10n.getConstant('linkurl'), textPlace = this.i10n.getConstant('textPlaceholder'), title = this.i10n.getConstant('linkTitle'), linkDialogEle = this.parent.createElement('div', {
                        className: "e-rte-link-dialog " + this.parent.cssClass,
                        id: this.rteID + '_rtelink'
                    });
                    this.parent.element.appendChild(linkDialogEle);
                    var linkContent = this.parent.createElement('div', {
                        className: "e-rte-linkcontent " + this.parent.cssClass,
                        id: this.rteID + '_linkContent'
                    }), htmlTextbox = 'HTML' === this.parent.editorMode ? '<label>' + linkTooltip + '</label></div><div class="e-rte-field ' + this.parent.cssClass + '"><input type="text" data-role ="none" spellcheck="false" placeholder = "' + title + '" class="e-input e-rte-linkTitle ' + this.parent.cssClass + '"></div><div class="e-rte-label ' + this.parent.cssClass + '"></div><div class="e-rte-field ' + this.parent.cssClass + '"><input type="checkbox" class="e-rte-linkTarget ' + this.parent.cssClass + '"  data-role ="none"></div>' : '', content = '<div class="e-rte-label ' + this.parent.cssClass + '"><label>' + linkWebAddress + '</label></div><div class="e-rte-field ' + this.parent.cssClass + '"><input type="text" data-role ="none" spellcheck="false" placeholder="' + urlPlace + '" class="e-input e-rte-linkurl ' + this.parent.cssClass + '"/></div><div class="e-rte-label ' + this.parent.cssClass + '"><label>' + linkDisplayText + '</label></div><div class="e-rte-field ' + this.parent.cssClass + '"> <input type="text" data-role ="none" spellcheck="false" class="e-input e-rte-linkText ' + this.parent.cssClass + '" placeholder="' + textPlace + '"></div><div class="e-rte-label ' + this.parent.cssClass + '">' + htmlTextbox, contentElem = (0, util /* parseHtml */ .dW)(content);
                    linkContent.appendChild(contentElem);
                    var linkTarget = linkContent.querySelector('.e-rte-linkTarget'), linkUrl = linkContent.querySelector('.e-rte-linkurl'), linkText = linkContent.querySelector('.e-rte-linkText'), linkTitle = linkContent.querySelector('.e-rte-linkTitle'), linkOpenLabel = this.i10n.getConstant('linkOpenInNewWindow');
                    this.checkBoxObj = new CheckBox({
                        label: linkOpenLabel,
                        checked: !0,
                        enableRtl: this.parent.enableRtl,
                        cssClass: this.parent.cssClass
                    }), this.checkBoxObj.isStringTemplate = !0, this.checkBoxObj.createElement = this.parent.createElement, this.checkBoxObj.appendTo(linkTarget);
                    var selectText = 'HTML' === this.parent.editorMode ? e.selection.getRange(this.parent.contentModule.getDocument()).toString() : e.text, linkInsert = this.i10n.getConstant('dialogInsert'), linkCancel = this.i10n.getConstant('dialogCancel'), selection = e.selection, selectObj = {
                        selfLink: this,
                        selection: e.selection,
                        selectParent: e.selectParent,
                        args: e.args
                    }, dialogModel = {
                        header: this.i10n.getConstant('linkHeader'),
                        content: linkContent,
                        cssClass: classes /* CLS_RTE_ELEMENTS */ .i7 + ' ' + this.parent.cssClass,
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale,
                        showCloseIcon: !0,
                        closeOnEscape: !0,
                        width: ej2_base /* Browser.isDevice */ .AR.isDevice ? '290px' : '310px',
                        height: 'inherit',
                        isModal: ej2_base /* Browser.isDevice */ .AR.isDevice,
                        buttons: [
                            {
                                click: this.insertlink.bind(selectObj),
                                buttonModel: {
                                    content: linkInsert,
                                    cssClass: "e-flat e-insertLink " + this.parent.cssClass,
                                    isPrimary: !0
                                }
                            },
                            {
                                click: this.cancelDialog.bind(selectObj),
                                buttonModel: {
                                    cssClass: "e-flat " + this.parent.cssClass,
                                    content: linkCancel
                                }
                            }
                        ],
                        target: ej2_base /* Browser.isDevice */ .AR.isDevice ? document.body : this.parent.element,
                        animationSettings: {
                            effect: 'None'
                        },
                        close: function(event) {
                            _this.parent.isBlur = !1, event && event.event.returnValue && ('HTML' === _this.parent.editorMode ? selection.restore() : _this.parent.formatter.editorManager.markdownSelection.restore(_this.parent.contentModule.getEditPanel())), _this.dialogObj.destroy(), (0, ej2_base /* detach */ .og)(_this.dialogObj.element);
                            var args = _this.dialogObj;
                            _this.dialogRenderObj.close(args), _this.dialogObj = null;
                        }
                    };
                    // eslint-disable-next-line
                    this.dialogObj = this.dialogRenderObj.render(dialogModel), this.dialogObj.createElement = this.parent.createElement, this.dialogObj.appendTo(linkDialogEle), linkDialogEle.style.maxHeight = 'inherit', !(0, ej2_base /* isNullOrUndefined */ .le)(this.dialogObj) && ((0, ej2_base /* isNullOrUndefined */ .le)(inputDetails) || (linkUrl.value = inputDetails.url, linkText.value = inputDetails.text, linkTitle.value = inputDetails.title, // eslint-disable-next-line
                    inputDetails.target ? this.checkBoxObj.checked = !0 : this.checkBoxObj.checked = !1, this.dialogObj.header = inputDetails.header, this.dialogObj.element.querySelector('.e-insertLink').textContent = inputDetails.btnText), this.checkUrl(!1), ('HTML' === this.parent.editorMode && (0, ej2_base /* isNullOrUndefined */ .le)(inputDetails) && (!(0, ej2_base /* isNullOrUndefined */ .le)(selectText) && '' !== selectText && 0 === e.selection.range.startOffset || e.selection.range.startOffset !== e.selection.range.endOffset) || 'Markdown' === e.module) && (linkText.value = selectText), ej2_base /* EventHandler.add */ .bi.add(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick, this), this.quickToolObj && (this.hideLinkQuickToolbar(), this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element) && this.quickToolObj.inlineQTBar.hidePopup()));
                }, // eslint-disable-next-line
                Link.prototype.insertlink = function(e) {
                    var linkTitle, argsValue, linkEle = this.selfLink.dialogObj.element, linkUrl = linkEle.querySelector('.e-rte-linkurl').value, linkText = linkEle.querySelector('.e-rte-linkText').value;
                    'HTML' === this.selfLink.parent.editorMode && (linkTitle = linkEle.querySelector('.e-rte-linkTitle').value);
                    var target = this.selfLink.checkBoxObj.checked ? '_blank' : null;
                    if ('' === linkUrl) {
                        this.selfLink.checkUrl(!0);
                        return;
                    }
                    this.selfLink.isUrl(linkUrl) ? this.selfLink.checkUrl(!1) : (linkText = '' === linkText ? linkUrl : linkText, this.selfLink.parent.enableAutoUrl || (linkUrl = linkUrl.indexOf('http') > -1 ? linkUrl : 'http://' + linkUrl));
                    var proxy = this.selfLink;
                    if ('HTML' === proxy.parent.editorMode && (0, ej2_base /* isNullOrUndefined */ .le)((0, ej2_base /* closest */ .oq)(this.selection.range.startContainer.parentNode, "[id='" + proxy.parent.contentModule.getPanel().id + "']"))) {
                        proxy.parent.contentModule.getEditPanel().focus(), ej2_base /* Browser.isIE */ .AR.isIE && proxy.parent.iframeSettings.enable && this.selection.restore();
                        var range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());
                        this.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.parent.contentModule.getDocument()), this.selectParent = proxy.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
                    }
                    var value = {
                        url: linkUrl,
                        text: linkText,
                        title: linkTitle,
                        target: target,
                        selection: this.selection,
                        selectParent: this.selectParent
                    };
                    if (document.body.contains(proxy.dialogObj.element) && this.selfLink.dialogObj.hide({
                        returnValue: !1
                    }), (0, common_util /* isIDevice */ .FA)() && proxy.parent.iframeSettings.enable && (0, ej2_base /* select */ .Ys)('iframe', proxy.parent.element).contentWindow.focus(), 'HTML' === proxy.parent.editorMode && this.selection.restore(), 0 === proxy.parent.formatter.getUndoRedoStack().length && proxy.parent.formatter.saveData(), (0, ej2_base /* isNullOrUndefined */ .le)(this.args) || 'KeyK' !== this.args.code) argsValue = this.args;
                    else {
                        var originalEvent = this.args;
                        (0, ej2_base /* extend */ .l7)(this.args, {
                            item: {
                                command: 'Links',
                                subCommand: 'CreateLink'
                            },
                            originalEvent: originalEvent
                        }, !0), argsValue = {
                            item: {
                                command: 'Links',
                                subCommand: 'CreateLink'
                            },
                            originalEvent: originalEvent
                        };
                    }
                    this.selfLink.parent.formatter.process(this.selfLink.parent, argsValue, !(0, ej2_base /* isNullOrUndefined */ .le)(this.args) && this.args.originalEvent, value), this.selfLink.parent.contentModule.getEditPanel().focus();
                }, Link.prototype.isUrl = function(url) {
                    return /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/gi.test(url);
                }, Link.prototype.checkUrl = function(e) {
                    var linkUrl = this.dialogObj.element.querySelector('.e-rte-linkurl');
                    e ? ((0, ej2_base /* addClass */ .cn)([
                        linkUrl
                    ], 'e-error'), linkUrl.setSelectionRange(0, linkUrl.value.length), linkUrl.focus()) : (0, ej2_base /* removeClass */ .IV)([
                        linkUrl
                    ], 'e-error');
                }, Link.prototype.removeLink = function(e) {
                    0 === this.parent.formatter.getUndoRedoStack().length && this.parent.formatter.saveData();
                    var selectParentEle = this.getAnchorNode(e.selectParent[0]);
                    this.parent.formatter.process(this.parent, e.args, e.args, {
                        selectNode: e.selectNode,
                        selectParent: e.selectParent,
                        selection: e.selection,
                        text: selectParentEle.innerText,
                        subCommand: e.args.item.subCommand
                    }), (0, common_util /* isIDevice */ .FA)() && this.parent.iframeSettings.enable ? (0, ej2_base /* select */ .Ys)('iframe', this.parent.element).contentWindow.focus() : this.parent.contentModule.getEditPanel().focus(), this.hideLinkQuickToolbar();
                }, Link.prototype.openLink = function(e) {
                    var selectParentEle = this.getAnchorNode(e.selectParent[0]);
                    (selectParentEle.classList.contains('e-rte-anchor') || 'A' === selectParentEle.tagName) && this.parent.formatter.process(this.parent, e.args, e.args, {
                        url: selectParentEle.href,
                        text: selectParentEle.innerText,
                        target: '' === selectParentEle.target ? '_self' : '_blank',
                        selectNode: e.selectNode,
                        subCommand: e.args.item.subCommand
                    });
                }, Link.prototype.getAnchorNode = function(element) {
                    return (0, ej2_base /* closest */ .oq)(element, 'a') || element;
                }, Link.prototype.editLink = function(e) {
                    var selectedNode = this.getAnchorNode(e.selectNode[0]), selectParentEle = this.getAnchorNode(e.selectParent[0]);
                    if ((selectParentEle = 'A' === selectedNode.nodeName ? selectedNode : selectParentEle).classList.contains('e-rte-anchor') || 'A' === selectParentEle.tagName) {
                        var linkUpdate = this.i10n.getConstant('dialogUpdate'), inputDetails = {
                            url: selectParentEle.getAttribute('href'),
                            text: selectParentEle.innerText,
                            title: selectParentEle.title,
                            target: selectParentEle.target,
                            header: this.i10n.getConstant('editLink'),
                            btnText: linkUpdate
                        };
                        this.linkDialog(e, inputDetails);
                    }
                }, // eslint-disable-next-line
                Link.prototype.cancelDialog = function(e) {
                    this.selfLink.parent.isBlur = !1, this.selfLink.dialogObj.hide({
                        returnValue: !0
                    }), (0, common_util /* isIDevice */ .FA)() ? this.selection.restore() : this.selfLink.parent.contentModule.getEditPanel().focus();
                }, Link.prototype.onDocumentClick = function(e) {
                    var target = e.target;
                    !(0, ej2_base /* isNullOrUndefined */ .le)(this.dialogObj) && (// eslint-disable-next-line
                    !(0, ej2_base /* closest */ .oq)(target, "[id='" + this.dialogObj.element.id + "']") && this.parent.toolbarSettings.enable && this.parent.getToolbarElement() && !this.parent.getToolbarElement().contains(e.target) || (this.parent.getToolbarElement() && this.parent.getToolbarElement().contains(e.target) || this.parent.inlineMode.enable && !(0, ej2_base /* closest */ .oq)(target, '#' + this.dialogObj.element.id)) && !(0, ej2_base /* closest */ .oq)(target, '#' + this.parent.getID() + '_toolbar_CreateLink') && !target.querySelector('#' + this.parent.getID() + '_toolbar_CreateLink')) && (this.dialogObj.hide({
                        returnValue: !0
                    }), ej2_base /* EventHandler.remove */ .bi.remove(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick), this.parent.isBlur = !0, (0, util /* dispatchEvent */ .Nu)(this.parent.element, 'focusout'));
                }, /**
     * Destroys the ToolBar.
     *
     * @function destroy
     * @returns {void}
     * @hidden

     */ Link.prototype.destroy = function() {
                    this.removeEventListener();
                }, Link.prototype.moduleDestroy = function() {
                    this.parent = null;
                }, /**
     * For internal use only - Get the module name.
     *
     * @returns {void}
     */ Link.prototype.getModuleName = function() {
                    return 'link';
                }, Link;
            }();
        /***/ },
        /***/ 9123: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ i: function() {
                    return /* binding */ Table;
                }
            });
            /* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1807), _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9486), _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(78), _base_constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3386), _base_enum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(809), _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8801), _base_classes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9805), _base_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5932), Table = /** @class */ function() {
                function Table(parent, serviceLocator) {
                    this.ensureInsideTableList = !0, this.pageX = null, this.pageY = null, this.moveEle = null, this.currentColumnResize = '', this.currentMarginLeft = 0, this.parent = parent, this.rteID = parent.element.id, this.l10n = serviceLocator.getService('rteLocale'), this.rendererFactory = serviceLocator.getService('rendererFactory'), this.dialogRenderObj = serviceLocator.getService('dialogRenderObject'), this.addEventListener();
                }
                return Table.prototype.addEventListener = function() {
                    this.parent.isDestroyed || (this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .createTable */ .W_, this.renderDlgContent, this), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .initialEnd */ .Xr, this.afterRender, this), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .dynamicModule */ .ny, this.afterRender, this), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .showTableDialog */ .Np, this.showDialog, this), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .closeTableDialog */ .HB, this.closeDialog, this), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .docClick */ .v4, this.docClick, this), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .editAreaClick */ .uU, this.editAreaClickHandler, this), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .clearDialogObj */ .zA, this.clearDialogObj, this), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .tableToolbarAction */ .ZY, this.onToolbarAction, this), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .dropDownSelect */ .s7, this.dropdownSelect, this), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .keyDown */ .QG, this.keyDown, this), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .mouseUp */ .vV, this.selectionTable, this), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .bindCssClass */ ._8, this.setCssClass, this), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .destroy */ .ob, this.destroy, this), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .moduleDestroy */ .P0, this.moduleDestroy, this));
                }, Table.prototype.removeEventListener = function() {
                    this.parent.isDestroyed || (this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .createTable */ .W_, this.renderDlgContent), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .initialEnd */ .Xr, this.afterRender), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .dynamicModule */ .ny, this.afterRender), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .docClick */ .v4, this.docClick), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .showTableDialog */ .Np, this.showDialog), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .closeTableDialog */ .HB, this.closeDialog), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .editAreaClick */ .uU, this.editAreaClickHandler), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .clearDialogObj */ .zA, this.clearDialogObj), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .tableToolbarAction */ .ZY, this.onToolbarAction), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .dropDownSelect */ .s7, this.dropdownSelect), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .mouseDown */ .uG, this.cellSelect), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .tableColorPickerChanged */ .Yo, this.setBGColor), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .keyDown */ .QG, this.keyDown), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .mouseUp */ .vV, this.selectionTable), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .bindCssClass */ ._8, this.setCssClass), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .destroy */ .ob, this.destroy), this.parent.off(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .moduleDestroy */ .P0, this.moduleDestroy));
                }, Table.prototype.updateCss = function(currentObj, e) {
                    currentObj && e.cssClass && ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(e.oldCssClass) ? currentObj.setProperties({
                        cssClass: (currentObj.cssClass + ' ' + e.cssClass).trim()
                    }) : currentObj.setProperties({
                        cssClass: (currentObj.cssClass.replace(e.oldCssClass, '').trim() + ' ' + e.cssClass).trim()
                    }));
                }, Table.prototype.setCssClass = function(e) {
                    this.popupObj && e.cssClass && ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(e.oldCssClass) || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        this.popupObj.element
                    ], e.oldCssClass), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        this.popupObj.element
                    ], e.cssClass)), this.updateCss(this.createTableButton, e), this.updateCss(this.editdlgObj, e);
                    for(var numericTextBoxObj = [
                        this.columnTextBox,
                        this.rowTextBox,
                        this.tableWidthNum,
                        this.tableCellPadding,
                        this.tableCellSpacing
                    ], i = 0; i < numericTextBoxObj.length; i++)this.updateCss(numericTextBoxObj[i], e);
                }, Table.prototype.selectionTable = function(e) {
                    var target = e.args.target;
                    'mozilla' !== _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.info.name */ .AR.info.name || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(target, 'table')) || 'TABLE' !== (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(target, 'table').tagName || this.parent.contentModule.getEditPanel().setAttribute('contenteditable', 'true');
                }, Table.prototype.afterRender = function() {
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.contentModule) && (this.contentModule = this.rendererFactory.getRenderer(_base_enum__WEBPACK_IMPORTED_MODULE_2__ /* .RenderType.Content */ .y2.Content), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .tableColorPickerChanged */ .Yo, this.setBGColor, this), this.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .mouseDown */ .uG, this.cellSelect, this), this.parent.tableSettings.resize && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.parent.contentModule.getEditPanel(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchStartEvent */ .AR.touchStartEvent, this.resizeStart, this), !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice && this.parent.tableSettings.resize && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.contentModule.getEditPanel(), 'mouseover', this.resizeHelper, this));
                }, Table.prototype.dropdownSelect = function(e) {
                    var item = e.item;
                    if (document.body.contains(document.body.querySelector('.e-rte-quick-toolbar')) && 'Table' === item.command) {
                        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument()), args = {
                            args: e,
                            selection: this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument()),
                            selectParent: this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range)
                        };
                        switch(item.subCommand){
                            case 'InsertRowBefore':
                            case 'InsertRowAfter':
                                this.addRow(args.selection, e);
                                break;
                            case 'InsertColumnLeft':
                            case 'InsertColumnRight':
                                this.addColumn(args.selection, e);
                                break;
                            case 'DeleteColumn':
                            case 'DeleteRow':
                                this.removeRowColumn(args.selection, e);
                                break;
                            case 'AlignTop':
                            case 'AlignMiddle':
                            case 'AlignBottom':
                                this.verticalAlign(args, e);
                                break;
                            case 'Dashed':
                            case 'Alternate':
                            case 'Custom':
                                this.tableStyles(args, item.subCommand);
                                break;
                            case 'Merge':
                            case 'VerticalSplit':
                            case 'HorizontalSplit':
                                this.UpdateCells(args.selection, e);
                        }
                    }
                }, Table.prototype.UpdateCells = function(selectCell, e) {
                    this.parent.formatter.process(this.parent, e, e, {
                        selection: selectCell,
                        subCommand: e.item.subCommand
                    }), this.hideTableQuickToolbar();
                }, Table.prototype.keyDown = function(e) {
                    var event = e.args;
                    switch(event.action){
                        case 'escape':
                            break;
                        case 'insert-table':
                            this.openDialog(!0, e), event.preventDefault();
                    }
                    if (!(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.parent.formatter.editorManager.nodeSelection) && this.contentModule && 'KeyK' !== event.code) {
                        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument()), selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument()), ele = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range)[0];
                        if (ele = ele && 'TD' !== ele.tagName && 'TH' !== ele.tagName ? ele.parentElement : ele, (8 === event.keyCode || 46 === event.keyCode || event.ctrlKey && 88 === event.keyCode) && (ele && 'TBODY' === ele.tagName ? (event.preventDefault(), this.removeTable(selection, event, !0)) : ele && ele.querySelectorAll('table').length > 0 && (this.removeResizeElement(), this.hideTableQuickToolbar())), ele && 'TD' !== ele.tagName && 'TH' !== ele.tagName) {
                            var closestTd = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'td');
                            ele = !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(closestTd) && this.parent.inputElement.contains(closestTd) ? closestTd : ele;
                        }
                        if (ele && ('TD' === ele.tagName || 'TH' === ele.tagName)) switch(event.keyCode){
                            case 9:
                            case 37:
                            case 39:
                                this.tabSelection(event, selection, ele);
                                break;
                            case 40:
                            case 38:
                                this.tableArrowNavigation(event, selection, ele);
                        }
                    }
                }, Table.prototype.openDialog = function(isInternal, e) {
                    if (isInternal || this.parent.contentModule.getEditPanel().focus(), 'HTML' === this.parent.editorMode) {
                        var docElement = this.parent.contentModule.getDocument(), range = this.parent.formatter.editorManager.nodeSelection.getRange(docElement), selection = this.parent.formatter.editorManager.nodeSelection.save(range, docElement), args = {
                            originalEvent: e ? e.args : {
                                action: 'insert-table'
                            },
                            item: {
                                command: 'Table',
                                subCommand: 'CreateTable'
                            }
                        };
                        this.insertTableDialog({
                            self: this,
                            args: args,
                            selection: selection
                        });
                    }
                }, Table.prototype.showDialog = function() {
                    this.openDialog(!1), this.setCssClass({
                        cssClass: this.parent.cssClass
                    });
                }, Table.prototype.closeDialog = function() {
                    this.editdlgObj && this.editdlgObj.hide({
                        returnValue: !0
                    });
                }, Table.prototype.onToolbarAction = function(args) {
                    switch(args.args.item.subCommand){
                        case 'TableHeader':
                            this.tableHeader(args.selection, args.args);
                            break;
                        case 'TableRemove':
                            this.removeTable(args.selection, args.args);
                            break;
                        case 'TableEditProperties':
                            this.editTable(args);
                    }
                }, Table.prototype.verticalAlign = function(args, e) {
                    var tdEle = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(args.selectParent[0], 'td') || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(args.selectParent[0], 'th');
                    tdEle && this.parent.formatter.process(this.parent, e, e, {
                        tableCell: tdEle,
                        subCommand: e.item.subCommand
                    });
                }, Table.prototype.tableStyles = function(args, command) {
                    var table = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(args.selectParent[0], 'table');
                    if ('Dashed' === command && (/* eslint-disable */ this.parent.element.classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_DASH_BOR */ .jQ) ? this.parent.element.classList.remove(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_DASH_BOR */ .jQ) : this.parent.element.classList.add(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_DASH_BOR */ .jQ), table.classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_DASH_BOR */ .jQ) ? table.classList.remove(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_DASH_BOR */ .jQ) : table.classList.add(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_DASH_BOR */ .jQ)), 'Alternate' === command && (this.parent.element.classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_ALT_BOR */ .yW) ? this.parent.element.classList.remove(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_ALT_BOR */ .yW) : this.parent.element.classList.add(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_ALT_BOR */ .yW), table.classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_ALT_BOR */ .yW) ? table.classList.remove(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_ALT_BOR */ .yW) : table.classList.add(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_ALT_BOR */ .yW)), args.args && args.args.item.cssClass) for(var classList = args.args.item.cssClass.split(' '), i = 0; i < classList.length; i++)table.classList.contains(classList[i]) ? table.classList.remove(classList[i]) : table.classList.add(classList[i]);
                    this.parent.formatter.saveData(), this.parent.formatter.editorManager.nodeSelection.restore();
                }, Table.prototype.insideList = function(range) {
                    for(var blockNodes = this.parent.formatter.editorManager.domNode.blockNodes(), nodes = [], i = 0; i < blockNodes.length; i++)'LI' === blockNodes[i].parentNode.tagName ? nodes.push(blockNodes[i].parentNode) : 'LI' === blockNodes[i].tagName && 'P' !== blockNodes[i].childNodes[0].tagName && 'OL' !== blockNodes[i].childNodes[0].tagName && 'UL' !== blockNodes[i].childNodes[0].tagName && nodes.push(blockNodes[i]);
                    return nodes.length > 1 || nodes.length && 0 === range.startOffset && 0 === range.endOffset ? (this.ensureInsideTableList = !0, !0) : (this.ensureInsideTableList = !1, !1);
                }, Table.prototype.tabSelection = function(event, selection, ele) {
                    var insideList = this.insideList(selection.range);
                    if ((37 !== event.keyCode && 39 !== event.keyCode || 3 !== selection.range.startContainer.nodeType) && !insideList) {
                        if (event.preventDefault(), ele.classList.remove(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TABLE_SEL */ .HC), event.shiftKey || 37 === event.keyCode) {
                            var prevElement = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(ele.previousSibling) ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'tr').previousSibling) ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').previousSibling) ? ele : 'td' === (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').previousSibling.nodeName.toLowerCase() ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').previousSibling : ele : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'tr').previousSibling.childNodes[(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'tr').previousSibling.childNodes.length - 1] : ele.previousSibling;
                            if (ele === prevElement && 0 === ele.cellIndex && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').tHead) {
                                var clsTble = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table');
                                prevElement = clsTble.rows[0].cells[clsTble.rows[0].cells.length - 1];
                            }
                            37 === event.keyCode && ele === prevElement && (prevElement = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').previousSibling), prevElement && (// eslint-disable-next-line
                            '' !== prevElement.textContent.trim() && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(prevElement, 'td') ? selection.setSelectionNode(this.contentModule.getDocument(), prevElement) : selection.setSelectionText(this.contentModule.getDocument(), prevElement, prevElement, 0, 0));
                        } else {
                            var nextElement = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(ele.nextSibling) ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'tr').nextSibling) ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').nextSibling) ? ele : 'td' === (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').nextSibling.nodeName.toLowerCase() ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').nextSibling : ele : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'tr').nextSibling.childNodes[0] : ele.nextSibling;
                            ele === nextElement && 'TH' === ele.nodeName && (nextElement = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').rows[1].cells[0]), 39 === event.keyCode && ele === nextElement && (nextElement = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').nextSibling), nextElement && (// eslint-disable-next-line
                            '' !== nextElement.textContent.trim() && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(nextElement, 'td') ? selection.setSelectionNode(this.contentModule.getDocument(), nextElement) : selection.setSelectionText(this.contentModule.getDocument(), nextElement, nextElement, 0, 0)), ele === nextElement && 39 !== event.keyCode && nextElement && (ele.classList.add(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TABLE_SEL */ .HC), this.addRow(selection, event, !0), ele.classList.remove(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TABLE_SEL */ .HC), // eslint-disable-next-line
                            '' !== (nextElement = nextElement.parentElement.nextSibling ? nextElement.parentElement.nextSibling.firstChild : nextElement.parentElement.firstChild).textContent.trim() && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(nextElement, 'td') ? selection.setSelectionNode(this.contentModule.getDocument(), nextElement) : selection.setSelectionText(this.contentModule.getDocument(), nextElement, nextElement, 0, 0));
                        }
                    }
                }, Table.prototype.tableArrowNavigation = function(event, selection, ele) {
                    var selText = selection.range.startContainer;
                    40 === event.keyCode && 3 === selText.nodeType && (selText.nextSibling && 'BR' === selText.nextSibling.nodeName || selText.parentNode && 'TD' !== selText.parentNode.nodeName) || 38 === event.keyCode && 3 === selText.nodeType && (selText.previousSibling && 'BR' === selText.previousSibling.nodeName || selText.parentNode && 'TD' !== selText.parentNode.nodeName) || (event.preventDefault(), ele.classList.remove(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TABLE_SEL */ .HC), (ele = 40 === event.keyCode ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'tr').nextElementSibling) ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').tHead && 'TH' === ele.nodeName ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').rows[1].cells[ele.cellIndex] : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').nextSibling) ? ele : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').nextSibling : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'tr').nextElementSibling.children[ele.cellIndex] : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'tr').previousElementSibling) ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').tHead && 'TH' !== ele.nodeName ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').tHead.rows[0].cells[ele.cellIndex] : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').previousSibling) ? ele : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'table').previousSibling : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(ele, 'tr').previousElementSibling.children[ele.cellIndex]) && selection.setSelectionText(this.contentModule.getDocument(), ele, ele, 0, 0));
                }, Table.prototype.setBGColor = function(args) {
                    var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
                    // eslint-disable-next-line
                    this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument());
                    for(var selectedCells = this.curTable.querySelectorAll('.e-cell-select'), i = 0; i < selectedCells.length; i++)selectedCells[i].style.backgroundColor = args.item.value;
                    this.parent.formatter.saveData();
                }, Table.prototype.hideTableQuickToolbar = function() {
                    this.quickToolObj && this.quickToolObj.tableQTBar && document.body.contains(this.quickToolObj.tableQTBar.element) && this.quickToolObj.tableQTBar.hidePopup();
                }, Table.prototype.tableHeader = function(selection, e) {
                    this.parent.formatter.process(this.parent, e, e.originalEvent, {
                        selection: selection,
                        subCommand: e.item.subCommand
                    });
                }, Table.prototype.editAreaClickHandler = function(e) {
                    if (!this.parent.readonly && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(e.args.target, '.e-img-caption'))) {
                        var args = e.args, showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;
                        if (2 !== args.which && (!showOnRightClick || 1 !== args.which) && (showOnRightClick || 3 !== args.which) && 'HTML' === this.parent.editorMode && this.parent.quickToolbarModule && this.parent.quickToolbarModule.tableQTBar) {
                            this.quickToolObj = this.parent.quickToolbarModule;
                            var target = args.target;
                            if (this.contentModule = this.rendererFactory.getRenderer(_base_enum__WEBPACK_IMPORTED_MODULE_2__ /* .RenderType.Content */ .y2.Content), this.quickToolObj.tableQTBar.element.classList.contains('e-rte-pop')) return;
                            var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument()), closestTable = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(target, 'table'), startNode = this.parent.getRange().startContainer.parentElement, endNode = this.parent.getRange().endContainer.parentElement;
                            if (target && 'A' !== target.nodeName && 'IMG' !== target.nodeName && startNode === endNode && ('TD' === target.nodeName || 'TH' === target.nodeName || 'TABLE' === target.nodeName || closestTable && this.parent.contentModule.getEditPanel().contains(closestTable)) && !(3 === range.startContainer.nodeType && !range.collapsed)) {
                                var range_1 = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
                                this.parent.formatter.editorManager.nodeSelection.save(range_1, this.contentModule.getDocument()), this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
                                var pageY = this.parent.iframeSettings.enable ? window.pageYOffset + this.parent.element.getBoundingClientRect().top + args.clientY : args.pageY;
                                this.quickToolObj.tableQTBar.showPopup(args.pageX, pageY, target), this.parent.formatter.editorManager.nodeSelection.restore();
                            } else this.hideTableQuickToolbar();
                        }
                    }
                }, Table.prototype.tableCellSelect = function(e) {
                    var target = e.target, row = Array.prototype.slice.call(target.parentElement.parentElement.children).indexOf(target.parentElement), col = Array.prototype.slice.call(target.parentElement.children).indexOf(target), list = this.dlgDiv.querySelectorAll('.e-rte-tablecell');
                    Array.prototype.forEach.call(list, function(item) {
                        var parentIndex = Array.prototype.slice.call(item.parentElement.parentElement.children).indexOf(item.parentElement), cellIndex = Array.prototype.slice.call(item.parentElement.children).indexOf(item);
                        (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                            item
                        ], 'e-active'), parentIndex <= row && cellIndex <= col && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                            item
                        ], 'e-active');
                    }), this.tblHeader.innerHTML = col + 1 + 'x' + (row + 1);
                }, // eslint-disable-next-line
                Table.prototype.tableMouseUp = function(e) {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.curTable, 'mousemove', this.tableMove);
                }, // eslint-disable-next-line
                Table.prototype.tableCellLeave = function(e) {
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)(this.dlgDiv.querySelectorAll('.e-rte-tablecell'), 'e-active'), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        this.dlgDiv.querySelector('.e-rte-tablecell')
                    ], 'e-active'), this.tblHeader.innerHTML = "1x1";
                }, Table.prototype.tableCellClick = function(e) {
                    var target = e.target, row = Array.prototype.slice.call(target.parentElement.parentElement.children).indexOf(target.parentElement) + 1, col = Array.prototype.slice.call(target.parentElement.children).indexOf(target) + 1;
                    this.self.tableInsert(row, col, e, this);
                }, Table.prototype.tableInsert = function(row, col, e, selectionObj) {
                    var proxy = selectionObj.self ? selectionObj.self : this, startContainer = selectionObj.selection.range.startContainer;
                    'P' !== startContainer.nodeName || '' !== startContainer.textContent.trim() || startContainer.childNodes.length > 0 || (startContainer.innerHTML = '<br />');
                    var parentNode = startContainer.parentNode;
                    if ('HTML' === proxy.parent.editorMode && (proxy.parent.iframeSettings.enable && !(0, _base_util__WEBPACK_IMPORTED_MODULE_4__ /* .hasClass */ .pv)(parentNode.ownerDocument.querySelector('body'), 'e-lib') || // eslint-disable-next-line
                    !proxy.parent.iframeSettings.enable && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(parentNode, "[id='" + proxy.contentModule.getPanel().id + "']")))) {
                        proxy.contentModule.getEditPanel().focus();
                        var range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.contentModule.getDocument());
                        selectionObj.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.contentModule.getDocument());
                    }
                    var value = {
                        rows: row,
                        columns: col,
                        width: {
                            minWidth: proxy.parent.tableSettings.minWidth,
                            maxWidth: proxy.parent.tableSettings.maxWidth,
                            width: proxy.parent.tableSettings.width
                        },
                        selection: selectionObj.selection
                    };
                    proxy.popupObj && proxy.popupObj.hide(), proxy.editdlgObj && proxy.editdlgObj.hide(), proxy.parent.formatter.process(proxy.parent, selectionObj.args, selectionObj.args.originalEvent, value), proxy.contentModule.getEditPanel().focus(), proxy.parent.on(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .mouseDown */ .uG, proxy.cellSelect, proxy);
                }, Table.prototype.cellSelect = function(e) {
                    var target = e.args.target, tdNode = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(target, 'td,th');
                    target = 'TD' !== target.nodeName && tdNode && this.parent.contentModule.getEditPanel().contains(tdNode) ? tdNode : target, (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)(this.contentModule.getEditPanel().querySelectorAll('table td, table th'), _base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TABLE_SEL */ .HC), target && ('TD' === target.tagName || 'TH' === target.tagName) && ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        target
                    ], _base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TABLE_SEL */ .HC), this.activeCell = target, this.curTable = this.curTable ? this.curTable : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(target, 'table'), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.curTable, 'mousemove', this.tableMove, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.curTable, 'mouseup', this.tableMouseUp, this), this.removeResizeElement(), this.helper && this.contentModule.getEditPanel().contains(this.helper) && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(this.helper)), 'mozilla' !== _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.info.name */ .AR.info.name || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(target, 'table')) || 'TABLE' !== (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(target, 'table').tagName || this.parent.contentModule.getEditPanel().setAttribute('contenteditable', 'false');
                }, Table.prototype.tableMove = function(event) {
                    this.parent.formatter.editorManager.observer.notify('TABLE_MOVE', {
                        event: event,
                        selectNode: [
                            this.activeCell
                        ]
                    });
                }, Table.prototype.resizeHelper = function(e) {
                    if (!this.parent.readonly) {
                        var target = e.target || e.targetTouches[0].target, closestTable = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(target, 'table.e-rte-table');
                        !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.curTable) && !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(closestTable) && closestTable !== this.curTable && this.parent.contentModule.getEditPanel().contains(closestTable) && (this.removeResizeElement(), this.removeHelper(e), this.cancelResizeAction()), ('TABLE' === target.nodeName || 'TD' === target.nodeName || 'TH' === target.nodeName) && (this.curTable = closestTable && this.parent.contentModule.getEditPanel().contains(closestTable) && ('TD' === target.nodeName || 'TH' === target.nodeName) ? closestTable : target, this.removeResizeElement(), this.tableResizeEleCreation(this.curTable, e));
                    }
                }, Table.prototype.tableResizeEleCreation = function(table, e) {
                    this.parent.preventDefaultResize(e);
                    for(var columns = table.rows[this.calMaxCol(table)].cells, rows = [], i = 0; i < table.rows.length; i++)rows.push(Array.prototype.slice.call(table.rows[i].cells, 0, 1)[0]);
                    for(var height = parseInt(getComputedStyle(table).height, 10), width = parseInt(getComputedStyle(table).width, 10), pos = this.calcPos(table), i = 0; columns.length >= i; i++){
                        var colReEle = this.parent.createElement('span', {
                            attrs: {
                                'data-col': i.toString(),
                                unselectable: 'on',
                                contenteditable: 'false'
                            }
                        });
                        colReEle.classList.add(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_RTE_TABLE_RESIZE */ .IJ, _base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_COL_RES */ .rp), columns.length === i ? colReEle.style.cssText = 'height: ' + height + 'px; width: 4px; top: ' + pos.top + 'px; left:' + (pos.left + this.calcPos(columns[i - 1]).left + columns[i - 1].offsetWidth) + 'px;' : colReEle.style.cssText = 'height: ' + height + 'px; width: 4px; top: ' + pos.top + 'px; left:' + (pos.left + this.calcPos(columns[i]).left) + 'px;', this.contentModule.getEditPanel().appendChild(colReEle);
                    }
                    for(var i = 0; rows.length > i; i++){
                        var rowReEle = this.parent.createElement('span', {
                            attrs: {
                                'data-row': i.toString(),
                                unselectable: 'on',
                                contenteditable: 'false'
                            }
                        });
                        rowReEle.classList.add(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_RTE_TABLE_RESIZE */ .IJ, _base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_ROW_RES */ .Dw);
                        var rowPosLeft = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(table.getAttribute('cellspacing')) && '' === table.getAttribute('cellspacing') ? this.calcPos(rows[i]).left : 0;
                        rowReEle.style.cssText = 'width: ' + width + 'px; height: 4px; top: ' + (this.calcPos(rows[i]).top + pos.top + rows[i].offsetHeight - 2) + 'px; left:' + (rowPosLeft + pos.left) + 'px;', this.contentModule.getEditPanel().appendChild(rowReEle);
                    }
                    var tableReBox = this.parent.createElement('span', {
                        className: _base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_BOX_RES */ .uX + ' ' + this.parent.cssClass,
                        attrs: {
                            'data-col': columns.length.toString(),
                            unselectable: 'on',
                            contenteditable: 'false'
                        }
                    });
                    tableReBox.style.cssText = 'top: ' + (pos.top + height - 4) + 'px; left:' + (pos.left + width - 4) + 'px;', _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice && tableReBox.classList.add('e-rmob'), this.contentModule.getEditPanel().appendChild(tableReBox);
                }, Table.prototype.removeResizeElement = function() {
                    var item = this.parent.contentModule.getEditPanel().querySelectorAll('.e-column-resize, .e-row-resize, .e-table-box');
                    if (item.length > 0) for(var i = 0; i < item.length; i++)(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(item[i]);
                }, Table.prototype.calcPos = function(elem) {
                    for(var parentOffset = {
                        top: 0,
                        left: 0
                    }, offset = elem.getBoundingClientRect(), doc = elem.ownerDocument, offsetParent = elem.offsetParent || doc.documentElement, isNestedTable = !1; offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && 'static' === offsetParent.style.position;)offsetParent = offsetParent.parentNode;
                    return ('TD' === offsetParent.nodeName && 'TABLE' === elem.nodeName && (offsetParent = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(offsetParent, '.e-rte-content'), isNestedTable = !0), offsetParent && offsetParent !== elem && 1 === offsetParent.nodeType && // eslint-disable-next-line
                    (parentOffset = offsetParent.getBoundingClientRect()), isNestedTable) ? (isNestedTable = !1, {
                        top: this.parent.inputElement && this.parent.inputElement.scrollTop > 0 ? this.parent.inputElement.scrollTop + offset.top - parentOffset.top : offset.top - parentOffset.top,
                        left: this.parent.inputElement && this.parent.inputElement.scrollLeft > 0 ? this.parent.inputElement.scrollLeft + offset.left - parentOffset.left : offset.left - parentOffset.left
                    }) : {
                        top: elem.offsetTop,
                        left: elem.offsetLeft
                    };
                }, Table.prototype.getPointX = function(e) {
                    return e.touches && e.touches.length ? e.touches[0].pageX : e.pageX;
                }, Table.prototype.getPointY = function(e) {
                    return e.touches && e.touches.length ? e.touches[0].pageY : e.pageY;
                }, Table.prototype.resizeStart = function(e) {
                    var _this = this;
                    if (!this.parent.readonly) {
                        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice && this.resizeHelper(e);
                        var target = e.target;
                        (target.classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_COL_RES */ .rp) || target.classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_ROW_RES */ .Dw) || target.classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_BOX_RES */ .uX)) && (e.preventDefault(), this.parent.preventDefaultResize(e), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)(this.curTable.querySelectorAll('td,th'), _base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TABLE_SEL */ .HC), this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument()), this.pageX = this.getPointX(e), this.pageY = this.getPointY(e), this.resizeBtnInit(), this.hideTableQuickToolbar(), target.classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_COL_RES */ .rp) && (this.resizeBtnStat.column = !0, parseInt(target.getAttribute('data-col'), 10) === this.curTable.rows[this.calMaxCol(this.curTable)].cells.length ? (this.currentColumnResize = 'last', this.columnEle = this.curTable.rows[this.calMaxCol(this.curTable)].cells[parseInt(target.getAttribute('data-col'), 10) - 1]) : (0 === parseInt(target.getAttribute('data-col'), 10) ? this.currentColumnResize = 'first' : this.currentColumnResize = 'middle', this.columnEle = this.curTable.rows[this.calMaxCol(this.curTable)].cells[parseInt(target.getAttribute('data-col'), 10)]), this.colIndex = this.columnEle.cellIndex, this.moveEle = e.target, this.appendHelper()), target.classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_ROW_RES */ .Dw) && (this.rowEle = this.curTable.rows[parseInt(target.getAttribute('data-row'), 10)], this.resizeBtnStat.row = !0, this.appendHelper()), target.classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_BOX_RES */ .uX) && (this.resizeBtnStat.tableBox = !0), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice && this.helper && !this.helper.classList.contains('e-reicon') ? (this.helper.classList.add('e-reicon'), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(document, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchStartEvent */ .AR.touchStartEvent, this.removeHelper, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.helper, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchStartEvent */ .AR.touchStartEvent, this.resizeStart, this)) : this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .resizeStart */ .tw, {
                            event: e,
                            requestType: 'Table'
                        }, function(resizeStartArgs) {
                            resizeStartArgs.cancel && _this.cancelResizeAction();
                        }), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchMoveEvent */ .AR.touchMoveEvent, this.resizing, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchEndEvent */ .AR.touchEndEvent, this.resizeEnd, this));
                    }
                }, Table.prototype.removeHelper = function(e) {
                    !e.target.classList.contains('e-reicon') && this.helper && (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(document, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchStartEvent */ .AR.touchStartEvent, this.removeHelper), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.helper, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchStartEvent */ .AR.touchStartEvent, this.resizeStart), this.helper && this.contentModule.getEditPanel().contains(this.helper) && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(this.helper), this.pageX = null, this.helper = null);
                }, Table.prototype.appendHelper = function() {
                    this.helper = this.parent.createElement('div', {
                        className: "e-table-rhelper " + this.parent.cssClass
                    }), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice && this.helper.classList.add('e-reicon'), this.contentModule.getEditPanel().appendChild(this.helper), this.setHelperHeight();
                }, Table.prototype.setHelperHeight = function() {
                    var pos = this.calcPos(this.curTable);
                    this.resizeBtnStat.column ? (this.helper.classList.add('e-column-helper'), this.helper.style.cssText = 'height: ' + getComputedStyle(this.curTable).height + '; top: ' + pos.top + 'px; left:' + (pos.left + this.calcPos(this.columnEle).left + ('last' === this.currentColumnResize ? this.columnEle.offsetWidth + 2 : 0) - 1) + 'px;') : (this.helper.classList.add('e-row-helper'), this.helper.style.cssText = 'width: ' + getComputedStyle(this.curTable).width + '; top: ' + (this.calcPos(this.rowEle).top + pos.top + this.rowEle.offsetHeight) + 'px; left:' + (this.calcPos(this.rowEle).left + pos.left) + 'px;');
                }, Table.prototype.updateHelper = function() {
                    var pos = this.calcPos(this.curTable);
                    if (this.resizeBtnStat.column) {
                        var left = pos.left + this.calcPos(this.columnEle).left + ('last' === this.currentColumnResize ? this.columnEle.offsetWidth + 2 : 0) - 1;
                        this.helper.style.left = left + 'px';
                    } else {
                        var top_1 = this.calcPos(this.rowEle).top + pos.top + this.rowEle.offsetHeight;
                        this.helper.style.top = top_1 + 'px';
                    }
                }, Table.prototype.calMaxCol = function(element) {
                    for(var maxRowIndex, max = 0, i = 0; i < element.rows.length; i++)max < element.rows[i].cells.length && (maxRowIndex = i, max = element.rows[i].cells.length);
                    return maxRowIndex;
                }, Table.prototype.resizing = function(e) {
                    var _this = this, pageX = this.getPointX(e), pageY = this.getPointY(e), mouseX = this.parent.enableRtl ? -(pageX - this.pageX) : pageX - this.pageX, mouseY = this.parent.enableRtl ? -(pageY - this.pageY) : pageY - this.pageY;
                    this.pageX = pageX, this.pageY = pageY, this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .onResize */ .ib, {
                        event: e,
                        requestType: 'table'
                    }, function(resizingArgs) {
                        if (resizingArgs.cancel) _this.cancelResizeAction();
                        else {
                            var tableReBox = _this.contentModule.getEditPanel().querySelector('.e-table-box'), tableWidth = parseInt(getComputedStyle(_this.curTable).width, 10), tableHeight = parseInt(getComputedStyle(_this.curTable).height, 10), paddingSize = +getComputedStyle(_this.contentModule.getEditPanel()).paddingRight.match(/\d/g).join(''), rteWidth = _this.contentModule.getEditPanel().offsetWidth - (_this.contentModule.getEditPanel().offsetWidth - _this.contentModule.getEditPanel().clientWidth) - 2 * paddingSize, widthCompare = void 0;
                            if (!(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(_this.curTable.parentElement.closest('table')) && !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(_this.curTable.closest('td')) && _this.contentModule.getEditPanel().contains(_this.curTable.closest('td'))) {
                                var currentTd = _this.curTable.closest('td'), currentTDPad = +getComputedStyle(currentTd).paddingRight.match(/\d/g).join('');
                                // Padding of the current table with the parent element multiply with 2.
                                widthCompare = currentTd.offsetWidth - (currentTd.offsetWidth - currentTd.clientWidth) - 2 * currentTDPad;
                            } else widthCompare = rteWidth;
                            if (_this.resizeBtnStat.column) {
                                var width = parseFloat(_this.columnEle.offsetWidth.toString()), cellRow = 'TH' === _this.curTable.rows[0].cells[0].nodeName ? 1 : 0, currentTableWidth = parseFloat(_this.curTable.style.width.split('%')[0]), currentColumnCellWidth = parseFloat(_this.curTable.rows[cellRow].cells[_this.colIndex].style.width.split('%')[0]);
                                if ('first' === _this.currentColumnResize) // Below the value '100' is the 100% width of the parent element.
                                {
                                    if (mouseX -= 0.75, _this.removeResizeElement(), (0 !== mouseX && 5 < currentColumnCellWidth || mouseX < 0) && currentTableWidth <= 100 && 100 >= _this.convertPixelToPercentage(tableWidth - mouseX, widthCompare)) {
                                        var firstColumnsCell = _this.findFirstLastColCells(_this.curTable, !0);
                                        _this.curTable.style.width = _this.convertPixelToPercentage(tableWidth - mouseX, widthCompare) > 100 ? "100%" : _this.convertPixelToPercentage(tableWidth - mouseX, widthCompare) + '%';
                                        var differenceWidth = currentTableWidth - _this.convertPixelToPercentage(tableWidth - mouseX, widthCompare);
                                        _this.currentMarginLeft = _this.currentMarginLeft + differenceWidth, _this.curTable.style.marginLeft = 'calc(' + ('100%' === _this.curTable.style.width ? 0 : _this.currentMarginLeft) + '%)';
                                        for(var i = 0; i < firstColumnsCell.length; i++)_this.curTable.rows[i].cells[_this.colIndex].style.width = currentColumnCellWidth - differenceWidth + '%';
                                    }
                                } else if ('last' === _this.currentColumnResize) // Below the value '100' is the 100% width of the parent element.
                                {
                                    if (mouseX += 0.75, _this.removeResizeElement(), (0 !== mouseX && 5 < currentColumnCellWidth || mouseX > 0) && currentTableWidth <= 100 && 100 >= _this.convertPixelToPercentage(tableWidth + mouseX, widthCompare)) {
                                        var lastColumnsCell = _this.findFirstLastColCells(_this.curTable, !1);
                                        _this.curTable.style.width = _this.convertPixelToPercentage(tableWidth + mouseX, widthCompare) > 100 ? "100%" : _this.convertPixelToPercentage(tableWidth + mouseX, widthCompare) + '%';
                                        for(var differenceWidth = currentTableWidth - _this.convertPixelToPercentage(tableWidth + mouseX, widthCompare), i = 0; i < lastColumnsCell.length; i++)_this.curTable.rows[i].cells[_this.colIndex].style.width = currentColumnCellWidth - differenceWidth + '%';
                                    }
                                } else for(var cellColl = _this.curTable.rows[_this.calMaxCol(_this.curTable)].cells, actualwid = width - mouseX, totalwid = parseFloat(_this.columnEle.offsetWidth.toString()) + parseFloat(cellColl[_this.colIndex - 1].offsetWidth.toString()), i = 0; i < _this.curTable.rows.length; i++)if (totalwid - actualwid > 20 && actualwid > 20) {
                                    var leftColumnWidth = totalwid - actualwid;
                                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(_this.curTable.rows[i].cells[_this.colIndex - 1]) || (_this.curTable.rows[i].cells[_this.colIndex - 1].style.width = _this.convertPixelToPercentage(leftColumnWidth, tableWidth) + '%'), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(_this.curTable.rows[i].cells[_this.colIndex]) || (_this.curTable.rows[i].cells[_this.colIndex].style.width = _this.convertPixelToPercentage(actualwid, tableWidth) + '%');
                                }
                                _this.updateHelper();
                            } else if (_this.resizeBtnStat.row) {
                                _this.parent.preventDefaultResize(e);
                                var height = parseFloat(_this.rowEle.clientHeight.toString()) + mouseY;
                                height > 20 && (_this.rowEle.style.height = height + 'px'), _this.curTable.style.height = '', (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(tableReBox) || (tableReBox.style.cssText = 'top: ' + (_this.calcPos(_this.curTable).top + tableHeight - 4) + 'px; left:' + (_this.calcPos(_this.curTable).left + tableWidth - 4) + 'px;'), _this.updateHelper();
                            } else if (_this.resizeBtnStat.tableBox) {
                                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(_this.contentModule.getEditPanel(), 'mouseover', _this.resizeHelper);
                                var widthType = _this.curTable.style.width.indexOf('%') > -1;
                                _this.curTable.style.width = widthType ? _this.convertPixelToPercentage(tableWidth + mouseX, widthCompare) + '%' : tableWidth + mouseX + 'px', _this.curTable.style.height = tableHeight + mouseY + 'px', tableReBox.classList.add('e-rbox-select'), tableReBox.style.cssText = 'top: ' + (_this.calcPos(_this.curTable).top + tableHeight - 4) + 'px; left:' + (_this.calcPos(_this.curTable).left + tableWidth - 4) + 'px;';
                            }
                        }
                    });
                }, Table.prototype.findFirstLastColCells = function(table, isFirst) {
                    for(var resultColumns = [], rows = table.querySelectorAll('tr'), i = 0; i < rows.length; i++)if (rows[i].closest('table') === table) {
                        var columns = rows[i].querySelectorAll('th, td');
                        resultColumns.push(isFirst ? columns[0] : columns[columns.length - 1]);
                    }
                    return resultColumns;
                }, Table.prototype.convertPixelToPercentage = function(value, offsetValue) {
                    return value / offsetValue * 100;
                }, Table.prototype.cancelResizeAction = function() {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchMoveEvent */ .AR.touchMoveEvent, this.resizing), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchEndEvent */ .AR.touchEndEvent, this.resizeEnd), this.removeResizeElement();
                }, Table.prototype.resizeEnd = function(e) {
                    this.resizeBtnInit(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchMoveEvent */ .AR.touchMoveEvent, this.resizing), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.remove */ .bi.remove(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.touchEndEvent */ .AR.touchEndEvent, this.resizeEnd), this.contentModule.getEditPanel().querySelector('.e-table-box') && this.contentModule.getEditPanel().contains(this.contentModule.getEditPanel().querySelector('.e-table-box')) && (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(this.contentModule.getEditPanel(), 'mouseover', this.resizeHelper, this), this.removeResizeElement()), this.helper && this.contentModule.getEditPanel().contains(this.helper) && ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(this.helper), this.helper = null), this.pageX = null, this.pageY = null, this.moveEle = null, this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_1__ /* .resizeStop */ .d$, {
                        event: e,
                        requestType: 'table'
                    }), this.parent.formatter.saveData();
                }, Table.prototype.resizeBtnInit = function() {
                    return this.resizeBtnStat = {
                        column: !1,
                        row: !1,
                        tableBox: !1
                    };
                }, Table.prototype.addRow = function(selectCell, e, tabkey) {
                    tabkey && (cmd = {
                        item: {
                            command: 'Table',
                            subCommand: 'InsertRowAfter'
                        }
                    });
                    var cmd, value = {
                        selection: selectCell,
                        subCommand: tabkey ? cmd.item.subCommand : e.item.subCommand
                    };
                    this.parent.formatter.process(this.parent, tabkey ? cmd : e, e, value);
                }, Table.prototype.addColumn = function(selectCell, e) {
                    this.parent.formatter.process(this.parent, e, e, {
                        selection: selectCell,
                        width: this.parent.tableSettings.width,
                        subCommand: e.item.subCommand
                    });
                }, Table.prototype.removeRowColumn = function(selectCell, e) {
                    this.parent.formatter.process(this.parent, e, e, {
                        selection: selectCell,
                        subCommand: e.item.subCommand
                    }), this.hideTableQuickToolbar();
                }, Table.prototype.removeTable = function(selection, args, delKey) {
                    delKey && (cmd = {
                        item: {
                            command: 'Table',
                            subCommand: 'TableRemove'
                        }
                    });
                    var cmd, value = {
                        selection: selection,
                        subCommand: delKey ? cmd.item.subCommand : args.item.subCommand
                    };
                    this.parent.formatter.process(this.parent, delKey ? cmd : args, args.originalEvent, value), this.contentModule.getEditPanel().focus(), (null === this.parent.inputElement.innerHTML || '' === this.parent.inputElement.innerHTML) && ('DIV' === this.parent.enterKey ? this.contentModule.getEditPanel().innerHTML = '<div><br/></div>' : 'BR' === this.parent.enterKey ? this.contentModule.getEditPanel().innerHTML = '<br/>' : this.contentModule.getEditPanel().innerHTML = '<p><br/></p>'), this.removeResizeElement(), this.hideTableQuickToolbar();
                }, Table.prototype.renderDlgContent = function(args) {
                    var _this = this;
                    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice || this.parent.inlineMode.enable) {
                        this.insertTableDialog(args);
                        return;
                    }
                    if (this.popupObj) {
                        this.popupObj.hide();
                        return;
                    }
                    this.hideTableQuickToolbar();
                    var insertbtn = this.l10n.getConstant('inserttablebtn');
                    this.dlgDiv = this.parent.createElement('div', {
                        className: "e-rte-table-popup " + this.parent.cssClass,
                        id: this.rteID + '_table'
                    }), this.tblHeader = this.parent.createElement('div', {
                        className: "e-rte-popup-header " + this.parent.cssClass
                    }), this.tblHeader.innerHTML = '1X1', this.dlgDiv.appendChild(this.tblHeader);
                    var tableDiv = this.parent.createElement('div', {
                        className: "e-rte-table-span " + this.parent.cssClass
                    });
                    this.drawTable(tableDiv, args), this.dlgDiv.appendChild(tableDiv), this.dlgDiv.appendChild(this.parent.createElement('span', {
                        className: "e-span-border " + this.parent.cssClass
                    }));
                    var btnEle = this.parent.createElement('button', {
                        className: "e-insert-table-btn " + this.parent.cssClass,
                        id: this.rteID + '_insertTable',
                        attrs: {
                            type: 'button',
                            tabindex: '0'
                        }
                    });
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.parent.getToolbarElement().querySelector('.e-expended-nav')) || this.parent.getToolbarElement().querySelector('.e-expended-nav').setAttribute('tabindex', '1'), this.dlgDiv.appendChild(btnEle), this.createTableButton = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_5__ /* .Button */ .z({
                        iconCss: 'e-icons e-create-table',
                        content: insertbtn,
                        cssClass: "e-flat " + this.parent.cssClass,
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale
                    }), this.createTableButton.isStringTemplate = !0, this.createTableButton.appendTo(btnEle), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(btnEle, 'click', this.insertTableDialog, {
                        self: this,
                        args: args.args,
                        selection: args.selection
                    }), this.parent.getToolbar().appendChild(this.dlgDiv);
                    var target = args.args.originalEvent.target;
                    target = target.classList.contains('e-toolbar-item') ? target.firstChild : target.parentElement, this.popupObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_6__ /* .Popup */ .GI(this.dlgDiv, {
                        targetType: 'relative',
                        relateTo: target,
                        collision: {
                            X: 'fit',
                            Y: 'none'
                        },
                        offsetY: 8,
                        viewPortElement: this.parent.element,
                        position: {
                            X: 'left',
                            Y: 'bottom'
                        },
                        enableRtl: this.parent.enableRtl,
                        zIndex: 10001,
                        // eslint-disable-next-line
                        close: function(event) {
                            _this.parent.isBlur = !1, _this.popupObj.destroy(), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(_this.popupObj.element), _this.popupObj = null;
                        }
                    }), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        this.popupObj.element
                    ], 'e-popup-open'), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.parent.cssClass) || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        this.popupObj.element
                    ], this.parent.cssClass), this.popupObj.refreshPosition(target);
                }, Table.prototype.docClick = function(e) {
                    var target = e.args.target;
                    target && target.classList && (this.popupObj && !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(target, "[id='" + this.popupObj.element.id + "']") || this.editdlgObj && !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(target, '#' + this.editdlgObj.element.id)) && !target.classList.contains('e-create-table') && target.offsetParent && !target.offsetParent.classList.contains('e-rte-backgroundcolor-dropdown') && (this.popupObj && this.popupObj.hide(), this.editdlgObj && this.editdlgObj.hide(), this.parent.isBlur = !0, (0, _base_util__WEBPACK_IMPORTED_MODULE_4__ /* .dispatchEvent */ .Nu)(this.parent.element, 'focusout'));
                    var closestEle = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(target, 'td'), isExist = !!(closestEle && this.parent.contentModule.getEditPanel().contains(closestEle));
                    !target || 'TD' === target.tagName || 'TH' === target.tagName || isExist || null !== (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(target, '.e-rte-quick-popup') || !target.offsetParent || target.offsetParent.classList.contains('e-quick-dropdown') || target.offsetParent.classList.contains('e-rte-backgroundcolor-dropdown') || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(target, '.e-rte-dropdown-popup') || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(target, '.e-rte-elements') || ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)(this.parent.inputElement.querySelectorAll('table td'), _base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TABLE_SEL */ .HC), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isIE */ .AR.isIE || this.hideTableQuickToolbar()), !target || !target.classList || target.classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_COL_RES */ .rp) || target.classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_ROW_RES */ .Dw) || target.classList.contains(_base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TB_BOX_RES */ .uX) || this.removeResizeElement();
                }, Table.prototype.drawTable = function(tableDiv, args) {
                    for(var rowDiv, tableCell, row = 0; row < 3; row++){
                        rowDiv = this.parent.createElement('div', {
                            className: "e-rte-table-row " + this.parent.cssClass,
                            attrs: {
                                'data-column': '' + row
                            }
                        });
                        for(var col = 0; col < 10; col++){
                            var display = row > 2 ? 'none' : 'inline-block';
                            tableCell = this.parent.createElement('div', {
                                className: "e-rte-tablecell e-default " + this.parent.cssClass,
                                attrs: {
                                    'data-cell': '' + col
                                }
                            }), rowDiv.appendChild(tableCell), tableCell.style.display = display, 0 === col && 0 === row && (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                                tableCell
                            ], 'e-active'), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(tableCell, 'mousemove', this.tableCellSelect, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(rowDiv, 'mouseleave', this.tableCellLeave, this), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .EventHandler.add */ .bi.add(tableCell, 'mouseup', this.tableCellClick, {
                                self: this,
                                args: args.args,
                                selection: args.selection
                            });
                        }
                        tableDiv.appendChild(rowDiv);
                    }
                }, Table.prototype.editTable = function(args) {
                    var _this = this;
                    this.createDialog(args);
                    var editContent = this.tableDlgContent(args), update = this.l10n.getConstant('dialogUpdate'), cancel = this.l10n.getConstant('dialogCancel'), editHeader = this.l10n.getConstant('tableEditHeader');
                    this.editdlgObj.setProperties({
                        height: 'initial',
                        width: '290px',
                        content: editContent,
                        header: editHeader,
                        buttons: [
                            {
                                click: this.applyProperties.bind(this, args),
                                buttonModel: {
                                    content: update,
                                    cssClass: "e-flat e-size-update " + this.parent.cssClass,
                                    isPrimary: !0
                                }
                            },
                            {
                                click: function(e) {
                                    _this.cancelDialog(e);
                                },
                                buttonModel: {
                                    cssClass: "e-flat e-cancel " + this.parent.cssClass,
                                    content: cancel
                                }
                            }
                        ],
                        cssClass: this.editdlgObj.cssClass + ' e-rte-edit-table-prop-dialog'
                    }), this.editdlgObj.element.style.maxHeight = 'none', this.editdlgObj.content.querySelector('input').focus(), this.hideTableQuickToolbar();
                }, Table.prototype.insertTableDialog = function(args) {
                    var proxy = this.self ? this.self : this;
                    proxy.popupObj && proxy.popupObj.hide(), proxy.createDialog(args);
                    var dlgContent = proxy.tableCellDlgContent(), insert = proxy.l10n.getConstant('dialogInsert'), cancel = proxy.l10n.getConstant('dialogCancel');
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(proxy.editdlgObj) || (proxy.editdlgObj.setProperties({
                        height: 'initial',
                        width: '290px',
                        content: dlgContent,
                        buttons: [
                            {
                                click: proxy.customTable.bind(this, args),
                                buttonModel: {
                                    content: insert,
                                    cssClass: "e-flat e-insert-table " + proxy.parent.cssClass,
                                    isPrimary: !0
                                }
                            },
                            {
                                click: function(e) {
                                    proxy.cancelDialog(e);
                                },
                                buttonModel: {
                                    cssClass: "e-flat e-cancel " + proxy.parent.cssClass,
                                    content: cancel
                                }
                            }
                        ]
                    }), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(proxy.parent.cssClass) || proxy.editdlgObj.setProperties({
                        cssClass: proxy.parent.cssClass
                    }), proxy.editdlgObj.element.style.maxHeight = 'none', proxy.editdlgObj.content.querySelector('input').focus());
                }, Table.prototype.tableCellDlgContent = function() {
                    var tableColumn = this.l10n.getConstant('columns'), tableRow = this.l10n.getConstant('rows'), tableWrap = this.parent.createElement('div', {
                        className: "e-cell-wrap " + this.parent.cssClass
                    }), content = '<div class="e-rte-field ' + this.parent.cssClass + '"><input type="text"  data-role ="none" id="tableColumn" class="e-table-column ' + this.parent.cssClass + '"/></div><div class="e-rte-field ' + this.parent.cssClass + '"><input type="text" data-role ="none" id="tableRow" class="e-table-row ' + this.parent.cssClass + '" /></div>', contentElem = (0, _base_util__WEBPACK_IMPORTED_MODULE_4__ /* .parseHtml */ .dW)(content);
                    return tableWrap.appendChild(contentElem), this.columnTextBox = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_7__ /* .NumericTextBox */ .N({
                        format: 'n0',
                        min: 1,
                        value: 3,
                        placeholder: tableColumn,
                        floatLabelType: 'Auto',
                        max: 50,
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale,
                        cssClass: this.parent.cssClass
                    }), this.columnTextBox.isStringTemplate = !0, this.columnTextBox.appendTo(tableWrap.querySelector('#tableColumn')), this.rowTextBox = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_7__ /* .NumericTextBox */ .N({
                        format: 'n0',
                        min: 1,
                        value: 3,
                        placeholder: tableRow,
                        floatLabelType: 'Auto',
                        max: 50,
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale,
                        cssClass: this.parent.cssClass
                    }), this.rowTextBox.isStringTemplate = !0, this.rowTextBox.appendTo(tableWrap.querySelector('#tableRow')), tableWrap;
                }, Table.prototype.clearDialogObj = function() {
                    this.editdlgObj && (this.editdlgObj.destroy(), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(this.editdlgObj.element), this.editdlgObj = null);
                }, // eslint-disable-next-line
                Table.prototype.createDialog = function(args) {
                    var _this = this;
                    if (this.editdlgObj) {
                        this.editdlgObj.hide({
                            returnValue: !0
                        });
                        return;
                    }
                    var tableDialog = this.parent.createElement('div', {
                        className: "e-rte-edit-table " + this.parent.cssClass,
                        id: this.rteID + '_tabledialog'
                    });
                    this.parent.element.appendChild(tableDialog);
                    var insert = this.l10n.getConstant('dialogInsert'), cancel = this.l10n.getConstant('dialogCancel'), dialogModel = {
                        header: this.l10n.getConstant('tabledialogHeader'),
                        cssClass: _base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_RTE_ELEMENTS */ .i7 + ' ' + this.parent.cssClass,
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale,
                        showCloseIcon: !0,
                        closeOnEscape: !0,
                        width: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice ? '290px' : '340px',
                        height: 'initial',
                        position: {
                            X: 'center',
                            Y: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice ? 'center' : 'top'
                        },
                        isModal: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice,
                        buttons: [
                            {
                                buttonModel: {
                                    content: insert,
                                    cssClass: "e-flat e-insert-table " + this.parent.cssClass,
                                    isPrimary: !0
                                }
                            },
                            {
                                click: function(e) {
                                    _this.cancelDialog(e);
                                },
                                buttonModel: {
                                    cssClass: "e-flat e-cancel " + this.parent.cssClass,
                                    content: cancel
                                }
                            }
                        ],
                        target: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice ? document.body : this.parent.element,
                        animationSettings: {
                            effect: 'None'
                        },
                        close: function(event) {
                            _this.parent.isBlur = !1, _this.editdlgObj.destroy(), (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .detach */ .og)(_this.editdlgObj.element), _this.dialogRenderObj.close(event), _this.editdlgObj = null;
                        }
                    };
                    this.editdlgObj = this.dialogRenderObj.render(dialogModel), this.editdlgObj.appendTo(tableDialog), this.quickToolObj && this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element) && this.quickToolObj.inlineQTBar.hidePopup();
                }, Table.prototype.customTable = function(args, e) {
                    var proxy = this.self ? this.self : this;
                    if (proxy.rowTextBox.value && proxy.columnTextBox.value) {
                        var argument = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .Browser.isDevice */ .AR.isDevice || !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(args.args) && !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(args.args.originalEvent) && 'insert-table' === args.args.originalEvent.action || proxy.parent.inlineMode.enable ? args : this;
                        proxy.tableInsert(proxy.rowTextBox.value, proxy.columnTextBox.value, e, argument);
                    }
                }, // eslint-disable-next-line
                Table.prototype.cancelDialog = function(e) {
                    this.parent.isBlur = !1, this.editdlgObj.hide({
                        returnValue: !0
                    });
                }, // eslint-disable-next-line
                Table.prototype.applyProperties = function(args, e) {
                    var dialogEle = this.editdlgObj.element, table = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(args.selectNode[0], 'table');
                    if (table.style.width = dialogEle.querySelector('.e-table-width').value + 'px', '' !== dialogEle.querySelector('.e-cell-padding').value) for(var tdElm = table.querySelectorAll('td'), i = 0; i < tdElm.length; i++){
                        var padVal = '';
                        '' === tdElm[i].style.padding ? padVal = tdElm[i].getAttribute('style') + ' padding:' + dialogEle.querySelector('.e-cell-padding').value + 'px;' : (tdElm[i].style.padding = dialogEle.querySelector('.e-cell-padding').value + 'px', padVal = tdElm[i].getAttribute('style')), tdElm[i].setAttribute('style', padVal);
                    }
                    table.cellSpacing = dialogEle.querySelector('.e-cell-spacing').value, (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(table.cellSpacing) && '0' === table.cellSpacing ? (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .removeClass */ .IV)([
                        table
                    ], _base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TABLE_BORDER */ ._G) : (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .addClass */ .cn)([
                        table
                    ], _base_classes__WEBPACK_IMPORTED_MODULE_3__ /* .CLS_TABLE_BORDER */ ._G), this.parent.formatter.saveData(), this.editdlgObj.hide({
                        returnValue: !0
                    });
                }, Table.prototype.tableDlgContent = function(e) {
                    var selectNode = e.selectParent[0], tableWidth = this.l10n.getConstant('tableWidth'), cellPadding = this.l10n.getConstant('cellpadding'), cellSpacing = this.l10n.getConstant('cellspacing'), tableWrap = this.parent.createElement('div', {
                        className: "e-table-sizewrap " + this.parent.cssClass
                    }), widthVal = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(selectNode, 'table').getClientRects()[0].width, padVal = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(selectNode, 'td').style.padding, brdSpcVal = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .closest */ .oq)(selectNode, 'table').getAttribute('cellspacing'), content = '<div class="e-rte-field ' + this.parent.cssClass + '"><input type="text" data-role ="none" id="tableWidth" class="e-table-width ' + this.parent.cssClass + '"  /></div><div class="e-rte-field ' + this.parent.cssClass + '"><input type="text" data-role ="none" id="cellPadding" class="e-cell-padding ' + this.parent.cssClass + '" /> </div><div class="e-rte-field ' + this.parent.cssClass + '"><input type="text" data-role ="none" id="cellSpacing" class="e-cell-spacing ' + this.parent.cssClass + '" /></div>', contentElem = (0, _base_util__WEBPACK_IMPORTED_MODULE_4__ /* .parseHtml */ .dW)(content);
                    return tableWrap.appendChild(contentElem), this.tableWidthNum = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_7__ /* .NumericTextBox */ .N({
                        format: 'n0',
                        min: 0,
                        value: widthVal,
                        placeholder: tableWidth,
                        floatLabelType: 'Auto',
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale
                    }), this.tableWidthNum.isStringTemplate = !0, this.tableWidthNum.appendTo(tableWrap.querySelector('#tableWidth')), this.tableCellPadding = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_7__ /* .NumericTextBox */ .N({
                        format: 'n0',
                        min: 0,
                        // eslint-disable-next-line
                        value: '' !== padVal ? parseInt(padVal, null) : 0,
                        placeholder: cellPadding,
                        floatLabelType: 'Auto',
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale
                    }), this.tableCellPadding.isStringTemplate = !0, this.tableCellPadding.appendTo(tableWrap.querySelector('#cellPadding')), this.tableCellSpacing = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_7__ /* .NumericTextBox */ .N({
                        format: 'n0',
                        min: 0,
                        // eslint-disable-next-line
                        value: '' === brdSpcVal || (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(brdSpcVal) ? 0 : parseInt(brdSpcVal, null),
                        placeholder: cellSpacing,
                        floatLabelType: 'Auto',
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale
                    }), this.tableCellSpacing.isStringTemplate = !0, this.tableCellSpacing.appendTo(tableWrap.querySelector('#cellSpacing')), tableWrap;
                }, /**
     * Destroys the ToolBar.
     *
     * @function destroy
     * @returns {void}
     * @hidden

     */ Table.prototype.destroy = function() {
                    this.removeEventListener();
                }, Table.prototype.moduleDestroy = function() {
                    this.parent = null;
                }, /**
     * For internal use only - Get the module name.
     *
     * @returns {void}
     */ Table.prototype.getModuleName = function() {
                    return 'table';
                }, Table;
            }();
        /***/ },
        /***/ 2503: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ z: function() {
                    return /* binding */ RendererFactory;
                }
            });
            /* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1807), _base_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(809), RendererFactory = /** @class */ function() {
                function RendererFactory() {
                    this.rendererMap = {};
                }
                return(/**
     * addRenderer method
     *
     * @param {RenderType} name - specifies the render type
     * @param {IRenderer} type - specifies the renderer.
     * @returns {void}
     * @hidden

     */ RendererFactory.prototype.addRenderer = function(name, type) {
                    var rName = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getEnumValue */ .I$)(_base_enum__WEBPACK_IMPORTED_MODULE_1__ /* .RenderType */ .y2, name);
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.rendererMap[rName]) && (this.rendererMap[rName] = type);
                }, /**
     * getRenderer method
     *
     * @param {RenderType} name - specifies the render type
     * @returns {void}
     * @hidden

     */ RendererFactory.prototype.getRenderer = function(name) {
                    var rName = (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .getEnumValue */ .I$)(_base_enum__WEBPACK_IMPORTED_MODULE_1__ /* .RenderType */ .y2, name);
                    if (!(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.rendererMap[rName])) return this.rendererMap[rName];
                    // eslint-disable-next-line
                    throw "The renderer " + rName + " is not found";
                }, RendererFactory);
            }();
        /***/ },
        /***/ 9336: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ S: function() {
                    return /* binding */ ServiceLocator;
                }
            });
            /* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1807), ServiceLocator = /** @class */ function() {
                function ServiceLocator() {
                    this.services = {};
                }
                return(/* eslint-disable */ /**
     * register method
     *
     * @param {string} name - specifies the name.
     * @param {T} type - specifies the type.
     * @returns {void}
     * @hidden

     */ /* eslint-enable */ ServiceLocator.prototype.register = function(name, type) {
                    (0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.services[name]) && (this.services[name] = type);
                }, /**
     * getService method
     *
     * @param {string} name - specifies the name.
     * @returns {void}
     * @hidden

     */ ServiceLocator.prototype.getService = function(name) {
                    if ((0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(this.services[name])) // eslint-disable-next-line
                    throw "The service " + name + " is not registered";
                    return this.services[name];
                }, ServiceLocator);
            }();
        /***/ },
        /***/ 8867: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            "use strict";
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ q: function() {
                    return /* binding */ NodeSelection;
                }
            });
            /* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1807), NodeSelection = /** @class */ function() {
                function NodeSelection() {
                    this.startNodeName = [], this.endNodeName = [];
                }
                return NodeSelection.prototype.saveInstance = function(range, body) {
                    return this.range = range.cloneRange(), this.rootNode = this.documentFromRange(range), this.body = body, this.startContainer = this.getNodeArray(range.startContainer, !0), this.endContainer = this.getNodeArray(range.endContainer, !1), this.startOffset = range.startOffset, this.endOffset = range.endOffset, this.html = this.body.innerHTML, this;
                }, NodeSelection.prototype.documentFromRange = function(range) {
                    return 9 === range.startContainer.nodeType ? range.startContainer : range.startContainer.ownerDocument;
                }, NodeSelection.prototype.getRange = function(docElement) {
                    var select = this.get(docElement), range = select && select.rangeCount > 0 ? select.getRangeAt(select.rangeCount - 1) : docElement.createRange();
                    return range.startContainer !== docElement || range.endContainer !== docElement || range.startOffset || range.endOffset || (range.setStart(docElement.body, 0), range.collapse(!0)), range;
                }, /**
     * get method
     *
     * @param {Document} docElement - specifies the get function
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.get = function(docElement) {
                    return docElement.defaultView.getSelection();
                }, /**
     * save method
     *
     * @param {Range} range - range value.
     * @param {Document} docElement - specifies the document.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.save = function(range, docElement) {
                    return range = range ? range.cloneRange() : this.getRange(docElement), this.saveInstance(range, docElement.body);
                }, /**
     * getIndex method
     *
     * @param {Node} node - specifies the node value.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.getIndex = function(node) {
                    var num = 0;
                    if (node = node.previousSibling || 'BR' !== node.tagName ? node.previousSibling : node) for(node.nodeType; node;)node.nodeType, num++, node = node.previousSibling;
                    return num;
                }, NodeSelection.prototype.isChildNode = function(nodeCollection, parentNode) {
                    for(var index = 0; index < parentNode.childNodes.length; index++)if (nodeCollection.indexOf(parentNode.childNodes[index]) > -1) return !0;
                    return !1;
                }, NodeSelection.prototype.getNode = function(startNode, endNode, nodeCollection) {
                    return endNode === startNode && (3 === startNode.nodeType || !startNode.firstChild || -1 !== nodeCollection.indexOf(startNode.firstChild) || this.isChildNode(nodeCollection, startNode)) ? null : -1 === nodeCollection.indexOf(startNode.firstChild) && startNode.firstChild && !this.isChildNode(nodeCollection, startNode) ? startNode.firstChild : startNode.nextSibling ? startNode.nextSibling : startNode.parentNode ? startNode.parentNode : null;
                }, /**
     * getNodeCollection method
     *
     * @param {Range} range -specifies the range.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.getNodeCollection = function(range) {
                    var startNode = range.startContainer.childNodes[range.startOffset] || range.startContainer, endNode = range.endContainer.childNodes[range.endOffset > 0 ? range.endOffset - 1 : range.endOffset] || range.endContainer;
                    if ((startNode === endNode || 'BR' === startNode.nodeName && startNode === range.endContainer.childNodes[range.endOffset]) && 0 === startNode.childNodes.length) return [
                        startNode
                    ];
                    if (range.startOffset === range.endOffset && 0 !== range.startOffset && 'PRE' === range.startContainer.nodeName) return [
                        'BR' === startNode.nodeName || '#text' === startNode.nodeName ? startNode : startNode.childNodes[0]
                    ];
                    var nodeCollection = [];
                    do -1 === nodeCollection.indexOf(startNode) && nodeCollection.push(startNode), startNode = this.getNode(startNode, endNode, nodeCollection);
                    while (startNode)
                    return nodeCollection;
                }, /**
     * getParentNodeCollection method
     *
     * @param {Range} range - specifies the range value.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.getParentNodeCollection = function(range) {
                    return this.getParentNodes(this.getNodeCollection(range), range);
                }, /**
     * getParentNodes method
     *
     * @param {Node[]} nodeCollection - specifies the collection of nodes.
     * @param {Range} range - specifies the range values.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.getParentNodes = function(nodeCollection, range) {
                    nodeCollection = nodeCollection.reverse();
                    for(var index = 0; index < nodeCollection.length; index++)-1 !== nodeCollection.indexOf(nodeCollection[index].parentNode) || 3 === nodeCollection[index].nodeType && range.startContainer !== range.endContainer && range.startContainer.parentNode !== range.endContainer.parentNode ? (nodeCollection.splice(index, 1), index--) : 3 === nodeCollection[index].nodeType && (nodeCollection[index] = nodeCollection[index].parentNode);
                    return nodeCollection;
                }, /**
     * getSelectionNodeCollection method
     *
     * @param {Range} range - specifies the range value.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.getSelectionNodeCollection = function(range) {
                    return this.getSelectionNodes(this.getNodeCollection(range));
                }, /**
     * getSelectionNodeCollection along with BR node method
     *
     * @param {Range} range - specifies the range value.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.getSelectionNodeCollectionBr = function(range) {
                    return this.getSelectionNodesBr(this.getNodeCollection(range));
                }, /**
     * getParentNodes method
     *
     * @param {Node[]} nodeCollection - specifies the collection of nodes.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.getSelectionNodes = function(nodeCollection) {
                    nodeCollection = nodeCollection.reverse();
                    for(var regEx = RegExp(String.fromCharCode(8203), 'g'), index = 0; index < nodeCollection.length; index++)(3 !== nodeCollection[index].nodeType || '' === nodeCollection[index].textContent.trim() || 1 === nodeCollection[index].textContent.length && nodeCollection[index].textContent.match(regEx)) && (nodeCollection.splice(index, 1), index--);
                    return nodeCollection.reverse();
                }, /**
     * Get selection text nodes with br method.
     *
     * @param {Node[]} nodeCollection - specifies the collection of nodes.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.getSelectionNodesBr = function(nodeCollection) {
                    nodeCollection = nodeCollection.reverse();
                    for(var regEx = RegExp(String.fromCharCode(8203), 'g'), index = 0; index < nodeCollection.length; index++)'BR' !== nodeCollection[index].nodeName && (3 !== nodeCollection[index].nodeType || '' === nodeCollection[index].textContent.trim() || 1 === nodeCollection[index].textContent.length && nodeCollection[index].textContent.match(regEx)) && (nodeCollection.splice(index, 1), index--);
                    return nodeCollection.reverse();
                }, /**
     * getInsertNodeCollection method
     *
     * @param {Range} range - specifies the range value.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.getInsertNodeCollection = function(range) {
                    return this.getInsertNodes(this.getNodeCollection(range));
                }, /**
     * getInsertNodes method
     *
     * @param {Node[]} nodeCollection - specifies the collection of nodes.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.getInsertNodes = function(nodeCollection) {
                    nodeCollection = nodeCollection.reverse();
                    for(var index = 0; index < nodeCollection.length; index++)(0 !== nodeCollection[index].childNodes.length && 3 !== nodeCollection[index].nodeType || 3 === nodeCollection[index].nodeType && '' === nodeCollection[index].textContent) && (nodeCollection.splice(index, 1), index--);
                    return nodeCollection.reverse();
                }, /**
     * getNodeArray method
     *
     * @param {Node} node - specifies the node content.
     * @param {boolean} isStart - specifies the boolean value.
     * @param {Document} root - specifies the root document.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.getNodeArray = function(node, isStart, root) {
                    var array = [];
                    for(// eslint-disable-next-line
                    isStart ? this.startNodeName = [] : this.endNodeName = []; node !== (root || this.rootNode) && !(0, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ /* .isNullOrUndefined */ .le)(node);)// eslint-disable-next-line
                    isStart ? this.startNodeName.push(node.nodeName.toLowerCase()) : this.endNodeName.push(node.nodeName.toLowerCase()), array.push(this.getIndex(node)), node = node.parentNode;
                    return array;
                }, NodeSelection.prototype.setRangePoint = function(range, isvalid, num, size) {
                    for(var node = this.rootNode, index = num.length, constant = size; index--;)node = node && node.childNodes[num[index]];
                    return node && constant >= 0 && 'html' !== node.nodeName && (3 === node.nodeType && '&nbsp;' === node.nodeValue.replace(/\u00a0/g, '&nbsp;') && (constant = node.textContent.length), range[isvalid ? 'setStart' : 'setEnd'](node, constant)), range;
                }, /**
     * restore method
     *
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.restore = function() {
                    var range = this.range.cloneRange();
                    return range = this.setRangePoint(range, !0, this.startContainer, this.startOffset), range = this.setRangePoint(range, !1, this.endContainer, this.endOffset), this.selectRange(this.rootNode, range), range;
                }, NodeSelection.prototype.selectRange = function(docElement, range) {
                    this.setRange(docElement, range), this.save(range, docElement);
                }, /**
     * setRange method
     *
     * @param {Document} docElement - specifies the document.
     * @param {Range} range - specifies the range.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.setRange = function(docElement, range) {
                    var selection = this.get(docElement);
                    selection.removeAllRanges(), selection.addRange(range);
                }, /**
     * setSelectionText method
     *
     * @param {Document} docElement - specifies the documrent
     * @param {Node} startNode - specifies the starting node.
     * @param {Node} endNode - specifies the the end node.
     * @param {number} startIndex - specifies the starting index.
     * @param {number} endIndex - specifies the end index.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.setSelectionText = function(docElement, startNode, endNode, startIndex, endIndex) {
                    var range = docElement.createRange();
                    range.setStart(startNode, startIndex), range.setEnd(endNode, endIndex), this.setRange(docElement, range);
                }, /**
     * setSelectionContents method
     *
     * @param {Document} docElement - specifies the document.
     * @param {Node} element - specifies the node.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.setSelectionContents = function(docElement, element) {
                    var range = docElement.createRange();
                    range.selectNode(element), this.setRange(docElement, range);
                }, /**
     * setSelectionNode method
     *
     * @param {Document} docElement - specifies the document.
     * @param {Node} element - specifies the node.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.setSelectionNode = function(docElement, element) {
                    var range = docElement.createRange();
                    range.selectNodeContents(element), this.setRange(docElement, range);
                }, /**
     * getSelectedNodes method
     *
     * @param {Document} docElement - specifies the document.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.getSelectedNodes = function(docElement) {
                    return this.getNodeCollection(this.getRange(docElement));
                }, /**
     * Clear method
     *
     * @param {Document} docElement - specifies the document.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.Clear = function(docElement) {
                    this.get(docElement).removeAllRanges();
                }, /**
     * insertParentNode method
     *
     * @param {Document} docElement - specifies the document.
     * @param {Node} newNode - specicfies the new node.
     * @param {Range} range - specifies the range.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.insertParentNode = function(docElement, newNode, range) {
                    range.surroundContents(newNode), this.selectRange(docElement, range);
                }, /**
     * setCursorPoint method
     *
     * @param {Document} docElement - specifies the document.
     * @param {Element} element - specifies the element.
     * @param {number} point - specifies the point.
     * @returns {void}
     * @hidden

     */ NodeSelection.prototype.setCursorPoint = function(docElement, element, point) {
                    var range = docElement.createRange(), selection = docElement.defaultView.getSelection();
                    range.setStart(element, point), range.collapse(!0), selection.removeAllRanges(), selection.addRange(range);
                }, NodeSelection;
            }();
        /***/ },
        /***/ 9008: /***/ function(module, __unused_webpack_exports, __webpack_require__) {
            module.exports = __webpack_require__(5443);
        /***/ }
    }
]);
