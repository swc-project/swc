(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([
    [
        933
    ],
    {
        1807: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "tk": function() {
                    return eP;
                },
                "fw": function() {
                    return tB;
                },
                "XY": function() {
                    return ts;
                },
                "AR": function() {
                    return eV;
                },
                "rt": function() {
                    return tX;
                },
                "FE": function() {
                    return tk;
                },
                "Zz": function() {
                    return tw;
                },
                "wA": function() {
                    return t8;
                },
                "_l": function() {
                    return ih;
                },
                "ju": function() {
                    return tL;
                },
                "bi": function() {
                    return e_;
                },
                "eC": function() {
                    return eC;
                },
                "nv": function() {
                    return ig;
                },
                "E7": function() {
                    return ib;
                },
                "Zl": function() {
                    return tN;
                },
                "Qj": function() {
                    return eu;
                },
                "Z9": function() {
                    return tS;
                },
                "pJ": function() {
                    return ne;
                },
                "Xh": function() {
                    return iw;
                },
                "cn": function() {
                    return eZ;
                },
                "R3": function() {
                    return eJ;
                },
                "Y4": function() {
                    return e1;
                },
                "s1": function() {
                    return e8;
                },
                "oq": function() {
                    return e5;
                },
                "MY": function() {
                    return i0;
                },
                "az": function() {
                    return eW;
                },
                "Ds": function() {
                    return C;
                },
                "ex": function() {
                    return d;
                },
                "og": function() {
                    return eQ;
                },
                "l7": function() {
                    return v;
                },
                "Ac": function() {
                    return x;
                },
                "Xr": function() {
                    return to;
                },
                "I$": function() {
                    return f;
                },
                "s8": function() {
                    return O;
                },
                "NE": function() {
                    return ek;
                },
                "aR": function() {
                    return i4;
                },
                "QI": function() {
                    return y;
                },
                "NA": function() {
                    return h;
                },
                "xr": function() {
                    return N;
                },
                "le": function() {
                    return g;
                },
                "Kn": function() {
                    return u;
                },
                "re": function() {
                    return tV;
                },
                "pn": function() {
                    return eG;
                },
                "TS": function() {
                    return m;
                },
                "Ce": function() {
                    return eK;
                },
                "S0": function() {
                    return k;
                },
                "Od": function() {
                    return e0;
                },
                "IV": function() {
                    return eY;
                },
                "qx": function() {
                    return tI;
                },
                "Ys": function() {
                    return e3;
                },
                "td": function() {
                    return e2;
                },
                "V7": function() {
                    return e6;
                },
                "Wr": function() {
                    return i2;
                },
                "sO": function() {
                    return c;
                }
            });
            ;
            var n = 'ej2_instances';
            var r = 0;
            var s = false;
            function o() {
                s = false;
            }
            function a(e, t) {
                var i = t;
                i.unshift(undefined);
                return new (Function.prototype.bind.apply(e, i));
            }
            function l(e) {
                var t;
                var i = new Uint16Array(5);
                var n = window.msCrypto || window.crypto;
                n.getRandomValues(i);
                var r = 'ej2' + M(i);
                var s = function(i) {
                    if (i.source === window && typeof i.data === 'string' && i.data.length <= 32 && i.data === r) {
                        e();
                        t();
                    }
                };
                window.addEventListener('message', s, false);
                window.postMessage(r, '*');
                return t = function() {
                    window.removeEventListener('message', s);
                    e = s = r = undefined;
                };
            }
            function h(e, t) {
                var i = t;
                var n = e.replace(/\[/g, '.').replace(/\]/g, '').split('.');
                for(var r = 0; r < n.length && !b(i); r++){
                    i = i[n[r]];
                }
                return i;
            }
            function c(e, t, i) {
                var n = e.replace(/\[/g, '.').replace(/\]/g, '').split('.');
                var r = i || {};
                var s = r;
                var o;
                var a = n.length;
                var l;
                for(o = 0; o < a; o++){
                    l = n[o];
                    if (o + 1 === a) {
                        s[l] = t === undefined ? {} : t;
                    } else if (g(s[l])) {
                        s[l] = {};
                    }
                    s = s[l];
                }
                return r;
            }
            function d(e, t) {
                delete e[t];
            }
            var p = typeof window !== "undefined" ? window : {};
            function u(e) {
                var t = {};
                return (!g(e) && e.constructor === t.constructor);
            }
            function f(e, t) {
                return e[t];
            }
            function m(e, t) {
                if (!g(t)) {
                    var i = e;
                    var n = t;
                    var r = Object.keys(t);
                    var s = 'deepMerge';
                    for(var o = 0, a = r; o < a.length; o++){
                        var l = a[o];
                        if (!g(i[s]) && (i[s].indexOf(l) !== -1) && (u(n[l]) || Array.isArray(n[l]))) {
                            v(i[l], i[l], n[l], true);
                        } else {
                            i[l] = n[l];
                        }
                    }
                }
            }
            function v(e, t, i, n) {
                var r = e && typeof e === 'object' ? e : {};
                var s = arguments.length;
                if (n) {
                    s = s - 1;
                }
                var o = function(e) {
                    if (!a[e]) {
                        return "continue";
                    }
                    var t = a[e];
                    Object.keys(t).forEach(function(e) {
                        var i = r[e];
                        var s = t[e];
                        var o;
                        var a = Array.isArray(s) && Array.isArray(i) && (s.length !== i.length);
                        var l = N() ? (!(i instanceof Event) && !a) : true;
                        if (n && l && (u(s) || Array.isArray(s))) {
                            if (u(s)) {
                                o = i ? i : {};
                                if (Array.isArray(o) && o.hasOwnProperty('isComplexArray')) {
                                    v(o, {}, s, n);
                                } else {
                                    r[e] = v(o, {}, s, n);
                                }
                            } else {
                                o = N() ? i && Object.keys(s).length : i ? i : [];
                                r[e] = v([], o, s, (o && o.length) || (s && s.length));
                            }
                        } else {
                            r[e] = s;
                        }
                    });
                };
                var a = arguments;
                for(var l = 1; l < s; l++){
                    o(l);
                }
                return r;
            }
            function g(e) {
                return e === undefined || e === null;
            }
            function b(e) {
                return ('undefined' === typeof e);
            }
            function y(e) {
                return e + '_' + r++;
            }
            function C(e, t) {
                var i;
                return function() {
                    var n = this;
                    var r = arguments;
                    var s = function() {
                        i = null;
                        return e.apply(n, r);
                    };
                    clearTimeout(i);
                    i = setTimeout(s, t);
                };
            }
            function E(e) {
                var t = [];
                var i = Object.keys(e);
                for(var n = 0, r = i; n < r.length; n++){
                    var s = r[n];
                    t.push(encodeURIComponent(s) + '=' + encodeURIComponent('' + e[s]));
                }
                return t.join('&');
            }
            function S(e) {
                var t = Object.prototype.toString;
                if (t.call(e) === '[object Array]') {
                    if (t.call(e[0]) === '[object Object]') {
                        return true;
                    }
                }
                return false;
            }
            function w(e, t) {
                var i = e;
                if (i === t) {
                    return true;
                } else if (i === document || !i) {
                    return false;
                } else {
                    return w(i.parentNode, t);
                }
            }
            function T(e) {
                try {
                    throw new Error(e);
                } catch (t) {
                    throw t.message + '\n' + t.stack;
                }
            }
            function k(e, t) {
                var i = document.createElement('div');
                var n = [].slice.call(document.getElementsByTagName('head')[0].querySelectorAll('base, link, style'));
                var r = [].slice.call(document.getElementsByTagName('body')[0].querySelectorAll('link, style'));
                if (r.length) {
                    for(var s = 0, o = r.length; s < o; s++){
                        n.push(r[s]);
                    }
                }
                var a = '';
                if (g(t)) {
                    t = window.open('', 'print', 'height=452,width=1024,tabbar=no');
                }
                i.appendChild(e.cloneNode(true));
                for(var l = 0, o = n.length; l < o; l++){
                    a += n[l].outerHTML;
                }
                t.document.write('<!DOCTYPE html> <html><head>' + a + '</head><body>' + i.innerHTML + '<script> (function() { window.ready = true; })(); </script>' + '</body></html>');
                t.document.close();
                t.focus();
                var h = setInterval(function() {
                    if (t.ready) {
                        t.print();
                        t.close();
                        clearInterval(h);
                    }
                }, 500);
                return t;
            }
            function x(e) {
                var t = e + '';
                if (t.match(/auto|cm|mm|in|px|pt|pc|%|em|ex|ch|rem|vw|vh|vmin|vmax/)) {
                    return t;
                }
                return t + 'px';
            }
            function L() {
                s = true;
            }
            function N() {
                return s;
            }
            function D(e) {
                var t = 'xPath';
                if (!(e instanceof Node) && N() && !g(e[t])) {
                    return document.evaluate(e[t], document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
                }
                return e;
            }
            function O(e, t) {
                var i = (typeof (e) === 'string') ? document.querySelector(e) : e;
                if (i[n]) {
                    for(var r = 0, s = i[n]; r < s.length; r++){
                        var o = s[r];
                        if (o instanceof t) {
                            return o;
                        }
                    }
                }
                return null;
            }
            function A(e, t) {
                var i = (typeof (e) === 'string') ? document.querySelector(e) : e;
                if (i[n]) {
                    i[n].push(t);
                } else {
                    i[n] = [
                        t
                    ];
                }
            }
            function P() {
                if ((typeof window) === 'undefined') {
                    return;
                }
                var e = new Uint16Array(5);
                var t = window.msCrypto || window.crypto;
                return t.getRandomValues(e);
            }
            function M(e) {
                var t = '';
                for(var i = 0; i < 5; i++){
                    t += (i ? ',' : '') + e[i];
                }
                return t;
            }
            ;
            var R = {
                'latn': {
                    '_digits': '0123456789',
                    '_type': 'numeric'
                }
            };
            var B = {
                'decimal': '.',
                'group': ',',
                'percentSign': '%',
                'plusSign': '+',
                'minusSign': '-',
                'infinity': '∞',
                'nan': 'NaN',
                'exponential': 'E'
            };
            var I = [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ];
            var H = (function() {
                function e() {}
                e.getMainObject = function(e, t) {
                    var i = N() ? t : 'main.' + t;
                    return h(i, e);
                };
                e.getNumberingSystem = function(e) {
                    return h('supplemental.numberingSystems', e) || this.numberingSystems;
                };
                e.reverseObject = function(e, t) {
                    var i = t || Object.keys(e);
                    var n = {};
                    for(var r = 0, s = i; r < s.length; r++){
                        var o = s[r];
                        if (!n.hasOwnProperty(e[o])) {
                            n[e[o]] = o;
                        }
                    }
                    return n;
                };
                e.getSymbolRegex = function(e) {
                    var t = e.map(function(e) {
                        return e.replace(/([.*+?^=!:${}()|[\]/\\])/g, '\\$1');
                    }).join('|');
                    return new RegExp(t, 'g');
                };
                e.getSymbolMatch = function(e) {
                    var t = Object.keys(B);
                    var i = {};
                    for(var n = 0, r = t; n < r.length; n++){
                        var s = r[n];
                        i[e[s]] = B[s];
                    }
                    return i;
                };
                e.constructRegex = function(e) {
                    var t = e.length;
                    var i = '';
                    for(var n = 0; n < t; n++){
                        if (n !== t - 1) {
                            i += e[n] + '|';
                        } else {
                            i += e[n];
                        }
                    }
                    return i;
                };
                e.convertValueParts = function(e, t, i) {
                    return e.replace(t, function(e) {
                        return i[e];
                    });
                };
                e.getDefaultNumberingSystem = function(e) {
                    var t = {};
                    t.obj = h('numbers', e);
                    t.nSystem = h('defaultNumberingSystem', t.obj);
                    return t;
                };
                e.getCurrentNumericOptions = function(e, t, i, n) {
                    var r = {};
                    var s = this.getDefaultNumberingSystem(e);
                    if (!b(s.nSystem) || n) {
                        var o = n ? h('obj.mapperDigits', s) : h(s.nSystem + '._digits', t);
                        if (!b(o)) {
                            r.numericPair = this.reverseObject(o, I);
                            r.numberParseRegex = new RegExp(this.constructRegex(o), 'g');
                            r.numericRegex = '[' + o[0] + '-' + o[9] + ']';
                            if (i) {
                                r.numericRegex = o[0] + '-' + o[9];
                                r.symbolNumberSystem = h(n ? 'numberSymbols' : 'symbols-numberSystem-' + s.nSystem, s.obj);
                                r.symbolMatch = this.getSymbolMatch(r.symbolNumberSystem);
                                r.numberSystem = s.nSystem;
                            }
                        }
                    }
                    return r;
                };
                e.getNumberMapper = function(e, t, i) {
                    var n = {
                        mapper: {}
                    };
                    var r = this.getDefaultNumberingSystem(e);
                    if (!b(r.nSystem)) {
                        n.numberSystem = r.nSystem;
                        n.numberSymbols = h('symbols-numberSystem-' + r.nSystem, r.obj);
                        n.timeSeparator = h('timeSeparator', n.numberSymbols);
                        var s = h(r.nSystem + '._digits', t);
                        if (!b(s)) {
                            for(var o = 0, a = I; o < a.length; o++){
                                var l = a[o];
                                n.mapper[l] = s[l];
                            }
                        }
                    }
                    return n;
                };
                e.nPair = 'numericPair';
                e.nRegex = 'numericRegex';
                e.numberingSystems = R;
                return e;
            }());
            var F = {
                'DJF': 'Fdj',
                'ERN': 'Nfk',
                'ETB': 'Br',
                'NAD': '$',
                'ZAR': 'R',
                'XAF': 'FCFA',
                'GHS': 'GH₵',
                'XDR': 'XDR',
                'AED': 'د.إ.‏',
                'BHD': 'د.ب.‏',
                'DZD': 'د.ج.‏',
                'EGP': 'ج.م.‏',
                'ILS': '₪',
                'IQD': 'د.ع.‏',
                'JOD': 'د.ا.‏',
                'KMF': 'CF',
                'KWD': 'د.ك.‏',
                'LBP': 'ل.ل.‏',
                'LYD': 'د.ل.‏',
                'MAD': 'د.م.‏',
                'MRU': 'أ.م.',
                'OMR': 'ر.ع.‏',
                'QAR': 'ر.ق.‏',
                'SAR': 'ر.س.‏',
                'SDG': 'ج.س.',
                'SOS': 'S',
                'SSP': '£',
                'SYP': 'ل.س.‏',
                'TND': 'د.ت.‏',
                'YER': 'ر.ي.‏',
                'CLP': '$',
                'INR': '₹',
                'TZS': 'TSh',
                'EUR': '€',
                'AZN': '₼',
                'RUB': '₽',
                'BYN': 'Br',
                'ZMW': 'K',
                'BGN': 'лв.',
                'NGN': '₦',
                'XOF': 'CFA',
                'BDT': '৳',
                'CNY': '¥',
                'BAM': 'КМ',
                'UGX': 'USh',
                'USD': '$',
                'CZK': 'Kč',
                'GBP': '£',
                'DKK': 'kr.',
                'KES': 'Ksh',
                'CHF': 'CHF',
                'MVR': 'ރ.',
                'BTN': 'Nu.',
                'XCD': 'EC$',
                'AUD': '$',
                'BBD': '$',
                'BIF': 'FBu',
                'BMD': '$',
                'BSD': '$',
                'BWP': 'P',
                'BZD': '$',
                'CAD': '$',
                'NZD': '$',
                'FJD': '$',
                'FKP': '£',
                'GIP': '£',
                'GMD': 'D',
                'GYD': '$',
                'HKD': '$',
                'IDR': 'Rp',
                'JMD': '$',
                'KYD': '$',
                'LRD': '$',
                'MGA': 'Ar',
                'MOP': 'MOP$',
                'MUR': 'Rs',
                'MWK': 'MK',
                'MYR': 'RM',
                'PGK': 'K',
                'PHP': '₱',
                'PKR': 'Rs',
                'RWF': 'RF',
                'SBD': '$',
                'SCR': 'SR',
                'SEK': 'kr',
                'SGD': '$',
                'SHP': '£',
                'SLL': 'Le',
                'ANG': 'NAf.',
                'SZL': 'E',
                'TOP': 'T$',
                'TTD': '$',
                'VUV': 'VT',
                'WST': 'WS$',
                'ARS': '$',
                'BOB': 'Bs',
                'BRL': 'R$',
                'COP': '$',
                'CRC': '₡',
                'CUP': '$',
                'DOP': '$',
                'GTQ': 'Q',
                'HNL': 'L',
                'MXN': '$',
                'NIO': 'C$',
                'PAB': 'B/.',
                'PEN': 'S/',
                'PYG': '₲',
                'UYU': '$',
                'VES': 'Bs.S',
                'IRR': 'ريال',
                'GNF': 'FG',
                'CDF': 'FC',
                'HTG': 'G',
                'XPF': 'FCFP',
                'HRK': 'kn',
                'HUF': 'Ft',
                'AMD': '֏',
                'ISK': 'kr',
                'JPY': '¥',
                'GEL': '₾',
                'CVE': '​',
                'KZT': '₸',
                'KHR': '៛',
                'KPW': '₩',
                'KRW': '₩',
                'KGS': 'сом',
                'AOA': 'Kz',
                'LAK': '₭',
                'MZN': 'MTn',
                'MKD': 'ден',
                'MNT': '₮',
                'BND': '$',
                'MMK': 'K',
                'NOK': 'kr',
                'NPR': 'रु',
                'AWG': 'Afl.',
                'SRD': '$',
                'PLN': 'zł',
                'AFN': '؋',
                'STN': 'Db',
                'MDL': 'L',
                'RON': 'lei',
                'UAH': '₴',
                'LKR': 'රු.',
                'ALL': 'Lekë',
                'RSD': 'дин.',
                'TJS': 'смн',
                'THB': '฿',
                'TMT': 'm.',
                'TRY': '₺',
                'UZS': 'сўм',
                'VND': '₫',
                'TWD': 'NT$'
            };
            function j(e) {
                return h(e || '', F);
            }
            ;
            var z;
            (function(e) {
                var t = [
                    28607,
                    28636,
                    28665,
                    28695,
                    28724,
                    28754,
                    28783,
                    28813,
                    28843,
                    28872,
                    28901,
                    28931,
                    28960,
                    28990,
                    29019,
                    29049,
                    29078,
                    29108,
                    29137,
                    29167,
                    29196,
                    29226,
                    29255,
                    29285,
                    29315,
                    29345,
                    29375,
                    29404,
                    29434,
                    29463,
                    29492,
                    29522,
                    29551,
                    29580,
                    29610,
                    29640,
                    29669,
                    29699,
                    29729,
                    29759,
                    29788,
                    29818,
                    29847,
                    29876,
                    29906,
                    29935,
                    29964,
                    29994,
                    30023,
                    30053,
                    30082,
                    30112,
                    30141,
                    30171,
                    30200,
                    30230,
                    30259,
                    30289,
                    30318,
                    30348,
                    30378,
                    30408,
                    30437,
                    30467,
                    30496,
                    30526,
                    30555,
                    30585,
                    30614,
                    30644,
                    30673,
                    30703,
                    30732,
                    30762,
                    30791,
                    30821,
                    30850,
                    30880,
                    30909,
                    30939,
                    30968,
                    30998,
                    31027,
                    31057,
                    31086,
                    31116,
                    31145,
                    31175,
                    31204,
                    31234,
                    31263,
                    31293,
                    31322,
                    31352,
                    31381,
                    31411,
                    31441,
                    31471,
                    31500,
                    31530,
                    31559,
                    31589,
                    31618,
                    31648,
                    31676,
                    31706,
                    31736,
                    31766,
                    31795,
                    31825,
                    31854,
                    31884,
                    31913,
                    31943,
                    31972,
                    32002,
                    32031,
                    32061,
                    32090,
                    32120,
                    32150,
                    32180,
                    32209,
                    32239,
                    32268,
                    32298,
                    32327,
                    32357,
                    32386,
                    32416,
                    32445,
                    32475,
                    32504,
                    32534,
                    32563,
                    32593,
                    32622,
                    32652,
                    32681,
                    32711,
                    32740,
                    32770,
                    32799,
                    32829,
                    32858,
                    32888,
                    32917,
                    32947,
                    32976,
                    33006,
                    33035,
                    33065,
                    33094,
                    33124,
                    33153,
                    33183,
                    33213,
                    33243,
                    33272,
                    33302,
                    33331,
                    33361,
                    33390,
                    33420,
                    33450,
                    33479,
                    33509,
                    33539,
                    33568,
                    33598,
                    33627,
                    33657,
                    33686,
                    33716,
                    33745,
                    33775,
                    33804,
                    33834,
                    33863,
                    33893,
                    33922,
                    33952,
                    33981,
                    34011,
                    34040,
                    34069,
                    34099,
                    34128,
                    34158,
                    34187,
                    34217,
                    34247,
                    34277,
                    34306,
                    34336,
                    34365,
                    34395,
                    34424,
                    34454,
                    34483,
                    34512,
                    34542,
                    34571,
                    34601,
                    34631,
                    34660,
                    34690,
                    34719,
                    34749,
                    34778,
                    34808,
                    34837,
                    34867,
                    34896,
                    34926,
                    34955,
                    34985,
                    35015,
                    35044,
                    35074,
                    35103,
                    35133,
                    35162,
                    35192,
                    35222,
                    35251,
                    35280,
                    35310,
                    35340,
                    35370,
                    35399,
                    35429,
                    35458,
                    35488,
                    35517,
                    35547,
                    35576,
                    35605,
                    35635,
                    35665,
                    35694,
                    35723,
                    35753,
                    35782,
                    35811,
                    35841,
                    35871,
                    35901,
                    35930,
                    35960,
                    35989,
                    36019,
                    36048,
                    36078,
                    36107,
                    36136,
                    36166,
                    36195,
                    36225,
                    36254,
                    36284,
                    36314,
                    36343,
                    36373,
                    36403,
                    36433,
                    36462,
                    36492,
                    36521,
                    36551,
                    36580,
                    36610,
                    36639,
                    36669,
                    36698,
                    36728,
                    36757,
                    36786,
                    36816,
                    36845,
                    36875,
                    36904,
                    36934,
                    36963,
                    36993,
                    37022,
                    37052,
                    37081,
                    37111,
                    37141,
                    37170,
                    37200,
                    37229,
                    37259,
                    37288,
                    37318,
                    37347,
                    37377,
                    37406,
                    37436,
                    37465,
                    37495,
                    37524,
                    37554,
                    37584,
                    37613,
                    37643,
                    37672,
                    37701,
                    37731,
                    37760,
                    37790,
                    37819,
                    37849,
                    37878,
                    37908,
                    37938,
                    37967,
                    37997,
                    38027,
                    38056,
                    38085,
                    38115,
                    38144,
                    38174,
                    38203,
                    38233,
                    38262,
                    38292,
                    38322,
                    38351,
                    38381,
                    38410,
                    38440,
                    38469,
                    38499,
                    38528,
                    38558,
                    38587,
                    38617,
                    38646,
                    38676,
                    38705,
                    38735,
                    38764,
                    38794,
                    38823,
                    38853,
                    38882,
                    38912,
                    38941,
                    38971,
                    39001,
                    39030,
                    39059,
                    39089,
                    39118,
                    39148,
                    39178,
                    39208,
                    39237,
                    39267,
                    39297,
                    39326,
                    39355,
                    39385,
                    39414,
                    39444,
                    39473,
                    39503,
                    39532,
                    39562,
                    39592,
                    39621,
                    39650,
                    39680,
                    39709,
                    39739,
                    39768,
                    39798,
                    39827,
                    39857,
                    39886,
                    39916,
                    39946,
                    39975,
                    40005,
                    40035,
                    40064,
                    40094,
                    40123,
                    40153,
                    40182,
                    40212,
                    40241,
                    40271,
                    40300,
                    40330,
                    40359,
                    40389,
                    40418,
                    40448,
                    40477,
                    40507,
                    40536,
                    40566,
                    40595,
                    40625,
                    40655,
                    40685,
                    40714,
                    40744,
                    40773,
                    40803,
                    40832,
                    40862,
                    40892,
                    40921,
                    40951,
                    40980,
                    41009,
                    41039,
                    41068,
                    41098,
                    41127,
                    41157,
                    41186,
                    41216,
                    41245,
                    41275,
                    41304,
                    41334,
                    41364,
                    41393,
                    41422,
                    41452,
                    41481,
                    41511,
                    41540,
                    41570,
                    41599,
                    41629,
                    41658,
                    41688,
                    41718,
                    41748,
                    41777,
                    41807,
                    41836,
                    41865,
                    41894,
                    41924,
                    41953,
                    41983,
                    42012,
                    42042,
                    42072,
                    42102,
                    42131,
                    42161,
                    42190,
                    42220,
                    42249,
                    42279,
                    42308,
                    42337,
                    42367,
                    42397,
                    42426,
                    42456,
                    42485,
                    42515,
                    42545,
                    42574,
                    42604,
                    42633,
                    42662,
                    42692,
                    42721,
                    42751,
                    42780,
                    42810,
                    42839,
                    42869,
                    42899,
                    42929,
                    42958,
                    42988,
                    43017,
                    43046,
                    43076,
                    43105,
                    43135,
                    43164,
                    43194,
                    43223,
                    43253,
                    43283,
                    43312,
                    43342,
                    43371,
                    43401,
                    43430,
                    43460,
                    43489,
                    43519,
                    43548,
                    43578,
                    43607,
                    43637,
                    43666,
                    43696,
                    43726,
                    43755,
                    43785,
                    43814,
                    43844,
                    43873,
                    43903,
                    43932,
                    43962,
                    43991,
                    44021,
                    44050,
                    44080,
                    44109,
                    44139,
                    44169,
                    44198,
                    44228,
                    44258,
                    44287,
                    44317,
                    44346,
                    44375,
                    44405,
                    44434,
                    44464,
                    44493,
                    44523,
                    44553,
                    44582,
                    44612,
                    44641,
                    44671,
                    44700,
                    44730,
                    44759,
                    44788,
                    44818,
                    44847,
                    44877,
                    44906,
                    44936,
                    44966,
                    44996,
                    45025,
                    45055,
                    45084,
                    45114,
                    45143,
                    45172,
                    45202,
                    45231,
                    45261,
                    45290,
                    45320,
                    45350,
                    45380,
                    45409,
                    45439,
                    45468,
                    45498,
                    45527,
                    45556,
                    45586,
                    45615,
                    45644,
                    45674,
                    45704,
                    45733,
                    45763,
                    45793,
                    45823,
                    45852,
                    45882,
                    45911,
                    45940,
                    45970,
                    45999,
                    46028,
                    46058,
                    46088,
                    46117,
                    46147,
                    46177,
                    46206,
                    46236,
                    46265,
                    46295,
                    46324,
                    46354,
                    46383,
                    46413,
                    46442,
                    46472,
                    46501,
                    46531,
                    46560,
                    46590,
                    46620,
                    46649,
                    46679,
                    46708,
                    46738,
                    46767,
                    46797,
                    46826,
                    46856,
                    46885,
                    46915,
                    46944,
                    46974,
                    47003,
                    47033,
                    47063,
                    47092,
                    47122,
                    47151,
                    47181,
                    47210,
                    47240,
                    47269,
                    47298,
                    47328,
                    47357,
                    47387,
                    47417,
                    47446,
                    47476,
                    47506,
                    47535,
                    47565,
                    47594,
                    47624,
                    47653,
                    47682,
                    47712,
                    47741,
                    47771,
                    47800,
                    47830,
                    47860,
                    47890,
                    47919,
                    47949,
                    47978,
                    48008,
                    48037,
                    48066,
                    48096,
                    48125,
                    48155,
                    48184,
                    48214,
                    48244,
                    48273,
                    48303,
                    48333,
                    48362,
                    48392,
                    48421,
                    48450,
                    48480,
                    48509,
                    48538,
                    48568,
                    48598,
                    48627,
                    48657,
                    48687,
                    48717,
                    48746,
                    48776,
                    48805,
                    48834,
                    48864,
                    48893,
                    48922,
                    48952,
                    48982,
                    49011,
                    49041,
                    49071,
                    49100,
                    49130,
                    49160,
                    49189,
                    49218,
                    49248,
                    49277,
                    49306,
                    49336,
                    49365,
                    49395,
                    49425,
                    49455,
                    49484,
                    49514,
                    49543,
                    49573,
                    49602,
                    49632,
                    49661,
                    49690,
                    49720,
                    49749,
                    49779,
                    49809,
                    49838,
                    49868,
                    49898,
                    49927,
                    49957,
                    49986,
                    50016,
                    50045,
                    50075,
                    50104,
                    50133,
                    50163,
                    50192,
                    50222,
                    50252,
                    50281,
                    50311,
                    50340,
                    50370,
                    50400,
                    50429,
                    50459,
                    50488,
                    50518,
                    50547,
                    50576,
                    50606,
                    50635,
                    50665,
                    50694,
                    50724,
                    50754,
                    50784,
                    50813,
                    50843,
                    50872,
                    50902,
                    50931,
                    50960,
                    50990,
                    51019,
                    51049,
                    51078,
                    51108,
                    51138,
                    51167,
                    51197,
                    51227,
                    51256,
                    51286,
                    51315,
                    51345,
                    51374,
                    51403,
                    51433,
                    51462,
                    51492,
                    51522,
                    51552,
                    51582,
                    51611,
                    51641,
                    51670,
                    51699,
                    51729,
                    51758,
                    51787,
                    51816,
                    51846,
                    51876,
                    51906,
                    51936,
                    51965,
                    51995,
                    52025,
                    52054,
                    52083,
                    52113,
                    52142,
                    52171,
                    52200,
                    52230,
                    52260,
                    52290,
                    52319,
                    52349,
                    52379,
                    52408,
                    52438,
                    52467,
                    52497,
                    52526,
                    52555,
                    52585,
                    52614,
                    52644,
                    52673,
                    52703,
                    52733,
                    52762,
                    52792,
                    52822,
                    52851,
                    52881,
                    52910,
                    52939,
                    52969,
                    52998,
                    53028,
                    53057,
                    53087,
                    53116,
                    53146,
                    53176,
                    53205,
                    53235,
                    53264,
                    53294,
                    53324,
                    53353,
                    53383,
                    53412,
                    53441,
                    53471,
                    53500,
                    53530,
                    53559,
                    53589,
                    53619,
                    53648,
                    53678,
                    53708,
                    53737,
                    53767,
                    53796,
                    53825,
                    53855,
                    53884,
                    53913,
                    53943,
                    53973,
                    54003,
                    54032,
                    54062,
                    54092,
                    54121,
                    54151,
                    54180,
                    54209,
                    54239,
                    54268,
                    54297,
                    54327,
                    54357,
                    54387,
                    54416,
                    54446,
                    54476,
                    54505,
                    54535,
                    54564,
                    54593,
                    54623,
                    54652,
                    54681,
                    54711,
                    54741,
                    54770,
                    54800,
                    54830,
                    54859,
                    54889,
                    54919,
                    54948,
                    54977,
                    55007,
                    55036,
                    55066,
                    55095,
                    55125,
                    55154,
                    55184,
                    55213,
                    55243,
                    55273,
                    55302,
                    55332,
                    55361,
                    55391,
                    55420,
                    55450,
                    55479,
                    55508,
                    55538,
                    55567,
                    55597,
                    55627,
                    55657,
                    55686,
                    55716,
                    55745,
                    55775,
                    55804,
                    55834,
                    55863,
                    55892,
                    55922,
                    55951,
                    55981,
                    56011,
                    56040,
                    56070,
                    56100,
                    56129,
                    56159,
                    56188,
                    56218,
                    56247,
                    56276,
                    56306,
                    56335,
                    56365,
                    56394,
                    56424,
                    56454,
                    56483,
                    56513,
                    56543,
                    56572,
                    56601,
                    56631,
                    56660,
                    56690,
                    56719,
                    56749,
                    56778,
                    56808,
                    56837,
                    56867,
                    56897,
                    56926,
                    56956,
                    56985,
                    57015,
                    57044,
                    57074,
                    57103,
                    57133,
                    57162,
                    57192,
                    57221,
                    57251,
                    57280,
                    57310,
                    57340,
                    57369,
                    57399,
                    57429,
                    57458,
                    57487,
                    57517,
                    57546,
                    57576,
                    57605,
                    57634,
                    57664,
                    57694,
                    57723,
                    57753,
                    57783,
                    57813,
                    57842,
                    57871,
                    57901,
                    57930,
                    57959,
                    57989,
                    58018,
                    58048,
                    58077,
                    58107,
                    58137,
                    58167,
                    58196,
                    58226,
                    58255,
                    58285,
                    58314,
                    58343,
                    58373,
                    58402,
                    58432,
                    58461,
                    58491,
                    58521,
                    58551,
                    58580,
                    58610,
                    58639,
                    58669,
                    58698,
                    58727,
                    58757,
                    58786,
                    58816,
                    58845,
                    58875,
                    58905,
                    58934,
                    58964,
                    58994,
                    59023,
                    59053,
                    59082,
                    59111,
                    59141,
                    59170,
                    59200,
                    59229,
                    59259,
                    59288,
                    59318,
                    59348,
                    59377,
                    59407,
                    59436,
                    59466,
                    59495,
                    59525,
                    59554,
                    59584,
                    59613,
                    59643,
                    59672,
                    59702,
                    59731,
                    59761,
                    59791,
                    59820,
                    59850,
                    59879,
                    59909,
                    59939,
                    59968,
                    59997,
                    60027,
                    60056,
                    60086,
                    60115,
                    60145,
                    60174,
                    60204,
                    60234,
                    60264,
                    60293,
                    60323,
                    60352,
                    60381,
                    60411,
                    60440,
                    60469,
                    60499,
                    60528,
                    60558,
                    60588,
                    60618,
                    60648,
                    60677,
                    60707,
                    60736,
                    60765,
                    60795,
                    60824,
                    60853,
                    60883,
                    60912,
                    60942,
                    60972,
                    61002,
                    61031,
                    61061,
                    61090,
                    61120,
                    61149,
                    61179,
                    61208,
                    61237,
                    61267,
                    61296,
                    61326,
                    61356,
                    61385,
                    61415,
                    61445,
                    61474,
                    61504,
                    61533,
                    61563,
                    61592,
                    61621,
                    61651,
                    61680,
                    61710,
                    61739,
                    61769,
                    61799,
                    61828,
                    61858,
                    61888,
                    61917,
                    61947,
                    61976,
                    62006,
                    62035,
                    62064,
                    62094,
                    62123,
                    62153,
                    62182,
                    62212,
                    62242,
                    62271,
                    62301,
                    62331,
                    62360,
                    62390,
                    62419,
                    62448,
                    62478,
                    62507,
                    62537,
                    62566,
                    62596,
                    62625,
                    62655,
                    62685,
                    62715,
                    62744,
                    62774,
                    62803,
                    62832,
                    62862,
                    62891,
                    62921,
                    62950,
                    62980,
                    63009,
                    63039,
                    63069,
                    63099,
                    63128,
                    63157,
                    63187,
                    63216,
                    63246,
                    63275,
                    63305,
                    63334,
                    63363,
                    63393,
                    63423,
                    63453,
                    63482,
                    63512,
                    63541,
                    63571,
                    63600,
                    63630,
                    63659,
                    63689,
                    63718,
                    63747,
                    63777,
                    63807,
                    63836,
                    63866,
                    63895,
                    63925,
                    63955,
                    63984,
                    64014,
                    64043,
                    64073,
                    64102,
                    64131,
                    64161,
                    64190,
                    64220,
                    64249,
                    64279,
                    64309,
                    64339,
                    64368,
                    64398,
                    64427,
                    64457,
                    64486,
                    64515,
                    64545,
                    64574,
                    64603,
                    64633,
                    64663,
                    64692,
                    64722,
                    64752,
                    64782,
                    64811,
                    64841,
                    64870,
                    64899,
                    64929,
                    64958,
                    64987,
                    65017,
                    65047,
                    65076,
                    65106,
                    65136,
                    65166,
                    65195,
                    65225,
                    65254,
                    65283,
                    65313,
                    65342,
                    65371,
                    65401,
                    65431,
                    65460,
                    65490,
                    65520,
                    65549,
                    65579,
                    65608,
                    65638,
                    65667,
                    65697,
                    65726,
                    65755,
                    65785,
                    65815,
                    65844,
                    65874,
                    65903,
                    65933,
                    65963,
                    65992,
                    66022,
                    66051,
                    66081,
                    66110,
                    66140,
                    66169,
                    66199,
                    66228,
                    66258,
                    66287,
                    66317,
                    66346,
                    66376,
                    66405,
                    66435,
                    66465,
                    66494,
                    66524,
                    66553,
                    66583,
                    66612,
                    66641,
                    66671,
                    66700,
                    66730,
                    66760,
                    66789,
                    66819,
                    66849,
                    66878,
                    66908,
                    66937,
                    66967,
                    66996,
                    67025,
                    67055,
                    67084,
                    67114,
                    67143,
                    67173,
                    67203,
                    67233,
                    67262,
                    67292,
                    67321,
                    67351,
                    67380,
                    67409,
                    67439,
                    67468,
                    67497,
                    67527,
                    67557,
                    67587,
                    67617,
                    67646,
                    67676,
                    67705,
                    67735,
                    67764,
                    67793,
                    67823,
                    67852,
                    67882,
                    67911,
                    67941,
                    67971,
                    68000,
                    68030,
                    68060,
                    68089,
                    68119,
                    68148,
                    68177,
                    68207,
                    68236,
                    68266,
                    68295,
                    68325,
                    68354,
                    68384,
                    68414,
                    68443,
                    68473,
                    68502,
                    68532,
                    68561,
                    68591,
                    68620,
                    68650,
                    68679,
                    68708,
                    68738,
                    68768,
                    68797,
                    68827,
                    68857,
                    68886,
                    68916,
                    68946,
                    68975,
                    69004,
                    69034,
                    69063,
                    69092,
                    69122,
                    69152,
                    69181,
                    69211,
                    69240,
                    69270,
                    69300,
                    69330,
                    69359,
                    69388,
                    69418,
                    69447,
                    69476,
                    69506,
                    69535,
                    69565,
                    69595,
                    69624,
                    69654,
                    69684,
                    69713,
                    69743,
                    69772,
                    69802,
                    69831,
                    69861,
                    69890,
                    69919,
                    69949,
                    69978,
                    70008,
                    70038,
                    70067,
                    70097,
                    70126,
                    70156,
                    70186,
                    70215,
                    70245,
                    70274,
                    70303,
                    70333,
                    70362,
                    70392,
                    70421,
                    70451,
                    70481,
                    70510,
                    70540,
                    70570,
                    70599,
                    70629,
                    70658,
                    70687,
                    70717,
                    70746,
                    70776,
                    70805,
                    70835,
                    70864,
                    70894,
                    70924,
                    70954,
                    70983,
                    71013,
                    71042,
                    71071,
                    71101,
                    71130,
                    71159,
                    71189,
                    71218,
                    71248,
                    71278,
                    71308,
                    71337,
                    71367,
                    71397,
                    71426,
                    71455,
                    71485,
                    71514,
                    71543,
                    71573,
                    71602,
                    71632,
                    71662,
                    71691,
                    71721,
                    71751,
                    71781,
                    71810,
                    71839,
                    71869,
                    71898,
                    71927,
                    71957,
                    71986,
                    72016,
                    72046,
                    72075,
                    72105,
                    72135,
                    72164,
                    72194,
                    72223,
                    72253,
                    72282,
                    72311,
                    72341,
                    72370,
                    72400,
                    72429,
                    72459,
                    72489,
                    72518,
                    72548,
                    72577,
                    72607,
                    72637,
                    72666,
                    72695,
                    72725,
                    72754,
                    72784,
                    72813,
                    72843,
                    72872,
                    72902,
                    72931,
                    72961,
                    72991,
                    73020,
                    73050,
                    73080,
                    73109,
                    73139,
                    73168,
                    73197,
                    73227,
                    73256,
                    73286,
                    73315,
                    73345,
                    73375,
                    73404,
                    73434,
                    73464,
                    73493,
                    73523,
                    73552,
                    73581,
                    73611,
                    73640,
                    73669,
                    73699,
                    73729,
                    73758,
                    73788,
                    73818,
                    73848,
                    73877,
                    73907,
                    73936,
                    73965,
                    73995,
                    74024,
                    74053,
                    74083,
                    74113,
                    74142,
                    74172,
                    74202,
                    74231,
                    74261,
                    74291,
                    74320,
                    74349,
                    74379,
                    74408,
                    74437,
                    74467,
                    74497,
                    74526,
                    74556,
                    74586,
                    74615,
                    74645,
                    74675,
                    74704,
                    74733,
                    74763,
                    74792,
                    74822,
                    74851,
                    74881,
                    74910,
                    74940,
                    74969,
                    74999,
                    75029,
                    75058,
                    75088,
                    75117,
                    75147,
                    75176,
                    75206,
                    75235,
                    75264,
                    75294,
                    75323,
                    75353,
                    75383,
                    75412,
                    75442,
                    75472,
                    75501,
                    75531,
                    75560,
                    75590,
                    75619,
                    75648,
                    75678,
                    75707,
                    75737,
                    75766,
                    75796,
                    75826,
                    75856,
                    75885,
                    75915,
                    75944,
                    75974,
                    76003,
                    76032,
                    76062,
                    76091,
                    76121,
                    76150,
                    76180,
                    76210,
                    76239,
                    76269,
                    76299,
                    76328,
                    76358,
                    76387,
                    76416,
                    76446,
                    76475,
                    76505,
                    76534,
                    76564,
                    76593,
                    76623,
                    76653,
                    76682,
                    76712,
                    76741,
                    76771,
                    76801,
                    76830,
                    76859,
                    76889,
                    76918,
                    76948,
                    76977,
                    77007,
                    77036,
                    77066,
                    77096,
                    77125,
                    77155,
                    77185,
                    77214,
                    77243,
                    77273,
                    77302,
                    77332,
                    77361,
                    77390,
                    77420,
                    77450,
                    77479,
                    77509,
                    77539,
                    77569,
                    77598,
                    77627,
                    77657,
                    77686,
                    77715,
                    77745,
                    77774,
                    77804,
                    77833,
                    77863,
                    77893,
                    77923,
                    77952,
                    77982,
                    78011,
                    78041,
                    78070,
                    78099,
                    78129,
                    78158,
                    78188,
                    78217,
                    78247,
                    78277,
                    78307,
                    78336,
                    78366,
                    78395,
                    78425,
                    78454,
                    78483,
                    78513,
                    78542,
                    78572,
                    78601,
                    78631,
                    78661,
                    78690,
                    78720,
                    78750,
                    78779,
                    78808,
                    78838,
                    78867,
                    78897,
                    78926,
                    78956,
                    78985,
                    79015,
                    79044,
                    79074,
                    79104,
                    79133,
                    79163,
                    79192,
                    79222,
                    79251,
                    79281,
                    79310,
                    79340,
                    79369,
                    79399,
                    79428,
                    79458,
                    79487,
                    79517,
                    79546,
                    79576,
                    79606,
                    79635,
                    79665,
                    79695,
                    79724,
                    79753,
                    79783,
                    79812,
                    79841,
                    79871,
                    79900,
                    79930,
                    79960,
                    79990
                ];
                function i(e) {
                    var i = e.getDate();
                    var n = e.getMonth();
                    var r = e.getFullYear();
                    var s = n + 1;
                    var o = r;
                    if (s < 3) {
                        o -= 1;
                        s += 12;
                    }
                    var a = Math.floor(o / 100.);
                    var l = a - Math.floor(a / 4.) - 2;
                    var h = Math.floor(365.25 * (o + 4716)) + Math.floor(30.6001 * (s + 1)) + i - l - 1524;
                    a = Math.floor((h - 1867216.25) / 36524.25);
                    l = a - Math.floor(a / 4.) + 1;
                    var c = h + l + 1524;
                    var d = Math.floor((c - 122.1) / 365.25);
                    var p = Math.floor(365.25 * d);
                    var u = Math.floor((c - p) / 30.6001);
                    i = (c - p) - Math.floor(30.6001 * u);
                    n = Math.floor((c - p) / 20.6001);
                    if (n > 13) {
                        d += 1;
                        n -= 12;
                    }
                    n -= 1;
                    r = d - 4716;
                    var f = h - 2400000;
                    var m = 10631. / 30.;
                    var v = h - 1948084;
                    var g = Math.floor(v / 10631.);
                    v = v - 10631 * g;
                    var b = Math.floor((v - 0.1335) / m);
                    var y = 30 * g + b;
                    v = v - Math.floor(b * m + 0.1335);
                    var C = Math.floor((v + 28.5001) / 29.5);
                    if (C === 13) {
                        C = 12;
                    }
                    var E = v - Math.floor(29.5001 * C - 29);
                    var S = 0;
                    for(; S < t.length; S++){
                        if (t[S] > f) {
                            break;
                        }
                    }
                    var w = S + 16260;
                    var T = Math.floor((w - 1) / 12);
                    var k = T + 1;
                    var x = w - 12 * T;
                    var L = f - t[S - 1] + 1;
                    if ((L + '').length > 2) {
                        L = E;
                        x = C;
                        k = y;
                    }
                    return {
                        year: k,
                        month: x,
                        date: L
                    };
                }
                e.getHijriDate = i;
                function n(e, i, n) {
                    var r = e;
                    var s = i;
                    var o = n;
                    var a = r - 1;
                    var l = (a * 12) + 1 + (s - 1);
                    var h = l - 16260;
                    var c = o + t[h - 1] - 1;
                    var d = c + 2400000;
                    var p = Math.floor(d + 0.5);
                    var u = Math.floor((p - 1867216.25) / 36524.25);
                    u = p + 1 + u - Math.floor(u / 4);
                    var f = u + 1524;
                    var m = Math.floor((f - 122.1) / 365.25);
                    var v = Math.floor(365.25 * m);
                    var g = Math.floor((f - v) / 30.6001);
                    var b = f - v - Math.floor(g * 30.6001);
                    var y = g - (g > 13.5 ? 13 : 1);
                    var C = m - (y > 2.5 ? 4716 : 4715);
                    if (C <= 0) {
                        y--;
                    }
                    return new Date(C + '/' + (y) + '/' + b);
                }
                e.toGregorian = n;
            })(z || (z = {}));
            ;
            var q = /\/MMMMM|MMMM|MMM|a|LLLL|LLL|EEEEE|EEEE|E|K|cccc|ccc|WW|W|G+|z+/gi;
            var V = 'stand-alone';
            var _ = [
                'sun',
                'mon',
                'tue',
                'wed',
                'thu',
                'fri',
                'sat'
            ];
            var U = (null && ([
                'short',
                'medium',
                'long',
                'full'
            ]));
            var W = {
                m: 'getMinutes',
                h: 'getHours',
                H: 'getHours',
                s: 'getSeconds',
                d: 'getDate',
                f: 'getMilliseconds'
            };
            var Z = {
                'M': 'month',
                'd': 'day',
                'E': 'weekday',
                'c': 'weekday',
                'y': 'year',
                'm': 'minute',
                'h': 'hour',
                'H': 'hour',
                's': 'second',
                'L': 'month',
                'a': 'designator',
                'z': 'timeZone',
                'Z': 'timeZone',
                'G': 'era',
                'f': 'milliseconds'
            };
            var Y = 'timeSeparator';
            var X = (function() {
                function e() {}
                e.dateFormat = function(e, t, i) {
                    var n = this;
                    var r = eD.getDependables(i, e, t.calendar);
                    var s = h('parserObject.numbers', r);
                    var o = r.dateObject;
                    var a = {
                        isIslamic: eD.islamicRegex.test(t.calendar)
                    };
                    if (N() && t.isServerRendered) {
                        t = eD.compareBlazorDateFormats(t, e);
                    }
                    var l = t.format || eD.getResultantPattern(t.skeleton, r.dateObject, t.type, false, N() ? e : '');
                    a.dateSeperator = N() ? h('dateSeperator', o) : eD.getDateSeparator(r.dateObject);
                    if (b(l)) {
                        T('Format options or type given must be invalid');
                    } else {
                        l = eD.ConvertDateToWeekFormat(l);
                        if (N()) {
                            l = l.replace(/tt/, 'a');
                        }
                        a.pattern = l;
                        a.numMapper = N() ? v({}, s) : H.getNumberMapper(r.parserObject, H.getNumberingSystem(i));
                        var c = l.match(q) || [];
                        for(var d = 0, p = c; d < p.length; d++){
                            var u = p[d];
                            var f = u.length;
                            var m = u[0];
                            if (m === 'K') {
                                m = 'h';
                            }
                            switch(m){
                                case 'E':
                                case 'c':
                                    if (N()) {
                                        a.weekday = h('days.' + eD.monthIndex[f], o);
                                    } else {
                                        a.weekday = r.dateObject[eD.days][V][eD.monthIndex[f]];
                                    }
                                    break;
                                case 'M':
                                case 'L':
                                    if (N()) {
                                        a.month = h('months.' + eD.monthIndex[f], o);
                                    } else {
                                        a.month = r.dateObject[eD.month][V][eD.monthIndex[f]];
                                    }
                                    break;
                                case 'a':
                                    a.designator = N() ? h('dayPeriods', o) : h('dayPeriods.format.wide', o);
                                    break;
                                case 'G':
                                    var g = (f <= 3) ? 'eraAbbr' : (f === 4) ? 'eraNames' : 'eraNarrow';
                                    a.era = N() ? h('eras', o) : h('eras.' + g, r.dateObject);
                                    break;
                                case 'z':
                                    a.timeZone = h('dates.timeZoneNames', r.parserObject);
                                    break;
                            }
                        }
                    }
                    return function(e) {
                        if (isNaN(e.getDate())) {
                            return null;
                        }
                        return n.intDateFormatter(e, a);
                    };
                };
                e.intDateFormatter = function(e, t) {
                    var i = t.pattern;
                    var n = '';
                    var r = i.match(eD.dateParseRegex);
                    var s = this.getCurrentDateValue(e, t.isIslamic);
                    for(var o = 0, a = r; o < a.length; o++){
                        var l = a[o];
                        var h = l.length;
                        var c = l[0];
                        if (c === 'K') {
                            c = 'h';
                        }
                        var d = void 0;
                        var p = '';
                        var u = void 0;
                        var f = void 0;
                        var m = '';
                        switch(c){
                            case 'M':
                            case 'L':
                                d = s.month;
                                if (h > 2) {
                                    n += t.month[d];
                                } else {
                                    u = true;
                                }
                                break;
                            case 'E':
                            case 'c':
                                n += t.weekday[_[e.getDay()]];
                                break;
                            case 'H':
                            case 'h':
                            case 'm':
                            case 's':
                            case 'd':
                            case 'f':
                                u = true;
                                if (c === 'd') {
                                    d = s.date;
                                } else if (c === 'f') {
                                    u = false;
                                    f = true;
                                    p = e[W[c]]().toString();
                                    p = p.substring(0, h);
                                    var v = p.length;
                                    if (h !== v) {
                                        if (h > 3) {
                                            continue;
                                        }
                                        for(var b = 0; b < h - v; b++){
                                            p = '0' + p.toString();
                                        }
                                    }
                                    m += p;
                                } else {
                                    d = e[W[c]]();
                                }
                                if (c === 'h') {
                                    d = d % 12 || 12;
                                }
                                break;
                            case 'y':
                                f = true;
                                m += s.year;
                                if (h === 2) {
                                    m = m.substr(m.length - 2);
                                }
                                break;
                            case 'a':
                                var y = e.getHours() < 12 ? 'am' : 'pm';
                                n += t.designator[y];
                                break;
                            case 'G':
                                var C = e.getFullYear() < 0 ? 0 : 1;
                                var E = t.era[C];
                                if (g(E)) {
                                    E = t.era[C ? 0 : 1];
                                }
                                n += E || '';
                                break;
                            case '\'':
                                n += (l === '\'\'') ? '\'' : l.replace(/'/g, '');
                                break;
                            case 'z':
                                var S = e.getTimezoneOffset();
                                var w = (h < 4) ? '+H;-H' : t.timeZone.hourFormat;
                                w = w.replace(/:/g, t.numMapper.timeSeparator);
                                if (S === 0) {
                                    n += t.timeZone.gmtZeroFormat;
                                } else {
                                    f = true;
                                    m = this.getTimeZoneValue(S, w);
                                }
                                m = t.timeZone.gmtFormat.replace(/\{0\}/, m);
                                break;
                            case ':':
                                n += t.numMapper.numberSymbols[Y];
                                break;
                            case '/':
                                n += t.dateSeperator;
                                break;
                            case 'W':
                                u = true;
                                d = eD.getWeekOfYear(e);
                                break;
                            default:
                                n += l;
                        }
                        if (u) {
                            f = true;
                            m = this.checkTwodigitNumber(d, h);
                        }
                        if (f) {
                            n += H.convertValueParts(m, eD.latnParseRegex, t.numMapper.mapper);
                        }
                    }
                    return n;
                };
                e.getCurrentDateValue = function(e, t) {
                    if (t) {
                        return z.getHijriDate(e);
                    }
                    return {
                        year: e.getFullYear(),
                        month: e.getMonth() + 1,
                        date: e.getDate()
                    };
                };
                e.checkTwodigitNumber = function(e, t) {
                    var i = e + '';
                    if (t === 2 && i.length !== 2) {
                        return '0' + i;
                    }
                    return i;
                };
                e.getTimeZoneValue = function(e, t) {
                    var i = this;
                    var n = t.split(';');
                    var r = n[e > 0 ? 1 : 0];
                    var s = Math.abs(e);
                    return r = r.replace(/HH?|mm/g, function(e) {
                        var t = e.length;
                        var n = e.indexOf('H') !== -1;
                        return i.checkTwodigitNumber(Math.floor(n ? (s / 60) : (s % 60)), t);
                    });
                };
                return e;
            }());
            ;
            var G = {
                'ms': 'minimumSignificantDigits',
                'ls': 'maximumSignificantDigits',
                'mf': 'minimumFractionDigits',
                'lf': 'maximumFractionDigits'
            };
            var K = 'minimumIntegerDigits';
            var J = 'percentSign';
            var $ = 'minusSign';
            var Q = /\s/;
            var ee = [
                'infinity',
                'nan',
                'group',
                'decimal',
                'exponential'
            ];
            var et = 'infinity';
            var ei = 'nan';
            var en = (function() {
                function e() {}
                e.numberFormatter = function(e, t, i) {
                    var n = this;
                    var r = v({}, t);
                    var s = {};
                    var o = {};
                    var a;
                    var l = eD.getDependables(i, e, '', true);
                    var c = l.numericObject;
                    o.numberMapper = N() ? v({}, c) : H.getNumberMapper(l.parserObject, H.getNumberingSystem(i), true);
                    o.currencySymbol = N() ? h('currencySymbol', c) : eD.getCurrencySymbol(l.numericObject, r.currency || eb, t.altSymbol);
                    o.percentSymbol = N() ? h('numberSymbols.percentSign', c) : o.numberMapper.numberSymbols[J];
                    o.minusSymbol = N() ? h('numberSymbols.minusSign', c) : o.numberMapper.numberSymbols[$];
                    var d = o.numberMapper.numberSymbols;
                    if ((t.format) && !(eD.formatRegex.test(t.format))) {
                        s = eD.customFormat(t.format, o, l.numericObject);
                    } else {
                        v(r, eD.getProperNumericSkeleton(t.format || 'N'));
                        r.isCurrency = r.type === 'currency';
                        r.isPercent = r.type === 'percent';
                        if (!N()) {
                            a = eD.getSymbolPattern(r.type, o.numberMapper.numberSystem, l.numericObject, r.isAccount);
                        }
                        r.groupOne = this.checkValueRange(r.maximumSignificantDigits, r.minimumSignificantDigits, true);
                        this.checkValueRange(r.maximumFractionDigits, r.minimumFractionDigits, false, true);
                        if (!b(r.fractionDigits)) {
                            r.minimumFractionDigits = r.maximumFractionDigits = r.fractionDigits;
                        }
                        if (b(r.useGrouping)) {
                            r.useGrouping = true;
                        }
                        if (r.isCurrency && !N()) {
                            a = a.replace(/\u00A4/g, eD.defaultCurrency);
                        }
                        if (!N()) {
                            var p = a.split(';');
                            s.nData = eD.getFormatData(p[1] || '-' + p[0], true, o.currencySymbol);
                            s.pData = eD.getFormatData(p[0], false, o.currencySymbol);
                            if (r.useGrouping) {
                                r.groupSeparator = d[ee[2]];
                                r.groupData = this.getGroupingDetails(p[0]);
                            }
                        } else {
                            s.nData = v({}, {}, h(r.type + 'nData', c));
                            s.pData = v({}, {}, h(r.type + 'pData', c));
                            if (r.type === 'currency' && t.currency) {
                                eD.replaceBlazorCurrency([
                                    s.pData,
                                    s.nData
                                ], o.currencySymbol, t.currency);
                            }
                        }
                        var u = b(r.minimumFractionDigits);
                        if (u) {
                            r.minimumFractionDigits = s.nData.minimumFraction;
                        }
                        if (b(r.maximumFractionDigits)) {
                            var f = s.nData.maximumFraction;
                            r.maximumFractionDigits = b(f) && r.isPercent ? 0 : f;
                        }
                        var m = r.minimumFractionDigits;
                        var g = r.maximumFractionDigits;
                        if (!b(m) && !b(g)) {
                            if (m > g) {
                                r.maximumFractionDigits = m;
                            }
                        }
                    }
                    v(s.nData, r);
                    v(s.pData, r);
                    return function(e) {
                        if (isNaN(e)) {
                            return d[ee[1]];
                        } else if (!isFinite(e)) {
                            return d[ee[0]];
                        }
                        return n.intNumberFormatter(e, s, o);
                    };
                };
                e.getGroupingDetails = function(e) {
                    var t = {};
                    var i = e.match(eD.negativeDataRegex);
                    if (i && i[4]) {
                        var n = i[4];
                        var r = n.lastIndexOf(',');
                        if (r !== -1) {
                            var s = n.split('.')[0];
                            t.primary = (s.length - r) - 1;
                            var o = n.lastIndexOf(',', r - 1);
                            if (o !== -1) {
                                t.secondary = r - 1 - o;
                            }
                        }
                    }
                    return t;
                };
                e.checkValueRange = function(e, t, i, n) {
                    var r = n ? 'f' : 's';
                    var s = 0;
                    var o = G['l' + r];
                    var a = G['m' + r];
                    if (!b(e)) {
                        this.checkRange(e, o, n);
                        s++;
                    }
                    if (!b(t)) {
                        this.checkRange(t, a, n);
                        s++;
                    }
                    if (s === 2) {
                        if (e < t) {
                            T(a + 'specified must be less than the' + o);
                        } else {
                            return true;
                        }
                    } else if (i && s === 1) {
                        T('Both' + a + 'and' + a + 'must be present');
                    }
                    return false;
                };
                e.checkRange = function(e, t, i) {
                    var n = i ? [
                        0,
                        20
                    ] : [
                        1,
                        21
                    ];
                    if (e < n[0] || e > n[1]) {
                        T(t + 'value must be within the range' + n[0] + 'to' + n[1]);
                    }
                };
                e.intNumberFormatter = function(e, t, i) {
                    var n;
                    if (b(t.nData.type)) {
                        return undefined;
                    } else {
                        if (e < 0) {
                            e = e * -1;
                            n = t.nData;
                        } else if (e === 0) {
                            n = t.zeroData || t.pData;
                        } else {
                            n = t.pData;
                        }
                        var r = '';
                        if (n.isPercent) {
                            e = e * 100;
                        }
                        if (n.groupOne) {
                            r = this.processSignificantDigits(e, n.minimumSignificantDigits, n.maximumSignificantDigits);
                        } else {
                            r = this.processFraction(e, n.minimumFractionDigits, n.maximumFractionDigits);
                            if (n.minimumIntegerDigits) {
                                r = this.processMinimumIntegers(r, n.minimumIntegerDigits);
                            }
                        }
                        if (n.type === 'scientific') {
                            r = e.toExponential(n.maximumFractionDigits);
                            r = r.replace('e', i.numberMapper.numberSymbols[ee[4]]);
                        }
                        r = r.replace('.', i.numberMapper.numberSymbols[ee[3]]);
                        if (n.useGrouping) {
                            r = this.groupNumbers(r, n.groupData.primary, n.groupSeparator || ',', i.numberMapper.numberSymbols[ee[3]] || '.', n.groupData.secondary);
                        }
                        r = H.convertValueParts(r, eD.latnParseRegex, i.numberMapper.mapper);
                        if (n.nlead === 'N/A') {
                            return n.nlead;
                        } else {
                            return n.nlead + r + n.nend;
                        }
                    }
                };
                e.processSignificantDigits = function(e, t, i) {
                    var n = e + '';
                    var r;
                    var s = n.length;
                    if (s < t) {
                        return e.toPrecision(t);
                    } else {
                        n = e.toPrecision(i);
                        r = +n;
                        return r + '';
                    }
                };
                e.groupNumbers = function(e, t, i, n, r) {
                    var s = !g(r) && r !== 0;
                    var o = e.split(n);
                    var a = o[0];
                    var l = a.length;
                    var h = '';
                    while(l > t){
                        h = a.slice(l - t, l) + (h.length ? (i + h) : '');
                        l -= t;
                        if (s) {
                            t = r;
                            s = false;
                        }
                    }
                    o[0] = a.slice(0, l) + (h.length ? i : '') + h;
                    return o.join(n);
                };
                e.processFraction = function(e, t, i) {
                    var n = (e + '').split('.')[1];
                    var r = n ? n.length : 0;
                    if (t && r < t) {
                        var s = '';
                        if (r === 0) {
                            s = e.toFixed(t);
                        } else {
                            s += e;
                            for(var o = 0; o < t - r; o++){
                                s += '0';
                            }
                            return s;
                        }
                        return e.toFixed(t);
                    } else if (!g(i) && (r > i || i === 0)) {
                        return e.toFixed(i);
                    }
                    return e + '';
                };
                e.processMinimumIntegers = function(e, t) {
                    var i = e.split('.');
                    var n = i[0];
                    var r = n.length;
                    if (r < t) {
                        for(var s = 0; s < t - r; s++){
                            n = '0' + n;
                        }
                        i[0] = n;
                    }
                    return i.join('.');
                };
                return e;
            }());
            ;
            var er = 'stand-alone';
            var es = /^[0-9]*$/;
            var eo = {
                minute: 'setMinutes',
                hour: 'setHours',
                second: 'setSeconds',
                day: 'setDate',
                month: 'setMonth',
                milliseconds: 'setMilliseconds'
            };
            var ea = 'months';
            var el = (function() {
                function e() {}
                e.dateParser = function(e, t, i) {
                    var n = this;
                    var r = eD.getDependables(i, e, t.calendar);
                    var s = H.getCurrentNumericOptions(r.parserObject, H.getNumberingSystem(i), false, N());
                    var o = {};
                    if (N() && t.isServerRendered) {
                        t = eD.compareBlazorDateFormats(t, e);
                    }
                    var a = t.format || eD.getResultantPattern(t.skeleton, r.dateObject, t.type, false, N() ? e : '');
                    var l = '';
                    var c;
                    if (b(a)) {
                        T('Format options or type given must be invalid');
                    } else {
                        a = eD.ConvertDateToWeekFormat(a);
                        o = {
                            isIslamic: eD.islamicRegex.test(t.calendar),
                            pattern: a,
                            evalposition: {},
                            culture: e
                        };
                        var d = a.match(eD.dateParseRegex) || [];
                        var p = d.length;
                        var u = 0;
                        var f = 0;
                        var m = false;
                        var v = s.numericRegex;
                        var y = N() ? r.parserObject.numbers : H.getNumberMapper(r.parserObject, H.getNumberingSystem(i));
                        for(var C = 0; C < p; C++){
                            var E = d[C];
                            var S = E.length;
                            var w = (E[0] === 'K') ? 'h' : E[0];
                            var k = void 0;
                            var x = void 0;
                            var L = Z[w];
                            var D = (S === 2) ? '' : '?';
                            if (m) {
                                u = f;
                                m = false;
                            }
                            switch(w){
                                case 'E':
                                case 'c':
                                    var O = void 0;
                                    if (N()) {
                                        O = h('days.' + eD.monthIndex[S], r.dateObject);
                                    } else {
                                        O = r.dateObject[eD.days][er][eD.monthIndex[S]];
                                    }
                                    var A = H.reverseObject(O);
                                    l += '(' + Object.keys(A).join('|') + ')';
                                    break;
                                case 'M':
                                case 'L':
                                case 'd':
                                case 'm':
                                case 's':
                                case 'h':
                                case 'H':
                                case 'f':
                                    x = true;
                                    if ((w === 'M' || w === 'L') && S > 2) {
                                        var P = void 0;
                                        if (N()) {
                                            P = h('months.' + eD.monthIndex[S], r.dateObject);
                                        } else {
                                            P = r.dateObject[ea][er][eD.monthIndex[S]];
                                        }
                                        o[L] = H.reverseObject(P);
                                        l += '(' + Object.keys(o[L]).join('|') + ')';
                                    } else if (w === 'f') {
                                        if (S > 3) {
                                            continue;
                                        }
                                        k = true;
                                        l += '(' + v + v + '?' + v + '?' + ')';
                                    } else {
                                        k = true;
                                        l += '(' + v + v + D + ')';
                                    }
                                    if (w === 'h') {
                                        o.hour12 = true;
                                    }
                                    break;
                                case 'W':
                                    var M = S === 1 ? '?' : '';
                                    l += '(' + v + M + v + ')';
                                    break;
                                case 'y':
                                    x = k = true;
                                    if (S === 2) {
                                        l += '(' + v + v + ')';
                                    } else {
                                        l += '(' + v + '{' + S + ',})';
                                    }
                                    break;
                                case 'a':
                                    x = true;
                                    var R = N() ? h('dayPeriods', r.dateObject) : h('dayPeriods.format.wide', r.dateObject);
                                    o[L] = H.reverseObject(R);
                                    l += '(' + Object.keys(o[L]).join('|') + ')';
                                    break;
                                case 'G':
                                    x = true;
                                    var B = (S <= 3) ? 'eraAbbr' : (S === 4) ? 'eraNames' : 'eraNarrow';
                                    o[L] = H.reverseObject(N() ? h('eras', r.dateObject) : h('eras.' + B, r.dateObject));
                                    l += '(' + Object.keys(o[L]).join('|') + '?)';
                                    break;
                                case 'z':
                                    var I = new Date().getTimezoneOffset();
                                    x = (I !== 0);
                                    o[L] = h('dates.timeZoneNames', r.parserObject);
                                    var F = o[L];
                                    c = (S < 4);
                                    var j = c ? '+H;-H' : F.hourFormat;
                                    j = j.replace(/:/g, y.timeSeparator);
                                    l += '(' + this.parseTimeZoneRegx(j, F, v) + ')?';
                                    m = true;
                                    f = c ? 6 : 12;
                                    break;
                                case '\'':
                                    var q = E.replace(/'/g, '');
                                    l += '(' + q + ')?';
                                    break;
                                default:
                                    l += '([\\D])';
                                    break;
                            }
                            if (x) {
                                o.evalposition[L] = {
                                    isNumber: k,
                                    pos: C + 1 + u,
                                    hourOnly: c
                                };
                            }
                            if (C === p - 1 && !g(l)) {
                                o.parserRegex = new RegExp('^' + l + '$', 'i');
                            }
                        }
                    }
                    return function(e) {
                        var t = n.internalDateParse(e, o, s);
                        if (g(t) || !Object.keys(t).length) {
                            return null;
                        }
                        if (o.isIslamic) {
                            var i = {};
                            var r = t.year;
                            var a = t.day;
                            var l = t.month;
                            var h = r ? (r + '') : '';
                            var c = (h.length === 2);
                            if (!r || !l || !a || c) {
                                i = z.getHijriDate(new Date());
                            }
                            if (c) {
                                r = parseInt((i.year + '').slice(0, 2) + h, 10);
                            }
                            var d = z.toGregorian(r || i.year, l || i.month, a || i.date);
                            t.year = d.getFullYear();
                            t.month = d.getMonth() + 1;
                            t.day = d.getDate();
                        }
                        return n.getDateObject(t);
                    };
                };
                e.getDateObject = function(e, t) {
                    var i = t || new Date();
                    i.setMilliseconds(0);
                    var n = [
                        'hour',
                        'minute',
                        'second',
                        'milliseconds',
                        'month',
                        'day'
                    ];
                    var r = e.year;
                    var s = e.designator;
                    var o = e.timeZone;
                    if (!b(r)) {
                        var a = (r + '').length;
                        if (a <= 2) {
                            var l = Math.floor(i.getFullYear() / 100) * 100;
                            r += l;
                        }
                        i.setFullYear(r);
                    }
                    for(var h = 0, c = n; h < c.length; h++){
                        var d = c[h];
                        var p = e[d];
                        if (b(p) && d === 'day') {
                            i.setDate(1);
                        }
                        if (!b(p)) {
                            if (d === 'month') {
                                p -= 1;
                                if (p < 0 || p > 11) {
                                    return new Date('invalid');
                                }
                                var u = i.getDate();
                                i.setDate(1);
                                i[eo[d]](p);
                                var f = new Date(i.getFullYear(), p + 1, 0).getDate();
                                i.setDate(u < f ? u : f);
                            } else {
                                if (d === 'day') {
                                    var m = new Date(i.getFullYear(), i.getMonth() + 1, 0).getDate();
                                    if ((p < 1 || p > m)) {
                                        return null;
                                    }
                                }
                                i[eo[d]](p);
                            }
                        }
                    }
                    if (!b(s)) {
                        var v = i.getHours();
                        if (s === 'pm') {
                            i.setHours(v + (v === 12 ? 0 : 12));
                        } else if (v === 12) {
                            i.setHours(0);
                        }
                    }
                    if (!b(o)) {
                        var g = o - i.getTimezoneOffset();
                        if (g !== 0) {
                            i.setMinutes(i.getMinutes() + g);
                        }
                    }
                    return i;
                };
                e.internalDateParse = function(e, t, i) {
                    var n = e.match(t.parserRegex);
                    var r = {
                        'hour': 0,
                        'minute': 0,
                        'second': 0
                    };
                    if (g(n)) {
                        return null;
                    } else {
                        var s = Object.keys(t.evalposition);
                        for(var o = 0, a = s; o < a.length; o++){
                            var l = a[o];
                            var h = t.evalposition[l];
                            var c = n[h.pos];
                            if (h.isNumber) {
                                r[l] = this.internalNumberParser(c, i);
                            } else {
                                if (l === 'timeZone' && !b(c)) {
                                    var d = h.pos;
                                    var p = void 0;
                                    var u = n[d + 1];
                                    var f = !b(u);
                                    if (h.hourOnly) {
                                        p = this.getZoneValue(f, u, n[d + 4], i) * 60;
                                    } else {
                                        p = this.getZoneValue(f, u, n[d + 7], i) * 60;
                                        p += this.getZoneValue(f, n[d + 4], n[d + 10], i);
                                    }
                                    if (!g(p)) {
                                        r[l] = p;
                                    }
                                } else {
                                    c = ((l === 'month') && (!t.isIslamic) && (t.culture === 'en' || t.culture === 'en-GB' || t.culture === 'en-US')) ? c[0].toUpperCase() + c.substring(1).toLowerCase() : c;
                                    r[l] = t[l][c];
                                }
                            }
                        }
                        if (t.hour12) {
                            r.hour12 = true;
                        }
                    }
                    return r;
                };
                e.internalNumberParser = function(e, t) {
                    e = H.convertValueParts(e, t.numberParseRegex, t.numericPair);
                    if (es.test(e)) {
                        return +e;
                    }
                    return null;
                };
                e.parseTimeZoneRegx = function(e, t, i) {
                    var n = t.gmtFormat;
                    var r;
                    var s = '(' + i + ')' + '(' + i + ')';
                    var o;
                    r = e.replace('+', '\\+');
                    if (e.indexOf('HH') !== -1) {
                        r = r.replace(/HH|mm/g, '(' + s + ')');
                    } else {
                        r = r.replace(/H|m/g, '(' + s + '?)');
                    }
                    o = (r.split(';').map(function(e) {
                        return n.replace('{0}', e);
                    }));
                    r = o.join('|') + '|' + t.gmtZeroFormat;
                    return r;
                };
                e.getZoneValue = function(e, t, i, n) {
                    var r = e ? t : i;
                    if (!r) {
                        return 0;
                    }
                    var s = this.internalNumberParser(r, n);
                    if (e) {
                        return -s;
                    }
                    return s;
                };
                return e;
            }());
            ;
            var eh = /^([^0-9]*)(([0-9,]*[0-9]+)(\.[0-9]+)?)([Ee][+-]?[0-9]+)?([^0-9]*)$/;
            var ec = /,/g;
            var ed = [
                'minusSign',
                'infinity'
            ];
            var ep = (function() {
                function e() {}
                e.numberParser = function(e, t, i) {
                    var n = this;
                    var r = eD.getDependables(i, e, '', true);
                    var s = {
                        custom: true
                    };
                    var o;
                    if ((eD.formatRegex.test(t.format)) || !(t.format)) {
                        v(s, eD.getProperNumericSkeleton(t.format || 'N'));
                        s.custom = false;
                        if (!s.fractionDigits) {
                            if (t.maximumFractionDigits) {
                                s.maximumFractionDigits = t.maximumFractionDigits;
                            }
                        }
                    } else {
                        v(s, eD.customFormat(t.format, null, null));
                    }
                    var a = h('numbers', r.parserObject);
                    o = H.getCurrentNumericOptions(r.parserObject, H.getNumberingSystem(i), true, N());
                    s.symbolRegex = H.getSymbolRegex(Object.keys(o.symbolMatch));
                    s.infinity = o.symbolNumberSystem[ed[1]];
                    var l;
                    if (!N()) {
                        l = eD.getSymbolPattern(s.type, o.numberSystem, r.numericObject, s.isAccount);
                        if (l) {
                            l = l.replace(/\u00A4/g, eD.defaultCurrency);
                            var c = l.split(';');
                            s.nData = eD.getFormatData(c[1] || '-' + c[0], true, '');
                            s.pData = eD.getFormatData(c[0], true, '');
                        }
                    } else {
                        s.nData = v({}, {}, h(s.type + 'nData', a));
                        s.pData = v({}, {}, h(s.type + 'pData', a));
                        if (s.type === 'currency' && t.currency) {
                            eD.replaceBlazorCurrency([
                                s.pData,
                                s.nData
                            ], h('currencySymbol', a), t.currency);
                        }
                    }
                    return function(e) {
                        return n.getParsedNumber(e, s, o);
                    };
                };
                e.getParsedNumber = function(e, t, i) {
                    var n;
                    var r;
                    var s;
                    var o;
                    var a;
                    var l;
                    if (e.indexOf(t.infinity) !== -1) {
                        return Infinity;
                    } else {
                        e = H.convertValueParts(e, t.symbolRegex, i.symbolMatch);
                        e = H.convertValueParts(e, i.numberParseRegex, i.numericPair);
                        e = e.indexOf('-') !== -1 ? e.replace('-.', '-0.') : e;
                        if (e.indexOf('.') === 0) {
                            e = '0' + e;
                        }
                        var h = e.match(eh);
                        if (g(h)) {
                            return NaN;
                        }
                        o = h[1];
                        s = h[2];
                        var c = h[5];
                        a = h[6];
                        n = t.custom ? ((o === t.nData.nlead) && (a === t.nData.nend)) : ((o.indexOf(t.nData.nlead) !== -1) && (a.indexOf(t.nData.nend) !== -1));
                        r = n ? t.nData.isPercent : t.pData.isPercent;
                        s = s.replace(ec, '');
                        if (c) {
                            s += c;
                        }
                        l = +s;
                        if (t.type === 'percent' || r) {
                            l = l / 100;
                        }
                        if (t.custom || t.fractionDigits) {
                            l = parseFloat(l.toFixed(t.custom ? (n ? t.nData.maximumFractionDigits : t.pData.maximumFractionDigits) : t.fractionDigits));
                        }
                        if (t.maximumFractionDigits) {
                            l = this.convertMaxFracDigits(s, t, l, n);
                        }
                        if (n) {
                            l *= -1;
                        }
                        return l;
                    }
                };
                e.convertMaxFracDigits = function(e, t, i, n) {
                    var r = e.split('.');
                    if (r[1] && r[1].length > t.maximumFractionDigits) {
                        i = +(i.toFixed(t.custom ? (n ? t.nData.maximumFractionDigits : t.pData.maximumFractionDigits) : t.maximumFractionDigits));
                    }
                    return i;
                };
                return e;
            }());
            ;
            var eu = (function() {
                function e(e) {
                    this.ranArray = [];
                    this.boundedEvents = {};
                    if (g(e)) {
                        return;
                    }
                    this.context = e;
                }
                e.prototype.on = function(e, t, i, n) {
                    if (g(t)) {
                        return;
                    }
                    var r = i || this.context;
                    if (this.notExist(e)) {
                        this.boundedEvents[e] = [
                            {
                                handler: t,
                                context: r
                            }
                        ];
                        return;
                    }
                    if (!g(n)) {
                        if (this.ranArray.indexOf(n) === -1) {
                            this.ranArray.push(n);
                            this.boundedEvents[e].push({
                                handler: t,
                                context: r,
                                id: n
                            });
                        }
                    } else if (!this.isHandlerPresent(this.boundedEvents[e], t)) {
                        this.boundedEvents[e].push({
                            handler: t,
                            context: r
                        });
                    }
                };
                e.prototype.off = function(e, t, i) {
                    if (this.notExist(e)) {
                        return;
                    }
                    var n = h(e, this.boundedEvents);
                    if (t) {
                        for(var r = 0; r < n.length; r++){
                            if (i) {
                                if (n[r].id === i) {
                                    n.splice(r, 1);
                                    var s = this.ranArray.indexOf(i);
                                    if (s !== -1) {
                                        this.ranArray.splice(s, 1);
                                    }
                                    break;
                                }
                            } else if (t === n[r].handler) {
                                n.splice(r, 1);
                                break;
                            }
                        }
                    } else {
                        delete this.boundedEvents[e];
                    }
                };
                e.prototype.notify = function(e, t, i, n) {
                    if (this.notExist(e)) {
                        if (i) {
                            i.call(this, t);
                        }
                        return;
                    }
                    if (t) {
                        t.name = e;
                    }
                    var r = 'Blazor';
                    var s = h(e, this.boundedEvents).slice(0);
                    if (window[r]) {
                        return this.blazorCallback(s, t, i, n, 0);
                    } else {
                        for(var o = 0, a = s; o < a.length; o++){
                            var l = a[o];
                            l.handler.call(l.context, t);
                        }
                        if (i) {
                            i.call(this, t);
                        }
                    }
                };
                e.prototype.blazorCallback = function(e, t, i, n, r) {
                    var s = this;
                    var o = r === e.length - 1;
                    if (r < e.length) {
                        var a = e[r];
                        var l = a.handler.call(a.context, t);
                        if (l && typeof l.then === 'function') {
                            if (!i) {
                                return l;
                            }
                            l.then(function(l) {
                                l = typeof l === 'string' && s.isJson(l) ? JSON.parse(l, s.dateReviver) : l;
                                v(t, t, l, true);
                                if (i && o) {
                                    i.call(a.context, t);
                                } else {
                                    return s.blazorCallback(e, t, i, n, r + 1);
                                }
                            }).catch(function(e) {
                                if (n) {
                                    n.call(a.context, typeof e === 'string' && s.isJson(e) ? JSON.parse(e, s.dateReviver) : e);
                                }
                            });
                        } else if (i && o) {
                            i.call(a.context, t);
                        } else {
                            return this.blazorCallback(e, t, i, n, r + 1);
                        }
                    }
                };
                e.prototype.dateReviver = function(e, t) {
                    var i = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/;
                    if (N && typeof t === 'string' && t.match(i) !== null) {
                        return (new Date(t));
                    }
                    return (t);
                };
                e.prototype.isJson = function(e) {
                    try {
                        JSON.parse(e);
                    } catch (t) {
                        return false;
                    }
                    return true;
                };
                e.prototype.destroy = function() {
                    this.boundedEvents = this.context = undefined;
                };
                e.prototype.notExist = function(e) {
                    return this.boundedEvents.hasOwnProperty(e) === false || this.boundedEvents[e].length <= 0;
                };
                e.prototype.isHandlerPresent = function(e, t) {
                    for(var i = 0, n = e; i < n.length; i++){
                        var r = n[i];
                        if (r.handler === t) {
                            return true;
                        }
                    }
                    return false;
                };
                return e;
            }());
            ;
            var ef = new eu();
            var em = false;
            var ev = {};
            var eg = 'en-US';
            var eb = 'USD';
            var ey = [
                'numericObject',
                'dateObject'
            ];
            var eC = (function() {
                function e(e) {
                    if (e) {
                        this.culture = e;
                    }
                }
                e.prototype.getDateFormat = function(e) {
                    return X.dateFormat(this.getCulture(), e || {
                        type: 'date',
                        skeleton: 'short'
                    }, ev);
                };
                e.prototype.getNumberFormat = function(e) {
                    if (e && !e.currency) {
                        e.currency = eb;
                    }
                    if (N() && e && !e.format) {
                        e.minimumFractionDigits = 0;
                    }
                    return en.numberFormatter(this.getCulture(), e || {}, ev);
                };
                e.prototype.getDateParser = function(e) {
                    return el.dateParser(this.getCulture(), e || {
                        skeleton: 'short',
                        type: 'date'
                    }, ev);
                };
                e.prototype.getNumberParser = function(e) {
                    if (N() && e && !e.format) {
                        e.minimumFractionDigits = 0;
                    }
                    return ep.numberParser(this.getCulture(), e || {
                        format: 'N'
                    }, ev);
                };
                e.prototype.formatNumber = function(e, t) {
                    return this.getNumberFormat(t)(e);
                };
                e.prototype.formatDate = function(e, t) {
                    return this.getDateFormat(t)(e);
                };
                e.prototype.parseDate = function(e, t) {
                    return this.getDateParser(t)(e);
                };
                e.prototype.parseNumber = function(e, t) {
                    return this.getNumberParser(t)(e);
                };
                e.prototype.getDatePattern = function(e, t) {
                    return eD.getActualDateTimeFormat(this.getCulture(), e, ev, t);
                };
                e.prototype.getNumberPattern = function(e, t) {
                    return eD.getActualNumberFormat(this.getCulture(), e, ev, t);
                };
                e.prototype.getFirstDayOfWeek = function() {
                    return eD.getWeekData(this.getCulture(), ev);
                };
                e.prototype.getCulture = function() {
                    return this.culture || eg;
                };
                return e;
            }());
            function eE(e) {
                eg = e;
                ef.notify('notifyExternalChange', {
                    'locale': eg
                });
            }
            function eS(e) {
                eb = e;
                ef.notify('notifyExternalChange', {
                    'currencyCode': eb
                });
            }
            function ew() {
                var e = [];
                for(var t = 0; t < arguments.length; t++){
                    e[t] = arguments[t];
                }
                for(var i = 0, n = e; i < n.length; i++){
                    var r = n[i];
                    extend(ev, r, {}, true);
                }
            }
            function eT(e) {
                if (e === void 0) {
                    e = true;
                }
                em = e;
                ef.notify('notifyExternalChange', {
                    enableRtl: em
                });
            }
            function ek(e, t) {
                var i = eD.getDependables(ev, e, '', true)[ey[0]];
                var n = eD.getDependables(ev, e, '')[ey[1]];
                var r = h('defaultNumberingSystem', i);
                var s = N() ? h('numberSymbols', i) : h('symbols-numberSystem-' + r, i);
                var o = eD.getSymbolPattern(t || 'decimal', r, i, false);
                return v(s, eD.getFormatData(o, true, '', true), {
                    'dateSeparator': eD.getDateSeparator(n)
                });
            }
            function ex(e, t) {
                var i = IntlBase.getDependables(ev, e, '', true);
                return IntlBase.getCurrencySymbol(i.numericObject, t);
            }
            function eL(e) {
                return IntlBase.getDependables(ev, '', e, false)[ey[1]];
            }
            ;
            var eN = {
                'en-US': {
                    'd': 'M/d/y',
                    'D': 'EEEE, MMMM d, y',
                    'f': 'EEEE, MMMM d, y h:mm a',
                    'F': 'EEEE, MMMM d, y h:mm:s a',
                    'g': 'M/d/y h:mm a',
                    'G': 'M/d/yyyy h:mm:ss tt',
                    'm': 'MMMM d',
                    'M': 'MMMM d',
                    'r': 'ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'',
                    'R': 'ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'',
                    's': 'yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss',
                    't': 'h:mm tt',
                    'T': 'h:m:s tt',
                    'u': 'yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'',
                    'U': 'dddd, MMMM d, yyyy h:mm:ss tt',
                    'y': 'MMMM yyyy',
                    'Y': 'MMMM yyyy'
                }
            };
            var eD;
            (function(e) {
                e.negativeDataRegex = /^(('[^']+'|''|[^*#@0,.E])*)(\*.)?((([#,]*[0,]*0+)(\.0*[0-9]*#*)?)|([#,]*@+#*))(E\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;
                e.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\*.)?((([0#,]*[0,]*[0#]*[0#\ ]*)(\.[0#]*)?)|([#,]*@+#*))(E\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;
                e.latnParseRegex = /0|1|2|3|4|5|6|7|8|9/g;
                var t = /[0-9]/g;
                e.defaultCurrency = '$';
                var i = [
                    'infinity',
                    'nan',
                    'group',
                    'decimal'
                ];
                var n = /G|M|L|H|c|'| a|yy|y|EEEE|E/g;
                var r = {
                    'G': '',
                    'M': 'm',
                    'L': 'm',
                    'H': 'h',
                    'c': 'd',
                    '\'': '"',
                    ' a': ' AM/PM',
                    'yy': 'yy',
                    'y': 'yyyy',
                    'EEEE': 'dddd',
                    'E': 'ddd'
                };
                e.dateConverterMapper = /dddd|ddd/ig;
                var s = 'sun';
                e.islamicRegex = /^islamic/;
                var o = {
                    'sun': 0,
                    'mon': 1,
                    'tue': 2,
                    'wed': 3,
                    'thu': 4,
                    'fri': 5,
                    'sat': 6
                };
                e.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i;
                e.currencyFormatRegex = /(^[ca]{1})([0-1]?[0-9]|20)?$/i;
                e.curWithoutNumberRegex = /(c|a)$/ig;
                var a = {
                    '$': 'isCurrency',
                    '%': 'isPercent',
                    '-': 'isNegative',
                    0: 'nlead',
                    1: 'nend'
                };
                e.dateParseRegex = /([a-z])\1*|'([^']|'')+'|''|./gi;
                e.basicPatterns = [
                    'short',
                    'medium',
                    'long',
                    'full'
                ];
                e.defaultObject = {
                    'dates': {
                        'calendars': {
                            'gregorian': {
                                'months': {
                                    'stand-alone': {
                                        'abbreviated': {
                                            '1': 'Jan',
                                            '2': 'Feb',
                                            '3': 'Mar',
                                            '4': 'Apr',
                                            '5': 'May',
                                            '6': 'Jun',
                                            '7': 'Jul',
                                            '8': 'Aug',
                                            '9': 'Sep',
                                            '10': 'Oct',
                                            '11': 'Nov',
                                            '12': 'Dec'
                                        },
                                        'narrow': {
                                            '1': 'J',
                                            '2': 'F',
                                            '3': 'M',
                                            '4': 'A',
                                            '5': 'M',
                                            '6': 'J',
                                            '7': 'J',
                                            '8': 'A',
                                            '9': 'S',
                                            '10': 'O',
                                            '11': 'N',
                                            '12': 'D'
                                        },
                                        'wide': {
                                            '1': 'January',
                                            '2': 'February',
                                            '3': 'March',
                                            '4': 'April',
                                            '5': 'May',
                                            '6': 'June',
                                            '7': 'July',
                                            '8': 'August',
                                            '9': 'September',
                                            '10': 'October',
                                            '11': 'November',
                                            '12': 'December'
                                        }
                                    }
                                },
                                'days': {
                                    'stand-alone': {
                                        'abbreviated': {
                                            'sun': 'Sun',
                                            'mon': 'Mon',
                                            'tue': 'Tue',
                                            'wed': 'Wed',
                                            'thu': 'Thu',
                                            'fri': 'Fri',
                                            'sat': 'Sat'
                                        },
                                        'narrow': {
                                            'sun': 'S',
                                            'mon': 'M',
                                            'tue': 'T',
                                            'wed': 'W',
                                            'thu': 'T',
                                            'fri': 'F',
                                            'sat': 'S'
                                        },
                                        'short': {
                                            'sun': 'Su',
                                            'mon': 'Mo',
                                            'tue': 'Tu',
                                            'wed': 'We',
                                            'thu': 'Th',
                                            'fri': 'Fr',
                                            'sat': 'Sa'
                                        },
                                        'wide': {
                                            'sun': 'Sunday',
                                            'mon': 'Monday',
                                            'tue': 'Tuesday',
                                            'wed': 'Wednesday',
                                            'thu': 'Thursday',
                                            'fri': 'Friday',
                                            'sat': 'Saturday'
                                        }
                                    }
                                },
                                'dayPeriods': {
                                    'format': {
                                        'wide': {
                                            'am': 'AM',
                                            'pm': 'PM'
                                        }
                                    }
                                },
                                'eras': {
                                    'eraNames': {
                                        '0': 'Before Christ',
                                        '0-alt-variant': 'Before Common Era',
                                        '1': 'Anno Domini',
                                        '1-alt-variant': 'Common Era'
                                    },
                                    'eraAbbr': {
                                        '0': 'BC',
                                        '0-alt-variant': 'BCE',
                                        '1': 'AD',
                                        '1-alt-variant': 'CE'
                                    },
                                    'eraNarrow': {
                                        '0': 'B',
                                        '0-alt-variant': 'BCE',
                                        '1': 'A',
                                        '1-alt-variant': 'CE'
                                    }
                                },
                                'dateFormats': {
                                    'full': 'EEEE, MMMM d, y',
                                    'long': 'MMMM d, y',
                                    'medium': 'MMM d, y',
                                    'short': 'M/d/yy'
                                },
                                'timeFormats': {
                                    'full': 'h:mm:ss a zzzz',
                                    'long': 'h:mm:ss a z',
                                    'medium': 'h:mm:ss a',
                                    'short': 'h:mm a'
                                },
                                'dateTimeFormats': {
                                    'full': '{1} \'at\' {0}',
                                    'long': '{1} \'at\' {0}',
                                    'medium': '{1}, {0}',
                                    'short': '{1}, {0}',
                                    'availableFormats': {
                                        'd': 'd',
                                        'E': 'ccc',
                                        'Ed': 'd E',
                                        'Ehm': 'E h:mm a',
                                        'EHm': 'E HH:mm',
                                        'Ehms': 'E h:mm:ss a',
                                        'EHms': 'E HH:mm:ss',
                                        'Gy': 'y G',
                                        'GyMMM': 'MMM y G',
                                        'GyMMMd': 'MMM d, y G',
                                        'GyMMMEd': 'E, MMM d, y G',
                                        'h': 'h a',
                                        'H': 'HH',
                                        'hm': 'h:mm a',
                                        'Hm': 'HH:mm',
                                        'hms': 'h:mm:ss a',
                                        'Hms': 'HH:mm:ss',
                                        'hmsv': 'h:mm:ss a v',
                                        'Hmsv': 'HH:mm:ss v',
                                        'hmv': 'h:mm a v',
                                        'Hmv': 'HH:mm v',
                                        'M': 'L',
                                        'Md': 'M/d',
                                        'MEd': 'E, M/d',
                                        'MMM': 'LLL',
                                        'MMMd': 'MMM d',
                                        'MMMEd': 'E, MMM d',
                                        'MMMMd': 'MMMM d',
                                        'ms': 'mm:ss',
                                        'y': 'y',
                                        'yM': 'M/y',
                                        'yMd': 'M/d/y',
                                        'yMEd': 'E, M/d/y',
                                        'yMMM': 'MMM y',
                                        'yMMMd': 'MMM d, y',
                                        'yMMMEd': 'E, MMM d, y',
                                        'yMMMM': 'MMMM y'
                                    }
                                }
                            },
                            'islamic': {
                                'months': {
                                    'stand-alone': {
                                        'abbreviated': {
                                            '1': 'Muh.',
                                            '2': 'Saf.',
                                            '3': 'Rab. I',
                                            '4': 'Rab. II',
                                            '5': 'Jum. I',
                                            '6': 'Jum. II',
                                            '7': 'Raj.',
                                            '8': 'Sha.',
                                            '9': 'Ram.',
                                            '10': 'Shaw.',
                                            '11': 'Dhuʻl-Q.',
                                            '12': 'Dhuʻl-H.'
                                        },
                                        'narrow': {
                                            '1': '1',
                                            '2': '2',
                                            '3': '3',
                                            '4': '4',
                                            '5': '5',
                                            '6': '6',
                                            '7': '7',
                                            '8': '8',
                                            '9': '9',
                                            '10': '10',
                                            '11': '11',
                                            '12': '12'
                                        },
                                        'wide': {
                                            '1': 'Muharram',
                                            '2': 'Safar',
                                            '3': 'Rabiʻ I',
                                            '4': 'Rabiʻ II',
                                            '5': 'Jumada I',
                                            '6': 'Jumada II',
                                            '7': 'Rajab',
                                            '8': 'Shaʻban',
                                            '9': 'Ramadan',
                                            '10': 'Shawwal',
                                            '11': 'Dhuʻl-Qiʻdah',
                                            '12': 'Dhuʻl-Hijjah'
                                        }
                                    }
                                },
                                'days': {
                                    'stand-alone': {
                                        'abbreviated': {
                                            'sun': 'Sun',
                                            'mon': 'Mon',
                                            'tue': 'Tue',
                                            'wed': 'Wed',
                                            'thu': 'Thu',
                                            'fri': 'Fri',
                                            'sat': 'Sat'
                                        },
                                        'narrow': {
                                            'sun': 'S',
                                            'mon': 'M',
                                            'tue': 'T',
                                            'wed': 'W',
                                            'thu': 'T',
                                            'fri': 'F',
                                            'sat': 'S'
                                        },
                                        'short': {
                                            'sun': 'Su',
                                            'mon': 'Mo',
                                            'tue': 'Tu',
                                            'wed': 'We',
                                            'thu': 'Th',
                                            'fri': 'Fr',
                                            'sat': 'Sa'
                                        },
                                        'wide': {
                                            'sun': 'Sunday',
                                            'mon': 'Monday',
                                            'tue': 'Tuesday',
                                            'wed': 'Wednesday',
                                            'thu': 'Thursday',
                                            'fri': 'Friday',
                                            'sat': 'Saturday'
                                        }
                                    }
                                },
                                'dayPeriods': {
                                    'format': {
                                        'wide': {
                                            'am': 'AM',
                                            'pm': 'PM'
                                        }
                                    }
                                },
                                'eras': {
                                    'eraNames': {
                                        '0': 'AH'
                                    },
                                    'eraAbbr': {
                                        '0': 'AH'
                                    },
                                    'eraNarrow': {
                                        '0': 'AH'
                                    }
                                },
                                'dateFormats': {
                                    'full': 'EEEE, MMMM d, y G',
                                    'long': 'MMMM d, y G',
                                    'medium': 'MMM d, y G',
                                    'short': 'M/d/y GGGGG'
                                },
                                'timeFormats': {
                                    'full': 'h:mm:ss a zzzz',
                                    'long': 'h:mm:ss a z',
                                    'medium': 'h:mm:ss a',
                                    'short': 'h:mm a'
                                },
                                'dateTimeFormats': {
                                    'full': '{1} \'at\' {0}',
                                    'long': '{1} \'at\' {0}',
                                    'medium': '{1}, {0}',
                                    'short': '{1}, {0}',
                                    'availableFormats': {
                                        'd': 'd',
                                        'E': 'ccc',
                                        'Ed': 'd E',
                                        'Ehm': 'E h:mm a',
                                        'EHm': 'E HH:mm',
                                        'Ehms': 'E h:mm:ss a',
                                        'EHms': 'E HH:mm:ss',
                                        'Gy': 'y G',
                                        'GyMMM': 'MMM y G',
                                        'GyMMMd': 'MMM d, y G',
                                        'GyMMMEd': 'E, MMM d, y G',
                                        'h': 'h a',
                                        'H': 'HH',
                                        'hm': 'h:mm a',
                                        'Hm': 'HH:mm',
                                        'hms': 'h:mm:ss a',
                                        'Hms': 'HH:mm:ss',
                                        'M': 'L',
                                        'Md': 'M/d',
                                        'MEd': 'E, M/d',
                                        'MMM': 'LLL',
                                        'MMMd': 'MMM d',
                                        'MMMEd': 'E, MMM d',
                                        'MMMMd': 'MMMM d',
                                        'ms': 'mm:ss',
                                        'y': 'y G',
                                        'yyyy': 'y G',
                                        'yyyyM': 'M/y GGGGG',
                                        'yyyyMd': 'M/d/y GGGGG',
                                        'yyyyMEd': 'E, M/d/y GGGGG',
                                        'yyyyMMM': 'MMM y G',
                                        'yyyyMMMd': 'MMM d, y G',
                                        'yyyyMMMEd': 'E, MMM d, y G',
                                        'yyyyMMMM': 'MMMM y G',
                                        'yyyyQQQ': 'QQQ y G',
                                        'yyyyQQQQ': 'QQQQ y G'
                                    }
                                }
                            }
                        },
                        'timeZoneNames': {
                            'hourFormat': '+HH:mm;-HH:mm',
                            'gmtFormat': 'GMT{0}',
                            'gmtZeroFormat': 'GMT'
                        }
                    },
                    'numbers': {
                        'currencies': {
                            'USD': {
                                'displayName': 'US Dollar',
                                'symbol': '$',
                                'symbol-alt-narrow': '$'
                            },
                            'EUR': {
                                'displayName': 'Euro',
                                'symbol': '€',
                                'symbol-alt-narrow': '€'
                            },
                            'GBP': {
                                'displayName': 'British Pound',
                                'symbol-alt-narrow': '£'
                            }
                        },
                        'defaultNumberingSystem': 'latn',
                        'minimumGroupingDigits': '1',
                        'symbols-numberSystem-latn': {
                            'decimal': '.',
                            'group': ',',
                            'list': ';',
                            'percentSign': '%',
                            'plusSign': '+',
                            'minusSign': '-',
                            'exponential': 'E',
                            'superscriptingExponent': '×',
                            'perMille': '‰',
                            'infinity': '∞',
                            'nan': 'NaN',
                            'timeSeparator': ':'
                        },
                        'decimalFormats-numberSystem-latn': {
                            'standard': '#,##0.###'
                        },
                        'percentFormats-numberSystem-latn': {
                            'standard': '#,##0%'
                        },
                        'currencyFormats-numberSystem-latn': {
                            'standard': '¤#,##0.00',
                            'accounting': '¤#,##0.00;(¤#,##0.00)'
                        },
                        'scientificFormats-numberSystem-latn': {
                            'standard': '#E0'
                        }
                    }
                };
                e.blazorDefaultObject = {
                    'numbers': {
                        'mapper': {
                            '0': '0',
                            '1': '1',
                            '2': '2',
                            '3': '3',
                            '4': '4',
                            '5': '5',
                            '6': '6',
                            '7': '7',
                            '8': '8',
                            '9': '9'
                        },
                        'mapperDigits': '0123456789',
                        'numberSymbols': {
                            'decimal': '.',
                            'group': ',',
                            'plusSign': '+',
                            'minusSign': '-',
                            'percentSign': '%',
                            'nan': 'NaN',
                            'timeSeparator': ':',
                            'infinity': '∞'
                        },
                        'timeSeparator': ':',
                        'currencySymbol': '$',
                        'currencypData': {
                            'nlead': '$',
                            'nend': '',
                            'groupSeparator': ',',
                            'groupData': {
                                'primary': 3
                            },
                            'maximumFraction': 2,
                            'minimumFraction': 2
                        },
                        'percentpData': {
                            'nlead': '',
                            'nend': '%',
                            'groupSeparator': ',',
                            'groupData': {
                                'primary': 3
                            },
                            'maximumFraction': 2,
                            'minimumFraction': 2
                        },
                        'percentnData': {
                            'nlead': '-',
                            'nend': '%',
                            'groupSeparator': ',',
                            'groupData': {
                                'primary': 3
                            },
                            'maximumFraction': 2,
                            'minimumFraction': 2
                        },
                        'currencynData': {
                            'nlead': '($',
                            'nend': ')',
                            'groupSeparator': ',',
                            'groupData': {
                                'primary': 3
                            },
                            'maximumFraction': 2,
                            'minimumFraction': 2
                        },
                        'decimalnData': {
                            'nlead': '-',
                            'nend': '',
                            'groupData': {
                                'primary': 3
                            },
                            'maximumFraction': 2,
                            'minimumFraction': 2
                        },
                        'decimalpData': {
                            'nlead': '',
                            'nend': '',
                            'groupData': {
                                'primary': 3
                            },
                            'maximumFraction': 2,
                            'minimumFraction': 2
                        }
                    },
                    'dates': {
                        'dayPeriods': {
                            'am': 'AM',
                            'pm': 'PM'
                        },
                        'dateSeperator': '/',
                        'days': {
                            'abbreviated': {
                                'sun': 'Sun',
                                'mon': 'Mon',
                                'tue': 'Tue',
                                'wed': 'Wed',
                                'thu': 'Thu',
                                'fri': 'Fri',
                                'sat': 'Sat'
                            },
                            'short': {
                                'sun': 'Su',
                                'mon': 'Mo',
                                'tue': 'Tu',
                                'wed': 'We',
                                'thu': 'Th',
                                'fri': 'Fr',
                                'sat': 'Sa'
                            },
                            'wide': {
                                'sun': 'Sunday',
                                'mon': 'Monday',
                                'tue': 'Tuesday',
                                'wed': 'Wednesday',
                                'thu': 'Thursday',
                                'fri': 'Friday',
                                'sat': 'Saturday'
                            }
                        },
                        'months': {
                            'abbreviated': {
                                '1': 'Jan',
                                '2': 'Feb',
                                '3': 'Mar',
                                '4': 'Apr',
                                '5': 'May',
                                '6': 'Jun',
                                '7': 'Jul',
                                '8': 'Aug',
                                '9': 'Sep',
                                '10': 'Oct',
                                '11': 'Nov',
                                '12': 'Dec'
                            },
                            'wide': {
                                '1': 'January',
                                '2': 'February',
                                '3': 'March',
                                '4': 'April',
                                '5': 'May',
                                '6': 'June',
                                '7': 'July',
                                '8': 'August',
                                '9': 'September',
                                '10': 'October',
                                '11': 'November',
                                '12': 'December'
                            }
                        },
                        'eras': {
                            '1': 'AD'
                        }
                    }
                };
                e.monthIndex = {
                    3: 'abbreviated',
                    4: 'wide',
                    5: 'narrow',
                    1: 'abbreviated'
                };
                e.month = 'months';
                e.days = 'days';
                e.patternMatcher = {
                    C: 'currency',
                    P: 'percent',
                    N: 'decimal',
                    A: 'currency',
                    E: 'scientific'
                };
                function l(t, i, n, r, s) {
                    var o;
                    var a = n || 'date';
                    if (s) {
                        o = u({
                            skeleton: t
                        }, s).format || u({
                            skeleton: 'd'
                        }, 'en-US').format;
                    } else {
                        if (e.basicPatterns.indexOf(t) !== -1) {
                            o = h(a + 'Formats.' + t, i);
                            if (a === 'dateTime') {
                                var l = h('dateFormats.' + t, i);
                                var c = h('timeFormats.' + t, i);
                                o = o.replace('{1}', l).replace('{0}', c);
                            }
                        } else {
                            o = h('dateTimeFormats.availableFormats.' + t, i);
                        }
                        if (b(o) && t === 'yMd') {
                            o = 'M/d/y';
                        }
                    }
                    return o;
                }
                e.getResultantPattern = l;
                function c(t, i, n, r) {
                    var s = {};
                    var o = n || 'gregorian';
                    s.parserObject = H.getMainObject(t, i) || (N() ? e.blazorDefaultObject : e.defaultObject);
                    if (r) {
                        s.numericObject = h('numbers', s.parserObject);
                    } else {
                        var a = N() ? 'dates' : ('dates.calendars.' + o);
                        s.dateObject = h(a, s.parserObject);
                    }
                    return s;
                }
                e.getDependables = c;
                function d(e, t, i, n) {
                    return h(e + 'Formats-numberSystem-' + t + (n ? '.accounting' : '.standard'), i) || (n ? h(e + 'Formats-numberSystem-' + t + '.standard', i) : '');
                }
                e.getSymbolPattern = d;
                function p(t) {
                    var i = t.match(e.dateConverterMapper);
                    if (i && N()) {
                        var n = i[0].length === 3 ? 'EEE' : 'EEEE';
                        return t.replace(e.dateConverterMapper, n);
                    }
                    return t;
                }
                e.ConvertDateToWeekFormat = p;
                function u(e, t) {
                    var i = e.format || e.skeleton;
                    var n = h((t || 'en-US') + '.' + i, eN);
                    if (!n) {
                        n = h('en-US.' + i, eN);
                    }
                    if (n) {
                        n = p(n);
                        e.format = n.replace(/tt/, 'a');
                    }
                    return e;
                }
                e.compareBlazorDateFormats = u;
                function f(t) {
                    var i = t.match(e.formatRegex);
                    var n = {};
                    var r = i[1].toUpperCase();
                    n.isAccount = (r === 'A');
                    n.type = e.patternMatcher[r];
                    if (t.length > 1) {
                        n.fractionDigits = parseInt(i[2], 10);
                    }
                    return n;
                }
                e.getProperNumericSkeleton = f;
                function m(i, n, r, s) {
                    var o = s ? {} : {
                        nlead: '',
                        nend: ''
                    };
                    var a = i.match(e.customRegex);
                    if (a) {
                        if (!s) {
                            o.nlead = y(a[1], r);
                            o.nend = y(a[10], r);
                            o.groupPattern = a[4];
                        }
                        var l = a[7];
                        if (l && n) {
                            var h = l.match(t);
                            if (!g(h)) {
                                o.minimumFraction = h.length;
                            } else {
                                o.minimumFraction = 0;
                            }
                            o.maximumFraction = l.length - 1;
                        }
                    }
                    return o;
                }
                e.getFormatData = m;
                function y(t, i) {
                    if (t) {
                        return t.replace(e.defaultCurrency, i);
                    }
                    return '';
                }
                e.changeCurrencySymbol = y;
                function C(e, t, i) {
                    var n = i ? ('.' + i) : '.symbol';
                    var r = h('currencies.' + t + n, e) || h('currencies.' + t + '.symbol-alt-narrow', e) || '$';
                    return r;
                }
                e.getCurrencySymbol = C;
                function E(e, t, i) {
                    var n = {};
                    var r = e.split(';');
                    var s = [
                        'pData',
                        'nData',
                        'zeroData'
                    ];
                    for(var o = 0; o < r.length; o++){
                        n[s[o]] = S(r[o], t, i);
                    }
                    if (g(n.nData)) {
                        n.nData = v({}, n.pData);
                        n.nData.nlead = g(t) ? '-' + n.nData.nlead : t.minusSymbol + n.nData.nlead;
                    }
                    return n;
                }
                e.customFormat = E;
                function S(t, n, r) {
                    var s = {
                        type: 'decimal',
                        minimumFractionDigits: 0,
                        maximumFractionDigits: 0
                    };
                    var o = t.match(e.customRegex);
                    if (g(o) || (o[5] === '' && t !== 'N/A')) {
                        s.type = undefined;
                        return s;
                    }
                    s.nlead = o[1];
                    s.nend = o[10];
                    var a = o[6];
                    var l = a.match(/\ $/g) ? true : false;
                    var h = a.replace(/\ $/g, '').indexOf(' ') !== -1;
                    s.useGrouping = a.indexOf(',') !== -1 || h;
                    a = a.replace(/,/g, '');
                    var c = o[7];
                    if (a.indexOf('0') !== -1) {
                        s.minimumIntegerDigits = a.length - a.indexOf('0');
                    }
                    if (!g(c)) {
                        s.minimumFractionDigits = c.lastIndexOf('0');
                        s.maximumFractionDigits = c.lastIndexOf('#');
                        if (s.minimumFractionDigits === -1) {
                            s.minimumFractionDigits = 0;
                        }
                        if (s.maximumFractionDigits === -1 || s.maximumFractionDigits < s.minimumFractionDigits) {
                            s.maximumFractionDigits = s.minimumFractionDigits;
                        }
                    }
                    if (!g(n)) {
                        v(s, w([
                            s.nlead,
                            s.nend
                        ], '$', n.currencySymbol));
                        if (!s.isCurrency) {
                            v(s, w([
                                s.nlead,
                                s.nend
                            ], '%', n.percentSymbol));
                        }
                    } else {
                        v(s, w([
                            s.nlead,
                            s.nend
                        ], '%', '%'));
                    }
                    if (!g(r)) {
                        var p = d(s.type, n.numberMapper.numberSystem, r, false);
                        if (s.useGrouping) {
                            s.groupSeparator = h ? ' ' : n.numberMapper.numberSymbols[i[2]];
                            s.groupData = en.getGroupingDetails(p.split(';')[0]);
                        }
                        s.nlead = s.nlead.replace(/'/g, '');
                        s.nend = l ? ' ' + s.nend.replace(/'/g, '') : s.nend.replace(/'/g, '');
                    }
                    return s;
                }
                e.customNumberFormat = S;
                function w(e, t, i) {
                    var n = {
                        nlead: e[0],
                        nend: e[1]
                    };
                    for(var r = 0; r < 2; r++){
                        var s = e[r];
                        var o = s.indexOf(t);
                        if ((o !== -1) && ((o < s.indexOf('\'')) || (o > s.lastIndexOf('\'')))) {
                            n[a[r]] = s.substr(0, o) + i + s.substr(o + 1);
                            n[a[t]] = true;
                            n.type = n.isCurrency ? 'currency' : 'percent';
                            break;
                        }
                    }
                    return n;
                }
                e.isCurrencyPercent = w;
                function T(e) {
                    var t = (h('dateFormats.short', e) || '').match(/[d‏M‏]([^d‏M])[d‏M‏]/i);
                    return t ? t[1] : '/';
                }
                e.getDateSeparator = T;
                function k(e, t, i, s) {
                    var o = c(i, e, t.calendar);
                    if (N()) {
                        t = u(t, e);
                    }
                    var a = t.format || l(t.skeleton, o.dateObject, t.type);
                    if (s) {
                        a = a.replace(n, function(e) {
                            return r[e];
                        });
                        if (a.indexOf('z') !== -1) {
                            var d = a.match(/z/g).length;
                            var p = void 0;
                            var f = {
                                'timeZone': {}
                            };
                            f.numMapper = H.getNumberMapper(o.parserObject, H.getNumberingSystem(i));
                            f.timeZone = h('dates.timeZoneNames', o.parserObject);
                            var m = new Date();
                            var v = m.getTimezoneOffset();
                            var g = (d < 4) ? '+H;-H' : f.timeZone.hourFormat;
                            g = g.replace(/:/g, f.numMapper.timeSeparator);
                            if (v === 0) {
                                p = f.timeZone.gmtZeroFormat;
                            } else {
                                p = X.getTimeZoneValue(v, g);
                                p = f.timeZone.gmtFormat.replace(/\{0\}/, p);
                            }
                            a = a.replace(/[z]+/, '"' + p + '"');
                        }
                        a = a.replace(/ $/, '');
                    }
                    return a;
                }
                e.getActualDateTimeFormat = k;
                function x(e, t) {
                    if (e.indexOf(',') !== -1) {
                        var i = e.split(',');
                        e = (i[0] + h('numberMapper.numberSymbols.group', t) + i[1].replace('.', h('numberMapper.numberSymbols.decimal', t)));
                    } else {
                        e = e.replace('.', h('numberMapper.numberSymbols.decimal', t));
                    }
                    return e;
                }
                function L(t, i, n, r) {
                    var s = c(n, t, '', true);
                    var o = {
                        custom: true
                    };
                    var a = s.numericObject;
                    var l;
                    var p = {};
                    var u = (i.format || '').match(e.currencyFormatRegex);
                    var g = e.formatRegex.test(i.format) ? f(i.format || 'N') : {};
                    var b = {};
                    if (u) {
                        b.numberMapper = N() ? v({}, s.numericObject) : H.getNumberMapper(s.parserObject, H.getNumberingSystem(n), true);
                        var y = N() ? h('currencySymbol', s.numericObject) : C(s.numericObject, i.currency || eb, i.altSymbol);
                        var E = d('currency', b.numberMapper.numberSystem, s.numericObject, (/a/i).test(i.format));
                        E = E.replace(/\u00A4/g, y);
                        var S = E.split(';');
                        p.hasNegativePattern = N() ? true : (S.length > 1);
                        p.nData = N() ? h(g.type + 'nData', a) : m(S[1] || '-' + S[0], true, y);
                        p.pData = N() ? h(g.type + 'pData', a) : m(S[0], false, y);
                        if (!u[2] && !i.minimumFractionDigits && !i.maximumFractionDigits) {
                            l = m(E.split(';')[0], true, '', true).minimumFraction;
                        }
                    }
                    var w;
                    if ((e.formatRegex.test(i.format)) || !(i.format)) {
                        v(o, f(i.format || 'N'));
                        o.custom = false;
                        w = '###0';
                        if (o.fractionDigits || i.minimumFractionDigits || i.maximumFractionDigits || l) {
                            var T = 0;
                            if (o.fractionDigits) {
                                i.minimumFractionDigits = i.maximumFractionDigits = o.fractionDigits;
                            }
                            w = D(w, l || o.fractionDigits || i.minimumFractionDigits || T, i.maximumFractionDigits || T);
                        }
                        if (i.minimumIntegerDigits) {
                            w = O(w, i.minimumIntegerDigits);
                        }
                        if (i.useGrouping) {
                            w = A(w);
                        }
                        if (o.type === 'currency' || (o.type && N())) {
                            if (N() && o.type !== 'currency') {
                                p.pData = h(o.type + 'pData', a);
                                p.nData = h(o.type + 'nData', a);
                            }
                            var k = w;
                            w = p.pData.nlead + k + p.pData.nend;
                            if (p.hasNegativePattern || N()) {
                                w += ';' + p.nData.nlead + k + p.nData.nend;
                            }
                        }
                        if (o.type === 'percent' && !N()) {
                            w += ' %';
                        }
                    } else {
                        w = i.format.replace(/'/g, '"');
                    }
                    if (Object.keys(b).length > 0) {
                        w = !r ? x(w, b) : w;
                    }
                    return w;
                }
                e.getActualNumberFormat = L;
                function D(e, t, i) {
                    e += '.';
                    for(var n = 0; n < t; n++){
                        e += '0';
                    }
                    if (t < i) {
                        var r = i - t;
                        for(var s = 0; s < r; s++){
                            e += '#';
                        }
                    }
                    return e;
                }
                e.fractionDigitsPattern = D;
                function O(e, t) {
                    var i = e.split('.');
                    var n = '';
                    for(var r = 0; r < t; r++){
                        n += '0';
                    }
                    return i[1] ? (n + '.' + i[1]) : n;
                }
                e.minimumIntegerPattern = O;
                function A(e) {
                    var t = e.split('.');
                    var i = t[0];
                    var n = 3 - i.length % 3;
                    var r = (n && n === 1) ? '#' : (n === 2 ? '##' : '');
                    i = r + i;
                    e = '';
                    for(var s = i.length - 1; s > 0; s = s - 3){
                        e = ',' + i[s - 2] + i[s - 1] + i[s] + e;
                    }
                    e = e.slice(1);
                    return t[1] ? (e + '.' + t[1]) : e;
                }
                e.groupingPattern = A;
                function P(e, t) {
                    var i = s;
                    var n = h('supplemental.weekData.firstDay', t);
                    var r = e;
                    if ((/en-/).test(r)) {
                        r = r.slice(3);
                    }
                    r = r.slice(0, 2).toUpperCase() + r.substr(2);
                    if (n) {
                        i = n[r] || n[r.slice(0, 2)] || s;
                    }
                    return o[i];
                }
                e.getWeekData = P;
                function M(e, t, i) {
                    var n = j(i);
                    if (t !== n) {
                        for(var r = 0, s = e; r < s.length; r++){
                            var o = s[r];
                            o.nend = o.nend.replace(t, n);
                            o.nlead = o.nlead.replace(t, n);
                        }
                    }
                }
                e.replaceBlazorCurrency = M;
                function R(e) {
                    var t = new Date(e.getFullYear(), 0, 1);
                    var i = t.getDay();
                    var n;
                    i = (i >= 0 ? i : i + 7);
                    var r = Math.floor((e.getTime() - t.getTime() - (e.getTimezoneOffset() - t.getTimezoneOffset()) * 60000) / 86400000) + 1;
                    if (i < 4) {
                        n = Math.floor((r + i - 1) / 7) + 1;
                        if (n > 52) {
                            var s = new Date(e.getFullYear() + 1, 0, 1);
                            var o = s.getDay();
                            o = o >= 0 ? o : o + 7;
                            n = o < 4 ? 1 : 53;
                        }
                    } else {
                        n = Math.floor((r + i - 1) / 7);
                    }
                    return n;
                }
                e.getWeekOfYear = R;
            })(eD || (eD = {}));
            ;
            var eO = /^(.*?):[ \t]*([^\r\n]*)$/gm;
            var eA = 'GET';
            var eP = (function() {
                function e(e, t, i, n) {
                    this.mode = true;
                    this.emitError = true;
                    this.options = {};
                    if (typeof e === 'string') {
                        this.url = e;
                        this.type = t ? t.toUpperCase() : eA;
                        this.mode = !g(i) ? i : true;
                    } else if (typeof e === 'object') {
                        this.options = e;
                        m(this, this.options);
                    }
                    this.type = this.type ? this.type.toUpperCase() : eA;
                    this.contentType = (this.contentType !== undefined) ? this.contentType : n;
                }
                e.prototype.send = function(e) {
                    var t = this;
                    this.data = g(e) ? this.data : e;
                    var i = {
                        cancel: false,
                        httpRequest: null
                    };
                    var n = new Promise(function(e, n) {
                        t.httpRequest = new XMLHttpRequest();
                        t.httpRequest.onreadystatechange = function() {
                            t.stateChange(e, n);
                        };
                        if (!g(t.onLoad)) {
                            t.httpRequest.onload = t.onLoad;
                        }
                        if (!g(t.onProgress)) {
                            t.httpRequest.onprogress = t.onProgress;
                        }
                        if (!g(t.onAbort)) {
                            t.httpRequest.onabort = t.onAbort;
                        }
                        if (!g(t.onError)) {
                            t.httpRequest.onerror = t.onError;
                        }
                        if (!g(t.onUploadProgress)) {
                            t.httpRequest.upload.onprogress = t.onUploadProgress;
                        }
                        t.httpRequest.open(t.type, t.url, t.mode);
                        if (!g(t.data) && t.contentType !== null) {
                            t.httpRequest.setRequestHeader('Content-Type', t.contentType || 'application/json; charset=utf-8');
                        }
                        if (t.beforeSend) {
                            i.httpRequest = t.httpRequest;
                            t.beforeSend(i);
                        }
                        if (!i.cancel) {
                            t.httpRequest.send(!g(t.data) ? t.data : null);
                        }
                    });
                    return n;
                };
                e.prototype.successHandler = function(e) {
                    if (this.onSuccess) {
                        this.onSuccess(e, this);
                    }
                    return e;
                };
                e.prototype.failureHandler = function(e) {
                    if (this.onFailure) {
                        this.onFailure(this.httpRequest);
                    }
                    return e;
                };
                e.prototype.stateChange = function(e, t) {
                    var i = this.httpRequest.responseText;
                    if (this.dataType && this.dataType.toLowerCase() === 'json') {
                        if (i === '') {
                            i = undefined;
                        } else {
                            try {
                                i = JSON.parse(i);
                            } catch (n) {}
                        }
                    }
                    if (this.httpRequest.readyState === 4) {
                        if ((this.httpRequest.status >= 200 && this.httpRequest.status <= 299) || this.httpRequest.status === 304) {
                            e(this.successHandler(i));
                        } else {
                            if (this.emitError) {
                                t(new Error(this.failureHandler(this.httpRequest.statusText)));
                            } else {
                                e();
                            }
                        }
                    }
                };
                e.prototype.getResponseHeader = function(e) {
                    var t;
                    var i;
                    t = {};
                    var n = eO.exec(this.httpRequest.getAllResponseHeaders());
                    while(n){
                        t[n[1].toLowerCase()] = n[2];
                        n = eO.exec(this.httpRequest.getAllResponseHeaders());
                    }
                    i = t[e.toLowerCase()];
                    return g(i) ? null : i;
                };
                return e;
            }());
            ;
            var eM = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini|mobile/i;
            var eR = /msie|trident/i;
            var eB = /Trident\/7\./;
            var eI = /(ipad|iphone|ipod touch)/i;
            var eH = /(ipad|iphone|ipod touch);.*os 7_\d|(ipad|iphone|ipod touch);.*os 8_\d/i;
            var eF = /android/i;
            var ej = /trident|windows phone|edge/i;
            var ez = /(version)[ /]([\w.]+)/i;
            var eq = {
                OPERA: /(opera|opr)(?:.*version|)[ /]([\w.]+)/i,
                EDGE: /(edge)(?:.*version|)[ /]([\w.]+)/i,
                CHROME: /(chrome|crios)[ /]([\w.]+)/i,
                PANTHOMEJS: /(phantomjs)[ /]([\w.]+)/i,
                SAFARI: /(safari)[ /]([\w.]+)/i,
                WEBKIT: /(webkit)[ /]([\w.]+)/i,
                MSIE: /(msie|trident) ([\w.]+)/i,
                MOZILLA: /(mozilla)(?:.*? rv:([\w.]+)|)/i
            };
            if (typeof window !== 'undefined') {
                window.browserDetails = window.browserDetails || {};
            }
            var eV = (function() {
                function e() {}
                e.extractBrowserDetail = function() {
                    var t = {
                        culture: {}
                    };
                    var i = Object.keys(eq);
                    var n = [];
                    for(var r = 0, s = i; r < s.length; r++){
                        var o = s[r];
                        n = e.userAgent.match(eq[o]);
                        if (n) {
                            t.name = (n[1].toLowerCase() === 'opr' ? 'opera' : n[1].toLowerCase());
                            t.name = (n[1].toLowerCase() === 'crios' ? 'chrome' : t.name);
                            t.version = n[2];
                            t.culture.name = t.culture.language = navigator.language;
                            if (!!e.userAgent.match(eB)) {
                                t.name = 'msie';
                                break;
                            }
                            var a = e.userAgent.match(ez);
                            if (t.name === 'safari' && a) {
                                t.version = a[2];
                            }
                            break;
                        }
                    }
                    return t;
                };
                e.getEvent = function(t) {
                    var i = {
                        start: {
                            isPointer: 'pointerdown',
                            isTouch: 'touchstart',
                            isDevice: 'mousedown'
                        },
                        move: {
                            isPointer: 'pointermove',
                            isTouch: 'touchmove',
                            isDevice: 'mousemove'
                        },
                        end: {
                            isPointer: 'pointerup',
                            isTouch: 'touchend',
                            isDevice: 'mouseup'
                        },
                        cancel: {
                            isPointer: 'pointercancel',
                            isTouch: 'touchcancel',
                            isDevice: 'mouseleave'
                        }
                    };
                    return (e.isPointer ? i[t].isPointer : (e.isTouch ? i[t].isTouch + (!e.isDevice ? ' ' + i[t].isDevice : '') : i[t].isDevice));
                };
                e.getTouchStartEvent = function() {
                    return e.getEvent('start');
                };
                e.getTouchEndEvent = function() {
                    return e.getEvent('end');
                };
                e.getTouchMoveEvent = function() {
                    return e.getEvent('move');
                };
                e.getTouchCancelEvent = function() {
                    return e.getEvent('cancel');
                };
                e.getValue = function(t, i) {
                    var n = window.browserDetails;
                    if (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1 && e.isTouch === true) {
                        n['isIos'] = true;
                        n['isDevice'] = true;
                        n['isTouch'] = true;
                        n['isPointer'] = true;
                    }
                    if ('undefined' === typeof n[t]) {
                        return n[t] = i.test(e.userAgent);
                    }
                    return n[t];
                };
                Object.defineProperty(e, "userAgent", {
                    get: function() {
                        return e.uA;
                    },
                    set: function(t) {
                        e.uA = t;
                        window.browserDetails = {};
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(e, "info", {
                    get: function() {
                        if (b(window.browserDetails.info)) {
                            return window.browserDetails.info = e.extractBrowserDetail();
                        }
                        return window.browserDetails.info;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(e, "isIE", {
                    get: function() {
                        return e.getValue('isIE', eR);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(e, "isTouch", {
                    get: function() {
                        if (b(window.browserDetails.isTouch)) {
                            return (window.browserDetails.isTouch = ('ontouchstart' in window.navigator) || (window && window.navigator && (window.navigator.maxTouchPoints > 0)) || ('ontouchstart' in window));
                        }
                        return window.browserDetails.isTouch;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(e, "isPointer", {
                    get: function() {
                        if (b(window.browserDetails.isPointer)) {
                            return window.browserDetails.isPointer = ('pointerEnabled' in window.navigator);
                        }
                        return window.browserDetails.isPointer;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(e, "isMSPointer", {
                    get: function() {
                        if (b(window.browserDetails.isMSPointer)) {
                            return window.browserDetails.isMSPointer = ('msPointerEnabled' in window.navigator);
                        }
                        return window.browserDetails.isMSPointer;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(e, "isDevice", {
                    get: function() {
                        return e.getValue('isDevice', eM);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(e, "isIos", {
                    get: function() {
                        return e.getValue('isIos', eI);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(e, "isIos7", {
                    get: function() {
                        return e.getValue('isIos7', eH);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(e, "isAndroid", {
                    get: function() {
                        return e.getValue('isAndroid', eF);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(e, "isWebView", {
                    get: function() {
                        if (b(window.browserDetails.isWebView)) {
                            window.browserDetails.isWebView = !(b(window.cordova) && b(window.PhoneGap) && b(window.phonegap) && window.forge !== 'object');
                            return window.browserDetails.isWebView;
                        }
                        return window.browserDetails.isWebView;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(e, "isWindows", {
                    get: function() {
                        return e.getValue('isWindows', ej);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(e, "touchStartEvent", {
                    get: function() {
                        if (b(window.browserDetails.touchStartEvent)) {
                            return window.browserDetails.touchStartEvent = e.getTouchStartEvent();
                        }
                        return window.browserDetails.touchStartEvent;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(e, "touchMoveEvent", {
                    get: function() {
                        if (b(window.browserDetails.touchMoveEvent)) {
                            return window.browserDetails.touchMoveEvent = e.getTouchMoveEvent();
                        }
                        return window.browserDetails.touchMoveEvent;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(e, "touchEndEvent", {
                    get: function() {
                        if (b(window.browserDetails.touchEndEvent)) {
                            return window.browserDetails.touchEndEvent = e.getTouchEndEvent();
                        }
                        return window.browserDetails.touchEndEvent;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(e, "touchCancelEvent", {
                    get: function() {
                        if (b(window.browserDetails.touchCancelEvent)) {
                            return window.browserDetails.touchCancelEvent = e.getTouchCancelEvent();
                        }
                        return window.browserDetails.touchCancelEvent;
                    },
                    enumerable: true,
                    configurable: true
                });
                e.uA = typeof navigator !== 'undefined' ? navigator.userAgent : '';
                return e;
            }());
            ;
            var e_ = (function() {
                function e() {}
                e.addOrGetEventData = function(e) {
                    if ('__eventList' in e) {
                        return e.__eventList.events;
                    } else {
                        e.__eventList = {};
                        return e.__eventList.events = [];
                    }
                };
                e.add = function(t, i, n, r, s) {
                    var o = e.addOrGetEventData(t);
                    var a;
                    if (s) {
                        a = C(n, s);
                    } else {
                        a = n;
                    }
                    if (r) {
                        a = a.bind(r);
                    }
                    var l = i.split(' ');
                    for(var h = 0; h < l.length; h++){
                        o.push({
                            name: l[h],
                            listener: n,
                            debounce: a
                        });
                        if (eV.isIE) {
                            t.addEventListener(l[h], a);
                        } else {
                            t.addEventListener(l[h], a, {
                                passive: false
                            });
                        }
                    }
                    return a;
                };
                e.remove = function(t, i, n) {
                    var r = e.addOrGetEventData(t);
                    var s = i.split(' ');
                    var o = function(e) {
                        var i = -1;
                        var o;
                        if (r && r.length !== 0) {
                            r.some(function(t, r) {
                                return t.name === s[e] && t.listener === n ? (i = r, o = t.debounce, true) : false;
                            });
                        }
                        if (i !== -1) {
                            r.splice(i, 1);
                        }
                        if (o) {
                            t.removeEventListener(s[e], o);
                        }
                    };
                    for(var a = 0; a < s.length; a++){
                        o(a);
                    }
                };
                e.clearEvents = function(t) {
                    var i;
                    var n;
                    i = e.addOrGetEventData(t);
                    n = v([], n, i);
                    for(var r = 0; r < n.length; r++){
                        t.removeEventListener(n[r].name, n[r].debounce);
                        i.shift();
                    }
                };
                e.trigger = function(t, i, n) {
                    var r = e.addOrGetEventData(t);
                    for(var s = 0, o = r; s < o.length; s++){
                        var a = o[s];
                        if (a.name === i) {
                            a.debounce.call(this, n);
                        }
                    }
                };
                return e;
            }());
            ;
            var eU = /^svg|^path|^g/;
            function eW(e, t) {
                var i = (eU.test(e) ? document.createElementNS('http://www.w3.org/2000/svg', e) : document.createElement(e));
                if (typeof (t) === 'undefined') {
                    return i;
                }
                i.innerHTML = (t.innerHTML ? t.innerHTML : '');
                if (t.className !== undefined) {
                    i.className = t.className;
                }
                if (t.id !== undefined) {
                    i.id = t.id;
                }
                if (t.styles !== undefined) {
                    i.setAttribute('style', t.styles);
                }
                if (t.attrs !== undefined) {
                    e1(i, t.attrs);
                }
                return i;
            }
            function eZ(e, t) {
                var i = eX(t);
                for(var n = 0, r = e; n < r.length; n++){
                    var s = r[n];
                    for(var o = 0, a = i; o < a.length; o++){
                        var l = a[o];
                        if (u(s)) {
                            var d = h('attributes.className', s);
                            if (g(d)) {
                                c('attributes.className', l, s);
                            } else if (!new RegExp('\\b' + l + '\\b', 'i').test(d)) {
                                c('attributes.className', d + ' ' + l, s);
                            }
                        } else {
                            if (!s.classList.contains(l)) {
                                s.classList.add(l);
                            }
                        }
                    }
                }
                return e;
            }
            function eY(e, t) {
                var i = eX(t);
                for(var n = 0, r = e; n < r.length; n++){
                    var s = r[n];
                    var o = u(s);
                    var a = o ? h('attributes.className', s) : s.className !== '';
                    if (a) {
                        for(var l = 0, d = i; l < d.length; l++){
                            var p = d[l];
                            if (o) {
                                var f = h('attributes.className', s);
                                var m = f.split(' ');
                                var v = m.indexOf(p);
                                if (v !== -1) {
                                    m.splice(v, 1);
                                }
                                c('attributes.className', m.join(' '), s);
                            } else {
                                s.classList.remove(p);
                            }
                        }
                    }
                }
                return e;
            }
            function eX(e) {
                var t = [];
                if (typeof e === 'string') {
                    t.push(e);
                } else {
                    t = e;
                }
                return t;
            }
            function eG(e) {
                var t = e;
                return (t.style.visibility === '' && t.offsetWidth > 0);
            }
            function eK(e, t, i) {
                var n = document.createDocumentFragment();
                for(var r = 0, s = e; r < s.length; r++){
                    var o = s[r];
                    n.appendChild(o);
                }
                t.insertBefore(n, t.firstElementChild);
                if (i) {
                    e$(t);
                }
                return e;
            }
            function eJ(e, t, i) {
                var n = document.createDocumentFragment();
                for(var r = 0, s = e; r < s.length; r++){
                    var o = s[r];
                    n.appendChild(o);
                }
                t.appendChild(n);
                if (i) {
                    e$(t);
                }
                return e;
            }
            function e$(e) {
                var t = e.querySelectorAll('script');
                t.forEach(function(e) {
                    var t = document.createElement('script');
                    t.text = e.innerHTML;
                    document.head.appendChild(t);
                    eQ(t);
                });
            }
            function eQ(e) {
                var t = e.parentNode;
                if (t) {
                    return t.removeChild(e);
                }
            }
            function e0(e) {
                var t = e.parentNode;
                e_.clearEvents(e);
                t.removeChild(e);
            }
            function e1(e, t) {
                var i = Object.keys(t);
                var n = e;
                for(var r = 0, s = i; r < s.length; r++){
                    var o = s[r];
                    if (u(n)) {
                        var a = o;
                        if (o === 'tabindex') {
                            a = 'tabIndex';
                        }
                        n.attributes[a] = t[o];
                    } else {
                        n.setAttribute(o, t[o]);
                    }
                }
                return n;
            }
            function e3(e, t, i) {
                if (t === void 0) {
                    t = document;
                }
                e = e4(e);
                return t.querySelector(e);
            }
            function e2(e, t, i) {
                if (t === void 0) {
                    t = document;
                }
                e = e4(e);
                var n = t.querySelectorAll(e);
                return n;
            }
            function e4(e) {
                var t = /(!|"|\$|%|&|'|\(|\)|\*|\/|:|;|<|=|\?|@|\]|\^|`|{|}|\||\+|~)/g;
                if (e.match(/#[0-9]/g) || e.match(t)) {
                    var i = e.split(',');
                    for(var n = 0; n < i.length; n++){
                        var r = i[n].split(' ');
                        for(var s = 0; s < r.length; s++){
                            if (r[s].indexOf('#') > -1) {
                                if (!r[s].match(/\[.*\]/)) {
                                    var o = r[s].split('#');
                                    if (o[1].match(/^\d/) || o[1].match(t)) {
                                        var a = r[s].split('.');
                                        a[0] = a[0].replace(/#/, '[id=\'') + '\']';
                                        r[s] = a.join('.');
                                    }
                                }
                            }
                        }
                        i[n] = r.join(' ');
                    }
                    return i.join(',');
                }
                return e;
            }
            function e5(e, t) {
                var i = e;
                if (typeof i.closest === 'function') {
                    return i.closest(t);
                }
                while(i && i.nodeType === 1){
                    if (te(i, t)) {
                        return i;
                    }
                    i = i.parentNode;
                }
                return null;
            }
            function e7(e) {
                var t = [];
                var i = Array.prototype.slice.call(e.parentNode.childNodes);
                for(var n = 0, r = i; n < r.length; n++){
                    var s = r[n];
                    if (s.nodeType === Node.ELEMENT_NODE && e !== s) {
                        t.push(s);
                    }
                }
                return t;
            }
            function e9(e, t, i) {
                var n;
                var r = isObject(e);
                if (r) {
                    n = getValue('attributes.' + t, e);
                } else {
                    n = e.getAttribute(t);
                }
                if (isNullOrUndefined(n) && i) {
                    if (!r) {
                        e.setAttribute(t, i.toString());
                    } else {
                        e.attributes[t] = i;
                    }
                    n = i;
                }
                return n;
            }
            function e6(e, t) {
                if (t !== undefined) {
                    Object.keys(t).forEach(function(i) {
                        e.style[i] = t[i];
                    });
                }
            }
            function e8(e, t, i) {
                eZ([
                    e
                ], t);
                eY([
                    e
                ], i);
            }
            function te(e, t) {
                var i = e.matches || e.msMatchesSelector || e.webkitMatchesSelector;
                if (i) {
                    return i.call(e, t);
                } else {
                    return [].indexOf.call(document.querySelectorAll(t), e) !== -1;
                }
            }
            function tt(e, t) {
                e.innerHTML = t;
            }
            function ti(e, t) {
                if (isObject(e)) {
                    return new RegExp('\\b' + t + '\\b', 'i').test(e.attributes.className);
                } else {
                    return e.classList.contains(t);
                }
            }
            function tn(e, t) {
                if (isObject(e)) {
                    if (t) {
                        return extend({}, {}, e, true);
                    }
                } else {
                    return e.cloneNode(t);
                }
            }
            ;
            var tr = new RegExp(']');
            var ts = (function() {
                function e(e, t) {
                    this.isRendered = false;
                    this.isComplexArraySetter = false;
                    this.isServerRendered = false;
                    this.allowServerDataBinding = true;
                    this.isProtectedOnChange = true;
                    this.properties = {};
                    this.changedProperties = {};
                    this.oldProperties = {};
                    this.bulkChanges = {};
                    this.refreshing = false;
                    this.ignoreCollectionWatch = false;
                    this.finalUpdate = function() {};
                    this.childChangedProperties = {};
                    this.modelObserver = new eu(this);
                    if (!b(t)) {
                        if ('string' === typeof (t)) {
                            this.element = document.querySelector(t);
                        } else {
                            this.element = t;
                        }
                        if (!g(this.element)) {
                            this.isProtectedOnChange = false;
                            this.addInstance();
                        }
                    }
                    if (!b(e)) {
                        this.setProperties(e, true);
                    }
                    this.isDestroyed = false;
                }
                e.prototype.setProperties = function(e, t) {
                    var i = this.isProtectedOnChange;
                    this.isProtectedOnChange = !!t;
                    m(this, e);
                    if (t !== true) {
                        m(this.changedProperties, e);
                        this.dataBind();
                    } else if (N() && this.isRendered) {
                        this.serverDataBind(e);
                    }
                    this.finalUpdate();
                    this.changedProperties = {};
                    this.oldProperties = {};
                    this.isProtectedOnChange = i;
                };
                e.callChildDataBind = function(e, t) {
                    var i = Object.keys(e);
                    for(var n = 0, r = i; n < r.length; n++){
                        var s = r[n];
                        if (t[s] instanceof Array) {
                            for(var o = 0, a = t[s]; o < a.length; o++){
                                var l = a[o];
                                if (l.dataBind !== undefined) {
                                    l.dataBind();
                                }
                            }
                        } else {
                            t[s].dataBind();
                        }
                    }
                };
                e.prototype.clearChanges = function() {
                    this.finalUpdate();
                    this.changedProperties = {};
                    this.oldProperties = {};
                    this.childChangedProperties = {};
                };
                e.prototype.dataBind = function() {
                    e.callChildDataBind(this.childChangedProperties, this);
                    if (Object.getOwnPropertyNames(this.changedProperties).length) {
                        var t = this.isProtectedOnChange;
                        var i = this.changedProperties;
                        var n = this.oldProperties;
                        this.clearChanges();
                        this.isProtectedOnChange = true;
                        this.onPropertyChanged(i, n);
                        this.isProtectedOnChange = t;
                    }
                };
                e.prototype.serverDataBind = function(e) {
                    if (!N()) {
                        return;
                    }
                    e = e ? e : {};
                    v(this.bulkChanges, {}, e, true);
                    var t = 'sfBlazor';
                    if (this.allowServerDataBinding && window[t].updateModel) {
                        window[t].updateModel(this);
                        this.bulkChanges = {};
                    }
                };
                e.prototype.saveChanges = function(e, t, i) {
                    if (N()) {
                        var n = {};
                        n[e] = t;
                        this.serverDataBind(n);
                    }
                    if (this.isProtectedOnChange) {
                        return;
                    }
                    this.oldProperties[e] = i;
                    this.changedProperties[e] = t;
                    this.finalUpdate();
                    this.finalUpdate = l(this.dataBind.bind(this));
                };
                e.prototype.addEventListener = function(e, t) {
                    this.modelObserver.on(e, t);
                };
                e.prototype.removeEventListener = function(e, t) {
                    this.modelObserver.off(e, t);
                };
                e.prototype.trigger = function(e, t, i, n) {
                    var r = this;
                    if (this.isDestroyed !== true) {
                        var s = this.isProtectedOnChange;
                        this.isProtectedOnChange = false;
                        var o = this.modelObserver.notify(e, t, i, n);
                        if (tr.test(e)) {
                            var a = h(e, this);
                            if (a) {
                                var l = 'Blazor';
                                if (window[l]) {
                                    var c = a.call(this, t);
                                    if (c && typeof c.then === 'function') {
                                        if (!i) {
                                            o = c;
                                        } else {
                                            c.then(function(e) {
                                                if (i) {
                                                    e = typeof e === 'string' && r.modelObserver.isJson(e) ? JSON.parse(e) : e;
                                                    i.call(r, e);
                                                }
                                            }).catch(function(e) {
                                                if (n) {
                                                    e = typeof e === 'string' && r.modelObserver.isJson(e) ? JSON.parse(e) : e;
                                                    n.call(r, e);
                                                }
                                            });
                                        }
                                    } else if (i) {
                                        i.call(this, t);
                                    }
                                } else {
                                    a.call(this, t);
                                    if (i) {
                                        i.call(this, t);
                                    }
                                }
                            } else if (i) {
                                i.call(this, t);
                            }
                        }
                        this.isProtectedOnChange = s;
                        return o;
                    }
                };
                e.prototype.addInstance = function() {
                    var e = 'e-' + this.getModuleName().toLowerCase();
                    eZ([
                        this.element
                    ], [
                        'e-lib',
                        e
                    ]);
                    if (!g(this.element.ej2_instances)) {
                        this.element.ej2_instances.push(this);
                    } else {
                        c('ej2_instances', [
                            this
                        ], this.element);
                    }
                };
                e.prototype.destroy = function() {
                    var e = this;
                    this.element.ej2_instances = this.element.ej2_instances.filter(function(t) {
                        return t !== e;
                    });
                    eY([
                        this.element
                    ], [
                        'e-' + this.getModuleName()
                    ]);
                    if (this.element.ej2_instances.length === 0) {
                        eY([
                            this.element
                        ], [
                            'e-lib'
                        ]);
                    }
                    this.clearChanges();
                    this.modelObserver.destroy();
                    this.isDestroyed = true;
                };
                return e;
            }());
            function to(e, t) {
                var i;
                var n;
                var r = typeof e === 'string' ? document.getElementById(e) : e;
                for(n = 0; n < r.ej2_instances.length; n++){
                    i = r.ej2_instances[n];
                    if (typeof t === 'string') {
                        var s = i.getModuleName();
                        if (t === s) {
                            return i;
                        }
                    } else {
                        if (i instanceof t) {
                            return i;
                        }
                    }
                }
                return undefined;
            }
            function ta(e) {
                var t = [].slice.call(e.getElementsByClassName('e-control'));
                for(var i = 0; i < t.length; i++){
                    var n = t[i].classList[1].split('e-')[1];
                    var r = to(t[i], n);
                    if (!isUndefined(r)) {
                        r.destroy();
                    }
                }
            }
            ;
            function tl(e, t, i, n) {
                if (!e.properties.hasOwnProperty(t) || !(e.properties[t] instanceof n)) {
                    e.properties[t] = a(n, [
                        e,
                        t,
                        i
                    ]);
                }
                return e.properties[t];
            }
            function th(e, t, i, n, r, s) {
                var o = [];
                var l = i ? i.length : 0;
                for(var h = 0; h < l; h++){
                    var c = n;
                    if (s) {
                        c = n(i[h], e);
                    }
                    if (r) {
                        var d = a(c, [
                            e,
                            t,
                            {},
                            true
                        ]);
                        d.setProperties(i[h], true);
                        o.push(d);
                    } else {
                        o.push(a(c, [
                            e,
                            t,
                            i[h],
                            false
                        ]));
                    }
                }
                return o;
            }
            function tc(e, t) {
                return function() {
                    if (!this.properties.hasOwnProperty(t)) {
                        this.properties[t] = e;
                    }
                    return this.properties[t];
                };
            }
            function td(e, t) {
                return function(i) {
                    if (this.properties[t] !== i) {
                        var n = this.properties.hasOwnProperty(t) ? this.properties[t] : e;
                        this.saveChanges(t, i, n);
                        this.properties[t] = i;
                    }
                };
            }
            function tp(e, t, i) {
                return function() {
                    return tl(this, t, e, i);
                };
            }
            function tu(e, t, i) {
                return function(n) {
                    tl(this, t, e, i).setProperties(n);
                };
            }
            function tf(e, t, i) {
                return function() {
                    var n = i({});
                    if (this.properties.hasOwnProperty(t)) {
                        return this.properties[t];
                    } else {
                        return tl(this, t, e, n);
                    }
                };
            }
            function tm(e, t, i) {
                return function(n) {
                    var r = i(n, this);
                    tl(this, t, e, r).setProperties(n);
                };
            }
            function tv(e, t, i) {
                return function() {
                    var n = this;
                    if (!this.properties.hasOwnProperty(t)) {
                        var r = th(this, t, e, i, false);
                        this.properties[t] = r;
                    }
                    var s = ((this.controlParent !== undefined && this.controlParent.ignoreCollectionWatch) || this.ignoreCollectionWatch);
                    if (!this.properties[t].hasOwnProperty('push') && !s) {
                        [
                            'push',
                            'pop'
                        ].forEach(function(e) {
                            var r = {
                                value: tC(e, t, i, n.properties[t]).bind(n),
                                configurable: true
                            };
                            Object.defineProperty(n.properties[t], e, r);
                        });
                    }
                    if (!this.properties[t].hasOwnProperty('isComplexArray')) {
                        Object.defineProperty(this.properties[t], 'isComplexArray', {
                            value: true
                        });
                    }
                    return this.properties[t];
                };
            }
            function tg(e, t, i) {
                return function(n) {
                    this.isComplexArraySetter = true;
                    var r = th(this, t, e, i, false);
                    var s = th(this, t, n, i, true);
                    this.isComplexArraySetter = false;
                    this.saveChanges(t, s, r);
                    this.properties[t] = s;
                };
            }
            function tb(e, t, i) {
                return function(n) {
                    var r = this.properties.hasOwnProperty(t) ? this.properties[t] : e;
                    var s = th(this, t, n, i, true, true);
                    this.saveChanges(t, s, r);
                    this.properties[t] = s;
                };
            }
            function ty(e, t, i) {
                return function() {
                    var n = i({});
                    if (!this.properties.hasOwnProperty(t)) {
                        var r = th(this, t, e, n, false);
                        this.properties[t] = r;
                    }
                    return this.properties[t];
                };
            }
            function tC(e, t, i, n) {
                return function() {
                    var i = [];
                    for(var r = 0; r < arguments.length; r++){
                        i[r] = arguments[r];
                    }
                    var s = this.propName ? this.getParentKey() + '.' + t + '-' : t + '-';
                    switch(e){
                        case 'push':
                            for(var o = 0; o < i.length; o++){
                                Array.prototype[e].apply(n, [
                                    i[o]
                                ]);
                                var a = tE(s + (n.length - 1), i[o], !this.controlParent, e);
                                this.serverDataBind(a, i[o], false, e);
                            }
                            break;
                        case 'pop':
                            Array.prototype[e].apply(n);
                            var l = tE(s + n.length, null, !this.controlParent, e);
                            this.serverDataBind(l, {
                                ejsAction: 'pop'
                            }, false, e);
                            break;
                    }
                    return n;
                };
            }
            function tE(e, t, i, n) {
                var r = e;
                if (i) {
                    r = {};
                    r[e] = t;
                    if (t && typeof t === 'object') {
                        var s = 'ejsAction';
                        r[e][s] = n;
                    }
                }
                return r;
            }
            function tS(e) {
                return function(t, i) {
                    var n = {
                        set: td(e, i),
                        get: tc(e, i),
                        enumerable: true,
                        configurable: true
                    };
                    Object.defineProperty(t, i, n);
                    tD(t, i, 'prop', e);
                };
            }
            function tw(e, t) {
                return function(i, n) {
                    var r = {
                        set: tu(e, n, t),
                        get: tp(e, n, t),
                        enumerable: true,
                        configurable: true
                    };
                    Object.defineProperty(i, n, r);
                    tD(i, n, 'complexProp', e, t);
                };
            }
            function tT(e) {
                return function(t, i) {
                    var n = {
                        set: tm({}, i, e),
                        get: tf({}, i, e),
                        enumerable: true,
                        configurable: true
                    };
                    Object.defineProperty(t, i, n);
                    tD(t, i, 'complexProp', {}, e);
                };
            }
            function tk(e, t) {
                return function(i, n) {
                    var r = {
                        set: tg(e, n, t),
                        get: tv(e, n, t),
                        enumerable: true,
                        configurable: true
                    };
                    Object.defineProperty(i, n, r);
                    tD(i, n, 'colProp', e, t);
                };
            }
            function tx(e) {
                return function(t, i) {
                    var n = {
                        set: tb([], i, e),
                        get: ty([], i, e),
                        enumerable: true,
                        configurable: true
                    };
                    Object.defineProperty(t, i, n);
                    tD(t, i, 'colProp', {}, e);
                };
            }
            function tL() {
                return function(e, t) {
                    var i = {
                        set: function(e) {
                            var i = this.properties[t];
                            if (i !== e) {
                                var n = tP(this, t);
                                if (b(i) === false) {
                                    n.context.removeEventListener(n.prefix, i);
                                }
                                n.context.addEventListener(n.prefix, e);
                                this.properties[t] = e;
                            }
                        },
                        get: tc(undefined, t),
                        enumerable: true,
                        configurable: true
                    };
                    Object.defineProperty(e, t, i);
                    tD(e, t, 'event');
                };
            }
            function tN(e) {}
            function tD(e, t, i, n, r) {
                if (b(e.propList)) {
                    e.propList = {
                        props: [],
                        complexProps: [],
                        colProps: [],
                        events: [],
                        propNames: [],
                        complexPropNames: [],
                        colPropNames: [],
                        eventNames: []
                    };
                }
                e.propList[i + 's'].push({
                    propertyName: t,
                    defaultValue: n,
                    type: r
                });
                e.propList[i + 'Names'].push(t);
            }
            function tO(e) {
                if (isUndefined(e.prototype.builderObject)) {
                    e.prototype.builderObject = {
                        properties: {},
                        propCollections: [],
                        add: function() {
                            this.isPropertyArray = true;
                            this.propCollections.push(extend({}, this.properties, {}));
                        }
                    };
                    var t = /complex/;
                    for(var i = 0, n = Object.keys(e.prototype.propList); i < n.length; i++){
                        var r = n[i];
                        var s = function(i) {
                            if (t.test(r)) {
                                e.prototype.builderObject[i.propertyName] = function(e) {
                                    var t = {};
                                    merge(t, tO(i.type));
                                    e(t);
                                    var n;
                                    if (!t.isPropertyArray) {
                                        n = extend({}, t.properties, {});
                                    } else {
                                        n = t.propCollections;
                                    }
                                    this.properties[i.propertyName] = n;
                                    t.properties = {};
                                    t.propCollections = [];
                                    t.isPropertyArray = false;
                                    return this;
                                };
                            } else {
                                e.prototype.builderObject[i.propertyName] = function(e) {
                                    this.properties[i.propertyName] = e;
                                    return this;
                                };
                            }
                        };
                        for(var o = 0, a = e.prototype.propList[r]; o < a.length; o++){
                            var l = a[o];
                            s(l);
                        }
                    }
                }
                return e.prototype.builderObject;
            }
            function tA(e) {
                var t = function(e) {
                    this.element = e;
                    return this;
                };
                var i = function(i) {
                    if (!t.prototype.hasOwnProperty('create')) {
                        t.prototype = tO(e);
                        t.prototype.create = function() {
                            var t = extend({}, {}, this.properties);
                            this.properties = {};
                            return new e(t, this.element);
                        };
                    }
                    return new t(i);
                };
                return i;
            }
            function tP(e, t) {
                if (e.hasOwnProperty('parentObj') === false) {
                    return {
                        context: e,
                        prefix: t
                    };
                } else {
                    var i = h('propName', e);
                    if (i) {
                        t = i + '-' + t;
                    }
                    return tP(h('parentObj', e), t);
                }
            }
            ;
            var tM = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var tR = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var tB = (function(e) {
                tM(t, e);
                function t(t) {
                    var i = e.call(this, t, undefined) || this;
                    i.easing = {
                        ease: 'cubic-bezier(0.250, 0.100, 0.250, 1.000)',
                        linear: 'cubic-bezier(0.250, 0.250, 0.750, 0.750)',
                        easeIn: 'cubic-bezier(0.420, 0.000, 1.000, 1.000)',
                        easeOut: 'cubic-bezier(0.000, 0.000, 0.580, 1.000)',
                        easeInOut: 'cubic-bezier(0.420, 0.000, 0.580, 1.000)',
                        elasticInOut: 'cubic-bezier(0.5,-0.58,0.38,1.81)',
                        elasticIn: 'cubic-bezier(0.17,0.67,0.59,1.81)',
                        elasticOut: 'cubic-bezier(0.7,-0.75,0.99,1.01)'
                    };
                    return i;
                }
                i = t;
                t.prototype.animate = function(e, t) {
                    t = !t ? {} : t;
                    var n = this.getModel(t);
                    if (typeof e === 'string') {
                        var r = Array.prototype.slice.call(e2(e, document));
                        for(var s = 0, o = r; s < o.length; s++){
                            var a = o[s];
                            n.element = a;
                            i.delayAnimation(n);
                        }
                    } else {
                        n.element = e;
                        i.delayAnimation(n);
                    }
                };
                t.stop = function(e, t) {
                    e.style.animation = '';
                    e.removeAttribute('e-animate');
                    var i = e.getAttribute('e-animation-id');
                    if (i) {
                        var n = parseInt(i, 10);
                        cancelAnimationFrame(n);
                        e.removeAttribute('e-animation-id');
                    }
                    if (t && t.end) {
                        t.end.call(this, t);
                    }
                };
                t.delayAnimation = function(e) {
                    if (tU === 'Disable') {
                        if (e.begin) {
                            e.begin.call(this, e);
                        }
                        if (e.end) {
                            e.end.call(this, e);
                        }
                    } else {
                        if (e.delay) {
                            setTimeout(function() {
                                i.applyAnimation(e);
                            }, e.delay);
                        } else {
                            i.applyAnimation(e);
                        }
                    }
                };
                t.applyAnimation = function(e) {
                    var t = this;
                    e.timeStamp = 0;
                    var i = 0;
                    var n = 0;
                    var r = 0;
                    var s = e.duration;
                    e.element.setAttribute('e-animate', 'true');
                    var o = function(a) {
                        try {
                            if (a) {
                                r = r === 0 ? a : r;
                                e.timeStamp = (a + e.timeStamp) - r;
                                r = a;
                                if (!i && e.begin) {
                                    e.begin.call(t, e);
                                }
                                i = i + 1;
                                var l = e.timeStamp / i;
                                if (e.timeStamp < s && e.timeStamp + l < s && e.element.getAttribute('e-animate')) {
                                    e.element.style.animation = e.name + ' ' + e.duration + 'ms ' + e.timingFunction;
                                    if (e.progress) {
                                        e.progress.call(t, e);
                                    }
                                    requestAnimationFrame(o);
                                } else {
                                    cancelAnimationFrame(n);
                                    e.element.removeAttribute('e-animation-id');
                                    e.element.removeAttribute('e-animate');
                                    e.element.style.animation = '';
                                    if (e.end) {
                                        e.end.call(t, e);
                                    }
                                }
                            } else {
                                n = requestAnimationFrame(o);
                                e.element.setAttribute('e-animation-id', n.toString());
                            }
                        } catch (h) {
                            cancelAnimationFrame(n);
                            e.element.removeAttribute('e-animation-id');
                            if (e.fail) {
                                e.fail.call(t, h);
                            }
                        }
                    };
                    o();
                };
                t.prototype.getModel = function(e) {
                    return {
                        name: e.name || this.name,
                        delay: e.delay || this.delay,
                        duration: (e.duration !== undefined ? e.duration : this.duration),
                        begin: e.begin || this.begin,
                        end: e.end || this.end,
                        fail: e.fail || this.fail,
                        progress: e.progress || this.progress,
                        timingFunction: this.easing[e.timingFunction] ? this.easing[e.timingFunction] : (e.timingFunction || this.easing[this.timingFunction])
                    };
                };
                t.prototype.onPropertyChanged = function(e, t) {};
                t.prototype.getModuleName = function() {
                    return 'animation';
                };
                t.prototype.destroy = function() {};
                var i;
                tR([
                    tS('FadeIn')
                ], t.prototype, "name", void 0);
                tR([
                    tS(400)
                ], t.prototype, "duration", void 0);
                tR([
                    tS('ease')
                ], t.prototype, "timingFunction", void 0);
                tR([
                    tS(0)
                ], t.prototype, "delay", void 0);
                tR([
                    tL()
                ], t.prototype, "progress", void 0);
                tR([
                    tL()
                ], t.prototype, "begin", void 0);
                tR([
                    tL()
                ], t.prototype, "end", void 0);
                tR([
                    tL()
                ], t.prototype, "fail", void 0);
                t = i = tR([
                    tN
                ], t);
                return t;
            }(ts));
            function tI(e, t, i) {
                var n = tH(t);
                if (n.rippleFlag === false || (n.rippleFlag === undefined && !tV)) {
                    return (function() {});
                }
                e.setAttribute('data-ripple', 'true');
                e_.add(e, 'mousedown', tF, {
                    parent: e,
                    rippleOptions: n
                });
                e_.add(e, 'mouseup', tj, {
                    parent: e,
                    rippleOptions: n,
                    done: i
                });
                e_.add(e, 'mouseleave', tz, {
                    parent: e,
                    rippleOptions: n
                });
                if (eV.isPointer) {
                    e_.add(e, 'transitionend', tz, {
                        parent: e,
                        rippleOptions: n
                    });
                }
                return (function() {
                    e.removeAttribute('data-ripple');
                    e_.remove(e, 'mousedown', tF);
                    e_.remove(e, 'mouseup', tj);
                    e_.remove(e, 'mouseleave', tz);
                    e_.remove(e, 'transitionend', tz);
                });
            }
            function tH(e) {
                var t = {
                    selector: e && e.selector ? e.selector : null,
                    ignore: e && e.ignore ? e.ignore : null,
                    rippleFlag: e && e.rippleFlag,
                    isCenterRipple: e && e.isCenterRipple,
                    duration: e && e.duration ? e.duration : 350
                };
                return t;
            }
            function tF(e) {
                var t = (e.target);
                var i = this.rippleOptions.selector;
                var n = i ? e5(t, i) : t;
                if (!n || (this.rippleOptions && e5(t, this.rippleOptions.ignore))) {
                    return;
                }
                var r = n.getBoundingClientRect();
                var s = e.pageX - document.body.scrollLeft;
                var o = e.pageY - ((!document.body.scrollTop && document.documentElement) ? document.documentElement.scrollTop : document.body.scrollTop);
                var a = Math.max(Math.abs(s - r.left), Math.abs(s - r.right));
                var l = Math.max(Math.abs(o - r.top), Math.abs(o - r.bottom));
                var h = Math.sqrt(a * a + l * l);
                var c = h * 2 + 'px';
                var d = s - r.left - h;
                var p = o - r.top - h;
                if (this.rippleOptions && this.rippleOptions.isCenterRipple) {
                    d = 0;
                    p = 0;
                    c = '100%';
                }
                n.classList.add('e-ripple');
                var u = this.rippleOptions.duration.toString();
                var f = 'width: ' + c + ';height: ' + c + ';left: ' + d + 'px;top: ' + p + 'px;' + 'transition-duration: ' + u + 'ms;';
                var m = eW('div', {
                    className: 'e-ripple-element',
                    styles: f
                });
                n.appendChild(m);
                window.getComputedStyle(m).getPropertyValue('opacity');
                m.style.transform = 'scale(1)';
                if (n !== this.parent) {
                    e_.add(n, 'mouseleave', tz, {
                        parent: this.parent,
                        rippleOptions: this.rippleOptions
                    });
                }
            }
            function tj(e) {
                tq(e, this);
            }
            function tz(e) {
                tq(e, this);
            }
            function tq(e, t) {
                var i = t.rippleOptions.duration;
                var n = (e.target);
                var r = t.rippleOptions.selector;
                var s = r ? e5(n, r) : n;
                if (!s || (s && s.className.indexOf('e-ripple') === -1)) {
                    return;
                }
                var o = e2('.e-ripple-element', s);
                var a = o[o.length - 1];
                if (a) {
                    a.style.opacity = '0.5';
                }
                if (t.parent !== s) {
                    e_.remove(s, 'mouseleave', tz);
                }
                setTimeout(function() {
                    if (a && a.parentNode) {
                        a.parentNode.removeChild(a);
                    }
                    if (!s.getElementsByClassName('e-ripple-element').length) {
                        s.classList.remove('e-ripple');
                    }
                    if (t.done) {
                        t.done(e);
                    }
                }, i);
            }
            var tV = false;
            function t_(e) {
                tV = e;
                return tV;
            }
            var tU = '';
            function tW(e) {
                tU = e;
            }
            ;
            var tZ = 'Module';
            var tY = (function() {
                function e(e) {
                    this.loadedModules = [];
                    this.parent = e;
                }
                e.prototype.inject = function(e, t) {
                    var i = e.length;
                    if (i === 0) {
                        this.clean();
                        return;
                    }
                    if (this.loadedModules.length) {
                        this.clearUnusedModule(e);
                    }
                    for(var n = 0; n < i; n++){
                        var r = e[n];
                        for(var s = 0, o = t; s < o.length; s++){
                            var l = o[s];
                            var h = r.member;
                            if (l.prototype.getModuleName() === r.member && !this.isModuleLoaded(h)) {
                                var d = a(l, r.args);
                                var p = this.getMemberName(h);
                                if (r.isProperty) {
                                    c(p, l, this.parent);
                                } else {
                                    c(p, d, this.parent);
                                }
                                var u = r;
                                u.member = p;
                                this.loadedModules.push(u);
                            }
                        }
                    }
                };
                e.prototype.clean = function() {
                    for(var e = 0, t = this.loadedModules; e < t.length; e++){
                        var i = t[e];
                        if (!i.isProperty) {
                            h(i.member, this.parent).destroy();
                        }
                    }
                    this.loadedModules = [];
                };
                e.prototype.clearUnusedModule = function(e) {
                    var t = this;
                    var i = e.map(function(e) {
                        return t.getMemberName(e.member);
                    });
                    var n = this.loadedModules.filter(function(e) {
                        return i.indexOf(e.member) === -1;
                    });
                    for(var r = 0, s = n; r < s.length; r++){
                        var o = s[r];
                        if (!o.isProperty) {
                            h(o.member, this.parent).destroy();
                        }
                        this.loadedModules.splice(this.loadedModules.indexOf(o), 1);
                        d(this.parent, o.member);
                    }
                };
                e.prototype.getMemberName = function(e) {
                    return e[0].toLowerCase() + e.substring(1) + tZ;
                };
                e.prototype.isModuleLoaded = function(e) {
                    for(var t = 0, i = this.loadedModules; t < i.length; t++){
                        var n = i[t];
                        if (n.member === this.getMemberName(e)) {
                            return true;
                        }
                    }
                    return false;
                };
                return e;
            }());
            ;
            var tX = (function() {
                function e(e, t, i, n) {
                    this.isComplexArraySetter = false;
                    this.properties = {};
                    this.changedProperties = {};
                    this.childChangedProperties = {};
                    this.oldProperties = {};
                    this.finalUpdate = function() {};
                    this.callChildDataBind = h('callChildDataBind', ts);
                    this.parentObj = e;
                    this.controlParent = this.parentObj.controlParent || this.parentObj;
                    this.propName = t;
                    this.isParentArray = n;
                    this.setProperties(i, true);
                }
                e.prototype.updateChange = function(e, t) {
                    if (e === true) {
                        this.parentObj.childChangedProperties[t] = e;
                    } else {
                        delete this.parentObj.childChangedProperties[t];
                    }
                    if (this.parentObj.updateChange) {
                        this.parentObj.updateChange(e, this.parentObj.propName);
                    }
                };
                e.prototype.updateTimeOut = function() {
                    if (this.parentObj.updateTimeOut) {
                        this.parentObj.finalUpdate();
                        this.parentObj.updateTimeOut();
                    } else {
                        var e = setTimeout(this.parentObj.dataBind.bind(this.parentObj));
                        var t = function() {
                            clearTimeout(e);
                        };
                        this.finalUpdate = t;
                    }
                };
                e.prototype.clearChanges = function() {
                    this.finalUpdate();
                    this.updateChange(false, this.propName);
                    this.oldProperties = {};
                    this.changedProperties = {};
                };
                e.prototype.setProperties = function(e, t) {
                    if (t === true) {
                        m(this, e);
                        this.updateChange(false, this.propName);
                        this.clearChanges();
                    } else {
                        m(this, e);
                    }
                };
                e.prototype.dataBind = function() {
                    this.callChildDataBind(this.childChangedProperties, this);
                    if (this.isParentArray) {
                        var e = this.parentObj[this.propName].indexOf(this);
                        if (Object.keys(this.changedProperties).length) {
                            c(this.propName + '.' + e, this.changedProperties, this.parentObj.changedProperties);
                            c(this.propName + '.' + e, this.oldProperties, this.parentObj.oldProperties);
                        }
                    } else {
                        this.parentObj.changedProperties[this.propName] = this.changedProperties;
                        this.parentObj.oldProperties[this.propName] = this.oldProperties;
                    }
                    this.clearChanges();
                };
                e.prototype.saveChanges = function(e, t, i, n) {
                    if (this.controlParent.isProtectedOnChange) {
                        return;
                    }
                    if (!n) {
                        this.serverDataBind(e, t, true);
                    }
                    this.oldProperties[e] = i;
                    this.changedProperties[e] = t;
                    this.updateChange(true, this.propName);
                    this.finalUpdate();
                    this.updateTimeOut();
                };
                e.prototype.serverDataBind = function(e, t, i, n) {
                    if (N() && !this.parentObj.isComplexArraySetter) {
                        var r;
                        var s = {};
                        var o = i ? this.getParentKey(true) + '.' + e : e;
                        if (o.indexOf('.') !== -1) {
                            var a = o.split('.');
                            r = s;
                            for(var l = 0; l < a.length; l++){
                                var h = l === a.length - 1;
                                r[a[l]] = h ? t : {};
                                r = h ? r : r[a[l]];
                            }
                        } else {
                            s[o] = {};
                            r = s[o];
                            s[o][e] = t;
                        }
                        if (this.isParentArray) {
                            var c = 'ejsAction';
                            r[c] = n ? n : 'none';
                        }
                        this.controlParent.serverDataBind(s);
                    }
                };
                e.prototype.getParentKey = function(e) {
                    var t = '';
                    var i = this.propName;
                    if (this.isParentArray) {
                        t = this.parentObj[this.propName].indexOf(this);
                        var n = this.parentObj[this.propName].length;
                        n = e ? n : (n > 0 ? n - 1 : 0);
                        t = t !== -1 ? '-' + t : '-' + n;
                        i = i + t;
                    }
                    if (this.controlParent !== this.parentObj) {
                        i = this.parentObj.getParentKey() + '.' + this.propName + t;
                    }
                    return i;
                };
                return e;
            }());
            ;
            var tG = [
                115,
                121,
                110,
                99,
                102,
                117,
                115,
                105,
                111,
                110,
                46,
                105,
                115,
                76,
                105,
                99,
                86,
                97,
                108,
                105,
                100,
                97,
                116,
                101,
                100
            ];
            var tK = (function() {
                function e(e) {
                    this.isValidated = false;
                    this.version = '20.2';
                    this.platform = /JavaScript|ASPNET|ASPNETCORE|ASPNETMVC|FileFormats/i;
                    this.errors = {
                        noLicense: 'This application was built using a trial version of Syncfusion Essential Studio.' + ' Please include a valid license to permanently remove this license validation message.' + ' You can also obtain a free 30 day evaluation license to temporarily remove this message ' + 'during the evaluation period. Please refer to this <a class="e-license"' + 'href="https://help.syncfusion.com/common/essential-studio/licensing">help topic</a> for more information.',
                        trailExpired: 'Your Syncfusion trial license has expired. Please refer to this ' + '<a class="e-license"' + 'href="https://help.syncfusion.com/common/essential-studio/licensing/licensing-errors#trial-expired">help topic</a> for more information.',
                        versionMismatched: 'The included Syncfusion license (v##LicenseVersion) is invalid for version ' + '##Requireversion. Please refer to this <a class="e-license" ' + 'href="https://help.syncfusion.com/es/licensing/version-mismatch/">help topic</a> for more information.',
                        platformMismatched: 'The included Syncfusion license is invalid (Platform mismatch). Please refer' + ' to this <a class="e-license" ' + 'href="https://help.syncfusion.com/common/essential-studio/licensing/licensing-errors#platform-mismatch">help topic</a> for more information.',
                        invalidKey: 'The included Syncfusion license is invalid. Please refer to this ' + '<a class="e-license" ' + 'href="https://help.syncfusion.com/common/essential-studio/licensing/licensing-errors#invalid-key">help topic</a> for more information.'
                    };
                    this.manager = (function() {
                        var e = null;
                        function t(t) {
                            e = t;
                        }
                        function i() {
                            return e;
                        }
                        return {
                            setKey: t,
                            getKey: i
                        };
                    })();
                    this.npxManager = (function() {
                        var e = 'npxKeyReplace';
                        function t() {
                            return e;
                        }
                        return {
                            getKey: t
                        };
                    })();
                    this.manager.setKey(e);
                }
                e.prototype.validate = function() {
                    if (!this.isValidated && (p && !h(t$(tG), p) && !h('Blazor', p))) {
                        var e = void 0;
                        if ((this.manager && this.manager.getKey()) || (this.npxManager && this.npxManager.getKey() !== 'npxKeyReplace')) {
                            var t = this.getInfoFromKey();
                            if (t && t.length) {
                                for(var i = 0, n = t; i < n.length; i++){
                                    var r = n[i];
                                    if (!this.platform.test(r.platform) || r.invalidPlatform) {
                                        e = this.errors.platformMismatched;
                                    } else if (r.version.indexOf(this.version) === -1) {
                                        e = this.errors.versionMismatched;
                                        e = e.replace('##LicenseVersion', r.version);
                                        e = e.replace('##Requireversion', this.version + '.x');
                                    } else if (r.expiryDate) {
                                        var s = new Date(r.expiryDate);
                                        var o = new Date();
                                        if (s !== o && s < o) {
                                            e = this.errors.trailExpired;
                                        } else {
                                            break;
                                        }
                                    }
                                }
                            } else {
                                e = this.errors.invalidKey;
                            }
                        } else {
                            e = this.errors.noLicense;
                        }
                        if (e && typeof document !== 'undefined' && !g(document)) {
                            var a = eW('div', {
                                innerHTML: e + '<span id="license-banner-error" class=".e-license-banner">' + '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20">' + '<line x1="5" y1="5" x2="15" y2="15" stroke="yellow" stroke-width="2.5" ' + 'stroke-miterlimit="10" stroke-linecap="round"></line><line x1="15" y1="5" ' + 'x2="5" y2="15" stroke="yellow" stroke-width="2.5" stroke-linecap="round" ' + 'stroke-miterlimit="10"></line></svg></span>',
                                styles: 'position:fixed;top:0;left:0;right:0;font-family:"Segoe UI";font-size:16px;' + 'background:repeating-linear-gradient(45deg,#d70f0f,#d70f0f 10px,#e12121 10px,#e12121 17px);' + 'color:#ffffff;z-index:999999999;text-align:center;padding:10px 50px 10px 25px;'
                            });
                            a.setAttribute('id', 'js-licensing');
                            document.body.appendChild(a);
                            document.getElementById('license-banner-error').addEventListener('click', function() {
                                document.getElementById('js-licensing').remove();
                            });
                        }
                        this.isValidated = true;
                        c(t$(tG), this.isValidated, p);
                    }
                };
                e.prototype.getDecryptedData = function(e) {
                    try {
                        return atob(e);
                    } catch (t) {
                        return '';
                    }
                };
                e.prototype.getInfoFromKey = function() {
                    try {
                        var e = '';
                        var t = [
                            5439488,
                            7929856,
                            5111808,
                            6488064,
                            4587520,
                            7667712,
                            5439488,
                            6881280,
                            5177344,
                            7208960,
                            4194304,
                            4456448,
                            6619136,
                            7733248,
                            5242880,
                            7077888,
                            6356992,
                            7602176,
                            4587520,
                            7274496,
                            7471104,
                            7143424
                        ];
                        var i = [];
                        var n = [];
                        var r = false;
                        var s = false;
                        if (this.manager.getKey()) {
                            e = this.manager.getKey();
                        } else {
                            s = true;
                            e = this.npxManager.getKey().split('npxKeyReplace')[1];
                        }
                        var o = e.split(';');
                        for(var a = 0, l = o; a < l.length; a++){
                            var h = l[a];
                            var c = this.getDecryptedData(h);
                            if (!c) {
                                continue;
                            }
                            var d = 0;
                            var p = '';
                            if (!s) {
                                for(var u = 0; u < c.length; u++, d++){
                                    if (d === t.length) {
                                        d = 0;
                                    }
                                    var f = c.charCodeAt(u);
                                    p += String.fromCharCode(f ^ (t[d] >> 16));
                                }
                            } else {
                                var m = c[c.length - 1];
                                var v = [];
                                for(var u = 0; u < c.length; u++){
                                    v[u] = c[u].charCodeAt(0) - m.charCodeAt(0);
                                }
                                for(var u = 0; u < v.length; u++){
                                    p += String.fromCharCode(v[u]);
                                }
                            }
                            if (this.platform.test(p)) {
                                i = p.split(';');
                                r = false;
                                if (i.length > 3) {
                                    n.push({
                                        platform: i[0],
                                        version: i[1],
                                        expiryDate: i[2]
                                    });
                                }
                            } else if (p && p.split(';').length > 3) {
                                r = true;
                            }
                        }
                        if (r && !n.length) {
                            return [
                                {
                                    invalidPlatform: r
                                }
                            ];
                        } else {
                            return n.length ? n : null;
                        }
                    } catch (g) {
                        return null;
                    }
                };
                return e;
            }());
            var tJ = new tK();
            function t$(e) {
                var t = '';
                for(var i = 0, n = e; i < n.length; i++){
                    var r = n[i];
                    t += String.fromCharCode(r);
                }
                return t;
            }
            function tQ(e) {
                tJ = new tK(e);
            }
            var t0 = function(e) {
                if (e) {
                    tQ(e);
                }
                tJ.validate();
            };
            var t1 = function() {
                return tJ.version;
            };
            ;
            var t3 = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var t2 = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var t4 = 0;
            var t5;
            var t7 = 0;
            var t9 = false;
            function t6(e) {
                t9 = e;
            }
            var t8 = (function(e) {
                t3(t, e);
                function t(t, i) {
                    var n = e.call(this, t, i) || this;
                    n.randomId = P();
                    n.isStringTemplate = false;
                    n.needsID = false;
                    n.isReactHybrid = false;
                    if (g(n.enableRtl)) {
                        n.setProperties({
                            'enableRtl': em
                        }, true);
                    }
                    if (g(n.locale)) {
                        n.setProperties({
                            'locale': eg
                        }, true);
                    }
                    n.moduleLoader = new tY(n);
                    n.localObserver = new eu(n);
                    ef.on('notifyExternalChange', n.detectFunction, n, n.randomId);
                    t0();
                    if (!b(i)) {
                        n.appendTo();
                    }
                    return n;
                }
                t.prototype.requiredModules = function() {
                    return [];
                };
                t.prototype.destroy = function() {
                    if (this.isDestroyed) {
                        return;
                    }
                    if (this.enablePersistence) {
                        this.setPersistData();
                    }
                    this.localObserver.destroy();
                    if (this.refreshing) {
                        return;
                    }
                    eY([
                        this.element
                    ], [
                        'e-control'
                    ]);
                    this.trigger('destroyed', {
                        cancel: false
                    });
                    e.prototype.destroy.call(this);
                    this.moduleLoader.clean();
                    ef.off('notifyExternalChange', this.detectFunction, this.randomId);
                };
                t.prototype.refresh = function() {
                    this.refreshing = true;
                    this.moduleLoader.clean();
                    this.destroy();
                    this.clearChanges();
                    this.localObserver = new eu(this);
                    this.preRender();
                    this.injectModules();
                    this.render();
                    this.refreshing = false;
                };
                t.prototype.accessMount = function() {
                    if (this.mount && !this.isReactHybrid) {
                        this.mount();
                    }
                };
                t.prototype.getRootElement = function() {
                    if (this.isReactHybrid) {
                        return this.actualElement;
                    } else {
                        return this.element;
                    }
                };
                t.prototype.getLocalData = function() {
                    var e = this.getModuleName() + this.element.id;
                    if (t9) {
                        return window.localStorage.getItem(e + this.ej2StatePersistenceVersion);
                    } else {
                        return window.localStorage.getItem(e);
                    }
                };
                t.prototype.appendTo = function(t) {
                    if (!g(t) && typeof (t) === 'string') {
                        this.element = e3(t, document);
                    } else if (!g(t)) {
                        this.element = t;
                    }
                    if (!g(this.element)) {
                        var i = 'e-' + this.getModuleName().toLowerCase();
                        eZ([
                            this.element
                        ], [
                            'e-control',
                            i
                        ]);
                        this.isProtectedOnChange = false;
                        if (this.needsID && !this.element.id) {
                            this.element.id = this.getUniqueID(this.getModuleName());
                        }
                        if (this.enablePersistence) {
                            this.mergePersistData();
                            window.addEventListener('unload', this.setPersistData.bind(this));
                        }
                        var n = h('ej2_instances', this.element);
                        if (!n || n.indexOf(this) === -1) {
                            e.prototype.addInstance.call(this);
                        }
                        this.preRender();
                        this.injectModules();
                        this.render();
                        if (!this.mount) {
                            this.trigger('created');
                        } else {
                            this.accessMount();
                        }
                    }
                };
                t.prototype.renderComplete = function(e) {
                    if (N()) {
                        var t = 'sfBlazor';
                        window[t].renderComplete(this.element, e);
                    }
                    this.isRendered = true;
                };
                t.prototype.dataBind = function() {
                    this.injectModules();
                    e.prototype.dataBind.call(this);
                };
                t.prototype.on = function(e, t, i) {
                    if (typeof e === 'string') {
                        this.localObserver.on(e, t, i);
                    } else {
                        for(var n = 0, r = e; n < r.length; n++){
                            var s = r[n];
                            this.localObserver.on(s.event, s.handler, s.context);
                        }
                    }
                };
                t.prototype.off = function(e, t) {
                    if (typeof e === 'string') {
                        this.localObserver.off(e, t);
                    } else {
                        for(var i = 0, n = e; i < n.length; i++){
                            var r = n[i];
                            this.localObserver.off(r.event, r.handler);
                        }
                    }
                };
                t.prototype.notify = function(e, t) {
                    if (this.isDestroyed !== true) {
                        this.localObserver.notify(e, t);
                    }
                };
                t.prototype.getInjectedModules = function() {
                    return this.injectedModules;
                };
                t.Inject = function() {
                    var e = [];
                    for(var t = 0; t < arguments.length; t++){
                        e[t] = arguments[t];
                    }
                    if (!this.prototype.injectedModules) {
                        this.prototype.injectedModules = [];
                    }
                    for(var i = 0; i < e.length; i++){
                        if (this.prototype.injectedModules.indexOf(e[i]) === -1) {
                            this.prototype.injectedModules.push(e[i]);
                        }
                    }
                };
                t.prototype.createElement = function(e, t, i) {
                    return eW(e, t);
                };
                t.prototype.triggerStateChange = function(e, t) {
                    if (this.isReactHybrid) {
                        this.setState();
                        this.currentContext = {
                            calls: e,
                            args: t
                        };
                    }
                };
                t.prototype.injectModules = function() {
                    if (this.injectedModules && this.injectedModules.length) {
                        this.moduleLoader.inject(this.requiredModules(), this.injectedModules);
                    }
                };
                t.prototype.detectFunction = function(e) {
                    var t = Object.keys(e);
                    if (t.length) {
                        this[t[0]] = e[t[0]];
                    }
                };
                t.prototype.mergePersistData = function() {
                    var e;
                    if (t9) {
                        e = window.localStorage.getItem(this.getModuleName() + this.element.id + this.ej2StatePersistenceVersion);
                    } else {
                        e = window.localStorage.getItem(this.getModuleName() + this.element.id);
                    }
                    if (!(g(e) || (e === ''))) {
                        this.setProperties(JSON.parse(e), true);
                    }
                };
                t.prototype.setPersistData = function() {
                    if (!this.isDestroyed) {
                        if (t9) {
                            window.localStorage.setItem(this.getModuleName() + this.element.id + this.ej2StatePersistenceVersion, this.getPersistData());
                        } else {
                            window.localStorage.setItem(this.getModuleName() + this.element.id, this.getPersistData());
                        }
                    }
                };
                t.prototype.renderReactTemplates = function() {};
                t.prototype.clearTemplate = function(e, t) {};
                t.prototype.getUniqueID = function(e) {
                    if (this.isHistoryChanged()) {
                        t4 = 0;
                    }
                    t5 = this.pageID(location.href);
                    t7 = history.length;
                    return e + '_' + t5 + '_' + t4++;
                };
                t.prototype.pageID = function(e) {
                    var t = 0;
                    if (e.length === 0) {
                        return t;
                    }
                    for(var i = 0; i < e.length; i++){
                        var n = e.charCodeAt(i);
                        t = ((t << 5) - t) + n;
                        t = t & t;
                    }
                    return Math.abs(t);
                };
                t.prototype.isHistoryChanged = function() {
                    return t5 !== this.pageID(location.href) || t7 !== history.length;
                };
                t.prototype.addOnPersist = function(e) {
                    var t = this;
                    var i = {};
                    for(var n = 0, r = e; n < r.length; n++){
                        var s = r[n];
                        var o = void 0;
                        o = h(s, this);
                        if (!b(o)) {
                            c(s, this.getActualProperties(o), i);
                        }
                    }
                    return JSON.stringify(i, function(e, i) {
                        return t.getActualProperties(i);
                    });
                };
                t.prototype.getActualProperties = function(e) {
                    if (e instanceof tX) {
                        return h('properties', e);
                    } else {
                        return e;
                    }
                };
                t.prototype.ignoreOnPersist = function(e) {
                    return JSON.stringify(this.iterateJsonProperties(this.properties, e));
                };
                t.prototype.iterateJsonProperties = function(e, t) {
                    var i = {};
                    var n = function(n) {
                        if (t.indexOf(n) === -1) {
                            var s = e[n];
                            if (typeof s === 'object' && !(s instanceof Array)) {
                                var o = t.filter(function(e) {
                                    return new RegExp(n + '.').test(e);
                                }).map(function(e) {
                                    return e.replace(n + '.', '');
                                });
                                i[n] = r.iterateJsonProperties(r.getActualProperties(s), o);
                            } else {
                                i[n] = s;
                            }
                        }
                    };
                    var r = this;
                    for(var s = 0, o = Object.keys(e); s < o.length; s++){
                        var a = o[s];
                        n(a);
                    }
                    return i;
                };
                t2([
                    tS(false)
                ], t.prototype, "enablePersistence", void 0);
                t2([
                    tS()
                ], t.prototype, "enableRtl", void 0);
                t2([
                    tS()
                ], t.prototype, "locale", void 0);
                t = t2([
                    tN
                ], t);
                return t;
            }(ts));
            (function() {
                if (typeof window !== 'undefined') {
                    window.addEventListener('popstate', function() {
                        t4 = 0;
                    });
                }
            })();
            ;
            var ie = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var it = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var ii = {
                left: 0,
                top: 0,
                bottom: 0,
                right: 0
            };
            var ir = (null && ([
                'offsetLeft',
                'offsetTop'
            ]));
            var is = (null && ([
                'x',
                'y'
            ]));
            var io = (null && ([
                'left',
                'top'
            ]));
            var ia = {
                isDragged: false
            };
            var il = (function(e) {
                ie(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                it([
                    tS(0)
                ], t.prototype, "left", void 0);
                it([
                    tS(0)
                ], t.prototype, "top", void 0);
                return t;
            }(tX));
            var ih = (function(e) {
                ie(t, e);
                function t(t, n) {
                    var r = e.call(this, n, t) || this;
                    r.dragLimit = i.getDefaultPosition();
                    r.borderWidth = i.getDefaultPosition();
                    r.padding = i.getDefaultPosition();
                    r.diffX = 0;
                    r.prevLeft = 0;
                    r.prevTop = 0;
                    r.dragProcessStarted = false;
                    r.eleTop = 0;
                    r.tapHoldTimer = 0;
                    r.externalInitialize = false;
                    r.diffY = 0;
                    r.parentScrollX = 0;
                    r.parentScrollY = 0;
                    r.droppables = {};
                    r.bind();
                    return r;
                }
                i = t;
                t.prototype.bind = function() {
                    this.toggleEvents();
                    if (eV.isIE) {
                        eZ([
                            this.element
                        ], 'e-block-touch');
                    }
                    this.droppables[this.scope] = {};
                };
                t.getDefaultPosition = function() {
                    return v({}, ii);
                };
                t.prototype.toggleEvents = function(e) {
                    var t;
                    if (!b(this.handle)) {
                        t = e3(this.handle, this.element);
                    }
                    var i = (this.enableTapHold && eV.isDevice && eV.isTouch) ? this.mobileInitialize : this.initialize;
                    if (e) {
                        e_.remove(t || this.element, eV.touchStartEvent, i);
                    } else {
                        e_.add(t || this.element, eV.touchStartEvent, i, this);
                    }
                };
                t.prototype.mobileInitialize = function(e) {
                    var t = this;
                    var i = e.currentTarget;
                    this.tapHoldTimer = setTimeout(function() {
                        t.externalInitialize = true;
                        t.removeTapholdTimer();
                        t.initialize(e, i);
                    }, this.tapHoldThreshold);
                    e_.add(document, eV.touchMoveEvent, this.removeTapholdTimer, this);
                    e_.add(document, eV.touchEndEvent, this.removeTapholdTimer, this);
                };
                t.prototype.removeTapholdTimer = function() {
                    clearTimeout(this.tapHoldTimer);
                    e_.remove(document, eV.touchMoveEvent, this.removeTapholdTimer);
                    e_.remove(document, eV.touchEndEvent, this.removeTapholdTimer);
                };
                t.prototype.getScrollableParent = function(e, t) {
                    var i = {
                        'vertical': 'scrollHeight',
                        'horizontal': 'scrollWidth'
                    };
                    var n = {
                        'vertical': 'clientHeight',
                        'horizontal': 'clientWidth'
                    };
                    if (g(e)) {
                        return null;
                    }
                    if (e[i[t]] > e[n[t]]) {
                        if (t === 'vertical' ? e.scrollTop > 0 : e.scrollLeft > 0) {
                            if (t === 'vertical') {
                                this.parentScrollY = this.parentScrollY + (this.parentScrollY === 0 ? e.scrollTop : e.scrollTop - this.parentScrollY);
                                this.tempScrollHeight = e.scrollHeight;
                            } else {
                                this.parentScrollX = this.parentScrollX + (this.parentScrollX === 0 ? e.scrollLeft : e.scrollLeft - this.parentScrollX);
                                this.tempScrollWidth = e.scrollWidth;
                            }
                            if (!g(e)) {
                                return this.getScrollableParent(e.parentNode, t);
                            } else {
                                return e;
                            }
                        } else {
                            return this.getScrollableParent(e.parentNode, t);
                        }
                    } else {
                        return this.getScrollableParent(e.parentNode, t);
                    }
                };
                t.prototype.getScrollableValues = function() {
                    this.parentScrollX = 0;
                    this.parentScrollY = 0;
                    var e = this.element.classList.contains('e-dialog') && this.element.classList.contains('e-dlg-modal');
                    var t = this.getScrollableParent(this.element.parentNode, 'vertical');
                    var i = this.getScrollableParent(this.element.parentNode, 'horizontal');
                };
                t.prototype.initialize = function(e, t) {
                    this.currentStateTarget = e.target;
                    if (this.isDragStarted()) {
                        return;
                    } else {
                        this.isDragStarted(true);
                        this.externalInitialize = false;
                    }
                    this.target = (e.currentTarget || t);
                    this.dragProcessStarted = false;
                    if (this.abort) {
                        var i = this.abort;
                        if (typeof i === 'string') {
                            i = [
                                i
                            ];
                        }
                        for(var n = 0; n < i.length; n++){
                            if (!g(e5(e.target, i[n]))) {
                                if (this.isDragStarted()) {
                                    this.isDragStarted(true);
                                }
                                return;
                            }
                        }
                    }
                    if (this.preventDefault && !b(e.changedTouches) && e.type !== 'touchstart') {
                        e.preventDefault();
                    }
                    this.element.setAttribute('aria-grabbed', 'true');
                    var r = this.getCoordinates(e);
                    this.initialPosition = {
                        x: r.pageX,
                        y: r.pageY
                    };
                    if (!this.clone) {
                        var s = this.element.getBoundingClientRect();
                        this.getScrollableValues();
                        if (e.clientX === e.pageX) {
                            this.parentScrollX = 0;
                        }
                        if (e.clientY === e.pageY) {
                            this.parentScrollY = 0;
                        }
                        this.relativeXPosition = r.pageX - (s.left + this.parentScrollX);
                        this.relativeYPosition = r.pageY - (s.top + this.parentScrollY);
                    }
                    if (this.externalInitialize) {
                        this.intDragStart(e);
                    } else {
                        e_.add(document, eV.touchMoveEvent, this.intDragStart, this);
                        e_.add(document, eV.touchEndEvent, this.intDestroy, this);
                    }
                    this.toggleEvents(true);
                    if (e.type !== 'touchstart' && this.isPreventSelect) {
                        document.body.classList.add('e-prevent-select');
                    }
                    this.externalInitialize = false;
                    e_.trigger(document.documentElement, eV.touchStartEvent, e);
                };
                t.prototype.intDragStart = function(e) {
                    this.removeTapholdTimer();
                    var t = !b(e.changedTouches);
                    if (t && (e.changedTouches.length !== 1)) {
                        return;
                    }
                    var i = this.getCoordinates(e);
                    var n;
                    var r = getComputedStyle(this.element);
                    this.margin = {
                        left: parseInt(r.marginLeft, 10),
                        top: parseInt(r.marginTop, 10),
                        right: parseInt(r.marginRight, 10),
                        bottom: parseInt(r.marginBottom, 10)
                    };
                    var s = this.element;
                    if (this.clone && this.dragTarget) {
                        var o = e5(e.target, this.dragTarget);
                        if (!g(o)) {
                            s = o;
                        }
                    }
                    if (this.isReplaceDragEle) {
                        s = this.currentStateCheck(e.target, s);
                    }
                    this.offset = this.calculateParentPosition(s);
                    this.position = this.getMousePosition(e, this.isDragScroll);
                    var a = this.initialPosition.x - i.pageX;
                    var l = this.initialPosition.y - i.pageY;
                    var h = Math.sqrt((a * a) + (l * l));
                    if ((h >= this.distance || this.externalInitialize)) {
                        var c = this.getHelperElement(e);
                        if (!c || g(c)) {
                            return;
                        }
                        if (t) {
                            e.preventDefault();
                        }
                        var d = this.helperElement = c;
                        this.parentClientRect = this.calculateParentPosition(d.offsetParent);
                        if (this.dragStart) {
                            var p = this.getProperTargetElement(e);
                            var u = {
                                event: e,
                                element: s,
                                target: p,
                                bindEvents: N() ? this.bindDragEvents.bind(this) : null,
                                dragElement: d
                            };
                            this.trigger('dragStart', u);
                        }
                        if (this.dragArea) {
                            this.setDragArea();
                        } else {
                            this.dragLimit = {
                                left: 0,
                                right: 0,
                                bottom: 0,
                                top: 0
                            };
                            this.borderWidth = {
                                top: 0,
                                left: 0
                            };
                        }
                        n = {
                            left: this.position.left - this.parentClientRect.left,
                            top: this.position.top - this.parentClientRect.top
                        };
                        if (this.clone && !this.enableTailMode) {
                            this.diffX = this.position.left - this.offset.left;
                            this.diffY = this.position.top - this.offset.top;
                        }
                        this.getScrollableValues();
                        var f = getComputedStyle(s);
                        var m = parseFloat(f.marginTop);
                        if (this.clone && m !== 0) {
                            n.top += m;
                        }
                        this.eleTop = !isNaN(parseFloat(f.top)) ? parseFloat(f.top) - this.offset.top : 0;
                        if (this.enableScrollHandler && !this.clone) {
                            n.top -= this.parentScrollY;
                            n.left -= this.parentScrollX;
                        }
                        var v = this.getProcessedPositionValue({
                            top: (n.top - this.diffY) + 'px',
                            left: (n.left - this.diffX) + 'px'
                        });
                        this.dragElePosition = {
                            top: n.top,
                            left: n.left
                        };
                        e6(d, this.getDragPosition({
                            position: 'absolute',
                            left: v.left,
                            top: v.top
                        }));
                        e_.remove(document, eV.touchMoveEvent, this.intDragStart);
                        e_.remove(document, eV.touchEndEvent, this.intDestroy);
                        if (!N()) {
                            this.bindDragEvents(d);
                        }
                    }
                };
                t.prototype.bindDragEvents = function(e) {
                    if (eG(e)) {
                        e_.add(document, eV.touchMoveEvent, this.intDrag, this);
                        e_.add(document, eV.touchEndEvent, this.intDragStop, this);
                        this.setGlobalDroppables(false, this.element, e);
                    } else {
                        this.toggleEvents();
                        document.body.classList.remove('e-prevent-select');
                    }
                };
                t.prototype.elementInViewport = function(e) {
                    this.top = e.offsetTop;
                    this.left = e.offsetLeft;
                    this.width = e.offsetWidth;
                    this.height = e.offsetHeight;
                    while(e.offsetParent){
                        e = e.offsetParent;
                        this.top += e.offsetTop;
                        this.left += e.offsetLeft;
                    }
                    return (this.top >= window.pageYOffset && this.left >= window.pageXOffset && (this.top + this.height) <= (window.pageYOffset + window.innerHeight) && (this.left + this.width) <= (window.pageXOffset + window.innerWidth));
                };
                t.prototype.getProcessedPositionValue = function(e) {
                    if (this.queryPositionInfo) {
                        return this.queryPositionInfo(e);
                    }
                    return e;
                };
                t.prototype.calculateParentPosition = function(e) {
                    if (g(e)) {
                        return {
                            left: 0,
                            top: 0
                        };
                    }
                    var t = e.getBoundingClientRect();
                    var i = getComputedStyle(e);
                    return {
                        left: (t.left + window.pageXOffset) - parseInt(i.marginLeft, 10),
                        top: (t.top + window.pageYOffset) - parseInt(i.marginTop, 10)
                    };
                };
                t.prototype.intDrag = function(e) {
                    if (!b(e.changedTouches) && (e.changedTouches.length !== 1)) {
                        return;
                    }
                    if (this.clone && e.changedTouches && eV.isDevice && eV.isTouch) {
                        e.preventDefault();
                    }
                    var t;
                    var i;
                    this.position = this.getMousePosition(e, this.isDragScroll);
                    var n = this.getDocumentWidthHeight('Height');
                    if (n < this.position.top) {
                        this.position.top = n;
                    }
                    var r = this.getDocumentWidthHeight('Width');
                    if (r < this.position.left) {
                        this.position.left = r;
                    }
                    if (this.drag) {
                        var s = this.getProperTargetElement(e);
                        this.trigger('drag', {
                            event: e,
                            element: this.element,
                            target: s
                        });
                    }
                    var o = this.checkTargetElement(e);
                    if (o.target && o.instance) {
                        var a = true;
                        if (this.hoverObject) {
                            if (this.hoverObject.instance !== o.instance) {
                                this.triggerOutFunction(e, o);
                            } else {
                                a = false;
                            }
                        }
                        if (a) {
                            o.instance.dragData[this.scope] = this.droppables[this.scope];
                            o.instance.intOver(e, o.target);
                            this.hoverObject = o;
                        }
                    } else if (this.hoverObject) {
                        this.triggerOutFunction(e, o);
                    }
                    var l = this.droppables[this.scope].helper;
                    this.parentClientRect = this.calculateParentPosition(this.helperElement.offsetParent);
                    var h = this.parentClientRect.left;
                    var c = this.parentClientRect.top;
                    var d = this.getCoordinates(e);
                    var p = d.pageX;
                    var u = d.pageY;
                    var f = this.position.left - this.diffX;
                    var m = this.position.top - this.diffY;
                    var v = getComputedStyle(l);
                    if (this.dragArea) {
                        if (this.pageX !== p || this.skipDistanceCheck) {
                            var y = l.offsetWidth + (parseFloat(v.marginLeft) + parseFloat(v.marginRight));
                            if (this.dragLimit.left > f && f > 0) {
                                t = this.dragLimit.left;
                            } else if (this.dragLimit.right + window.pageXOffset < f + y && f > 0) {
                                t = f - (f - this.dragLimit.right) + window.pageXOffset - y;
                            } else {
                                t = f < 0 ? this.dragLimit.left : f;
                            }
                        }
                        if (this.pageY !== u || this.skipDistanceCheck) {
                            var C = l.offsetHeight + (parseFloat(v.marginTop) + parseFloat(v.marginBottom));
                            if (this.dragLimit.top > m && m > 0) {
                                i = this.dragLimit.top;
                            } else if (this.dragLimit.bottom + window.pageYOffset < m + C && m > 0) {
                                i = m - (m - this.dragLimit.bottom) + window.pageYOffset - C;
                            } else {
                                i = m < 0 ? this.dragLimit.top : m;
                            }
                        }
                    } else {
                        t = f;
                        i = m;
                    }
                    var E = c + this.borderWidth.top;
                    var S = h + this.borderWidth.left;
                    if (this.dragProcessStarted) {
                        if (g(i)) {
                            i = this.prevTop;
                        }
                        if (g(t)) {
                            t = this.prevLeft;
                        }
                    }
                    var w;
                    var T;
                    if (this.dragArea) {
                        this.dragLimit.top = this.clone ? this.dragLimit.top : 0;
                        w = (i - E) < 0 ? this.dragLimit.top : (i - E);
                        T = (t - S) < 0 ? this.dragElePosition.left : (t - S);
                    } else {
                        w = i - E;
                        T = t - S;
                    }
                    var k = parseFloat(getComputedStyle(this.element).marginTop);
                    if (k > 0) {
                        if (this.clone) {
                            w += k;
                            if (m < 0) {
                                if ((k + m) >= 0) {
                                    w = k + m;
                                } else {
                                    w -= k;
                                }
                            }
                            w = (this.dragLimit.bottom < w) ? this.dragLimit.bottom : w;
                        }
                        if ((i - E) < 0) {
                            if (m + k + (l.offsetHeight - E) >= 0) {
                                var x = this.dragLimit.top + m - E;
                                if ((x + k + E) < 0) {
                                    w -= k + E;
                                } else {
                                    w = x;
                                }
                            } else {
                                w -= k + E;
                            }
                        }
                    }
                    if (this.enableScrollHandler && !this.clone) {
                        w -= this.parentScrollY;
                        T -= this.parentScrollX;
                    }
                    var L = this.getProcessedPositionValue({
                        top: w + 'px',
                        left: T + 'px'
                    });
                    e6(l, this.getDragPosition(L));
                    if (!this.elementInViewport(l) && this.enableAutoScroll && !this.helperElement.classList.contains('e-treeview')) {
                        this.helperElement.scrollIntoView();
                    }
                    var N = document.querySelectorAll(':hover');
                    if (this.enableAutoScroll && this.helperElement.classList.contains('e-treeview')) {
                        if (N.length === 0) {
                            N = this.getPathElements(e);
                        }
                        var D = this.getScrollParent(N, false);
                        if (this.elementInViewport(this.helperElement)) {
                            this.getScrollPosition(D, w);
                        } else if (!this.elementInViewport(this.helperElement)) {
                            N = [].slice.call(document.querySelectorAll(':hover'));
                            if (N.length === 0) {
                                N = this.getPathElements(e);
                            }
                            D = this.getScrollParent(N, true);
                            this.getScrollPosition(D, w);
                        }
                    }
                    this.dragProcessStarted = true;
                    this.prevLeft = t;
                    this.prevTop = i;
                    this.position.left = t;
                    this.position.top = i;
                    this.pageX = p;
                    this.pageY = u;
                };
                t.prototype.getScrollParent = function(e, t) {
                    var i = t ? e.reverse() : e;
                    var n;
                    for(var r = i.length - 1; r >= 0; r--){
                        n = window.getComputedStyle(i[r])['overflow-y'];
                        if ((n === 'auto' || n === 'scroll') && i[r].scrollHeight > i[r].clientHeight) {
                            return i[r];
                        }
                    }
                    n = window.getComputedStyle(document.scrollingElement)['overflow-y'];
                    if (n === 'visible') {
                        document.scrollingElement.style.overflow = 'auto';
                        return document.scrollingElement;
                    }
                };
                t.prototype.getScrollPosition = function(e, t) {
                    if (e && e === document.scrollingElement) {
                        if ((e.clientHeight - e.getBoundingClientRect().top - this.helperElement.clientHeight) < t && e.getBoundingClientRect().height > t) {
                            e.scrollTop += this.helperElement.clientHeight;
                        } else if (e.scrollHeight - e.clientHeight > t) {
                            e.scrollTop -= this.helperElement.clientHeight;
                        }
                    } else if (e && e !== document.scrollingElement) {
                        if ((e.clientHeight + e.getBoundingClientRect().top - this.helperElement.clientHeight) < t) {
                            e.scrollTop += this.helperElement.clientHeight;
                        } else if (e.getBoundingClientRect().top > (t - this.helperElement.clientHeight)) {
                            e.scrollTop -= this.helperElement.clientHeight;
                        }
                    }
                };
                t.prototype.getPathElements = function(e) {
                    var t = e.clientX > 0 ? e.clientX : 0;
                    var i = e.clientY > 0 ? e.clientY : 0;
                    return document.elementsFromPoint(t, i);
                };
                t.prototype.triggerOutFunction = function(e, t) {
                    this.hoverObject.instance.intOut(e, t.target);
                    this.hoverObject.instance.dragData[this.scope] = null;
                    this.hoverObject = null;
                };
                t.prototype.getDragPosition = function(e) {
                    var t = v({}, e);
                    if (this.axis) {
                        if (this.axis === 'x') {
                            delete t.top;
                        } else if (this.axis === 'y') {
                            delete t.left;
                        }
                    }
                    return t;
                };
                t.prototype.getDocumentWidthHeight = function(e) {
                    var t = document.body;
                    var i = document.documentElement;
                    var n = Math.max(t['scroll' + e], i['scroll' + e], t['offset' + e], i['offset' + e], i['client' + e]);
                    return n;
                };
                t.prototype.intDragStop = function(e) {
                    this.dragProcessStarted = false;
                    if (!b(e.changedTouches) && (e.changedTouches.length !== 1)) {
                        return;
                    }
                    var t = [
                        'touchend',
                        'pointerup',
                        'mouseup'
                    ];
                    if (t.indexOf(e.type) !== -1) {
                        if (this.dragStop) {
                            var i = this.getProperTargetElement(e);
                            this.trigger('dragStop', {
                                event: e,
                                element: this.element,
                                target: i,
                                helper: this.helperElement
                            });
                        }
                        this.intDestroy(e);
                    } else {
                        this.element.setAttribute('aria-grabbed', 'false');
                    }
                    var n = this.checkTargetElement(e);
                    if (n.target && n.instance) {
                        n.instance.dragStopCalled = true;
                        n.instance.dragData[this.scope] = this.droppables[this.scope];
                        n.instance.intDrop(e, n.target);
                    }
                    this.setGlobalDroppables(true);
                    document.body.classList.remove('e-prevent-select');
                };
                t.prototype.intDestroy = function(e) {
                    this.dragProcessStarted = false;
                    this.toggleEvents();
                    document.body.classList.remove('e-prevent-select');
                    this.element.setAttribute('aria-grabbed', 'false');
                    e_.remove(document, eV.touchMoveEvent, this.intDragStart);
                    e_.remove(document, eV.touchEndEvent, this.intDragStop);
                    e_.remove(document, eV.touchEndEvent, this.intDestroy);
                    e_.remove(document, eV.touchMoveEvent, this.intDrag);
                    if (this.isDragStarted()) {
                        this.isDragStarted(true);
                    }
                };
                t.prototype.onPropertyChanged = function(e, t) {};
                t.prototype.getModuleName = function() {
                    return 'draggable';
                };
                t.prototype.isDragStarted = function(e) {
                    if (e) {
                        ia.isDragged = !ia.isDragged;
                    }
                    return ia.isDragged;
                };
                t.prototype.setDragArea = function() {
                    var e;
                    var t;
                    var i = 0;
                    var n = 0;
                    var r;
                    var s = typeof this.dragArea;
                    if (s === 'string') {
                        r = e3(this.dragArea);
                    } else {
                        r = this.dragArea;
                    }
                    if (r) {
                        var o = r.getBoundingClientRect();
                        e = r.scrollWidth ? r.scrollWidth : o.right - o.left;
                        t = r.scrollHeight ? r.scrollHeight : o.bottom - o.top;
                        var a = [
                            'Top',
                            'Left',
                            'Bottom',
                            'Right'
                        ];
                        var l = getComputedStyle(r);
                        for(var h = 0; h < a.length; h++){
                            var c = a[h];
                            var d = l['border' + c + 'Width'];
                            var p = l['padding' + c];
                            var u = c.toLowerCase();
                            this.borderWidth[u] = isNaN(parseFloat(d)) ? 0 : parseFloat(d);
                            this.padding[u] = isNaN(parseFloat(p)) ? 0 : parseFloat(p);
                        }
                        i = o.top;
                        n = o.left;
                        this.dragLimit.left = n + this.borderWidth.left + this.padding.left;
                        this.dragLimit.top = r.offsetTop + this.borderWidth.top + this.padding.top;
                        this.dragLimit.right = n + e - (this.borderWidth.right + this.padding.right);
                        this.dragLimit.bottom = i + t - (this.borderWidth.bottom + this.padding.bottom);
                    }
                };
                t.prototype.getProperTargetElement = function(e) {
                    var t = this.getCoordinates(e);
                    var i;
                    var n = this.helperElement.style.pointerEvents || '';
                    if (w(e.target, this.helperElement) || e.type.indexOf('touch') !== -1) {
                        this.helperElement.style.pointerEvents = 'none';
                        i = document.elementFromPoint(t.clientX, t.clientY);
                        this.helperElement.style.pointerEvents = n;
                    } else {
                        i = e.target;
                    }
                    return i;
                };
                t.prototype.currentStateCheck = function(e, t) {
                    var i;
                    if (!g(this.currentStateTarget) && this.currentStateTarget !== e) {
                        i = this.currentStateTarget;
                    } else {
                        i = !g(t) ? t : e;
                    }
                    return i;
                };
                t.prototype.getMousePosition = function(e, t) {
                    var i = e.srcElement !== undefined ? e.srcElement : e.target;
                    var n = this.getCoordinates(e);
                    var r;
                    var s;
                    var o = g(i.offsetParent);
                    if (t) {
                        r = this.clone ? n.pageX : (n.pageX + (o ? 0 : i.offsetParent.scrollLeft)) - this.relativeXPosition;
                        s = this.clone ? n.pageY : (n.pageY + (o ? 0 : i.offsetParent.scrollTop)) - this.relativeYPosition;
                    } else {
                        r = this.clone ? n.pageX : (n.pageX + window.pageXOffset) - this.relativeXPosition;
                        s = this.clone ? n.pageY : (n.pageY + window.pageYOffset) - this.relativeYPosition;
                    }
                    return {
                        left: r - (this.margin.left + this.cursorAt.left),
                        top: s - (this.margin.top + this.cursorAt.top)
                    };
                };
                t.prototype.getCoordinates = function(e) {
                    if (e.type.indexOf('touch') > -1) {
                        return e.changedTouches[0];
                    }
                    return e;
                };
                t.prototype.getHelperElement = function(e) {
                    var t;
                    if (this.clone) {
                        if (this.helper) {
                            t = this.helper({
                                sender: e,
                                element: this.target
                            });
                        } else {
                            t = eW('div', {
                                className: 'e-drag-helper e-block-touch',
                                innerHTML: 'Draggable'
                            });
                            document.body.appendChild(t);
                        }
                    } else {
                        t = this.element;
                    }
                    return t;
                };
                t.prototype.setGlobalDroppables = function(e, t, i) {
                    this.droppables[this.scope] = e ? null : {
                        draggable: t,
                        helper: i,
                        draggedElement: this.element
                    };
                };
                t.prototype.checkTargetElement = function(e) {
                    var t = this.getProperTargetElement(e);
                    var i = this.getDropInstance(t);
                    if (!i && t && !g(t.parentNode)) {
                        var n = e5(t.parentNode, '.e-droppable') || t.parentElement;
                        if (n) {
                            i = this.getDropInstance(n);
                        }
                    }
                    return {
                        target: t,
                        instance: i
                    };
                };
                t.prototype.getDropInstance = function(e) {
                    var t = 'getModuleName';
                    var i;
                    var n = e && e.ej2_instances;
                    if (n) {
                        for(var r = 0, s = n; r < s.length; r++){
                            var o = s[r];
                            if (o[t]() === 'droppable') {
                                i = o;
                                break;
                            }
                        }
                    }
                    return i;
                };
                t.prototype.destroy = function() {
                    this.toggleEvents(true);
                    e.prototype.destroy.call(this);
                };
                var i;
                it([
                    tw({}, il)
                ], t.prototype, "cursorAt", void 0);
                it([
                    tS(true)
                ], t.prototype, "clone", void 0);
                it([
                    tS()
                ], t.prototype, "dragArea", void 0);
                it([
                    tS()
                ], t.prototype, "isDragScroll", void 0);
                it([
                    tS()
                ], t.prototype, "isReplaceDragEle", void 0);
                it([
                    tS(true)
                ], t.prototype, "isPreventSelect", void 0);
                it([
                    tL()
                ], t.prototype, "drag", void 0);
                it([
                    tL()
                ], t.prototype, "dragStart", void 0);
                it([
                    tL()
                ], t.prototype, "dragStop", void 0);
                it([
                    tS(1)
                ], t.prototype, "distance", void 0);
                it([
                    tS()
                ], t.prototype, "handle", void 0);
                it([
                    tS()
                ], t.prototype, "abort", void 0);
                it([
                    tS()
                ], t.prototype, "helper", void 0);
                it([
                    tS('default')
                ], t.prototype, "scope", void 0);
                it([
                    tS('')
                ], t.prototype, "dragTarget", void 0);
                it([
                    tS()
                ], t.prototype, "axis", void 0);
                it([
                    tS()
                ], t.prototype, "queryPositionInfo", void 0);
                it([
                    tS(false)
                ], t.prototype, "enableTailMode", void 0);
                it([
                    tS(false)
                ], t.prototype, "skipDistanceCheck", void 0);
                it([
                    tS(true)
                ], t.prototype, "preventDefault", void 0);
                it([
                    tS(false)
                ], t.prototype, "enableAutoScroll", void 0);
                it([
                    tS(false)
                ], t.prototype, "enableTapHold", void 0);
                it([
                    tS(750)
                ], t.prototype, "tapHoldThreshold", void 0);
                it([
                    tS(false)
                ], t.prototype, "enableScrollHandler", void 0);
                t = i = it([
                    tN
                ], t);
                return t;
            }(ts));
            ;
            var ic = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var id = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var ip = (function(e) {
                ic(t, e);
                function t(t, i) {
                    var n = e.call(this, i, t) || this;
                    n.mouseOver = false;
                    n.dragData = {};
                    n.dragStopCalled = false;
                    n.bind();
                    return n;
                }
                t.prototype.bind = function() {
                    this.wireEvents();
                };
                t.prototype.wireEvents = function() {
                    e_.add(this.element, eV.touchEndEvent, this.intDrop, this);
                };
                t.prototype.onPropertyChanged = function(e, t) {};
                t.prototype.getModuleName = function() {
                    return 'droppable';
                };
                t.prototype.intOver = function(e, t) {
                    if (!this.mouseOver) {
                        var i = this.dragData[this.scope];
                        this.trigger('over', {
                            event: e,
                            target: t,
                            dragData: i
                        });
                        this.mouseOver = true;
                    }
                };
                t.prototype.intOut = function(e, t) {
                    if (this.mouseOver) {
                        this.trigger('out', {
                            evt: e,
                            target: t
                        });
                        this.mouseOver = false;
                    }
                };
                t.prototype.intDrop = function(e, t) {
                    if (!this.dragStopCalled) {
                        return;
                    } else {
                        this.dragStopCalled = false;
                    }
                    var i = true;
                    var n = this.dragData[this.scope];
                    var r = n ? (n.helper && eG(n.helper)) : false;
                    var s;
                    if (r) {
                        s = this.isDropArea(e, n.helper, t);
                        if (this.accept) {
                            i = te(n.helper, this.accept);
                        }
                    }
                    if (r && this.drop && s.canDrop && i) {
                        this.trigger('drop', {
                            event: e,
                            target: s.target,
                            droppedElement: n.helper,
                            dragData: n
                        });
                    }
                    this.mouseOver = false;
                };
                t.prototype.isDropArea = function(e, t, i) {
                    var n = {
                        canDrop: true,
                        target: i || e.target
                    };
                    var r = e.type === 'touchend';
                    if (r || n.target === t) {
                        t.style.display = 'none';
                        var s = r ? (e.changedTouches[0]) : e;
                        var o = document.elementFromPoint(s.clientX, s.clientY);
                        n.canDrop = false;
                        n.canDrop = w(o, this.element);
                        if (n.canDrop) {
                            n.target = o;
                        }
                        t.style.display = '';
                    }
                    return n;
                };
                t.prototype.destroy = function() {
                    e_.remove(this.element, eV.touchEndEvent, this.intDrop);
                    e.prototype.destroy.call(this);
                };
                id([
                    tS()
                ], t.prototype, "accept", void 0);
                id([
                    tS('default')
                ], t.prototype, "scope", void 0);
                id([
                    tL()
                ], t.prototype, "drop", void 0);
                id([
                    tL()
                ], t.prototype, "over", void 0);
                id([
                    tL()
                ], t.prototype, "out", void 0);
                t = id([
                    tN
                ], t);
                return t;
            }(ts));
            ;
            var iu = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var im = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var iv = {
                'backspace': 8,
                'tab': 9,
                'enter': 13,
                'shift': 16,
                'control': 17,
                'alt': 18,
                'pause': 19,
                'capslock': 20,
                'space': 32,
                'escape': 27,
                'pageup': 33,
                'pagedown': 34,
                'end': 35,
                'home': 36,
                'leftarrow': 37,
                'uparrow': 38,
                'rightarrow': 39,
                'downarrow': 40,
                'insert': 45,
                'delete': 46,
                'f1': 112,
                'f2': 113,
                'f3': 114,
                'f4': 115,
                'f5': 116,
                'f6': 117,
                'f7': 118,
                'f8': 119,
                'f9': 120,
                'f10': 121,
                'f11': 122,
                'f12': 123,
                'semicolon': 186,
                'plus': 187,
                'comma': 188,
                'minus': 189,
                'dot': 190,
                'forwardslash': 191,
                'graveaccent': 192,
                'openbracket': 219,
                'backslash': 220,
                'closebracket': 221,
                'singlequote': 222
            };
            var ig = (function(e) {
                iu(t, e);
                function t(t, n) {
                    var r = e.call(this, n, t) || this;
                    r.keyPressHandler = function(e) {
                        var t = e.altKey;
                        var n = e.ctrlKey;
                        var s = e.shiftKey;
                        var o = e.which;
                        var a = Object.keys(r.keyConfigs);
                        for(var l = 0, h = a; l < h.length; l++){
                            var c = h[l];
                            var d = r.keyConfigs[c].split(',');
                            for(var p = 0, u = d; p < u.length; p++){
                                var f = u[p];
                                var m = i.getKeyConfigData(f.trim());
                                if (t === m.altKey && n === m.ctrlKey && s === m.shiftKey && o === m.keyCode) {
                                    e.action = c;
                                    if (r.keyAction) {
                                        r.keyAction(e);
                                    }
                                }
                            }
                        }
                    };
                    r.bind();
                    return r;
                }
                i = t;
                t.prototype.destroy = function() {
                    this.unwireEvents();
                    e.prototype.destroy.call(this);
                };
                t.prototype.onPropertyChanged = function(e, t) {};
                t.prototype.bind = function() {
                    this.wireEvents();
                };
                t.prototype.getModuleName = function() {
                    return 'keyboard';
                };
                t.prototype.wireEvents = function() {
                    this.element.addEventListener(this.eventName, this.keyPressHandler);
                };
                t.prototype.unwireEvents = function() {
                    this.element.removeEventListener(this.eventName, this.keyPressHandler);
                };
                t.getKeyConfigData = function(e) {
                    if (e in this.configCache) {
                        return this.configCache[e];
                    }
                    var t = e.toLowerCase().split('+');
                    var n = {
                        altKey: (t.indexOf('alt') !== -1 ? true : false),
                        ctrlKey: (t.indexOf('ctrl') !== -1 ? true : false),
                        shiftKey: (t.indexOf('shift') !== -1 ? true : false),
                        keyCode: null
                    };
                    if (t[t.length - 1].length > 1 && !!Number(t[t.length - 1])) {
                        n.keyCode = Number(t[t.length - 1]);
                    } else {
                        n.keyCode = i.getKeyCode(t[t.length - 1]);
                    }
                    i.configCache[e] = n;
                    return n;
                };
                t.getKeyCode = function(e) {
                    return iv[e] || e.toUpperCase().charCodeAt(0);
                };
                var i;
                t.configCache = {};
                im([
                    tS({})
                ], t.prototype, "keyConfigs", void 0);
                im([
                    tS('keyup')
                ], t.prototype, "eventName", void 0);
                im([
                    tL()
                ], t.prototype, "keyAction", void 0);
                t = i = im([
                    tN
                ], t);
                return t;
            }(ts));
            ;
            var ib = (function() {
                function e(e, t, i) {
                    this.controlName = e;
                    this.localeStrings = t;
                    this.setLocale(i || eg);
                }
                e.prototype.setLocale = function(t) {
                    var i = this.intGetControlConstant(e.locale, t);
                    this.currentLocale = i || this.localeStrings;
                };
                e.load = function(e) {
                    this.locale = v(this.locale, e, {}, true);
                };
                e.prototype.getConstant = function(e) {
                    if (!g(this.currentLocale[e])) {
                        return this.currentLocale[e];
                    } else {
                        return this.localeStrings[e] || '';
                    }
                };
                e.prototype.intGetControlConstant = function(e, t) {
                    if ((e)[t]) {
                        return (e)[t][this.controlName];
                    }
                    return null;
                };
                e.locale = {};
                return e;
            }());
            ;
            var iy = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var iC = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var iE = (function(e) {
                iy(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                iC([
                    tS(50)
                ], t.prototype, "swipeThresholdDistance", void 0);
                return t;
            }(tX));
            var iS = /(Up|Down)/;
            var iw = (function(e) {
                iy(t, e);
                function t(t, i) {
                    var n = e.call(this, i, t) || this;
                    n.touchAction = true;
                    n.tapCount = 0;
                    n.startEvent = function(e) {
                        if (n.touchAction === true) {
                            var t = n.updateChangeTouches(e);
                            if (e.changedTouches !== undefined) {
                                n.touchAction = false;
                            }
                            n.isTouchMoved = false;
                            n.movedDirection = '';
                            n.startPoint = n.lastMovedPoint = {
                                clientX: t.clientX,
                                clientY: t.clientY
                            };
                            n.startEventData = t;
                            n.hScrollLocked = n.vScrollLocked = false;
                            n.tStampStart = Date.now();
                            n.timeOutTapHold = setTimeout(function() {
                                n.tapHoldEvent(e);
                            }, n.tapHoldThreshold);
                            e_.add(n.element, eV.touchMoveEvent, n.moveEvent, n);
                            e_.add(n.element, eV.touchEndEvent, n.endEvent, n);
                            e_.add(n.element, eV.touchCancelEvent, n.cancelEvent, n);
                        }
                    };
                    n.moveEvent = function(e) {
                        var t = n.updateChangeTouches(e);
                        n.movedPoint = t;
                        n.isTouchMoved = !(t.clientX === n.startPoint.clientX && t.clientY === n.startPoint.clientY);
                        var i = {};
                        if (n.isTouchMoved) {
                            clearTimeout(n.timeOutTapHold);
                            n.calcScrollPoints(e);
                            var r = {
                                startEvents: n.startEventData,
                                originalEvent: e,
                                startX: n.startPoint.clientX,
                                startY: n.startPoint.clientY,
                                distanceX: n.distanceX,
                                distanceY: n.distanceY,
                                scrollDirection: n.scrollDirection,
                                velocity: n.getVelocity(t)
                            };
                            i = v(i, {}, r);
                            n.trigger('scroll', i);
                            n.lastMovedPoint = {
                                clientX: t.clientX,
                                clientY: t.clientY
                            };
                        }
                    };
                    n.cancelEvent = function(e) {
                        clearTimeout(n.timeOutTapHold);
                        clearTimeout(n.timeOutTap);
                        n.tapCount = 0;
                        n.swipeFn(e);
                        e_.remove(n.element, eV.touchCancelEvent, n.cancelEvent);
                    };
                    n.endEvent = function(e) {
                        n.swipeFn(e);
                        if (!n.isTouchMoved) {
                            if (typeof n.tap === 'function') {
                                n.trigger('tap', {
                                    originalEvent: e,
                                    tapCount: ++n.tapCount
                                });
                                n.timeOutTap = setTimeout(function() {
                                    n.tapCount = 0;
                                }, n.tapThreshold);
                            }
                        }
                        n.modeclear();
                    };
                    n.swipeFn = function(e) {
                        clearTimeout(n.timeOutTapHold);
                        clearTimeout(n.timeOutTap);
                        var t = n.updateChangeTouches(e);
                        var i = t.clientX - n.startPoint.clientX;
                        var r = t.clientY - n.startPoint.clientY;
                        i = Math.floor(i < 0 ? -1 * i : i);
                        r = Math.floor(r < 0 ? -1 * r : i);
                        n.isTouchMoved = i > 1 || r > 1;
                        var s = (/Firefox/).test(eV.userAgent);
                        if (s && t.clientX === 0 && t.clientY === 0 && e.type === 'mouseup') {
                            n.isTouchMoved = false;
                        }
                        n.endPoint = t;
                        n.calcPoints(e);
                        var o = {
                            originalEvent: e,
                            startEvents: n.startEventData,
                            startX: n.startPoint.clientX,
                            startY: n.startPoint.clientY,
                            distanceX: n.distanceX,
                            distanceY: n.distanceY,
                            swipeDirection: n.movedDirection,
                            velocity: n.getVelocity(t)
                        };
                        if (n.isTouchMoved) {
                            var a = void 0;
                            var l = n.swipeSettings.swipeThresholdDistance;
                            a = v(a, n.defaultArgs, o);
                            var h = false;
                            var c = n.element;
                            var d = n.isScrollable(c);
                            var p = iS.test(n.movedDirection);
                            if ((l < n.distanceX && !p) || (l < n.distanceY && p)) {
                                if (!d) {
                                    h = true;
                                } else {
                                    h = n.checkSwipe(c, p);
                                }
                            }
                            if (h) {
                                n.trigger('swipe', a);
                            }
                        }
                        n.modeclear();
                    };
                    n.modeclear = function() {
                        n.modeClear = setTimeout(function() {
                            n.touchAction = true;
                        }, (typeof n.tap !== 'function' ? 0 : 20));
                        n.lastTapTime = new Date().getTime();
                        e_.remove(n.element, eV.touchMoveEvent, n.moveEvent);
                        e_.remove(n.element, eV.touchEndEvent, n.endEvent);
                        e_.remove(n.element, eV.touchCancelEvent, n.cancelEvent);
                    };
                    n.bind();
                    return n;
                }
                t.prototype.onPropertyChanged = function(e, t) {};
                t.prototype.bind = function() {
                    this.wireEvents();
                    if (eV.isIE) {
                        this.element.classList.add('e-block-touch');
                    }
                };
                t.prototype.destroy = function() {
                    this.unwireEvents();
                    e.prototype.destroy.call(this);
                };
                t.prototype.wireEvents = function() {
                    e_.add(this.element, eV.touchStartEvent, this.startEvent, this);
                };
                t.prototype.unwireEvents = function() {
                    e_.remove(this.element, eV.touchStartEvent, this.startEvent);
                };
                t.prototype.getModuleName = function() {
                    return 'touch';
                };
                t.prototype.isScrollable = function(e) {
                    var t = getComputedStyle(e);
                    var i = t.overflow + t.overflowX + t.overflowY;
                    if ((/(auto|scroll)/).test(i)) {
                        return true;
                    }
                    return false;
                };
                t.prototype.tapHoldEvent = function(e) {
                    this.tapCount = 0;
                    this.touchAction = true;
                    var t;
                    e_.remove(this.element, eV.touchMoveEvent, this.moveEvent);
                    e_.remove(this.element, eV.touchEndEvent, this.endEvent);
                    t = {
                        originalEvent: e
                    };
                    this.trigger('tapHold', t);
                    e_.remove(this.element, eV.touchCancelEvent, this.cancelEvent);
                };
                t.prototype.calcPoints = function(e) {
                    var t = this.updateChangeTouches(e);
                    this.defaultArgs = {
                        originalEvent: e
                    };
                    this.distanceX = Math.abs((Math.abs(t.clientX) - Math.abs(this.startPoint.clientX)));
                    this.distanceY = Math.abs((Math.abs(t.clientY) - Math.abs(this.startPoint.clientY)));
                    if (this.distanceX > this.distanceY) {
                        this.movedDirection = (t.clientX > this.startPoint.clientX) ? 'Right' : 'Left';
                    } else {
                        this.movedDirection = (t.clientY < this.startPoint.clientY) ? 'Up' : 'Down';
                    }
                };
                t.prototype.calcScrollPoints = function(e) {
                    var t = this.updateChangeTouches(e);
                    this.defaultArgs = {
                        originalEvent: e
                    };
                    this.distanceX = Math.abs((Math.abs(t.clientX) - Math.abs(this.lastMovedPoint.clientX)));
                    this.distanceY = Math.abs((Math.abs(t.clientY) - Math.abs(this.lastMovedPoint.clientY)));
                    if ((this.distanceX > this.distanceY || this.hScrollLocked === true) && this.vScrollLocked === false) {
                        this.scrollDirection = (t.clientX > this.lastMovedPoint.clientX) ? 'Right' : 'Left';
                        this.hScrollLocked = true;
                    } else {
                        this.scrollDirection = (t.clientY < this.lastMovedPoint.clientY) ? 'Up' : 'Down';
                        this.vScrollLocked = true;
                    }
                };
                t.prototype.getVelocity = function(e) {
                    var t = e.clientX;
                    var i = e.clientY;
                    var n = Date.now();
                    var r = t - this.startPoint.clientX;
                    var s = i - this.startPoint.clientX;
                    var o = n - this.tStampStart;
                    return Math.sqrt(r * r + s * s) / o;
                };
                t.prototype.checkSwipe = function(e, t) {
                    var i = [
                        'scroll',
                        'offset'
                    ];
                    var n = t ? [
                        'Height',
                        'Top'
                    ] : [
                        'Width',
                        'Left'
                    ];
                    if ((e[i[0] + n[0]] <= e[i[1] + n[0]])) {
                        return true;
                    }
                    return (e[i[0] + n[1]] === 0) || (e[i[1] + n[0]] + e[i[0] + n[1]] >= e[i[0] + n[0]]);
                };
                t.prototype.updateChangeTouches = function(e) {
                    var t = e.changedTouches && e.changedTouches.length !== 0 ? e.changedTouches[0] : e;
                    return t;
                };
                iC([
                    tL()
                ], t.prototype, "tap", void 0);
                iC([
                    tL()
                ], t.prototype, "tapHold", void 0);
                iC([
                    tL()
                ], t.prototype, "swipe", void 0);
                iC([
                    tL()
                ], t.prototype, "scroll", void 0);
                iC([
                    tS(350)
                ], t.prototype, "tapThreshold", void 0);
                iC([
                    tS(750)
                ], t.prototype, "tapHoldThreshold", void 0);
                iC([
                    tw({}, iE)
                ], t.prototype, "swipeSettings", void 0);
                t = iC([
                    tN
                ], t);
                return t;
            }(ts));
            ;
            var iT = new RegExp('\\n|\\r|\\s\\s+', 'g');
            var ik = new RegExp(/'|"/g);
            var ix = new RegExp('if ?\\(');
            var iL = new RegExp('else if ?\\(');
            var iN = new RegExp('else');
            var iD = new RegExp('for ?\\(');
            var iO = new RegExp('(/if|/for)');
            var iA = new RegExp('\\((.*)\\)', '');
            var iP = new RegExp('^[0-9]+$', 'g');
            var iM = new RegExp('[\\w"\'.\\s+]+', 'g');
            var iR = new RegExp('"(.*?)"', 'g');
            var iB = new RegExp('[\\w"\'@#$.\\s-+]+', 'g');
            var iI = new RegExp('\\${([^}]*)}', 'g');
            var iH = /^\..*/gm;
            var iF = /\\/gi;
            var ij = /\\\\/gi;
            var iz = new RegExp('[\\w"\'@#$.\\s+]+', 'g');
            var iq = /\window\./gm;
            function iV(e) {
                if (e) {
                    iI = e;
                }
                return iI;
            }
            function i_(e, t, i) {
                var n = 'data';
                var r = iU(e, n, t, i);
                var s = "var valueRegEx = (/value=\\'([A-Za-z0-9 _]*)((.)([\\w)(!-;?-\u25A0\\s]+)['])/g);\n    var hrefRegex = (/(?:href)([\\s='\"./]+)([\\w-./?=&\\\\#\"]+)((.)([\\w)(!-;/?-\u25A0\\s]+)['])/g);\n    if(str.match(valueRegEx)){\n        var check = str.match(valueRegEx);\n        var str1 = str;\n        for (var i=0; i < check.length; i++) {\n            var check1 = str.match(valueRegEx)[i].split('value=')[1];\n            var change = check1.match(/^'/) !== null ? check1.replace(/^'/, '\"') : check1;\n            change =change.match(/.$/)[0] === '\\'' ? change.replace(/.$/,'\"') : change;\n            str1 = str1.replace(check1, change);\n        }\n        str = str.replace(str, str1);\n    }\n    else if (str.match(/(?:href='')/) === null) {\n        if(str.match(hrefRegex)) {\n            var check = str.match(hrefRegex);\n            var str1 = str;\n            for (var i=0; i < check.length; i++) {\n                var check1 = str.match(hrefRegex)[i].split('href=')[1];\n                if (check1) {\n                    var change = check1.match(/^'/) !== null ? check1.replace(/^'/, '\"') : check1;\n                    change =change.match(/.$/)[0] === '\\'' ? change.replace(/.$/,'\"') : change;\n                    str1 = str1.replace(check1, change);\n                }\n            }\n            str = str.replace(str, str1);\n        }\n    }\n    ";
                var o = "var str=\"" + r + "\";" + s + " return str;";
                var a = new Function(n, o);
                return a.bind(t);
            }
            function iU(e, t, i, n) {
                var r = 0;
                var s = [];
                var o = e.match(/class="([^"]+|)\s{2}/g);
                var a = '';
                if (o) {
                    o.forEach(function(t) {
                        a = t.replace(/\s\s+/g, ' ');
                        e = e.replace(t, a);
                    });
                }
                return e.replace(iT, '').replace(iR, '\'$1\'').replace(iI, function(e, o, a, l) {
                    var h = /@|#|\$/gm;
                    var c = o.match(iA);
                    if (c) {
                        var d = c[1];
                        if (iL.test(o)) {
                            o = '";} ' + o.replace(c[1], d.replace(iM, function(e) {
                                e = e.trim();
                                return iW(e, !(ik.test(e)) && (s.indexOf(e) === -1), t, s, n);
                            })) + '{ \n str = str + "';
                        } else if (ix.test(o)) {
                            o = '"; ' + o.replace(c[1], d.replace(iB, function(e) {
                                return iG(e, t, s, n);
                            })) + '{ \n str = str + "';
                        } else if (iD.test(o)) {
                            var p = c[1].split(' of ');
                            o = '"; ' + o.replace(c[1], function(e) {
                                s.push(p[0]);
                                s.push(p[0] + 'Index');
                                r = r + 1;
                                return 'var i' + r + '=0; i' + r + ' < ' + iW(p[1], true, t, s, n) + '.length; i' + r + '++';
                            }) + '{ \n ' + p[0] + '= ' + iW(p[1], true, t, s, n) + '[i' + r + ']; \n var ' + p[0] + 'Index=i' + r + '; \n str = str + "';
                        } else {
                            var u = o.split('(');
                            var f = (i && i.hasOwnProperty(u[0]) ? 'this.' : 'global');
                            f = (/\./.test(u[0]) ? '' : f);
                            var m = c[1].split(',');
                            if (c[1].length !== 0 && !(/data/).test(m[0]) && !(/window./).test(m[0])) {
                                c[1] = (f === 'global' ? t + '.' + c[1] : c[1]);
                            }
                            var v = /@|\$|#/gm;
                            var g = /\]\./gm;
                            if (iq.test(o) && g.test(o) || v.test(o)) {
                                var b = /@|\$|#|\]\./gm;
                                if (b.test(o)) {
                                    o = '"+ ' + (f === 'global' ? '' : f) + o.replace(c[1], d.replace(iz, function(e) {
                                        return iG(e, t, s, n);
                                    })) + '+ "';
                                }
                            } else {
                                o = '" + ' + (f === 'global' ? '' : f) + o.replace(d, iW(c[1].replace(/,( |)data.|,/gi, ',' + t + '.').replace(/,( |)data.window/gi, ',window'), (f === 'global' ? false : true), t, s, n)) + '+"';
                            }
                        }
                    } else if (iN.test(o)) {
                        o = '"; ' + o.replace(iN, '} else { \n str = str + "');
                    } else if (!!o.match(iO)) {
                        o = o.replace(iO, '"; \n } \n str = str + "');
                    } else if (h.test(o)) {
                        if (o.match(iF)) {
                            o = iX(o);
                        }
                        o = '"+' + iY(o, (s.indexOf(o) === -1), t, s) + '"]+"';
                    } else {
                        if (o.match(iF)) {
                            o = iX(o);
                            o = '"+' + iY(o, (s.indexOf(o) === -1), t, s) + '"]+"';
                        } else {
                            o = '"+' + iW(o.replace(/,/gi, '+' + t + '.'), (s.indexOf(o) === -1), t, s, n) + '+"';
                        }
                    }
                    return o;
                });
            }
            function iW(e, t, i, n, r) {
                return ((t && !(iP.test(e)) && n.indexOf(e.split('.')[0]) === -1 && !r) ? i + '.' + e : e);
            }
            function iZ(e, t, i, n) {
                var r = /^\..*/gm;
                return ((t && !(iP.test(e)) && n.indexOf(e.split('.')[0]) === -1 && !(r.test(e))) ? i + '.' + e : e);
            }
            function iY(e, t, i, n) {
                return ((t && !(iP.test(e)) && n.indexOf(e.split('.')[0]) === -1) ? i + '["' + e : e);
            }
            function iX(e) {
                var t = '\\\\';
                if (e.match(ij)) {
                    e = e;
                } else {
                    e = e.replace(iF, t);
                }
                return e;
            }
            function iG(e, t, i, n) {
                e = e.trim();
                var r = /\window\./gm;
                if (!r.test(e)) {
                    var s = /'|"/gm;
                    var o = /@|\$|#/gm;
                    if (o.test(e)) {
                        e = iY(e, (i.indexOf(e) === -1), t, i) + '"]';
                    }
                    if (iH.test(e)) {
                        return iZ(e, !(s.test(e)) && (i.indexOf(e) === -1), t, i);
                    } else {
                        return iW(e, !(s.test(e)) && (i.indexOf(e) === -1), t, i, n);
                    }
                } else {
                    return e;
                }
            }
            ;
            var iK = /^[\n\r.]+<tr|^<tr/;
            var iJ = /^[\n\r.]+<svg|^<path|^<g/;
            var i$ = {};
            function iQ() {
                return '-' + Math.random().toString(36).substr(2, 5);
            }
            function i0(e, t, i) {
                var n = i7.compile(e, t, i);
                return function(e, t, i, r, s, o, a, l) {
                    var h = n(e, t, i, a, l);
                    var c = 'BlazorTemplateId';
                    if (N() && !s) {
                        var d = iQ();
                        var p = r + d;
                        if (!i$[r]) {
                            i$[r] = [];
                        }
                        if (!g(o)) {
                            var u = Object.keys(i$[r][o]);
                            for(var f = 0, m = u; f < m.length; f++){
                                var v = m[f];
                                if (v !== c && e[v]) {
                                    i$[r][o][v] = e[v];
                                }
                                if (v === c) {
                                    p = i$[r][o][v];
                                }
                            }
                        } else {
                            e[c] = p;
                            i$[r].push(e);
                        }
                        return i === 'rowTemplate' ? [
                            eW('tr', {
                                id: p,
                                className: 'e-blazor-template'
                            })
                        ] : [
                            eW('div', {
                                id: p,
                                className: 'e-blazor-template'
                            })
                        ];
                    }
                    if (typeof h === 'string') {
                        if (iJ.test(h)) {
                            var b = eW('svg', {
                                innerHTML: h
                            });
                            return b.childNodes;
                        } else {
                            var b = eW((iK.test(h) ? 'table' : 'div'), {
                                innerHTML: h
                            });
                            return b.childNodes;
                        }
                    } else {
                        return h;
                    }
                };
            }
            function i1(e, t, i, n, r) {
                if (isBlazor()) {
                    var s = 'sfBlazor';
                    window[s].updateTemplate(t, i$[e], e, i, r);
                    if (n !== false) {
                        i$[e] = [];
                    }
                }
            }
            function i3(e, t, i) {
                var n = document.getElementById(e);
                if (n) {
                    var r = n.getElementsByClassName('blazor-inner-template');
                    for(var s = 0; s < r.length; s++){
                        var o = ' ';
                        if (!isNullOrUndefined(i)) {
                            o = r[i].getAttribute('data-templateId');
                        } else {
                            o = r[s].getAttribute('data-templateId');
                        }
                        var a = document.getElementById(o);
                        if (a) {
                            var l = a.childNodes.length;
                            for(var h = 0; h < l; h++){
                                if (!isNullOrUndefined(i)) {
                                    r[i].appendChild(a.childNodes[0]);
                                    s = r.length;
                                } else {
                                    r[s].appendChild(a.childNodes[0]);
                                }
                            }
                        }
                    }
                }
            }
            function i2(e) {
                i7.compile = e.compile;
            }
            function i4() {
                return i7.compile;
            }
            var i5 = (function() {
                function e() {}
                e.prototype.compile = function(e, t, i) {
                    if (t === void 0) {
                        t = {};
                    }
                    return i_(e, t);
                };
                return e;
            }());
            var i7 = {
                compile: new i5().compile
            };
            ;
            var i9 = [
                'script',
                'style',
                'iframe[src]',
                'link[href*="javascript:"]',
                'object[type="text/x-scriptlet"]',
                'object[data^="data:text/html;base64"]',
                'img[src^="data:text/html;base64"]',
                '[src^="javascript:"]',
                '[dynsrc^="javascript:"]',
                '[lowsrc^="javascript:"]',
                '[type^="application/x-shockwave-flash"]'
            ];
            var i6 = [
                {
                    attribute: 'href',
                    selector: '[href*="javascript:"]'
                },
                {
                    attribute: 'background',
                    selector: '[background^="javascript:"]'
                },
                {
                    attribute: 'style',
                    selector: '[style*="javascript:"]'
                },
                {
                    attribute: 'style',
                    selector: '[style*="expression("]'
                },
                {
                    attribute: 'href',
                    selector: 'a[href^="data:text/html;base64"]'
                }
            ];
            var i8 = [
                'onchange',
                'onclick',
                'onmouseover',
                'onmouseout',
                'onkeydown',
                'onload',
                'onerror',
                'onblur',
                'onfocus',
                'onbeforeload',
                'onbeforeunload',
                'onkeyup',
                'onsubmit',
                'onafterprint',
                'onbeforeonload',
                'onbeforeprint',
                'onblur',
                'oncanplay',
                'oncanplaythrough',
                'onchange',
                'onclick',
                'oncontextmenu',
                'ondblclick',
                'ondrag',
                'ondragend',
                'ondragenter',
                'ondragleave',
                'ondragover',
                'ondragstart',
                'ondrop',
                'ondurationchange',
                'onemptied',
                'onended',
                'onerror',
                'onerror',
                'onfocus',
                'onformchange',
                'onforminput',
                'onhaschange',
                'oninput',
                'oninvalid',
                'onkeydown',
                'onkeypress',
                'onkeyup',
                'onload',
                'onloadeddata',
                'onloadedmetadata',
                'onloadstart',
                'onmessage',
                'onmousedown',
                'onmousemove',
                'onmouseout',
                'onmouseover',
                'onmouseup',
                'onmousewheel',
                'onoffline',
                'onoine',
                'ononline',
                'onpagehide',
                'onpageshow',
                'onpause',
                'onplay',
                'onplaying',
                'onpopstate',
                'onprogress',
                'onratechange',
                'onreadystatechange',
                'onredo',
                'onresize',
                'onscroll',
                'onseeked',
                'onseeking',
                'onselect',
                'onstalled',
                'onstorage',
                'onsubmit',
                'onsuspend',
                'ontimeupdate',
                'onundo',
                'onunload',
                'onvolumechange',
                'onwaiting',
                'onmouseenter',
                'onmouseleave',
                'onmousewheel',
                'onstart',
                'onpropertychange'
            ];
            var ne = (function() {
                function e() {}
                e.beforeSanitize = function() {
                    return {
                        selectors: {
                            tags: i9,
                            attributes: i6
                        }
                    };
                };
                e.sanitize = function(e) {
                    var t = this.beforeSanitize();
                    var i = this.serializeValue(t, e);
                    return i;
                };
                e.serializeValue = function(e, t) {
                    this.removeAttrs = e.selectors.attributes;
                    this.removeTags = e.selectors.tags;
                    this.wrapElement = document.createElement('div');
                    this.wrapElement.innerHTML = t;
                    this.removeXssTags();
                    this.removeJsEvents();
                    this.removeXssAttrs();
                    var i = this.wrapElement.innerHTML;
                    this.removeElement();
                    return i.replace('&amp;', '&');
                };
                e.removeElement = function() {
                    var e = this.wrapElement.children;
                    for(var t = 0; t < e.length; t++){
                        var i = e[t].attributes;
                        for(var n = 0; n < i.length; n++){
                            this.wrapElement.children[t].removeAttribute(i[n].localName);
                        }
                    }
                };
                e.removeXssTags = function() {
                    var e = this.wrapElement.querySelectorAll(this.removeTags.join(','));
                    if (e.length > 0) {
                        e.forEach(function(e) {
                            eQ(e);
                        });
                    } else {
                        return;
                    }
                };
                e.removeJsEvents = function() {
                    var e = this.wrapElement.querySelectorAll('[' + i8.join('],[') + ']');
                    if (e.length > 0) {
                        e.forEach(function(e) {
                            i8.forEach(function(t) {
                                if (e.hasAttribute(t)) {
                                    e.removeAttribute(t);
                                }
                            });
                        });
                    } else {
                        return;
                    }
                };
                e.removeXssAttrs = function() {
                    var e = this;
                    this.removeAttrs.forEach(function(t, i) {
                        var n = e.wrapElement.querySelectorAll(t.selector);
                        if (n.length > 0) {
                            n.forEach(function(e) {
                                e.removeAttribute(t.attribute);
                            });
                        }
                    });
                };
                return e;
            }());
            ;
            ;
        }),
        78: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "z": function() {
                    return h;
                }
            });
            var n = i(1807);
            var r = i(759);
            var s = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var o = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var a = new n.Qj();
            var l = {
                RTL: 'e-rtl',
                BUTTON: 'e-btn',
                PRIMARY: 'e-primary',
                ICONBTN: 'e-icon-btn'
            };
            var h = (function(e) {
                s(t, e);
                function t(t, i) {
                    return e.call(this, t, i) || this;
                }
                t.prototype.preRender = function() {};
                t.prototype.render = function() {
                    this.initialize();
                    this.removeRippleEffect = (0, n.qx)(this.element, {
                        selector: '.' + l.BUTTON
                    });
                    this.renderComplete();
                };
                t.prototype.initialize = function() {
                    if (this.cssClass) {
                        (0, n.cn)([
                            this.element
                        ], this.cssClass.split(' '));
                    }
                    if (this.isPrimary) {
                        this.element.classList.add(l.PRIMARY);
                    }
                    if (!(0, n.xr)() || ((0, n.xr)() && this.getModuleName() !== 'progress-btn')) {
                        if (this.content) {
                            var e = (this.enableHtmlSanitizer) ? n.pJ.sanitize(this.content) : this.content;
                            this.element.innerHTML = e;
                        }
                        this.setIconCss();
                    }
                    if (this.enableRtl) {
                        this.element.classList.add(l.RTL);
                    }
                    if (this.disabled) {
                        this.controlStatus(this.disabled);
                    } else {
                        this.wireEvents();
                    }
                };
                t.prototype.controlStatus = function(e) {
                    this.element.disabled = e;
                };
                t.prototype.setIconCss = function() {
                    if (this.iconCss) {
                        var e = this.createElement('span', {
                            className: 'e-btn-icon ' + this.iconCss
                        });
                        if (!this.element.textContent.trim()) {
                            this.element.classList.add(l.ICONBTN);
                        } else {
                            e.classList.add('e-icon-' + this.iconPosition.toLowerCase());
                            if (this.iconPosition === 'Top' || this.iconPosition === 'Bottom') {
                                this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn');
                            }
                        }
                        var t = this.element.childNodes[0];
                        if (t && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {
                            this.element.insertBefore(e, t);
                        } else {
                            this.element.appendChild(e);
                        }
                    }
                };
                t.prototype.wireEvents = function() {
                    if (this.isToggle) {
                        n.bi.add(this.element, 'click', this.btnClickHandler, this);
                    }
                };
                t.prototype.unWireEvents = function() {
                    if (this.isToggle) {
                        n.bi.remove(this.element, 'click', this.btnClickHandler);
                    }
                };
                t.prototype.btnClickHandler = function() {
                    if (this.element.classList.contains('e-active')) {
                        this.element.classList.remove('e-active');
                    } else {
                        this.element.classList.add('e-active');
                    }
                };
                t.prototype.destroy = function() {
                    var t = [
                        l.PRIMARY,
                        l.RTL,
                        l.ICONBTN,
                        'e-success',
                        'e-info',
                        'e-danger',
                        'e-warning',
                        'e-flat',
                        'e-outline',
                        'e-small',
                        'e-bigger',
                        'e-active',
                        'e-round',
                        'e-top-icon-btn',
                        'e-bottom-icon-btn'
                    ];
                    if (this.cssClass) {
                        t = t.concat(this.cssClass.split(' '));
                    }
                    e.prototype.destroy.call(this);
                    (0, n.IV)([
                        this.element
                    ], t);
                    if (!this.element.getAttribute('class')) {
                        this.element.removeAttribute('class');
                    }
                    if (this.disabled) {
                        this.element.removeAttribute('disabled');
                    }
                    if (this.content) {
                        this.element.innerHTML = this.element.innerHTML.replace(this.content, '');
                    }
                    var i = this.element.querySelector('span.e-btn-icon');
                    if (i) {
                        (0, n.og)(i);
                    }
                    this.unWireEvents();
                    if (n.re) {
                        this.removeRippleEffect();
                    }
                };
                t.prototype.getModuleName = function() {
                    return 'btn';
                };
                t.prototype.getPersistData = function() {
                    return this.addOnPersist([]);
                };
                t.Inject = function() {};
                t.prototype.onPropertyChanged = function(e, t) {
                    var i = this.element.querySelector('span.e-btn-icon');
                    for(var s = 0, o = Object.keys(e); s < o.length; s++){
                        var a = o[s];
                        switch(a){
                            case 'isPrimary':
                                if (e.isPrimary) {
                                    this.element.classList.add(l.PRIMARY);
                                } else {
                                    this.element.classList.remove(l.PRIMARY);
                                }
                                break;
                            case 'disabled':
                                this.controlStatus(e.disabled);
                                break;
                            case 'iconCss':
                                {
                                    if (i) {
                                        if (e.iconCss) {
                                            i.className = 'e-btn-icon ' + e.iconCss;
                                            if (this.element.textContent.trim()) {
                                                if (this.iconPosition === 'Left') {
                                                    i.classList.add('e-icon-left');
                                                } else {
                                                    i.classList.add('e-icon-right');
                                                }
                                            }
                                        } else {
                                            (0, n.og)(i);
                                        }
                                    } else {
                                        this.setIconCss();
                                    }
                                    break;
                                }
                            case 'iconPosition':
                                (0, n.IV)([
                                    this.element
                                ], [
                                    'e-top-icon-btn',
                                    'e-bottom-icon-btn'
                                ]);
                                i = this.element.querySelector('span.e-btn-icon');
                                if (i) {
                                    (0, n.og)(i);
                                }
                                this.setIconCss();
                                break;
                            case 'cssClass':
                                if (t.cssClass) {
                                    (0, n.IV)([
                                        this.element
                                    ], t.cssClass.split(' '));
                                }
                                if (e.cssClass) {
                                    (0, n.cn)([
                                        this.element
                                    ], e.cssClass.split(' '));
                                }
                                break;
                            case 'enableRtl':
                                if (e.enableRtl) {
                                    this.element.classList.add(l.RTL);
                                } else {
                                    this.element.classList.remove(l.RTL);
                                }
                                break;
                            case 'content':
                                {
                                    var h = (0, r.UC)(this.element);
                                    if (!h) {
                                        this.element.classList.remove(l.ICONBTN);
                                    }
                                    if (!(0, n.xr)() || ((0, n.xr)() && !this.isServerRendered && this.getModuleName() !== 'progress-btn')) {
                                        if (this.enableHtmlSanitizer) {
                                            e.content = n.pJ.sanitize(e.content);
                                        }
                                        this.element.innerHTML = e.content;
                                        this.setIconCss();
                                    }
                                    break;
                                }
                            case 'isToggle':
                                if (e.isToggle) {
                                    n.bi.add(this.element, 'click', this.btnClickHandler, this);
                                } else {
                                    n.bi.remove(this.element, 'click', this.btnClickHandler);
                                    (0, n.IV)([
                                        this.element
                                    ], [
                                        'e-active'
                                    ]);
                                }
                                break;
                        }
                    }
                };
                t.prototype.click = function() {
                    this.element.click();
                };
                t.prototype.focusIn = function() {
                    this.element.focus();
                };
                o([
                    (0, n.Z9)('Left')
                ], t.prototype, "iconPosition", void 0);
                o([
                    (0, n.Z9)('')
                ], t.prototype, "iconCss", void 0);
                o([
                    (0, n.Z9)(false)
                ], t.prototype, "disabled", void 0);
                o([
                    (0, n.Z9)(false)
                ], t.prototype, "isPrimary", void 0);
                o([
                    (0, n.Z9)('')
                ], t.prototype, "cssClass", void 0);
                o([
                    (0, n.Z9)('')
                ], t.prototype, "content", void 0);
                o([
                    (0, n.Z9)(false)
                ], t.prototype, "isToggle", void 0);
                o([
                    (0, n.Z9)()
                ], t.prototype, "locale", void 0);
                o([
                    (0, n.Z9)(false)
                ], t.prototype, "enableHtmlSanitizer", void 0);
                o([
                    (0, n.ju)()
                ], t.prototype, "created", void 0);
                t = o([
                    n.Zl
                ], t);
                return t;
            }(n.wA));
        }),
        759: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "Rm": function() {
                    return r;
                },
                "UC": function() {
                    return s;
                },
                "Z5": function() {
                    return c;
                },
                "sg": function() {
                    return h;
                }
            });
            var n = i(1807);
            function r(e, t, i, r, s, o) {
                var a = r;
                if (r.tagName === t) {
                    var l = (0, n.NA)('ej2_instances', r);
                    a = e('input', {
                        attrs: {
                            'type': i
                        }
                    });
                    var h = [
                        'change',
                        'cssClass',
                        'label',
                        'labelPosition',
                        'id'
                    ];
                    for(var c = 0, d = r.attributes.length; c < d; c++){
                        if (h.indexOf(r.attributes[c].nodeName) === -1) {
                            a.setAttribute(r.attributes[c].nodeName, r.attributes[c].nodeValue);
                        }
                    }
                    (0, n.Y4)(r, {
                        'class': s
                    });
                    r.appendChild(a);
                    (0, n.sO)('ej2_instances', l, a);
                    (0, n.ex)(r, 'ej2_instances');
                }
                return a;
            }
            function s(e) {
                var t;
                var i = e.childNodes;
                for(var n = 0; n < i.length; n++){
                    t = i[n];
                    if (t.nodeType === 3) {
                        return t;
                    }
                }
                return null;
            }
            function o(e, t, i) {
                if (i === 'INPUT') {
                    t.parentNode.insertBefore(e.element, t);
                    detach(t);
                    e.element.checked = false;
                    [
                        'name',
                        'value',
                        'disabled'
                    ].forEach(function(t) {
                        e.element.removeAttribute(t);
                    });
                } else {
                    [
                        'role',
                        'aria-checked',
                        'class'
                    ].forEach(function(e) {
                        t.removeAttribute(e);
                    });
                    t.innerHTML = '';
                }
            }
            function a(e, t, i, n, s) {
                n = r(e.createElement, t, 'checkbox', n, i, s);
                e.element = n;
                if (e.element.getAttribute('type') !== 'checkbox') {
                    e.element.setAttribute('type', 'checkbox');
                }
                if (!e.element.id) {
                    e.element.id = getUniqueID('e-' + s);
                }
            }
            function l(e, t, i) {
                if (t === void 0) {
                    t = false;
                }
                if (i === void 0) {
                    i = {};
                }
                var n = e('div', {
                    className: 'e-checkbox-wrapper e-css'
                });
                if (i.cssClass) {
                    addClass([
                        n
                    ], i.cssClass.split(' '));
                }
                if (i.enableRtl) {
                    n.classList.add('e-rtl');
                }
                if (t) {
                    var r = e('span', {
                        className: 'e-ripple-container'
                    });
                    rippleEffect(r, {
                        isCenterRipple: true,
                        duration: 400
                    });
                    n.appendChild(r);
                }
                var s = e('span', {
                    className: 'e-frame e-icons'
                });
                if (i.checked) {
                    s.classList.add('e-check');
                }
                n.appendChild(s);
                if (i.label) {
                    var o = e('span', {
                        className: 'e-label'
                    });
                    if (i.disableHtmlEncode) {
                        o.textContent = i.label;
                    } else {
                        o.innerHTML = i.label;
                    }
                    n.appendChild(o);
                }
                return n;
            }
            function h(e, t) {
                if (t) {
                    var i = document.createEvent('MouseEvents');
                    i.initEvent(e.type, false, true);
                    t.dispatchEvent(i);
                }
            }
            function c(e, t) {
                if (e.element.getAttribute('ejs-for')) {
                    t.appendChild(e.createElement('input', {
                        attrs: {
                            'name': e.name || e.element.name,
                            'value': 'false',
                            'type': 'hidden'
                        }
                    }));
                }
            }
        }),
        3213: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "I": function() {
                    return s;
                }
            });
            var n = i(1807);
            var r = {
                RTL: 'e-rtl',
                DISABLE: 'e-disabled',
                INPUT: 'e-input',
                TEXTAREA: 'e-multi-line-input',
                INPUTGROUP: 'e-input-group',
                FLOATINPUT: 'e-float-input',
                FLOATLINE: 'e-float-line',
                FLOATTEXT: 'e-float-text',
                FLOATTEXTCONTENT: 'e-float-text-content',
                CLEARICON: 'e-clear-icon',
                CLEARICONHIDE: 'e-clear-icon-hide',
                LABELTOP: 'e-label-top',
                LABELBOTTOM: 'e-label-bottom',
                NOFLOATLABEL: 'e-no-float-label',
                INPUTCUSTOMTAG: 'e-input-custom-tag',
                FLOATCUSTOMTAG: 'e-float-custom-tag'
            };
            var s;
            (function(e) {
                var t = {
                    container: null,
                    buttons: [],
                    clearButton: null
                };
                var i;
                var s = true;
                function o(e, o) {
                    var l = !(0, n.le)(o) ? o : n.az;
                    var h = {
                        container: null,
                        buttons: [],
                        clearButton: null
                    };
                    i = e.floatLabelType;
                    s = e.bindClearAction;
                    if ((0, n.le)(e.floatLabelType) || e.floatLabelType === 'Never') {
                        h.container = S(e, r.INPUTGROUP, r.INPUTCUSTOMTAG, 'span', l);
                        e.element.parentNode.insertBefore(h.container, e.element);
                        (0, n.cn)([
                            e.element
                        ], r.INPUT);
                        h.container.appendChild(e.element);
                    } else {
                        u(e, h, l);
                    }
                    a(e);
                    if (!(0, n.le)(e.properties) && !(0, n.le)(e.properties.showClearButton) && e.properties.showClearButton && e.element.tagName !== 'TEXTAREA') {
                        P(e.properties.showClearButton, e.element, h, true, l);
                        h.clearButton.setAttribute('role', 'button');
                        if (h.container.classList.contains(r.FLOATINPUT)) {
                            (0, n.cn)([
                                h.container
                            ], r.INPUTGROUP);
                        }
                    }
                    if (!(0, n.le)(e.buttons) && e.element.tagName !== 'TEXTAREA') {
                        for(var c = 0; c < e.buttons.length; c++){
                            h.buttons.push(Z(e.buttons[c], h.container, l));
                        }
                    }
                    if (!(0, n.le)(e.element) && e.element.tagName === 'TEXTAREA') {
                        (0, n.cn)([
                            h.container
                        ], r.TEXTAREA);
                    }
                    Y(h.container, e.element);
                    h = m(e, h);
                    H(h, l);
                    t = h;
                    return h;
                }
                e.createInput = o;
                function a(e) {
                    l(e.floatLabelType, e.element);
                    e.element.addEventListener('focus', function() {
                        var e = b(this);
                        if (e.classList.contains('e-input-group') || e.classList.contains('e-outline') || e.classList.contains('e-filled')) {
                            e.classList.add('e-input-focus');
                        }
                    });
                    e.element.addEventListener('blur', function() {
                        var e = b(this);
                        if (e.classList.contains('e-input-group') || e.classList.contains('e-outline') || e.classList.contains('e-filled')) {
                            e.classList.remove('e-input-focus');
                        }
                    });
                    e.element.addEventListener('input', function() {
                        l(i, e.element);
                    });
                }
                e.bindInitialEvent = a;
                function l(e, t) {
                    var i = t.value;
                    if (i !== '' && !(0, n.le)(i) && t.parentElement) {
                        t.parentElement.classList.add('e-valid-input');
                    } else if (e !== 'Always' && t.parentElement) {
                        t.parentElement.classList.remove('e-valid-input');
                    }
                }
                function h() {
                    var e = b(this).getElementsByClassName('e-float-text')[0];
                    if (!(0, n.le)(e)) {
                        (0, n.cn)([
                            e
                        ], r.LABELTOP);
                        if (e.classList.contains(r.LABELBOTTOM)) {
                            (0, n.IV)([
                                e
                            ], r.LABELBOTTOM);
                        }
                    }
                }
                function c() {
                    var e = b(this);
                    if ((e.getElementsByTagName('textarea')[0]) ? e.getElementsByTagName('textarea')[0].value === '' : e.getElementsByTagName('input')[0].value === '') {
                        var t = e.getElementsByClassName('e-float-text')[0];
                        if (!(0, n.le)(t)) {
                            if (t.classList.contains(r.LABELTOP)) {
                                (0, n.IV)([
                                    t
                                ], r.LABELTOP);
                            }
                            (0, n.cn)([
                                t
                            ], r.LABELBOTTOM);
                        }
                    }
                }
                function d(e) {
                    e.addEventListener('focus', h);
                    e.addEventListener('blur', c);
                }
                e.wireFloatingEvents = d;
                function p(e) {
                    e.removeEventListener('focus', h);
                    e.removeEventListener('blur', c);
                }
                function u(e, t, i) {
                    var s = !(0, n.le)(i) ? i : n.az;
                    if (e.floatLabelType === 'Auto') {
                        d(e.element);
                    }
                    if ((0, n.le)(t.container)) {
                        t.container = S(e, r.FLOATINPUT, r.FLOATCUSTOMTAG, 'div', s);
                        if (e.element.parentNode) {
                            e.element.parentNode.insertBefore(t.container, e.element);
                        }
                    } else {
                        if (!(0, n.le)(e.customTag)) {
                            t.container.classList.add(r.FLOATCUSTOMTAG);
                        }
                        t.container.classList.add(r.FLOATINPUT);
                    }
                    var o = s('span', {
                        className: r.FLOATLINE
                    });
                    var a = s('label', {
                        className: r.FLOATTEXT
                    });
                    if (!(0, n.le)(e.element.id) && e.element.id !== '') {
                        a.id = 'label_' + e.element.id.replace(/ /g, '_');
                        (0, n.Y4)(e.element, {
                            'aria-labelledby': a.id
                        });
                    }
                    if (!(0, n.le)(e.element.placeholder) && e.element.placeholder !== '') {
                        a.innerText = w(e.element.placeholder);
                        e.element.removeAttribute('placeholder');
                    }
                    if (!(0, n.le)(e.properties) && !(0, n.le)(e.properties.placeholder) && e.properties.placeholder !== '') {
                        a.innerText = w(e.properties.placeholder);
                    }
                    if (!a.innerText) {
                        t.container.classList.add(r.NOFLOATLABEL);
                    }
                    if (t.container.classList.contains('e-float-icon-left')) {
                        var l = t.container.querySelector('.e-input-in-wrap');
                        l.appendChild(e.element);
                        l.appendChild(o);
                        l.appendChild(a);
                    } else {
                        t.container.appendChild(e.element);
                        t.container.appendChild(o);
                        t.container.appendChild(a);
                    }
                    g(e.element.value, a);
                    if (e.floatLabelType === 'Always') {
                        if (a.classList.contains(r.LABELBOTTOM)) {
                            (0, n.IV)([
                                a
                            ], r.LABELBOTTOM);
                        }
                        (0, n.cn)([
                            a
                        ], r.LABELTOP);
                    }
                    if (e.floatLabelType === 'Auto') {
                        e.element.addEventListener('input', function(t) {
                            g(e.element.value, a, e.element);
                        });
                        e.element.addEventListener('blur', function(t) {
                            g(e.element.value, a);
                        });
                    }
                    if (!(0, n.le)(e.element.getAttribute('id'))) {
                        a.setAttribute('for', e.element.getAttribute('id'));
                    }
                }
                function f(e, t) {
                    if (e === 'Always' && t.classList.contains('e-outline')) {
                        t.classList.add('e-valid-input');
                    }
                }
                function m(e, t) {
                    if (!(0, n.le)(e.properties)) {
                        for(var i = 0, r = Object.keys(e.properties); i < r.length; i++){
                            var s = r[i];
                            switch(s){
                                case 'cssClass':
                                    k(e.properties.cssClass, [
                                        t.container
                                    ]);
                                    f(e.floatLabelType, t.container);
                                    break;
                                case 'enabled':
                                    A(e.properties.enabled, e.element, e.floatLabelType, t.container);
                                    break;
                                case 'enableRtl':
                                    O(e.properties.enableRtl, [
                                        t.container
                                    ]);
                                    break;
                                case 'placeholder':
                                    N(e.properties.placeholder, e.element);
                                    break;
                                case 'readonly':
                                    D(e.properties.readonly, e.element);
                                    break;
                            }
                        }
                    }
                    return t;
                }
                function v(e, t, i) {
                    if (e && !i) {
                        (0, n.IV)([
                            t
                        ], r.CLEARICONHIDE);
                    } else {
                        (0, n.cn)([
                            t
                        ], r.CLEARICONHIDE);
                    }
                }
                function g(e, t, i) {
                    if (i === void 0) {
                        i = null;
                    }
                    if (e) {
                        (0, n.cn)([
                            t
                        ], r.LABELTOP);
                        if (t.classList.contains(r.LABELBOTTOM)) {
                            (0, n.IV)([
                                t
                            ], r.LABELBOTTOM);
                        }
                    } else {
                        var s = i != null ? i !== document.activeElement : true;
                        if (s) {
                            if (t.classList.contains(r.LABELTOP)) {
                                (0, n.IV)([
                                    t
                                ], r.LABELTOP);
                            }
                            (0, n.cn)([
                                t
                            ], r.LABELBOTTOM);
                        }
                    }
                }
                function b(e) {
                    var t = (0, n.le)(e.parentNode) ? e : e.parentNode;
                    if (t && t.classList.contains('e-input-in-wrap')) {
                        t = t.parentNode;
                    }
                    return t;
                }
                function y(e, t, i, s) {
                    var o = !(0, n.le)(s) ? s : n.az;
                    var a = o('span', {
                        className: r.CLEARICON
                    });
                    var l = t.container;
                    if (!(0, n.le)(i)) {
                        l.appendChild(a);
                    } else {
                        var h = t.container.classList.contains(r.FLOATINPUT) ? t.container.querySelector('.' + r.FLOATTEXT) : e;
                        h.insertAdjacentElement('afterend', a);
                    }
                    if (!(0, n.le)(l) && l.classList.contains(r.FLOATINPUT)) {
                        (0, n.cn)([
                            l
                        ], r.INPUTGROUP);
                    }
                    (0, n.cn)([
                        a
                    ], r.CLEARICONHIDE);
                    C(e, a, l);
                    a.setAttribute('aria-label', 'close');
                    return a;
                }
                function C(e, t, i) {
                    if (s == undefined || s) {
                        t.addEventListener('click', function(i) {
                            if (!(e.classList.contains(r.DISABLE) || e.readOnly)) {
                                i.preventDefault();
                                if (e !== document.activeElement) {
                                    e.focus();
                                }
                                e.value = '';
                                (0, n.cn)([
                                    t
                                ], r.CLEARICONHIDE);
                            }
                        });
                    }
                    e.addEventListener('input', function(i) {
                        v(e.value, t);
                    });
                    e.addEventListener('focus', function(i) {
                        v(e.value, t, e.readOnly);
                    });
                    e.addEventListener('blur', function(e) {
                        setTimeout(function() {
                            (0, n.cn)([
                                t
                            ], r.CLEARICONHIDE);
                        }, 200);
                    });
                }
                e.wireClearBtnEvents = C;
                function E(e, t) {
                    var i = b(e);
                    if (i.classList.contains(r.FLOATINPUT) && t === 'Auto') {
                        var n = b(e).getElementsByClassName('e-float-text')[0];
                        g(e.value, n, e);
                    }
                }
                function S(e, t, i, r, s) {
                    var o = !(0, n.le)(s) ? s : n.az;
                    var a;
                    if (!(0, n.le)(e.customTag)) {
                        a = o(e.customTag, {
                            className: t
                        });
                        a.classList.add(i);
                    } else {
                        a = o(r, {
                            className: t
                        });
                    }
                    a.classList.add('e-control-wrapper');
                    return a;
                }
                function w(e) {
                    var t = '';
                    if (!(0, n.le)(e) && e !== '') {
                        var i = document.createElement('span');
                        i.innerHTML = '<input  placeholder="' + e + '"/>';
                        var r = (i.children[0]);
                        t = r.placeholder;
                    }
                    return t;
                }
                function T(e, t, i, s) {
                    t.value = e;
                    if ((0, n.le)(t.getAttribute('value'))) {
                        x(t, t.parentElement);
                    }
                    if ((!(0, n.le)(i)) && i === 'Auto') {
                        E(t, i);
                    }
                    if (!(0, n.le)(s) && s) {
                        var o = b(t);
                        if (!(0, n.le)(o)) {
                            var a = o.getElementsByClassName(r.CLEARICON)[0];
                            if (!(0, n.le)(a)) {
                                if (t.value && o.classList.contains('e-input-focus')) {
                                    (0, n.IV)([
                                        a
                                    ], r.CLEARICONHIDE);
                                } else {
                                    (0, n.cn)([
                                        a
                                    ], r.CLEARICONHIDE);
                                }
                            }
                        }
                    }
                    l(i, t);
                }
                e.setValue = T;
                function k(e, t, i) {
                    if (!(0, n.le)(i) && i !== '') {
                        (0, n.IV)(t, i.split(' '));
                    }
                    if (!(0, n.le)(e) && e !== '') {
                        (0, n.cn)(t, e.split(' '));
                    }
                }
                e.setCssClass = k;
                function x(e, t) {
                    if (!(0, n.le)(t.getElementsByClassName('e-float-text-content')[0])) {
                        if (t.getElementsByClassName('e-float-text-content')[0].classList.contains('e-float-text-overflow')) {
                            t.getElementsByClassName('e-float-text-content')[0].classList.remove('e-float-text-overflow');
                        }
                        if (e.clientWidth < t.getElementsByClassName('e-float-text-content')[0].clientWidth || e.clientWidth === t.getElementsByClassName('e-float-text-content')[0].clientWidth) {
                            t.getElementsByClassName('e-float-text-content')[0].classList.add('e-float-text-overflow');
                        }
                    }
                }
                e.calculateWidth = x;
                function L(e, t) {
                    if (typeof e === 'number') {
                        t.style.width = (0, n.Ac)(e);
                    } else if (typeof e === 'string') {
                        t.style.width = (e.match(/px|%|em/)) ? (e) : ((0, n.Ac)(e));
                    }
                    x(t.firstChild, t);
                }
                e.setWidth = L;
                function N(e, t) {
                    e = w(e);
                    var i = b(t);
                    if (i.classList.contains(r.FLOATINPUT)) {
                        if (!(0, n.le)(e) && e !== '') {
                            i.getElementsByClassName('e-float-text-content')[0] ? i.getElementsByClassName(r.FLOATTEXT)[0].children[0].textContent = e : i.getElementsByClassName(r.FLOATTEXT)[0].textContent = e;
                            i.classList.remove(r.NOFLOATLABEL);
                            t.removeAttribute('placeholder');
                        } else {
                            i.classList.add(r.NOFLOATLABEL);
                            i.getElementsByClassName('e-float-text-content')[0] ? i.getElementsByClassName(r.FLOATTEXT)[0].children[0].textContent = '' : i.getElementsByClassName(r.FLOATTEXT)[0].textContent = '';
                        }
                    } else {
                        if (!(0, n.le)(e) && e !== '') {
                            (0, n.Y4)(t, {
                                'placeholder': e,
                                'aria-placeholder': e
                            });
                        } else {
                            t.removeAttribute('placeholder');
                            t.removeAttribute('aria-placeholder');
                        }
                    }
                }
                e.setPlaceholder = N;
                function D(e, t, i) {
                    if (e) {
                        (0, n.Y4)(t, {
                            readonly: ''
                        });
                    } else {
                        t.removeAttribute('readonly');
                    }
                    if (!(0, n.le)(i)) {
                        E(t, i);
                    }
                }
                e.setReadonly = D;
                function O(e, t) {
                    if (e) {
                        (0, n.cn)(t, r.RTL);
                    } else {
                        (0, n.IV)(t, r.RTL);
                    }
                }
                e.setEnableRtl = O;
                function A(e, t, i, s) {
                    var o = {
                        'disabled': 'disabled',
                        'aria-disabled': 'true'
                    };
                    var a = (0, n.le)(s) ? false : true;
                    if (e) {
                        t.classList.remove(r.DISABLE);
                        M(o, t);
                        if (a) {
                            (0, n.IV)([
                                s
                            ], r.DISABLE);
                        }
                    } else {
                        t.classList.add(r.DISABLE);
                        R(o, t);
                        if (a) {
                            (0, n.cn)([
                                s
                            ], r.DISABLE);
                        }
                    }
                    if (!(0, n.le)(i)) {
                        E(t, i);
                    }
                }
                e.setEnabled = A;
                function P(e, t, i, r, s) {
                    var o = !(0, n.le)(s) ? s : n.az;
                    if (e) {
                        i.clearButton = y(t, i, r, o);
                    } else {
                        (0, n.Od)(i.clearButton);
                        i.clearButton = null;
                    }
                }
                e.setClearButton = P;
                function M(e, t) {
                    for(var i = 0, n = Object.keys(e); i < n.length; i++){
                        var s = n[i];
                        var o = b(t);
                        if (s === 'disabled') {
                            t.classList.remove(r.DISABLE);
                        }
                        if (s === 'disabled' && o.classList.contains(r.INPUTGROUP)) {
                            o.classList.remove(r.DISABLE);
                        }
                        if (s === 'placeholder' && o.classList.contains(r.FLOATINPUT)) {
                            o.getElementsByClassName(r.FLOATTEXT)[0].textContent = '';
                        } else {
                            t.removeAttribute(s);
                        }
                    }
                }
                e.removeAttributes = M;
                function R(e, t) {
                    for(var i = 0, n = Object.keys(e); i < n.length; i++){
                        var s = n[i];
                        var o = b(t);
                        if (s === 'disabled') {
                            t.classList.add(r.DISABLE);
                        }
                        if (s === 'disabled' && o.classList.contains(r.INPUTGROUP)) {
                            o.classList.add(r.DISABLE);
                        }
                        if (s === 'placeholder' && o.classList.contains(r.FLOATINPUT)) {
                            o.getElementsByClassName(r.FLOATTEXT)[0].textContent = e[s];
                        } else {
                            t.setAttribute(s, e[s]);
                        }
                    }
                }
                e.addAttributes = R;
                function B(e) {
                    var t = e.container;
                    if (!(0, n.le)(t) && t.classList.contains(r.FLOATINPUT)) {
                        var i = t.querySelector('textarea') ? t.querySelector('textarea') : t.querySelector('input');
                        var s = t.querySelector('.' + r.FLOATTEXT).textContent;
                        var o = t.querySelector('.e-clear-icon') !== null;
                        (0, n.og)(t.querySelector('.' + r.FLOATLINE));
                        (0, n.og)(t.querySelector('.' + r.FLOATTEXT));
                        (0, n.s1)(t, [
                            r.INPUTGROUP
                        ], [
                            r.FLOATINPUT
                        ]);
                        p(i);
                        (0, n.Y4)(i, {
                            'placeholder': s
                        });
                        i.classList.add(r.INPUT);
                        if (!o && i.tagName === 'INPUT') {
                            i.removeAttribute('required');
                        }
                    }
                }
                e.removeFloating = B;
                function I(e, t, s, o) {
                    var a = !(0, n.le)(o) ? o : n.az;
                    var l = (0, n.oq)(e, '.' + r.INPUTGROUP);
                    i = t;
                    if (t !== 'Never') {
                        var h = l.tagName;
                        h = h !== 'DIV' && h !== 'SPAN' ? h : null;
                        var c = {
                            element: e,
                            floatLabelType: t,
                            customTag: h,
                            properties: {
                                placeholder: s
                            }
                        };
                        var d = l.querySelector('.e-clear-icon');
                        var p = {
                            container: l
                        };
                        e.classList.remove(r.INPUT);
                        u(c, p, a);
                        H(p, a);
                        x(c.element, p.container);
                        var m = l.classList.contains('e-float-icon-left');
                        if ((0, n.le)(d)) {
                            if (m) {
                                var v = l.querySelector('.e-input-in-wrap');
                                d = v.querySelector('.e-input-group-icon');
                            } else {
                                d = l.querySelector('.e-input-group-icon');
                            }
                        }
                        if ((0, n.le)(d)) {
                            if (m) {
                                d = l.querySelector('.e-input-group-icon');
                            }
                            if ((0, n.le)(d)) {
                                l.classList.remove(r.INPUTGROUP);
                            }
                        } else {
                            var g = l.querySelector('.' + r.FLOATLINE);
                            var b = l.querySelector('.' + r.FLOATTEXT);
                            var y = m ? l.querySelector('.e-input-in-wrap') : l;
                            y.insertBefore(e, d);
                            y.insertBefore(g, d);
                            y.insertBefore(b, d);
                        }
                    }
                    f(t, e.parentElement);
                }
                e.addFloating = I;
                function H(e, t) {
                    if (e.container.classList.contains('e-outline') && e.container.getElementsByClassName('e-float-text')[0]) {
                        var i = t('span', {
                            className: r.FLOATTEXTCONTENT
                        });
                        i.innerHTML = e.container.getElementsByClassName('e-float-text')[0].innerHTML;
                        e.container.getElementsByClassName('e-float-text')[0].innerHTML = '';
                        e.container.getElementsByClassName('e-float-text')[0].appendChild(i);
                    }
                }
                e.createSpanElement = H;
                function F(e, t) {
                    for(var i = 0; i < t.length; i++){
                        j(e, t[i].container);
                    }
                }
                e.setRipple = F;
                function j(e, t, i) {
                    var r = [];
                    r.push(i);
                    var s = (0, n.le)(i) ? t.querySelectorAll('.e-input-group-icon') : r;
                    if (e && s.length > 0) {
                        for(var o = 0; o < s.length; o++){
                            s[o].addEventListener('mousedown', q, false);
                            s[o].addEventListener('mouseup', V, false);
                        }
                    } else if (s.length > 0) {
                        for(var o = 0; o < s.length; o++){
                            s[o].removeEventListener('mousedown', q, this);
                            s[o].removeEventListener('mouseup', V, this);
                        }
                    }
                }
                function z(e, t) {
                    if (!e.classList.contains('e-disabled') && !e.querySelector('input').readOnly) {
                        t.classList.add('e-input-btn-ripple');
                    }
                }
                function q() {
                    var e = this;
                    var t = this.parentElement;
                    while(!t.classList.contains('e-input-group')){
                        t = t.parentElement;
                    }
                    z(t, e);
                }
                function V() {
                    var e = this;
                    setTimeout(function() {
                        e.classList.remove('e-input-btn-ripple');
                    }, 500);
                }
                function _(e, t) {
                    var i = t('span', {
                        className: e
                    });
                    i.classList.add('e-input-group-icon');
                    return i;
                }
                function U(e, t, i, n, r) {
                    var s = typeof (t) === 'string' ? t.split(',') : t;
                    if (e.toLowerCase() === 'append') {
                        for(var o = 0, a = s; o < a.length; o++){
                            var l = a[o];
                            Z(l, i, r);
                        }
                    } else {
                        for(var h = 0, c = s; h < c.length; h++){
                            var l = c[h];
                            W(l, i, n, r);
                        }
                    }
                    if (i.getElementsByClassName('e-input-group-icon')[0] && i.getElementsByClassName('e-float-text-overflow')[0]) {
                        i.getElementsByClassName('e-float-text-overflow')[0].classList.add('e-icon');
                    }
                }
                e.addIcon = U;
                function W(e, t, i, s) {
                    var o = !(0, n.le)(s) ? s : n.az;
                    var a = _(e, o);
                    t.classList.add('e-float-icon-left');
                    var l = t.querySelector('.e-input-in-wrap');
                    if ((0, n.le)(l)) {
                        l = o('span', {
                            className: 'e-input-in-wrap'
                        });
                        i.parentNode.insertBefore(l, i);
                        var h = t.querySelectorAll(i.tagName + ' ~ *');
                        l.appendChild(i);
                        for(var c = 0; c < h.length; c++){
                            l.appendChild(h[c]);
                        }
                    }
                    l.parentNode.insertBefore(a, l);
                    if (!t.classList.contains(r.INPUTGROUP)) {
                        t.classList.add(r.INPUTGROUP);
                    }
                    j(true, t, a);
                    return a;
                }
                e.prependSpan = W;
                function Z(e, t, i) {
                    var s = !(0, n.le)(i) ? i : n.az;
                    var o = _(e, s);
                    if (!t.classList.contains(r.INPUTGROUP)) {
                        t.classList.add(r.INPUTGROUP);
                    }
                    var a = (t.classList.contains('e-float-icon-left')) ? t.querySelector('.e-input-in-wrap') : t;
                    a.appendChild(o);
                    j(true, t, o);
                    return o;
                }
                e.appendSpan = Z;
                function Y(e, t) {
                    if (t.type === 'hidden') {
                        e.classList.add('e-hidden');
                    } else if (e.classList.contains('e-hidden')) {
                        e.classList.remove('e-hidden');
                    }
                }
                e.validateInputType = Y;
            })(s || (s = {}));
        }),
        8801: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "N": function() {
                    return E;
                }
            });
            var n = i(1807);
            var r = i(3213);
            var s = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var o = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var a = 'e-control-wrapper e-numeric';
            var l = 'e-input-group-icon';
            var h = 'e-spin-up';
            var c = 'e-spin-down';
            var d = 'e-error';
            var p = 'increment';
            var u = 'decrement';
            var f = new RegExp('^(-)?(\\d*)$');
            var m = '.';
            var v = 'e-numerictextbox';
            var g = 'e-control';
            var b = 'e-input-focus';
            var y = 'e-numeric-hidden';
            var C = [
                'title',
                'style',
                'class'
            ];
            var E = (function(e) {
                s(t, e);
                function t(t, i) {
                    var n = e.call(this, t, i) || this;
                    n.isVue = false;
                    n.preventChange = false;
                    n.isAngular = false;
                    n.isDynamicChange = false;
                    n.numericOptions = t;
                    return n;
                }
                t.prototype.preRender = function() {
                    this.isPrevFocused = false;
                    this.decimalSeparator = '.';
                    this.intRegExp = new RegExp('/^(-)?(\d*)$/');
                    this.isCalled = false;
                    var e = (0, n.NA)('ej2_instances', this.element);
                    this.cloneElement = this.element.cloneNode(true);
                    (0, n.IV)([
                        this.cloneElement
                    ], [
                        g,
                        v,
                        'e-lib'
                    ]);
                    this.angularTagName = null;
                    this.formEle = (0, n.oq)(this.element, 'form');
                    if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {
                        this.angularTagName = this.element.tagName;
                        var t = this.createElement('input');
                        var i = 0;
                        for(i; i < this.element.attributes.length; i++){
                            var r = this.element.attributes[i].nodeName;
                            if (r !== 'id' && r !== 'class') {
                                t.setAttribute(this.element.attributes[i].nodeName, this.element.attributes[i].nodeValue);
                                t.innerHTML = this.element.innerHTML;
                            } else if (r === 'class') {
                                t.setAttribute(r, this.element.className.split(' ').filter(function(e) {
                                    return e.indexOf('ng-') !== 0;
                                }).join(' '));
                            }
                        }
                        if (this.element.hasAttribute('name')) {
                            this.element.removeAttribute('name');
                        }
                        this.element.classList.remove('e-control', 'e-numerictextbox');
                        this.element.appendChild(t);
                        this.element = t;
                        (0, n.sO)('ej2_instances', e, this.element);
                    }
                    (0, n.Y4)(this.element, {
                        'role': 'spinbutton',
                        'tabindex': '0',
                        'autocomplete': 'off',
                        'aria-live': 'assertive'
                    });
                    var s = {
                        incrementTitle: 'Increment value',
                        decrementTitle: 'Decrement value',
                        placeholder: this.placeholder
                    };
                    this.l10n = new n.E7('numerictextbox', s, this.locale);
                    if (this.l10n.getConstant('placeholder') !== '') {
                        this.setProperties({
                            placeholder: this.placeholder || this.l10n.getConstant('placeholder')
                        }, true);
                    }
                    if (!this.element.hasAttribute('id')) {
                        this.element.setAttribute('id', (0, n.QI)('numerictextbox'));
                    }
                    this.isValidState = true;
                    this.inputStyle = null;
                    this.inputName = null;
                    this.cultureInfo = {};
                    this.initCultureInfo();
                    this.initCultureFunc();
                    this.prevValue = this.value;
                    this.updateHTMLAttrToElement();
                    this.checkAttributes(false);
                    if (this.formEle) {
                        this.inputEleValue = this.value;
                    }
                    this.validateMinMax();
                    this.validateStep();
                    if (this.placeholder === null) {
                        this.updatePlaceholder();
                    }
                };
                t.prototype.render = function() {
                    if (this.element.tagName.toLowerCase() === 'input') {
                        this.createWrapper();
                        if (this.showSpinButton) {
                            this.spinBtnCreation();
                        }
                        this.setElementWidth(this.width);
                        if (!this.container.classList.contains('e-input-group')) {
                            this.container.classList.add('e-input-group');
                        }
                        this.changeValue(this.value === null || isNaN(this.value) ? null : this.strictMode ? this.trimValue(this.value) : this.value);
                        this.wireEvents();
                        if (this.value !== null && !isNaN(this.value)) {
                            if (this.decimals) {
                                this.setProperties({
                                    value: this.roundNumber(this.value, this.decimals)
                                }, true);
                            }
                        }
                        if (this.element.getAttribute('value') || this.value) {
                            this.element.setAttribute('value', this.element.value);
                            this.hiddenInput.setAttribute('value', this.hiddenInput.value);
                        }
                        this.elementPrevValue = this.element.value;
                        if (this.element.hasAttribute('data-val')) {
                            this.element.setAttribute('data-val', 'false');
                        }
                        this.renderComplete();
                    }
                };
                t.prototype.checkAttributes = function(e) {
                    var t = e ? (0, n.le)(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : [
                        'value',
                        'min',
                        'max',
                        'step',
                        'disabled',
                        'readonly',
                        'style',
                        'name',
                        'placeholder'
                    ];
                    for(var i = 0, r = t; i < r.length; i++){
                        var s = r[i];
                        if (!(0, n.le)(this.element.getAttribute(s))) {
                            switch(s){
                                case 'disabled':
                                    if (((0, n.le)(this.numericOptions) || (this.numericOptions['enabled'] === undefined)) || e) {
                                        var o = this.element.getAttribute(s) === 'disabled' || this.element.getAttribute(s) === '' || this.element.getAttribute(s) === 'true' ? false : true;
                                        this.setProperties({
                                            enabled: o
                                        }, !e);
                                    }
                                    break;
                                case 'readonly':
                                    if (((0, n.le)(this.numericOptions) || (this.numericOptions['readonly'] === undefined)) || e) {
                                        var a = this.element.getAttribute(s) === 'readonly' || this.element.getAttribute(s) === '' || this.element.getAttribute(s) === 'true' ? true : false;
                                        this.setProperties({
                                            readonly: a
                                        }, !e);
                                    }
                                    break;
                                case 'placeholder':
                                    if (((0, n.le)(this.numericOptions) || (this.numericOptions['placeholder'] === undefined)) || e) {
                                        this.setProperties({
                                            placeholder: this.element.placeholder
                                        }, !e);
                                    }
                                    break;
                                case 'value':
                                    if (((0, n.le)(this.numericOptions) || (this.numericOptions['value'] === undefined)) || e) {
                                        var l = this.instance.getNumberParser({
                                            format: 'n'
                                        })(this.element.getAttribute(s));
                                        this.setProperties((0, n.sO)(s, l, {}), !e);
                                    }
                                    break;
                                case 'min':
                                    if (((0, n.le)(this.numericOptions) || (this.numericOptions['min'] === undefined)) || e) {
                                        var h = this.instance.getNumberParser({
                                            format: 'n'
                                        })(this.element.getAttribute(s));
                                        if (h !== null && !isNaN(h)) {
                                            this.setProperties((0, n.sO)(s, h, {}), !e);
                                        }
                                    }
                                    break;
                                case 'max':
                                    if (((0, n.le)(this.numericOptions) || (this.numericOptions['max'] === undefined)) || e) {
                                        var c = this.instance.getNumberParser({
                                            format: 'n'
                                        })(this.element.getAttribute(s));
                                        if (c !== null && !isNaN(c)) {
                                            this.setProperties((0, n.sO)(s, c, {}), !e);
                                        }
                                    }
                                    break;
                                case 'step':
                                    if (((0, n.le)(this.numericOptions) || (this.numericOptions['step'] === undefined)) || e) {
                                        var d = this.instance.getNumberParser({
                                            format: 'n'
                                        })(this.element.getAttribute(s));
                                        if (d !== null && !isNaN(d)) {
                                            this.setProperties((0, n.sO)(s, d, {}), !e);
                                        }
                                    }
                                    break;
                                case 'style':
                                    this.inputStyle = this.element.getAttribute(s);
                                    break;
                                case 'name':
                                    this.inputName = this.element.getAttribute(s);
                                    break;
                                default:
                                    {
                                        var p = this.instance.getNumberParser({
                                            format: 'n'
                                        })(this.element.getAttribute(s));
                                        if ((p !== null && !isNaN(p)) || (s === 'value')) {
                                            this.setProperties((0, n.sO)(s, p, {}), true);
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                };
                t.prototype.updatePlaceholder = function() {
                    this.setProperties({
                        placeholder: this.l10n.getConstant('placeholder')
                    }, true);
                };
                t.prototype.initCultureFunc = function() {
                    this.instance = new n.eC(this.locale);
                };
                t.prototype.initCultureInfo = function() {
                    this.cultureInfo.format = this.format;
                    if ((0, n.NA)('currency', this) !== null) {
                        (0, n.sO)('currency', this.currency, this.cultureInfo);
                        this.setProperties({
                            currencyCode: this.currency
                        }, true);
                    }
                };
                t.prototype.createWrapper = function() {
                    var e = this.cssClass;
                    if (!(0, n.le)(this.cssClass) && this.cssClass !== '') {
                        e = this.getNumericValidClassList(this.cssClass);
                    }
                    var t = r.I.createInput({
                        element: this.element,
                        floatLabelType: this.floatLabelType,
                        properties: {
                            readonly: this.readonly,
                            placeholder: this.placeholder,
                            cssClass: e,
                            enableRtl: this.enableRtl,
                            showClearButton: this.showClearButton,
                            enabled: this.enabled
                        }
                    }, this.createElement);
                    this.inputWrapper = t;
                    this.container = t.container;
                    this.container.setAttribute('class', a + ' ' + this.container.getAttribute('class'));
                    this.updateHTMLAttrToWrapper();
                    if (this.readonly) {
                        (0, n.Y4)(this.element, {
                            'aria-readonly': 'true'
                        });
                    }
                    this.hiddenInput = (this.createElement('input', {
                        attrs: {
                            type: 'text',
                            'validateHidden': 'true',
                            'class': y
                        }
                    }));
                    this.inputName = this.inputName !== null ? this.inputName : this.element.id;
                    this.element.removeAttribute('name');
                    (0, n.Y4)(this.hiddenInput, {
                        'name': this.inputName
                    });
                    this.container.insertBefore(this.hiddenInput, this.container.childNodes[1]);
                    this.updateDataAttribute(false);
                    if (this.inputStyle !== null) {
                        (0, n.Y4)(this.container, {
                            'style': this.inputStyle
                        });
                    }
                };
                t.prototype.updateDataAttribute = function(e) {
                    var t = {};
                    if (!e) {
                        for(var i = 0; i < this.element.attributes.length; i++){
                            t[this.element.attributes[i].name] = this.element.getAttribute(this.element.attributes[i].name);
                        }
                    } else {
                        t = this.htmlAttributes;
                    }
                    for(var n = 0, r = Object.keys(t); n < r.length; n++){
                        var s = r[n];
                        if (s.indexOf('data') === 0) {
                            this.hiddenInput.setAttribute(s, t[s]);
                        }
                    }
                };
                t.prototype.updateHTMLAttrToElement = function() {
                    if (!(0, n.le)(this.htmlAttributes)) {
                        for(var e = 0, t = Object.keys(this.htmlAttributes); e < t.length; e++){
                            var i = t[e];
                            if (C.indexOf(i) < 0) {
                                this.element.setAttribute(i, this.htmlAttributes[i]);
                            }
                        }
                    }
                };
                t.prototype.updateCssClass = function(e, t) {
                    r.I.setCssClass(this.getNumericValidClassList(e), [
                        this.container
                    ], this.getNumericValidClassList(t));
                };
                t.prototype.getNumericValidClassList = function(e) {
                    var t = e;
                    if (!(0, n.le)(e) && e !== '') {
                        t = (e.replace(/\s+/g, ' ')).trim();
                    }
                    return t;
                };
                t.prototype.updateHTMLAttrToWrapper = function() {
                    if (!(0, n.le)(this.htmlAttributes)) {
                        for(var e = 0, t = Object.keys(this.htmlAttributes); e < t.length; e++){
                            var i = t[e];
                            if (C.indexOf(i) > -1) {
                                if (i === 'class') {
                                    var r = this.getNumericValidClassList(this.htmlAttributes[i]);
                                    if (r !== '') {
                                        (0, n.cn)([
                                            this.container
                                        ], r.split(' '));
                                    }
                                } else if (i === 'style') {
                                    var s = this.container.getAttribute(i);
                                    s = !(0, n.le)(s) ? (s + this.htmlAttributes[i]) : this.htmlAttributes[i];
                                    this.container.setAttribute(i, s);
                                } else {
                                    this.container.setAttribute(i, this.htmlAttributes[i]);
                                }
                            }
                        }
                    }
                };
                t.prototype.setElementWidth = function(e) {
                    if (!(0, n.le)(e)) {
                        if (typeof e === 'number') {
                            this.container.style.width = (0, n.Ac)(e);
                        } else if (typeof e === 'string') {
                            this.container.style.width = (e.match(/px|%|em/)) ? (e) : ((0, n.Ac)(e));
                        }
                    }
                };
                t.prototype.spinBtnCreation = function() {
                    this.spinDown = r.I.appendSpan(l + ' ' + c, this.container, this.createElement);
                    (0, n.Y4)(this.spinDown, {
                        'title': this.l10n.getConstant('decrementTitle'),
                        'aria-label': this.l10n.getConstant('decrementTitle')
                    });
                    this.spinUp = r.I.appendSpan(l + ' ' + h, this.container, this.createElement);
                    (0, n.Y4)(this.spinUp, {
                        'title': this.l10n.getConstant('incrementTitle'),
                        'aria-label': this.l10n.getConstant('incrementTitle')
                    });
                    this.wireSpinBtnEvents();
                };
                t.prototype.validateMinMax = function() {
                    if (!(typeof (this.min) === 'number' && !isNaN(this.min))) {
                        this.setProperties({
                            min: -(Number.MAX_VALUE)
                        }, true);
                    }
                    if (!(typeof (this.max) === 'number' && !isNaN(this.max))) {
                        this.setProperties({
                            max: Number.MAX_VALUE
                        }, true);
                    }
                    if (this.decimals !== null) {
                        if (this.min !== -(Number.MAX_VALUE)) {
                            this.setProperties({
                                min: this.instance.getNumberParser({
                                    format: 'n'
                                })(this.formattedValue(this.decimals, this.min))
                            }, true);
                        }
                        if (this.max !== (Number.MAX_VALUE)) {
                            this.setProperties({
                                max: this.instance.getNumberParser({
                                    format: 'n'
                                })(this.formattedValue(this.decimals, this.max))
                            }, true);
                        }
                    }
                    this.setProperties({
                        min: this.min > this.max ? this.max : this.min
                    }, true);
                    (0, n.Y4)(this.element, {
                        'aria-valuemin': this.min.toString(),
                        'aria-valuemax': this.max.toString()
                    });
                };
                t.prototype.formattedValue = function(e, t) {
                    return this.instance.getNumberFormat({
                        maximumFractionDigits: e,
                        minimumFractionDigits: e,
                        useGrouping: false
                    })(t);
                };
                t.prototype.validateStep = function() {
                    if (this.decimals !== null) {
                        this.setProperties({
                            step: this.instance.getNumberParser({
                                format: 'n'
                            })(this.formattedValue(this.decimals, this.step))
                        }, true);
                    }
                };
                t.prototype.action = function(e, t) {
                    this.isInteract = true;
                    var i = this.isFocused ? this.instance.getNumberParser({
                        format: 'n'
                    })(this.element.value) : this.value;
                    this.changeValue(this.performAction(i, this.step, e));
                    this.raiseChangeEvent(t);
                };
                t.prototype.checkErrorClass = function() {
                    if (this.isValidState) {
                        (0, n.IV)([
                            this.container
                        ], d);
                    } else {
                        (0, n.cn)([
                            this.container
                        ], d);
                    }
                    (0, n.Y4)(this.element, {
                        'aria-invalid': this.isValidState ? 'false' : 'true'
                    });
                };
                t.prototype.bindClearEvent = function() {
                    if (this.showClearButton) {
                        n.bi.add(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler, this);
                    }
                };
                t.prototype.resetHandler = function(e) {
                    e.preventDefault();
                    if (!(this.inputWrapper.clearButton.classList.contains('e-clear-icon-hide')) || this.inputWrapper.container.classList.contains('e-static-clear')) {
                        this.clear(e);
                    }
                    this.isInteract = true;
                    this.raiseChangeEvent(e);
                };
                t.prototype.clear = function(e) {
                    this.setProperties({
                        value: null
                    }, true);
                    this.setElementValue('');
                    this.hiddenInput.value = '';
                    var t = (0, n.oq)(this.element, 'form');
                    if (t) {
                        var i = this.element.nextElementSibling;
                        var r = document.createEvent('KeyboardEvent');
                        r.initEvent('keyup', false, true);
                        i.dispatchEvent(r);
                    }
                };
                t.prototype.resetFormHandler = function() {
                    if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {
                        this.updateValue(null);
                    } else {
                        this.updateValue(this.inputEleValue);
                    }
                };
                t.prototype.setSpinButton = function() {
                    if (!(0, n.le)(this.spinDown)) {
                        (0, n.Y4)(this.spinDown, {
                            'title': this.l10n.getConstant('decrementTitle'),
                            'aria-label': this.l10n.getConstant('decrementTitle')
                        });
                    }
                    if (!(0, n.le)(this.spinUp)) {
                        (0, n.Y4)(this.spinUp, {
                            'title': this.l10n.getConstant('incrementTitle'),
                            'aria-label': this.l10n.getConstant('incrementTitle')
                        });
                    }
                };
                t.prototype.wireEvents = function() {
                    n.bi.add(this.element, 'focus', this.focusHandler, this);
                    n.bi.add(this.element, 'blur', this.focusOutHandler, this);
                    n.bi.add(this.element, 'keydown', this.keyDownHandler, this);
                    n.bi.add(this.element, 'keyup', this.keyUpHandler, this);
                    n.bi.add(this.element, 'input', this.inputHandler, this);
                    n.bi.add(this.element, 'keypress', this.keyPressHandler, this);
                    n.bi.add(this.element, 'change', this.changeHandler, this);
                    n.bi.add(this.element, 'paste', this.pasteHandler, this);
                    if (this.enabled) {
                        this.bindClearEvent();
                        if (this.formEle) {
                            n.bi.add(this.formEle, 'reset', this.resetFormHandler, this);
                        }
                    }
                };
                t.prototype.wireSpinBtnEvents = function() {
                    n.bi.add(this.spinUp, n.AR.touchStartEvent, this.mouseDownOnSpinner, this);
                    n.bi.add(this.spinDown, n.AR.touchStartEvent, this.mouseDownOnSpinner, this);
                    n.bi.add(this.spinUp, n.AR.touchEndEvent, this.mouseUpOnSpinner, this);
                    n.bi.add(this.spinDown, n.AR.touchEndEvent, this.mouseUpOnSpinner, this);
                    n.bi.add(this.spinUp, n.AR.touchMoveEvent, this.touchMoveOnSpinner, this);
                    n.bi.add(this.spinDown, n.AR.touchMoveEvent, this.touchMoveOnSpinner, this);
                };
                t.prototype.unwireEvents = function() {
                    n.bi.remove(this.element, 'focus', this.focusHandler);
                    n.bi.remove(this.element, 'blur', this.focusOutHandler);
                    n.bi.remove(this.element, 'keyup', this.keyUpHandler);
                    n.bi.remove(this.element, 'input', this.inputHandler);
                    n.bi.remove(this.element, 'keydown', this.keyDownHandler);
                    n.bi.remove(this.element, 'keypress', this.keyPressHandler);
                    n.bi.remove(this.element, 'change', this.changeHandler);
                    n.bi.remove(this.element, 'paste', this.pasteHandler);
                    if (this.formEle) {
                        n.bi.remove(this.formEle, 'reset', this.resetFormHandler);
                    }
                };
                t.prototype.unwireSpinBtnEvents = function() {
                    n.bi.remove(this.spinUp, n.AR.touchStartEvent, this.mouseDownOnSpinner);
                    n.bi.remove(this.spinDown, n.AR.touchStartEvent, this.mouseDownOnSpinner);
                    n.bi.remove(this.spinUp, n.AR.touchEndEvent, this.mouseUpOnSpinner);
                    n.bi.remove(this.spinDown, n.AR.touchEndEvent, this.mouseUpOnSpinner);
                    n.bi.remove(this.spinUp, n.AR.touchMoveEvent, this.touchMoveOnSpinner);
                    n.bi.remove(this.spinDown, n.AR.touchMoveEvent, this.touchMoveOnSpinner);
                };
                t.prototype.changeHandler = function(e) {
                    e.stopPropagation();
                    if (!this.element.value.length) {
                        this.setProperties({
                            value: null
                        }, true);
                    }
                    var t = this.instance.getNumberParser({
                        format: 'n'
                    })(this.element.value);
                    this.updateValue(t, e);
                };
                t.prototype.raiseChangeEvent = function(e) {
                    if (this.prevValue !== this.value) {
                        var t = {};
                        this.changeEventArgs = {
                            value: this.value,
                            previousValue: this.prevValue,
                            isInteracted: this.isInteract,
                            isInteraction: this.isInteract,
                            event: e
                        };
                        if (e) {
                            this.changeEventArgs.event = e;
                        }
                        if (this.changeEventArgs.event === undefined) {
                            this.changeEventArgs.isInteracted = false;
                            this.changeEventArgs.isInteraction = false;
                        }
                        (0, n.TS)(t, this.changeEventArgs);
                        this.prevValue = this.value;
                        this.isInteract = false;
                        this.elementPrevValue = this.element.value;
                        this.preventChange = false;
                        this.trigger('change', t);
                    }
                };
                t.prototype.pasteHandler = function() {
                    var e = this;
                    if (!this.enabled || this.readonly) {
                        return;
                    }
                    var t = this.element.value;
                    setTimeout(function() {
                        if (!e.numericRegex().test(e.element.value)) {
                            e.setElementValue(t);
                        }
                    });
                };
                t.prototype.preventHandler = function() {
                    var e = this;
                    var t = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
                    setTimeout(function() {
                        if (e.element.selectionStart > 0) {
                            var i = e.element.selectionStart;
                            var r = e.element.selectionStart - 1;
                            var s = 0;
                            var o = e.element.value.split('');
                            var a = (0, n.NE)(e.locale);
                            var l = (0, n.NA)('decimal', a);
                            var h = l.charCodeAt(0);
                            if (e.element.value[r] === ' ' && e.element.selectionStart > 0 && !t) {
                                if ((0, n.le)(e.prevVal)) {
                                    e.element.value = e.element.value.trim();
                                } else if (r !== 0) {
                                    e.element.value = e.prevVal;
                                } else if (r === 0) {
                                    e.element.value = e.element.value.trim();
                                }
                                e.element.setSelectionRange(r, r);
                            } else if (isNaN(parseFloat(e.element.value[e.element.selectionStart - 1])) && e.element.value[e.element.selectionStart - 1].charCodeAt(0) !== 45) {
                                if ((o.indexOf(e.element.value[e.element.selectionStart - 1]) !== o.lastIndexOf(e.element.value[e.element.selectionStart - 1]) && e.element.value[e.element.selectionStart - 1].charCodeAt(0) === h) || e.element.value[e.element.selectionStart - 1].charCodeAt(0) !== h) {
                                    e.element.value = e.element.value.substring(0, r) + e.element.value.substring(i, e.element.value.length);
                                    e.element.setSelectionRange(r, r);
                                    if (isNaN(parseFloat(e.element.value[e.element.selectionStart - 1])) && e.element.selectionStart > 0 && e.element.value.length) {
                                        e.preventHandler();
                                    }
                                }
                            } else if (isNaN(parseFloat(e.element.value[e.element.selectionStart - 2])) && e.element.selectionStart > 1 && e.element.value[e.element.selectionStart - 2].charCodeAt(0) !== 45) {
                                if ((o.indexOf(e.element.value[e.element.selectionStart - 2]) !== o.lastIndexOf(e.element.value[e.element.selectionStart - 2]) && e.element.value[e.element.selectionStart - 2].charCodeAt(0) === h) || e.element.value[e.element.selectionStart - 2].charCodeAt(0) !== h) {
                                    e.element.setSelectionRange(r, r);
                                    e.nextEle = e.element.value[e.element.selectionStart];
                                    e.cursorPosChanged = true;
                                    e.preventHandler();
                                }
                            }
                            if (e.cursorPosChanged === true && e.element.value[e.element.selectionStart] === e.nextEle && isNaN(parseFloat(e.element.value[e.element.selectionStart - 1]))) {
                                e.element.setSelectionRange(e.element.selectionStart + 1, e.element.selectionStart + 1);
                                e.cursorPosChanged = false;
                                e.nextEle = null;
                            }
                            if (e.element.value.trim() === '') {
                                e.element.setSelectionRange(s, s);
                            }
                            if (e.element.selectionStart > 0) {
                                if ((e.element.value[e.element.selectionStart - 1].charCodeAt(0) === 45) && e.element.selectionStart > 1) {
                                    if ((0, n.le)(e.prevVal)) {
                                        e.element.value = e.element.value;
                                    } else {
                                        e.element.value = e.prevVal;
                                    }
                                    e.element.setSelectionRange(e.element.selectionStart, e.element.selectionStart);
                                }
                                if (e.element.value[e.element.selectionStart - 1] === l && e.decimals === 0 && e.validateDecimalOnType) {
                                    e.element.value = e.element.value.substring(0, r) + e.element.value.substring(i, e.element.value.length);
                                }
                            }
                            e.prevVal = e.element.value;
                        }
                    });
                };
                t.prototype.keyUpHandler = function() {
                    if (!this.enabled || this.readonly) {
                        return;
                    }
                    var e = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
                    if (!e && n.AR.isDevice) {
                        this.preventHandler();
                    }
                    var t = this.instance.getNumberParser({
                        format: 'n'
                    })(this.element.value);
                    t = t === null || isNaN(t) ? null : t;
                    this.hiddenInput.value = t || t === 0 ? t.toString() : null;
                    var i = (0, n.oq)(this.element, 'form');
                    if (i) {
                        var r = this.element.nextElementSibling;
                        var s = document.createEvent('KeyboardEvent');
                        s.initEvent('keyup', false, true);
                        r.dispatchEvent(s);
                    }
                };
                t.prototype.inputHandler = function(e) {
                    var t = this;
                    if (!this.enabled || this.readonly) {
                        return;
                    }
                    var i = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
                    var r = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
                    if ((r || i) && n.AR.isDevice) {
                        this.preventHandler();
                    }
                    if (this.isAngular && this.element.value !== (0, n.NA)('decimal', (0, n.NE)(this.locale)) && this.element.value !== (0, n.NA)('minusSign', (0, n.NE)(this.locale))) {
                        var s = this.instance.getNumberParser({
                            format: 'n'
                        })(this.element.value);
                        s = isNaN(s) ? null : s;
                        t.localChange({
                            value: s
                        });
                        this.preventChange = true;
                    }
                    if (this.isVue) {
                        var o = this.instance.getNumberParser({
                            format: 'n'
                        })(this.element.value);
                        var a = this.instance.getNumberParser({
                            format: 'n'
                        })(this.elementPrevValue);
                        var l = new RegExp('[^1-9]+$');
                        if (l.test(this.element.value)) {
                            o = this.value;
                        }
                        var h = {
                            event: e,
                            value: (o === null || isNaN(o) ? null : o),
                            previousValue: (a === null || isNaN(a) ? null : a)
                        };
                        this.preventChange = true;
                        this.elementPrevValue = this.element.value;
                        this.trigger('input', h);
                    }
                };
                t.prototype.keyDownHandler = function(e) {
                    if (!this.readonly) {
                        switch(e.keyCode){
                            case 38:
                                e.preventDefault();
                                this.action(p, e);
                                break;
                            case 40:
                                e.preventDefault();
                                this.action(u, e);
                                break;
                            default:
                                break;
                        }
                    }
                };
                t.prototype.performAction = function(e, t, i) {
                    if (e === null || isNaN(e)) {
                        e = 0;
                    }
                    var n = i === p ? e + t : e - t;
                    n = this.correctRounding(e, t, n);
                    return this.strictMode ? this.trimValue(n) : n;
                };
                t.prototype.correctRounding = function(e, t, i) {
                    var n = new RegExp('[,.](.*)');
                    var r = n.test(e.toString());
                    var s = n.test(t.toString());
                    if (r || s) {
                        var o = r ? n.exec(e.toString())[0].length : 0;
                        var a = s ? n.exec(t.toString())[0].length : 0;
                        var l = Math.max(o, a);
                        return e = this.roundValue(i, l);
                    }
                    return i;
                };
                t.prototype.roundValue = function(e, t) {
                    t = t || 0;
                    var i = Math.pow(10, t);
                    return e *= i, e = Math.round(e) / i;
                };
                t.prototype.updateValue = function(e, t) {
                    if (t) {
                        this.isInteract = true;
                    }
                    if (e !== null && !isNaN(e)) {
                        if (this.decimals) {
                            e = this.roundNumber(e, this.decimals);
                        }
                    }
                    this.changeValue(e === null || isNaN(e) ? null : this.strictMode ? this.trimValue(e) : e);
                    if (!this.isDynamicChange) {
                        this.raiseChangeEvent(t);
                    }
                };
                t.prototype.updateCurrency = function(e, t) {
                    (0, n.sO)(e, t, this.cultureInfo);
                    this.updateValue(this.value);
                };
                t.prototype.changeValue = function(e) {
                    if (!(e || e === 0)) {
                        e = null;
                        this.setProperties({
                            value: e
                        }, true);
                    } else {
                        var t = this.getNumberOfDecimals(e);
                        this.setProperties({
                            value: this.roundNumber(e, t)
                        }, true);
                    }
                    this.modifyText();
                    if (!this.strictMode) {
                        this.validateState();
                    }
                };
                t.prototype.modifyText = function() {
                    if (this.value || this.value === 0) {
                        var e = this.formatNumber();
                        var t = this.isFocused ? e : this.instance.getNumberFormat(this.cultureInfo)(this.value);
                        this.setElementValue(t);
                        (0, n.Y4)(this.element, {
                            'aria-valuenow': e
                        });
                        this.hiddenInput.value = this.value.toString();
                        if (this.value !== null && this.serverDecimalSeparator) {
                            this.hiddenInput.value = this.hiddenInput.value.replace('.', this.serverDecimalSeparator);
                        }
                    } else {
                        this.setElementValue('');
                        this.element.removeAttribute('aria-valuenow');
                        this.hiddenInput.value = null;
                    }
                };
                t.prototype.setElementValue = function(e, t) {
                    r.I.setValue(e, (t ? t : this.element), this.floatLabelType, this.showClearButton);
                };
                t.prototype.validateState = function() {
                    this.isValidState = true;
                    if (this.value || this.value === 0) {
                        this.isValidState = !(this.value > this.max || this.value < this.min);
                    }
                    this.checkErrorClass();
                };
                t.prototype.getNumberOfDecimals = function(e) {
                    var t;
                    var i = new RegExp('[eE][\-+]?([0-9]+)');
                    var r = e.toString();
                    if (i.test(r)) {
                        var s = i.exec(r);
                        if (!(0, n.le)(s)) {
                            r = e.toFixed(Math.min(parseInt(s[1], 10), 20));
                        }
                    }
                    var o = r.split('.')[1];
                    t = !o || !o.length ? 0 : o.length;
                    if (this.decimals !== null) {
                        t = t < this.decimals ? t : this.decimals;
                    }
                    return t;
                };
                t.prototype.formatNumber = function() {
                    var e = this.getNumberOfDecimals(this.value);
                    return this.instance.getNumberFormat({
                        maximumFractionDigits: e,
                        minimumFractionDigits: e,
                        useGrouping: false
                    })(this.value);
                };
                t.prototype.trimValue = function(e) {
                    if (e > this.max) {
                        return this.max;
                    }
                    if (e < this.min) {
                        return this.min;
                    }
                    return e;
                };
                t.prototype.roundNumber = function(e, t) {
                    var i = e;
                    var n = t || 0;
                    var r = i.toString().split('e');
                    i = Math.round(Number(r[0] + 'e' + (r[1] ? (Number(r[1]) + n) : n)));
                    var s = i.toString().split('e');
                    i = Number(s[0] + 'e' + (s[1] ? (Number(s[1]) - n) : -n));
                    return Number(i.toFixed(n));
                };
                t.prototype.cancelEvent = function(e) {
                    e.preventDefault();
                    return false;
                };
                t.prototype.keyPressHandler = function(e) {
                    if (!this.enabled || this.readonly) {
                        return true;
                    }
                    if (!n.AR.isDevice && n.AR.info.version === '11.0' && e.keyCode === 13) {
                        var t = this.instance.getNumberParser({
                            format: 'n'
                        })(this.element.value);
                        this.updateValue(t, e);
                        return true;
                    }
                    if (e.which === 0 || e.metaKey || e.ctrlKey || e.keyCode === 8 || e.keyCode === 13) {
                        return true;
                    }
                    var i = String.fromCharCode(e.which);
                    var r = (0, n.NA)('decimal', (0, n.NE)(this.locale));
                    var s = e.code === "NumpadDecimal" && i !== r;
                    if (s) {
                        i = r;
                    }
                    var o = this.element.value;
                    o = o.substring(0, this.element.selectionStart) + i + o.substring(this.element.selectionEnd);
                    if (!this.numericRegex().test(o)) {
                        e.preventDefault();
                        e.stopPropagation();
                        return false;
                    } else {
                        if (s) {
                            var a = this.element.selectionStart + 1;
                            this.element.value = o;
                            this.element.setSelectionRange(a, a);
                            e.preventDefault();
                            e.stopPropagation();
                        }
                        return true;
                    }
                };
                t.prototype.numericRegex = function() {
                    var e = (0, n.NE)(this.locale);
                    var t = (0, n.NA)('decimal', e);
                    var i = '*';
                    if (t === m) {
                        t = '\\' + t;
                    }
                    if (this.decimals === 0 && this.validateDecimalOnType) {
                        return f;
                    }
                    if (this.decimals && this.validateDecimalOnType) {
                        i = '{0,' + this.decimals + '}';
                    }
                    return new RegExp('^(-)?(((\\d+(' + t + '\\d' + i + ')?)|(' + t + '\\d' + i + ')))?$');
                };
                t.prototype.mouseWheel = function(e) {
                    e.preventDefault();
                    var t;
                    var i = e;
                    if (i.wheelDelta) {
                        t = i.wheelDelta / 120;
                    } else if (i.detail) {
                        t = -i.detail / 3;
                    }
                    if (t > 0) {
                        this.action(p, e);
                    } else if (t < 0) {
                        this.action(u, e);
                    }
                    this.cancelEvent(e);
                };
                t.prototype.focusHandler = function(e) {
                    var t = this;
                    this.focusEventArgs = {
                        event: e,
                        value: this.value,
                        container: this.container
                    };
                    this.trigger('focus', this.focusEventArgs);
                    if (!this.enabled || this.readonly) {
                        return;
                    }
                    this.isFocused = true;
                    (0, n.IV)([
                        this.container
                    ], d);
                    this.prevValue = this.value;
                    if ((this.value || this.value === 0)) {
                        var i = this.formatNumber();
                        this.setElementValue(i);
                        if (!this.isPrevFocused) {
                            if (!n.AR.isDevice && n.AR.info.version === '11.0') {
                                this.element.setSelectionRange(0, i.length);
                            } else {
                                var r = (n.AR.isDevice && n.AR.isIos) ? 600 : 0;
                                setTimeout(function() {
                                    t.element.setSelectionRange(0, i.length);
                                }, r);
                            }
                        }
                    }
                    if (!n.AR.isDevice) {
                        n.bi.add(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel, this);
                    }
                };
                t.prototype.focusOutHandler = function(e) {
                    var t = this;
                    this.blurEventArgs = {
                        event: e,
                        value: this.value,
                        container: this.container
                    };
                    this.trigger('blur', this.blurEventArgs);
                    if (!this.enabled || this.readonly) {
                        return;
                    }
                    if (this.isPrevFocused) {
                        e.preventDefault();
                        if (n.AR.isDevice) {
                            var i = this.element.value;
                            this.element.focus();
                            this.isPrevFocused = false;
                            var r = this.element;
                            setTimeout(function() {
                                t.setElementValue(i, r);
                            }, 200);
                        }
                    } else {
                        this.isFocused = false;
                        if (!this.element.value.length) {
                            this.setProperties({
                                value: null
                            }, true);
                        }
                        var s = this.instance.getNumberParser({
                            format: 'n'
                        })(this.element.value);
                        this.updateValue(s);
                        if (!n.AR.isDevice) {
                            n.bi.remove(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel);
                        }
                    }
                    var o = (0, n.oq)(this.element, 'form');
                    if (o) {
                        var a = this.element.nextElementSibling;
                        var l = document.createEvent('FocusEvent');
                        l.initEvent('focusout', false, true);
                        a.dispatchEvent(l);
                    }
                };
                t.prototype.mouseDownOnSpinner = function(e) {
                    var t = this;
                    if (this.isFocused) {
                        this.isPrevFocused = true;
                        e.preventDefault();
                    }
                    if (!this.getElementData(e)) {
                        return;
                    }
                    var i = this.getElementData(e);
                    var r = e.currentTarget;
                    var s = (r.classList.contains(h)) ? p : u;
                    n.bi.add(r, 'mouseleave', this.mouseUpClick, this);
                    this.timeOut = setInterval(function() {
                        t.isCalled = true;
                        t.action(s, e);
                    }, 150);
                    n.bi.add(document, 'mouseup', this.mouseUpClick, this);
                };
                t.prototype.touchMoveOnSpinner = function(e) {
                    var t;
                    if (e.type === "touchmove") {
                        var i = e.touches;
                        t = i.length && document.elementFromPoint(i[0].pageX, i[0].pageY);
                    } else {
                        t = document.elementFromPoint(e.clientX, e.clientY);
                    }
                    if (!(t.classList.contains(l))) {
                        clearInterval(this.timeOut);
                    }
                };
                t.prototype.mouseUpOnSpinner = function(e) {
                    this.prevValue = this.value;
                    if (this.isPrevFocused) {
                        this.element.focus();
                        if (!n.AR.isDevice) {
                            this.isPrevFocused = false;
                        }
                    }
                    if (!n.AR.isDevice) {
                        e.preventDefault();
                    }
                    if (!this.getElementData(e)) {
                        return;
                    }
                    var t = e.currentTarget;
                    var i = (t.classList.contains(h)) ? p : u;
                    n.bi.remove(t, 'mouseleave', this.mouseUpClick);
                    if (!this.isCalled) {
                        this.action(i, e);
                    }
                    this.isCalled = false;
                    n.bi.remove(document, 'mouseup', this.mouseUpClick);
                    var r = (0, n.oq)(this.element, 'form');
                    if (r) {
                        var s = this.element.nextElementSibling;
                        var o = document.createEvent('KeyboardEvent');
                        o.initEvent('keyup', false, true);
                        s.dispatchEvent(o);
                    }
                };
                t.prototype.getElementData = function(e) {
                    if ((e.which && e.which === 3) || (e.button && e.button === 2) || !this.enabled || this.readonly) {
                        return false;
                    }
                    clearInterval(this.timeOut);
                    return true;
                };
                t.prototype.floatLabelTypeUpdate = function() {
                    r.I.removeFloating(this.inputWrapper);
                    var e = this.hiddenInput;
                    this.hiddenInput.remove();
                    r.I.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);
                    this.container.insertBefore(e, this.container.childNodes[1]);
                };
                t.prototype.mouseUpClick = function(e) {
                    e.stopPropagation();
                    clearInterval(this.timeOut);
                    this.isCalled = false;
                    n.bi.remove(this.spinUp, 'mouseleave', this.mouseUpClick);
                    n.bi.remove(this.spinDown, 'mouseleave', this.mouseUpClick);
                };
                t.prototype.increment = function(e) {
                    if (e === void 0) {
                        e = this.step;
                    }
                    this.isInteract = false;
                    this.changeValue(this.performAction(this.value, e, p));
                    this.raiseChangeEvent();
                };
                t.prototype.decrement = function(e) {
                    if (e === void 0) {
                        e = this.step;
                    }
                    this.isInteract = false;
                    this.changeValue(this.performAction(this.value, e, u));
                    this.raiseChangeEvent();
                };
                t.prototype.destroy = function() {
                    this.unwireEvents();
                    (0, n.og)(this.hiddenInput);
                    if (this.showSpinButton) {
                        this.unwireSpinBtnEvents();
                        (0, n.og)(this.spinUp);
                        (0, n.og)(this.spinDown);
                    }
                    var t = [
                        'aria-labelledby',
                        'role',
                        'autocomplete',
                        'aria-readonly',
                        'autocorrect',
                        'aria-disabled',
                        'aria-placeholder',
                        'autocapitalize',
                        'spellcheck',
                        'aria-autocomplete',
                        'tabindex',
                        'aria-valuemin',
                        'aria-valuemax',
                        'aria-live',
                        'aria-valuenow',
                        'aria-invalid'
                    ];
                    for(var i = 0; i < t.length; i++){
                        this.element.removeAttribute(t[i]);
                    }
                    this.element.classList.remove('e-input');
                    this.container.insertAdjacentElement('afterend', this.element);
                    (0, n.og)(this.container);
                    e.prototype.destroy.call(this);
                };
                t.prototype.getText = function() {
                    return this.element.value;
                };
                t.prototype.focusIn = function() {
                    if (document.activeElement !== this.element && this.enabled) {
                        this.element.focus();
                        (0, n.cn)([
                            this.container
                        ], [
                            b
                        ]);
                    }
                };
                t.prototype.focusOut = function() {
                    if (document.activeElement === this.element && this.enabled) {
                        this.element.blur();
                        (0, n.IV)([
                            this.container
                        ], [
                            b
                        ]);
                    }
                };
                t.prototype.getPersistData = function() {
                    var e = [
                        'value'
                    ];
                    return this.addOnPersist(e);
                };
                t.prototype.onPropertyChanged = function(e, t) {
                    for(var i = 0, s = Object.keys(e); i < s.length; i++){
                        var o = s[i];
                        switch(o){
                            case 'width':
                                this.setElementWidth(e.width);
                                r.I.calculateWidth(this.element, this.container);
                                break;
                            case 'cssClass':
                                this.updateCssClass(e.cssClass, t.cssClass);
                                break;
                            case 'enabled':
                                r.I.setEnabled(e.enabled, this.element);
                                break;
                            case 'enableRtl':
                                r.I.setEnableRtl(e.enableRtl, [
                                    this.container
                                ]);
                                break;
                            case 'readonly':
                                r.I.setReadonly(e.readonly, this.element);
                                if (this.readonly) {
                                    (0, n.Y4)(this.element, {
                                        'aria-readonly': 'true'
                                    });
                                } else {
                                    this.element.removeAttribute('aria-readonly');
                                }
                                break;
                            case 'htmlAttributes':
                                this.updateHTMLAttrToElement();
                                this.updateHTMLAttrToWrapper();
                                this.updateDataAttribute(true);
                                this.checkAttributes(true);
                                r.I.validateInputType(this.container, this.element);
                                break;
                            case 'placeholder':
                                r.I.setPlaceholder(e.placeholder, this.element);
                                r.I.calculateWidth(this.element, this.container);
                                break;
                            case 'step':
                                this.step = e.step;
                                this.validateStep();
                                break;
                            case 'showSpinButton':
                                this.updateSpinButton(e);
                                break;
                            case 'showClearButton':
                                this.updateClearButton(e);
                                break;
                            case 'floatLabelType':
                                this.floatLabelType = e.floatLabelType;
                                this.floatLabelTypeUpdate();
                                break;
                            case 'value':
                                this.isDynamicChange = (this.isAngular || this.isVue) && this.preventChange;
                                this.updateValue(e.value);
                                if (this.isDynamicChange) {
                                    this.preventChange = false;
                                    this.isDynamicChange = false;
                                }
                                break;
                            case 'min':
                            case 'max':
                                (0, n.sO)(o, (0, n.NA)(o, e), this);
                                this.validateMinMax();
                                this.updateValue(this.value);
                                break;
                            case 'strictMode':
                                this.strictMode = e.strictMode;
                                this.updateValue(this.value);
                                this.validateState();
                                break;
                            case 'locale':
                                this.initCultureFunc();
                                this.l10n.setLocale(this.locale);
                                this.setSpinButton();
                                this.updatePlaceholder();
                                r.I.setPlaceholder(this.placeholder, this.element);
                                this.updateValue(this.value);
                                break;
                            case 'currency':
                                {
                                    var a = (0, n.NA)(o, e);
                                    this.setProperties({
                                        currencyCode: a
                                    }, true);
                                    this.updateCurrency(o, a);
                                }
                                break;
                            case 'currencyCode':
                                {
                                    var l = (0, n.NA)(o, e);
                                    this.setProperties({
                                        currency: l
                                    }, true);
                                    this.updateCurrency('currency', l);
                                }
                                break;
                            case 'format':
                                (0, n.sO)(o, (0, n.NA)(o, e), this);
                                this.initCultureInfo();
                                this.updateValue(this.value);
                                break;
                            case 'decimals':
                                this.decimals = e.decimals;
                                this.updateValue(this.value);
                        }
                    }
                };
                t.prototype.updateClearButton = function(e) {
                    r.I.setClearButton(e.showClearButton, this.element, this.inputWrapper, undefined, this.createElement);
                    this.bindClearEvent();
                };
                t.prototype.updateSpinButton = function(e) {
                    if (e.showSpinButton) {
                        this.spinBtnCreation();
                    } else {
                        (0, n.og)(this.spinUp);
                        (0, n.og)(this.spinDown);
                    }
                };
                t.prototype.getModuleName = function() {
                    return 'numerictextbox';
                };
                o([
                    (0, n.Z9)('')
                ], t.prototype, "cssClass", void 0);
                o([
                    (0, n.Z9)(null)
                ], t.prototype, "value", void 0);
                o([
                    (0, n.Z9)(-(Number.MAX_VALUE))
                ], t.prototype, "min", void 0);
                o([
                    (0, n.Z9)(Number.MAX_VALUE)
                ], t.prototype, "max", void 0);
                o([
                    (0, n.Z9)(1)
                ], t.prototype, "step", void 0);
                o([
                    (0, n.Z9)(null)
                ], t.prototype, "width", void 0);
                o([
                    (0, n.Z9)(null)
                ], t.prototype, "placeholder", void 0);
                o([
                    (0, n.Z9)({})
                ], t.prototype, "htmlAttributes", void 0);
                o([
                    (0, n.Z9)(true)
                ], t.prototype, "showSpinButton", void 0);
                o([
                    (0, n.Z9)(false)
                ], t.prototype, "readonly", void 0);
                o([
                    (0, n.Z9)(true)
                ], t.prototype, "enabled", void 0);
                o([
                    (0, n.Z9)(false)
                ], t.prototype, "showClearButton", void 0);
                o([
                    (0, n.Z9)(false)
                ], t.prototype, "enablePersistence", void 0);
                o([
                    (0, n.Z9)('n2')
                ], t.prototype, "format", void 0);
                o([
                    (0, n.Z9)(null)
                ], t.prototype, "decimals", void 0);
                o([
                    (0, n.Z9)(null)
                ], t.prototype, "currency", void 0);
                o([
                    (0, n.Z9)(null)
                ], t.prototype, "currencyCode", void 0);
                o([
                    (0, n.Z9)(true)
                ], t.prototype, "strictMode", void 0);
                o([
                    (0, n.Z9)(false)
                ], t.prototype, "validateDecimalOnType", void 0);
                o([
                    (0, n.Z9)('Never')
                ], t.prototype, "floatLabelType", void 0);
                o([
                    (0, n.ju)()
                ], t.prototype, "created", void 0);
                o([
                    (0, n.ju)()
                ], t.prototype, "destroyed", void 0);
                o([
                    (0, n.ju)()
                ], t.prototype, "change", void 0);
                o([
                    (0, n.ju)()
                ], t.prototype, "focus", void 0);
                o([
                    (0, n.ju)()
                ], t.prototype, "blur", void 0);
                t = o([
                    n.Zl
                ], t);
                return t;
            }(n.wA));
        }),
        4895: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "RR": function() {
                    return h;
                },
                "Tj": function() {
                    return a;
                },
                "vF": function() {
                    return l;
                }
            });
            var n = i(6216);
            var r = i(1807);
            var s;
            var o;
            function a(e, t, i, r) {
                if (t === void 0) {
                    t = null;
                }
                if (i === void 0) {
                    i = {
                        X: false,
                        Y: false
                    };
                }
                if (!i.Y && !i.X) {
                    return {
                        left: 0,
                        top: 0
                    };
                }
                var a = e.getBoundingClientRect();
                o = t;
                s = e.ownerDocument;
                if (!r) {
                    r = (0, n.k)(e, 'left', 'top');
                }
                if (i.X) {
                    var l = o ? g() : N();
                    var h = S();
                    var c = w();
                    var d = h - r.left;
                    var p = r.left + a.width - c;
                    if (a.width > l) {
                        if (d > 0 && p <= 0) {
                            r.left = c - a.width;
                        } else if (p > 0 && d <= 0) {
                            r.left = h;
                        } else {
                            r.left = d > p ? (c - a.width) : h;
                        }
                    } else if (d > 0) {
                        r.left += d;
                    } else if (p > 0) {
                        r.left -= p;
                    }
                }
                if (i.Y) {
                    var u = o ? b() : L();
                    var f = E();
                    var m = T();
                    var v = f - r.top;
                    var y = r.top + a.height - m;
                    if (a.height > u) {
                        if (v > 0 && y <= 0) {
                            r.top = m - a.height;
                        } else if (y > 0 && v <= 0) {
                            r.top = f;
                        } else {
                            r.top = v > y ? (m - a.height) : f;
                        }
                    } else if (v > 0) {
                        r.top += v;
                    } else if (y > 0) {
                        r.top -= y;
                    }
                }
                return r;
            }
            function l(e, t, i, r) {
                if (t === void 0) {
                    t = null;
                }
                var a = (0, n.k)(e, 'left', 'top');
                if (i) {
                    a.left = i;
                }
                if (r) {
                    a.top = r;
                }
                var l = [];
                o = t;
                s = e.ownerDocument;
                var h = e.getBoundingClientRect();
                var c = a.top;
                var d = a.left;
                var p = a.left + h.width;
                var f = a.top + h.height;
                var m = '', g = '';
                var b = v(c, f);
                var y = u(d, p);
                if (b.topSide) {
                    l.push('top');
                }
                if (y.rightSide) {
                    l.push('right');
                }
                if (y.leftSide) {
                    l.push('left');
                }
                if (b.bottomSide) {
                    l.push('bottom');
                }
                return l;
            }
            function h(e, t, i, n, r, a, l, h, u) {
                if (l === void 0) {
                    l = null;
                }
                if (h === void 0) {
                    h = {
                        X: true,
                        Y: true
                    };
                }
                if (!t || !e || !r || !a || (!h.X && !h.Y)) {
                    return;
                }
                var v = {
                    TL: null,
                    TR: null,
                    BL: null,
                    BR: null
                }, g = {
                    TL: null,
                    TR: null,
                    BL: null,
                    BR: null
                };
                var b;
                if (window.getComputedStyle(e).display === 'none') {
                    var y = e.style.visibility;
                    e.style.visibility = 'hidden';
                    e.style.display = 'block';
                    b = e.getBoundingClientRect();
                    e.style.removeProperty('display');
                    e.style.visibility = y;
                } else {
                    b = e.getBoundingClientRect();
                }
                var C = {
                    posX: r,
                    posY: a,
                    offsetX: i,
                    offsetY: n,
                    position: {
                        left: 0,
                        top: 0
                    }
                };
                o = l;
                s = t.ownerDocument;
                d(t, v, C, u, b);
                p(g, C, b);
                if (h.X) {
                    f(t, g, v, C, b, true);
                }
                if (h.Y && v.TL.top > -1) {
                    m(t, g, v, C, b, true);
                }
                c(e, C, b);
            }
            function c(e, t, i) {
                var r = 0, s = 0;
                if (e.offsetParent != null && (getComputedStyle(e.offsetParent).position === 'absolute' || getComputedStyle(e.offsetParent).position === 'relative')) {
                    var o = (0, n.k)(e.offsetParent, 'left', 'top', false, i);
                    r = o.left;
                    s = o.top;
                }
                e.style.top = (t.position.top + t.offsetY - (s)) + 'px';
                e.style.left = (t.position.left + t.offsetX - (r)) + 'px';
            }
            function d(e, t, i, r, s) {
                i.position = (0, n.k)(e, i.posX, i.posY, r, s);
                t.TL = (0, n.k)(e, 'left', 'top', r, s);
                t.TR = (0, n.k)(e, 'right', 'top', r, s);
                t.BR = (0, n.k)(e, 'left', 'bottom', r, s);
                t.BL = (0, n.k)(e, 'right', 'bottom', r, s);
            }
            function p(e, t, i) {
                e.TL = {
                    top: t.position.top + t.offsetY,
                    left: t.position.left + t.offsetX
                };
                e.TR = {
                    top: e.TL.top,
                    left: e.TL.left + i.width
                };
                e.BL = {
                    top: e.TL.top + i.height,
                    left: e.TL.left
                };
                e.BR = {
                    top: e.TL.top + i.height,
                    left: e.TL.left + i.width
                };
            }
            function u(e, t) {
                var i = false, n = false;
                if (((e - x()) < S())) {
                    i = true;
                }
                if (t > w()) {
                    n = true;
                }
                return {
                    leftSide: i,
                    rightSide: n
                };
            }
            function f(e, t, i, r, s, o) {
                var a = u(t.TL.left, t.TR.left);
                if ((i.TL.left - x()) <= S()) {
                    a.leftSide = false;
                }
                if (i.TR.left > w()) {
                    a.rightSide = false;
                }
                if ((a.leftSide && !a.rightSide) || (!a.leftSide && a.rightSide)) {
                    if (r.posX === 'right') {
                        r.posX = 'left';
                    } else {
                        r.posX = 'right';
                    }
                    r.offsetX = r.offsetX + s.width;
                    r.offsetX = -1 * r.offsetX;
                    r.position = (0, n.k)(e, r.posX, r.posY, false);
                    p(t, r, s);
                    if (o) {
                        f(e, t, i, r, s, false);
                    }
                }
            }
            function m(e, t, i, r, s, o) {
                var a = v(t.TL.top, t.BL.top);
                if ((i.TL.top - k()) <= E()) {
                    a.topSide = false;
                }
                if (i.BL.top >= T() && e.getBoundingClientRect().bottom < window.innerHeight) {
                    a.bottomSide = false;
                }
                if ((a.topSide && !a.bottomSide) || (!a.topSide && a.bottomSide)) {
                    if (r.posY === 'top') {
                        r.posY = 'bottom';
                    } else {
                        r.posY = 'top';
                    }
                    r.offsetY = r.offsetY + s.height;
                    r.offsetY = -1 * r.offsetY;
                    r.position = (0, n.k)(e, r.posX, r.posY, false, s);
                    p(t, r, s);
                    if (o) {
                        m(e, t, i, r, s, false);
                    }
                }
            }
            function v(e, t) {
                var i = false, n = false;
                if ((e - k()) < E()) {
                    i = true;
                }
                if (t > T()) {
                    n = true;
                }
                return {
                    topSide: i,
                    bottomSide: n
                };
            }
            function g() {
                return o.getBoundingClientRect().width;
            }
            function b() {
                return o.getBoundingClientRect().height;
            }
            function y() {
                return o.getBoundingClientRect().left;
            }
            function C() {
                return o.getBoundingClientRect().top;
            }
            function E() {
                if (o) {
                    return C();
                }
                return 0;
            }
            function S() {
                if (o) {
                    return y();
                }
                return 0;
            }
            function w() {
                if (o) {
                    return (x() + y() + g());
                }
                return (x() + N());
            }
            function T() {
                if (o) {
                    return (k() + C() + b());
                }
                return (k() + L());
            }
            function k() {
                return s.documentElement.scrollTop || s.body.scrollTop;
            }
            function x() {
                return s.documentElement.scrollLeft || s.body.scrollLeft;
            }
            function L() {
                return window.innerHeight;
            }
            function N() {
                var e = window.innerWidth;
                var t = document.documentElement.getBoundingClientRect();
                var i = ((0, r.le)(document.documentElement)) ? 0 : t.width;
                return e - (e - i);
            }
        }),
        6216: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "O": function() {
                    return h;
                },
                "k": function() {
                    return c;
                }
            });
            var n = i(1807);
            var r;
            var s;
            var o;
            var a;
            var l = false;
            function h(e, t) {
                var i = false;
                var r = {
                    left: 0,
                    top: 0
                };
                var s = e;
                if (!e || !t) {
                    return r;
                }
                if ((0, n.le)(t.offsetParent) && t.style.position === 'fixed') {
                    i = true;
                }
                while((t.offsetParent || i) && e && t.offsetParent !== e){
                    r.left += e.offsetLeft;
                    r.top += e.offsetTop;
                    e = e.offsetParent;
                }
                e = s;
                while((t.offsetParent || i) && e && t.offsetParent !== e){
                    r.left -= e.scrollLeft;
                    r.top -= e.scrollTop;
                    e = e.parentElement;
                }
                return r;
            }
            function c(e, t, i, n, r) {
                s = undefined;
                s = r;
                l = n ? true : false;
                if (!e) {
                    return {
                        left: 0,
                        top: 0
                    };
                }
                if (!t) {
                    t = 'left';
                }
                if (!i) {
                    i = 'top';
                }
                a = e.ownerDocument;
                o = e;
                var h = {
                    left: 0,
                    top: 0
                };
                return u(t.toLowerCase(), i.toLowerCase(), h);
            }
            function d(e, t) {
                t.left = e;
            }
            function p(e, t) {
                t.top = e;
            }
            function u(e, t, i) {
                r = o.getBoundingClientRect();
                switch(t + e){
                    case 'topcenter':
                        d(E(), i);
                        p(b(), i);
                        break;
                    case 'topright':
                        d(C(), i);
                        p(b(), i);
                        break;
                    case 'centercenter':
                        d(E(), i);
                        p(g(), i);
                        break;
                    case 'centerright':
                        d(C(), i);
                        p(g(), i);
                        break;
                    case 'centerleft':
                        d(y(), i);
                        p(g(), i);
                        break;
                    case 'bottomcenter':
                        d(E(), i);
                        p(v(), i);
                        break;
                    case 'bottomright':
                        d(C(), i);
                        p(v(), i);
                        break;
                    case 'bottomleft':
                        d(y(), i);
                        p(v(), i);
                        break;
                    default:
                    case 'topleft':
                        d(y(), i);
                        p(b(), i);
                        break;
                }
                return i;
            }
            function f() {
                return a.documentElement.scrollTop || a.body.scrollTop;
            }
            function m() {
                return a.documentElement.scrollLeft || a.body.scrollLeft;
            }
            function v() {
                return l ? r.bottom : r.bottom + f();
            }
            function g() {
                return b() + (r.height / 2);
            }
            function b() {
                return l ? r.top : r.top + f();
            }
            function y() {
                return r.left + m();
            }
            function C() {
                var e = (o && o.classList.contains('e-date-range-wrapper')) ? (s ? s.width : 0) : (s && (r.width >= s.width) ? s.width : 0);
                return r.right + m() - e;
            }
            function E() {
                return y() + (r.width / 2);
            }
        }),
        9486: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "GI": function() {
                    return c;
                },
                "Mm": function() {
                    return d;
                },
                "TE": function() {
                    return p;
                },
                "WV": function() {
                    return l;
                }
            });
            var n = i(1807);
            var r = i(6216);
            var s = i(4895);
            var o = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var a = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var l = (function(e) {
                o(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                a([
                    (0, n.Z9)('left')
                ], t.prototype, "X", void 0);
                a([
                    (0, n.Z9)('top')
                ], t.prototype, "Y", void 0);
                return t;
            }(n.rt));
            var h = {
                ROOT: 'e-popup',
                RTL: 'e-rtl',
                OPEN: 'e-popup-open',
                CLOSE: 'e-popup-close'
            };
            var c = (function(e) {
                o(t, e);
                function t(t, i) {
                    return e.call(this, i, t) || this;
                }
                t.prototype.onPropertyChanged = function(e, t) {
                    for(var i = 0, r = Object.keys(e); i < r.length; i++){
                        var s = r[i];
                        switch(s){
                            case 'width':
                                (0, n.V7)(this.element, {
                                    'width': (0, n.Ac)(e.width)
                                });
                                break;
                            case 'height':
                                (0, n.V7)(this.element, {
                                    'height': (0, n.Ac)(e.height)
                                });
                                break;
                            case 'zIndex':
                                (0, n.V7)(this.element, {
                                    'zIndex': e.zIndex
                                });
                                break;
                            case 'enableRtl':
                                this.setEnableRtl();
                                break;
                            case 'position':
                            case 'relateTo':
                                this.refreshPosition();
                                break;
                            case 'offsetX':
                                var o = e.offsetX - t.offsetX;
                                this.element.style.left = (parseInt(this.element.style.left, 10) + (o)).toString() + 'px';
                                break;
                            case 'offsetY':
                                var a = e.offsetY - t.offsetY;
                                this.element.style.top = (parseInt(this.element.style.top, 10) + (a)).toString() + 'px';
                                break;
                            case 'content':
                                this.setContent();
                                break;
                            case 'actionOnScroll':
                                if (e.actionOnScroll !== 'none') {
                                    this.wireScrollEvents();
                                } else {
                                    this.unwireScrollEvents();
                                }
                                break;
                        }
                    }
                };
                t.prototype.getModuleName = function() {
                    return 'popup';
                };
                t.prototype.resolveCollision = function() {
                    this.checkCollision();
                };
                t.prototype.getPersistData = function() {
                    return this.addOnPersist([]);
                };
                t.prototype.destroy = function() {
                    this.element.classList.remove(h.ROOT, h.RTL, h.OPEN, h.CLOSE);
                    if (this.element.classList.contains('e-popup-open')) {
                        this.unwireEvents();
                    }
                    e.prototype.destroy.call(this);
                };
                t.prototype.render = function() {
                    this.element.classList.add(h.ROOT);
                    var e = {};
                    if (this.zIndex !== 1000) {
                        e.zIndex = this.zIndex;
                    }
                    if (this.width !== 'auto') {
                        e.width = (0, n.Ac)(this.width);
                    }
                    if (this.height !== 'auto') {
                        e.height = (0, n.Ac)(this.height);
                    }
                    (0, n.V7)(this.element, e);
                    this.fixedParent = false;
                    this.setEnableRtl();
                    this.setContent();
                };
                t.prototype.wireEvents = function() {
                    if (n.AR.isDevice) {
                        n.bi.add(window, 'orientationchange', this.orientationOnChange, this);
                    }
                    if (this.actionOnScroll !== 'none') {
                        this.wireScrollEvents();
                    }
                };
                t.prototype.wireScrollEvents = function() {
                    if (this.getRelateToElement()) {
                        for(var e = 0, t = this.getScrollableParent(this.getRelateToElement()); e < t.length; e++){
                            var i = t[e];
                            n.bi.add(i, 'scroll', this.scrollRefresh, this);
                        }
                    }
                };
                t.prototype.unwireEvents = function() {
                    if (n.AR.isDevice) {
                        n.bi.remove(window, 'orientationchange', this.orientationOnChange);
                    }
                    if (this.actionOnScroll !== 'none') {
                        this.unwireScrollEvents();
                    }
                };
                t.prototype.unwireScrollEvents = function() {
                    if (this.getRelateToElement()) {
                        for(var e = 0, t = this.getScrollableParent(this.getRelateToElement()); e < t.length; e++){
                            var i = t[e];
                            n.bi.remove(i, 'scroll', this.scrollRefresh);
                        }
                    }
                };
                t.prototype.getRelateToElement = function() {
                    var e = this.relateTo === '' || (0, n.le)(this.relateTo) ? document.body : this.relateTo;
                    this.setProperties({
                        relateTo: e
                    }, true);
                    return ((typeof this.relateTo) === 'string') ? document.querySelector(this.relateTo) : this.relateTo;
                };
                t.prototype.scrollRefresh = function(e) {
                    if (this.actionOnScroll === 'reposition') {
                        if (!(0, n.le)(this.element) && !(this.element.offsetParent === e.target || (this.element.offsetParent && this.element.offsetParent.tagName === 'BODY' && e.target.parentElement == null))) {
                            this.refreshPosition();
                        }
                    } else if (this.actionOnScroll === 'hide') {
                        this.hide();
                    }
                    if (this.actionOnScroll !== 'none') {
                        if (this.getRelateToElement()) {
                            var t = this.isElementOnViewport(this.getRelateToElement(), e.target);
                            if (!t && !this.targetInvisibleStatus) {
                                this.trigger('targetExitViewport');
                                this.targetInvisibleStatus = true;
                            } else if (t) {
                                this.targetInvisibleStatus = false;
                            }
                        }
                    }
                };
                t.prototype.isElementOnViewport = function(e, t) {
                    var i = this.getScrollableParent(e);
                    for(var n = 0; n < i.length; n++){
                        if (this.isElementVisible(e, i[n])) {
                            continue;
                        } else {
                            return false;
                        }
                    }
                    return true;
                };
                t.prototype.isElementVisible = function(e, t) {
                    var i = this.checkGetBoundingClientRect(e);
                    if (!i.height || !i.width) {
                        return false;
                    }
                    if (!(0, n.le)(this.checkGetBoundingClientRect(t))) {
                        var s = t.getBoundingClientRect();
                        return !(i.bottom < s.top) && (!(i.bottom > s.bottom) && (!(i.right > s.right) && !(i.left < s.left)));
                    } else {
                        var o = window;
                        var a = {
                            top: o.scrollY,
                            left: o.scrollX,
                            right: o.scrollX + o.outerWidth,
                            bottom: o.scrollY + o.outerHeight
                        };
                        var l = (0, r.k)(e);
                        var h = {
                            top: l.top,
                            left: l.left,
                            right: l.left + i.width,
                            bottom: l.top + i.height
                        };
                        var c = {
                            top: a.bottom - h.top,
                            left: a.right - h.left,
                            bottom: h.bottom - a.top,
                            right: h.right - a.left
                        };
                        return c.top > 0 && c.left > 0 && c.right > 0 && c.bottom > 0;
                    }
                };
                t.prototype.preRender = function() {};
                t.prototype.setEnableRtl = function() {
                    this.reposition();
                    this.enableRtl ? this.element.classList.add(h.RTL) : this.element.classList.remove(h.RTL);
                };
                t.prototype.setContent = function() {
                    if (!(0, n.le)(this.content)) {
                        this.element.innerHTML = '';
                        if (typeof (this.content) === 'string') {
                            this.element.textContent = this.content;
                        } else {
                            var e = this.getRelateToElement();
                            var t = this.content.props;
                            if (!e.classList.contains('e-dropdown-btn') || (0, n.le)(t)) {
                                this.element.appendChild(this.content);
                            }
                        }
                    }
                };
                t.prototype.orientationOnChange = function() {
                    var e = this;
                    setTimeout(function() {
                        e.refreshPosition();
                    }, 200);
                };
                t.prototype.refreshPosition = function(e, t) {
                    if (!(0, n.le)(e)) {
                        this.checkFixedParent(e);
                    }
                    this.reposition();
                    if (!t) {
                        this.checkCollision();
                    }
                };
                t.prototype.reposition = function() {
                    var e;
                    var t;
                    var i = this.getRelateToElement();
                    if (typeof this.position.X === 'number' && typeof this.position.Y === 'number') {
                        e = {
                            left: this.position.X,
                            top: this.position.Y
                        };
                    } else if ((typeof this.position.X === 'string' && typeof this.position.Y === 'number') || (typeof this.position.X === 'number' && typeof this.position.Y === 'string')) {
                        var r = void 0;
                        var s = this.element.style.display;
                        this.element.style.display = 'block';
                        if (this.element.classList.contains('e-dlg-modal')) {
                            r = this.element.parentElement.style.display;
                            this.element.parentElement.style.display = 'block';
                        }
                        t = this.getAnchorPosition(i, this.element, this.position, this.offsetX, this.offsetY);
                        if (typeof this.position.X === 'string') {
                            e = {
                                left: t.left,
                                top: this.position.Y
                            };
                        } else {
                            e = {
                                left: this.position.X,
                                top: t.top
                            };
                        }
                        this.element.style.display = s;
                        if (this.element.classList.contains('e-dlg-modal')) {
                            this.element.parentElement.style.display = r;
                        }
                    } else if (i) {
                        var s = this.element.style.display;
                        this.element.style.display = 'block';
                        e = this.getAnchorPosition(i, this.element, this.position, this.offsetX, this.offsetY);
                        this.element.style.display = s;
                    } else {
                        e = {
                            left: 0,
                            top: 0
                        };
                    }
                    if (!(0, n.le)(e)) {
                        this.element.style.left = e.left + 'px';
                        this.element.style.top = e.top + 'px';
                    }
                };
                t.prototype.checkGetBoundingClientRect = function(e) {
                    var t;
                    try {
                        t = e.getBoundingClientRect();
                        return t;
                    } catch (i) {
                        return null;
                    }
                };
                t.prototype.getAnchorPosition = function(e, t, i, s, o) {
                    var a = this.checkGetBoundingClientRect(t);
                    var l = this.checkGetBoundingClientRect(e);
                    if ((0, n.le)(a) || (0, n.le)(l)) {
                        return null;
                    }
                    var h = e;
                    var c = {
                        left: 0,
                        top: 0
                    };
                    if (t.offsetParent && t.offsetParent.tagName === 'BODY' && e.tagName === 'BODY') {
                        c = (0, r.k)(e);
                    } else {
                        if ((t.classList.contains('e-dlg-modal') && h.tagName !== 'BODY')) {
                            t = t.parentElement;
                        }
                        c = (0, r.O)(h, t);
                    }
                    switch(i.X){
                        default:
                        case 'left':
                            break;
                        case 'center':
                            if ((t.classList.contains('e-dlg-modal') && h.tagName === 'BODY' && this.targetType === 'container')) {
                                c.left += (window.innerWidth / 2 - a.width / 2);
                            } else if (this.targetType === 'container') {
                                c.left += (l.width / 2 - a.width / 2);
                            } else {
                                c.left += (l.width / 2);
                            }
                            break;
                        case 'right':
                            if ((t.classList.contains('e-dlg-modal') && h.tagName === 'BODY' && this.targetType === 'container')) {
                                c.left += (window.innerWidth - a.width);
                            } else if (this.targetType === 'container') {
                                c.left += (l.width - a.width);
                            } else {
                                c.left += (l.width);
                            }
                            break;
                    }
                    switch(i.Y){
                        default:
                        case 'top':
                            break;
                        case 'center':
                            if ((t.classList.contains('e-dlg-modal') && h.tagName === 'BODY' && this.targetType === 'container')) {
                                c.top += (window.innerHeight / 2 - a.height / 2);
                            } else if (this.targetType === 'container') {
                                c.top += (l.height / 2 - a.height / 2);
                            } else {
                                c.top += (l.height / 2);
                            }
                            break;
                        case 'bottom':
                            if ((t.classList.contains('e-dlg-modal') && h.tagName === 'BODY' && this.targetType === 'container')) {
                                c.top += (window.innerHeight - a.height);
                            } else if (this.targetType === 'container') {
                                c.top += (l.height - a.height);
                            } else {
                                c.top += (l.height);
                            }
                            break;
                    }
                    c.left += s;
                    c.top += o;
                    return c;
                };
                t.prototype.callFlip = function(e) {
                    var t = this.getRelateToElement();
                    (0, s.RR)(this.element, t, this.offsetX, this.offsetY, this.position.X, this.position.Y, this.viewPortElement, e, this.fixedParent);
                };
                t.prototype.callFit = function(e) {
                    if ((0, s.vF)(this.element, this.viewPortElement).length !== 0) {
                        if ((0, n.le)(this.viewPortElement)) {
                            var t = (0, s.Tj)(this.element, this.viewPortElement, e);
                            if (e.X) {
                                this.element.style.left = t.left + 'px';
                            }
                            if (e.Y) {
                                this.element.style.top = t.top + 'px';
                            }
                        } else {
                            var i = this.checkGetBoundingClientRect(this.element);
                            var r = this.checkGetBoundingClientRect(this.viewPortElement);
                            if ((0, n.le)(i) || (0, n.le)(r)) {
                                return null;
                            }
                            if (e && e.Y === true) {
                                if (r.top > i.top) {
                                    this.element.style.top = '0px';
                                } else if (r.bottom < i.bottom) {
                                    this.element.style.top = parseInt(this.element.style.top, 10) - (i.bottom - r.bottom) + 'px';
                                }
                            }
                            if (e && e.X === true) {
                                if (r.right < i.right) {
                                    this.element.style.left = parseInt(this.element.style.left, 10) - (i.right - r.right) + 'px';
                                } else if (r.left > i.left) {
                                    this.element.style.left = parseInt(this.element.style.left, 10) + (r.left - i.left) + 'px';
                                }
                            }
                        }
                    }
                };
                t.prototype.checkCollision = function() {
                    var e = this.collision.X;
                    var t = this.collision.Y;
                    if (e === 'none' && t === 'none') {
                        return;
                    }
                    if (e === 'flip' && t === 'flip') {
                        this.callFlip({
                            X: true,
                            Y: true
                        });
                    } else if (e === 'fit' && t === 'fit') {
                        this.callFit({
                            X: true,
                            Y: true
                        });
                    } else {
                        if (e === 'flip') {
                            this.callFlip({
                                X: true,
                                Y: false
                            });
                        } else if (t === 'flip') {
                            this.callFlip({
                                Y: true,
                                X: false
                            });
                        }
                        if (e === 'fit') {
                            this.callFit({
                                X: true,
                                Y: false
                            });
                        } else if (t === 'fit') {
                            this.callFit({
                                X: false,
                                Y: true
                            });
                        }
                    }
                };
                t.prototype.show = function(e, t) {
                    var i = this;
                    this.wireEvents();
                    if (this.zIndex === 1000 || !(0, n.le)(t)) {
                        var r = ((0, n.le)(t)) ? this.element : t;
                        this.zIndex = p(r);
                        (0, n.V7)(this.element, {
                            'zIndex': this.zIndex
                        });
                    }
                    e = (!(0, n.le)(e) && typeof e === 'object') ? e : this.showAnimation;
                    if (this.collision.X !== 'none' || this.collision.Y !== 'none') {
                        (0, n.IV)([
                            this.element
                        ], h.CLOSE);
                        (0, n.cn)([
                            this.element
                        ], h.OPEN);
                        this.checkCollision();
                        (0, n.IV)([
                            this.element
                        ], h.OPEN);
                        (0, n.cn)([
                            this.element
                        ], h.CLOSE);
                    }
                    if (!(0, n.le)(e)) {
                        e.begin = function() {
                            if (!i.isDestroyed) {
                                (0, n.IV)([
                                    i.element
                                ], h.CLOSE);
                                (0, n.cn)([
                                    i.element
                                ], h.OPEN);
                            }
                        };
                        e.end = function() {
                            if (!i.isDestroyed) {
                                i.trigger('open');
                            }
                        };
                        new n.fw(e).animate(this.element);
                    } else {
                        (0, n.IV)([
                            this.element
                        ], h.CLOSE);
                        (0, n.cn)([
                            this.element
                        ], h.OPEN);
                        this.trigger('open');
                    }
                };
                t.prototype.hide = function(e) {
                    var t = this;
                    e = (!(0, n.le)(e) && typeof e === 'object') ? e : this.hideAnimation;
                    if (!(0, n.le)(e)) {
                        e.end = function() {
                            if (!t.isDestroyed) {
                                (0, n.IV)([
                                    t.element
                                ], h.OPEN);
                                (0, n.cn)([
                                    t.element
                                ], h.CLOSE);
                                t.trigger('close');
                            }
                        };
                        new n.fw(e).animate(this.element);
                    } else {
                        (0, n.IV)([
                            this.element
                        ], h.OPEN);
                        (0, n.cn)([
                            this.element
                        ], h.CLOSE);
                        this.trigger('close');
                    }
                    this.unwireEvents();
                };
                t.prototype.getScrollableParent = function(e) {
                    this.checkFixedParent(e);
                    return d(e, this.fixedParent);
                };
                t.prototype.checkFixedParent = function(e) {
                    var t = e.parentElement;
                    while(t && t.tagName !== 'HTML'){
                        var i = getComputedStyle(t);
                        if (i.position === 'fixed' && !(0, n.le)(this.element) && this.element.offsetParent && this.element.offsetParent.tagName === 'BODY') {
                            this.element.style.top = window.scrollY > parseInt(this.element.style.top) ? (0, n.Ac)(window.scrollY - parseInt(this.element.style.top)) : (0, n.Ac)(parseInt(this.element.style.top) - window.scrollY);
                            this.element.style.position = 'fixed';
                            this.fixedParent = true;
                        }
                        t = t.parentElement;
                        if (!(0, n.le)(this.element) && (0, n.le)(this.element.offsetParent) && i.position === 'fixed' && this.element.style.position === 'fixed') {
                            this.fixedParent = true;
                        }
                    }
                };
                a([
                    (0, n.Z9)('auto')
                ], t.prototype, "height", void 0);
                a([
                    (0, n.Z9)('auto')
                ], t.prototype, "width", void 0);
                a([
                    (0, n.Z9)(null)
                ], t.prototype, "content", void 0);
                a([
                    (0, n.Z9)('container')
                ], t.prototype, "targetType", void 0);
                a([
                    (0, n.Z9)(null)
                ], t.prototype, "viewPortElement", void 0);
                a([
                    (0, n.Z9)({
                        X: 'none',
                        Y: 'none'
                    })
                ], t.prototype, "collision", void 0);
                a([
                    (0, n.Z9)('')
                ], t.prototype, "relateTo", void 0);
                a([
                    (0, n.Zz)({}, l)
                ], t.prototype, "position", void 0);
                a([
                    (0, n.Z9)(0)
                ], t.prototype, "offsetX", void 0);
                a([
                    (0, n.Z9)(0)
                ], t.prototype, "offsetY", void 0);
                a([
                    (0, n.Z9)(1000)
                ], t.prototype, "zIndex", void 0);
                a([
                    (0, n.Z9)(false)
                ], t.prototype, "enableRtl", void 0);
                a([
                    (0, n.Z9)('reposition')
                ], t.prototype, "actionOnScroll", void 0);
                a([
                    (0, n.Z9)(null)
                ], t.prototype, "showAnimation", void 0);
                a([
                    (0, n.Z9)(null)
                ], t.prototype, "hideAnimation", void 0);
                a([
                    (0, n.ju)()
                ], t.prototype, "open", void 0);
                a([
                    (0, n.ju)()
                ], t.prototype, "close", void 0);
                a([
                    (0, n.ju)()
                ], t.prototype, "targetExitViewport", void 0);
                t = a([
                    n.Zl
                ], t);
                return t;
            }(n.wA));
            function d(e, t) {
                var i = getComputedStyle(e);
                var n = [];
                var r = /(auto|scroll)/;
                var s = e.parentElement;
                while(s && s.tagName !== 'HTML'){
                    var o = getComputedStyle(s);
                    if (!(i.position === 'absolute' && o.position === 'static') && r.test(o.overflow + o.overflowY + o.overflowX)) {
                        n.push(s);
                    }
                    s = s.parentElement;
                }
                if (!t) {
                    n.push(document);
                }
                return n;
            }
            function p(e) {
                var t = e.parentElement;
                var i = [];
                while(t){
                    if (t.tagName !== 'BODY') {
                        var r = document.defaultView.getComputedStyle(t, null).getPropertyValue('z-index');
                        var s = document.defaultView.getComputedStyle(t, null).getPropertyValue('position');
                        if (r !== 'auto' && s !== 'static') {
                            i.push(r);
                        }
                        t = t.parentElement;
                    } else {
                        break;
                    }
                }
                var o = [];
                for(var a = 0; a < document.body.children.length; a++){
                    if (!e.isEqualNode(document.body.children[a])) {
                        var r = document.defaultView.getComputedStyle(document.body.children[a], null).getPropertyValue('z-index');
                        var s = document.defaultView.getComputedStyle(document.body.children[a], null).getPropertyValue('position');
                        if (r !== 'auto' && s !== 'static') {
                            o.push(r);
                        }
                    }
                }
                o.push('999');
                var l = [];
                if (!(0, n.le)(e.parentElement) && e.parentElement.tagName !== 'BODY') {
                    var h = [].slice.call(e.parentElement.children);
                    for(var a = 0; a < h.length; a++){
                        if (!e.isEqualNode(h[a])) {
                            var r = document.defaultView.getComputedStyle(h[a], null).getPropertyValue('z-index');
                            var s = document.defaultView.getComputedStyle(h[a], null).getPropertyValue('position');
                            if (r !== 'auto' && s !== 'static') {
                                l.push(r);
                            }
                        }
                    }
                }
                var c = i.concat(o, l);
                var d = Math.max.apply(Math, c) + 1;
                return d > 2147483647 ? 2147483647 : d;
            }
            function u(e) {
                if (e === void 0) {
                    e = [
                        '*'
                    ];
                }
                var t = [];
                for(var i = 0; i < e.length; i++){
                    var n = document.getElementsByTagName(e[i]);
                    for(var r = 0; r < n.length; r++){
                        var s = document.defaultView.getComputedStyle(n[r], null).getPropertyValue('z-index');
                        var o = document.defaultView.getComputedStyle(n[r], null).getPropertyValue('position');
                        if (s !== 'auto' && o !== 'static') {
                            t.push(s);
                        }
                    }
                }
                var a = Math.max.apply(Math, t) + 1;
                return a > 2147483647 ? 2147483647 : a;
            }
        }),
        2857: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "VZ": function() {
                    return d;
                },
                "tB": function() {
                    return v;
                },
                "ef": function() {
                    return p;
                }
            });
            var n = i(7294);
            var r = i(3935);
            var s = i(1807);
            ;
            var o = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var a = [
                'alt',
                'className',
                'disabled',
                'form',
                'id',
                'readOnly',
                'style',
                'tabIndex',
                'title',
                'type',
                'name',
                'onClick',
                'onFocus',
                'onBlur'
            ];
            var l = [
                'accordion',
                'tab',
                'splitter'
            ];
            var h = 0;
            var c = new RegExp('\]');
            var d = (function(e) {
                o(t, e);
                function t() {
                    var t = e !== null && e.apply(this, arguments) || this;
                    t.mountingState = false;
                    t.attrKeys = [];
                    t.cachedTimeOut = 0;
                    t.isAppendCalled = false;
                    t.initRenderCalled = false;
                    t.isReactForeceUpdate = false;
                    t.isReact = true;
                    t.isshouldComponentUpdateCalled = false;
                    t.isCreated = false;
                    return t;
                }
                t.prototype.componentDidMount = function() {
                    this.refreshChild(true);
                    this.canDelayUpdate = l.indexOf(this.getModuleName()) !== -1;
                    this.renderReactComponent();
                    if (this.portals && this.portals.length) {
                        this.mountingState = true;
                        this.renderReactTemplates();
                        this.mountingState = false;
                    }
                };
                t.prototype.componentDidUpdate = function(e) {
                    if (!this.isshouldComponentUpdateCalled && this.initRenderCalled && !this.isReactForeceUpdate) {
                        this.isshouldComponentUpdateCalled = true;
                        if (e !== this.props) {
                            this.refreshProperties(this.props, true);
                        }
                    }
                };
                t.prototype.renderReactComponent = function() {
                    var e = this.reactElement;
                    if (e && !this.isAppendCalled) {
                        this.isAppendCalled = true;
                        this.appendTo(e);
                    }
                };
                t.prototype.shouldComponentUpdate = function(e) {
                    this.isshouldComponentUpdateCalled = true;
                    if (!this.initRenderCalled) {
                        this.updateProperties(e, true);
                        return true;
                    }
                    if (!this.isAppendCalled) {
                        clearTimeout(this.cachedTimeOut);
                        this.isAppendCalled = true;
                        this.appendTo(this.reactElement);
                    }
                    this.updateProperties(e);
                    return true;
                };
                t.prototype.updateProperties = function(e, t) {
                    var i = this;
                    var n = (0, s.l7)({}, e);
                    var r = Object.keys(e);
                    for(var o = 0, a = r; o < a.length; o++){
                        var l = a[o];
                        var h = l === 'className';
                        if (l === 'children') {
                            continue;
                        }
                        if (!h && !(0, s.le)(this.htmlattributes[l]) && this.htmlattributes[l] !== n[l]) {
                            this.htmlattributes[l] = n[l];
                        }
                        if (this.compareValues(this.props[l], e[l])) {
                            delete n[l];
                        } else if (this.attrKeys.indexOf(l) !== -1) {
                            if (h) {
                                this.clsName = true;
                                var c = this.props[l].split(' ');
                                for(var d = 0; d < c.length; d++){
                                    this.element.classList.remove(c[d]);
                                }
                                var p = n[l].split(' ');
                                for(var u = 0; u < p.length; u++){
                                    this.element.classList.add(p[u]);
                                }
                            } else if (l !== 'disabled') {
                                delete n[l];
                            }
                        } else if (l === 'value' && e[l] === this[l]) {
                            delete n[l];
                        } else if ((l === 'valueTemplate' || l === 'itemTemplate' || l === 'headerTemplate') && e[l].toString() === this[l].toString()) {
                            delete n[l];
                        } else if (l === 'content' && typeof n[l] === 'function') {
                            delete n[l];
                        }
                    }
                    if (n['children']) {
                        delete n['children'];
                    }
                    if (this.initRenderCalled && (this.canDelayUpdate || this.props.delayUpdate)) {
                        setTimeout(function() {
                            i.refreshProperties(n, e, t);
                        });
                    } else {
                        this.refreshProperties(n, e, t);
                    }
                };
                t.prototype.refreshProperties = function(e, t, i) {
                    if (Object.keys(e).length) {
                        if (!i) {
                            this.processComplexTemplate(e, this);
                        }
                        this.setProperties(e, i);
                    }
                    this.refreshChild(i, t);
                };
                t.prototype.processComplexTemplate = function(e, t) {
                    var i = t.complexTemplate;
                    if (i) {
                        for(var n in i){
                            var r = i[n];
                            if (e[n]) {
                                (0, s.sO)(r, (0, s.NA)(n, e), e);
                            }
                        }
                    }
                };
                t.prototype.getDefaultAttributes = function() {
                    var e = this;
                    this.isReact = true;
                    var i = Object.keys(this.props);
                    var n = [
                        "autocomplete",
                        "dropdownlist",
                        "combobox"
                    ];
                    if (!this.htmlattributes) {
                        this.htmlattributes = {};
                    }
                    this.attrKeys = a.concat(this.controlAttributes || []);
                    for(var r = 0, s = i; r < s.length; r++){
                        var o = s[r];
                        if (o.indexOf('data-') !== -1 || o.indexOf('aria-') !== -1 || this.attrKeys.indexOf(o) !== -1) {
                            if (this.htmlattributes[o] !== this.props[o]) {
                                this.htmlattributes[o] = this.props[o];
                            }
                        }
                    }
                    if (!this.htmlattributes.ref) {
                        this.htmlattributes.ref = function(t) {
                            e.reactElement = t;
                        };
                        var l = [
                            'autocomplete',
                            'combobox',
                            'dropdownlist',
                            'dropdowntree',
                            'multiselect',
                            'listbox',
                            'colorpicker',
                            'numerictextbox',
                            'textbox',
                            'uploader',
                            'maskedtextbox',
                            'slider',
                            'datepicker',
                            'datetimepicker',
                            'daterangepicker',
                            'timepicker',
                            'checkbox',
                            'switch',
                            'radio'
                        ];
                        if (l.indexOf(this.getModuleName()) !== -1) {
                            this.htmlattributes.key = '' + t.reactUid;
                            t.reactUid++;
                        }
                    }
                    if (this.clsName) {
                        var h = this.element.classList;
                        var c = this.htmlattributes['className'];
                        for(var d = 0; d < h.length; d++){
                            if ((c.indexOf(h[d]) == -1)) {
                                this.htmlattributes['className'] = this.htmlattributes['className'] + ' ' + h[d];
                            }
                        }
                        this.clsName = false;
                    }
                    return this.htmlattributes;
                };
                t.prototype.trigger = function(e, t, i) {
                    var n = this;
                    if (this.isDestroyed !== true && this.modelObserver) {
                        if (c.test(e)) {
                            var r = (0, s.NA)(e, this);
                            if (r) {
                                r.call(this, t);
                                if (i) {
                                    i.call(this, t);
                                }
                            } else if (i) {
                                i.call(this, t);
                            }
                        }
                        if ((e === 'change' || e === 'input')) {
                            if (this.props.onChange && t.event) {
                                this.props.onChange.call(undefined, {
                                    syntheticEvent: t.event,
                                    nativeEvent: {
                                        text: t.value
                                    },
                                    value: t.value,
                                    target: this
                                });
                            }
                        }
                        var o = this.isProtectedOnChange;
                        this.isProtectedOnChange = false;
                        if (e === 'created') {
                            setTimeout(function() {
                                n.isCreated = true;
                                if (!n.isDestroyed) {
                                    n.modelObserver.notify(e, t, i);
                                }
                            });
                        } else {
                            this.modelObserver.notify(e, t, i);
                        }
                        this.isProtectedOnChange = o;
                    }
                };
                t.prototype.compareValues = function(e, t) {
                    var i = typeof e;
                    var n = typeof t;
                    if (i === n) {
                        if (e === t) {
                            return true;
                        }
                        if ((!(0, s.le)(e) && e.constructor) !== (!(0, s.le)(t) && t.constructor)) {
                            return false;
                        }
                        if (e instanceof Date || e instanceof RegExp || e instanceof String || e instanceof Number) {
                            return e.toString() === t.toString();
                        }
                        if ((0, s.Kn)(e) || Array.isArray(e)) {
                            var r = e;
                            var o = t;
                            if ((0, s.Kn)(r)) {
                                r = [
                                    e
                                ];
                                o = [
                                    t
                                ];
                            }
                            return this.compareObjects(r, o).status;
                        }
                    }
                    return false;
                };
                t.prototype.compareObjects = function(e, t, i) {
                    var n = true;
                    var r = (e.length === t.length);
                    var s = [];
                    if (r) {
                        for(var o = 0, a = t.length; o < a; o++){
                            var l = {};
                            var h = e[o];
                            var c = t[o];
                            var d = Object.keys(c);
                            if (d.length !== 0) {
                                for(var p = 0, u = d; p < u.length; p++){
                                    var f = u[p];
                                    var m = h[f];
                                    var v = c[f];
                                    if (f === 'items') {
                                        for(var g = 0; g < v.length; g++){
                                            if (this.getModuleName() === 'richtexteditor' && typeof (v[g]) === 'object') {
                                                return {
                                                    status: true
                                                };
                                            }
                                        }
                                    }
                                    if (this.getModuleName() === 'grid' && f === 'field') {
                                        l[f] = v;
                                    }
                                    if (!h.hasOwnProperty(f) || !this.compareValues(m, v)) {
                                        if (!i) {
                                            return {
                                                status: false
                                            };
                                        }
                                        n = false;
                                        l[f] = v;
                                    }
                                }
                            } else if (c[o] === h[o]) {
                                n = true;
                            } else {
                                if (!i) {
                                    return {
                                        status: false
                                    };
                                }
                                n = false;
                            }
                            if (Object.keys(l).length) {
                                s.push({
                                    index: o,
                                    value: l,
                                    key: i
                                });
                            }
                        }
                    } else {
                        n = false;
                    }
                    return {
                        status: n,
                        changedProperties: s
                    };
                };
                t.prototype.refreshChild = function(e, t) {
                    if (this.checkInjectedModules) {
                        var i = this.getInjectedModules() || [];
                        var n = this.getInjectedServices() || [];
                        for(var r = 0, o = n; r < o.length; r++){
                            var a = o[r];
                            if (i.indexOf(a) === -1) {
                                i.push(a);
                            }
                        }
                        this.injectedModules = i;
                    }
                    if (this.directivekeys) {
                        var l = [];
                        var h = this.validateChildren({}, this.directivekeys, (t || this.props));
                        if (h && Object.keys(h).length) {
                            if (!e && this.skipRefresh) {
                                for(var c = 0, d = this.skipRefresh; c < d.length; c++){
                                    var p = d[c];
                                    delete h[p];
                                }
                            }
                            if (this.prevProperties) {
                                var u = Object.keys(this.prevProperties);
                                for(var f = 0; f < u.length; f++){
                                    var m = u[f];
                                    if (!h.hasOwnProperty(m)) {
                                        continue;
                                    }
                                    var v = this.compareObjects(this.prevProperties[m], h[m], m);
                                    if (v.status) {
                                        delete h[m];
                                    } else {
                                        if (v.changedProperties.length) {
                                            l = l.concat(v.changedProperties);
                                        }
                                        var g = {};
                                        g[m] = h[m];
                                        this.prevProperties = (0, s.l7)(this.prevProperties, g);
                                    }
                                }
                            } else {
                                this.prevProperties = (0, s.l7)({}, h, {}, true);
                            }
                            if (l.length) {
                                if (this.getModuleName() === 'grid' && m === 'columns') {
                                    for(var b = 0, y = this.columns; b < y.length; b++){
                                        var C = (0, s.NA)('field', y[b]);
                                        var E = (0, s.NA)(b + '.value.field', l);
                                        if (C === E) {
                                            var S = (0, s.NA)(l[b].key + '.' + l[b].index, this);
                                            if (S && S.setProperties) {
                                                S.setProperties(l[b].value);
                                            } else {
                                                (0, s.l7)(S, l[b].value);
                                            }
                                        } else {
                                            this.setProperties(h, e);
                                        }
                                    }
                                } else {
                                    for(var w = 0, T = l; w < T.length; w++){
                                        var k = T[w];
                                        var x = (0, s.NA)(k.key + '.' + k.index, this);
                                        if (x && x.setProperties) {
                                            x.setProperties(k.value);
                                        } else {
                                            (0, s.l7)(x, k.value);
                                        }
                                    }
                                }
                            } else {
                                this.setProperties(h, e);
                            }
                        }
                    }
                };
                t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.cachedTimeOut);
                    var e = [
                        'dropdowntree',
                        'checkbox'
                    ];
                    if (this.initRenderCalled && this.isAppendCalled && this.element && ((!e.indexOf(this.getModuleName())) ? document.body.contains(this.element) : true) && !this.isDestroyed && this.isCreated) {
                        this.destroy();
                    }
                };
                t.prototype.appendReactElement = function(e, t) {
                    var i = r.createPortal(e, t);
                    if (!this.portals) {
                        this.portals = [
                            i
                        ];
                    } else {
                        this.portals.push(i);
                    }
                };
                ;
                t.prototype.renderReactTemplates = function(e) {
                    this.isReactForeceUpdate = true;
                    if (e) {
                        this.forceUpdate(e);
                    } else {
                        this.forceUpdate();
                    }
                    this.isReactForeceUpdate = false;
                };
                t.prototype.clearTemplate = function(e, t, i) {
                    var n = this;
                    var r = [];
                    if (e && e.length) {
                        Array.prototype.forEach.call(e, function(e) {
                            var i = 0;
                            var s = 0;
                            n.portals.forEach(function(t) {
                                if (t.propName === e) {
                                    r.push(s);
                                    s++;
                                }
                            });
                            if (t && n.portals[r[t[i]]].propName == e) {
                                n.portals.splice(t, 1);
                                i++;
                            } else {
                                for(var o = 0; o < n.portals.length; o++){
                                    if (n.portals[o].propName == e) {
                                        n.portals.splice(o, 1);
                                        o--;
                                    }
                                }
                            }
                        });
                    } else {
                        this.portals = [];
                    }
                    this.renderReactTemplates(i);
                };
                ;
                t.prototype.validateChildren = function(e, t, i) {
                    var r = false;
                    var s = n.Children.toArray(i.children);
                    for(var o = 0, a = s; o < a.length; o++){
                        var l = a[o];
                        var h = this.getChildType(l);
                        var c = t[h];
                        if (h && t) {
                            var d = this.getChildProps(n.Children.toArray(l.props.children), c);
                            if (d.length) {
                                r = true;
                                e[l.type.propertyName || h] = d;
                            }
                        }
                    }
                    if (r) {
                        return e;
                    }
                    return null;
                };
                t.prototype.getChildType = function(e) {
                    if (e.type && e.type.isDirective) {
                        return e.type.moduleName || '';
                    }
                    return '';
                };
                t.prototype.getChildProps = function(e, t) {
                    var i = [];
                    for(var n = 0, r = e; n < r.length; n++){
                        var o = r[n];
                        var a = false;
                        var l = void 0;
                        if (typeof t === 'string') {
                            a = true;
                            l = t;
                        } else {
                            l = Object.keys(t)[0];
                        }
                        var h = o.props;
                        var c = this.getChildType(o);
                        if (c === l) {
                            if (a || !h.children) {
                                var d = (0, s.l7)({}, h, {}, true);
                                this.processComplexTemplate(d, o.type);
                                i.push(d);
                            } else {
                                var p = this.validateChildren((0, s.l7)({}, h), t[l], h) || h;
                                if (p['children']) {
                                    delete p['children'];
                                }
                                this.processComplexTemplate(p, o.type);
                                i.push(p);
                            }
                        }
                    }
                    return i;
                };
                t.prototype.getInjectedServices = function() {
                    var e = n.Children.toArray(this.props.children);
                    for(var t = 0, i = e; t < i.length; t++){
                        var r = i[t];
                        if (r.type.isService) {
                            return r.props.services;
                        }
                    }
                    return [];
                };
                t.reactUid = 1;
                return t;
            }(n.Component));
            ;
            function p(e, t) {
                t.forEach(function(t) {
                    Object.getOwnPropertyNames(t.prototype).forEach(function(i) {
                        if (i !== 'isMounted' && i !== 'replaceState') {
                            e.prototype[i] = t.prototype[i];
                        }
                    });
                });
            }
            ;
            var u = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var f = (function(e) {
                u(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                t.prototype.render = function() {
                    return null;
                };
                t.isDirective = true;
                return t;
            }(n.PureComponent));
            ;
            var m = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var v = (function(e) {
                m(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                t.prototype.render = function() {
                    return null;
                };
                t.isService = true;
                return t;
            }(n.PureComponent));
            ;
            var g = (0, s.aR)();
            function b(e, t) {
                if (typeof e === 'string') {
                    return g(e, t);
                } else {
                    return function(t, i, o, a) {
                        var l = e;
                        var h = t;
                        if (typeof l === 'object') {
                            l = e.template;
                            h = (0, s.l7)({}, t, e.data || {});
                        }
                        var c;
                        if (a) {
                            c = a;
                        } else {
                            c = document.createElement('div');
                        }
                        var d = n.createElement(l, h);
                        var p = r.createPortal(d, c);
                        p.propName = o;
                        if (!i.portals) {
                            i.portals = [
                                p
                            ];
                        } else {
                            i.portals.push(p);
                        }
                        if (!a) {
                            return [
                                c
                            ];
                        }
                    };
                }
            }
            (0, s.Wr)({
                compile: b
            });
            ;
            ;
        }),
        3396: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "Y": function() {
                    return tK;
                }
            });
            var n = i(7294);
            var r = i(1807);
            var s = i(9486);
            var o = i(3386);
            var a = i(9805);
            var l = i(809);
            ;
            var h = (function() {
                function e(e, t) {
                    this.parent = e;
                    this.locator = t;
                    this.renderer = this.locator.getService('rendererFactory');
                    this.addEventListener();
                }
                e.prototype.render = function() {
                    var e = this.parent;
                    this.contentRenderer = this.renderer.getRenderer(l.y2.Content);
                    this.contentRenderer.renderPanel();
                };
                e.prototype.refresh = function(e) {
                    if (e === void 0) {
                        e = {
                            requestType: 'refresh'
                        };
                    }
                    this.parent.notify(e.requestType + "-begin", e);
                };
                e.prototype.destroy = function() {
                    this.removeEventListener();
                };
                e.prototype.moduleDestroy = function() {
                    this.parent = null;
                };
                e.prototype.addEventListener = function() {
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.parent.on(o.CC, this.refresh, this);
                    this.parent.on(o.yR, this.keyUp, this);
                    this.parent.on(o.P0, this.moduleDestroy, this);
                };
                e.prototype.removeEventListener = function() {
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.parent.off(o.CC, this.refresh);
                    this.parent.off(o.yR, this.keyUp);
                    this.parent.off(o.P0, this.moduleDestroy);
                };
                e.prototype.keyUp = function(e) {
                    if (this.parent.editorMode === 'HTML') {
                        switch(e.args.which){
                            case 46:
                            case 8:
                                var t = this.parent.contentModule.getEditPanel().childNodes;
                                if ((t.length === 0) || (t.length === 1 && t[0].childNodes.length === 0 && ((t[0].tagName === 'BR') || ((t[0].tagName === 'P' || t[0].tagName === 'DIV') && t[0].textContent === '')))) {
                                    var i = this.parent.contentModule.getEditPanel();
                                    if (this.parent.enterKey === 'DIV') {
                                        i.innerHTML = '<div><br/></div>';
                                    } else if (this.parent.enterKey === 'BR') {
                                        i.innerHTML = '<br/>';
                                    } else {
                                        i.innerHTML = '<p><br/></p>';
                                    }
                                    this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), i.childNodes[0], 0);
                                }
                                break;
                        }
                    }
                };
                return e;
            }());
            var c = i(8082);
            ;
            var d = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var p = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var u = {
                'backspace': 8,
                'tab': 9,
                'enter': 13,
                'shift': 16,
                'control': 17,
                'alt': 18,
                'pause': 19,
                'capslock': 20,
                'space': 32,
                'escape': 27,
                'pageup': 33,
                'pagedown': 34,
                'end': 35,
                'home': 36,
                'leftarrow': 37,
                'uparrow': 38,
                'rightarrow': 39,
                'downarrow': 40,
                'insert': 45,
                'delete': 46,
                'f1': 112,
                'f2': 113,
                'f3': 114,
                'f4': 115,
                'f5': 116,
                'f6': 117,
                'f7': 118,
                'f8': 119,
                'f9': 120,
                'f10': 121,
                'f11': 122,
                'f12': 123,
                'semicolon': 186,
                'plus': 187,
                'comma': 188,
                'minus': 189,
                'dot': 190,
                'forwardslash': 191,
                'graveaccent': 192,
                'openbracket': 219,
                'backslash': 220,
                'closebracket': 221,
                'singlequote': 222,
                ']': 221,
                '[': 219,
                '=': 187
            };
            var f = (function(e) {
                d(t, e);
                function t(t, n) {
                    var r = e.call(this, n, t) || this;
                    r.keyPressHandler = function(e) {
                        var t = e.altKey;
                        var n = e.ctrlKey;
                        var s = e.shiftKey;
                        var o = e.metaKey;
                        var a = e.which;
                        var l = Object.keys(r.keyConfigs);
                        for(var h = 0, c = l; h < c.length; h++){
                            var d = c[h];
                            var p = r.keyConfigs[d].split(',');
                            for(var u = 0, f = p; u < f.length; u++){
                                var m = f[u];
                                var v = i.getKeyConfigData(m.trim());
                                if (t === v.altKey && (n === v.ctrlKey || o) && s === v.shiftKey && a === v.keyCode) {
                                    e.action = d;
                                }
                            }
                        }
                        if (r.keyAction) {
                            r.keyAction(e);
                        }
                    };
                    r.bind();
                    return r;
                }
                i = t;
                t.prototype.destroy = function() {
                    this.unwireEvents();
                    e.prototype.destroy.call(this);
                };
                t.prototype.onPropertyChanged = function(e, t) {};
                t.prototype.bind = function() {
                    this.wireEvents();
                };
                t.prototype.getModuleName = function() {
                    return 'keyboard';
                };
                t.prototype.wireEvents = function() {
                    this.element.addEventListener(this.eventName, this.keyPressHandler);
                };
                t.prototype.unwireEvents = function() {
                    this.element.removeEventListener(this.eventName, this.keyPressHandler);
                };
                t.getKeyConfigData = function(e) {
                    if (e in this.configCache) {
                        return this.configCache[e];
                    }
                    var t = e.toLowerCase().split('+');
                    var n = {
                        altKey: (t.indexOf('alt') !== -1 ? true : false),
                        ctrlKey: (t.indexOf('ctrl') !== -1 ? true : false),
                        shiftKey: (t.indexOf('shift') !== -1 ? true : false),
                        keyCode: null
                    };
                    if (t[t.length - 1].length > 1 && !!Number(t[t.length - 1])) {
                        n.keyCode = Number(t[t.length - 1]);
                    } else {
                        n.keyCode = i.getKeyCode(t[t.length - 1]);
                    }
                    i.configCache[e] = n;
                    return n;
                };
                t.getKeyCode = function(e) {
                    return u[e] || e.toUpperCase().charCodeAt(0);
                };
                var i;
                t.configCache = {};
                p([
                    (0, r.Z9)({})
                ], t.prototype, "keyConfigs", void 0);
                p([
                    (0, r.Z9)('keyup')
                ], t.prototype, "eventName", void 0);
                p([
                    (0, r.ju)()
                ], t.prototype, "keyAction", void 0);
                t = i = p([
                    r.Zl
                ], t);
                return t;
            }(r.XY));
            ;
            var m = (function() {
                function e(e, t) {
                    this.parent = e;
                    var i = t;
                    this.rendererFactory = i.getService('rendererFactory');
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.on(o.sv, this.sourceCode, this);
                    this.parent.on(o.Xr, this.onInitialEnd, this);
                    this.parent.on(o.v0, this.updateSourceCode, this);
                    this.parent.on(o.ob, this.destroy, this);
                    this.parent.on(o.P0, this.moduleDestroy, this);
                };
                e.prototype.onInitialEnd = function() {
                    this.parent.formatter.editorManager.observer.on(c.kT, this.onKeyDown, this);
                };
                e.prototype.removeEventListener = function() {
                    this.unWireEvent();
                    this.parent.off(o.sv, this.sourceCode);
                    this.parent.off(o.v0, this.updateSourceCode);
                    this.parent.off(o.Xr, this.onInitialEnd);
                    this.parent.off(o.ob, this.destroy);
                    this.parent.off(o.P0, this.moduleDestroy);
                    this.parent.formatter.editorManager.observer.off(c.kT, this.onKeyDown);
                };
                e.prototype.getSourceCode = function() {
                    return this.parent.createElement('textarea', {
                        className: 'e-rte-srctextarea' + ' ' + this.parent.cssClass
                    });
                };
                e.prototype.wireEvent = function(e) {
                    this.keyboardModule = new f(e, {
                        keyAction: this.previewKeyDown.bind(this),
                        keyConfigs: this.parent.formatter.keyConfig,
                        eventName: 'keydown'
                    });
                    r.bi.add(this.previewElement, 'mousedown', this.mouseDownHandler, this);
                };
                e.prototype.unWireEvent = function() {
                    if (this.keyboardModule) {
                        this.keyboardModule.destroy();
                    }
                    if (this.previewElement) {
                        r.bi.remove(this.previewElement, 'mousedown', this.mouseDownHandler);
                    }
                };
                e.prototype.wireBaseKeyDown = function() {
                    this.parent.keyboardModule = new f(this.contentModule.getEditPanel(), {
                        keyAction: this.parent.keyDown.bind(this.parent),
                        keyConfigs: this.parent.formatter.keyConfig,
                        eventName: 'keydown'
                    });
                };
                e.prototype.unWireBaseKeyDown = function() {
                    this.parent.keyboardModule.destroy();
                };
                e.prototype.mouseDownHandler = function(e) {
                    this.parent.notify(o.tO, {
                        args: e
                    });
                };
                e.prototype.previewKeyDown = function(e) {
                    switch(e.action){
                        case 'html-source':
                            this.updateSourceCode(e);
                            e.preventDefault();
                            break;
                        case 'toolbar-focus':
                            if (this.parent.toolbarSettings.enable) {
                                var t = '.e-toolbar-item[aria-disabled="false"][title] [tabindex]';
                                this.parent.toolbarModule.baseToolbar.toolbarObj.element.querySelector(t).focus();
                            }
                            break;
                    }
                };
                e.prototype.onKeyDown = function(e) {
                    switch(e.event.action){
                        case 'html-source':
                            e.event.preventDefault();
                            this.sourceCode(e);
                            e.callBack({
                                requestType: 'SourceCode',
                                editorMode: 'HTML',
                                event: e.event
                            });
                            break;
                    }
                };
                e.prototype.sourceCode = function(e) {
                    this.parent.isBlur = false;
                    this.parent.trigger(o.m2, {
                        requestType: 'SourceCode',
                        targetItem: 'SourceCode',
                        args: e
                    });
                    var t = (0, r.td)('.' + a.Xh, this.parent.element);
                    this.contentModule = this.rendererFactory.getRenderer(l.y2.Content);
                    this.parent.notify(o.W0, {
                        targetItem: 'SourceCode',
                        updateItem: 'Preview',
                        baseToolbar: this.parent.getBaseToolbarObject()
                    });
                    if ((0, r.le)(this.previewElement)) {
                        this.previewElement = this.getSourceCode();
                    }
                    this.parent.updateValueData();
                    if (this.parent.iframeSettings.enable) {
                        var i = void 0;
                        if ((0, r.le)(this.parent.element.querySelector('#' + this.parent.element.id + '_source-view'))) {
                            i = this.parent.createElement('div', {
                                className: 'e-source-content',
                                id: this.parent.element.id + '_source-view'
                            });
                        } else {
                            i = this.parent.element.querySelector('#' + this.parent.element.id + '_source-view');
                        }
                        i.appendChild(this.previewElement);
                        this.parent.element.appendChild(i);
                        i.style.height = this.contentModule.getPanel().style.height;
                        i.style.marginTop = this.contentModule.getPanel().style.marginTop;
                        this.getPanel().value = this.getTextAreaValue();
                        this.contentModule.getPanel().style.display = 'none';
                        i.style.display = 'block';
                        this.getPanel().style.display = 'block';
                    } else {
                        this.contentModule.getPanel().appendChild(this.previewElement);
                        this.getPanel().value = this.getTextAreaValue();
                        this.contentModule.getEditPanel().style.display = 'none';
                        this.previewElement.style.display = 'block';
                    }
                    this.parent.isBlur = false;
                    this.parent.disableToolbarItem(this.parent.toolbarSettings.items);
                    this.parent.enableToolbarItem('SourceCode');
                    if (this.parent.getToolbar()) {
                        (0, r.IV)([
                            this.parent.getToolbar()
                        ], [
                            a.Yi
                        ]);
                    }
                    (0, r.IV)(t, [
                        a.XS
                    ]);
                    this.parent.setContentHeight('sourceCode', true);
                    this.wireEvent(this.previewElement);
                    this.unWireBaseKeyDown();
                    this.previewElement.focus();
                    this.parent.updateValue();
                    if (!(0, r.le)(this.parent.placeholder) && !this.parent.iframeSettings.enable) {
                        var n = this.parent.element.querySelector('.rte-placeholder.e-rte-placeholder');
                        n.style.display = 'none';
                    }
                    this.parent.trigger(o.i8, {
                        requestType: 'SourceCode',
                        targetItem: 'SourceCode',
                        args: e
                    });
                    this.parent.invokeChangeEvent();
                };
                e.prototype.updateSourceCode = function(e) {
                    this.parent.isBlur = false;
                    this.parent.trigger(o.m2, {
                        requestType: 'Preview',
                        targetItem: 'Preview',
                        args: e
                    });
                    var t = this.getPanel();
                    this.parent.notify(o.W0, {
                        targetItem: 'Preview',
                        updateItem: 'SourceCode',
                        baseToolbar: this.parent.getBaseToolbarObject()
                    });
                    var i = this.parent.serializeValue(t.value);
                    var n;
                    if (i === null || i === '') {
                        if (this.parent.enterKey === 'DIV') {
                            n = '<div><br/></div>';
                        } else if (this.parent.enterKey === 'BR') {
                            n = '<br/>';
                        } else {
                            n = '<p><br/></p>';
                        }
                    } else {
                        n = i;
                    }
                    if (this.parent.iframeSettings.enable) {
                        t.parentElement.style.display = 'none';
                        t.style.display = 'none';
                        this.contentModule.getPanel().style.display = 'block';
                        this.contentModule.getEditPanel().innerHTML = n;
                    } else {
                        t.style.display = 'none';
                        this.contentModule.getEditPanel().style.display = 'block';
                        this.contentModule.getEditPanel().innerHTML = n;
                    }
                    this.parent.isBlur = false;
                    this.parent.enableToolbarItem(this.parent.toolbarSettings.items);
                    if (this.parent.getToolbar()) {
                        (0, r.IV)([
                            this.parent.getToolbar()
                        ], [
                            a.Yi
                        ]);
                    }
                    this.parent.setContentHeight('preview', true);
                    this.unWireEvent();
                    this.wireBaseKeyDown();
                    this.contentModule.getEditPanel().focus();
                    this.parent.updateValue();
                    if (!(0, r.le)(this.parent.placeholder) && this.contentModule.getEditPanel().innerText.length === 0) {
                        var s = this.parent.element.querySelector('.rte-placeholder.e-rte-placeholder');
                        s.style.display = 'block';
                    }
                    this.parent.trigger(o.i8, {
                        requestType: 'Preview',
                        targetItem: 'Preview',
                        args: e
                    });
                    this.parent.formatter.enableUndo(this.parent);
                    this.parent.invokeChangeEvent();
                    this.parent.notify(o.LF, {});
                };
                e.prototype.getTextAreaValue = function() {
                    return (this.contentModule.getEditPanel().innerHTML === '<p><br></p>') || (this.contentModule.getEditPanel().innerHTML === '<div><br></div>') || (this.contentModule.getEditPanel().innerHTML === '<br>') || (this.contentModule.getEditPanel().childNodes.length === 1 && (this.contentModule.getEditPanel().childNodes[0].tagName === 'P' && this.contentModule.getEditPanel().innerHTML.length === 7) || (this.contentModule.getEditPanel().childNodes[0].tagName === 'DIV' && this.contentModule.getEditPanel().innerHTML.length === 11)) ? '' : this.parent.value;
                };
                e.prototype.getPanel = function() {
                    return this.parent.element && this.parent.element.querySelector('.e-rte-srctextarea');
                };
                e.prototype.getViewPanel = function() {
                    return (this.parent.iframeSettings.enable && this.getPanel()) ? this.getPanel().parentElement : this.getPanel();
                };
                e.prototype.destroy = function() {
                    this.removeEventListener();
                };
                e.prototype.moduleDestroy = function() {
                    this.parent = null;
                };
                return e;
            }());
            ;
            var v = {
                'bold': {
                    command: 'Style',
                    subCommand: 'Bold',
                    value: 'strong'
                },
                'italic': {
                    command: 'Style',
                    subCommand: 'Italic',
                    value: 'em'
                },
                'underline': {
                    command: 'Style',
                    subCommand: 'Underline',
                    value: 'span'
                },
                'strikeThrough': {
                    command: 'Style',
                    subCommand: 'StrikeThrough',
                    value: 'span'
                },
                'insertCode': {
                    command: 'Formats',
                    subCommand: 'Pre',
                    value: 'pre'
                },
                'superscript': {
                    command: 'Effects',
                    subCommand: 'SuperScript',
                    value: 'sup'
                },
                'subscript': {
                    command: 'Effects',
                    subCommand: 'SubScript',
                    value: 'sub'
                },
                'uppercase': {
                    command: 'Casing',
                    subCommand: 'UpperCase'
                },
                'lowercase': {
                    command: 'Casing',
                    subCommand: 'LowerCase'
                },
                'fontColor': {
                    command: 'font',
                    subCommand: 'fontcolor',
                    value: '#ff0000'
                },
                'fontName': {
                    command: 'font',
                    subCommand: 'fontname',
                    value: 'Segoe UI'
                },
                'fontSize': {
                    command: 'font',
                    subCommand: 'fontsize',
                    value: '10pt'
                },
                'backColor': {
                    command: 'font',
                    subCommand: 'backgroundcolor',
                    value: '#ffff00'
                },
                'justifyCenter': {
                    command: 'Alignments',
                    subCommand: 'JustifyCenter'
                },
                'justifyFull': {
                    command: 'Alignments',
                    subCommand: 'JustifyFull'
                },
                'justifyLeft': {
                    command: 'Alignments',
                    subCommand: 'JustifyLeft'
                },
                'justifyRight': {
                    command: 'Alignments',
                    subCommand: 'JustifyRight'
                },
                'undo': {
                    command: 'Actions',
                    subCommand: 'Undo'
                },
                'redo': {
                    command: 'Actions',
                    subCommand: 'Redo'
                },
                'createLink': {
                    command: 'Links',
                    subCommand: 'createLink'
                },
                'editLink': {
                    command: 'Links',
                    subCommand: 'createLink'
                },
                'createImage': {
                    command: 'Images',
                    subCommand: 'Images'
                },
                'formatBlock': {
                    command: 'Formats',
                    value: 'P'
                },
                'heading': {
                    command: 'Formats',
                    value: 'H1'
                },
                'indent': {
                    command: 'Indents',
                    subCommand: 'Indent'
                },
                'outdent': {
                    command: 'Indents',
                    subCommand: 'Outdent'
                },
                'insertHTML': {
                    command: 'InsertHTML',
                    subCommand: 'InsertHTML',
                    value: ''
                },
                'insertText': {
                    command: 'InsertText',
                    subCommand: 'InsertText',
                    value: ''
                },
                'insertHorizontalRule': {
                    command: 'InsertHTML',
                    subCommand: 'InsertHTML',
                    value: '<hr/>'
                },
                'insertImage': {
                    command: 'Images',
                    subCommand: 'Image'
                },
                'editImage': {
                    command: 'Images',
                    subCommand: 'Image'
                },
                'insertTable': {
                    command: 'Table',
                    subCommand: 'CreateTable'
                },
                'insertBrOnReturn': {
                    command: 'InsertHTML',
                    subCommand: 'InsertHTML',
                    value: '<br/>'
                },
                'insertOrderedList': {
                    command: 'Lists',
                    value: 'OL'
                },
                'insertUnorderedList': {
                    command: 'Lists',
                    value: 'UL'
                },
                'insertParagraph': {
                    command: 'Formats',
                    value: 'P'
                },
                'removeFormat': {
                    command: 'Clear',
                    subCommand: 'ClearFormat'
                }
            };
            var g = i(9336);
            var b = i(2503);
            ;
            var y = (function() {
                function e(e) {
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.on(o.s4, this.commandCallBack, this);
                    this.parent.on(o.ob, this.removeEventListener, this);
                };
                e.prototype.commandCallBack = function(e) {
                    if (e.requestType !== 'Undo' && e.requestType !== 'Redo') {
                        this.parent.formatter.saveData();
                    }
                    this.parent.notify(o.l0, {
                        args: e
                    });
                    this.parent.notify(o.QX, {});
                };
                e.prototype.removeEventListener = function() {
                    this.parent.off(o.s4, this.commandCallBack);
                    this.parent.off(o.ob, this.removeEventListener);
                };
                return e;
            }());
            ;
            var C = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var E = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var S = (function(e) {
                C(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                E([
                    (0, r.Z9)(null)
                ], t.prototype, "downloadUrl", void 0);
                E([
                    (0, r.Z9)(null)
                ], t.prototype, "getImageUrl", void 0);
                E([
                    (0, r.Z9)(null)
                ], t.prototype, "uploadUrl", void 0);
                E([
                    (0, r.Z9)(null)
                ], t.prototype, "url", void 0);
                return t;
            }(r.rt));
            ;
            var w = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var T = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var k = [
                'Open',
                '|',
                'Cut',
                'Copy',
                '|',
                'Delete',
                'Download',
                'Rename',
                '|',
                'Details'
            ];
            var x = [
                'Open',
                '|',
                'Cut',
                'Copy',
                'Paste',
                '|',
                'Delete',
                'Rename',
                'Download',
                '|',
                'Details'
            ];
            var L = [
                'SortBy',
                'View',
                'Refresh',
                '|',
                'Paste',
                '|',
                'NewFolder',
                'Upload',
                '|',
                'Details',
                '|',
                'SelectAll'
            ];
            var N = (function(e) {
                w(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                T([
                    (0, r.Z9)(k)
                ], t.prototype, "file", void 0);
                T([
                    (0, r.Z9)(x)
                ], t.prototype, "folder", void 0);
                T([
                    (0, r.Z9)(L)
                ], t.prototype, "layout", void 0);
                T([
                    (0, r.Z9)(true)
                ], t.prototype, "visible", void 0);
                return t;
            }(r.rt));
            ;
            var D = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var O = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var A = [
                {
                    field: 'name',
                    headerText: 'Name',
                    minWidth: 120,
                    template: '<span class="e-fe-text">${name}</span>',
                    customAttributes: {
                        class: 'e-fe-grid-name'
                    }
                },
                {
                    field: '_fm_modified',
                    headerText: 'DateModified',
                    type: 'dateTime',
                    format: 'MMMM dd, yyyy HH:mm',
                    minWidth: 120,
                    width: '190'
                },
                {
                    field: 'size',
                    headerText: 'Size',
                    minWidth: 90,
                    width: '110',
                    template: '<span class="e-fe-size">${size}</span>'
                }
            ];
            var P = (function(e) {
                D(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                O([
                    (0, r.Z9)(true)
                ], t.prototype, "columnResizing", void 0);
                O([
                    (0, r.Z9)(A)
                ], t.prototype, "columns", void 0);
                return t;
            }(r.rt));
            ;
            var M = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var R = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var B = (function(e) {
                M(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                R([
                    (0, r.Z9)('650px')
                ], t.prototype, "maxWidth", void 0);
                R([
                    (0, r.Z9)('240px')
                ], t.prototype, "minWidth", void 0);
                R([
                    (0, r.Z9)(true)
                ], t.prototype, "visible", void 0);
                R([
                    (0, r.Z9)('None')
                ], t.prototype, "sortOrder", void 0);
                return t;
            }(r.rt));
            ;
            var I = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var H = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var F = (function(e) {
                I(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                H([
                    (0, r.Z9)(true)
                ], t.prototype, "allowSearchOnTyping", void 0);
                H([
                    (0, r.Z9)('contains')
                ], t.prototype, "filterType", void 0);
                H([
                    (0, r.Z9)(true)
                ], t.prototype, "ignoreCase", void 0);
                H([
                    (0, r.Z9)(null)
                ], t.prototype, "placeholder", void 0);
                return t;
            }(r.rt));
            ;
            var j = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var z = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var q = [
                'NewFolder',
                'Upload',
                'Cut',
                'Copy',
                'Paste',
                'Delete',
                'Download',
                'Rename',
                'SortBy',
                'Refresh',
                'Selection',
                'View',
                'Details'
            ];
            var V = (function(e) {
                j(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                z([
                    (0, r.Z9)(q)
                ], t.prototype, "items", void 0);
                z([
                    (0, r.Z9)(true)
                ], t.prototype, "visible", void 0);
                return t;
            }(r.rt));
            ;
            var _ = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var U = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var W = (function(e) {
                _(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                U([
                    (0, r.Z9)('')
                ], t.prototype, "allowedExtensions", void 0);
                U([
                    (0, r.Z9)(true)
                ], t.prototype, "autoUpload", void 0);
                U([
                    (0, r.Z9)(false)
                ], t.prototype, "autoClose", void 0);
                U([
                    (0, r.Z9)(0)
                ], t.prototype, "minFileSize", void 0);
                U([
                    (0, r.Z9)(30000000)
                ], t.prototype, "maxFileSize", void 0);
                return t;
            }(r.rt));
            var Z = i(3276);
            ;
            var Y = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var X = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var G = (function(e) {
                Y(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                X([
                    (0, r.Z9)(true)
                ], t.prototype, "enable", void 0);
                X([
                    (0, r.Z9)(true)
                ], t.prototype, "enableFloating", void 0);
                X([
                    (0, r.Z9)(l.Bv.Expand)
                ], t.prototype, "type", void 0);
                X([
                    (0, r.Z9)(Z.Gf)
                ], t.prototype, "items", void 0);
                X([
                    (0, r.Z9)({})
                ], t.prototype, "itemConfigs", void 0);
                return t;
            }(r.rt));
            var K = (function(e) {
                Y(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                X([
                    (0, r.Z9)([
                        '.jpeg',
                        '.jpg',
                        '.png'
                    ])
                ], t.prototype, "allowedTypes", void 0);
                X([
                    (0, r.Z9)('inline')
                ], t.prototype, "display", void 0);
                X([
                    (0, r.Z9)('Blob')
                ], t.prototype, "saveFormat", void 0);
                X([
                    (0, r.Z9)('auto')
                ], t.prototype, "width", void 0);
                X([
                    (0, r.Z9)('auto')
                ], t.prototype, "height", void 0);
                X([
                    (0, r.Z9)(null)
                ], t.prototype, "saveUrl", void 0);
                X([
                    (0, r.Z9)(null)
                ], t.prototype, "path", void 0);
                X([
                    (0, r.Z9)(true)
                ], t.prototype, "resize", void 0);
                X([
                    (0, r.Z9)(null)
                ], t.prototype, "removeUrl", void 0);
                X([
                    (0, r.Z9)(0)
                ], t.prototype, "minWidth", void 0);
                X([
                    (0, r.Z9)(null)
                ], t.prototype, "maxWidth", void 0);
                X([
                    (0, r.Z9)(0)
                ], t.prototype, "minHeight", void 0);
                X([
                    (0, r.Z9)(null)
                ], t.prototype, "maxHeight", void 0);
                X([
                    (0, r.Z9)(false)
                ], t.prototype, "resizeByPercent", void 0);
                return t;
            }(r.rt));
            var J = (function(e) {
                Y(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                X([
                    (0, r.Zz)({
                        getImageUrl: null,
                        url: null,
                        uploadUrl: null
                    }, S)
                ], t.prototype, "ajaxSettings", void 0);
                X([
                    (0, r.Z9)(false)
                ], t.prototype, "allowDragAndDrop", void 0);
                X([
                    (0, r.Zz)({
                        visible: true,
                        file: [
                            'Open',
                            '|',
                            'Cut',
                            'Copy',
                            '|',
                            'Delete',
                            'Rename',
                            '|',
                            'Details'
                        ],
                        folder: [
                            'Open',
                            '|',
                            'Cut',
                            'Copy',
                            'Paste',
                            '|',
                            'Delete',
                            'Rename',
                            '|',
                            'Details'
                        ],
                        layout: [
                            'SortBy',
                            'View',
                            'Refresh',
                            '|',
                            'Paste',
                            '|',
                            'NewFolder',
                            'Upload',
                            '|',
                            'Details',
                            '|',
                            'SelectAll'
                        ]
                    }, N)
                ], t.prototype, "contextMenuSettings", void 0);
                X([
                    (0, r.Z9)('')
                ], t.prototype, "cssClass", void 0);
                X([
                    (0, r.Zz)({}, P)
                ], t.prototype, "detailsViewSettings", void 0);
                X([
                    (0, r.Z9)(false)
                ], t.prototype, "enable", void 0);
                X([
                    (0, r.Zz)({
                        maxWidth: '650px',
                        minWidth: '240px',
                        visible: true
                    }, B)
                ], t.prototype, "navigationPaneSettings", void 0);
                X([
                    (0, r.Z9)('/')
                ], t.prototype, "path", void 0);
                X([
                    (0, r.Z9)(null)
                ], t.prototype, "rootAliasName", void 0);
                X([
                    (0, r.Zz)({}, F)
                ], t.prototype, "searchSettings", void 0);
                X([
                    (0, r.Z9)(true)
                ], t.prototype, "showFileExtension", void 0);
                X([
                    (0, r.Z9)(false)
                ], t.prototype, "showHiddenItems", void 0);
                X([
                    (0, r.Z9)(true)
                ], t.prototype, "showThumbnail", void 0);
                X([
                    (0, r.Z9)('Ascending')
                ], t.prototype, "sortOrder", void 0);
                X([
                    (0, r.Zz)({
                        visible: true,
                        items: [
                            'NewFolder',
                            'Upload',
                            'Cut',
                            'Copy',
                            'Paste',
                            'Delete',
                            'Download',
                            'Rename',
                            'SortBy',
                            'Refresh',
                            'Selection',
                            'View',
                            'Details'
                        ]
                    }, V)
                ], t.prototype, "toolbarSettings", void 0);
                X([
                    (0, r.Zz)({
                        autoUpload: true,
                        minFileSize: 0,
                        maxFileSize: 30000000,
                        allowedExtensions: '',
                        autoClose: false
                    }, W)
                ], t.prototype, "uploadSettings", void 0);
                X([
                    (0, r.Z9)('LargeIcons')
                ], t.prototype, "view", void 0);
                return t;
            }(r.rt));
            var $ = (function(e) {
                Y(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                X([
                    (0, r.Z9)('100%')
                ], t.prototype, "width", void 0);
                X([
                    (0, r.Z9)(Z._f)
                ], t.prototype, "styles", void 0);
                X([
                    (0, r.Z9)(true)
                ], t.prototype, "resize", void 0);
                X([
                    (0, r.Z9)(0)
                ], t.prototype, "minWidth", void 0);
                X([
                    (0, r.Z9)(null)
                ], t.prototype, "maxWidth", void 0);
                return t;
            }(r.rt));
            var Q = (function(e) {
                Y(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                X([
                    (0, r.Z9)(true)
                ], t.prototype, "enable", void 0);
                X([
                    (0, r.Z9)(false)
                ], t.prototype, "showOnRightClick", void 0);
                X([
                    (0, r.Z9)('hide')
                ], t.prototype, "actionOnScroll", void 0);
                X([
                    (0, r.Z9)([
                        'Open',
                        'Edit',
                        'UnLink'
                    ])
                ], t.prototype, "link", void 0);
                X([
                    (0, r.Z9)([
                        'Replace',
                        'Align',
                        'Caption',
                        'Remove',
                        '-',
                        'InsertLink',
                        'OpenImageLink',
                        'EditImageLink',
                        'RemoveImageLink',
                        'Display',
                        'AltText',
                        'Dimension'
                    ])
                ], t.prototype, "image", void 0);
                X([
                    (0, r.Z9)([
                        'Cut',
                        'Copy',
                        'Paste'
                    ])
                ], t.prototype, "text", void 0);
                X([
                    (0, r.Z9)([
                        'TableHeader',
                        'TableRows',
                        'TableColumns',
                        'BackgroundColor',
                        '-',
                        'TableRemove',
                        'Alignments',
                        'TableCellVerticalAlign',
                        'Styles'
                    ])
                ], t.prototype, "table", void 0);
                return t;
            }(r.rt));
            var ee = (function(e) {
                Y(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                X([
                    (0, r.Z9)(false)
                ], t.prototype, "prompt", void 0);
                X([
                    (0, r.Z9)(null)
                ], t.prototype, "deniedAttrs", void 0);
                X([
                    (0, r.Z9)([
                        'background',
                        'background-color',
                        'border',
                        'border-bottom',
                        'border-left',
                        'border-radius',
                        'border-right',
                        'border-style',
                        'border-top',
                        'border-width',
                        'clear',
                        'color',
                        'cursor',
                        'direction',
                        'display',
                        'float',
                        'font',
                        'font-family',
                        'font-size',
                        'font-weight',
                        'font-style',
                        'height',
                        'left',
                        'line-height',
                        'list-style-type',
                        'margin',
                        'margin-top',
                        'margin-left',
                        'margin-right',
                        'margin-bottom',
                        'max-height',
                        'max-width',
                        'min-height',
                        'min-width',
                        'overflow',
                        'overflow-x',
                        'overflow-y',
                        'padding',
                        'padding-bottom',
                        'padding-left',
                        'padding-right',
                        'padding-top',
                        'position',
                        'right',
                        'table-layout',
                        'text-align',
                        'text-decoration',
                        'text-indent',
                        'top',
                        'vertical-align',
                        'visibility',
                        'white-space',
                        'width'
                    ])
                ], t.prototype, "allowedStyleProps", void 0);
                X([
                    (0, r.Z9)(null)
                ], t.prototype, "deniedTags", void 0);
                X([
                    (0, r.Z9)(true)
                ], t.prototype, "keepFormat", void 0);
                X([
                    (0, r.Z9)(false)
                ], t.prototype, "plainText", void 0);
                return t;
            }(r.rt));
            var et = (function(e) {
                Y(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                X([
                    (0, r.Z9)(null)
                ], t.prototype, "default", void 0);
                X([
                    (0, r.Z9)('65px')
                ], t.prototype, "width", void 0);
                X([
                    (0, r.Z9)(Z.I8)
                ], t.prototype, "items", void 0);
                return t;
            }(r.rt));
            var ei = (function(e) {
                Y(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                X([
                    (0, r.Z9)(null)
                ], t.prototype, "default", void 0);
                X([
                    (0, r.Z9)('35px')
                ], t.prototype, "width", void 0);
                X([
                    (0, r.Z9)(Z.JB)
                ], t.prototype, "items", void 0);
                return t;
            }(r.rt));
            var en = (function(e) {
                Y(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                X([
                    (0, r.Z9)(null)
                ], t.prototype, "default", void 0);
                X([
                    (0, r.Z9)('65px')
                ], t.prototype, "width", void 0);
                X([
                    (0, r.Z9)(Z.gk)
                ], t.prototype, "types", void 0);
                return t;
            }(r.rt));
            var er = (function(e) {
                Y(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                X([
                    (0, r.Z9)('#ff0000')
                ], t.prototype, "default", void 0);
                X([
                    (0, r.Z9)('Palette')
                ], t.prototype, "mode", void 0);
                X([
                    (0, r.Z9)(10)
                ], t.prototype, "columns", void 0);
                X([
                    (0, r.Z9)(Z.B3)
                ], t.prototype, "colorCode", void 0);
                X([
                    (0, r.Z9)(false)
                ], t.prototype, "modeSwitcher", void 0);
                return t;
            }(r.rt));
            var es = (function(e) {
                Y(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                X([
                    (0, r.Z9)('#ffff00')
                ], t.prototype, "default", void 0);
                X([
                    (0, r.Z9)('Palette')
                ], t.prototype, "mode", void 0);
                X([
                    (0, r.Z9)(10)
                ], t.prototype, "columns", void 0);
                X([
                    (0, r.Z9)(Z.Cz)
                ], t.prototype, "colorCode", void 0);
                X([
                    (0, r.Z9)(false)
                ], t.prototype, "modeSwitcher", void 0);
                return t;
            }(r.rt));
            var eo = (function(e) {
                Y(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                X([
                    (0, r.Z9)(Z.UP)
                ], t.prototype, "types", void 0);
                return t;
            }(r.rt));
            var ea = (function(e) {
                Y(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                X([
                    (0, r.Z9)(Z.Ju)
                ], t.prototype, "types", void 0);
                return t;
            }(r.rt));
            ;
            var el = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var eh = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var ec = (function(e) {
                el(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                eh([
                    (0, r.Z9)([])
                ], t.prototype, "styles", void 0);
                eh([
                    (0, r.Z9)([])
                ], t.prototype, "scripts", void 0);
                return t;
            }(r.rt));
            var ed = (function(e) {
                el(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                eh([
                    (0, r.Z9)(false)
                ], t.prototype, "enable", void 0);
                eh([
                    (0, r.Z9)(null)
                ], t.prototype, "attributes", void 0);
                eh([
                    (0, r.Zz)({}, ec)
                ], t.prototype, "resources", void 0);
                return t;
            }(r.rt));
            ;
            var ep = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var eu = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var ef = (function(e) {
                ep(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                eu([
                    (0, r.Z9)(false)
                ], t.prototype, "enable", void 0);
                eu([
                    (0, r.Z9)(true)
                ], t.prototype, "onSelection", void 0);
                return t;
            }(r.rt));
            var em = i(8491);
            ;
            function ev(e, t, i, n) {
                var r;
                if (i) {
                    var s = t.contentModule.getDocument();
                    r = s.querySelector('body');
                } else {
                    r = t.element;
                }
                if (Object.keys(e).length) {
                    for(var o = 0, a = Object.keys(e); o < a.length; o++){
                        var l = a[o];
                        if (l === 'class') {
                            r.classList.add(e[l]);
                        } else if (l === 'disabled' && e[l] === 'disabled') {
                            t.enabled = false;
                            t.setEnable();
                        } else if (l === 'readonly' && e[l] === 'readonly') {
                            t.readonly = true;
                            t.setReadOnly(n);
                        } else if (l === 'style') {
                            r.setAttribute('style', e[l]);
                        } else if (l === 'tabindex') {
                            t.inputElement.setAttribute('tabindex', e[l]);
                        } else if (l === 'placeholder') {
                            t.placeholder = e[l];
                            t.setPlaceHolder();
                        } else {
                            var h = [
                                'name',
                                'required'
                            ];
                            if (h.indexOf(l) > -1) {
                                t.valueContainer.setAttribute(l, e[l]);
                            } else {
                                r.setAttribute(l, e[l]);
                            }
                        }
                    }
                }
            }
            ;
            var eg = (function() {
                function e(e) {
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.showFullScreen = function(e) {
                    var t = this;
                    if (this.parent.toolbarSettings.enable === true && this.parent.editorMode !== 'Markdown' && !(0, r.le)(this.parent.quickToolbarModule)) {
                        this.parent.quickToolbarModule.hideQuickToolbars();
                    }
                    this.scrollableParent = (0, s.Mm)(this.parent.element);
                    if (!this.parent.element.classList.contains(a.GY)) {
                        var i = {
                            cancel: false,
                            requestType: 'Maximize',
                            targetItem: 'Maximize',
                            args: e
                        };
                        this.parent.trigger(o.m2, i, function(i) {
                            if (!i.cancel) {
                                if (t.parent.toolbarSettings.enableFloating && !t.parent.inlineMode.enable && t.parent.toolbarSettings.enable) {
                                    t.parent.getToolbarElement().style.width = '100%';
                                    t.parent.getToolbarElement().style.top = '0px';
                                }
                                t.parent.element.classList.add(a.GY);
                                t.toggleParentOverflow(true);
                                var n = t.parent.element.querySelectorAll('.e-toolbar-extended.e-popup-open').length > 0 ? true : false;
                                t.parent.setContentHeight(null, n);
                                if (t.parent.toolbarModule) {
                                    if (!t.parent.getBaseToolbarObject().toolbarObj.items[0].properties) {
                                        t.parent.getBaseToolbarObject().toolbarObj.removeItems(0);
                                    }
                                    if (r.AR.isDevice) {
                                        t.parent.toolbarModule.removeFixedTBarClass();
                                    }
                                    t.parent.toolbarModule.updateItem({
                                        targetItem: 'Maximize',
                                        updateItem: 'Minimize',
                                        baseToolbar: t.parent.getBaseToolbarObject()
                                    });
                                }
                                t.parent.refreshUI();
                                t.parent.trigger(o.i8, {
                                    requestType: 'Maximize',
                                    targetItem: 'Maximize',
                                    args: e
                                });
                            }
                        });
                    }
                };
                e.prototype.hideFullScreen = function(e) {
                    var t = this;
                    if (this.parent.toolbarSettings.enable === true && this.parent.editorMode !== 'Markdown' && !(0, r.le)(this.parent.quickToolbarModule)) {
                        this.parent.quickToolbarModule.hideQuickToolbars();
                    }
                    if (this.parent.element.classList.contains(a.GY)) {
                        var i = {
                            cancel: false,
                            requestType: 'Minimize',
                            targetItem: 'Minimize',
                            args: e
                        };
                        this.parent.trigger(o.m2, i, function(i) {
                            if (!i.cancel) {
                                t.parent.element.classList.remove(a.GY);
                                var n = document.querySelectorAll('.e-rte-overflow');
                                for(var s = 0; s < n.length; s++){
                                    (0, r.IV)([
                                        n[s]
                                    ], [
                                        'e-rte-overflow'
                                    ]);
                                }
                                var l = t.parent.element.querySelectorAll('.e-toolbar-extended.e-popup-open').length > 0 ? true : false;
                                t.parent.setContentHeight(null, l);
                                if (t.parent.toolbarModule) {
                                    if (!t.parent.getBaseToolbarObject().toolbarObj.items[0].properties) {
                                        t.parent.getBaseToolbarObject().toolbarObj.removeItems(0);
                                    }
                                    t.parent.toolbarModule.updateItem({
                                        targetItem: 'Minimize',
                                        updateItem: 'Maximize',
                                        baseToolbar: t.parent.getBaseToolbarObject()
                                    });
                                    if (r.AR.isDevice && t.parent.inlineMode.enable) {
                                        t.parent.toolbarModule.addFixedTBarClass();
                                    }
                                }
                                t.parent.trigger(o.i8, {
                                    requestType: 'Minimize',
                                    targetItem: 'Minimize',
                                    args: e
                                });
                            }
                        });
                    }
                };
                e.prototype.toggleParentOverflow = function(e) {
                    if ((0, r.le)(this.scrollableParent)) {
                        return;
                    }
                    for(var t = 0; t < this.scrollableParent.length; t++){
                        if (this.scrollableParent[t].nodeName === '#document') {
                            var i = document.querySelector('body');
                            (0, r.cn)([
                                i
                            ], [
                                'e-rte-overflow'
                            ]);
                        } else {
                            var i = this.scrollableParent[t];
                            (0, r.cn)([
                                i
                            ], [
                                'e-rte-overflow'
                            ]);
                        }
                    }
                };
                e.prototype.onKeyDown = function(e) {
                    var t = e.args;
                    switch(t.action){
                        case 'full-screen':
                            this.showFullScreen(e.args);
                            t.preventDefault();
                            break;
                        case 'escape':
                            this.hideFullScreen(e.args);
                            t.preventDefault();
                            break;
                    }
                };
                e.prototype.addEventListener = function() {
                    this.parent.on(o.QG, this.onKeyDown, this);
                    this.parent.on(o.ob, this.destroy, this);
                    this.parent.on(o.P0, this.moduleDestroy, this);
                };
                e.prototype.removeEventListener = function() {
                    this.parent.off(o.QG, this.onKeyDown);
                    this.parent.off(o.ob, this.destroy);
                    this.parent.off(o.P0, this.moduleDestroy);
                };
                e.prototype.destroy = function() {
                    if (this.parent.element.classList.contains(a.GY)) {
                        this.toggleParentOverflow(false);
                    }
                    var e = document.querySelectorAll('.e-rte-overflow');
                    for(var t = 0; t < e.length; t++){
                        (0, r.IV)([
                            e[t]
                        ], [
                            'e-rte-overflow'
                        ]);
                    }
                    this.removeEventListener();
                };
                e.prototype.moduleDestroy = function() {
                    this.parent = null;
                };
                return e;
            }());
            ;
            var eb = (function() {
                function e(e) {
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.on(o.dp, this.enterHandler, this);
                    this.parent.on(o.ob, this.destroy, this);
                    this.parent.on(o.P0, this.moduleDestroy, this);
                };
                e.prototype.destroy = function() {
                    this.removeEventListener();
                };
                e.prototype.moduleDestroy = function() {
                    this.parent = null;
                };
                e.prototype.removeEventListener = function() {
                    this.parent.off(o.dp, this.enterHandler);
                    this.parent.off(o.ob, this.destroy);
                    this.parent.off(o.P0, this.moduleDestroy);
                };
                e.prototype.getRangeNode = function() {
                    this.range = this.parent.getRange();
                    this.startNode = this.range.startContainer.nodeName === '#text' ? this.range.startContainer.parentElement : this.range.startContainer;
                    this.endNode = this.range.endContainer.nodeName === '#text' ? this.range.endContainer.parentElement : this.range.endContainer;
                };
                e.prototype.enterHandler = function(e) {
                    var t = this;
                    this.getRangeNode();
                    var i = true;
                    if (!(0, r.le)(this.startNode.closest('TABLE')) && !(0, r.le)(this.endNode.closest('TABLE'))) {
                        i = false;
                        var n = this.startNode;
                        var s = n;
                        while(!this.parent.formatter.editorManager.domNode.isBlockNode(n)){
                            s = n;
                            n = n.parentElement;
                        }
                        i = s.tagName === 'TD' || s.tagName === 'TBODY' ? false : true;
                    }
                    if (e.args.which === 13 && e.args.code === 'Enter') {
                        if ((0, r.le)(this.startNode.closest('LI')) && (0, r.le)(this.endNode.closest('LI')) && i && (0, r.le)(this.startNode.closest('PRE')) && (0, r.le)(this.endNode.closest('PRE'))) {
                            var a = e.args.shiftKey;
                            var l = {
                                cancel: false,
                                name: o.m2,
                                requestType: a ? 'ShiftEnterAction' : 'EnterAction',
                                originalEvent: e.args
                            };
                            this.parent.trigger(o.m2, l, function(n) {
                                if (!n.cancel) {
                                    if (!(t.range.startOffset === t.range.endOffset && t.range.startContainer === t.range.endContainer)) {
                                        t.range.deleteContents();
                                        if (t.range.startContainer.nodeName === '#text' && t.range.startContainer.textContent.length === 0 && t.range.startContainer.parentElement !== t.parent.inputElement) {
                                            if (t.parent.enterKey === 'BR') {
                                                t.range.startContainer.parentElement.innerHTML = '&#8203;';
                                            } else {
                                                t.range.startContainer.parentElement.innerHTML = '<br>';
                                            }
                                        } else if (t.range.startContainer === t.parent.inputElement && t.range.startContainer.innerHTML === '') {
                                            t.range.startContainer.innerHTML = '<br>';
                                            var s = t.range.startContainer.childNodes[t.range.startOffset];
                                            t.parent.formatter.editorManager.nodeSelection.setCursorPoint(t.parent.contentModule.getDocument(), s, 0);
                                        } else if (t.parent.inputElement === t.range.startContainer) {
                                            var s = t.range.startContainer.childNodes[t.range.startOffset];
                                            if (s.nodeName === '#text' && s.textContent.length === 0) {
                                                t.parent.formatter.editorManager.nodeSelection.setCursorPoint(t.parent.contentModule.getDocument(), s, s.previousSibling.textContent.length);
                                            } else {
                                                t.parent.formatter.editorManager.nodeSelection.setCursorPoint(t.parent.contentModule.getDocument(), s, s.textContent.length >= 0 ? 0 : 1);
                                                if (s.previousSibling.textContent.length === 0) {
                                                    (0, r.og)(s.previousSibling);
                                                } else if (s.textContent.length === 0) {
                                                    var l = s.previousSibling.lastChild;
                                                    while(l.nodeName !== '#text'){
                                                        l = l.lastChild;
                                                    }
                                                    t.parent.formatter.editorManager.nodeSelection.setCursorPoint(t.parent.contentModule.getDocument(), l, l.textContent.length);
                                                    (0, r.og)(s);
                                                } else if (t.parent.enterKey !== 'BR' && s.previousSibling.textContent.length !== 0 && s.textContent.length !== 0) {
                                                    e.args.preventDefault();
                                                    return;
                                                }
                                            }
                                            t.getRangeNode();
                                        }
                                    }
                                    if (t.range.startContainer === t.range.endContainer && t.range.startOffset === t.range.endOffset && t.range.startContainer === t.parent.inputElement) {
                                        t.parent.formatter.editorManager.nodeSelection.setCursorPoint(t.parent.contentModule.getDocument(), t.range.startContainer.childNodes[t.range.startOffset], 0);
                                        t.getRangeNode();
                                    }
                                    if ((t.parent.enterKey === 'P' && !a) || (t.parent.enterKey === 'DIV' && !a) || (t.parent.shiftEnterKey === 'P' && a) || (t.parent.shiftEnterKey === 'DIV' && a)) {
                                        var h = void 0;
                                        if (i && t.parent.formatter.editorManager.domNode.isBlockNode(t.startNode)) {
                                            h = t.startNode;
                                        } else {
                                            h = t.parent.formatter.editorManager.domNode.blockParentNode(t.startNode);
                                        }
                                        var c = false;
                                        var d = false;
                                        if (t.range.startOffset != 0 && t.range.endOffset != 0 && t.range.startContainer === t.range.endContainer && !(!(0, r.le)(h.childNodes[0]) && h.childNodes[0].nodeName === 'IMG')) {
                                            var p = t.range.startContainer.textContent;
                                            var u = p.substring(0, t.range.startOffset);
                                            if (u.charCodeAt(t.range.startOffset - 1) != 160 && u.trim().length === 0) {
                                                d = true;
                                            }
                                        } else if (t.range.startOffset === 0 && t.range.endOffset === 0) {
                                            d = true;
                                        }
                                        t.removeBRElement(h);
                                        var f = r.AR.userAgent.indexOf('Firefox') != -1 && t.range.startOffset === 0 && t.range.startContainer === t.range.endContainer && t.range.startContainer.nodeName === '#text' && !t.parent.formatter.editorManager.domNode.isBlockNode(t.range.startContainer.previousSibling) && t.range.startContainer.parentElement === t.range.startContainer.previousSibling.parentElement;
                                        if (!f && ((t.range.startOffset === 0 && t.range.endOffset === 0) || d) && !(!(0, r.le)(t.range.startContainer.previousSibling) && (t.range.startContainer.previousSibling.nodeName === 'IMG' || t.range.startContainer.previousSibling.nodeName === 'BR'))) {
                                            var m = void 0;
                                            var v = void 0;
                                            if (t.range.startContainer.nodeName === 'IMG') {
                                                v = t.createInsertElement(a);
                                                c = true;
                                                m = false;
                                            } else {
                                                if (h.textContent.trim().length !== 0 || h.childNodes[0].nodeName === 'IMG') {
                                                    v = t.parent.formatter.editorManager.nodeCutter.SplitNode(t.range, h, false).cloneNode(true);
                                                    m = false;
                                                } else {
                                                    v = t.parent.formatter.editorManager.nodeCutter.SplitNode(t.range, h, true).cloneNode(true);
                                                    m = true;
                                                }
                                            }
                                            var g = t.createInsertElement(a);
                                            while(v.firstChild){
                                                g.appendChild(v.firstChild);
                                            }
                                            h.parentElement.insertBefore(g, h);
                                            if (!m) {
                                                var l = g;
                                                var b = void 0;
                                                while(!(0, r.le)(l) && l.nodeName !== '#text'){
                                                    b = l;
                                                    l = l.lastChild;
                                                }
                                                b.innerHTML = '<br>';
                                                if (!c) {
                                                    (0, r.og)(h);
                                                }
                                            }
                                            t.parent.formatter.editorManager.nodeSelection.setCursorPoint(t.parent.contentModule.getDocument(), g.nextElementSibling, 0);
                                        } else if (h.textContent.length === 0 && !(!(0, r.le)(h.childNodes[0]) && h.childNodes[0].nodeName === 'IMG')) {
                                            if (!(0, r.le)(h.children[0]) && h.children[0].tagName !== 'BR') {
                                                var v = t.parent.formatter.editorManager.nodeCutter.SplitNode(t.range, h, false).cloneNode(true);
                                                t.parent.formatter.editorManager.domNode.insertAfter(v, h);
                                                t.parent.formatter.editorManager.nodeSelection.setCursorPoint(t.parent.contentModule.getDocument(), v, v.textContent.length >= 0 ? 0 : 1);
                                            } else {
                                                var g = t.createInsertElement(a);
                                                g.innerHTML = '<br>';
                                                t.parent.formatter.editorManager.domNode.insertAfter(g, h);
                                                t.parent.formatter.editorManager.nodeSelection.setCursorPoint(t.parent.contentModule.getDocument(), g, 0);
                                            }
                                        } else {
                                            var v = t.parent.formatter.editorManager.nodeCutter.SplitNode(t.range, h, true);
                                            if (!(0, r.le)(v.childNodes[0]) && v.childNodes[0].nodeName === '#text' && v.childNodes[0].textContent.length === 0) {
                                                (0, r.og)(v.childNodes[0]);
                                            }
                                            if (v.textContent.trim().length === 0) {
                                                var y = t.parent.createElement('br');
                                                if (t.startNode.nodeName === 'A') {
                                                    var C = t.startNode.parentElement;
                                                    t.startNode.parentElement.insertBefore(y, t.startNode);
                                                    (0, r.og)(t.startNode);
                                                    t.startNode = C;
                                                } else {
                                                    t.startNode.appendChild(y);
                                                }
                                                if (v.childNodes[0].textContent === '\n') {
                                                    (0, r.og)(v.childNodes[0]);
                                                }
                                                t.parent.formatter.editorManager.nodeSelection.setCursorPoint(t.parent.contentModule.getDocument(), t.startNode, 0);
                                            }
                                            if (((t.parent.enterKey === 'P' || t.parent.enterKey === 'DIV') && !a) || ((t.parent.shiftEnterKey === 'DIV' || t.parent.shiftEnterKey === 'P') && a)) {
                                                var E = t.createInsertElement(a);
                                                while(v.firstChild){
                                                    E.appendChild(v.firstChild);
                                                }
                                                t.parent.formatter.editorManager.domNode.insertAfter(E, v);
                                                (0, r.og)(v);
                                                t.parent.formatter.editorManager.nodeSelection.setCursorPoint(t.parent.contentModule.getDocument(), t.parent.formatter.editorManager.domNode.isBlockNode(t.startNode) ? E : t.startNode, 0);
                                            }
                                        }
                                        e.args.preventDefault();
                                    }
                                    if ((t.parent.enterKey === 'BR' && !a) || (t.parent.shiftEnterKey === 'BR' && a)) {
                                        var S = void 0;
                                        if (!t.parent.formatter.editorManager.domNode.isBlockNode(t.startNode)) {
                                            var w = t.startNode;
                                            var T = w;
                                            while(!t.parent.formatter.editorManager.domNode.isBlockNode(w)){
                                                T = w;
                                                w = w.parentElement;
                                            }
                                            S = w === t.parent.inputElement ? T : w;
                                        } else {
                                            S = t.startNode;
                                        }
                                        t.removeBRElement(S);
                                        var k = false;
                                        var x = S.lastChild;
                                        while(!(0, r.le)(x) && !(x.nodeName === '#text' || x.nodeName === 'BR')){
                                            x = x.lastChild;
                                        }
                                        var L = t.range.startContainer === x ? t.range.startContainer.textContent.length : S.textContent.length;
                                        if (S !== t.parent.inputElement && t.parent.formatter.editorManager.domNode.isBlockNode(S) && t.range.startOffset === t.range.endOffset && t.range.startOffset === L) {
                                            var N = t.parent.createElement('br');
                                            if (x.nodeName === 'BR' && S.textContent.length === 0) {
                                                t.parent.formatter.editorManager.domNode.insertAfter(N, x);
                                            } else {
                                                var D = t.parent.createElement('br');
                                                t.parent.formatter.editorManager.domNode.insertAfter(N, t.range.startContainer);
                                                t.parent.formatter.editorManager.domNode.insertAfter(D, t.range.startContainer);
                                            }
                                            t.parent.formatter.editorManager.nodeSelection.setCursorPoint(t.parent.contentModule.getDocument(), N, 0);
                                        } else if (!(0, r.le)(S) && S !== t.parent.inputElement && S.nodeName !== 'BR') {
                                            if (S.textContent.trim().length === 0 || (S.textContent.trim().length === 1 && S.textContent.charCodeAt(0) === 8203)) {
                                                var v = t.parent.formatter.editorManager.nodeCutter.SplitNode(t.range, S, true).cloneNode(true);
                                                t.parent.formatter.editorManager.domNode.insertAfter(v, S);
                                                var O = t.parent.createElement('br');
                                                v.parentElement.insertBefore(O, v);
                                                t.parent.formatter.editorManager.nodeSelection.setCursorPoint(t.parent.contentModule.getDocument(), v, 0);
                                            } else {
                                                var v = void 0;
                                                var O = t.parent.createElement('br');
                                                if (t.range.startOffset === 0 && t.range.endOffset === 0 && !(0, r.le)(S.previousSibling) && S.previousSibling.nodeName === 'BR') {
                                                    v = t.parent.formatter.editorManager.nodeCutter.SplitNode(t.range, S, false).cloneNode(true);
                                                    t.parent.formatter.editorManager.domNode.insertAfter(O, S);
                                                    t.insertFocusContent();
                                                    var l = O.nextSibling;
                                                    while(!(0, r.le)(l) && l.nodeName !== '#text'){
                                                        l = l.lastChild;
                                                    }
                                                    t.parent.formatter.editorManager.nodeSelection.setCursorPoint(t.parent.contentModule.getDocument(), l, 0);
                                                    k = true;
                                                } else {
                                                    t.insertBRElement();
                                                }
                                            }
                                        } else {
                                            t.insertBRElement();
                                        }
                                        e.args.preventDefault();
                                    }
                                    t.parent.trigger(o.i8, {
                                        requestType: a ? 'ShiftEnterAction' : 'EnterAction',
                                        args: e.args
                                    });
                                }
                            });
                        }
                    }
                };
                e.prototype.removeBRElement = function(e) {
                    if (r.AR.userAgent.indexOf('Firefox') != -1 && this.range.endOffset === e.textContent.length && (e.textContent.length !== 0 || e.querySelectorAll('BR').length > 1) && !(0, r.le)(e.lastChild) && e.lastChild.nodeName === 'BR') {
                        (0, r.og)(e.lastChild);
                    }
                };
                e.prototype.insertBRElement = function() {
                    var e = false;
                    var t = this.parent.createElement('br');
                    if (this.startNode.nodeName === 'BR' && this.endNode.nodeName === 'BR' && this.range.startOffset === 0 && this.range.startOffset === this.range.endOffset) {
                        this.parent.formatter.editorManager.domNode.insertAfter(t, this.startNode);
                        e = true;
                    } else {
                        if (this.startNode === this.parent.inputElement && !(0, r.le)(this.range.startContainer.previousSibling) && this.range.startContainer.previousSibling.nodeName === 'BR' && this.range.startContainer.textContent.length === 0) {
                            e = true;
                        }
                        this.range.insertNode(t);
                    }
                    if (e || (!(0, r.le)(t.nextElementSibling) && t.nextElementSibling.tagName === 'BR') || (!(0, r.le)(t.nextSibling) && t.nextSibling.textContent.length > 0)) {
                        this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), !(0, r.le)(t.nextSibling) ? t.nextSibling : t, 0);
                        e = false;
                    } else {
                        var i = this.parent.createElement('br');
                        this.range.insertNode(i);
                        this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), t, 0);
                    }
                };
                e.prototype.insertFocusContent = function() {
                    if (this.range.startContainer.textContent.length === 0) {
                        if (this.range.startContainer.nodeName === '#text') {
                            this.range.startContainer.parentElement.innerHTML = '&#8203;';
                        } else {
                            this.range.startContainer.innerHTML = '&#8203;';
                        }
                    }
                };
                e.prototype.createInsertElement = function(e) {
                    var t;
                    if ((this.parent.enterKey === 'DIV' && !e) || (this.parent.shiftEnterKey === 'DIV' && e)) {
                        t = this.parent.createElement('div');
                    } else if ((this.parent.enterKey === 'P' && !e) || (this.parent.shiftEnterKey === 'P' && e)) {
                        t = this.parent.createElement('p');
                    }
                    return t;
                };
                return e;
            }());
            var ey = i(5932);
            var eC = i(78);
            ;
            var eE = [
                'north-west',
                'north',
                'north-east',
                'west',
                'east',
                'south-west',
                'south',
                'south-east'
            ];
            var eS = 'e-resize-handle';
            var ew = 'e-focused-handle';
            var eT = 'e-dlg-resizable';
            var ek = [
                'e-restrict-left'
            ];
            var ex = 'e-resize-viewport';
            var eL = [
                'north',
                'west',
                'east',
                'south'
            ];
            var eN;
            var eD;
            var eO = 0;
            var eA = 0;
            var eP = 0;
            var eM = 0;
            var eR = 0;
            var eB = 0;
            var eI;
            var eH;
            var eF;
            var ej;
            var ez;
            var eq = null;
            var eV = null;
            var e_ = null;
            var eU;
            var eW = true;
            var eZ = 0;
            var eY = true;
            var eX;
            function eG(e) {
                eq = e.resizeBegin;
                eV = e.resizing;
                e_ = e.resizeComplete;
                eN = eJ(e.element);
                ez = eJ(e.boundary);
                var t = e.direction.split(' ');
                for(var i = 0; i < t.length; i++){
                    if (eL.indexOf(t[i]) >= 0 && t[i]) {
                        eK(t[i]);
                    } else if (t[i].trim() !== '') {
                        var n = (0, r.az)('div', {
                            className: 'e-icons ' + eS + ' ' + 'e-' + t[i]
                        });
                        eN.appendChild(n);
                    }
                }
                eI = e.minHeight;
                eF = e.minWidth;
                ej = e.maxWidth;
                eH = e.maxHeight;
                if (e.proxy && e.proxy.element && e.proxy.element.classList.contains('e-dialog')) {
                    e$(e.proxy);
                } else {
                    e$();
                }
            }
            function eK(e) {
                e3();
                var t = (0, r.az)('span', {
                    attrs: {
                        'unselectable': 'on',
                        'contenteditable': 'false'
                    }
                });
                t.setAttribute('class', 'e-dialog-border-resize e-' + e);
                if (e === 'south') {
                    t.style.height = '2px';
                    t.style.width = '100%';
                    t.style.bottom = '0px';
                    t.style.left = '0px';
                }
                if (e === 'north') {
                    t.style.height = '2px';
                    t.style.width = '100%';
                    t.style.top = '0px';
                    t.style.left = '0px';
                }
                if (e === 'east') {
                    t.style.height = '100%';
                    t.style.width = '2px';
                    t.style.right = '0px';
                    t.style.top = '0px';
                }
                if (e === 'west') {
                    t.style.height = '100%';
                    t.style.width = '2px';
                    t.style.left = '0px';
                    t.style.top = '0px';
                }
                eN.appendChild(t);
            }
            function eJ(e) {
                var t;
                if (!(0, r.le)(e)) {
                    if (typeof (e) === 'string') {
                        t = document.querySelector(e);
                    } else {
                        t = e;
                    }
                }
                return t;
            }
            function e$(e) {
                if ((0, r.le)(e)) {
                    e = this;
                }
                var t = eN.querySelectorAll('.' + eS);
                for(var i = 0; i < t.length; i++){
                    eD = t[i];
                    r.bi.add(eD, 'mousedown', e0, e);
                    var n = (r.AR.info.name === 'msie') ? 'pointerdown' : 'touchstart';
                    r.bi.add(eD, n, e2, e);
                }
                var s = eN.querySelectorAll('.e-dialog-border-resize');
                if (!(0, r.le)(s)) {
                    for(var i = 0; i < s.length; i++){
                        eD = s[i];
                        r.bi.add(eD, 'mousedown', e0, e);
                        var n = (r.AR.info.name === 'msie') ? 'pointerdown' : 'touchstart';
                        r.bi.add(eD, n, e2, e);
                    }
                }
            }
            function eQ(e) {
                return (e.indexOf('mouse') > -1) ? 'mouse' : 'touch';
            }
            function e0(e) {
                e.preventDefault();
                eN = e.target.parentElement;
                e3();
                eR = e.pageX;
                eB = e.pageY;
                e.target.classList.add(ew);
                if (!(0, r.le)(eq)) {
                    eX = this;
                    if (eq(e, eX) === true) {
                        return;
                    }
                }
                if (this.targetEle && eN && eN.querySelector('.' + eT)) {
                    ez = this.target === 'body' || 'document.body' || 0 ? null : 0;
                    ej = this.targetEle.clientWidth;
                    eH = this.targetEle.clientHeight;
                }
                var t = ((0, r.le)(ez)) ? document : ez;
                r.bi.add(t, 'mousemove', e4, this);
                r.bi.add(document, 'mouseup', e1, this);
                for(var i = 0; i < ek.length; i++){
                    if (eN.classList.contains(ek[i])) {
                        eW = false;
                    } else {
                        eW = true;
                    }
                }
            }
            function e1(e) {
                var t = (r.AR.info.name === 'msie') ? 'pointermove' : 'touchmove';
                var i = (r.AR.info.name === 'msie') ? 'pointerup' : 'touchend';
                var n = ((0, r.le)(ez)) ? document : ez;
                var s = (r.AR.info.name === 'msie') ? 'pointerdown' : 'touchstart';
                r.bi.remove(n, 'mousemove', e4);
                r.bi.remove(n, t, e4);
                r.bi.remove(n, s, e4);
                if (!(0, r.le)(document.body.querySelector('.' + ew))) {
                    document.body.querySelector('.' + ew).classList.remove(ew);
                }
                if (!(0, r.le)(e_)) {
                    eX = this;
                    e_(e, eX);
                }
                r.bi.remove(document, 'mouseup', e1);
                r.bi.remove(document, i, e1);
            }
            function e3() {
                eO = parseFloat(getComputedStyle(eN, null).getPropertyValue('width').replace('px', ''));
                eA = parseFloat(getComputedStyle(eN, null).getPropertyValue('height').replace('px', ''));
                eP = eN.getBoundingClientRect().left;
                eM = eN.getBoundingClientRect().top;
            }
            function e2(e) {
                eN = e.target.parentElement;
                e3();
                var t = e.touches ? e.changedTouches[0] : e;
                eR = t.pageX;
                eB = t.pageY;
                if (!(0, r.le)(eq)) {
                    eX = this;
                    if (eq(e, eX) === true) {
                        return;
                    }
                }
                var i = (r.AR.info.name === 'msie') ? 'pointermove' : 'touchmove';
                var n = (r.AR.info.name === 'msie') ? 'pointerup' : 'touchend';
                var s = ((0, r.le)(ez)) ? document : ez;
                r.bi.add(s, i, e4, this);
                r.bi.add(document, n, e1);
            }
            function e4(e) {
                if (e.target.classList.contains(eS) && e.target.classList.contains(ew)) {
                    eD = e.target;
                } else if (!(0, r.le)(document.body.querySelector('.' + ew))) {
                    eD = document.body.querySelector('.' + ew);
                }
                if (!(0, r.le)(eD)) {
                    var t = '';
                    for(var i = 0; i < eE.length; i++){
                        if (eD.classList.contains('e-' + eE[i])) {
                            t = eE[i];
                        }
                    }
                    if (!(0, r.le)(eV)) {
                        eX = this;
                        eV(e, eX);
                    }
                    switch(t){
                        case 'south':
                            e7(e);
                            break;
                        case 'north':
                            e9(e);
                            break;
                        case 'west':
                            e6(e);
                            break;
                        case 'east':
                            e8(e);
                            break;
                        case 'south-east':
                            e7(e);
                            e8(e);
                            break;
                        case 'south-west':
                            e7(e);
                            e6(e);
                            break;
                        case 'north-east':
                            e9(e);
                            e8(e);
                            break;
                        case 'north-west':
                            e9(e);
                            e6(e);
                            break;
                        default:
                            break;
                    }
                }
            }
            function e5(e) {
                return e.getBoundingClientRect();
            }
            function e7(e) {
                var t = document.documentElement.clientHeight;
                var i = false;
                var n = e.touches ? e.changedTouches[0] : e;
                var s = n.pageY;
                var o = e5(eN);
                var a;
                if (!(0, r.le)(ez)) {
                    a = e5(ez);
                }
                if (!(0, r.le)(ez)) {
                    i = true;
                } else if ((0, r.le)(ez) && ((t - s) >= 0 || (o.top < 0))) {
                    i = true;
                }
                var l = eA + (s - eB);
                l = (l > eI) ? l : eI;
                var h = 0;
                if (!(0, r.le)(ez)) {
                    h = a.top;
                }
                var c = (0, r.le)(ez) ? 0 : ez.offsetHeight - ez.clientHeight;
                var d = (o.top - h) - (c / 2);
                d = (d < 0) ? 0 : d;
                if (o.top > 0 && (d + l) > eH) {
                    i = false;
                    if (eN.classList.contains(ex)) {
                        return;
                    }
                    eN.style.height = (eH - parseInt(d.toString(), 10)) + 'px';
                    return;
                }
                var p = 0;
                if (i) {
                    if (o.top < 0 && (t + (o.height + o.top) > 0)) {
                        p = o.top;
                        if ((l + p) <= 30) {
                            l = (o.height - (o.height + o.top)) + 30;
                        }
                    }
                    if (((l + o.top) >= eH)) {
                        eN.style.height = o.height + (t - (o.height + o.top)) + 'px';
                    }
                    var u = ((0, r.le)(ez)) ? p : d;
                    if (l >= eI && ((l + u) <= eH)) {
                        eN.style.height = l + 'px';
                    }
                }
            }
            function e9(e) {
                var t = false;
                var i;
                var n = (eQ(e.type) === 'mouse') ? e.pageY : e.touches[0].pageY;
                var s = e5(eN);
                if (!(0, r.le)(ez)) {
                    i = e5(ez);
                }
                if (!(0, r.le)(ez) && (s.top - i.top) > 0) {
                    t = true;
                } else if ((0, r.le)(ez) && n > 0) {
                    t = true;
                }
                var o = eA - (n - eB);
                if (t) {
                    if (o >= eI && o <= eH) {
                        var a = 0;
                        if (!(0, r.le)(ez)) {
                            a = i.top;
                        }
                        var l = (eM - a) + (n - eB);
                        l = l > 0 ? l : 1;
                        eN.style.height = o + 'px';
                        eN.style.top = l + 'px';
                    }
                }
            }
            function e6(e) {
                var t = document.documentElement.clientWidth;
                var i = false;
                var n;
                if (!(0, r.le)(ez)) {
                    n = e5(ez);
                }
                var s = (eQ(e.type) === 'mouse') ? e.pageX : e.touches[0].pageX;
                var o = e5(eN);
                var a = (0, r.le)(ez) ? 0 : ez.offsetWidth - ez.clientWidth;
                var l = (0, r.le)(ez) ? 0 : n.left;
                var h = (0, r.le)(ez) ? 0 : n.width;
                if ((0, r.le)(eU)) {
                    if (!(0, r.le)(ez)) {
                        eU = (((o.left - l) - a / 2)) + o.width;
                        eU = eU + (h - a - eU);
                    } else {
                        eU = t;
                    }
                }
                if (!(0, r.le)(ez) && (Math.floor((o.left - n.left) + o.width + (n.right - o.right)) - a) <= ej) {
                    i = true;
                } else if ((0, r.le)(ez) && s >= 0) {
                    i = true;
                }
                var c = eO - (s - eR);
                if (eW) {
                    c = (c > eU) ? eU : c;
                }
                if (i) {
                    if (c >= eF && c <= ej) {
                        var d = 0;
                        if (!(0, r.le)(ez)) {
                            d = n.left;
                        }
                        var p = (eP - d) + (s - eR);
                        p = (p > 0) ? p : 1;
                        if (c !== eZ && eY) {
                            eN.style.width = c + 'px';
                        }
                        if (eW) {
                            eN.style.left = p + 'px';
                            if (p === 1) {
                                eY = false;
                            } else {
                                eY = true;
                            }
                        }
                    }
                }
                eZ = c;
            }
            function e8(e) {
                var t = document.documentElement.clientWidth;
                var i = false;
                var n;
                if (!(0, r.le)(ez)) {
                    n = e5(ez);
                }
                var s = e.touches ? e.changedTouches[0] : e;
                var o = s.pageX;
                var a = e5(eN);
                if (!(0, r.le)(ez) && (((a.left - n.left) + a.width) <= ej || (a.right - n.left) >= a.width)) {
                    i = true;
                } else if ((0, r.le)(ez) && (t - o) > 0) {
                    i = true;
                }
                var l = eO + (o - eR);
                var h = 0;
                if (!(0, r.le)(ez)) {
                    h = n.left;
                }
                if (((a.left - h) + l) > ej) {
                    i = false;
                    if (eN.classList.contains(ex)) {
                        return;
                    }
                    eN.style.width = ej - (a.left - h) + 'px';
                }
                if (i) {
                    if (l >= eF && l <= ej) {
                        eN.style.width = l + 'px';
                    }
                }
            }
            function te(e) {
                eI = e;
            }
            function tt(e) {
                ej = e;
            }
            function ti(e) {
                eH = e;
            }
            function tn() {
                var e = eN.querySelectorAll('.' + eS);
                for(var t = 0; t < e.length; t++){
                    (0, r.og)(e[t]);
                }
                var i = eN.querySelectorAll('.e-dialog-border-resize');
                if (!(0, r.le)(i)) {
                    for(var t = 0; t < i.length; t++){
                        (0, r.og)(i[t]);
                    }
                }
            }
            ;
            var tr = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var ts = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var to = (function(e) {
                tr(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                ts([
                    (0, r.Z9)(true)
                ], t.prototype, "isFlat", void 0);
                ts([
                    (0, r.Z9)()
                ], t.prototype, "buttonModel", void 0);
                ts([
                    (0, r.Z9)('Button')
                ], t.prototype, "type", void 0);
                ts([
                    (0, r.ju)()
                ], t.prototype, "click", void 0);
                return t;
            }(r.rt));
            var ta = (function(e) {
                tr(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                ts([
                    (0, r.Z9)('Fade')
                ], t.prototype, "effect", void 0);
                ts([
                    (0, r.Z9)(400)
                ], t.prototype, "duration", void 0);
                ts([
                    (0, r.Z9)(0)
                ], t.prototype, "delay", void 0);
                return t;
            }(r.rt));
            var tl = 'e-dialog';
            var th = 'e-rtl';
            var tc = 'e-dlg-header-content';
            var td = 'e-dlg-header';
            var tp = 'e-footer-content';
            var tu = 'e-dlg-modal';
            var tf = 'e-dlg-content';
            var tm = 'e-icon-dlg-close';
            var tv = 'e-dlg-overlay';
            var tg = 'e-dlg-target';
            var tb = 'e-dlg-container';
            var ty = 'e-scroll-disabled';
            var tC = 'e-primary';
            var tE = 'e-icons';
            var tS = 'e-popup';
            var tw = 'e-device';
            var tT = 'e-dlg-fullscreen';
            var tk = 'e-dlg-closeicon-btn';
            var tx = 'e-popup-close';
            var tL = 'e-popup-open';
            var tN = 'Information';
            var tD = 'e-scroll-disabled';
            var tO = 'e-alert-dialog';
            var tA = 'e-confirm-dialog';
            var tP = 'e-dlg-resizable';
            var tM = 'e-restrict-left';
            var tR = 'e-resize-viewport';
            var tB = 'e-dlg-ref-element';
            var tI = 'user action';
            var tH = 'close icon';
            var tF = 'escape';
            var tj = 'overlayClick';
            var tz = 'e-draggable';
            var tq = (function(e) {
                tr(t, e);
                function t(t, i) {
                    return e.call(this, t, i) || this;
                }
                t.prototype.render = function() {
                    this.initialize();
                    this.initRender();
                    this.wireEvents();
                    if (this.width === '100%') {
                        this.element.style.width = '';
                    }
                    if (this.minHeight !== '') {
                        this.element.style.minHeight = (0, r.Ac)(this.minHeight);
                    }
                    if (this.enableResize) {
                        this.setResize();
                        if (this.animationSettings.effect === 'None') {
                            this.getMinHeight();
                        }
                    }
                    this.renderComplete();
                };
                t.prototype.initializeValue = function() {
                    this.dlgClosedBy = tI;
                };
                t.prototype.preRender = function() {
                    var e = this;
                    this.initializeValue();
                    this.headerContent = null;
                    this.allowMaxHeight = true;
                    this.preventVisibility = true;
                    this.clonedEle = this.element.cloneNode(true);
                    this.closeIconClickEventHandler = function(t) {
                        e.dlgClosedBy = tH;
                        e.hide(t);
                    };
                    this.dlgOverlayClickEventHandler = function(t) {
                        e.dlgClosedBy = tj;
                        t.preventFocus = false;
                        e.trigger('overlayClick', t, function(t) {
                            if (!t.preventFocus) {
                                e.focusContent();
                            }
                            e.dlgClosedBy = tI;
                        });
                    };
                    var t = {
                        close: 'Close'
                    };
                    this.l10n = new r.E7('dialog', t, this.locale);
                    this.checkPositionData();
                    if ((0, r.le)(this.target)) {
                        var i = this.isProtectedOnChange;
                        this.isProtectedOnChange = true;
                        this.target = document.body;
                        this.isProtectedOnChange = i;
                    }
                };
                t.prototype.isNumberValue = function(e) {
                    var t = /^[-+]?\d*\.?\d+$/.test(e);
                    return t;
                };
                t.prototype.checkPositionData = function() {
                    if (!(0, r.le)(this.position)) {
                        if (!(0, r.le)(this.position.X) && (typeof (this.position.X) !== 'number')) {
                            var e = this.isNumberValue(this.position.X);
                            if (e) {
                                var t = this.isProtectedOnChange;
                                this.isProtectedOnChange = true;
                                this.position.X = parseFloat(this.position.X);
                                this.isProtectedOnChange = t;
                            }
                        }
                        if (!(0, r.le)(this.position.Y) && (typeof (this.position.Y) !== 'number')) {
                            var e = this.isNumberValue(this.position.Y);
                            if (e) {
                                var t = this.isProtectedOnChange;
                                this.isProtectedOnChange = true;
                                this.position.Y = parseFloat(this.position.Y);
                                this.isProtectedOnChange = t;
                            }
                        }
                    }
                };
                t.prototype.getEle = function(e, t) {
                    var i = undefined;
                    for(var n = 0; n < e.length; n++){
                        if (e[n].classList.contains(t)) {
                            i = e[n];
                            break;
                        }
                    }
                    return i;
                };
                t.prototype.getMinHeight = function() {
                    var e = '0px';
                    var t = '0px';
                    if (!(0, r.le)(this.element.querySelector('.' + tc))) {
                        e = getComputedStyle(this.headerContent).height;
                    }
                    var i = this.getEle(this.element.children, tp);
                    if (!(0, r.le)(i)) {
                        t = getComputedStyle(i).height;
                    }
                    var n = parseInt(e.slice(0, e.indexOf('p')), 10);
                    var s = parseInt(t.slice(0, t.indexOf('p')), 10);
                    te(n + 30 + (isNaN(s) ? 0 : s));
                    return (n + 30 + s);
                };
                t.prototype.onResizeStart = function(e, t) {
                    t.trigger('resizeStart', e);
                    return e.cancel;
                };
                t.prototype.onResizing = function(e, t) {
                    t.trigger('resizing', e);
                };
                t.prototype.onResizeComplete = function(e, t) {
                    t.trigger('resizeStop', e);
                };
                t.prototype.setResize = function() {
                    if (this.enableResize) {
                        if (this.isBlazorServerRender() && !(0, r.le)(this.element.querySelector('.e-icons.e-resize-handle'))) {
                            return;
                        }
                        this.element.classList.add(tP);
                        var e = getComputedStyle(this.element).minHeight;
                        var t = getComputedStyle(this.element).minWidth;
                        var i = '';
                        for(var n = 0; n < this.resizeHandles.length; n++){
                            if (this.resizeHandles[n] === 'All') {
                                i = 'south north east west north-east north-west south-east south-west';
                                break;
                            } else {
                                var s = '';
                                switch(this.resizeHandles[n].toString()){
                                    case 'SouthEast':
                                        s = 'south-east';
                                        break;
                                    case 'SouthWest':
                                        s = 'south-west';
                                        break;
                                    case 'NorthEast':
                                        s = 'north-east';
                                        break;
                                    case 'NorthWest':
                                        s = 'north-west';
                                        break;
                                    default:
                                        s = this.resizeHandles[n].toString();
                                        break;
                                }
                                i += s.toLocaleLowerCase() + ' ';
                            }
                        }
                        if (this.enableRtl && i.trim() === 'south-east') {
                            i = 'south-west';
                        } else if (this.enableRtl && i.trim() === 'south-west') {
                            i = 'south-east';
                        }
                        if (this.isModal && this.enableRtl) {
                            this.element.classList.add(tM);
                        } else if (this.isModal && this.target === document.body) {
                            this.element.classList.add(tR);
                        }
                        eG({
                            element: this.element,
                            direction: i,
                            minHeight: parseInt(e.slice(0, t.indexOf('p')), 10),
                            maxHeight: this.targetEle.clientHeight,
                            minWidth: parseInt(t.slice(0, t.indexOf('p')), 10),
                            maxWidth: this.targetEle.clientWidth,
                            boundary: this.target === document.body ? null : this.targetEle,
                            resizeBegin: this.onResizeStart.bind(this),
                            resizeComplete: this.onResizeComplete.bind(this),
                            resizing: this.onResizing.bind(this),
                            proxy: this
                        });
                        this.wireWindowResizeEvent();
                    } else {
                        tn();
                        this.unWireWindowResizeEvent();
                        if (this.isModal) {
                            this.element.classList.remove(tM);
                        } else {
                            this.element.classList.remove(tR);
                        }
                        this.element.classList.remove(tP);
                    }
                };
                t.prototype.getFocusElement = function(e) {
                    var t = 'input,select,textarea,button:enabled,a,[contenteditable="true"],[tabindex]';
                    var i = e.querySelectorAll(t);
                    return {
                        element: i[i.length - 1]
                    };
                };
                t.prototype.keyDown = function(e) {
                    var t = this;
                    if (e.keyCode === 9) {
                        if (this.isModal) {
                            var i = void 0;
                            if (!(0, r.le)(this.btnObj)) {
                                i = this.btnObj[this.btnObj.length - 1];
                            }
                            if (((0, r.le)(this.btnObj)) && (!(0, r.le)(this.ftrTemplateContent))) {
                                i = this.getFocusElement(this.ftrTemplateContent);
                            }
                            if ((0, r.le)(this.btnObj) && (0, r.le)(this.ftrTemplateContent) && !(0, r.le)(this.contentEle)) {
                                i = this.getFocusElement(this.contentEle);
                            }
                            if (!(0, r.le)(i) && document.activeElement === i.element && !e.shiftKey) {
                                e.preventDefault();
                                this.focusableElements(this.element).focus();
                            }
                            if (document.activeElement === this.focusableElements(this.element) && e.shiftKey) {
                                e.preventDefault();
                                if (!(0, r.le)(i)) {
                                    i.element.focus();
                                }
                            }
                        }
                    }
                    var n = document.activeElement;
                    var s = ([
                        'input',
                        'textarea'
                    ].indexOf(n.tagName.toLowerCase()) > -1);
                    var o = false;
                    if (!s) {
                        o = n.hasAttribute('contenteditable') && n.getAttribute('contenteditable') === 'true';
                    }
                    if (e.keyCode === 27 && this.closeOnEscape) {
                        this.dlgClosedBy = tF;
                        if (!document.querySelector('.e-popup-open:not(.e-dialog)')) {
                            this.hide(e);
                        }
                    }
                    if ((e.keyCode === 13 && !e.ctrlKey && n.tagName.toLowerCase() !== 'textarea' && s && !(0, r.le)(this.primaryButtonEle)) || (e.keyCode === 13 && e.ctrlKey && (n.tagName.toLowerCase() === 'textarea' || o)) && !(0, r.le)(this.primaryButtonEle)) {
                        var a;
                        var l = this.buttons.some(function(e, t) {
                            a = t;
                            var i = e.buttonModel;
                            return !(0, r.le)(i) && i.isPrimary === true;
                        });
                        if (l && typeof (this.buttons[a].click) === 'function') {
                            setTimeout(function() {
                                t.buttons[a].click.call(t, e);
                            });
                        }
                    }
                };
                t.prototype.initialize = function() {
                    if (!(0, r.le)(this.target)) {
                        this.targetEle = ((typeof this.target) === 'string') ? document.querySelector(this.target) : this.target;
                    }
                    if (!this.isBlazorServerRender()) {
                        (0, r.cn)([
                            this.element
                        ], tl);
                    }
                    if (r.AR.isDevice) {
                        (0, r.cn)([
                            this.element
                        ], tw);
                    }
                    if (!this.isBlazorServerRender()) {
                        this.setCSSClass();
                    }
                    this.setMaxHeight();
                };
                t.prototype.initRender = function() {
                    var e = this;
                    this.initialRender = true;
                    if (!this.isBlazorServerRender()) {
                        (0, r.Y4)(this.element, {
                            role: 'dialog'
                        });
                    }
                    if (this.zIndex === 1000) {
                        this.setzIndex(this.element, false);
                        this.calculatezIndex = true;
                    } else {
                        this.calculatezIndex = false;
                    }
                    if (this.isBlazorServerRender() && (0, r.le)(this.headerContent)) {
                        this.headerContent = this.element.getElementsByClassName('e-dlg-header-content')[0];
                    }
                    if (this.isBlazorServerRender() && (0, r.le)(this.contentEle)) {
                        this.contentEle = this.element.querySelector('#' + this.element.id + '_dialog-content');
                    }
                    if (!this.isBlazorServerRender()) {
                        this.setTargetContent();
                        if (this.header !== '' && !(0, r.le)(this.header)) {
                            this.setHeader();
                        }
                        this.renderCloseIcon();
                        this.setContent();
                        if (this.footerTemplate !== '' && !(0, r.le)(this.footerTemplate)) {
                            this.setFooterTemplate();
                        } else if (!(0, r.le)(this.buttons[0].buttonModel)) {
                            this.setButton();
                        }
                    }
                    if (this.isBlazorServerRender()) {
                        if (!(0, r.le)(this.buttons[0].buttonModel) && this.footerTemplate === '') {
                            this.setButton();
                        }
                    }
                    if (this.allowDragging && (!(0, r.le)(this.headerContent))) {
                        this.setAllowDragging();
                    }
                    if (!this.isBlazorServerRender()) {
                        (0, r.Y4)(this.element, {
                            'aria-modal': (this.isModal ? 'true' : 'false')
                        });
                        if (this.isModal) {
                            this.setIsModal();
                        }
                    }
                    if (this.isBlazorServerRender() && (0, r.le)(this.dlgContainer)) {
                        this.dlgContainer = this.element.parentElement;
                        for(var t = 0, i = this.dlgContainer.children; t < i.length; t++){
                            if (i[t].classList.contains('e-dlg-overlay')) {
                                this.dlgOverlay = i[t];
                            }
                        }
                    }
                    if (this.element.classList.contains(tO) !== true && this.element.classList.contains(tA) !== true && !(0, r.le)(this.element.parentElement)) {
                        var n = this.isModal ? this.dlgContainer.parentElement : this.element.parentElement;
                        this.refElement = this.createElement('div', {
                            className: tB
                        });
                        n.insertBefore(this.refElement, (this.isModal ? this.dlgContainer : this.element));
                    }
                    if (!(0, r.le)(this.targetEle)) {
                        this.isModal ? this.targetEle.appendChild(this.dlgContainer) : this.targetEle.appendChild(this.element);
                    }
                    this.popupObj = new s.GI(this.element, {
                        height: this.height,
                        width: this.width,
                        zIndex: this.zIndex,
                        relateTo: this.target,
                        actionOnScroll: 'none',
                        enableRtl: this.enableRtl,
                        open: function(t) {
                            var i = {
                                container: e.isModal ? e.dlgContainer : e.element,
                                element: e.element,
                                target: e.target,
                                preventFocus: false
                            };
                            if (e.enableResize) {
                                e.resetResizeIcon();
                            }
                            e.trigger('open', i, function(t) {
                                if (!t.preventFocus) {
                                    e.focusContent();
                                }
                            });
                        },
                        close: function(t) {
                            if (e.isModal) {
                                (0, r.cn)([
                                    e.dlgOverlay
                                ], 'e-fade');
                            }
                            e.unBindEvent(e.element);
                            if (e.isModal) {
                                e.dlgContainer.style.display = 'none';
                            }
                            e.trigger('close', e.closeArgs);
                            var i = document.activeElement;
                            if (!(0, r.le)(i) && !(0, r.le)((i).blur)) {
                                i.blur();
                            }
                            if (!(0, r.le)(e.storeActiveElement) && !(0, r.le)(e.storeActiveElement.focus)) {
                                e.storeActiveElement.focus();
                            }
                        }
                    });
                    this.positionChange();
                    this.setEnableRTL();
                    if (!this.isBlazorServerRender()) {
                        (0, r.cn)([
                            this.element
                        ], tx);
                        if (this.isModal) {
                            this.setOverlayZindex();
                        }
                    }
                    if (this.visible) {
                        this.show();
                    } else {
                        if (this.isModal) {
                            this.dlgOverlay.style.display = 'none';
                        }
                    }
                    this.initialRender = false;
                };
                t.prototype.resetResizeIcon = function() {
                    var e = this.getMinHeight();
                    if (this.targetEle.offsetHeight < e) {
                        var t = this.enableRtl ? 'e-south-west' : 'e-south-east';
                        var i = this.element.querySelector('.' + t);
                        if (!(0, r.le)(i)) {
                            i.style.bottom = '-' + e.toString() + 'px';
                        }
                    }
                };
                t.prototype.setOverlayZindex = function(e) {
                    var t;
                    if ((0, r.le)(e)) {
                        t = parseInt(this.element.style.zIndex, 10) ? parseInt(this.element.style.zIndex, 10) : this.zIndex;
                    } else {
                        t = e;
                    }
                    this.dlgOverlay.style.zIndex = (t - 1).toString();
                    this.dlgContainer.style.zIndex = t.toString();
                };
                t.prototype.positionChange = function() {
                    if (this.isModal) {
                        if (!isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {
                            this.setPopupPosition();
                        } else if ((!isNaN(parseFloat(this.position.X)) && isNaN(parseFloat(this.position.Y))) || (isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y)))) {
                            this.setPopupPosition();
                        } else {
                            this.element.style.top = '0px';
                            this.element.style.left = '0px';
                            this.dlgContainer.classList.add('e-dlg-' + this.position.X + '-' + this.position.Y);
                        }
                    } else {
                        this.setPopupPosition();
                    }
                };
                t.prototype.setPopupPosition = function() {
                    this.popupObj.setProperties({
                        position: {
                            X: this.position.X,
                            Y: this.position.Y
                        }
                    });
                };
                t.prototype.setAllowDragging = function() {
                    var e = this;
                    var t = '.' + tc;
                    if (!this.element.classList.contains(tz)) {
                        this.dragObj = new r._l(this.element, {
                            clone: false,
                            isDragScroll: true,
                            abort: '.e-dlg-closeicon-btn',
                            handle: t,
                            dragStart: function(t) {
                                e.trigger('dragStart', t, function(e) {
                                    if ((0, r.xr)()) {
                                        e.bindEvents(t.dragElement);
                                    }
                                });
                            },
                            dragStop: function(t) {
                                if (e.isModal) {
                                    if (!(0, r.le)(e.position)) {
                                        e.dlgContainer.classList.remove('e-dlg-' + e.position.X + '-' + e.position.Y);
                                    }
                                    e.element.style.position = 'relative';
                                }
                                e.trigger('dragStop', t);
                                e.element.classList.remove(tM);
                            },
                            drag: function(t) {
                                e.trigger('drag', t);
                            }
                        });
                        if (!(0, r.le)(this.targetEle)) {
                            this.dragObj.dragArea = this.targetEle;
                        }
                    }
                };
                t.prototype.setButton = function() {
                    if (!this.isBlazorServerRender()) {
                        this.buttonContent = [];
                        this.btnObj = [];
                        var e = true;
                        for(var t = 0; t < this.buttons.length; t++){
                            var i = !(0, r.le)(this.buttons[t].type) ? this.buttons[t].type.toLowerCase() : 'button';
                            var n = this.createElement('button', {
                                attrs: {
                                    type: i
                                }
                            });
                            this.buttonContent.push(n.outerHTML);
                        }
                        this.setFooterTemplate();
                    }
                    var s;
                    for(var t = 0, o = this.element.children; t < o.length; t++){
                        if (o[t].classList.contains(tp)) {
                            s = o[t].querySelectorAll('button');
                        }
                    }
                    for(var t = 0; t < this.buttons.length; t++){
                        if (!this.isBlazorServerRender()) {
                            this.btnObj[t] = new eC.z(this.buttons[t].buttonModel);
                        }
                        if (this.isBlazorServerRender()) {
                            this.ftrTemplateContent = this.element.querySelector('.' + tp);
                        }
                        if (!(0, r.le)(this.ftrTemplateContent) && s.length > 0) {
                            if (typeof (this.buttons[t].click) === 'function') {
                                r.bi.add(s[t], 'click', this.buttons[t].click, this);
                            }
                            if (typeof (this.buttons[t].click) === 'object') {
                                r.bi.add(s[t], 'click', this.buttonClickHandler.bind(this, t), this);
                            }
                        }
                        if (!this.isBlazorServerRender() && !(0, r.le)(this.ftrTemplateContent)) {
                            this.btnObj[t].appendTo(this.ftrTemplateContent.children[t]);
                            if (this.buttons[t].isFlat) {
                                this.btnObj[t].element.classList.add('e-flat');
                            }
                            this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];
                        }
                    }
                };
                t.prototype.buttonClickHandler = function(e) {
                    this.trigger('buttons[' + e + '].click', {});
                };
                t.prototype.setContent = function() {
                    (0, r.Y4)(this.element, {
                        'aria-describedby': this.element.id + '_dialog-content'
                    });
                    this.contentEle = this.createElement('div', {
                        className: tf,
                        id: this.element.id + '_dialog-content'
                    });
                    if (this.innerContentElement) {
                        this.contentEle.appendChild(this.innerContentElement);
                    } else if (!(0, r.le)(this.content) && this.content !== '' || !this.initialRender) {
                        var e = Object.keys(window);
                        if (typeof (this.content) === 'string' && !(0, r.xr)()) {
                            this.setTemplate(this.content, this.contentEle, 'content');
                        } else if (this.content instanceof HTMLElement) {
                            this.contentEle.appendChild(this.content);
                        } else {
                            this.setTemplate(this.content, this.contentEle, 'content');
                        }
                    }
                    if (!(0, r.le)(this.headerContent)) {
                        this.element.insertBefore(this.contentEle, this.element.children[1]);
                    } else {
                        this.element.insertBefore(this.contentEle, this.element.children[0]);
                    }
                    if (this.height === 'auto') {
                        if (!this.isBlazorServerRender() && r.AR.isIE && this.element.style.width === '' && !(0, r.le)(this.width)) {
                            this.element.style.width = (0, r.Ac)(this.width);
                        }
                        this.setMaxHeight();
                    }
                };
                t.prototype.setTemplate = function(e, t, i) {
                    var n;
                    var s;
                    var o = Object.keys(window);
                    if (t.classList.contains(td)) {
                        s = this.element.id + 'header';
                    } else if (t.classList.contains(tp)) {
                        s = this.element.id + 'footerTemplate';
                    } else {
                        s = this.element.id + 'content';
                    }
                    var a;
                    if (!(0, r.le)(e.outerHTML)) {
                        t.appendChild(e);
                    } else if ((typeof e === 'string') || (typeof e !== 'string') || ((0, r.xr)() && !this.isStringTemplate)) {
                        if ((typeof e === 'string')) {
                            e = this.sanitizeHelper(e);
                        }
                        if (this.isVue || typeof e !== 'string') {
                            n = (0, r.MY)(e);
                            a = e;
                        } else {
                            t.innerHTML = e;
                        }
                    }
                    var l = [];
                    if (!(0, r.le)(n)) {
                        var h = ((0, r.xr)() && !this.isStringTemplate && (a).indexOf('<div>Blazor') === 0) ? this.isStringTemplate : true;
                        for(var c = 0, d = n({}, this, i, s, h); c < d.length; c++){
                            var p = d[c];
                            l.push(p);
                        }
                        (0, r.R3)([].slice.call(l), t);
                    }
                };
                t.prototype.sanitizeHelper = function(e) {
                    if (this.enableHtmlSanitizer) {
                        var t = r.pJ.beforeSanitize();
                        var i = {
                            cancel: false,
                            helper: null
                        };
                        (0, r.l7)(t, t, i);
                        this.trigger('beforeSanitizeHtml', t);
                        if (t.cancel && !(0, r.le)(t.helper)) {
                            e = t.helper(e);
                        } else if (!t.cancel) {
                            e = r.pJ.serializeValue(t, e);
                        }
                    }
                    return e;
                };
                t.prototype.setMaxHeight = function() {
                    if (!this.allowMaxHeight) {
                        return;
                    }
                    var e = this.element.style.display;
                    this.element.style.display = 'none';
                    this.element.style.maxHeight = (!(0, r.le)(this.target)) && (this.targetEle.offsetHeight < window.innerHeight) ? (this.targetEle.offsetHeight - 20) + 'px' : (window.innerHeight - 20) + 'px';
                    this.element.style.display = e;
                    if (r.AR.isIE && this.height === 'auto' && !(0, r.le)(this.contentEle) && this.element.offsetHeight < this.contentEle.offsetHeight) {
                        this.element.style.height = 'inherit';
                    }
                };
                t.prototype.setEnableRTL = function() {
                    if (!this.isBlazorServerRender()) {
                        this.enableRtl ? (0, r.cn)([
                            this.element
                        ], th) : (0, r.IV)([
                            this.element
                        ], th);
                    }
                    if (!(0, r.le)(this.element.querySelector('.e-resize-handle'))) {
                        tn();
                        this.setResize();
                    }
                };
                t.prototype.setTargetContent = function() {
                    var e = this;
                    if ((0, r.le)(this.content) || this.content === '') {
                        var t = this.element.innerHTML.replace(/\s|<(\/?|\/?)(!--!--)>/g, '') !== '';
                        if (this.element.children.length > 0 || t) {
                            this.innerContentElement = document.createDocumentFragment();
                            [].slice.call(this.element.childNodes).forEach(function(t) {
                                if (t.nodeType !== 8) {
                                    e.innerContentElement.appendChild(t);
                                }
                            });
                        }
                    }
                };
                t.prototype.setHeader = function() {
                    if (this.headerEle) {
                        this.headerEle.innerHTML = '';
                    } else {
                        this.headerEle = this.createElement('div', {
                            id: this.element.id + '_title',
                            className: td
                        });
                    }
                    this.createHeaderContent();
                    this.headerContent.appendChild(this.headerEle);
                    this.setTemplate(this.header, this.headerEle, 'header');
                    (0, r.Y4)(this.element, {
                        'aria-labelledby': this.element.id
                    });
                    this.element.insertBefore(this.headerContent, this.element.children[0]);
                    if (this.allowDragging && (!(0, r.le)(this.headerContent))) {
                        this.setAllowDragging();
                    }
                };
                t.prototype.setFooterTemplate = function() {
                    if (this.ftrTemplateContent) {
                        this.ftrTemplateContent.innerHTML = '';
                    } else {
                        this.ftrTemplateContent = this.createElement('div', {
                            className: tp
                        });
                    }
                    if (this.footerTemplate !== '' && !(0, r.le)(this.footerTemplate)) {
                        this.setTemplate(this.footerTemplate, this.ftrTemplateContent, 'footerTemplate');
                    } else {
                        this.ftrTemplateContent.innerHTML = this.buttonContent.join('');
                    }
                    this.element.appendChild(this.ftrTemplateContent);
                };
                t.prototype.createHeaderContent = function() {
                    if ((0, r.le)(this.headerContent)) {
                        this.headerContent = this.createElement('div', {
                            id: this.element.id + '_dialog-header',
                            className: tc
                        });
                    }
                };
                t.prototype.renderCloseIcon = function() {
                    if (this.showCloseIcon) {
                        this.closeIcon = this.createElement('button', {
                            className: tk,
                            attrs: {
                                type: 'button'
                            }
                        });
                        this.closeIconBtnObj = new eC.z({
                            cssClass: 'e-flat',
                            iconCss: tm + ' ' + tE
                        });
                        this.closeIconTitle();
                        if (!(0, r.le)(this.headerContent)) {
                            (0, r.Ce)([
                                this.closeIcon
                            ], this.headerContent);
                        } else {
                            this.createHeaderContent();
                            (0, r.Ce)([
                                this.closeIcon
                            ], this.headerContent);
                            this.element.insertBefore(this.headerContent, this.element.children[0]);
                        }
                        this.closeIconBtnObj.appendTo(this.closeIcon);
                    }
                };
                t.prototype.closeIconTitle = function() {
                    this.l10n.setLocale(this.locale);
                    var e = this.l10n.getConstant('close');
                    this.closeIcon.setAttribute('title', e);
                    this.closeIcon.setAttribute('aria-label', e);
                };
                t.prototype.setCSSClass = function(e) {
                    if (this.cssClass) {
                        (0, r.cn)([
                            this.element
                        ], this.cssClass.split(' '));
                    }
                    if (e) {
                        (0, r.IV)([
                            this.element
                        ], e.split(' '));
                    }
                };
                t.prototype.setIsModal = function() {
                    this.dlgContainer = this.createElement('div', {
                        className: tb
                    });
                    this.element.classList.remove(tL);
                    this.element.parentNode.insertBefore(this.dlgContainer, this.element);
                    this.dlgContainer.appendChild(this.element);
                    (0, r.cn)([
                        this.element
                    ], tu);
                    this.dlgOverlay = this.createElement('div', {
                        className: tv
                    });
                    this.dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
                    this.dlgContainer.appendChild(this.dlgOverlay);
                };
                t.prototype.getValidFocusNode = function(e) {
                    var t;
                    for(var i = 0; i < e.length; i++){
                        t = e[i];
                        if ((t.clientHeight > 0 || (t.tagName.toLowerCase() === 'a' && t.hasAttribute('href'))) && t.tabIndex > -1 && !t.disabled && !this.disableElement(t, '[disabled],[aria-disabled="true"],[type="hidden"]')) {
                            return t;
                        } else {
                            t = null;
                        }
                    }
                    return t;
                };
                t.prototype.focusableElements = function(e) {
                    if (!(0, r.le)(e)) {
                        var t = 'input,select,textarea,button,a,[contenteditable="true"],[tabindex]';
                        var i = e.querySelectorAll(t);
                        return this.getValidFocusNode(i);
                    }
                    return null;
                };
                t.prototype.getAutoFocusNode = function(e) {
                    var t = e.querySelector('.' + tk);
                    var i = '[autofocus]';
                    var n = e.querySelectorAll(i);
                    var s = this.getValidFocusNode(n);
                    if ((0, r.xr)()) {
                        this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];
                    }
                    if (!(0, r.le)(s)) {
                        t = s;
                    } else {
                        s = this.focusableElements(this.contentEle);
                        if (!(0, r.le)(s)) {
                            return t = s;
                        } else if (!(0, r.le)(this.primaryButtonEle)) {
                            return this.element.querySelector('.' + tC);
                        }
                    }
                    return t;
                };
                t.prototype.disableElement = function(e, t) {
                    var i = e ? e.matches || e.webkitMatchesSelector || e.msGetRegionContent : null;
                    if (i) {
                        for(; e; e = e.parentNode){
                            if (e instanceof Element && i.call(e, t)) {
                                return e;
                            }
                        }
                    }
                    return null;
                };
                t.prototype.focusContent = function() {
                    var e = this.getAutoFocusNode(this.element);
                    var t = !(0, r.le)(e) ? e : this.element;
                    var i = r.AR.userAgent;
                    if (i.indexOf('MSIE ') > 0 || i.indexOf('Trident/') > 0) {
                        this.element.focus();
                    }
                    t.focus();
                    this.bindEvent(this.element);
                };
                t.prototype.bindEvent = function(e) {
                    r.bi.add(e, 'keydown', this.keyDown, this);
                };
                t.prototype.unBindEvent = function(e) {
                    r.bi.remove(e, 'keydown', this.keyDown);
                };
                t.prototype.updateSanitizeContent = function() {
                    if (!this.isBlazorServerRender()) {
                        this.contentEle.innerHTML = this.sanitizeHelper(this.content);
                    }
                };
                t.prototype.isBlazorServerRender = function() {
                    return (0, r.xr)() && this.isServerRendered;
                };
                t.prototype.getModuleName = function() {
                    return 'dialog';
                };
                t.prototype.onPropertyChanged = function(e, t) {
                    if (!this.element.classList.contains(tl)) {
                        return;
                    }
                    for(var i = 0, n = Object.keys(e); i < n.length; i++){
                        var s = n[i];
                        switch(s){
                            case 'content':
                                if (!(0, r.le)(this.content) && this.content !== '') {
                                    if (this.isBlazorServerRender()) {
                                        this.contentEle = this.element.querySelector('.e-dlg-content');
                                    }
                                    if (!(0, r.le)(this.contentEle) && this.contentEle.getAttribute('role') !== 'dialog') {
                                        if (!this.isBlazorServerRender()) {
                                            this.contentEle.innerHTML = '';
                                        }
                                        if (typeof (this.content) === 'function') {
                                            this.clearTemplate([
                                                'content'
                                            ]);
                                            (0, r.og)(this.contentEle);
                                            this.contentEle = null;
                                            this.setContent();
                                        } else {
                                            typeof (this.content) === 'string' ? (this.isBlazorServerRender() && (this.contentEle.innerText === '')) ? this.contentEle.insertAdjacentHTML('beforeend', this.sanitizeHelper(this.content)) : this.updateSanitizeContent() : this.contentEle.appendChild(this.content);
                                        }
                                        this.setMaxHeight();
                                    } else {
                                        if (!this.isBlazorServerRender() || (0, r.le)(this.element.querySelector('.e-dlg-content'))) {
                                            this.setContent();
                                        }
                                    }
                                } else if (!(0, r.le)(this.contentEle)) {
                                    (0, r.og)(this.contentEle);
                                    this.contentEle = null;
                                }
                                break;
                            case 'header':
                                if (this.header === '' || (0, r.le)(this.header)) {
                                    if (this.headerEle) {
                                        (0, r.og)(this.headerEle);
                                        this.headerEle = null;
                                    }
                                } else {
                                    if (!this.isBlazorServerRender() || (0, r.le)(this.element.querySelector('.e-dlg-header-content'))) {
                                        this.setHeader();
                                    }
                                }
                                break;
                            case 'footerTemplate':
                                if (this.footerTemplate === '' || (0, r.le)(this.footerTemplate)) {
                                    if (!this.ftrTemplateContent) {
                                        return;
                                    }
                                    (0, r.og)(this.ftrTemplateContent);
                                    this.ftrTemplateContent = null;
                                    this.buttons = [
                                        {}
                                    ];
                                } else {
                                    if (!this.isBlazorServerRender() || (0, r.le)(this.element.querySelector('.e-footer-content'))) {
                                        this.setFooterTemplate();
                                    }
                                    this.buttons = [
                                        {}
                                    ];
                                }
                                break;
                            case 'showCloseIcon':
                                if (this.element.getElementsByClassName(tm).length > 0) {
                                    if (!this.showCloseIcon && (this.header === '' || (0, r.le)(this.header))) {
                                        (0, r.og)(this.headerContent);
                                        this.headerContent = null;
                                    } else if (!this.showCloseIcon) {
                                        (0, r.og)(this.closeIcon);
                                    } else {
                                        if (this.isBlazorServerRender()) {
                                            this.wireEvents();
                                        }
                                    }
                                } else {
                                    if (!this.isBlazorServerRender()) {
                                        this.renderCloseIcon();
                                    }
                                    this.wireEvents();
                                }
                                break;
                            case 'locale':
                                if (this.showCloseIcon) {
                                    this.closeIconTitle();
                                }
                                break;
                            case 'visible':
                                this.visible ? this.show() : this.hide();
                                break;
                            case 'isModal':
                                this.updateIsModal();
                                break;
                            case 'height':
                                (0, r.V7)(this.element, {
                                    'height': (0, r.Ac)(e.height)
                                });
                                break;
                            case 'width':
                                (0, r.V7)(this.element, {
                                    'width': (0, r.Ac)(e.width)
                                });
                                break;
                            case 'zIndex':
                                this.popupObj.zIndex = this.zIndex;
                                if (this.isModal) {
                                    this.setOverlayZindex(this.zIndex);
                                }
                                if (this.element.style.zIndex !== this.zIndex.toString()) {
                                    this.calculatezIndex = false;
                                }
                                break;
                            case 'cssClass':
                                this.setCSSClass(t.cssClass);
                                break;
                            case 'buttons':
                                {
                                    var o = this.buttons.length;
                                    if (!(0, r.le)(this.ftrTemplateContent) && !this.isBlazorServerRender()) {
                                        (0, r.og)(this.ftrTemplateContent);
                                        this.ftrTemplateContent = null;
                                    }
                                    for(var a = 0; a < o; a++){
                                        if (!(0, r.le)(this.buttons[a].buttonModel)) {
                                            this.footerTemplate = '';
                                            this.setButton();
                                        }
                                    }
                                    break;
                                }
                            case 'allowDragging':
                                if (this.allowDragging && (!(0, r.le)(this.headerContent))) {
                                    this.setAllowDragging();
                                } else {
                                    this.dragObj.destroy();
                                }
                                break;
                            case 'target':
                                this.setTarget(e.target);
                                break;
                            case 'position':
                                this.checkPositionData();
                                if (this.isModal) {
                                    var l = (0, r.le)(t.position.X) ? this.position.X : t.position.X;
                                    var h = (0, r.le)(t.position.Y) ? this.position.Y : t.position.Y;
                                    if (this.dlgContainer.classList.contains('e-dlg-' + l + '-' + h)) {
                                        this.dlgContainer.classList.remove('e-dlg-' + l + '-' + h);
                                    }
                                }
                                this.positionChange();
                                break;
                            case 'enableRtl':
                                this.setEnableRTL();
                                break;
                            case 'enableResize':
                                this.setResize();
                                break;
                            case 'minHeight':
                                if (this.minHeight !== '') {
                                    this.element.style.minHeight = (0, r.Ac)(this.minHeight);
                                }
                                break;
                        }
                    }
                };
                t.prototype.setTarget = function(e) {
                    this.popupObj.relateTo = e;
                    this.target = e;
                    this.targetEle = ((typeof this.target) === 'string') ? document.querySelector(this.target) : this.target;
                    if (this.dragObj) {
                        this.dragObj.dragArea = this.targetEle;
                    }
                    this.setMaxHeight();
                    if (this.isModal) {
                        this.updateIsModal();
                    }
                    if (this.enableResize) {
                        this.setResize();
                    }
                };
                t.prototype.updateIsModal = function() {
                    this.element.setAttribute('aria-modal', this.isModal ? 'true' : 'false');
                    if (this.isModal) {
                        if ((0, r.le)(this.dlgOverlay)) {
                            this.setIsModal();
                            this.element.style.top = '0px';
                            this.element.style.left = '0px';
                            if (!(0, r.le)(this.targetEle)) {
                                this.targetEle.appendChild(this.dlgContainer);
                            }
                        }
                    } else {
                        (0, r.IV)([
                            this.element
                        ], tu);
                        (0, r.IV)([
                            document.body
                        ], [
                            tg,
                            ty
                        ]);
                        (0, r.og)(this.dlgOverlay);
                        while(this.dlgContainer.firstChild){
                            this.dlgContainer.parentElement.insertBefore(this.dlgContainer.firstChild, this.dlgContainer);
                        }
                        this.dlgContainer.parentElement.removeChild(this.dlgContainer);
                    }
                    if (this.visible) {
                        this.show();
                    }
                    this.positionChange();
                    if (this.isModal && this.dlgOverlay) {
                        r.bi.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);
                    }
                };
                t.prototype.setzIndex = function(e, t) {
                    var i = this.isProtectedOnChange;
                    this.isProtectedOnChange = true;
                    this.zIndex = (0, s.TE)(e);
                    this.isProtectedOnChange = i;
                    if (t) {
                        this.popupObj.zIndex = this.zIndex;
                    }
                };
                t.prototype.windowResizeHandler = function() {
                    tt(this.targetEle.clientWidth);
                    ti(this.targetEle.clientHeight);
                    this.setMaxHeight();
                };
                t.prototype.getPersistData = function() {
                    return this.addOnPersist([]);
                };
                t.prototype.destroy = function() {
                    if (this.isDestroyed) {
                        return;
                    }
                    var t = [
                        th,
                        tu,
                        tP,
                        tM,
                        tT,
                        tw
                    ];
                    var i = [
                        'role',
                        'aria-modal',
                        'aria-labelledby',
                        'aria-describedby',
                        'aria-grabbed',
                        'tabindex',
                        'style'
                    ];
                    (0, r.IV)([
                        this.targetEle
                    ], [
                        tg,
                        ty
                    ]);
                    if (!(0, r.le)(this.element) && this.element.classList.contains(tT)) {
                        (0, r.IV)([
                            document.body
                        ], [
                            tg,
                            ty
                        ]);
                    }
                    if (this.isModal) {
                        (0, r.IV)([
                            (!(0, r.le)(this.targetEle) ? this.targetEle : document.body)
                        ], ty);
                    }
                    this.unWireEvents();
                    if (!(0, r.le)(this.btnObj)) {
                        for(var n = 0; n < this.btnObj.length; n++){
                            this.btnObj[n].destroy();
                        }
                    }
                    if (!(0, r.le)(this.dragObj)) {
                        this.dragObj.destroy();
                    }
                    if (!(0, r.le)(this.popupObj.element) && this.popupObj.element.classList.contains(tS)) {
                        this.popupObj.destroy();
                    }
                    (0, r.IV)([
                        this.element
                    ], t);
                    if (!(0, r.le)(this.cssClass) && this.cssClass !== '') {
                        (0, r.IV)([
                            this.element
                        ], this.cssClass.split(' '));
                    }
                    if (!(0, r.le)(this.refElement) && !(0, r.le)(this.refElement.parentElement)) {
                        this.refElement.parentElement.insertBefore((this.isModal ? this.dlgContainer : this.element), this.refElement);
                        (0, r.og)(this.refElement);
                        this.refElement = undefined;
                    }
                    if (this.isModal && !this.isBlazorServerRender()) {
                        (0, r.og)(this.dlgOverlay);
                        this.dlgContainer.parentNode.insertBefore(this.element, this.dlgContainer);
                        (0, r.og)(this.dlgContainer);
                    }
                    if (!this.isBlazorServerRender()) {
                        this.element.innerHTML = this.clonedEle.innerHTML;
                    }
                    if (this.isBlazorServerRender()) {
                        if (!(0, r.le)(this.element.children)) {
                            for(var n = 0; n <= this.element.children.length; n++){
                                n = n - n;
                                (0, r.og)(this.element.children[n]);
                            }
                        }
                    }
                    for(var n = 0; n < i.length; n++){
                        this.element.removeAttribute(i[n]);
                    }
                    if (!this.isBlazorServerRender()) {
                        e.prototype.destroy.call(this);
                    } else {
                        this.isDestroyed = true;
                    }
                    if (this.isReact) {
                        this.clearTemplate();
                    }
                };
                t.prototype.wireWindowResizeEvent = function() {
                    window.addEventListener('resize', this.windowResizeHandler.bind(this));
                };
                t.prototype.unWireWindowResizeEvent = function() {
                    window.removeEventListener('resize', this.windowResizeHandler.bind(this));
                };
                t.prototype.wireEvents = function() {
                    if (this.isBlazorServerRender() && this.showCloseIcon) {
                        this.closeIcon = this.element.getElementsByClassName('e-dlg-closeicon-btn')[0];
                    }
                    if (this.showCloseIcon) {
                        r.bi.add(this.closeIcon, 'click', this.closeIconClickEventHandler, this);
                    }
                    if (this.isModal && this.dlgOverlay) {
                        r.bi.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);
                    }
                };
                t.prototype.unWireEvents = function() {
                    if (this.showCloseIcon) {
                        r.bi.remove(this.closeIcon, 'click', this.closeIconClickEventHandler);
                    }
                    if (this.isModal) {
                        r.bi.remove(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler);
                    }
                    if (this.buttons.length > 0 && !(0, r.le)(this.buttons[0].buttonModel) && this.footerTemplate === '') {
                        for(var e = 0; e < this.buttons.length; e++){
                            if (typeof (this.buttons[e].click) === 'function') {
                                r.bi.remove(this.ftrTemplateContent.children[e], 'click', this.buttons[e].click);
                            }
                        }
                    }
                };
                t.prototype.refreshPosition = function() {
                    this.popupObj.refreshPosition();
                };
                t.prototype.getDimension = function() {
                    var e = this.element.offsetWidth;
                    var t = this.element.offsetHeight;
                    return {
                        width: e,
                        height: t
                    };
                };
                t.prototype.show = function(e) {
                    var t = this;
                    if (!this.element.classList.contains(tl)) {
                        return;
                    }
                    if (!this.element.classList.contains(tL) || (!(0, r.le)(e))) {
                        if (!(0, r.le)(e)) {
                            this.fullScreen(e);
                        }
                        var i = (0, r.xr)() ? {
                            cancel: false,
                            element: this.element,
                            container: this.isModal ? this.dlgContainer : this.element,
                            maxHeight: this.element.style.maxHeight
                        } : {
                            cancel: false,
                            element: this.element,
                            container: this.isModal ? this.dlgContainer : this.element,
                            target: this.target,
                            maxHeight: this.element.style.maxHeight
                        };
                        this.trigger('beforeOpen', i, function(e) {
                            if (!e.cancel) {
                                if (t.element.style.maxHeight !== i.maxHeight) {
                                    t.allowMaxHeight = false;
                                    t.element.style.maxHeight = i.maxHeight;
                                }
                                t.storeActiveElement = document.activeElement;
                                t.element.tabIndex = -1;
                                if (t.isModal && (!(0, r.le)(t.dlgOverlay))) {
                                    t.dlgOverlay.style.display = 'block';
                                    t.dlgContainer.style.display = 'flex';
                                    (0, r.IV)([
                                        t.dlgOverlay
                                    ], 'e-fade');
                                    if (!(0, r.le)(t.targetEle)) {
                                        if (t.targetEle === document.body) {
                                            t.dlgContainer.style.position = 'fixed';
                                        } else {
                                            t.dlgContainer.style.position = 'absolute';
                                        }
                                        t.dlgOverlay.style.position = 'absolute';
                                        t.element.style.position = 'relative';
                                        (0, r.cn)([
                                            t.targetEle
                                        ], [
                                            tg,
                                            ty
                                        ]);
                                    } else {
                                        (0, r.cn)([
                                            document.body
                                        ], [
                                            tg,
                                            ty
                                        ]);
                                    }
                                }
                                var n = {
                                    name: t.animationSettings.effect + 'In',
                                    duration: t.animationSettings.duration,
                                    delay: t.animationSettings.delay
                                };
                                var s = (t.isModal) ? t.element.parentElement : t.element;
                                if (t.calculatezIndex) {
                                    t.setzIndex(s, true);
                                    (0, r.V7)(t.element, {
                                        'zIndex': t.zIndex
                                    });
                                    if (t.isModal) {
                                        t.setOverlayZindex(t.zIndex);
                                    }
                                }
                                t.animationSettings.effect === 'None' ? t.popupObj.show() : t.popupObj.show(n);
                                t.dialogOpen = true;
                                var o = t.isProtectedOnChange;
                                t.isProtectedOnChange = true;
                                t.visible = true;
                                t.preventVisibility = true;
                                t.isProtectedOnChange = o;
                            }
                        });
                    }
                    if (this.isReact) {
                        this.renderReactTemplates();
                    }
                };
                t.prototype.hide = function(e) {
                    var t = this;
                    if (!this.element.classList.contains(tl)) {
                        return;
                    }
                    if (this.preventVisibility) {
                        var i = (0, r.xr)() ? {
                            cancel: false,
                            isInteracted: e ? true : false,
                            element: this.element,
                            container: this.isModal ? this.dlgContainer : this.element,
                            event: e
                        } : {
                            cancel: false,
                            isInteracted: e ? true : false,
                            element: this.element,
                            target: this.target,
                            container: this.isModal ? this.dlgContainer : this.element,
                            event: e,
                            closedBy: this.dlgClosedBy
                        };
                        this.closeArgs = i;
                        this.trigger('beforeClose', i, function(e) {
                            if (!e.cancel) {
                                if (t.isModal) {
                                    if (!(0, r.le)(t.targetEle)) {
                                        (0, r.IV)([
                                            t.targetEle
                                        ], [
                                            tg,
                                            ty
                                        ]);
                                    }
                                }
                                if (document.body.classList.contains(tg) && document.body.classList.contains(ty)) {
                                    (0, r.IV)([
                                        document.body
                                    ], [
                                        tg,
                                        ty
                                    ]);
                                }
                                var i = {
                                    name: t.animationSettings.effect + 'Out',
                                    duration: t.animationSettings.duration,
                                    delay: t.animationSettings.delay
                                };
                                t.animationSettings.effect === 'None' ? t.popupObj.hide() : t.popupObj.hide(i);
                                t.dialogOpen = false;
                                var n = t.isProtectedOnChange;
                                t.isProtectedOnChange = true;
                                t.visible = false;
                                t.preventVisibility = false;
                                t.isProtectedOnChange = n;
                            }
                            t.dlgClosedBy = tI;
                        });
                    }
                };
                t.prototype.fullScreen = function(e) {
                    var t = this.element.offsetTop;
                    var i = this.element.offsetLeft;
                    if (e) {
                        this.element.style.top = document.scrollingElement.scrollTop + 'px';
                        (0, r.cn)([
                            this.element
                        ], tT);
                        var n = this.element.style.display;
                        this.element.style.display = 'none';
                        this.element.style.maxHeight = (!(0, r.le)(this.target)) ? (this.targetEle.offsetHeight) + 'px' : (window.innerHeight) + 'px';
                        this.element.style.display = n;
                        (0, r.cn)([
                            document.body
                        ], [
                            tg,
                            ty
                        ]);
                        if (this.allowDragging && !(0, r.le)(this.dragObj)) {
                            this.dragObj.destroy();
                        }
                    } else {
                        (0, r.IV)([
                            this.element
                        ], tT);
                        (0, r.IV)([
                            document.body
                        ], [
                            tg,
                            ty
                        ]);
                        if (this.allowDragging && (!(0, r.le)(this.headerContent))) {
                            this.setAllowDragging();
                        }
                    }
                    return e;
                };
                t.prototype.getButtons = function(e) {
                    if (!(0, r.le)(e)) {
                        return this.btnObj[e];
                    }
                    return this.btnObj;
                };
                ts([
                    (0, r.Z9)('')
                ], t.prototype, "content", void 0);
                ts([
                    (0, r.Z9)(true)
                ], t.prototype, "enableHtmlSanitizer", void 0);
                ts([
                    (0, r.Z9)(false)
                ], t.prototype, "showCloseIcon", void 0);
                ts([
                    (0, r.Z9)(false)
                ], t.prototype, "isModal", void 0);
                ts([
                    (0, r.Z9)('')
                ], t.prototype, "header", void 0);
                ts([
                    (0, r.Z9)(true)
                ], t.prototype, "visible", void 0);
                ts([
                    (0, r.Z9)(false)
                ], t.prototype, "enableResize", void 0);
                ts([
                    (0, r.Z9)([
                        'South-East'
                    ])
                ], t.prototype, "resizeHandles", void 0);
                ts([
                    (0, r.Z9)('auto')
                ], t.prototype, "height", void 0);
                ts([
                    (0, r.Z9)('')
                ], t.prototype, "minHeight", void 0);
                ts([
                    (0, r.Z9)('100%')
                ], t.prototype, "width", void 0);
                ts([
                    (0, r.Z9)('')
                ], t.prototype, "cssClass", void 0);
                ts([
                    (0, r.Z9)(1000)
                ], t.prototype, "zIndex", void 0);
                ts([
                    (0, r.Z9)(null)
                ], t.prototype, "target", void 0);
                ts([
                    (0, r.Z9)('')
                ], t.prototype, "footerTemplate", void 0);
                ts([
                    (0, r.Z9)(false)
                ], t.prototype, "allowDragging", void 0);
                ts([
                    (0, r.FE)([
                        {}
                    ], to)
                ], t.prototype, "buttons", void 0);
                ts([
                    (0, r.Z9)(true)
                ], t.prototype, "closeOnEscape", void 0);
                ts([
                    (0, r.Zz)({}, ta)
                ], t.prototype, "animationSettings", void 0);
                ts([
                    (0, r.Zz)({
                        X: 'center',
                        Y: 'center'
                    }, s.WV)
                ], t.prototype, "position", void 0);
                ts([
                    (0, r.ju)()
                ], t.prototype, "created", void 0);
                ts([
                    (0, r.ju)()
                ], t.prototype, "open", void 0);
                ts([
                    (0, r.ju)()
                ], t.prototype, "beforeSanitizeHtml", void 0);
                ts([
                    (0, r.ju)()
                ], t.prototype, "beforeOpen", void 0);
                ts([
                    (0, r.ju)()
                ], t.prototype, "close", void 0);
                ts([
                    (0, r.ju)()
                ], t.prototype, "beforeClose", void 0);
                ts([
                    (0, r.ju)()
                ], t.prototype, "dragStart", void 0);
                ts([
                    (0, r.ju)()
                ], t.prototype, "dragStop", void 0);
                ts([
                    (0, r.ju)()
                ], t.prototype, "drag", void 0);
                ts([
                    (0, r.ju)()
                ], t.prototype, "overlayClick", void 0);
                ts([
                    (0, r.ju)()
                ], t.prototype, "resizeStart", void 0);
                ts([
                    (0, r.ju)()
                ], t.prototype, "resizing", void 0);
                ts([
                    (0, r.ju)()
                ], t.prototype, "resizeStop", void 0);
                ts([
                    (0, r.ju)()
                ], t.prototype, "destroyed", void 0);
                t = ts([
                    r.Zl
                ], t);
                return t;
            }(r.wA));
            var tV;
            (function(e) {
                function t(e) {
                    var t;
                    var i = (0, r.az)('div', {
                        'className': tO
                    });
                    document.body.appendChild(i);
                    var o;
                    var a = [
                        {
                            buttonModel: {
                                isPrimary: true,
                                content: 'OK'
                            },
                            click: function() {
                                this.hide();
                            }
                        }
                    ];
                    if (typeof (e) === 'string') {
                        o = n({
                            content: e,
                            position: {
                                X: 'center',
                                Y: 'top'
                            },
                            isModal: true,
                            header: tN,
                            buttons: a
                        }, i);
                    } else {
                        o = n(s(e), i);
                    }
                    o.close = function() {
                        if (e && e.close) {
                            e.close.apply(o);
                        }
                        o.destroy();
                        if (o.element.classList.contains('e-dlg-modal')) {
                            o.element.parentElement.remove();
                            o.target.classList.remove(tD);
                        } else {
                            o.element.remove();
                        }
                    };
                    return o;
                }
                e.alert = t;
                function i(e) {
                    var t;
                    var i = (0, r.az)('div', {
                        'className': tA
                    });
                    document.body.appendChild(i);
                    var s;
                    var a = [
                        {
                            buttonModel: {
                                isPrimary: true,
                                content: 'OK'
                            },
                            click: function() {
                                this.hide();
                            }
                        },
                        {
                            buttonModel: {
                                content: 'Cancel'
                            },
                            click: function() {
                                this.hide();
                            }
                        }
                    ];
                    if (typeof (e) === 'string') {
                        s = n({
                            position: {
                                X: 'center',
                                Y: 'top'
                            },
                            content: e,
                            isModal: true,
                            header: tN,
                            buttons: a
                        }, i);
                    } else {
                        s = n(o(e), i);
                    }
                    s.close = function() {
                        if (e && e.close) {
                            e.close.apply(s);
                        }
                        s.destroy();
                        if (s.element.classList.contains('e-dlg-modal')) {
                            s.element.parentElement.remove();
                            s.target.classList.remove(tD);
                        } else {
                            s.element.remove();
                        }
                    };
                    return s;
                }
                e.confirm = i;
                function n(e, t) {
                    var i = new tq(e);
                    i.appendTo(t);
                    return i;
                }
                function s(e) {
                    var t = {};
                    t.buttons = [];
                    t = a(t, e);
                    t = l(t, e);
                    return t;
                }
                function o(e) {
                    var t = {};
                    t.buttons = [];
                    t = a(t, e);
                    t = h(t, e);
                    return t;
                }
                function a(e, t) {
                    e.header = !(0, r.le)(t.title) ? t.title : tN;
                    e.content = !(0, r.le)(t.content) ? t.content : '';
                    e.isModal = !(0, r.le)(t.isModal) ? t.isModal : true;
                    e.showCloseIcon = !(0, r.le)(t.showCloseIcon) ? t.showCloseIcon : false;
                    e.allowDragging = !(0, r.le)(t.isDraggable) ? t.isDraggable : false;
                    e.closeOnEscape = !(0, r.le)(t.closeOnEscape) ? t.closeOnEscape : false;
                    e.position = !(0, r.le)(t.position) ? t.position : {
                        X: 'center',
                        Y: 'top'
                    };
                    e.animationSettings = !(0, r.le)(t.animationSettings) ? t.animationSettings : {
                        effect: 'Fade',
                        duration: 400,
                        delay: 0
                    };
                    e.cssClass = !(0, r.le)(t.cssClass) ? t.cssClass : '';
                    e.zIndex = !(0, r.le)(t.zIndex) ? t.zIndex : 1000;
                    e.open = !(0, r.le)(t.open) ? t.open : null;
                    return e;
                }
                function l(e, t) {
                    var i = [
                        {
                            buttonModel: {
                                isPrimary: true,
                                content: 'OK'
                            },
                            click: function() {
                                this.hide();
                            }
                        }
                    ];
                    if (!(0, r.le)(t.okButton)) {
                        e.buttons[0] = c(e.buttons[0], t.okButton, i[0]);
                    } else {
                        e.buttons = i;
                    }
                    return e;
                }
                function h(e, t) {
                    var i = {
                        buttonModel: {
                            isPrimary: true,
                            content: 'OK'
                        },
                        click: function() {
                            this.hide();
                        }
                    };
                    var n = {
                        buttonModel: {
                            content: 'Cancel'
                        },
                        click: function() {
                            this.hide();
                        }
                    };
                    if (!(0, r.le)(t.okButton)) {
                        e.buttons[0] = c(e.buttons[0], t.okButton, i);
                    } else {
                        e.buttons[0] = i;
                    }
                    if (!(0, r.le)(t.cancelButton)) {
                        e.buttons[1] = c(e.buttons[1], t.cancelButton, n);
                    } else {
                        e.buttons[1] = n;
                    }
                    return e;
                }
                function c(e, t, i) {
                    var n = i;
                    if (!(0, r.le)(t.text)) {
                        n.buttonModel.content = t.text;
                    }
                    if (!(0, r.le)(t.icon)) {
                        n.buttonModel.iconCss = t.icon;
                    }
                    if (!(0, r.le)(t.cssClass)) {
                        n.buttonModel.cssClass = t.cssClass;
                    }
                    if (!(0, r.le)(t.click)) {
                        n.click = t.click;
                    }
                    return n;
                }
            })(tV || (tV = {}));
            ;
            var t_ = (function() {
                function e(e) {
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.parent.on(o.P0, this.moduleDestroy, this);
                    this.parent.on(o.ob, this.removeEventListener, this);
                };
                e.prototype.removeEventListener = function() {
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.parent.off(o.ob, this.removeEventListener);
                    this.parent.off(o.P0, this.moduleDestroy);
                };
                e.prototype.render = function(e) {
                    var t;
                    e.beforeOpen = this.beforeOpen.bind(this);
                    e.open = this.open.bind(this);
                    if ((0, r.le)(e.close)) {
                        e.close = this.close.bind(this);
                    }
                    e.beforeClose = this.beforeClose.bind(this);
                    t = new tq(e);
                    t.isStringTemplate = true;
                    return t;
                };
                e.prototype.beforeOpen = function(e) {
                    this.parent.trigger(o.Yb, e, this.beforeOpenCallback.bind(this, e));
                };
                e.prototype.beforeOpenCallback = function(e) {
                    if (e.cancel) {
                        this.parent.notify(o.zA, null);
                    }
                };
                e.prototype.open = function(e) {
                    this.parent.trigger(o.p0, e);
                };
                e.prototype.beforeClose = function(e) {
                    this.parent.trigger(o.mf, e, function(e) {
                        if (!e.cancel) {
                            if (e.container.classList.contains('e-popup-close')) {
                                e.cancel = true;
                            }
                        }
                    });
                };
                e.prototype.close = function(e) {
                    this.parent.trigger(o.z6, e);
                };
                e.prototype.moduleDestroy = function() {
                    this.parent = null;
                };
                return e;
            }());
            ;
            var tU = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var tW = (undefined && undefined.__assign) || function() {
                tW = Object.assign || function(e) {
                    for(var t, i = 1, n = arguments.length; i < n; i++){
                        t = arguments[i];
                        for(var r in t)if (Object.prototype.hasOwnProperty.call(t, r)) e[r] = t[r];
                    }
                    return e;
                };
                return tW.apply(this, arguments);
            };
            var tZ = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var tY = (function(e) {
                tU(t, e);
                function t(t, i) {
                    var n = e.call(this, t, i) || this;
                    n.needsID = true;
                    return n;
                }
                t.prototype.requiredModules = function() {
                    var e = [];
                    if (this.toolbarSettings.enable) {
                        e.push({
                            member: 'toolbar',
                            args: [
                                this,
                                this.serviceLocator
                            ]
                        });
                        e.push({
                            member: 'link',
                            args: [
                                this,
                                this.serviceLocator
                            ]
                        });
                        e.push({
                            member: 'table',
                            args: [
                                this,
                                this.serviceLocator
                            ]
                        });
                        e.push({
                            member: 'image',
                            args: [
                                this,
                                this.serviceLocator
                            ]
                        });
                        if (this.quickToolbarSettings.enable) {
                            e.push({
                                member: 'quickToolbar',
                                args: [
                                    this,
                                    this.serviceLocator
                                ]
                            });
                        }
                    }
                    if (this.showCharCount) {
                        e.push({
                            member: 'count',
                            args: [
                                this,
                                this.serviceLocator
                            ]
                        });
                    }
                    if (this.editorMode === 'Markdown') {
                        e.push({
                            member: 'markdownEditor',
                            args: [
                                this,
                                this.serviceLocator
                            ]
                        });
                    }
                    if (this.editorMode === 'HTML') {
                        e.push({
                            member: 'htmlEditor',
                            args: [
                                this,
                                this.serviceLocator
                            ]
                        });
                        e.push({
                            member: 'pasteCleanup',
                            args: [
                                this,
                                this.serviceLocator
                            ]
                        });
                    }
                    if (this.fileManagerSettings.enable) {
                        e.push({
                            member: 'fileManager',
                            args: [
                                this,
                                this.serviceLocator
                            ]
                        });
                    }
                    if (this.enableResize) {
                        e.push({
                            member: 'resize',
                            args: [
                                this
                            ]
                        });
                    }
                    return e;
                };
                t.prototype.updateEnable = function() {
                    if (this.enabled) {
                        (0, r.IV)([
                            this.element
                        ], a.xu);
                        this.element.setAttribute('aria-disabled', 'false');
                        if (!(0, r.le)(this.htmlAttributes.tabindex)) {
                            this.inputElement.setAttribute('tabindex', this.htmlAttributes.tabindex);
                        } else {
                            this.inputElement.setAttribute('tabindex', '0');
                        }
                    } else {
                        if (this.getToolbar()) {
                            (0, r.IV)(this.getToolbar().querySelectorAll('.' + a.XS), a.XS);
                            (0, r.IV)([
                                this.getToolbar()
                            ], [
                                a.to,
                                a.IW
                            ]);
                        }
                        (0, r.cn)([
                            this.element
                        ], a.xu);
                        this.element.tabIndex = -1;
                        this.element.setAttribute('aria-disabled', 'true');
                        this.inputElement.setAttribute('tabindex', '-1');
                    }
                };
                t.prototype.setEnable = function() {
                    this.updateEnable();
                    (this.enabled) ? this.eventInitializer() : this.unWireEvents();
                };
                t.prototype.initializeValue = function() {
                    this.isFocusOut = false;
                    this.isRTE = false;
                    this.isBlur = true;
                    this.defaultResetValue = null;
                    this.isResizeInitialized = false;
                };
                t.prototype.preRender = function() {
                    this.initializeValue();
                    this.onBlurHandler = this.blurHandler.bind(this);
                    this.onFocusHandler = this.focusHandler.bind(this);
                    this.onResizeHandler = this.resizeHandler.bind(this);
                    this.clickPoints = {
                        clientX: 0,
                        clientY: 0
                    };
                    this.initialValue = this.value;
                    this.serviceLocator = new g.S;
                    this.initializeServices();
                    this.setContainer();
                    this.persistData();
                    (0, r.V7)(this.element, {
                        'width': (0, r.Ac)(this.width)
                    });
                    (0, r.Y4)(this.element, {
                        role: 'application'
                    });
                };
                t.prototype.persistData = function() {
                    if (this.enablePersistence && this.originalElement.tagName === 'TEXTAREA') {
                        this.element.id = this.originalElement.id + '_wrapper';
                        var e = window.localStorage.getItem(this.getModuleName() + this.element.id);
                        if (!((0, r.le)(e) || (e === ''))) {
                            this.setProperties(JSON.parse(e), true);
                        }
                    }
                };
                t.prototype.setContainer = function() {
                    this.originalElement = this.element.cloneNode(true);
                    if (this.value === null || this.valueTemplate !== null) {
                        this.setValue();
                    }
                    if (this.element.hasAttribute('tabindex')) {
                        this.htmlAttributes = {
                            'tabindex': this.element.getAttribute('tabindex')
                        };
                        this.element.removeAttribute('tabindex');
                    }
                    this.element.innerHTML = '';
                    var e = [
                        'class',
                        'style',
                        'id',
                        'ejs-for'
                    ];
                    var t = {};
                    for(var i = 0; i < this.element.attributes.length; i++){
                        if (e.indexOf(this.element.attributes[i].name) === -1 && !(/^data-val/.test(this.element.attributes[i].name))) {
                            t[this.element.attributes[i].name] = this.element.getAttribute(this.element.attributes[i].name);
                        }
                    }
                    (0, r.l7)(t, this.htmlAttributes, t);
                    this.setProperties({
                        htmlAttributes: t
                    }, true);
                    if (!(0, r.le)(this.htmlAttributes.id)) {
                        this.element.id = this.htmlAttributes.id;
                    }
                    if (this.element.tagName === 'TEXTAREA') {
                        var n = this.createElement('div', {
                            className: this.element.getAttribute('class')
                        });
                        this.element.innerHTML = '';
                        this.element.parentElement.insertBefore(n, this.element);
                        this.valueContainer = this.element;
                        (0, r.IV)([
                            this.valueContainer
                        ], this.element.getAttribute('class').split(' '));
                        this.element = n;
                    } else {
                        this.valueContainer = this.createElement('textarea', {
                            id: this.getID() + '-value',
                            attrs: {
                                'aria-labelledby': this.getID()
                            }
                        });
                    }
                    this.valueContainer.name = this.getID();
                    (0, r.cn)([
                        this.valueContainer
                    ], a.je);
                    if (!(0, r.le)(this.cssClass)) {
                        var s = this.cssClass.split(' ');
                        for(var o = 0; o < s.length; o++){
                            (0, r.cn)([
                                this.valueContainer
                            ], s[o]);
                        }
                    }
                    this.element.appendChild(this.valueContainer);
                };
                t.prototype.getPersistData = function() {
                    return this.addOnPersist([
                        'value'
                    ]);
                };
                t.prototype.focusIn = function() {
                    if (this.enabled) {
                        this.inputElement.focus();
                        this.focusHandler({});
                    }
                };
                t.prototype.focusOut = function() {
                    if (this.enabled) {
                        this.inputElement.blur();
                        this.blurHandler({});
                    }
                };
                t.prototype.selectAll = function() {
                    this.notify(o.td, {});
                };
                t.prototype.selectRange = function(e) {
                    this.notify(o.jh, {
                        range: e
                    });
                };
                t.prototype.getSelection = function() {
                    var e = '';
                    this.notify(o.Db, {
                        callBack: function(t) {
                            e = t;
                        }
                    });
                    return e;
                };
                t.prototype.executeCommand = function(e, t, i) {
                    t = this.htmlPurifier(e, t);
                    if (this.editorMode === 'HTML') {
                        var n = this.getRange();
                        if (this.iframeSettings.enable) {
                            this.formatter.editorManager.nodeSelection.Clear(this.element.ownerDocument);
                        }
                        var s = (this.iframeSettings.enable && n.startContainer === this.inputElement) ? true : !this.inputElement.contains(n.startContainer);
                        if (s) {
                            this.focusIn();
                        }
                    }
                    var a = v[e];
                    if (i && i.undo) {
                        if (i.undo && this.formatter.getUndoRedoStack().length === 0) {
                            this.formatter.saveData();
                        }
                    }
                    if (this.maxLength !== -1 && !(0, r.le)(a.command)) {
                        var l = 0;
                        if (a.command === 'Links') {
                            l = t.text.length === 0 ? t.url.length : t.text.length;
                        }
                        if (a.command === 'Images' || a.command === 'Table' || a.command === 'Files') {
                            l = 1;
                        }
                        if (a.command === 'InsertHTML') {
                            if (!(0, r.le)(t)) {
                                var h = this.createElement('div');
                                h.innerHTML = t;
                                l = h.textContent.length;
                            } else if (!(0, r.le)(a.value) && (a.value === '<hr/>' || a.value === '<br/>')) {
                                l = 1;
                            }
                        }
                        if (a.command === 'InsertText') {
                            l = t.length;
                        }
                        var c = this.getText().trim().length;
                        var d = this.getSelection().length;
                        var p = (c - d) + l;
                        if (!(this.maxLength === -1 || p <= this.maxLength)) {
                            return;
                        }
                    }
                    this.formatter.editorManager.execCommand(a.command, a.subCommand ? a.subCommand : (t ? t : a.value), null, null, (t ? t : a.value), (t ? t : a.value));
                    if (i && i.undo) {
                        this.formatter.saveData();
                        this.formatter.enableUndo(this);
                    }
                    this.setPlaceHolder();
                    this.notify(o.Ak, {});
                };
                t.prototype.htmlPurifier = function(e, t) {
                    if (this.editorMode === 'HTML') {
                        switch(e){
                            case 'insertHTML':
                                if (this.enableHtmlSanitizer) {
                                    if (typeof t === 'string') {
                                        t = this.htmlEditorModule.sanitizeHelper(t);
                                    } else {
                                        t = this.htmlEditorModule.sanitizeHelper(t.outerHTML);
                                    }
                                }
                                break;
                            case 'insertTable':
                                if ((0, r.le)(t.width)) {
                                    t.width = {
                                        minWidth: this.tableSettings.minWidth,
                                        maxWidth: this.tableSettings.maxWidth,
                                        width: this.tableSettings.width
                                    };
                                }
                                break;
                            case 'insertImage':
                                {
                                    var i = this.createElement('img', {
                                        attrs: {
                                            src: t.url
                                        }
                                    });
                                    var n = i.outerHTML;
                                    if (this.enableHtmlSanitizer) {
                                        n = this.htmlEditorModule.sanitizeHelper(i.outerHTML);
                                    }
                                    var s = (n !== '' && (this.createElement('div', {
                                        innerHTML: n
                                    }).firstElementChild).getAttribute('src')) || null;
                                    s = !(0, r.le)(s) ? s : '';
                                    t.url = s;
                                    if ((0, r.le)(t.width)) {
                                        t.width = {
                                            minWidth: this.insertImageSettings.minWidth,
                                            maxWidth: this.insertImageSettings.maxWidth,
                                            width: this.insertImageSettings.width
                                        };
                                    }
                                    if ((0, r.le)(t.height)) {
                                        t.height = {
                                            minHeight: this.insertImageSettings.minHeight,
                                            maxHeight: this.insertImageSettings.maxHeight,
                                            height: this.insertImageSettings.height
                                        };
                                    }
                                    break;
                                }
                            case 'createLink':
                                {
                                    var o = this.createElement('a', {
                                        attrs: {
                                            href: t.url
                                        }
                                    });
                                    var a = o.outerHTML;
                                    if (this.enableHtmlSanitizer) {
                                        a = this.htmlEditorModule.sanitizeHelper(o.outerHTML);
                                    }
                                    var l = (a !== '' && (this.createElement('div', {
                                        innerHTML: a
                                    }).firstElementChild).getAttribute('href')) || null;
                                    l = !(0, r.le)(l) ? l : '';
                                    t.url = l;
                                    break;
                                }
                        }
                    }
                    return t;
                };
                t.prototype.encode = function(e) {
                    var t = this.createElement('div');
                    t.innerText = e.trim();
                    return t.innerHTML.replace(/<br\s*[\/]?>/gi, '\n');
                };
                t.prototype.render = function() {
                    if (this.value && !this.valueTemplate) {
                        this.setProperties({
                            value: this.serializeValue(this.value)
                        }, true);
                    }
                    this.renderModule = new h(this, this.serviceLocator);
                    this.sourceCodeModule = new m(this, this.serviceLocator);
                    this.notify(o.T5, {});
                    this.trigger(o.zD);
                    this.RTERender();
                    var e = new y(this);
                    this.notify(o.Xr, {});
                    if (this.enableXhtml) {
                        this.setProperties({
                            value: this.getXhtml()
                        }, true);
                    }
                    if (this.toolbarSettings.enable && this.toolbarSettings.type === 'Expand' && !(0, r.le)(this.getToolbar()) && (this.toolbarSettings.items.indexOf('Undo') > -1 && this.toolbarSettings.items.indexOf('Redo') > -1)) {
                        this.disableToolbarItem([
                            'Undo',
                            'Redo'
                        ]);
                    }
                    this.setContentHeight();
                    if (this.value !== null) {
                        this.valueContainer.defaultValue = this.value;
                    }
                    (!this.enabled) ? this.unWireEvents() : this.eventInitializer();
                    this.notify(o._8, {
                        cssClass: this.cssClass
                    });
                    this.notify(o.LF, {});
                    this.renderComplete();
                };
                t.prototype.eventInitializer = function() {
                    this.wireEvents();
                };
                t.prototype.cleanList = function(e) {
                    var t = this.getRange();
                    var i = t.startContainer;
                    var n = t.endContainer;
                    var s = t.startOffset;
                    var o = i === n ? true : false;
                    var a = n.textContent.length;
                    var l = t.endContainer.nodeName === '#text' ? t.endContainer.parentElement : t.endContainer;
                    var h = (0, r.oq)(l, 'LI');
                    if (!(0, r.le)(h) && l.textContent.length === t.endOffset && !t.collapsed && (0, r.le)(l.nextElementSibling)) {
                        for(var c = 0; c < h.childNodes.length; c++){
                            if (h.childNodes[c].nodeName === "#text" && h.childNodes[c].textContent.trim().length === 0) {
                                (0, r.og)(h.childNodes[c]);
                                c--;
                            }
                        }
                        var d = h;
                        while(d.lastChild !== null && d.nodeName !== '#text'){
                            d = d.lastChild;
                        }
                        this.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), o ? i : (d.nodeName === 'BR' && !(0, r.le)(d.previousSibling) ? d.previousSibling : i), n, s, (d.nodeName === 'BR' ? 0 : a));
                    }
                };
                t.prototype.keyDown = function(e) {
                    this.notify(o.QG, {
                        member: 'keydown',
                        args: e
                    });
                    this.restrict(e);
                    if (this.editorMode === 'HTML') {
                        this.cleanList(e);
                    }
                    if (this.editorMode === 'HTML' && ((e.which === 8 && e.code === 'Backspace') || (e.which === 46 && e.code === 'Delete'))) {
                        var t = this.getRange();
                        var i = t.startContainer.nodeName === '#text' ? t.startContainer.parentElement : t.startContainer;
                        if ((0, r.oq)(i, 'pre') && (e.which === 8 && t.startContainer.textContent.charCodeAt(t.startOffset - 1) === 8203) || (e.which === 46 && t.startContainer.textContent.charCodeAt(t.startOffset) === 8203)) {
                            var n = new RegExp(String.fromCharCode(8203), 'g');
                            var s = e.which === 8 ? t.startOffset - 1 : t.startOffset;
                            t.startContainer.textContent = t.startContainer.textContent.replace(n, '');
                            this.formatter.editorManager.nodeSelection.setCursorPoint(this.contentModule.getDocument(), t.startContainer, s);
                        } else if ((e.code === 'Backspace' && e.which === 8) && t.startContainer.textContent.charCodeAt(0) === 8203 && t.collapsed) {
                            var a = t.startContainer.parentElement;
                            var l = void 0;
                            var h = void 0;
                            for(h = 0; h < a.childNodes.length; h++){
                                if (a.childNodes[h] === t.startContainer) {
                                    l = h;
                                }
                            }
                            var c = true;
                            var d = [];
                            for(h = l; h >= 0; h--){
                                if (a.childNodes[h].nodeType === 3 && a.childNodes[h].textContent.charCodeAt(0) === 8203 && c) {
                                    d.push(h);
                                } else {
                                    c = false;
                                }
                            }
                            if (d.length > 0) {
                                for(h = d.length - 1; h > 0; h--){
                                    a.childNodes[d[h]].textContent = '';
                                }
                            }
                            this.formatter.editorManager.nodeSelection.setCursorPoint(this.contentModule.getDocument(), t.startContainer, t.startOffset);
                        }
                    }
                    if (this.formatter.getUndoRedoStack().length === 0) {
                        this.formatter.saveData();
                    }
                    if (e.action !== 'insert-link' && (e.action && e.action !== 'paste' && e.action !== 'space' || e.which === 9 || (e.code === 'Backspace' && e.which === 8))) {
                        this.formatter.process(this, null, e);
                        switch(e.action){
                            case 'toolbar-focus':
                                if (this.toolbarSettings.enable) {
                                    var p = '.e-toolbar-item[aria-disabled="false"][title] [tabindex]';
                                    this.toolbarModule.baseToolbar.toolbarObj.element.querySelector(p).focus();
                                }
                                break;
                            case 'escape':
                                this.contentModule.getEditPanel().focus();
                                break;
                        }
                    }
                    if (!(0, r.le)(this.placeholder)) {
                        if ((!(0, r.le)(this.placeHolderWrapper)) && (this.inputElement.textContent.length !== 1)) {
                            this.placeHolderWrapper.style.display = 'none';
                        } else {
                            this.setPlaceHolder();
                        }
                    }
                    this.autoResize();
                };
                t.prototype.keyUp = function(e) {
                    if (this.editorMode === "HTML") {
                        var t = this.getRange();
                        if (r.AR.userAgent.indexOf('Firefox') != -1 && t.startContainer.nodeName === '#text' && t.startContainer.parentElement === this.inputElement && this.enterKey !== 'BR') {
                            var i = this.getRange();
                            var n = this.createElement(this.enterKey);
                            i.startContainer.parentElement.insertBefore(n, i.startContainer);
                            n.appendChild(i.startContainer);
                            this.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), n.childNodes[0], n.childNodes[0], n.childNodes[0].textContent.length, n.childNodes[0].textContent.length);
                        }
                    }
                    this.notify(o.yR, {
                        member: 'keyup',
                        args: e
                    });
                    if (e.code === 'KeyX' && e.which === 88 && e.keyCode === 88 && e.ctrlKey && (this.inputElement.innerHTML === '' || this.inputElement.innerHTML === '<br>')) {
                        this.inputElement.innerHTML = (0, ey.v7)((0, ey.oG)(this), this);
                    }
                    var s = e.which === 32 || e.which === 13 || e.which === 8 || e.which === 46;
                    if (((e.key !== 'shift' && !e.ctrlKey) && e.key && e.key.length === 1 || s) || (this.editorMode === 'Markdown' && ((e.key !== 'shift' && !e.ctrlKey) && e.key && e.key.length === 1 || s)) && !this.inlineMode.enable) {
                        this.formatter.onKeyHandler(this, e);
                    }
                    if (this.inputElement && this.inputElement.textContent.length !== 0 || this.element.querySelectorAll('.e-toolbar-item.e-active').length > 0) {
                        this.notify(o.l0, {
                            args: e
                        });
                    }
                    if (!(0, r.le)(this.placeholder)) {
                        if (!(e.key === 'Enter' && e.keyCode === 13) && (this.inputElement.innerHTML === '<p><br></p>' || this.inputElement.innerHTML === '<div><br></div>' || this.inputElement.innerHTML === '<br>')) {
                            this.setPlaceHolder();
                        }
                    }
                };
                t.prototype.serializeValue = function(e) {
                    if (this.editorMode === 'HTML' && !(0, r.le)(e)) {
                        if (this.enableHtmlEncode) {
                            e = this.htmlEditorModule.sanitizeHelper((0, ey.Jx)(e));
                            e = this.encode(e);
                        } else {
                            e = this.htmlEditorModule.sanitizeHelper(e);
                        }
                    }
                    return e;
                };
                t.prototype.sanitizeHtml = function(e) {
                    return this.serializeValue(e);
                };
                t.prototype.updateValue = function(e) {
                    if ((0, r.le)(e)) {
                        var t = this.inputElement.innerHTML;
                        this.setProperties({
                            value: (0, ey.nu)(t) ? null : t
                        });
                    } else {
                        this.setProperties({
                            value: e
                        });
                    }
                };
                t.prototype.triggerEditArea = function(e) {
                    if (!(0, ey.FA)()) {
                        this.notify(o.uU, {
                            member: 'editAreaClick',
                            args: e
                        });
                    } else {
                        var t = (e.touches ? e.changedTouches[0] : e);
                        if (this.clickPoints.clientX === t.clientX && this.clickPoints.clientY === t.clientY) {
                            this.notify(o.uU, {
                                member: 'editAreaClick',
                                args: e
                            });
                        }
                    }
                };
                t.prototype.notifyMouseUp = function(e) {
                    var t = (e.touches ? e.changedTouches[0] : e);
                    this.notify(o.vV, {
                        member: 'mouseUp',
                        args: e,
                        touchData: {
                            prevClientX: this.clickPoints.clientX,
                            prevClientY: this.clickPoints.clientY,
                            clientX: t.clientX,
                            clientY: t.clientY
                        }
                    });
                    if (this.inputElement && ((this.editorMode === 'HTML' && this.inputElement.textContent.length !== 0) || (this.editorMode === 'Markdown' && this.inputElement.value.length !== 0))) {
                        this.notify(o.l0, {
                            args: e
                        });
                    }
                    this.triggerEditArea(e);
                };
                t.prototype.mouseUp = function(e) {
                    if (this.quickToolbarSettings.showOnRightClick && r.AR.isDevice) {
                        var t = e.target;
                        var i = (0, r.oq)(t, 'table');
                        if (t && t.nodeName === 'A' || t.nodeName === 'IMG' || (t.nodeName === 'TD' || t.nodeName === 'TH' || t.nodeName === 'TABLE' || (i && this.contentModule.getEditPanel().contains(i)))) {
                            return;
                        }
                    }
                    this.notifyMouseUp(e);
                    if (e.detail === 3) {
                        var n = this.getRange();
                        var s = this.formatter.editorManager.domNode.getSelection();
                        if (/\s+$/.test(s.toString())) {
                            if (!(0, r.le)(n.startContainer.parentElement) && (!(0, r.le)(n.startContainer.parentElement.nextSibling) && (n.startContainer.parentElement.nextSibling.nodeType !== 3 || /\s+$/.test(n.startContainer.parentElement.nextSibling.textContent)) || n.startOffset === n.endOffset) || n.startContainer.parentElement.tagName.toLocaleLowerCase() === 'li') {
                                n.setStart(n.startContainer, n.startOffset);
                                n.setEnd(n.startContainer, n.startContainer.textContent.length);
                            }
                        }
                    }
                };
                t.prototype.ensureModuleInjected = function(e) {
                    return this.getInjectedModules().indexOf(e) >= 0;
                };
                t.prototype.onCopy = function() {
                    this.contentModule.getDocument().execCommand('copy', false, null);
                };
                t.prototype.onCut = function() {
                    this.contentModule.getDocument().execCommand('cut', false, null);
                };
                t.prototype.onPaste = function(e) {
                    var t = this;
                    var i = {
                        originalEvent: e,
                        cancel: false,
                        requestType: 'Paste'
                    };
                    this.trigger(o.m2, i, function(i) {
                        var n = t.inputElement.textContent.length;
                        var s = t.getSelection().length;
                        var a = ((0, r.le)(e) || (0, r.le)(e.clipboardData)) ? 0 : e.clipboardData.getData('text/plain').length;
                        var l = (n - s) + a;
                        if (t.editorMode === 'Markdown') {
                            var h = {
                                requestType: 'Paste',
                                editorMode: t.editorMode,
                                event: e
                            };
                            setTimeout(function() {
                                t.formatter.onSuccess(t, h);
                            }, 0);
                            if (!(t.maxLength === -1 || l <= t.maxLength)) {
                                e.preventDefault();
                            }
                            return;
                        }
                        if (!i.cancel && t.inputElement.contentEditable === 'true' && (t.maxLength === -1 || l <= t.maxLength)) {
                            if (!(0, r.le)(t.pasteCleanupModule)) {
                                t.notify(o.dI, {
                                    args: e
                                });
                            } else {
                                var c = {
                                    requestType: 'Paste',
                                    editorMode: t.editorMode,
                                    event: e
                                };
                                var d = null;
                                var p = false;
                                if (e && !(0, r.le)(e.clipboardData)) {
                                    d = e.clipboardData.getData('text/plain');
                                    p = e.clipboardData.getData('text/html').indexOf('MsoNormal') > 0;
                                }
                                var u = e && e.clipboardData && e.clipboardData.items.length > 0 ? e.clipboardData.items[0].getAsFile() : null;
                                if (d !== null) {
                                    t.notify(o.RE, {
                                        file: u,
                                        args: e,
                                        text: d,
                                        isWordPaste: p
                                    });
                                }
                                setTimeout(function() {
                                    t.formatter.onSuccess(t, c);
                                }, 0);
                            }
                        } else {
                            e.preventDefault();
                        }
                    });
                };
                t.prototype.clipboardAction = function(e, t) {
                    switch(e.toLowerCase()){
                        case 'cut':
                            this.onCut();
                            this.formatter.onSuccess(this, {
                                requestType: 'Cut',
                                editorMode: this.editorMode,
                                event: t
                            });
                            break;
                        case 'copy':
                            this.onCopy();
                            this.formatter.onSuccess(this, {
                                requestType: 'Copy',
                                editorMode: this.editorMode,
                                event: t
                            });
                            break;
                        case 'paste':
                            this.onPaste(t);
                            break;
                    }
                };
                t.prototype.destroy = function() {
                    if (this.isDestroyed || !this.isRendered) {
                        return;
                    }
                    if (this.element.offsetParent === null) {
                        if (!(0, r.le)(this.toolbarModule)) {
                            this.toolbarModule.destroy();
                        }
                        this.notify(o.P0, {});
                        return;
                    }
                    this.notify(o.ob, {});
                    this.destroyDependentModules();
                    if (!(0, r.le)(this.timeInterval)) {
                        clearInterval(this.timeInterval);
                        this.timeInterval = null;
                    }
                    this.unWireEvents();
                    if (this.originalElement.tagName === 'TEXTAREA') {
                        this.element.parentElement.insertBefore(this.valueContainer, this.element);
                        this.valueContainer.id = this.getID();
                        this.valueContainer.removeAttribute('name');
                        (0, r.og)(this.element);
                        if (this.originalElement.innerHTML.trim() !== '') {
                            this.valueContainer.value = this.originalElement.innerHTML.trim();
                            this.setProperties({
                                value: (!(0, r.le)(this.initialValue) ? this.initialValue : null)
                            }, true);
                        } else {
                            this.valueContainer.value = this.valueContainer.defaultValue;
                        }
                        this.element = this.valueContainer;
                        for(var t = 0; t < this.originalElement.classList.length; t++){
                            (0, r.cn)([
                                this.element
                            ], this.originalElement.classList[t]);
                        }
                        if (!(0, r.le)(this.cssClass)) {
                            var i = this.cssClass.split(' ');
                            for(var t = 0; t < i.length; t++){
                                (0, r.cn)([
                                    this.element
                                ], i[t]);
                            }
                        }
                        (0, r.IV)([
                            this.element
                        ], a.je);
                    } else {
                        if (this.originalElement.innerHTML.trim() !== '') {
                            this.element.innerHTML = this.originalElement.innerHTML.trim();
                            this.setProperties({
                                value: (!(0, r.le)(this.initialValue) ? this.initialValue : null)
                            }, true);
                        } else {
                            this.element.innerHTML = '';
                        }
                    }
                    if (this.placeholder && this.placeHolderWrapper) {
                        this.placeHolderWrapper = null;
                    }
                    if (!(0, r.le)(this.cssClass)) {
                        var n = this.cssClass.split(' ');
                        for(var t = 0; t < n.length; t++){
                            if (n[t].trim() !== '') {
                                (0, r.IV)([
                                    this.element
                                ], n[t]);
                            }
                        }
                    }
                    this.removeHtmlAttributes();
                    this.removeAttributes();
                    e.prototype.destroy.call(this);
                    this.isRendered = false;
                    if (this.enablePersistence) {
                        window.localStorage.removeItem(this.getModuleName() + this.element.id);
                    }
                };
                t.prototype.removeHtmlAttributes = function() {
                    if (this.htmlAttributes) {
                        var e = Object.keys(this.htmlAttributes);
                        for(var t = 0; t < e.length && this.element.hasAttribute(e[t]); t++){
                            this.element.removeAttribute(e[t]);
                        }
                    }
                };
                t.prototype.removeAttributes = function() {
                    if (!this.enabled) {
                        (0, r.IV)([
                            this.element
                        ], a.xu);
                    }
                    if (this.enableRtl) {
                        (0, r.IV)([
                            this.element
                        ], a.lm);
                    }
                    if (this.readonly) {
                        (0, r.IV)([
                            this.element
                        ], a.PW);
                    }
                    if (this.element.style.width !== '' && this.originalElement.style.width === '') {
                        this.element.style.removeProperty('width');
                    }
                    if (this.element.style.height !== '' && this.originalElement.style.height === '') {
                        this.element.style.removeProperty('height');
                    }
                    this.element.removeAttribute('aria-disabled');
                    this.element.removeAttribute('role');
                    this.element.removeAttribute('tabindex');
                };
                t.prototype.destroyDependentModules = function() {
                    this.renderModule.destroy();
                    this.formatter.editorManager.undoRedoManager.destroy();
                    this.sourceCodeModule.destroy();
                };
                t.prototype.getContent = function() {
                    return this.contentModule.getPanel();
                };
                t.prototype.getText = function() {
                    return this.contentModule.getText();
                };
                t.prototype.getSelectedHtml = function() {
                    var e;
                    var t = this.createElement('div');
                    var i = this.contentModule.getDocument().getSelection();
                    if (i.rangeCount > 0) {
                        e = i.getRangeAt(0);
                        var n = e.cloneContents();
                        t.appendChild(n);
                    }
                    return t.innerHTML;
                };
                t.prototype.showInlineToolbar = function() {
                    if (this.inlineMode.enable) {
                        var e = this.getRange();
                        var t = e.endContainer.nodeName === '#text' ? e.endContainer.parentElement : e.endContainer;
                        var i = e.getClientRects()[0].left;
                        var n = e.getClientRects()[0].top;
                        this.quickToolbarModule.showInlineQTBar(i, n, t);
                    }
                };
                t.prototype.hideInlineToolbar = function() {
                    this.quickToolbarModule.hideInlineQTBar();
                };
                t.prototype.getModuleName = function() {
                    return 'richtexteditor';
                };
                t.prototype.onPropertyChanged = function(t, i) {
                    for(var n = 0, s = Object.keys(t); n < s.length; n++){
                        var l = s[n];
                        switch(l){
                            case 'enterKey':
                            case 'value':
                                {
                                    var h = void 0;
                                    if (l === 'enterKey') {
                                        if (this.value === null || this.value === '<div><br></div>' || this.value === '<p><br></p>' || this.value === '<br>') {
                                            h = null;
                                        } else {
                                            h = this.value;
                                        }
                                    } else {
                                        h = t[l];
                                    }
                                    var d = this.editorMode === 'HTML' ? (0, ey.v7)(h, this) : h;
                                    if ((!(0, r.le)(h) && h !== '') || l === 'enterKey') {
                                        this.value = this.serializeValue(((this.enableHtmlEncode) ? this.encode((0, ey.Jx)(d)) : d));
                                    }
                                    this.updatePanelValue();
                                    if (this.inputElement) {
                                        this.notify(o.LF, {});
                                    }
                                    this.setPlaceHolder();
                                    this.notify(o.F, {
                                        module: 'XhtmlValidation',
                                        newProp: t,
                                        oldProp: i
                                    });
                                    if (this.enableXhtml) {
                                        this.setProperties({
                                            value: this.getXhtml()
                                        }, true);
                                    }
                                    if (this.showCharCount) {
                                        this.countModule.refresh();
                                    }
                                    break;
                                }
                            case 'valueTemplate':
                                this.setValue();
                                if (this.showCharCount) {
                                    this.countModule.refresh();
                                }
                                break;
                            case 'width':
                                this.setWidth(t[l]);
                                if (this.toolbarSettings.enable && !this.inlineMode.enable) {
                                    this.toolbarModule.refreshToolbarOverflow();
                                    this.resizeHandler();
                                }
                                break;
                            case 'height':
                                this.setHeight(t[l]);
                                this.setContentHeight();
                                this.autoResize();
                                break;
                            case 'readonly':
                                this.setReadOnly(false);
                                break;
                            case 'cssClass':
                                this.element.classList.remove(i[l]);
                                this.setCssClass(t[l]);
                                this.notify(o._8, {
                                    cssClass: t[l],
                                    oldCssClass: i[l]
                                });
                                break;
                            case 'enabled':
                                this.setEnable();
                                break;
                            case 'enableRtl':
                                this.updateRTL();
                                break;
                            case 'placeholder':
                                this.placeholder = t[l];
                                this.setPlaceHolder();
                                break;
                            case 'htmlAttributes':
                                ev(this.htmlAttributes, this, false, false);
                                break;
                            case 'iframeSettings':
                                {
                                    var p = i[l];
                                    if (p.resources) {
                                        var u = this.contentModule.getDocument();
                                        var f = u.querySelector('head');
                                        var m = void 0;
                                        if (p.resources.scripts) {
                                            m = f.querySelectorAll('.' + a.Z0);
                                            this.removeSheets(m);
                                        }
                                        if (p.resources.styles) {
                                            m = f.querySelectorAll('.' + a.Gp);
                                            this.removeSheets(m);
                                        }
                                    }
                                    this.setIframeSettings();
                                    break;
                                }
                            case 'locale':
                                e.prototype.refresh.call(this);
                                break;
                            case 'inlineMode':
                                this.notify(o.CC, {
                                    module: 'quickToolbar',
                                    newProp: t,
                                    oldProp: i
                                });
                                this.setContentHeight();
                                break;
                            case 'toolbarSettings':
                                this.notify(o.CC, {
                                    module: 'toolbar',
                                    newProp: t,
                                    oldProp: i
                                });
                                this.setContentHeight();
                                break;
                            case 'maxLength':
                                if (this.showCharCount) {
                                    this.countModule.refresh();
                                }
                                break;
                            case 'showCharCount':
                                if (t[l] && this.countModule) {
                                    this.countModule.renderCount();
                                } else if (t[l] === false && this.countModule) {
                                    this.countModule.destroy();
                                }
                                break;
                            case 'enableHtmlEncode':
                                this.updateValueData();
                                this.updatePanelValue();
                                this.setPlaceHolder();
                                if (this.showCharCount) {
                                    this.countModule.refresh();
                                }
                                break;
                            case 'undoRedoSteps':
                            case 'undoRedoTimer':
                                this.formatter.editorManager.observer.notify(c.kR, {
                                    newProp: t,
                                    oldProp: i
                                });
                                break;
                            case 'enableXhtml':
                                this.notify(o.F, {
                                    module: 'XhtmlValidation',
                                    newProp: t,
                                    oldProp: i
                                });
                                break;
                            case 'quickToolbarSettings':
                                t.quickToolbarSettings.showOnRightClick ? this.wireContextEvent() : this.unWireContextEvent();
                                this.notify(o.CC, {
                                    newProp: t,
                                    oldProp: i
                                });
                                break;
                            default:
                                this.notify(o.CC, {
                                    newProp: t,
                                    oldProp: i
                                });
                                break;
                        }
                    }
                };
                t.prototype.updateValueData = function() {
                    if (this.enableHtmlEncode) {
                        this.setProperties({
                            value: this.encode((0, ey.Jx)(this.inputElement.innerHTML))
                        }, true);
                    } else {
                        this.setProperties({
                            value: /<[a-z][\s\S]*>/i.test(this.inputElement.innerHTML) ? this.inputElement.innerHTML : (0, ey.Jx)(this.inputElement.innerHTML)
                        });
                    }
                };
                t.prototype.removeSheets = function(e) {
                    var t;
                    for(t = 0; t < e.length; t++){
                        (0, r.og)(e[t]);
                    }
                };
                t.prototype.updatePanelValue = function() {
                    var e = this.value;
                    e = (this.enableHtmlEncode && this.value) ? (0, ey.Jx)(e) : e;
                    var t = this.element.querySelector('.e-rte-srctextarea');
                    if (e) {
                        if (t && t.style.display === 'block') {
                            t.value = this.value;
                        }
                        if (this.valueContainer) {
                            this.valueContainer.value = (this.enableHtmlEncode) ? this.value : e;
                        }
                        if (this.editorMode === 'HTML' && this.inputElement && this.inputElement.innerHTML.replace('&amp;', '&').trim() !== e.trim()) {
                            this.inputElement.innerHTML = e;
                        } else if (this.editorMode === 'Markdown' && this.inputElement && this.inputElement.value.trim() !== e.trim()) {
                            this.inputElement.value = e;
                        }
                    } else {
                        if (t && t.style.display === 'block') {
                            t.value = '';
                        }
                        if (this.editorMode === 'HTML') {
                            if (this.enterKey === 'DIV') {
                                this.inputElement.innerHTML = '<div><br/></div>';
                            } else if (this.enterKey === 'BR') {
                                this.inputElement.innerHTML = '<br/>';
                            } else {
                                this.inputElement.innerHTML = '<p><br/></p>';
                                if (e === '' && this.formatter && this.inputElement) {
                                    this.formatter.editorManager.nodeSelection.setCursorPoint(this.contentModule.getDocument(), this.inputElement.firstElementChild, this.inputElement.firstElementChild.childElementCount);
                                }
                            }
                        } else {
                            this.inputElement.value = '';
                        }
                        if (this.valueContainer) {
                            this.valueContainer.value = '';
                        }
                    }
                    if (this.showCharCount) {
                        this.countModule.refresh();
                    }
                };
                t.prototype.setHeight = function(e) {
                    if (e !== 'auto') {
                        this.element.style.height = (0, r.Ac)(e);
                    } else {
                        this.element.style.height = 'auto';
                    }
                    if (this.toolbarSettings.type === 'Expand' && (typeof (this.height) === 'string' && this.height.indexOf('px') > -1 || typeof (this.height) === 'number')) {
                        this.element.classList.add(a.yw);
                    } else {
                        this.element.classList.remove(a.yw);
                    }
                };
                t.prototype.setPlaceHolder = function() {
                    if (this.inputElement && this.placeholder && this.iframeSettings.enable !== true) {
                        if (this.editorMode !== 'Markdown') {
                            if (!this.placeHolderWrapper) {
                                this.placeHolderWrapper = this.createElement('span', {
                                    className: 'rte-placeholder e-rte-placeholder' + ' ' + this.cssClass
                                });
                                if (this.inputElement) {
                                    this.inputElement.parentElement.insertBefore(this.placeHolderWrapper, this.inputElement);
                                }
                                (0, r.Y4)(this.placeHolderWrapper, {
                                    'style': 'font-size: 14px; margin-left: 0px; margin-right: 0px;'
                                });
                            }
                            this.placeHolderWrapper.innerHTML = this.placeholder;
                            if (this.inputElement.textContent.length === 0 && !(0, r.le)(this.inputElement.firstChild) && (this.inputElement.firstChild.nodeName === 'BR' || ((this.inputElement.firstChild.nodeName === 'P' || this.inputElement.firstChild.nodeName === 'DIV') && !(0, r.le)(this.inputElement.firstChild.firstChild) && this.inputElement.firstChild.firstChild.nodeName === 'BR'))) {
                                this.placeHolderWrapper.style.display = 'block';
                            } else {
                                this.placeHolderWrapper.style.display = 'none';
                            }
                        } else {
                            this.inputElement.setAttribute('placeholder', this.placeholder);
                        }
                    }
                };
                t.prototype.setWidth = function(e) {
                    if (e !== 'auto') {
                        (0, r.V7)(this.element, {
                            'width': (0, r.Ac)(this.width)
                        });
                    } else {
                        this.element.style.width = 'auto';
                    }
                };
                t.prototype.setCssClass = function(e) {
                    if (!(0, r.le)(e)) {
                        var t = e.split(' ');
                        for(var i = 0; i < t.length; i++){
                            if (t[i].trim() !== '') {
                                this.element.classList.add(t[i]);
                            }
                        }
                    }
                };
                t.prototype.updateRTL = function() {
                    this.notify(o.vN, {
                        enableRtl: this.enableRtl
                    });
                    if (this.enableRtl) {
                        this.element.classList.add(a.lm);
                    } else {
                        this.element.classList.remove(a.lm);
                    }
                };
                t.prototype.updateReadOnly = function() {
                    this.notify(o.Ed, {
                        editPanel: this.inputElement,
                        mode: this.readonly
                    });
                };
                t.prototype.setReadOnly = function(e) {
                    this.updateReadOnly();
                    if (!e) {
                        if (this.readonly && this.enabled) {
                            this.unbindEvents();
                        } else if (this.enabled) {
                            this.bindEvents();
                        }
                    }
                };
                t.prototype.print = function() {
                    var e = this;
                    var t;
                    var i = {
                        element: this.inputElement,
                        requestType: 'print',
                        cancel: false
                    };
                    this.trigger(o.m2, i, function(i) {
                        t = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth);
                        if (r.AR.info.name === 'msie') {
                            t.resizeTo(screen.availWidth, screen.availHeight);
                        }
                        t = (0, r.S0)(e.inputElement, t);
                        if (!i.cancel) {
                            var n = {
                                requestType: 'print'
                            };
                            e.trigger(o.i8, n);
                        }
                    });
                };
                t.prototype.refreshUI = function() {
                    this.renderModule.refresh();
                };
                t.prototype.showFullScreen = function() {
                    this.fullScreenModule.showFullScreen();
                };
                t.prototype.enableToolbarItem = function(e, t) {
                    this.toolbarModule.enableTBarItems(this.getBaseToolbarObject(), e, true, t);
                };
                t.prototype.disableToolbarItem = function(e, t) {
                    this.toolbarModule.enableTBarItems(this.getBaseToolbarObject(), e, false, t);
                };
                t.prototype.removeToolbarItem = function(e) {
                    this.toolbarModule.removeTBarItems(e);
                };
                t.prototype.getRange = function() {
                    return this.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
                };
                t.prototype.initializeServices = function() {
                    this.serviceLocator.register('rendererFactory', new b.z);
                    this.serviceLocator.register('rteLocale', this.localeObj = new r.E7(this.getModuleName(), em.al, this.locale));
                    this.serviceLocator.register('dialogRenderObject', new t_(this));
                };
                t.prototype.RTERender = function() {
                    var e = this.serviceLocator.getService('rendererFactory');
                    this.contentModule = e.getRenderer(l.y2.Content);
                    this.fullScreenModule = new eg(this);
                    this.enterKeyModule = new eb(this);
                    this.renderModule.render();
                    this.inputElement = this.contentModule.getEditPanel();
                    this.setHeight(this.height);
                    ev(this.htmlAttributes, this, false, true);
                    if (this.iframeSettings) {
                        this.setIframeSettings();
                    }
                    this.setCssClass(this.cssClass);
                    this.updateEnable();
                    this.setPlaceHolder();
                    this.updateRTL();
                    this.updateReadOnly();
                    this.updatePanelValue();
                    if (this.enableHtmlEncode && !(0, r.le)(this.value)) {
                        this.setProperties({
                            value: this.encode((0, ey.Jx)(this.value))
                        });
                    }
                };
                t.prototype.setIframeSettings = function() {
                    if (this.iframeSettings.resources) {
                        var e = this.iframeSettings.resources.styles;
                        var t = this.iframeSettings.resources.scripts;
                        if (this.iframeSettings.resources.scripts.length > 0) {
                            this.InjectSheet(true, t);
                        }
                        if (this.iframeSettings.resources.styles.length > 0) {
                            this.InjectSheet(false, e);
                        }
                    }
                    if (this.iframeSettings.attributes) {
                        ev(this.iframeSettings.attributes, this, true, false);
                    }
                };
                t.prototype.InjectSheet = function(e, t) {
                    try {
                        if (t && t.length > 0) {
                            var i = this.contentModule.getDocument();
                            var n = i.querySelector('head');
                            for(var r = 0; r < t.length; r++){
                                if (e) {
                                    var s = this.createScriptElement();
                                    s.src = t[r];
                                    n.appendChild(s);
                                } else {
                                    var o = this.createStyleElement();
                                    o.href = t[r];
                                    n.appendChild(o);
                                }
                            }
                        }
                    } catch (a) {
                        return;
                    }
                };
                t.prototype.createScriptElement = function() {
                    var e = this.createElement('script', {
                        className: a.Z0
                    });
                    e.type = 'text/javascript';
                    return e;
                };
                t.prototype.createStyleElement = function() {
                    var e = this.createElement('link', {
                        className: a.Gp
                    });
                    e.rel = 'stylesheet';
                    return e;
                };
                t.prototype.setValue = function() {
                    if (this.valueTemplate) {
                        var e = new RegExp(/<(?=.*? .*?\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\/\1>/i);
                        if (e.test(this.valueTemplate)) {
                            this.setProperties({
                                value: this.valueTemplate
                            });
                        } else {
                            var t = (0, r.MY)(this.valueTemplate)('', this, 'valueTemplate');
                            for(var i = 0; i < t.length; i++){
                                var n = t[i];
                                (0, r.R3)([
                                    n
                                ], this.element);
                            }
                            this.setProperties({
                                value: this.element.innerHTML.trim()
                            });
                        }
                    } else {
                        var s = !(0, r.le)(this.element.innerHTML) && this.element.innerHTML.replace(/<(\/?|\!?)(!--!--)>/g, '').trim();
                        if (s !== '') {
                            if (this.element.tagName === 'TEXTAREA') {
                                this.setProperties({
                                    value: (0, ey.Jx)(s)
                                });
                            } else {
                                this.setProperties({
                                    value: s
                                });
                            }
                        }
                    }
                };
                t.prototype.updateResizeFlag = function() {
                    this.isResizeInitialized = true;
                };
                t.prototype.getInsertImgMaxWidth = function() {
                    var e = this.insertImageSettings.maxWidth;
                    var t = 12;
                    var i = 2;
                    var n = this.contentModule.getEditPanel();
                    var s = window.getComputedStyle(n);
                    var o = n.offsetWidth - (t + i + parseFloat(s.paddingLeft.split('px')[0]) + parseFloat(s.paddingRight.split('px')[0]) + parseFloat(s.marginLeft.split('px')[0]) + parseFloat(s.marginRight.split('px')[0]));
                    return (0, r.le)(e) ? o : e;
                };
                t.prototype.setContentHeight = function(e, t) {
                    var i;
                    var n = 0;
                    var s;
                    var o = typeof (this.height) === 'string' && this.height.indexOf('%') > -1;
                    var h = (this.sourceCodeModule.getPanel() && this.sourceCodeModule.getPanel().parentElement.style.display === 'block') ? this.sourceCodeModule.getPanel().parentElement : this.contentModule.getPanel();
                    var c = this.element.offsetHeight;
                    if (c === 0 && this.height !== 'auto' && !this.getToolbar()) {
                        c = parseInt(this.height, 10);
                        if (o) {
                            s = this.height;
                        }
                    }
                    var d = this.getToolbar() ? this.toolbarModule.getToolbarHeight() : 0;
                    var p = this.element.querySelector('.' + a.Wk);
                    var u = this.enableResize ? (!(0, r.le)(p) ? (p.offsetHeight + 8) : 0) : 0;
                    var f = this.getToolbar() ? this.toolbarModule.getExpandTBarPopHeight() : 0;
                    if (this.toolbarSettings.type === l.Bv.Expand && t && e !== 'preview') {
                        i = (this.height === 'auto' && u === 0) ? 'auto' : c - (d + f + u) + 'px';
                        n = (!this.toolbarSettings.enableFloating) ? f : 0;
                    } else {
                        if (this.height === 'auto' && !(this.element.classList.contains('e-rte-full-screen')) && !this.isResizeInitialized) {
                            i = 'auto';
                        } else {
                            i = o && s ? s : c - (d + u) + 'px';
                        }
                    }
                    if (e !== 'windowResize') {
                        if (this.iframeSettings.enable) {
                            if (i !== 'auto') {
                                (0, r.V7)(h, {
                                    height: i,
                                    marginTop: n + 'px'
                                });
                            }
                        } else {
                            (0, r.V7)(h, {
                                height: i,
                                marginTop: n + 'px'
                            });
                        }
                    }
                    if (this.iframeSettings.enable && e === 'sourceCode') {
                        var m = (0, r.Ys)('.' + a.s8, this.element);
                        (0, r.V7)(m, {
                            height: i,
                            marginTop: n + 'px'
                        });
                    }
                    if (this.toolbarSettings.enableFloating && this.getToolbar() && !this.inlineMode.enable) {
                        var v = (t ? (d + f) : d) + 'px';
                        (0, r.V7)(this.getToolbar().parentElement, {
                            height: v
                        });
                    }
                    if (u === 0) {
                        this.autoResize();
                    }
                };
                t.prototype.getHtml = function() {
                    return this.serializeValue(this.contentModule.getEditPanel().innerHTML);
                };
                t.prototype.getXhtml = function() {
                    var e = this.value;
                    if (!(0, r.le)(e) && this.enableXhtml) {
                        e = this.htmlEditorModule.xhtmlValidation.selfEncloseValidation(e);
                    }
                    return e;
                };
                t.prototype.showSourceCode = function() {
                    if (this.readonly) {
                        return;
                    }
                    this.notify(o.sv, {});
                };
                t.prototype.getCharCount = function() {
                    var e = this.editorMode === 'Markdown' ? this.inputElement.value.trim() : this.inputElement.textContent.trim();
                    var t;
                    if (this.editorMode !== 'Markdown' && e.indexOf('\u200B') !== -1) {
                        t = e.replace(/\u200B/g, '').length;
                    } else {
                        t = e.length;
                    }
                    return t;
                };
                t.prototype.showDialog = function(e) {
                    if (e === l.iR.InsertLink) {
                        this.notify(o.nk, {});
                    } else if (e === l.iR.InsertImage) {
                        this.notify(o.lj, {});
                    } else if (e === l.iR.InsertTable) {
                        this.notify(o.Np, {});
                    }
                };
                t.prototype.closeDialog = function(e) {
                    if (e === l.iR.InsertLink) {
                        this.notify(o.OI, {});
                    } else if (e === l.iR.InsertImage) {
                        this.notify(o.kq, {});
                    } else if (e === l.iR.InsertTable) {
                        this.notify(o.HB, {});
                    }
                };
                t.prototype.getBaseToolbarObject = function() {
                    var e;
                    if (this.inlineMode.enable && (!r.AR.isDevice || (0, ey.FA)())) {
                        e = this.quickToolbarModule && this.quickToolbarModule.getInlineBaseToolbar();
                    } else {
                        e = this.toolbarModule && this.toolbarModule.getBaseToolbar();
                    }
                    return e;
                };
                t.prototype.getToolbar = function() {
                    return this.toolbarModule ? this.toolbarModule.getToolbarElement() : null;
                };
                t.prototype.getToolbarElement = function() {
                    return this.toolbarModule && this.toolbarModule.getToolbarElement();
                };
                t.prototype.getID = function() {
                    return (this.originalElement.tagName === 'TEXTAREA' ? this.valueContainer.id : this.element.id);
                };
                t.prototype.mouseDownHandler = function(e) {
                    var t = (e.touches ? e.changedTouches[0] : e);
                    (0, r.cn)([
                        this.element
                    ], [
                        a.Mv
                    ]);
                    this.preventDefaultResize(e);
                    this.notify(o.uG, {
                        args: e
                    });
                    this.clickPoints = {
                        clientX: t.clientX,
                        clientY: t.clientY
                    };
                };
                t.prototype.preventImgResize = function(e) {
                    if (e.target.nodeName.toLocaleLowerCase() === 'img') {
                        e.preventDefault();
                    }
                };
                t.prototype.preventDefaultResize = function(e) {
                    if (r.AR.info.name === 'msie') {
                        this.contentModule.getEditPanel().addEventListener('mscontrolselect', this.preventImgResize);
                    } else if (r.AR.info.name === 'mozilla') {
                        this.contentModule.getDocument().execCommand('enableObjectResizing', false, 'false');
                        this.contentModule.getDocument().execCommand('enableInlineTableEditing', false, 'false');
                    }
                };
                t.prototype.defaultResize = function(e) {
                    if (r.AR.info.name === 'msie') {
                        this.contentModule.getEditPanel().removeEventListener('mscontrolselect', this.preventImgResize);
                    } else if (r.AR.info.name === 'mozilla') {
                        this.contentModule.getDocument().execCommand('enableObjectResizing', true, 'true');
                        this.contentModule.getDocument().execCommand('enableInlineTableEditing', true, 'true');
                    }
                };
                t.prototype.resizeHandler = function() {
                    var e = false;
                    if (!document.body.contains(this.element)) {
                        document.defaultView.removeEventListener('resize', this.onResizeHandler, true);
                        return;
                    }
                    if (this.toolbarSettings.enable && !this.inlineMode.enable) {
                        this.toolbarModule.refreshToolbarOverflow();
                        e = this.toolbarModule.baseToolbar.toolbarObj.element.classList.contains(a.Yi);
                    }
                    this.setContentHeight('windowResize', e);
                    this.notify(o.Qr, null);
                };
                t.prototype.scrollHandler = function(e) {
                    this.notify(o.AR, {
                        args: e
                    });
                };
                t.prototype.contentScrollHandler = function(e) {
                    this.notify(o.sh, {
                        args: e
                    });
                };
                t.prototype.focusHandler = function(e) {
                    if ((!this.isRTE || this.isFocusOut)) {
                        this.isRTE = this.isFocusOut ? false : true;
                        this.isFocusOut = false;
                        (0, r.cn)([
                            this.element
                        ], [
                            a.Mv
                        ]);
                        if (this.editorMode === 'HTML') {
                            this.cloneValue = (this.inputElement.innerHTML === '<p><br></p>' || this.inputElement.innerHTML === '<div><br></div>' || this.inputElement.innerHTML === '<br>') ? null : this.enableHtmlEncode ? this.encode((0, ey.Jx)(this.inputElement.innerHTML)) : this.inputElement.innerHTML;
                        } else {
                            this.cloneValue = this.inputElement.value === '' ? null : this.inputElement.value;
                        }
                        var t = document.activeElement;
                        if (t === this.element || t === this.getToolbarElement() || t === this.contentModule.getEditPanel() || ((this.iframeSettings.enable && t === this.contentModule.getPanel()) && e.target && !e.target.classList.contains('e-img-inner') && (e.target && e.target.parentElement && !e.target.parentElement.classList.contains('e-img-wrap'))) || (0, r.oq)(t, '.e-rte-toolbar') === this.getToolbarElement()) {
                            this.contentModule.getEditPanel().focus();
                            if (!(0, r.le)(this.getToolbarElement())) {
                                this.getToolbarElement().setAttribute('tabindex', '-1');
                                var i = this.getToolbarElement().querySelectorAll('[tabindex="0"]');
                                for(var n = 0; n < i.length; n++){
                                    i[n].setAttribute('tabindex', '-1');
                                }
                            }
                        }
                        this.preventDefaultResize(e);
                        this.trigger('focus', {
                            event: e,
                            isInteracted: Object.keys(e).length === 0 ? false : true
                        });
                        if (!(0, r.le)(this.saveInterval) && this.saveInterval > 0 && !this.autoSaveOnIdle) {
                            this.timeInterval = setInterval(this.updateValueOnIdle.bind(this), this.saveInterval);
                        }
                        r.bi.add(document, 'mousedown', this.onDocumentClick, this);
                    }
                    if (!(0, r.le)(this.getToolbarElement())) {
                        var s = this.getToolbarElement().querySelectorAll('input,select,button,a,[tabindex]');
                        for(var n = 0; n < s.length; n++){
                            if ((!s[n].classList.contains('e-rte-dropdown-btn') && !s[n].classList.contains('e-insert-table-btn')) && (!s[n].hasAttribute('tabindex') || s[n].getAttribute('tabindex') !== '-1')) {
                                s[n].setAttribute('tabindex', '-1');
                            }
                        }
                    }
                };
                t.prototype.getUpdatedValue = function() {
                    var e;
                    if (!(0, r.le)(this.tableModule)) {
                        this.tableModule.removeResizeElement();
                    }
                    var t = this.element.querySelector('.e-rte-srctextarea');
                    if (this.editorMode === 'HTML') {
                        e = (this.inputElement.innerHTML === '<p><br></p>' || this.inputElement.innerHTML === '<div><br></div>' || this.inputElement.innerHTML === '<br>') ? null : this.enableHtmlEncode ? this.encode((0, ey.Jx)(this.inputElement.innerHTML)) : this.inputElement.innerHTML;
                        if (t && t.style.display === 'block') {
                            e = t.value;
                        }
                    } else {
                        e = this.inputElement.value === '' ? null : this.inputElement.value;
                    }
                    return e;
                };
                t.prototype.updateValueOnIdle = function() {
                    if (!(0, r.le)(this.tableModule) && !(0, r.le)(this.inputElement.querySelector('.e-table-box.e-rbox-select'))) {
                        return;
                    }
                    this.setProperties({
                        value: this.getUpdatedValue()
                    }, true);
                    this.valueContainer.value = this.value;
                    this.isValueChangeBlurhandler = false;
                    this.invokeChangeEvent();
                };
                t.prototype.updateIntervalValue = function() {
                    clearTimeout(this.idleInterval);
                    this.idleInterval = setTimeout(this.updateValueOnIdle.bind(this), 0);
                };
                t.prototype.updateStatus = function(e) {
                    if (!(0, r.le)(e.html) || !(0, r.le)(e.markdown)) {
                        var t = this.formatter.editorManager.undoRedoManager.getUndoStatus();
                        var i = {
                            undo: t.undo,
                            redo: t.redo,
                            html: e.html,
                            markdown: e.markdown
                        };
                        this.trigger(o.Sy, i);
                    }
                };
                t.prototype.onDocumentClick = function(e) {
                    var t = e.target;
                    var i = (0, r.oq)(t, '.' + a.$E);
                    if (!this.element.contains(e.target) && document !== e.target && i !== this.element && !(0, r.oq)(t, '[aria-owns="' + this.getID() + '"]')) {
                        this.isBlur = true;
                        this.isRTE = false;
                    }
                    this.notify(o.v4, {
                        args: e
                    });
                    if (r.AR.info.name !== 'msie' && e.detail > 3) {
                        e.preventDefault();
                    }
                };
                t.prototype.blurHandler = function(e) {
                    var t = e.relatedTarget;
                    if (t) {
                        var i = (0, r.oq)(t, '.' + a.$E);
                        if (i && i === this.element) {
                            this.isBlur = false;
                            if (t === this.getToolbarElement()) {
                                t.setAttribute('tabindex', '-1');
                            }
                        } else if ((0, r.oq)(t, '[aria-owns="' + this.getID() + '"]')) {
                            this.isBlur = false;
                        } else {
                            this.isBlur = true;
                            t = null;
                        }
                    }
                    if (this.isBlur && (0, r.le)(t)) {
                        (0, r.IV)([
                            this.element
                        ], [
                            a.Mv
                        ]);
                        this.notify(o.Z7, {});
                        var n = this.getUpdatedValue();
                        this.setProperties({
                            value: n
                        });
                        this.notify(o.l0, {
                            args: e,
                            documentNode: document
                        });
                        this.isValueChangeBlurhandler = true;
                        this.invokeChangeEvent();
                        this.isFocusOut = true;
                        this.isBlur = false;
                        (0, ey.Nu)(this.valueContainer, 'focusout');
                        this.defaultResize(e);
                        this.trigger('blur', {
                            event: e,
                            isInteracted: Object.keys(e).length === 0 ? false : true
                        });
                        if (!(0, r.le)(this.timeInterval)) {
                            clearInterval(this.timeInterval);
                            this.timeInterval = null;
                        }
                        r.bi.remove(document, 'mousedown', this.onDocumentClick);
                    } else {
                        this.isRTE = true;
                    }
                };
                t.prototype.contentChanged = function() {
                    if (this.autoSaveOnIdle) {
                        if (!(0, r.le)(this.saveInterval)) {
                            clearTimeout(this.timeInterval);
                            this.timeInterval = setTimeout(this.updateIntervalValue.bind(this), this.saveInterval);
                        }
                    }
                };
                t.prototype.invokeChangeEvent = function() {
                    var e;
                    if (this.enableXhtml) {
                        e = this.getXhtml();
                    } else {
                        e = this.value;
                    }
                    var t = {
                        value: e,
                        isInteracted: this.isValueChangeBlurhandler
                    };
                    if (this.value !== this.cloneValue) {
                        this.trigger('change', t);
                        this.cloneValue = this.value;
                    }
                };
                t.prototype.wireScrollElementsEvents = function() {
                    this.scrollParentElements = (0, s.Mm)(this.element);
                    for(var e = 0, t = this.scrollParentElements; e < t.length; e++){
                        var i = t[e];
                        r.bi.add(i, 'scroll', this.scrollHandler, this);
                    }
                    if (!this.iframeSettings.enable) {
                        r.bi.add(this.contentModule.getPanel(), 'scroll', this.contentScrollHandler, this);
                    }
                };
                t.prototype.wireContextEvent = function() {
                    if (this.quickToolbarSettings.showOnRightClick) {
                        r.bi.add(this.inputElement, 'contextmenu', this.contextHandler, this);
                        if (r.AR.isDevice) {
                            this.touchModule = new r.Xh(this.inputElement, {
                                tapHold: this.touchHandler.bind(this),
                                tapHoldThreshold: 500
                            });
                        }
                    }
                };
                t.prototype.unWireContextEvent = function() {
                    r.bi.remove(this.inputElement, 'contextmenu', this.contextHandler);
                    if (r.AR.isDevice && this.touchModule) {
                        this.touchModule.destroy();
                    }
                };
                t.prototype.unWireScrollElementsEvents = function() {
                    this.scrollParentElements = (0, s.Mm)(this.element);
                    for(var e = 0, t = this.scrollParentElements; e < t.length; e++){
                        var i = t[e];
                        r.bi.remove(i, 'scroll', this.scrollHandler);
                    }
                    if (!this.iframeSettings.enable) {
                        r.bi.remove(this.contentModule.getPanel(), 'scroll', this.contentScrollHandler);
                    }
                };
                t.prototype.touchHandler = function(e) {
                    this.notifyMouseUp(e.originalEvent);
                    this.triggerEditArea(e.originalEvent);
                };
                t.prototype.contextHandler = function(e) {
                    var t = (0, r.oq)(e.target, 'a, table, img');
                    if (this.inlineMode.onSelection === false || (!(0, r.le)(t) && this.inputElement.contains(t) && (t.tagName === 'IMG' || t.tagName === 'TABLE' || t.tagName === 'A'))) {
                        e.preventDefault();
                    }
                };
                t.prototype.resetHandler = function() {
                    var e = this.valueContainer.defaultValue.trim();
                    this.setProperties({
                        value: e === '' ? null : e
                    });
                };
                t.prototype.autoResize = function() {
                    var e = this;
                    if (this.height === 'auto') {
                        if (this.editorMode === 'Markdown') {
                            setTimeout(function() {
                                e.setAutoHeight(e.inputElement);
                            }, 0);
                        } else if (this.iframeSettings.enable) {
                            var t = this.element.querySelector('#' + this.getID() + '_rte-view');
                            setTimeout(function() {
                                e.setAutoHeight(t);
                            }, 100);
                            this.inputElement.style.overflow = 'hidden';
                        }
                    } else {
                        this.inputElement.style.overflow = null;
                    }
                };
                t.prototype.setAutoHeight = function(e) {
                    if (!(0, r.le)(e)) {
                        e.style.height = '';
                        e.style.height = this.inputElement.scrollHeight + 'px';
                        e.style.overflow = 'hidden';
                    }
                };
                t.prototype.wireEvents = function() {
                    this.element.addEventListener('focusin', this.onFocusHandler, true);
                    this.element.addEventListener('focusout', this.onBlurHandler, true);
                    this.on(o.Ak, this.contentChanged, this);
                    this.on(o.zB, this.updateResizeFlag, this);
                    this.on(o.Wp, this.updateStatus, this);
                    if (this.readonly && this.enabled) {
                        return;
                    }
                    this.bindEvents();
                };
                t.prototype.restrict = function(e) {
                    if (this.maxLength >= 0) {
                        var t = this.editorMode === 'Markdown' ? this.contentModule.getText() : (e && e.currentTarget.textContent);
                        if (!t) {
                            return;
                        }
                        var i = [
                            8,
                            16,
                            17,
                            37,
                            38,
                            39,
                            40,
                            46,
                            65
                        ];
                        var n = void 0;
                        for(var r = 0; r <= i.length - 1; r++){
                            if (e.which === i[r]) {
                                if (e.ctrlKey && e.which === 65) {
                                    return;
                                } else if (e.which !== 65) {
                                    n = i[r];
                                    return;
                                }
                            }
                        }
                        if ((t.length >= this.maxLength && this.maxLength !== -1) && e.which !== n) {
                            e.preventDefault();
                        }
                    }
                };
                t.prototype.bindEvents = function() {
                    this.keyboardModule = new f(this.inputElement, {
                        keyAction: this.keyDown.bind(this),
                        keyConfigs: tW({}, this.formatter.keyConfig, this.keyConfig),
                        eventName: 'keydown'
                    });
                    var e = (0, r.oq)(this.valueContainer, 'form');
                    if (e) {
                        r.bi.add(e, 'reset', this.resetHandler, this);
                    }
                    r.bi.add(this.inputElement, 'keyup', this.keyUp, this);
                    r.bi.add(this.inputElement, 'paste', this.onPaste, this);
                    r.bi.add(this.inputElement, r.AR.touchEndEvent, (0, r.Ds)(this.mouseUp, 30), this);
                    r.bi.add(this.inputElement, r.AR.touchStartEvent, this.mouseDownHandler, this);
                    this.wireContextEvent();
                    this.formatter.editorManager.observer.on(c.kT, this.editorKeyDown, this);
                    this.element.ownerDocument.defaultView.addEventListener('resize', this.onResizeHandler, true);
                    if (this.iframeSettings.enable) {
                        r.bi.add(this.inputElement, 'focusin', this.focusHandler, this);
                        r.bi.add(this.inputElement, 'focusout', this.blurHandler, this);
                        r.bi.add(this.inputElement.ownerDocument, 'scroll', this.contentScrollHandler, this);
                        r.bi.add(this.inputElement.ownerDocument, r.AR.touchStartEvent, this.onIframeMouseDown, this);
                    }
                    this.wireScrollElementsEvents();
                };
                t.prototype.onIframeMouseDown = function(e) {
                    this.isBlur = false;
                    this.currentTarget = e.target;
                    this.notify(o.a$, e);
                };
                t.prototype.editorKeyDown = function(e) {
                    switch(e.event.action){
                        case 'copy':
                            this.onCopy();
                            break;
                        case 'cut':
                            this.onCut();
                            break;
                        case 'tab':
                            if (this.iframeSettings.enable) {
                                this.isBlur = true;
                            }
                            break;
                    }
                    if (e.callBack && (e.event.action === 'copy' || e.event.action === 'cut' || e.event.action === 'delete')) {
                        e.callBack({
                            requestType: e.event.action,
                            editorMode: 'HTML',
                            event: e.event
                        });
                    }
                };
                t.prototype.unWireEvents = function() {
                    this.element.removeEventListener('focusin', this.onFocusHandler, true);
                    this.element.removeEventListener('focusout', this.onBlurHandler, true);
                    this.off(o.Ak, this.contentChanged);
                    this.off(o.zB, this.updateResizeFlag);
                    this.off(o.Wp, this.updateStatus);
                    if (this.readonly && this.enabled) {
                        return;
                    }
                    this.unbindEvents();
                };
                t.prototype.unbindEvents = function() {
                    if (this.keyboardModule) {
                        this.keyboardModule.destroy();
                    }
                    var e = (0, r.oq)(this.valueContainer, 'form');
                    if (e) {
                        r.bi.remove(e, 'reset', this.resetHandler);
                    }
                    r.bi.remove(this.inputElement, 'keyup', this.keyUp);
                    r.bi.remove(this.inputElement, 'paste', this.onPaste);
                    r.bi.remove(this.inputElement, r.AR.touchEndEvent, (0, r.Ds)(this.mouseUp, 30));
                    r.bi.remove(this.inputElement, r.AR.touchStartEvent, this.mouseDownHandler);
                    this.unWireContextEvent();
                    if (this.formatter) {
                        this.formatter.editorManager.observer.off(c.kT, this.editorKeyDown);
                    }
                    this.element.ownerDocument.defaultView.removeEventListener('resize', this.onResizeHandler, true);
                    if (this.iframeSettings.enable) {
                        r.bi.remove(this.inputElement, 'focusin', this.focusHandler);
                        r.bi.remove(this.inputElement, 'focusout', this.blurHandler);
                        r.bi.remove(this.inputElement.ownerDocument, 'scroll', this.contentScrollHandler);
                        r.bi.remove(this.inputElement.ownerDocument, r.AR.touchStartEvent, this.onIframeMouseDown);
                    }
                    this.unWireScrollElementsEvents();
                };
                tZ([
                    (0, r.Zz)({}, G)
                ], t.prototype, "toolbarSettings", void 0);
                tZ([
                    (0, r.Zz)({}, Q)
                ], t.prototype, "quickToolbarSettings", void 0);
                tZ([
                    (0, r.Zz)({}, ee)
                ], t.prototype, "pasteCleanupSettings", void 0);
                tZ([
                    (0, r.Zz)({}, ed)
                ], t.prototype, "iframeSettings", void 0);
                tZ([
                    (0, r.Zz)({}, K)
                ], t.prototype, "insertImageSettings", void 0);
                tZ([
                    (0, r.Zz)({}, $)
                ], t.prototype, "tableSettings", void 0);
                tZ([
                    (0, r.Z9)(0)
                ], t.prototype, "floatingToolbarOffset", void 0);
                tZ([
                    (0, r.Zz)({}, ef)
                ], t.prototype, "inlineMode", void 0);
                tZ([
                    (0, r.Zz)({}, J)
                ], t.prototype, "fileManagerSettings", void 0);
                tZ([
                    (0, r.Z9)('100%')
                ], t.prototype, "width", void 0);
                tZ([
                    (0, r.Z9)(false)
                ], t.prototype, "enablePersistence", void 0);
                tZ([
                    (0, r.Z9)(false)
                ], t.prototype, "enableResize", void 0);
                tZ([
                    (0, r.Z9)({})
                ], t.prototype, "htmlAttributes", void 0);
                tZ([
                    (0, r.Z9)(null)
                ], t.prototype, "placeholder", void 0);
                tZ([
                    (0, r.Z9)(false)
                ], t.prototype, "autoSaveOnIdle", void 0);
                tZ([
                    (0, r.Z9)(false)
                ], t.prototype, "readonly", void 0);
                tZ([
                    (0, r.Z9)(true)
                ], t.prototype, "enabled", void 0);
                tZ([
                    (0, r.Z9)(true)
                ], t.prototype, "enableHtmlSanitizer", void 0);
                tZ([
                    (0, r.Z9)(false)
                ], t.prototype, "enableHtmlEncode", void 0);
                tZ([
                    (0, r.Z9)(false)
                ], t.prototype, "enableXhtml", void 0);
                tZ([
                    (0, r.Z9)('auto')
                ], t.prototype, "height", void 0);
                tZ([
                    (0, r.Z9)(null)
                ], t.prototype, "cssClass", void 0);
                tZ([
                    (0, r.Z9)(null)
                ], t.prototype, "value", void 0);
                tZ([
                    (0, r.Z9)('P')
                ], t.prototype, "enterKey", void 0);
                tZ([
                    (0, r.Z9)('BR')
                ], t.prototype, "shiftEnterKey", void 0);
                tZ([
                    (0, r.Z9)(30)
                ], t.prototype, "undoRedoSteps", void 0);
                tZ([
                    (0, r.Z9)(300)
                ], t.prototype, "undoRedoTimer", void 0);
                tZ([
                    (0, r.Z9)('HTML')
                ], t.prototype, "editorMode", void 0);
                tZ([
                    (0, r.Z9)(null)
                ], t.prototype, "keyConfig", void 0);
                tZ([
                    (0, r.Z9)(false)
                ], t.prototype, "showCharCount", void 0);
                tZ([
                    (0, r.Z9)(false)
                ], t.prototype, "enableTabKey", void 0);
                tZ([
                    (0, r.Z9)(false)
                ], t.prototype, "enableAutoUrl", void 0);
                tZ([
                    (0, r.Z9)(-1)
                ], t.prototype, "maxLength", void 0);
                tZ([
                    (0, r.Zz)({}, en)
                ], t.prototype, "format", void 0);
                tZ([
                    (0, r.Zz)({}, eo)
                ], t.prototype, "numberFormatList", void 0);
                tZ([
                    (0, r.Zz)({}, ea)
                ], t.prototype, "bulletFormatList", void 0);
                tZ([
                    (0, r.Zz)({}, et)
                ], t.prototype, "fontFamily", void 0);
                tZ([
                    (0, r.Zz)({}, ei)
                ], t.prototype, "fontSize", void 0);
                tZ([
                    (0, r.Zz)({}, er)
                ], t.prototype, "fontColor", void 0);
                tZ([
                    (0, r.Zz)({}, es)
                ], t.prototype, "backgroundColor", void 0);
                tZ([
                    (0, r.Z9)(null)
                ], t.prototype, "valueTemplate", void 0);
                tZ([
                    (0, r.Z9)(10000)
                ], t.prototype, "saveInterval", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "actionBegin", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "actionComplete", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "beforeDialogOpen", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "dialogOpen", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "beforeDialogClose", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "dialogClose", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "beforeQuickToolbarOpen", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "quickToolbarOpen", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "quickToolbarClose", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "toolbarStatusUpdate", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "updatedToolbarStatus", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "imageSelected", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "beforeImageUpload", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "imageUploading", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "imageUploadSuccess", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "imageUploadFailed", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "imageRemoving", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "afterImageDelete", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "created", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "destroyed", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "beforeSanitizeHtml", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "blur", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "toolbarClick", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "focus", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "change", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "resizing", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "resizeStart", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "resizeStop", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "beforePasteCleanup", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "afterPasteCleanup", void 0);
                tZ([
                    (0, r.ju)()
                ], t.prototype, "beforeImageDrop", void 0);
                tZ([
                    (0, r.Z9)(null)
                ], t.prototype, "formatter", void 0);
                t = tZ([
                    r.Zl
                ], t);
                return t;
            }(r.wA));
            var tX = i(2857);
            ;
            var tG = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var tK = (function(e) {
                tG(t, e);
                function t(t) {
                    var i = e.call(this, t) || this;
                    i.initRenderCalled = false;
                    i.checkInjectedModules = true;
                    i.immediateRender = false;
                    i.portals = [];
                    return i;
                }
                t.prototype.render = function() {
                    if (((this.element && !this.initRenderCalled) || this.refreshing) && !this.isReactForeceUpdate) {
                        e.prototype.render.call(this);
                        this.initRenderCalled = true;
                    } else {
                        return n.createElement('div', this.getDefaultAttributes(), [].concat(this.props.children, this.portals));
                    }
                };
                return t;
            }(tY));
            (0, tX.ef)(tK, [
                tX.VZ,
                n.Component
            ]);
        }),
        103: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "i7": function() {
                    return c;
                },
                "n4": function() {
                    return l;
                },
                "qW": function() {
                    return o;
                }
            });
            var n = {
                'h6': '###### ',
                'h5': '##### ',
                'h4': '#### ',
                'h3': '### ',
                'h2': '## ',
                'h1': '# ',
                'blockquote': '> ',
                'pre': '```\n',
                'p': ''
            };
            var r = {
                'Bold': '**',
                'Italic': '*',
                'StrikeThrough': '~~',
                'InlineCode': '`',
                'SubScript': '<sub>',
                'SuperScript': '<sup>',
                'UpperCase': 'A-Z',
                'LowerCase': 'a-z'
            };
            var s = {
                'OL': '1. ',
                'UL': '- '
            };
            var o = {
                'toolbar-focus': 'alt+f10',
                'escape': '27',
                'insert-link': 'ctrl+k',
                'insert-image': 'ctrl+shift+i',
                'insert-table': 'ctrl+shift+e',
                'undo': 'ctrl+z',
                'redo': 'ctrl+y',
                'copy': 'ctrl+c',
                'cut': 'ctrl+x',
                'paste': 'ctrl+v',
                'bold': 'ctrl+b',
                'italic': 'ctrl+i',
                'underline': 'ctrl+u',
                'strikethrough': 'ctrl+shift+s',
                'uppercase': 'ctrl+shift+u',
                'lowercase': 'ctrl+shift+l',
                'superscript': 'ctrl+shift+=',
                'subscript': 'ctrl+=',
                'indents': 'ctrl+]',
                'outdents': 'ctrl+[',
                'html-source': 'ctrl+shift+h',
                'full-screen': 'ctrl+shift+f',
                'decrease-fontsize': 'ctrl+shift+<',
                'increase-fontsize': 'ctrl+shift+>',
                'justify-center': 'ctrl+e',
                'justify-full': 'ctrl+j',
                'justify-left': 'ctrl+l',
                'justify-right': 'ctrl+r',
                'clear-format': 'ctrl+shift+r',
                'ordered-list': 'ctrl+shift+o',
                'unordered-list': 'ctrl+alt+o',
                'space': '32',
                'enter': '13',
                'tab': 'tab',
                'delete': '46'
            };
            var a = {
                'toolbar-focus': 'alt+f10',
                'escape': '27',
                'insert-link': 'ctrl+k',
                'insert-image': 'ctrl+shift+i',
                'insert-table': 'ctrl+shift+e',
                'undo': 'ctrl+z',
                'redo': 'ctrl+y',
                'copy': 'ctrl+c',
                'cut': 'ctrl+x',
                'paste': 'ctrl+v',
                'bold': 'ctrl+b',
                'italic': 'ctrl+i',
                'strikethrough': 'ctrl+shift+s',
                'uppercase': 'ctrl+shift+u',
                'lowercase': 'ctrl+shift+l',
                'superscript': 'ctrl+shift+=',
                'subscript': 'ctrl+=',
                'full-screen': 'ctrl+shift+f',
                'ordered-list': 'ctrl+shift+o',
                'unordered-list': 'ctrl+alt+o'
            };
            var l = {
                'b': [
                    'strong'
                ],
                'strong': [
                    'b'
                ],
                'i': [
                    'emp',
                    'cite'
                ],
                'emp': [
                    'i',
                    'cite'
                ],
                'cite': [
                    'i',
                    'emp'
                ]
            };
            var h = {
                'first': 'MsoListParagraphCxSpFirst',
                'middle': 'MsoListParagraphCxSpMiddle',
                'last': 'MsoListParagraphCxSpLast'
            };
            var c = [
                'BR',
                'IMG'
            ];
        }),
        8082: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "Hb": function() {
                    return n;
                },
                "Ki": function() {
                    return u;
                },
                "Kj": function() {
                    return s;
                },
                "M": function() {
                    return p;
                },
                "My": function() {
                    return l;
                },
                "O6": function() {
                    return f;
                },
                "PV": function() {
                    return a;
                },
                "R4": function() {
                    return h;
                },
                "hL": function() {
                    return c;
                },
                "kR": function() {
                    return d;
                },
                "kT": function() {
                    return o;
                },
                "nD": function() {
                    return m;
                },
                "om": function() {
                    return r;
                }
            });
            var n = 'keydown';
            var r = 'action';
            var s = 'format-type';
            var o = 'keydown-handler';
            var a = 'list-type';
            var l = 'keyup-handler';
            var h = 'keyup';
            var c = 'model_changed_plugin';
            var d = 'model_changed';
            var p = 'ms_word_cleanup_plugin';
            var u = 'ms_word_cleanup';
            var f = 'onBegin';
            var m = 'actionBegin';
        }),
        1386: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "FA": function() {
                    return s;
                },
                "Hl": function() {
                    return a;
                },
                "No": function() {
                    return l;
                },
                "q_": function() {
                    return h;
                },
                "ze": function() {
                    return o;
                }
            });
            var n = i(1807);
            var r = [
                'a',
                'abbr',
                'acronym',
                'audio',
                'b',
                'bdi',
                'bdo',
                'big',
                'br',
                'button',
                'canvas',
                'cite',
                'code',
                'data',
                'datalist',
                'del',
                'dfn',
                'em',
                'embed',
                'font',
                'i',
                'iframe',
                'img',
                'input',
                'ins',
                'kbd',
                'label',
                'map',
                'mark',
                'meter',
                'noscript',
                'object',
                'output',
                'picture',
                'progress',
                'q',
                'ruby',
                's',
                'samp',
                'script',
                'select',
                'slot',
                'small',
                'span',
                'strong',
                'strike',
                'sub',
                'sup',
                'svg',
                'template',
                'textarea',
                'time',
                'u',
                'tt',
                'var',
                'video',
                'wbr'
            ];
            function s() {
                var e = false;
                if (n.AR.isDevice && n.AR.isIos) {
                    e = true;
                }
                return e;
            }
            function o(e, t) {
                if (e.nodeName === 'BODY' && !(0, n.le)(t)) {
                    var i = top.window.document.querySelector(t);
                    if (!(0, n.le)(i)) {
                        i.contentWindow.focus();
                    }
                }
            }
            function a(e) {
                var t = document.createElement('div');
                t.innerHTML = e;
                t.setAttribute('class', 'tempDiv');
                var i = document.createElement('div');
                var s = t.childNodes;
                if (s.length > 0) {
                    var o = void 0;
                    var a = void 0;
                    var l = void 0;
                    while(t.firstChild){
                        if ((t.firstChild.nodeName === '#text' && (t.firstChild.textContent.indexOf('\n') < 0 || t.firstChild.textContent.trim() !== '')) || r.indexOf(t.firstChild.nodeName.toLocaleLowerCase()) >= 0) {
                            if (!o) {
                                l = (0, n.az)('p');
                                i.appendChild(l);
                                l.appendChild(t.firstChild);
                            } else {
                                a.appendChild(t.firstChild);
                            }
                            a = l;
                            o = true;
                        } else if (t.firstChild.nodeName === '#text' && (t.firstChild.textContent === '\n' || (t.firstChild.textContent.indexOf('\n') >= 0 && t.firstChild.textContent.trim() === ''))) {
                            (0, n.og)(t.firstChild);
                        } else {
                            i.appendChild(t.firstChild);
                            o = false;
                        }
                    }
                    var h = i.querySelectorAll('table');
                    for(var c = 0; c < h.length; c++){
                        if (h[c].getAttribute('border') === '0') {
                            h[c].removeAttribute('border');
                        }
                        var d = h[c].querySelectorAll('td');
                        for(var p = 0; p < d.length; p++){
                            if (d[p].style.borderLeft === 'none') {
                                d[p].style.removeProperty('border-left');
                            }
                            if (d[p].style.borderRight === 'none') {
                                d[p].style.removeProperty('border-right');
                            }
                            if (d[p].style.borderBottom === 'none') {
                                d[p].style.removeProperty('border-bottom');
                            }
                            if (d[p].style.borderTop === 'none') {
                                d[p].style.removeProperty('border-top');
                            }
                            if (d[p].style.border === 'none') {
                                d[p].style.removeProperty('border');
                            }
                        }
                        if (!h[c].classList.contains('e-rte-table')) {
                            h[c].classList.add('e-rte-table');
                        }
                    }
                    var u = i.querySelectorAll('img');
                    for(var c = 0; c < u.length; c++){
                        if (!u[c].classList.contains('e-rte-image')) {
                            u[c].classList.add('e-rte-image');
                        }
                        if (!(u[c].classList.contains('e-imginline') || u[c].classList.contains('e-imgbreak'))) {
                            u[c].classList.add('e-imginline');
                        }
                    }
                }
                return i.innerHTML;
            }
            function l(e) {
                var t = e;
                do {
                    if (t.childNodes.length > 0) {
                        t = t.childNodes[0];
                    }
                }while (t.childNodes.length > 0)
                return t;
            }
            function h() {
                return {
                    bold: false,
                    italic: false,
                    subscript: false,
                    superscript: false,
                    strikethrough: false,
                    orderedlist: false,
                    unorderedlist: false,
                    underline: false,
                    alignments: null,
                    backgroundcolor: null,
                    fontcolor: null,
                    fontname: null,
                    fontsize: null,
                    formats: null,
                    createlink: false,
                    insertcode: false
                };
            }
            function c() {
                return {
                    bold: false,
                    italic: false,
                    subscript: false,
                    superscript: false,
                    strikethrough: false,
                    orderedlist: false,
                    uppercase: false,
                    lowercase: false,
                    inlinecode: false,
                    unorderedlist: false,
                    formats: null
                };
            }
        }),
        3473: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "J": function() {
                    return eL;
                }
            });
            var n = i(3386);
            var r = i(1807);
            var s = i(5932);
            var o = i(8082);
            ;
            var a = (function() {
                function e() {}
                e.prototype.process = function(e, t, i, s) {
                    var a = this;
                    var l = e.contentModule.getDocument().getSelection();
                    var h = (l.rangeCount > 0) ? l.getRangeAt(l.rangeCount - 1) : null;
                    var c;
                    if (e.editorMode === 'HTML') {
                        c = this.editorManager.nodeSelection.save(h, e.contentModule.getDocument());
                    }
                    if (!(0, r.le)(t) && t.item.command && t.item.command !== 'Table' && t.item.command !== 'Actions' && t.item.command !== 'Links' && t.item.command !== 'Images' && t.item.command !== 'Files' && h && !(e.contentModule.getEditPanel().contains(this.getAncestorNode(h.commonAncestorContainer)) || e.contentModule.getEditPanel() === h.commonAncestorContainer || e.contentModule.getPanel() === h.commonAncestorContainer)) {
                        return;
                    }
                    if (!(0, r.le)(t) && e.maxLength !== -1 && !(0, r.le)(t.item.command)) {
                        var d = 0;
                        if (t.item.command === 'Links') {
                            d = s.text.length === 0 ? s.url.length : s.text.length;
                        }
                        if (t.item.command === 'Images' || t.item.command === 'Table' || t.item.command === 'Files') {
                            d = 1;
                        }
                        var p = e.getText().trim().length;
                        var u = e.getSelection().length;
                        var f = (p - u) + d;
                        if (!(e.maxLength === -1 || f <= e.maxLength)) {
                            return;
                        }
                    }
                    if ((0, r.le)(t)) {
                        var m = i.action;
                        if (m !== 'tab' && m !== 'enter' && m !== 'space' && m !== 'escape') {
                            t = {};
                            if (e.editorMode === 'Markdown' && m === 'insert-table') {
                                s = {
                                    'headingText': e.localeObj.getConstant('TableHeadingText'),
                                    'colText': e.localeObj.getConstant('TableColText')
                                };
                            }
                            var v = {
                                originalEvent: i,
                                cancel: false,
                                requestType: m || (i.key + 'Key'),
                                itemCollection: s
                            };
                            (0, r.l7)(t, t, v, true);
                            e.trigger(n.m2, t, function(e) {
                                if (e.cancel) {
                                    if (m === 'paste' || m === 'cut' || m === 'copy') {
                                        i.preventDefault();
                                    }
                                }
                            });
                        }
                        var g = (0, r.le)(e.tableModule) ? true : e.tableModule ? e.tableModule.ensureInsideTableList : false;
                        if ((i.which === 9 && g) || i.which !== 9) {
                            if (i.which === 13 && e.editorMode === 'HTML') {
                                s = {
                                    'enterAction': e.enterKey
                                };
                            }
                            this.editorManager.observer.notify((i.type === 'keydown' ? o.Hb : o.R4), {
                                event: i,
                                callBack: this.onSuccess.bind(this, e),
                                value: s,
                                enterAction: e.enterKey
                            });
                        }
                    } else if (!(0, r.le)(t) && t.item.command && t.item.subCommand && ((t.item.command !== t.item.subCommand && t.item.command !== 'Font') || ((t.item.subCommand === 'FontName' || t.item.subCommand === 'FontSize') && t.name === 'dropDownSelect') || ((t.item.subCommand === 'BackgroundColor' || t.item.subCommand === 'FontColor') && t.name === 'colorPickerChanged'))) {
                        (0, r.l7)(t, t, {
                            requestType: t.item.subCommand,
                            cancel: false,
                            itemCollection: s,
                            selectType: t.name
                        }, true);
                        e.trigger(n.m2, t, function(t) {
                            if (!t.cancel) {
                                if (a.getUndoRedoStack().length === 0 && t.item.command !== 'Links' && t.item.command !== 'Images') {
                                    a.saveData();
                                }
                                e.isBlur = false;
                                e.contentModule.getEditPanel().focus();
                                if (e.editorMode === 'HTML') {
                                    c.restore();
                                }
                                var r = t.item.subCommand.toLocaleLowerCase();
                                if (r === 'paste' || r === 'cut' || r === 'copy') {
                                    e.clipboardAction(r, i);
                                } else {
                                    a.editorManager.observer.notify(n.bi, {
                                        subCommand: t.item.subCommand
                                    });
                                    a.editorManager.execCommand(t.item.command, t.item.subCommand, i, a.onSuccess.bind(a, e), t.item.value, t.item.subCommand === 'Pre' && t.selectType === 'dropDownSelect' ? {
                                        name: t.selectType
                                    } : s, ('#' + e.getID() + ' iframe'), e.enterKey);
                                }
                            }
                        });
                    }
                    if ((0, r.le)(i) || i && i.action !== 'copy') {
                        this.enableUndo(e);
                    }
                };
                e.prototype.getAncestorNode = function(e) {
                    e = e.nodeType === 3 ? e.parentNode : e;
                    return e;
                };
                e.prototype.onKeyHandler = function(e, t) {
                    var i = this;
                    this.editorManager.observer.notify(o.R4, {
                        event: t,
                        callBack: function() {
                            e.notify(n.Ak, {});
                            i.enableUndo(e);
                        }
                    });
                };
                e.prototype.onSuccess = function(e, t) {
                    e.notify(n.Ak, {});
                    if (t && ((0, r.le)(t.event) || t.event.action !== 'copy')) {
                        this.enableUndo(e);
                        e.notify(n.s4, t);
                    }
                    e.trigger(n.i8, t, function(t) {
                        e.setPlaceHolder();
                        if ((t.requestType === 'Images' || t.requestType === 'Links') && e.editorMode === 'HTML') {
                            var i = t;
                            if (t.requestType === 'Links' && t.event && t.event.type === 'keydown' && t.event.keyCode === 32) {
                                return;
                            }
                            e.notify(n.IK, {
                                args: i.event,
                                type: t.requestType,
                                isNotify: true,
                                elements: i.elements
                            });
                        }
                        e.autoResize();
                    });
                };
                e.prototype.saveData = function(e) {
                    this.editorManager.undoRedoManager.saveData(e);
                };
                e.prototype.getUndoStatus = function() {
                    return this.editorManager.undoRedoManager.getUndoStatus();
                };
                e.prototype.getUndoRedoStack = function() {
                    return this.editorManager.undoRedoManager.undoRedoStack;
                };
                e.prototype.enableUndo = function(e) {
                    var t = this.getUndoStatus();
                    if (e.inlineMode.enable && (!r.AR.isDevice || (0, s.FA)())) {
                        (0, s.j)(e.quickToolbarModule.inlineQTBar.quickTBarObj, t);
                    } else {
                        if (e.toolbarModule) {
                            (0, s.j)(e.toolbarModule.baseToolbar, t);
                        }
                    }
                };
                return e;
            }());
            ;
            var l = 'INSERT-IMAGE';
            var h = 'INSERT-TABLE';
            var c = 'INSERT-LINK';
            var d = 'INSERT-ROW';
            var p = 'INSERT-COLUMN';
            var u = 'DELETE-ROW';
            var f = 'DELETE-COLUMN';
            var m = 'REMOVE-TABLE';
            var v = 'TABLE-HEADER';
            var g = 'TABLE_VERTICAL_ALIGN';
            var b = 'TABLE_MERGE';
            var y = 'TABLE_VERTICAL_SPLIT';
            var C = 'TABLE_HORIZONTAL_SPLIT';
            var E = 'TABLE_MOVE';
            var S = 'alignment-type';
            var w = 'indent-type';
            var T = 'p';
            var k = [
                'address',
                'article',
                'aside',
                'audio',
                'blockquote',
                'canvas',
                'details',
                'dd',
                'div',
                'dl',
                'dt',
                'fieldset',
                'figcaption',
                'figure',
                'footer',
                'form',
                'h1',
                'h2',
                'h3',
                'h4',
                'h5',
                'h6',
                'header',
                'hgroup',
                'hr',
                'li',
                'main',
                'nav',
                'noscript',
                'ol',
                'output',
                'p',
                'pre',
                'section',
                'table',
                'tbody',
                'td',
                'tfoot',
                'th',
                'thead',
                'tr',
                'ul',
                'video',
                'body'
            ];
            var x = [
                'td',
                'th'
            ];
            var L = [
                'table',
                'tbody',
                'td',
                'tfoot',
                'th',
                'thead',
                'tr'
            ];
            var N = 'selection-type';
            var D = 'inserthtml-type';
            var O = 'insert-text-type';
            var A = 'clear-type';
            var P = [
                'area',
                'base',
                'br',
                'embed',
                'hr',
                'img',
                'input',
                'param',
                'source',
                'track',
                'wbr',
                'iframe',
                'td'
            ];
            var M = i(8867);
            var R = i(103);
            var B = i(1386);
            ;
            var I = {
                startSelection: 'e-editor-select-start',
                endSelection: 'e-editor-select-end'
            };
            var H = (function() {
                function e(e, t) {
                    this.parent = e;
                    this.nodeSelection = new M.q();
                    this.currentDocument = t;
                }
                e.prototype.contents = function(e) {
                    return (e && 'IFRAME' !== e.tagName ? Array.prototype.slice.call(e.childNodes || []) : []);
                };
                e.prototype.isBlockNode = function(e) {
                    return (!!e && (e.nodeType === Node.ELEMENT_NODE && k.indexOf(e.tagName.toLowerCase()) >= 0));
                };
                e.prototype.isLink = function(e) {
                    return (!!e && (e.nodeType === Node.ELEMENT_NODE && 'a' === e.tagName.toLowerCase()));
                };
                e.prototype.blockParentNode = function(e) {
                    for(; e && e.parentNode !== this.parent && ((!e.parentNode || !this.hasClass(e.parentNode, 'e-node-inner'))); null){
                        e = e.parentNode;
                        if (this.isBlockNode(e)) {
                            return e;
                        }
                    }
                    return e;
                };
                e.prototype.rawAttributes = function(e) {
                    var t = {};
                    var i = e.attributes;
                    if (i.length > 0) {
                        for(var n = 0; n < i.length; n++){
                            var r = i[n];
                            t[r.nodeName] = r.value;
                        }
                    }
                    return t;
                };
                e.prototype.attributes = function(e) {
                    if (!e) {
                        return '';
                    }
                    var t = '';
                    var i = this.rawAttributes(e);
                    var n = Object.keys(i).sort();
                    for(var r = 0; r < n.length; r++){
                        var s = n[r];
                        var o = i[s];
                        if (o.indexOf("'") < 0 && o.indexOf('"') >= 0) {
                            t += ' ' + s + "='" + o + "'";
                        } else if (o.indexOf('"') >= 0 && o.indexOf("'") >= 0) {
                            o = o.replace(/"/g, '&quot;');
                            t += ' ' + s + '="' + o + '"';
                        } else {
                            t += ' ' + s + '="' + o + '"';
                        }
                    }
                    return t;
                };
                e.prototype.clearAttributes = function(e) {
                    for(var t = e.attributes, i = t.length - 1; i >= 0; i--){
                        var n = t[i];
                        e.removeAttribute(n.nodeName);
                    }
                };
                e.prototype.openTagString = function(e) {
                    return '<' + e.tagName.toLowerCase() + this.attributes(e) + '>';
                };
                e.prototype.closeTagString = function(e) {
                    return '</' + e.tagName.toLowerCase() + '>';
                };
                e.prototype.createTagString = function(e, t, i) {
                    return '<' + e.toLowerCase() + this.attributes(t) + '>' + i + '</' + e.toLowerCase() + '>';
                };
                e.prototype.isList = function(e) {
                    return !!e && [
                        'UL',
                        'OL'
                    ].indexOf(e.tagName) >= 0;
                };
                e.prototype.isElement = function(e) {
                    return e === this.parent;
                };
                e.prototype.isEditable = function(e) {
                    return ((!e.getAttribute || e.getAttribute('contenteditable') === 'true') && [
                        'STYLE',
                        'SCRIPT'
                    ].indexOf(e.tagName) < 0);
                };
                e.prototype.hasClass = function(e, t) {
                    return e && e.classList && e.classList.contains(t);
                };
                e.prototype.replaceWith = function(e, t) {
                    var i = e.parentNode;
                    i.insertBefore(this.parseHTMLFragment(t), e);
                    (0, r.og)(e);
                };
                e.prototype.parseHTMLFragment = function(e) {
                    var t = (0, r.az)('template');
                    t.innerHTML = e;
                    if (t.content instanceof DocumentFragment) {
                        return t.content;
                    } else {
                        return document.createRange().createContextualFragment(e);
                    }
                };
                e.prototype.wrap = function(e, t) {
                    e.parentNode.insertBefore(t, e);
                    t = e.previousSibling;
                    t.appendChild(e);
                    return t;
                };
                e.prototype.insertAfter = function(e, t) {
                    t.parentNode.insertBefore(e, t.nextSibling);
                };
                e.prototype.wrapInner = function(e, t) {
                    e.appendChild(t);
                    t = e.querySelector('.e-rte-wrap-inner');
                    t.classList.remove('e-rte-wrap-inner');
                    if (t.classList.length === 0) {
                        t.removeAttribute('class');
                    }
                    while(e.firstChild !== t){
                        t.appendChild(e.firstChild);
                    }
                    return t;
                };
                e.prototype.unWrap = function(e) {
                    var t = e.parentNode;
                    var i = [];
                    while(e.firstChild){
                        i.push(e.firstChild);
                        t.insertBefore(e.firstChild, e);
                    }
                    i = i.length > 0 ? i : [
                        e.parentNode
                    ];
                    t.removeChild(e);
                    return i;
                };
                e.prototype.getSelectedNode = function(e, t) {
                    if (e.nodeType === Node.ELEMENT_NODE && e.childNodes.length > 0 && e.childNodes[t - 1] && e.childNodes[t - 1].nodeType === Node.ELEMENT_NODE && (e.childNodes[t - 1].classList.contains(I.startSelection) || e.childNodes[t - 1].classList.contains(I.endSelection))) {
                        e = e.childNodes[t - 1];
                    } else if (e.nodeType === Node.ELEMENT_NODE && e.childNodes.length > 0 && e.childNodes[t]) {
                        e = e.childNodes[t];
                    }
                    if (e.nodeType === Node.TEXT_NODE) {
                        e = e.parentNode;
                    }
                    return e;
                };
                e.prototype.nodeFinds = function(e, t) {
                    var i = [];
                    for(var n = 0; n < t.length; n++){
                        if (e.contains(t[n]) && e !== t[n]) {
                            i.push(t[n]);
                        }
                    }
                    return i;
                };
                e.prototype.isEditorArea = function() {
                    var e = this.getRangePoint(0);
                    var t;
                    for(t = e.commonAncestorContainer; t && !this.isElement(t); null){
                        t = t.parentNode;
                    }
                    return !!this.isElement(t);
                };
                e.prototype.getRangePoint = function(e) {
                    var t = this.getSelection();
                    var i = [];
                    if (t && t.getRangeAt && t.rangeCount) {
                        i = [];
                        for(var n = 0; n < t.rangeCount; n++){
                            i.push(t.getRangeAt(n));
                        }
                    } else {
                        i = [
                            this.currentDocument.createRange()
                        ];
                    }
                    return 'undefined' !== typeof e ? i[e] : i;
                };
                e.prototype.getSelection = function() {
                    return this.nodeSelection.get(this.currentDocument);
                };
                e.prototype.getPreviousNode = function(e) {
                    e = e.previousElementSibling;
                    for(; e && e.textContent === '\n'; null){
                        e = e.previousElementSibling;
                    }
                    return e;
                };
                e.prototype.encode = function(e) {
                    var t = document.createElement('div');
                    t.innerText = e;
                    return t.innerHTML.replace(/<br\s*[\/]?>/gi, '\n');
                };
                e.prototype.saveMarker = function(e, t) {
                    var i = this.parent.querySelector('.' + I.startSelection);
                    var n = this.parent.querySelector('.' + I.endSelection);
                    var s;
                    var o;
                    if (i.textContent === '' && (0, r.le)(n) && t !== 'tab') {
                        if (i.childNodes.length === 1 && i.childNodes[0].nodeName === 'BR') {
                            i.innerHTML = '&#65279;&#65279;<br>';
                        } else {
                            i.innerHTML = '&#65279;&#65279;';
                        }
                    }
                    if (this.hasClass(i, I.startSelection) && i.classList.length > 1) {
                        var a = this.createTagString(T, i, this.encode(i.textContent));
                        this.replaceWith(i, a);
                        i = this.parent.querySelector('.' + I.startSelection);
                        i.classList.remove(I.startSelection);
                        s = i.childNodes[0];
                    } else {
                        s = this.unWrap(i)[0];
                    }
                    if (this.hasClass(n, I.endSelection) && n.classList.length > 1) {
                        var a = this.createTagString(T, n, this.encode(n.textContent));
                        this.replaceWith(n, a);
                        n = this.parent.querySelector('.' + I.endSelection);
                        n.classList.remove(I.endSelection);
                        o = n.childNodes[0];
                    } else {
                        o = n ? this.unWrap(n)[0] : s;
                    }
                    e.startContainer = e.getNodeArray(s, true);
                    e.endContainer = e.getNodeArray(o, false);
                    return e;
                };
                e.prototype.marker = function(e, t) {
                    return '<span class="' + e + '">' + t + '</span>';
                };
                e.prototype.setMarker = function(e) {
                    var t = e.range;
                    var i = t.startContainer.childNodes;
                    var n = i.length > 1 && i[0].nodeName === 'TABLE';
                    var s = ((n ? (0, B.No)(i[t.startOffset + 1]) : i[(t.startOffset > 0) ? (t.startOffset - 1) : t.startOffset]) || t.startContainer);
                    var o = (t.endContainer.childNodes[(t.endOffset > 0) ? (t.endOffset - 1) : t.endOffset] || t.endContainer);
                    if ((s.nodeType === Node.ELEMENT_NODE && o.nodeType === Node.ELEMENT_NODE) && (s.contains(o) || o.contains(s))) {
                        var a = s.contains(o) ? s : o;
                        var l = a.nodeType !== Node.TEXT_NODE;
                        if (l) {
                            var h = [];
                            var c = [];
                            for(var d = a; a.contains(d); null){
                                if (h.indexOf(d) < 0 && d.childNodes && d.childNodes.length) {
                                    h.push(d);
                                    d = d.childNodes[0];
                                } else if (d.nextSibling) {
                                    d = d.nextSibling;
                                } else if (d.parentNode) {
                                    d = d.parentNode;
                                    h.push(d);
                                }
                                if (c.indexOf(d) < 0 && (d.nodeType === Node.TEXT_NODE || (x.indexOf(d.parentNode.tagName.toLocaleLowerCase()) >= 0 && (d.tagName === 'BR' || d.tagName === 'IMG')))) {
                                    c.push(d);
                                }
                            }
                            if (c.length) {
                                s = s.contains(o) ? c[0] : s;
                                o = c[c.length - 1];
                            }
                        }
                    }
                    if (s !== o) {
                        if (s.nodeType !== Node.TEXT_NODE && ((s.tagName === 'BR' && x.indexOf(s.parentNode.tagName.toLocaleLowerCase()) >= 0) || s.tagName === 'IMG')) {
                            this.replaceWith(s, this.marker(I.startSelection, this.encode(s.textContent)));
                            var p = t.startContainer.querySelector('.' + I.startSelection);
                            p.appendChild(s);
                        } else {
                            if (s.nodeType != 3 && s.nodeName != '#text') {
                                var u = this.marker(I.startSelection, '');
                                (0, r.R3)([
                                    this.parseHTMLFragment(u)
                                ], s);
                            } else {
                                this.replaceWith(s, this.marker(I.startSelection, this.encode(s.textContent)));
                            }
                        }
                        if (o.nodeType !== Node.TEXT_NODE && o.tagName === 'BR' && x.indexOf(o.parentNode.tagName.toLocaleLowerCase()) >= 0) {
                            this.replaceWith(o, this.marker(I.endSelection, this.encode(o.textContent)));
                            var f = t.endContainer.querySelector('.' + I.endSelection);
                            f.appendChild(o);
                        } else {
                            this.ensureSelfClosingTag(o, I.endSelection, t);
                        }
                    } else {
                        this.ensureSelfClosingTag(s, I.startSelection, t);
                    }
                };
                e.prototype.ensureSelfClosingTag = function(e, t, i) {
                    var n = false;
                    if (e.nodeType === 3) {
                        this.replaceWith(e, this.marker(t, this.encode(e.textContent)));
                    } else if (e.tagName === 'BR') {
                        this.replaceWith(e, this.marker(t, this.encode(e.textContent)));
                        var s = i.startContainer.querySelector('.' + t);
                        s.appendChild(e);
                    } else {
                        if (e.tagName === 'IMG') {
                            var o = document.createElement('p');
                            e.parentElement.insertBefore(o, e);
                            o.appendChild(e);
                            e = o.children[0];
                        }
                        if (e.tagName === 'TABLE') {
                            n = true;
                            if (e.textContent === '') {
                                var a = e.querySelectorAll('td');
                                e = a[a.length - 1];
                                e = !(0, r.le)(e.childNodes[0]) ? e.childNodes[0] : e;
                            } else {
                                var l = e.lastChild;
                                while(l.nodeType !== 3 && l.nodeName !== '#text' && l.nodeName !== 'BR'){
                                    l = l.lastChild;
                                }
                                e = l;
                            }
                        }
                        for(var h = 0; h < R.i7.length; h++){
                            e = (e.tagName === R.i7[h] && !n) ? e.parentNode : e;
                        }
                        if (e.nodeType === 3 && e.nodeName === '#text') {
                            this.replaceWith(e, this.marker(t, this.encode(e.textContent)));
                        } else if (e.nodeName === 'BR') {
                            this.replaceWith(e, this.marker(I.endSelection, this.encode(e.textContent)));
                            var c = i.endContainer.querySelector('.' + I.endSelection);
                            c.appendChild(e);
                        } else {
                            var d = this.marker(t, '');
                            (0, r.R3)([
                                this.parseHTMLFragment(d)
                            ], e);
                        }
                    }
                };
                e.prototype.createTempNode = function(e) {
                    var t = e.textContent;
                    if (e.tagName === 'BR') {
                        var i = '<' + T + '></' + T + '>';
                        var n = e.parentNode;
                        if (x.indexOf(n.tagName.toLocaleLowerCase()) >= 0) {
                            e = this.wrap(e, this.parseHTMLFragment(i));
                        }
                    } else if (((e.nodeType !== Node.TEXT_NODE && (e.classList.contains(I.startSelection) || e.classList.contains(I.endSelection))) || t.replace(/\n/g, '').replace(/(^ *)|( *$)/g, '').length > 0 || t.length && t.indexOf('\n') < 0)) {
                        var i = '<' + T + '></' + T + '>';
                        var r = e;
                        e = this.wrap(e, this.parseHTMLFragment(i));
                        var s = r.nodeType === Node.ELEMENT_NODE && r.firstChild && r.firstChild.nodeName === 'BR' && (r.classList.contains(I.startSelection) || r.classList.contains(I.endSelection));
                        if (!s && e.nextElementSibling && e.nextElementSibling.tagName === 'BR') {
                            e.appendChild(e.nextElementSibling);
                        }
                    }
                    return e;
                };
                e.prototype.getImageTagInSelection = function() {
                    var e = this.getSelection();
                    if (this.isEditorArea() && e.rangeCount) {
                        return e.focusNode.querySelectorAll('img');
                    }
                    return null;
                };
                e.prototype.blockNodes = function() {
                    var e = [];
                    var t = this.getSelection();
                    if (this.isEditorArea() && t.rangeCount) {
                        var i = this.getRangePoint();
                        for(var n = 0; n < i.length; n++){
                            var s = void 0;
                            var o = i[n];
                            var a = this.getSelectedNode(o.startContainer, o.startOffset);
                            var l = this.getSelectedNode(o.endContainer, o.endOffset);
                            if (this.isBlockNode(a) && e.indexOf(a) < 0) {
                                e.push(a);
                            }
                            s = this.blockParentNode(a);
                            if (s && e.indexOf(s) < 0) {
                                if (x.indexOf(s.tagName.toLocaleLowerCase()) >= 0 && (a.tagName === 'BR' || a.nodeType === Node.TEXT_NODE || a.classList.contains(I.startSelection) || a.classList.contains(I.endSelection))) {
                                    var h = a.previousSibling && a.previousSibling.nodeType === Node.TEXT_NODE ? a.previousSibling : a;
                                    if (!a.nextSibling && !a.previousSibling && a.tagName === 'BR') {
                                        e.push(h);
                                    } else {
                                        e.push(this.createTempNode(h));
                                    }
                                } else {
                                    e.push(s);
                                }
                            }
                            var c = [];
                            for(var d = a; d !== l && d !== this.parent; null){
                                if (c.indexOf(d) < 0 && d.childNodes && d.childNodes.length) {
                                    c.push(d);
                                    d = d.childNodes[0];
                                } else if (d && d.nodeType !== 8 && (d.tagName === 'BR' || (d.nodeType === Node.TEXT_NODE && d.textContent.trim() !== '') || (d.nodeType !== Node.TEXT_NODE && (d.classList.contains(I.startSelection) || d.classList.contains(I.endSelection)))) && x.indexOf(d.parentNode.tagName.toLocaleLowerCase()) >= 0) {
                                    d = this.createTempNode(d);
                                } else if (d.nextSibling && d.nextSibling.nodeType !== 8 && (d.nextSibling.tagName === 'BR' || d.nextSibling.nodeType === Node.TEXT_NODE || d.nextSibling.classList.contains(I.startSelection) || d.nextSibling.classList.contains(I.endSelection)) && x.indexOf(d.nextSibling.parentNode.tagName.toLocaleLowerCase()) >= 0) {
                                    d = this.createTempNode(d.nextSibling);
                                } else if (d.nextSibling) {
                                    d = d.nextSibling;
                                } else if (d.parentNode) {
                                    d = d.parentNode;
                                    c.push(d);
                                }
                                if (e.indexOf(d) < 0 && d.nodeType === Node.ELEMENT_NODE && x.indexOf(d.parentNode.tagName.toLocaleLowerCase()) >= 0 && (d.classList.contains(I.startSelection) || d.classList.contains(I.endSelection))) {
                                    e.push(this.createTempNode(d));
                                }
                                if (this.isBlockNode(d) && this.ignoreTableTag(d) && c.indexOf(d) < 0 && e.indexOf(d) < 0 && (d !== l || o.endOffset > 0)) {
                                    e.push(d);
                                }
                                if (d.nodeName === 'IMG' && d.parentElement.contentEditable === 'true') {
                                    e.push(d);
                                }
                            }
                            s = this.blockParentNode(l);
                            if (s && this.ignoreTableTag(s) && e.indexOf(s) < 0 && (!(0, r.le)(s.previousElementSibling) && s.previousElementSibling.tagName !== 'IMG')) {
                                e.push(s);
                            }
                        }
                    }
                    for(var p = e.length - 1; p > 0; p--){
                        var c = this.nodeFinds(e[p], e);
                        if (c.length) {
                            var u = e[p].querySelectorAll('ul, ol');
                            if (e[p].tagName === 'LI' && u.length > 0) {
                                continue;
                            } else {
                                e.splice(p, 1);
                            }
                        }
                    }
                    return e;
                };
                e.prototype.ignoreTableTag = function(e) {
                    return !(L.indexOf(e.tagName.toLocaleLowerCase()) >= 0);
                };
                return e;
            }());
            ;
            var F = (function() {
                function e(e) {
                    this.parent = e;
                    this.domNode = this.parent.domNode;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.observer.on(o.PV, this.applyListsHandler, this);
                    this.parent.observer.on(o.kT, this.keyDownHandler, this);
                    this.parent.observer.on(o.My, this.onKeyUp, this);
                    this.parent.observer.on(o.nD, this.spaceKeyAction, this);
                };
                e.prototype.testList = function(e) {
                    var t = [
                        /^[\d]+[.]+$/,
                        /^(?=[MDCLXVI])M*(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})[.]$/gi,
                        /^[a-zA-Z][.]+$/
                    ];
                    var i = !(0, r.le)(e) ? e.innerText.trim().split('.')[0] + '.' : null;
                    if (!(0, r.le)(i)) {
                        for(var n = 0; n < t.length; n++){
                            if (t[n].test(i)) {
                                return true;
                            }
                        }
                    }
                    return false;
                };
                e.prototype.testCurrentList = function(e) {
                    var t = [
                        /^[1]+[.]+$/,
                        /^[i]+[.]+$/,
                        /^[a]+[.]+$/
                    ];
                    if (!(0, r.le)(e.startContainer.textContent.slice(0, e.startOffset))) {
                        var i = e.startContainer.textContent.replace(/\u200B/g, '').slice(0, e.startOffset).trim();
                        for(var n = 0; n < t.length; n++){
                            if (t[n].test(i) && i.length === 2) {
                                return true;
                            }
                        }
                    }
                    return false;
                };
                e.prototype.spaceList = function(e) {
                    var t = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                    this.saveSelection = this.parent.nodeSelection.save(t, this.parent.currentDocument);
                    var i = this.parent.domNode.getSelectedNode(t.startContainer, t.startOffset);
                    var n = this.parent.domNode.getSelectedNode(t.endContainer, t.endOffset);
                    var s = i.previousElementSibling;
                    var o = i.nextElementSibling;
                    var a = !(0, r.le)(s) ? s.innerText.trim().substring(0, 1) : null;
                    var l = !(0, r.le)(o) ? o.innerText.trim().substring(0, 1) : null;
                    var h = this.testCurrentList(t);
                    var c = this.testList(s);
                    var d = this.testList(o);
                    if (!c && !d && a !== '*' && l !== '*') {
                        if (h) {
                            t.startContainer.textContent = t.startContainer.textContent.slice(t.startOffset, t.startContainer.textContent.length);
                            this.applyListsHandler({
                                subCommand: 'OL',
                                callBack: e.callBack
                            });
                            e.event.preventDefault();
                        } else if (t.startContainer.textContent.replace(/\u200B/g, '').slice(0, t.startOffset).trim() === '*' || t.startContainer.textContent.replace(/\u200B/g, '').slice(0, t.startOffset).trim() === '-') {
                            t.startContainer.textContent = t.startContainer.textContent.slice(t.startOffset, t.startContainer.textContent.length);
                            this.applyListsHandler({
                                subCommand: 'UL',
                                callBack: e.callBack
                            });
                            e.event.preventDefault();
                        }
                    }
                };
                e.prototype.enterList = function(e) {
                    var t = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                    var i = t.startContainer.nodeName === 'LI' ? t.startContainer : t.startContainer.parentElement.closest('LI');
                    var n = t.endContainer.nodeName === 'LI' ? t.endContainer : t.endContainer.parentElement.closest('LI');
                    if (!(0, r.le)(i) && !(0, r.le)(n) && i === n && i.tagName === 'LI' && i.textContent.trim() === '' && i.querySelectorAll('IMG').length === 0) {
                        if (i.innerHTML.indexOf('&nbsp;') >= 0) {
                            return;
                        }
                        if (i.textContent.charCodeAt(0) === 65279) {
                            i.textContent = '';
                        }
                        var s = i.parentElement;
                        if ((0, r.le)(s.parentElement.closest('UL')) && (0, r.le)(s.parentElement.closest('OL'))) {
                            if (!(0, r.le)(i.nextElementSibling)) {
                                var o = this.parent.domNode.blockParentNode(i);
                                this.parent.nodeCutter.GetSpliceNode(t, o);
                            }
                            var a = void 0;
                            if (e.enterAction === 'DIV') {
                                a = (0, r.az)('div');
                                a.innerHTML = '<br>';
                            } else if (e.enterAction === 'P') {
                                a = (0, r.az)('p');
                                a.innerHTML = '<br>';
                            } else {
                                a = (0, r.az)('br');
                            }
                            this.parent.domNode.insertAfter(a, s);
                            e.event.preventDefault();
                            this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, a, 0);
                            if (s.textContent === '') {
                                (0, r.og)(s);
                            } else {
                                (0, r.og)(i);
                            }
                        }
                    }
                };
                e.prototype.backspaceList = function(e) {
                    var t = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                    var i = this.parent.domNode.getSelectedNode(t.startContainer, t.startOffset);
                    var n = this.parent.domNode.getSelectedNode(t.endContainer, t.endOffset);
                    i = i.nodeName === 'BR' ? i.parentElement : i;
                    n = n.nodeName === 'BR' ? n.parentElement : n;
                    if (i === n && !(0, r.le)((0, r.oq)(i, 'li')) && ((i.textContent.trim() === '' && i.textContent.charCodeAt(0) === 65279) || (i.textContent.length === 1 && i.textContent.charCodeAt(0) === 8203))) {
                        i.textContent = '';
                    }
                    if (i === n && i.tagName === 'LI' && i.textContent.length === 0 && (0, r.le)(i.previousElementSibling)) {
                        i.removeAttribute('style');
                    }
                    if (i === n && i.textContent === '') {
                        if (i.parentElement.tagName === 'LI' && n.parentElement.tagName === 'LI') {
                            (0, r.og)(i);
                        } else if (i.closest('ul') || i.closest('ol')) {
                            var s = !(0, r.le)(i.closest('ul')) ? i.closest('ul') : i.closest('ol');
                            if (s.firstElementChild === i && !(0, r.le)(s.children[1]) && (s.children[1].tagName === 'OL' || s.children[1].tagName === 'UL')) {
                                if (s.tagName === s.children[1].tagName) {
                                    while(s.children[1].lastChild){
                                        this.parent.domNode.insertAfter(s.children[1].lastChild, s.children[1]);
                                    }
                                    (0, r.og)(s.children[1]);
                                } else {
                                    s.parentElement.insertBefore(s.children[1], s);
                                }
                            }
                        }
                    } else if (!(0, r.le)(i.firstChild) && i.firstChild.nodeName === 'BR' && (!(0, r.le)(i.childNodes[1]) && (i.childNodes[1].nodeName === 'UL' || i.childNodes[1].nodeName === 'OL'))) {
                        var s = !(0, r.le)(i.closest('ul')) ? i.closest('ul') : i.closest('ol');
                        if (s.tagName === i.childNodes[1].nodeName) {
                            while(i.childNodes[1].lastChild){
                                this.parent.domNode.insertAfter(i.children[1].lastChild, i);
                            }
                            (0, r.og)(i.childNodes[1]);
                        } else {
                            s.parentElement.insertBefore(i.children[1], s);
                        }
                    }
                    this.removeList(t, e);
                    this.firstListBackSpace(t, e);
                };
                e.prototype.removeList = function(e, t) {
                    var i = this.parent.domNode.getSelectedNode(e.startContainer, e.startOffset);
                    var n = this.parent.domNode.getSelectedNode(e.endContainer, e.endOffset);
                    i = i.nodeName === 'BR' ? i.parentElement : i;
                    n = n.nodeName === 'BR' ? n.parentElement : n;
                    i = i.nodeName !== 'LI' && !(0, r.le)(i.closest('LI')) ? i.closest('LI') : i;
                    n = n.nodeName !== 'LI' && !(0, r.le)(n.closest('LI')) ? n.closest('LI') : n;
                    if (((e.commonAncestorContainer.nodeName === 'OL' || e.commonAncestorContainer.nodeName === 'UL' || e.commonAncestorContainer.nodeName === 'LI') && (0, r.le)(n.nextElementSibling) && n.textContent.length === e.endOffset && (0, r.le)(i.previousElementSibling) && e.startOffset === 0) || (r.AR.userAgent.indexOf('Firefox') != -1 && e.startContainer === e.endContainer && e.startContainer === this.parent.editableElement && e.startOffset === 0 && e.endOffset === 1)) {
                        if (r.AR.userAgent.indexOf('Firefox') != -1) {
                            (0, r.og)(e.commonAncestorContainer.childNodes[0]);
                        } else if (e.commonAncestorContainer.nodeName === 'LI') {
                            (0, r.og)(e.commonAncestorContainer.parentElement);
                        } else {
                            (0, r.og)(e.commonAncestorContainer);
                        }
                        t.event.preventDefault();
                    }
                };
                e.prototype.onKeyUp = function() {
                    if (!(0, r.le)(this.commonLIParent) && !(0, r.le)(this.commonLIParent.querySelector('.removeList'))) {
                        var e = this.commonLIParent.querySelector('.removeList');
                        while(!(0, r.le)(e.firstChild)){
                            this.parent.domNode.insertAfter(e.firstChild, e);
                        }
                        (0, r.og)(e);
                    }
                };
                e.prototype.firstListBackSpace = function(e, t) {
                    var i = this.parent.domNode.getSelectedNode(e.startContainer, e.startOffset);
                    if (!(0, r.le)(i.closest('OL'))) {
                        this.commonLIParent = i.closest('OL');
                    } else if (!(0, r.le)(i.closest('UL'))) {
                        this.commonLIParent = i.closest('UL');
                    }
                    if (i.nodeName === 'LI' && e.startOffset === 0 && e.endOffset === 0 && (0, r.le)(i.previousSibling) && !(0, r.le)(this.commonLIParent) && (0, r.le)(this.commonLIParent.previousSibling) && ((0, r.le)(this.commonLIParent.parentElement.closest('OL')) && (0, r.le)(this.commonLIParent.parentElement.closest('UL')) && (0, r.le)(this.commonLIParent.parentElement.closest('LI')))) {
                        var n = (0, r.az)('P');
                        n.innerHTML = '&#8203;';
                        i.classList.add('removeList');
                        this.commonLIParent.parentElement.insertBefore(n, this.commonLIParent);
                    }
                };
                e.prototype.keyDownHandler = function(e) {
                    if (e.event.which === 13) {
                        this.enterList(e);
                    }
                    if (e.event.which === 32) {
                        this.spaceList(e);
                    }
                    if (e.event.which === 8) {
                        this.backspaceList(e);
                    }
                    if (e.event.which === 46 && e.event.action === 'delete') {
                        var t = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                        var i = t.commonAncestorContainer;
                        var n = t.startContainer;
                        var s = t.endContainer;
                        var o = n.nodeType === 3 ? n.parentElement : n;
                        var a = s.nodeType === 3 ? s.parentElement : s;
                        if ((i.nodeName === 'UL' || i.nodeName === 'OL') && o !== a && (!(0, r.le)((0, r.oq)(o, 'ul')) || !(0, r.le)((0, r.oq)(o, 'ol'))) && (!(0, r.le)((0, r.oq)(a, 'ul')) || !(0, r.le)((0, r.oq)(a, 'ol'))) && (i.lastElementChild === (0, r.oq)(a, 'li')) && !t.collapsed) {
                            (0, r.og)(i);
                        }
                        this.removeList(t, e);
                    }
                    if (e.event.which === 9) {
                        var t = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                        if (!(e.event.action && e.event.action === 'indent')) {
                            this.saveSelection = this.parent.nodeSelection.save(t, this.parent.currentDocument);
                        }
                        var l = void 0;
                        var h = t.startOffset;
                        var c = t.endOffset;
                        var o = this.parent.domNode.getSelectedNode(t.startContainer, t.startOffset);
                        var a = this.parent.domNode.getSelectedNode(t.endContainer, t.endOffset);
                        if ((o === a && (o.nodeName === 'BR' || o.nodeName === '#text') && x.indexOf(o.parentNode.tagName.toLocaleLowerCase()) >= 0)) {
                            return;
                        } else {
                            if (!(e.event.action && e.event.action === 'indent')) {
                                this.domNode.setMarker(this.saveSelection);
                            }
                            l = this.domNode.blockNodes();
                        }
                        var d = [];
                        var p = true;
                        for(var u = 0; u < l.length; u++){
                            if (l[u].parentNode.tagName === 'LI') {
                                d.push(l[u].parentNode);
                            } else if (l[u].tagName === 'LI' && l[u].childNodes[0].tagName !== 'P' && (l[u].childNodes[0].tagName !== 'OL' && l[u].childNodes[0].tagName !== 'UL')) {
                                d.push(l[u]);
                            }
                        }
                        if (d.length > 1 || d.length && ((h === 0 && c === 0) || e.ignoreDefault)) {
                            e.event.preventDefault();
                            e.event.stopPropagation();
                            this.currentAction = this.getAction(d[0]);
                            if (e.event.shiftKey) {
                                this.revertList(d, e);
                                this.revertClean();
                            } else {
                                p = this.nestedList(d);
                            }
                            if (p) {
                                this.cleanNode();
                                this.parent.editableElement.focus();
                            }
                            if (!(e.event.action && e.event.action === 'indent')) {
                                this.saveSelection = this.domNode.saveMarker(this.saveSelection);
                                this.saveSelection.restore();
                                if (e.callBack) {
                                    e.callBack({
                                        requestType: this.currentAction,
                                        editorMode: 'HTML',
                                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                                        elements: this.parent.domNode.blockNodes(),
                                        event: e.event
                                    });
                                }
                            }
                        } else {
                            if (!(e.event.action && e.event.action === 'indent')) {
                                if (e.event && e.event.shiftKey && e.event.key === 'Tab') {
                                    e.event.action = 'tab';
                                }
                                this.saveSelection = this.domNode.saveMarker(this.saveSelection, e.event.action);
                                this.saveSelection.restore();
                            }
                        }
                    } else {
                        switch(e.event.action){
                            case 'ordered-list':
                                this.applyListsHandler({
                                    subCommand: 'OL',
                                    callBack: e.callBack
                                });
                                e.event.preventDefault();
                                break;
                            case 'unordered-list':
                                this.applyListsHandler({
                                    subCommand: 'UL',
                                    callBack: e.callBack
                                });
                                e.event.preventDefault();
                                break;
                        }
                    }
                };
                e.prototype.spaceKeyAction = function(e) {
                    if (e.event.which === 32) {
                        this.spaceList(e);
                    }
                };
                e.prototype.getAction = function(e) {
                    var t = e.parentNode;
                    return (t.nodeName === 'OL' ? 'OL' : 'UL');
                };
                e.prototype.revertClean = function() {
                    var e = this.parent.editableElement.querySelectorAll('ul, ol');
                    for(var t = 0; t < e.length; t++){
                        var i = e[t].querySelectorAll('ul, ol');
                        if (i.length > 0) {
                            for(var n = 0; n < i.length; n++){
                                var r = i[n].previousSibling;
                                if (r && r.tagName === 'LI') {
                                    r.appendChild(i[n]);
                                }
                            }
                        }
                    }
                };
                e.prototype.noPreviousElement = function(e) {
                    var t;
                    var i;
                    var n = e.querySelectorAll('ol, ul');
                    var s = e.querySelectorAll('li');
                    var o = this.domNode.contents(s[0])[0];
                    if (s.length > 0 && (o.nodeName === 'OL' || o.nodeName === 'UL')) {
                        t = s[0];
                    } else {
                        i = n[0];
                    }
                    if (t) {
                        for(var a = this.domNode.contents(e)[0]; a && !this.domNode.isList(a); null){
                            var l = a.nextSibling;
                            (0, r.Ce)([
                                a
                            ], t);
                            (0, r.V7)(e, {
                                'list-style-type': 'none'
                            });
                            (0, r.V7)(t, {
                                'list-style-type': ''
                            });
                            a = l;
                        }
                    } else if (i) {
                        var h = (0, r.az)('li');
                        (0, r.Ce)([
                            h
                        ], i);
                        for(var a = this.domNode.contents(e)[0]; a && !this.domNode.isList(a); null){
                            var l = a.nextSibling;
                            h.appendChild(a);
                            a = l;
                        }
                        (0, r.Ce)([
                            i
                        ], e.parentNode);
                        (0, r.og)(e);
                        var c = (0, r.az)('li', {
                            styles: 'list-style-type: none;'
                        });
                        (0, r.Ce)([
                            c
                        ], i.parentNode);
                        (0, r.R3)([
                            i
                        ], c);
                    } else {
                        var c = (0, r.az)('li', {
                            styles: 'list-style-type: none;'
                        });
                        (0, r.Ce)([
                            c
                        ], e.parentNode);
                        var h = (0, r.az)(e.parentNode.tagName);
                        (0, r.Ce)([
                            h
                        ], c);
                        (0, r.R3)([
                            e
                        ], h);
                    }
                };
                e.prototype.nestedList = function(e) {
                    var t = false;
                    for(var i = 0; i < e.length; i++){
                        var n = this.domNode.getPreviousNode(e[i]);
                        if (n) {
                            t = true;
                            var s = void 0;
                            var o = void 0;
                            var a = e[i].querySelectorAll('ol, ul');
                            var l = e[i].querySelectorAll('li');
                            var h = this.domNode.contents(l[0])[0];
                            if (l.length > 0 && (h.nodeName === 'OL' || h.nodeName === 'UL')) {
                                o = l[0];
                            } else {
                                s = a[0];
                            }
                            if (s) {
                                var c = (0, r.az)('li');
                                (0, r.Ce)([
                                    c
                                ], s);
                                for(var d = this.domNode.contents(e[i])[0]; d && !this.domNode.isList(d); null){
                                    var p = d.nextSibling;
                                    c.appendChild(d);
                                    d = p;
                                }
                                (0, r.R3)([
                                    s
                                ], n);
                                (0, r.og)(e[i]);
                            } else if (o) {
                                if (n.tagName === 'LI') {
                                    for(var d = this.domNode.contents(e[i])[0]; d && !this.domNode.isList(d); null){
                                        var p = d.nextSibling;
                                        (0, r.Ce)([
                                            d
                                        ], o);
                                        (0, r.V7)(e[i], {
                                            'list-style-type': 'none'
                                        });
                                        (0, r.V7)(o, {
                                            'list-style-type': ''
                                        });
                                        d = p;
                                    }
                                    (0, r.R3)([
                                        o.parentNode
                                    ], n);
                                    (0, r.og)(e[i]);
                                }
                            } else {
                                if (n.tagName === 'LI') {
                                    var c = (0, r.az)(e[i].parentNode.tagName);
                                    (0, r.R3)([
                                        c
                                    ], n);
                                    (0, r.R3)([
                                        e[i]
                                    ], c);
                                } else if (n.tagName === 'OL' || n.tagName === 'UL') {
                                    (0, r.R3)([
                                        e[i]
                                    ], n);
                                }
                            }
                        } else {
                            var u = e[i];
                            t = true;
                            this.noPreviousElement(u);
                        }
                    }
                    return t;
                };
                e.prototype.applyListsHandler = function(e) {
                    var t = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                    if (r.AR.userAgent.indexOf('Firefox') != -1 && t.startContainer === t.endContainer && t.startContainer === this.parent.editableElement) {
                        var i = t.startContainer.childNodes;
                        var n = ((i[(t.startOffset > 0) ? (t.startOffset - 1) : t.startOffset]) || t.startContainer);
                        var s = (t.endContainer.childNodes[(t.endOffset > 0) ? (t.endOffset - 1) : t.endOffset] || t.endContainer);
                        var o = s.lastChild.nodeName === 'BR' ? ((0, r.le)(s.lastChild.previousSibling) ? s : s.lastChild.previousSibling) : s.lastChild;
                        while(!(0, r.le)(o) && o.nodeName !== '#text' && o.nodeName !== 'IMG' && o.nodeName !== 'BR' && o.nodeName !== 'HR'){
                            o = o.lastChild;
                        }
                        this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, n, o, 0, o.textContent.length);
                        t = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                    }
                    if (t.startContainer === t.endContainer && t.startContainer === this.parent.editableElement && t.startOffset === t.endOffset && t.startOffset === 0 && this.parent.editableElement.textContent.length === 0 && (this.parent.editableElement.childNodes[0].nodeName != 'TABLE' && this.parent.editableElement.childNodes[0].nodeName != 'IMG')) {
                        var a = t.startContainer.childNodes[0];
                        this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, a, a, 0, 0);
                        t = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                    }
                    this.saveSelection = this.parent.nodeSelection.save(t, this.parent.currentDocument);
                    this.currentAction = e.subCommand;
                    this.currentAction = e.subCommand = this.currentAction === 'NumberFormatList' ? 'OL' : this.currentAction === 'BulletFormatList' ? 'UL' : this.currentAction;
                    this.domNode.setMarker(this.saveSelection);
                    var l = this.domNode.blockNodes();
                    if (e.enterAction === 'BR') {
                        this.setSelectionBRConfig();
                        var h = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument);
                        var c = this.parent.nodeSelection.getSelectionNodes(h);
                        var d = [];
                        if (c.length === 0) {
                            c.push(l[0]);
                        }
                        for(var p = 0; p < c.length; p++){
                            var u = c[p];
                            var f = void 0;
                            while(!this.parent.domNode.isBlockNode(u) && u !== this.parent.editableElement){
                                f = u;
                                u = u.parentElement;
                            }
                            if (this.parent.domNode.isBlockNode(u) && u === this.parent.editableElement) {
                                d.push(f);
                            }
                        }
                        for(var p = 0; p < d.length; p++){
                            if (!this.parent.domNode.isBlockNode(d[p])) {
                                var u = d[p];
                                var m = u;
                                while(u === this.parent.editableElement){
                                    m = u;
                                    u = u.parentElement;
                                }
                                var v = void 0;
                                if (this.parent.domNode.isBlockNode(m.parentElement) && m.parentElement === this.parent.editableElement) {
                                    v = (0, r.az)('p');
                                    m.parentElement.insertBefore(v, m);
                                    v.appendChild(m);
                                } else {
                                    v = m;
                                }
                                var g = v.previousSibling;
                                while(!(0, r.le)(g) && g.nodeName !== 'BR' && !this.parent.domNode.isBlockNode(g)){
                                    v.firstChild.parentElement.insertBefore(g, v.firstChild);
                                    g = v.previousSibling;
                                }
                                if (!(0, r.le)(g) && g.nodeName === 'BR') {
                                    (0, r.og)(g);
                                }
                                var b = v.nextSibling;
                                while(!(0, r.le)(b) && b.nodeName !== 'BR' && !this.parent.domNode.isBlockNode(b)){
                                    v.appendChild(b);
                                    b = v.nextSibling;
                                }
                                if (!(0, r.le)(b) && b.nodeName === 'BR') {
                                    (0, r.og)(b);
                                }
                            }
                        }
                        this.setSelectionBRConfig();
                        l = this.parent.domNode.blockNodes();
                    }
                    for(var p = 0; p < l.length; p++){
                        if (l[p].tagName === 'TABLE' && !t.collapsed) {
                            l.splice(p, 1);
                        }
                        if (l.length > 0 && l[p].tagName !== 'LI' && 'LI' === l[p].parentNode.tagName) {
                            l[p] = l[p].parentNode;
                        }
                    }
                    this.applyLists(l, this.currentAction, e.selector, e.item, e);
                    if (e.callBack) {
                        e.callBack({
                            requestType: this.currentAction,
                            event: e.event,
                            editorMode: 'HTML',
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.domNode.blockNodes()
                        });
                    }
                };
                e.prototype.setSelectionBRConfig = function() {
                    var e = this.parent.editableElement.querySelector('.' + I.startSelection);
                    var t = this.parent.editableElement.querySelector('.' + I.endSelection);
                    if ((0, r.le)(t)) {
                        this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, e, 0);
                    } else {
                        this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, e, t, 0, 0);
                    }
                };
                e.prototype.applyLists = function(e, t, i, n, s) {
                    var o = true;
                    if (this.isRevert(e, t, n) && (0, r.le)(n)) {
                        this.revertList(e, s);
                        this.removeEmptyListElements();
                    } else {
                        this.checkLists(e, t, n);
                        for(var a = 0; a < e.length; a++){
                            if (!(0, r.le)(n) && !(0, r.le)(n.listStyle)) {
                                if (n.listStyle === 'listImage') {
                                    (0, r.V7)(e[a], {
                                        'list-style-image': n.listImage
                                    });
                                } else {
                                    (0, r.V7)(e[a], {
                                        'list-style-image': 'none'
                                    });
                                    (0, r.V7)(e[a], {
                                        'list-style-type': n.listStyle.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase()
                                    });
                                }
                            }
                            if (e[a].getAttribute('contenteditable') === 'true' && e[a].childNodes.length === 1 && e[a].childNodes[0].nodeName === 'TABLE') {
                                var l = document.createElement(t);
                                l.innerHTML = '<li><br/></li>';
                                e[a].appendChild(l);
                            } else if ('LI' !== e[a].tagName && (0, r.le)(n)) {
                                o = false;
                                var h = e[a].tagName === 'IMG' ? '' : this.domNode.attributes(e[a]);
                                var c = '<' + t + '>';
                                var d = '</' + t + '>';
                                var p = 'li' + h;
                                var u = (e[a].tagName.toLowerCase() === T ? e[a].innerHTML : e[a].outerHTML);
                                var f = this.domNode.createTagString(p, null, u);
                                var m = c + f + d;
                                this.domNode.replaceWith(e[a], m);
                            } else if (!(0, r.le)(n) && 'LI' !== e[a].tagName) {
                                o = false;
                                var h = e[a].tagName === 'IMG' ? '' : this.domNode.attributes(e[a]);
                                var c = '<' + t + h + '>';
                                var d = '</' + t + '>';
                                var p = 'li';
                                var u = (e[a].tagName.toLowerCase() === T ? e[a].innerHTML : e[a].outerHTML);
                                var f = this.domNode.createTagString(p, null, u);
                                var m = c + f + d;
                                this.domNode.replaceWith(e[a], m);
                            }
                        }
                    }
                    this.cleanNode();
                    this.parent.editableElement.focus();
                    if ((0, B.FA)()) {
                        (0, B.ze)(this.parent.editableElement, i);
                    }
                    this.saveSelection = this.domNode.saveMarker(this.saveSelection);
                    this.saveSelection.restore();
                };
                e.prototype.removeEmptyListElements = function() {
                    var e = this.parent.editableElement.querySelectorAll('ol, ul');
                    for(var t = 0; t < e.length; t++){
                        if (e[t].textContent.trim() === '') {
                            (0, r.og)(e[t]);
                        }
                    }
                };
                e.prototype.isRevert = function(e, t, i) {
                    var n = true;
                    for(var s = 0; s < e.length; s++){
                        if (e[s].tagName !== 'LI') {
                            return false;
                        }
                        if (e[s].parentNode.tagName !== t || (0, r.le)(i) && e[s].parentNode.style.listStyleType !== '') {
                            n = false;
                        }
                    }
                    return n;
                };
                e.prototype.checkLists = function(e, t, i) {
                    var n = [];
                    for(var s = 0; s < e.length; s++){
                        var o = e[s].parentNode;
                        if (!(0, r.le)(i) && 'LI' === e[s].tagName && !(0, r.le)(i.listStyle)) {
                            if (i.listStyle === 'listImage') {
                                (0, r.V7)(o, {
                                    'list-style-image': i.listImage
                                });
                            } else {
                                (0, r.V7)(o, {
                                    'list-style-image': 'none'
                                });
                                (0, r.V7)(o, {
                                    'list-style-type': i.listStyle.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase()
                                });
                            }
                        }
                        if ((e[s].tagName === 'LI' && o.tagName !== t && n.indexOf(o) < 0) || (e[s].tagName === 'LI' && o.tagName === t && n.indexOf(o) < 0 && i !== null)) {
                            n.push(o);
                        }
                        if ((0, r.le)(i) && (o.tagName === t || ((o.tagName === 'UL' || o.tagName === 'OL') && o.hasAttribute('style')))) {
                            if (o.hasAttribute('style')) {
                                o.removeAttribute('style');
                            }
                        }
                    }
                    for(var a = n.length - 1; a >= 0; a--){
                        var l = n[a];
                        var h = '<' + t.toLowerCase() + ' ' + this.domNode.attributes(l) + '>' + l.innerHTML + '</' + t.toLowerCase() + '>';
                        this.domNode.replaceWith(n[a], h);
                    }
                };
                e.prototype.cleanNode = function() {
                    var e = this.parent.editableElement.querySelectorAll('ol + ol, ul + ul');
                    for(var t = 0; t < e.length; t++){
                        var i = e[t];
                        if (this.domNode.isList(i.previousElementSibling) && this.domNode.openTagString(i) === this.domNode.openTagString(i.previousElementSibling)) {
                            var n = this.domNode.contents(i);
                            for(var r = 0; r < n.length; r++){
                                i.previousElementSibling.appendChild(n[r]);
                            }
                            i.parentNode.removeChild(i);
                        }
                    }
                };
                e.prototype.findUnSelected = function(e, t) {
                    e = e.slice().reverse();
                    if (e.length > 0) {
                        var i = [];
                        var n = [];
                        var r = t[t.length - 1];
                        var s = [];
                        var o = [];
                        s = (r.childNodes);
                        for(var a = 0; a < s.length; a++){
                            if (s[a].tagName === 'OL' || s[a].tagName === 'UL') {
                                var l = s[a].querySelectorAll('li');
                                if (l.length > 0) {
                                    for(var h = 0; h < l.length; h++){
                                        o.push(l[h]);
                                    }
                                }
                            }
                        }
                        for(var c = 0; c < o.length; c++){
                            var d = 0;
                            for(var p = 0; p < e.length; p++){
                                if (!o[c].contains((e[p]))) {
                                    d = d + 1;
                                }
                            }
                            if (d === e.length) {
                                n.push(o[c]);
                            }
                        }
                        if (n.length > 0) {
                            for(var u = 0; u < n.length; u++){
                                if (this.domNode.contents(n[u])[0].nodeName !== 'OL' && this.domNode.contents(n[u])[0].nodeName !== 'UL') {
                                    i.push(n[u]);
                                }
                            }
                        }
                        if (i.length > 0) {
                            this.nestedList(i);
                        }
                    }
                };
                e.prototype.revertList = function(e, t) {
                    var i = [];
                    for(var n = e.length - 1; n >= 0; n--){
                        for(var s = n - 1; s >= 0; s--){
                            if (e[s].contains((e[n])) || e[s] === e[n]) {
                                i.push(e[n]);
                                e.splice(n, 1);
                                break;
                            }
                        }
                    }
                    this.findUnSelected(i, e);
                    var o = [];
                    for(var n = 0; n < e.length; n++){
                        var a = e[n];
                        if (this.domNode.contents(a)[0].nodeType === 3 && this.domNode.contents(a)[0].textContent.trim().length === 0) {
                            (0, r.og)(this.domNode.contents(a)[0]);
                        }
                        var l = e[n].parentNode;
                        var h = a.getAttribute('class');
                        if (i.length === 0) {
                            var c = e[n].querySelectorAll('ul, ol');
                            var d = c[0];
                            if (d) {
                                var p = d.querySelectorAll('li');
                                if (p) {
                                    var u = (0, r.az)(d.tagName);
                                    (0, r.R3)([
                                        u
                                    ], d.parentNode);
                                    var f = (0, r.az)('li', {
                                        styles: 'list-style-type: none;'
                                    });
                                    (0, r.R3)([
                                        f
                                    ], u);
                                    (0, r.R3)([
                                        d
                                    ], f);
                                }
                            }
                        }
                        if (a.parentNode.insertBefore(this.closeTag(l.tagName), a), 'LI' === l.parentNode.tagName || 'OL' === l.parentNode.tagName || 'UL' === l.parentNode.tagName) {
                            a.parentNode.insertBefore(this.closeTag('LI'), a);
                        } else {
                            var m = '';
                            if (h) {
                                m += ' class="' + h + '"';
                            }
                            if (T && 0 === a.querySelectorAll(k.join(', ')).length) {
                                var v = (0, r.le)(h) ? ' class="e-rte-wrap-inner"' : ' class="' + h + ' e-rte-wrap-inner"';
                                var g = '<' + T + v + this.domNode.attributes(l) + '></' + T + '>';
                                if (t.enterAction !== 'BR') {
                                    this.domNode.wrapInner(a, this.domNode.parseHTMLFragment(g));
                                }
                            } else if (this.domNode.contents(a)[0].nodeType === 3) {
                                var b = this.domNode.createTagString(T, l, this.parent.domNode.encode(this.domNode.contents(a)[0].textContent));
                                this.domNode.replaceWith(this.domNode.contents(a)[0], b);
                            } else if (this.domNode.contents(a)[0].classList.contains(I.startSelection) || this.domNode.contents(a)[0].classList.contains(I.endSelection)) {
                                var b = this.domNode.createTagString(T, l, this.domNode.contents(a)[0].outerHTML);
                                this.domNode.replaceWith(this.domNode.contents(a)[0], b);
                            } else {
                                var y = a.firstChild;
                                h = y.getAttribute('class');
                                (0, r.Y4)(y, this.domNode.rawAttributes(l));
                                if (h && y.getAttribute('class')) {
                                    (0, r.Y4)(y, {
                                        'class': h + ' ' + y.getAttribute('class')
                                    });
                                }
                            }
                            (0, r.R3)([
                                this.openTag('LI')
                            ], a);
                            (0, r.Ce)([
                                this.closeTag('LI')
                            ], a);
                        }
                        this.domNode.insertAfter(this.openTag(l.tagName), a);
                        if (l.parentNode.tagName === 'LI') {
                            l = l.parentNode.parentNode;
                        }
                        if (o.indexOf(l) < 0) {
                            o.push(l);
                        }
                    }
                    for(var n = 0; n < o.length; n++){
                        var C = o[n];
                        var E = C.innerHTML;
                        var S = /<span class="e-rte-list-close-([a-z]*)"><\/span>/g;
                        var w = /<span class="e-rte-list-open-([a-z]*)"><\/span>/g;
                        E = E.replace(S, '</$1>');
                        E = E.replace(w, '<$1 ' + this.domNode.attributes(C) + '>');
                        this.domNode.replaceWith(C, this.domNode.openTagString(C) + E.trim() + this.domNode.closeTagString(C));
                    }
                    var x = this.parent.editableElement.querySelectorAll('ul:empty, ol:empty');
                    for(var n = 0; n < x.length; n++){
                        (0, r.og)(x[n]);
                    }
                    var L = this.parent.editableElement.querySelectorAll('li:empty');
                    for(var n = 0; n < L.length; n++){
                        (0, r.og)(L[n]);
                    }
                };
                e.prototype.openTag = function(e) {
                    return this.domNode.parseHTMLFragment('<span class="e-rte-list-open-' + e.toLowerCase() + '"></span>');
                };
                e.prototype.closeTag = function(e) {
                    return this.domNode.parseHTMLFragment('<span class="e-rte-list-close-' + e.toLowerCase() + '"></span>');
                };
                return e;
            }());
            ;
            var j = (function() {
                function e() {}
                e.WrapBefore = function(e, t, i) {
                    t.innerText = e.textContent;
                    (!i) ? this.AppendBefore(t, e) : this.AppendBefore(t, e, true);
                    if (e.parentNode) {
                        e.parentNode.removeChild(e);
                    }
                    return t.childNodes[0];
                };
                e.Wrap = function(e, t) {
                    this.AppendBefore(t, e);
                    t.appendChild(e);
                    return e;
                };
                e.unwrap = function(e) {
                    var t = e.parentNode;
                    var i = [];
                    for(; e.firstChild; null){
                        i.push(t.insertBefore(e.firstChild, e));
                    }
                    t.removeChild(e);
                    return i;
                };
                e.AppendBefore = function(e, t, i) {
                    return (t.parentNode) ? ((!i) ? t.parentNode.insertBefore(e, t) : t.parentNode.insertBefore(e, t.nextSibling)) : t;
                };
                return e;
            }());
            ;
            var z = (function() {
                function e() {
                    this.enterAction = 'P';
                    this.position = -1;
                    this.nodeSelection = new M.q();
                }
                e.prototype.GetSpliceNode = function(e, t) {
                    t = this.SplitNode(e, t, true);
                    t = this.SplitNode(e, t, false);
                    return t;
                };
                e.prototype.SplitNode = function(e, t, i) {
                    if (t) {
                        var n = e.cloneRange();
                        var r = t.parentNode;
                        var s = this.nodeSelection.getIndex(t);
                        n.collapse(i);
                        (i) ? n.setStartBefore(t) : n.setEndAfter(t);
                        var o = n.extractContents();
                        if (i) {
                            t = r.childNodes[s];
                            o = this.spliceEmptyNode(o, false);
                            if (o && o.childNodes.length > 0) {
                                var a = (o.childNodes.length === 1 && o.childNodes[0].nodeName !== 'IMG' && this.isImgElm(o) && o.textContent === '') ? true : false;
                                if (!a) {
                                    if (t) {
                                        j.AppendBefore(o, t);
                                    } else {
                                        r.appendChild(o);
                                        var l = document.createElement('div');
                                        l.innerHTML = '&#65279;&#65279;';
                                        t = l.firstChild;
                                        r.appendChild(t);
                                    }
                                }
                            }
                        } else {
                            t = r.childNodes.length > 1 ? r.childNodes[s] : r.childNodes[0];
                            o = this.spliceEmptyNode(o, true);
                            if (o && o.childNodes.length > 0) {
                                var a = (o.childNodes.length === 1 && o.childNodes[0].nodeName !== 'IMG' && this.isImgElm(o) && o.textContent === '') ? true : false;
                                if (!a) {
                                    if (t) {
                                        j.AppendBefore(o, t, true);
                                    } else {
                                        r.appendChild(o);
                                        var l = document.createElement('div');
                                        l.innerHTML = '&#65279;&#65279;';
                                        r.insertBefore(l.firstChild, r.firstChild);
                                        t = r.firstChild;
                                    }
                                }
                            }
                        }
                        return t;
                    } else {
                        return null;
                    }
                };
                e.prototype.isImgElm = function(e) {
                    var t = true;
                    if (e.childNodes.length === 1 && e.childNodes[0].nodeName !== 'IMG') {
                        var i = e.childNodes[0];
                        for(var n = 0; !(0, r.le)(i.childNodes) && n < i.childNodes.length; n++){
                            if (i.childNodes[n].nodeName === 'IMG') {
                                t = false;
                            }
                        }
                    } else {
                        t = true;
                    }
                    return t;
                };
                e.prototype.spliceEmptyNode = function(e, t) {
                    var i;
                    if (e.childNodes.length === 1 && e.childNodes[0].nodeName === '#text' && e.childNodes[0].textContent === '' || e.textContent === '') {
                        i = -1;
                    } else {
                        i = e.childNodes.length - 1;
                    }
                    if (i > -1 && !t) {
                        this.spliceEmptyNode(e.childNodes[i], t);
                    } else if (i > -1) {
                        this.spliceEmptyNode(e.childNodes[0], t);
                    } else if (e.nodeType !== 3 && e.nodeType !== 11 && e.nodeName !== 'IMG') {
                        e.parentNode.removeChild(e);
                    }
                    return e;
                };
                e.prototype.GetCursorStart = function(e, t, i) {
                    e = (i) ? e : e.reverse();
                    var n = e[0];
                    for(var r = 0; r < e.length && ((i) ? (e[r] < t) : (e[r] >= t)); r++){
                        n = e[r];
                    }
                    return n;
                };
                e.prototype.GetCursorRange = function(e, t, i) {
                    var n = e.createRange();
                    var r = [];
                    r.push(0);
                    var s = this.TrimLineBreak(i.data);
                    var o = s.indexOf(' ', 0);
                    while(o !== -1){
                        if (r.indexOf(o) < 0) {
                            r.push(o);
                        }
                        if (new RegExp('\\s').test(s[o - 1]) && (r.indexOf(o - 1) < 0)) {
                            r.push(o - 1);
                        }
                        if (new RegExp('\\s').test(s[o + 1])) {
                            r.push(o + 1);
                        }
                        o = s.indexOf(' ', (o + 1));
                    }
                    r.push(s.length);
                    if ((r.indexOf(t.startOffset) >= 0) || ((r.indexOf(t.startOffset - 1) >= 0) && (t.startOffset !== 1 || (t.startOffset === 1 && new RegExp('\\s').test(s[0]))) || ((r[r.length - 1] - 1) === t.startOffset))) {
                        n = t;
                        this.position = 1;
                    } else {
                        var a = this.GetCursorStart(r, t.startOffset, true);
                        this.position = t.startOffset - a;
                        n.setStart(t.startContainer, a);
                        n.setEnd(t.startContainer, this.GetCursorStart(r, t.startOffset, false));
                    }
                    return n;
                };
                e.prototype.GetCursorNode = function(e, t, i) {
                    return this.GetSpliceNode(this.GetCursorRange(e, t, i), i);
                };
                e.prototype.TrimLineBreak = function(e) {
                    return e.replace(/(\r\n\t|\n|\r\t)/gm, ' ');
                };
                return e;
            }());
            ;
            var q = (function() {
                function e(e) {
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.observer.on(o.Kj, this.applyFormats, this);
                    this.parent.observer.on(o.My, this.onKeyUp, this);
                    this.parent.observer.on(o.kT, this.onKeyDown, this);
                };
                e.prototype.getParentNode = function(e) {
                    for(; e.parentNode && e.parentNode !== this.parent.editableElement; null){
                        e = e.parentNode;
                    }
                    return e;
                };
                e.prototype.onKeyUp = function(e) {
                    var t = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                    var i = t.endContainer;
                    var n = i.lastChild;
                    if (e.event.which === 13 && t.startContainer === i && i.nodeType !== 3) {
                        var s = (0, r.az)('p');
                        s.innerHTML = '<br>';
                        if (!(0, r.le)(n) && n && n.nodeName === 'BR' && (n.previousSibling && n.previousSibling.nodeName === 'TABLE')) {
                            i.replaceChild(s, n);
                            this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, s, 0);
                        } else {
                            var o = this.parent.nodeSelection.getSelectionNodeCollectionBr(t)[0];
                            if (!(0, r.le)(o) && o.nodeName === 'BR' && (o.previousSibling && o.previousSibling.nodeName === 'TABLE')) {
                                i.replaceChild(s, o);
                                this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, s, 0);
                            }
                        }
                    }
                };
                e.prototype.onKeyDown = function(e) {
                    if (e.event.which === 13) {
                        var t = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                        var i = (t.startContainer.textContent.length === 0 || t.startContainer.nodeName === 'PRE') ? t.startContainer : t.startContainer.parentElement;
                        var n = (t.endContainer.textContent.length === 0 || t.endContainer.nodeName === 'PRE') ? t.endContainer : t.endContainer.parentElement;
                        var s = (0, r.oq)(i, 'pre');
                        var o = (0, r.oq)(n, 'pre');
                        var a = !(0, r.le)(s) && !(0, r.le)(s.parentElement) && s.parentElement.tagName === 'LI';
                        if (a) {
                            return;
                        }
                        if ((((0, r.le)(s) && !(0, r.le)(o)) || (!(0, r.le)(s) && (0, r.le)(o)))) {
                            e.event.preventDefault();
                            this.deleteContent(t);
                            this.removeCodeContent(t);
                            t = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                            this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, n, 0);
                        }
                        if (e.event.which === 13 && !(0, r.le)(s) && !(0, r.le)(o)) {
                            e.event.preventDefault();
                            this.deleteContent(t);
                            this.removeCodeContent(t);
                            t = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                            var l = t.startContainer.childNodes[t.endOffset];
                            var h = t.startContainer.childNodes[t.endOffset - 1];
                            var c = t.startContainer;
                            if (!(0, r.le)(l) && !(0, r.le)(h) && (0, r.le)(l.nextSibling) && l.nodeName === 'BR' && h.nodeName === 'BR') {
                                this.paraFocus(t.startContainer, e.enterAction);
                            } else if ((c.textContent.charCodeAt(0) === 8203 && c.textContent.length === 1) || c.textContent.length === 0) {
                                while(c.parentElement.nodeName !== 'PRE' && (c.textContent.length === 1 || c.textContent.length === 0)){
                                    c = c.parentElement;
                                }
                                if (!(0, r.le)(c.previousSibling) && c.previousSibling.nodeName === 'BR' && (0, r.le)(c.nextSibling)) {
                                    this.paraFocus(c.parentElement);
                                } else {
                                    this.isNotEndCursor(s, t);
                                }
                            } else {
                                this.isNotEndCursor(s, t);
                            }
                        }
                    }
                };
                e.prototype.removeCodeContent = function(e) {
                    var t = new RegExp(String.fromCharCode(65279), 'g');
                    if (!(0, r.le)(e.endContainer.textContent.match(t))) {
                        var i = e.endContainer.textContent.charCodeAt(e.endOffset - 1) === 65279 ? e.endOffset - 2 : e.endOffset;
                        e.endContainer.textContent = e.endContainer.textContent.replace(t, '');
                        if (e.endContainer.textContent === '') {
                            this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, e.endContainer.parentElement, 0);
                        } else {
                            this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, e.endContainer, i);
                        }
                    }
                };
                e.prototype.deleteContent = function(e) {
                    if (e.startContainer !== e.endContainer || e.startOffset !== e.endOffset) {
                        e.deleteContents();
                    }
                };
                e.prototype.paraFocus = function(e, t) {
                    var i;
                    if (t === 'DIV') {
                        i = (0, r.az)('div');
                        i.innerHTML = '<br>';
                    } else if (t === 'BR') {
                        i = (0, r.az)('br');
                    } else {
                        i = (0, r.az)('p');
                        i.innerHTML = '<br>';
                    }
                    this.parent.domNode.insertAfter(i, e);
                    this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, i, 0);
                    (0, r.og)(e.lastChild);
                };
                e.prototype.isNotEndCursor = function(e, t) {
                    var i = new z();
                    var n = t.startOffset === e.lastChild.textContent.length && e.lastChild.textContent === t.startContainer.textContent;
                    if (e.textContent.indexOf(t.startContainer.textContent) === 0 && ((t.startOffset === 0 && t.endOffset === 0) || t.startContainer.nodeName === 'PRE')) {
                        this.insertMarker(e, t);
                        var s = (0, r.az)('br');
                        e.childNodes[t.endOffset].parentElement.insertBefore(s, e.childNodes[t.endOffset]);
                    } else {
                        var o = i.SplitNode(t, e, true);
                        this.insertMarker(e, t);
                        var a = e.previousElementSibling;
                        if (a.tagName === 'PRE') {
                            a.insertAdjacentHTML('beforeend', '<br>' + o.innerHTML);
                            (0, r.og)(e);
                        }
                    }
                    this.setCursorPosition(n, e);
                };
                e.prototype.setCursorPosition = function(e, t) {
                    var i = false;
                    var n = this.parent.editableElement.querySelector('.tempSpan');
                    var s = n.parentElement;
                    n.parentNode.textContent === '' ? i = true : this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, n, 0);
                    if (e) {
                        if (i) {
                            if (s === t) {
                                this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, n, 0);
                                (0, r.og)(n);
                            } else {
                                this.focusSelectionParent(n, s);
                            }
                        } else {
                            var o = (0, r.az)('br');
                            this.parent.domNode.insertAfter(o, n);
                            this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, n, 0);
                            (0, r.og)(n);
                        }
                    } else {
                        i ? this.focusSelectionParent(n, s) : (0, r.og)(n);
                    }
                };
                e.prototype.focusSelectionParent = function(e, t) {
                    (0, r.og)(e);
                    t.innerHTML = '\u200B';
                    this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, t, 0);
                };
                e.prototype.insertMarker = function(e, t) {
                    var i = (0, r.az)('span', {
                        className: 'tempSpan'
                    });
                    if (t.startContainer.nodeName === 'PRE') {
                        e.childNodes[t.endOffset].parentElement.insertBefore(i, e.childNodes[t.endOffset]);
                    } else {
                        t.startContainer.parentElement.insertBefore(i, t.startContainer);
                    }
                };
                e.prototype.applyFormats = function(e) {
                    var t = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                    var i = false;
                    if (this.parent.editableElement === t.endContainer && !(0, r.le)(this.parent.editableElement.children[t.endOffset - 1]) && this.parent.editableElement.children[t.endOffset - 1].tagName === 'TABLE' && !t.collapsed) {
                        i = true;
                    }
                    var n = this.parent.nodeSelection.save(t, this.parent.currentDocument);
                    this.parent.domNode.setMarker(n);
                    var s = this.parent.domNode.blockNodes();
                    if (e.enterAction === 'BR') {
                        this.setSelectionBRConfig();
                        var o = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument);
                        var a = this.parent.nodeSelection.getSelectionNodes(o);
                        var l = [];
                        if (a.length === 0) {
                            a.push(s[0]);
                        }
                        for(var h = 0; h < a.length; h++){
                            var c = a[h];
                            var d = void 0;
                            while(!this.parent.domNode.isBlockNode(c) && c !== this.parent.editableElement){
                                d = c;
                                c = c.parentElement;
                            }
                            if (this.parent.domNode.isBlockNode(c) && c === this.parent.editableElement) {
                                l.push(d);
                            }
                        }
                        for(var h = 0; h < l.length; h++){
                            if (!this.parent.domNode.isBlockNode(l[h])) {
                                var c = l[h];
                                var p = c;
                                while(c === this.parent.editableElement){
                                    p = c;
                                    c = c.parentElement;
                                }
                                var u = void 0;
                                if (this.parent.domNode.isBlockNode(p.parentElement) && p.parentElement === this.parent.editableElement) {
                                    u = (0, r.az)('div');
                                    p.parentElement.insertBefore(u, p);
                                    u.appendChild(p);
                                } else {
                                    u = p;
                                }
                                var f = u.previousSibling;
                                while(!(0, r.le)(f) && f.nodeName !== 'BR' && !this.parent.domNode.isBlockNode(f)){
                                    u.firstChild.parentElement.insertBefore(f, u.firstChild);
                                    f = u.previousSibling;
                                }
                                if (!(0, r.le)(f) && f.nodeName === 'BR') {
                                    (0, r.og)(f);
                                }
                                var m = u.nextSibling;
                                while(!(0, r.le)(m) && m.nodeName !== 'BR' && !this.parent.domNode.isBlockNode(m)){
                                    u.appendChild(m);
                                    m = u.nextSibling;
                                }
                                if (!(0, r.le)(m) && m.nodeName === 'BR') {
                                    (0, r.og)(m);
                                }
                            }
                        }
                        this.setSelectionBRConfig();
                        s = this.parent.domNode.blockNodes();
                    }
                    for(var h = 0; h < s.length; h++){
                        var v = void 0;
                        var g = void 0;
                        if (e.subCommand.toLowerCase() === 'blockquote') {
                            v = this.getParentNode(s[h]);
                            g = this.parent.domNode.isList(v) || v.tagName === 'TABLE' ? v.outerHTML : v.innerHTML;
                        } else {
                            v = s[h];
                            g = v.innerHTML;
                        }
                        if ((e.subCommand.toLowerCase() === v.tagName.toLowerCase() && (e.subCommand.toLowerCase() !== 'pre' || (!(0, r.le)(e.exeValue) && e.exeValue.name === 'dropDownSelect'))) || (0, r.le)(v.parentNode) || (v.tagName === 'TABLE' && e.subCommand.toLowerCase() === 'pre')) {
                            continue;
                        }
                        this.cleanFormats(v, e.subCommand);
                        var b = (e.subCommand.toLowerCase() === 'pre' && v.tagName.toLowerCase() === 'pre') ? 'p' : e.subCommand;
                        var y = this.parent.domNode.createTagString(b, v, g.replace(/>\s+</g, '><'));
                        if (v.tagName === 'LI') {
                            v.innerHTML = '';
                            v.insertAdjacentHTML('beforeend', y);
                        } else {
                            this.parent.domNode.replaceWith(v, y);
                        }
                    }
                    this.preFormatMerge();
                    var C = this.parent.editableElement.querySelector('.' + I.startSelection);
                    var E = this.parent.editableElement.querySelector('.' + I.endSelection);
                    if (!(0, r.le)(C) && !(0, r.le)(E)) {
                        C = C.lastChild;
                        E = E.lastChild;
                    }
                    n = this.parent.domNode.saveMarker(n, null);
                    if ((0, B.FA)()) {
                        (0, B.ze)(this.parent.editableElement, e.selector);
                    }
                    if (i) {
                        this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, C, E, 0, E.textContent.length);
                    } else {
                        n.restore();
                    }
                    if (e.callBack) {
                        e.callBack({
                            requestType: e.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.domNode.blockNodes()
                        });
                    }
                };
                e.prototype.setSelectionBRConfig = function() {
                    var e = this.parent.editableElement.querySelector('.' + I.startSelection);
                    var t = this.parent.editableElement.querySelector('.' + I.endSelection);
                    if ((0, r.le)(t)) {
                        this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, e, 0);
                    } else {
                        this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, e, t, 0, 0);
                    }
                };
                e.prototype.preFormatMerge = function() {
                    var e = this.parent.editableElement.querySelectorAll('PRE');
                    if (!(0, r.le)(e)) {
                        for(var t = 0; t < e.length; t++){
                            var i = e[t].previousElementSibling;
                            if (!(0, r.le)(i) && i.tagName === 'PRE') {
                                i.insertAdjacentHTML('beforeend', '<br>' + e[t].innerHTML);
                                (0, r.og)(e[t]);
                            }
                        }
                    }
                };
                e.prototype.cleanFormats = function(e, t) {
                    var i = [
                        'display',
                        'font-size',
                        'margin-top',
                        'margin-bottom',
                        'margin-left',
                        'margin-right',
                        'font-weight'
                    ];
                    t = t.toLowerCase();
                    for(var n = 0; n < i.length && (t !== 'p' && t !== 'blockquote' && t !== 'pre'); n++){
                        e.style.removeProperty(i[n]);
                    }
                };
                return e;
            }());
            ;
            var V = (function() {
                function e() {}
                e.Insert = function(e, t, i, n) {
                    var s;
                    if (typeof t === 'string') {
                        var o = document.createElement('div');
                        o.innerHTML = t;
                        s = n ? o : o.firstChild;
                    } else {
                        if (n && !(!(0, r.le)(t) && !(0, r.le)(t.classList) && t.classList.contains('pasteContent'))) {
                            var o = document.createElement('div');
                            o.appendChild(t);
                            s = o;
                        } else {
                            s = t;
                        }
                    }
                    var a = new M.q();
                    var l = new z();
                    var h = a.getRange(e);
                    if (h.startContainer === i && h.startContainer === h.endContainer && h.startOffset === 0 && h.startOffset === h.endOffset && i.textContent.length === 0 && i.children[0].tagName === 'P') {
                        a.setSelectionText(e, h.startContainer.children[0], h.startContainer.children[0], 0, 0);
                        h = a.getRange(e);
                    }
                    if (h.startContainer.nodeName === 'BR' && h.startOffset === 0 && h.startOffset === h.endOffset && h.startContainer === h.endContainer) {
                        var c = Array.prototype.slice.call(h.startContainer.parentElement.children).indexOf(h.startContainer);
                        a.setSelectionText(e, h.startContainer.parentElement, h.startContainer.parentElement, c + 1, c + 1);
                        h = a.getRange(e);
                    }
                    var d = h.startOffset === h.endOffset && h.startOffset === 0 && h.startContainer === h.endContainer;
                    var p = h.collapsed;
                    var u = this.getNodeCollection(h, a, s);
                    var f = (s.nodeName.toLowerCase() === 'table') ? this.closestEle(u[0].parentNode, i) : u[0];
                    if (n || (!(0, r.le)(s) && !(0, r.le)(s.classList) && s.classList.contains('pasteContent'))) {
                        this.pasteInsertHTML(u, s, h, a, l, e, p, f, i);
                        return;
                    }
                    if (i !== h.startContainer && ((!p && !(f.nodeType === Node.ELEMENT_NODE && L.indexOf(f.tagName.toLocaleLowerCase()) !== -1)) || (s.nodeName.toLowerCase() === 'table' && f && L.indexOf(f.tagName.toLocaleLowerCase()) === -1))) {
                        var m = l.GetSpliceNode(h, f);
                        var v = m.previousSibling;
                        var g = m.parentNode;
                        if (u.length === 1 || (s.nodeName.toLowerCase() === 'table' && m.childElementCount === 0)) {
                            a.setSelectionContents(e, m);
                            h = a.getRange(e);
                        } else {
                            var b = l.GetSpliceNode(h, u[u.length - 1].parentElement);
                            b = (0, r.le)(b) ? m : b;
                            a.setSelectionText(e, m, b, 0, (b.nodeType === 3) ? b.textContent.length : b.childNodes.length);
                            h = a.getRange(e);
                        }
                        h.extractContents();
                        if (t.tagName === 'TABLE') {
                            this.removeEmptyElements(i);
                        }
                        for(var y = 0; y < u.length; y++){
                            if (u[y].nodeType !== 3 && u[y].parentNode != null) {
                                if (u[y].nodeName === 'IMG') {
                                    continue;
                                }
                                u[y].parentNode.removeChild(u[y]);
                            }
                        }
                        if (v) {
                            j.AppendBefore(s, v, true);
                        } else {
                            var C = null;
                            while(g !== i && g.firstChild && (g.textContent.trim() === '')){
                                var E = g.parentNode;
                                C = g;
                                g = E;
                            }
                            if (C !== null) {
                                g = C;
                            }
                            if (g.firstChild && (g !== i || (s.nodeName === 'TABLE' && d && g === h.startContainer && g === h.endContainer))) {
                                if (g.textContent.trim() === '' && g !== i) {
                                    j.AppendBefore(s, g, false);
                                    (0, r.og)(g);
                                } else {
                                    j.AppendBefore(s, g.firstChild, false);
                                }
                            } else {
                                g.appendChild(s);
                            }
                        }
                        if (s.nodeName === 'IMG') {
                            this.imageFocus(s, a, e);
                        } else if (s.nodeType !== 3) {
                            a.setSelectionText(e, s, s, 0, s.childNodes.length);
                        } else {
                            a.setSelectionText(e, s, s, 0, s.textContent.length);
                        }
                    } else {
                        h.deleteContents();
                        if (d && h.startContainer.textContent === '' && h.startContainer.nodeName !== 'BR') {
                            h.startContainer.innerHTML = '';
                        }
                        if (r.AR.isIE) {
                            var S = e.createDocumentFragment();
                            S.appendChild(s);
                            h.insertNode(S);
                        } else if (h.startContainer.nodeType === 1 && h.startContainer.nodeName.toLowerCase() === 'hr' && h.endContainer.nodeName.toLowerCase() === 'hr') {
                            var w = h.startContainer.nextElementSibling;
                            if (w) {
                                if (w.querySelector('br')) {
                                    (0, r.og)(w.querySelector('br'));
                                }
                                w.appendChild(s);
                            }
                        } else {
                            if (h.startContainer.nodeName === 'BR') {
                                h.startContainer.parentElement.insertBefore(s, h.startContainer);
                            } else {
                                h.insertNode(s);
                            }
                        }
                        if (s.nodeType !== 3 && s.childNodes.length > 0) {
                            a.setSelectionText(e, s, s, 1, 1);
                        } else if (s.nodeName === 'IMG') {
                            this.imageFocus(s, a, e);
                        } else if (s.nodeType !== 3) {
                            a.setSelectionContents(e, s);
                        } else {
                            a.setSelectionText(e, s, s, s.textContent.length, s.textContent.length);
                        }
                    }
                };
                e.pasteInsertHTML = function(e, t, i, n, s, o, a, l, h) {
                    var c = i.startOffset === i.endOffset && i.startContainer === i.endContainer;
                    if (c && i.startContainer === h && h.textContent === '') {
                        var d = this.getImmediateBlockNode(e[e.length - 1], h);
                        n.setSelectionText(o, d, d, 0, 0);
                        i = n.getRange(o);
                    }
                    var p;
                    var u;
                    var f;
                    var m;
                    if (h !== i.startContainer && ((!a && !(l.nodeType === Node.ELEMENT_NODE && L.indexOf(l.tagName.toLocaleLowerCase()) !== -1)) || (t.nodeName.toLowerCase() === 'table' && l && L.indexOf(l.tagName.toLocaleLowerCase()) === -1))) {
                        m = s.GetSpliceNode(i, l);
                        u = (0, r.le)(m.previousSibling) ? m.parentNode.previousSibling : m.previousSibling;
                        if (e.length === 1) {
                            n.setSelectionContents(o, m);
                            i = n.getRange(o);
                            f = true;
                        } else {
                            p = s.GetSpliceNode(i, e[e.length - 1].parentElement);
                            p = (0, r.le)(p) ? m : p;
                            n.setSelectionText(o, m, p, 0, (p.nodeType === 3) ? p.textContent.length : p.childNodes.length);
                            i = n.getRange(o);
                            f = false;
                        }
                    }
                    var v = false;
                    this.removingComments(t);
                    var g = t.childNodes;
                    for(var b = 0; b < g.length; b++){
                        if (k.indexOf(g[b].nodeName.toLocaleLowerCase()) >= 0) {
                            v = true;
                            break;
                        }
                    }
                    var y;
                    var C = document.createDocumentFragment();
                    if (!v) {
                        if (!c) {
                            while(t.firstChild){
                                y = t.firstChild;
                                C.appendChild(t.firstChild);
                            }
                            if (f) {
                                m.parentNode.replaceChild(C, m);
                            } else {
                                i.deleteContents();
                                (0, r.og)(p);
                                !(0, r.le)(u) ? u.parentNode.appendChild(C) : h.appendChild(C);
                            }
                        } else {
                            var E = (0, r.az)('span', {
                                className: 'tempSpan'
                            });
                            var S = (0, r.oq)(i.startContainer.parentElement, 'a');
                            if (i.startContainer.nodeType === 3 && S && (0, r.oq)(S, 'span')) {
                                var w = this.getImmediateBlockNode(i.startContainer, h);
                                if (w.querySelectorAll('br').length > 0) {
                                    (0, r.og)(w.querySelector('br'));
                                }
                                var T = (0, r.oq)(S, 'span');
                                T.appendChild(E);
                            } else {
                                i.insertNode(E);
                            }
                            while(t.firstChild){
                                y = t.firstChild;
                                C.appendChild(t.firstChild);
                            }
                            E.parentNode.replaceChild(C, E);
                        }
                    } else {
                        this.insertTempNode(i, t, e, s, h);
                        var x = true;
                        var N = void 0;
                        var D = void 0;
                        var O = void 0;
                        if (!this.contentsDeleted) {
                            i.deleteContents();
                        }
                        while(t.firstChild){
                            if (t.firstChild.nodeName === '#text' && t.firstChild.textContent.trim() === '') {
                                (0, r.og)(t.firstChild);
                                continue;
                            }
                            if (t.firstChild.nodeName === '#text' && x || (this.inlineNode.indexOf(t.firstChild.nodeName.toLocaleLowerCase()) >= 0 && x)) {
                                y = t.firstChild;
                                if ((0, r.le)(t.previousElementSibling)) {
                                    var A = (0, r.az)('p');
                                    t.parentElement.insertBefore(A, t);
                                }
                                t.previousElementSibling.appendChild(t.firstChild);
                            } else {
                                y = t.firstChild;
                                if (t.firstChild.nodeName === '#text' || (this.inlineNode.indexOf(t.firstChild.nodeName.toLocaleLowerCase()) >= 0)) {
                                    if (!N) {
                                        D = (0, r.az)('p');
                                        D.appendChild(t.firstChild);
                                        C.appendChild(D);
                                    } else {
                                        O.appendChild(t.firstChild);
                                        C.appendChild(O);
                                    }
                                    O = D;
                                    N = true;
                                } else {
                                    C.appendChild(t.firstChild);
                                    N = false;
                                }
                                x = false;
                            }
                        }
                        t.parentNode.replaceChild(C, t);
                    }
                    if (y.nodeName === '#text') {
                        this.placeCursorEnd(y, t, n, o, h);
                    } else {
                        this.cursorPos(y, t, n, o, h);
                    }
                };
                e.placeCursorEnd = function(e, t, i, n, s) {
                    e = e.nodeName === 'BR' ? ((0, r.le)(e.previousSibling) ? e.parentNode : e.previousSibling) : e;
                    while(!(0, r.le)(e) && e.nodeName !== '#text' && e.nodeName !== 'IMG' && e.nodeName !== 'BR' && e.nodeName !== 'HR'){
                        e = e.lastChild;
                    }
                    e = (0, r.le)(e) ? t : e;
                    if (e.nodeName === 'IMG') {
                        this.imageFocus(e, i, n);
                    } else {
                        i.setSelectionText(n, e, e, e.textContent.length, e.textContent.length);
                    }
                    this.removeEmptyElements(s);
                };
                e.getNodeCollection = function(e, t, i) {
                    var n = [];
                    if (e.startOffset === e.endOffset && e.startContainer === e.endContainer && e.startContainer.nodeName != 'BR' && e.startContainer.childNodes.length > 0 && (e.startContainer.nodeName === 'TD' || (e.startContainer.nodeType !== 3 && i.classList && i.classList.contains('pasteContent')))) {
                        n.push(e.startContainer.childNodes[e.endOffset]);
                    } else {
                        n = t.getInsertNodeCollection(e);
                    }
                    return n;
                };
                e.insertTempNode = function(e, t, i, n, s) {
                    if (e.startContainer === s && !(0, r.le)(e.startContainer.childNodes[e.endOffset - 1]) && e.startContainer.childNodes[e.endOffset - 1].nodeName === 'TABLE') {
                        if ((0, r.le)(e.startContainer.childNodes[e.endOffset - 1].nextSibling)) {
                            e.startContainer.appendChild(t);
                        } else {
                            e.startContainer.insertBefore(t, e.startContainer.childNodes[e.endOffset - 1].nextSibling);
                        }
                    } else if (e.startContainer === s && !(0, r.le)(e.startContainer.childNodes[e.endOffset]) && e.startContainer.childNodes[e.endOffset].nodeName === 'TABLE') {
                        e.startContainer.insertBefore(t, e.startContainer.childNodes[e.endOffset]);
                    } else if (e.startContainer === e.endContainer && e.startContainer.nodeType !== 3 && t.firstChild.nodeName === 'HR') {
                        if (e.startContainer.classList.contains('e-content') || e.startContainer.nodeName === 'BODY') {
                            e.startContainer.appendChild(t);
                        } else {
                            e.startContainer.parentNode.insertBefore(t, e.startContainer);
                        }
                    } else {
                        var o = this.getImmediateBlockNode(i[i.length - 1], s);
                        if (((0, r.le)(o) || (0, r.le)(o.parentElement)) && e.endContainer.nodeType !== 3) {
                            o = e.endContainer;
                            e.setEnd(o, e.endContainer.textContent.length);
                        }
                        if (o.nodeName === 'BODY' && e.startContainer === e.endContainer && e.startContainer.nodeType === 1) {
                            o = e.startContainer;
                        }
                        if (o.closest('LI') && t && t.firstElementChild && ((t).firstElementChild.tagName === 'OL' || t.firstElementChild.tagName === 'UL')) {
                            var a = void 0;
                            while(t.firstElementChild.lastElementChild && t.firstElementChild.lastElementChild.tagName === 'LI'){
                                a = t.firstElementChild.lastElementChild;
                                a.style.removeProperty('margin-left');
                                a.style.removeProperty('margin-top');
                                a.style.removeProperty('margin-bottom');
                                t.firstElementChild.insertAdjacentElement('afterend', a);
                            }
                        }
                        if (o.nodeName === 'TD' || o.nodeName === 'TH' || o.nodeName === 'TR') {
                            var l = (0, r.az)('span', {
                                className: 'tempSpan'
                            });
                            e.insertNode(l);
                            l.parentNode.replaceChild(t, l);
                        } else {
                            var h = new M.q();
                            var c = this.getNodeCollection(e, h, t)[this.getNodeCollection(e, h, t).length - 1];
                            var d = void 0;
                            if ((c.nodeName === 'BR' || c.nodeName === 'HR' || (c.nodeName === '#text' && !(0, r.le)(c.parentElement) && c.parentElement.nodeName === 'LI')) && (!(0, r.le)(c.parentElement) && c.parentElement.textContent.trim().length === 0)) {
                                d = c;
                                if (c.parentElement.nodeName === 'LI' && !(0, r.le)(c.nextSibling) && c.nextSibling.nodeName === 'BR') {
                                    (0, r.og)(c.nextSibling);
                                }
                            } else if (c.nodeName === '#text' && !(0, r.le)(c.parentElement) && c.parentElement.nodeName === 'LI' && c.parentElement.textContent.trim().length > 0) {
                                d = c;
                                if (c.parentElement.nodeName === 'LI' && !(0, r.le)(c.nextSibling) && c.nextSibling.nodeName === 'BR') {
                                    (0, r.og)(c.nextSibling);
                                }
                                if (!e.collapsed) {
                                    e.deleteContents();
                                }
                                e.insertNode(t);
                                this.contentsDeleted = true;
                                return;
                            } else {
                                d = n.GetSpliceNode(e, o);
                            }
                            d.parentNode.replaceChild(t, d);
                        }
                    }
                };
                e.cursorPos = function(e, t, i, n, s) {
                    e.classList.add('lastNode');
                    s.innerHTML = (0, B.Hl)(s.innerHTML);
                    e = s.querySelector('.lastNode');
                    if (!(0, r.le)(e)) {
                        this.placeCursorEnd(e, t, i, n, s);
                        e.classList.remove('lastNode');
                        if (e.classList.length === 0) {
                            e.removeAttribute('class');
                        }
                    }
                };
                e.imageFocus = function(e, t, i) {
                    var n = document.createTextNode(' ');
                    e.parentNode.insertBefore(n, e.nextSibling);
                    t.setSelectionText(i, e.nextSibling, e.nextSibling, 0, 0);
                };
                e.getImmediateBlockNode = function(e, t) {
                    do {
                        e = e.parentNode;
                    }while (e && k.indexOf(e.nodeName.toLocaleLowerCase()) < 0)
                    return e;
                };
                e.removingComments = function(e) {
                    var t = e.innerHTML;
                    t = t.replace(/<!--[\s\S]*?-->/g, '');
                    e.innerHTML = t;
                };
                e.findDetachEmptyElem = function(e) {
                    var t;
                    if (!(0, r.le)(e.parentElement)) {
                        if (e.parentElement.textContent.trim() === '' && e.parentElement.contentEditable !== 'true') {
                            t = this.findDetachEmptyElem(e.parentElement);
                        } else {
                            t = e;
                        }
                    } else {
                        t = null;
                    }
                    return t;
                };
                e.removeEmptyElements = function(e) {
                    var t = e.querySelectorAll(':empty');
                    for(var i = 0; i < t.length; i++){
                        if (P.indexOf(t[i].tagName.toLowerCase()) < 0) {
                            var n = this.findDetachEmptyElem(t[i]);
                            if (!(0, r.le)(n)) {
                                (0, r.og)(n);
                            }
                        }
                    }
                };
                e.closestEle = function(e, t) {
                    var i = e;
                    while(i && i.nodeType === 1){
                        if (i.parentNode === t || (!(0, r.le)(i.parentNode.tagName) && x.indexOf(i.parentNode.tagName.toLocaleLowerCase()) !== -1)) {
                            return i;
                        }
                        i = i.parentNode;
                    }
                    return null;
                };
                e.inlineNode = [
                    'a',
                    'abbr',
                    'acronym',
                    'audio',
                    'b',
                    'bdi',
                    'bdo',
                    'big',
                    'br',
                    'button',
                    'canvas',
                    'cite',
                    'code',
                    'data',
                    'datalist',
                    'del',
                    'dfn',
                    'em',
                    'embed',
                    'font',
                    'i',
                    'iframe',
                    'img',
                    'input',
                    'ins',
                    'kbd',
                    'label',
                    'map',
                    'mark',
                    'meter',
                    'noscript',
                    'object',
                    'output',
                    'picture',
                    'progress',
                    'q',
                    'ruby',
                    's',
                    'samp',
                    'script',
                    'select',
                    'slot',
                    'small',
                    'span',
                    'strong',
                    'sub',
                    'sup',
                    'svg',
                    'template',
                    'textarea',
                    'time',
                    'u',
                    'tt',
                    'var',
                    'video',
                    'wbr'
                ];
                e.contentsDeleted = false;
                return e;
            }());
            ;
            var _ = (function() {
                function e(e) {
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.observer.on(c, this.linkCommand, this);
                };
                e.prototype.linkCommand = function(e) {
                    switch(e.value.toString().toLocaleLowerCase()){
                        case 'createlink':
                        case 'editlink':
                            this.createLink(e);
                            break;
                        case 'openlink':
                            this.openLink(e);
                            break;
                        case 'removelink':
                            this.removeLink(e);
                            break;
                    }
                };
                e.prototype.createLink = function(e) {
                    var t = (!(0, r.le)(e.item.selectParent) && e.item.selectParent.length > 0) && (0, r.oq)(e.item.selectParent[0], 'a');
                    t = !(0, r.le)(t) ? t : (!(0, r.le)(e.item.selectParent) && e.item.selectParent.length > 0) ? (e.item.selectParent[0]) : null;
                    if (!(0, r.le)(t) && t.tagName === 'A') {
                        var i = t;
                        var n = '';
                        if (!(0, r.le)(e.item.url)) {
                            i.setAttribute('href', e.item.url);
                        }
                        if (!(0, r.le)(e.item.title)) {
                            i.setAttribute('title', e.item.title);
                        }
                        if (!(0, r.le)(e.item.text) && e.item.text !== '') {
                            n = i.innerText;
                            i.innerText = e.item.text;
                        }
                        if (!(0, r.le)(e.item.target)) {
                            i.setAttribute('target', e.item.target);
                        } else {
                            i.removeAttribute('target');
                        }
                        if (n === e.item.text) {
                            e.item.selection.setSelectionText(this.parent.currentDocument, i, i, 1, 1);
                            e.item.selection.restore();
                        } else {
                            var s = e.item.action === 'Paste' ? i.childNodes[0].textContent.length : 0;
                            e.item.selection.setSelectionText(this.parent.currentDocument, i.childNodes[0], i.childNodes[0], s, i.childNodes[0].textContent.length);
                        }
                    } else {
                        var o = new M.q();
                        var a = o.getRange(this.parent.currentDocument);
                        if (a.endContainer.nodeName === '#text' && a.startContainer.textContent.length === (a.endOffset + 1) && a.endContainer.textContent.charAt(a.endOffset) === ' ' && a.endContainer.nextSibling.nodeName === 'A') {
                            o.setSelectionText(this.parent.currentDocument, a.startContainer, a.endContainer, a.startOffset, a.endOffset + 1);
                            a = o.getRange(this.parent.currentDocument);
                        }
                        var l = (0, r.le)(e.item.text) ? true : e.item.text.replace(/ /g, '').localeCompare(a.toString().replace(/\n/g, ' ').replace(/ /g, '')) < 0;
                        if (e.event && e.event.type === 'keydown' && (e.event.keyCode === 32 || e.event.keyCode === 13) || e.item.action === 'Paste' || a.collapsed || l) {
                            var h = this.createAchorNode(e);
                            h.innerText = e.item.text === '' ? e.item.url : e.item.text;
                            e.item.selection.restore();
                            V.Insert(this.parent.currentDocument, h, this.parent.editableElement);
                            if (e.event && e.event.type === 'keydown' && (e.event.keyCode === 32 || e.event.keyCode === 13)) {
                                var c = e.item.selection.range.startContainer;
                                c.textContent = this.removeText(c.textContent, e.item.text);
                            } else {
                                var s = e.item.action === 'Paste' ? h.childNodes[0].textContent.length : 0;
                                e.item.selection.setSelectionText(this.parent.currentDocument, h.childNodes[0], h.childNodes[0], s, h.childNodes[0].textContent.length);
                            }
                        } else {
                            this.createLinkNode(e);
                        }
                    }
                    if (e.callBack) {
                        e.callBack({
                            requestType: 'Links',
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                };
                e.prototype.createLinkNode = function(e) {
                    var t = new M.q();
                    var i = new z();
                    var n = t.getRange(this.parent.currentDocument);
                    var r = this.getSelectionNodes(t.getNodeCollection(n));
                    var s = t.save(n, this.parent.currentDocument);
                    var o = [];
                    var a = [];
                    var l;
                    var h = [];
                    var c = [];
                    var d = [];
                    var p;
                    for(var u = 0; u < r.length; u++){
                        r[u] = i.GetSpliceNode(n, r[u]);
                        o[u] = r[u];
                    }
                    for(var f = 0; f < o.length; f++){
                        var m = true;
                        l = o[f];
                        while(m === true){
                            if (l.parentNode.nodeName === 'A') {
                                var v = l.parentNode;
                                l.parentNode.parentNode.insertBefore(v.firstChild, v);
                                l.parentNode.removeChild(v);
                            }
                            if (this.isBlockNode(l.parentNode) || o.length === 0 || f === 0 || f === o.length - 1 || n.startContainer.nodeType === 3) {
                                a[f] = l;
                                m = false;
                            } else {
                                l = l.parentNode;
                            }
                        }
                    }
                    for(var f = 0, g = 0; f < a.length; f++){
                        if (f === 0) {
                            d[g] = a[f];
                        }
                        if (a.length > 1 && f < a.length - 1) {
                            if ((a[f].parentElement === a[f + 1].parentElement) && (a[f] === a[f + 1])) {
                                continue;
                            } else {
                                d[g + 1] = a[f + 1];
                                g++;
                            }
                        }
                    }
                    var b = 0;
                    c[b] = this.createAchorNode(e);
                    for(var f = 0; f < d.length; f++){
                        if (f === 0) {
                            p = d[f].cloneNode(true);
                            c[f].appendChild(p);
                        }
                        if (f < d.length - 1) {
                            if (d[f].parentNode === d[f + 1].parentNode) {
                                var y = d[f + 1].cloneNode(true);
                                c[b].appendChild(y);
                            } else {
                                b = b + 1;
                                c[b] = this.createAchorNode(e);
                                p = d[f + 1].cloneNode(true);
                                c[b].appendChild(p);
                            }
                        }
                    }
                    this.parent.nodeSelection.setRange(document, s.range);
                    for(var f = 0, C = 0, E = 0; f <= d.length; f++){
                        if (f === 0) {
                            d[f].parentNode.insertBefore(c[C], d[f].nextSibling);
                            if (this.parent.domNode.blockNodes().length === 1) {
                                this.parent.nodeSelection.setSelectionNode(this.parent.currentDocument, c[C]);
                            }
                            h[E] = d[f];
                            E++;
                        }
                        if (f < d.length - 1) {
                            if (d[f].parentNode === d[f + 1].parentNode) {
                                h[E] = d[f + 1];
                                E++;
                            } else {
                                C = C + 1;
                                d[f + 1].parentNode.insertBefore(c[C], d[f + 1]);
                                h[E] = d[f + 1];
                                E++;
                            }
                        }
                    }
                    for(var f = 0; f < h.length; f++){
                        if (h[f].parentNode) {
                            h[f].parentNode.removeChild(h[f]);
                        }
                    }
                };
                e.prototype.createAchorNode = function(e) {
                    var t = (0, r.az)('a', {
                        className: 'e-rte-anchor',
                        attrs: {
                            href: e.item.url,
                            title: (0, r.le)(e.item.title) || e.item.title === '' ? e.item.url : e.item.title
                        }
                    });
                    if (!(0, r.le)(e.item.target)) {
                        t.setAttribute('target', e.item.target);
                    }
                    return t;
                };
                e.prototype.getSelectionNodes = function(e) {
                    e = e.reverse();
                    for(var t = 0; t < e.length; t++){
                        if (e[t].nodeType !== 3 || e[t].textContent.trim() === '') {
                            if (e[t].nodeName !== 'IMG') {
                                e.splice(t, 1);
                                t--;
                            }
                        }
                    }
                    return e.reverse();
                };
                e.prototype.isBlockNode = function(e) {
                    return (!!e && (e.nodeType === Node.ELEMENT_NODE && k.indexOf(e.tagName.toLowerCase()) >= 0));
                };
                e.prototype.removeText = function(e, t) {
                    var i = e.split(' ');
                    for(var n = 0; n < i.length; n++){
                        if (i[n] === t) {
                            i.splice(n, 1);
                            n--;
                        }
                    }
                    return i.join(' ') + ' ';
                };
                e.prototype.openLink = function(e) {
                    document.defaultView.open(e.item.url, e.item.target);
                    this.callBack(e);
                };
                e.prototype.removeLink = function(e) {
                    var t = this.parent.domNode.blockNodes();
                    if (t.length < 2) {
                        this.parent.domNode.setMarker(e.item.selection);
                        var i = (0, r.oq)(e.item.selectParent[0], 'a');
                        var n = i ? i : e.item.selectParent[0];
                        var s = n.parentNode;
                        var o = [];
                        for(; n.firstChild; null){
                            o.push(s.insertBefore(n.firstChild, n));
                        }
                        s.removeChild(n);
                        if (o && o.length === 1) {
                            e.item.selection.startContainer = e.item.selection.getNodeArray(o[o.length - 1], true);
                            e.item.selection.endContainer = e.item.selection.startContainer;
                        }
                        e.item.selection = this.parent.domNode.saveMarker(e.item.selection);
                    } else {
                        for(var a = 0; a < t.length; a++){
                            var l = t[a].querySelectorAll('a');
                            for(var h = 0; h < l.length; h++){
                                if (document.getSelection().containsNode(l[h], true)) {
                                    l[h].outerHTML = l[h].innerHTML;
                                }
                            }
                        }
                    }
                    e.item.selection.restore();
                    this.callBack(e);
                };
                e.prototype.callBack = function(e) {
                    if (e.callBack) {
                        e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                };
                return e;
            }());
            ;
            var U = (function() {
                function e(e) {
                    this.alignments = {
                        'JustifyLeft': 'left',
                        'JustifyCenter': 'center',
                        'JustifyRight': 'right',
                        'JustifyFull': 'justify'
                    };
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.observer.on(S, this.applyAlignment, this);
                    this.parent.observer.on(o.kT, this.onKeyDown, this);
                };
                e.prototype.onKeyDown = function(e) {
                    switch(e.event.action){
                        case 'justify-center':
                            this.applyAlignment({
                                subCommand: 'JustifyCenter',
                                callBack: e.callBack
                            });
                            e.event.preventDefault();
                            break;
                        case 'justify-full':
                            this.applyAlignment({
                                subCommand: 'JustifyFull',
                                callBack: e.callBack
                            });
                            e.event.preventDefault();
                            break;
                        case 'justify-left':
                            this.applyAlignment({
                                subCommand: 'JustifyLeft',
                                callBack: e.callBack
                            });
                            e.event.preventDefault();
                            break;
                        case 'justify-right':
                            this.applyAlignment({
                                subCommand: 'JustifyRight',
                                callBack: e.callBack
                            });
                            e.event.preventDefault();
                            break;
                    }
                };
                e.prototype.getTableNode = function(e) {
                    var t = e.startContainer.nodeType === Node.ELEMENT_NODE ? e.startContainer : e.startContainer.parentNode;
                    var i = (0, r.oq)(t, 'td,th');
                    return [
                        i
                    ];
                };
                e.prototype.applyAlignment = function(e) {
                    var t = e.value === 'Table' ? true : false;
                    var i = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                    var n = this.parent.nodeSelection.save(i, this.parent.currentDocument);
                    if (!t) {
                        this.parent.domNode.setMarker(n);
                        var s = this.parent.domNode.blockNodes();
                        for(var o = 0; o < s.length; o++){
                            var a = s[o];
                            (0, r.V7)(a, {
                                'text-align': this.alignments[e.subCommand]
                            });
                        }
                        var l = this.parent.domNode.getImageTagInSelection();
                        for(var o = 0; o < l.length; o++){
                            var h = [];
                            h.push(l[o]);
                            this.parent.imgObj.imageCommand({
                                item: {
                                    selectNode: h
                                },
                                subCommand: e.subCommand,
                                value: e.subCommand,
                                callBack: e.callBack,
                                selector: e.selector
                            });
                        }
                        this.parent.editableElement.focus();
                        n = this.parent.domNode.saveMarker(n);
                        if ((0, B.FA)()) {
                            (0, B.ze)(this.parent.editableElement, e.selector);
                        }
                        n.restore();
                    } else {
                        (0, r.V7)(this.getTableNode(i)[0], {
                            'text-align': this.alignments[e.subCommand]
                        });
                    }
                    if (e.callBack) {
                        e.callBack({
                            requestType: e.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: (t ? this.getTableNode(i) : this.parent.domNode.blockNodes())
                        });
                    }
                };
                return e;
            }());
            ;
            var W = (function() {
                function e(e) {
                    this.indentValue = 20;
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.observer.on(w, this.applyIndents, this);
                    this.parent.observer.on(o.kT, this.onKeyDown, this);
                };
                e.prototype.onKeyDown = function(e) {
                    switch(e.event.action){
                        case 'indents':
                            this.applyIndents({
                                subCommand: 'Indent',
                                callBack: e.callBack
                            });
                            e.event.preventDefault();
                            break;
                        case 'outdents':
                            this.applyIndents({
                                subCommand: 'Outdent',
                                callBack: e.callBack
                            });
                            e.event.preventDefault();
                            break;
                    }
                };
                e.prototype.applyIndents = function(e) {
                    var t = this.parent.editableElement;
                    var i = t.classList.contains('e-rtl');
                    var n = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                    var r = this.parent.nodeSelection.save(n, this.parent.currentDocument);
                    this.parent.domNode.setMarker(r);
                    var s = this.parent.domNode.blockNodes();
                    var a = s.slice();
                    var l = [];
                    for(var h = 0; h < a.length; h++){
                        if (a[h].tagName !== 'LI' && 'LI' === a[h].parentNode.tagName) {
                            s.splice(s.indexOf(a[h]), 1);
                            l.push(a[h].parentNode);
                        } else if (a[h].tagName === 'LI') {
                            s.splice(s.indexOf(a[h]), 1);
                            l.push(a[h]);
                        }
                    }
                    if (l.length > 0) {
                        this.parent.observer.notify(o.kT, {
                            event: {
                                preventDefault: function() {
                                    return;
                                },
                                stopPropagation: function() {
                                    return;
                                },
                                shiftKey: (e.subCommand === 'Indent' ? false : true),
                                which: 9,
                                action: 'indent'
                            },
                            ignoreDefault: true
                        });
                    }
                    for(var h = 0; h < s.length; h++){
                        var c = s[h];
                        var d = i ? c.style.marginRight : c.style.marginLeft;
                        var p = void 0;
                        if (e.subCommand === 'Indent') {
                            p = d === '' ? this.indentValue + 'px' : parseInt(d, null) + this.indentValue + 'px';
                            i ? (c.style.marginRight = p) : (c.style.marginLeft = p);
                        } else {
                            p = (d === '' || d === '0px') ? '' : parseInt(d, null) - this.indentValue + 'px';
                            i ? (c.style.marginRight = p) : (c.style.marginLeft = p);
                        }
                    }
                    t.focus();
                    if ((0, B.FA)()) {
                        (0, B.ze)(t, e.selector);
                    }
                    r = this.parent.domNode.saveMarker(r);
                    r.restore();
                    if (e.callBack) {
                        e.callBack({
                            requestType: e.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.domNode.blockNodes()
                        });
                    }
                };
                return e;
            }());
            ;
            var Z = 'e-imgright';
            var Y = 'e-imgleft';
            var X = 'e-imgcenter';
            var G = 'e-imgbreak';
            var K = 'e-img-caption';
            var J = 'e-rte-img-caption';
            var $ = 'e-caption-inline';
            var Q = 'e-imginline';
            ;
            var ee = (function() {
                function e(e) {
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.observer.on(l, this.imageCommand, this);
                };
                e.prototype.imageCommand = function(e) {
                    switch(e.value.toString().toLowerCase()){
                        case 'image':
                        case 'replace':
                            this.createImage(e);
                            break;
                        case 'insertlink':
                            this.insertImageLink(e);
                            break;
                        case 'openimagelink':
                            this.openImageLink(e);
                            break;
                        case 'editimagelink':
                            this.editImageLink(e);
                            break;
                        case 'removeimagelink':
                            this.removeImageLink(e);
                            break;
                        case 'remove':
                            this.removeImage(e);
                            break;
                        case 'alttext':
                            this.insertAltTextImage(e);
                            break;
                        case 'dimension':
                            this.imageDimension(e);
                            break;
                        case 'caption':
                            this.imageCaption(e);
                            break;
                        case 'justifyleft':
                            this.imageJustifyLeft(e);
                            break;
                        case 'justifycenter':
                            this.imageJustifyCenter(e);
                            break;
                        case 'justifyright':
                            this.imageJustifyRight(e);
                            break;
                        case 'inline':
                            this.imageInline(e);
                            break;
                        case 'break':
                            this.imageBreak(e);
                            break;
                    }
                };
                e.prototype.createImage = function(e) {
                    var t = this;
                    var i = false;
                    e.item.url = (0, r.le)(e.item.url) || e.item.url === 'undefined' ? e.item.src : e.item.url;
                    if (!(0, r.le)(e.item.selectParent) && e.item.selectParent[0].tagName === 'IMG') {
                        var n = e.item.selectParent[0];
                        this.setStyle(n, e);
                        i = true;
                    } else {
                        var s = (0, r.az)('img');
                        this.setStyle(s, e);
                        if (!(0, r.le)(e.item.selection)) {
                            e.item.selection.restore();
                        }
                        if (!(0, r.le)(e.selector) && e.selector === 'pasteCleanupModule') {
                            e.callBack({
                                requestType: 'Images',
                                editorMode: 'HTML',
                                event: e.event,
                                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                                elements: [
                                    s
                                ]
                            });
                        } else {
                            V.Insert(this.parent.currentDocument, s, this.parent.editableElement);
                        }
                    }
                    if (e.callBack && ((0, r.le)(e.selector) || !(0, r.le)(e.selector) && e.selector !== 'pasteCleanupModule')) {
                        var o = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)[0];
                        var a = (e.value === 'Replace' || i) ? e.item.selectParent[0] : (r.AR.isIE ? o.previousSibling : o.previousElementSibling);
                        a.addEventListener('load', function() {
                            if (e.value !== 'Replace' || !i) {
                                e.callBack({
                                    requestType: 'Images',
                                    editorMode: 'HTML',
                                    event: e.event,
                                    range: t.parent.nodeSelection.getRange(t.parent.currentDocument),
                                    elements: [
                                        a
                                    ]
                                });
                            }
                        });
                    }
                };
                e.prototype.setStyle = function(e, t) {
                    if (!(0, r.le)(t.item.url)) {
                        e.setAttribute('src', t.item.url);
                    }
                    e.setAttribute('class', 'e-rte-image' + ((0, r.le)(t.item.cssClass) ? '' : ' ' + t.item.cssClass));
                    if (!(0, r.le)(t.item.altText)) {
                        e.setAttribute('alt', t.item.altText);
                    }
                    if (!(0, r.le)(t.item.width) && !(0, r.le)(t.item.width.width)) {
                        e.setAttribute('width', this.calculateStyleValue(t.item.width.width));
                    }
                    if (!(0, r.le)(t.item.height) && !(0, r.le)(t.item.height.height)) {
                        e.setAttribute('height', this.calculateStyleValue(t.item.height.height));
                    }
                    if (!(0, r.le)(t.item.width) && !(0, r.le)(t.item.width.minWidth)) {
                        e.style.minWidth = this.calculateStyleValue(t.item.width.minWidth);
                    }
                    if (!(0, r.le)(t.item.width) && !(0, r.le)(t.item.width.maxWidth)) {
                        e.style.maxWidth = this.calculateStyleValue(t.item.width.maxWidth);
                    }
                    if (!(0, r.le)(t.item.height) && !(0, r.le)(t.item.height.minHeight)) {
                        e.style.minHeight = this.calculateStyleValue(t.item.height.minHeight);
                    }
                    if (!(0, r.le)(t.item.height) && !(0, r.le)(t.item.height.maxHeight)) {
                        e.style.maxHeight = this.calculateStyleValue(t.item.height.maxHeight);
                    }
                };
                e.prototype.calculateStyleValue = function(e) {
                    var t;
                    if (typeof (e) === 'string') {
                        if (e.indexOf('px') || e.indexOf('%') || e.indexOf('auto')) {
                            t = e;
                        } else {
                            t = e + 'px';
                        }
                    } else {
                        t = e + 'px';
                    }
                    return t;
                };
                e.prototype.insertImageLink = function(e) {
                    var t = (0, r.az)('a', {
                        attrs: {
                            href: e.item.url
                        }
                    });
                    if (e.item.selectNode[0].parentElement.classList.contains('e-img-wrap')) {
                        e.item.selection.restore();
                        t.setAttribute('contenteditable', 'true');
                    }
                    t.appendChild(e.item.selectNode[0]);
                    if (!(0, r.le)(e.item.target)) {
                        t.setAttribute('target', e.item.target);
                    }
                    V.Insert(this.parent.currentDocument, t, this.parent.editableElement);
                    this.callBack(e);
                };
                e.prototype.openImageLink = function(e) {
                    document.defaultView.open(e.item.url, e.item.target);
                    this.callBack(e);
                };
                e.prototype.removeImageLink = function(e) {
                    var t = e.item.selectParent[0];
                    if (t.classList.contains('e-img-caption')) {
                        var i = (0, r.Ys)('.e-img-wrap', t);
                        var n = (0, r.Ys)('.e-img-inner', t);
                        var s = n.cloneNode(true);
                        (0, r.og)((0, r.Ys)('a', t));
                        (0, r.og)(n);
                        i.appendChild(e.item.insertElement);
                        i.appendChild(s);
                    } else {
                        (0, r.og)(t);
                        if (r.AR.isIE) {
                            e.item.selection.restore();
                        }
                        V.Insert(this.parent.currentDocument, e.item.insertElement, this.parent.editableElement);
                    }
                    this.callBack(e);
                };
                e.prototype.editImageLink = function(e) {
                    e.item.selectNode[0].parentElement.href = e.item.url;
                    if ((0, r.le)(e.item.target)) {
                        e.item.selectNode[0].parentElement.removeAttribute('target');
                    } else {
                        e.item.selectNode[0].parentElement.target = e.item.target;
                    }
                    this.callBack(e);
                };
                e.prototype.removeImage = function(e) {
                    if ((0, r.oq)(e.item.selectNode[0], 'a')) {
                        if (e.item.selectNode[0].parentElement.nodeName === 'A' && !(0, r.le)(e.item.selectNode[0].parentElement.innerText)) {
                            if (!(0, r.le)((0, r.oq)(e.item.selectNode[0], '.' + K))) {
                                (0, r.og)((0, r.oq)(e.item.selectNode[0], '.' + K));
                            } else {
                                (0, r.og)(e.item.selectNode[0]);
                            }
                        } else {
                            (0, r.og)((0, r.oq)(e.item.selectNode[0], 'a'));
                        }
                    } else if (!(0, r.le)((0, r.oq)(e.item.selectNode[0], '.' + K))) {
                        (0, r.og)((0, r.oq)(e.item.selectNode[0], '.' + K));
                    } else {
                        (0, r.og)(e.item.selectNode[0]);
                    }
                    this.callBack(e);
                };
                e.prototype.insertAltTextImage = function(e) {
                    e.item.selectNode[0].setAttribute('alt', e.item.altText);
                    this.callBack(e);
                };
                e.prototype.imageDimension = function(e) {
                    var t = e.item.selectNode[0];
                    t.style.height = '';
                    t.style.width = '';
                    if (e.item.width !== 'auto') {
                        t.style.width = (0, r.Ac)(e.item.width);
                    } else {
                        t.removeAttribute('width');
                    }
                    if (e.item.height !== 'auto') {
                        t.style.height = (0, r.Ac)(e.item.height);
                    } else {
                        t.removeAttribute('height');
                    }
                    this.callBack(e);
                };
                e.prototype.imageCaption = function(e) {
                    V.Insert(this.parent.currentDocument, e.item.insertElement, this.parent.editableElement);
                    this.callBack(e);
                };
                e.prototype.imageJustifyLeft = function(e) {
                    var t = e.item.selectNode[0];
                    if (!(0, r.le)(t)) {
                        t.removeAttribute('class');
                        (0, r.cn)([
                            t
                        ], 'e-rte-image');
                        if (!(0, r.le)((0, r.oq)(t, '.' + K))) {
                            (0, r.IV)([
                                (0, r.oq)(t, '.' + K)
                            ], Z);
                            (0, r.cn)([
                                (0, r.oq)(t, '.' + K)
                            ], Y);
                        }
                        if (t.parentElement.nodeName === 'A') {
                            (0, r.IV)([
                                t.parentElement
                            ], Z);
                            (0, r.cn)([
                                t.parentElement
                            ], Y);
                            (0, r.cn)([
                                t
                            ], Y);
                        } else {
                            (0, r.cn)([
                                t
                            ], Y);
                        }
                        this.callBack(e);
                    }
                };
                e.prototype.imageJustifyCenter = function(e) {
                    var t = e.item.selectNode[0];
                    if (!(0, r.le)(t)) {
                        t.removeAttribute('class');
                        (0, r.cn)([
                            t
                        ], 'e-rte-image');
                        if (!(0, r.le)((0, r.oq)(t, '.' + K))) {
                            (0, r.IV)([
                                (0, r.oq)(t, '.' + K)
                            ], Y);
                            (0, r.IV)([
                                (0, r.oq)(t, '.' + K)
                            ], Z);
                            (0, r.cn)([
                                (0, r.oq)(t, '.' + K)
                            ], X);
                        }
                        if (t.parentElement.nodeName === 'A') {
                            (0, r.IV)([
                                t.parentElement
                            ], Y);
                            (0, r.IV)([
                                t.parentElement
                            ], Z);
                            (0, r.cn)([
                                t.parentElement
                            ], X);
                            (0, r.cn)([
                                t
                            ], X);
                        } else {
                            (0, r.cn)([
                                t
                            ], X);
                        }
                        this.callBack(e);
                    }
                };
                e.prototype.imageJustifyRight = function(e) {
                    var t = e.item.selectNode[0];
                    if (!(0, r.le)(t)) {
                        t.removeAttribute('class');
                        (0, r.cn)([
                            t
                        ], 'e-rte-image');
                        if (!(0, r.le)((0, r.oq)(t, '.' + K))) {
                            (0, r.IV)([
                                (0, r.oq)(t, '.' + K)
                            ], Y);
                            (0, r.cn)([
                                (0, r.oq)(t, '.' + K)
                            ], Z);
                        }
                        if (t.parentElement.nodeName === 'A') {
                            (0, r.IV)([
                                t.parentElement
                            ], Y);
                            (0, r.cn)([
                                t.parentElement
                            ], Z);
                            (0, r.cn)([
                                t
                            ], Z);
                        } else {
                            (0, r.cn)([
                                t
                            ], Z);
                        }
                        this.callBack(e);
                    }
                };
                e.prototype.imageInline = function(e) {
                    var t = e.item.selectNode[0];
                    t.removeAttribute('class');
                    (0, r.cn)([
                        t
                    ], 'e-rte-image');
                    (0, r.cn)([
                        t
                    ], Q);
                    if (!(0, r.le)((0, r.oq)(t, '.' + K))) {
                        (0, r.IV)([
                            (0, r.oq)(t, '.' + K)
                        ], G);
                        (0, r.IV)([
                            (0, r.oq)(t, '.' + K)
                        ], X);
                        (0, r.IV)([
                            (0, r.oq)(t, '.' + K)
                        ], Y);
                        (0, r.IV)([
                            (0, r.oq)(t, '.' + K)
                        ], Z);
                        (0, r.cn)([
                            (0, r.oq)(t, '.' + K)
                        ], $);
                    }
                    this.callBack(e);
                };
                e.prototype.imageBreak = function(e) {
                    var t = e.item.selectNode[0];
                    t.removeAttribute('class');
                    (0, r.cn)([
                        t
                    ], G);
                    (0, r.cn)([
                        t
                    ], 'e-rte-image');
                    if (!(0, r.le)((0, r.oq)(t, '.' + K))) {
                        (0, r.IV)([
                            (0, r.oq)(t, '.' + K)
                        ], $);
                        (0, r.IV)([
                            (0, r.oq)(t, '.' + K)
                        ], X);
                        (0, r.IV)([
                            (0, r.oq)(t, '.' + K)
                        ], Y);
                        (0, r.IV)([
                            (0, r.oq)(t, '.' + K)
                        ], Z);
                        (0, r.cn)([
                            (0, r.oq)(t, '.' + K)
                        ], G);
                    }
                    this.callBack(e);
                };
                e.prototype.callBack = function(e) {
                    if (e.callBack) {
                        e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                };
                return e;
            }());
            ;
            var et = (function() {
                function e(e) {
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.observer.on(h, this.createTable, this);
                    this.parent.observer.on(d, this.insertRow, this);
                    this.parent.observer.on(p, this.insertColumn, this);
                    this.parent.observer.on(u, this.deleteRow, this);
                    this.parent.observer.on(f, this.deleteColumn, this);
                    this.parent.observer.on(m, this.removeTable, this);
                    this.parent.observer.on(v, this.tableHeader, this);
                    this.parent.observer.on(g, this.tableVerticalAlign, this);
                    this.parent.observer.on(b, this.cellMerge, this);
                    this.parent.observer.on(C, this.HorizontalSplit, this);
                    this.parent.observer.on(y, this.VerticalSplit, this);
                    this.parent.observer.on(E, this.tableMove, this);
                };
                e.prototype.createTable = function(e) {
                    var t = (0, r.az)('table', {
                        className: 'e-rte-table'
                    });
                    var i = (0, r.az)('tbody');
                    if (!(0, r.le)(e.item.width.width)) {
                        t.style.width = this.calculateStyleValue(e.item.width.width);
                    }
                    if (!(0, r.le)(e.item.width.minWidth)) {
                        t.style.minWidth = this.calculateStyleValue(e.item.width.minWidth);
                    }
                    if (!(0, r.le)(e.item.width.maxWidth)) {
                        t.style.maxWidth = this.calculateStyleValue(e.item.width.maxWidth);
                    }
                    var n = parseInt(e.item.width.width, 10) > 100 ? 100 / e.item.columns : parseInt(e.item.width.width, 10) / e.item.columns;
                    for(var s = 0; s < e.item.rows; s++){
                        var o = (0, r.az)('tr');
                        for(var a = 0; a < e.item.columns; a++){
                            var l = (0, r.az)('td');
                            l.appendChild((0, r.az)('br'));
                            l.style.width = n + '%';
                            o.appendChild(l);
                        }
                        i.appendChild(o);
                    }
                    t.appendChild(i);
                    e.item.selection.restore();
                    V.Insert(this.parent.currentDocument, t, this.parent.editableElement);
                    this.removeEmptyNode();
                    e.item.selection.setSelectionText(this.parent.currentDocument, t.querySelector('td'), t.querySelector('td'), 0, 0);
                    if (t.nextElementSibling === null) {
                        var h = void 0;
                        if (e.enterAction === 'DIV') {
                            h = (0, r.az)('div');
                            h.appendChild((0, r.az)('br'));
                        } else if (e.enterAction === 'BR') {
                            h = (0, r.az)('br');
                        } else {
                            h = (0, r.az)('p');
                            h.appendChild((0, r.az)('br'));
                        }
                        this.insertAfter(h, t);
                    }
                    t.querySelector('td').classList.add('e-cell-select');
                    if (e.callBack) {
                        e.callBack({
                            requestType: 'Table',
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: [
                                t
                            ]
                        });
                    }
                    return t;
                };
                e.prototype.calculateStyleValue = function(e) {
                    var t;
                    if (typeof (e) === 'string') {
                        if (e.indexOf('px') || e.indexOf('%') || e.indexOf('auto')) {
                            t = e;
                        } else {
                            t = e + 'px';
                        }
                    } else {
                        t = e + 'px';
                    }
                    return t;
                };
                e.prototype.removeEmptyNode = function() {
                    var e = this.parent.editableElement.querySelectorAll('ul:empty, ol:empty');
                    for(var t = 0; t < e.length; t++){
                        (0, r.og)(e[t]);
                    }
                    var i = this.parent.editableElement.querySelectorAll('li *:empty:not(img)');
                    for(var t = 0; t < i.length; t++){
                        (0, r.og)(i[t]);
                        if (i.length === t + 1) {
                            i = this.parent.editableElement.querySelectorAll('li *:empty:not(img)');
                            t = -1;
                        }
                    }
                    var n = this.parent.editableElement.querySelectorAll('li:empty');
                    for(var t = 0; t < n.length; t++){
                        (0, r.og)(n[t]);
                    }
                };
                e.prototype.insertAfter = function(e, t) {
                    t.parentNode.insertBefore(e, t.nextSibling);
                };
                e.prototype.getSelectedCellMinMaxIndex = function(e) {
                    var t = this.curTable.querySelectorAll('.e-cell-select');
                    var i = 0;
                    var n = e.length;
                    var r = 0;
                    var s = e[0].length;
                    var o = 0;
                    for(var a = 0; i < t.length; i++){
                        var l = this.getCorrespondingIndex(t[i], e);
                        var h = this.FindIndex(l[0], l[1], e);
                        n = Math.min(l[0], n), r = Math.max(h[0], r), s = Math.min(l[1], s), o = Math.max(h[1], o);
                    }
                    return {
                        startRow: n,
                        endRow: r,
                        startColumn: s,
                        endColumn: o
                    };
                };
                e.prototype.insertRow = function(e) {
                    var t = e.item.subCommand === 'InsertRowBefore' ? false : true;
                    var i = e.item.selection.range.startContainer;
                    if (!(i.nodeName === 'TH' || i.nodeName === 'TD')) {
                        i = (0, r.oq)(i.parentElement, 'td,th');
                    }
                    if (i.nodeName.toLowerCase() === 'th' && e.item.subCommand === 'InsertRowBefore') {
                        return;
                    }
                    this.curTable = (0, r.oq)(this.parent.nodeSelection.range.startContainer.parentElement, 'table');
                    if (this.curTable.querySelectorAll('.e-cell-select').length === 0) {
                        var n = this.curTable.rows[this.curTable.rows.length - 1];
                        var s = n.cloneNode(true);
                        s.removeAttribute('rowspan');
                        this.insertAfter(s, n);
                    } else {
                        var o = this.getCorrespondingColumns();
                        var a = this.getSelectedCellMinMaxIndex(o);
                        var l = t ? a.endRow : a.startRow;
                        var h = (0, r.az)('tr');
                        var c = this.curTable.querySelectorAll('th.e-cell-select').length > 0;
                        for(var d = 0; d < o[l].length; d++){
                            if (t && l < o.length - 1 && o[l][d] === o[l + 1][d] || !t && 0 < l && o[l][d] === o[l - 1][d]) {
                                if (0 === d || 0 < d && o[l][d] !== o[l][d - 1]) {
                                    o[l][d].setAttribute('rowspan', (parseInt(o[l][d].getAttribute('rowspan'), 10) + 1).toString());
                                }
                            } else {
                                var p = (0, r.az)('td');
                                p.appendChild((0, r.az)('br'));
                                h.appendChild(p);
                                p.setAttribute('style', o[(c && t) ? o[(l + 1)] ? (l + 1) : l : l][d].getAttribute('style'));
                            }
                        }
                        var u = void 0;
                        if (c && t) {
                            u = this.curTable.querySelector('tbody').childNodes[0];
                        } else {
                            u = this.curTable.rows[l];
                        }
                        (e.item.subCommand === 'InsertRowBefore') ? u.parentElement.insertBefore(h, u) : (c ? u.parentElement.insertBefore(h, u) : this.insertAfter(h, u));
                    }
                    e.item.selection.setSelectionText(this.parent.currentDocument, e.item.selection.range.startContainer, e.item.selection.range.startContainer, 0, 0);
                    if (e.callBack) {
                        e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                };
                e.prototype.insertColumn = function(e) {
                    var t = e.item.selection.range.startContainer;
                    if (!(t.nodeName === 'TH' || t.nodeName === 'TD')) {
                        t = (0, r.oq)(t.parentElement, 'td,th');
                    }
                    var i = (0, r.oq)(t, 'tr');
                    var n;
                    var s = (0, r.oq)((i), 'table').rows;
                    var o = Array.prototype.slice.call(i.querySelectorAll(':scope > td, :scope > th')).indexOf(t);
                    var a = parseInt(e.item.width, 10) / (i.querySelectorAll(':scope > td, :scope > th').length);
                    var l = parseInt(e.item.width, 10) / (i.querySelectorAll(':scope > td, :scope > th').length + 1);
                    var h = (0, r.oq)(i, 'table');
                    var c = (0, r.oq)(i, 'table').querySelectorAll('th,td');
                    for(var d = 0; d < c.length; d++){
                        c[d].dataset.oldWidth = (c[d].offsetWidth / h.offsetWidth * 100) + '%';
                    }
                    for(var d = 0; d < s.length; d++){
                        n = s[d].querySelectorAll(':scope > td, :scope > th')[o];
                        var p = n.cloneNode(true);
                        p.innerHTML = '';
                        p.appendChild((0, r.az)('br'));
                        p.removeAttribute('class');
                        p.removeAttribute('colspan');
                        p.removeAttribute('rowspan');
                        (e.item.subCommand === 'InsertColumnLeft') ? n.parentElement.insertBefore(p, n) : this.insertAfter(p, n);
                        p.style.width = l.toFixed(4) + '%';
                        delete p.dataset.oldWidth;
                    }
                    for(var d = 0; d < c.length; d++){
                        c[d].style.width = (Number(c[d].dataset.oldWidth.split('%')[0]) * l / a).toFixed(4) + '%';
                        delete c[d].dataset.oldWidth;
                    }
                    e.item.selection.setSelectionText(this.parent.currentDocument, t, t, 0, 0);
                    if (e.callBack) {
                        e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                };
                e.prototype.deleteColumn = function(e) {
                    var t = e.item.selection.range.startContainer;
                    if (t.nodeType === 3) {
                        t = (0, r.oq)(t.parentElement, 'td,th');
                    }
                    var i = (0, r.oq)(t, t.tagName === 'TH' ? 'thead' : 'tbody');
                    var n = i && Array.prototype.indexOf.call(i.childNodes, t.parentNode);
                    this.curTable = (0, r.oq)(t, 'table');
                    var s = (0, r.oq)(t, 'tr');
                    if (s.querySelectorAll('th,td').length === 1) {
                        e.item.selection.restore();
                        (0, r.og)((0, r.oq)(t.parentElement, 'table'));
                    } else {
                        var o = void 0;
                        var a = this.getCorrespondingColumns();
                        var l = this.getSelectedCellMinMaxIndex(a);
                        var h = l.startColumn;
                        var c = l.endColumn;
                        for(var d = 0; d < a.length; d++){
                            var p = a[d];
                            for(var u = 0; u < p.length; u++){
                                var f = p[u];
                                var m = this.getCorrespondingIndex(f, a);
                                var v = parseInt(f.getAttribute('colspan'), 10) || 1;
                                if (m[1] + (v - 1) >= h && m[1] <= c) {
                                    if (v > 1) {
                                        f.setAttribute('colspan', (v - 1).toString());
                                    } else {
                                        (0, r.og)(f);
                                        o = u;
                                        if (r.AR.isIE) {
                                            e.item.selection.setSelectionText(this.parent.currentDocument, this.curTable.querySelector('td'), this.curTable.querySelector('td'), 0, 0);
                                            this.curTable.querySelector('td, th').classList.add('e-cell-select');
                                        }
                                    }
                                }
                            }
                        }
                        if (o > -1) {
                            var g = i.children[n];
                            var b = g && g.children[(o <= g.children.length - 1 ? o : o - 1)];
                            if (b) {
                                e.item.selection.setSelectionText(this.parent.currentDocument, b, b, 0, 0);
                                b.classList.add('e-cell-select');
                            }
                        }
                    }
                    if (e.callBack) {
                        var y = this.parent.nodeSelection.getRange(this.parent.currentDocument).startContainer;
                        if (y.nodeName !== 'TD') {
                            var C = this.parent.nodeSelection.getRange(this.parent.currentDocument).startOffset;
                            var E = y.children[C];
                            if (E) {
                                this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, E, 0);
                            }
                        }
                        e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                };
                e.prototype.deleteRow = function(e) {
                    var t = e.item.selection.range.startContainer;
                    if (t.nodeType === 3) {
                        t = (0, r.oq)(t.parentElement, 'td,th');
                    }
                    var i = Array.prototype.indexOf.call(t.parentNode.childNodes, t);
                    this.curTable = (0, r.oq)(t, 'table');
                    var n;
                    var s = this.getCorrespondingColumns();
                    var o = this.getSelectedCellMinMaxIndex(s);
                    var a;
                    var l;
                    if (this.curTable.rows.length === 1) {
                        e.item.selection.restore();
                        (0, r.og)((0, r.oq)(t.parentElement, 'table'));
                    } else {
                        for(a = o.endRow; a >= o.startRow; a--){
                            n = this.curTable.rows[a];
                            for(l = 0; l < s[a].length; l++){
                                if (l === 0 || s[a][l] !== s[a][l - 1]) {
                                    if (1 < parseInt(s[a][l].getAttribute('rowspan'), 10)) {
                                        var h = parseInt(s[a][l].getAttribute('rowspan'), 10) - 1;
                                        1 === h ? s[a][l].removeAttribute('rowspan') : s[a][l].setAttribute('rowspan', h.toString());
                                    }
                                }
                                if (a < s.length - 1 && s[a][l] === s[a + 1][l] && (0 === a || s[a][l] !== s[a - 1][l])) {
                                    var c = s[a][l];
                                    var d = void 0;
                                    for(d = l; 0 < d && s[a][d] === s[a][d - 1]; d--){
                                        if (d === 0) {
                                            this.curTable.rows[a + 1].prepend(c);
                                        } else {
                                            s[a + 1][d - 1].insertAdjacentElement('afterend', c);
                                        }
                                    }
                                }
                            }
                            var p = n.rowIndex;
                            this.curTable.deleteRow(p);
                            var u = !(0, r.le)(this.curTable.rows[p]) ? this.curTable.querySelectorAll('tbody tr')[p] : this.curTable.querySelectorAll('tbody tr')[p - 1];
                            var f = u && u.querySelectorAll('td')[i];
                            if (f) {
                                e.item.selection.setSelectionText(this.parent.currentDocument, f, f, 0, 0);
                                f.classList.add('e-cell-select');
                            } else {
                                e.item.selection.setSelectionText(this.parent.currentDocument, this.curTable.querySelector('td'), this.curTable.querySelector('td'), 0, 0);
                                this.curTable.querySelector('td, th').classList.add('e-cell-select');
                            }
                        }
                    }
                    if (e.callBack) {
                        e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                };
                e.prototype.removeTable = function(e) {
                    var t = e.item.selection.range.startContainer;
                    t = (t.nodeType === 3) ? t.parentNode : t;
                    var i = (0, r.oq)(t.parentElement, 'table');
                    if (i) {
                        e.item.selection.restore();
                        (0, r.og)(i);
                    }
                    if (e.callBack) {
                        e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                };
                e.prototype.tableHeader = function(e) {
                    var t = false;
                    var i = e.item.selection.range.startContainer;
                    i = (i.nodeType === 3) ? i.parentNode : i;
                    var n = (0, r.oq)(i.parentElement, 'table');
                    [].slice.call(n.childNodes).forEach(function(e) {
                        if (e.nodeName === 'THEAD') {
                            t = true;
                        }
                    });
                    if (n && !t) {
                        var s = n.querySelector('tr').childElementCount;
                        var o = 0;
                        for(var a = 0; a < s; a++){
                            o = o + (parseInt(n.querySelector('tr').children[a].getAttribute('colspan'), 10) || 1);
                        }
                        var l = n.createTHead();
                        var h = l.insertRow(0);
                        for(var c = 0; c < o; c++){
                            var d = (0, r.az)('th');
                            d.appendChild((0, r.az)('br'));
                            h.appendChild(d);
                        }
                    } else {
                        n.deleteTHead();
                    }
                    if (e.callBack) {
                        e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                };
                e.prototype.tableVerticalAlign = function(e) {
                    if (e.item.subCommand === 'AlignTop') {
                        e.item.tableCell.style.verticalAlign = 'top';
                    } else if (e.item.subCommand === 'AlignMiddle') {
                        e.item.tableCell.style.verticalAlign = 'middle';
                    } else {
                        e.item.tableCell.style.verticalAlign = 'bottom';
                    }
                    if (e.callBack) {
                        e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                };
                e.prototype.cellMerge = function(e) {
                    if ((0, r.le)(this.curTable)) {
                        this.curTable = (0, r.oq)(this.parent.nodeSelection.range.startContainer.parentElement, 'table');
                    }
                    var t = this.curTable.querySelectorAll('.e-cell-select');
                    if (t.length < 2) {
                        return;
                    }
                    this.mergeCellContent();
                    var i = this.getSelectedMinMaxIndexes(this.getCorrespondingColumns());
                    var n = t[0];
                    var s = n.parentElement.querySelectorAll('.e-cell-select');
                    if (i.startColumn < i.endColumn) {
                        n.setAttribute('colspan', (i.endColumn - i.startColumn + 1).toString());
                    }
                    if (i.startRow < i.endRow) {
                        n.setAttribute('rowspan', (i.endRow - i.startRow + 1).toString());
                    }
                    var o = 0;
                    for(var a = s.length - 1; a >= 0; a--){
                        o = o + parseFloat(s[a].style.width);
                    }
                    n.style.width = o + '%';
                    for(var l = 1; l <= t.length - 1; l++){
                        (0, r.og)(t[l]);
                    }
                    for(var l = 0; l < this.curTable.rows.length; l++){
                        if (this.curTable.rows[l].innerHTML === '') {
                            (0, r.og)(this.curTable.rows[l]);
                        }
                    }
                    this.updateRowSpanStyle(i.startRow, i.endRow, this.getCorrespondingColumns());
                    this.updateColSpanStyle(i.startColumn, i.endColumn, this.getCorrespondingColumns());
                    e.item.selection.setSelectionText(this.parent.currentDocument, e.item.selection.range.startContainer, e.item.selection.range.startContainer, 0, 0);
                    if (this.parent.nodeSelection.range) {
                        this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, this.parent.nodeSelection.range.endContainer, 0);
                    }
                    if (e.callBack) {
                        e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                };
                e.prototype.updateColSpanStyle = function(e, t, i) {
                    var n;
                    var r;
                    var s;
                    var o = 0;
                    var a;
                    var l = 0;
                    var h = i;
                    if (e < (t = Math.min(t, h[0].length - 1))) {
                        for(r === e; r <= t; r++){
                            if (!(e < r && h[0][r] === h[0][r - 1]) && 1 < (o = Math.min(parseInt(h[0][r].getAttribute('colspan'), 10) || 1, t - e + 1)) && h[0][r] === h[0][r + 1]) {
                                for(l = o - 1, n = 1; n < h.length; n++){
                                    if (h[n][r] !== h[n - 1][r]) {
                                        for(s = r; s < r + o; s++){
                                            if (1 < (a = parseInt(h[n][s].getAttribute('colspan'), 10) || 1) && h[n][s] === h[n][s + 1]) {
                                                s += l = Math.min(l, a - 1);
                                            } else if (!(l = Math.max(0, l - 1))) {
                                                break;
                                            }
                                        }
                                    }
                                    if (!l) {
                                        break;
                                    }
                                }
                            }
                        }
                        if (l) {
                            this.updateCellAttribute(h, l, 'colspan', 0, h.length - 1, e, t);
                        }
                    }
                };
                e.prototype.updateRowSpanStyle = function(e, t, i) {
                    var n;
                    var r;
                    var s;
                    var o = 0;
                    var a;
                    var l = 0;
                    var h = i;
                    if (e < (t = Math.min(t, h.length - 1))) {
                        for(n = e; n <= t; n++){
                            if (!(e < n && h[n][0] === h[n - 1][0]) && h[n][0] && 1 < (o = Math.min(parseInt(h[n][0].getAttribute('rowspan'), 10) || 1, t - e + 1)) && h[n][0] === h[n + 1][0]) {
                                for(l = o - 1, r = 1; r < h[0].length; r++){
                                    if (h[n][r] !== h[n][r - 1]) {
                                        for(s = n; s < n + o; s++){
                                            if (1 < (a = parseInt(h[s][r].getAttribute('rowspan'), 10) || 1) && h[s][r] === h[s + 1][r]) {
                                                s += l = Math.min(l, a - 1);
                                            } else if (!(l = Math.max(0, l - 1))) {
                                                break;
                                            }
                                        }
                                        if (!l) {
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        if (l) {
                            this.updateCellAttribute(h, l, 'rowspan', e, t, 0, h[0].length - 1);
                        }
                    }
                };
                e.prototype.updateCellAttribute = function(e, t, i, n, r, s, o) {
                    var a;
                    var l;
                    var h;
                    for(a = n; a <= r; a++){
                        for(l = s; l <= o; l++){
                            n < a && e[a][l] === e[a - 1][l] || s < l && e[a][l] === e[a][l - 1] || 1 < (h = parseInt(e[a][l].getAttribute(i), 10) || 1) && (1 < h - t ? e[a][l].setAttribute(i, (h - t).toString()) : e[a][l].removeAttribute(i));
                        }
                    }
                };
                e.prototype.mergeCellContent = function() {
                    var e = this.curTable.querySelectorAll('.e-cell-select');
                    var t = e[0].innerHTML === '<br>' ? '' : e[0].innerHTML;
                    for(var i = 1; i < e.length; i++){
                        if ('<br>' !== e[i].innerHTML) {
                            t = t ? t + '<br>' + e[i].innerHTML : t + e[i].innerHTML;
                        }
                    }
                    e[0].innerHTML = t;
                };
                e.prototype.getSelectedMinMaxIndexes = function(e) {
                    var t = this.curTable.querySelectorAll('.e-cell-select');
                    if (0 < t.length) {
                        var i = e.length;
                        var n = 0;
                        var r = e[0].length;
                        var s = 0;
                        for(var o = 0; o < t.length; o++){
                            var a = this.getCorrespondingIndex(t[o], e);
                            var l = this.FindIndex(a[0], a[1], e);
                            i = Math.min(a[0], i);
                            n = Math.max(l[0], n);
                            r = Math.min(a[1], r);
                            s = Math.max(l[1], s);
                        }
                        return {
                            startRow: i,
                            endRow: n,
                            startColumn: r,
                            endColumn: s
                        };
                    }
                    return null;
                };
                e.prototype.HorizontalSplit = function(e) {
                    var t = e.item.selection.range.startContainer;
                    this.curTable = (0, r.oq)(t.parentElement, 'table');
                    if (this.curTable.querySelectorAll('.e-cell-select').length > 1) {
                        return;
                    }
                    this.activeCell = this.curTable.querySelector('.e-cell-select');
                    var i = this.activeCell.cloneNode(true);
                    i.removeAttribute('class');
                    i.innerHTML = '</br>';
                    var n = this.getCorrespondingIndex(this.activeCell, this.getCorrespondingColumns());
                    var s = this.getCorrespondingColumns();
                    var o = this.activeCell.getAttribute('rowspan') ? parseInt(this.activeCell.getAttribute('rowspan'), 10) : 1;
                    if (o > 1) {
                        var a = Math.ceil(o / 2);
                        1 < a ? this.activeCell.setAttribute('rowspan', a.toString()) : this.activeCell.removeAttribute('rowspan');
                        1 < (o - a) ? i.setAttribute('rowspan', (o - a).toString()) : i.removeAttribute('rowspan');
                        var l = void 0;
                        var h = void 0;
                        for(l = n[0] + Math.ceil(o / 2), h = 0 === n[1] ? n[1] : n[1] - 1; 0 <= h && (s[l][h] === s[l][h - 1] || 0 < l && s[l][h] === s[l - 1][h]);){
                            h--;
                        }
                        if (h === -1) {
                            this.curTable.rows[l].firstChild ? this.curTable.rows[l].prepend(i) : this.curTable.appendChild(i);
                        } else {
                            s[l][h].insertAdjacentElement('afterend', i);
                        }
                    } else {
                        var c = (0, r.az)('tr');
                        c.appendChild(i);
                        var d = s[n[0]];
                        for(var p = 0; p <= d.length - 1; p++){
                            if (d[p] !== d[p - 1] && d[p] !== this.activeCell) {
                                d[p].setAttribute('rowspan', ((parseInt(d[p].getAttribute('rowspan'), 10) ? parseInt(d[p].getAttribute('rowspan'), 10) : 1) + 1).toString());
                            }
                        }
                        this.activeCell.parentNode.insertAdjacentElement('afterend', c);
                    }
                    if (e.callBack) {
                        e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                };
                e.prototype.VerticalSplit = function(e) {
                    var t = e.item.selection.range.startContainer;
                    this.curTable = (0, r.oq)(t.parentElement, 'table');
                    if (this.curTable.querySelectorAll('.e-cell-select').length > 1) {
                        return;
                    }
                    this.activeCell = this.curTable.querySelector('.e-cell-select');
                    var i = this.curTable.rows;
                    var n = this.activeCell.cloneNode(true);
                    n.removeAttribute('class');
                    n.innerHTML = '</br>';
                    var s = parseFloat(this.activeCell.style.width) / 2;
                    if (this.activeCell.tagName === 'TH' && isNaN(s)) {
                        var o = this.curTable.querySelector('tr').childElementCount;
                        var a = 0;
                        for(var l = 0; l < o; l++){
                            a = a + (parseInt(this.curTable.querySelector('tr').children[l].getAttribute('colspan'), 10) || 1);
                        }
                        s = parseFloat((((this.activeCell.offsetWidth / 2) / this.curTable.offsetWidth) * 100).toFixed(1));
                    }
                    var h = this.getCorrespondingIndex(this.activeCell, this.getCorrespondingColumns());
                    var c = this.getCorrespondingColumns();
                    var d = parseInt(this.activeCell.getAttribute('colspan'), 10);
                    if (d > 1) {
                        1 < Math.ceil(d / 2) ? this.activeCell.setAttribute('colspan', (d / 2).toString()) : this.activeCell.removeAttribute('colspan');
                        1 < (d - d / 2) ? n.setAttribute('colspan', (d - d / 2).toString()) : n.removeAttribute('colspan');
                    } else {
                        for(var l = 0; l <= i.length - 1; l++){
                            if (0 === l || c[l][h[1]] !== c[l - 1][h[1]]) {
                                var p = c[l][h[1]];
                                if (p !== this.activeCell) {
                                    p.setAttribute('colspan', ((parseInt(p.getAttribute('colspan'), 10) ? parseInt(p.getAttribute('colspan'), 10) : 1) + 1).toString());
                                }
                            }
                        }
                    }
                    this.activeCell.style.width = s + '%';
                    n.style.width = s + '%';
                    this.activeCell.parentNode.insertBefore(n, this.activeCell.nextSibling);
                    if (e.callBack) {
                        e.callBack({
                            requestType: e.item.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                };
                e.prototype.getCorrespondingColumns = function() {
                    var e = [];
                    var t = this;
                    var i = 0;
                    var n = t.curTable.rows;
                    for(var r = 0; r <= n.length - 1; r++){
                        var s = n[r];
                        var o = 0;
                        for(var a = 0; a <= s.children.length - 1; a++){
                            var l = s.children[a];
                            for(var h = l, c = parseInt(h.getAttribute('colspan'), 10) || 1, d = parseInt(h.getAttribute('rowspan'), 10) || 1, p = r; p < r + d; p++){
                                for(var u = o; u < o + c; u++){
                                    e[p] || (e[p] = []);
                                    e[p][u] ? o++ : e[p][u] = l;
                                }
                            }
                            o += i;
                        }
                    }
                    return e;
                };
                e.prototype.FindIndex = function(e, t, i) {
                    var n;
                    var r;
                    for(n = e + 1, r = t + 1; n < i.length;){
                        if (i[n][t] !== i[e][t]) {
                            n--;
                            break;
                        }
                        n++;
                    }
                    for(n === i.length && n--; r < i[e].length;){
                        if (i[e][r] !== i[e][t]) {
                            r--;
                            break;
                        }
                        r++;
                    }
                    return r === i[e].length && r--, [
                        n,
                        r
                    ];
                };
                e.prototype.getCorrespondingIndex = function(e, t) {
                    for(var i = 0; i < t.length; i++){
                        for(var n = 0; n < t[i].length; n++){
                            if (t[i][n] === e) {
                                return [
                                    i,
                                    n
                                ];
                            }
                        }
                    }
                    return [];
                };
                e.prototype.highlightCells = function(e, t, i, n, r) {
                    var s;
                    var o;
                    var a;
                    var l;
                    var h = e;
                    var c = t;
                    var d = i;
                    var p = n;
                    var u = new ei();
                    for(s = h; s <= c; s++){
                        if ((1 < (parseInt(r[s][d].getAttribute('rowspan'), 10) || 1) || 1 < (parseInt(r[s][d].getAttribute('colspan'), 10) || 1)) && (l = this.FindIndex((a = this.getCorrespondingIndex(r[s][d], r))[0], a[1], r))) {
                            h = Math.min(a[0], h);
                            c = Math.max(l[0], c);
                            d = Math.min(a[1], d);
                            p = Math.max(l[1], p);
                        } else if ((1 < (parseInt(r[s][p].getAttribute('rowspan'), 10) || 1) || 1 < (parseInt(r[s][p].getAttribute('colspan'), 10) || 1)) && (l = this.FindIndex((a = this.getCorrespondingIndex(r[s][p], r))[0], a[1], r))) {
                            h = Math.min(a[0], h);
                            c = Math.max(l[0], c);
                            d = Math.min(a[1], d);
                            p = Math.max(l[1], p);
                        }
                        for(o = d; o <= p; o++){
                            if ((1 < (parseInt(r[h][o].getAttribute('rowspan'), 10) || 1) || 1 < (parseInt(r[h][o].getAttribute('colspan'), 10) || 1)) && (l = this.FindIndex((a = this.getCorrespondingIndex(r[h][o], r))[0], a[1], r))) {
                                h = Math.min(a[0], h);
                                c = Math.max(l[0], c);
                                d = Math.min(a[1], d);
                                p = Math.max(l[1], p);
                            } else if ((1 < (parseInt(r[c][o].getAttribute('rowspan'), 10) || 1) || 1 < (parseInt(r[c][o].getAttribute('colspan'), 10) || 1)) && (l = this.FindIndex((a = this.getCorrespondingIndex(r[c][o], r))[0], a[1], r))) {
                                h = Math.min(a[0], h);
                                c = Math.max(l[0], c);
                                d = Math.min(a[1], d);
                                p = Math.max(l[1], p);
                            }
                        }
                        u = h === e && c === t && d === i && p === n ? {
                            startRow: e,
                            endRow: t,
                            startColumn: i,
                            endColumn: n
                        } : this.highlightCells(h, c, d, p, r);
                    }
                    return u;
                };
                e.prototype.tableMove = function(e) {
                    this.activeCell = e.selectNode[0];
                    var t = e.event.target;
                    var i = this.activeCell.tagName;
                    var n = t.tagName;
                    this.curTable = (0, r.oq)(t, 'table');
                    if (this.curTable.querySelectorAll('.e-cell-select').length > 1) {
                        this.parent.nodeSelection.Clear(this.parent.currentDocument);
                    }
                    if ((t.tagName !== 'TD' && t.tagName !== 'TH') && i !== n) {
                        return;
                    }
                    var s = Array.prototype.slice.call((this.activeCell).parentElement.parentElement.children).indexOf((this.activeCell).parentElement);
                    var o = Array.prototype.slice.call((this.activeCell).parentElement.children).indexOf(this.activeCell);
                    var a = Array.prototype.slice.call(t.parentElement.parentElement.children).indexOf(t.parentElement);
                    var l = Array.prototype.slice.call(t.parentElement.children).indexOf(t);
                    var h = this.curTable.querySelectorAll('.e-cell-select');
                    for(var c = h.length - 1; c >= 0; c--){
                        if (this.activeCell !== h[c]) {
                            h[c].classList.remove('e-cell-select');
                        }
                    }
                    if (s === a && o === l) {
                        return;
                    }
                    var d = this.getCorrespondingColumns();
                    var p = this.getCorrespondingIndex(this.activeCell, d);
                    var u = this.getCorrespondingIndex(t, d);
                    var f = this.highlightCells(Math.min(p[0], u[0]), Math.max(p[0], u[0]), Math.min(p[1], u[1]), Math.max(p[1], u[1]), d);
                    for(var m = f.startRow; m <= f.endRow; m++){
                        for(var v = f.startColumn; v <= f.endColumn; v++){
                            d[m][v].classList.add('e-cell-select');
                        }
                    }
                    if (this.parent.nodeSelection.range) {
                        this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, this.parent.nodeSelection.range.endContainer, this.parent.nodeSelection.range.endContainer, 0, 0);
                        this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, this.parent.nodeSelection.range.endContainer, 0);
                    }
                };
                ;
                return e;
            }());
            var ei = (function() {
                function e() {}
                return e;
            }());
            ;
            var en = (function() {
                function e() {}
                e.prototype.getFormattedNode = function(e, t, i) {
                    var n = this.getFormatParent(e, t, i);
                    if (n !== null && n !== i) {
                        return n;
                    }
                    return null;
                };
                e.prototype.getFormatParent = function(e, t, i) {
                    do {
                        e = e.parentNode;
                    }while (e && (e !== i) && !this.isFormattedNode(e, t))
                    return e;
                };
                e.prototype.isFormattedNode = function(t, i) {
                    switch(i){
                        case 'bold':
                            return e.isBold(t);
                        case 'italic':
                            return e.isItalic(t);
                        case 'underline':
                            return e.isUnderline(t);
                        case 'strikethrough':
                            return e.isStrikethrough(t);
                        case 'superscript':
                            return e.isSuperscript(t);
                        case 'subscript':
                            return e.isSubscript(t);
                        case 'fontcolor':
                            return this.isFontColor(t);
                        case 'fontname':
                            return this.isFontName(t);
                        case 'fontsize':
                            return this.isFontSize(t);
                        case 'backgroundcolor':
                            return this.isBackgroundColor(t);
                        default:
                            return false;
                    }
                };
                e.isBold = function(e) {
                    var t = [
                        'strong',
                        'b'
                    ];
                    if (t.indexOf(e.nodeName.toLowerCase()) !== -1) {
                        return true;
                    } else if (this.inlineTags.indexOf(e.nodeName.toLowerCase()) !== -1 && e.style && e.style.fontWeight === 'bold') {
                        return true;
                    } else {
                        return false;
                    }
                };
                e.isItalic = function(e) {
                    var t = [
                        'em',
                        'i'
                    ];
                    if (t.indexOf(e.nodeName.toLowerCase()) !== -1) {
                        return true;
                    } else if (this.inlineTags.indexOf(e.nodeName.toLowerCase()) !== -1 && e.style && e.style.fontStyle === 'italic') {
                        return true;
                    } else {
                        return false;
                    }
                };
                e.isUnderline = function(e) {
                    var t = [
                        'u'
                    ];
                    if (t.indexOf(e.nodeName.toLowerCase()) !== -1) {
                        return true;
                    } else if (this.inlineTags.indexOf(e.nodeName.toLowerCase()) !== -1 && e.style && e.style.textDecoration === 'underline') {
                        return true;
                    } else {
                        return false;
                    }
                };
                e.isStrikethrough = function(e) {
                    var t = [
                        'del',
                        'strike'
                    ];
                    if (t.indexOf(e.nodeName.toLowerCase()) !== -1) {
                        return true;
                    } else if (this.inlineTags.indexOf(e.nodeName.toLowerCase()) !== -1 && e.style && e.style.textDecoration === 'line-through') {
                        return true;
                    } else {
                        return false;
                    }
                };
                e.isSuperscript = function(e) {
                    var t = [
                        'sup'
                    ];
                    if (t.indexOf(e.nodeName.toLowerCase()) !== -1) {
                        return true;
                    } else {
                        return false;
                    }
                };
                e.isSubscript = function(e) {
                    var t = [
                        'sub'
                    ];
                    if (t.indexOf(e.nodeName.toLowerCase()) !== -1) {
                        return true;
                    } else {
                        return false;
                    }
                };
                e.prototype.isFontColor = function(t) {
                    var i = t.style && t.style.color;
                    if (e.inlineTags.indexOf(t.nodeName.toLowerCase()) !== -1 && i !== null && i !== '' && i !== undefined) {
                        return true;
                    } else {
                        return false;
                    }
                };
                e.prototype.isBackgroundColor = function(t) {
                    var i = t.style && t.style.backgroundColor;
                    if (e.inlineTags.indexOf(t.nodeName.toLowerCase()) !== -1 && i !== null && i !== '' && i !== undefined) {
                        return true;
                    } else {
                        return false;
                    }
                };
                e.prototype.isFontSize = function(t) {
                    var i = t.style && t.style.fontSize;
                    if (e.inlineTags.indexOf(t.nodeName.toLowerCase()) !== -1 && i !== null && i !== '' && i !== undefined) {
                        return true;
                    } else {
                        return false;
                    }
                };
                e.prototype.isFontName = function(t) {
                    var i = t.style && t.style.fontFamily;
                    if (e.inlineTags.indexOf(t.nodeName.toLowerCase()) !== -1 && i !== null && i !== '' && i !== undefined) {
                        return true;
                    } else {
                        return false;
                    }
                };
                e.inlineTags = [
                    'a',
                    'abbr',
                    'acronym',
                    'b',
                    'bdo',
                    'big',
                    'cite',
                    'code',
                    'dfn',
                    'em',
                    'i',
                    'kbd',
                    'label',
                    'q',
                    'samp',
                    'small',
                    'span',
                    'strong',
                    'sub',
                    'sup',
                    'tt',
                    'u',
                    'var',
                    'del'
                ];
                return e;
            }());
            ;
            var er = (function() {
                function e() {}
                e.applyFormat = function(e, t, i, n, s, o) {
                    this.enterAction = n;
                    var a = [
                        'bold',
                        'italic',
                        'underline',
                        'strikethrough',
                        'superscript',
                        'subscript',
                        'uppercase',
                        'lowercase',
                        'fontcolor',
                        'fontname',
                        'fontsize',
                        'backgroundcolor'
                    ];
                    if (a.indexOf(t) > -1) {
                        if (t === 'backgroundcolor' && s === '') {
                            s = 'transparent';
                        }
                        var l = new M.q();
                        var h = new H(i, e);
                        var c = new z();
                        var d = new en();
                        var p = l.getRange(e);
                        var u = l.save(p, e);
                        var f = p.collapsed ? l.getSelectionNodeCollection(p) : l.getSelectionNodeCollectionBr(p);
                        var m = false;
                        var v = false;
                        var g = false;
                        var b = false;
                        var y = ([
                            'fontcolor',
                            'fontname',
                            'fontsize',
                            'backgroundcolor'
                        ].indexOf(t) > -1);
                        if (p.collapsed) {
                            var C = d.getFormattedNode(p.startContainer, t, i);
                            var E = !(0, r.le)(C) ? (C.getAttribute('style') === null ? C.nodeName : C.nodeName + "[style='" + C.getAttribute('style') + "']") : null;
                            if (f.length > 0) {
                                m = true;
                                p = c.GetCursorRange(e, p, f[0]);
                            } else if (p.startContainer.nodeType === 3 && ((p.startContainer.parentElement.childElementCount > 0 && p.startOffset > 0 && p.startContainer.parentElement.firstElementChild.tagName.toLowerCase() !== 'br') || !(0, r.le)(C) && C === (p.startContainer.parentElement.closest(E)) && ((p.startContainer.parentElement.closest(E)).textContent.replace(new RegExp(String.fromCharCode(8203), 'g'), '').trim().length != 0))) {
                                m = true;
                                p = c.GetCursorRange(e, p, p.startContainer);
                                f.push(p.startContainer);
                            } else {
                                var S = this.insertCursorNode(e, l, p, d, c, t, s, i);
                                l.endContainer = l.startContainer = l.getNodeArray(S, true);
                                var w = S.nodeName === 'BR' && S.parentNode.childNodes;
                                if (!(0, r.le)(w) && w.length === 1 && w[0].nodeName === 'BR' && f.length === 0) {
                                    l.setSelectionText(e, p.startContainer, p.endContainer, 0, 0);
                                    b = true;
                                } else {
                                    l.endOffset = l.startOffset = 1;
                                }
                                if (S.nodeName === 'BR' && S.parentNode.textContent.length === 0) {
                                    b = true;
                                }
                            }
                        }
                        g = p.collapsed;
                        var T = false;
                        for(var k = 0; k < f.length; k++){
                            var x = d.getFormattedNode(f[k], t, i);
                            if (x === null) {
                                if (t === 'subscript') {
                                    x = d.getFormattedNode(f[k], 'superscript', i);
                                    T = x === null ? false : true;
                                } else if (t === 'superscript') {
                                    x = d.getFormattedNode(f[k], 'subscript', i);
                                    T = x === null ? false : true;
                                }
                            }
                            if (k === 0 && x === null) {
                                v = true;
                            }
                            if (x !== null && (!v || y)) {
                                f[k] = this.removeFormat(f, k, x, g, v, y, p, c, t, s, l, i, h);
                            } else {
                                f[k] = this.insertFormat(e, f, k, x, g, v, y, p, c, t, s);
                            }
                            l = this.applySelection(f, l, c, k, m);
                        }
                        if ((0, B.FA)()) {
                            (0, B.ze)(i, o);
                        }
                        if (!b) {
                            u.restore();
                        }
                        if (T) {
                            this.applyFormat(e, t, i, n);
                        }
                    }
                };
                e.insertCursorNode = function(e, t, i, n, s, o, a, l) {
                    var h = t.getNodeCollection(i);
                    var c = new H(l, e);
                    var d = (h.length > 0) ? (h.length > 1 && i.startContainer === i.endContainer) ? this.getCursorFormat(n, h, o, l) : n.getFormattedNode(h[0], o, l) : null;
                    var p = null;
                    if (d) {
                        p = h[0];
                        if (d.firstChild.textContent.charCodeAt(0) === 8203 && d.firstChild.nodeType === 3) {
                            var u = false;
                            var f = new RegExp(String.fromCharCode(8203), 'g');
                            var m = void 0;
                            if (d.firstChild === p) {
                                p.textContent = (d.parentElement && (c.isBlockNode(d.parentElement) && d.parentElement.textContent.length <= 1 ? d.parentElement.childElementCount > 1 : d.childElementCount === 0) && (d.parentElement.textContent.length > 1 || d.parentElement.firstChild && d.parentElement.firstChild.nodeType === 1) ? p.textContent : p.textContent.replace(f, ''));
                                m = p;
                                u = true;
                            } else {
                                d.firstChild.textContent = d.firstChild.textContent.replace(f, '');
                                m = d.firstChild;
                            }
                            var v = void 0;
                            if (m.textContent.length === 0) {
                                if (!(0, r.le)(m.previousSibling)) {
                                    p = m.previousSibling;
                                    v = m.textContent.length - 1;
                                    t.setCursorPoint(e, m, v);
                                } else if (!(0, r.le)(m.parentElement) && m.parentElement.textContent.length === 0) {
                                    var g = document.createElement('BR');
                                    m.parentElement.appendChild(g);
                                    (0, r.og)(m);
                                    p = g;
                                    t.setCursorPoint(e, p.parentElement, 0);
                                }
                            }
                        }
                        if (([
                            'fontcolor',
                            'fontname',
                            'fontsize',
                            'backgroundcolor'
                        ].indexOf(o) > -1)) {
                            if (o === 'fontcolor') {
                                d.style.color = a;
                            } else if (o === 'fontname') {
                                d.style.fontFamily = a;
                            } else if (o === 'fontsize') {
                                d.style.fontSize = a;
                            } else {
                                d.style.backgroundColor = a;
                            }
                            p = d;
                        } else {
                            j.unwrap(d);
                        }
                    } else {
                        if (h.length > 1 && i.startOffset > 0 && (h[0].firstElementChild && h[0].firstElementChild.tagName.toLowerCase() === 'br')) {
                            h[0].innerHTML = '';
                        }
                        if (h.length === 1 && i.startOffset === 0 && (h[0].nodeName === 'BR' || h[0].nextSibling.nodeName === 'BR')) {
                            (0, r.og)(h[0].nodeName === '#text' ? h[0].nextSibling : h[0]);
                        }
                        p = this.getInsertNode(e, i, o, a).firstChild;
                    }
                    return p;
                };
                e.getCursorFormat = function(e, t, i, n) {
                    var r;
                    for(var s = 0; s < t.length; s++){
                        r = t[s].lastElementChild ? t[s].lastElementChild : t[s];
                    }
                    return e.getFormattedNode(r, i, n);
                };
                e.removeFormat = function(e, t, i, n, s, o, a, l, h, c, d, p, u) {
                    var f = null;
                    var m = a.startContainer.nodeName === '#text' ? a.startContainer.textContent.substring(a.startOffset, a.startContainer.textContent.length) : a.startContainer.textContent;
                    if (!(a.startContainer === a.endContainer && a.startOffset === 0 && a.endOffset === a.startContainer.length)) {
                        var v = [];
                        var g = e[t];
                        do {
                            v.push(d.getIndex(g));
                            g = g.parentNode;
                        }while (g && (g !== i))
                        if (e[t].nodeName !== 'BR') {
                            g = f = (n && (i.textContent.length - 1) === a.startOffset) ? l.SplitNode(a, i, true) : l.GetSpliceNode(a, i);
                        }
                        if (!n) {
                            while(g && g.childNodes.length > 0 && ((v.length - 1) >= 0) && (g.childNodes.length > v[v.length - 1])){
                                g = g.childNodes[v[v.length - 1]];
                                v.pop();
                            }
                            if (e[t].nodeName !== 'BR') {
                                if (g.nodeType === 3 && !(n && g.nodeValue === '')) {
                                    e[t] = g;
                                } else {
                                    var b = document.createElement('div');
                                    b.innerHTML = '&#8203;';
                                    if (g.nodeType !== 3) {
                                        g.insertBefore(b.firstChild, g.firstChild);
                                        e[t] = g.firstChild;
                                    } else {
                                        g.parentNode.insertBefore(b.firstChild, g);
                                        e[t] = g.previousSibling;
                                        g.parentNode.removeChild(g);
                                    }
                                }
                            }
                        } else {
                            var y = f;
                            for(; y.firstChild !== null && y.firstChild.nodeType !== 3; null){
                                y = y.firstChild;
                            }
                            y.innerHTML = '&#8203;';
                            e[t] = y.firstChild;
                        }
                    }
                    var C;
                    if (h === 'backgroundcolor') {
                        C = i.style.fontSize;
                    }
                    var E;
                    if (h === 'fontsize') {
                        var S = (0, r.oq)(e[t].parentElement, 'span[style*=' + 'background-color' + ']');
                        if (!(0, r.le)(S)) {
                            E = S.style.backgroundColor;
                        }
                    }
                    var w = i.getAttribute('style');
                    var T = i.tagName;
                    var k = j.unwrap(i);
                    if (k[0] && !o) {
                        var x = k[t] ? k[t] : k[0];
                        var L = x;
                        for(; x && x.parentElement && x.parentElement !== p; x = x){
                            var N = void 0;
                            if (i.nodeName === 'SPAN') {
                                N = x.parentElement.tagName.toLocaleLowerCase() === i.tagName.toLocaleLowerCase() && x.parentElement.getAttribute('style') === w;
                            } else {
                                N = x.parentElement.tagName.toLocaleLowerCase() === i.tagName.toLocaleLowerCase();
                            }
                            if (x.parentElement && N && (x.parentElement.childElementCount > 1 || a.startOffset > 1)) {
                                if (L.parentElement && L.parentElement.tagName.toLocaleLowerCase() === i.tagName.toLocaleLowerCase()) {
                                    if ((a.startOffset === a.endOffset) && L.nodeType !== 1 && !(0, r.le)(L.textContent) && L.parentElement.childElementCount > 1) {
                                        a.setStart(L, 0);
                                        a.setEnd(L, L.textContent.length);
                                        l.SplitNode(a, L.parentElement, false);
                                    }
                                }
                                if (x.parentElement.tagName.toLocaleLowerCase() === 'span') {
                                    if (i.style.textDecoration === 'underline' && x.parentElement.style.textDecoration !== 'underline') {
                                        x = x.parentElement;
                                        continue;
                                    }
                                }
                                j.unwrap(x.parentElement);
                                x = !(0, r.le)(x.parentElement) && !u.isBlockNode(x.parentElement) ? L : x.parentElement;
                            } else {
                                x = x.parentElement;
                            }
                        }
                    }
                    if (k.length > 0 && o) {
                        for(var D = 0; D < k.length; D++){
                            if (k[D].nodeType !== 3 || (k[D].textContent && k[D].textContent.trim().length > 0)) {
                                k[D] = j.Wrap(k[D], this.GetFormatNode(h, c, T, w));
                                if (k[D].textContent === m) {
                                    if (D === 0) {
                                        a.setStartBefore(k[D]);
                                    } else if (D === k.length - 1) {
                                        a.setEndAfter(k[D]);
                                    }
                                }
                            }
                        }
                        var O = e[t].parentElement;
                        if (!(0, r.le)(C) && C !== '') {
                            O.style.fontSize = C;
                        }
                        if (!(0, r.le)(E) && E !== '') {
                            O.style.backgroundColor = E;
                        }
                        if ((h === 'backgroundcolor' && !(0, r.le)(C) && C !== '') && O.parentElement.innerHTML === O.outerHTML) {
                            var A = O.parentElement;
                            A.parentElement.insertBefore(O, A);
                            (0, r.og)(A);
                        }
                        if (h === 'fontsize' || h === 'fontcolor') {
                            var P = e[t].parentElement;
                            var M = e[t].parentElement;
                            while(!(0, r.le)(M) && M.tagName.toLowerCase() !== 'li'){
                                M = M.parentElement;
                                P = M;
                            }
                            if (!(0, r.le)(P) && P.tagName.toLowerCase() === 'li' && P.textContent.trim() === e[t].textContent.trim()) {
                                if (h === 'fontsize') {
                                    P.style.fontSize = c;
                                } else {
                                    P.style.color = c;
                                    P.style.textDecoration = 'inherit';
                                }
                            }
                        }
                    }
                    return e[t];
                };
                e.insertFormat = function(e, t, i, n, s, o, a, l, h, c, d) {
                    if (!s) {
                        if ((n === null && o) || a) {
                            if (t[i].nodeName !== 'BR') {
                                t[i] = h.GetSpliceNode(l, t[i]);
                                t[i].textContent = h.TrimLineBreak(t[i].textContent);
                            }
                            if (c === 'uppercase' || c === 'lowercase') {
                                t[i].textContent = (c === 'uppercase') ? t[i].textContent.toLocaleUpperCase() : t[i].textContent.toLocaleLowerCase();
                            } else if (!(a === true && d === '')) {
                                var p = this.GetFormatNode(c, d);
                                if (c === 'fontsize' || c === 'fontcolor') {
                                    var u = t[i].parentElement;
                                    var f = t[i].parentElement;
                                    while(!(0, r.le)(f) && f.tagName.toLowerCase() !== 'li'){
                                        f = f.parentElement;
                                        u = f;
                                    }
                                    if (!(0, r.le)(u) && u.tagName.toLowerCase() === 'li' && u.textContent.trim() === t[i].textContent.trim()) {
                                        if (c === 'fontsize') {
                                            u.style.fontSize = d;
                                        } else {
                                            u.style.color = d;
                                            u.style.textDecoration = 'inherit';
                                        }
                                    }
                                    t[i] = this.applyStyles(t, i, p);
                                    if (c === 'fontsize') {
                                        var m = (0, r.oq)(t[i].parentElement, 'span[style*=' + 'background-color' + ']');
                                        if (!(0, r.le)(m)) {
                                            t[i].parentElement.style.backgroundColor = m.style.backgroundColor;
                                        }
                                    }
                                } else {
                                    t[i] = this.applyStyles(t, i, p);
                                }
                            }
                        } else {
                            t[i] = h.GetSpliceNode(l, t[i]);
                        }
                    } else {
                        if (c !== 'uppercase' && c !== 'lowercase') {
                            var p = this.getInsertNode(e, l, c, d);
                            t[i] = p.firstChild;
                            h.position = 1;
                        } else {
                            h.position = l.startOffset;
                        }
                    }
                    return t[i];
                };
                e.applyStyles = function(e, t, i) {
                    if (!(e[t].nodeName === 'BR' && this.enterAction === 'BR')) {
                        e[t] = (t === (e.length - 1)) || e[t].nodeName === 'BR' ? j.Wrap(e[t], i) : j.WrapBefore(e[t], i, true);
                        e[t] = this.getChildNode(e[t], i);
                    }
                    return e[t];
                };
                e.getInsertNode = function(e, t, i, n) {
                    var s = this.GetFormatNode(i, n);
                    s.innerHTML = '&#8203;';
                    if (r.AR.isIE) {
                        var o = e.createDocumentFragment();
                        o.appendChild(s);
                        t.insertNode(o);
                    } else {
                        t.insertNode(s);
                    }
                    return s;
                };
                e.getChildNode = function(e, t) {
                    if (e === undefined || e === null) {
                        t.innerHTML = '&#8203;';
                        e = t.firstChild;
                    }
                    return e;
                };
                e.applySelection = function(e, t, i, n, r) {
                    if (e.length === 1 && !r) {
                        t.startContainer = t.getNodeArray(e[n], true);
                        t.endContainer = t.startContainer;
                        t.startOffset = 0;
                        t.endOffset = e[n].textContent.length;
                    } else if (e.length === 1 && r) {
                        t.startContainer = t.getNodeArray(e[n], true);
                        t.endContainer = t.startContainer;
                        t.startOffset = i.position;
                        t.endOffset = i.position;
                    } else if (n === 0) {
                        t.startContainer = t.getNodeArray(e[n], true);
                        t.startOffset = 0;
                    } else if (n === e.length - 1) {
                        t.endContainer = t.getNodeArray(e[n], false);
                        t.endOffset = e[n].textContent.length;
                    }
                    return t;
                };
                e.GetFormatNode = function(e, t, i, n) {
                    var r;
                    switch(e){
                        case 'bold':
                            return document.createElement('strong');
                        case 'italic':
                            return document.createElement('em');
                        case 'underline':
                            r = document.createElement('span');
                            this.updateStyles(r, i, n);
                            r.style.textDecoration = 'underline';
                            return r;
                        case 'strikethrough':
                            r = document.createElement('span');
                            this.updateStyles(r, i, n);
                            r.style.textDecoration = 'line-through';
                            return r;
                        case 'superscript':
                            return document.createElement('sup');
                        case 'subscript':
                            return document.createElement('sub');
                        case 'fontcolor':
                            r = document.createElement('span');
                            this.updateStyles(r, i, n);
                            r.style.color = t;
                            r.style.textDecoration = 'inherit';
                            return r;
                        case 'fontname':
                            r = document.createElement('span');
                            this.updateStyles(r, i, n);
                            r.style.fontFamily = t;
                            return r;
                        case 'fontsize':
                            r = document.createElement('span');
                            this.updateStyles(r, i, n);
                            r.style.fontSize = t;
                            return r;
                        default:
                            r = document.createElement('span');
                            this.updateStyles(r, i, n);
                            r.style.backgroundColor = t;
                            return r;
                    }
                };
                e.updateStyles = function(e, t, i) {
                    if (i !== null && t === 'SPAN') {
                        e.setAttribute('style', i);
                    }
                };
                e.enterAction = 'P';
                return e;
            }());
            ;
            var es = (function() {
                function e(e) {
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.observer.on(N, this.applySelection, this);
                    this.parent.observer.on(o.kT, this.keyDownHandler, this);
                };
                e.prototype.keyDownHandler = function(e) {
                    var t = [
                        'bold',
                        'italic',
                        'underline',
                        'strikethrough',
                        'superscript',
                        'subscript',
                        'uppercase',
                        'lowercase'
                    ];
                    if (e.event.ctrlKey && t.indexOf(e.event.action) > -1) {
                        e.event.preventDefault();
                        er.applyFormat(this.parent.currentDocument, e.event.action, this.parent.editableElement, e.enterAction);
                        this.callBack(e, e.event.action);
                    }
                };
                e.prototype.applySelection = function(e) {
                    er.applyFormat(this.parent.currentDocument, e.subCommand.toLocaleLowerCase(), this.parent.editableElement, e.enterAction, e.value, e.selector);
                    this.callBack(e, e.subCommand);
                };
                e.prototype.callBack = function(e, t) {
                    if (e.callBack) {
                        e.callBack({
                            requestType: t,
                            event: e.event,
                            editorMode: 'HTML',
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                };
                return e;
            }());
            ;
            var eo = (function() {
                function e(e) {
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.observer.on(D, this.applyHtml, this);
                };
                e.prototype.applyHtml = function(e) {
                    V.Insert(this.parent.currentDocument, e.value, this.parent.editableElement, true);
                    if (e.subCommand === 'pasteCleanup') {
                        var t = this.parent.editableElement.querySelectorAll('.pasteContent_RTE');
                        var i = [].slice.call(t);
                        var n = this.parent.editableElement.querySelectorAll('.pasteContent_Img');
                        var r = [].slice.call(n);
                        e.callBack({
                            requestType: e.subCommand,
                            editorMode: 'HTML',
                            elements: i,
                            imgElem: r
                        });
                    } else {
                        if (e.callBack) {
                            e.callBack({
                                requestType: e.subCommand,
                                editorMode: 'HTML',
                                event: e.event,
                                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                            });
                        }
                    }
                };
                return e;
            }());
            ;
            var ea = (function() {
                function e() {}
                e.clear = function(e, t, i, n) {
                    this.domNode = new H(t, e);
                    this.defaultTag = i === 'P' ? this.defaultTag : 'div';
                    var s = new M.q();
                    var o = new z();
                    var a = s.getRange(e);
                    var l = a.collapsed;
                    var h = s.getInsertNodeCollection(a);
                    var c = s.save(a, e);
                    if (!l) {
                        var d = void 0;
                        if (h[0].nodeName === 'BR' && (0, r.oq)(h[0], 'table')) {
                            d = o.GetSpliceNode(a, (0, r.oq)(h[0], 'table'));
                        } else {
                            d = o.GetSpliceNode(a, h[h.length > 1 && h[0].nodeName === 'IMG' ? 1 : 0]);
                        }
                        if (h.length === 1) {
                            s.setSelectionContents(e, d);
                            a = s.getRange(e);
                        } else {
                            var p = 1;
                            var u = h[h.length - p];
                            while(h.length <= p && h[h.length - p].nodeName === 'BR'){
                                p++;
                                u = h[h.length - p];
                            }
                            var f = o.GetSpliceNode(a, u);
                            s.setSelectionText(e, d, f, 0, (f.nodeType === 3) ? f.textContent.length : f.childNodes.length);
                            a = s.getRange(e);
                        }
                        var m = s.getNodeCollection(a);
                        var v = m.slice();
                        this.clearInlines(s.getSelectionNodes(v), v, s.getRange(e), o, t);
                        this.reSelection(e, c, m);
                        a = s.getRange(e);
                        m = s.getNodeCollection(a);
                        var g = m.slice();
                        this.clearBlocks(e, g, t, o, s);
                        if ((0, B.FA)()) {
                            (0, B.ze)(t, n);
                        }
                        this.reSelection(e, c, m);
                    }
                };
                e.reSelection = function(e, t, i) {
                    var n = t.getInsertNodes(i);
                    t.startContainer = t.getNodeArray(n[0], true, e);
                    t.startOffset = 0;
                    t.endContainer = t.getNodeArray(n[n.length - 1], false, e);
                    var r = n[n.length - 1];
                    t.endOffset = (r.nodeType === 3) ? r.textContent.length : r.childNodes.length;
                    t.restore();
                };
                e.clearBlocks = function(e, t, i, n, r) {
                    var s = [];
                    for(var o = 0; o < t.length; o++){
                        if (this.BLOCK_TAGS.indexOf(t[o].nodeName.toLocaleLowerCase()) > -1 && s.indexOf(t[o]) === -1) {
                            s.push(t[o]);
                        } else if ((this.BLOCK_TAGS.indexOf(t[o].parentNode.nodeName.toLocaleLowerCase()) > -1) && s.indexOf(t[o].parentNode) === -1 && i !== t[o].parentNode) {
                            s.push(t[o].parentNode);
                        }
                    }
                    s = this.spliceParent(s, t)[0];
                    s = this.removeParent(s);
                    this.unWrap(e, s, n, r);
                };
                e.spliceParent = function(e, t) {
                    for(var i = 0; i < e.length; i++){
                        var n = e[i].childNodes.length;
                        for(var r = 0; r < n; r++){
                            if ((t.indexOf(e[i].childNodes[r]) > 0) && (e[i].childNodes[r].childNodes.length > 0)) {
                                t = this.spliceParent([
                                    e[i].childNodes[r]
                                ], t)[1];
                            }
                            if ((t.indexOf(e[i].childNodes[r]) <= -1) && (e[i].childNodes[r].textContent.trim() !== '')) {
                                for(var s = 0; s < n; s++){
                                    if (t.indexOf(e[i].childNodes[s]) > -1) {
                                        t.splice(t.indexOf(e[i].childNodes[s]), 1);
                                    }
                                }
                                r = e[i].childNodes.length;
                                var o = e.indexOf(e[i].parentNode);
                                var a = t.indexOf(e[i].parentNode);
                                if (o > -1) {
                                    e.splice(o, 1);
                                }
                                if (a > -1) {
                                    t.splice(a, 1);
                                }
                                var l = t.indexOf(e[i]);
                                if (l > -1) {
                                    t.splice(l, 1);
                                }
                                e.splice(i, 1);
                                i--;
                            }
                        }
                    }
                    return [
                        e,
                        t
                    ];
                };
                e.removeChild = function(e, t) {
                    var i = t.childNodes.length;
                    if (i > 0) {
                        for(var n = 0; n < i; n++){
                            if (e.indexOf(t.childNodes[n]) > -1) {
                                e = this.removeChild(e, t.childNodes[n]);
                                e.splice(e.indexOf(t.childNodes[n]), 1);
                            }
                        }
                    }
                    return e;
                };
                e.removeParent = function(e) {
                    for(var t = 0; t < e.length; t++){
                        if (e.indexOf(e[t].parentNode) > -1) {
                            e = this.removeChild(e, e[t]);
                            e.splice(t, 1);
                            t--;
                        }
                    }
                    return e;
                };
                e.unWrap = function(e, t, i, n) {
                    for(var r = 0; r < t.length; r++){
                        if (this.NONVALID_TAGS.indexOf(t[r].nodeName.toLowerCase()) > -1 && t[r].parentNode && this.NONVALID_PARENT_TAGS.indexOf(t[r].parentNode.nodeName.toLowerCase()) > -1) {
                            n.setSelectionText(e, t[r], t[r], 0, t[r].childNodes.length);
                            j.unwrap(i.GetSpliceNode(n.getRange(e), t[r].parentNode));
                        }
                        if (t[r].nodeName.toLocaleLowerCase() !== 'p') {
                            if (this.NONVALID_PARENT_TAGS.indexOf(t[r].nodeName.toLowerCase()) < 0 && t[r].parentNode.nodeName.toLocaleLowerCase() !== 'p' && !((t[r].nodeName.toLocaleLowerCase() === 'blockquote' || t[r].nodeName.toLocaleLowerCase() === 'li') && this.IGNORE_PARENT_TAGS.indexOf(t[r].childNodes[0].nodeName.toLocaleLowerCase()) > -1) && !(t[r].childNodes.length === 1 && t[r].childNodes[0].nodeName.toLocaleLowerCase() === 'p')) {
                                j.Wrap(t[r], e.createElement(this.defaultTag));
                            }
                            var s = j.unwrap(t[r]);
                            if (s.length === 1 && s[0].parentNode.nodeName.toLocaleLowerCase() === 'p') {
                                j.Wrap(t[r], e.createElement(this.defaultTag));
                                j.unwrap(t[r]);
                            }
                            for(var o = 0; o < s.length; o++){
                                if (this.NONVALID_TAGS.indexOf(s[o].nodeName.toLowerCase()) > -1) {
                                    this.unWrap(e, [
                                        s[o]
                                    ], i, n);
                                } else if (this.BLOCK_TAGS.indexOf(s[o].nodeName.toLocaleLowerCase()) > -1 && s[o].nodeName.toLocaleLowerCase() !== 'p') {
                                    var a = this.removeParent([
                                        s[o]
                                    ]);
                                    this.unWrap(e, a, i, n);
                                } else if (this.BLOCK_TAGS.indexOf(s[o].nodeName.toLocaleLowerCase()) > -1 && s[o].parentNode.nodeName.toLocaleLowerCase() === s[o].nodeName.toLocaleLowerCase()) {
                                    j.unwrap(s[o]);
                                } else if (this.BLOCK_TAGS.indexOf(s[o].nodeName.toLocaleLowerCase()) > -1 && s[o].nodeName.toLocaleLowerCase() === 'p') {
                                    j.Wrap(s[o], e.createElement(this.defaultTag));
                                    j.unwrap(s[o]);
                                }
                            }
                        } else {
                            j.Wrap(t[r], e.createElement(this.defaultTag));
                            j.unwrap(t[r]);
                        }
                    }
                };
                e.clearInlines = function(e, t, i, n, r) {
                    for(var s = 0; s < e.length; s++){
                        var o = e[s];
                        var a = void 0;
                        while(!this.domNode.isBlockNode(o) && (o.parentElement && !o.parentElement.classList.contains('e-img-inner'))){
                            a = o;
                            o = o.parentElement;
                        }
                        if (a && en.inlineTags.indexOf(a.nodeName.toLocaleLowerCase()) > -1) {
                            n.GetSpliceNode(i, a);
                            this.removeInlineParent(a);
                        }
                    }
                };
                e.removeInlineParent = function(e) {
                    var t = j.unwrap(e);
                    for(var i = 0; i < t.length; i++){
                        if (t[i].parentNode.childNodes.length === 1 && !t[i].parentNode.classList.contains('e-img-inner') && en.inlineTags.indexOf(t[i].parentNode.nodeName.toLocaleLowerCase()) > -1) {
                            this.removeInlineParent(t[i].parentNode);
                        } else if (en.inlineTags.indexOf(t[i].nodeName.toLocaleLowerCase()) > -1) {
                            this.removeInlineParent(t[i]);
                        }
                    }
                };
                e.BLOCK_TAGS = [
                    'address',
                    'article',
                    'aside',
                    'blockquote',
                    'details',
                    'dd',
                    'div',
                    'dl',
                    'dt',
                    'fieldset',
                    'figcaption',
                    'figure',
                    'footer',
                    'form',
                    'h1',
                    'h2',
                    'h3',
                    'h4',
                    'h5',
                    'h6',
                    'header',
                    'hgroup',
                    'li',
                    'main',
                    'nav',
                    'noscript',
                    'ol',
                    'p',
                    'pre',
                    'section',
                    'ul'
                ];
                e.NONVALID_PARENT_TAGS = [
                    'thead',
                    'tbody',
                    'ul',
                    'ol',
                    'table',
                    'tfoot',
                    'tr'
                ];
                e.IGNORE_PARENT_TAGS = [
                    'ul',
                    'ol',
                    'table'
                ];
                e.NONVALID_TAGS = [
                    'thead',
                    'tbody',
                    'figcaption',
                    'td',
                    'tr',
                    'th',
                    'tfoot',
                    'figcaption',
                    'li'
                ];
                e.defaultTag = 'p';
                return e;
            }());
            ;
            var el = (function() {
                function e(e) {
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.observer.on(A, this.applyClear, this);
                    this.parent.observer.on(o.kT, this.onKeyDown, this);
                };
                e.prototype.onKeyDown = function(e) {
                    switch(e.event.action){
                        case 'clear-format':
                            this.applyClear({
                                subCommand: 'ClearFormat',
                                callBack: e.callBack,
                                enterAction: e.enterAction
                            });
                            e.event.preventDefault();
                            break;
                    }
                };
                e.prototype.applyClear = function(e) {
                    if (e.subCommand === 'ClearFormat') {
                        ea.clear(this.parent.currentDocument, this.parent.editableElement, e.enterAction, e.selector);
                        if (e.callBack) {
                            e.callBack({
                                requestType: e.subCommand,
                                event: e.event,
                                editorMode: 'HTML',
                                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                            });
                        }
                    }
                };
                return e;
            }());
            ;
            var eh = (function() {
                function e(e, t) {
                    this.undoRedoStack = [];
                    this.parent = e;
                    this.undoRedoSteps = !(0, r.le)(t) ? t.undoRedoSteps : 30;
                    this.undoRedoTimer = !(0, r.le)(t) ? t.undoRedoTimer : 300;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    var e = (0, r.Ds)(this.keyUp, this.undoRedoTimer);
                    this.parent.observer.on(o.My, e, this);
                    this.parent.observer.on(o.kT, this.keyDown, this);
                    this.parent.observer.on(o.om, this.onAction, this);
                    this.parent.observer.on(o.hL, this.onPropertyChanged, this);
                };
                e.prototype.onPropertyChanged = function(e) {
                    for(var t = 0, i = Object.keys(e.newProp); t < i.length; t++){
                        var n = i[t];
                        switch(n){
                            case 'undoRedoSteps':
                                this.undoRedoSteps = e.newProp.undoRedoSteps;
                                break;
                            case 'undoRedoTimer':
                                this.undoRedoTimer = e.newProp.undoRedoTimer;
                                break;
                        }
                    }
                };
                e.prototype.removeEventListener = function() {
                    this.parent.observer.off(o.My, this.keyUp);
                    this.parent.observer.off(o.kT, this.keyDown);
                    this.parent.observer.off(o.om, this.onAction);
                };
                e.prototype.onAction = function(e) {
                    if (e.subCommand === 'Undo') {
                        this.undo(e);
                    } else {
                        this.redo(e);
                    }
                };
                e.prototype.destroy = function() {
                    this.removeEventListener();
                };
                e.prototype.keyDown = function(e) {
                    var t = e.event;
                    var i = this;
                    switch(t.action){
                        case 'undo':
                            t.preventDefault();
                            i.undo(e);
                            break;
                        case 'redo':
                            t.preventDefault();
                            i.redo(e);
                            break;
                    }
                };
                e.prototype.keyUp = function(e) {
                    if (e.event.keyCode !== 17 && !e.event.ctrlKey) {
                        this.saveData(e);
                    }
                };
                e.prototype.saveData = function(e) {
                    var t = new M.q().getRange(this.parent.currentDocument);
                    var i = this.parent.editableElement === t.startContainer.parentElement ? t.startContainer.parentElement : t.startContainer;
                    for(var n = i.childNodes.length - 1; n >= 0; n--){
                        if (!(0, r.le)(i.childNodes[n]) && i.childNodes[n].nodeName === '#text' && i.childNodes[n].textContent.length === 0 && i.childNodes[n].nodeName !== 'IMG' && i.childNodes[n].nodeName !== 'BR' && i.childNodes[n].nodeName && 'HR') {
                            (0, r.og)(i.childNodes[n]);
                        }
                    }
                    t = new M.q().getRange(this.parent.currentDocument);
                    var s = new M.q().save(t, this.parent.currentDocument);
                    var o = this.parent.editableElement.innerHTML;
                    var a = {
                        text: o,
                        range: s
                    };
                    if (this.undoRedoStack.length >= this.steps) {
                        this.undoRedoStack = this.undoRedoStack.slice(0, this.steps + 1);
                    }
                    if (this.undoRedoStack.length > 1 && (this.undoRedoStack[this.undoRedoStack.length - 1].range.range.collapsed === t.collapsed) && (this.undoRedoStack[this.undoRedoStack.length - 1].range.startOffset === s.range.startOffset) && (this.undoRedoStack[this.undoRedoStack.length - 1].range.endOffset === s.range.endOffset) && (this.undoRedoStack[this.undoRedoStack.length - 1].range.range.startContainer === s.range.startContainer) && (this.undoRedoStack[this.undoRedoStack.length - 1].text.trim() === a.text.trim())) {
                        return;
                    }
                    this.undoRedoStack.push(a);
                    this.steps = this.undoRedoStack.length - 1;
                    if (this.steps > this.undoRedoSteps) {
                        this.undoRedoStack.shift();
                        this.steps--;
                    }
                    if (e && e.callBack) {
                        e.callBack();
                    }
                };
                e.prototype.undo = function(e) {
                    if (this.steps > 0) {
                        var t = this.undoRedoStack[this.steps - 1].range;
                        var i = this.undoRedoStack[this.steps - 1].text;
                        this.parent.editableElement.innerHTML = i;
                        this.parent.editableElement.focus();
                        if ((0, B.FA)()) {
                            (0, B.ze)(this.parent.editableElement, e.selector);
                        }
                        t.restore();
                        this.steps--;
                        if (e.callBack) {
                            e.callBack({
                                requestType: 'Undo',
                                editorMode: 'HTML',
                                range: t,
                                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument),
                                event: e.event
                            });
                        }
                    }
                };
                e.prototype.redo = function(e) {
                    if (this.undoRedoStack[this.steps + 1] != null) {
                        var t = this.undoRedoStack[this.steps + 1].range;
                        this.parent.editableElement.innerHTML = this.undoRedoStack[this.steps + 1].text;
                        this.parent.editableElement.focus();
                        if ((0, B.FA)()) {
                            (0, B.ze)(this.parent.editableElement, e.selector);
                        }
                        t.restore();
                        this.steps++;
                        if (e.callBack) {
                            e.callBack({
                                requestType: 'Redo',
                                editorMode: 'HTML',
                                range: t,
                                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument),
                                event: e.event
                            });
                        }
                    }
                };
                e.prototype.getUndoStatus = function() {
                    var e = {
                        undo: false,
                        redo: false
                    };
                    if (this.steps > 0) {
                        e.undo = true;
                    }
                    if (this.undoRedoStack[this.steps + 1] != null) {
                        e.redo = true;
                    }
                    return e;
                };
                return e;
            }());
            ;
            var ec = (function() {
                function e(e) {
                    this.olData = [
                        'decimal',
                        'lower-alpha',
                        'lower-roman',
                        'upper-alpha',
                        'upper-roman',
                        'lower-greek'
                    ];
                    this.ulData = [
                        'disc',
                        'square',
                        'circle',
                        'disc',
                        'square',
                        'circle'
                    ];
                    this.ignorableNodes = [
                        'A',
                        'APPLET',
                        'B',
                        'BLOCKQUOTE',
                        'BR',
                        'BUTTON',
                        'CENTER',
                        'CODE',
                        'COL',
                        'COLGROUP',
                        'DD',
                        'DEL',
                        'DFN',
                        'DIR',
                        'DIV',
                        'DL',
                        'DT',
                        'EM',
                        'FIELDSET',
                        'FONT',
                        'FORM',
                        'FRAME',
                        'FRAMESET',
                        'H1',
                        'H2',
                        'H3',
                        'H4',
                        'H5',
                        'H6',
                        'HR',
                        'I',
                        'IMG',
                        'IFRAME',
                        'INPUT',
                        'INS',
                        'LABEL',
                        'LI',
                        'OL',
                        'OPTION',
                        'P',
                        'PARAM',
                        'PRE',
                        'Q',
                        'S',
                        'SELECT',
                        'SPAN',
                        'STRIKE',
                        'STRONG',
                        'SUB',
                        'SUP',
                        'TABLE',
                        'TBODY',
                        'TD',
                        'TEXTAREA',
                        'TFOOT',
                        'TH',
                        'THEAD',
                        'TITLE',
                        'TR',
                        'TT',
                        'U',
                        'UL'
                    ];
                    this.blockNode = [
                        'div',
                        'p',
                        'h1',
                        'h2',
                        'h3',
                        'h4',
                        'h5',
                        'h6',
                        'address',
                        'blockquote',
                        'button',
                        'center',
                        'dd',
                        'dir',
                        'dl',
                        'dt',
                        'fieldset',
                        'frameset',
                        'hr',
                        'iframe',
                        'isindex',
                        'li',
                        'map',
                        'menu',
                        'noframes',
                        'noscript',
                        'object',
                        'ol',
                        'pre',
                        'table',
                        'tbody',
                        'td',
                        'tfoot',
                        'th',
                        'thead',
                        'tr',
                        'ul',
                        'header',
                        'article',
                        'nav',
                        'footer',
                        'section',
                        'aside',
                        'main',
                        'figure',
                        'figcaption'
                    ];
                    this.borderStyle = [
                        'border-top',
                        'border-right',
                        'border-bottom',
                        'border-left'
                    ];
                    this.removableElements = [
                        'o:p',
                        'style'
                    ];
                    this.listContents = [];
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.observer.on(o.M, this.wordCleanup, this);
                };
                e.prototype.wordCleanup = function(e) {
                    var t = !(0, r.le)(e.allowedStylePropertiesArray) ? e.allowedStylePropertiesArray : [];
                    var i = [];
                    var n = e.args.clipboardData.getData('text/HTML');
                    var s = e.args.clipboardData.getData('text/rtf');
                    var o = (0, r.az)('p');
                    o.setAttribute('id', 'MSWord-Content');
                    o.innerHTML = n;
                    var a = /class='?Mso|style='[^ ]*\bmso-/i;
                    var l = /class="?Mso|style="[^ ]*\bmso-/i;
                    var h = /(class="?Mso|class='?Mso|class="?Xl|class='?Xl|class=Xl|style="[^"]*\bmso-|style='[^']*\bmso-|w:WordDocument)/gi;
                    var c = /style='mso-width-source:/i;
                    if (a.test(n) || l.test(n) || h.test(n) || c.test(n)) {
                        this.imageConversion(o, s);
                        n = n.replace(/<img[^>]+>/i, '');
                        this.addListClass(o);
                        i = this.cleanUp(o, i);
                        if (!(0, r.le)(i[0]) && i[0].parentElement.tagName !== 'UL' && i[0].parentElement.tagName !== 'OL') {
                            this.listConverter(i);
                        }
                        this.styleCorrection(o, t);
                        this.removingComments(o);
                        this.removeUnwantedElements(o);
                        this.removeEmptyElements(o);
                        this.breakLineAddition(o);
                        this.removeClassName(o);
                        if (c.test(n)) {
                            this.addTableBorderClass(o);
                        }
                        e.callBack(o.innerHTML);
                    } else {
                        e.callBack(o.innerHTML);
                    }
                };
                e.prototype.addListClass = function(e) {
                    var t = e.querySelectorAll('*');
                    for(var i = 0; i < t.length; i++){
                        if (!(0, r.le)(t[i].getAttribute('style')) && t[i].getAttribute('style').replace(/ /g, '').replace('\n', '').indexOf('mso-list:l') >= 0 && t[i].className.toLowerCase().indexOf('msolistparagraph') === -1 && t[i].tagName.charAt(0) !== 'H') {
                            t[i].classList.add('msolistparagraph');
                        }
                    }
                };
                e.prototype.addTableBorderClass = function(e) {
                    var t = e.querySelectorAll('table');
                    var i = false;
                    for(var n = 0; n < t.length; n++){
                        for(var r = 0; r < this.borderStyle.length; r++){
                            if (t[n].innerHTML.indexOf(this.borderStyle[r]) >= 0) {
                                i = true;
                                break;
                            }
                        }
                        if (i) {
                            t[n].classList.add('e-rte-table-border');
                            i = false;
                        }
                    }
                };
                e.prototype.imageConversion = function(e, t) {
                    this.checkVShape(e);
                    var i = e.querySelectorAll('img');
                    for(var n = 0; n < i.length; n++){
                        if (!(0, r.le)(i[n].getAttribute('v:shapes')) && i[n].getAttribute('v:shapes').indexOf('Picture') < 0 && i[n].getAttribute('v:shapes').indexOf('Image') < 0) {
                            (0, r.og)(i[n]);
                        }
                    }
                    i = e.querySelectorAll('img');
                    var s = [];
                    var o = [];
                    var a = [];
                    var l = new RegExp(/([^\S]|^)(((https?\:\/\/)|(www\.))(\S+))/gi);
                    if (i.length > 0) {
                        for(var n = 0; n < i.length; n++){
                            s.push(i[n].getAttribute('src'));
                            a.push(i[n].getAttribute('src').split('/')[i[n].getAttribute('src').split('/').length - 1].split('.')[0]);
                        }
                        var h = this.hexConversion(t);
                        for(var n = 0; n < h.length; n++){
                            o.push(this.convertToBase64(h[n]));
                        }
                        for(var n = 0; n < i.length; n++){
                            if (s[n].match(l)) {
                                i[n].setAttribute('src', s[n]);
                            } else {
                                i[n].setAttribute('src', o[n]);
                            }
                            i[n].setAttribute('id', 'msWordImg-' + a[n]);
                        }
                    }
                };
                e.prototype.checkVShape = function(e) {
                    var t = e.querySelectorAll('*');
                    for(var i = 0; i < t.length; i++){
                        switch(t[i].nodeName){
                            case 'V:SHAPETYPE':
                                (0, r.og)(t[i]);
                                break;
                            case 'V:SHAPE':
                                if (t[i].firstElementChild.nodeName === 'V:IMAGEDATA') {
                                    var n = t[i].firstElementChild.getAttribute('src');
                                    var s = (0, r.az)('img');
                                    s.setAttribute('src', n);
                                    t[i].parentElement.insertBefore(s, t[i]);
                                    (0, r.og)(t[i]);
                                }
                                break;
                        }
                    }
                };
                e.prototype.convertToBase64 = function(e) {
                    var t = this.conHexStringToBytes(e.hex);
                    var i = this.conBytesToBase64(t);
                    var n = e.type ? 'data:' + e.type + ';base64,' + i : null;
                    return n;
                };
                e.prototype.conBytesToBase64 = function(e) {
                    var t = '';
                    var i = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                    var n = e.length;
                    for(var r = 0; r < n; r += 3){
                        var s = e.slice(r, r + 3);
                        var o = s.length;
                        var a = [];
                        if (o < 3) {
                            for(var l = o; l < 3; l++){
                                s[l] = 0;
                            }
                        }
                        a[0] = (s[0] & 0xFC) >> 2;
                        a[1] = ((s[0] & 0x03) << 4) | (s[1] >> 4);
                        a[2] = ((s[1] & 0x0F) << 2) | ((s[2] & 0xC0) >> 6);
                        a[3] = s[2] & 0x3F;
                        for(var l = 0; l < 4; l++){
                            if (l <= o) {
                                t += i.charAt(a[l]);
                            } else {
                                t += '=';
                            }
                        }
                    }
                    return t;
                };
                e.prototype.conHexStringToBytes = function(e) {
                    var t = [];
                    var i = e.length / 2;
                    for(var n = 0; n < i; n++){
                        t.push(parseInt(e.substr(n * 2, 2), 16));
                    }
                    return t;
                };
                e.prototype.hexConversion = function(e) {
                    var t = /\{\\pict[\s\S]+?\\bliptag\-?\d+(\\blipupi\-?\d+)?(\{\\\*\\blipuid\s?[\da-fA-F]+)?[\s\}]*?/;
                    var i = new RegExp('(?:(' + t.source + '))([\\da-fA-F\\s]+)\\}', 'g');
                    var n = e.match(i);
                    var s;
                    var o = [];
                    if (!(0, r.le)(n)) {
                        for(var a = 0; a < n.length; a++){
                            if (t.test(n[a])) {
                                if (n[a].indexOf('\\pngblip') !== -1) {
                                    s = 'image/png';
                                } else if (n[a].indexOf('\\jpegblip') !== -1) {
                                    s = 'image/jpeg';
                                } else {
                                    continue;
                                }
                                o.push({
                                    hex: s ? n[a].replace(t, '').replace(/[^\da-fA-F]/g, '') : null,
                                    type: s
                                });
                            }
                        }
                    }
                    return o;
                };
                e.prototype.removeClassName = function(e) {
                    var t = e.querySelectorAll('*[class]');
                    for(var i = 0; i < t.length; i++){
                        t[i].removeAttribute('class');
                    }
                };
                e.prototype.breakLineAddition = function(e) {
                    var t = e.querySelectorAll('*');
                    for(var i = 0; i < t.length; i++){
                        if (t[i].children.length === 0 && t[i].innerHTML === '&nbsp;' && (t[i].innerHTML === '&nbsp;' && !t[i].closest('li')) && !t[i].closest('td')) {
                            var n = this.findDetachElem(t[i]);
                            var s = (0, r.az)('br');
                            if (!(0, r.le)(n.parentElement)) {
                                n.parentElement.insertBefore(s, n);
                                (0, r.og)(n);
                            }
                        }
                    }
                };
                e.prototype.findDetachElem = function(e) {
                    var t;
                    if (!(0, r.le)(e.parentElement) && e.parentElement.textContent.trim() === '' && e.parentElement.tagName !== 'TD' && (0, r.le)(e.parentElement.querySelector('img'))) {
                        t = this.findDetachElem(e.parentElement);
                    } else {
                        t = e;
                    }
                    return t;
                };
                e.prototype.removeUnwantedElements = function(e) {
                    var t = e.innerHTML;
                    for(var i = 0; i < this.removableElements.length; i++){
                        var n = new RegExp('<' + this.removableElements[i] + '>', 'g');
                        var r = new RegExp('</' + this.removableElements[i] + '>', 'g');
                        t = t.replace(n, '');
                        t = t.replace(r, '');
                    }
                    e.innerHTML = t;
                    e.querySelectorAll(':empty');
                };
                e.prototype.findDetachEmptyElem = function(e) {
                    var t;
                    if (!(0, r.le)(e.parentElement)) {
                        if (e.parentElement.textContent.trim() === '' && e.parentElement.getAttribute('id') !== 'MSWord-Content' && (0, r.le)(e.parentElement.querySelector('img'))) {
                            t = this.findDetachEmptyElem(e.parentElement);
                        } else {
                            t = e;
                        }
                    } else {
                        t = null;
                    }
                    return t;
                };
                e.prototype.removeEmptyElements = function(e) {
                    var t = e.querySelectorAll(':empty');
                    for(var i = 0; i < t.length; i++){
                        if (!(0, r.le)(t[i].closest('td')) && !(0, r.le)(t[i].closest('td').querySelector('.MsoNormal'))) {
                            t[i].innerHTML = '-';
                        }
                        if (t[i].tagName !== 'IMG' && t[i].tagName !== 'BR' && t[i].tagName !== 'IFRAME' && t[i].tagName !== 'TD' && t[i].tagName !== 'HR') {
                            var n = this.findDetachEmptyElem(t[i]);
                            if (!(0, r.le)(n)) {
                                (0, r.og)(n);
                            }
                        }
                    }
                };
                e.prototype.styleCorrection = function(e, t) {
                    var i = e.querySelectorAll('style');
                    if (i.length > 0) {
                        var n = i[0].innerHTML.match(/[\S ]+\s+{[\s\S]+?}/gi);
                        var s = !(0, r.le)(n) ? this.findStyleObject(n) : null;
                        var o = Object.keys(s);
                        var a = o.map(function(e) {
                            return s[e];
                        });
                        a = this.removeUnwantedStyle(a, t);
                        this.filterStyles(e, t);
                        var l = void 0;
                        var h = false;
                        for(var c = 0; c < o.length; c++){
                            if (o[c].split('.')[0] === '') {
                                l = e.getElementsByClassName(o[c].split('.')[1]);
                                h = true;
                            } else if (o[c].split('.').length === 1 && o[c].split('.')[0].indexOf('@') >= 0) {
                                continue;
                            } else if (o[c].split('.').length === 1 && o[c].split('.')[0].indexOf('@') < 0) {
                                l = e.getElementsByTagName(o[c]);
                            } else {
                                l = e.querySelectorAll(o[c]);
                            }
                            for(var d = 0; d < l.length; d++){
                                var p = l[d].getAttribute('style');
                                if (!(0, r.le)(p) && p.trim() !== '') {
                                    var u = a[c].split(';');
                                    if (!h) {
                                        for(var f = 0; f < u.length; f++){
                                            if (p.indexOf(u[f].split(':')[0]) >= 0) {
                                                u.splice(f, 1);
                                                f--;
                                            }
                                        }
                                    }
                                    a[c] = u.join(';') + ';';
                                    var m = p + a[c];
                                    l[d].setAttribute('style', m);
                                } else {
                                    a[c] = a[c].replace(/text-indent:-(.*?)(?=;|$)/gm, '');
                                    l[d].setAttribute('style', a[c]);
                                }
                            }
                            h = false;
                        }
                    }
                };
                e.prototype.filterStyles = function(e, t) {
                    var i = e.querySelectorAll('*[style]');
                    for(var n = 0; n < i.length; n++){
                        var r = i[n].getAttribute('style').split(';');
                        var s = '';
                        for(var o = 0; o < r.length; o++){
                            if (t.indexOf(r[o].split(':')[0].trim()) >= 0) {
                                s += r[o] + ';';
                            }
                        }
                        i[n].setAttribute('style', s);
                    }
                };
                e.prototype.removeUnwantedStyle = function(e, t) {
                    for(var i = 0; i < e.length; i++){
                        var n = e[i].split(';');
                        e[i] = '';
                        for(var r = 0; r < n.length; r++){
                            if (t.indexOf(n[r].split(':')[0]) >= 0) {
                                e[i] += n[r] + ';';
                            }
                        }
                    }
                    return e;
                };
                e.prototype.findStyleObject = function(e) {
                    var t = {};
                    for(var i = 0; i < e.length; i++){
                        var n = e[i];
                        var r = n.replace(/([\S ]+\s+){[\s\S]+?}/gi, '$1');
                        var s = n.replace(/[\S ]+\s+{([\s\S]+?)}/gi, '$1');
                        r = r.replace(/^[\s]|[\s]$/gm, '');
                        s = s.replace(/^[\s]|[\s]$/gm, '');
                        r = r.replace(/\n|\r|\n\r/g, '');
                        s = s.replace(/\n|\r|\n\r/g, '');
                        for(var o = r.split(', '), a = 0; a < o.length; a++){
                            t[o[a]] = s;
                        }
                    }
                    return t;
                };
                e.prototype.removingComments = function(e) {
                    var t = e.innerHTML;
                    t = t.replace(/<!--[\s\S]*?-->/g, '');
                    e.innerHTML = t;
                };
                e.prototype.cleanUp = function(e, t) {
                    var i = '';
                    var n = [];
                    var s;
                    var o = e.querySelectorAll('*');
                    for(var a = 0; a < o.length; a++){
                        if (this.ignorableNodes.indexOf(o[a].nodeName) === -1 || (o[a].nodeType === 3 && o[a].textContent.trim() === '')) {
                            n.push(o[a]);
                            continue;
                        } else if (o[a].className && o[a].className.toLowerCase().indexOf('msolistparagraph') !== -1 && o[a].childElementCount !== 1 && !(0, r.le)(o[a].getAttribute('style')) && o[a].getAttribute('style').indexOf('mso-list:') >= 0) {
                            if (o[a].className.indexOf('MsoListParagraphCxSpFirst') >= 0 && t.length > 0 && t[t.length - 1] !== null) {
                                t.push(null);
                            }
                            t.push(o[a]);
                        }
                        if (s && (this.blockNode.indexOf(o[a].nodeName.toLowerCase()) !== -1) && !(o[a].className && o[a].className.toLowerCase().indexOf('msolistparagraph') !== -1 && !(0, r.le)(o[a].getAttribute('style')) && o[a].getAttribute('style').indexOf('mso-list:') >= 0)) {
                            t.push(null);
                        }
                        if (this.blockNode.indexOf(o[a].nodeName.toLowerCase()) !== -1) {
                            if (o[a].className && o[a].className.toLowerCase().indexOf('msolistparagraph') !== -1 && !(0, r.le)(o[a].getAttribute('style')) && o[a].getAttribute('style').indexOf('mso-list:') >= 0) {
                                s = true;
                            } else {
                                s = false;
                            }
                        }
                    }
                    if (t.length && (t[t.length - 1] !== null)) {
                        t.push(null);
                    }
                    return t;
                };
                e.prototype.listConverter = function(e) {
                    var t;
                    var i = [];
                    var n = [];
                    var s = '';
                    var o;
                    var a = '';
                    for(var l = 0; l < e.length; l++){
                        if (e[l] === null) {
                            i.push({
                                content: this.makeConversion(n),
                                node: e[l - 1]
                            });
                            n = [];
                            continue;
                        }
                        if (e[l].getAttribute('style') && e[l].getAttribute('style').indexOf('mso-outline-level') !== -1) {
                            e[l].setAttribute('style', e[l].getAttribute('style').replace('mso-outline-level', 'mso-outline'));
                        }
                        s = e[l].getAttribute('style');
                        if (s && s.indexOf('level') !== -1) {
                            t = parseInt(s.charAt(s.indexOf('level') + 5), null);
                        } else {
                            t = 1;
                        }
                        this.listContents = [];
                        this.getListContent(e[l]);
                        var h = void 0;
                        var c = void 0;
                        if (!(0, r.le)(this.listContents[0])) {
                            h = this.listContents[0].trim().length > 1 ? 'ol' : 'ul';
                            c = this.getlistStyleType(this.listContents[0], h);
                            var d = [];
                            for(var p = 1; p < this.listContents.length; p++){
                                d.push(this.listContents[p]);
                            }
                            var u = void 0;
                            if (!(0, r.le)(e[l].className)) {
                                u = e[l].className;
                            }
                            if (!(0, r.le)(e[l].getAttribute('style'))) {
                                e[l].setAttribute('style', e[l].getAttribute('style').replace('text-align:start;', ''));
                                if (e[l].style.textAlign !== '') {
                                    e[l].setAttribute('style', 'text-align:' + e[l].style.textAlign);
                                    a = e[l].getAttribute('style');
                                }
                            }
                            n.push({
                                listType: h,
                                content: d,
                                nestedLevel: t,
                                class: u,
                                listStyle: a,
                                listStyleTypeName: c
                            });
                        }
                    }
                    o = e.shift();
                    while(o){
                        var f = [];
                        for(var m = 0; m < i.length; m++){
                            if (i[m].node === o) {
                                for(var v = 0; v < i[m].content.childNodes.length; v++){
                                    f.push(i[m].content.childNodes[v]);
                                }
                                for(var v = 0; v < f.length; v++){
                                    o.parentElement.insertBefore(f[v], o);
                                }
                                break;
                            }
                        }
                        o.remove();
                        o = e.shift();
                        if (!o) {
                            o = e.shift();
                        }
                    }
                };
                e.prototype.getlistStyleType = function(e, t) {
                    var i;
                    if (t === 'ol') {
                        switch(e.split('.')[0]){
                            case "A":
                                i = "upper-alpha";
                                break;
                            case "a":
                                i = "lower-alpha";
                                break;
                            case "I":
                                i = "upper-roman";
                                break;
                            case "i":
                                i = "lower-roman";
                                break;
                            case "α":
                                i = "lower-greek";
                                break;
                            default:
                                i = "decimal";
                                break;
                        }
                    } else {
                        switch(e.split('.')[0]){
                            case "o":
                                i = "circle";
                                break;
                            case "§":
                                i = "square";
                                break;
                            default:
                                i = "disc";
                                break;
                        }
                    }
                    return i;
                };
                e.prototype.makeConversion = function(e) {
                    var t = (0, r.az)('div');
                    var i;
                    var n = 1;
                    var s;
                    var o = 0;
                    var a;
                    for(var l = 0; l < e.length; l++){
                        var h = (0, r.az)('p');
                        h.innerHTML = e[l].content.join(' ');
                        if ((e[l].nestedLevel === 1) && o === 0 && e[l].content) {
                            t.appendChild(i = (0, r.az)(e[l].listType));
                            s = (0, r.az)('li');
                            s.appendChild(h);
                            i.appendChild(s);
                            i.setAttribute('level', e[l].nestedLevel.toString());
                            i.style.listStyleType = e[l].listStyleTypeName;
                        } else if (e[l].nestedLevel === n) {
                            if (s.parentElement.tagName.toLowerCase() === e[l].listType) {
                                s.parentElement.appendChild(s = (0, r.az)('li'));
                                s.appendChild(h);
                            } else {
                                i = (0, r.az)(e[l].listType);
                                i.style.listStyleType = e[l].listStyleTypeName;
                                s.parentElement.parentElement.appendChild(i);
                                s = (0, r.az)('li');
                                s.appendChild(h);
                                i.appendChild(s);
                                i.setAttribute('level', e[l].nestedLevel.toString());
                            }
                        } else if (e[l].nestedLevel > n) {
                            if (!(0, r.le)(s)) {
                                for(var c = 0; c < e[l].nestedLevel - n; c++){
                                    s.appendChild(i = (0, r.az)(e[l].listType));
                                    s = (0, r.az)('li');
                                    if (c != e[l].nestedLevel - n - 1 && e[l].nestedLevel - n > 1) {
                                        s.style.listStyleType = "none";
                                    }
                                    i.appendChild(s);
                                }
                                s.appendChild(h);
                                i.setAttribute('level', e[l].nestedLevel.toString());
                                i.style.listStyleType = e[l].listStyleTypeName;
                            } else {
                                t.appendChild(i = (0, r.az)(e[l].listType));
                                s = (0, r.az)('li');
                                s.appendChild(h);
                                i.appendChild(s);
                                i.setAttribute('level', e[l].nestedLevel.toString());
                                i.style.listStyleType = e[l].listStyleTypeName;
                            }
                        } else if (e[l].nestedLevel === 1) {
                            if (t.lastChild.tagName.toLowerCase() === e[l].listType) {
                                i = t.lastChild;
                            } else {
                                t.appendChild(i = (0, r.az)(e[l].listType));
                                i.style.listStyleType = e[l].listStyleTypeName;
                            }
                            s = (0, r.az)('li');
                            s.appendChild(h);
                            i.appendChild(s);
                            i.setAttribute('level', e[l].nestedLevel.toString());
                        } else {
                            a = s;
                            while(a.parentElement){
                                a = a.parentElement;
                                if (a.attributes.getNamedItem('level')) {
                                    if (parseInt(a.attributes.getNamedItem('level').textContent, null) === e[l].nestedLevel) {
                                        s = (0, r.az)('li');
                                        s.appendChild(h);
                                        a.appendChild(s);
                                        break;
                                    } else if (e[l].nestedLevel > parseInt(a.attributes.getNamedItem('level').textContent, null)) {
                                        a.appendChild(i = (0, r.az)(e[l].listType));
                                        s = (0, r.az)('li');
                                        s.appendChild(h);
                                        i.appendChild(s);
                                        i.setAttribute('level', e[l].nestedLevel.toString());
                                        i.style.listStyleType = e[l].listStyleTypeName;
                                        break;
                                    }
                                }
                                continue;
                            }
                        }
                        s.setAttribute('class', e[l].class);
                        var d = s.getAttribute('style');
                        s.setAttribute('style', (!(0, r.le)(d) ? d : ''));
                        n = e[l].nestedLevel;
                        o++;
                    }
                    return t;
                };
                e.prototype.getListContent = function(e) {
                    var t = '';
                    var i = e.firstElementChild;
                    if (i.textContent.trim() === '' && !(0, r.le)(i.firstElementChild) && i.firstElementChild.nodeName === 'IMG') {
                        t = e.innerHTML.trim();
                        this.listContents.push('');
                        this.listContents.push(t);
                    } else {
                        var n = [
                            'b',
                            'em'
                        ];
                        if (i.childNodes.length > 0 && (i.querySelectorAll('b').length > 0 || i.querySelectorAll('em').length > 0)) {
                            for(var s = 0; s < i.childNodes.length; s++){
                                var o = i.childNodes[s].nodeName.toLowerCase();
                                if (i.childNodes[s].textContent.trim().length > 1 && n.indexOf(o) !== -1) {
                                    t = '<' + o + '>' + i.childNodes[s].textContent + '</' + o + '>';
                                    this.listContents.push(t);
                                } else if (i.childNodes[s].textContent.trim().length === 1) {
                                    this.listContents.push(i.childNodes[s].textContent.trim());
                                }
                            }
                        } else {
                            t = i.textContent.trim();
                            this.listContents.push(t);
                        }
                    }
                    (0, r.og)(i);
                    this.listContents.push(e.innerHTML);
                };
                return e;
            }());
            ;
            var ed = (function() {
                function e(e) {
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.observer.on(O, this.insertText, this);
                };
                e.prototype.insertText = function(e) {
                    var t = document.createTextNode(e.value);
                    V.Insert(this.parent.currentDocument, t, this.parent.editableElement);
                    if (e.callBack) {
                        e.callBack({
                            requestType: e.subCommand,
                            editorMode: 'HTML',
                            event: e.event,
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                        });
                    }
                };
                return e;
            }());
            ;
            var ep = (function() {
                function e(e) {
                    this.currentDocument = e.document;
                    this.editableElement = e.editableElement;
                    this.nodeSelection = new M.q();
                    this.nodeCutter = new z();
                    this.domNode = new H(this.editableElement, this.currentDocument);
                    this.observer = new r.Qj(this);
                    this.listObj = new F(this);
                    this.formatObj = new q(this);
                    this.alignmentObj = new U(this);
                    this.indentsObj = new W(this);
                    this.linkObj = new _(this);
                    this.imgObj = new ee(this);
                    this.selectionObj = new es(this);
                    this.inserthtmlObj = new eo(this);
                    this.insertTextObj = new ed(this);
                    this.clearObj = new el(this);
                    this.tableObj = new et(this);
                    this.undoRedoManager = new eh(this, e.options);
                    this.msWordPaste = new ec(this);
                    this.wireEvents();
                }
                e.prototype.wireEvents = function() {
                    this.observer.on(o.Hb, this.editorKeyDown, this);
                    this.observer.on(o.R4, this.editorKeyUp, this);
                    this.observer.on(o.R4, this.editorKeyUp, this);
                    this.observer.on(o.kR, this.onPropertyChanged, this);
                    this.observer.on(o.Ki, this.onWordPaste, this);
                    this.observer.on(o.O6, this.onBegin, this);
                };
                e.prototype.onWordPaste = function(e) {
                    this.observer.notify(o.M, e);
                };
                e.prototype.onPropertyChanged = function(e) {
                    this.observer.notify(o.hL, e);
                };
                e.prototype.editorKeyDown = function(e) {
                    this.observer.notify(o.kT, e);
                };
                e.prototype.editorKeyUp = function(e) {
                    this.observer.notify(o.My, e);
                };
                e.prototype.onBegin = function(e) {
                    this.observer.notify(o.nD, e);
                };
                e.prototype.execCommand = function(e, t, i, n, r, s, a, E) {
                    switch(e.toLowerCase()){
                        case 'lists':
                            this.observer.notify(o.PV, {
                                subCommand: t,
                                event: i,
                                callBack: n,
                                selector: a,
                                item: s,
                                enterAction: E
                            });
                            break;
                        case 'formats':
                            this.observer.notify(o.Kj, {
                                subCommand: t,
                                event: i,
                                callBack: n,
                                selector: a,
                                exeValue: s,
                                enterAction: E
                            });
                            break;
                        case 'alignments':
                            this.observer.notify(S, {
                                subCommand: t,
                                event: i,
                                callBack: n,
                                selector: a,
                                value: s
                            });
                            break;
                        case 'indents':
                            this.observer.notify(w, {
                                subCommand: t,
                                event: i,
                                callBack: n,
                                selector: a
                            });
                            break;
                        case 'links':
                            this.observer.notify(c, {
                                command: e,
                                value: t,
                                item: s,
                                event: i,
                                callBack: n
                            });
                            break;
                        case 'files':
                            this.observer.notify(l, {
                                command: e,
                                value: 'Image',
                                item: s,
                                event: i,
                                callBack: n,
                                selector: a
                            });
                            break;
                        case 'images':
                            this.observer.notify(l, {
                                command: e,
                                value: t,
                                item: s,
                                event: i,
                                callBack: n,
                                selector: a
                            });
                            break;
                        case 'table':
                            switch(t.toString().toLocaleLowerCase()){
                                case 'createtable':
                                    this.observer.notify(h, {
                                        item: s,
                                        event: i,
                                        callBack: n,
                                        enterAction: E
                                    });
                                    break;
                                case 'insertrowbefore':
                                case 'insertrowafter':
                                    this.observer.notify(d, {
                                        item: s,
                                        event: i,
                                        callBack: n
                                    });
                                    break;
                                case 'insertcolumnleft':
                                case 'insertcolumnright':
                                    this.observer.notify(p, {
                                        item: s,
                                        event: i,
                                        callBack: n
                                    });
                                    break;
                                case 'deleterow':
                                    this.observer.notify(u, {
                                        item: s,
                                        event: i,
                                        callBack: n
                                    });
                                    break;
                                case 'deletecolumn':
                                    this.observer.notify(f, {
                                        item: s,
                                        event: i,
                                        callBack: n
                                    });
                                    break;
                                case 'tableremove':
                                    this.observer.notify(m, {
                                        item: s,
                                        event: i,
                                        callBack: n
                                    });
                                    break;
                                case 'tableheader':
                                    this.observer.notify(v, {
                                        item: s,
                                        event: i,
                                        callBack: n
                                    });
                                    break;
                                case 'aligntop':
                                case 'alignmiddle':
                                case 'alignbottom':
                                    this.observer.notify(g, {
                                        item: s,
                                        event: i,
                                        callBack: n
                                    });
                                    break;
                                case 'merge':
                                    this.observer.notify(b, {
                                        item: s,
                                        event: i,
                                        callBack: n
                                    });
                                    break;
                                case 'horizontalsplit':
                                    this.observer.notify(C, {
                                        item: s,
                                        event: i,
                                        callBack: n
                                    });
                                    break;
                                case 'verticalsplit':
                                    this.observer.notify(y, {
                                        item: s,
                                        event: i,
                                        callBack: n
                                    });
                                    break;
                            }
                            break;
                        case 'font':
                        case 'style':
                        case 'effects':
                        case 'casing':
                            this.observer.notify(N, {
                                subCommand: t,
                                event: i,
                                callBack: n,
                                value: r,
                                selector: a,
                                enterAction: E
                            });
                            break;
                        case 'inserthtml':
                            this.observer.notify(D, {
                                subCommand: t,
                                callBack: n,
                                value: r
                            });
                            break;
                        case 'inserttext':
                            this.observer.notify(O, {
                                subCommand: t,
                                callBack: n,
                                value: r
                            });
                            break;
                        case 'clear':
                            this.observer.notify(A, {
                                subCommand: t,
                                event: i,
                                callBack: n,
                                selector: a,
                                enterAction: E
                            });
                            break;
                        case 'actions':
                            this.observer.notify(o.om, {
                                subCommand: t,
                                event: i,
                                callBack: n,
                                selector: a
                            });
                            break;
                    }
                };
                return e;
            }());
            ;
            var eu = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var ef = (function(e) {
                eu(t, e);
                function t(t) {
                    var i = e.call(this) || this;
                    i.initialize();
                    (0, r.l7)(i, i, t, true);
                    if (i.currentDocument && i.element) {
                        i.updateFormatter(i.element, i.currentDocument, t.options);
                    }
                    return i;
                }
                t.prototype.initialize = function() {
                    this.keyConfig = R.qW;
                };
                t.prototype.updateFormatter = function(e, t, i) {
                    if (e && t) {
                        this.editorManager = new ep({
                            document: t,
                            editableElement: e,
                            options: i
                        });
                    }
                };
                return t;
            }(a));
            var em = i(809);
            var ev = i(9805);
            ;
            var eg = (0, B.q_)();
            var eb = (function() {
                function e() {}
                e.get = function(e, t, i, n, r, s) {
                    var o = JSON.parse(JSON.stringify(eg));
                    var a = JSON.parse(JSON.stringify(eg));
                    var l = new M.q();
                    var h = s ? [
                        s
                    ] : l.getNodeCollection(l.getRange(e));
                    var c = h.length;
                    var d = false;
                    var p = l.getRange(e);
                    for(var u = 0; u < h.length; u++){
                        while(h[u].nodeType === 3 && p.startContainer.nodeType === 3 && h[u].parentNode && h[u].parentNode.lastElementChild && h[u].parentNode.lastElementChild.nodeName !== 'BR' && (this.getImmediateBlockNode(h[u].parentNode)).textContent.replace(/\u200B/g, '').length === 0 && p.startContainer.textContent.replace(/\u200B/g, '').length === 0 && l.get(e).toString().replace(/\u200B/g, '').length === 0){
                            h[u] = h[u].parentNode.lastElementChild.firstChild;
                            d = true;
                        }
                        if (d && h[u]) {
                            l.setCursorPoint(e, h[u], h[u].textContent.length);
                            d = false;
                        }
                        if ((h[u].nodeName !== 'BR' && h[u].nodeType !== 3) || (c > 1 && h[u].nodeType === 3 && h[u].textContent.trim() === '')) {
                            h.splice(u, 1);
                            u--;
                        }
                    }
                    for(var u = 0; u < h.length; u++){
                        o = this.getFormatParent(e, o, h[u], t, i, n, r);
                        if ((u === 0 && o.bold) || !o.bold) {
                            a.bold = o.bold;
                        }
                        if ((u === 0 && o.insertcode) || !o.insertcode) {
                            a.insertcode = o.insertcode;
                        }
                        if ((u === 0 && o.italic) || !o.italic) {
                            a.italic = o.italic;
                        }
                        if ((u === 0 && o.underline) || !o.underline) {
                            a.underline = o.underline;
                        }
                        if ((u === 0 && o.strikethrough) || !o.strikethrough) {
                            a.strikethrough = o.strikethrough;
                        }
                        if ((u === 0 && o.superscript) || !o.superscript) {
                            a.superscript = o.superscript;
                        }
                        if ((u === 0 && o.subscript) || !o.subscript) {
                            a.subscript = o.subscript;
                        }
                        if ((u === 0 && o.fontcolor) || !o.fontcolor) {
                            a.fontcolor = o.fontcolor;
                        }
                        if ((u === 0 && o.fontname) || !o.fontname) {
                            a.fontname = o.fontname;
                        }
                        if ((u === 0 && o.fontsize) || !o.fontsize) {
                            a.fontsize = o.fontsize;
                        }
                        if ((u === 0 && o.backgroundcolor) || !o.backgroundcolor) {
                            a.backgroundcolor = o.backgroundcolor;
                        }
                        if ((u === 0 && o.orderedlist) || !o.orderedlist) {
                            a.orderedlist = o.orderedlist;
                        }
                        if ((u === 0 && o.unorderedlist) || !o.unorderedlist) {
                            a.unorderedlist = o.unorderedlist;
                        }
                        if ((u === 0 && o.alignments) || !o.alignments) {
                            a.alignments = o.alignments;
                        }
                        if ((u === 0 && o.formats) || !o.formats) {
                            a.formats = o.formats;
                        }
                        if ((u === 0 && o.createlink) || !o.createlink) {
                            a.createlink = o.createlink;
                        }
                        if ((u === 0 && o.numberFormatList) || !o.numberFormatList) {
                            a.numberFormatList = o.numberFormatList;
                        }
                        if ((u === 0 && o.bulletFormatList) || !o.bulletFormatList) {
                            a.bulletFormatList = o.bulletFormatList;
                        }
                        o = JSON.parse(JSON.stringify(eg));
                    }
                    return a;
                };
                e.getImmediateBlockNode = function(e) {
                    do {
                        e = e.parentNode;
                    }while (e && k.indexOf(e.nodeName.toLocaleLowerCase()) < 0)
                    return e;
                };
                e.getFormatParent = function(e, t, i, n, r, s, o) {
                    if (n.contains(i) || (i.nodeType === 3 && n.nodeType !== 3 && n.contains(i.parentNode))) {
                        do {
                            t = this.isFormattedNode(e, t, i, r, s, o);
                            i = i.parentNode;
                        }while (i && (i !== n))
                    }
                    return t;
                };
                e.isFormattedNode = function(e, t, i, n, r, s) {
                    if (!t.bold) {
                        t.bold = en.isBold(i);
                    }
                    if (!t.italic) {
                        t.italic = en.isItalic(i);
                    }
                    if (!t.underline) {
                        t.underline = en.isUnderline(i);
                    }
                    if (!t.strikethrough) {
                        t.strikethrough = en.isStrikethrough(i);
                    }
                    if (!t.superscript) {
                        t.superscript = en.isSuperscript(i);
                    }
                    if (!t.subscript) {
                        t.subscript = en.isSubscript(i);
                    }
                    if (!t.fontcolor) {
                        t.fontcolor = this.isFontColor(e, i);
                    }
                    if (!t.fontname) {
                        t.fontname = this.isFontName(e, i, s);
                    }
                    if (!t.fontsize) {
                        t.fontsize = this.isFontSize(i, r);
                    }
                    if (!t.backgroundcolor) {
                        t.backgroundcolor = this.isBackgroundColor(i);
                    }
                    if (!t.orderedlist) {
                        t.orderedlist = this.isOrderedList(i);
                    }
                    if (!t.unorderedlist) {
                        t.unorderedlist = this.isUnorderedList(i);
                    }
                    if (!t.alignments) {
                        t.alignments = this.isAlignment(i);
                    }
                    if (!t.formats) {
                        t.formats = this.isFormats(i, n);
                        if (t.formats === 'pre') {
                            t.insertcode = true;
                        }
                    }
                    if (!t.createlink) {
                        t.createlink = this.isLink(i);
                    }
                    if (!t.numberFormatList) {
                        t.numberFormatList = this.isNumberFormatList(i);
                    }
                    if (!t.bulletFormatList) {
                        t.bulletFormatList = this.isBulletFormatList(i);
                    }
                    return t;
                };
                e.isFontColor = function(e, t) {
                    var i = t.style && t.style.color;
                    if ((i === null || i === undefined || i === '') && t.nodeType !== 3) {
                        i = this.getComputedStyle(e, t, 'color');
                    }
                    if (i !== null && i !== '' && i !== undefined) {
                        return i;
                    } else {
                        return null;
                    }
                };
                e.isLink = function(e) {
                    if (e.nodeName.toLocaleLowerCase() === 'a') {
                        return true;
                    } else {
                        return false;
                    }
                };
                e.isBackgroundColor = function(e) {
                    var t = e.style && e.style.backgroundColor;
                    if (t !== null && t !== '' && t !== undefined) {
                        return t;
                    } else {
                        return null;
                    }
                };
                e.isFontSize = function(e, t) {
                    var i = e.style && e.style.fontSize;
                    if ((i !== null && i !== '' && i !== undefined) && (t === null || t === undefined || (t.indexOf(i) > -1))) {
                        return i;
                    } else {
                        return null;
                    }
                };
                e.isFontName = function(e, t, i) {
                    var n = t.style && t.style.fontFamily;
                    if ((n === null || n === undefined || n === '') && t.nodeType !== 3) {
                        n = this.getComputedStyle(e, t, 'font-family');
                    }
                    var r = null;
                    if ((n !== null && n !== '' && n !== undefined) && (i === null || i === undefined || (i.filter(function(e, t) {
                        var i = new RegExp(n, 'i');
                        if ((e.replace(/"/g, '').replace(/ /g, '').toLowerCase() === n.replace(/"/g, '').replace(/ /g, '').toLowerCase()) || (e.search(i) > -1)) {
                            r = t;
                        }
                    }) && (r !== null)))) {
                        return (r !== null) ? i[r] : n.replace(/"/g, '');
                    } else {
                        return null;
                    }
                };
                e.isOrderedList = function(e) {
                    if (e.nodeName.toLocaleLowerCase() === 'ol') {
                        return true;
                    } else {
                        return false;
                    }
                };
                e.isUnorderedList = function(e) {
                    if (e.nodeName.toLocaleLowerCase() === 'ul') {
                        return true;
                    } else {
                        return false;
                    }
                };
                e.isAlignment = function(e) {
                    var t = e.style && e.style.textAlign;
                    if (t === 'left') {
                        return 'justifyleft';
                    } else if (t === 'center') {
                        return 'justifycenter';
                    } else if (t === 'right') {
                        return 'justifyright';
                    } else if (t === 'justify') {
                        return 'justifyfull';
                    } else {
                        return null;
                    }
                };
                e.isFormats = function(e, t) {
                    if (((t === undefined || t === null) && k.indexOf(e.nodeName.toLocaleLowerCase()) > -1) || (t !== null && t !== undefined && t.indexOf(e.nodeName.toLocaleLowerCase()) > -1)) {
                        return e.nodeName.toLocaleLowerCase();
                    } else {
                        return null;
                    }
                };
                e.getComputedStyle = function(e, t, i) {
                    return e.defaultView.getComputedStyle(t, null).getPropertyValue(i);
                };
                e.isNumberFormatList = function(e) {
                    var t = e.style && e.style.listStyleType;
                    if (t === 'lower-alpha') {
                        return 'Lower Alpha';
                    } else if (t === 'number') {
                        return 'Number';
                    } else if (t === 'upper-alpha') {
                        return 'Upper Alpha';
                    } else if (t === 'lower-roman') {
                        return 'Lower Roman';
                    } else if (t === 'upper-roman') {
                        return 'Upper Roman';
                    } else if (t === 'lower-greek') {
                        return 'Lower Greek';
                    } else if (t === 'none') {
                        return 'None';
                    } else {
                        return null;
                    }
                };
                e.isBulletFormatList = function(e) {
                    var t = e.style && e.style.listStyleType;
                    if (t === 'circle') {
                        return 'Circle';
                    } else if (t === 'square') {
                        return 'Square';
                    } else if (t === 'none') {
                        return 'None';
                    } else if (t === 'disc') {
                        return 'Disc';
                    } else {
                        return null;
                    }
                };
                return e;
            }());
            ;
            var ey = (function() {
                function e(e) {
                    this.parent = e;
                    this.toolbarStatus = this.prevToolbarStatus = (0, B.q_)();
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.on(n.l0, this.onRefreshHandler, this);
                    this.parent.on(n.ob, this.removeEventListener, this);
                };
                e.prototype.removeEventListener = function() {
                    this.parent.off(n.l0, this.onRefreshHandler);
                    this.parent.off(n.ob, this.removeEventListener);
                };
                e.prototype.onRefreshHandler = function(e) {
                    if (this.parent.readonly) {
                        return;
                    }
                    var t = [];
                    var i = [];
                    var r = [];
                    this.parent.fontSize.items.forEach(function(e) {
                        t.push(e.value);
                    });
                    this.parent.fontFamily.items.forEach(function(e) {
                        i.push(e.value);
                    });
                    this.parent.format.types.forEach(function(e) {
                        r.push(e.value.toLocaleLowerCase());
                    });
                    this.toolbarStatus = eb.get(this.parent.contentModule.getDocument(), this.parent.contentModule.getEditPanel(), r, t, i, e.documentNode);
                    var s = JSON.stringify(this.toolbarStatus);
                    this.parent.notify(n.ko, this.toolbarStatus);
                    if (JSON.stringify(this.prevToolbarStatus) !== s) {
                        this.parent.notify(n.Wp, {
                            html: JSON.parse(s),
                            markdown: null
                        });
                        this.prevToolbarStatus = JSON.parse(s);
                    }
                };
                return e;
            }());
            ;
            var eC = (function() {
                function e(e, t) {
                    this.parent = e;
                    this.serviceLocator = t;
                }
                e.prototype.renderPanel = function() {
                    var e = this.parent;
                    var t = this.parent.createElement('div', {
                        className: 'e-rte-content',
                        id: this.parent.getID() + 'rte-view'
                    });
                    var i = (0, s.v7)(e.value, e);
                    this.editableElement = this.parent.createElement('div', {
                        className: 'e-content',
                        id: this.parent.getID() + '_rte-edit-view',
                        attrs: {
                            'contenteditable': 'true'
                        },
                        innerHTML: i
                    });
                    t.appendChild(this.editableElement);
                    this.setPanel(t);
                    e.element.appendChild(t);
                };
                e.prototype.getPanel = function() {
                    return this.contentPanel;
                };
                e.prototype.getEditPanel = function() {
                    return this.editableElement;
                };
                e.prototype.getText = function() {
                    var e = this.getEditPanel().innerText;
                    return e === '\n' ? '' : e;
                };
                e.prototype.setPanel = function(e) {
                    this.contentPanel = e;
                };
                e.prototype.getDocument = function() {
                    return this.getEditPanel().ownerDocument;
                };
                return e;
            }());
            ;
            var eE = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var eS = "\n<!DOCTYPE html> \n    <html>\n         <head>\n            <meta charset='utf-8' /> \n            <style>\n                @charset \"UTF-8\";\n                body {\n                    font-family: \"Roboto\", sans-serif;\n                    font-size: 14px;\n                }\n                html, body{height: 100%;margin: 0;}\n                body.e-cursor{cursor:default}\n                span.e-selected-node\t{background-color: #939393;color: white;}\n                span.e-selected-node.e-highlight {background-color: #1d9dd8;}\n                body{color:#333;word-wrap:break-word;padding: 8px;box-sizing: border-box;}\n                .e-rte-image {border: 0;cursor: pointer;display:\n                    block;float: none;height: auto;margin: 5px auto;max-width: 100%;position: relative;}\n                .e-rte-image.e-imginline {display: inline-block;float: none;max-width: calc(100% - (2 * 5px));padding: 1px;vertical-align: bottom;}\n                .e-rte-image.e-imgcenter {cursor: pointer;display: block;float: none;margin: 5px auto;max-width: 100%;position: relative;}\n                .e-rte-image.e-imgright { float: right; margin: 0 auto;margin-left: 5px;text-align: right;}\n                .e-rte-image.e-imgleft {float: left;margin: 0 auto;margin-right: 5px;text-align: left;}\n                .e-img-caption { display: inline-block; float: none; margin: 5px auto; max-width: 100%;position: relative;}\n                .e-img-caption.e-caption-inline {display: inline-block;float: none;\n                    margin: 5px auto;margin-left: 5px;margin-right: 5px;max-width: calc(100% - (2 * 5px));\n                    position: relativetext-align: center;vertical-align: bottom;}\n                .e-img-inner {box-sizing: border-box;display: block;font-size: 16px;font-weight: initial;\n                    margin: auto;opacity: .9;text-align: center;width: 100%;}\n                .e-img-wrap {display: inline-block;margin: auto;padding: 0;text-align: center;width: 100%;}\n                .e-imgleft {float: left;margin: 0 5px 0 0;text-align: left;}\n                .e-imgright {float: right;margin: 0 0 0 5px;text-align: right;}\n                .e-imgcenter {cursor: pointer;display: block;float: none;height: auto;margin: 5px auto;max-width: 100%;position: relative;}\n                .e-control img:not(.e-resize) {border: 2px solid transparent; z-index: 1000}\n                .e-imginline {display: inline-block;float: none;margin-left: 5px;margin-right: 5px;\n                    max-width: calc(100% - (2 * 5px));vertical-align: bottom;}\n                .e-imgbreak {border: 0;cursor: pointer;\n                    display: block;float: none;height: auto;margin: 5px auto;max-width: 100%;position: relative;}\n                .e-rte-image.e-img-focus:not(.e-resize) {border: solid 2px #4a90e2;}\n                img.e-img-focus::selection { background: transparent;color: transparent;}\n                span.e-rte-imageboxmark {  width: 10px; height: 10px; position: absolute; display: block;\n                    background: #4a90e2; border: 1px solid #fff; z-index: 1000;}\n                .e-mob-rte.e-mob-span span.e-rte-imageboxmark { background: #4a90e2; border: 1px solid #fff; }\n                .e-mob-rte span.e-rte-imageboxmark { background: #fff; border: 1px solid #4a90e2;\n                    border-radius: 15px; height: 20px; width: 20px; }\n                .e-mob-rte.e-mob-span span.e-rte-imageboxmark { background: #4a90e2; border: 1px solid #fff; }\n                .e-rte-content .e-content img.e-resize { z-index: 1000; }\n                .e-img-caption .e-img-inner { outline: 0; }\n                .e-img-caption a:focus-visible { outline: none; }\n                .e-img-caption .e-rte-image.e-imgright, .e-img-caption .e-rte-image.e-imgleft { float: none; margin: 0;}\n                body{box-sizing: border-box;min-height: 100px;outline: 0 solid transparent;\n                    overflow-x: auto;padding: 16px;position: relative;text-align: inherit;z-index: 2;}\n                p{margin: 0 0 10px;margin-bottom: 10px;}\n                li{margin-bottom: 10px;}\n                h1{font-size: 2.17em;font-weight: 400;line-height: 1;margin: 10px 0;}\n                h2{font-size: 1.74em;font-weight: 400;margin: 10px 0;}\n                h3{font-size: 1.31em;font-weight: 400;margin: 10px 0;}\n                h4{font-size: 16px;font-weight: 400;line-height: 1.5;margin: 0;}\n                h5{font-size: 00.8em;font-weight: 400;margin: 0;}\n                h6{font-size: 00.65em;font-weight: 400;margin: 0;}\n                blockquote{margin: 10px 0;margin-left: 0;padding-left: 5px;border-left: solid 2px #5c5c5c;}\n                pre{background-color: inherit;border: 0;border-radius: 0;color: #333;\n                    font-size: inherit;line-height: inherit;margin: 0 0 10px;overflow: visible;padding: 0;\n                    white-space: pre-wrap;word-break: inherit;word-wrap: break-word;}\n                strong, b{font-weight: 700;}\n                a{text-decoration: none;user-select: auto;}\n                a:hover{text-decoration: underline;};\n                p:last-child, pre:last-child, blockquote:last-child{margin-bottom: 0;}\n                h3+h4, h4+h5, h5+h6{margin-top: 00.6em;}\n                ul:last-child{margin-bottom: 0;}\n                table { border-collapse: collapse; empty-cells: show;}\n                table td,table th {border: 1px solid #BDBDBD; height: 20px; padding: 2px 5px; vertical-align: middle;}\n                table.e-alternate-border tbody tr:nth-child(2n) {background-color: #F5F5F5;}\n                table th {background-color: #E0E0E0;}\n                table.e-dashed-border td,table.e-dashed-border th { border: 1px dashed #BDBDBD} \n                table .e-cell-select {border: 1px double #4a90e2;}\n                span.e-table-box { cursor: nwse-resize; display: block; height: 10px; position: absolute; width: 10px; }\n                span.e-table-box.e-rmob {height: 14px;width: 14px;}\n                .e-row-resize, .e-column-resize { background-color: transparent; background-repeat: repeat;\n                    bottom: 0;cursor: col-resize;height: 1px;overflow: visible;position: absolute;width: 1px; }\n                .e-row-resize { cursor: row-resize; height: 1px;}\n                .e-table-rhelper { cursor: col-resize; opacity: .87;position: absolute;}\n                .e-table-rhelper.e-column-helper { width: 1px; }\n                .e-table-rhelper.e-row-helper {height: 1px;}\n                .e-reicon::before { border-bottom: 6px solid transparent; border-right: 6px solid;\n                    border-top: 6px solid transparent; content: ''; display: block; height: 0;\n                    position: absolute; right: 4px; top: 4px; width: 20px; }\n                .e-reicon::after { border-bottom: 6px solid transparent; border-left: 6px solid;\n                    border-top: 6px solid transparent; content: ''; display: block;\n                    height: 0; left: 4px; position: absolute; top: 4px; width: 20px; z-index: 3; }\n                .e-row-helper.e-reicon::after { top: 10px; transform: rotate(90deg); }\n                .e-row-helper.e-reicon::before { left: 4px; top: -20px; transform: rotate(90deg); }\n                span.e-table-box { background-color: #ffffff; border: 1px solid #BDBDBD; }\n                span.e-table-box.e-rbox-select { background-color: #BDBDBD; border: 1px solid #BDBDBD; }\n                .e-table-rhelper { background-color: #4a90e2;}\n                .e-rtl { direction: rtl; }\n            </style>\n        </head>";
            var ew = (function(e) {
                eE(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                t.prototype.renderPanel = function() {
                    var e = this.parent;
                    var t = (0, s.v7)(e.value, e);
                    var i = '<body spellcheck="false" autocorrect="off" contenteditable="true">' + t + '</body></html>';
                    var n = eS + i;
                    var r = this.parent.createElement('iframe', {
                        id: this.parent.getID() + '_rte-view',
                        className: 'e-rte-content',
                        styles: 'display:block;',
                        attrs: {
                            'srcdoc': n
                        }
                    });
                    this.setPanel(r);
                    e.element.appendChild(r);
                    r.contentDocument.body.id = this.parent.getID() + '_rte-edit-view';
                    r.contentDocument.body.setAttribute('aria-owns', this.parent.getID());
                    r.contentDocument.open();
                    n = this.setThemeColor(n, {
                        color: '#333'
                    });
                    r.contentDocument.write(n);
                    r.contentDocument.close();
                    if (e.enableRtl) {
                        this.contentPanel.contentDocument.body.setAttribute('class', 'e-rtl');
                    }
                };
                t.prototype.setThemeColor = function(e, t) {
                    var i = getComputedStyle(this.parent.element, '.e-richtexteditor').getPropertyValue('color');
                    return e.replace(t.color, i);
                };
                t.prototype.getEditPanel = function() {
                    var e;
                    if (!(0, r.le)(this.contentPanel.contentDocument)) {
                        e = this.contentPanel.contentDocument.body;
                    } else {
                        e = this.parent.inputElement;
                    }
                    return e;
                };
                t.prototype.getDocument = function() {
                    return this.getEditPanel().ownerDocument;
                };
                return t;
            }(eC));
            var eT = i(3276);
            ;
            var ek = (function() {
                function e(e, t) {
                    this.tools = {};
                    this.parent = e;
                    this.locator = t;
                    this.renderFactory = this.locator.getService('rendererFactory');
                    this.addEventListener();
                    if (this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0) {
                        (0, r.l7)(this.tools, eT.rj, (0, s.E)(this.parent.toolbarSettings.itemConfigs), true);
                    } else {
                        this.tools = eT.rj;
                    }
                }
                e.prototype.initializeInstance = function() {
                    this.toolbarRenderer = this.renderFactory.getRenderer(em.y2.Toolbar);
                };
                e.prototype.renderColorPickerInput = function(e) {
                    var t = this;
                    this.initializeInstance();
                    var i = e.containerType;
                    var n = e.container;
                    var o;
                    var a;
                    eT.rS.forEach(function(l) {
                        if ((0, s.rw)(l, e.items) !== -1) {
                            switch(l){
                                case 'fontcolor':
                                    {
                                        o = t.parent.getID() + '_' + i + '_FontColor_Target';
                                        var h = t.parent.createElement('input');
                                        h.id = o;
                                        h.classList.add(ev.Ds);
                                        if (!(0, r.le)(t.parent.cssClass)) {
                                            var c = t.parent.cssClass.split(' ');
                                            for(var d = 0; d < c.length; d++){
                                                if (c[d].trim() !== '') {
                                                    h.classList.add(c[d]);
                                                }
                                            }
                                        }
                                        document.body.appendChild(h);
                                        a = {
                                            cssClass: t.tools[l.toLocaleLowerCase()].icon + ' ' + ev.i7 + ' ' + ev.Cd + ' ' + t.parent.cssClass,
                                            value: t.tools[l.toLocaleLowerCase()].value,
                                            command: t.tools[l.toLocaleLowerCase()].command,
                                            subCommand: t.tools[l.toLocaleLowerCase()].subCommand,
                                            element: (0, r.Ys)('#' + t.parent.getID() + '_' + i + '_FontColor', n),
                                            target: (o)
                                        };
                                        t.fontColorPicker = t.toolbarRenderer.renderColorPicker(a, 'fontcolor');
                                        t.fontColorDropDown = t.toolbarRenderer.renderColorPickerDropDown(a, 'fontcolor', t.fontColorPicker);
                                        break;
                                    }
                                case 'backgroundcolor':
                                    {
                                        o = t.parent.getID() + '_' + i + '_BackgroundColor_Target';
                                        var p = t.parent.createElement('input');
                                        p.id = o;
                                        p.classList.add(ev.Ig);
                                        if (!(0, r.le)(t.parent.cssClass)) {
                                            var c = t.parent.cssClass.split(' ');
                                            for(var d = 0; d < c.length; d++){
                                                if (c[d].trim() !== '') {
                                                    p.classList.add(c[d]);
                                                }
                                            }
                                        }
                                        document.body.appendChild(p);
                                        a = {
                                            cssClass: t.tools[l.toLocaleLowerCase()].icon + ' ' + ev.i7 + ' ' + ev.Cd + ' ' + t.parent.cssClass,
                                            value: t.tools[l.toLocaleLowerCase()].value,
                                            command: t.tools[l.toLocaleLowerCase()].command,
                                            subCommand: t.tools[l.toLocaleLowerCase()].subCommand,
                                            element: (0, r.Ys)('#' + t.parent.getID() + '_' + i + '_BackgroundColor', n),
                                            target: (o)
                                        };
                                        t.backgroundColorPicker = t.toolbarRenderer.renderColorPicker(a, 'backgroundcolor');
                                        t.backgroundColorDropDown = t.toolbarRenderer.renderColorPickerDropDown(a, 'backgroundcolor', t.backgroundColorPicker, t.defaultColorPicker);
                                        break;
                                    }
                            }
                        }
                    });
                    if (this.parent.inlineMode.enable) {
                        this.setCssClass({
                            cssClass: this.parent.cssClass
                        });
                    }
                };
                e.prototype.destroy = function() {
                    this.removeEventListener();
                    this.destroyColorPicker();
                };
                e.prototype.destroyColorPicker = function() {
                    if (this.fontColorPicker && !this.fontColorPicker.isDestroyed) {
                        this.fontColorPicker.destroy();
                    }
                    if (this.backgroundColorPicker && !this.backgroundColorPicker.isDestroyed) {
                        this.backgroundColorPicker.destroy();
                    }
                    if (this.fontColorDropDown && !this.fontColorDropDown.isDestroyed) {
                        var e = this.fontColorDropDown.element.querySelector('.e-rte-color-content');
                        if (e) {
                            (0, r.og)(e);
                        }
                        this.fontColorDropDown.destroy();
                    }
                    if (this.backgroundColorDropDown && !this.backgroundColorDropDown.isDestroyed) {
                        var e = this.backgroundColorDropDown.element.querySelector('.e-rte-color-content');
                        if (e) {
                            this.defaultColorPicker = e.children[0].style.borderBottomColor;
                            (0, r.og)(e);
                        }
                        this.backgroundColorDropDown.destroy();
                    }
                };
                e.prototype.setRtl = function(e) {
                    if (this.fontColorPicker) {
                        this.fontColorPicker.setProperties({
                            enableRtl: e.enableRtl
                        });
                        this.fontColorDropDown.setProperties({
                            enableRtl: e.enableRtl
                        });
                    }
                    if (this.backgroundColorPicker) {
                        this.backgroundColorPicker.setProperties({
                            enableRtl: e.enableRtl
                        });
                        this.backgroundColorDropDown.setProperties({
                            enableRtl: e.enableRtl
                        });
                    }
                };
                e.prototype.setCssClass = function(e) {
                    this.updateCss(this.fontColorPicker, this.fontColorDropDown, e);
                    this.updateCss(this.backgroundColorPicker, this.backgroundColorDropDown, e);
                };
                e.prototype.updateCss = function(e, t, i) {
                    if (e && i.cssClass) {
                        if ((0, r.le)(i.oldCssClass)) {
                            e.setProperties({
                                cssClass: (e.cssClass + ' ' + i.cssClass).trim()
                            });
                            t.setProperties({
                                cssClass: (t.cssClass + ' ' + i.cssClass).trim()
                            });
                        } else {
                            e.setProperties({
                                cssClass: (e.cssClass.replace(i.oldCssClass, '').replace('  ', ' ').trim() + ' ' + i.cssClass).trim()
                            });
                            t.setProperties({
                                cssClass: (t.cssClass.replace(i.oldCssClass, '').replace('  ', ' ').trim() + ' ' + i.cssClass).trim()
                            });
                        }
                    }
                };
                e.prototype.addEventListener = function() {
                    this.parent.on(n.vW, this.renderColorPickerInput, this);
                    this.parent.on(n.vN, this.setRtl, this);
                    this.parent.on(n.ob, this.destroy, this);
                    this.parent.on(n.c0, this.destroyColorPicker, this);
                    this.parent.on(n.CC, this.onPropertyChanged, this);
                    this.parent.on(n._8, this.setCssClass, this);
                };
                e.prototype.onPropertyChanged = function(e) {
                    var t = e.newProp;
                    var i;
                    for(var n = 0, r = Object.keys(t); n < r.length; n++){
                        var s = r[n];
                        switch(s){
                            case 'fontColor':
                                if (this.fontColorPicker) {
                                    for(var o = 0, a = Object.keys(t.fontColor); o < a.length; o++){
                                        var l = a[o];
                                        switch(l){
                                            case 'default':
                                                {
                                                    this.fontColorPicker.setProperties({
                                                        value: t.fontColor.default
                                                    });
                                                    i = this.fontColorDropDown.element;
                                                    var h = i.querySelector('.' + this.tools['fontcolor'].icon);
                                                    h.style.borderBottomColor = t.fontColor.default;
                                                    break;
                                                }
                                            case 'mode':
                                                this.fontColorPicker.setProperties({
                                                    mode: t.fontColor.mode
                                                });
                                                break;
                                            case 'columns':
                                                this.fontColorPicker.setProperties({
                                                    columns: t.fontColor.columns
                                                });
                                                break;
                                            case 'colorCode':
                                                this.fontColorPicker.setProperties({
                                                    presetColors: t.fontColor.colorCode
                                                });
                                                break;
                                            case 'modeSwitcher':
                                                this.fontColorPicker.setProperties({
                                                    modeSwitcher: t.fontColor.modeSwitcher
                                                });
                                                break;
                                        }
                                    }
                                }
                                break;
                            case 'backgroundColor':
                                if (this.backgroundColorPicker) {
                                    for(var c = 0, d = Object.keys(t.backgroundColor); c < d.length; c++){
                                        var p = d[c];
                                        switch(p){
                                            case 'default':
                                                {
                                                    this.backgroundColorPicker.setProperties({
                                                        value: t.backgroundColor.default
                                                    });
                                                    i = this.backgroundColorDropDown.element;
                                                    var u = i.querySelector('.' + this.tools['backgroundcolor'].icon);
                                                    u.style.borderBottomColor = t.backgroundColor.default;
                                                    break;
                                                }
                                            case 'mode':
                                                this.backgroundColorPicker.setProperties({
                                                    mode: t.backgroundColor.mode
                                                });
                                                break;
                                            case 'columns':
                                                this.backgroundColorPicker.setProperties({
                                                    columns: t.backgroundColor.columns
                                                });
                                                break;
                                            case 'colorCode':
                                                this.backgroundColorPicker.setProperties({
                                                    presetColors: t.backgroundColor.colorCode
                                                });
                                                break;
                                            case 'modeSwitcher':
                                                this.backgroundColorPicker.setProperties({
                                                    modeSwitcher: t.backgroundColor.modeSwitcher
                                                });
                                                break;
                                        }
                                    }
                                }
                                break;
                        }
                    }
                };
                e.prototype.removeEventListener = function() {
                    this.parent.off(n.vW, this.renderColorPickerInput);
                    this.parent.off(n.ob, this.destroy);
                    this.parent.off(n.vN, this.setRtl);
                    this.parent.off(n.c0, this.destroyColorPicker);
                    this.parent.off(n.CC, this.onPropertyChanged);
                    this.parent.off(n._8, this.setCssClass);
                };
                return e;
            }());
            ;
            var ex = (function() {
                function e(e) {
                    this.parent = e;
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.parent.on(n.F, this.enableXhtmlValidation, this);
                    this.parent.on(n.ob, this.removeEventListener, this);
                };
                e.prototype.removeEventListener = function() {
                    this.parent.off(n.F, this.enableXhtmlValidation);
                    this.parent.off(n.ob, this.removeEventListener);
                };
                e.prototype.enableXhtmlValidation = function() {
                    if (this.parent.enableXhtml) {
                        if ((0, r.le)(this.parent.inputElement)) {
                            this.currentElement = this.parent.element;
                        } else {
                            this.currentElement = this.parent.inputElement;
                        }
                        this.clean(this.currentElement);
                        this.AddRootElement();
                        this.ImageTags();
                        this.removeTags();
                        this.RemoveUnsupported();
                        this.currentElement.innerHTML = this.selfEncloseValidation(this.currentElement.innerHTML, this.currentElement.innerText === "\n" ? this.currentElement.innerText.length : this.currentElement.innerText.trim().length);
                        this.parent.setProperties({
                            value: this.currentElement.innerHTML
                        }, true);
                    }
                };
                e.prototype.selfEncloseValidation = function(e, t) {
                    if (t === 0 && e.indexOf('table') < 0 && e.indexOf('img') < 0) {
                        var i = e.split('&nbsp;');
                        i[i.length - 1] = '&#8203;' + i[i.length - 1];
                        e = i.join('');
                    }
                    e = e.replace(/<br>/g, '<br/>').replace(/<hr>/g, '<hr/>').replace(/ /g, ' ');
                    var n;
                    var r = [];
                    var s = [];
                    var o = [
                        /<img(.*?)>/gi,
                        /<area(.*?)>/gi,
                        /<base(.*?)>/gi,
                        /<col (.*?)>/gi,
                        /<embed(.*?)>/gi,
                        /<input(.*?)>/gi,
                        /<link(.*?)>/gi,
                        /<meta(.*?)>/gi,
                        /<param(.*?)>/gi,
                        /<source(.*?)>/gi,
                        /<track(.*?)>/gi,
                        /<wbr(.*?)>/gi
                    ];
                    for(var a = 0; a < o.length; a++){
                        n = o[a].exec(e);
                        while((n) !== null){
                            r.push(n[0].toString());
                            n = o[a].exec(e);
                        }
                        s = r.slice(0);
                        for(var l = 0; l < r.length; l++){
                            if (r[l].indexOf('/') === -1 || r[l].lastIndexOf('/') !== r[l].length - 2) {
                                r[l] = r[l].substr(0, r[l].length - 1) + ' /' + r[l].substr(r[l].length - 1, r[l].length);
                            }
                        }
                        for(var h = 0; h <= r.length - 1; h++){
                            e = e.replace(s[h], r[h]);
                        }
                    }
                    return e;
                };
                e.prototype.AddRootElement = function() {
                    if ((this.currentElement.childNodes.length === 1 && this.currentElement.firstChild.nodeName !== 'DIV') || this.currentElement.childNodes.length > 1) {
                        var e = this.parent.createElement('div');
                        while(this.currentElement.childNodes.length > 0){
                            e.appendChild(this.currentElement.childNodes[0]);
                        }
                        this.currentElement.appendChild(e);
                    }
                };
                e.prototype.clean = function(e) {
                    for(var t = 0; t < e.childNodes.length; t++){
                        var i = e.childNodes[t];
                        if (i.nodeType === 8 || i.nodeName === 'V:IMAGE') {
                            e.removeChild(i);
                            t--;
                        } else if (i.nodeType === 1) {
                            this.clean(i);
                        }
                    }
                    return this.currentElement.innerHTML;
                };
                e.prototype.ImageTags = function() {
                    var e = this.currentElement.querySelectorAll('IMG');
                    for(var t = e.length - 1; t >= 0; t--){
                        if (!e[t].hasAttribute('alt')) {
                            var i = e[t];
                            i.setAttribute('alt', '');
                        }
                    }
                };
                e.prototype.removeTags = function() {
                    var e = [
                        [
                            'br',
                            'ul'
                        ],
                        [
                            'br',
                            'ol'
                        ],
                        [
                            'table',
                            'span'
                        ],
                        [
                            'div',
                            'span'
                        ],
                        [
                            'p',
                            'span'
                        ]
                    ];
                    for(var t = 0; t < e.length; t++){
                        this.RemoveElementNode(e[t][0], e[t][1]);
                    }
                };
                e.prototype.RemoveElementNode = function(e, t) {
                    var i = this.currentElement.querySelectorAll(t);
                    for(var n = 0; n < i.length; n++){
                        var s = i[n].querySelectorAll(e);
                        for(var o = s.length; o > 0; o--){
                            (0, r.og)(s[o - 1]);
                        }
                    }
                };
                e.prototype.RemoveUnsupported = function() {
                    var e = this.currentElement.querySelectorAll('u');
                    for(var t = e.length - 1; t >= 0; t--){
                        var i = this.parent.createElement('span');
                        i.style.textDecoration = 'underline';
                        i.innerHTML = e[t].innerHTML;
                        e[t].parentNode.insertBefore(i, e[t]);
                        (0, r.og)(e[t]);
                    }
                    var n = this.currentElement.querySelectorAll('strong');
                    for(var t = n.length - 1; t >= 0; t--){
                        var s = this.parent.createElement('b');
                        s.innerHTML = n[t].innerHTML;
                        n[t].parentNode.insertBefore(s, n[t]);
                        (0, r.og)(n[t]);
                    }
                    var o = [
                        'language',
                        'role',
                        'target',
                        'contenteditable',
                        'cellspacing',
                        'cellpadding',
                        'border',
                        'valign',
                        'colspan'
                    ];
                    for(var t = 0; t <= o.length; t++){
                        this.RemoveAttributeByName(o[t]);
                    }
                };
                e.prototype.RemoveAttributeByName = function(e) {
                    if (this.currentElement.firstChild !== null) {
                        if (this.currentElement.firstChild.nodeType !== 3) {
                            for(var t = 0; t < this.currentElement.childNodes.length; t++){
                                var i = this.currentElement.childNodes[t];
                                if (i.nodeType !== 3 && i.nodeName !== 'TABLE' && i.nodeName !== 'TBODY' && i.nodeName !== 'THEAD' && i.nodeName !== 'TH' && i.nodeName !== 'TR' && i.nodeName !== 'TD') {
                                    if (i.hasAttribute(e)) {
                                        i.removeAttribute(e);
                                    }
                                    if (i.hasChildNodes()) {
                                        for(var n = 0; n < i.childNodes.length; n++){
                                            var r = i.childNodes[n];
                                            if (r.nodeType !== 3 && r.nodeName !== 'TABLE' && r.nodeName !== 'TBODY' && r.nodeName !== 'THEAD' && r.nodeName !== 'TH' && r.nodeName !== 'TR' && r.nodeName !== 'TD' && r.hasAttribute(e)) {
                                                r.removeAttribute(e);
                                            }
                                            if (r.hasChildNodes()) {
                                                for(var s = 0; s < r.childNodes.length; s++){
                                                    if (r.childNodes[s].nodeType !== 3 && r.childNodes[s].nodeName !== 'TABLE' && r.childNodes[s].nodeName !== 'TBODY' && r.childNodes[s].nodeName !== 'THEAD' && r.childNodes[s].nodeName !== 'TH' && r.childNodes[s].nodeName !== 'TR' && r.childNodes[s].nodeName !== 'TD' && r.childNodes[s].hasAttribute(e)) {
                                                        r.childNodes[s].removeAttribute(e);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                return e;
            }());
            ;
            var eL = (function() {
                function e(e, t) {
                    this.rangeCollection = [];
                    this.isImageDelete = false;
                    this.parent = e;
                    this.locator = t;
                    this.renderFactory = this.locator.getService('rendererFactory');
                    this.xhtmlValidation = new ex(e);
                    this.addEventListener();
                }
                e.prototype.destroy = function() {
                    this.removeEventListener();
                };
                e.prototype.sanitizeHelper = function(e) {
                    e = (0, s.cC)(e, this.parent);
                    return e;
                };
                e.prototype.addEventListener = function() {
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.nodeSelectionObj = new M.q();
                    this.colorPickerModule = new ek(this.parent, this.locator);
                    this.parent.on(n.T5, this.instantiateRenderer, this);
                    this.parent.on(n.s0, this.onToolbarClick, this);
                    this.parent.on(n.QG, this.onKeyDown, this);
                    this.parent.on(n.yR, this.onKeyUp, this);
                    this.parent.on(n.jm, this.renderColorPicker, this);
                    this.parent.on(n.Xr, this.render, this);
                    this.parent.on(n.CC, this.onPropertyChanged, this);
                    this.parent.on(n.ob, this.destroy, this);
                    this.parent.on(n.td, this.selectAll, this);
                    this.parent.on(n.jh, this.selectRange, this);
                    this.parent.on(n.Db, this.getSelectedHtml, this);
                    this.parent.on(n.gA, this.onSelectionSave, this);
                    this.parent.on(n.Wz, this.onSelectionRestore, this);
                    this.parent.on(n.Ed, this.updateReadOnly, this);
                    this.parent.on(n.RE, this.onPaste, this);
                    this.parent.on(n.LF, this.isTableClassAdded, this);
                };
                e.prototype.updateReadOnly = function() {
                    if (this.parent.readonly) {
                        (0, r.Y4)(this.parent.contentModule.getEditPanel(), {
                            contenteditable: 'false'
                        });
                        (0, r.cn)([
                            this.parent.element
                        ], ev.PW);
                    } else {
                        (0, r.Y4)(this.parent.contentModule.getEditPanel(), {
                            contenteditable: 'true'
                        });
                        (0, r.IV)([
                            this.parent.element
                        ], ev.PW);
                    }
                };
                e.prototype.isTableClassAdded = function() {
                    var e = this.parent.inputElement.querySelectorAll('table');
                    for(var t = 0; t < e.length; t++){
                        if (!e[t].classList.contains('e-rte-table')) {
                            e[t].classList.add('e-rte-table');
                        }
                    }
                };
                e.prototype.onSelectionSave = function() {
                    var e = this.contentRenderer.getDocument();
                    var t = this.nodeSelectionObj.getRange(e);
                    this.saveSelection = this.nodeSelectionObj.save(t, e);
                };
                e.prototype.onSelectionRestore = function(e) {
                    this.parent.isBlur = false;
                    this.contentRenderer.getEditPanel().focus();
                    if ((0, r.le)(e.items) || e.items) {
                        this.saveSelection.restore();
                    }
                };
                e.prototype.onKeyUp = function(e) {
                    var t = e.args;
                    var i = [
                        8,
                        9,
                        13,
                        16,
                        17,
                        18,
                        20,
                        27,
                        37,
                        38,
                        39,
                        40,
                        44,
                        45,
                        46,
                        91,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123
                    ];
                    var n = this.parent.getRange();
                    var s = new RegExp(String.fromCharCode(8203), 'g');
                    var o;
                    if (i.indexOf(t.keyCode) < 0 && !t.shiftKey && !t.ctrlKey && !t.altKey) {
                        if (n.startContainer.textContent.charCodeAt(0) === 8203) {
                            o = n.startOffset - 1;
                            n.startContainer.textContent = n.startContainer.textContent.replace(s, '');
                            this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), n.startContainer, o);
                        }
                        if (!(0, r.le)(n.startContainer.previousSibling) && !(0, r.le)(n.startContainer.previousSibling.parentElement) && n.startContainer.parentElement === n.startContainer.previousSibling.parentElement && n.startContainer.previousSibling.textContent.charCodeAt(0) === 8203 && n.startContainer.previousSibling.textContent.length <= 1) {
                            n.startContainer.previousSibling.textContent = n.startContainer.previousSibling.textContent.replace(s, '');
                        }
                        if (n.endContainer.textContent.charCodeAt(n.endOffset) === 8203) {
                            o = n.startOffset;
                            n.endContainer.textContent = n.endContainer.textContent.replace(s, '');
                            this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), n.startContainer, o);
                        }
                    }
                };
                e.prototype.onKeyDown = function(e) {
                    var t = this;
                    var i;
                    var s = e.args;
                    if (r.AR.info.name === 'chrome') {
                        i = this.parent.getRange();
                        this.backSpaceCleanup(e, i);
                        this.deleteCleanup(e, i);
                    }
                    if (s.keyCode === 9 && this.parent.enableTabKey) {
                        if (!(0, r.le)(s.target) && (0, r.le)((0, r.oq)(s.target, '.e-rte-toolbar'))) {
                            var a = this.nodeSelectionObj.getRange(this.contentRenderer.getDocument());
                            var l = this.nodeSelectionObj.getParentNodeCollection(a);
                            if (!((l[0].nodeName === 'LI' || (0, r.oq)(l[0], 'li') || (0, r.oq)(l[0], 'table')) && a.startOffset === 0)) {
                                s.preventDefault();
                                if (!s.shiftKey) {
                                    V.Insert(this.contentRenderer.getDocument(), '&nbsp;&nbsp;&nbsp;&nbsp;');
                                    this.rangeCollection.push(this.nodeSelectionObj.getRange(this.contentRenderer.getDocument()));
                                } else if (this.rangeCollection.length > 0 && this.rangeCollection[this.rangeCollection.length - 1].startContainer.textContent.length === 4) {
                                    var h = this.rangeCollection[this.rangeCollection.length - 1].startContainer;
                                    this.nodeSelectionObj.setSelectionText(this.contentRenderer.getDocument(), h, h, 0, h.textContent.length);
                                    V.Insert(this.contentRenderer.getDocument(), document.createTextNode(''));
                                    this.rangeCollection.pop();
                                }
                            }
                        }
                    }
                    if (e.args.action === 'space' || e.args.action === 'enter' || e.args.keyCode === 13) {
                        this.spaceLink(e.args);
                        if (this.parent.editorMode === 'HTML' && !this.parent.readonly) {
                            var c = this.parent.getText().trim().length;
                            var d = this.parent.getSelection().length;
                            var p = (c - d) + 1;
                            if (!(this.parent.maxLength === -1 || p <= this.parent.maxLength) && e.args.keyCode === 13) {
                                e.args.preventDefault();
                                return;
                            } else {
                                this.parent.notify(n.dp, {
                                    args: e.args
                                });
                            }
                        }
                    }
                    if (e.args.action === 'space') {
                        var u = this.parent.getRange();
                        var f = u.startContainer.textContent.slice(0, u.startOffset);
                        var m = this.isOrderedList(f);
                        var v = this.isUnOrderedList(f);
                        if (m && !v || v && !m) {
                            var g = {
                                callBack: null,
                                event: e.args,
                                name: 'keydown-handler'
                            };
                            var b = {
                                cancel: false,
                                item: {
                                    command: 'Lists',
                                    subCommand: m ? 'OL' : 'UL'
                                },
                                name: 'actionBegin',
                                originalEvent: e.args,
                                requestType: m ? 'OL' : 'UL'
                            };
                            this.parent.trigger(n.m2, b, function(i) {
                                if (!i.cancel) {
                                    t.parent.formatter.editorManager.observer.notify(o.O6, g);
                                    t.parent.trigger(n.i8, {
                                        editorMode: t.parent.editorMode,
                                        elements: t.parent.formatter.editorManager.domNode.blockNodes(),
                                        event: e.args,
                                        name: n.i8,
                                        range: t.parent.getRange(),
                                        requestType: m ? 'OL' : 'UL'
                                    });
                                }
                            });
                        }
                    }
                    if (r.AR.info.name === 'chrome' && (!(0, r.le)(this.rangeElement) && !(0, r.le)(this.oldRangeElement) || !(0, r.le)(this.deleteRangeElement) && !(0, r.le)(this.deleteOldRangeElement)) && i.startContainer.parentElement.tagName !== 'TD' && i.startContainer.parentElement.tagName !== 'TH') {
                        this.rangeElement = null;
                        this.oldRangeElement = null;
                        this.deleteRangeElement = null;
                        this.deleteOldRangeElement = null;
                        if (!this.isImageDelete) {
                            s.preventDefault();
                        }
                        s.preventDefault();
                    }
                };
                e.prototype.isOrderedList = function(e) {
                    e = e.replace(/\u200B/g, '');
                    var t = [
                        /^[1]+[.]+$/,
                        /^[i]+[.]+$/,
                        /^[a]+[.]+$/
                    ];
                    if (!(0, r.le)(e)) {
                        for(var i = 0; i < t.length; i++){
                            if (t[i].test(e)) {
                                return true;
                            }
                        }
                    }
                    return false;
                };
                e.prototype.isUnOrderedList = function(e) {
                    e = e.replace(/\u200B/g, '');
                    var t = [
                        /^[*]$/,
                        /^[-]$/
                    ];
                    if (!(0, r.le)(e)) {
                        for(var i = 0; i < t.length; i++){
                            if (t[i].test(e)) {
                                return true;
                            }
                        }
                    }
                    return false;
                };
                e.prototype.backSpaceCleanup = function(e, t) {
                    var i = false;
                    if (e.args.code === 'Backspace' && e.args.keyCode === 8 && t.startOffset === 0 && t.endOffset === 0 && this.parent.getSelection().length === 0 && t.startContainer.textContent.length > 0 && t.startContainer.parentElement.tagName !== 'TD' && t.startContainer.parentElement.tagName !== 'TH') {
                        this.rangeElement = this.getRootBlockNode(t.startContainer);
                        if (this.rangeElement.tagName === 'OL' || this.rangeElement.tagName === 'UL') {
                            var n = this.getRangeLiNode(t.startContainer);
                            if (n.previousElementSibling && n.previousElementSibling.childElementCount > 0) {
                                this.oldRangeElement = n.previousElementSibling.lastElementChild.nodeName === 'BR' ? n.previousElementSibling : n.previousElementSibling.lastElementChild;
                                if (!(0, r.le)(n.lastElementChild) && n.lastElementChild.nodeName !== 'BR') {
                                    this.rangeElement = n.lastElementChild;
                                    i = true;
                                } else {
                                    this.rangeElement = n;
                                }
                            }
                        } else if (this.rangeElement === this.parent.inputElement || this.rangeElement.tagName === 'TABLE' || (!(0, r.le)(this.rangeElement.previousElementSibling) && this.rangeElement.previousElementSibling.tagName === 'TABLE')) {
                            return;
                        } else {
                            this.oldRangeElement = this.rangeElement.previousElementSibling;
                        }
                        if ((0, r.le)(this.oldRangeElement)) {
                            return;
                        } else {
                            if (this.oldRangeElement.tagName === 'OL' || this.oldRangeElement.tagName === 'UL') {
                                this.oldRangeElement = this.oldRangeElement.lastElementChild.lastElementChild ? this.oldRangeElement.lastElementChild.lastElementChild : this.oldRangeElement.lastElementChild;
                            }
                            this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), this.oldRangeElement, this.oldRangeElement.childNodes.length);
                            if (this.oldRangeElement.querySelector('BR')) {
                                (0, r.og)(this.oldRangeElement.querySelector('BR'));
                            }
                            if (!(0, r.le)(this.rangeElement) && this.oldRangeElement !== this.rangeElement) {
                                while(this.rangeElement.firstChild){
                                    this.oldRangeElement.appendChild(this.rangeElement.childNodes[0]);
                                }
                                !i ? (0, r.og)(this.rangeElement) : (0, r.og)(this.rangeElement.parentElement);
                                this.oldRangeElement.normalize();
                            }
                        }
                    }
                };
                e.prototype.deleteCleanup = function(e, t) {
                    var i = false;
                    var n;
                    var s;
                    if (e.args.code === 'Delete' && e.args.keyCode === 46 && this.parent.contentModule.getText().trim().length !== 0 && this.parent.getSelection().length === 0 && t.startContainer.parentElement.tagName !== 'TD' && t.startContainer.parentElement.tagName !== 'TH') {
                        this.deleteRangeElement = s = this.getRootBlockNode(t.startContainer);
                        if (this.deleteRangeElement.tagName === 'OL' || this.deleteRangeElement.tagName === 'UL') {
                            n = this.getRangeLiNode(t.startContainer);
                            if (n.nextElementSibling && n.nextElementSibling.childElementCount > 0 && !n.nextElementSibling.querySelector('BR')) {
                                if (!(0, r.le)(n.lastElementChild)) {
                                    this.deleteRangeElement = n.lastElementChild;
                                    i = true;
                                } else {
                                    this.deleteRangeElement = n;
                                }
                            } else {
                                this.deleteRangeElement = this.getRangeElement(n);
                            }
                        } else if (this.deleteRangeElement.nodeType === 3 || (this.deleteRangeElement.tagName === 'TABLE' || (!(0, r.le)(this.deleteRangeElement.nextElementSibling) && this.deleteRangeElement.nextElementSibling.tagName === 'TABLE'))) {
                            return;
                        }
                        if (this.getCaretIndex(t, this.deleteRangeElement) === this.deleteRangeElement.textContent.length) {
                            if (!(0, r.le)(n)) {
                                if (i || !(0, r.le)(n.nextElementSibling)) {
                                    this.deleteOldRangeElement = this.getRangeElement(n.nextElementSibling);
                                } else {
                                    this.deleteOldRangeElement = s.nextElementSibling;
                                }
                            } else {
                                this.deleteOldRangeElement = this.deleteRangeElement.nextElementSibling;
                            }
                            if ((0, r.le)(this.deleteOldRangeElement)) {
                                return;
                            } else {
                                if (t.startOffset === 0 && t.endOffset === 1 && this.deleteRangeElement.childNodes[0].nodeName === 'IMG') {
                                    this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.parent.contentModule.getDocument(), this.deleteRangeElement, this.deleteRangeElement, 0, 1);
                                    this.isImageDelete = true;
                                } else {
                                    this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), this.deleteRangeElement, this.deleteRangeElement.childNodes.length);
                                    this.isImageDelete = false;
                                }
                                if (this.deleteRangeElement.querySelector('BR')) {
                                    (0, r.og)(this.deleteRangeElement.querySelector('BR'));
                                }
                                if (!(0, r.le)(this.deleteRangeElement) && (this.deleteOldRangeElement.tagName !== 'OL' && this.deleteOldRangeElement.tagName !== 'UL') && this.deleteOldRangeElement !== this.deleteRangeElement) {
                                    while(this.deleteOldRangeElement.firstChild){
                                        this.deleteRangeElement.appendChild(this.deleteOldRangeElement.childNodes[0]);
                                    }
                                    if (!i) {
                                        (0, r.og)(this.deleteOldRangeElement);
                                    } else {
                                        (0, r.og)(this.deleteOldRangeElement.parentElement);
                                    }
                                    this.deleteRangeElement.normalize();
                                } else {
                                    this.deleteRangeElement = null;
                                    this.deleteOldRangeElement = null;
                                }
                            }
                        } else {
                            this.deleteRangeElement = null;
                        }
                    }
                };
                e.prototype.getCaretIndex = function(e, t) {
                    var i = 0;
                    if (this.parent.contentModule.getDocument().getSelection().rangeCount !== 0) {
                        var n = e.cloneRange();
                        n.selectNodeContents(t);
                        n.setEnd(e.endContainer, e.endOffset);
                        i = n.toString().length;
                    }
                    return i;
                };
                e.prototype.getRangeElement = function(e) {
                    var t = e.lastElementChild ? e.lastElementChild.tagName === 'BR' ? e.lastElementChild.previousElementSibling ? e.lastElementChild.previousElementSibling : e : e.lastElementChild : e;
                    return t;
                };
                e.prototype.getRootBlockNode = function(e) {
                    for(; e && this.parent && this.parent.inputElement !== e; e = e){
                        if (e.parentElement === this.parent.inputElement) {
                            break;
                        } else {
                            e = e.parentElement;
                        }
                    }
                    return e;
                };
                e.prototype.getRangeLiNode = function(e) {
                    var t = e.parentElement;
                    while(t !== this.parent.inputElement){
                        if (t.nodeType === 1 && t.tagName === 'LI') {
                            break;
                        }
                        t = t.parentElement;
                    }
                    return t;
                };
                e.prototype.onPaste = function(e) {
                    var t = new RegExp(/([^\S]|^)(((https?\:\/\/)|(www\.))(\S+))/gi);
                    if (e.text.match(t)) {
                        if (e.isWordPaste) {
                            return;
                        }
                        e.args.preventDefault();
                        var i = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
                        var n = this.parent.formatter.editorManager.nodeSelection.save(i, this.parent.contentModule.getDocument());
                        var o = new RegExp(/([^\S]|^)(((https?\:\/\/)))/gi);
                        var a = new RegExp(/([^\S]|^)(((www\.))(\S+))/gi);
                        var l = e.text.split('\n');
                        var h = '';
                        for(var c = 0; c < l.length; c++){
                            if (l[c].trim() === '') {
                                h += (0, s.oG)(this.parent);
                            } else {
                                var d = '';
                                var p = true;
                                var u = l[c].split(' ');
                                for(var f = 0; f < u.length; f++){
                                    if (u[f].trim() === '') {
                                        d += p ? '&nbsp;' : ' ';
                                    } else {
                                        p = false;
                                        d += u[f] + ' ';
                                    }
                                }
                                if (c === 0) {
                                    h += '<span>' + d.trim() + '</span>';
                                } else {
                                    h += '<p>' + d.trim() + '</p>';
                                }
                            }
                        }
                        var m = this.parent.createElement('div');
                        m.setAttribute('class', 'pasteContent');
                        m.style.display = 'inline';
                        m.innerHTML = h.replace('&para', '&amp;para');
                        var v = m.querySelectorAll('span, p');
                        for(var c = 0; c < v.length; c++){
                            var g = v[c].innerHTML.split(' ');
                            var b = '';
                            for(var f = 0; f < g.length; f++){
                                if (g[f].match(o) || g[f].match(a)) {
                                    b += '<a className="e-rte-anchor" href="' + g[f] + '" title="' + g[f] + '"target="_blank">' + g[f] + ' </a>';
                                } else {
                                    b += g[f] + ' ';
                                }
                            }
                            v[c].innerHTML = b.trim();
                        }
                        if (!(0, r.le)(this.parent.pasteCleanupModule)) {
                            e.callBack(m.innerHTML);
                        } else {
                            this.parent.formatter.editorManager.execCommand('insertHTML', null, null, null, m);
                        }
                    }
                };
                e.prototype.spaceLink = function(e) {
                    var t = this.nodeSelectionObj.getRange(this.contentRenderer.getDocument());
                    var i = this.nodeSelectionObj.getParentNodeCollection(t);
                    var n = t.startContainer.textContent.substr(0, t.endOffset);
                    var r = n.split(' ');
                    var s = r[r.length - 1];
                    var o = t.startOffset - (n.length - r[r.length - 1].length);
                    s = s.slice(0, o);
                    var a = new RegExp(/([^\S]|^)(((https?\:\/\/)|(www\.))(\S+))/gi);
                    if (i[0].nodeName !== 'A' && s.match(a)) {
                        var l = this.nodeSelectionObj.save(t, this.parent.contentModule.getDocument());
                        var h = s.indexOf('http') > -1 ? s : 'http://' + s;
                        var c = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(t);
                        var d = {
                            url: h,
                            selection: l,
                            selectParent: c,
                            text: s,
                            title: '',
                            target: '_blank'
                        };
                        this.parent.formatter.process(this.parent, {
                            item: {
                                'command': 'Links',
                                'subCommand': 'CreateLink'
                            }
                        }, e, d);
                    }
                };
                e.prototype.onToolbarClick = function(e) {
                    var t;
                    var i;
                    var s;
                    var o = e.item;
                    var a = (0, r.oq)(e.originalEvent.target, '.e-rte-quick-popup');
                    if (a && !a.classList.contains('e-rte-inline-popup')) {
                        if (!(o.subCommand === 'SourceCode' || o.subCommand === 'Preview' || o.subCommand === 'FontColor' || o.subCommand === 'BackgroundColor')) {
                            if ((0, B.FA)() && o.command === 'Images') {
                                this.nodeSelectionObj.restore();
                            }
                            var l = this.nodeSelectionObj.getRange(this.parent.contentModule.getDocument());
                            t = this.nodeSelectionObj.save(l, this.parent.contentModule.getDocument());
                            i = this.nodeSelectionObj.getNodeCollection(l);
                            s = this.nodeSelectionObj.getParentNodeCollection(l);
                        }
                        if (o.command === 'Images') {
                            this.parent.notify(n.YV, {
                                member: 'image',
                                args: e,
                                selectNode: i,
                                selection: t,
                                selectParent: s
                            });
                        }
                        if (o.command === 'Links') {
                            this.parent.notify(n.Tc, {
                                member: 'link',
                                args: e,
                                selectNode: i,
                                selection: t,
                                selectParent: s
                            });
                        }
                        if (o.command === 'Table') {
                            this.parent.notify(n.ZY, {
                                member: 'table',
                                args: e,
                                selectNode: i,
                                selection: t,
                                selectParent: s
                            });
                        }
                    } else {
                        var h = document.getElementById(this.parent.getID() + '_rtelink');
                        var c = document.getElementById(this.parent.getID() + '_image');
                        if (!(o.subCommand === 'SourceCode' || o.subCommand === 'Preview' || o.subCommand === 'FontColor' || o.subCommand === 'BackgroundColor')) {
                            var l = this.nodeSelectionObj.getRange(this.parent.contentModule.getDocument());
                            if ((0, r.le)(h) && (0, r.le)(c)) {
                                t = this.nodeSelectionObj.save(l, this.parent.contentModule.getDocument());
                            }
                            i = this.nodeSelectionObj.getNodeCollection(l);
                            s = this.nodeSelectionObj.getParentNodeCollection(l);
                        }
                        switch(o.subCommand){
                            case 'Maximize':
                                this.parent.notify(n.ex, {
                                    args: e
                                });
                                break;
                            case 'Minimize':
                                this.parent.notify(n.Fx, {
                                    args: e
                                });
                                break;
                            case 'CreateLink':
                                this.parent.notify(n.T8, {
                                    member: 'link',
                                    args: e,
                                    selectNode: i,
                                    selection: t,
                                    selectParent: s
                                });
                                break;
                            case 'RemoveLink':
                                this.parent.notify(n.tC, {
                                    member: 'link',
                                    args: e,
                                    selectNode: i,
                                    selection: t,
                                    selectParent: s
                                });
                                break;
                            case 'Print':
                                this.parent.print();
                                break;
                            case 'Image':
                                this.parent.notify(n.rL, {
                                    member: 'image',
                                    args: e,
                                    selectNode: i,
                                    selection: t,
                                    selectParent: s
                                });
                                break;
                            case 'CreateTable':
                                this.parent.notify(n.W_, {
                                    member: 'table',
                                    args: e,
                                    selection: t
                                });
                                break;
                            case 'SourceCode':
                                this.parent.notify(n.sv, {
                                    member: 'viewSource',
                                    args: e
                                });
                                break;
                            case 'Preview':
                                this.parent.notify(n.v0, {
                                    member: 'updateSource',
                                    args: e
                                });
                                break;
                            case 'FontColor':
                            case 'BackgroundColor':
                                break;
                            case 'File':
                                this.parent.notify(n._I, {
                                    member: 'fileManager',
                                    args: e,
                                    selectNode: i,
                                    selection: t,
                                    selectParent: s
                                });
                                break;
                            default:
                                this.parent.formatter.process(this.parent, e, e.originalEvent, null);
                                break;
                        }
                    }
                };
                e.prototype.renderColorPicker = function(e) {
                    this.colorPickerModule.renderColorPickerInput(e);
                };
                e.prototype.instantiateRenderer = function() {
                    if (this.parent.iframeSettings.enable) {
                        this.renderFactory.addRenderer(em.y2.Content, new ew(this.parent, this.locator));
                    } else {
                        this.renderFactory.addRenderer(em.y2.Content, new eC(this.parent, this.locator));
                    }
                };
                e.prototype.removeEventListener = function() {
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.parent.off(n.Xr, this.render);
                    this.parent.off(n.CC, this.onPropertyChanged);
                    this.parent.off(n.s0, this.onToolbarClick);
                    this.parent.off(n.jm, this.renderColorPicker);
                    this.parent.off(n.ob, this.destroy);
                    this.parent.off(n.QG, this.onKeyDown);
                    this.parent.off(n.T5, this.instantiateRenderer);
                    this.parent.off(n.td, this.selectAll);
                    this.parent.off(n.jh, this.selectRange);
                    this.parent.off(n.Db, this.getSelectedHtml);
                    this.parent.off(n.gA, this.onSelectionSave);
                    this.parent.off(n.Wz, this.onSelectionRestore);
                    this.parent.off(n.Ed, this.updateReadOnly);
                    this.parent.off(n.RE, this.onPaste);
                    this.parent.off(n.LF, this.isTableClassAdded);
                };
                e.prototype.render = function() {
                    this.contentRenderer = this.renderFactory.getRenderer(em.y2.Content);
                    var e = this.contentRenderer.getEditPanel();
                    var t = {
                        undoRedoSteps: this.parent.undoRedoSteps,
                        undoRedoTimer: this.parent.undoRedoTimer
                    };
                    if ((0, r.le)(this.parent.formatter)) {
                        var i = new ef({
                            currentDocument: this.contentRenderer.getDocument(),
                            element: e,
                            options: t
                        });
                        this.parent.setProperties({
                            formatter: i
                        }, true);
                    } else {
                        this.parent.formatter.updateFormatter(e, this.contentRenderer.getDocument(), t);
                    }
                    if (this.parent.enableXhtml) {
                        this.parent.notify(n.F, {});
                    }
                    if (this.parent.toolbarSettings.enable) {
                        this.toolbarUpdate = new ey(this.parent);
                    }
                    if (this.parent.inlineMode.enable) {
                        if (!(0, r.le)(this.parent.fontFamily.default)) {
                            e.style.fontFamily = this.parent.fontFamily.default;
                        }
                        if (!(0, r.le)(this.parent.fontSize.default)) {
                            e.style.fontSize = this.parent.fontSize.default;
                        }
                    }
                    this.parent.notify(n.$d, {});
                };
                e.prototype.onPropertyChanged = function(e) {
                    if (!(0, r.le)(e.newProp.formatter)) {
                        var t = this.contentRenderer.getEditPanel();
                        var i = {
                            undoRedoSteps: this.parent.undoRedoSteps,
                            undoRedoTimer: this.parent.undoRedoTimer
                        };
                        this.parent.formatter.updateFormatter(t, this.contentRenderer.getDocument(), i);
                    }
                };
                e.prototype.getModuleName = function() {
                    return 'htmlEditor';
                };
                e.prototype.selectAll = function() {
                    var e = (0, s.wX)(this.parent.contentModule.getDocument(), this.parent.contentModule.getEditPanel());
                    if (e.length > 0) {
                        this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.parent.contentModule.getDocument(), e[0], e[e.length - 1], 0, e[e.length - 1].textContent.length);
                    }
                };
                e.prototype.selectRange = function(e) {
                    this.parent.formatter.editorManager.nodeSelection.setRange(this.parent.contentModule.getDocument(), e.range);
                };
                e.prototype.getSelectedHtml = function(e) {
                    e.callBack(this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument()).toString());
                };
                return e;
            }());
        }),
        3725: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "q": function() {
                    return tb;
                }
            });
            var n = i(3386);
            var r = i(9486);
            var s = i(1807);
            var o = i(759);
            ;
            var a = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var l = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var h = 'e-label';
            var c = 'e-ripple-container';
            var d = 'e-rtl';
            var p = 'e-radio-wrapper';
            var u = [
                'title',
                'class',
                'style',
                'disabled',
                'readonly',
                'name',
                'value'
            ];
            var f = (function(e) {
                a(t, e);
                function t(t, i) {
                    var n = e.call(this, t, i) || this;
                    n.isFocused = false;
                    return n;
                }
                i = t;
                t.prototype.changeHandler = function(e) {
                    this.checked = true;
                    this.dataBind();
                    var t = this.element.getAttribute('value');
                    t = this.isVue && t ? this.element.value : this.value;
                    this.trigger('change', {
                        value: t,
                        event: e
                    });
                    if (this.tagName === 'EJS-RADIOBUTTON') {
                        e.stopPropagation();
                    }
                };
                t.prototype.updateChange = function() {
                    var e;
                    var t;
                    var n = this.getRadioGroup();
                    for(var r = 0; r < n.length; r++){
                        e = n[r];
                        if (e !== this.element) {
                            t = (0, s.s8)(e, i);
                            t.checked = false;
                            if (this.tagName === 'EJS-RADIOBUTTON') {
                                t.angularValue = this.value;
                            }
                        }
                    }
                };
                t.prototype.destroy = function() {
                    var t = this;
                    var i = this.wrapper;
                    e.prototype.destroy.call(this);
                    if (i) {
                        if (!this.disabled) {
                            this.unWireEvents();
                        }
                        if (this.tagName === 'INPUT') {
                            if (i.parentNode) {
                                i.parentNode.insertBefore(this.element, i);
                            }
                            (0, s.og)(i);
                            this.element.checked = false;
                            [
                                'name',
                                'value',
                                'disabled'
                            ].forEach(function(e) {
                                t.element.removeAttribute(e);
                            });
                        } else {
                            [
                                'role',
                                'aria-checked',
                                'class'
                            ].forEach(function(e) {
                                i.removeAttribute(e);
                            });
                            i.innerHTML = '';
                        }
                    }
                };
                t.prototype.focusHandler = function() {
                    this.isFocused = true;
                };
                t.prototype.focusOutHandler = function() {
                    var e = this.getLabel();
                    if (e) {
                        e.classList.remove('e-focus');
                    }
                };
                t.prototype.getModuleName = function() {
                    return 'radio';
                };
                t.prototype.getSelectedValue = function() {
                    var e;
                    var t = this.getRadioGroup();
                    for(var i = 0, n = t.length; i < n; i++){
                        e = t[i];
                        if (e.checked) {
                            return e.value;
                        }
                    }
                    return '';
                };
                t.prototype.getRadioGroup = function() {
                    return document.querySelectorAll('input.e-radio[name="' + this.element.getAttribute('name') + '"]');
                };
                t.prototype.getPersistData = function() {
                    return this.addOnPersist([
                        'checked'
                    ]);
                };
                t.prototype.getWrapper = function() {
                    if (this.element) {
                        return this.element.parentElement;
                    } else {
                        return null;
                    }
                };
                t.prototype.getLabel = function() {
                    if (this.element) {
                        return this.element.nextElementSibling;
                    } else {
                        return null;
                    }
                };
                t.prototype.initialize = function() {
                    if ((0, s.le)(this.initialCheckedValue)) {
                        this.initialCheckedValue = this.checked;
                    }
                    this.initWrapper();
                    this.updateHtmlAttribute();
                    if (this.name) {
                        this.element.setAttribute('name', this.name);
                    }
                    var e = this.element.getAttribute('value');
                    if (this.isVue && e && e === this.value) {
                        this.checked = true;
                    }
                    if (this.isVue ? this.value && !e : this.value) {
                        this.element.setAttribute('value', this.value);
                    }
                    if (this.checked) {
                        this.element.checked = true;
                    }
                    if (this.disabled) {
                        this.setDisabled();
                    }
                };
                t.prototype.initWrapper = function() {
                    var e;
                    var t = this.element.parentElement;
                    if (!t.classList.contains(p)) {
                        t = this.createElement('div', {
                            className: p
                        });
                        this.element.parentNode.insertBefore(t, this.element);
                    }
                    var i = this.createElement('label', {
                        attrs: {
                            for: this.element.id
                        }
                    });
                    t.appendChild(this.element);
                    t.appendChild(i);
                    if (s.re) {
                        e = this.createElement('span', {
                            className: (c)
                        });
                        i.appendChild(e);
                        (0, s.qx)(e, {
                            duration: 400,
                            isCenterRipple: true
                        });
                    }
                    t.classList.add('e-wrapper');
                    if (this.enableRtl) {
                        i.classList.add(d);
                    }
                    if (this.cssClass) {
                        (0, s.cn)([
                            t
                        ], this.cssClass.split(' '));
                    }
                    if (this.label) {
                        this.setText(this.label);
                    }
                };
                t.prototype.keyUpHandler = function() {
                    if (this.isFocused) {
                        this.getLabel().classList.add('e-focus');
                    }
                };
                t.prototype.labelRippleHandler = function(e) {
                    var t = this.getLabel().getElementsByClassName(c)[0];
                    (0, o.sg)(e, t);
                };
                t.prototype.formResetHandler = function() {
                    this.checked = this.initialCheckedValue;
                    if (this.initialCheckedValue) {
                        (0, s.Y4)(this.element, {
                            'checked': 'true'
                        });
                    }
                };
                t.prototype.onPropertyChanged = function(e, t) {
                    var i = this.getWrapper();
                    var n = this.getLabel();
                    for(var r = 0, o = Object.keys(e); r < o.length; r++){
                        var a = o[r];
                        switch(a){
                            case 'checked':
                                if (e.checked) {
                                    this.updateChange();
                                }
                                this.element.checked = e.checked;
                                break;
                            case 'disabled':
                                if (e.disabled) {
                                    this.setDisabled();
                                    this.unWireEvents();
                                } else {
                                    this.element.disabled = false;
                                    this.wireEvents();
                                }
                                break;
                            case 'cssClass':
                                if (t.cssClass) {
                                    (0, s.IV)([
                                        i
                                    ], t.cssClass.split(' '));
                                }
                                if (e.cssClass) {
                                    (0, s.cn)([
                                        i
                                    ], e.cssClass.split(' '));
                                }
                                break;
                            case 'enableRtl':
                                if (e.enableRtl) {
                                    n.classList.add(d);
                                } else {
                                    n.classList.remove(d);
                                }
                                break;
                            case 'label':
                                this.setText(e.label);
                                break;
                            case 'labelPosition':
                                if (e.labelPosition === 'Before') {
                                    n.classList.add('e-right');
                                } else {
                                    n.classList.remove('e-right');
                                }
                                break;
                            case 'name':
                                this.element.setAttribute('name', e.name);
                                break;
                            case 'value':
                                if (!(0, s.le)(this.htmlAttributes) && this.htmlAttributes.value) {
                                    break;
                                }
                                this.element.setAttribute('value', e.value);
                                break;
                            case 'htmlAttributes':
                                this.updateHtmlAttribute();
                                break;
                        }
                    }
                };
                t.prototype.preRender = function() {
                    var e = this.element;
                    this.formElement = (0, s.oq)(this.element, 'form');
                    this.tagName = this.element.tagName;
                    e = (0, o.Rm)(this.createElement, 'EJS-RADIOBUTTON', 'radio', e, p, 'radio');
                    this.element = e;
                    if (this.element.getAttribute('type') !== 'radio') {
                        this.element.setAttribute('type', 'radio');
                    }
                    if (!this.element.id) {
                        this.element.id = (0, s.QI)('e-' + this.getModuleName());
                    }
                    if (this.tagName === 'EJS-RADIOBUTTON') {
                        var t = this.element.getAttribute('formcontrolname');
                        if (t) {
                            this.setProperties({
                                'name': t
                            }, true);
                            this.element.setAttribute('name', t);
                        }
                    }
                };
                t.prototype.render = function() {
                    this.initialize();
                    if (!this.disabled) {
                        this.wireEvents();
                    }
                    this.renderComplete();
                    this.wrapper = this.getWrapper();
                };
                t.prototype.setDisabled = function() {
                    this.element.disabled = true;
                };
                t.prototype.setText = function(e) {
                    var t = this.getLabel();
                    var i = t.getElementsByClassName(h)[0];
                    if (i) {
                        i.textContent = e;
                    } else {
                        e = (this.enableHtmlSanitizer) ? s.pJ.sanitize(e) : e;
                        i = this.createElement('span', {
                            className: h,
                            innerHTML: e
                        });
                        t.appendChild(i);
                    }
                    if (this.labelPosition === 'Before') {
                        this.getLabel().classList.add('e-right');
                    } else {
                        this.getLabel().classList.remove('e-right');
                    }
                };
                t.prototype.updateHtmlAttribute = function() {
                    if (!(0, s.le)(this.htmlAttributes)) {
                        for(var e = 0, t = Object.keys(this.htmlAttributes); e < t.length; e++){
                            var i = t[e];
                            if (u.indexOf(i) > -1) {
                                var n = this.element.parentElement;
                                if (i === 'class') {
                                    (0, s.cn)([
                                        n
                                    ], this.htmlAttributes[i].split(' '));
                                } else if (i === 'title' || i === 'style') {
                                    n.setAttribute(i, this.htmlAttributes[i]);
                                } else {
                                    this.element.setAttribute(i, this.htmlAttributes[i]);
                                }
                            }
                        }
                    }
                };
                t.prototype.unWireEvents = function() {
                    var e = this.wrapper;
                    s.bi.remove(this.element, 'change', this.changeHandler);
                    s.bi.remove(this.element, 'focus', this.focusHandler);
                    s.bi.remove(this.element, 'focusout', this.focusOutHandler);
                    s.bi.remove(this.element, 'keyup', this.keyUpHandler);
                    var t = e.getElementsByTagName('label')[0];
                    if (t) {
                        s.bi.remove(t, 'mousedown', this.labelRippleHandler);
                        s.bi.remove(t, 'mouseup', this.labelRippleHandler);
                    }
                    if (this.formElement) {
                        s.bi.remove(this.formElement, 'reset', this.formResetHandler);
                    }
                };
                t.prototype.wireEvents = function() {
                    var e = this.getLabel();
                    s.bi.add(this.element, 'change', this.changeHandler, this);
                    s.bi.add(this.element, 'keyup', this.keyUpHandler, this);
                    s.bi.add(this.element, 'focus', this.focusHandler, this);
                    s.bi.add(this.element, 'focusout', this.focusOutHandler, this);
                    var t = e.getElementsByClassName(h)[0];
                    if (t) {
                        s.bi.add(t, 'mousedown', this.labelRippleHandler, this);
                        s.bi.add(t, 'mouseup', this.labelRippleHandler, this);
                    }
                    if (this.formElement) {
                        s.bi.add(this.formElement, 'reset', this.formResetHandler, this);
                    }
                };
                t.prototype.click = function() {
                    this.element.click();
                };
                t.prototype.focusIn = function() {
                    this.element.focus();
                };
                var i;
                l([
                    (0, s.ju)()
                ], t.prototype, "change", void 0);
                l([
                    (0, s.ju)()
                ], t.prototype, "created", void 0);
                l([
                    (0, s.Z9)(false)
                ], t.prototype, "checked", void 0);
                l([
                    (0, s.Z9)('')
                ], t.prototype, "cssClass", void 0);
                l([
                    (0, s.Z9)(false)
                ], t.prototype, "disabled", void 0);
                l([
                    (0, s.Z9)('')
                ], t.prototype, "label", void 0);
                l([
                    (0, s.Z9)('After')
                ], t.prototype, "labelPosition", void 0);
                l([
                    (0, s.Z9)('')
                ], t.prototype, "name", void 0);
                l([
                    (0, s.Z9)('')
                ], t.prototype, "value", void 0);
                l([
                    (0, s.Z9)(false)
                ], t.prototype, "enableHtmlSanitizer", void 0);
                l([
                    (0, s.Z9)({})
                ], t.prototype, "htmlAttributes", void 0);
                t = i = l([
                    s.Zl
                ], t);
                return t;
            }(s.wA));
            var m = i(9805);
            var v = i(103);
            var g = i(8867);
            var b = i(8082);
            var y = i(809);
            ;
            var C = {};
            var E = 30;
            var S = 30;
            var w = 30;
            var T = 24;
            var k = 30;
            var x = 36;
            var L = 36;
            var N = 'e-spin-show';
            var D = 'e-spin-hide';
            var O = 'e-spin-material';
            var A = 'e-spin-fabric';
            var P = 'e-spin-fluent';
            var M = 'e-spin-tailwind';
            var R = 'e-spin-bootstrap';
            var B = 'e-spin-bootstrap4';
            var I = 'e-spin-bootstrap5';
            var H = 'e-spin-high-contrast';
            var F = 'e-spinner-pane';
            var j = 'e-spinner-inner';
            var z = 'e-path-circle';
            var q = 'e-path-arc';
            var V = 'e-spin-label';
            var _ = 'e-spin-template';
            var U = null;
            var W = null;
            function Z(e, t, i, n) {
                switch(e){
                    case 'Create':
                        var r = document.querySelector(t.target);
                        var s = {
                            type: n,
                            target: r,
                            cssClass: t.cssClass,
                            label: t.label,
                            width: t.width
                        };
                        Y(s);
                        break;
                    case 'Show':
                        eD(document.querySelector(i));
                        break;
                    case 'Hide':
                        eA(document.querySelector(i));
                        break;
                    case 'Set':
                        var o = {
                            cssClass: t.cssClass,
                            type: n
                        };
                        eP(o);
                        break;
                }
            }
            function Y(e, t) {
                if (!e.target) {
                    return;
                }
                var i;
                var n = !(0, s.le)(t) ? t : s.az;
                var r = ev(e.target, n);
                if (!(0, s.le)(e.cssClass)) {
                    r.wrap.classList.add(e.cssClass);
                }
                if (!(0, s.le)(e.template) || !(0, s.le)(U)) {
                    var o = !(0, s.le)(e.template) ? e.template : U;
                    r.wrap.classList.add(_);
                    ec(r.wrap, o, W);
                } else {
                    var a = !(0, s.le)(e.type) ? e.type : en(r.wrap);
                    var l = !(0, s.le)(e.width) ? e.width : undefined;
                    i = ed(l, a);
                    er(a, r.wrap, i, n);
                    if (!(0, s.le)(e.label)) {
                        X(r.inner_wrap, e.label, n);
                    }
                }
                r.wrap.classList.add(D);
                r = null;
            }
            function X(e, t, i) {
                var n = i('div', {});
                n.classList.add(V);
                n.innerHTML = t;
                e.appendChild(n);
                return n;
            }
            function G(e, t, i) {
                var n = eu();
                C[n] = {
                    timeOut: 0,
                    type: 'Material',
                    radius: t
                };
                em(e, n, i, O);
                ey(t, e, 'Material', O);
            }
            function K(e, t, i) {
                var n = eu();
                C[n] = {
                    timeOut: 0,
                    type: 'Bootstrap4',
                    radius: t
                };
                em(e, n, i, B);
                ey(t, e, 'Bootstrap4', B);
            }
            function J(e, t, i) {
                var n = eu();
                C[n] = {
                    timeOut: 0,
                    type: 'Bootstrap5',
                    radius: t
                };
                em(e, n, i, I);
                ey(t, e, 'Bootstrap5', I);
            }
            function $(e, t, i) {
                var n = {};
                var r = 0;
                C[t].timeOut = 0;
                n[t] = ep(t, i, 0, 0);
                var s = {
                    uniqueID: t,
                    container: e,
                    globalInfo: n,
                    timeOutVar: r
                };
                eg(s);
            }
            function Q(e, t, i) {
                var n = eu();
                C[n] = {
                    timeOut: 0,
                    type: 'Fabric',
                    radius: t
                };
                ef(e, n, A, i);
                ek(t, e, A);
            }
            function ee(e, t, i) {
                var n = eu();
                C[n] = {
                    timeOut: 0,
                    type: 'Fluent',
                    radius: t
                };
                ef(e, n, P, i);
                ek(t, e, P);
            }
            function et(e, t, i) {
                var n = eu();
                C[n] = {
                    timeOut: 0,
                    type: 'Tailwind',
                    radius: t
                };
                ef(e, n, M, i);
                ek(t, e, M);
            }
            function ei(e, t, i) {
                var n = eu();
                C[n] = {
                    timeOut: 0,
                    type: 'HighContrast',
                    radius: t
                };
                ef(e, n, H, i);
                ek(t, e, H);
            }
            function en(e) {
                var t = window.getComputedStyle(e, ':after').getPropertyValue('content');
                return t.replace(/['"]+/g, '');
            }
            function er(e, t, i, n) {
                var r = t.querySelector('.' + j);
                var o = r.querySelector('svg');
                if (!(0, s.le)(o)) {
                    r.removeChild(o);
                }
                switch(e){
                    case 'Material':
                        G(r, i, n);
                        break;
                    case 'Fabric':
                        Q(r, i, n);
                        break;
                    case 'Fluent':
                        ee(r, i, n);
                        break;
                    case 'Bootstrap':
                        es(r, i, n);
                        break;
                    case 'HighContrast':
                        ei(r, i, n);
                        break;
                    case 'Bootstrap4':
                        K(r, i, n);
                        break;
                    case 'Bootstrap5':
                        J(r, i, n);
                        break;
                    case 'Tailwind':
                    case 'Tailwind-dark':
                        et(r, i, n);
                        break;
                }
            }
            function es(e, t, i) {
                var n = eu();
                C[n] = {
                    timeOut: 0,
                    type: 'Bootstrap',
                    radius: t
                };
                eo(e, n, i);
                ea(e, t);
            }
            function eo(e, t, i) {
                var n = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                var r = 64;
                var s = 32;
                var o = 2;
                n.setAttribute('id', t);
                n.setAttribute('class', R);
                n.setAttribute('viewBox', '0 0 ' + r + ' ' + r);
                e.insertBefore(n, e.firstChild);
                for(var a = 0; a <= 7; a++){
                    var l = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                    l.setAttribute('class', z + '_' + a);
                    l.setAttribute('r', o + '');
                    l.setAttribute('transform', 'translate(' + s + ',' + s + ')');
                    n.appendChild(l);
                }
            }
            function ea(e, t) {
                var i = e.querySelector('svg.e-spin-bootstrap');
                var n = 0;
                var r = 0;
                var s = 24;
                i.style.width = i.style.height = t + 'px';
                var o = 90;
                for(var a = 0; a <= 7; a++){
                    var l = ex(n, r, s, o);
                    var h = i.querySelector('.' + z + '_' + a);
                    h.setAttribute('cx', l.x + '');
                    h.setAttribute('cy', l.y + '');
                    o = o >= 360 ? 0 : o;
                    o = o + 45;
                }
            }
            function el(e, t) {
                var i = [];
                var n = e;
                var r = t;
                var s = false, o = 1;
                a(n);
                function a(e) {
                    i.push(e);
                    if (e !== r || o === 1) {
                        if (e <= n && e > 1 && !s) {
                            e = parseFloat((e - 0.2).toFixed(2));
                        } else if (e === 1) {
                            e = 7;
                            e = parseFloat((e + 0.2).toFixed(2));
                            s = true;
                        } else if (e < 8 && s) {
                            e = parseFloat((e + 0.2).toFixed(2));
                            if (e === 8) {
                                s = false;
                            }
                        } else if (e <= 8 && !s) {
                            e = parseFloat((e - 0.2).toFixed(2));
                        }
                        ++o;
                        a(e);
                    }
                }
                return i;
            }
            function eh(e) {
                var t = e.querySelector('svg.e-spin-bootstrap');
                var i = t.getAttribute('id');
                for(var n = 1; n <= 8; n++){
                    var r = (e.getElementsByClassName('e-path-circle_' + (n === 8 ? 0 : n))[0]);
                    s(r, n, n, el(n, n), i);
                }
                function s(e, t, i, n, r) {
                    var s = 0;
                    o(t);
                    function o(t) {
                        if (C[r].isAnimate) {
                            ++s;
                            e.setAttribute('r', t + '');
                            if (s >= n.length) {
                                s = 0;
                            }
                            C[r].timeOut = setTimeout(o.bind(null, n[s]), 18);
                        }
                    }
                }
            }
            function ec(e, t, i) {
                if (!(0, s.le)(i)) {
                    e.classList.add(i);
                }
                var n = e.querySelector('.e-spinner-inner');
                n.innerHTML = t;
            }
            function ed(e, t) {
                var i;
                switch(t){
                    case 'Material':
                        i = E;
                        break;
                    case 'Fabric':
                        i = S;
                        break;
                    case 'Tailwind':
                    case 'Tailwind-dark':
                        i = S;
                        break;
                    case 'Fluent':
                        i = w;
                        break;
                    case 'Bootstrap4':
                        i = x;
                        break;
                    case 'Bootstrap5':
                        i = L;
                        break;
                    default:
                        i = k;
                }
                e = e ? parseFloat(e + '') : i;
                return t === 'Bootstrap' ? e : e / 2;
            }
            function ep(e, t, i, n) {
                return {
                    radius: t,
                    count: i,
                    previousId: n
                };
            }
            function eu() {
                var e = '';
                var t = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
                for(var i = 0; i < 5; i++){
                    e += t.charAt(Math.floor(Math.random() * t.length));
                }
                return e;
            }
            function ef(e, t, i, n) {
                var r = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                r.setAttribute('id', t);
                r.setAttribute('class', i);
                var s = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                s.setAttribute('class', z);
                var o = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                o.setAttribute('class', q);
                e.insertBefore(r, e.firstChild);
                r.appendChild(s);
                r.appendChild(o);
            }
            function em(e, t, i, n) {
                var r = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                var s = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                r.setAttribute('class', n);
                r.setAttribute('id', t);
                s.setAttribute('class', z);
                e.insertBefore(r, e.firstChild);
                r.appendChild(s);
            }
            function ev(e, t) {
                var i = t('div', {});
                var n = t('div', {});
                i.classList.add(F);
                n.classList.add(j);
                e.appendChild(i);
                i.appendChild(n);
                return {
                    wrap: i,
                    inner_wrap: n
                };
            }
            function eg(e) {
                var t = 1;
                var i = 149;
                var n = 1333;
                var r = 75;
                eb(t, i, eT, n, e.globalInfo[e.uniqueID].count, r, e);
                e.globalInfo[e.uniqueID].count = ++e.globalInfo[e.uniqueID].count % 4;
            }
            function eb(e, t, i, n, r, o, a) {
                var l = ++a.globalInfo[a.uniqueID].previousId;
                var h = new Date().getTime();
                var c = t - e;
                var d = eC((a.globalInfo[a.uniqueID].radius * 2) + '');
                var p = eS(d);
                var u = -90 * (a.globalInfo[a.uniqueID].count || 0);
                f(a);
                function f(t) {
                    var r = Math.max(0, Math.min(new Date().getTime() - h, n));
                    m(i(r, e, c, n), t.container);
                    if (l === t.globalInfo[t.uniqueID].previousId && r < n) {
                        C[t.uniqueID].timeOut = setTimeout(f.bind(null, t), 1);
                    } else {
                        eg(t);
                    }
                }
                function m(e, t) {
                    if ((!(0, s.le)(t.querySelector('svg.e-spin-material'))) && (!(0, s.le)(t.querySelector('svg.e-spin-material').querySelector('path.e-path-circle')))) {
                        var i = t.querySelector('svg.e-spin-material');
                        var n = i.querySelector('path.e-path-circle');
                        n.setAttribute('stroke-dashoffset', ew(d, p, e, o) + '');
                        n.setAttribute('transform', 'rotate(' + (u) + ' ' + d / 2 + ' ' + d / 2 + ')');
                    }
                }
            }
            function ey(e, t, i, n) {
                var r = e * 2;
                var s = t.querySelector('svg.' + n);
                var o = s.querySelector('path.e-path-circle');
                var a = eS(r);
                var l = (r / 2) + 'px';
                s.setAttribute('viewBox', '0 0 ' + r + ' ' + r);
                s.style.width = s.style.height = r + 'px';
                s.style.transformOrigin = l + ' ' + l + ' ' + l;
                o.setAttribute('d', eE(r, a));
                if (i === 'Material') {
                    o.setAttribute('stroke-width', a + '');
                    o.setAttribute('stroke-dasharray', ((r - a) * Math.PI * 0.75) + '');
                    o.setAttribute('stroke-dashoffset', ew(r, a, 1, 75) + '');
                }
            }
            function eC(e) {
                var t = parseFloat(e);
                return t;
            }
            function eE(e, t) {
                var i = e / 2;
                var n = t / 2;
                return 'M' + i + ',' + n + 'A' + (i - n) + ',' + (i - n) + ' 0 1 1 ' + n + ',' + i;
            }
            function eS(e) {
                return 10 / 100 * e;
            }
            function ew(e, t, i, n) {
                return (e - t) * Math.PI * ((3 * (n) / 100) - (i / 100));
            }
            function eT(e, t, i, n) {
                var r = (e /= n) * e;
                var s = r * e;
                return t + i * (6 * s * r + -15 * r * r + 10 * s);
            }
            function ek(e, t, i) {
                var n = e;
                var r = e;
                var s = e * 2;
                var o = 315, a = 45;
                var l = t.querySelector('.' + i);
                var h = l.querySelector('.e-path-circle');
                var c = l.querySelector('.e-path-arc');
                var d = (s / 2) + 'px';
                h.setAttribute('d', eN(n, r, e));
                c.setAttribute('d', eL(n, r, e, o, a));
                l.setAttribute('viewBox', '0 0 ' + s + ' ' + s);
                l.style.transformOrigin = d + ' ' + d + ' ' + d;
                l.style.width = l.style.height = s + 'px';
            }
            function ex(e, t, i, n) {
                var r = (n - 90) * Math.PI / 180.0;
                return {
                    x: e + (i * Math.cos(r)),
                    y: t + (i * Math.sin(r))
                };
            }
            function eL(e, t, i, n, r) {
                var s = ex(e, t, i, r);
                var o = ex(e, t, i, n);
                var a = [
                    'M',
                    s.x,
                    s.y,
                    'A',
                    i,
                    i,
                    0,
                    0,
                    0,
                    o.x,
                    o.y
                ].join(' ');
                return a;
            }
            function eN(e, t, i) {
                var n = [
                    'M',
                    e,
                    t,
                    'm',
                    -i,
                    0,
                    'a',
                    i,
                    i,
                    0,
                    1,
                    0,
                    i * 2,
                    0,
                    'a',
                    i,
                    i,
                    0,
                    1,
                    0,
                    -i * 2,
                    0
                ].join(' ');
                return n;
            }
            function eD(e) {
                eO(e, false);
                e = null;
            }
            function eO(e, t) {
                var i;
                if (e) {
                    i = e.classList.contains(F) ? e : e.querySelector('.' + F);
                }
                if (e && i) {
                    var n = i.querySelector('.' + j);
                    var r = void 0;
                    r = t ? !i.classList.contains(_) && !i.classList.contains(D) : !i.classList.contains(_) && !i.classList.contains(N);
                    if (r) {
                        var o = i.querySelector('svg');
                        if ((0, s.le)(o)) {
                            return;
                        }
                        var a = o.getAttribute('id');
                        C[a].isAnimate = !t;
                        switch(C[a].type){
                            case 'Material':
                                t ? clearTimeout(C[a].timeOut) : $(n, a, C[a].radius);
                                break;
                            case 'Bootstrap':
                                t ? clearTimeout(C[a].timeOut) : eh(n);
                                break;
                        }
                    }
                    t ? (0, s.s1)(i, [
                        D
                    ], [
                        N
                    ]) : (0, s.s1)(i, [
                        N
                    ], [
                        D
                    ]);
                    e = null;
                }
            }
            function eA(e) {
                eO(e, true);
                e = null;
            }
            function eP(e, t) {
                var i = !isNullOrUndefined(t) ? t : createElement;
                if (e.template !== undefined) {
                    U = e.template;
                    if (e.template !== undefined) {
                        W = e.cssClass;
                    }
                }
                var n = document.querySelectorAll('.' + F);
                for(var r = 0; r < n.length; r++){
                    eM(e.template, n[r], e.type, e.cssClass, i);
                }
            }
            function eM(e, t, i, n, r) {
                if (isNullOrUndefined(e) && !t.classList.contains(_)) {
                    eR(t, i, n, r);
                    if (t.classList.contains(N)) {
                        t.classList.remove(N);
                        eD(t);
                    } else {
                        t.classList.remove(D);
                        eA(t);
                    }
                } else {
                    U = e;
                    if (!isNullOrUndefined(n)) {
                        W = n;
                    }
                }
            }
            function eR(e, t, i, n) {
                if (!isNullOrUndefined(i)) {
                    e.classList.add(i);
                }
                var r = e.querySelector('svg');
                var s = t === 'Bootstrap' ? parseFloat(r.style.height) : parseFloat(r.style.height) / 2;
                var o = r.getAttribute('class');
                var a = o.split(/\s/);
                if (a.indexOf('e-spin-material') >= 0) {
                    var l = r.getAttribute('id');
                    clearTimeout(C[l].timeOut);
                }
                er(t, e, s, n);
            }
            ;
            var eB = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var eI = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var eH = 'e-upload e-control-wrapper';
            var eF = 'e-file-select';
            var ej = 'e-file-drop';
            var ez = 'e-file-select-wrap';
            var eq = 'e-upload-files';
            var eV = 'e-upload-file-list';
            var e_ = 'e-file-status';
            var eU = 'e-upload-actions';
            var eW = 'e-file-upload-btn e-css e-btn e-flat e-primary';
            var eZ = 'e-file-clear-btn e-css e-btn e-flat';
            var eY = 'e-file-name';
            var eX = 'e-file-type';
            var eG = 'e-file-size';
            var eK = 'e-file-remove-btn';
            var eJ = 'e-file-delete-btn';
            var e$ = 'e-spinner-pane';
            var eQ = 'e-file-abort-btn';
            var e0 = 'e-file-reload-btn';
            var e1 = 'e-upload-drag-hover';
            var e3 = 'e-upload-progress-wrap';
            var e2 = 'e-upload-progress-bar';
            var e4 = 'e-progress-bar-text';
            var e5 = 'e-upload-progress';
            var e7 = 'e-upload-success';
            var e9 = 'e-upload-fails';
            var e6 = 'e-file-container';
            var e8 = 'e-validation-fails';
            var te = 'e-rtl';
            var tt = 'e-disabled';
            var ti = 'e-rtl-container';
            var tn = 'e-clear-icon-focus';
            var tr = 'e-progress-inner-wrap';
            var ts = 'e-file-pause-btn';
            var to = 'e-file-play-btn';
            var ta = 'e-restrict-retry';
            var tl = [
                'title',
                'style',
                'class'
            ];
            var th = 'e-form-upload';
            var tc = 'e-hidden-file-input';
            var td = 'e-file-invalid';
            var tp = 'e-file-information';
            var tu = (function(e) {
                eB(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                eI([
                    (0, s.Z9)('')
                ], t.prototype, "name", void 0);
                eI([
                    (0, s.Z9)(null)
                ], t.prototype, "size", void 0);
                eI([
                    (0, s.Z9)('')
                ], t.prototype, "type", void 0);
                return t;
            }(s.rt));
            var tf = (function(e) {
                eB(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                eI([
                    (0, s.Z9)('Browse...')
                ], t.prototype, "browse", void 0);
                eI([
                    (0, s.Z9)('Upload')
                ], t.prototype, "upload", void 0);
                eI([
                    (0, s.Z9)('Clear')
                ], t.prototype, "clear", void 0);
                return t;
            }(s.rt));
            var tm = (function(e) {
                eB(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                eI([
                    (0, s.Z9)('')
                ], t.prototype, "saveUrl", void 0);
                eI([
                    (0, s.Z9)('')
                ], t.prototype, "removeUrl", void 0);
                eI([
                    (0, s.Z9)(0)
                ], t.prototype, "chunkSize", void 0);
                eI([
                    (0, s.Z9)(3)
                ], t.prototype, "retryCount", void 0);
                eI([
                    (0, s.Z9)(500)
                ], t.prototype, "retryAfterDelay", void 0);
                return t;
            }(s.rt));
            var tv = (function(e) {
                eB(t, e);
                function t(t, i) {
                    var n = e.call(this, t, i) || this;
                    n.initialAttr = {
                        accept: null,
                        multiple: false,
                        disabled: false
                    };
                    n.uploadedFilesData = [];
                    n.base64String = [];
                    n.isForm = false;
                    n.allTypes = false;
                    n.pausedData = [];
                    n.uploadMetaData = [];
                    n.tabIndex = '0';
                    n.btnTabIndex = '0';
                    n.disableKeyboardNavigation = false;
                    n.count = -1;
                    n.actionCompleteCount = 0;
                    n.flag = true;
                    n.selectedFiles = [];
                    n.uploaderName = 'UploadFiles';
                    n.fileStreams = [];
                    n.newFileRef = 0;
                    n.isFirstFileOnSelection = false;
                    n.dragCounter = 0;
                    n.isAngular = false;
                    n.fileList = [];
                    n.filesData = [];
                    n.uploaderOptions = t;
                    return n;
                }
                t.prototype.onPropertyChanged = function(e, t) {
                    for(var i = 0, n = Object.keys(e); i < n.length; i++){
                        var r = n[i];
                        switch(r){
                            case 'allowedExtensions':
                                this.setExtensions(this.allowedExtensions);
                                this.clearAll();
                                break;
                            case 'enabled':
                                this.setControlStatus();
                                break;
                            case 'multiple':
                                this.setMultipleSelection();
                                break;
                            case 'enableRtl':
                                this.setRTL();
                                this.reRenderFileList();
                                break;
                            case 'buttons':
                                this.buttons.browse = (0, s.le)(this.buttons.browse) ? '' : this.buttons.browse;
                                this.buttons.clear = (0, s.le)(this.buttons.clear) ? '' : this.buttons.clear;
                                this.buttons.upload = (0, s.le)(this.buttons.upload) ? '' : this.buttons.upload;
                                this.renderButtonTemplates();
                                break;
                            case 'dropArea':
                                this.unBindDropEvents();
                                this.updateDropArea();
                                break;
                            case 'htmlAttributes':
                                this.updateHTMLAttrToElement();
                                this.updateHTMLAttrToWrapper();
                                this.checkHTMLAttributes(true);
                                break;
                            case 'files':
                                this.renderPreLoadFiles();
                                break;
                            case 'directoryUpload':
                                this.updateDirectoryAttributes();
                                break;
                            case 'template':
                                this.clearAll();
                                break;
                            case 'minFileSize':
                            case 'maxFileSize':
                            case 'autoUpload':
                                this.clearAll();
                                break;
                            case 'sequentialUpload':
                                this.clearAll();
                                break;
                            case 'locale':
                                this.l10n.setLocale(this.locale);
                                this.setLocalizedTexts();
                                this.preLocaleObj = (0, s.NA)('currentLocale', this.l10n);
                                break;
                            case 'cssClass':
                                this.setCSSClass(t.cssClass);
                                break;
                        }
                    }
                };
                t.prototype.setLocalizedTexts = function() {
                    if ((0, s.le)(this.template)) {
                        if (typeof (this.buttons.browse) === 'string') {
                            this.browseButton.innerText = (this.buttons.browse === 'Browse...') ? this.localizedTexts('Browse') : this.buttons.browse;
                            this.browseButton.setAttribute('title', this.browseButton.innerText);
                            if (this.uploadWrapper && !(0, s.le)(this.uploadWrapper.querySelector('.' + ej))) {
                                this.uploadWrapper.querySelector('.' + ej).innerHTML = this.localizedTexts('dropFilesHint');
                            }
                        }
                        this.updateFileList();
                    }
                };
                t.prototype.getKeyValue = function(e) {
                    var t;
                    for(var i = 0, n = Object.keys(this.preLocaleObj); i < n.length; i++){
                        var r = n[i];
                        if (this.preLocaleObj[r] === e) {
                            t = r;
                        }
                    }
                    return t;
                };
                t.prototype.updateFileList = function() {
                    var e;
                    if (this.fileList.length > 0 && !(0, s.le)(this.uploadWrapper.querySelector('.' + eq))) {
                        for(var t = 0; t < this.fileList.length; t++){
                            e = this.fileList[t].querySelector('.e-file-status');
                            e.innerHTML = this.localizedTexts(this.getKeyValue(this.filesData[t].status));
                            this.filesData[t].status = this.localizedTexts(this.getKeyValue(this.filesData[t].status));
                            if (this.fileList[t].classList.contains(e7)) {
                                this.fileList[t].querySelector('.e-icons').setAttribute('title', this.localizedTexts('delete'));
                            }
                            if (this.fileList[t].querySelector('.e-file-play-btn')) {
                                this.fileList[t].querySelector('.e-icons').setAttribute('title', this.localizedTexts('resume'));
                            }
                            if (this.fileList[t].querySelector('.e-file-remove-btn')) {
                                this.fileList[t].querySelector('.e-icons').setAttribute('title', this.localizedTexts('remove'));
                            }
                            if (this.fileList[t].querySelector('.e-file-reload-btn')) {
                                this.fileList[t].querySelector('.e-icons').setAttribute('title', this.localizedTexts('retry'));
                            }
                            if (!this.autoUpload) {
                                this.uploadButton.innerText = (this.buttons.upload === 'Upload') ? this.localizedTexts('Upload') : this.buttons.upload;
                                this.uploadButton.setAttribute('title', this.localizedTexts('Upload'));
                                this.clearButton.innerText = (this.buttons.clear === 'Clear') ? this.localizedTexts('Clear') : this.buttons.clear;
                                this.clearButton.setAttribute('title', this.localizedTexts('Clear'));
                            }
                        }
                    }
                };
                t.prototype.reRenderFileList = function() {
                    if (this.listParent) {
                        (0, s.og)(this.listParent);
                        this.listParent = null;
                        this.fileList = [];
                        this.createFileList(this.filesData);
                        if (this.actionButtons) {
                            this.removeActionButtons();
                            this.renderActionButtons();
                            this.checkActionButtonStatus();
                        }
                    }
                };
                t.prototype.preRender = function() {
                    this.localeText = {
                        Browse: 'Browse...',
                        Clear: 'Clear',
                        Upload: 'Upload',
                        dropFilesHint: 'Or drop files here',
                        invalidMaxFileSize: 'File size is too large',
                        invalidMinFileSize: 'File size is too small',
                        invalidFileType: 'File type is not allowed',
                        uploadFailedMessage: 'File failed to upload',
                        uploadSuccessMessage: 'File uploaded successfully',
                        removedSuccessMessage: 'File removed successfully',
                        removedFailedMessage: 'Unable to remove file',
                        inProgress: 'Uploading',
                        readyToUploadMessage: 'Ready to upload',
                        abort: 'Abort',
                        remove: 'Remove',
                        cancel: 'Cancel',
                        delete: 'Delete file',
                        pauseUpload: 'File upload paused',
                        pause: 'Pause',
                        resume: 'Resume',
                        retry: 'Retry',
                        fileUploadCancel: 'File upload canceled',
                        invalidFileSelection: 'Invalid files selected',
                        totalFiles: 'Total files',
                        size: 'Size'
                    };
                    this.l10n = new s.E7('uploader', this.localeText, this.locale);
                    this.preLocaleObj = (0, s.NA)('currentLocale', this.l10n);
                    this.formRendered();
                    this.updateHTMLAttrToElement();
                    this.checkHTMLAttributes(false);
                    var e = (0, s.NA)('ej2_instances', this.element);
                    if (this.element.tagName === 'EJS-UPLOADER') {
                        var t = this.createElement('input', {
                            attrs: {
                                type: 'file'
                            }
                        });
                        var i = 0;
                        for(i; i < this.element.attributes.length; i++){
                            t.setAttribute(this.element.attributes[i].nodeName, this.element.attributes[i].nodeValue);
                            t.innerHTML = this.element.innerHTML;
                        }
                        if (!t.hasAttribute('name')) {
                            t.setAttribute('name', 'UploadFiles');
                        }
                        this.element.appendChild(t);
                        this.element = t;
                        (0, s.sO)('ej2_instances', e, this.element);
                    }
                    if (e[0].isPureReactComponent) {
                        if (!(0, s.le)(e[0].props.name)) {
                            this.element.setAttribute('name', e[0].props.name);
                        } else if (!(0, s.le)(e[0].props.id) && (0, s.le)(e[0].props.name)) {
                            this.element.setAttribute('name', e[0].props.id);
                        } else {
                            this.element.setAttribute('name', 'UploadFiles');
                        }
                    }
                    if ((0, s.le)(this.element.getAttribute('name'))) {
                        this.element.setAttribute('name', this.element.getAttribute('id'));
                    }
                    if (!this.element.hasAttribute('type')) {
                        this.element.setAttribute('type', 'file');
                    }
                    this.updateDirectoryAttributes();
                    this.keyConfigs = {
                        enter: 'enter'
                    };
                    if (this.element.hasAttribute('tabindex')) {
                        this.tabIndex = this.element.getAttribute('tabindex');
                    }
                    this.browserName = s.AR.info.name;
                    this.uploaderName = this.element.getAttribute('name');
                };
                t.prototype.formRendered = function() {
                    var e = (0, s.oq)(this.element, 'form');
                    if (!(0, s.le)(e)) {
                        for(; e && e !== document.documentElement; e = e.parentElement){
                            if (e.tagName === 'FORM') {
                                this.isForm = true;
                                this.formElement = e;
                                e.setAttribute('enctype', 'multipart/form-data');
                                e.setAttribute('encoding', 'multipart/form-data');
                            }
                        }
                    }
                };
                t.prototype.getPersistData = function() {
                    return this.addOnPersist([
                        'filesData'
                    ]);
                };
                t.prototype.getModuleName = function() {
                    return 'uploader';
                };
                t.prototype.updateDirectoryAttributes = function() {
                    if (this.directoryUpload) {
                        this.element.setAttribute('directory', 'true');
                        this.element.setAttribute('webkitdirectory', 'true');
                    } else {
                        this.element.removeAttribute('directory');
                        this.element.removeAttribute('webkitdirectory');
                    }
                };
                t.prototype.render = function() {
                    this.renderBrowseButton();
                    this.initializeUpload();
                    this.updateHTMLAttrToWrapper();
                    this.wireEvents();
                    this.setMultipleSelection();
                    this.setExtensions(this.allowedExtensions);
                    this.setRTL();
                    this.renderPreLoadFiles();
                    this.setControlStatus();
                    this.setCSSClass();
                };
                t.prototype.renderBrowseButton = function() {
                    this.browseButton = this.createElement('button', {
                        className: 'e-css e-btn',
                        attrs: {
                            'type': 'button'
                        }
                    });
                    this.browseButton.setAttribute('tabindex', this.tabIndex);
                    if (typeof (this.buttons.browse) === 'string') {
                        this.browseButton.textContent = (this.buttons.browse === 'Browse...') ? this.localizedTexts('Browse') : this.buttons.browse;
                        this.browseButton.setAttribute('title', this.browseButton.innerText);
                    } else {
                        this.browseButton.appendChild(this.buttons.browse);
                    }
                    this.element.setAttribute('aria-label', 'Uploader');
                };
                t.prototype.renderActionButtons = function() {
                    this.element.setAttribute('tabindex', '-1');
                    this.actionButtons = this.createElement('div', {
                        className: eU
                    });
                    this.uploadButton = this.createElement('button', {
                        className: eW,
                        attrs: {
                            'type': 'button',
                            'tabindex': this.btnTabIndex
                        }
                    });
                    this.clearButton = this.createElement('button', {
                        className: eZ,
                        attrs: {
                            'type': 'button',
                            'tabindex': this.btnTabIndex
                        }
                    });
                    this.actionButtons.appendChild(this.clearButton);
                    this.actionButtons.appendChild(this.uploadButton);
                    this.renderButtonTemplates();
                    this.uploadWrapper.appendChild(this.actionButtons);
                    this.browseButton.blur();
                    if (!this.isPreloadFiles) {
                        this.uploadButton.focus();
                    }
                    this.wireActionButtonEvents();
                };
                t.prototype.serverActionButtonsEventBind = function(e) {
                    if (e && !this.isForm) {
                        this.browseButton.blur();
                        this.actionButtons = e;
                        this.uploadButton = this.actionButtons.querySelector('.e-file-upload-btn');
                        this.clearButton = this.actionButtons.querySelector('.e-file-clear-btn');
                        this.uploadButton.focus();
                        this.unwireActionButtonEvents();
                        this.wireActionButtonEvents();
                        this.checkActionButtonStatus();
                    }
                };
                t.prototype.wireActionButtonEvents = function() {
                    s.bi.add(this.uploadButton, 'click', this.uploadButtonClick, this);
                    s.bi.add(this.clearButton, 'click', this.clearButtonClick, this);
                };
                t.prototype.unwireActionButtonEvents = function() {
                    s.bi.remove(this.uploadButton, 'click', this.uploadButtonClick);
                    s.bi.remove(this.clearButton, 'click', this.clearButtonClick);
                };
                t.prototype.removeActionButtons = function() {
                    if (this.actionButtons) {
                        this.unwireActionButtonEvents();
                        (0, s.og)(this.actionButtons);
                        this.actionButtons = null;
                    }
                };
                t.prototype.renderButtonTemplates = function() {
                    if (typeof (this.buttons.browse) === 'string') {
                        this.browseButton.textContent = (this.buttons.browse === 'Browse...') ? this.localizedTexts('Browse') : this.buttons.browse;
                        this.browseButton.setAttribute('title', this.browseButton.textContent);
                    } else {
                        this.browseButton.innerHTML = '';
                        this.browseButton.appendChild(this.buttons.browse);
                    }
                    if (this.uploadButton) {
                        var e = (0, s.le)(this.buttons.upload) ? 'Upload' : this.buttons.upload;
                        this.buttons.upload = e;
                        if (typeof (this.buttons.upload) === 'string') {
                            this.uploadButton.textContent = (this.buttons.upload === 'Upload') ? this.localizedTexts('Upload') : this.buttons.upload;
                            this.uploadButton.setAttribute('title', this.uploadButton.textContent);
                        } else {
                            this.uploadButton.innerHTML = '';
                            this.uploadButton.appendChild(this.buttons.upload);
                        }
                    }
                    if (this.clearButton) {
                        var t = (0, s.le)(this.buttons.clear) ? 'Clear' : this.buttons.clear;
                        this.buttons.clear = t;
                        if (typeof (this.buttons.clear) === 'string') {
                            this.clearButton.textContent = (this.buttons.clear === 'Clear') ? this.localizedTexts('Clear') : this.buttons.clear;
                            this.clearButton.setAttribute('title', this.clearButton.textContent);
                        } else {
                            this.clearButton.innerHTML = '';
                            this.clearButton.appendChild(this.buttons.clear);
                        }
                    }
                };
                t.prototype.initializeUpload = function() {
                    this.element.setAttribute('tabindex', '-1');
                    var e = this.createElement('span', {
                        className: eF
                    });
                    this.element.parentElement.insertBefore(e, this.element);
                    this.dropAreaWrapper = this.createElement('div', {
                        className: ez
                    });
                    this.element.parentElement.insertBefore(this.dropAreaWrapper, this.element);
                    e.appendChild(this.element);
                    this.dropAreaWrapper.appendChild(this.browseButton);
                    this.dropAreaWrapper.appendChild(e);
                    this.uploadWrapper = this.createElement('div', {
                        className: eH
                    });
                    this.dropAreaWrapper.parentElement.insertBefore(this.uploadWrapper, this.dropAreaWrapper);
                    this.uploadWrapper.appendChild(this.dropAreaWrapper);
                    this.setDropArea();
                };
                t.prototype.renderPreLoadFiles = function() {
                    if (this.files.length) {
                        if (this.enablePersistence && this.filesData.length) {
                            this.createFileList(this.filesData);
                            return;
                        }
                        if ((0, s.le)(this.files[0].size)) {
                            return;
                        }
                        this.isPreloadFiles = true;
                        var e = [].slice.call(this.files);
                        var t = [];
                        if (!this.multiple) {
                            this.clearData();
                            e = [
                                e[0]
                            ];
                        }
                        for(var i = 0, n = e; i < n.length; i++){
                            var r = n[i];
                            var o = {
                                name: r.name + '.' + r.type.split('.')[r.type.split('.').length - 1],
                                rawFile: '',
                                size: r.size,
                                status: this.localizedTexts('uploadSuccessMessage'),
                                type: r.type,
                                validationMessages: {
                                    minSize: '',
                                    maxSize: ''
                                },
                                statusCode: '2'
                            };
                            t.push(o);
                            this.filesData.push(o);
                        }
                        this.createFileList(t);
                        if (!this.autoUpload && this.listParent && !this.actionButtons && (!this.isForm || this.allowUpload()) && this.showFileList) {
                            this.renderActionButtons();
                        }
                        this.checkActionButtonStatus();
                        if (this.sequentialUpload) {
                            this.count = this.filesData.length - 1;
                        }
                        this.isPreloadFiles = false;
                    }
                };
                t.prototype.checkActionButtonStatus = function() {
                    if (this.actionButtons) {
                        var e = this.uploadWrapper.querySelectorAll('.' + e8).length + this.uploadWrapper.querySelectorAll('.e-upload-fails:not(.e-upload-progress)').length + this.uploadWrapper.querySelectorAll('span.' + e7).length + this.uploadWrapper.querySelectorAll('span.' + e5).length;
                        if (e > 0 && e === this.uploadWrapper.querySelectorAll('li').length) {
                            this.uploadButton.setAttribute('disabled', 'disabled');
                        } else {
                            this.uploadButton.removeAttribute('disabled');
                        }
                    }
                };
                t.prototype.setDropArea = function() {
                    var e = this.dropAreaWrapper.querySelector('.e-file-drop');
                    if (this.dropArea) {
                        this.dropZoneElement = (typeof (this.dropArea) !== 'string') ? this.dropArea : (0, s.Ys)(this.dropArea, document);
                        var t = this.element;
                        var i = false;
                        while(t.parentNode){
                            t = t.parentNode;
                            if (t === this.dropZoneElement) {
                                i = true;
                                if (!e) {
                                    this.createDropTextHint();
                                } else {
                                    e.innerHTML = this.localizedTexts('dropFilesHint');
                                }
                            }
                        }
                        if (!i && e) {
                            (0, s.Od)(e);
                        }
                    } else if (!(0, s.le)(this.uploaderOptions) && this.uploaderOptions.dropArea === undefined) {
                        this.createDropTextHint();
                        this.dropZoneElement = this.uploadWrapper;
                        this.setProperties({
                            dropArea: this.uploadWrapper
                        }, true);
                    }
                    this.bindDropEvents();
                };
                t.prototype.updateDropArea = function() {
                    if (this.dropArea) {
                        this.setDropArea();
                    } else {
                        this.dropZoneElement = null;
                        var e = this.dropAreaWrapper.querySelector('.e-file-drop');
                        if (e) {
                            (0, s.Od)(e);
                        }
                    }
                };
                t.prototype.createDropTextHint = function() {
                    var e = this.createElement('span', {
                        className: ej
                    });
                    e.innerHTML = this.localizedTexts('dropFilesHint');
                    this.dropAreaWrapper.appendChild(e);
                };
                t.prototype.updateHTMLAttrToElement = function() {
                    if (!(0, s.le)(this.htmlAttributes)) {
                        for(var e = 0, t = Object.keys(this.htmlAttributes); e < t.length; e++){
                            var i = t[e];
                            if (tl.indexOf(i) < 0) {
                                this.element.setAttribute(i, this.htmlAttributes[i]);
                            }
                        }
                    }
                };
                t.prototype.updateHTMLAttrToWrapper = function() {
                    if (!(0, s.le)(this.htmlAttributes)) {
                        for(var e = 0, t = Object.keys(this.htmlAttributes); e < t.length; e++){
                            var i = t[e];
                            if (tl.indexOf(i) > -1) {
                                if (i === 'class') {
                                    var n = (this.htmlAttributes[i].replace(/\s+/g, ' ')).trim();
                                    if (n !== '') {
                                        (0, s.cn)([
                                            this.uploadWrapper
                                        ], n.split(' '));
                                    }
                                } else if (i === 'style') {
                                    var r = this.uploadWrapper.getAttribute(i);
                                    r = !(0, s.le)(r) ? (r + this.htmlAttributes[i]) : this.htmlAttributes[i];
                                    this.uploadWrapper.setAttribute(i, r);
                                } else {
                                    this.uploadWrapper.setAttribute(i, this.htmlAttributes[i]);
                                }
                            }
                        }
                    }
                };
                t.prototype.setMultipleSelection = function() {
                    if (this.multiple && !this.element.hasAttribute('multiple')) {
                        var e = document.createAttribute('multiple');
                        e.value = 'multiple';
                        this.element.setAttributeNode(e);
                    } else if (!this.multiple) {
                        this.element.removeAttribute('multiple');
                    }
                };
                t.prototype.checkAutoUpload = function(e) {
                    if (this.autoUpload) {
                        if (this.sequentialUpload) {
                            this.sequenceUpload(e);
                        } else {
                            this.upload(e);
                        }
                        this.removeActionButtons();
                    } else if (!this.actionButtons) {
                        this.renderActionButtons();
                    }
                    this.checkActionButtonStatus();
                };
                t.prototype.sequenceUpload = function(e) {
                    if (this.filesData.length - e.length === 0 || this.filesData[(this.filesData.length - e.length - 1)].statusCode !== '1') {
                        ++this.count;
                        var t = this.showFileList ? false : true;
                        if (typeof this.filesData[this.count] === 'object') {
                            this.isFirstFileOnSelection = false;
                            this.upload(this.filesData[this.count], t);
                            if (this.filesData[this.count].statusCode === '0') {
                                this.sequenceUpload(e);
                            }
                        } else {
                            --this.count;
                        }
                    }
                };
                t.prototype.setCSSClass = function(e) {
                    var t = this.cssClass;
                    if (!(0, s.le)(this.cssClass) && this.cssClass !== '') {
                        t = (this.cssClass.replace(/\s+/g, ' ')).trim();
                    }
                    if (!(0, s.le)(this.cssClass) && t !== '') {
                        (0, s.cn)([
                            this.uploadWrapper
                        ], t.split(t.indexOf(',') > -1 ? ',' : ' '));
                    }
                    var i = e;
                    if (!(0, s.le)(e)) {
                        i = (e.replace(/\s+/g, ' ')).trim();
                    }
                    if (!(0, s.le)(e) && i !== '') {
                        (0, s.IV)([
                            this.uploadWrapper
                        ], i.split(' '));
                    }
                };
                t.prototype.wireEvents = function() {
                    s.bi.add(this.browseButton, 'click', this.browseButtonClick, this);
                    s.bi.add(this.element, 'change', this.onSelectFiles, this);
                    s.bi.add(document, 'click', this.removeFocus, this);
                    this.keyboardModule = new s.nv(this.uploadWrapper, {
                        keyAction: this.keyActionHandler.bind(this),
                        keyConfigs: this.keyConfigs,
                        eventName: 'keydown'
                    });
                    if (this.isForm) {
                        s.bi.add(this.formElement, 'reset', this.resetForm, this);
                    }
                };
                t.prototype.unWireEvents = function() {
                    s.bi.remove(this.browseButton, 'click', this.browseButtonClick);
                    s.bi.remove(this.element, 'change', this.onSelectFiles);
                    s.bi.remove(document, 'click', this.removeFocus);
                    if (this.isForm) {
                        s.bi.remove(this.formElement, 'reset', this.resetForm);
                    }
                    if (this.keyboardModule) {
                        this.keyboardModule.destroy();
                    }
                };
                t.prototype.resetForm = function() {
                    this.clearAll();
                };
                t.prototype.keyActionHandler = function(e) {
                    var t = e.target;
                    switch(e.action){
                        case 'enter':
                            if (e.target === this.clearButton) {
                                this.clearButtonClick();
                            } else if (e.target === this.uploadButton) {
                                this.uploadButtonClick();
                            } else if (e.target === this.browseButton) {
                                this.browseButtonClick();
                            } else if (t.classList.contains(ts)) {
                                var i = this.getCurrentMetaData(null, e);
                                i.file.statusCode = '4';
                                i.file.status = this.localizedTexts('pauseUpload');
                                this.abortUpload(i, false);
                            } else if (t.classList.contains(to)) {
                                this.resumeUpload(this.getCurrentMetaData(null, e), e);
                            } else if (t.classList.contains(e0)) {
                                var i = this.getCurrentMetaData(null, e);
                                if (!(0, s.le)(i)) {
                                    i.file.statusCode = '1';
                                    i.file.status = this.localizedTexts('readyToUploadMessage');
                                    this.chunkUpload(i.file);
                                } else {
                                    var n = e.target.parentElement;
                                    var r = this.filesData[this.fileList.indexOf(n)];
                                    this.retry(r);
                                }
                            } else {
                                this.removeFiles(e);
                                if (!t.classList.contains(eQ)) {
                                    this.browseButton.focus();
                                }
                            }
                            e.preventDefault();
                            e.stopPropagation();
                            break;
                    }
                };
                t.prototype.getCurrentMetaData = function(e, t) {
                    var i;
                    var n;
                    if ((0, s.le)(e)) {
                        var r = t.target.parentElement;
                        i = this.filesData[this.fileList.indexOf(r)];
                    } else {
                        i = e;
                    }
                    for(var o = 0; o < this.uploadMetaData.length; o++){
                        if (this.uploadMetaData[o].file.name === i.name) {
                            n = this.uploadMetaData[o];
                        }
                    }
                    return n;
                };
                t.prototype.removeFocus = function() {
                    if (this.uploadWrapper && this.listParent && this.listParent.querySelector('.' + tn)) {
                        document.activeElement.blur();
                        this.listParent.querySelector('.' + tn).classList.remove(tn);
                    }
                };
                t.prototype.browseButtonClick = function() {
                    this.element.click();
                };
                t.prototype.uploadButtonClick = function() {
                    if (this.sequentialUpload) {
                        this.sequenceUpload(this.filesData);
                    } else {
                        this.upload(this.filesData);
                    }
                };
                t.prototype.clearButtonClick = function() {
                    this.clearAll();
                    if (this.sequentialUpload) {
                        this.count = -1;
                    }
                    this.actionCompleteCount = 0;
                };
                t.prototype.bindDropEvents = function() {
                    if (this.dropZoneElement) {
                        s.bi.add(this.dropZoneElement, 'drop', this.dropElement, this);
                        s.bi.add(this.dropZoneElement, 'dragover', this.dragHover, this);
                        s.bi.add(this.dropZoneElement, 'dragleave', this.onDragLeave, this);
                        s.bi.add(this.dropZoneElement, 'paste', this.onPasteFile, this);
                        s.bi.add(this.dropZoneElement, 'dragenter', this.onDragEnter, this);
                    }
                };
                t.prototype.unBindDropEvents = function() {
                    if (this.dropZoneElement) {
                        s.bi.remove(this.dropZoneElement, 'drop', this.dropElement);
                        s.bi.remove(this.dropZoneElement, 'dragover', this.dragHover);
                        s.bi.remove(this.dropZoneElement, 'dragleave', this.onDragLeave);
                        s.bi.remove(this.dropZoneElement, 'dragenter', this.onDragEnter);
                    }
                };
                t.prototype.onDragEnter = function(e) {
                    if (!this.enabled) {
                        return;
                    }
                    this.dropZoneElement.classList.add(e1);
                    this.dragCounter = this.dragCounter + 1;
                    e.preventDefault();
                    e.stopPropagation();
                };
                t.prototype.onDragLeave = function() {
                    if (!this.enabled) {
                        return;
                    }
                    this.dragCounter = this.dragCounter - 1;
                    if (!this.dragCounter) {
                        this.dropZoneElement.classList.remove(e1);
                    }
                };
                t.prototype.dragHover = function(e) {
                    if (!this.enabled) {
                        return;
                    }
                    if (this.dropEffect !== 'Default') {
                        e.dataTransfer.dropEffect = this.dropEffect.toLowerCase();
                    }
                    e.preventDefault();
                    e.stopPropagation();
                };
                t.prototype.dropElement = function(e) {
                    this.dragCounter = 0;
                    this.dropZoneElement.classList.remove(e1);
                    this.onSelectFiles(e);
                    e.preventDefault();
                    e.stopPropagation();
                };
                t.prototype.onPasteFile = function(e) {
                    var t = e.clipboardData.items;
                    if (e.type == 'paste' && this.browserName !== 'msie' && this.browserName !== 'edge' && this.browserName !== 'safari') {
                        this.element.files = e.clipboardData.files;
                    }
                    if (t.length !== 1) {
                        return;
                    }
                    var i = [].slice.call(t)[0];
                    if ((i.kind === 'file') && i.type.match('^image/')) {
                        this.renderSelectedFiles(e, [
                            i.getAsFile()
                        ], false, true);
                    }
                };
                t.prototype.getSelectedFiles = function(e) {
                    var t = [];
                    var i = this.fileList[e];
                    var n = this.getFilesData();
                    var r = +i.getAttribute('data-files-count');
                    var s = 0;
                    for(var o = 0; o < e; o++){
                        s += (+this.fileList[o].getAttribute('data-files-count'));
                    }
                    for(var a = s; a < (s + r); a++){
                        t.push(n[a]);
                    }
                    return t;
                };
                t.prototype.removeFiles = function(e) {
                    if (!this.enabled) {
                        return;
                    }
                    var t = e.target.parentElement;
                    var i = this.fileList.indexOf(t);
                    var n = this.fileList[i];
                    var r = this.isFormUpload();
                    var o = r ? this.getSelectedFiles(i) : this.getFilesInArray(this.filesData[i]);
                    if ((0, s.le)(o)) {
                        return;
                    }
                    if (e.target.classList.contains(eQ) && !r) {
                        o[0].statusCode = '5';
                        if (!(0, s.le)(n)) {
                            var a = n.querySelector('.' + eQ);
                            Y({
                                target: a,
                                width: '20px'
                            });
                            eD(a);
                        }
                        if (this.sequentialUpload) {
                            this.uploadSequential();
                        }
                        if (!(n.classList.contains(ta))) {
                            this.checkActionComplete(true);
                        }
                    } else if (!(0, s.oq)(e.target, '.' + e$)) {
                        this.remove(o, false, false, true, e);
                    }
                    this.element.value = '';
                    this.checkActionButtonStatus();
                };
                t.prototype.removeFilesData = function(e, t) {
                    var i;
                    if (t) {
                        if (!this.showFileList) {
                            i = this.filesData.indexOf(e);
                            this.filesData.splice(i, 1);
                        }
                        return;
                    }
                    var n = this.getLiElement(e);
                    if ((0, s.le)(n)) {
                        return;
                    }
                    (0, s.og)(n);
                    i = this.fileList.indexOf(n);
                    this.fileList.splice(i, 1);
                    this.filesData.splice(i, 1);
                    if (this.fileList.length === 0 && !(0, s.le)(this.listParent)) {
                        (0, s.og)(this.listParent);
                        this.listParent = null;
                        this.removeActionButtons();
                    }
                    if (this.sequentialUpload) {
                        if (i <= this.count) {
                            --this.count;
                        }
                    }
                };
                t.prototype.removeUploadedFile = function(e, t, i, n) {
                    var r = this;
                    var o = e;
                    var a = new s.tk(this.asyncSettings.removeUrl, 'POST', true, null);
                    a.emitError = false;
                    var l = new FormData();
                    a.beforeSend = function(n) {
                        t.currentRequest = a.httpRequest;
                        if (!i) {
                            r.trigger('removing', t, function(t) {
                                if (t.cancel) {
                                    n.cancel = true;
                                } else {
                                    r.removingEventCallback(t, l, o, e);
                                }
                            });
                        } else {
                            r.removingEventCallback(t, l, o, e);
                        }
                    };
                    a.onLoad = function(e) {
                        r.removeCompleted(e, o, n);
                        return {};
                    };
                    a.onError = function(e) {
                        r.removeFailed(e, o, n);
                        return {};
                    };
                    a.send(l);
                };
                t.prototype.removingEventCallback = function(e, t, i, n) {
                    var r = this.element.getAttribute('name');
                    var o = this.getLiElement(n);
                    if (!(0, s.le)(o) && (!(0, s.le)(o.querySelector('.' + eJ)) || !(0, s.le)(o.querySelector('.' + eK)))) {
                        var a = o.querySelector('.' + eJ) ? o.querySelector('.' + eJ) : o.querySelector('.' + eK);
                        Y({
                            target: a,
                            width: '20px'
                        });
                        eD(a);
                    }
                    if (e.postRawFile && !(0, s.le)(i.rawFile) && i.rawFile !== '') {
                        t.append(r, i.rawFile, i.name);
                    } else {
                        t.append(r, i.name);
                    }
                    this.updateFormData(t, e.customFormData);
                };
                t.prototype.updateFormData = function(e, t) {
                    if (t.length > 0 && t[0]) {
                        var i = function(i) {
                            var n = t[i];
                            var r = Object.keys(n).map(function(e) {
                                return n[e];
                            });
                            e.append(Object.keys(n)[0], r);
                        };
                        for(var n = 0; n < t.length; n++){
                            i(n);
                        }
                    }
                };
                t.prototype.updateCustomheader = function(e, t) {
                    if (t.length > 0 && t[0]) {
                        var i = function(i) {
                            var n = t[i];
                            var r = Object.keys(n).map(function(e) {
                                return n[e];
                            });
                            e.setRequestHeader(Object.keys(n)[0], r);
                        };
                        for(var n = 0; n < t.length; n++){
                            i(n);
                        }
                    }
                };
                t.prototype.removeCompleted = function(e, t, i) {
                    var n = e && e.currentTarget ? this.getResponse(e) : null;
                    var r = e.target;
                    if (r.readyState === 4 && r.status >= 200 && r.status <= 299) {
                        var s = {
                            e: e,
                            response: n,
                            operation: 'remove',
                            file: this.updateStatus(t, this.localizedTexts('removedSuccessMessage'), '2')
                        };
                        this.trigger('success', s);
                        this.removeFilesData(t, i);
                        var o = this.uploadedFilesData.indexOf(t);
                        this.uploadedFilesData.splice(o, 1);
                        this.trigger('change', {
                            files: this.uploadedFilesData
                        });
                    } else {
                        this.removeFailed(e, t, i);
                    }
                };
                t.prototype.removeFailed = function(e, t, i) {
                    var n = e && e.currentTarget ? this.getResponse(e) : null;
                    var r = {
                        e: e,
                        response: n,
                        operation: 'remove',
                        file: this.updateStatus(t, this.localizedTexts('removedFailedMessage'), '0')
                    };
                    if (!i) {
                        var o = this.filesData.indexOf(t);
                        var a = this.fileList[o];
                        if (a) {
                            a.classList.remove(e7);
                            a.classList.add(e9);
                            var l = a.querySelector('.' + e_);
                            if (l) {
                                l.classList.remove(e7);
                                l.classList.add(e9);
                            }
                        }
                        this.checkActionButtonStatus();
                    }
                    this.trigger('failure', r);
                    var h = this.getLiElement(t);
                    if (!(0, s.le)(h) && !(0, s.le)(h.querySelector('.' + eJ))) {
                        var c = h.querySelector('.' + eJ);
                        eA(c);
                        (0, s.og)(h.querySelector('.e-spinner-pane'));
                    }
                };
                t.prototype.getFilesFromFolder = function(e) {
                    this.filesEntries = [];
                    var t = this.multiple ? e.dataTransfer.items : [
                        e.dataTransfer.items[0]
                    ];
                    var i = this.checkDirectoryUpload(t);
                    if (!i) {
                        return;
                    }
                    var n = function(i) {
                        var n = t[i].webkitGetAsEntry();
                        if (n.isFile) {
                            var s = [];
                            (n).file(function(e) {
                                var t = n.fullPath;
                                s.push({
                                    'path': t,
                                    'file': e
                                });
                            });
                            r.renderSelectedFiles(e, s, true);
                        } else if (n.isDirectory) {
                            r.traverseFileTree(n, e);
                        }
                    };
                    var r = this;
                    for(var s = 0; s < t.length; s++){
                        n(s);
                    }
                };
                t.prototype.checkDirectoryUpload = function(e) {
                    for(var t = 0; e && t < e.length; t++){
                        var i = e[t].webkitGetAsEntry();
                        if (i.isDirectory) {
                            return true;
                        }
                    }
                    return false;
                };
                t.prototype.traverseFileTree = function(e, t) {
                    if (e.isFile) {
                        this.filesEntries.push(e);
                    } else if (e.isDirectory) {
                        var i = e.createReader();
                        this.readFileFromDirectory(i, t);
                    }
                };
                t.prototype.readFileFromDirectory = function(e, t) {
                    var i = this;
                    e.readEntries(function(n) {
                        for(var r = 0; r < n.length; r++){
                            i.traverseFileTree(n[r], t);
                        }
                        i.pushFilesEntries(t);
                        if (n.length) {
                            i.readFileFromDirectory(e);
                        }
                    });
                };
                t.prototype.pushFilesEntries = function(e) {
                    var t = this;
                    var i = [];
                    var n = function(n) {
                        r.filesEntries[n].file(function(r) {
                            if (t.filesEntries.length) {
                                var s = t.filesEntries[n].fullPath;
                                i.push({
                                    'path': s,
                                    'file': r
                                });
                                if (n === t.filesEntries.length - 1) {
                                    t.filesEntries = [];
                                    t.renderSelectedFiles(e, i, true);
                                }
                            }
                        });
                    };
                    var r = this;
                    for(var s = 0; s < this.filesEntries.length; s++){
                        n(s);
                    }
                };
                t.prototype.onSelectFiles = function(e) {
                    if (!this.enabled) {
                        return;
                    }
                    var t;
                    if (e.type === 'drop') {
                        if (this.directoryUpload) {
                            this.getFilesFromFolder(e);
                        } else {
                            var i = this.sortFilesList = e.dataTransfer.files;
                            if (this.browserName !== 'msie' && this.browserName !== 'edge' && this.browserName !== 'safari') {
                                this.element.files = i;
                            }
                            if (i.length > 0) {
                                t = this.multiple ? this.sortFileList(i) : [
                                    i[0]
                                ];
                                this.renderSelectedFiles(e, t);
                            }
                        }
                    } else {
                        t = [].slice.call(e.target.files);
                        this.renderSelectedFiles(e, t);
                    }
                    if (this.isAngular) {
                        e.stopPropagation();
                    }
                };
                t.prototype.getBase64 = function(e) {
                    return new Promise(function(t, i) {
                        var n = new FileReader();
                        n.readAsDataURL(e);
                        n.onload = function() {
                            return t(n.result);
                        };
                        n.onerror = function(e) {
                            return i(e);
                        };
                    });
                };
                t.prototype.renderSelectedFiles = function(e, t, i, n) {
                    var r = this;
                    this.base64String = [];
                    var s = {
                        event: e,
                        cancel: false,
                        filesData: [],
                        isModified: false,
                        modifiedFilesData: [],
                        progressInterval: '',
                        isCanceled: false,
                        currentRequest: null,
                        customFormData: null
                    };
                    if (t.length < 1) {
                        s.isCanceled = true;
                        this.trigger('selected', s);
                        return;
                    }
                    this.flag = true;
                    var o = [];
                    if (!this.multiple) {
                        this.clearData(true);
                        t = [
                            t[0]
                        ];
                    }
                    for(var a = 0; a < t.length; a++){
                        var l = i ? t[a].file : t[a];
                        this.updateInitialFileDetails(e, t, l, a, o, i, n);
                    }
                    s.filesData = o;
                    if (this.allowedExtensions.indexOf('*') > -1) {
                        this.allTypes = true;
                    }
                    if (!this.allTypes) {
                        o = this.checkExtension(o);
                    }
                    this.trigger('selected', s, function(e) {
                        r._internalRenderSelect(e, o);
                    });
                };
                t.prototype.updateInitialFileDetails = function(e, t, i, n, r, o, a) {
                    var l = o ? t[n].path.substring(1, t[n].path.length) : a ? (0, s.QI)(i.name.substring(0, i.name.lastIndexOf('.'))) + '.' + this.getFileType(i.name) : this.directoryUpload ? t[n].webkitRelativePath : i.name;
                    var h = {
                        name: l,
                        rawFile: i,
                        size: i.size,
                        status: this.localizedTexts('readyToUploadMessage'),
                        type: this.getFileType(i.name),
                        validationMessages: this.validatedFileSize(i.size),
                        statusCode: '1',
                        id: (0, s.QI)(i.name.substring(0, i.name.lastIndexOf('.'))) + '.' + this.getFileType(i.name)
                    };
                    if (a) {
                        h.fileSource = 'paste';
                    }
                    h.status = h.validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : h.validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : h.status;
                    if (h.validationMessages.minSize !== '' || h.validationMessages.maxSize !== '') {
                        h.statusCode = '0';
                    }
                    r.push(h);
                };
                t.prototype._internalRenderSelect = function(e, t) {
                    if (!e.cancel) {
                        this.selectedFiles = this.selectedFiles.concat(t);
                        this.btnTabIndex = this.disableKeyboardNavigation ? '-1' : '0';
                        if (this.showFileList) {
                            if (e.isModified && e.modifiedFilesData.length > 0) {
                                for(var i = 0; i < e.modifiedFilesData.length; i++){
                                    for(var n = 0; n < t.length; n++){
                                        if (e.modifiedFilesData[i].id === t[n].id) {
                                            e.modifiedFilesData[i].rawFile = t[n].rawFile;
                                        }
                                    }
                                }
                                var r = this.allTypes ? e.modifiedFilesData : this.checkExtension(e.modifiedFilesData);
                                this.updateSortedFileList(r);
                                this.filesData = r;
                                if (!this.isForm || this.allowUpload()) {
                                    this.checkAutoUpload(r);
                                }
                            } else {
                                this.createFileList(t, true);
                                this.filesData = this.filesData.concat(t);
                                if (!this.isForm || this.allowUpload()) {
                                    this.checkAutoUpload(t);
                                }
                            }
                            if (!(0, s.le)(e.progressInterval) && e.progressInterval !== '') {
                                this.progressInterval = e.progressInterval;
                            }
                        } else {
                            this.filesData = this.filesData.concat(t);
                            if (this.autoUpload) {
                                this.upload(this.filesData, true);
                            }
                        }
                        this.raiseActionComplete();
                        this.isFirstFileOnSelection = true;
                    }
                };
                t.prototype.allowUpload = function() {
                    var e = false;
                    if (this.isForm && (!(0, s.le)(this.asyncSettings.saveUrl) && this.asyncSettings.saveUrl !== '')) {
                        e = true;
                    }
                    return e;
                };
                t.prototype.isFormUpload = function() {
                    var e = false;
                    if (this.isForm && (((0, s.le)(this.asyncSettings.saveUrl) || this.asyncSettings.saveUrl === '') && ((0, s.le)(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === ''))) {
                        e = true;
                    }
                    return e;
                };
                t.prototype.clearData = function(e) {
                    if (!(0, s.le)(this.listParent)) {
                        (0, s.og)(this.listParent);
                        this.listParent = null;
                    }
                    if (this.browserName !== 'msie' && !e) {
                        this.element.value = '';
                    }
                    this.fileList = [];
                    this.filesData = [];
                    this.removeActionButtons();
                };
                t.prototype.updateSortedFileList = function(e) {
                    var t = this.createElement('div', {
                        id: 'clonewrapper'
                    });
                    var i = -1;
                    var n;
                    if (this.listParent) {
                        for(var r = 0; r < this.listParent.querySelectorAll('li').length; r++){
                            var o = this.listParent.querySelectorAll('li')[r];
                            t.appendChild(o.cloneNode(true));
                        }
                        n = this.listParent.querySelectorAll('li');
                        for(var a = 0, l = n; a < l.length; a++){
                            var h = l[a];
                            (0, s.og)(h);
                        }
                        this.removeActionButtons();
                        var c = [].slice.call(t.childNodes);
                        (0, s.og)(this.listParent);
                        this.listParent = null;
                        this.fileList = [];
                        this.createParentUL();
                        for(var d = 0; d < e.length; d++){
                            for(var p = 0; p < this.filesData.length; p++){
                                if (this.filesData[p].name === e[d].name) {
                                    this.listParent.appendChild(c[p]);
                                    s.bi.add(c[p].querySelector('.e-icons'), 'click', this.removeFiles, this);
                                    this.fileList.push(c[p]);
                                    i = d;
                                }
                            }
                            if (i !== d) {
                                this.createFileList([
                                    e[d]
                                ]);
                            }
                        }
                    } else {
                        this.createFileList(e);
                    }
                };
                t.prototype.isBlank = function(e) {
                    return (!e || /^\s*$/.test(e));
                };
                t.prototype.checkExtension = function(e) {
                    var t = e;
                    if (!this.isBlank(this.allowedExtensions)) {
                        var i = [];
                        var n = this.allowedExtensions.split(',');
                        for(var r = 0, s = n; r < s.length; r++){
                            var o = s[r];
                            i.push(o.trim().toLocaleLowerCase());
                        }
                        for(var a = 0; a < e.length; a++){
                            if (i.indexOf(('.' + e[a].type).toLocaleLowerCase()) === -1) {
                                e[a].status = this.localizedTexts('invalidFileType');
                                e[a].statusCode = '0';
                            }
                        }
                    }
                    return t;
                };
                t.prototype.validatedFileSize = function(e) {
                    var t = '';
                    var i = '';
                    if (e < this.minFileSize) {
                        t = this.localizedTexts('invalidMinFileSize');
                    } else if (e > this.maxFileSize) {
                        i = this.localizedTexts('invalidMaxFileSize');
                    } else {
                        t = '';
                        i = '';
                    }
                    var n = {
                        minSize: t,
                        maxSize: i
                    };
                    return n;
                };
                t.prototype.isPreLoadFile = function(e) {
                    var t = false;
                    for(var i = 0; i < this.files.length; i++){
                        if (this.files[i].name === e.name.slice(0, e.name.lastIndexOf('.')) && this.files[i].type === e.type) {
                            t = true;
                        }
                    }
                    return t;
                };
                t.prototype.createCustomfileList = function(e) {
                    this.createParentUL();
                    for(var t = 0, i = e; t < i.length; t++){
                        var n = i[t];
                        var r = this.createElement('li', {
                            className: eV,
                            attrs: {
                                'data-file-name': n.name
                            }
                        });
                        this.uploadTemplateFn = this.templateComplier(this.template);
                        var o = this.uploadTemplateFn(n, this, 'template', this.element.id + 'Template', this.isStringTemplate, null, r);
                        if (o) {
                            var a = [].slice.call(o);
                            (0, s.R3)(a, r);
                        }
                        var l = e.indexOf(n);
                        var h = {
                            element: r,
                            fileInfo: n,
                            index: l,
                            isPreload: this.isPreLoadFile(n)
                        };
                        var c = {
                            element: r,
                            fileInfo: n,
                            index: l,
                            isPreload: this.isPreLoadFile(n)
                        };
                        this.trigger('rendering', h);
                        this.trigger('fileListRendering', c);
                        this.listParent.appendChild(r);
                        this.fileList.push(r);
                    }
                    this.renderReactTemplates();
                };
                t.prototype.createParentUL = function() {
                    if ((0, s.le)(this.listParent)) {
                        this.listParent = this.createElement('ul', {
                            className: eq
                        });
                        this.uploadWrapper.appendChild(this.listParent);
                    }
                };
                t.prototype.formFileList = function(e, t) {
                    var i = this.createElement('li', {
                        className: eV
                    });
                    i.setAttribute('data-files-count', e.length + '');
                    var n = this.createElement('span', {
                        className: e6
                    });
                    var r;
                    for(var o = 0, a = e; o < a.length; o++){
                        var l = a[o];
                        var h = this.createElement('span', {
                            className: eY
                        });
                        h.innerHTML = this.getFileNameOnly(l.name);
                        var c = this.createElement('span', {
                            className: eX
                        });
                        var d = this.getFileType(l.name);
                        c.innerHTML = '.' + d;
                        if (!d) {
                            c.classList.add('e-hidden');
                        }
                        if (!this.enableRtl) {
                            n.appendChild(h);
                            n.appendChild(c);
                        } else {
                            var p = this.createElement('span', {
                                className: ti
                            });
                            p.appendChild(c);
                            p.appendChild(h);
                            n.appendChild(p);
                        }
                        this.truncateName(h);
                        r = this.formValidateFileInfo(l, i);
                    }
                    i.appendChild(n);
                    this.setListToFileInfo(e, i);
                    var u = this.listParent.querySelectorAll('li').length;
                    var f = this.createElement('span');
                    if (i.classList.contains(td)) {
                        f.classList.add(e_);
                        f.classList.add(td);
                        f.innerText = e.length > 1 ? this.localizedTexts('invalidFileSelection') : r;
                    } else {
                        f.classList.add(e.length > 1 ? tp : eG);
                        f.innerText = e.length > 1 ? this.localizedTexts('totalFiles') + ': ' + e.length + ' , ' + this.localizedTexts('size') + ': ' + this.bytesToSize(this.getFileSize(e)) : this.bytesToSize(e[0].size);
                        this.createFormInput(e);
                    }
                    n.appendChild(f);
                    if ((0, s.le)(i.querySelector('.e-icons'))) {
                        var m = this.createElement('span', {
                            className: 'e-icons',
                            attrs: {
                                'tabindex': this.btnTabIndex
                            }
                        });
                        if (this.browserName === 'msie') {
                            m.classList.add('e-msie');
                        }
                        m.setAttribute('title', this.localizedTexts('remove'));
                        i.appendChild(n);
                        i.appendChild(m);
                        s.bi.add(m, 'click', this.removeFiles, this);
                        m.classList.add(eK);
                    }
                    var v = {
                        element: i,
                        fileInfo: this.mergeFileInfo(e, i),
                        index: u,
                        isPreload: this.isPreLoadFile(this.mergeFileInfo(e, i))
                    };
                    var g = {
                        element: i,
                        fileInfo: this.mergeFileInfo(e, i),
                        index: u,
                        isPreload: this.isPreLoadFile(this.mergeFileInfo(e, i))
                    };
                    this.trigger('rendering', v);
                    this.trigger('fileListRendering', g);
                    this.listParent.appendChild(i);
                    this.fileList.push(i);
                };
                t.prototype.formValidateFileInfo = function(e, t) {
                    var i = e.status;
                    var n = this.validatedFileSize(e.size);
                    if (n.minSize !== '' || n.maxSize !== '') {
                        this.addInvalidClass(t);
                        i = n.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : n.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : i;
                    }
                    var r = this.checkExtension(this.getFilesInArray(e))[0].status;
                    if (r === this.localizedTexts('invalidFileType')) {
                        this.addInvalidClass(t);
                        i = r;
                    }
                    return i;
                };
                t.prototype.addInvalidClass = function(e) {
                    e.classList.add(td);
                };
                t.prototype.createFormInput = function(e) {
                    if (this.browserName !== 'safari') {
                        var t = this.element.cloneNode(true);
                        t.classList.add(tc);
                        for(var i = 0, n = e; i < n.length; i++){
                            var r = n[i];
                            r.input = t;
                        }
                        t.setAttribute('name', this.uploaderName);
                        this.uploadWrapper.querySelector('.' + eF).appendChild(t);
                        if (this.browserName !== 'msie' && this.browserName !== 'edge') {
                            this.element.value = '';
                        }
                    }
                };
                t.prototype.getFileSize = function(e) {
                    var t = 0;
                    for(var i = 0, n = e; i < n.length; i++){
                        var r = n[i];
                        t += r.size;
                    }
                    return t;
                };
                t.prototype.mergeFileInfo = function(e, t) {
                    var i = {
                        name: '',
                        rawFile: '',
                        size: 0,
                        status: '',
                        type: '',
                        validationMessages: {
                            minSize: '',
                            maxSize: ''
                        },
                        statusCode: '1',
                        list: t
                    };
                    var n = [];
                    var r = '';
                    for(var s = 0, o = e; s < o.length; s++){
                        var a = o[s];
                        n.push(a.name);
                        r = a.type;
                    }
                    i.name = n.join(', ');
                    i.size = this.getFileSize(e);
                    i.type = r;
                    i.status = this.statusForFormUpload(e, t);
                    return i;
                };
                t.prototype.statusForFormUpload = function(e, t) {
                    var i = true;
                    var n;
                    for(var r = 0, s = e; r < s.length; r++){
                        var o = s[r];
                        n = o.status;
                        var a = this.validatedFileSize(o.size);
                        if (a.minSize !== '' || a.maxSize !== '') {
                            i = false;
                            n = a.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : a.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : n;
                        }
                        var l = this.checkExtension(this.getFilesInArray(o))[0].status;
                        if (l === this.localizedTexts('invalidFileType')) {
                            i = false;
                            n = l;
                        }
                    }
                    if (!i) {
                        t.classList.add(td);
                        n = e.length > 1 ? this.localizedTexts('invalidFileSelection') : n;
                    } else {
                        n = this.localizedTexts('totalFiles') + ': ' + e.length + ' , ' + this.localizedTexts('size') + ': ' + this.bytesToSize(this.getFileSize(e));
                    }
                    return n;
                };
                t.prototype.formCustomFileList = function(e, t) {
                    this.createParentUL();
                    var i = this.createElement('li', {
                        className: eV
                    });
                    i.setAttribute('data-files-count', e.length + '');
                    this.setListToFileInfo(e, i);
                    var n = this.mergeFileInfo(e, i);
                    i.setAttribute('data-file-name', n.name);
                    this.uploadTemplateFn = this.templateComplier(this.template);
                    var r = this.uploadTemplateFn(n, this, 'template', this.element.id + 'Template', this.isStringTemplate, null, i);
                    if (r) {
                        var o = [].slice.call(r);
                        (0, s.R3)(o, i);
                    }
                    var a = this.listParent.querySelectorAll('li').length;
                    if (!i.classList.contains(td)) {
                        this.createFormInput(e);
                    }
                    var l = {
                        element: i,
                        fileInfo: n,
                        index: a,
                        isPreload: this.isPreLoadFile(n)
                    };
                    var h = {
                        element: i,
                        fileInfo: n,
                        index: a,
                        isPreload: this.isPreLoadFile(n)
                    };
                    this.trigger('rendering', l);
                    this.trigger('fileListRendering', h);
                    this.listParent.appendChild(i);
                    this.fileList.push(i);
                    this.renderReactTemplates();
                };
                t.prototype.createFileList = function(e, t) {
                    this.createParentUL();
                    if (this.template !== '' && !(0, s.le)(this.template)) {
                        if (this.isFormUpload()) {
                            this.uploadWrapper.classList.add(th);
                            this.formCustomFileList(e, this.element.files);
                        } else {
                            this.createCustomfileList(e);
                        }
                    } else if (this.isFormUpload()) {
                        this.uploadWrapper.classList.add(th);
                        this.formFileList(e, this.element.files);
                    } else {
                        for(var i = 0, n = e; i < n.length; i++){
                            var r = n[i];
                            var o = this.createElement('li', {
                                className: eV,
                                attrs: {
                                    'data-file-name': r.name,
                                    'data-files-count': '1'
                                }
                            });
                            var a = this.createElement('span', {
                                className: e6
                            });
                            var l = this.createElement('span', {
                                className: eY,
                                attrs: {
                                    'title': r.name
                                }
                            });
                            l.innerHTML = this.getFileNameOnly(r.name);
                            var h = this.createElement('span', {
                                className: eX
                            });
                            var c = this.getFileType(r.name);
                            h.innerHTML = '.' + c;
                            if (!c) {
                                h.classList.add('e-hidden');
                            }
                            if (!this.enableRtl) {
                                a.appendChild(l);
                                a.appendChild(h);
                            } else {
                                var d = this.createElement('span', {
                                    className: ti
                                });
                                d.appendChild(h);
                                d.appendChild(l);
                                a.appendChild(d);
                            }
                            var p = this.createElement('span', {
                                className: eG
                            });
                            p.innerHTML = this.bytesToSize(r.size);
                            a.appendChild(p);
                            var u = this.createElement('span', {
                                className: e_
                            });
                            a.appendChild(u);
                            u.innerHTML = r.status;
                            o.appendChild(a);
                            var f = this.createElement('span', {
                                className: ' e-icons',
                                attrs: {
                                    'tabindex': this.btnTabIndex
                                }
                            });
                            if (this.browserName === 'msie') {
                                f.classList.add('e-msie');
                            }
                            f.setAttribute('title', this.localizedTexts('remove'));
                            o.appendChild(f);
                            s.bi.add(f, 'click', this.removeFiles, this);
                            if (r.statusCode === '2') {
                                u.classList.add(e7);
                                f.classList.add(eJ);
                                f.setAttribute('title', this.localizedTexts('delete'));
                            } else if (r.statusCode !== '1') {
                                u.classList.remove(e7);
                                u.classList.add(e8);
                            }
                            if (this.autoUpload && r.statusCode === '1' && this.asyncSettings.saveUrl !== '') {
                                u.innerHTML = '';
                            }
                            if (!f.classList.contains(eJ)) {
                                f.classList.add(eK);
                            }
                            var m = e.indexOf(r);
                            var v = {
                                element: o,
                                fileInfo: r,
                                index: m,
                                isPreload: this.isPreLoadFile(r)
                            };
                            var g = {
                                element: o,
                                fileInfo: r,
                                index: m,
                                isPreload: this.isPreLoadFile(r)
                            };
                            this.trigger('rendering', v);
                            this.trigger('fileListRendering', g);
                            this.listParent.appendChild(o);
                            this.fileList.push(o);
                            this.truncateName(l);
                            var b = this.flag;
                            if (this.isPreLoadFile(r)) {
                                this.flag = false;
                                this.checkActionComplete(true);
                                this.flag = b;
                            }
                        }
                    }
                };
                t.prototype.getSlicedName = function(e) {
                    var t = e.textContent;
                    e.dataset.tail = t.slice(t.length - 10);
                };
                t.prototype.setListToFileInfo = function(e, t) {
                    for(var i = 0, n = e; i < n.length; i++){
                        var r = n[i];
                        r.list = t;
                    }
                };
                t.prototype.truncateName = function(e) {
                    var t = e;
                    if (this.browserName !== 'edge' && t.offsetWidth < t.scrollWidth) {
                        this.getSlicedName(t);
                    } else if (t.offsetWidth + 1 < t.scrollWidth) {
                        this.getSlicedName(t);
                    }
                };
                t.prototype.getFileType = function(e) {
                    var t;
                    var i = e.lastIndexOf('.');
                    if (i >= 0) {
                        t = e.substring(i + 1);
                    }
                    return t ? t : '';
                };
                t.prototype.getFileNameOnly = function(e) {
                    var t = this.getFileType(e);
                    var i = e.split('.' + t);
                    return t = i[0];
                };
                t.prototype.setInitialAttributes = function() {
                    if (this.initialAttr.accept) {
                        this.element.setAttribute('accept', this.initialAttr.accept);
                    }
                    if (this.initialAttr.disabled) {
                        this.element.setAttribute('disabled', 'disabled');
                    }
                    if (this.initialAttr.multiple) {
                        var e = document.createAttribute('multiple');
                        this.element.setAttributeNode(e);
                    }
                };
                t.prototype.filterfileList = function(e) {
                    var t = [];
                    var i;
                    for(var n = 0; n < e.length; n++){
                        i = this.getLiElement(e[n]);
                        if (!i.classList.contains(e7)) {
                            t.push(e[n]);
                        }
                    }
                    return t;
                };
                t.prototype.updateStatus = function(e, t, i, n) {
                    if (n === void 0) {
                        n = true;
                    }
                    if (!(t === '' || (0, s.le)(t)) && !(i === '' || (0, s.le)(i))) {
                        e.status = t;
                        e.statusCode = i;
                    }
                    if (n) {
                        var r = this.getLiElement(e);
                        if (!(0, s.le)(r)) {
                            if (!(0, s.le)(r.querySelector('.' + e_)) && !((t === '' || (0, s.le)(t)))) {
                                r.querySelector('.' + e_).textContent = t;
                            }
                        }
                    }
                    return e;
                };
                t.prototype.getLiElement = function(e) {
                    var t;
                    for(var i = 0; i < this.filesData.length; i++){
                        if (!(0, s.le)(e) && ((!(0, s.le)(this.filesData[i].id) && !(0, s.le)(e.id)) ? (this.filesData[i].name === e.name && this.filesData[i].id === e.id) : this.filesData[i].name === e.name)) {
                            t = i;
                        }
                    }
                    return this.fileList[t];
                };
                t.prototype.createProgressBar = function(e) {
                    var t = this.createElement('span', {
                        className: e3
                    });
                    var i = this.createElement('progressbar', {
                        className: e2,
                        attrs: {
                            value: '0',
                            max: '100'
                        }
                    });
                    var n = this.createElement('span', {
                        className: tr
                    });
                    i.setAttribute('style', 'width: 0%');
                    var r = this.createElement('span', {
                        className: e4
                    });
                    r.textContent = '0%';
                    n.appendChild(i);
                    t.appendChild(n);
                    t.appendChild(r);
                    e.querySelector('.' + e6).appendChild(t);
                };
                t.prototype.updateProgressbar = function(e, t) {
                    if (!isNaN(Math.round((e.loaded / e.total) * 100)) && !(0, s.le)(t.querySelector('.' + e2))) {
                        if (!(0, s.le)(this.progressInterval) && this.progressInterval !== '') {
                            var i = (Math.round((e.loaded / e.total) * 100)) % parseInt(this.progressInterval, 10);
                            if (i === 0 || i === 100) {
                                this.changeProgressValue(t, Math.round((e.loaded / e.total) * 100).toString() + '%');
                            }
                        } else {
                            this.changeProgressValue(t, Math.round((e.loaded / e.total) * 100).toString() + '%');
                        }
                    }
                };
                t.prototype.changeProgressValue = function(e, t) {
                    e.querySelector('.' + e2).setAttribute('style', 'width:' + t);
                    e.querySelector('.' + e4).textContent = t;
                };
                t.prototype.uploadInProgress = function(e, t, i, n) {
                    var r = this.getLiElement(t);
                    if ((0, s.le)(r) && (!i)) {
                        return;
                    }
                    if (!(0, s.le)(r)) {
                        if (t.statusCode === '5') {
                            this.cancelUploadingFile(t, e, n, r);
                        }
                        if (!(r.querySelectorAll('.' + e3).length > 0) && r.querySelector('.' + e_)) {
                            r.querySelector('.' + e_).classList.add(e5);
                            this.createProgressBar(r);
                            this.updateProgressBarClasses(r, e5);
                            r.querySelector('.' + e_).classList.remove(e9);
                        }
                        this.updateProgressbar(e, r);
                        var o = r.querySelector('.' + eK);
                        if (!(0, s.le)(o)) {
                            o.classList.add(eQ, e5);
                            o.setAttribute('title', this.localizedTexts('abort'));
                            o.classList.remove(eK);
                        }
                    } else {
                        this.cancelUploadingFile(t, e, n);
                    }
                    var a = {
                        e: e,
                        operation: 'upload',
                        file: this.updateStatus(t, this.localizedTexts('inProgress'), '3')
                    };
                    this.trigger('progress', a);
                };
                t.prototype.cancelUploadingFile = function(e, t, i, n) {
                    var r = this;
                    if (e.statusCode === '5') {
                        var o = {
                            event: t,
                            fileData: e,
                            cancel: false,
                            customFormData: []
                        };
                        this.trigger('canceling', o, function(t) {
                            if (t.cancel) {
                                e.statusCode = '3';
                                if (!(0, s.le)(n)) {
                                    var o = n.querySelector('.' + eQ);
                                    if (!(0, s.le)(o)) {
                                        eA(o);
                                        (0, s.og)(n.querySelector('.e-spinner-pane'));
                                    }
                                }
                            } else {
                                i.emitError = false;
                                i.httpRequest.abort();
                                var a = new FormData();
                                if (e.statusCode === '5') {
                                    var l = r.element.getAttribute('name');
                                    a.append(l, e.name);
                                    a.append('cancel-uploading', e.name);
                                    r.updateFormData(a, t.customFormData);
                                    var h = new s.tk(r.asyncSettings.removeUrl, 'POST', true, null);
                                    h.emitError = false;
                                    h.onLoad = function(t) {
                                        r.removecanceledFile(t, e);
                                        return {};
                                    };
                                    h.send(a);
                                }
                            }
                        });
                    }
                };
                t.prototype.removecanceledFile = function(e, t) {
                    var i = this.getLiElement(t);
                    if ((0, s.le)(i) || i.querySelector('.' + e0) || (0, s.le)(i.querySelector('.' + eQ))) {
                        return;
                    }
                    this.updateStatus(t, this.localizedTexts('fileUploadCancel'), '5');
                    this.renderFailureState(e, t, i);
                    var n = i.querySelector('.' + eK);
                    if (!(0, s.le)(i)) {
                        eA(n);
                        if (!(0, s.le)(i.querySelector('.e-spinner-pane'))) {
                            (0, s.og)(i.querySelector('.e-spinner-pane'));
                        }
                    }
                    var r = e && e.currentTarget ? this.getResponse(e) : null;
                    var o = {
                        event: e,
                        response: r,
                        operation: 'cancel',
                        file: t
                    };
                    this.trigger('success', o);
                };
                t.prototype.renderFailureState = function(e, t, i) {
                    var n = this;
                    this.updateProgressBarClasses(i, e9);
                    this.removeProgressbar(i, 'failure');
                    if (!(0, s.le)(i.querySelector('.e-file-status'))) {
                        i.querySelector('.e-file-status').classList.add(e9);
                    }
                    var r = i.querySelector('.' + eQ);
                    if ((0, s.le)(r)) {
                        return;
                    }
                    r.classList.remove(eQ, e5);
                    r.classList.add(eK);
                    r.setAttribute('title', this.localizedTexts('remove'));
                    this.pauseButton = this.createElement('span', {
                        className: 'e-icons e-file-reload-btn',
                        attrs: {
                            'tabindex': this.btnTabIndex
                        }
                    });
                    r.parentElement.insertBefore(this.pauseButton, r);
                    this.pauseButton.setAttribute('title', this.localizedTexts('retry'));
                    var o = i.querySelector('.' + e0);
                    o.addEventListener('click', function(e) {
                        n.reloadcanceledFile(e, t, i, false);
                    }, false);
                };
                t.prototype.reloadcanceledFile = function(e, t, i, n) {
                    t.statusCode = '1';
                    t.status = this.localizedTexts('readyToUploadMessage');
                    if (!n) {
                        if (!(0, s.le)(i.querySelector('.' + e_))) {
                            i.querySelector('.' + e_).classList.remove(e9);
                        }
                        if (!(0, s.le)(i.querySelector('.' + e0))) {
                            (0, s.og)(i.querySelector('.' + e0));
                        }
                        this.pauseButton = null;
                    }
                    i.classList.add(ta);
                    this.upload([
                        t
                    ]);
                };
                t.prototype.uploadComplete = function(e, t, i) {
                    var n = e.target;
                    if (n.readyState === 4 && n.status >= 200 && n.status <= 299) {
                        var r = this.getLiElement(t);
                        if ((0, s.le)(r) && (!i || (0, s.le)(i))) {
                            return;
                        }
                        if (!(0, s.le)(r)) {
                            this.updateProgressBarClasses(r, e7);
                            this.removeProgressbar(r, 'success');
                            var o = r.querySelector('.' + eQ);
                            if (!(0, s.le)(o)) {
                                o.classList.add(eJ);
                                o.setAttribute('title', this.localizedTexts('delete'));
                                o.classList.remove(eQ);
                                o.classList.remove(e5);
                            }
                        }
                        this.raiseSuccessEvent(e, t);
                    } else {
                        this.uploadFailed(e, t);
                    }
                };
                t.prototype.getResponse = function(e) {
                    var t = e.currentTarget;
                    var i = {
                        readyState: t.readyState,
                        statusCode: t.status,
                        statusText: t.statusText,
                        headers: t.getAllResponseHeaders(),
                        withCredentials: t.withCredentials
                    };
                    return i;
                };
                t.prototype.raiseSuccessEvent = function(e, t) {
                    var i = this;
                    var n = e && e.currentTarget ? this.getResponse(e) : null;
                    var r = this.localizedTexts('uploadSuccessMessage');
                    var o = {
                        e: e,
                        response: n,
                        operation: 'upload',
                        file: this.updateStatus(t, r, '2', false),
                        statusText: r
                    };
                    var a = this.getLiElement(t);
                    if (!(0, s.le)(a)) {
                        var l = a.querySelector('.' + e$);
                        if (!(0, s.le)(l)) {
                            eA(a);
                            (0, s.og)(l);
                        }
                    }
                    this.trigger('success', o, function(e) {
                        i.updateStatus(t, e.statusText, '2');
                        i.uploadedFilesData.push(t);
                        i.trigger('change', {
                            file: i.uploadedFilesData
                        });
                        i.checkActionButtonStatus();
                        if (i.fileList.length > 0) {
                            if ((!(i.getLiElement(t)).classList.contains(ta))) {
                                i.uploadSequential();
                                i.checkActionComplete(true);
                            } else {
                                (i.getLiElement(t)).classList.remove(ta);
                            }
                        }
                    });
                };
                t.prototype.uploadFailed = function(e, t) {
                    var i = this;
                    var n = this.getLiElement(t);
                    var r = e && e.currentTarget ? this.getResponse(e) : null;
                    var o = this.localizedTexts('uploadFailedMessage');
                    var a = {
                        e: e,
                        response: r,
                        operation: 'upload',
                        file: this.updateStatus(t, o, '0', false),
                        statusText: o
                    };
                    if (!(0, s.le)(n)) {
                        this.renderFailureState(e, t, n);
                    }
                    this.trigger('failure', a, function(e) {
                        i.updateStatus(t, e.statusText, '0');
                        i.checkActionButtonStatus();
                        i.uploadSequential();
                        i.checkActionComplete(true);
                    });
                };
                t.prototype.uploadSequential = function() {
                    if (this.sequentialUpload) {
                        if (this.autoUpload) {
                            this.checkAutoUpload(this.filesData);
                        } else {
                            this.uploadButtonClick();
                        }
                    }
                };
                t.prototype.checkActionComplete = function(e) {
                    if (e) {
                        ++this.actionCompleteCount;
                    } else {
                        --this.actionCompleteCount;
                    }
                    this.raiseActionComplete();
                };
                t.prototype.raiseActionComplete = function() {
                    if ((this.filesData.length === this.actionCompleteCount) && this.flag) {
                        this.flag = false;
                        var e = {
                            fileData: []
                        };
                        e.fileData = this.getSelectedFileStatus(this.selectedFiles);
                        this.trigger('actionComplete', e);
                    }
                };
                t.prototype.getSelectedFileStatus = function(e) {
                    var t = [];
                    var i = 0;
                    for(var n = 0; n < e.length; n++){
                        var r = e[n];
                        for(var s = 0; s < this.filesData.length; s++){
                            if (this.filesData[s].name === r.name) {
                                t[i] = this.filesData[s];
                                ++i;
                            }
                        }
                    }
                    return t;
                };
                t.prototype.updateProgressBarClasses = function(e, t) {
                    var i = e.querySelector('.' + e2);
                    if (!(0, s.le)(i)) {
                        i.classList.add(t);
                    }
                };
                t.prototype.removeProgressbar = function(e, t) {
                    var i = this;
                    if (!(0, s.le)(e.querySelector('.' + e3))) {
                        this.progressAnimation = new s.fw({
                            duration: 1250
                        });
                        this.progressAnimation.animate(e.querySelector('.' + e3), {
                            name: 'FadeOut'
                        });
                        this.progressAnimation.animate(e.querySelector('.' + e4), {
                            name: 'FadeOut'
                        });
                        setTimeout(function() {
                            i.animateProgressBar(e, t);
                        }, 750);
                    }
                };
                t.prototype.animateProgressBar = function(e, t) {
                    if (t === 'success') {
                        e.classList.add(e7);
                        if (!(0, s.le)(e.querySelector('.' + e_))) {
                            e.querySelector('.' + e_).classList.remove(e5);
                            this.progressAnimation.animate(e.querySelector('.' + e_), {
                                name: 'FadeIn'
                            });
                            e.querySelector('.' + e_).classList.add(e7);
                        }
                    } else {
                        if (!(0, s.le)(e.querySelector('.' + e_))) {
                            e.querySelector('.' + e_).classList.remove(e5);
                            this.progressAnimation.animate(e.querySelector('.' + e_), {
                                name: 'FadeIn'
                            });
                            e.querySelector('.' + e_).classList.add(e9);
                        }
                    }
                    if (e.querySelector('.' + e3)) {
                        (0, s.og)(e.querySelector('.' + e3));
                    }
                };
                t.prototype.setExtensions = function(e) {
                    if (e !== '' && !(0, s.le)(e)) {
                        this.element.setAttribute('accept', e);
                    } else {
                        this.element.removeAttribute('accept');
                    }
                };
                t.prototype.templateComplier = function(e) {
                    if (e) {
                        try {
                            if ((0, s.td)(e, document).length) {
                                return (0, s.MY)((0, s.Ys)(e, document).innerHTML.trim());
                            } else {
                                return (0, s.MY)(e);
                            }
                        } catch (t) {
                            return (0, s.MY)(e);
                        }
                    }
                    return undefined;
                };
                t.prototype.setRTL = function() {
                    if (this.enableRtl) {
                        (0, s.cn)([
                            this.uploadWrapper
                        ], te);
                    } else {
                        (0, s.IV)([
                            this.uploadWrapper
                        ], te);
                    }
                };
                t.prototype.localizedTexts = function(e) {
                    this.l10n.setLocale(this.locale);
                    return this.l10n.getConstant(e);
                };
                t.prototype.setControlStatus = function() {
                    if (!this.enabled) {
                        this.uploadWrapper.classList.add(tt);
                        this.element.setAttribute('disabled', 'disabled');
                        this.browseButton.setAttribute('disabled', 'disabled');
                        if (!(0, s.le)(this.clearButton)) {
                            this.clearButton.setAttribute('disabled', 'disabled');
                        }
                        if (!(0, s.le)(this.uploadButton)) {
                            this.uploadButton.setAttribute('disabled', 'disabled');
                        }
                    } else {
                        if (this.uploadWrapper.classList.contains(tt)) {
                            this.uploadWrapper.classList.remove(tt);
                        }
                        if (!(0, s.le)(this.browseButton) && this.element.hasAttribute('disabled')) {
                            this.element.removeAttribute('disabled');
                            this.browseButton.removeAttribute('disabled');
                        }
                        if (!(0, s.le)(this.clearButton) && this.clearButton.hasAttribute('disabled')) {
                            this.clearButton.removeAttribute('disabled');
                        }
                        if (!(0, s.le)(this.uploadButton) && this.uploadButton.hasAttribute('disabled')) {
                            this.uploadButton.hasAttribute('disabled');
                        }
                    }
                };
                t.prototype.checkHTMLAttributes = function(e) {
                    var t = e ? (0, s.le)(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : [
                        'accept',
                        'multiple',
                        'disabled'
                    ];
                    for(var i = 0, n = t; i < n.length; i++){
                        var r = n[i];
                        if (!(0, s.le)(this.element.getAttribute(r))) {
                            switch(r){
                                case 'accept':
                                    if (((0, s.le)(this.uploaderOptions) || (this.uploaderOptions['allowedExtensions'] === undefined)) || e) {
                                        this.setProperties({
                                            allowedExtensions: this.element.getAttribute('accept')
                                        }, !e);
                                        this.initialAttr.accept = this.allowedExtensions;
                                    }
                                    break;
                                case 'multiple':
                                    if (((0, s.le)(this.uploaderOptions) || (this.uploaderOptions['multiple'] === undefined)) || e) {
                                        var o = this.element.getAttribute(r) === 'multiple' || this.element.getAttribute(r) === '' || this.element.getAttribute(r) === 'true' ? true : false;
                                        this.setProperties({
                                            multiple: o
                                        }, !e);
                                        this.initialAttr.multiple = true;
                                    }
                                    break;
                                case 'disabled':
                                    if (((0, s.le)(this.uploaderOptions) || (this.uploaderOptions['enabled'] === undefined)) || e) {
                                        var a = this.element.getAttribute(r) === 'disabled' || this.element.getAttribute(r) === '' || this.element.getAttribute(r) === 'true' ? false : true;
                                        this.setProperties({
                                            enabled: a
                                        }, !e);
                                        this.initialAttr.disabled = true;
                                    }
                            }
                        }
                    }
                };
                t.prototype.chunkUpload = function(e, t, i) {
                    var n = 0;
                    var r = Math.min(this.asyncSettings.chunkSize, e.size);
                    var s = 0;
                    var o = e.rawFile.slice(n, r);
                    var a = {
                        chunkIndex: s,
                        blob: o,
                        file: e,
                        start: n,
                        end: r,
                        retryCount: 0,
                        request: null
                    };
                    this.sendRequest(e, a, t, i);
                };
                t.prototype.sendRequest = function(e, t, i, n) {
                    var r = this;
                    var o = new FormData();
                    var a = e.rawFile.slice(t.start, t.end);
                    o.append(this.uploaderName, a, e.name);
                    o.append('chunk-index', t.chunkIndex.toString());
                    o.append('chunkIndex', t.chunkIndex.toString());
                    var l = Math.max(Math.ceil(e.size / this.asyncSettings.chunkSize), 1);
                    o.append('total-chunk', l.toString());
                    o.append('totalChunk', l.toString());
                    var h = new s.tk({
                        url: this.asyncSettings.saveUrl,
                        type: 'POST',
                        async: true,
                        contentType: null
                    });
                    h.emitError = false;
                    h.onLoad = function(e) {
                        r.chunkUploadComplete(e, t, i);
                        return {};
                    };
                    h.onUploadProgress = function(e) {
                        r.chunkUploadInProgress(e, t, i);
                        return {};
                    };
                    var c = {
                        fileData: e,
                        customFormData: [],
                        cancel: false,
                        chunkSize: this.asyncSettings.chunkSize === 0 ? null : this.asyncSettings.chunkSize
                    };
                    h.beforeSend = function(i) {
                        c.currentRequest = h.httpRequest;
                        c.currentChunkIndex = t.chunkIndex;
                        if (c.currentChunkIndex === 0) {
                            r.trigger('uploading', c, function(t) {
                                r.uploadingEventCallback(o, t, i, e);
                            });
                        } else {
                            r.trigger('chunkUploading', c, function(t) {
                                r.uploadingEventCallback(o, t, i, e);
                            });
                        }
                    };
                    h.onError = function(e) {
                        r.chunkUploadFailed(e, t, i);
                        return {};
                    };
                    h.send(o);
                    t.request = h;
                };
                t.prototype.uploadingEventCallback = function(e, t, i, n) {
                    if (t.cancel) {
                        this.eventCancelByArgs(i, t, n);
                    } else {
                        this.updateFormData(e, t.customFormData);
                    }
                };
                t.prototype.eventCancelByArgs = function(e, t, i) {
                    var n = this;
                    e.cancel = true;
                    if (t.fileData.statusCode === '5') {
                        return;
                    }
                    t.fileData.statusCode = '5';
                    t.fileData.status = this.localizedTexts('fileUploadCancel');
                    var r = this.getLiElement(t.fileData);
                    if (r) {
                        if (!(0, s.le)(r.querySelector('.' + e_))) {
                            r.querySelector('.' + e_).innerHTML = this.localizedTexts('fileUploadCancel');
                            r.querySelector('.' + e_).classList.add(e9);
                        }
                        this.pauseButton = this.createElement('span', {
                            className: 'e-icons e-file-reload-btn',
                            attrs: {
                                'tabindex': this.btnTabIndex
                            }
                        });
                        var o = r.querySelector('.' + eK);
                        if (o) {
                            o.parentElement.insertBefore(this.pauseButton, o);
                        }
                        this.pauseButton.setAttribute('title', this.localizedTexts('retry'));
                        this.pauseButton.addEventListener('click', function(e) {
                            n.reloadcanceledFile(e, i, r);
                        }, false);
                        this.checkActionButtonStatus();
                    }
                };
                t.prototype.checkChunkUpload = function() {
                    return (this.asyncSettings.chunkSize <= 0 || (0, s.le)(this.asyncSettings.chunkSize)) ? false : true;
                };
                t.prototype.chunkUploadComplete = function(e, t, i) {
                    var n = this;
                    var r = e.target;
                    var o;
                    if (r.readyState === 4 && r.status >= 200 && r.status < 300) {
                        var a = e && e.currentTarget ? this.getResponse(e) : null;
                        var l = Math.max(Math.ceil(t.file.size / this.asyncSettings.chunkSize), 1);
                        var h = {
                            event: e,
                            file: t.file,
                            chunkIndex: t.chunkIndex,
                            totalChunk: l,
                            chunkSize: this.asyncSettings.chunkSize,
                            response: a
                        };
                        this.trigger('chunkSuccess', h);
                        if ((0, s.le)(i) || !i) {
                            o = this.getLiElement(t.file);
                        }
                        this.updateMetaData(t);
                        if (t.end === t.file.size) {
                            t.file.statusCode = '3';
                        }
                        if (t.file.statusCode === '5') {
                            var c = {
                                event: e,
                                fileData: t.file,
                                cancel: false,
                                customFormData: []
                            };
                            this.trigger('canceling', c, function(e) {
                                if (e.cancel) {
                                    t.file.statusCode = '3';
                                    var a = o.querySelector('.' + eQ);
                                    if (!(0, s.le)(o) && !(0, s.le)(a)) {
                                        eA(a);
                                        (0, s.og)(o.querySelector('.e-spinner-pane'));
                                    }
                                    n.sendNextRequest(t);
                                } else {
                                    t.request.emitError = false;
                                    r.abort();
                                    var l = new FormData();
                                    var h = n.element.getAttribute('name');
                                    l.append(h, t.file.name);
                                    l.append('cancel-uploading', t.file.name);
                                    l.append('cancelUploading', t.file.name);
                                    n.updateFormData(l, e.customFormData);
                                    var c = new s.tk(n.asyncSettings.removeUrl, 'POST', true, null);
                                    c.emitError = false;
                                    c.onLoad = function(e) {
                                        n.removeChunkFile(e, t, i);
                                        return {};
                                    };
                                    c.send(l);
                                }
                            });
                        } else {
                            if ((l - 1) === t.chunkIndex && l > t.chunkIndex) {
                                var d = this.pausedData.indexOf(t);
                                if (d >= 0) {
                                    this.pausedData.splice(d, 1);
                                }
                                if ((0, s.le)(this.template) && ((0, s.le)(i) || !i) && o) {
                                    if (o && !(0, s.le)(o.querySelector('.' + ts))) {
                                        (0, s.og)(o.querySelector('.' + ts));
                                    }
                                    this.removeChunkProgressBar(t);
                                }
                                this.raiseSuccessEvent(e, t.file);
                                return;
                            }
                            if (t.file.statusCode !== '4') {
                                this.sendNextRequest(t);
                            }
                        }
                    } else {
                        this.chunkUploadFailed(e, t);
                    }
                };
                t.prototype.sendNextRequest = function(e) {
                    e.start = e.end;
                    e.end += this.asyncSettings.chunkSize;
                    e.end = Math.min(e.end, e.file.size);
                    e.chunkIndex += 1;
                    this.sendRequest(e.file, e);
                };
                t.prototype.removeChunkFile = function(e, t, i) {
                    if ((0, s.le)(this.template) && ((0, s.le)(i) && !i)) {
                        var n = this.getLiElement(t.file);
                        var r = n.querySelector('.' + eQ);
                        var o = r;
                        this.updateStatus(t.file, this.localizedTexts('fileUploadCancel'), '5');
                        this.updateProgressBarClasses(n, e9);
                        this.removeProgressbar(n, 'failure');
                        r && r.classList.remove(eQ);
                        r && r.classList.add(eK);
                        r && r.setAttribute('title', this.localizedTexts('remove'));
                        var a = n.querySelector('.' + ts);
                        a && a.classList.add(e0);
                        a && a.classList.remove(ts);
                        a && a.setAttribute('title', this.localizedTexts('retry'));
                        if (!(0, s.le)(n) && !(0, s.le)(r) && !(0, s.le)(n.querySelector('.e-spinner-pane'))) {
                            eA(o);
                            (0, s.og)(n.querySelector('.e-spinner-pane'));
                        }
                    }
                };
                t.prototype.pauseUpload = function(e, t, i) {
                    e.file.statusCode = '4';
                    e.file.status = this.localizedTexts('pause');
                    this.updateMetaData(e);
                    var n = {
                        event: t ? t : null,
                        file: e.file,
                        chunkIndex: e.chunkIndex,
                        chunkCount: Math.round(e.file.size / this.asyncSettings.chunkSize),
                        chunkSize: this.asyncSettings.chunkSize
                    };
                    this.abortUpload(e, i, n);
                };
                t.prototype.abortUpload = function(e, t, i) {
                    if (e.file.statusCode !== '4') {
                        e.request.emitError = false;
                        e.request.httpRequest.abort();
                    }
                    var n = this.getLiElement(e.file);
                    if ((0, s.le)(this.template) && ((0, s.le)(t) || !t)) {
                        var r = n.querySelector('.' + ts);
                        r.classList.remove(ts);
                        r.classList.add(to);
                        r.setAttribute('title', this.localizedTexts('resume'));
                        r.nextElementSibling.classList.add(eK);
                        r.nextElementSibling.classList.remove(eQ);
                        r.nextElementSibling.setAttribute('title', this.localizedTexts('remove'));
                    }
                    for(var o = 0; o < this.pausedData.length; o++){
                        if (this.pausedData[o].file.name === e.file.name) {
                            this.pausedData.splice(o, 1);
                        }
                    }
                    this.pausedData.push(e);
                    this.trigger('pausing', i);
                };
                t.prototype.resumeUpload = function(e, t, i) {
                    var n = this.getLiElement(e.file);
                    var r;
                    if (!(0, s.le)(n)) {
                        r = n.querySelector('.' + to);
                    }
                    if (!(0, s.le)(r) && ((0, s.le)(i) || !i)) {
                        r.classList.remove(to);
                        r.classList.add(ts);
                        r.setAttribute('title', this.localizedTexts('pause'));
                        r.nextElementSibling.classList.remove(eK);
                        r.nextElementSibling.classList.add(eQ);
                        r.nextElementSibling.setAttribute('title', this.localizedTexts('abort'));
                    }
                    e.file.status = this.localizedTexts('inProgress');
                    e.file.statusCode = '3';
                    this.updateMetaData(e);
                    var o = {
                        event: t ? t : null,
                        file: e.file,
                        chunkIndex: e.chunkIndex,
                        chunkCount: Math.round(e.file.size / this.asyncSettings.chunkSize),
                        chunkSize: this.asyncSettings.chunkSize
                    };
                    this.trigger('resuming', o);
                    for(var a = 0; a < this.pausedData.length; a++){
                        if (this.pausedData[a].end === this.pausedData[a].file.size) {
                            this.chunkUploadComplete(t, e, i);
                        } else {
                            if (this.pausedData[a].file.name === e.file.name) {
                                this.pausedData[a].start = this.pausedData[a].end;
                                this.pausedData[a].end = this.pausedData[a].end + this.asyncSettings.chunkSize;
                                this.pausedData[a].end = Math.min(this.pausedData[a].end, this.pausedData[a].file.size);
                                this.pausedData[a].chunkIndex = this.pausedData[a].chunkIndex + 1;
                                this.sendRequest(this.pausedData[a].file, this.pausedData[a], i);
                            }
                        }
                    }
                };
                t.prototype.updateMetaData = function(e) {
                    if (this.uploadMetaData.indexOf(e) === -1) {
                        this.uploadMetaData.push(e);
                    } else {
                        this.uploadMetaData.splice(this.uploadMetaData.indexOf(e), 1);
                        this.uploadMetaData.push(e);
                    }
                };
                t.prototype.removeChunkProgressBar = function(e) {
                    var t = this.getLiElement(e.file);
                    if (!(0, s.le)(t)) {
                        this.updateProgressBarClasses(t, e7);
                        this.removeProgressbar(t, 'success');
                        var i = t.querySelector('.' + eQ);
                        if (!(0, s.le)(i)) {
                            i.classList.add(eJ);
                            i.setAttribute('title', this.localizedTexts('delete'));
                            i.classList.remove(eQ, e5);
                        }
                    }
                };
                t.prototype.chunkUploadFailed = function(e, t, i) {
                    var n = this;
                    var r = Math.max(Math.ceil(t.file.size / this.asyncSettings.chunkSize), 1);
                    var o;
                    if ((0, s.le)(this.template) && ((0, s.le)(i) || !i)) {
                        o = this.getLiElement(t.file);
                    }
                    var a = e && e.currentTarget ? this.getResponse(e) : null;
                    var l = {
                        event: e,
                        file: t.file,
                        chunkIndex: t.chunkIndex,
                        totalChunk: r,
                        chunkSize: this.asyncSettings.chunkSize,
                        cancel: false,
                        response: a
                    };
                    this.trigger('chunkFailure', l, function(r) {
                        if (!r.cancel) {
                            if (t.retryCount < n.asyncSettings.retryCount) {
                                setTimeout(function() {
                                    n.retryRequest(o, t, i);
                                }, n.asyncSettings.retryAfterDelay);
                            } else {
                                if (!(0, s.le)(o)) {
                                    var l = o.querySelector('.' + ts) ? o.querySelector('.' + ts) : o.querySelector('.' + to);
                                    if (!(0, s.le)(l)) {
                                        l.classList.add(e0);
                                        l.classList.remove(ts, to);
                                    }
                                    n.updateProgressBarClasses(o, e9);
                                    n.removeProgressbar(o, 'failure');
                                    o.querySelector('.e-icons').classList.remove(e5);
                                    var h = o.querySelector('.' + eQ) ? o.querySelector('.' + eQ) : o.querySelector('.' + eK);
                                    h.classList.remove(eQ);
                                    if (!(0, s.le)(o.querySelector('.' + ts))) {
                                        (0, s.og)(o.querySelector('.' + ts));
                                    }
                                    if (t.start > 0) {
                                        h.classList.add(eJ);
                                        h.setAttribute('title', n.localizedTexts('delete'));
                                    } else {
                                        h.classList.add(eK);
                                        h.setAttribute('title', n.localizedTexts('remove'));
                                    }
                                }
                                t.retryCount = 0;
                                var c = t.file;
                                var d = n.localizedTexts('uploadFailedMessage');
                                var p = {
                                    e: e,
                                    response: a,
                                    operation: 'upload',
                                    file: n.updateStatus(c, d, '0', false),
                                    statusText: d
                                };
                                n.trigger('failure', p, function(e) {
                                    n.updateStatus(c, e.statusText, '0');
                                    n.uploadSequential();
                                    n.checkActionComplete(true);
                                });
                            }
                        }
                    });
                };
                t.prototype.retryRequest = function(e, t, i) {
                    if ((0, s.le)(this.template) && ((0, s.le)(i) || !i) && e) {
                        this.updateProgressBarClasses(e, e9);
                    }
                    t.retryCount += 1;
                    this.sendRequest(t.file, t);
                };
                t.prototype.checkPausePlayAction = function(e) {
                    var t = e.target;
                    var i = e.target.parentElement;
                    var n = this.fileList.indexOf(i);
                    var r = this.filesData[n];
                    var s = this.getCurrentMetaData(r);
                    if (t.classList.contains(ts)) {
                        this.pauseUpload(s, e);
                    } else if (t.classList.contains(to)) {
                        this.resumeUpload(s, e);
                    } else if (t.classList.contains(e0)) {
                        if (s.file.status === this.localizedTexts('fileUploadCancel')) {
                            this.retryUpload(s, false);
                        } else {
                            this.retryUpload(s, true);
                        }
                    }
                };
                t.prototype.retryUpload = function(e, t) {
                    if (t) {
                        e.end = e.end + this.asyncSettings.chunkSize;
                        e.start = e.start + this.asyncSettings.chunkSize;
                        this.sendRequest(e.file, e);
                    } else {
                        e.file.statusCode = '1';
                        e.file.status = this.localizedTexts('readyToUploadMessage');
                        this.chunkUpload(e.file);
                    }
                    (this.getLiElement(e.file)).classList.add(ta);
                };
                t.prototype.chunkUploadInProgress = function(e, t, i) {
                    var n = this;
                    if (t.file.statusCode === '4') {
                        return;
                    }
                    if (t.file.statusCode !== '4' && t.file.statusCode !== '5') {
                        t.file.statusCode = '3';
                        t.file.status = this.localizedTexts('inProgress');
                    }
                    this.updateMetaData(t);
                    var r = this.getLiElement(t.file);
                    if ((0, s.le)(r)) {
                        return;
                    }
                    var o = r.querySelector('.' + e0);
                    if (!(0, s.le)(o)) {
                        o.classList.add(ts);
                        o.setAttribute('title', this.localizedTexts('pause'));
                        o.classList.remove(e0);
                    }
                    if (!(0, s.le)(r)) {
                        if (!(r.querySelectorAll('.' + e3).length > 0)) {
                            var a = r.querySelector('.' + e_);
                            if ((0, s.le)(this.template)) {
                                a.classList.add(e5);
                                a.classList.remove(e9);
                                this.createProgressBar(r);
                                this.updateProgressBarClasses(r, e5);
                            }
                            var l = r.querySelector('.' + eK) ? r.querySelector('.' + eK) : r.querySelector('.' + eJ);
                            if (!(0, s.le)(l)) {
                                l.classList.add(eQ);
                                l.setAttribute('title', this.localizedTexts('abort'));
                                l.classList.remove(eK);
                            }
                        }
                        if (!isNaN(Math.round((e.loaded / e.total) * 100)) && (0, s.le)(this.template) && t.file.statusCode !== '4') {
                            var h = void 0;
                            var c = Math.ceil(t.file.size / this.asyncSettings.chunkSize) - 1;
                            if (this.asyncSettings.chunkSize && c) {
                                h = Math.round(t.chunkIndex / c * 100);
                                this.changeProgressValue(r, h.toString() + '%');
                            }
                        }
                        if (t.chunkIndex === 0) {
                            this.checkActionButtonStatus();
                        }
                    }
                    if ((0, s.le)(r.querySelector('.' + ts)) && (0, s.le)(this.template) && (0, s.le)(r.querySelector('.' + eJ))) {
                        this.pauseButton = this.createElement('span', {
                            className: 'e-icons e-file-pause-btn',
                            attrs: {
                                'tabindex': this.btnTabIndex
                            }
                        });
                        if (this.browserName === 'msie') {
                            this.pauseButton.classList.add('e-msie');
                        }
                        var d = r.querySelector('.' + eQ);
                        d.parentElement.insertBefore(this.pauseButton, d);
                        this.pauseButton.setAttribute('title', this.localizedTexts('pause'));
                        this.pauseButton.addEventListener('click', function(e) {
                            n.checkPausePlayAction(e);
                        }, false);
                    }
                };
                t.prototype.bytesToSize = function(e) {
                    var t = -1;
                    if (!e) {
                        return '0.0 KB';
                    }
                    do {
                        e = e / 1024;
                        t++;
                    }while (e > 99)
                    if (t >= 2) {
                        e = e * 1024;
                        t = 1;
                    }
                    return Math.max(e, 0).toFixed(1) + ' ' + [
                        'KB',
                        'MB'
                    ][t];
                };
                t.prototype.sortFileList = function(e) {
                    e = e ? e : this.sortFilesList;
                    var t = e;
                    var i = [];
                    for(var n = 0; n < t.length; n++){
                        i.push(t[n].name);
                    }
                    var r = i.sort();
                    var s = [];
                    for(var o = 0, a = r; o < a.length; o++){
                        var l = a[o];
                        for(var n = 0; n < t.length; n++){
                            if (l === t[n].name) {
                                s.push(t[n]);
                            }
                        }
                    }
                    return s;
                };
                t.prototype.destroy = function() {
                    this.element.value = null;
                    this.clearTemplate();
                    this.clearAll();
                    this.unWireEvents();
                    this.unBindDropEvents();
                    if (this.multiple) {
                        this.element.removeAttribute('multiple');
                    }
                    if (!this.enabled) {
                        this.element.removeAttribute('disabled');
                    }
                    this.element.removeAttribute('accept');
                    this.setInitialAttributes();
                    var t = [
                        'aria-label',
                        'directory',
                        'webkitdirectory',
                        'tabindex'
                    ];
                    for(var i = 0, n = t; i < n.length; i++){
                        var r = n[i];
                        this.element.removeAttribute(r);
                    }
                    if (!(0, s.le)(this.uploadWrapper)) {
                        this.uploadWrapper.parentElement.appendChild(this.element);
                        (0, s.og)(this.uploadWrapper);
                    }
                    this.uploadWrapper = null;
                    e.prototype.destroy.call(this);
                };
                t.prototype.upload = function(e, t) {
                    var i = this;
                    e = e ? e : this.filesData;
                    if (this.sequentialUpload && (this.isFirstFileOnSelection || t)) {
                        this.sequenceUpload(e);
                    } else {
                        var n = this.getFilesInArray(e);
                        var r = {
                            customFormData: [],
                            currentRequest: null,
                            cancel: false
                        };
                        this.trigger('beforeUpload', r, function(e) {
                            if (!e.cancel) {
                                i.uploadFiles(n, t);
                            }
                        });
                    }
                };
                t.prototype.getFilesInArray = function(e) {
                    var t = [];
                    if (e instanceof Array) {
                        t = e;
                    } else {
                        t.push(e);
                    }
                    return t;
                };
                t.prototype.serverReadFileBase64 = function(e, t, i) {
                    var n = this;
                    return new Promise(function(r, s) {
                        var o = n.fileStreams[e].rawFile;
                        try {
                            var a = new FileReader();
                            a.onload = (function(e) {
                                return function() {
                                    try {
                                        var t = e.result;
                                        var i = t ? t.split(';base64,')[1] : null;
                                        r(i);
                                    } catch (n) {
                                        s(n);
                                    }
                                };
                            })(a);
                            a.readAsDataURL(o.slice(t, t + i));
                        } catch (l) {
                            s(l);
                        }
                    });
                };
                t.prototype.uploadFileCount = function(e) {
                    var t = this.filesData;
                    if (!t || t.length === 0) {
                        return -1;
                    }
                    var i = t.length;
                    return i;
                };
                t.prototype.getFileRead = function(e, t) {
                    var i = this.filesData;
                    if (!i || i.length === 0) {
                        return -1;
                    }
                    var n = i[e];
                    var r = this.newFileRef++;
                    this.fileStreams[r] = n;
                    return r;
                };
                t.prototype.getFileInfo = function(e, t) {
                    var i = this.filesData;
                    if (!i || i.length === 0) {
                        return null;
                    }
                    var n = i[e];
                    if (!n) {
                        return null;
                    }
                    return this.filesData[e];
                };
                t.prototype.uploadFiles = function(e, t) {
                    var i = [];
                    if (this.asyncSettings.saveUrl === '' || (0, s.le)(this.asyncSettings.saveUrl)) {
                        return;
                    }
                    if (!t || (0, s.le)(t)) {
                        if (!this.multiple) {
                            var n = [];
                            n.push(e[0]);
                            i = this.filterfileList(n);
                        } else {
                            i = this.filterfileList(e);
                        }
                    } else {
                        i = e;
                    }
                    for(var r = 0; r < i.length; r++){
                        this.uploadFilesRequest(i, r, t);
                    }
                };
                t.prototype.uploadFilesRequest = function(e, t, i) {
                    var n = this;
                    var r = [];
                    var o = this.checkChunkUpload();
                    var a = new s.tk(this.asyncSettings.saveUrl, 'POST', true, null);
                    a.emitError = false;
                    var l;
                    var h = {
                        fileData: e[t],
                        customFormData: [],
                        cancel: false
                    };
                    var c = new FormData();
                    a.beforeSend = function(i) {
                        h.currentRequest = a.httpRequest;
                        n.trigger('uploading', h, function(r) {
                            if (r.cancel) {
                                n.eventCancelByArgs(i, r, e[t]);
                            }
                            n.updateFormData(c, r.customFormData);
                        });
                    };
                    if (e[t].statusCode === '1') {
                        var d = this.element.getAttribute('name');
                        c.append(d, e[t].rawFile, e[t].name);
                        if (o && e[t].size > this.asyncSettings.chunkSize) {
                            this.chunkUpload(e[t], i, t);
                        } else {
                            a.onLoad = function(r) {
                                if (h.cancel) {
                                    return {};
                                } else {
                                    n.uploadComplete(r, e[t], i);
                                    return {};
                                }
                            };
                            a.onUploadProgress = function(r) {
                                if (h.cancel) {
                                    return {};
                                } else {
                                    n.uploadInProgress(r, e[t], i, a);
                                    return {};
                                }
                            };
                            a.onError = function(i) {
                                n.uploadFailed(i, e[t]);
                                return {};
                            };
                            a.send(c);
                        }
                    }
                };
                t.prototype.spliceFiles = function(e) {
                    var t = this.fileList[e];
                    var i = this.getFilesData();
                    var n = +t.getAttribute('data-files-count');
                    var r = 0;
                    for(var s = 0; s < e; s++){
                        r += (+this.fileList[s].getAttribute('data-files-count'));
                    }
                    var o = (r + n) - 1;
                    for(var a = o; a >= r; a--){
                        i.splice(a, 1);
                    }
                };
                t.prototype.remove = function(e, t, i, n, r) {
                    var o = this;
                    if ((0, s.le)(n)) {
                        n = true;
                    }
                    var a = {
                        event: r,
                        cancel: false,
                        filesData: [],
                        customFormData: [],
                        postRawFile: n,
                        currentRequest: null
                    };
                    var l = {
                        cancel: false,
                        customFormData: [],
                        currentRequest: null
                    };
                    this.trigger('beforeRemove', l, function(n) {
                        if (!n.cancel) {
                            if (o.isFormUpload()) {
                                a.filesData = e;
                                o.trigger('removing', a, function(t) {
                                    if (!t.cancel) {
                                        var i = o.getFilesInArray(e);
                                        var n = false;
                                        var r = void 0;
                                        for(var a = 0, l = i; a < l.length; a++){
                                            var h = l[a];
                                            if (!n) {
                                                r = o.fileList.indexOf(h.list);
                                            }
                                            if (r > -1) {
                                                var c = !(0, s.le)(h.input) ? h.input : null;
                                                if (c) {
                                                    (0, s.og)(c);
                                                }
                                                o.spliceFiles(r);
                                                (0, s.og)(o.fileList[r]);
                                                o.fileList.splice(r, 1);
                                                n = true;
                                                r = -1;
                                            }
                                        }
                                    }
                                });
                            } else if (o.isForm && ((0, s.le)(o.asyncSettings.removeUrl) || o.asyncSettings.removeUrl === '')) {
                                a.filesData = o.getFilesData();
                                o.trigger('removing', a, function(e) {
                                    if (!e.cancel) {
                                        o.clearAll();
                                    }
                                });
                            } else {
                                var l = [];
                                e = !(0, s.le)(e) ? e : o.filesData;
                                if (e instanceof Array) {
                                    l = e;
                                } else {
                                    l.push(e);
                                }
                                a.filesData = l;
                                var h = o.asyncSettings.removeUrl;
                                var c = (h === '' || (0, s.le)(h)) ? false : true;
                                var d = function(e) {
                                    var n = o.uploadedFilesData.indexOf(e);
                                    if ((e.statusCode === '2' || e.statusCode === '4' || (e.statusCode === '0' && n !== -1)) && c) {
                                        o.removeUploadedFile(e, a, i, t);
                                    } else {
                                        if (!i) {
                                            o.trigger('removing', a, function(i) {
                                                if (!i.cancel) {
                                                    o.removeFilesData(e, t);
                                                }
                                            });
                                        } else {
                                            o.removeFilesData(e, t);
                                        }
                                    }
                                    if (r && !r.target.classList.contains(eK)) {
                                        o.checkActionComplete(false);
                                    }
                                };
                                for(var p = 0, u = l; p < u.length; p++){
                                    var f = u[p];
                                    d(f);
                                }
                            }
                        }
                    });
                };
                t.prototype.clearAll = function() {
                    var e = this;
                    if ((0, s.le)(this.listParent)) {
                        if (this.browserName !== 'msie') {
                            this.element.value = '';
                        }
                        this.filesData = [];
                        return;
                    }
                    var t = {
                        cancel: false,
                        filesData: this.filesData
                    };
                    this.trigger('clearing', t, function(t) {
                        if (!t.cancel) {
                            e.clearData();
                            e.actionCompleteCount = 0;
                            e.count = -1;
                        }
                    });
                };
                t.prototype.getFilesData = function(e) {
                    if ((0, s.le)(e)) {
                        return this.filesData;
                    } else {
                        return this.getSelectedFiles(e);
                    }
                };
                t.prototype.pause = function(e, t) {
                    e = e ? e : this.filesData;
                    var i = this.getFilesInArray(e);
                    this.pauseUploading(i, t);
                };
                t.prototype.pauseUploading = function(e, t) {
                    var i = this.getFiles(e);
                    for(var n = 0; n < i.length; n++){
                        if (i[n].statusCode === '3') {
                            this.pauseUpload(this.getCurrentMetaData(i[n], null), null, t);
                        }
                    }
                };
                t.prototype.getFiles = function(e) {
                    var t = [];
                    if (!(0, s.le)(e) && !(e instanceof Array)) {
                        t.push(e);
                    } else {
                        t = e;
                    }
                    return t;
                };
                t.prototype.resume = function(e, t) {
                    e = e ? e : this.filesData;
                    var i = this.getFilesInArray(e);
                    this.resumeFiles(i, t);
                };
                t.prototype.resumeFiles = function(e, t) {
                    var i = this.getFiles(e);
                    for(var n = 0; n < i.length; n++){
                        if (i[n].statusCode === '4') {
                            this.resumeUpload(this.getCurrentMetaData(i[n], null), null, t);
                        }
                    }
                };
                t.prototype.retry = function(e, t, i) {
                    e = e ? e : this.filesData;
                    var n = this.getFilesInArray(e);
                    if (this.sequentialUpload && this.isFirstFileOnSelection) {
                        this.isFirstFileOnSelection = false;
                    }
                    this.retryFailedFiles(n, t, i);
                };
                t.prototype.retryFailedFiles = function(e, t, i) {
                    var n = this.getFiles(e);
                    for(var r = 0; r < n.length; r++){
                        if (n[r].statusCode === '5' || n[r].statusCode === '0') {
                            if (this.asyncSettings.chunkSize > 0) {
                                this.retryUpload(this.getCurrentMetaData(n[r], null), t);
                            } else {
                                var s = void 0;
                                if (!i) {
                                    s = this.fileList[this.filesData.indexOf(n[r])];
                                }
                                this.reloadcanceledFile(null, n[r], s, i);
                            }
                        }
                    }
                };
                t.prototype.cancel = function(e) {
                    e = e ? e : this.filesData;
                    var t = this.getFilesInArray(e);
                    this.cancelUpload(t);
                };
                t.prototype.cancelUpload = function(e) {
                    var t = this.getFiles(e);
                    if (this.asyncSettings.chunkSize > 0) {
                        for(var i = 0; i < t.length; i++){
                            if (t[i].statusCode === '3') {
                                var n = this.getCurrentMetaData(t[i], null);
                                n.file.statusCode = '5';
                                n.file.status = this.localizedTexts('fileUploadCancel');
                                this.updateMetaData(n);
                                this.showHideUploadSpinner(t[i]);
                            }
                        }
                    } else {
                        for(var i = 0; i < t.length; i++){
                            if (t[i].statusCode === '3') {
                                t[i].statusCode = '5';
                                t[i].status = this.localizedTexts('fileUploadCancel');
                                this.showHideUploadSpinner(t[i]);
                            }
                        }
                    }
                };
                t.prototype.showHideUploadSpinner = function(e) {
                    var t = this.getLiElement(e);
                    if (!(0, s.le)(t) && (0, s.le)(this.template)) {
                        var i = t.querySelector('.' + eQ);
                        Y({
                            target: i,
                            width: '20px'
                        });
                        eD(i);
                    }
                };
                eI([
                    (0, s.Zz)({
                        saveUrl: '',
                        removeUrl: ''
                    }, tm)
                ], t.prototype, "asyncSettings", void 0);
                eI([
                    (0, s.Z9)(false)
                ], t.prototype, "sequentialUpload", void 0);
                eI([
                    (0, s.Z9)({})
                ], t.prototype, "htmlAttributes", void 0);
                eI([
                    (0, s.Z9)('')
                ], t.prototype, "cssClass", void 0);
                eI([
                    (0, s.Z9)(true)
                ], t.prototype, "enabled", void 0);
                eI([
                    (0, s.Z9)(null)
                ], t.prototype, "template", void 0);
                eI([
                    (0, s.Z9)(true)
                ], t.prototype, "multiple", void 0);
                eI([
                    (0, s.Z9)(true)
                ], t.prototype, "autoUpload", void 0);
                eI([
                    (0, s.Zz)({}, tf)
                ], t.prototype, "buttons", void 0);
                eI([
                    (0, s.Z9)('')
                ], t.prototype, "allowedExtensions", void 0);
                eI([
                    (0, s.Z9)(0)
                ], t.prototype, "minFileSize", void 0);
                eI([
                    (0, s.Z9)(30000000)
                ], t.prototype, "maxFileSize", void 0);
                eI([
                    (0, s.Z9)(null)
                ], t.prototype, "dropArea", void 0);
                eI([
                    (0, s.FE)([
                        {}
                    ], tu)
                ], t.prototype, "files", void 0);
                eI([
                    (0, s.Z9)(true)
                ], t.prototype, "showFileList", void 0);
                eI([
                    (0, s.Z9)(false)
                ], t.prototype, "directoryUpload", void 0);
                eI([
                    (0, s.Z9)('Default')
                ], t.prototype, "dropEffect", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "created", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "actionComplete", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "rendering", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "beforeUpload", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "fileListRendering", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "selected", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "uploading", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "success", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "failure", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "removing", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "beforeRemove", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "clearing", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "progress", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "change", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "chunkSuccess", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "chunkFailure", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "chunkUploading", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "canceling", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "pausing", void 0);
                eI([
                    (0, s.ju)()
                ], t.prototype, "resuming", void 0);
                t = eI([
                    s.Zl
                ], t);
                return t;
            }(s.wA));
            var tg = i(5932);
            ;
            var tb = (function() {
                function e(e, t) {
                    this.inlineNode = [
                        'a',
                        'abbr',
                        'acronym',
                        'audio',
                        'b',
                        'bdi',
                        'bdo',
                        'big',
                        'br',
                        'button',
                        'canvas',
                        'cite',
                        'code',
                        'data',
                        'datalist',
                        'del',
                        'dfn',
                        'em',
                        'embed',
                        'font',
                        'i',
                        'iframe',
                        'img',
                        'input',
                        'ins',
                        'kbd',
                        'label',
                        'map',
                        'mark',
                        'meter',
                        'noscript',
                        'object',
                        'output',
                        'picture',
                        'progress',
                        'q',
                        'ruby',
                        's',
                        'samp',
                        'script',
                        'select',
                        'slot',
                        'small',
                        'span',
                        'strong',
                        'sub',
                        'sup',
                        'svg',
                        'template',
                        'textarea',
                        'time',
                        'u',
                        'tt',
                        'var',
                        'video',
                        'wbr'
                    ];
                    this.blockNode = [
                        'div',
                        'h1',
                        'h2',
                        'h3',
                        'h4',
                        'h5',
                        'h6',
                        'address',
                        'blockquote',
                        'button',
                        'center',
                        'dd',
                        'dir',
                        'dl',
                        'dt',
                        'fieldset',
                        'frameset',
                        'hr',
                        'iframe',
                        'isindex',
                        'li',
                        'map',
                        'menu',
                        'noframes',
                        'noscript',
                        'object',
                        'ol',
                        'pre',
                        'td',
                        'tr',
                        'th',
                        'tbody',
                        'tfoot',
                        'thead',
                        'table',
                        'ul',
                        'header',
                        'article',
                        'nav',
                        'footer',
                        'section',
                        'aside',
                        'main',
                        'figure',
                        'figcaption'
                    ];
                    this.isNotFromHtml = false;
                    this.containsHtml = false;
                    this.parent = e;
                    this.locator = t;
                    this.renderFactory = this.locator.getService('rendererFactory');
                    this.i10n = t.getService('rteLocale');
                    this.dialogRenderObj = t.getService('dialogRenderObject');
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    this.nodeSelectionObj = new g.q();
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.parent.on(n.dI, this.pasteClean, this);
                    this.parent.on(n._8, this.setCssClass, this);
                    this.parent.on(n.ob, this.destroy, this);
                };
                e.prototype.destroy = function() {
                    this.removeEventListener();
                };
                e.prototype.removeEventListener = function() {
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.parent.off(n.dI, this.pasteClean);
                    this.parent.off(n._8, this.setCssClass);
                    this.parent.off(n.ob, this.destroy);
                };
                e.prototype.pasteClean = function(e) {
                    var t = this;
                    var i = {
                        requestType: 'Paste',
                        editorMode: this.parent.editorMode,
                        event: e
                    };
                    var r = null;
                    var o;
                    if (e.args && !(0, s.le)(e.args.clipboardData)) {
                        r = e.args.clipboardData.getData('text/html');
                    }
                    this.parent.trigger(n.xu, {
                        value: r
                    });
                    if (e.args && r !== null && this.parent.editorMode === 'HTML') {
                        if (r.length === 0) {
                            var a = new RegExp(/<\/[a-z][\s\S]*>/i);
                            r = e.args.clipboardData.getData('text/plain');
                            this.isNotFromHtml = r !== '' ? true : false;
                            r = r.replace(/</g, '&lt;');
                            r = r.replace(/>/g, '&gt;');
                            this.containsHtml = a.test(r);
                            var l = e && e.args.clipboardData && e.args.clipboardData.items.length > 0 ? (e.args.clipboardData.items[0].getAsFile() === null ? (!(0, s.le)(e.args.clipboardData.items[1]) ? e.args.clipboardData.items[1].getAsFile() : null) : e.args.clipboardData.items[0].getAsFile()) : null;
                            this.parent.notify(n.RE, {
                                file: l,
                                args: e.args,
                                text: r,
                                callBack: function(n) {
                                    o = n;
                                    if (typeof (o) === 'object') {
                                        t.parent.formatter.editorManager.execCommand('Images', 'Image', e.args, t.imageFormatting.bind(t, i), 'pasteCleanup', o, 'pasteCleanupModule');
                                    } else {
                                        r = o;
                                    }
                                }
                            });
                            if (!a.test(r)) {
                                var h = this.parent.createElement('div');
                                h.innerHTML = this.splitBreakLine(r);
                                r = h.innerHTML;
                            }
                        } else if (r.length > 0) {
                            this.parent.formatter.editorManager.observer.notify(b.Ki, {
                                args: e.args,
                                text: e.text,
                                allowedStylePropertiesArray: this.parent.pasteCleanupSettings.allowedStyleProps,
                                callBack: function(e) {
                                    r = e.trim();
                                }
                            });
                        }
                        this.contentRenderer = this.renderFactory.getRenderer(y.y2.Content);
                        var c = this.contentRenderer.getDocument();
                        var d = this.nodeSelectionObj.getRange(c);
                        this.saveSelection = this.nodeSelectionObj.save(d, c);
                        this.parent.trigger(n.v, {
                            value: r
                        }, function(e) {
                            r = e.value;
                        });
                        if (this.parent.pasteCleanupSettings.prompt) {
                            e.args.preventDefault();
                            var p = this.parent.createElement('div');
                            p.innerHTML = r;
                            if (p.textContent !== '' || !(0, s.le)(p.querySelector('img')) || !(0, s.le)(p.querySelector('table'))) {
                                this.pasteDialog(r, i);
                            }
                        } else if (this.parent.pasteCleanupSettings.plainText) {
                            e.args.preventDefault();
                            this.plainFormatting(r, i);
                        } else if (this.parent.pasteCleanupSettings.keepFormat) {
                            e.args.preventDefault();
                            this.formatting(r, false, i);
                        } else {
                            e.args.preventDefault();
                            this.formatting(r, true, i);
                        }
                    }
                };
                e.prototype.splitBreakLine = function(e) {
                    var t = e.split('\n');
                    var i = '';
                    for(var n = 0; n < t.length; n++){
                        if (t[n].trim() === '') {
                            i += (0, tg.oG)(this.parent);
                        } else {
                            var r = this.makeSpace(t[n]);
                            i += '<p>' + r.trim() + '</p>';
                        }
                    }
                    return i;
                };
                e.prototype.makeSpace = function(e) {
                    var t = '';
                    var i = true;
                    var n = e.split(' ');
                    for(var r = 0; r < n.length; r++){
                        if (n[r].trim() === '') {
                            t += i ? '&nbsp;' : ' ';
                        } else {
                            i = false;
                            t += n[r] + ' ';
                        }
                    }
                    return t;
                };
                e.prototype.imgUploading = function(e) {
                    var t = e.querySelectorAll('.pasteContent_Img');
                    if (this.parent.insertImageSettings.saveUrl && t.length > 0) {
                        var i = [];
                        var n = [];
                        var r = [];
                        for(var o = 0; o < t.length; o++){
                            if (t[o].getAttribute('src').split(',')[0].indexOf('base64') >= 0) {
                                i.push(t[o].getAttribute('src'));
                                n.push((0, s.QI)('rte_image'));
                                r.push(t[o]);
                            }
                        }
                        var a = [];
                        for(var o = 0; o < i.length; o++){
                            a.push(this.base64ToFile(i[o], n[o]));
                        }
                        for(var o = 0; o < a.length; o++){
                            this.uploadMethod(a[o], r[o]);
                        }
                        if ((0, s.le)(this.parent.insertImageSettings.path) && this.parent.insertImageSettings.saveFormat === 'Blob') {
                            this.getBlob(t);
                        }
                    } else if (this.parent.insertImageSettings.saveFormat === 'Blob') {
                        this.getBlob(t);
                    }
                    var l = e.querySelectorAll('.pasteContent_Img');
                    for(var o = 0; o < l.length; o++){
                        l[o].classList.remove('pasteContent_Img');
                        if (l[o].getAttribute('class').trim() === '') {
                            t[o].removeAttribute('class');
                        }
                    }
                };
                e.prototype.getBlob = function(e) {
                    for(var t = 0; t < e.length; t++){
                        if (!(0, s.le)(e[t].getAttribute('src')) && e[t].getAttribute('src').split(',')[0].indexOf('base64') >= 0) {
                            var i = URL.createObjectURL((0, tg.K_)(e[t].getAttribute('src')));
                            e[t].setAttribute('src', i);
                        }
                    }
                };
                e.prototype.toolbarEnableDisable = function(e) {
                    if (!this.parent.inlineMode.enable) {
                        this.parent.toolbarModule.baseToolbar.toolbarObj.disable(e);
                    }
                };
                e.prototype.uploadMethod = function(e, t) {
                    var i = this;
                    var o = document.createElement('div');
                    document.body.appendChild(o);
                    o.setAttribute('display', 'none');
                    t.style.opacity = '0.5';
                    var a = this.parent.createElement('div');
                    this.parent.element.appendChild(a);
                    var l = this.parent.createElement('input', {
                        id: this.parent.element.id + '_upload',
                        attrs: {
                            type: 'File',
                            name: 'UploadFiles'
                        }
                    });
                    var h = this.parent.iframeSettings.enable ? -50 : -90;
                    this.popupObj = new r.GI(a, {
                        relateTo: t,
                        height: '85px',
                        width: '300px',
                        offsetY: h,
                        content: l,
                        viewPortElement: this.parent.element,
                        position: {
                            X: 'center',
                            Y: 'top'
                        },
                        enableRtl: this.parent.enableRtl,
                        zIndex: 10001,
                        close: function(e) {
                            i.parent.isBlur = false;
                            i.popupObj.destroy();
                            (0, s.og)(i.popupObj.element);
                        }
                    });
                    this.popupObj.element.style.display = 'none';
                    (0, s.cn)([
                        this.popupObj.element
                    ], [
                        m._R,
                        m.MO
                    ]);
                    if (!(0, s.le)(this.parent.cssClass)) {
                        (0, s.cn)([
                            this.popupObj.element
                        ], this.parent.cssClass);
                    }
                    var c = e.size > 1000000 ? 300 : 100;
                    setTimeout(function() {
                        i.refreshPopup(t, i.popupObj);
                    }, c);
                    var d;
                    var p;
                    this.uploadObj = new tv({
                        asyncSettings: {
                            saveUrl: this.parent.insertImageSettings.saveUrl,
                            removeUrl: this.parent.insertImageSettings.removeUrl
                        },
                        cssClass: m.VE,
                        dropArea: this.parent.inputElement,
                        allowedExtensions: this.parent.insertImageSettings.allowedTypes.toString(),
                        success: function(e) {
                            setTimeout(function() {
                                i.popupClose(i.popupObj, i.uploadObj, t, e);
                            }, 900);
                        },
                        uploading: function(e) {
                            if (!i.parent.isServerRendered) {
                                i.parent.trigger(n.Go, e, function(e) {
                                    if (e.cancel) {
                                        if (!(0, s.le)(t)) {
                                            (0, s.og)(t);
                                        }
                                        if (!(0, s.le)(i.popupObj.element)) {
                                            (0, s.og)(i.popupObj.element);
                                        }
                                    } else {
                                        i.parent.inputElement.contentEditable = 'false';
                                    }
                                });
                            }
                        },
                        beforeUpload: function(e) {
                            if (i.parent.isServerRendered) {
                                p = JSON.parse(JSON.stringify(e));
                                p.filesData = d;
                                e.cancel = true;
                                i.parent.trigger(n.Go, p, function(e) {
                                    if (e.cancel) {
                                        return;
                                    }
                                    i.toolbarEnableDisable(true);
                                    i.uploadObj.currentRequestHeader = e.currentRequest ? e.currentRequest : i.uploadObj.currentRequestHeader;
                                    i.uploadObj.customFormDatas = e.customFormData && e.customFormData.length > 0 ? e.customFormData : i.uploadObj.customFormDatas;
                                    i.uploadObj.uploadFiles(d, null);
                                });
                            } else {
                                i.parent.trigger(n.cA, e);
                                i.toolbarEnableDisable(true);
                            }
                        },
                        failure: function(e) {
                            setTimeout(function() {
                                i.uploadFailure(t, i.uploadObj, i.popupObj, e);
                            }, 900);
                        },
                        canceling: function() {
                            i.parent.inputElement.contentEditable = 'true';
                            if (t.nextSibling.textContent === ' ') {
                                (0, s.og)(t.nextSibling);
                            }
                            (0, s.og)(t);
                            i.popupObj.close();
                        },
                        selected: function(e) {
                            e.cancel = true;
                            if (i.parent.isServerRendered) {
                                d = e.filesData;
                            }
                        },
                        removing: function() {
                            i.parent.inputElement.contentEditable = 'true';
                            if (t.nextSibling.textContent === ' ') {
                                (0, s.og)(t.nextSibling);
                            }
                            (0, s.og)(t);
                            i.popupObj.close();
                        }
                    });
                    this.uploadObj.appendTo(this.popupObj.element.childNodes[0]);
                    var u = [
                        {
                            name: e.name,
                            rawFile: e,
                            size: e.size,
                            type: e.type,
                            validationMessages: {
                                minSize: "",
                                maxSize: ""
                            },
                            statusCode: '1'
                        }
                    ];
                    this.uploadObj.createFileList(u);
                    this.uploadObj.filesData.push(u[0]);
                    d = u;
                    this.uploadObj.upload(u);
                    this.popupObj.element.getElementsByClassName('e-file-select-wrap')[0].style.display = 'none';
                    (0, s.og)(this.popupObj.element.querySelector('.e-rte-dialog-upload .e-file-select-wrap'));
                };
                e.prototype.uploadFailure = function(e, t, i, r) {
                    this.parent.inputElement.contentEditable = 'true';
                    (0, s.og)(e);
                    if (i) {
                        i.close();
                    }
                    this.parent.trigger(n.vD, r);
                    t.destroy();
                };
                e.prototype.popupClose = function(e, t, i, r) {
                    var o = this;
                    this.parent.inputElement.contentEditable = 'true';
                    r.element = i;
                    this.parent.trigger(n.AL, r, function(e) {
                        if (!(0, s.le)(o.parent.insertImageSettings.path)) {
                            var t = o.parent.insertImageSettings.path + e.file.name;
                            i.src = t;
                            i.setAttribute('alt', e.file.name);
                        }
                    });
                    e.close();
                    i.style.opacity = '1';
                    t.destroy();
                    this.toolbarEnableDisable(false);
                };
                e.prototype.refreshPopup = function(e, t) {
                    var i = this.parent.iframeSettings.enable ? this.parent.element.offsetTop + e.offsetTop : e.offsetTop;
                    var n = this.parent.element.offsetTop + this.parent.element.offsetHeight;
                    if (i > n) {
                        t.relateTo = this.parent.inputElement;
                        t.offsetY = this.parent.iframeSettings.enable ? -30 : -65;
                        t.element.style.display = 'block';
                    } else {
                        if (t) {
                            t.refreshPosition(e);
                            t.element.style.display = 'block';
                        }
                    }
                };
                e.prototype.base64ToFile = function(e, t) {
                    var i = e.split(',');
                    var n = i[0].match(/:(.*?);/)[1];
                    var r = n.split('/')[1];
                    var o = atob(i[1]);
                    var a = o.length;
                    var l = new Uint8Array(a);
                    while(a--){
                        l[a] = o.charCodeAt(a);
                    }
                    if (s.AR.isIE || navigator.appVersion.indexOf('Edge') > -1) {
                        var h = new Blob([
                            l
                        ], {
                            type: r
                        });
                        (0, s.l7)(h, {
                            name: t + '.' + (!(0, s.le)(r) ? r : '')
                        });
                        return h;
                    } else {
                        return new File([
                            l
                        ], t + '.' + (!(0, s.le)(r) ? r : ''), {
                            type: r
                        });
                    }
                };
                e.prototype.imageFormatting = function(e, t) {
                    var i = this.parent.createElement('span');
                    i.appendChild(t.elements[0]);
                    var n = i.innerHTML;
                    this.contentRenderer = this.renderFactory.getRenderer(y.y2.Content);
                    var r = this.contentRenderer.getDocument();
                    var s = this.nodeSelectionObj.getRange(r);
                    this.saveSelection = this.nodeSelectionObj.save(s, r);
                    if (this.parent.pasteCleanupSettings.prompt) {
                        this.pasteDialog(n, e);
                    } else if (this.parent.pasteCleanupSettings.plainText) {
                        this.plainFormatting(n, e);
                    } else if (this.parent.pasteCleanupSettings.keepFormat) {
                        this.formatting(n, false, e);
                    } else {
                        this.formatting(n, true, e);
                    }
                };
                e.prototype.radioRender = function() {
                    this.keepRadioButton = new f({
                        label: this.i10n.getConstant('keepFormat'),
                        name: 'pasteOption',
                        checked: true
                    });
                    this.keepRadioButton.isStringTemplate = true;
                    var e = this.parent.element.querySelector('#keepFormating');
                    this.keepRadioButton.appendTo(e);
                    this.cleanRadioButton = new f({
                        label: this.i10n.getConstant('cleanFormat'),
                        name: 'pasteOption'
                    });
                    this.cleanRadioButton.isStringTemplate = true;
                    var t = this.parent.element.querySelector('#cleanFormat');
                    this.cleanRadioButton.appendTo(t);
                    this.plainTextRadioButton = new f({
                        label: this.i10n.getConstant('plainText'),
                        name: 'pasteOption'
                    });
                    this.plainTextRadioButton.isStringTemplate = true;
                    var i = this.parent.element.querySelector('#plainTextFormat');
                    this.plainTextRadioButton.appendTo(i);
                };
                e.prototype.selectFormatting = function(e, t, i, n) {
                    if (i) {
                        this.formatting(e, false, t);
                    } else if (n) {
                        this.formatting(e, true, t);
                    } else {
                        this.plainFormatting(e, t);
                    }
                };
                e.prototype.pasteDialog = function(e, t) {
                    var i = this;
                    var n = false;
                    var r = this.parent.height;
                    var s = {
                        buttons: [
                            {
                                click: function() {
                                    if (!i.dialogObj.isDestroyed) {
                                        var s = i.parent.element.querySelector('#keepFormating').checked;
                                        var o = i.parent.element.querySelector('#cleanFormat').checked;
                                        i.dialogObj.hide();
                                        i.parent.height = n ? r : i.parent.height;
                                        n = false;
                                        var a = i.dialogObj;
                                        i.dialogRenderObj.close(a);
                                        i.dialogObj.destroy();
                                        i.selectFormatting(e, t, s, o);
                                    }
                                },
                                buttonModel: {
                                    isPrimary: true,
                                    cssClass: 'e-flat ' + m.mO,
                                    content: this.i10n.getConstant('pasteDialogOk')
                                }
                            },
                            {
                                click: function() {
                                    if (!i.dialogObj.isDestroyed) {
                                        i.dialogObj.hide();
                                        i.parent.height = n ? r : i.parent.height;
                                        n = false;
                                        var e = i.dialogObj;
                                        i.dialogRenderObj.close(e);
                                        i.dialogObj.destroy();
                                    }
                                },
                                buttonModel: {
                                    cssClass: 'e-flat ' + m.Gj,
                                    content: this.i10n.getConstant('pasteDialogCancel')
                                }
                            }
                        ],
                        header: this.i10n.getConstant('pasteFormat'),
                        content: this.i10n.getConstant('pasteFormatContent') + '<br/><div><div style="padding-top:24px;">' + '<input type="radio" class="' + m.cm + '" id="keepFormating"/>' + '</div><div style="padding-top:20px;"><input type="radio" class="' + m.jC + '" id="cleanFormat"/></div>' + '<div style="padding-top:20px;"><input type="radio" class="' + m.OC + '" id="plainTextFormat"/></div></div>',
                        target: this.parent.element,
                        width: '300px',
                        height: '265px',
                        cssClass: m.Rw,
                        isModal: true,
                        visible: false
                    };
                    this.dialogObj = this.dialogRenderObj.render(s);
                    var o = this.parent.element.querySelector('#' + this.parent.getID() + '_pasteCleanupDialog');
                    if (o !== null && o.innerHTML !== '') {
                        this.destroyDialog(o);
                    }
                    if (o === null) {
                        o = this.parent.createElement('div', {
                            id: this.parent.getID() + '_pasteCleanupDialog'
                        });
                        this.parent.element.appendChild(o);
                    }
                    this.dialogObj.appendTo(o);
                    this.radioRender();
                    if (this.parent.element.offsetHeight < parseInt(this.dialogObj.height.split('px')[0], null)) {
                        this.parent.height = parseInt(this.dialogObj.height.split('px')[0], null) + 40;
                        n = true;
                    }
                    this.dialogObj.show();
                    this.setCssClass({
                        cssClass: this.parent.cssClass
                    });
                };
                e.prototype.updateCss = function(e, t) {
                    if (e && t.cssClass) {
                        if ((0, s.le)(t.oldCssClass)) {
                            e.setProperties({
                                cssClass: (e.cssClass + ' ' + t.cssClass).trim()
                            });
                        } else {
                            e.setProperties({
                                cssClass: (e.cssClass.replace(t.oldCssClass, '').trim() + ' ' + t.cssClass).trim()
                            });
                        }
                    }
                };
                e.prototype.setCssClass = function(e) {
                    if (this.popupObj && e.cssClass) {
                        if ((0, s.le)(e.oldCssClass)) {
                            (0, s.cn)([
                                this.popupObj.element
                            ], e.cssClass);
                        } else {
                            (0, s.IV)([
                                this.popupObj.element
                            ], e.oldCssClass);
                            (0, s.cn)([
                                this.popupObj.element
                            ], e.cssClass);
                        }
                    }
                    this.updateCss(this.dialogObj, e);
                    this.updateCss(this.uploadObj, e);
                    this.updateCss(this.plainTextRadioButton, e);
                    this.updateCss(this.cleanRadioButton, e);
                    this.updateCss(this.keepRadioButton, e);
                };
                e.prototype.destroyDialog = function(e) {
                    var t = this.parent.element.querySelector('.e-dlg-container');
                    (0, s.og)(t);
                    var i = e.children.length;
                    for(var n = 0; n < i; n++){
                        (0, s.og)(e.children[0]);
                    }
                };
                e.prototype.cleanAppleClass = function(e) {
                    var t = e.querySelectorAll('br.Apple-interchange-newline');
                    for(var i = 0; i < t.length; i++){
                        (0, s.og)(t[i]);
                    }
                    return e;
                };
                e.prototype.formatting = function(e, t, i) {
                    var r = this;
                    var o = this.parent.createElement('div', {
                        className: 'pasteContent',
                        styles: 'display:inline;'
                    });
                    if (this.isNotFromHtml && this.containsHtml) {
                        e = this.splitBreakLine(e);
                    }
                    o.innerHTML = e;
                    o = this.cleanAppleClass(o);
                    if (this.parent.pasteCleanupSettings.deniedTags !== null) {
                        o = this.deniedTags(o);
                    }
                    if (t) {
                        o = this.deniedAttributes(o, t);
                    } else if (this.parent.pasteCleanupSettings.deniedAttrs !== null) {
                        o = this.deniedAttributes(o, t);
                    }
                    if (this.parent.pasteCleanupSettings.allowedStyleProps !== null) {
                        o = this.allowedStyle(o);
                    }
                    this.saveSelection.restore();
                    o.innerHTML = this.sanitizeHelper(o.innerHTML);
                    var a = o.querySelectorAll('img');
                    for(var l = 0; l < a.length; l++){
                        a[l].classList.add('pasteContent_Img');
                        if (this.parent.insertImageSettings.width !== 'auto') {
                            a[l].setAttribute('width', this.parent.insertImageSettings.width);
                        }
                        if (this.parent.insertImageSettings.minWidth !== '0' && this.parent.insertImageSettings.minWidth !== 0) {
                            a[l].style.minWidth = this.parent.insertImageSettings.minWidth.toString();
                        }
                        if (this.parent.insertImageSettings.maxWidth !== null) {
                            a[l].style.maxWidth = this.parent.getInsertImgMaxWidth().toString();
                        }
                        if (this.parent.insertImageSettings.height !== 'auto') {
                            a[l].setAttribute('height', this.parent.insertImageSettings.height);
                        }
                        if (this.parent.insertImageSettings.minHeight !== '0' && this.parent.insertImageSettings.minHeight !== 0) {
                            a[l].style.minHeight = this.parent.insertImageSettings.minHeight.toString();
                        }
                        if (this.parent.insertImageSettings.maxHeight !== null) {
                            a[l].style.maxHeight = this.parent.insertImageSettings.maxHeight.toString();
                        }
                    }
                    this.addTempClass(o);
                    if (o.textContent !== '' || !(0, s.le)(o.querySelector('img')) || !(0, s.le)(o.querySelector('table'))) {
                        this.parent.formatter.editorManager.execCommand('inserthtml', 'pasteCleanup', i, function(e) {
                            (0, s.l7)(i, {
                                elements: e.elements,
                                imageElements: e.imgElem
                            }, true);
                            r.parent.formatter.onSuccess(r.parent, i);
                        }, o);
                        this.removeTempClass();
                        this.parent.notify(n.l0, {});
                        this.imgUploading(this.parent.inputElement);
                        if (this.parent.iframeSettings.enable) {
                            this.parent.updateValue();
                        }
                    }
                };
                e.prototype.addTempClass = function(e) {
                    var t = e.children;
                    for(var i = 0; i < t.length; i++){
                        t[i].classList.add('pasteContent_RTE');
                    }
                };
                e.prototype.removeTempClass = function() {
                    var e = this.parent.inputElement.querySelectorAll('.pasteContent_RTE');
                    for(var t = 0; t < e.length; t++){
                        e[t].classList.remove('pasteContent_RTE');
                        if (e[t].getAttribute('class') === '') {
                            e[t].removeAttribute('class');
                        }
                    }
                };
                e.prototype.sanitizeHelper = function(e) {
                    e = (0, tg.cC)(e, this.parent);
                    return e;
                };
                e.prototype.plainFormatting = function(e, t) {
                    var i = this;
                    var n = this.parent.createElement('div', {
                        className: 'pasteContent',
                        styles: 'display:inline;'
                    });
                    n.innerHTML = e;
                    this.detachInlineElements(n);
                    this.getTextContent(n);
                    if (n.textContent.trim() !== '') {
                        if (!(0, s.le)(n.firstElementChild) && n.firstElementChild.tagName !== 'BR') {
                            var r = n.firstElementChild;
                            if (!(0, s.le)(n.firstElementChild)) {
                                var o = this.parent.createElement('span');
                                for(var a = 0, l = 0; a < r.childNodes.length; a++, l++){
                                    if (r.childNodes[a].nodeName === '#text') {
                                        o.appendChild(r.childNodes[a]);
                                        n.insertBefore(o, n.firstElementChild);
                                        a--;
                                    } else if (r.childNodes[a].nodeName !== '#text' && l === 0) {
                                        for(var h = 0; h < r.childNodes[a].childNodes.length; h++){
                                            o.appendChild(r.childNodes[a].childNodes[h]);
                                            n.insertBefore(o, n.firstElementChild);
                                            h--;
                                        }
                                        a--;
                                    } else {
                                        break;
                                    }
                                }
                                if (!r.hasChildNodes()) {
                                    (0, s.og)(r);
                                }
                            }
                        }
                        this.removeEmptyElements(n);
                        this.saveSelection.restore();
                        n.innerHTML = this.sanitizeHelper(n.innerHTML);
                        this.addTempClass(n);
                        this.parent.formatter.editorManager.execCommand('inserthtml', 'pasteCleanup', t, function(e) {
                            (0, s.l7)(t, {
                                elements: e.elements,
                                imageElements: e.imgElem
                            }, true);
                            i.parent.formatter.onSuccess(i.parent, t);
                        }, n);
                        this.removeTempClass();
                    } else {
                        this.saveSelection.restore();
                        (0, s.l7)(t, {
                            elements: []
                        }, true);
                        this.parent.formatter.onSuccess(this.parent, t);
                    }
                };
                e.prototype.getTextContent = function(e) {
                    for(var t = 0; t < this.blockNode.length; t++){
                        var i = e.querySelectorAll(this.blockNode[t]);
                        for(var n = 0; n < i.length; n++){
                            var r = void 0;
                            for(var o = 0, a = 0, l = void 0; o < i[n].childNodes.length; o++, a++){
                                if (i[n].childNodes[o].nodeName === 'DIV' || i[n].childNodes[o].nodeName === 'P' || (i[n].childNodes[o].nodeName === '#text' && (i[n].childNodes[o].nodeValue.replace(/\u00a0/g, '&nbsp;') !== '&nbsp;') && i[n].childNodes[o].textContent.trim() === '')) {
                                    r = i[n].childNodes[o].parentElement;
                                    i[n].childNodes[o].parentElement.parentElement.insertBefore(i[n].childNodes[o], i[n].childNodes[o].parentElement);
                                    o--;
                                } else {
                                    r = i[n].childNodes[o].parentElement;
                                    if (l === 'text') {
                                        var h = r.previousElementSibling;
                                        h.appendChild(i[n].childNodes[o]);
                                    } else {
                                        var c = this.parent.createElement('div', {
                                            id: 'newDiv'
                                        });
                                        c.appendChild(i[n].childNodes[o]);
                                        r.parentElement.insertBefore(c, r);
                                    }
                                    o--;
                                    l = 'text';
                                }
                            }
                            if (!(0, s.le)(r)) {
                                (0, s.og)(r);
                            }
                        }
                    }
                    var d = e.querySelectorAll('*');
                    for(var t = 0; t < d.length; t++){
                        var p = d[t].attributes;
                        for(var n = 0; n < p.length; n++){
                            d[t].removeAttribute(p[n].name);
                            n--;
                        }
                    }
                };
                e.prototype.detachInlineElements = function(e) {
                    for(var t = 0; t < this.inlineNode.length; t++){
                        var i = e.querySelectorAll(this.inlineNode[t]);
                        for(var n = 0; n < i.length; n++){
                            var r = void 0;
                            for(var o = 0; o < i[n].childNodes.length; o++){
                                r = i[n].childNodes[o].parentElement;
                                i[n].childNodes[o].parentElement.parentElement.insertBefore(i[n].childNodes[o], i[n].childNodes[o].parentElement);
                                o--;
                            }
                            if (!(0, s.le)(r)) {
                                (0, s.og)(r);
                            }
                        }
                    }
                };
                e.prototype.findDetachEmptyElem = function(e) {
                    var t;
                    if (!(0, s.le)(e.parentElement)) {
                        if (e.parentElement.textContent.trim() === '' && e.parentElement.getAttribute('class') !== 'pasteContent') {
                            t = this.findDetachEmptyElem(e.parentElement);
                        } else {
                            t = e;
                        }
                    } else {
                        t = null;
                    }
                    return t;
                };
                e.prototype.removeEmptyElements = function(e) {
                    var t = e.querySelectorAll(':empty');
                    for(var i = 0; i < t.length; i++){
                        if (t[i].tagName !== 'BR') {
                            var n = this.findDetachEmptyElem(t[i]);
                            if (!(0, s.le)(n)) {
                                (0, s.og)(n);
                            }
                        }
                    }
                };
                e.prototype.tagGrouping = function(e) {
                    var t = e.slice();
                    var i = Object.keys(v.n4);
                    var n = i.map(function(e) {
                        return v.n4[e];
                    });
                    var r = [];
                    for(var s = 0; s < t.length; s++){
                        if (t[s].split('[').length > 1) {
                            t[s] = t[s].split('[')[0].trim();
                        }
                        if (i.indexOf(t[s]) > -1) {
                            for(var o = 0; o < n[i.indexOf(t[s])].length; o++){
                                if (t.indexOf(n[i.indexOf(t[s])][o]) < 0 && r.indexOf(n[i.indexOf(t[s])][o]) < 0) {
                                    r.push(n[i.indexOf(t[s])][o]);
                                }
                            }
                        }
                    }
                    return e = e.concat(r);
                };
                e.prototype.attributesfilter = function(e) {
                    for(var t = 0; t < e.length; t++){
                        if (e[t].split('[').length > 1) {
                            var i = e[t].split('[')[1].split(']')[0].split(',');
                            var n = [];
                            var r = [];
                            for(var s = 0; s < i.length; s++){
                                i[s].indexOf('!') < 0 ? n.push(i[s].trim()) : r.push(i[s].split('!')[1].trim());
                            }
                            var o = n.length > 1 ? (n.join('][')) : (n.join());
                            var a = r.length > 1 ? r.join('][') : (r.join());
                            if (a.length > 0) {
                                var l = o !== '' ? e[t].split('[')[0] + '[' + o + ']' : e[t].split('[')[0];
                                e[t] = l + ':not([' + a + '])';
                            } else {
                                e[t] = e[t].split('[')[0] + '[' + o + ']';
                            }
                        }
                    }
                    return e;
                };
                e.prototype.deniedTags = function(e) {
                    var t = (0, s.le)(this.parent.pasteCleanupSettings.deniedTags) ? [] : this.parent.pasteCleanupSettings.deniedTags.slice();
                    t = this.attributesfilter(t);
                    t = this.tagGrouping(t);
                    for(var i = 0; i < t.length; i++){
                        var n = e.querySelectorAll(t[i]);
                        for(var r = n.length - 1; r >= 0; r--){
                            var o = n[r].parentNode;
                            while(n[r].firstChild){
                                o.insertBefore(n[r].firstChild, n[r]);
                            }
                            o.removeChild(n[r]);
                        }
                    }
                    return e;
                };
                e.prototype.deniedAttributes = function(e, t) {
                    var i = (0, s.le)(this.parent.pasteCleanupSettings.deniedAttrs) ? [] : this.parent.pasteCleanupSettings.deniedAttrs.slice();
                    if (t) {
                        i.push('style');
                    }
                    for(var n = 0; n < i.length; n++){
                        var r = e.querySelectorAll('[' + i[n] + ']');
                        for(var o = 0; o < r.length; o++){
                            r[o].removeAttribute(i[n]);
                        }
                    }
                    return e;
                };
                e.prototype.allowedStyle = function(e) {
                    var t = (0, s.le)(this.parent.pasteCleanupSettings.allowedStyleProps) ? [] : this.parent.pasteCleanupSettings.allowedStyleProps.slice();
                    t.push('list-style-type', 'list-style');
                    var i = e.querySelectorAll('[style]');
                    for(var n = 0; n < i.length; n++){
                        var r = '';
                        var o = [];
                        var a = i[n].getAttribute('style').split(';');
                        for(var l = 0; l < a.length; l++){
                            if (t.indexOf(a[l].split(':')[0].trim()) >= 0) {
                                o.push(a[l]);
                            }
                        }
                        i[n].removeAttribute('style');
                        r = o.join(';').trim() === '' ? o.join(';') : o.join(';') + ';';
                        if (r) {
                            i[n].setAttribute('style', r);
                        }
                    }
                    return e;
                };
                e.prototype.getModuleName = function() {
                    return 'pasteCleanup';
                };
                return e;
            }());
        }),
        8773: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "o": function() {
                    return im;
                }
            });
            var n = i(1807);
            var r = i(3386);
            var s = i(9805);
            var o = i(809);
            var a = i(5932);
            var l = i(3276);
            var h = i(9486);
            var c = i(6216);
            var d = i(78);
            ;
            var p = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var u = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var f = 'e-hscroll';
            var m = 'e-rtl';
            var v = 'e-overlay';
            var g = 'e-hscroll-bar';
            var b = 'e-hscroll-content';
            var y = 'e-nav-arrow';
            var C = 'e-nav-right-arrow';
            var E = 'e-nav-left-arrow';
            var S = 'e-scroll-nav';
            var w = 'e-scroll-right-nav';
            var T = 'e-scroll-left-nav';
            var k = 'e-scroll-device';
            var x = 'e-scroll-overlay';
            var L = 'e-scroll-right-overlay';
            var N = 'e-scroll-left-overlay';
            var D = 40;
            var O = (function(e) {
                p(t, e);
                function t(t, i) {
                    return e.call(this, t, i) || this;
                }
                t.prototype.preRender = function() {
                    this.browser = n.AR.info.name;
                    this.browserCheck = this.browser === 'mozilla';
                    this.isDevice = n.AR.isDevice;
                    this.customStep = true;
                    var e = this.element;
                    this.ieCheck = this.browser === 'edge' || this.browser === 'msie';
                    this.initialize();
                    if (e.id === '') {
                        e.id = (0, n.QI)('hscroll');
                        this.uniqueId = true;
                    }
                    e.style.display = 'block';
                    if (this.enableRtl) {
                        e.classList.add(m);
                    }
                };
                t.prototype.render = function() {
                    this.touchModule = new n.Xh(this.element, {
                        scroll: this.touchHandler.bind(this),
                        swipe: this.swipeHandler.bind(this)
                    });
                    n.bi.add(this.scrollEle, 'scroll', this.scrollHandler, this);
                    if (!this.isDevice) {
                        this.createNavIcon(this.element);
                    } else {
                        this.element.classList.add(k);
                        this.createOverlay(this.element);
                    }
                    this.setScrollState();
                };
                t.prototype.setScrollState = function() {
                    if ((0, n.le)(this.scrollStep) || this.scrollStep < 0) {
                        this.scrollStep = this.scrollEle.offsetWidth;
                        this.customStep = false;
                    } else {
                        this.customStep = true;
                    }
                };
                t.prototype.initialize = function() {
                    var e = this.createElement('div', {
                        className: b
                    });
                    var t = this.createElement('div', {
                        className: g
                    });
                    t.setAttribute('tabindex', '-1');
                    var i = this.element;
                    var n = [].slice.call(i.children);
                    for(var r = 0, s = n; r < s.length; r++){
                        var o = s[r];
                        e.appendChild(o);
                    }
                    t.appendChild(e);
                    i.appendChild(t);
                    t.style.overflowX = 'hidden';
                    this.scrollEle = t;
                    this.scrollItems = e;
                };
                t.prototype.getPersistData = function() {
                    var e = [
                        'scrollStep'
                    ];
                    return this.addOnPersist(e);
                };
                t.prototype.getModuleName = function() {
                    return 'hScroll';
                };
                t.prototype.destroy = function() {
                    var t = this.element;
                    t.style.display = '';
                    t.classList.remove(f);
                    t.classList.remove(k);
                    var i = (0, n.td)('.e-' + t.id + '_nav.' + S, t);
                    var r = (0, n.td)('.' + x, t);
                    [].slice.call(r).forEach(function(e) {
                        (0, n.og)(e);
                    });
                    for(var s = 0, o = [].slice.call(this.scrollItems.children); s < o.length; s++){
                        var a = o[s];
                        t.appendChild(a);
                    }
                    if (this.uniqueId) {
                        this.element.removeAttribute('id');
                    }
                    (0, n.og)(this.scrollEle);
                    if (i.length > 0) {
                        (0, n.og)(i[0]);
                        if (!(0, n.le)(i[1])) {
                            (0, n.og)(i[1]);
                        }
                    }
                    n.bi.remove(this.scrollEle, 'scroll', this.scrollHandler);
                    this.touchModule.destroy();
                    this.touchModule = null;
                    e.prototype.destroy.call(this);
                };
                t.prototype.disable = function(e) {
                    var t = (0, n.td)('.e-scroll-nav:not(.' + v + ')', this.element);
                    if (e) {
                        this.element.classList.add(v);
                    } else {
                        this.element.classList.remove(v);
                    }
                    [].slice.call(t).forEach(function(t) {
                        t.setAttribute('tabindex', !e ? '0' : '-1');
                    });
                };
                t.prototype.createOverlay = function(e) {
                    var t = e.id.concat('_nav');
                    var i = this.createElement('div', {
                        className: x + ' ' + L
                    });
                    var n = 'e-' + e.id.concat('_nav ' + S + ' ' + w);
                    var r = this.createElement('div', {
                        id: t.concat('_right'),
                        className: n
                    });
                    var s = this.createElement('div', {
                        className: C + ' ' + y + ' e-icons'
                    });
                    r.appendChild(s);
                    var o = this.createElement('div', {
                        className: x + ' ' + N
                    });
                    if (this.ieCheck) {
                        r.classList.add('e-ie-align');
                    }
                    e.appendChild(i);
                    e.appendChild(r);
                    e.insertBefore(o, e.firstChild);
                    this.eventBinding([
                        r
                    ]);
                };
                t.prototype.createNavIcon = function(e) {
                    var t = e.id.concat('_nav');
                    var i = 'e-' + e.id.concat('_nav ' + S + ' ' + w);
                    var n = {
                        'role': 'button',
                        'id': t.concat('_right'),
                        'aria-label': 'Scroll right'
                    };
                    var r = this.createElement('div', {
                        className: i,
                        attrs: n
                    });
                    r.setAttribute('aria-disabled', 'false');
                    var s = this.createElement('div', {
                        className: C + ' ' + y + ' e-icons'
                    });
                    var o = 'e-' + e.id.concat('_nav ' + S + ' ' + T);
                    var a = {
                        'role': 'button',
                        'id': t.concat('_left'),
                        'aria-label': 'Scroll left'
                    };
                    var l = this.createElement('div', {
                        className: o + ' ' + v,
                        attrs: a
                    });
                    l.setAttribute('aria-disabled', 'true');
                    var h = this.createElement('div', {
                        className: E + ' ' + y + ' e-icons'
                    });
                    l.appendChild(h);
                    r.appendChild(s);
                    e.appendChild(r);
                    e.insertBefore(l, e.firstChild);
                    if (this.ieCheck) {
                        r.classList.add('e-ie-align');
                        l.classList.add('e-ie-align');
                    }
                    this.eventBinding([
                        r,
                        l
                    ]);
                };
                t.prototype.onKeyPress = function(e) {
                    var t = this;
                    if (e.key === 'Enter') {
                        var i = function() {
                            t.keyTimeout = true;
                            t.eleScrolling(10, e.target, true);
                        };
                        this.keyTimer = window.setTimeout(function() {
                            i();
                        }, 100);
                    }
                };
                t.prototype.onKeyUp = function(e) {
                    if (e.key !== 'Enter') {
                        return;
                    }
                    if (this.keyTimeout) {
                        this.keyTimeout = false;
                    } else {
                        e.target.click();
                    }
                    clearTimeout(this.keyTimer);
                };
                t.prototype.eventBinding = function(e) {
                    var t = this;
                    [].slice.call(e).forEach(function(e) {
                        new n.Xh(e, {
                            tapHold: t.tabHoldHandler.bind(t),
                            tapHoldThreshold: 500
                        });
                        e.addEventListener('keydown', t.onKeyPress.bind(t));
                        e.addEventListener('keyup', t.onKeyUp.bind(t));
                        e.addEventListener('mouseup', t.repeatScroll.bind(t));
                        e.addEventListener('touchend', t.repeatScroll.bind(t));
                        e.addEventListener('contextmenu', function(e) {
                            e.preventDefault();
                        });
                        n.bi.add(e, 'click', t.clickEventHandler, t);
                    });
                };
                t.prototype.repeatScroll = function() {
                    clearInterval(this.timeout);
                };
                t.prototype.tabHoldHandler = function(e) {
                    var t = this;
                    var i = e.originalEvent.target;
                    i = this.contains(i, S) ? i.firstElementChild : i;
                    var n = 10;
                    var r = function() {
                        t.eleScrolling(n, i, true);
                    };
                    this.timeout = window.setInterval(function() {
                        r();
                    }, 50);
                };
                t.prototype.contains = function(e, t) {
                    return e.classList.contains(t);
                };
                t.prototype.eleScrolling = function(e, t, i) {
                    var n = this.element;
                    var r = t.classList;
                    if (r.contains(S)) {
                        r = t.querySelector('.' + y).classList;
                    }
                    if (this.contains(n, m) && this.browserCheck) {
                        e = -e;
                    }
                    if ((!this.contains(n, m) || this.browserCheck) || this.ieCheck) {
                        if (r.contains(C)) {
                            this.frameScrollRequest(e, 'add', i);
                        } else {
                            this.frameScrollRequest(e, '', i);
                        }
                    } else {
                        if (r.contains(E)) {
                            this.frameScrollRequest(e, 'add', i);
                        } else {
                            this.frameScrollRequest(e, '', i);
                        }
                    }
                };
                t.prototype.clickEventHandler = function(e) {
                    this.eleScrolling(this.scrollStep, e.target, false);
                };
                t.prototype.swipeHandler = function(e) {
                    var t = this.scrollEle;
                    var i;
                    if (e.velocity <= 1) {
                        i = e.distanceX / (e.velocity * 10);
                    } else {
                        i = e.distanceX / e.velocity;
                    }
                    var n = 0.5;
                    var r = function() {
                        var s = Math.sin(n);
                        if (s <= 0) {
                            window.cancelAnimationFrame(s);
                        } else {
                            if (e.swipeDirection === 'Left') {
                                t.scrollLeft += i * s;
                            } else if (e.swipeDirection === 'Right') {
                                t.scrollLeft -= i * s;
                            }
                            n -= 0.5;
                            window.requestAnimationFrame(r);
                        }
                    };
                    r();
                };
                t.prototype.scrollUpdating = function(e, t) {
                    if (t === 'add') {
                        this.scrollEle.scrollLeft += e;
                    } else {
                        this.scrollEle.scrollLeft -= e;
                    }
                };
                t.prototype.frameScrollRequest = function(e, t, i) {
                    var r = this;
                    var s = 10;
                    if (i) {
                        this.scrollUpdating(e, t);
                        return;
                    }
                    if (!this.customStep) {
                        [].slice.call((0, n.td)('.' + x, this.element)).forEach(function(t) {
                            e -= t.offsetWidth;
                        });
                    }
                    var o = function() {
                        var i;
                        var n;
                        if (r.contains(r.element, m) && r.browserCheck) {
                            i = -e;
                            n = -s;
                        } else {
                            i = e;
                            n = s;
                        }
                        if (i < s) {
                            window.cancelAnimationFrame(n);
                        } else {
                            r.scrollUpdating(n, t);
                            e -= n;
                            window.requestAnimationFrame(o);
                        }
                    };
                    o();
                };
                t.prototype.touchHandler = function(e) {
                    var t = this.scrollEle;
                    var i = e.distanceX;
                    if ((this.ieCheck) && this.contains(this.element, m)) {
                        i = -i;
                    }
                    if (e.scrollDirection === 'Left') {
                        t.scrollLeft = t.scrollLeft + i;
                    } else if (e.scrollDirection === 'Right') {
                        t.scrollLeft = t.scrollLeft - i;
                    }
                };
                t.prototype.arrowDisabling = function(e, t) {
                    if (this.isDevice) {
                        var i = (0, n.le)(e) ? t : e;
                        var r = i.querySelector('.' + y);
                        if ((0, n.le)(e)) {
                            (0, n.s1)(r, [
                                C
                            ], [
                                E
                            ]);
                        } else {
                            (0, n.s1)(r, [
                                E
                            ], [
                                C
                            ]);
                        }
                    } else if (e && t) {
                        e.classList.add(v);
                        e.setAttribute('aria-disabled', 'true');
                        e.removeAttribute('tabindex');
                        t.classList.remove(v);
                        t.setAttribute('aria-disabled', 'false');
                        t.setAttribute('tabindex', '0');
                    }
                    this.repeatScroll();
                };
                t.prototype.scrollHandler = function(e) {
                    var t = e.target;
                    var i = t.offsetWidth;
                    var n = this.element;
                    var r = this.element.querySelector('.' + T);
                    var s = this.element.querySelector('.' + w);
                    var o = this.element.querySelector('.' + N);
                    var a = this.element.querySelector('.' + L);
                    var l = t.scrollLeft;
                    if (l <= 0) {
                        l = -l;
                    }
                    if (this.isDevice) {
                        if (this.enableRtl && !(this.browserCheck || this.ieCheck)) {
                            o = this.element.querySelector('.' + L);
                            a = this.element.querySelector('.' + N);
                        }
                        if (l < D) {
                            o.style.width = l + 'px';
                        } else {
                            o.style.width = '40px';
                        }
                        if ((t.scrollWidth - Math.ceil(i + l)) < D) {
                            a.style.width = (t.scrollWidth - Math.ceil(i + l)) + 'px';
                        } else {
                            a.style.width = '40px';
                        }
                    }
                    if (l === 0) {
                        this.arrowDisabling(r, s);
                    } else if (Math.ceil(i + l + .1) >= t.scrollWidth) {
                        this.arrowDisabling(s, r);
                    } else {
                        var h = this.element.querySelector('.' + S + '.' + v);
                        if (h) {
                            h.classList.remove(v);
                            h.setAttribute('aria-disabled', 'false');
                            h.setAttribute('tabindex', '0');
                        }
                    }
                };
                t.prototype.onPropertyChanged = function(e, t) {
                    for(var i = 0, n = Object.keys(e); i < n.length; i++){
                        var r = n[i];
                        switch(r){
                            case 'scrollStep':
                                this.setScrollState();
                                break;
                            case 'enableRtl':
                                e.enableRtl ? this.element.classList.add(m) : this.element.classList.remove(m);
                                break;
                        }
                    }
                };
                u([
                    (0, n.Z9)(null)
                ], t.prototype, "scrollStep", void 0);
                t = u([
                    n.Zl
                ], t);
                return t;
            }(n.wA));
            ;
            var A = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var P = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var M = 'e-vscroll';
            var R = 'e-rtl';
            var B = 'e-overlay';
            var I = 'e-vscroll-bar';
            var H = 'e-vscroll-content';
            var F = 'e-nav-arrow';
            var j = 'e-nav-up-arrow';
            var z = 'e-nav-down-arrow';
            var q = 'e-scroll-nav';
            var V = 'e-scroll-up-nav';
            var _ = 'e-scroll-down-nav';
            var U = 'e-scroll-device';
            var W = 'e-scroll-overlay';
            var Z = 'e-scroll-up-overlay';
            var Y = 'e-scroll-down-overlay';
            var X = 40;
            var G = (function(e) {
                A(t, e);
                function t(t, i) {
                    return e.call(this, t, i) || this;
                }
                t.prototype.preRender = function() {
                    this.browser = n.AR.info.name;
                    this.browserCheck = this.browser === 'mozilla';
                    this.isDevice = n.AR.isDevice;
                    this.customStep = true;
                    var e = this.element;
                    this.ieCheck = this.browser === 'edge' || this.browser === 'msie';
                    this.initialize();
                    if (e.id === '') {
                        e.id = (0, n.QI)('vscroll');
                        this.uniqueId = true;
                    }
                    e.style.display = 'block';
                    if (this.enableRtl) {
                        e.classList.add(R);
                    }
                };
                t.prototype.render = function() {
                    this.touchModule = new n.Xh(this.element, {
                        scroll: this.touchHandler.bind(this),
                        swipe: this.swipeHandler.bind(this)
                    });
                    n.bi.add(this.scrollEle, 'scroll', this.scrollEventHandler, this);
                    if (!this.isDevice) {
                        this.createNavIcon(this.element);
                    } else {
                        this.element.classList.add(U);
                        this.createOverlayElement(this.element);
                    }
                    this.setScrollState();
                    n.bi.add(this.element, 'wheel', this.wheelEventHandler, this);
                };
                t.prototype.setScrollState = function() {
                    if ((0, n.le)(this.scrollStep) || this.scrollStep < 0) {
                        this.scrollStep = this.scrollEle.offsetHeight;
                        this.customStep = false;
                    } else {
                        this.customStep = true;
                    }
                };
                t.prototype.initialize = function() {
                    var e = (0, n.az)('div', {
                        className: H
                    });
                    var t = (0, n.az)('div', {
                        className: I
                    });
                    t.setAttribute('tabindex', '-1');
                    var i = this.element;
                    var r = [].slice.call(i.children);
                    for(var s = 0, o = r; s < o.length; s++){
                        var a = o[s];
                        e.appendChild(a);
                    }
                    t.appendChild(e);
                    i.appendChild(t);
                    t.style.overflow = 'hidden';
                    this.scrollEle = t;
                    this.scrollItems = e;
                };
                t.prototype.getPersistData = function() {
                    var e = [
                        'scrollStep'
                    ];
                    return this.addOnPersist(e);
                };
                t.prototype.getModuleName = function() {
                    return 'vScroll';
                };
                t.prototype.destroy = function() {
                    var t = this.element;
                    t.style.display = '';
                    (0, n.IV)([
                        this.element
                    ], [
                        M,
                        U
                    ]);
                    var i = (0, n.td)('.e-' + t.id + '_nav.' + q, t);
                    var r = (0, n.td)('.' + W, t);
                    [].slice.call(r).forEach(function(e) {
                        (0, n.og)(e);
                    });
                    for(var s = 0, o = [].slice.call(this.scrollItems.children); s < o.length; s++){
                        var a = o[s];
                        t.appendChild(a);
                    }
                    if (this.uniqueId) {
                        this.element.removeAttribute('id');
                    }
                    (0, n.og)(this.scrollEle);
                    if (i.length > 0) {
                        (0, n.og)(i[0]);
                        if (!(0, n.le)(i[1])) {
                            (0, n.og)(i[1]);
                        }
                    }
                    n.bi.remove(this.scrollEle, 'scroll', this.scrollEventHandler);
                    this.touchModule.destroy();
                    this.touchModule = null;
                    e.prototype.destroy.call(this);
                };
                t.prototype.disable = function(e) {
                    var t = (0, n.td)('.e-scroll-nav:not(.' + B + ')', this.element);
                    if (e) {
                        this.element.classList.add(B);
                    } else {
                        this.element.classList.remove(B);
                    }
                    [].slice.call(t).forEach(function(t) {
                        t.setAttribute('tabindex', !e ? '0' : '-1');
                    });
                };
                t.prototype.createOverlayElement = function(e) {
                    var t = e.id.concat('_nav');
                    var i = (0, n.az)('div', {
                        className: W + ' ' + Y
                    });
                    var r = 'e-' + e.id.concat('_nav ' + q + ' ' + _);
                    var s = (0, n.az)('div', {
                        id: t.concat('down'),
                        className: r
                    });
                    var o = (0, n.az)('div', {
                        className: z + ' ' + F + ' e-icons'
                    });
                    s.appendChild(o);
                    var a = (0, n.az)('div', {
                        className: W + ' ' + Z
                    });
                    if (this.ieCheck) {
                        s.classList.add('e-ie-align');
                    }
                    e.appendChild(i);
                    e.appendChild(s);
                    e.insertBefore(a, e.firstChild);
                    this.eventBinding([
                        s
                    ]);
                };
                t.prototype.createNavIcon = function(e) {
                    var t = e.id.concat('_nav');
                    var i = 'e-' + e.id.concat('_nav ' + q + ' ' + _);
                    var r = (0, n.az)('div', {
                        id: t.concat('_down'),
                        className: i
                    });
                    r.setAttribute('aria-disabled', 'false');
                    var s = (0, n.az)('div', {
                        className: z + ' ' + F + ' e-icons'
                    });
                    var o = 'e-' + e.id.concat('_nav ' + q + ' ' + V);
                    var a = (0, n.az)('div', {
                        id: t.concat('_up'),
                        className: o + ' ' + B
                    });
                    a.setAttribute('aria-disabled', 'true');
                    var l = (0, n.az)('div', {
                        className: j + ' ' + F + ' e-icons'
                    });
                    a.appendChild(l);
                    r.appendChild(s);
                    r.setAttribute('tabindex', '0');
                    e.appendChild(r);
                    e.insertBefore(a, e.firstChild);
                    if (this.ieCheck) {
                        r.classList.add('e-ie-align');
                        a.classList.add('e-ie-align');
                    }
                    this.eventBinding([
                        r,
                        a
                    ]);
                };
                t.prototype.onKeyPress = function(e) {
                    var t = this;
                    if (e.key === 'Enter') {
                        var i = function() {
                            t.keyTimeout = true;
                            t.eleScrolling(10, e.target, true);
                        };
                        this.keyTimer = window.setTimeout(function() {
                            i();
                        }, 100);
                    }
                };
                t.prototype.onKeyUp = function(e) {
                    if (e.key !== 'Enter') {
                        return;
                    }
                    if (this.keyTimeout) {
                        this.keyTimeout = false;
                    } else {
                        e.target.click();
                    }
                    clearTimeout(this.keyTimer);
                };
                t.prototype.eventBinding = function(e) {
                    var t = this;
                    [].slice.call(e).forEach(function(e) {
                        new n.Xh(e, {
                            tapHold: t.tabHoldHandler.bind(t),
                            tapHoldThreshold: 500
                        });
                        e.addEventListener('keydown', t.onKeyPress.bind(t));
                        e.addEventListener('keyup', t.onKeyUp.bind(t));
                        e.addEventListener('mouseup', t.repeatScroll.bind(t));
                        e.addEventListener('touchend', t.repeatScroll.bind(t));
                        e.addEventListener('contextmenu', function(e) {
                            e.preventDefault();
                        });
                        n.bi.add(e, 'click', t.clickEventHandler, t);
                    });
                };
                t.prototype.repeatScroll = function() {
                    clearInterval(this.timeout);
                };
                t.prototype.tabHoldHandler = function(e) {
                    var t = this;
                    var i = e.originalEvent.target;
                    i = this.contains(i, q) ? i.firstElementChild : i;
                    var n = 10;
                    var r = function() {
                        t.eleScrolling(n, i, true);
                    };
                    this.timeout = window.setInterval(function() {
                        r();
                    }, 50);
                };
                t.prototype.contains = function(e, t) {
                    return e.classList.contains(t);
                };
                t.prototype.eleScrolling = function(e, t, i) {
                    var n = t.classList;
                    if (n.contains(q)) {
                        n = t.querySelector('.' + F).classList;
                    }
                    if (n.contains(z)) {
                        this.frameScrollRequest(e, 'add', i);
                    } else if (n.contains(j)) {
                        this.frameScrollRequest(e, '', i);
                    }
                };
                t.prototype.clickEventHandler = function(e) {
                    this.eleScrolling(this.scrollStep, e.target, false);
                };
                t.prototype.wheelEventHandler = function(e) {
                    e.preventDefault();
                    this.frameScrollRequest(this.scrollStep, (e.deltaY > 0 ? 'add' : ''), false);
                };
                t.prototype.swipeHandler = function(e) {
                    var t = this.scrollEle;
                    var i;
                    if (e.velocity <= 1) {
                        i = e.distanceY / (e.velocity * 10);
                    } else {
                        i = e.distanceY / e.velocity;
                    }
                    var n = 0.5;
                    var r = function() {
                        var s = Math.sin(n);
                        if (s <= 0) {
                            window.cancelAnimationFrame(s);
                        } else {
                            if (e.swipeDirection === 'Up') {
                                t.scrollTop += i * s;
                            } else if (e.swipeDirection === 'Down') {
                                t.scrollTop -= i * s;
                            }
                            n -= 0.02;
                            window.requestAnimationFrame(r);
                        }
                    };
                    r();
                };
                t.prototype.scrollUpdating = function(e, t) {
                    if (t === 'add') {
                        this.scrollEle.scrollTop += e;
                    } else {
                        this.scrollEle.scrollTop -= e;
                    }
                };
                t.prototype.frameScrollRequest = function(e, t, i) {
                    var r = this;
                    var s = 10;
                    if (i) {
                        this.scrollUpdating(e, t);
                        return;
                    }
                    if (!this.customStep) {
                        [].slice.call((0, n.td)('.' + W, this.element)).forEach(function(t) {
                            e -= t.offsetHeight;
                        });
                    }
                    var o = function() {
                        if (e < s) {
                            window.cancelAnimationFrame(s);
                        } else {
                            r.scrollUpdating(s, t);
                            e -= s;
                            window.requestAnimationFrame(o);
                        }
                    };
                    o();
                };
                t.prototype.touchHandler = function(e) {
                    var t = this.scrollEle;
                    var i = e.distanceY;
                    if (e.scrollDirection === 'Up') {
                        t.scrollTop = t.scrollTop + i;
                    } else if (e.scrollDirection === 'Down') {
                        t.scrollTop = t.scrollTop - i;
                    }
                };
                t.prototype.arrowDisabling = function(e, t) {
                    if (this.isDevice) {
                        var i = (0, n.le)(e) ? t : e;
                        var r = i.querySelector('.' + F);
                        if ((0, n.le)(e)) {
                            (0, n.s1)(r, [
                                z
                            ], [
                                j
                            ]);
                        } else {
                            (0, n.s1)(r, [
                                j
                            ], [
                                z
                            ]);
                        }
                    } else {
                        e.classList.add(B);
                        e.setAttribute('aria-disabled', 'true');
                        e.removeAttribute('tabindex');
                        t.classList.remove(B);
                        t.setAttribute('aria-disabled', 'false');
                        t.setAttribute('tabindex', '0');
                    }
                    this.repeatScroll();
                };
                t.prototype.scrollEventHandler = function(e) {
                    var t = e.target;
                    var i = t.offsetHeight;
                    var n = this.element.querySelector('.' + V);
                    var r = this.element.querySelector('.' + _);
                    var s = this.element.querySelector('.' + Z);
                    var o = this.element.querySelector('.' + Y);
                    var a = t.scrollTop;
                    if (a <= 0) {
                        a = -a;
                    }
                    if (this.isDevice) {
                        if (a < X) {
                            s.style.height = a + 'px';
                        } else {
                            s.style.height = '40px';
                        }
                        if ((t.scrollHeight - Math.ceil(i + a)) < X) {
                            o.style.height = (t.scrollHeight - Math.ceil(i + a)) + 'px';
                        } else {
                            o.style.height = '40px';
                        }
                    }
                    if (a === 0) {
                        this.arrowDisabling(n, r);
                    } else if (Math.ceil(i + a + .1) >= t.scrollHeight) {
                        this.arrowDisabling(r, n);
                    } else {
                        var l = this.element.querySelector('.' + q + '.' + B);
                        if (l) {
                            l.classList.remove(B);
                            l.setAttribute('aria-disabled', 'false');
                            l.setAttribute('tabindex', '0');
                        }
                    }
                };
                t.prototype.onPropertyChanged = function(e, t) {
                    for(var i = 0, n = Object.keys(e); i < n.length; i++){
                        var r = n[i];
                        switch(r){
                            case 'scrollStep':
                                this.setScrollState();
                                break;
                            case 'enableRtl':
                                if (e.enableRtl) {
                                    this.element.classList.add(R);
                                } else {
                                    this.element.classList.remove(R);
                                }
                                break;
                        }
                    }
                };
                P([
                    (0, n.Z9)(null)
                ], t.prototype, "scrollStep", void 0);
                t = P([
                    n.Zl
                ], t);
                return t;
            }(n.wA));
            ;
            var K = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var J = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var $ = 'e-vertical';
            var Q = 'e-toolbar-items';
            var ee = 'e-toolbar-item';
            var et = 'e-rtl';
            var ei = 'e-separator';
            var en = 'e-popup-up-icon';
            var er = 'e-popup-down-icon';
            var es = 'e-popup-open';
            var eo = 'e-template';
            var ea = 'e-overlay';
            var el = 'e-toolbar-text';
            var eh = 'e-popup-text';
            var ec = 'e-overflow-show';
            var ed = 'e-overflow-hide';
            var ep = 'e-tbar-btn';
            var eu = 'e-hor-nav';
            var ef = 'e-scroll-nav';
            var em = 'e-toolbar-right';
            var ev = 'e-toolbar-left';
            var eg = 'e-toolbar-center';
            var eb = 'e-tbar-pos';
            var ey = 'e-hscroll-content';
            var eC = 'e-vscroll-content';
            var eE = 'e-hscroll-bar';
            var eS = 'e-hor-nav';
            var ew = 'e-toolbar-pop';
            var eT = 'e-toolbar-popup';
            var ek = 'e-tbar-btn-text';
            var ex = 'e-nav-active';
            var eL = 'e-ignore';
            var eN = 'e-popup-alone';
            var eD = 'e-hidden';
            var eO = 'e-toolbar-multirow';
            var eA = 'e-multirow-pos';
            var eP = 'e-multirow-separator';
            var eM = 'e-extended-separator';
            var eR = 'e-extended-toolbar';
            var eB = 'e-toolbar-extended';
            var eI = 'e-expended-nav';
            var eH = 'e-tbar-extended';
            var eF = (function(e) {
                K(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                J([
                    (0, n.Z9)('')
                ], t.prototype, "id", void 0);
                J([
                    (0, n.Z9)('')
                ], t.prototype, "text", void 0);
                J([
                    (0, n.Z9)('auto')
                ], t.prototype, "width", void 0);
                J([
                    (0, n.Z9)('')
                ], t.prototype, "cssClass", void 0);
                J([
                    (0, n.Z9)(false)
                ], t.prototype, "showAlwaysInPopup", void 0);
                J([
                    (0, n.Z9)(false)
                ], t.prototype, "disabled", void 0);
                J([
                    (0, n.Z9)('')
                ], t.prototype, "prefixIcon", void 0);
                J([
                    (0, n.Z9)('')
                ], t.prototype, "suffixIcon", void 0);
                J([
                    (0, n.Z9)(true)
                ], t.prototype, "visible", void 0);
                J([
                    (0, n.Z9)('None')
                ], t.prototype, "overflow", void 0);
                J([
                    (0, n.Z9)('')
                ], t.prototype, "template", void 0);
                J([
                    (0, n.Z9)('Button')
                ], t.prototype, "type", void 0);
                J([
                    (0, n.Z9)('Both')
                ], t.prototype, "showTextOn", void 0);
                J([
                    (0, n.Z9)(null)
                ], t.prototype, "htmlAttributes", void 0);
                J([
                    (0, n.Z9)('')
                ], t.prototype, "tooltipText", void 0);
                J([
                    (0, n.Z9)('Left')
                ], t.prototype, "align", void 0);
                J([
                    (0, n.ju)()
                ], t.prototype, "click", void 0);
                return t;
            }(n.rt));
            var ej = (function(e) {
                K(t, e);
                function t(t, i) {
                    var n = e.call(this, t, i) || this;
                    n.resizeContext = n.resize.bind(n);
                    n.keyConfigs = {
                        moveLeft: 'leftarrow',
                        moveRight: 'rightarrow',
                        moveUp: 'uparrow',
                        moveDown: 'downarrow',
                        popupOpen: 'enter',
                        popupClose: 'escape',
                        tab: 'tab',
                        home: 'home',
                        end: 'end'
                    };
                    return n;
                }
                t.prototype.destroy = function() {
                    var t = this;
                    if (this.isReact || this.isAngular) {
                        this.clearTemplate();
                    }
                    var i = this.element.querySelectorAll('.e-control.e-btn');
                    [].slice.call(i).forEach(function(e) {
                        if (!(0, n.le)(e) && !(0, n.le)(e.ej2_instances) && !(0, n.le)(e.ej2_instances[0]) && !(e.ej2_instances[0].isDestroyed)) {
                            e.ej2_instances[0].destroy();
                        }
                    });
                    this.unwireEvents();
                    this.tempId.forEach(function(e) {
                        if (!(0, n.le)(t.element.querySelector(e))) {
                            document.body.appendChild(t.element.querySelector(e)).style.display = 'none';
                        }
                    });
                    this.destroyItems();
                    while(this.element.lastElementChild){
                        this.element.removeChild(this.element.lastElementChild);
                    }
                    if (this.trgtEle) {
                        this.element.appendChild(this.ctrlTem);
                        this.trgtEle = null;
                        this.ctrlTem = null;
                    }
                    if (this.popObj) {
                        this.popObj.destroy();
                        (0, n.og)(this.popObj.element);
                    }
                    if (this.activeEle) {
                        this.activeEle = null;
                    }
                    this.popObj = null;
                    this.tbarAlign = null;
                    this.tbarItemsCol = [];
                    this.remove(this.element, 'e-toolpop');
                    if (this.cssClass) {
                        (0, n.IV)([
                            this.element
                        ], this.cssClass.split(' '));
                    }
                    this.element.removeAttribute('style');
                    [
                        'aria-disabled',
                        'aria-orientation',
                        'aria-haspopup',
                        'role'
                    ].forEach(function(e) {
                        return t.element.removeAttribute(e);
                    });
                    e.prototype.destroy.call(this);
                };
                t.prototype.preRender = function() {
                    var e = {
                        enableCollision: this.enableCollision,
                        scrollStep: this.scrollStep
                    };
                    this.trigger('beforeCreate', e);
                    this.enableCollision = e.enableCollision;
                    this.scrollStep = e.scrollStep;
                    this.scrollModule = null;
                    this.popObj = null;
                    this.tempId = [];
                    this.tbarItemsCol = this.items;
                    this.isVertical = this.element.classList.contains($) ? true : false;
                    this.isExtendedOpen = false;
                    this.popupPriCount = 0;
                    if (this.enableRtl) {
                        this.add(this.element, et);
                    }
                };
                t.prototype.wireEvents = function() {
                    n.bi.add(this.element, 'click', this.clickHandler, this);
                    window.addEventListener('resize', this.resizeContext);
                    if (this.allowKeyboard) {
                        this.wireKeyboardEvent();
                    }
                };
                t.prototype.wireKeyboardEvent = function() {
                    this.keyModule = new n.nv(this.element, {
                        keyAction: this.keyActionHandler.bind(this),
                        keyConfigs: this.keyConfigs
                    });
                    n.bi.add(this.element, 'keydown', this.docKeyDown, this);
                    this.element.setAttribute('tabIndex', '0');
                };
                t.prototype.unwireKeyboardEvent = function() {
                    if (this.keyModule) {
                        n.bi.remove(this.element, 'keydown', this.docKeyDown);
                        this.keyModule.destroy();
                        this.keyModule = null;
                    }
                };
                t.prototype.docKeyDown = function(e) {
                    if (e.target.tagName === 'INPUT') {
                        return;
                    }
                    var t = !(0, n.le)(this.popObj) && (0, n.pn)(this.popObj.element) && this.overflowMode !== 'Extended';
                    if (e.keyCode === 9 && e.target.classList.contains('e-hor-nav') === true && t) {
                        this.popObj.hide({
                            name: 'FadeOut',
                            duration: 100
                        });
                    }
                    var i = (e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 35 || e.keyCode === 36);
                    if (i) {
                        e.preventDefault();
                    }
                };
                t.prototype.unwireEvents = function() {
                    n.bi.remove(this.element, 'click', this.clickHandler);
                    this.destroyScroll();
                    this.unwireKeyboardEvent();
                    window.removeEventListener('resize', this.resizeContext);
                    n.bi.remove(document, 'scroll', this.docEvent);
                    n.bi.remove(document, 'click', this.docEvent);
                };
                t.prototype.clearProperty = function() {
                    this.tbarEle = [];
                    this.tbarAlgEle = {
                        lefts: [],
                        centers: [],
                        rights: []
                    };
                };
                t.prototype.docEvent = function(e) {
                    var t = (0, n.oq)(e.target, '.e-popup');
                    if (this.popObj && (0, n.pn)(this.popObj.element) && !t && this.overflowMode === 'Popup') {
                        this.popObj.hide({
                            name: 'FadeOut',
                            duration: 100
                        });
                    }
                };
                t.prototype.destroyScroll = function() {
                    if (this.scrollModule) {
                        if (this.tbarAlign) {
                            this.add(this.scrollModule.element, eb);
                        }
                        this.scrollModule.destroy();
                        this.scrollModule = null;
                    }
                };
                t.prototype.destroyItems = function() {
                    if (this.element) {
                        [].slice.call(this.element.querySelectorAll('.' + ee)).forEach(function(e) {
                            (0, n.og)(e);
                        });
                    }
                    if (this.tbarAlign) {
                        var e = this.element.querySelector('.' + Q);
                        [].slice.call(e.children).forEach(function(e) {
                            (0, n.og)(e);
                        });
                        this.tbarAlign = false;
                        this.remove(e, eb);
                    }
                    this.clearProperty();
                };
                t.prototype.destroyMode = function() {
                    if (this.scrollModule) {
                        this.remove(this.scrollModule.element, et);
                        this.destroyScroll();
                    }
                    this.remove(this.element, eH);
                    this.remove(this.element, eR);
                    var e = this.element.querySelector('.e-toolbar-multirow');
                    if (e) {
                        this.remove(e, eO);
                    }
                    if (this.popObj) {
                        this.popupRefresh(this.popObj.element, true);
                    }
                };
                t.prototype.add = function(e, t) {
                    e.classList.add(t);
                };
                t.prototype.remove = function(e, t) {
                    e.classList.remove(t);
                };
                t.prototype.elementFocus = function(e) {
                    var t = e.firstElementChild;
                    if (t) {
                        t.focus();
                        this.activeEleSwitch(e);
                    } else {
                        e.focus();
                    }
                };
                t.prototype.clstElement = function(e, t) {
                    var i;
                    if (e && this.popObj && (0, n.pn)(this.popObj.element)) {
                        i = this.popObj.element.querySelector('.' + ee);
                    } else if (this.element === t || e) {
                        i = this.element.querySelector('.' + ee + ':not(.' + ea + ' ):not(.' + ei + ' ):not(.' + eD + ' )');
                    } else {
                        i = (0, n.oq)(t, '.' + ee);
                    }
                    return i;
                };
                t.prototype.keyHandling = function(e, t, i, r, s) {
                    var o = this.popObj;
                    var a = this.element;
                    var l = {
                        name: 'FadeOut',
                        duration: 100
                    };
                    var h = t.action === 'moveUp' ? 'previous' : 'next';
                    var c;
                    var d;
                    switch(t.action){
                        case 'moveRight':
                            if (this.isVertical) {
                                return;
                            }
                            if (a === i) {
                                this.elementFocus(e);
                            } else if (!r) {
                                this.eleFocus(e, 'next');
                            }
                            break;
                        case 'moveLeft':
                            if (this.isVertical) {
                                return;
                            }
                            if (!r) {
                                this.eleFocus(e, 'previous');
                            }
                            break;
                        case 'home':
                        case 'end':
                            if (e) {
                                var p = (0, n.oq)(e, '.e-popup');
                                var u = this.element.querySelector('.' + eB);
                                if (this.overflowMode === 'Extended' && u && u.classList.contains('e-popup-open')) {
                                    p = t.action === 'end' ? u : null;
                                }
                                if (p) {
                                    if ((0, n.pn)(this.popObj.element)) {
                                        d = [].slice.call(p.children);
                                        if (t.action === 'home') {
                                            c = d[0];
                                        } else {
                                            c = d[d.length - 1];
                                        }
                                    }
                                } else {
                                    d = this.element.querySelectorAll('.' + Q + ' .' + ee + ':not(.' + ei + ')');
                                    if (t.action === 'home') {
                                        c = d[0];
                                    } else {
                                        c = d[d.length - 1];
                                    }
                                }
                                if (c) {
                                    this.elementFocus(c);
                                }
                            }
                            break;
                        case 'moveUp':
                        case 'moveDown':
                            if (!this.isVertical) {
                                if (o && (0, n.oq)(i, '.e-popup')) {
                                    var f = o.element;
                                    var m = f.firstElementChild;
                                    if ((h === 'previous' && m === e) || (h === 'next' && f.lastElementChild === e)) {
                                        return;
                                    } else {
                                        this.eleFocus(e, h);
                                    }
                                } else if (t.action === 'moveDown' && o && (0, n.pn)(o.element)) {
                                    this.elementFocus(e);
                                }
                            } else {
                                if (t.action === 'moveUp') {
                                    this.eleFocus(e, 'previous');
                                } else {
                                    this.eleFocus(e, 'next');
                                }
                            }
                            break;
                        case 'tab':
                            if (!s && !r) {
                                var v = e.firstElementChild;
                                if (a === i) {
                                    if (this.activeEle) {
                                        this.activeEle.focus();
                                    } else {
                                        this.activeEleRemove(v);
                                        v.focus();
                                    }
                                    this.element.removeAttribute('tabindex');
                                }
                            }
                            break;
                        case 'popupClose':
                            if (o && this.overflowMode !== 'Extended') {
                                o.hide(l);
                            }
                            break;
                        case 'popupOpen':
                            if (!r) {
                                return;
                            }
                            if (o && !(0, n.pn)(o.element)) {
                                o.element.style.top = a.offsetHeight + 'px';
                                o.show({
                                    name: 'FadeIn',
                                    duration: 100
                                });
                            } else {
                                o.hide(l);
                            }
                            break;
                    }
                };
                t.prototype.keyActionHandler = function(e) {
                    var t = e.target;
                    if (t.tagName === 'INPUT' || t.tagName === 'TEXTAREA' || this.element.classList.contains(ea)) {
                        return;
                    }
                    e.preventDefault();
                    var i = t.classList.contains(eu);
                    var n = t.classList.contains(ef);
                    var r = this.clstElement(i, t);
                    if (r || n) {
                        this.keyHandling(r, e, t, i, n);
                    }
                };
                t.prototype.disable = function(e) {
                    var t = this.element;
                    if (e) {
                        t.classList.add(ea);
                    } else {
                        t.classList.remove(ea);
                    }
                    t.setAttribute('tabindex', !e ? '0' : '-1');
                    if (this.activeEle) {
                        this.activeEle.setAttribute('tabindex', !e ? '0' : '-1');
                    }
                    if (this.scrollModule) {
                        this.scrollModule.disable(e);
                    }
                    if (this.popObj) {
                        if ((0, n.pn)(this.popObj.element) && this.overflowMode !== 'Extended') {
                            this.popObj.hide();
                        }
                        t.querySelector('#' + t.id + '_nav').setAttribute('tabindex', !e ? '0' : '-1');
                    }
                };
                t.prototype.eleContains = function(e) {
                    return e.classList.contains(ei) || e.classList.contains(ea) || e.getAttribute('disabled') || e.classList.contains(eD) || !(0, n.pn)(e);
                };
                t.prototype.eleFocus = function(e, t) {
                    var i = Object(e)[t + 'ElementSibling'];
                    if (i) {
                        var r = this.eleContains(i);
                        if (r) {
                            this.eleFocus(i, t);
                            return;
                        }
                        this.elementFocus(i);
                    } else if (this.tbarAlign) {
                        var s = Object(e.parentElement)[t + 'ElementSibling'];
                        if (!(0, n.le)(s) && s.children.length === 0) {
                            s = Object(s)[t + 'ElementSibling'];
                        }
                        if (!(0, n.le)(s) && s.children.length > 0) {
                            if (t === 'next') {
                                var o = s.querySelector('.' + ee);
                                if (this.eleContains(o)) {
                                    this.eleFocus(o, t);
                                } else {
                                    o.firstElementChild.focus();
                                    this.activeEleSwitch(o);
                                }
                            } else {
                                var o = s.lastElementChild;
                                if (this.eleContains(o)) {
                                    this.eleFocus(o, t);
                                } else {
                                    this.elementFocus(o);
                                }
                            }
                        }
                    }
                };
                t.prototype.clickHandler = function(e) {
                    var t = this;
                    var i = e.target;
                    var r = this.element;
                    var s = !(0, n.le)((0, n.oq)(i, '.' + ew));
                    var o = i.classList;
                    var a = (0, n.oq)(i, ('.' + eu));
                    if (!a) {
                        a = i;
                    }
                    if (!r.children[0].classList.contains('e-hscroll') && !r.children[0].classList.contains('e-vscroll') && (o.contains(eu))) {
                        o = i.querySelector('.e-icons').classList;
                    }
                    if (o.contains(en) || o.contains(er)) {
                        this.popupClickHandler(r, a, et);
                    }
                    var l;
                    var h = (0, n.oq)(e.target, '.' + ee);
                    if (((0, n.le)(h) || h.classList.contains(ea)) && !a.classList.contains(eu)) {
                        return;
                    }
                    if (h) {
                        var c = this.items[this.tbarEle.indexOf(h)];
                        l = c;
                    }
                    var d = {
                        originalEvent: e,
                        item: l
                    };
                    if (l && !(0, n.le)(l.click)) {
                        this.trigger('items[' + this.tbarEle.indexOf(h) + '].click', d);
                    }
                    if (!d.cancel) {
                        this.trigger('clicked', d, function(e) {
                            if (!(0, n.le)(t.popObj) && s && !e.cancel && t.overflowMode === 'Popup' && e.item && e.item.type !== 'Input') {
                                t.popObj.hide({
                                    name: 'FadeOut',
                                    duration: 100
                                });
                            }
                        });
                    }
                };
                t.prototype.popupClickHandler = function(e, t, i) {
                    var r = this.popObj;
                    if ((0, n.pn)(r.element)) {
                        t.classList.remove(ex);
                        r.hide({
                            name: 'FadeOut',
                            duration: 100
                        });
                    } else {
                        if (e.classList.contains(i)) {
                            r.enableRtl = true;
                            r.position = {
                                X: 'left',
                                Y: 'top'
                            };
                        }
                        if (r.offsetX === 0 && !e.classList.contains(i)) {
                            r.enableRtl = false;
                            r.position = {
                                X: 'right',
                                Y: 'top'
                            };
                        }
                        r.dataBind();
                        r.refreshPosition();
                        r.element.style.top = this.getElementOffsetY() + 'px';
                        if (this.overflowMode === 'Extended') {
                            r.element.style.minHeight = '0px';
                        }
                        t.classList.add(ex);
                        r.show({
                            name: 'FadeIn',
                            duration: 100
                        });
                    }
                };
                t.prototype.render = function() {
                    this.initialize();
                    this.renderControl();
                    this.wireEvents();
                    this.renderComplete();
                };
                t.prototype.initialize = function() {
                    var e = (0, n.Ac)(this.width);
                    var t = (0, n.Ac)(this.height);
                    if (n.AR.info.name !== 'msie' || this.height !== 'auto' || this.overflowMode === 'MultiRow') {
                        (0, n.V7)(this.element, {
                            'height': t
                        });
                    }
                    (0, n.V7)(this.element, {
                        'width': e
                    });
                    var i = {
                        'role': 'toolbar',
                        'aria-disabled': 'false',
                        'aria-haspopup': 'false',
                        'aria-orientation': !this.isVertical ? 'horizontal' : 'vertical'
                    };
                    (0, n.Y4)(this.element, i);
                    if (this.cssClass) {
                        (0, n.cn)([
                            this.element
                        ], this.cssClass.split(' '));
                    }
                };
                t.prototype.renderControl = function() {
                    var e = this.element;
                    this.trgtEle = (e.children.length > 0) ? e.querySelector('div') : null;
                    this.tbarAlgEle = {
                        lefts: [],
                        centers: [],
                        rights: []
                    };
                    this.renderItems();
                    this.renderLayout();
                };
                t.prototype.renderLayout = function() {
                    this.renderOverflowMode();
                    if (this.tbarAlign) {
                        this.itemPositioning();
                    }
                    if (this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(this.element, this.popObj.element)) {
                        this.popupRefresh(this.popObj.element, false);
                    }
                    this.separator();
                };
                t.prototype.itemsAlign = function(e, t) {
                    var i;
                    var n;
                    if (!this.tbarEle) {
                        this.tbarEle = [];
                    }
                    for(var r = 0; r < e.length; r++){
                        i = this.renderSubComponent(e[r], r);
                        if (this.tbarEle.indexOf(i) === -1) {
                            this.tbarEle.push(i);
                        }
                        if (!this.tbarAlign) {
                            this.tbarItemAlign(e[r], t, r);
                        }
                        n = t.querySelector('.e-toolbar-' + e[r].align.toLowerCase());
                        if (n) {
                            if (!(e[r].showAlwaysInPopup && e[r].overflow !== 'Show')) {
                                this.tbarAlgEle[(e[r].align + 's').toLowerCase()].push(i);
                            }
                            n.appendChild(i);
                        } else {
                            t.appendChild(i);
                        }
                    }
                    if (this.isReact) {
                        var s = 'portals';
                        this.notify('render-react-toolbar-template', this[s]);
                        this.renderReactTemplates();
                    }
                };
                t.prototype.changeOrientation = function() {
                    var e = this.element;
                    if (this.isVertical) {
                        e.classList.remove($);
                        this.isVertical = false;
                        if (this.height === 'auto' || this.height === '100%') {
                            e.style.height = this.height;
                        }
                        e.setAttribute('aria-orientation', 'horizontal');
                    } else {
                        e.classList.add($);
                        this.isVertical = true;
                        e.setAttribute('aria-orientation', 'vertical');
                        (0, n.V7)(this.element, {
                            'height': (0, n.Ac)(this.height),
                            'width': (0, n.Ac)(this.width)
                        });
                    }
                    this.destroyMode();
                    this.refreshOverflow();
                };
                t.prototype.initScroll = function(e, t) {
                    if (!this.scrollModule && this.checkOverflow(e, t[0])) {
                        if (this.tbarAlign) {
                            this.element.querySelector('.' + Q + ' .' + eg).removeAttribute('style');
                        }
                        if (this.isVertical) {
                            this.scrollModule = new G({
                                scrollStep: this.scrollStep,
                                enableRtl: this.enableRtl
                            }, t[0]);
                        } else {
                            this.scrollModule = new O({
                                scrollStep: this.scrollStep,
                                enableRtl: this.enableRtl
                            }, t[0]);
                        }
                        if (this.cssClass) {
                            (0, n.cn)([
                                t[0]
                            ], this.cssClass.split(' '));
                        }
                        this.remove(this.scrollModule.element, eb);
                        (0, n.V7)(this.element, {
                            overflow: 'hidden'
                        });
                    }
                };
                t.prototype.itemWidthCal = function(e) {
                    var t = this;
                    var i = 0;
                    var r;
                    [].slice.call((0, n.td)('.' + ee, e)).forEach(function(e) {
                        if ((0, n.pn)(e)) {
                            r = window.getComputedStyle(e);
                            i += t.isVertical ? e.offsetHeight : e.offsetWidth;
                            i += parseFloat(t.isVertical ? r.marginTop : r.marginRight);
                            i += parseFloat(t.isVertical ? r.marginBottom : r.marginLeft);
                        }
                    });
                    return i;
                };
                t.prototype.getScrollCntEle = function(e) {
                    var t = (this.isVertical) ? '.e-vscroll-content' : '.e-hscroll-content';
                    return e.querySelector(t);
                };
                t.prototype.checkOverflow = function(e, t) {
                    if ((0, n.le)(e) || (0, n.le)(t) || !(0, n.pn)(e)) {
                        return false;
                    }
                    var i = this.isVertical ? e.offsetHeight : e.offsetWidth;
                    var r = this.isVertical ? t.offsetHeight : t.offsetWidth;
                    if (this.tbarAlign || this.scrollModule || (i === r)) {
                        r = this.itemWidthCal(this.scrollModule ? this.getScrollCntEle(t) : t);
                    }
                    var s = e.querySelector('.' + eu);
                    var o = e.querySelector('.' + ef);
                    var a = 0;
                    if (s) {
                        a = this.isVertical ? s.offsetHeight : s.offsetWidth;
                    } else if (o) {
                        a = this.isVertical ? (o.offsetHeight * (2)) : (o.offsetWidth * 2);
                    }
                    if (r > i - a) {
                        return true;
                    } else {
                        return false;
                    }
                };
                t.prototype.refreshOverflow = function() {
                    this.resize();
                };
                t.prototype.toolbarAlign = function(e) {
                    if (this.tbarAlign) {
                        this.add(e, eb);
                        this.itemPositioning();
                    }
                };
                t.prototype.renderOverflowMode = function() {
                    var e = this.element;
                    var t = e.querySelector('.' + Q);
                    var i = this.popupPriCount > 0;
                    if (e && e.children.length > 0) {
                        this.offsetWid = e.offsetWidth;
                        this.remove(this.element, 'e-toolpop');
                        if (n.AR.info.name === 'msie' && this.height === 'auto') {
                            e.style.height = '';
                        }
                        switch(this.overflowMode){
                            case 'Scrollable':
                                if ((0, n.le)(this.scrollModule)) {
                                    this.initScroll(e, [].slice.call(e.getElementsByClassName(Q)));
                                }
                                break;
                            case 'Popup':
                                this.add(this.element, 'e-toolpop');
                                if (this.tbarAlign) {
                                    this.removePositioning();
                                }
                                if (this.checkOverflow(e, t) || i) {
                                    this.setOverflowAttributes(e);
                                }
                                this.toolbarAlign(t);
                                break;
                            case 'MultiRow':
                                this.add(t, eO);
                                if (this.checkOverflow(e, t) && this.tbarAlign) {
                                    this.removePositioning();
                                    this.add(t, eA);
                                }
                                if (e.style.overflow === 'hidden') {
                                    e.style.overflow = '';
                                }
                                if (n.AR.info.name === 'msie' || e.style.height !== 'auto') {
                                    e.style.height = 'auto';
                                }
                                break;
                            case 'Extended':
                                this.add(this.element, eR);
                                if (this.checkOverflow(e, t) || i) {
                                    if (this.tbarAlign) {
                                        this.removePositioning();
                                    }
                                    this.setOverflowAttributes(e);
                                }
                                this.toolbarAlign(t);
                        }
                    }
                };
                t.prototype.setOverflowAttributes = function(e) {
                    this.createPopupEle(e, [].slice.call((0, n.td)('.' + Q + ' .' + ee, e)));
                    this.element.querySelector('.' + eu).setAttribute('tabIndex', '0');
                    this.element.querySelector('.' + eu).setAttribute('role', 'list');
                };
                t.prototype.separator = function() {
                    var e = this.element;
                    var t = [].slice.call(e.querySelectorAll('.' + ei));
                    var i = e.querySelector('.' + eP);
                    var n = e.querySelector('.' + eM);
                    var r = this.overflowMode === 'MultiRow' ? i : n;
                    if (r !== null) {
                        if (this.overflowMode === 'MultiRow') {
                            r.classList.remove(eP);
                        } else if (this.overflowMode === 'Extended') {
                            r.classList.remove(eM);
                        }
                    }
                    for(var s = 0; s <= t.length - 1; s++){
                        if (t[s].offsetLeft < 30 && t[s].offsetLeft !== 0) {
                            if (this.overflowMode === 'MultiRow') {
                                t[s].classList.add(eP);
                            } else if (this.overflowMode === 'Extended') {
                                t[s].classList.add(eM);
                            }
                        }
                    }
                };
                t.prototype.createPopupEle = function(e, t) {
                    var i = e.querySelector('.' + eu);
                    var r = this.isVertical;
                    if (!i) {
                        this.createPopupIcon(e);
                    }
                    i = e.querySelector('.' + eu);
                    var s = (r ? i.offsetHeight : i.offsetWidth);
                    var o = ((r ? e.offsetHeight : e.offsetWidth) - (s));
                    this.element.classList.remove('e-rtl');
                    (0, n.V7)(this.element, {
                        direction: 'initial'
                    });
                    this.checkPriority(e, t, o, true);
                    if (this.enableRtl) {
                        this.element.classList.add('e-rtl');
                    }
                    this.element.style.removeProperty('direction');
                    this.createPopup();
                };
                t.prototype.pushingPoppedEle = function(e, t, i, r, s) {
                    var o = e.element;
                    var a = [].slice.call((0, n.td)('.' + eT, o.querySelector('.' + Q)));
                    var l = (0, n.td)('.' + ec, i);
                    var h = 0;
                    var c = 0;
                    a.forEach(function(o, a) {
                        l = (0, n.td)('.' + ec, i);
                        if (o.classList.contains(ec) && l.length > 0) {
                            if (e.tbResize && l.length > a) {
                                i.insertBefore(o, l[a]);
                                ++c;
                            } else {
                                i.insertBefore(o, i.children[l.length]);
                                ++c;
                            }
                        } else if (o.classList.contains(ec)) {
                            i.insertBefore(o, i.firstChild);
                            ++c;
                        } else if (e.tbResize && o.classList.contains(ed) && i.children.length > 0 && l.length === 0) {
                            i.insertBefore(o, i.firstChild);
                            ++c;
                        } else if (o.classList.contains(ed)) {
                            t.push(o);
                        } else if (e.tbResize) {
                            i.insertBefore(o, i.childNodes[h + c]);
                            ++h;
                        } else {
                            i.appendChild(o);
                        }
                        if (o.classList.contains(ei)) {
                            (0, n.V7)(o, {
                                display: '',
                                height: s + 'px'
                            });
                        } else {
                            (0, n.V7)(o, {
                                display: '',
                                height: r + 'px'
                            });
                        }
                    });
                    t.forEach(function(e) {
                        i.appendChild(e);
                    });
                    var d = (0, n.td)('.' + ee, o.querySelector('.' + Q));
                    for(var p = d.length - 1; p >= 0; p--){
                        var u = d[p];
                        if (u.classList.contains(ei) && this.overflowMode !== 'Extended') {
                            (0, n.V7)(u, {
                                display: 'none'
                            });
                        } else {
                            break;
                        }
                    }
                };
                t.prototype.createPopup = function() {
                    var e = this.element;
                    var t;
                    var i;
                    if (this.overflowMode === 'Extended') {
                        i = e.querySelector('.' + ei + ':not(.' + eT + ')');
                        t = (e.style.height === 'auto' || e.style.height === '') ? null : i.offsetHeight;
                    }
                    var r = e.querySelector('.' + ee + ':not(.' + ei + '):not(.' + eT + ')');
                    var s = (e.style.height === 'auto' || e.style.height === '') ? null : (r && r.offsetHeight);
                    var o;
                    var a = [];
                    if ((0, n.Ys)('#' + e.id + '_popup.' + ew, e)) {
                        o = (0, n.Ys)('#' + e.id + '_popup.' + ew, e);
                    } else {
                        var l = this.createElement('div', {
                            id: e.id + '_popup',
                            className: ew + ' ' + eB
                        });
                        var h = this.createElement('div', {
                            id: e.id + '_popup',
                            className: ew
                        });
                        o = this.overflowMode === 'Extended' ? l : h;
                    }
                    this.pushingPoppedEle(this, a, o, s, t);
                    this.popupInit(e, o);
                };
                t.prototype.getElementOffsetY = function() {
                    return (this.overflowMode === 'Extended' && window.getComputedStyle(this.element).getPropertyValue('box-sizing') === 'border-box' ? this.element.clientHeight : this.element.offsetHeight);
                };
                t.prototype.popupInit = function(e, t) {
                    if (!this.popObj) {
                        e.appendChild(t);
                        if (this.cssClass) {
                            (0, n.cn)([
                                t
                            ], this.cssClass.split(' '));
                        }
                        (0, n.V7)(this.element, {
                            overflow: ''
                        });
                        var i = window.getComputedStyle(this.element);
                        var r = new h.GI(null, {
                            relateTo: this.element,
                            offsetY: (this.isVertical) ? 0 : this.getElementOffsetY(),
                            enableRtl: this.enableRtl,
                            open: this.popupOpen.bind(this),
                            close: this.popupClose.bind(this),
                            collision: {
                                Y: this.enableCollision ? 'flip' : 'none'
                            },
                            position: this.enableRtl ? {
                                X: 'left',
                                Y: 'top'
                            } : {
                                X: 'right',
                                Y: 'top'
                            }
                        });
                        r.appendTo(t);
                        if (this.overflowMode === 'Extended') {
                            r.width = parseFloat(i.width) + ((parseFloat(i.borderRightWidth)) * 2);
                            r.offsetX = 0;
                        }
                        n.bi.add(document, 'scroll', this.docEvent.bind(this));
                        n.bi.add(document, 'click ', this.docEvent.bind(this));
                        r.element.style.maxHeight = r.element.offsetHeight + 'px';
                        if (this.isVertical) {
                            r.element.style.visibility = 'hidden';
                        }
                        if (this.isExtendedOpen) {
                            var s = this.element.querySelector('.' + eu);
                            s.classList.add(ex);
                            (0, n.s1)(s.firstElementChild, [
                                en
                            ], [
                                er
                            ]);
                            this.element.querySelector('.' + eB).classList.add(es);
                        } else {
                            r.hide();
                        }
                        this.popObj = r;
                        this.element.setAttribute('aria-haspopup', 'true');
                    } else {
                        var o = this.popObj.element;
                        (0, n.V7)(o, {
                            maxHeight: '',
                            display: 'block'
                        });
                        (0, n.V7)(o, {
                            maxHeight: o.offsetHeight + 'px',
                            display: ''
                        });
                    }
                };
                t.prototype.tbarPopupHandler = function(e) {
                    if (this.overflowMode === 'Extended') {
                        if (e) {
                            this.add(this.element, eH);
                        } else {
                            this.remove(this.element, eH);
                        }
                    }
                };
                t.prototype.popupOpen = function(e) {
                    var t = this.popObj;
                    if (!this.isVertical) {
                        t.offsetY = this.getElementOffsetY();
                        t.dataBind();
                    }
                    var i = this.popObj.element;
                    var r = this.popObj.element.parentElement;
                    var s = r.querySelector('.' + eu);
                    (0, n.V7)(t.element, {
                        height: 'auto',
                        maxHeight: ''
                    });
                    t.element.style.maxHeight = t.element.offsetHeight + 'px';
                    if (this.overflowMode === 'Extended') {
                        t.element.style.minHeight = '';
                    }
                    var o = i.offsetTop + i.offsetHeight + (0, c.k)(r).top;
                    var a = s.firstElementChild;
                    s.classList.add(ex);
                    (0, n.s1)(a, [
                        en
                    ], [
                        er
                    ]);
                    this.tbarPopupHandler(true);
                    var l = (0, n.le)(window.scrollY) ? 0 : window.scrollY;
                    if (!this.isVertical && ((window.innerHeight + l) < o) && (this.element.offsetTop < i.offsetHeight)) {
                        var h = (i.offsetHeight - ((o - window.innerHeight - l) + 5));
                        t.height = h + 'px';
                        for(var d = 0; d <= i.childElementCount; d++){
                            var p = i.children[d];
                            if (p.offsetTop + p.offsetHeight > h) {
                                h = p.offsetTop;
                                break;
                            }
                        }
                        (0, n.V7)(t.element, {
                            maxHeight: h + 'px'
                        });
                    } else if (this.isVertical) {
                        var u = this.element.getBoundingClientRect();
                        (0, n.V7)(t.element, {
                            maxHeight: (u.top + this.element.offsetHeight) + 'px',
                            bottom: 0,
                            visibility: ''
                        });
                    }
                    if (t) {
                        var f = i.getBoundingClientRect();
                        if (f.right > document.documentElement.clientWidth && f.width > r.getBoundingClientRect().width) {
                            t.collision = {
                                Y: 'none'
                            };
                            t.dataBind();
                        }
                        t.refreshPosition();
                    }
                };
                t.prototype.popupClose = function(e) {
                    var t = this.element;
                    var i = t.querySelector('.' + eu);
                    var r = i.firstElementChild;
                    i.classList.remove(ex);
                    (0, n.s1)(r, [
                        er
                    ], [
                        en
                    ]);
                    this.tbarPopupHandler(false);
                };
                t.prototype.checkPriority = function(e, t, i, r) {
                    var s = this.popupPriCount > 0;
                    var o = t.length;
                    var a = i;
                    var l;
                    var h;
                    var c = 0;
                    var d = 0;
                    var p = 0;
                    var u = function(e, t) {
                        var i = false;
                        t.forEach(function(t) {
                            if (e.classList.contains(t)) {
                                i = true;
                            }
                        });
                        return i;
                    };
                    for(var f = o - 1; f >= 0; f--){
                        var m = void 0;
                        var v = window.getComputedStyle(t[f]);
                        if (this.isVertical) {
                            m = parseFloat((v).marginTop);
                            m += parseFloat((v).marginBottom);
                        } else {
                            m = parseFloat((v).marginRight);
                            m += parseFloat((v).marginLeft);
                        }
                        var g = t[f] === this.tbarEle[0];
                        if (g) {
                            this.tbarEleMrgn = m;
                        }
                        l = this.isVertical ? t[f].offsetHeight : t[f].offsetWidth;
                        var b = g ? (l + m) : l;
                        if (u(t[f], [
                            eN
                        ]) && s) {
                            t[f].classList.add(eT);
                            if (this.isVertical) {
                                (0, n.V7)(t[f], {
                                    display: 'none',
                                    minHeight: b + 'px'
                                });
                            } else {
                                (0, n.V7)(t[f], {
                                    display: 'none',
                                    minWidth: b + 'px'
                                });
                            }
                            p++;
                        }
                        if (this.isVertical) {
                            h = (t[f].offsetTop + t[f].offsetHeight + m) > i;
                        } else {
                            h = (t[f].offsetLeft + t[f].offsetWidth + m) > i;
                        }
                        if (h) {
                            if (t[f].classList.contains(ei)) {
                                if (this.overflowMode === 'Extended') {
                                    if (d === p) {
                                        var y = t[f];
                                        if (u(y, [
                                            ei,
                                            eL
                                        ])) {
                                            t[f].classList.add(eT);
                                            p++;
                                        }
                                    }
                                    d++;
                                } else if (this.overflowMode === 'Popup') {
                                    if (c > 0 && d === p) {
                                        var y = t[f + d + (c - 1)];
                                        if (u(y, [
                                            ei,
                                            eL
                                        ])) {
                                            (0, n.V7)(y, {
                                                display: 'none'
                                            });
                                        }
                                    }
                                    c++;
                                    d = 0;
                                    p = 0;
                                }
                            } else {
                                d++;
                            }
                            if (t[f].classList.contains(ec) && r) {
                                i -= ((this.isVertical ? t[f].offsetHeight : t[f].offsetWidth) + (m));
                            } else if (!u(t[f], [
                                ei,
                                eL
                            ])) {
                                t[f].classList.add(eT);
                                if (this.isVertical) {
                                    (0, n.V7)(t[f], {
                                        display: 'none',
                                        minHeight: b + 'px'
                                    });
                                } else {
                                    (0, n.V7)(t[f], {
                                        display: 'none',
                                        minWidth: b + 'px'
                                    });
                                }
                                p++;
                            } else {
                                i -= ((this.isVertical ? t[f].offsetHeight : t[f].offsetWidth) + (m));
                            }
                        }
                    }
                    if (r) {
                        var C = (0, n.td)('.' + ee + ':not(.' + eT + ')', this.element);
                        this.checkPriority(e, C, a, false);
                    }
                };
                t.prototype.createPopupIcon = function(e) {
                    var t = e.id.concat('_nav');
                    var i = 'e-' + e.id.concat('_nav ' + eS);
                    i = this.overflowMode === 'Extended' ? i + ' ' + eI : i;
                    var r = this.createElement('div', {
                        id: t,
                        className: i
                    });
                    if (n.AR.info.name === 'msie' || n.AR.info.name === 'edge') {
                        r.classList.add('e-ie-align');
                    }
                    var s = this.createElement('div', {
                        className: er + ' e-icons'
                    });
                    r.appendChild(s);
                    r.setAttribute('tabindex', '0');
                    r.setAttribute('role', 'list');
                    e.appendChild(r);
                };
                t.prototype.tbarPriRef = function(e, t, i, r, s, o, a, l) {
                    var h = l;
                    var c = this.popObj.element;
                    var d = '.' + ee + ':not(.' + ei + '):not(.' + ec + ')';
                    var p = (0, n.td)('.' + eT + ':not(.' + ec + ')', c).length;
                    var u = function(e, t) {
                        return e.classList.contains(t);
                    };
                    if ((0, n.td)(d, e).length === 0) {
                        var f = e.children[t - (t - i) - 1];
                        var m = (!(0, n.le)(f) && u(f, eL));
                        if ((!(0, n.le)(f) && u(f, ei) && !(0, n.pn)(f)) || m) {
                            var v = 'none';
                            f.style.display = 'inherit';
                            var g = f.offsetWidth + (parseFloat(window.getComputedStyle(f).marginRight) * 2);
                            var b = f.previousElementSibling;
                            if ((o + g) < a || s) {
                                e.insertBefore(r, e.children[(t + h) - (t - i)]);
                                if (!(0, n.le)(b)) {
                                    b.style.display = '';
                                }
                            } else {
                                if (b.classList.contains(ei)) {
                                    b.style.display = v;
                                }
                            }
                            f.style.display = '';
                        } else {
                            e.insertBefore(r, e.children[(t + h) - (t - i)]);
                        }
                    } else {
                        e.insertBefore(r, e.children[(t + h) - p]);
                    }
                };
                t.prototype.popupRefresh = function(e, t) {
                    var i = this;
                    var r = this.element;
                    var s = this.isVertical;
                    var o = r.querySelector('.' + Q);
                    var a = r.querySelector('.' + eu);
                    if ((0, n.le)(a)) {
                        return;
                    }
                    o.removeAttribute('style');
                    e.style.display = 'block';
                    var l;
                    if (s) {
                        l = r.offsetHeight - (a.offsetHeight + o.offsetHeight);
                    } else {
                        l = r.offsetWidth - (a.offsetWidth + o.offsetWidth);
                    }
                    var h = 0;
                    [].slice.call(e.children).forEach(function(e) {
                        h += i.popupEleWidth(e);
                        (0, n.V7)(e, {
                            'position': ''
                        });
                    });
                    if ((l + (s ? a.offsetHeight : a.offsetWidth)) > (h) && this.popupPriCount === 0) {
                        t = true;
                    }
                    this.popupEleRefresh(l, e, t);
                    e.style.display = '';
                    if (e.children.length === 0 && a && this.popObj) {
                        (0, n.og)(a);
                        a = null;
                        this.popObj.destroy();
                        (0, n.og)(this.popObj.element);
                        this.popObj = null;
                        r.setAttribute('aria-haspopup', 'false');
                    }
                };
                t.prototype.ignoreEleFetch = function(e, t) {
                    var i = [].slice.call(t.querySelectorAll('.' + eL));
                    var n = [];
                    var r = 0;
                    if (i.length > 0) {
                        i.forEach(function(e) {
                            n.push([].slice.call(t.children).indexOf(e));
                        });
                    } else {
                        return 0;
                    }
                    n.forEach(function(t) {
                        if (t <= e) {
                            r++;
                        }
                    });
                    return r;
                };
                t.prototype.checkPopupRefresh = function(e, t) {
                    t.style.display = 'block';
                    var i = this.popupEleWidth(t.firstElementChild);
                    t.firstElementChild.style.removeProperty('Position');
                    var n = e.offsetWidth - e.querySelector('.' + eu).offsetWidth;
                    var r = e.querySelector('.' + Q).offsetWidth;
                    t.style.removeProperty('display');
                    if (n > (i + r)) {
                        return true;
                    }
                    return false;
                };
                t.prototype.popupEleWidth = function(e) {
                    e.style.position = 'absolute';
                    var t = this.isVertical ? e.offsetHeight : e.offsetWidth;
                    var i = e.querySelector('.' + ek);
                    if (e.classList.contains('e-tbtn-align') || e.classList.contains(eh)) {
                        var r = e.children[0];
                        if (!(0, n.le)(i) && e.classList.contains(eh)) {
                            i.style.display = 'none';
                        } else if (!(0, n.le)(i) && e.classList.contains(el)) {
                            i.style.display = 'block';
                        }
                        r.style.minWidth = '0%';
                        t = parseFloat(!this.isVertical ? e.style.minWidth : e.style.minHeight);
                        r.style.minWidth = '';
                        r.style.minHeight = '';
                        if (!(0, n.le)(i)) {
                            i.style.display = '';
                        }
                    }
                    return t;
                };
                t.prototype.popupEleRefresh = function(e, t, i) {
                    var r = this.popupPriCount > 0;
                    var s = this.tbarEle;
                    var o;
                    var a;
                    var l = this.element.querySelector('.' + Q);
                    var h = 0;
                    var c = function(t) {
                        if (t.classList.contains(eN) && r && !i) {
                            return "continue";
                        }
                        var c = d.popupEleWidth(t);
                        if (t === d.tbarEle[0]) {
                            c += d.tbarEleMrgn;
                        }
                        t.style.position = '';
                        if (c < e || i) {
                            (0, n.V7)(t, {
                                minWidth: '',
                                height: '',
                                minHeight: ''
                            });
                            if (!t.classList.contains(ed)) {
                                t.classList.remove(eT);
                            }
                            a = d.tbarEle.indexOf(t);
                            if (d.tbarAlign) {
                                var p = d.items[a].align;
                                a = d.tbarAlgEle[(p + 's').toLowerCase()].indexOf(t);
                                s = d.tbarAlgEle[(p + 's').toLowerCase()];
                                l = d.element.querySelector('.' + Q + ' .' + 'e-toolbar-' + p.toLowerCase());
                            }
                            var u = 0;
                            if (d.overflowMode !== 'Extended') {
                                s.slice(0, a).forEach(function(t) {
                                    if (t.classList.contains(ec) || t.classList.contains(ei)) {
                                        if (t.classList.contains(ei)) {
                                            t.style.display = '';
                                            e -= t.offsetWidth;
                                        }
                                        u++;
                                    }
                                });
                            }
                            h = d.ignoreEleFetch(a, l);
                            if (t.classList.contains(ec)) {
                                d.tbarPriRef(l, a, u, t, i, c, e, h);
                                e -= t.offsetWidth;
                            } else if (a === 0) {
                                l.insertBefore(t, l.firstChild);
                                e -= t.offsetWidth;
                            } else {
                                o = (0, n.td)('.' + ec, d.popObj.element).length;
                                l.insertBefore(t, l.children[(a + h) - o]);
                                e -= t.offsetWidth;
                            }
                            t.style.height = '';
                        } else {
                            return "break";
                        }
                    };
                    var d = this;
                    for(var p = 0, u = [].slice.call(t.children); p < u.length; p++){
                        var f = u[p];
                        var m = c(f);
                        if (m === "break") break;
                    }
                    var v = this.checkOverflow(this.element, this.element.getElementsByClassName(Q)[0]);
                    if (v && !i) {
                        this.renderOverflowMode();
                    }
                };
                t.prototype.removePositioning = function() {
                    var e = this.element.querySelector('.' + Q);
                    if ((0, n.le)(e) || !e.classList.contains(eb)) {
                        return;
                    }
                    this.remove(e, eb);
                    var t = [].slice.call(e.childNodes);
                    t[1].removeAttribute('style');
                    t[2].removeAttribute('style');
                };
                t.prototype.refreshPositioning = function() {
                    var e = this.element.querySelector('.' + Q);
                    this.add(e, eb);
                    this.itemPositioning();
                };
                t.prototype.itemPositioning = function() {
                    var e = this.element.querySelector('.' + Q);
                    var t;
                    if ((0, n.le)(e) || !e.classList.contains(eb)) {
                        return;
                    }
                    var i = this.element.querySelector('.' + eu);
                    var r;
                    if (this.scrollModule) {
                        var s = (this.isVertical) ? eC : ey;
                        r = [].slice.call(e.querySelector('.' + s).children);
                    } else {
                        r = [].slice.call(e.childNodes);
                    }
                    if (this.isVertical) {
                        t = r[0].offsetHeight + r[2].offsetHeight;
                    } else {
                        t = r[0].offsetWidth + r[2].offsetWidth;
                    }
                    var o = this.isVertical ? this.element.offsetHeight : this.element.offsetWidth;
                    if (i) {
                        o -= (this.isVertical ? i.offsetHeight : i.offsetWidth);
                        var a = (this.isVertical ? i.offsetHeight : i.offsetWidth) + 'px';
                        r[2].removeAttribute('style');
                        if (this.isVertical) {
                            if (this.enableRtl) {
                                r[2].style.top = a;
                            } else {
                                r[2].style.bottom = a;
                            }
                        } else {
                            if (this.enableRtl) {
                                r[2].style.left = a;
                            } else {
                                r[2].style.right = a;
                            }
                        }
                    }
                    if (o <= t) {
                        return;
                    }
                    var l = (((o - t)) - (!this.isVertical ? r[1].offsetWidth : r[1].offsetHeight)) / 2;
                    r[1].removeAttribute('style');
                    var h = ((!this.isVertical ? r[0].offsetWidth : r[0].offsetHeight) + l) + 'px';
                    if (this.isVertical) {
                        if (this.enableRtl) {
                            r[1].style.marginBottom = h;
                        } else {
                            r[1].style.marginTop = h;
                        }
                    } else {
                        if (this.enableRtl) {
                            r[1].style.marginRight = h;
                        } else {
                            r[1].style.marginLeft = h;
                        }
                    }
                };
                t.prototype.tbarItemAlign = function(e, t, i) {
                    var n = this;
                    if (e.showAlwaysInPopup && e.overflow !== 'Show') {
                        return;
                    }
                    var r = [];
                    r.push(this.createElement('div', {
                        className: ev
                    }));
                    r.push(this.createElement('div', {
                        className: eg
                    }));
                    r.push(this.createElement('div', {
                        className: em
                    }));
                    if (i === 0 && e.align !== 'Left') {
                        r.forEach(function(e) {
                            t.appendChild(e);
                        });
                        this.tbarAlign = true;
                        this.add(t, eb);
                    } else if (e.align !== 'Left') {
                        var s = t.childNodes;
                        var o = r[0];
                        [].slice.call(s).forEach(function(e) {
                            n.tbarAlgEle.lefts.push(e);
                            o.appendChild(e);
                        });
                        t.appendChild(o);
                        t.appendChild(r[1]);
                        t.appendChild(r[2]);
                        this.tbarAlign = true;
                        this.add(t, eb);
                    }
                };
                t.prototype.ctrlTemplate = function() {
                    var e = this;
                    this.ctrlTem = this.trgtEle.cloneNode(true);
                    this.add(this.trgtEle, Q);
                    this.tbarEle = [];
                    var t = [].slice.call(this.trgtEle.children);
                    t.forEach(function(t) {
                        if (t.tagName === 'DIV') {
                            e.tbarEle.push(t);
                            t.setAttribute('aria-disabled', 'false');
                            e.add(t, ee);
                        }
                    });
                };
                t.prototype.renderItems = function() {
                    var e = this.element;
                    var t = this.items;
                    if (this.trgtEle != null) {
                        this.ctrlTemplate();
                    } else if (e && t.length > 0) {
                        var i = void 0;
                        if (e && e.children.length > 0) {
                            i = e.querySelector('.' + Q);
                        }
                        if (!i) {
                            i = this.createElement('div', {
                                className: Q
                            });
                        }
                        this.itemsAlign(t, i);
                        e.appendChild(i);
                    }
                };
                t.prototype.setAttr = function(e, t) {
                    var i = Object.keys(e);
                    var n;
                    for(var r = 0; r < i.length; r++){
                        n = i[r];
                        if (n === 'class') {
                            this.add(t, e[n]);
                        } else {
                            t.setAttribute(n, e[n]);
                        }
                    }
                };
                t.prototype.enableItems = function(e, t) {
                    var i = e;
                    var r = i.length;
                    var s;
                    if ((0, n.le)(t)) {
                        t = true;
                    }
                    var o = function(e, t) {
                        if (e) {
                            t.classList.remove(ea);
                            t.setAttribute('aria-disabled', 'false');
                        } else {
                            t.classList.add(ea);
                            t.setAttribute('aria-disabled', 'true');
                        }
                    };
                    if (!(0, n.le)(r) && r >= 1) {
                        for(var a = 0, l = [].slice.call(i); a < r; a++){
                            var h = l[a];
                            if (typeof (h) === 'number') {
                                s = this.getElementByIndex(h);
                                if ((0, n.le)(s)) {
                                    return;
                                } else {
                                    i[a] = s;
                                }
                            } else {
                                s = h;
                            }
                            o(t, s);
                        }
                        if (t) {
                            (0, n.IV)(i, ea);
                        } else {
                            (0, n.cn)(i, ea);
                        }
                    } else {
                        if (typeof (i) === 'number') {
                            s = this.getElementByIndex(i);
                            if ((0, n.le)(s)) {
                                return;
                            }
                        } else {
                            s = e;
                        }
                        o(t, s);
                    }
                };
                t.prototype.getElementByIndex = function(e) {
                    if (this.tbarEle[e]) {
                        return this.tbarEle[e];
                    }
                    return null;
                };
                t.prototype.addItems = function(e, t) {
                    var i;
                    this.extendedOpen();
                    var r = this.element.querySelector('.' + Q);
                    if ((0, n.le)(r)) {
                        this.itemsRerender(e);
                        return;
                    }
                    var s;
                    var o = 'Left';
                    if ((0, n.le)(t)) {
                        t = 0;
                    }
                    e.forEach(function(e) {
                        if (!(0, n.le)(e.align) && e.align !== 'Left' && o === 'Left') {
                            o = e.align;
                        }
                    });
                    for(var a = 0, l = e; a < l.length; a++){
                        var h = l[a];
                        if ((0, n.le)(h.type)) {
                            h.type = 'Button';
                        }
                        i = (0, n.td)('.' + ee, this.element);
                        h.align = o;
                        s = this.renderSubComponent(h, t);
                        if (this.tbarEle.length >= t && i.length >= 0) {
                            if ((0, n.le)(this.scrollModule)) {
                                this.destroyMode();
                            }
                            var c = h.align[0] === 'L' ? 0 : h.align[0] === 'C' ? 1 : 2;
                            var d = void 0;
                            if (!this.tbarAlign && o !== 'Left') {
                                this.tbarItemAlign(h, r, 1);
                                this.tbarAlign = true;
                                d = (0, n.oq)(i[0], '.' + Q).children[c];
                                d.appendChild(s);
                                this.tbarAlgEle[(h.align + 's').toLowerCase()].push(s);
                                this.refreshPositioning();
                            } else if (this.tbarAlign) {
                                d = (0, n.oq)(i[0], '.' + Q).children[c];
                                d.insertBefore(s, d.children[t]);
                                this.tbarAlgEle[(h.align + 's').toLowerCase()].splice(t, 0, s);
                                this.refreshPositioning();
                            } else if (i.length === 0) {
                                i = (0, n.td)('.' + Q, this.element);
                                i[0].appendChild(s);
                            } else {
                                i[0].parentNode.insertBefore(s, i[t]);
                            }
                            this.items.splice(t, 0, h);
                            if (h.template) {
                                this.tbarEle.splice(this.tbarEle.length - 1, 1);
                            }
                            this.tbarEle.splice(t, 0, s);
                            t++;
                            this.offsetWid = r.offsetWidth;
                        }
                    }
                    r.style.width = '';
                    this.renderOverflowMode();
                    if (this.isReact) {
                        this.renderReactTemplates();
                    }
                };
                t.prototype.removeItems = function(e) {
                    var t = e;
                    var i;
                    var r = [].slice.call((0, n.td)('.' + ee, this.element));
                    if (typeof (t) === 'number') {
                        i = parseInt(e.toString(), 10);
                        this.removeItemByIndex(i, r);
                    } else {
                        if (t && t.length > 1) {
                            for(var s = 0, o = [].slice.call(t); s < o.length; s++){
                                var a = o[s];
                                i = this.tbarEle.indexOf(a);
                                this.removeItemByIndex(i, r);
                                r = (0, n.td)('.' + ee, this.element);
                            }
                        } else {
                            var a = (t && t.length && t.length === 1) ? t[0] : e;
                            i = r.indexOf(a);
                            this.removeItemByIndex(i, r);
                        }
                    }
                    this.resize();
                };
                t.prototype.removeItemByIndex = function(e, t) {
                    if (this.tbarEle[e] && t[e]) {
                        var i = this.tbarEle.indexOf(t[e]);
                        if (this.tbarAlign) {
                            var r = this.tbarAlgEle[(this.items[i].align + 's').toLowerCase()].indexOf(this.tbarEle[i]);
                            this.tbarAlgEle[(this.items[i].align + 's').toLowerCase()].splice(r, 1);
                        }
                        if (this.isReact) {
                            this.clearTemplate();
                        }
                        var s = t[e].querySelector('.e-control.e-btn');
                        if (!(0, n.le)(s) && !(0, n.le)(s.ej2_instances[0]) && !(s.ej2_instances[0].isDestroyed)) {
                            s.ej2_instances[0].destroy();
                        }
                        (0, n.og)(t[e]);
                        this.items.splice(i, 1);
                        this.tbarEle.splice(i, 1);
                    }
                };
                t.prototype.templateRender = function(e, t, i, r) {
                    var s = i.type;
                    var o = e;
                    var a;
                    if (typeof (e) === 'object') {
                        a = typeof (o.appendTo) === 'function';
                    }
                    if (typeof (e) === 'string' || !a) {
                        var l = void 0;
                        var h = e;
                        var c = new RegExp(/<(?=.*? .*?\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\/\1>/i);
                        h = (typeof (e) === 'string') ? e.trim() : e;
                        try {
                            if (typeof (e) === 'object' && !(0, n.le)(e.tagName)) {
                                t.appendChild(e);
                            } else if (typeof (e) === 'string' && c.test(h)) {
                                t.innerHTML = h;
                            } else if (document.querySelectorAll(h).length) {
                                var d = document.querySelector(h);
                                var p = d.outerHTML.trim();
                                t.appendChild(d);
                                d.style.display = '';
                                if (!(0, n.le)(p)) {
                                    this.tempId.push(h);
                                }
                            } else {
                                l = (0, n.MY)(h);
                            }
                        } catch (u) {
                            l = (0, n.MY)(h);
                        }
                        var f = void 0;
                        if (!(0, n.le)(l)) {
                            var m = this.element.id + r + '_template';
                            f = l({}, this, 'template', m, this.isStringTemplate);
                        }
                        if (!(0, n.le)(f) && f.length > 0) {
                            [].slice.call(f).forEach(function(e) {
                                if (!(0, n.le)(e.tagName)) {
                                    e.style.display = '';
                                }
                                t.appendChild(e);
                            });
                        }
                    } else if (s === 'Input') {
                        var d = this.createElement('input');
                        if (i.id) {
                            d.id = i.id;
                        } else {
                            d.id = (0, n.QI)('tbr-ipt');
                        }
                        t.appendChild(d);
                        o.appendTo(d);
                    }
                    this.add(t, eo);
                    this.tbarEle.push(t);
                };
                t.prototype.buttonRendering = function(e, t) {
                    var i = this.createElement('button', {
                        className: ep
                    });
                    i.setAttribute('type', 'button');
                    var r = e.text;
                    var s;
                    var o;
                    if (e.id) {
                        i.id = e.id;
                    } else {
                        i.id = (0, n.QI)('e-tbr-btn');
                    }
                    var a = this.createElement('span', {
                        className: 'e-tbar-btn-text'
                    });
                    if (r) {
                        a.innerHTML = this.enableHtmlSanitizer ? n.pJ.sanitize(r) : r;
                        i.appendChild(a);
                        i.classList.add('e-tbtn-txt');
                    } else {
                        this.add(t, 'e-tbtn-align');
                    }
                    if (e.prefixIcon || e.suffixIcon) {
                        if ((e.prefixIcon && e.suffixIcon) || e.prefixIcon) {
                            s = e.prefixIcon + ' e-icons';
                            o = 'Left';
                        } else {
                            s = e.suffixIcon + ' e-icons';
                            o = 'Right';
                        }
                    }
                    var l = new d.z({
                        iconCss: s,
                        iconPosition: o
                    });
                    l.createElement = this.createElement;
                    l.appendTo(i);
                    if (e.width) {
                        (0, n.V7)(i, {
                            'width': (0, n.Ac)(e.width)
                        });
                    }
                    return i;
                };
                t.prototype.renderSubComponent = function(e, t) {
                    var i;
                    var r = this.createElement('div', {
                        className: ee
                    });
                    r.setAttribute('aria-disabled', 'false');
                    var s = this.createElement('div', {
                        innerHTML: this.enableHtmlSanitizer ? n.pJ.sanitize(e.tooltipText) : e.tooltipText
                    });
                    if (!this.tbarEle) {
                        this.tbarEle = [];
                    }
                    if (e.htmlAttributes) {
                        this.setAttr(e.htmlAttributes, r);
                    }
                    if (e.tooltipText) {
                        r.setAttribute('title', s.textContent);
                    }
                    if (e.cssClass) {
                        r.className = r.className + ' ' + e.cssClass;
                    }
                    if (e.template) {
                        this.templateRender(e.template, r, e, t);
                    } else {
                        switch(e.type){
                            case 'Button':
                                i = this.buttonRendering(e, r);
                                i.setAttribute('tabindex', '-1');
                                i.setAttribute('aria-label', (e.text || e.tooltipText));
                                r.appendChild(i);
                                r.addEventListener('click', this.itemClick.bind(this));
                                break;
                            case 'Separator':
                                this.add(r, ei);
                                break;
                        }
                    }
                    if (e.showTextOn) {
                        var o = e.showTextOn;
                        if (o === 'Toolbar') {
                            this.add(r, el);
                            this.add(r, 'e-tbtn-align');
                        } else if (o === 'Overflow') {
                            this.add(r, eh);
                        }
                    }
                    if (e.overflow) {
                        var a = e.overflow;
                        if (a === 'Show') {
                            this.add(r, ec);
                        } else if (a === 'Hide') {
                            if (!r.classList.contains(ei)) {
                                this.add(r, ed);
                            }
                        }
                    }
                    if (e.overflow !== 'Show' && e.showAlwaysInPopup && !r.classList.contains(ei)) {
                        this.add(r, eN);
                        this.popupPriCount++;
                    }
                    if (e.disabled) {
                        this.add(r, ea);
                    }
                    if (e.visible === false) {
                        this.add(r, eD);
                    }
                    return r;
                };
                t.prototype.itemClick = function(e) {
                    this.activeEleSwitch(e.currentTarget);
                };
                t.prototype.activeEleSwitch = function(e) {
                    this.activeEleRemove(e.firstElementChild);
                    this.activeEle.focus();
                };
                t.prototype.activeEleRemove = function(e) {
                    if (!(0, n.le)(this.activeEle)) {
                        this.activeEle.setAttribute('tabindex', '-1');
                    }
                    this.activeEle = e;
                    if ((0, n.le)(this.trgtEle) && !e.parentElement.classList.contains(eo)) {
                        e.removeAttribute('tabindex');
                    } else {
                        this.activeEle.setAttribute('tabindex', '0');
                    }
                };
                t.prototype.getPersistData = function() {
                    return this.addOnPersist([]);
                };
                t.prototype.getModuleName = function() {
                    return 'toolbar';
                };
                t.prototype.itemsRerender = function(e) {
                    this.items = this.tbarItemsCol;
                    if (this.isReact || this.isAngular) {
                        this.clearTemplate();
                    }
                    this.destroyMode();
                    this.destroyItems();
                    this.items = e;
                    this.tbarItemsCol = this.items;
                    this.renderItems();
                    this.renderOverflowMode();
                    if (this.isReact) {
                        this.renderReactTemplates();
                    }
                };
                t.prototype.resize = function() {
                    var e = this.element;
                    this.tbResize = true;
                    if (this.tbarAlign) {
                        this.itemPositioning();
                    }
                    if (this.popObj && this.overflowMode === 'Popup') {
                        this.popObj.hide();
                    }
                    var t = this.checkOverflow(e, e.getElementsByClassName(Q)[0]);
                    if (!t) {
                        this.destroyScroll();
                        var i = e.querySelector('.' + Q);
                        if (!(0, n.le)(i)) {
                            this.remove(i, eA);
                            if (this.tbarAlign) {
                                this.add(i, eb);
                            }
                        }
                    }
                    if (t && this.scrollModule && (this.offsetWid === e.offsetWidth)) {
                        return;
                    }
                    if (this.offsetWid > e.offsetWidth || t) {
                        this.renderOverflowMode();
                    }
                    if (this.popObj) {
                        if (this.overflowMode === 'Extended') {
                            var r = window.getComputedStyle(this.element);
                            this.popObj.width = parseFloat(r.width) + ((parseFloat(r.borderRightWidth)) * 2);
                        }
                        if (this.tbarAlign) {
                            this.removePositioning();
                        }
                        this.popupRefresh(this.popObj.element, false);
                        if (this.tbarAlign) {
                            this.refreshPositioning();
                        }
                    }
                    if (this.element.querySelector('.' + eE)) {
                        this.scrollStep = this.element.querySelector('.' + eE).offsetWidth;
                    }
                    this.offsetWid = e.offsetWidth;
                    this.tbResize = false;
                    this.separator();
                };
                t.prototype.extendedOpen = function() {
                    var e = this.element.querySelector('.' + eB);
                    if (this.overflowMode === 'Extended' && e) {
                        this.isExtendedOpen = e.classList.contains(es);
                    }
                };
                t.prototype.onPropertyChanged = function(e, t) {
                    var i = this.element;
                    var r = i.offsetWidth;
                    this.extendedOpen();
                    for(var s = 0, o = Object.keys(e); s < o.length; s++){
                        var a = o[s];
                        switch(a){
                            case 'items':
                                if (!(e.items instanceof Array && t.items instanceof Array)) {
                                    var l = Object.keys(e.items);
                                    for(var h = 0; h < l.length; h++){
                                        var c = parseInt(Object.keys(e.items)[h], 10);
                                        var d = Object.keys(e.items[c])[0];
                                        var p = Object(e.items[c])[d];
                                        if (typeof p !== 'function') {
                                            if (this.tbarAlign || d === 'align') {
                                                this.refresh();
                                                this.trigger('created');
                                                break;
                                            }
                                            var u = d === 'showAlwaysInPopup' && !p;
                                            var f = d === 'overflow' && this.popupPriCount !== 0;
                                            if ((u) || (this.items[c].showAlwaysInPopup) && f) {
                                                --this.popupPriCount;
                                            }
                                            if ((0, n.le)(this.scrollModule)) {
                                                this.destroyMode();
                                            }
                                            var m = [].slice.call((0, n.td)('.' + Q + ' .' + ee, i));
                                            if (this.isReact) {
                                                this.clearTemplate();
                                            }
                                            (0, n.og)(m[c]);
                                            this.tbarEle.splice(c, 1);
                                            this.addItems([
                                                this.items[c]
                                            ], c);
                                            this.items.splice(c, 1);
                                            if (this.items[c].template) {
                                                this.tbarEle.splice(this.items.length, 1);
                                            }
                                        }
                                    }
                                } else {
                                    this.itemsRerender(e.items);
                                }
                                break;
                            case 'width':
                                (0, n.V7)(i, {
                                    'width': (0, n.Ac)(e.width)
                                });
                                this.renderOverflowMode();
                                if (this.popObj && r < i.offsetWidth) {
                                    this.popupRefresh(this.popObj.element, false);
                                }
                                break;
                            case 'height':
                                (0, n.V7)(this.element, {
                                    'height': (0, n.Ac)(e.height)
                                });
                                break;
                            case 'overflowMode':
                                this.destroyMode();
                                this.renderOverflowMode();
                                if (this.enableRtl) {
                                    this.add(i, et);
                                }
                                this.refreshOverflow();
                                break;
                            case 'enableRtl':
                                if (e.enableRtl) {
                                    this.add(i, et);
                                } else {
                                    this.remove(i, et);
                                }
                                if (!(0, n.le)(this.scrollModule)) {
                                    if (e.enableRtl) {
                                        this.add(this.scrollModule.element, et);
                                    } else {
                                        this.remove(this.scrollModule.element, et);
                                    }
                                }
                                if (!(0, n.le)(this.popObj)) {
                                    if (e.enableRtl) {
                                        this.add(this.popObj.element, et);
                                    } else {
                                        this.remove(this.popObj.element, et);
                                    }
                                }
                                if (this.tbarAlign) {
                                    this.itemPositioning();
                                }
                                break;
                            case 'scrollStep':
                                if (this.scrollModule) {
                                    this.scrollModule.scrollStep = this.scrollStep;
                                }
                                break;
                            case 'enableCollision':
                                if (this.popObj) {
                                    this.popObj.collision = {
                                        Y: this.enableCollision ? 'flip' : 'none'
                                    };
                                }
                                break;
                            case 'cssClass':
                                if (t.cssClass) {
                                    (0, n.IV)([
                                        this.element
                                    ], t.cssClass.split(' '));
                                }
                                if (e.cssClass) {
                                    (0, n.cn)([
                                        this.element
                                    ], e.cssClass.split(' '));
                                }
                                break;
                            case 'allowKeyboard':
                                this.unwireKeyboardEvent();
                                if (e.allowKeyboard) {
                                    this.wireKeyboardEvent();
                                }
                                break;
                        }
                    }
                };
                t.prototype.hideItem = function(e, t) {
                    var i = (typeof (e) === 'object') ? true : false;
                    var r = e;
                    var s;
                    var o;
                    var a = [].slice.call((0, n.td)('.' + ee, this.element));
                    if (i) {
                        o = e;
                    } else if (this.tbarEle[r]) {
                        var l = [].slice.call((0, n.td)('.' + ee, this.element));
                        o = l[r];
                    }
                    if (o) {
                        if (t) {
                            o.classList.add(eD);
                        } else {
                            o.classList.remove(eD);
                        }
                        if (t && (0, n.le)(this.element.getAttribute('tabindex')) && !o.classList.contains(ei)) {
                            if ((0, n.le)(o.firstElementChild.getAttribute('tabindex'))) {
                                o.firstElementChild.setAttribute('tabindex', '-1');
                                var h = [].slice.call((0, n.td)('.' + ee, this.element));
                                if (i) {
                                    r = h.indexOf(o);
                                }
                                var c = h[++r];
                                while(c){
                                    var d = this.eleContains(c);
                                    if (!d) {
                                        c.firstElementChild.removeAttribute('tabindex');
                                        break;
                                    }
                                    c = h[++r];
                                }
                            }
                        } else if ((0, n.le)(this.element.getAttribute('tabindex')) && !o.classList.contains(ei)) {
                            s = 0;
                            var p = false;
                            var u = false;
                            var f = a[s];
                            while(f){
                                if (!f.classList.contains(ei)) {
                                    if ((0, n.le)(f.firstElementChild.getAttribute('tabindex'))) {
                                        f.firstElementChild.setAttribute('tabindex', '-1');
                                        p = true;
                                    } else {
                                        if (p && u) {
                                            break;
                                        }
                                        var d = this.eleContains(f);
                                        if (!d) {
                                            f.firstElementChild.removeAttribute('tabindex');
                                            u = true;
                                        }
                                        f = a[++s];
                                    }
                                } else {
                                    f = a[++s];
                                }
                            }
                        }
                        this.refreshOverflow();
                    }
                };
                J([
                    (0, n.FE)([], eF)
                ], t.prototype, "items", void 0);
                J([
                    (0, n.Z9)('auto')
                ], t.prototype, "width", void 0);
                J([
                    (0, n.Z9)('auto')
                ], t.prototype, "height", void 0);
                J([
                    (0, n.Z9)('')
                ], t.prototype, "cssClass", void 0);
                J([
                    (0, n.Z9)('Scrollable')
                ], t.prototype, "overflowMode", void 0);
                J([
                    (0, n.Z9)()
                ], t.prototype, "scrollStep", void 0);
                J([
                    (0, n.Z9)(true)
                ], t.prototype, "enableCollision", void 0);
                J([
                    (0, n.Z9)(true)
                ], t.prototype, "enableHtmlSanitizer", void 0);
                J([
                    (0, n.Z9)(true)
                ], t.prototype, "allowKeyboard", void 0);
                J([
                    (0, n.ju)()
                ], t.prototype, "clicked", void 0);
                J([
                    (0, n.ju)()
                ], t.prototype, "created", void 0);
                J([
                    (0, n.ju)()
                ], t.prototype, "destroyed", void 0);
                J([
                    (0, n.ju)()
                ], t.prototype, "beforeCreate", void 0);
                t = J([
                    n.Zl
                ], t);
                return t;
            }(n.wA));
            ;
            var ez = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var eq = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            function eV(e, t) {
                var i = (0, n.l7)({}, e);
                for(var r = 0, s = Object.keys(i); r < s.length; r++){
                    var o = s[r];
                    if ((t).indexOf(o) < 0) {
                        (0, n.ex)(i, o);
                    }
                }
                return i;
            }
            function e_(e, t) {
                var i = t === 40 ? 0 : e.childElementCount - 1;
                var r = i;
                var s;
                var o = e.querySelector('.e-selected');
                if (o) {
                    o.classList.remove('e-selected');
                }
                for(var a = 0, l = e.children.length; a < l; a++){
                    if (e.children[a].classList.contains('e-focused')) {
                        s = e.children[a];
                        r = a;
                        s.classList.remove('e-focused');
                        if (t === 40) {
                            r++;
                        } else {
                            r--;
                        }
                        if (r === (t === 40 ? e.childElementCount : -1)) {
                            r = i;
                        }
                    }
                }
                s = e.children[r];
                r = eU(e, s, r, t);
                if (r !== -1) {
                    (0, n.cn)([
                        e.children[r]
                    ], 'e-focused');
                    e.children[r].focus();
                }
            }
            function eU(e, t, i, n, r) {
                if (r === void 0) {
                    r = 0;
                }
                if (t.classList.contains('e-separator') || t.classList.contains('e-disabled')) {
                    if (i === (n === 40 ? e.childElementCount - 1 : 0)) {
                        i = n === 40 ? 0 : e.childElementCount - 1;
                    } else {
                        if (n === 40) {
                            i++;
                        } else {
                            i--;
                        }
                    }
                }
                t = e.children[i];
                if (t.classList.contains('e-separator') || t.classList.contains('e-disabled')) {
                    r++;
                    if (r === e.childElementCount) {
                        return i = -1;
                    }
                    i = eU(e, t, i, n, r);
                }
                return i;
            }
            function eW(e) {
                var t = [].slice.call(e.getElementsByClassName('e-blank-icon'));
                if (!t.length) {
                    return;
                }
                var i = e.querySelector('.e-item:not(.e-blank-icon):not(.e-separator)');
                if ((0, n.le)(i)) {
                    return;
                }
                if (i.classList.contains('e-url')) {
                    i = i.querySelector('.e-menu-url');
                }
                var r = i.querySelector('.e-menu-icon');
                var s;
                var o = e.classList.contains('e-rtl');
                if (o) {
                    s = {
                        padding: 'paddingRight',
                        margin: 'marginLeft'
                    };
                } else {
                    s = {
                        padding: 'paddingLeft',
                        margin: 'marginRight'
                    };
                }
                var a = parseInt(getComputedStyle(r).fontSize, 10) + parseInt((o ? getComputedStyle(r)[s.margin] : getComputedStyle(r)[s.margin]), 10) + parseInt(getComputedStyle(i).paddingLeft, 10) + "px";
                t.forEach(function(e) {
                    if (e.classList.contains('e-url')) {
                        e.querySelector('.e-menu-url').style[s.padding] = a;
                    } else {
                        e.style[s.padding] = a;
                    }
                });
            }
            var eZ = (function(e) {
                ez(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                eq([
                    (0, n.Z9)('')
                ], t.prototype, "iconCss", void 0);
                eq([
                    (0, n.Z9)('')
                ], t.prototype, "id", void 0);
                eq([
                    (0, n.Z9)(false)
                ], t.prototype, "separator", void 0);
                eq([
                    (0, n.Z9)('')
                ], t.prototype, "text", void 0);
                eq([
                    (0, n.Z9)('')
                ], t.prototype, "url", void 0);
                eq([
                    (0, n.Z9)(false)
                ], t.prototype, "disabled", void 0);
                return t;
            }(n.rt));
            ;
            var eY = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var eX = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var eG = {
                DISABLED: 'e-disabled',
                FOCUS: 'e-focused',
                ICON: 'e-menu-icon',
                ITEM: 'e-item',
                POPUP: 'e-dropdown-popup',
                RTL: 'e-rtl',
                SEPARATOR: 'e-separator',
                VERTICAL: 'e-vertical'
            };
            var eK = (function(e) {
                eY(t, e);
                function t(t, i) {
                    var n = e.call(this, t, i) || this;
                    n.isPopupCreated = true;
                    return n;
                }
                t.prototype.preRender = function() {};
                t.prototype.getPersistData = function() {
                    return this.addOnPersist([]);
                };
                t.prototype.toggle = function() {
                    if (this.canOpen()) {
                        this.openPopUp();
                    } else {
                        this.closePopup();
                    }
                };
                t.prototype.render = function() {
                    this.initialize();
                    if (!this.disabled) {
                        this.wireEvents();
                    }
                    this.renderComplete();
                };
                t.prototype.addItems = function(e, t) {
                    var i;
                    var n = this.items.length;
                    for(var r = 0, s = this.items.length; r < s; r++){
                        if (t === this.items[r].text) {
                            n = r;
                            break;
                        }
                    }
                    for(var o = e.length - 1; o >= 0; o--){
                        i = new eZ(this, 'items', e[o], true);
                        this.items.splice(n, 0, i);
                    }
                    if (!this.canOpen()) {
                        this.createItems();
                    }
                };
                t.prototype.removeItems = function(e, t) {
                    var i = false;
                    for(var n = 0, r = e.length; n < r; n++){
                        for(var s = 0, o = this.items.length; s < o; s++){
                            if (e[n] === (t ? this.items[s].id : this.items[s].text)) {
                                this.items.splice(s, 1);
                                i = true;
                                break;
                            }
                        }
                    }
                    if (i && this.getULElement()) {
                        this.createItems();
                    }
                };
                t.prototype.createPopup = function() {
                    var e;
                    var t = this.createElement('div', {
                        className: eG.POPUP,
                        id: this.element.id + '-popup'
                    });
                    document.body.appendChild(t);
                    this.dropDown = new h.GI(t, {
                        relateTo: this.element,
                        collision: {
                            X: 'fit',
                            Y: 'flip'
                        },
                        position: {
                            X: 'left',
                            Y: 'bottom'
                        },
                        targetType: 'relative',
                        content: this.target ? this.getTargetElement() : '',
                        enableRtl: this.enableRtl
                    });
                    if (this.dropDown.element.style.position === 'fixed') {
                        this.dropDown.refreshPosition(this.element);
                    }
                    this.dropDown.hide();
                    (0, n.Y4)(this.element, (e = {}, e['aria-haspopup'] = this.items.length || this.target ? 'true' : 'false', e['aria-expanded'] = 'false', e['aria-owns'] = this.getPopUpElement().id, e['type'] = 'button', e['aria-label'] = this.element.textContent ? this.element.textContent : 'dropdownbutton', e));
                    if (this.cssClass) {
                        (0, n.cn)([
                            t
                        ], this.cssClass.split(' '));
                    }
                    this.isPopupCreated = true;
                };
                t.prototype.getTargetElement = function() {
                    return typeof (this.target) === 'string' ? (0, n.Ys)(this.target) : this.target;
                };
                t.prototype.createItems = function(e) {
                    var t = this.items;
                    var i = this.hasIcon(this.items, 'iconCss');
                    var r;
                    var s;
                    var o;
                    var a;
                    var l = this.getULElement();
                    if (l) {
                        l.innerHTML = '';
                    } else {
                        l = this.createElement('ul', {
                            attrs: {
                                'role': 'menu',
                                'tabindex': '0'
                            }
                        });
                    }
                    for(var h = 0; h < t.length; h++){
                        s = t[h];
                        var c = s.text;
                        o = this.createElement('li', {
                            innerHTML: s.url ? '' : c,
                            className: s.separator ? eG.ITEM + ' ' + eG.SEPARATOR : eG.ITEM,
                            attrs: {
                                'role': 'menuItem',
                                'tabindex': '-1',
                                'aria-label': c
                            },
                            id: s.id ? s.id : (0, n.QI)('e-' + this.getModuleName() + '-item')
                        });
                        if (this.enableHtmlSanitizer) {
                            o.textContent = s.url ? '' : c;
                        } else {
                            o.innerHTML = s.url ? '' : c;
                        }
                        if (s.url) {
                            o.appendChild(this.createAnchor(s));
                            o.classList.add('e-url');
                        }
                        if (s.iconCss) {
                            r = this.createElement('span', {
                                className: eG.ICON + ' ' + s.iconCss
                            });
                            if (s.url) {
                                o.childNodes[0].appendChild(r);
                            } else {
                                o.insertBefore(r, o.childNodes[0]);
                            }
                        } else {
                            if (i && !s.separator) {
                                o.classList.add('e-blank-icon');
                            }
                        }
                        if (s.disabled) {
                            o.classList.add('e-disabled');
                        }
                        a = {
                            item: s,
                            element: o
                        };
                        this.trigger('beforeItemRender', a);
                        l.appendChild(o);
                    }
                    if (e) {
                        this.getPopUpElement().appendChild(l);
                    }
                    if (i) {
                        eW(this.getPopUpElement());
                    }
                };
                t.prototype.hasIcon = function(e, t) {
                    for(var i = 0, n = e.length; i < n; i++){
                        if (e[i][t]) {
                            return true;
                        }
                    }
                    return false;
                };
                t.prototype.createAnchor = function(e) {
                    var t = (this.enableHtmlSanitizer) ? n.pJ.sanitize(e.text) : e.text;
                    return this.createElement('a', {
                        className: 'e-menu-text e-menu-url',
                        innerHTML: t,
                        attrs: {
                            'href': e.url
                        }
                    });
                };
                t.prototype.initialize = function() {
                    this.button = new d.z({
                        iconCss: this.iconCss,
                        iconPosition: this.iconPosition,
                        cssClass: this.cssClass,
                        content: this.content,
                        disabled: this.disabled,
                        enableRtl: this.enableRtl,
                        enablePersistence: this.enablePersistence
                    });
                    this.button.createElement = this.createElement;
                    this.button.appendTo(this.element);
                    if (!this.element.id) {
                        this.element.id = (0, n.QI)('e-' + this.getModuleName());
                    }
                    this.appendArrowSpan();
                    this.setActiveElem([
                        this.element
                    ]);
                    if ((this.target && !this.isColorPicker()) || !this.createPopupOnClick) {
                        this.createPopup();
                    } else {
                        this.isPopupCreated = false;
                    }
                };
                t.prototype.isColorPicker = function() {
                    if (!this.element) {
                        return false;
                    }
                    var e = this.element.previousSibling;
                    if (e && e.classList && e.classList.contains('e-split-colorpicker')) {
                        return true;
                    }
                    return false;
                };
                t.prototype.appendArrowSpan = function() {
                    this.element.appendChild(this.createElement('span', {
                        className: 'e-btn-icon e-icons ' + 'e-icon-' + (this.cssClass.indexOf(eG.VERTICAL) > -1 ? 'bottom' : 'right') + ' e-caret'
                    }));
                };
                t.prototype.setActiveElem = function(e) {
                    this.activeElem = e;
                };
                t.prototype.getModuleName = function() {
                    return 'dropdown-btn';
                };
                t.prototype.canOpen = function() {
                    var e = false;
                    if (this.isPopupCreated) {
                        e = this.getPopUpElement().classList.contains('e-popup-close');
                    }
                    return e;
                };
                t.prototype.destroy = function() {
                    var t = this;
                    e.prototype.destroy.call(this);
                    if (this.getModuleName() === 'dropdown-btn') {
                        var i;
                        if (this.element.querySelector('span.e-caret')) {
                            (0, n.og)(this.element.querySelector('span.e-caret'));
                        }
                        if (this.cssClass) {
                            i = this.cssClass.split(' ');
                        }
                        this.button.destroy();
                        if (i) {
                            (0, n.IV)([
                                this.element
                            ], i);
                        }
                        (0, n.IV)(this.activeElem, [
                            'e-active'
                        ]);
                        var r = this.element.getAttribute('class') ? [
                            'aria-haspopup',
                            'aria-expanded',
                            'aria-owns',
                            'type'
                        ] : [
                            'aria-haspopup',
                            'aria-expanded',
                            'aria-owns',
                            'type',
                            'class'
                        ];
                        r.forEach(function(e) {
                            t.element.removeAttribute(e);
                        });
                        this.popupUnWireEvents();
                        this.destroyPopup();
                        this.isPopupCreated = false;
                        if (!this.disabled) {
                            this.unWireEvents();
                        }
                    }
                };
                t.prototype.destroyPopup = function() {
                    if (this.isPopupCreated) {
                        this.dropDown.destroy();
                        if (this.getPopUpElement()) {
                            var e = document.getElementById(this.getPopUpElement().id);
                            if (e) {
                                (0, n.IV)([
                                    e
                                ], [
                                    'e-popup-open',
                                    'e-popup-close'
                                ]);
                                (0, n.og)(e);
                            }
                        }
                        n.bi.remove(this.getPopUpElement(), 'click', this.clickHandler);
                        n.bi.remove(this.getPopUpElement(), 'keydown', this.keyBoardHandler);
                        if (this.isPopupCreated) {
                            this.dropDown = undefined;
                        }
                    }
                    this.isPopupCreated = false;
                };
                t.prototype.getPopUpElement = function() {
                    var e = null;
                    if (this.dropDown) {
                        e = this.dropDown.element;
                    }
                    return e;
                };
                t.prototype.getULElement = function() {
                    var e = null;
                    if (this.getPopUpElement()) {
                        e = this.getPopUpElement().children[0];
                    }
                    return e;
                };
                t.prototype.wireEvents = function() {
                    this.delegateMousedownHandler = this.mousedownHandler.bind(this);
                    if (!this.createPopupOnClick) {
                        n.bi.add(document, 'mousedown touchstart', this.delegateMousedownHandler, this);
                    }
                    n.bi.add(this.element, 'click', this.clickHandler, this);
                    n.bi.add(this.element, 'keydown', this.keyBoardHandler, this);
                };
                t.prototype.popupWireEvents = function() {
                    var e = this.getPopUpElement();
                    if (this.createPopupOnClick) {
                        n.bi.add(document, 'mousedown touchstart', this.delegateMousedownHandler, this);
                    }
                    if (e) {
                        n.bi.add(e, 'click', this.clickHandler, this);
                        n.bi.add(e, 'keydown', this.keyBoardHandler, this);
                        if (this.closeActionEvents) {
                            n.bi.add(e, this.closeActionEvents, this.focusoutHandler, this);
                        }
                    }
                    this.rippleFn = (0, n.qx)(e, {
                        selector: '.' + eG.ITEM
                    });
                };
                t.prototype.popupUnWireEvents = function() {
                    var e = this.getPopUpElement();
                    if (this.createPopupOnClick) {
                        n.bi.remove(document, 'mousedown touchstart', this.delegateMousedownHandler);
                    }
                    if (e && e.parentElement) {
                        n.bi.remove(e, 'click', this.clickHandler);
                        n.bi.remove(e, 'keydown', this.keyBoardHandler);
                        if (this.closeActionEvents) {
                            n.bi.remove(e, this.closeActionEvents, this.focusoutHandler);
                        }
                    }
                };
                t.prototype.keyBoardHandler = function(e) {
                    if (e.target === this.element && (e.keyCode === 9 || (!e.altKey && e.keyCode === 40) || e.keyCode === 38)) {
                        return;
                    }
                    switch(e.keyCode){
                        case 38:
                        case 40:
                            if (e.altKey && (e.keyCode === 38 || e.keyCode === 40)) {
                                this.keyEventHandler(e);
                            } else {
                                this.upDownKeyHandler(e);
                            }
                            break;
                        case 9:
                        case 13:
                        case 27:
                        case 32:
                            this.keyEventHandler(e);
                            break;
                    }
                };
                t.prototype.upDownKeyHandler = function(e) {
                    if (this.target && (e.keyCode === 38 || e.keyCode === 40)) {
                        return;
                    }
                    e.preventDefault();
                    e_(this.getULElement(), e.keyCode);
                };
                t.prototype.keyEventHandler = function(e) {
                    if (this.target && (e.keyCode === 13 || e.keyCode === 9)) {
                        return;
                    }
                    if (e.target && e.target.className.indexOf('e-edit-template') > -1 && e.keyCode === 32) {
                        return;
                    }
                    if (e.keyCode !== 9) {
                        e.preventDefault();
                    }
                    if (e.keyCode === 27 || e.keyCode === 38 || e.keyCode === 9) {
                        if (!this.canOpen()) {
                            this.closePopup(e, this.element);
                        }
                    } else {
                        this.clickHandler(e);
                    }
                };
                t.prototype.getLI = function(e) {
                    return e.tagName === 'LI' ? e : (0, n.oq)(e, 'li');
                };
                t.prototype.mousedownHandler = function(e) {
                    var t = e.target;
                    if (this.dropDown && !this.canOpen() && !((0, n.oq)(t, '[id="' + this.getPopUpElement().id + '"]') || (0, n.oq)(t, '[id="' + this.element.id + '"]'))) {
                        this.closePopup(e);
                    }
                };
                t.prototype.focusoutHandler = function(e) {
                    if (this.isPopupCreated && !this.canOpen()) {
                        this.closePopup(e);
                    }
                };
                t.prototype.clickHandler = function(e) {
                    var t = e.target;
                    if ((0, n.oq)(t, '[id="' + this.element.id + '"]')) {
                        if (!this.createPopupOnClick || (this.target && !this.isColorPicker())) {
                            if (this.getPopUpElement().classList.contains('e-popup-close')) {
                                this.openPopUp(e);
                            } else {
                                this.closePopup(e);
                            }
                        } else if (this.isPopupCreated) {
                            this.closePopup(e, this.activeElem[0]);
                        } else {
                            this.createPopup();
                            this.openPopUp(e);
                        }
                    } else {
                        if ((0, n.oq)(t, '[id="' + this.getPopUpElement().id + '"]')) {
                            var i = void 0;
                            var r = void 0;
                            var s = void 0;
                            var o = this.getLI(t);
                            if (o) {
                                r = Array.prototype.indexOf.call(this.getULElement().children, o);
                                s = this.items[r];
                                if (s) {
                                    i = {
                                        element: o,
                                        item: s
                                    };
                                    this.trigger('select', i);
                                }
                                this.closePopup(e, this.activeElem[0]);
                            }
                        }
                    }
                };
                t.prototype.openPopUp = function(e) {
                    var t = this;
                    if (e === void 0) {
                        e = null;
                    }
                    var i = false;
                    var r = this.getPopUpElement();
                    if (!this.target) {
                        this.createItems(true);
                    } else {
                        if (this.activeElem.length > 1) {
                            var s = (0, n.Xr)(this.activeElem[0], 'split-btn');
                            if (s.isReact && r.childNodes.length < 1) {
                                i = true;
                                s.appendReactElement(this.getTargetElement(), this.getPopUpElement());
                                this.renderReactTemplates();
                            }
                        } else {
                            if (this.isReact && r.childNodes.length < 1) {
                                i = true;
                                this.appendReactElement(this.getTargetElement(), this.getPopUpElement());
                                this.renderReactTemplates();
                            }
                        }
                    }
                    var o = this.getULElement();
                    this.popupWireEvents();
                    var a = {
                        element: o,
                        items: this.items,
                        event: e,
                        cancel: false
                    };
                    this.trigger('beforeOpen', a, function(e) {
                        if (!e.cancel) {
                            var i = t.getULElement();
                            t.dropDown.show(null, t.element);
                            (0, n.cn)([
                                t.element
                            ], 'e-active');
                            t.element.setAttribute('aria-expanded', 'true');
                            if (i) {
                                i.focus();
                            }
                            var r = {
                                element: i,
                                items: t.items
                            };
                            t.trigger('open', r);
                        }
                    });
                };
                t.prototype.closePopup = function(e, t) {
                    var i = this;
                    if (e === void 0) {
                        e = null;
                    }
                    var r = this.getULElement();
                    var s = {
                        element: r,
                        items: this.items,
                        event: e,
                        cancel: false
                    };
                    var o = this.getPopUpElement();
                    if (o) {
                        n.bi.remove(o, 'keydown', this.keyBoardHandler);
                    }
                    this.trigger('beforeClose', s, function(e) {
                        if (!e.cancel) {
                            i.popupUnWireEvents();
                            var r = i.getULElement();
                            var s = void 0;
                            if (r) {
                                s = r.querySelector('.e-selected');
                            }
                            if (s) {
                                s.classList.remove('e-selected');
                            }
                            i.dropDown.hide();
                            (0, n.IV)(i.activeElem, 'e-active');
                            i.element.setAttribute('aria-expanded', 'false');
                            if (t) {
                                t.focus();
                            }
                            var o = {
                                element: r,
                                items: i.items
                            };
                            i.trigger('close', o);
                            if (!i.target && r) {
                                (0, n.og)(r);
                            }
                            if (!i.target || i.isColorPicker()) {
                                if (i.createPopupOnClick) {
                                    i.destroyPopup();
                                }
                            }
                            if (i.target) {
                                i.isPopupCreated = i.createPopupOnClick ? false : true;
                            }
                        }
                    });
                };
                t.prototype.unWireEvents = function() {
                    if (!this.createPopupOnClick) {
                        n.bi.remove(document, 'mousedown touchstart', this.delegateMousedownHandler);
                    }
                    n.bi.remove(this.element, 'click', this.clickHandler);
                    n.bi.remove(this.element, 'keydown', this.keyBoardHandler);
                    if (this.isPopupCreated) {
                        n.bi.remove(this.getPopUpElement(), 'click', this.clickHandler);
                        n.bi.remove(this.getPopUpElement(), 'keydown', this.keyBoardHandler);
                    }
                };
                t.prototype.onPropertyChanged = function(e, t) {
                    var i = [
                        'content',
                        'cssClass',
                        'iconCss',
                        'iconPosition',
                        'disabled',
                        'enableRtl'
                    ];
                    this.button.setProperties(eV(e, i));
                    var r;
                    if (this.isPopupCreated) {
                        r = this.getPopUpElement();
                        this.dropDown.setProperties(eV(e, [
                            'enableRtl'
                        ]));
                    }
                    for(var s = 0, o = Object.keys(e); s < o.length; s++){
                        var a = o[s];
                        switch(a){
                            case 'content':
                                if (!this.element.querySelector('span.e-caret')) {
                                    this.appendArrowSpan();
                                }
                                break;
                            case 'disabled':
                                if (e.disabled) {
                                    this.unWireEvents();
                                    if (this.isPopupCreated && !this.canOpen()) {
                                        this.closePopup();
                                    }
                                } else {
                                    this.wireEvents();
                                }
                                break;
                            case 'cssClass':
                                if (e.cssClass.indexOf(eG.VERTICAL) > -1) {
                                    var l = this.element.querySelector('span.e-caret');
                                    (0, n.s1)(l, [
                                        'e-icon-bottom'
                                    ], [
                                        'e-icon-right'
                                    ]);
                                }
                                if (this.isPopupCreated) {
                                    if (t.cssClass) {
                                        (0, n.IV)([
                                            r
                                        ], t.cssClass.split(' '));
                                    }
                                    if (e.cssClass) {
                                        (0, n.cn)([
                                            r
                                        ], e.cssClass.split(' '));
                                    }
                                }
                                break;
                            case 'target':
                                this.dropDown.content = this.getTargetElement();
                                this.dropDown.dataBind();
                                break;
                            case 'items':
                                if (this.isPopupCreated && this.getULElement()) {
                                    this.createItems();
                                }
                                break;
                            case 'createPopupOnClick':
                                if (e.createPopupOnClick) {
                                    this.destroyPopup();
                                } else {
                                    this.createPopup();
                                }
                                break;
                        }
                    }
                };
                t.prototype.focusIn = function() {
                    this.element.focus();
                };
                eX([
                    (0, n.Z9)('')
                ], t.prototype, "content", void 0);
                eX([
                    (0, n.Z9)('')
                ], t.prototype, "cssClass", void 0);
                eX([
                    (0, n.Z9)(false)
                ], t.prototype, "disabled", void 0);
                eX([
                    (0, n.Z9)('')
                ], t.prototype, "iconCss", void 0);
                eX([
                    (0, n.Z9)('Left')
                ], t.prototype, "iconPosition", void 0);
                eX([
                    (0, n.Z9)(false)
                ], t.prototype, "enableHtmlSanitizer", void 0);
                eX([
                    (0, n.FE)([], eZ)
                ], t.prototype, "items", void 0);
                eX([
                    (0, n.Z9)(false)
                ], t.prototype, "createPopupOnClick", void 0);
                eX([
                    (0, n.Z9)('')
                ], t.prototype, "target", void 0);
                eX([
                    (0, n.Z9)('')
                ], t.prototype, "closeActionEvents", void 0);
                eX([
                    (0, n.ju)()
                ], t.prototype, "beforeItemRender", void 0);
                eX([
                    (0, n.ju)()
                ], t.prototype, "beforeOpen", void 0);
                eX([
                    (0, n.ju)()
                ], t.prototype, "beforeClose", void 0);
                eX([
                    (0, n.ju)()
                ], t.prototype, "close", void 0);
                eX([
                    (0, n.ju)()
                ], t.prototype, "open", void 0);
                eX([
                    (0, n.ju)()
                ], t.prototype, "select", void 0);
                eX([
                    (0, n.ju)()
                ], t.prototype, "created", void 0);
                t = eX([
                    n.Zl
                ], t);
                return t;
            }(n.wA));
            ;
            var eJ = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var e$ = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var eQ = 'e-rtl';
            var e0 = 'EJS-SPLITBUTTON';
            var e1 = (function(e) {
                eJ(t, e);
                function t(t, i) {
                    return e.call(this, t, i) || this;
                }
                t.prototype.preRender = function() {
                    var e = this.element;
                    if (e.tagName === e0) {
                        var t = (0, n.NA)('ej2_instances', e);
                        var i = this.createElement('button', {
                            attrs: {
                                'type': 'button'
                            }
                        });
                        var r = this.createElement(e0, {
                            className: 'e-' + this.getModuleName() + '-wrapper'
                        });
                        for(var s = 0, o = e.attributes.length; s < o; s++){
                            i.setAttribute(e.attributes[s].nodeName, e.attributes[s].nodeValue);
                        }
                        e.parentNode.insertBefore(r, e);
                        (0, n.og)(e);
                        e = i;
                        r.appendChild(e);
                        (0, n.sO)('ej2_instances', t, e);
                        this.wrapper = r;
                        this.element = e;
                    }
                    if (!this.element.id) {
                        this.element.id = (0, n.QI)('e-' + this.getModuleName());
                    }
                };
                t.prototype.render = function() {
                    this.initWrapper();
                    this.createPrimaryButton();
                    this.renderControl();
                };
                t.prototype.renderControl = function() {
                    this.createSecondaryButton();
                    this.setActiveElem([
                        this.element,
                        this.secondaryBtnObj.element
                    ]);
                    this.setAria();
                    this.wireEvents();
                    this.renderComplete();
                };
                t.prototype.addItems = function(t, i) {
                    e.prototype.addItems.call(this, t, i);
                    this.secondaryBtnObj.items = this.items;
                };
                t.prototype.removeItems = function(t, i) {
                    e.prototype.removeItems.call(this, t, i);
                    this.secondaryBtnObj.items = this.items;
                };
                t.prototype.initWrapper = function() {
                    if (!this.wrapper) {
                        this.wrapper = this.createElement('div', {
                            className: 'e-' + this.getModuleName() + '-wrapper'
                        });
                        this.element.parentNode.insertBefore(this.wrapper, this.element);
                    }
                    this.element.classList.remove('e-' + this.getModuleName());
                    if (this.enableRtl) {
                        this.wrapper.classList.add(eQ);
                    }
                    if (this.cssClass) {
                        (0, n.cn)([
                            this.wrapper
                        ], this.cssClass.split(' '));
                    }
                };
                t.prototype.createPrimaryButton = function() {
                    var e = {
                        cssClass: this.cssClass,
                        enableRtl: this.enableRtl,
                        iconCss: this.iconCss,
                        iconPosition: this.iconPosition,
                        content: this.content,
                        disabled: this.disabled
                    };
                    this.primaryBtnObj = new d.z(e);
                    this.primaryBtnObj.createElement = this.createElement;
                    this.primaryBtnObj.appendTo(this.element);
                    this.element.classList.add('e-' + this.getModuleName());
                    this.element.type = 'button';
                    this.wrapper.appendChild(this.element);
                };
                t.prototype.createSecondaryButton = function() {
                    var e = this;
                    var t = this.createElement('button', {
                        className: 'e-icon-btn',
                        attrs: {
                            'tabindex': '-1'
                        },
                        id: this.element.id + '_dropdownbtn'
                    });
                    this.wrapper.appendChild(t);
                    var i = {
                        cssClass: this.cssClass,
                        disabled: this.disabled,
                        enableRtl: this.enableRtl,
                        items: this.items,
                        target: this.target,
                        createPopupOnClick: this.createPopupOnClick
                    };
                    i.beforeItemRender = function(t) {
                        if (e.createPopupOnClick) {
                            e.secondaryBtnObj.dropDown.relateTo = e.wrapper;
                            e.dropDown = e.secondaryBtnObj.dropDown;
                        }
                        e.trigger('beforeItemRender', t);
                    };
                    i.open = function(t) {
                        e.trigger('open', t);
                    };
                    i.close = function(t) {
                        e.trigger('close', t);
                    };
                    i.select = function(t) {
                        e.trigger('select', t);
                    };
                    i.beforeOpen = function(t) {
                        var i = new e3();
                        e.trigger('beforeOpen', t, function(e) {
                            i.resolve(e);
                        });
                        return i;
                    };
                    i.beforeClose = function(t) {
                        var i = new e3();
                        e.trigger('beforeClose', t, function(e) {
                            i.resolve(e);
                        });
                        return i;
                    };
                    this.secondaryBtnObj = new eK(i);
                    this.secondaryBtnObj.createElement = this.createElement;
                    this.secondaryBtnObj.appendTo(t);
                    if (!this.createPopupOnClick) {
                        this.secondaryBtnObj.dropDown.relateTo = this.wrapper;
                        this.dropDown = this.secondaryBtnObj.dropDown;
                    }
                    this.secondaryBtnObj.activeElem = [
                        this.element,
                        this.secondaryBtnObj.element
                    ];
                    this.secondaryBtnObj.element.querySelector('.e-btn-icon').classList.remove('e-icon-right');
                };
                t.prototype.setAria = function() {
                    (0, n.Y4)(this.element, {
                        'aria-expanded': 'false',
                        'aria-haspopup': 'true',
                        'aria-label': this.element.textContent + ' splitbutton',
                        'aria-owns': this.element.id + '_dropdownbtn-popup'
                    });
                };
                t.prototype.getModuleName = function() {
                    return 'split-btn';
                };
                t.prototype.toggle = function() {
                    this.secondaryBtnObj.toggle();
                };
                t.prototype.destroy = function() {
                    var t = this;
                    var i = [
                        eQ
                    ];
                    if (this.cssClass) {
                        i = i.concat(this.cssClass.split(' '));
                    }
                    if (this.element) {
                        var r = document.getElementById(this.element.id);
                        if (r && r.parentElement === this.wrapper) {
                            if (this.wrapper.tagName === e0) {
                                this.wrapper.innerHTML = '';
                                (0, n.IV)([
                                    this.wrapper
                                ], [
                                    'e-rtl',
                                    'e-' + this.getModuleName() + '-wrapper'
                                ]);
                                (0, n.IV)([
                                    this.wrapper
                                ], this.cssClass.split(' '));
                            } else {
                                (0, n.IV)([
                                    this.element
                                ], i);
                                [
                                    'aria-label',
                                    'aria-haspopup',
                                    'aria-expanded',
                                    'aria-owns',
                                    'type'
                                ].forEach(function(e) {
                                    t.element.removeAttribute(e);
                                });
                                this.wrapper.parentNode.insertBefore(this.element, this.wrapper);
                                (0, n.Od)(this.wrapper);
                            }
                            this.unWireEvents();
                        }
                    }
                    this.primaryBtnObj.destroy();
                    this.secondaryBtnObj.destroy();
                    e.prototype.destroy.call(this);
                    if (!this.element.getAttribute('class')) {
                        this.element.removeAttribute('class');
                    }
                };
                t.prototype.wireEvents = function() {
                    n.bi.add(this.element, 'click', this.primaryBtnClickHandler, this);
                    new n.nv(this.element, {
                        keyAction: this.btnKeyBoardHandler.bind(this),
                        keyConfigs: {
                            altdownarrow: 'alt+downarrow'
                        }
                    });
                };
                t.prototype.unWireEvents = function() {
                    n.bi.remove(this.element, 'click', this.primaryBtnClickHandler);
                    (0, n.s8)(this.element, n.nv).destroy();
                };
                t.prototype.primaryBtnClickHandler = function() {
                    this.trigger('click', {
                        element: this.element
                    });
                };
                t.prototype.btnKeyBoardHandler = function(e) {
                    switch(e.action){
                        case 'altdownarrow':
                            this.clickHandler(e);
                            break;
                    }
                };
                t.prototype.onPropertyChanged = function(e, t) {
                    var i = [
                        'content',
                        'iconCss',
                        'iconPosition',
                        'cssClass',
                        'disabled',
                        'enableRtl'
                    ];
                    this.primaryBtnObj.setProperties(eV(e, i));
                    i = [
                        'beforeOpen',
                        'beforeItemRender',
                        'select',
                        'open',
                        'close',
                        'cssClass',
                        'disabled',
                        'enableRtl',
                        'createPopupOnClick'
                    ];
                    if (Object.keys(e).indexOf('items') > -1) {
                        this.secondaryBtnObj.items = e.items;
                        this.secondaryBtnObj.dataBind();
                    }
                    this.secondaryBtnObj.setProperties(eV(e, i));
                    for(var r = 0, s = Object.keys(e); r < s.length; r++){
                        var o = s[r];
                        switch(o){
                            case 'cssClass':
                                if (t.cssClass) {
                                    (0, n.IV)([
                                        this.wrapper
                                    ], t.cssClass.split(' '));
                                }
                                (0, n.cn)([
                                    this.wrapper
                                ], e.cssClass.split(' '));
                                break;
                            case 'enableRtl':
                                if (e.enableRtl) {
                                    (0, n.cn)([
                                        this.wrapper
                                    ], eQ);
                                } else {
                                    (0, n.IV)([
                                        this.wrapper
                                    ], eQ);
                                }
                                break;
                        }
                    }
                };
                t.prototype.focusIn = function() {
                    this.element.focus();
                };
                e$([
                    (0, n.Z9)('')
                ], t.prototype, "content", void 0);
                e$([
                    (0, n.Z9)('')
                ], t.prototype, "cssClass", void 0);
                e$([
                    (0, n.Z9)(false)
                ], t.prototype, "disabled", void 0);
                e$([
                    (0, n.Z9)('')
                ], t.prototype, "iconCss", void 0);
                e$([
                    (0, n.Z9)('Left')
                ], t.prototype, "iconPosition", void 0);
                e$([
                    (0, n.Z9)(false)
                ], t.prototype, "createPopupOnClick", void 0);
                e$([
                    (0, n.FE)([], eZ)
                ], t.prototype, "items", void 0);
                e$([
                    (0, n.Z9)('')
                ], t.prototype, "target", void 0);
                e$([
                    (0, n.ju)()
                ], t.prototype, "beforeItemRender", void 0);
                e$([
                    (0, n.ju)()
                ], t.prototype, "beforeOpen", void 0);
                e$([
                    (0, n.ju)()
                ], t.prototype, "beforeClose", void 0);
                e$([
                    (0, n.ju)()
                ], t.prototype, "click", void 0);
                e$([
                    (0, n.ju)()
                ], t.prototype, "close", void 0);
                e$([
                    (0, n.ju)()
                ], t.prototype, "open", void 0);
                e$([
                    (0, n.ju)()
                ], t.prototype, "select", void 0);
                e$([
                    (0, n.ju)()
                ], t.prototype, "created", void 0);
                t = e$([
                    n.Zl
                ], t);
                return t;
            }(eK));
            var e3 = (function() {
                function e() {
                    var e = this;
                    this.promise = new Promise(function(t, i) {
                        e.resolve = t;
                        e.reject = i;
                    });
                    this.catch = this.promise.catch.bind(this.promise);
                    this.then = this.promise.then.bind(this.promise);
                }
                return e;
            }());
            var e2 = i(4895);
            ;
            var e4 = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var e5 = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var e7 = 1500;
            var e9 = 500;
            var e6 = 0;
            var e8 = 8;
            var te = 2;
            var tt = 2;
            var ti = 'e-tooltip';
            var tn = 'e-rtl';
            var tr = 'e-bigger';
            var ts = 'e-icons';
            var to = 'e-tooltip-close';
            var ta = 'e-tooltip-wrap';
            var tl = 'e-tip-content';
            var th = 'e-arrow-tip';
            var tc = 'e-arrow-tip-outer';
            var td = 'e-arrow-tip-inner';
            var tp = 'e-tip-bottom';
            var tu = 'e-tip-top';
            var tf = 'e-tip-left';
            var tm = 'e-tip-right';
            var tv = 'e-popup';
            var tg = 'e-popup-open';
            var tb = 'e-popup-close';
            var ty = 'e-lib';
            var tC = 'e-hidden';
            var tE = 'e-tooltip-popup-container';
            var tS = (function(e) {
                e4(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                e5([
                    (0, n.Z9)({
                        effect: 'FadeIn',
                        duration: 150,
                        delay: 0
                    })
                ], t.prototype, "open", void 0);
                e5([
                    (0, n.Z9)({
                        effect: 'FadeOut',
                        duration: 150,
                        delay: 0
                    })
                ], t.prototype, "close", void 0);
                return t;
            }(n.rt));
            var tw = (function(e) {
                e4(t, e);
                function t(t, i) {
                    var n = e.call(this, t, i) || this;
                    n.mouseMoveEvent = null;
                    n.mouseMoveTarget = null;
                    n.containerElement = null;
                    n.isBodyContainer = true;
                    return n;
                }
                t.prototype.initialize = function() {
                    this.formatPosition();
                    (0, n.cn)([
                        this.element
                    ], ti);
                };
                t.prototype.formatPosition = function() {
                    var e, t;
                    if (this.position.indexOf('Top') === 0 || this.position.indexOf('Bottom') === 0) {
                        e = this.position.split(/(?=[A-Z])/), this.tooltipPositionY = e[0], this.tooltipPositionX = e[1];
                    } else {
                        t = this.position.split(/(?=[A-Z])/), this.tooltipPositionX = t[0], this.tooltipPositionY = t[1];
                    }
                };
                t.prototype.renderArrow = function() {
                    this.setTipClass(this.position);
                    var e = this.createElement('div', {
                        className: th + ' ' + this.tipClass
                    });
                    e.appendChild(this.createElement('div', {
                        className: tc + ' ' + this.tipClass
                    }));
                    e.appendChild(this.createElement('div', {
                        className: td + ' ' + this.tipClass
                    }));
                    this.tooltipEle.appendChild(e);
                };
                t.prototype.setTipClass = function(e) {
                    if (e.indexOf('Right') === 0) {
                        this.tipClass = tf;
                    } else if (e.indexOf('Bottom') === 0) {
                        this.tipClass = tu;
                    } else if (e.indexOf('Left') === 0) {
                        this.tipClass = tm;
                    } else {
                        this.tipClass = tp;
                    }
                };
                t.prototype.renderPopup = function(e) {
                    var t = this.mouseTrail ? {
                        top: 0,
                        left: 0
                    } : this.getTooltipPosition(e);
                    this.tooltipEle.classList.remove(ty);
                    this.popupObj = new h.GI(this.tooltipEle, {
                        height: this.height,
                        width: this.width,
                        position: {
                            X: t.left,
                            Y: t.top
                        },
                        enableRtl: this.enableRtl,
                        open: this.openPopupHandler.bind(this),
                        close: this.closePopupHandler.bind(this)
                    });
                };
                t.prototype.getTooltipPosition = function(e) {
                    this.tooltipEle.style.display = 'block';
                    var t = (0, c.k)(e, this.tooltipPositionX, this.tooltipPositionY, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());
                    var i = this.calculateTooltipOffset(this.position);
                    var n = this.calculateElementPosition(t, i);
                    var r = n[0];
                    var s = n[1];
                    var o = this.collisionFlipFit(e, r, s);
                    this.tooltipEle.style.display = '';
                    return o;
                };
                t.prototype.windowResize = function() {
                    this.reposition(this.findTarget());
                };
                t.prototype.reposition = function(e) {
                    if (this.popupObj && e) {
                        var t = this.getTooltipPosition(e);
                        this.popupObj.position = {
                            X: t.left,
                            Y: t.top
                        };
                        this.popupObj.dataBind();
                    }
                };
                t.prototype.openPopupHandler = function() {
                    if (!this.mouseTrail && this.needTemplateReposition()) {
                        this.reposition(this.findTarget());
                    }
                    this.trigger('afterOpen', this.tooltipEventArgs);
                };
                t.prototype.closePopupHandler = function() {
                    this.clearTemplate([
                        'content'
                    ]);
                    this.clear();
                    this.trigger('afterClose', this.tooltipEventArgs);
                };
                t.prototype.calculateTooltipOffset = function(e) {
                    var t = {
                        top: 0,
                        left: 0
                    };
                    var i = this.tooltipEle.offsetWidth;
                    var r = this.tooltipEle.offsetHeight;
                    var s = (0, n.Ys)('.' + th, this.tooltipEle);
                    var o = s ? s.offsetWidth : 0;
                    var a = s ? s.offsetHeight : 0;
                    var l = (this.showTipPointer ? e6 : e8);
                    var h = (a / 2) + tt + (this.tooltipEle.offsetHeight - this.tooltipEle.clientHeight);
                    var c = (o / 2) + tt + (this.tooltipEle.offsetWidth - this.tooltipEle.clientWidth);
                    if (this.mouseTrail) {
                        l += te;
                    }
                    switch(e){
                        case 'RightTop':
                            t.left += o + l;
                            t.top -= r - h;
                            break;
                        case 'RightCenter':
                            t.left += o + l;
                            t.top -= (r / 2);
                            break;
                        case 'RightBottom':
                            t.left += o + l;
                            t.top -= (h);
                            break;
                        case 'BottomRight':
                            t.top += (a + l);
                            t.left -= (c);
                            break;
                        case 'BottomCenter':
                            t.top += (a + l);
                            t.left -= (i / 2);
                            break;
                        case 'BottomLeft':
                            t.top += (a + l);
                            t.left -= (i - c);
                            break;
                        case 'LeftBottom':
                            t.left -= (o + i + l);
                            t.top -= (h);
                            break;
                        case 'LeftCenter':
                            t.left -= (o + i + l);
                            t.top -= (r / 2);
                            break;
                        case 'LeftTop':
                            t.left -= (o + i + l);
                            t.top -= (r - h);
                            break;
                        case 'TopLeft':
                            t.top -= (r + a + l);
                            t.left -= (i - c);
                            break;
                        case 'TopRight':
                            t.top -= (r + a + l);
                            t.left -= (c);
                            break;
                        default:
                            t.top -= (r + a + l);
                            t.left -= (i / 2);
                            break;
                    }
                    t.left += this.offsetX;
                    t.top += this.offsetY;
                    return t;
                };
                t.prototype.updateTipPosition = function(e) {
                    var t = (0, n.td)('.' + th + ',.' + tc + ',.' + td, this.tooltipEle);
                    var i = [
                        tp,
                        tu,
                        tf,
                        tm
                    ];
                    (0, n.IV)(t, i);
                    this.setTipClass(e);
                    (0, n.cn)(t, this.tipClass);
                };
                t.prototype.adjustArrow = function(e, t, i, r) {
                    if (this.showTipPointer === false) {
                        return;
                    }
                    this.updateTipPosition(t);
                    var s;
                    var o;
                    this.tooltipEle.style.display = 'block';
                    var a = this.tooltipEle.clientWidth;
                    var l = this.tooltipEle.clientHeight;
                    var h = (0, n.Ys)('.' + th, this.tooltipEle);
                    var c = (0, n.Ys)('.' + td, this.tooltipEle);
                    var d = h.offsetWidth;
                    var p = h.offsetHeight;
                    this.tooltipEle.style.display = '';
                    if (this.tipClass === tp || this.tipClass === tu) {
                        if (this.tipClass === tp) {
                            o = '99.9%';
                            c.style.top = '-' + (p - 2) + 'px';
                        } else {
                            o = -(p - 1) + 'px';
                            c.style.top = '-' + (p - 6) + 'px';
                        }
                        if (e) {
                            var u = i !== 'Center' || (a > e.offsetWidth) || this.mouseTrail;
                            if ((u && i === 'Left') || (!u && this.tipPointerPosition === 'End')) {
                                s = (a - d - tt) + 'px';
                            } else if ((u && i === 'Right') || (!u && this.tipPointerPosition === 'Start')) {
                                s = tt + 'px';
                            } else if ((u) && (this.tipPointerPosition === 'End' || this.tipPointerPosition === 'Start')) {
                                s = (this.tipPointerPosition === 'End') ? ((e.offsetWidth + ((this.tooltipEle.offsetWidth - e.offsetWidth) / 2)) - (d / 2)) - tt + 'px' : ((this.tooltipEle.offsetWidth - e.offsetWidth) / 2) - (d / 2) + tt + 'px';
                            } else {
                                s = ((a / 2) - (d / 2)) + 'px';
                            }
                        }
                    } else {
                        if (this.tipClass === tm) {
                            s = '99.9%';
                            c.style.left = '-' + (d - 2) + 'px';
                        } else {
                            s = -(d - 1) + 'px';
                            c.style.left = (-(d) + (d - 2)) + 'px';
                        }
                        var u = r !== 'Center' || (l > e.offsetHeight) || this.mouseTrail;
                        if ((u && r === 'Top') || (!u && this.tipPointerPosition === 'End')) {
                            o = (l - p - tt) + 'px';
                        } else if ((u && r === 'Bottom') || (!u && this.tipPointerPosition === 'Start')) {
                            o = tt + 'px';
                        } else {
                            o = ((l / 2) - (p / 2)) + 'px';
                        }
                    }
                    h.style.top = o;
                    h.style.left = s;
                };
                t.prototype.renderContent = function(e) {
                    var t = (0, n.Ys)('.' + tl, this.tooltipEle);
                    if (this.cssClass) {
                        (0, n.cn)([
                            this.tooltipEle
                        ], this.cssClass.split(' '));
                    }
                    if (e && !(0, n.le)(e.getAttribute('title'))) {
                        e.setAttribute('data-content', e.getAttribute('title'));
                        e.removeAttribute('title');
                    }
                    if (!(0, n.le)(this.content)) {
                        t.innerHTML = '';
                        if (this.content instanceof HTMLElement) {
                            t.appendChild(this.content);
                        } else if (typeof this.content === 'string') {
                            if (this.enableHtmlSanitizer) {
                                this.setProperties({
                                    content: n.pJ.sanitize(this.content)
                                }, true);
                            }
                            var i = (0, n.MY)(this.content);
                            var r = i({}, this, 'content', this.element.id + 'content', undefined, undefined, t);
                            if (r) {
                                if (this.enableHtmlParse) {
                                    var s = r.length;
                                    for(var o = 0; o < s; o++){
                                        t[(0, n.R3)(r, t), 'innerHTML'] = this.content;
                                    }
                                } else {
                                    t['textContent'] = this.content;
                                }
                            }
                        } else {
                            var a = (0, n.MY)(this.content);
                            var r = a({}, this, 'content', this.element.id + 'content', undefined, undefined, t);
                            if (r) {
                                (0, n.R3)(r, t);
                            }
                            this.renderReactTemplates();
                        }
                    } else {
                        if (e && !(0, n.le)(e.getAttribute('data-content'))) {
                            t.innerHTML = e.getAttribute('data-content');
                        }
                    }
                };
                t.prototype.renderCloseIcon = function() {
                    if (!this.isSticky) {
                        return;
                    }
                    var e = this.createElement('div', {
                        className: ts + ' ' + to
                    });
                    this.tooltipEle.appendChild(e);
                    n.bi.add(e, n.AR.touchStartEvent, this.onStickyClose, this);
                };
                t.prototype.addDescribedBy = function(e, t) {
                    var i = (e.getAttribute('aria-describedby') || '').split(/\s+/);
                    if (i.indexOf(t) < 0) {
                        i.push(t);
                    }
                    (0, n.Y4)(e, {
                        'aria-describedby': i.join(' ').trim(),
                        'data-tooltip-id': t
                    });
                };
                t.prototype.removeDescribedBy = function(e) {
                    var t = e.getAttribute('data-tooltip-id');
                    var i = (e.getAttribute('aria-describedby') || '').split(/\s+/);
                    var n = i.indexOf(t);
                    if (n !== -1) {
                        i.splice(n, 1);
                    }
                    e.removeAttribute('data-tooltip-id');
                    var r = i.join(' ').trim();
                    if (r) {
                        e.setAttribute('aria-describedby', r);
                    } else {
                        e.removeAttribute('aria-describedby');
                    }
                };
                t.prototype.tapHoldHandler = function(e) {
                    clearTimeout(this.autoCloseTimer);
                    this.targetHover(e.originalEvent);
                };
                t.prototype.touchEndHandler = function(e) {
                    var t = this;
                    if (this.isSticky) {
                        return;
                    }
                    var i = function() {
                        t.close();
                    };
                    this.autoCloseTimer = setTimeout(i, e7);
                };
                t.prototype.targetClick = function(e) {
                    var t;
                    if (this.target) {
                        t = (0, n.oq)(e.target, this.target);
                    } else {
                        t = this.element;
                    }
                    if ((0, n.le)(t)) {
                        return;
                    }
                    if (t.getAttribute('data-tooltip-id') === null) {
                        this.targetHover(e);
                    } else if (!this.isSticky) {
                        this.hideTooltip(this.animation.close, e, t);
                    }
                };
                t.prototype.targetHover = function(e) {
                    var t;
                    if (this.target) {
                        t = (0, n.oq)(e.target, this.target);
                    } else {
                        t = this.element;
                    }
                    if ((0, n.le)(t) || (t.getAttribute('data-tooltip-id') !== null && this.closeDelay === 0)) {
                        return;
                    }
                    var i = [].slice.call((0, n.td)('[data-tooltip-id= "' + this.ctrlId + '_content"]', document));
                    for(var r = 0, s = i; r < s.length; r++){
                        var o = s[r];
                        this.restoreElement(o);
                    }
                    this.showTooltip(t, this.animation.open, e);
                };
                t.prototype.mouseMoveBeforeOpen = function(e) {
                    this.mouseMoveEvent = e;
                };
                t.prototype.mouseMoveBeforeRemove = function() {
                    if (this.mouseMoveTarget) {
                        n.bi.remove(this.mouseMoveTarget, 'mousemove touchstart', this.mouseMoveBeforeOpen);
                    }
                };
                t.prototype.showTooltip = function(e, t, i) {
                    var r = this;
                    clearTimeout(this.showTimer);
                    clearTimeout(this.hideTimer);
                    if (this.openDelay && this.mouseTrail) {
                        this.mouseMoveBeforeRemove();
                        this.mouseMoveTarget = e;
                        n.bi.add(this.mouseMoveTarget, 'mousemove touchstart', this.mouseMoveBeforeOpen, this);
                    }
                    this.tooltipEventArgs = {
                        type: i ? i.type : null,
                        cancel: false,
                        target: e,
                        event: i ? i : null,
                        element: this.tooltipEle,
                        isInteracted: !(0, n.le)(i)
                    };
                    var s = function(n) {
                        r.beforeRenderCallback(n, e, i, t);
                    };
                    this.trigger('beforeRender', this.tooltipEventArgs, s.bind(this));
                };
                t.prototype.beforeRenderCallback = function(e, t, i, r) {
                    if (e.cancel) {
                        this.isHidden = true;
                        this.clear();
                        this.mouseMoveBeforeRemove();
                    } else {
                        this.isHidden = false;
                        if ((0, n.le)(this.tooltipEle)) {
                            this.ctrlId = this.element.getAttribute('id') ? (0, n.QI)(this.element.getAttribute('id')) : (0, n.QI)('tooltip');
                            this.tooltipEle = this.createElement('div', {
                                className: ta + ' ' + tv + ' ' + ty,
                                attrs: {
                                    role: 'tooltip',
                                    'aria-hidden': 'false',
                                    'id': this.ctrlId + '_content'
                                },
                                styles: 'width:' + (0, n.Ac)(this.width) + ';height:' + (0, n.Ac)(this.height) + ';position:absolute;'
                            });
                            this.tooltipBeforeRender(t, this);
                            this.tooltipAfterRender(t, i, r, this);
                        } else {
                            if (t) {
                                this.adjustArrow(t, this.position, this.tooltipPositionX, this.tooltipPositionY);
                                this.addDescribedBy(t, this.ctrlId + '_content');
                                this.renderContent(t);
                                n.fw.stop(this.tooltipEle);
                                this.reposition(t);
                                this.tooltipAfterRender(t, i, r, this);
                            }
                        }
                    }
                };
                t.prototype.appendContainer = function(e) {
                    if (typeof this.container == 'string') {
                        if (this.container === 'body') {
                            this.containerElement = document.body;
                        } else {
                            this.isBodyContainer = false;
                            this.containerElement = (0, n.Ys)(this.container, document);
                        }
                    } else if (this.container instanceof HTMLElement) {
                        this.containerElement = this.container;
                        this.isBodyContainer = this.containerElement.tagName === 'BODY';
                    }
                    if (!this.isBodyContainer) {
                        (0, n.cn)([
                            this.containerElement
                        ], tE);
                    }
                    this.containerElement.appendChild(e.tooltipEle);
                };
                t.prototype.tooltipBeforeRender = function(e, t) {
                    if (e) {
                        if (n.AR.isDevice) {
                            (0, n.cn)([
                                t.tooltipEle
                            ], tr);
                        }
                        if (t.width !== 'auto') {
                            t.tooltipEle.style.maxWidth = (0, n.Ac)(t.width);
                        }
                        t.tooltipEle.appendChild(t.createElement('div', {
                            className: tl
                        }));
                        this.appendContainer(t);
                        (0, n.IV)([
                            t.tooltipEle
                        ], tC);
                        t.addDescribedBy(e, t.ctrlId + '_content');
                        t.renderContent(e);
                        (0, n.cn)([
                            t.tooltipEle
                        ], tg);
                        if (t.showTipPointer) {
                            t.renderArrow();
                        }
                        t.renderCloseIcon();
                        t.renderPopup(e);
                        t.adjustArrow(e, t.position, t.tooltipPositionX, t.tooltipPositionY);
                        n.fw.stop(t.tooltipEle);
                        t.reposition(e);
                    }
                };
                t.prototype.tooltipAfterRender = function(e, t, i, r) {
                    if (e) {
                        (0, n.IV)([
                            r.tooltipEle
                        ], tg);
                        (0, n.cn)([
                            r.tooltipEle
                        ], tb);
                        r.tooltipEventArgs = {
                            type: t ? t.type : null,
                            cancel: false,
                            target: e,
                            event: t ? t : null,
                            element: r.tooltipEle,
                            isInteracted: !(0, n.le)(t)
                        };
                        if (r.needTemplateReposition() && !r.mouseTrail) {
                            r.tooltipEle.style.display = 'none';
                        }
                        var s = function(n) {
                            r.beforeOpenCallback(n, e, i, t);
                        };
                        r.trigger('beforeOpen', r.tooltipEventArgs, s.bind(r));
                    }
                };
                t.prototype.beforeOpenCallback = function(e, t, i, r) {
                    var s = this;
                    if (e.cancel) {
                        this.isHidden = true;
                        this.clear();
                        this.mouseMoveBeforeRemove();
                        this.restoreElement(t);
                    } else {
                        var o = {
                            name: i.effect,
                            duration: i.duration,
                            delay: i.delay,
                            timingFunction: 'easeOut'
                        };
                        if (i.effect === 'None') {
                            o = undefined;
                        }
                        if (this.openDelay > 0) {
                            var a = function() {
                                if (s.mouseTrail) {
                                    n.bi.add(t, 'mousemove touchstart mouseenter', s.onMouseMove, s);
                                }
                                if (s.popupObj) {
                                    s.popupObj.show(o, t);
                                    if (s.mouseMoveEvent && s.mouseTrail) {
                                        s.onMouseMove(s.mouseMoveEvent);
                                    }
                                }
                            };
                            this.showTimer = setTimeout(a, this.openDelay);
                        } else {
                            if (this.popupObj) {
                                this.popupObj.show(o, t);
                            }
                        }
                    }
                    if (r) {
                        this.wireMouseEvents(r, t);
                    }
                };
                t.prototype.needTemplateReposition = function() {
                    var e = this;
                    return !(0, n.le)(e.viewContainerRef) && typeof e.viewContainerRef !== 'string';
                };
                t.prototype.checkCollision = function(e, t, i) {
                    var n = {
                        left: t,
                        top: i,
                        position: this.position,
                        horizontal: this.tooltipPositionX,
                        vertical: this.tooltipPositionY
                    };
                    var r = (0, e2.vF)(this.tooltipEle, this.checkCollideTarget(), t, i);
                    if (r.length > 0) {
                        n.horizontal = r.indexOf('left') >= 0 ? 'Right' : r.indexOf('right') >= 0 ? 'Left' : this.tooltipPositionX;
                        n.vertical = r.indexOf('top') >= 0 ? 'Bottom' : r.indexOf('bottom') >= 0 ? 'Top' : this.tooltipPositionY;
                    }
                    return n;
                };
                t.prototype.calculateElementPosition = function(e, t) {
                    return [
                        this.isBodyContainer ? e.left + t.left : (e.left - this.containerElement.offsetLeft) + t.left + window.pageXOffset + this.containerElement.scrollLeft,
                        this.isBodyContainer ? e.top + t.top : (e.top - this.containerElement.offsetTop) + t.top + window.pageYOffset + this.containerElement.scrollTop
                    ];
                };
                t.prototype.collisionFlipFit = function(e, t, i) {
                    var r = this.checkCollision(e, t, i);
                    var s = r.position;
                    if (this.tooltipPositionY !== r.vertical) {
                        s = ((this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0) ? r.vertical + this.tooltipPositionX : this.tooltipPositionX + r.vertical);
                    }
                    if (this.tooltipPositionX !== r.horizontal) {
                        if (s.indexOf('Left') === 0) {
                            r.vertical = (s === 'LeftTop' || s === 'LeftCenter') ? 'Top' : 'Bottom';
                            s = (r.vertical + 'Left');
                        }
                        if (s.indexOf('Right') === 0) {
                            r.vertical = (s === 'RightTop' || s === 'RightCenter') ? 'Top' : 'Bottom';
                            s = (r.vertical + 'Right');
                        }
                        r.horizontal = this.tooltipPositionX;
                    }
                    this.tooltipEventArgs = {
                        type: null,
                        cancel: false,
                        target: e,
                        event: null,
                        element: this.tooltipEle,
                        collidedPosition: s
                    };
                    this.trigger('beforeCollision', this.tooltipEventArgs);
                    var o = r.vertical;
                    var a = r.horizontal;
                    if (r.position !== s) {
                        var l = (0, c.k)(e, a, o, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());
                        this.adjustArrow(e, s, a, o);
                        var h = this.calculateTooltipOffset(s);
                        h.top -= this.getOffSetPosition('TopBottom', s, this.offsetY);
                        h.left -= this.getOffSetPosition('RightLeft', s, this.offsetX);
                        r.position = s;
                        var d = this.calculateElementPosition(l, h);
                        r.left = d[0];
                        r.top = d[1];
                    } else {
                        this.adjustArrow(e, s, a, o);
                    }
                    var p = {
                        left: r.left,
                        top: r.top
                    };
                    var u = this.isBodyContainer ? (0, e2.Tj)(this.tooltipEle, this.checkCollideTarget(), {
                        X: true,
                        Y: false
                    }, p).left : p.left;
                    this.tooltipEle.style.display = 'block';
                    if (this.showTipPointer && (s.indexOf('Bottom') === 0 || s.indexOf('Top') === 0)) {
                        var f = (0, n.Ys)('.' + th, this.tooltipEle);
                        var m = parseInt(f.style.left, 10) - (u - r.left);
                        if (m < 0) {
                            m = 0;
                        } else if ((m + f.offsetWidth) > this.tooltipEle.clientWidth) {
                            m = this.tooltipEle.clientWidth - f.offsetWidth;
                        }
                        f.style.left = m.toString() + 'px';
                    }
                    this.tooltipEle.style.display = '';
                    p.left = u;
                    return p;
                };
                t.prototype.getOffSetPosition = function(e, t, i) {
                    return ((e.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1) && (e.indexOf(t.split(/(?=[A-Z])/)[0]) !== -1)) ? (2 * i) : 0;
                };
                t.prototype.checkCollideTarget = function() {
                    return !this.windowCollision && this.target ? this.element : null;
                };
                t.prototype.hideTooltip = function(e, t, i) {
                    var n = this;
                    if (this.closeDelay > 0) {
                        clearTimeout(this.hideTimer);
                        clearTimeout(this.showTimer);
                        var r = function() {
                            if (n.closeDelay && n.tooltipEle && n.isTooltipOpen) {
                                return;
                            }
                            n.tooltipHide(e, t, i);
                        };
                        this.hideTimer = setTimeout(r, this.closeDelay);
                    } else {
                        this.tooltipHide(e, t, i);
                    }
                };
                t.prototype.tooltipHide = function(e, t, i) {
                    var r = this;
                    var s;
                    if (t) {
                        s = this.target ? (i || t.target) : this.element;
                    } else {
                        s = (0, n.Ys)('[data-tooltip-id= "' + this.ctrlId + '_content"]', document);
                    }
                    this.tooltipEventArgs = {
                        type: t ? t.type : null,
                        cancel: false,
                        target: s,
                        event: t ? t : null,
                        element: this.tooltipEle,
                        isInteracted: !(0, n.le)(t)
                    };
                    this.trigger('beforeClose', this.tooltipEventArgs, function(t) {
                        if (!t.cancel) {
                            r.mouseMoveBeforeRemove();
                            r.popupHide(e, s);
                        } else {
                            r.isHidden = false;
                        }
                    });
                };
                t.prototype.popupHide = function(e, t) {
                    if (t) {
                        this.restoreElement(t);
                    }
                    this.isHidden = true;
                    var i = {
                        name: e.effect,
                        duration: e.duration,
                        delay: e.delay,
                        timingFunction: 'easeIn'
                    };
                    if (e.effect === 'None') {
                        i = undefined;
                    }
                    if (this.popupObj) {
                        this.popupObj.hide(i);
                    }
                };
                t.prototype.restoreElement = function(e) {
                    this.unwireMouseEvents(e);
                    if (!(0, n.le)(e.getAttribute('data-content'))) {
                        e.setAttribute('title', e.getAttribute('data-content'));
                        e.removeAttribute('data-content');
                    }
                    this.removeDescribedBy(e);
                };
                t.prototype.clear = function() {
                    if (this.tooltipEle) {
                        (0, n.IV)([
                            this.tooltipEle
                        ], tb);
                        (0, n.cn)([
                            this.tooltipEle
                        ], tg);
                    }
                    if (this.isHidden) {
                        if (this.popupObj) {
                            this.popupObj.destroy();
                        }
                        if (this.tooltipEle) {
                            (0, n.Od)(this.tooltipEle);
                        }
                        this.tooltipEle = null;
                        this.popupObj = null;
                    }
                };
                t.prototype.tooltipHover = function(e) {
                    if (this.tooltipEle) {
                        this.isTooltipOpen = true;
                    }
                };
                t.prototype.tooltipMouseOut = function(e) {
                    this.isTooltipOpen = false;
                    this.hideTooltip(this.animation.close, e, this.findTarget());
                };
                t.prototype.onMouseOut = function(e) {
                    var t = e.relatedTarget;
                    if (t && !this.mouseTrail) {
                        var i = (0, n.oq)(t, "." + ta + "." + ty + "." + tv);
                        if (i) {
                            n.bi.add(i, 'mouseleave', this.tooltipElementMouseOut, this);
                        } else {
                            this.hideTooltip(this.animation.close, e, this.findTarget());
                            if (this.closeDelay === 0) {
                                this.clear();
                            }
                        }
                    } else {
                        this.hideTooltip(this.animation.close, e, this.findTarget());
                        this.clear();
                    }
                };
                t.prototype.tooltipElementMouseOut = function(e) {
                    this.hideTooltip(this.animation.close, e, this.findTarget());
                    n.bi.remove(this.element, 'mouseleave', this.tooltipElementMouseOut);
                    this.clear();
                };
                t.prototype.onStickyClose = function(e) {
                    this.close();
                };
                t.prototype.onMouseMove = function(e) {
                    var t = 0;
                    var i = 0;
                    if (e.type.indexOf('touch') > -1) {
                        e.preventDefault();
                        t = e.touches[0].pageX;
                        i = e.touches[0].pageY;
                    } else {
                        t = e.pageX;
                        i = e.pageY;
                    }
                    n.fw.stop(this.tooltipEle);
                    (0, n.IV)([
                        this.tooltipEle
                    ], tb);
                    (0, n.cn)([
                        this.tooltipEle
                    ], tg);
                    this.adjustArrow(e.target, this.position, this.tooltipPositionX, this.tooltipPositionY);
                    var r = this.calculateTooltipOffset(this.position);
                    var s = t + r.left + this.offsetX;
                    var o = i + r.top + this.offsetY;
                    var a = this.checkCollision(e.target, s, o);
                    if (this.tooltipPositionX !== a.horizontal || this.tooltipPositionY !== a.vertical) {
                        var l = (this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0) ? a.vertical + a.horizontal : a.horizontal + a.vertical;
                        a.position = l;
                        this.adjustArrow(e.target, a.position, a.horizontal, a.vertical);
                        var h = this.calculateTooltipOffset(a.position);
                        a.left = t + h.left - this.offsetX;
                        a.top = i + h.top - this.offsetY;
                    }
                    this.tooltipEle.style.left = a.left + 'px';
                    this.tooltipEle.style.top = a.top + 'px';
                };
                t.prototype.keyDown = function(e) {
                    if (this.tooltipEle && e.keyCode === 27) {
                        this.close();
                    }
                };
                t.prototype.touchEnd = function(e) {
                    if (this.tooltipEle && (0, n.oq)(e.target, '.' + ti) === null && !this.isSticky) {
                        this.close();
                    }
                };
                t.prototype.scrollHandler = function(e) {
                    if (this.tooltipEle) {
                        if (!((0, n.oq)(e.target, "." + ta + "." + ty + "." + tv))) {
                            this.close();
                        }
                    }
                };
                t.prototype.render = function() {
                    this.initialize();
                    this.wireEvents(this.opensOn);
                    this.renderComplete();
                };
                t.prototype.preRender = function() {
                    this.tipClass = tp;
                    this.tooltipPositionX = 'Center';
                    this.tooltipPositionY = 'Top';
                    this.isHidden = true;
                };
                t.prototype.wireEvents = function(e) {
                    var t = this.getTriggerList(e);
                    for(var i = 0, r = t; i < r.length; i++){
                        var s = r[i];
                        if (s === 'Custom') {
                            return;
                        }
                        if (s === 'Focus') {
                            this.wireFocusEvents();
                        }
                        if (s === 'Click') {
                            n.bi.add(this.element, n.AR.touchStartEvent, this.targetClick, this);
                        }
                        if (s === 'Hover') {
                            if (n.AR.isDevice) {
                                this.touchModule = new n.Xh(this.element, {
                                    tapHoldThreshold: e9,
                                    tapHold: this.tapHoldHandler.bind(this)
                                });
                                n.bi.add(this.element, n.AR.touchEndEvent, this.touchEndHandler, this);
                            } else {
                                n.bi.add(this.element, 'mouseover', this.targetHover, this);
                            }
                        }
                    }
                    n.bi.add(document, 'touchend', this.touchEnd, this);
                    n.bi.add(document, 'scroll wheel', this.scrollHandler, this);
                    n.bi.add(window, 'resize', this.windowResize, this);
                    n.bi.add(document, 'keydown', this.keyDown, this);
                };
                t.prototype.getTriggerList = function(e) {
                    if (e === 'Auto') {
                        e = (n.AR.isDevice) ? 'Hover' : 'Hover Focus';
                    }
                    return e.split(' ');
                };
                t.prototype.wireFocusEvents = function() {
                    if (!(0, n.le)(this.target)) {
                        var e = [].slice.call((0, n.td)(this.target, this.element));
                        for(var t = 0, i = e; t < i.length; t++){
                            var r = i[t];
                            n.bi.add(r, 'focus', this.targetHover, this);
                        }
                    } else {
                        n.bi.add(this.element, 'focus', this.targetHover, this);
                    }
                };
                t.prototype.wireMouseEvents = function(e, t) {
                    if (this.tooltipEle) {
                        if (!this.isSticky) {
                            if (e.type === 'focus') {
                                n.bi.add(t, 'blur', this.onMouseOut, this);
                            }
                            if (e.type === 'mouseover') {
                                n.bi.add(t, 'mouseleave', this.onMouseOut, this);
                            }
                            if (this.closeDelay) {
                                n.bi.add(this.tooltipEle, 'mouseenter', this.tooltipHover, this);
                                n.bi.add(this.tooltipEle, 'mouseleave', this.tooltipMouseOut, this);
                            }
                        }
                        if (this.mouseTrail && this.openDelay === 0) {
                            n.bi.add(t, 'mousemove touchstart mouseenter', this.onMouseMove, this);
                        }
                    }
                };
                t.prototype.unwireEvents = function(e) {
                    var t = this.getTriggerList(e);
                    for(var i = 0, r = t; i < r.length; i++){
                        var s = r[i];
                        if (s === 'Custom') {
                            return;
                        }
                        if (s === 'Focus') {
                            this.unwireFocusEvents();
                        }
                        if (s === 'Click') {
                            n.bi.remove(this.element, n.AR.touchStartEvent, this.targetClick);
                        }
                        if (s === 'Hover') {
                            if (n.AR.isDevice) {
                                if (this.touchModule) {
                                    this.touchModule.destroy();
                                }
                                n.bi.remove(this.element, n.AR.touchEndEvent, this.touchEndHandler);
                            } else {
                                n.bi.remove(this.element, 'mouseover', this.targetHover);
                            }
                        }
                    }
                    n.bi.remove(document, 'touchend', this.touchEnd);
                    n.bi.remove(document, 'scroll wheel', this.scrollHandler);
                    n.bi.remove(window, 'resize', this.windowResize);
                    n.bi.remove(document, 'keydown', this.keyDown);
                };
                t.prototype.unwireFocusEvents = function() {
                    if (!(0, n.le)(this.target)) {
                        var e = [].slice.call((0, n.td)(this.target, this.element));
                        for(var t = 0, i = e; t < i.length; t++){
                            var r = i[t];
                            n.bi.remove(r, 'focus', this.targetHover);
                        }
                    } else {
                        n.bi.remove(this.element, 'focus', this.targetHover);
                    }
                };
                t.prototype.unwireMouseEvents = function(e) {
                    if (!this.isSticky) {
                        var t = this.getTriggerList(this.opensOn);
                        for(var i = 0, r = t; i < r.length; i++){
                            var s = r[i];
                            if (s === 'Focus') {
                                n.bi.remove(e, 'blur', this.onMouseOut);
                            }
                            if (s === 'Hover' && !n.AR.isDevice) {
                                n.bi.remove(e, 'mouseleave', this.onMouseOut);
                            }
                        }
                        if (this.closeDelay) {
                            n.bi.remove(e, 'mouseenter', this.tooltipHover);
                            n.bi.remove(e, 'mouseleave', this.tooltipMouseOut);
                        }
                    }
                    if (this.mouseTrail) {
                        n.bi.remove(e, 'mousemove touchstart mouseenter', this.onMouseMove);
                    }
                };
                t.prototype.findTarget = function() {
                    var e = (0, n.Ys)('[data-tooltip-id= "' + this.ctrlId + '_content"]', document);
                    return e;
                };
                t.prototype.getModuleName = function() {
                    return 'tooltip';
                };
                t.prototype.getPersistData = function() {
                    return this.addOnPersist([]);
                };
                t.prototype.onPropertyChanged = function(e, t) {
                    var i = this.findTarget();
                    for(var r = 0, s = Object.keys(e); r < s.length; r++){
                        var o = s[r];
                        switch(o){
                            case 'width':
                                if (this.tooltipEle && i) {
                                    this.tooltipEle.style.width = this.tooltipEle.style.maxWidth = (0, n.Ac)(e.width);
                                    this.reposition(i);
                                }
                                break;
                            case 'height':
                                if (this.tooltipEle && i) {
                                    this.tooltipEle.style.height = (0, n.Ac)(e.height);
                                    this.reposition(i);
                                }
                                break;
                            case 'content':
                                if (this.tooltipEle) {
                                    this.renderContent();
                                }
                                break;
                            case 'opensOn':
                                this.unwireEvents(t.opensOn);
                                this.wireEvents(e.opensOn);
                                break;
                            case 'position':
                                this.formatPosition();
                                if (this.tooltipEle && i) {
                                    var a = (0, n.Ys)('.' + td, this.tooltipEle);
                                    a.style.top = a.style.left = null;
                                    this.reposition(i);
                                }
                                break;
                            case 'tipPointerPosition':
                                if (this.tooltipEle && i) {
                                    this.reposition(i);
                                }
                                break;
                            case 'offsetX':
                                if (this.tooltipEle) {
                                    var l = e.offsetX - t.offsetX;
                                    this.tooltipEle.style.left = (parseInt(this.tooltipEle.style.left, 10) + (l)).toString() + 'px';
                                }
                                break;
                            case 'offsetY':
                                if (this.tooltipEle) {
                                    var h = e.offsetY - t.offsetY;
                                    this.tooltipEle.style.top = (parseInt(this.tooltipEle.style.top, 10) + (h)).toString() + 'px';
                                }
                                break;
                            case 'cssClass':
                                if (this.tooltipEle) {
                                    if (t.cssClass) {
                                        (0, n.IV)([
                                            this.tooltipEle
                                        ], t.cssClass.split(' '));
                                    }
                                    if (e.cssClass) {
                                        (0, n.cn)([
                                            this.tooltipEle
                                        ], e.cssClass.split(' '));
                                    }
                                }
                                break;
                            case 'enableRtl':
                                if (this.tooltipEle) {
                                    if (this.enableRtl) {
                                        (0, n.cn)([
                                            this.tooltipEle
                                        ], tn);
                                    } else {
                                        (0, n.IV)([
                                            this.tooltipEle
                                        ], tn);
                                    }
                                }
                                break;
                            case 'container':
                                if (!(0, n.le)(this.containerElement)) {
                                    (0, n.IV)([
                                        this.containerElement
                                    ], tE);
                                }
                                this.container = e.container;
                                if (this.tooltipEle && i) {
                                    this.appendContainer(this);
                                    this.reposition(i);
                                }
                        }
                    }
                };
                t.prototype.open = function(e, t) {
                    if ((0, n.le)(t)) {
                        t = this.animation.open;
                    }
                    if ((0, n.le)(e)) {
                        e = this.element;
                    }
                    if (e.style.display === 'none') {
                        return;
                    }
                    this.showTooltip(e, t);
                };
                t.prototype.close = function(e) {
                    if (!e) {
                        e = this.animation.close;
                    }
                    this.hideTooltip(e);
                };
                t.prototype.refresh = function(e) {
                    if (this.tooltipEle) {
                        this.renderContent(e);
                    }
                    if (this.popupObj && e) {
                        this.reposition(e);
                    }
                };
                t.prototype.destroy = function() {
                    e.prototype.destroy.call(this);
                    if (this.tooltipEle) {
                        (0, n.Od)(this.tooltipEle);
                    }
                    if (this.popupObj) {
                        this.popupObj.destroy();
                    }
                    (0, n.IV)([
                        this.element
                    ], ti);
                    this.unwireEvents(this.opensOn);
                    this.unwireMouseEvents(this.element);
                    this.tooltipEle = null;
                    this.popupObj = null;
                };
                e5([
                    (0, n.Z9)('auto')
                ], t.prototype, "width", void 0);
                e5([
                    (0, n.Z9)('auto')
                ], t.prototype, "height", void 0);
                e5([
                    (0, n.Z9)()
                ], t.prototype, "content", void 0);
                e5([
                    (0, n.Z9)('body')
                ], t.prototype, "container", void 0);
                e5([
                    (0, n.Z9)()
                ], t.prototype, "target", void 0);
                e5([
                    (0, n.Z9)('TopCenter')
                ], t.prototype, "position", void 0);
                e5([
                    (0, n.Z9)(0)
                ], t.prototype, "offsetX", void 0);
                e5([
                    (0, n.Z9)(0)
                ], t.prototype, "offsetY", void 0);
                e5([
                    (0, n.Z9)(true)
                ], t.prototype, "showTipPointer", void 0);
                e5([
                    (0, n.Z9)(true)
                ], t.prototype, "enableHtmlParse", void 0);
                e5([
                    (0, n.Z9)(false)
                ], t.prototype, "windowCollision", void 0);
                e5([
                    (0, n.Z9)('Auto')
                ], t.prototype, "tipPointerPosition", void 0);
                e5([
                    (0, n.Z9)('Auto')
                ], t.prototype, "opensOn", void 0);
                e5([
                    (0, n.Z9)(false)
                ], t.prototype, "mouseTrail", void 0);
                e5([
                    (0, n.Z9)(false)
                ], t.prototype, "isSticky", void 0);
                e5([
                    (0, n.Zz)({}, tS)
                ], t.prototype, "animation", void 0);
                e5([
                    (0, n.Z9)(0)
                ], t.prototype, "openDelay", void 0);
                e5([
                    (0, n.Z9)(0)
                ], t.prototype, "closeDelay", void 0);
                e5([
                    (0, n.Z9)()
                ], t.prototype, "cssClass", void 0);
                e5([
                    (0, n.Z9)(false)
                ], t.prototype, "enableHtmlSanitizer", void 0);
                e5([
                    (0, n.ju)()
                ], t.prototype, "beforeRender", void 0);
                e5([
                    (0, n.ju)()
                ], t.prototype, "beforeOpen", void 0);
                e5([
                    (0, n.ju)()
                ], t.prototype, "afterOpen", void 0);
                e5([
                    (0, n.ju)()
                ], t.prototype, "beforeClose", void 0);
                e5([
                    (0, n.ju)()
                ], t.prototype, "afterClose", void 0);
                e5([
                    (0, n.ju)()
                ], t.prototype, "beforeCollision", void 0);
                e5([
                    (0, n.ju)()
                ], t.prototype, "created", void 0);
                e5([
                    (0, n.ju)()
                ], t.prototype, "destroyed", void 0);
                t = e5([
                    n.Zl
                ], t);
                return t;
            }(n.wA));
            var tT = i(3213);
            var tk = i(8801);
            ;
            var tx = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var tL = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var tN = (function(e) {
                tx(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                tL([
                    (0, n.Z9)('None')
                ], t.prototype, "placement", void 0);
                tL([
                    (0, n.Z9)(10)
                ], t.prototype, "largeStep", void 0);
                tL([
                    (0, n.Z9)(1)
                ], t.prototype, "smallStep", void 0);
                tL([
                    (0, n.Z9)(false)
                ], t.prototype, "showSmallTicks", void 0);
                tL([
                    (0, n.Z9)(null)
                ], t.prototype, "format", void 0);
                return t;
            }(n.rt));
            var tD = (function(e) {
                tx(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                tL([
                    (0, n.Z9)(null)
                ], t.prototype, "color", void 0);
                tL([
                    (0, n.Z9)(null)
                ], t.prototype, "start", void 0);
                tL([
                    (0, n.Z9)(null)
                ], t.prototype, "end", void 0);
                return t;
            }(n.rt));
            var tO = (function(e) {
                tx(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                tL([
                    (0, n.Z9)(false)
                ], t.prototype, "enabled", void 0);
                tL([
                    (0, n.Z9)(null)
                ], t.prototype, "minStart", void 0);
                tL([
                    (0, n.Z9)(null)
                ], t.prototype, "minEnd", void 0);
                tL([
                    (0, n.Z9)(null)
                ], t.prototype, "maxStart", void 0);
                tL([
                    (0, n.Z9)(null)
                ], t.prototype, "maxEnd", void 0);
                tL([
                    (0, n.Z9)(false)
                ], t.prototype, "startHandleFixed", void 0);
                tL([
                    (0, n.Z9)(false)
                ], t.prototype, "endHandleFixed", void 0);
                return t;
            }(n.rt));
            var tA = (function(e) {
                tx(t, e);
                function t() {
                    return e !== null && e.apply(this, arguments) || this;
                }
                tL([
                    (0, n.Z9)('')
                ], t.prototype, "cssClass", void 0);
                tL([
                    (0, n.Z9)('Before')
                ], t.prototype, "placement", void 0);
                tL([
                    (0, n.Z9)('Focus')
                ], t.prototype, "showOn", void 0);
                tL([
                    (0, n.Z9)(false)
                ], t.prototype, "isVisible", void 0);
                tL([
                    (0, n.Z9)(null)
                ], t.prototype, "format", void 0);
                return t;
            }(n.rt));
            var tP = 6;
            var tM = 3;
            var tR = {
                root: 'e-slider',
                rtl: 'e-rtl',
                sliderHiddenInput: 'e-slider-input',
                controlWrapper: 'e-control-wrapper',
                sliderHandle: 'e-handle',
                rangeBar: 'e-range',
                sliderButton: 'e-slider-button',
                firstButton: 'e-first-button',
                secondButton: 'e-second-button',
                scale: 'e-scale',
                tick: 'e-tick',
                large: 'e-large',
                tickValue: 'e-tick-value',
                sliderTooltip: 'e-slider-tooltip',
                sliderHover: 'e-slider-hover',
                sliderFirstHandle: 'e-handle-first',
                sliderSecondHandle: 'e-handle-second',
                sliderDisabled: 'e-disabled',
                sliderContainer: 'e-slider-container',
                horizontalTooltipBefore: 'e-slider-horizontal-before',
                horizontalTooltipAfter: 'e-slider-horizontal-after',
                verticalTooltipBefore: 'e-slider-vertical-before',
                verticalTooltipAfter: 'e-slider-vertical-after',
                materialTooltip: 'e-material-tooltip',
                materialTooltipOpen: 'e-material-tooltip-open',
                materialTooltipActive: 'e-tooltip-active',
                materialSlider: 'e-material-slider',
                sliderTrack: 'e-slider-track',
                sliderHorizantalColor: 'e-slider-horizantal-color',
                sliderVerticalColor: 'e-slider-vertical-color',
                sliderHandleFocused: 'e-handle-focused',
                verticalSlider: 'e-vertical',
                horizontalSlider: 'e-horizontal',
                sliderHandleStart: 'e-handle-start',
                sliderTooltipStart: 'e-material-tooltip-start',
                sliderTabHandle: 'e-tab-handle',
                sliderButtonIcon: 'e-button-icon',
                sliderSmallSize: 'e-small-size',
                sliderTickPosition: 'e-tick-pos',
                sliderFirstTick: 'e-first-tick',
                sliderLastTick: 'e-last-tick',
                sliderButtonClass: 'e-slider-btn',
                sliderTooltipWrapper: 'e-tooltip-wrap',
                sliderTabTrack: 'e-tab-track',
                sliderTabRange: 'e-tab-range',
                sliderActiveHandle: 'e-handle-active',
                sliderMaterialHandle: 'e-material-handle',
                sliderMaterialRange: 'e-material-range',
                sliderMaterialDefault: 'e-material-default',
                materialTooltipShow: 'e-material-tooltip-show',
                materialTooltipHide: 'e-material-tooltip-hide',
                readonly: 'e-read-only',
                limits: 'e-limits',
                limitBarDefault: 'e-limit-bar',
                limitBarFirst: 'e-limit-first',
                limitBarSecond: 'e-limit-second',
                dragHorizontal: 'e-drag-horizontal',
                dragVertical: 'e-drag-vertical'
            };
            var tB = (function(e) {
                tx(t, e);
                function t(t, i) {
                    var n = e.call(this, t, i) || this;
                    n.horDir = 'left';
                    n.verDir = 'bottom';
                    n.transition = {
                        handle: 'left .4s cubic-bezier(.25, .8, .25, 1), right .4s cubic-bezier(.25, .8, .25, 1), ' + 'top .4s cubic-bezier(.25, .8, .25, 1) , bottom .4s cubic-bezier(.25, .8, .25, 1)',
                        rangeBar: 'all .4s cubic-bezier(.25, .8, .25, 1)'
                    };
                    n.transitionOnMaterialTooltip = {
                        handle: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, top 1ms ease-out',
                        rangeBar: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, width 1ms ease-out, height 1ms ease-out'
                    };
                    n.scaleTransform = 'transform .4s cubic-bezier(.25, .8, .25, 1)';
                    n.customAriaText = null;
                    n.drag = true;
                    n.isDragComplete = false;
                    n.initialTooltip = true;
                    return n;
                }
                t.prototype.preRender = function() {
                    var e = {
                        incrementTitle: 'Increase',
                        decrementTitle: 'Decrease'
                    };
                    this.l10n = new n.E7('slider', e, this.locale);
                    this.isElementFocused = false;
                    this.tickElementCollection = [];
                    this.tooltipFormatInfo = {};
                    this.ticksFormatInfo = {};
                    this.initCultureInfo();
                    this.initCultureFunc();
                    this.formChecker();
                };
                t.prototype.formChecker = function() {
                    var e = (0, n.oq)(this.element, 'form');
                    if (e) {
                        this.isForm = true;
                        if (!(0, n.le)(this.formResetValue)) {
                            this.setProperties({
                                'value': this.formResetValue
                            }, true);
                        }
                        this.formResetValue = this.value;
                        if (this.type === 'Range' && ((0, n.le)(this.formResetValue) || typeof (this.formResetValue) !== 'object')) {
                            this.formResetValue = [
                                parseFloat((0, n.Ac)(this.min)),
                                parseFloat((0, n.Ac)(this.max))
                            ];
                        } else if ((0, n.le)(this.formResetValue)) {
                            this.formResetValue = parseFloat((0, n.Ac)(this.min));
                        }
                        this.formElement = e;
                    } else {
                        this.isForm = false;
                    }
                };
                t.prototype.initCultureFunc = function() {
                    this.internationalization = new n.eC(this.locale);
                };
                t.prototype.initCultureInfo = function() {
                    this.tooltipFormatInfo.format = (!(0, n.le)(this.tooltip.format)) ? this.tooltip.format : null;
                    this.ticksFormatInfo.format = (!(0, n.le)(this.ticks.format)) ? this.ticks.format : null;
                };
                t.prototype.formatString = function(e, t) {
                    var i = null;
                    var n = null;
                    if ((e || e === 0)) {
                        i = this.formatNumber(e);
                        var r = this.numberOfDecimals(e);
                        n = this.internationalization.getNumberFormat(t)(this.makeRoundNumber(e, r));
                    }
                    return {
                        elementVal: i,
                        formatString: n
                    };
                };
                t.prototype.formatNumber = function(e) {
                    var t = this.numberOfDecimals(e);
                    return this.internationalization.getNumberFormat({
                        maximumFractionDigits: t,
                        minimumFractionDigits: t,
                        useGrouping: false
                    })(e);
                };
                t.prototype.numberOfDecimals = function(e) {
                    var t = e.toString().split('.')[1];
                    var i = !t || !t.length ? 0 : t.length;
                    return i;
                };
                t.prototype.makeRoundNumber = function(e, t) {
                    var i = t || 0;
                    return Number(e.toFixed(i));
                };
                t.prototype.fractionalToInteger = function(e) {
                    e = (this.numberOfDecimals(e) === 0) ? Number(e).toFixed(this.noOfDecimals) : e;
                    var t = 1;
                    for(var i = 0; i < this.noOfDecimals; i++){
                        t *= 10;
                    }
                    e = Number((e * t).toFixed(0));
                    return e;
                };
                t.prototype.render = function() {
                    var e = this;
                    this.initialize();
                    this.initRender();
                    this.wireEvents();
                    this.setZindex();
                    this.renderComplete();
                    if (this.element.tagName === 'EJS-SLIDER') {
                        if (this.getTheme(this.sliderContainer) == "none") {
                            setTimeout(function() {
                                e.refresh();
                            }, 0);
                        }
                    }
                };
                t.prototype.initialize = function() {
                    (0, n.cn)([
                        this.element
                    ], tR.root);
                    this.setCSSClass();
                };
                t.prototype.setElementWidth = function(e) {
                    if (!(0, n.le)(e)) {
                        if (typeof e === 'number') {
                            this.sliderContainer.style.width = (0, n.Ac)(e);
                        } else if (typeof e === 'string') {
                            this.sliderContainer.style.width = (e.match(/px|%|em/)) ? (e) : ((0, n.Ac)(e));
                        }
                    }
                };
                t.prototype.setCSSClass = function(e) {
                    if (e) {
                        (0, n.IV)([
                            this.element
                        ], e.split(' '));
                    }
                    if (this.cssClass) {
                        (0, n.cn)([
                            this.element
                        ], this.cssClass.split(' '));
                    }
                };
                t.prototype.setEnabled = function() {
                    if (!this.enabled) {
                        (0, n.cn)([
                            this.sliderContainer
                        ], [
                            tR.sliderDisabled
                        ]);
                        if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {
                            this.tooltipElement.classList.add(tR.sliderDisabled);
                        }
                        this.unwireEvents();
                    } else {
                        (0, n.IV)([
                            this.sliderContainer
                        ], [
                            tR.sliderDisabled
                        ]);
                        if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {
                            this.tooltipElement.classList.remove(tR.sliderDisabled);
                        }
                        this.wireEvents();
                    }
                };
                t.prototype.getTheme = function(e) {
                    var t = window.getComputedStyle(e, ':after').getPropertyValue('content');
                    return t.replace(/['"]+/g, '');
                };
                t.prototype.initRender = function() {
                    this.sliderContainer = this.createElement('div', {
                        className: tR.sliderContainer + ' ' + tR.controlWrapper
                    });
                    this.element.parentNode.insertBefore(this.sliderContainer, this.element);
                    this.sliderContainer.appendChild(this.element);
                    this.sliderTrack = this.createElement('div', {
                        className: tR.sliderTrack
                    });
                    this.element.appendChild(this.sliderTrack);
                    this.setElementWidth(this.width);
                    this.element.tabIndex = -1;
                    this.getThemeInitialization();
                    this.setHandler();
                    this.createRangeBar();
                    if (this.limits.enabled) {
                        this.createLimitBar();
                    }
                    this.setOrientClass();
                    this.hiddenInput = (this.createElement('input', {
                        attrs: {
                            type: 'hidden',
                            value: ((0, n.le)(this.value) ? this.min.toString() : this.value.toString()),
                            name: this.element.getAttribute('name') || this.element.getAttribute('id') || '_' + (Math.random() * 1000).toFixed(0) + 'slider',
                            class: tR.sliderHiddenInput
                        }
                    }));
                    this.hiddenInput.tabIndex = -1;
                    this.sliderContainer.appendChild(this.hiddenInput);
                    if (this.showButtons) {
                        this.setButtons();
                    }
                    this.setEnableRTL();
                    if (this.type === 'Range') {
                        this.rangeValueUpdate();
                    } else {
                        this.value = (0, n.le)(this.value) ? parseFloat((0, n.Ac)(this.min.toString())) : this.value;
                    }
                    this.previousVal = this.type !== 'Range' ? this.checkHandleValue(parseFloat((0, n.Ac)(this.value.toString()))) : [
                        this.checkHandleValue(parseFloat((0, n.Ac)(this.value[0].toString()))),
                        this.checkHandleValue(parseFloat((0, n.Ac)(this.value[1].toString())))
                    ];
                    this.previousChanged = this.previousVal;
                    if (!(0, n.le)(this.element.hasAttribute('name'))) {
                        this.element.removeAttribute('name');
                    }
                    this.setValue();
                    if (this.limits.enabled) {
                        this.setLimitBar();
                    }
                    if (this.ticks.placement !== 'None') {
                        this.renderScale();
                    }
                    if (this.tooltip.isVisible) {
                        this.renderTooltip();
                    }
                    if (!this.enabled) {
                        (0, n.cn)([
                            this.sliderContainer
                        ], [
                            tR.sliderDisabled
                        ]);
                    } else {
                        (0, n.IV)([
                            this.sliderContainer
                        ], [
                            tR.sliderDisabled
                        ]);
                    }
                    if (this.readonly) {
                        (0, n.cn)([
                            this.sliderContainer
                        ], [
                            tR.readonly
                        ]);
                    } else {
                        (0, n.IV)([
                            this.sliderContainer
                        ], [
                            tR.readonly
                        ]);
                    }
                };
                t.prototype.getThemeInitialization = function() {
                    this.isMaterial = this.getTheme(this.sliderContainer) === 'material' || this.getTheme(this.sliderContainer) === 'material-dark';
                    this.isBootstrap = this.getTheme(this.sliderContainer) === 'bootstrap' || this.getTheme(this.sliderContainer) === 'bootstrap-dark';
                    this.isBootstrap4 = this.getTheme(this.sliderContainer) === 'bootstrap4';
                    this.isTailwind = this.getTheme(this.sliderContainer) === 'tailwind' || this.getTheme(this.sliderContainer) === 'tailwind-dark';
                    this.isBootstrap5 = this.getTheme(this.sliderContainer) === 'bootstrap5';
                    this.isFluent = this.getTheme(this.sliderContainer) === 'FluentUI';
                    this.isMaterialTooltip = this.isMaterial && this.type !== 'Range' && this.tooltip.isVisible;
                };
                t.prototype.createRangeBar = function() {
                    if (this.type !== 'Default') {
                        this.rangeBar = (this.createElement('div', {
                            attrs: {
                                class: tR.rangeBar
                            }
                        }));
                        this.element.appendChild(this.rangeBar);
                        if (this.drag && this.type === 'Range') {
                            if (this.orientation === 'Horizontal') {
                                this.rangeBar.classList.add(tR.dragHorizontal);
                            } else {
                                this.rangeBar.classList.add(tR.dragVertical);
                            }
                        }
                    }
                };
                t.prototype.createLimitBar = function() {
                    var e = this.type !== 'Range' ? tR.limitBarDefault : tR.limitBarFirst;
                    e += ' ' + tR.limits;
                    this.limitBarFirst = (this.createElement('div', {
                        attrs: {
                            class: e
                        }
                    }));
                    this.element.appendChild(this.limitBarFirst);
                    if (this.type === 'Range') {
                        this.limitBarSecond = (this.createElement('div', {
                            attrs: {
                                class: tR.limitBarSecond + ' ' + tR.limits
                            }
                        }));
                        this.element.appendChild(this.limitBarSecond);
                    }
                };
                t.prototype.setOrientClass = function() {
                    if (this.orientation !== 'Vertical') {
                        this.sliderContainer.classList.remove(tR.verticalSlider);
                        this.sliderContainer.classList.add(tR.horizontalSlider);
                        this.firstHandle.setAttribute('aria-orientation', 'horizontal');
                        if (this.type === 'Range') {
                            this.secondHandle.setAttribute('aria-orientation', 'horizontal');
                        }
                    } else {
                        this.sliderContainer.classList.remove(tR.horizontalSlider);
                        this.sliderContainer.classList.add(tR.verticalSlider);
                        this.firstHandle.setAttribute('aria-orientation', 'vertical');
                        if (this.type === 'Range') {
                            this.secondHandle.setAttribute('aria-orientation', 'vertical');
                        }
                    }
                };
                t.prototype.setAriaAttributes = function(e) {
                    var t = this;
                    var i = this.min;
                    var r = this.max;
                    if (!(0, n.le)(this.customValues) && this.customValues.length > 0) {
                        i = this.customValues[0];
                        r = this.customValues[this.customValues.length - 1];
                    }
                    if (this.type !== 'Range') {
                        (0, n.Y4)(e, {
                            'aria-valuemin': i.toString(),
                            'aria-valuemax': r.toString()
                        });
                    } else {
                        var s = !(0, n.le)(this.customValues) && this.customValues.length > 0 ? [
                            [
                                i.toString(),
                                (this.customValues[this.value[1]]).toString()
                            ],
                            [
                                (this.customValues[this.value[0]]).toString(),
                                r.toString()
                            ]
                        ] : [
                            [
                                i.toString(),
                                this.value[1].toString()
                            ],
                            [
                                this.value[0].toString(),
                                r.toString()
                            ]
                        ];
                        s.forEach(function(e, i) {
                            var r = i === 0 ? t.firstHandle : t.secondHandle;
                            if (r) {
                                (0, n.Y4)(r, {
                                    'aria-valuemin': e[0],
                                    'aria-valuemax': e[1]
                                });
                            }
                        });
                    }
                };
                t.prototype.createSecondHandle = function() {
                    this.secondHandle = this.createElement('div', {
                        attrs: {
                            class: tR.sliderHandle,
                            'role': 'slider',
                            tabIndex: '0'
                        }
                    });
                    this.secondHandle.classList.add(tR.sliderSecondHandle);
                    this.element.appendChild(this.secondHandle);
                };
                t.prototype.createFirstHandle = function() {
                    this.firstHandle = this.createElement('div', {
                        attrs: {
                            class: tR.sliderHandle,
                            'role': 'slider',
                            tabIndex: '0'
                        }
                    });
                    this.firstHandle.classList.add(tR.sliderFirstHandle);
                    this.element.appendChild(this.firstHandle);
                    if (this.isMaterialTooltip) {
                        this.materialHandle = this.createElement('div', {
                            attrs: {
                                class: tR.sliderHandle + ' ' + tR.sliderMaterialHandle
                            }
                        });
                        this.element.appendChild(this.materialHandle);
                    }
                };
                t.prototype.wireFirstHandleEvt = function(e) {
                    if (!e) {
                        n.bi.add(this.firstHandle, 'mousedown touchstart', this.handleFocus, this);
                        n.bi.add(this.firstHandle, 'transitionend', this.transitionEnd, this);
                        n.bi.add(this.firstHandle, 'mouseenter touchenter', this.handleOver, this);
                        n.bi.add(this.firstHandle, 'mouseleave touchend', this.handleLeave, this);
                    } else {
                        n.bi.remove(this.firstHandle, 'mousedown touchstart', this.handleFocus);
                        n.bi.remove(this.firstHandle, 'transitionend', this.transitionEnd);
                        n.bi.remove(this.firstHandle, 'mouseenter touchenter', this.handleOver);
                        n.bi.remove(this.firstHandle, 'mouseleave touchend', this.handleLeave);
                    }
                };
                t.prototype.wireSecondHandleEvt = function(e) {
                    if (!e) {
                        n.bi.add(this.secondHandle, 'mousedown touchstart', this.handleFocus, this);
                        n.bi.add(this.secondHandle, 'transitionend', this.transitionEnd, this);
                        n.bi.add(this.secondHandle, 'mouseenter touchenter', this.handleOver, this);
                        n.bi.add(this.secondHandle, 'mouseleave touchend', this.handleLeave, this);
                    } else {
                        n.bi.remove(this.secondHandle, 'mousedown touchstart', this.handleFocus);
                        n.bi.remove(this.secondHandle, 'transitionend', this.transitionEnd);
                        n.bi.remove(this.secondHandle, 'mouseenter touchenter', this.handleOver);
                        n.bi.remove(this.secondHandle, 'mouseleave touchend', this.handleLeave);
                    }
                };
                t.prototype.handleStart = function() {
                    if (this.type !== 'Range') {
                        this.firstHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](tR.sliderHandleStart);
                        if (this.isMaterialTooltip) {
                            this.materialHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](tR.sliderHandleStart);
                            if (this.tooltipElement) {
                                this.tooltipElement.classList[this.handlePos1 === 0 ? 'add' : 'remove'](tR.sliderTooltipStart);
                            }
                        }
                    }
                };
                t.prototype.transitionEnd = function(e) {
                    if (e.propertyName !== 'transform') {
                        this.handleStart();
                        if (!this.enableAnimation) {
                            this.getHandle().style.transition = 'none';
                        }
                        if (this.type !== 'Default') {
                            this.rangeBar.style.transition = 'none';
                        }
                        if (this.isMaterial && this.tooltip.isVisible && this.type === 'Default') {
                            this.tooltipElement.style.transition = this.transition.handle;
                        }
                        this.tooltipToggle(this.getHandle());
                        this.closeTooltip();
                    }
                };
                t.prototype.handleFocusOut = function() {
                    if (this.firstHandle.classList.contains(tR.sliderHandleFocused)) {
                        this.firstHandle.classList.remove(tR.sliderHandleFocused);
                    }
                    if (this.type === 'Range') {
                        if (this.secondHandle.classList.contains(tR.sliderHandleFocused)) {
                            this.secondHandle.classList.remove(tR.sliderHandleFocused);
                        }
                    }
                };
                t.prototype.handleFocus = function(e) {
                    this.focusSliderElement();
                    this.sliderBarClick(e);
                    if (e.currentTarget === this.firstHandle) {
                        this.firstHandle.classList.add(tR.sliderHandleFocused);
                        this.firstHandle.classList.add(tR.sliderTabHandle);
                    } else {
                        this.secondHandle.classList.add(tR.sliderHandleFocused);
                        this.secondHandle.classList.add(tR.sliderTabHandle);
                    }
                    n.bi.add(document, 'mousemove touchmove', this.sliderBarMove, this);
                    n.bi.add(document, 'mouseup touchend', this.sliderBarUp, this);
                };
                t.prototype.handleOver = function(e) {
                    if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover') {
                        this.tooltipToggle(e.currentTarget);
                    }
                    if (this.type === 'Default') {
                        this.tooltipToggle(this.getHandle());
                    }
                };
                t.prototype.handleLeave = function(e) {
                    if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover' && !e.currentTarget.classList.contains(tR.sliderHandleFocused) && !e.currentTarget.classList.contains(tR.sliderTabHandle)) {
                        this.closeTooltip();
                    }
                };
                t.prototype.setHandler = function() {
                    if (this.min > this.max) {
                        this.min = this.max;
                    }
                    this.createFirstHandle();
                    if (this.type === 'Range') {
                        this.createSecondHandle();
                    }
                };
                t.prototype.setEnableRTL = function() {
                    this.enableRtl && this.orientation !== 'Vertical' ? (0, n.cn)([
                        this.sliderContainer
                    ], tR.rtl) : (0, n.IV)([
                        this.sliderContainer
                    ], tR.rtl);
                    var e = (this.orientation !== 'Vertical') ? this.horDir : this.verDir;
                    if (this.enableRtl) {
                        this.horDir = 'right';
                        this.verDir = 'bottom';
                    } else {
                        this.horDir = 'left';
                        this.verDir = 'bottom';
                    }
                    var t = (this.orientation !== 'Vertical') ? this.horDir : this.verDir;
                    if (e !== t) {
                        if (this.orientation === 'Horizontal') {
                            (0, n.V7)(this.firstHandle, {
                                'right': '',
                                'left': 'auto'
                            });
                            if (this.type === 'Range') {
                                (0, n.V7)(this.secondHandle, {
                                    'top': '',
                                    'left': 'auto'
                                });
                            }
                        }
                    }
                    this.setBarColor();
                };
                t.prototype.tooltipValue = function() {
                    var e = this;
                    var t;
                    var i = {
                        value: this.value,
                        text: ''
                    };
                    if (this.initialTooltip) {
                        this.initialTooltip = false;
                        this.setTooltipContent();
                        i.text = t = this.tooltipObj.content;
                        this.trigger('tooltipChange', i, function(i) {
                            e.addTooltipClass(i.text);
                            if (t !== i.text) {
                                e.customAriaText = i.text;
                                e.tooltipObj.content = i.text;
                                e.setAriaAttrValue(e.firstHandle);
                                if (e.type === 'Range') {
                                    e.setAriaAttrValue(e.secondHandle);
                                }
                            }
                        });
                        if (this.isMaterialTooltip) {
                            this.setPreviousVal('change', this.value);
                        }
                    }
                };
                t.prototype.setTooltipContent = function() {
                    var e;
                    e = this.formatContent(this.tooltipFormatInfo, false);
                    this.tooltipObj.content = e;
                };
                t.prototype.formatContent = function(e, t) {
                    var i = '';
                    var r = this.handleVal1;
                    var s = this.handleVal2;
                    if (!(0, n.le)(this.customValues) && this.customValues.length > 0) {
                        r = this.customValues[this.handleVal1];
                        s = this.customValues[this.handleVal2];
                    }
                    if (!t) {
                        if (this.type === 'Range') {
                            if (this.enableRtl && this.orientation !== 'Vertical') {
                                i = (!(0, n.le)(e.format)) ? (this.formatString(s, e).formatString + ' - ' + this.formatString(r, e).formatString) : (s.toString() + ' - ' + r.toString());
                            } else {
                                i = (!(0, n.le)(e.format)) ? (this.formatString(r, e).formatString + ' - ' + this.formatString(s, e).formatString) : (r.toString() + ' - ' + s.toString());
                            }
                        } else {
                            if (!(0, n.le)(r)) {
                                i = (!(0, n.le)(e.format)) ? this.formatString(r, e).formatString : r.toString();
                            }
                        }
                        return i;
                    } else {
                        if (this.type === 'Range') {
                            if (this.enableRtl && this.orientation !== 'Vertical') {
                                i = (!(0, n.le)(this.tooltip) && !(0, n.le)(this.tooltip.format)) ? (this.formatString(s, e).elementVal + ' - ' + this.formatString(r, e).elementVal) : (s.toString() + ' - ' + r.toString());
                            } else {
                                i = (!(0, n.le)(this.tooltip) && !(0, n.le)(this.tooltip.format)) ? (this.formatString(r, e).elementVal + ' - ' + this.formatString(s, e).elementVal) : (r.toString() + ' - ' + s.toString());
                            }
                        } else {
                            if (!(0, n.le)(r)) {
                                i = (!(0, n.le)(this.tooltip) && !(0, n.le)(this.tooltip.format)) ? this.formatString(r, e).elementVal : r.toString();
                            }
                        }
                        return i;
                    }
                };
                t.prototype.addTooltipClass = function(e) {
                    if (this.isMaterialTooltip) {
                        var t = e.toString().length;
                        if (!this.tooltipElement) {
                            var i = t > 4 ? tR.sliderMaterialRange : tR.sliderMaterialDefault;
                            this.tooltipObj.cssClass = tR.sliderTooltip + ' ' + i;
                        } else {
                            var i = t > 4 ? {
                                oldCss: tR.sliderMaterialDefault,
                                newCss: tR.sliderMaterialRange
                            } : {
                                oldCss: tR.sliderMaterialRange,
                                newCss: tR.sliderMaterialDefault
                            };
                            this.tooltipElement.classList.remove(i.oldCss);
                            if (!this.tooltipElement.classList.contains(i.newCss)) {
                                this.tooltipElement.classList.add(i.newCss);
                                this.tooltipElement.style.transform = t > 4 ? 'scale(1)' : this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
                            }
                        }
                    }
                };
                t.prototype.tooltipPlacement = function() {
                    return this.orientation === 'Horizontal' ? (this.tooltip.placement === 'Before' ? 'TopCenter' : 'BottomCenter') : (this.tooltip.placement === 'Before' ? 'LeftCenter' : 'RightCenter');
                };
                t.prototype.tooltipBeforeOpen = function(e) {
                    this.tooltipElement = e.element;
                    if (this.tooltip.cssClass) {
                        (0, n.cn)([
                            this.tooltipElement
                        ], this.tooltip.cssClass.split(' ').filter(function(e) {
                            return e;
                        }));
                    }
                    e.target.removeAttribute('aria-describedby');
                    if (this.isMaterialTooltip) {
                        this.tooltipElement.firstElementChild.classList.add(tR.materialTooltipHide);
                        this.handleStart();
                        this.setTooltipTransform();
                    }
                };
                t.prototype.tooltipCollision = function(e) {
                    if (this.isBootstrap || this.isBootstrap4 || (this.isMaterial && !this.isMaterialTooltip)) {
                        var t = this.isBootstrap4 ? tM : tP;
                        switch(e){
                            case 'TopCenter':
                                this.tooltipObj.setProperties({
                                    'offsetY': -(t)
                                }, false);
                                break;
                            case 'BottomCenter':
                                this.tooltipObj.setProperties({
                                    'offsetY': t
                                }, false);
                                break;
                            case 'LeftCenter':
                                this.tooltipObj.setProperties({
                                    'offsetX': -(t)
                                }, false);
                                break;
                            case 'RightCenter':
                                this.tooltipObj.setProperties({
                                    'offsetX': t
                                }, false);
                                break;
                        }
                    }
                };
                t.prototype.materialTooltipEventCallBack = function(e) {
                    this.sliderBarClick(e);
                    n.bi.add(document, 'mousemove touchmove', this.sliderBarMove, this);
                    n.bi.add(document, 'mouseup touchend', this.sliderBarUp, this);
                };
                t.prototype.wireMaterialTooltipEvent = function(e) {
                    if (this.isMaterialTooltip) {
                        if (!e) {
                            n.bi.add(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack, this);
                        } else {
                            n.bi.remove(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack);
                        }
                    }
                };
                t.prototype.tooltipPositionCalculation = function(e) {
                    var t;
                    switch(e){
                        case 'TopCenter':
                            t = tR.horizontalTooltipBefore;
                            break;
                        case 'BottomCenter':
                            t = tR.horizontalTooltipAfter;
                            break;
                        case 'LeftCenter':
                            t = tR.verticalTooltipBefore;
                            break;
                        case 'RightCenter':
                            t = tR.verticalTooltipAfter;
                            break;
                    }
                    return t;
                };
                t.prototype.getTooltipTransformProperties = function(e) {
                    var t;
                    if (this.tooltipElement) {
                        var i = this.orientation === 'Horizontal' ? ((this.tooltipElement.clientHeight + 14) - (this.tooltipElement.clientHeight / 2)) : ((this.tooltipElement.clientWidth + 14) - (this.tooltipElement.clientWidth / 2));
                        t = this.orientation === 'Horizontal' ? (e === tR.horizontalTooltipBefore ? {
                            rotate: 'rotate(45deg)',
                            translate: "translateY(" + i + "px)"
                        } : {
                            rotate: 'rotate(225deg)',
                            translate: "translateY(" + -(i) + "px)"
                        }) : (e === tR.verticalTooltipBefore ? {
                            rotate: 'rotate(-45deg)',
                            translate: "translateX(" + i + "px)"
                        } : {
                            rotate: 'rotate(-225deg)',
                            translate: "translateX(" + (-i) + "px)"
                        });
                    }
                    return t;
                };
                t.prototype.openMaterialTooltip = function() {
                    var e = this;
                    if (this.isMaterialTooltip) {
                        this.refreshTooltip(this.firstHandle);
                        var t = this.tooltipElement.firstElementChild;
                        t.classList.remove(tR.materialTooltipHide);
                        t.classList.add(tR.materialTooltipShow);
                        this.firstHandle.style.cursor = 'default';
                        this.tooltipElement.style.transition = this.scaleTransform;
                        this.tooltipElement.classList.add(tR.materialTooltipOpen);
                        this.materialHandle.style.transform = 'scale(0)';
                        if (t.innerText.length > 4) {
                            this.tooltipElement.style.transform = 'scale(1)';
                        } else {
                            this.tooltipElement.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
                        }
                        if (this.type === 'Default') {
                            setTimeout(function() {
                                e.tooltipElement.style.transition = e.transition.handle;
                            }, 2500);
                        } else {
                            setTimeout(function() {
                                e.tooltipElement.style.transition = 'none';
                            }, 2500);
                        }
                    }
                };
                t.prototype.closeMaterialTooltip = function() {
                    var e = this;
                    if (this.isMaterialTooltip) {
                        var t = this.tooltipElement.firstElementChild;
                        this.tooltipElement.style.transition = this.scaleTransform;
                        t.classList.remove(tR.materialTooltipShow);
                        t.classList.add(tR.materialTooltipHide);
                        this.firstHandle.style.cursor = '-webkit-grab';
                        this.firstHandle.style.cursor = 'grab';
                        if (this.materialHandle) {
                            this.materialHandle.style.transform = 'scale(1)';
                        }
                        this.tooltipElement.classList.remove(tR.materialTooltipOpen);
                        this.setTooltipTransform();
                        this.tooltipTarget = undefined;
                        setTimeout(function() {
                            e.tooltipElement.style.transition = 'none';
                        }, 2500);
                    }
                };
                t.prototype.checkTooltipPosition = function(e) {
                    var t = this.tooltipPositionCalculation(e.collidedPosition);
                    if (this.tooltipCollidedPosition === undefined || this.tooltipCollidedPosition !== e.collidedPosition || !e.element.classList.contains(t)) {
                        if (this.isMaterialTooltip) {
                            if (t !== undefined) {
                                e.element.classList.remove(this.previousTooltipClass);
                                e.element.classList.add(t);
                                this.previousTooltipClass = t;
                            }
                            if (e.element.style.transform && e.element.classList.contains(tR.materialTooltipOpen) && e.element.firstElementChild.innerText.length <= 4) {
                                e.element.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
                            }
                        }
                        this.tooltipCollidedPosition = e.collidedPosition;
                    }
                    if (this.isMaterialTooltip && this.tooltipElement && this.tooltipElement.style.transform.indexOf('translate') !== -1) {
                        this.setTooltipTransform();
                    }
                };
                t.prototype.setTooltipTransform = function() {
                    var e = this.getTooltipTransformProperties(this.previousTooltipClass);
                    if (this.tooltipElement.firstElementChild.innerText.length > 4) {
                        this.tooltipElement.style.transform = e.translate + " scale(0.01)";
                    } else {
                        this.tooltipElement.style.transform = e.translate + " " + e.rotate + " scale(0.01)";
                    }
                };
                t.prototype.renderTooltip = function() {
                    this.tooltipObj = new tw({
                        showTipPointer: this.isBootstrap || this.isMaterial || this.isBootstrap4 || this.isTailwind || this.isBootstrap5 || this.isFluent,
                        cssClass: tR.sliderTooltip,
                        height: this.isMaterial ? 30 : 'auto',
                        animation: {
                            open: {
                                effect: 'None'
                            },
                            close: {
                                effect: 'FadeOut',
                                duration: 500
                            }
                        },
                        opensOn: 'Custom',
                        beforeOpen: this.tooltipBeforeOpen.bind(this),
                        beforeCollision: this.checkTooltipPosition.bind(this),
                        beforeClose: this.tooltipBeforeClose.bind(this),
                        enableHtmlSanitizer: this.enableHtmlSanitizer
                    });
                    this.tooltipObj.appendTo(this.firstHandle);
                    this.initializeTooltipProps();
                };
                t.prototype.initializeTooltipProps = function() {
                    var e = (this.tooltip.showOn === 'Auto' ? 'Hover' : this.tooltip.showOn);
                    this.setProperties({
                        tooltip: {
                            showOn: e
                        }
                    }, true);
                    this.tooltipObj.position = this.tooltipPlacement();
                    this.tooltipCollision(this.tooltipObj.position);
                    [
                        this.firstHandle,
                        this.rangeBar,
                        this.secondHandle
                    ].forEach(function(e) {
                        if (!(0, n.le)(e)) {
                            e.style.transition = 'none';
                        }
                    });
                    if (this.isMaterialTooltip) {
                        this.sliderContainer.classList.add(tR.materialSlider);
                        this.tooltipValue();
                        this.tooltipObj.animation.close.effect = 'None';
                        this.tooltipObj.open(this.firstHandle);
                    }
                };
                t.prototype.tooltipBeforeClose = function() {
                    this.tooltipElement = undefined;
                    this.tooltipCollidedPosition = undefined;
                };
                t.prototype.setButtons = function() {
                    this.firstBtn = this.createElement('div', {
                        className: tR.sliderButton + ' ' + tR.firstButton
                    });
                    this.firstBtn.appendChild(this.createElement('span', {
                        className: tR.sliderButtonIcon
                    }));
                    if (this.isTailwind) {
                        this.firstBtn.querySelector('span').classList.add('e-icons');
                    }
                    this.firstBtn.tabIndex = -1;
                    this.secondBtn = this.createElement('div', {
                        className: tR.sliderButton + ' ' + tR.secondButton
                    });
                    this.secondBtn.appendChild(this.createElement('span', {
                        className: tR.sliderButtonIcon
                    }));
                    if (this.isTailwind) {
                        this.secondBtn.querySelector('span').classList.add('e-icons');
                    }
                    this.secondBtn.tabIndex = -1;
                    this.sliderContainer.classList.add(tR.sliderButtonClass);
                    this.sliderContainer.appendChild(this.firstBtn);
                    this.sliderContainer.appendChild(this.secondBtn);
                    this.sliderContainer.appendChild(this.element);
                    this.buttonTitle();
                };
                t.prototype.buttonTitle = function() {
                    var e = this.enableRtl && this.orientation !== 'Vertical';
                    this.l10n.setLocale(this.locale);
                    var t = this.l10n.getConstant('decrementTitle');
                    var i = this.l10n.getConstant('incrementTitle');
                    (0, n.Y4)(e ? this.secondBtn : this.firstBtn, {
                        'aria-label': t,
                        title: t
                    });
                    (0, n.Y4)(e ? this.firstBtn : this.secondBtn, {
                        'aria-label': i,
                        title: i
                    });
                };
                t.prototype.buttonFocusOut = function() {
                    if (this.isMaterial) {
                        this.getHandle().classList.remove('e-large-thumb-size');
                    }
                };
                t.prototype.repeatButton = function(e) {
                    var t = this.handleValueUpdate();
                    var i = this.enableRtl && this.orientation !== 'Vertical';
                    var n;
                    if (e.target.parentElement.classList.contains(tR.firstButton) || e.target.classList.contains(tR.firstButton)) {
                        i ? (n = this.add(t, parseFloat(this.step.toString()), true)) : (n = this.add(t, parseFloat(this.step.toString()), false));
                    } else if (e.target.parentElement.classList.contains(tR.secondButton) || (e.target.classList.contains(tR.secondButton))) {
                        i ? (n = this.add(t, parseFloat(this.step.toString()), false)) : (n = this.add(t, parseFloat(this.step.toString()), true));
                    }
                    if (this.limits.enabled) {
                        n = this.getLimitCorrectedValues(n);
                    }
                    if (n >= this.min && n <= this.max) {
                        this.changeHandleValue(n);
                        this.tooltipToggle(this.getHandle());
                    }
                };
                t.prototype.repeatHandlerMouse = function(e) {
                    e.preventDefault();
                    if (e.type === ('mousedown') || e.type === ('touchstart')) {
                        this.buttonClick(e);
                        this.repeatInterval = setInterval(this.repeatButton.bind(this), 180, e);
                    }
                };
                t.prototype.materialChange = function() {
                    if (!this.getHandle().classList.contains('e-large-thumb-size')) {
                        this.getHandle().classList.add('e-large-thumb-size');
                    }
                };
                t.prototype.focusHandle = function() {
                    if (!this.getHandle().classList.contains(tR.sliderTabHandle)) {
                        this.getHandle().classList.add(tR.sliderTabHandle);
                    }
                };
                t.prototype.repeatHandlerUp = function(e) {
                    this.changeEvent('changed', e);
                    this.closeTooltip();
                    clearInterval(this.repeatInterval);
                    this.getHandle().focus();
                };
                t.prototype.customTickCounter = function(e) {
                    var t = 4;
                    if (!(0, n.le)(this.customValues) && this.customValues.length > 0) {
                        if (e > 4) {
                            t = 3;
                        }
                        if (e > 7) {
                            t = 2;
                        }
                        if (e > 14) {
                            t = 1;
                        }
                        if (e > 28) {
                            t = 0;
                        }
                    }
                    return t;
                };
                t.prototype.renderScale = function() {
                    var e = 0;
                    var t = this.orientation === 'Vertical' ? 'v' : 'h';
                    var i;
                    this.noOfDecimals = this.numberOfDecimals(this.step);
                    this.ul = this.createElement('ul', {
                        className: tR.scale + ' ' + 'e-' + t + '-scale ' + tR.tick + '-' + this.ticks.placement.toLowerCase(),
                        attrs: {
                            role: 'presentation',
                            tabIndex: '-1',
                            'aria-hidden': 'true'
                        }
                    });
                    this.ul.style.zIndex = '-1';
                    if (n.AR.isAndroid && t === 'h') {
                        this.ul.classList.add(tR.sliderTickPosition);
                    }
                    var r = this.ticks.smallStep;
                    if (!this.ticks.showSmallTicks) {
                        this.ticks.largeStep > 0 ? (r = this.ticks.largeStep) : (r = (parseFloat((0, n.Ac)(this.max))) - (parseFloat((0, n.Ac)(this.min))));
                    } else if (r <= 0) {
                        r = parseFloat((0, n.Ac)(this.step));
                    }
                    var s = this.fractionalToInteger(this.min);
                    var o = this.fractionalToInteger(this.max);
                    var a = this.fractionalToInteger(r);
                    var l = !(0, n.le)(this.customValues) && this.customValues.length > 0 && this.customValues.length - 1;
                    var h = this.customTickCounter(l);
                    var c = !(0, n.le)(this.customValues) && this.customValues.length > 0 ? (l * h) + l : Math.abs((o - s) / a);
                    this.element.appendChild(this.ul);
                    var d;
                    var p = parseFloat(this.min.toString());
                    if (t === 'v') {
                        p = parseFloat(this.max.toString());
                    }
                    var u = 0;
                    var f;
                    var m = 100 / c;
                    if (m === Infinity) {
                        m = 5;
                    }
                    for(var v = 0, g = !(0, n.le)(this.customValues) && this.customValues.length > 0 ? this.customValues.length - 1 : 0, b = 0; v <= c; v++){
                        d = (this.createElement('li', {
                            attrs: {
                                class: tR.tick,
                                role: 'presentation',
                                tabIndex: '-1',
                                'aria-hidden': 'true'
                            }
                        }));
                        if (!(0, n.le)(this.customValues) && this.customValues.length > 0) {
                            f = v % (h + 1) === 0;
                            if (f) {
                                if (t === 'h') {
                                    p = this.customValues[b];
                                    b++;
                                } else {
                                    p = this.customValues[g];
                                    g--;
                                }
                                d.setAttribute('title', p.toString());
                            }
                        } else {
                            d.setAttribute('title', p.toString());
                            if (this.numberOfDecimals(this.max) === 0 && this.numberOfDecimals(this.min) === 0 && this.numberOfDecimals(this.step) === 0) {
                                if (t === 'h') {
                                    f = ((p - parseFloat(this.min.toString())) % this.ticks.largeStep === 0) ? true : false;
                                } else {
                                    f = (Math.abs(p - parseFloat(this.max.toString())) % this.ticks.largeStep === 0) ? true : false;
                                }
                            } else {
                                var y = this.fractionalToInteger(this.ticks.largeStep);
                                var C = this.fractionalToInteger(p);
                                if (t === 'h') {
                                    f = ((C - s) % y === 0) ? true : false;
                                } else {
                                    f = (Math.abs(C - parseFloat(o.toString())) % y === 0) ? true : false;
                                }
                            }
                        }
                        if (f) {
                            d.classList.add(tR.large);
                        }
                        (t === 'h') ? (d.style.width = m + '%') : (d.style.height = m + '%');
                        var E = f ? (this.ticks.placement === 'Both' ? 2 : 1) : 0;
                        if (f) {
                            for(var S = 0; S < E; S++){
                                this.createTick(d, p, m);
                            }
                        } else if ((0, n.le)(this.customValues)) {
                            this.formatTicksValue(d, p);
                        }
                        this.ul.appendChild(d);
                        this.tickElementCollection.push(d);
                        var w = void 0;
                        if ((0, n.le)(this.customValues)) {
                            if (this.numberOfDecimals(r) > this.numberOfDecimals(p)) {
                                w = this.numberOfDecimals(r);
                            } else {
                                w = this.numberOfDecimals(p);
                            }
                            if (t === 'h') {
                                p = this.makeRoundNumber(p + r, w);
                            } else {
                                p = this.makeRoundNumber(p - r, w);
                            }
                            u = this.makeRoundNumber(u + r, w);
                        }
                    }
                    this.ticksAlignment(t, m);
                };
                t.prototype.ticksAlignment = function(e, t, i) {
                    if (i === void 0) {
                        i = true;
                    }
                    this.firstChild = this.ul.firstElementChild;
                    this.lastChild = this.ul.lastElementChild;
                    this.firstChild.classList.add(tR.sliderFirstTick);
                    this.lastChild.classList.add(tR.sliderLastTick);
                    this.sliderContainer.classList.add(tR.scale + '-' + this.ticks.placement.toLowerCase());
                    if (e === 'h') {
                        this.firstChild.style.width = t / 2 + '%';
                        this.lastChild.style.width = t / 2 + '%';
                    } else {
                        this.firstChild.style.height = t / 2 + '%';
                        this.lastChild.style.height = t / 2 + '%';
                    }
                    var n = {
                        ticksWrapper: this.ul,
                        tickElements: this.tickElementCollection
                    };
                    if (i) {
                        this.trigger('renderedTicks', n);
                    }
                    this.scaleAlignment();
                };
                t.prototype.createTick = function(e, t, i) {
                    var r = this.createElement('span', {
                        className: tR.tickValue + ' ' + tR.tick + '-' + this.ticks.placement.toLowerCase(),
                        attrs: {
                            role: 'presentation',
                            tabIndex: '-1',
                            'aria-hidden': 'true'
                        }
                    });
                    e.appendChild(r);
                    if ((0, n.le)(this.customValues)) {
                        this.formatTicksValue(e, t, r, i);
                    } else {
                        if (this.enableHtmlSanitizer) {
                            r.innerHTML = n.pJ.sanitize(t.toString());
                        } else {
                            r.innerHTML = t.toString();
                        }
                    }
                };
                t.prototype.formatTicksValue = function(e, t, i, r) {
                    var s = this;
                    var o = this.formatNumber(t);
                    var a = !(0, n.le)(this.ticks) && !(0, n.le)(this.ticks.format) ? this.formatString(t, this.ticksFormatInfo).formatString : o;
                    var l = {
                        value: t,
                        text: a,
                        tickElement: e
                    };
                    this.trigger('renderingTicks', l, function(t) {
                        e.setAttribute('title', t.text.toString());
                        if (i) {
                            if (s.enableHtmlSanitizer) {
                                i.innerHTML = n.pJ.sanitize(t.text.toString());
                            } else {
                                i.innerHTML = t.text.toString();
                            }
                        }
                    });
                };
                t.prototype.scaleAlignment = function() {
                    this.tickValuePosition();
                    var e = 12;
                    var t = 20;
                    var i = t / 2;
                    var n = this.orientation === 'Vertical' ? 'v' : 'h';
                    if (this.orientation === 'Vertical') {
                        (this.element.getBoundingClientRect().width <= 15) ? this.sliderContainer.classList.add(tR.sliderSmallSize) : this.sliderContainer.classList.remove(tR.sliderSmallSize);
                    } else {
                        (this.element.getBoundingClientRect().height <= 15) ? this.sliderContainer.classList.add(tR.sliderSmallSize) : this.sliderContainer.classList.remove(tR.sliderSmallSize);
                    }
                };
                t.prototype.tickValuePosition = function() {
                    this.firstChild = this.element.querySelector('ul').children[0];
                    var e = this.firstChild.getBoundingClientRect();
                    var t;
                    var i;
                    var r = this.ticks.smallStep;
                    var s = Math.abs((parseFloat((0, n.Ac)(this.max))) - (parseFloat((0, n.Ac)(this.min)))) / r;
                    if (this.firstChild.children.length > 0) {
                        t = this.firstChild.children[0].getBoundingClientRect();
                    }
                    var o = [
                        this.sliderContainer.querySelectorAll('.' + tR.tick + '.' + tR.large + ' .' + tR.tickValue)
                    ];
                    var a;
                    if (this.ticks.placement === 'Both') {
                        a = [].slice.call(o[0], 2);
                    } else {
                        a = [].slice.call(o[0], 1);
                    }
                    var l = this.orientation === 'Vertical' ? (e.height * 2) : (e.width * 2);
                    for(var h = 0; h < this.firstChild.children.length; h++){
                        if (this.orientation === 'Vertical') {
                            this.firstChild.children[h].style.top = -(t.height / 2) + 'px';
                        } else {
                            if (!this.enableRtl) {
                                this.firstChild.children[h].style.left = -(t.width / 2) + 'px';
                            } else {
                                this.firstChild.children[h].style.left = (l - this.firstChild.children[h].getBoundingClientRect().width) / 2 + 'px';
                            }
                        }
                    }
                    for(var h = 0; h < a.length; h++){
                        i = a[h].getBoundingClientRect();
                        if (this.orientation === 'Vertical') {
                            (0, n.V7)(a[h], {
                                top: (l - i.height) / 2 + 'px'
                            });
                        } else {
                            (0, n.V7)(a[h], {
                                left: (l - i.width) / 2 + 'px'
                            });
                        }
                    }
                    if (this.enableRtl && this.lastChild.children.length && s !== 0) {
                        this.lastChild.children[0].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';
                        if (this.ticks.placement === 'Both') {
                            this.lastChild.children[1].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';
                        }
                    }
                    if (s === 0) {
                        if (this.orientation === 'Horizontal') {
                            if (!this.enableRtl) {
                                this.firstChild.classList.remove(tR.sliderLastTick);
                                this.firstChild.style.left = this.firstHandle.style.left;
                            } else {
                                this.firstChild.classList.remove(tR.sliderLastTick);
                                this.firstChild.style.right = this.firstHandle.style.right;
                                this.firstChild.children[0].style.left = (this.firstChild.getBoundingClientRect().width / 2) + 2 + 'px';
                                if (this.ticks.placement === 'Both') {
                                    this.firstChild.children[1].style.left = (this.firstChild.getBoundingClientRect().width / 2) + 2 + 'px';
                                }
                            }
                        }
                        if (this.orientation === 'Vertical') {
                            this.firstChild.classList.remove(tR.sliderLastTick);
                        }
                    }
                };
                t.prototype.setAriaAttrValue = function(e) {
                    var t;
                    var i = ((!(0, n.le)(this.ticks) && !(0, n.le)(this.ticks.format))) ? true : false;
                    var r = !i ? this.formatContent(this.ticksFormatInfo, false) : this.formatContent(this.tooltipFormatInfo, false);
                    var s = i ? this.formatContent(this.ticksFormatInfo, true) : this.formatContent(this.tooltipFormatInfo, true);
                    r = (!this.customAriaText) ? (r) : (this.customAriaText);
                    if (r.split(' - ').length === 2) {
                        t = r.split(' - ');
                    } else {
                        t = [
                            r,
                            r
                        ];
                    }
                    this.setAriaAttributes(e);
                    if (this.type !== 'Range') {
                        (0, n.Y4)(e, {
                            'aria-valuenow': s,
                            'aria-valuetext': r
                        });
                    } else {
                        (!this.enableRtl) ? ((e === this.firstHandle) ? (0, n.Y4)(e, {
                            'aria-valuenow': s.split(' - ')[0],
                            'aria-valuetext': t[0]
                        }) : (0, n.Y4)(e, {
                            'aria-valuenow': s.split(' - ')[1],
                            'aria-valuetext': t[1]
                        })) : ((e === this.firstHandle) ? (0, n.Y4)(e, {
                            'aria-valuenow': s.split(' - ')[1],
                            'aria-valuetext': t[1]
                        }) : (0, n.Y4)(e, {
                            'aria-valuenow': s.split(' - ')[0],
                            'aria-valuetext': t[0]
                        }));
                    }
                };
                t.prototype.handleValueUpdate = function() {
                    var e;
                    if (this.type === 'Range') {
                        if (this.activeHandle === 1) {
                            e = this.handleVal1;
                        } else {
                            e = this.handleVal2;
                        }
                    } else {
                        e = this.handleVal1;
                    }
                    return e;
                };
                t.prototype.getLimitCorrectedValues = function(e) {
                    if (this.type === 'MinRange' || this.type === 'Default') {
                        e = (this.getLimitValueAndPosition(e, this.limits.minStart, this.limits.minEnd))[0];
                    } else {
                        if (this.activeHandle === 1) {
                            e = (this.getLimitValueAndPosition(e, this.limits.minStart, this.limits.minEnd))[0];
                        } else {
                            e = (this.getLimitValueAndPosition(e, this.limits.maxStart, this.limits.maxEnd))[0];
                        }
                    }
                    return e;
                };
                t.prototype.focusSliderElement = function() {
                    if (!this.isElementFocused) {
                        this.element.focus();
                        this.isElementFocused = true;
                    }
                };
                t.prototype.buttonClick = function(e) {
                    this.focusSliderElement();
                    var t;
                    var i = this.enableRtl && this.orientation !== 'Vertical';
                    var r = this.handleValueUpdate();
                    if ((e.keyCode === 40) || (e.keyCode === 37) || e.currentTarget.classList.contains(tR.firstButton)) {
                        i ? (t = this.add(r, parseFloat(this.step.toString()), true)) : (t = this.add(r, parseFloat(this.step.toString()), false));
                    } else if ((e.keyCode === 38) || (e.keyCode === 39) || e.currentTarget.classList.contains(tR.secondButton)) {
                        i ? (t = this.add(r, parseFloat(this.step.toString()), false)) : (t = this.add(r, parseFloat(this.step.toString()), true));
                    } else if ((e.keyCode === 33 || e.currentTarget.classList.contains(tR.firstButton))) {
                        i ? (t = this.add(r, parseFloat(this.ticks.largeStep.toString()), false)) : (t = this.add(r, parseFloat(this.ticks.largeStep.toString()), true));
                    } else if ((e.keyCode === 34) || e.currentTarget.classList.contains(tR.secondButton)) {
                        i ? (t = this.add(r, parseFloat(this.ticks.largeStep.toString()), true)) : (t = this.add(r, parseFloat(this.ticks.largeStep.toString()), false));
                    } else if ((e.keyCode === 36)) {
                        t = parseFloat(this.min.toString());
                    } else if ((e.keyCode === 35)) {
                        t = parseFloat(this.max.toString());
                    }
                    if (this.limits.enabled) {
                        t = this.getLimitCorrectedValues(t);
                    }
                    this.changeHandleValue(t);
                    if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(tR.sliderTabHandle)) {
                        this.materialChange();
                    }
                    this.tooltipToggle(this.getHandle());
                    this.getHandle().focus();
                    this.focusHandle();
                    if (e.currentTarget.classList.contains(tR.firstButton)) {
                        n.bi.add(this.firstBtn, 'mouseup touchend', this.buttonUp, this);
                    }
                    if (e.currentTarget.classList.contains(tR.secondButton)) {
                        n.bi.add(this.secondBtn, 'mouseup touchend', this.buttonUp, this);
                    }
                };
                t.prototype.tooltipToggle = function(e) {
                    if (this.isMaterialTooltip) {
                        !this.tooltipElement.classList.contains(tR.materialTooltipOpen) ? this.openMaterialTooltip() : this.refreshTooltip(this.firstHandle);
                    } else {
                        !this.tooltipElement ? this.openTooltip(e) : this.refreshTooltip(e);
                    }
                };
                t.prototype.buttonUp = function(e) {
                    if (e.currentTarget.classList.contains(tR.firstButton)) {
                        n.bi.remove(this.firstBtn, 'mouseup touchend', this.buttonUp);
                    }
                    if (e.currentTarget.classList.contains(tR.secondButton)) {
                        n.bi.remove(this.secondBtn, 'mouseup touchend', this.buttonUp);
                    }
                };
                t.prototype.setRangeBar = function() {
                    if (this.orientation === 'Horizontal') {
                        if (this.type === 'MinRange') {
                            this.enableRtl ? (this.rangeBar.style.right = '0px') : (this.rangeBar.style.left = '0px');
                            (0, n.V7)(this.rangeBar, {
                                'width': (0, n.le)(this.handlePos1) ? 0 : this.handlePos1 + 'px'
                            });
                        } else {
                            this.enableRtl ? (this.rangeBar.style.right = this.handlePos1 + 'px') : (this.rangeBar.style.left = this.handlePos1 + 'px');
                            (0, n.V7)(this.rangeBar, {
                                'width': this.handlePos2 - this.handlePos1 + 'px'
                            });
                        }
                    } else {
                        if (this.type === 'MinRange') {
                            this.rangeBar.style.bottom = '0px';
                            (0, n.V7)(this.rangeBar, {
                                'height': (0, n.le)(this.handlePos1) ? 0 : this.handlePos1 + 'px'
                            });
                        } else {
                            this.rangeBar.style.bottom = this.handlePos1 + 'px';
                            (0, n.V7)(this.rangeBar, {
                                'height': this.handlePos2 - this.handlePos1 + 'px'
                            });
                        }
                    }
                };
                t.prototype.checkValidValueAndPos = function(e) {
                    e = this.checkHandleValue(e);
                    e = this.checkHandlePosition(e);
                    return e;
                };
                t.prototype.setLimitBarPositions = function(e, t, i, n) {
                    if (this.orientation === 'Horizontal') {
                        if (!this.enableRtl) {
                            this.limitBarFirst.style.left = e + 'px';
                            this.limitBarFirst.style.width = (t - e) + 'px';
                        } else {
                            this.limitBarFirst.style.right = e + 'px';
                            this.limitBarFirst.style.width = (t - e) + 'px';
                        }
                    } else {
                        this.limitBarFirst.style.bottom = e + 'px';
                        this.limitBarFirst.style.height = (t - e) + 'px';
                    }
                    if (this.type === 'Range') {
                        if (this.orientation === 'Horizontal') {
                            if (!this.enableRtl) {
                                this.limitBarSecond.style.left = i + 'px';
                                this.limitBarSecond.style.width = (n - i) + 'px';
                            } else {
                                this.limitBarSecond.style.right = i + 'px';
                                this.limitBarSecond.style.width = (n - i) + 'px';
                            }
                        } else {
                            this.limitBarSecond.style.bottom = i + 'px';
                            this.limitBarSecond.style.height = (n - i) + 'px';
                        }
                    }
                };
                t.prototype.setLimitBar = function() {
                    if (this.type === 'Default' || this.type === 'MinRange') {
                        var e = (this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true))[0];
                        e = this.checkValidValueAndPos(e);
                        var t = (this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true))[0];
                        t = this.checkValidValueAndPos(t);
                        this.setLimitBarPositions(e, t);
                    } else if (this.type === 'Range') {
                        var i = (this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true))[0];
                        i = this.checkValidValueAndPos(i);
                        var n = (this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true))[0];
                        n = this.checkValidValueAndPos(n);
                        var r = (this.getLimitValueAndPosition(this.limits.maxStart, this.limits.maxStart, this.limits.maxEnd, true))[0];
                        r = this.checkValidValueAndPos(r);
                        var s = (this.getLimitValueAndPosition(this.limits.maxEnd, this.limits.maxStart, this.limits.maxEnd, true))[0];
                        s = this.checkValidValueAndPos(s);
                        this.setLimitBarPositions(i, n, r, s);
                    }
                };
                t.prototype.getLimitValueAndPosition = function(e, t, i, r) {
                    if ((0, n.le)(t)) {
                        t = this.min;
                        if ((0, n.le)(e) && r) {
                            e = t;
                        }
                    }
                    if ((0, n.le)(i)) {
                        i = this.max;
                        if ((0, n.le)(e) && r) {
                            e = i;
                        }
                    }
                    if (e < t) {
                        e = t;
                    }
                    if (e > i) {
                        e = i;
                    }
                    return [
                        e,
                        this.checkHandlePosition(e)
                    ];
                };
                t.prototype.setValue = function() {
                    if (!(0, n.le)(this.customValues) && this.customValues.length > 0) {
                        this.min = 0;
                        this.max = this.customValues.length - 1;
                        this.setBarColor();
                    }
                    this.setAriaAttributes(this.firstHandle);
                    this.handleVal1 = (0, n.le)(this.value) ? this.checkHandleValue(parseFloat(this.min.toString())) : this.checkHandleValue(parseFloat(this.value.toString()));
                    this.handlePos1 = this.checkHandlePosition(this.handleVal1);
                    this.preHandlePos1 = this.handlePos1;
                    (0, n.le)(this.activeHandle) ? (this.type === 'Range' ? this.activeHandle = 2 : this.activeHandle = 1) : this.activeHandle = this.activeHandle;
                    if (this.type === 'Default' || this.type === 'MinRange') {
                        if (this.limits.enabled) {
                            var e = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
                            this.handleVal1 = e[0];
                            this.handlePos1 = e[1];
                            this.preHandlePos1 = this.handlePos1;
                        }
                        this.setHandlePosition(null);
                        this.handleStart();
                        this.value = this.handleVal1;
                        this.setAriaAttrValue(this.firstHandle);
                        this.changeEvent('changed', null);
                    } else {
                        this.validateRangeValue();
                    }
                    if (this.type !== 'Default') {
                        this.setRangeBar();
                    }
                    if (this.limits.enabled) {
                        this.setLimitBar();
                    }
                };
                t.prototype.rangeValueUpdate = function() {
                    if (this.value === null || typeof (this.value) !== 'object') {
                        this.value = [
                            parseFloat((0, n.Ac)(this.min)),
                            parseFloat((0, n.Ac)(this.max))
                        ];
                    }
                };
                t.prototype.validateRangeValue = function() {
                    this.rangeValueUpdate();
                    this.setRangeValue();
                };
                t.prototype.modifyZindex = function() {
                    if (this.type === 'Range') {
                        if (this.activeHandle === 1) {
                            this.firstHandle.style.zIndex = (this.zIndex + 4) + '';
                            this.secondHandle.style.zIndex = (this.zIndex + 3) + '';
                        } else {
                            this.firstHandle.style.zIndex = (this.zIndex + 3) + '';
                            this.secondHandle.style.zIndex = (this.zIndex + 4) + '';
                        }
                    } else if (this.isMaterialTooltip && this.tooltipElement) {
                        this.tooltipElement.style.zIndex = (0, h.TE)(this.element) + '';
                    }
                };
                t.prototype.setHandlePosition = function(e) {
                    var t = this;
                    var i;
                    var n = (this.activeHandle === 1) ? this.handlePos1 : this.handlePos2;
                    if (this.isMaterialTooltip) {
                        i = [
                            this.firstHandle,
                            this.materialHandle
                        ];
                    } else {
                        i = [
                            this.getHandle()
                        ];
                    }
                    this.handleStart();
                    i.forEach(function(e) {
                        if (t.orientation === 'Horizontal') {
                            t.enableRtl ? (e.style.right = n + "px") : (e.style.left = n + "px");
                        } else {
                            e.style.bottom = n + "px";
                        }
                    });
                    this.changeEvent('change', e);
                };
                t.prototype.getHandle = function() {
                    return (this.activeHandle === 1) ? this.firstHandle : this.secondHandle;
                };
                t.prototype.setRangeValue = function() {
                    this.updateRangeValue();
                    this.activeHandle = 1;
                    this.setHandlePosition(null);
                    this.activeHandle = 2;
                    this.setHandlePosition(null);
                    this.activeHandle = 1;
                };
                t.prototype.changeEvent = function(e, t) {
                    var i = e === 'change' ? this.previousVal : this.previousChanged;
                    if (this.type !== 'Range') {
                        this.setProperties({
                            'value': this.handleVal1
                        }, true);
                        if (i !== this.value && (!this.isMaterialTooltip || !this.initialTooltip)) {
                            this.trigger(e, this.changeEventArgs(e, t));
                            this.initialTooltip = true;
                            this.setPreviousVal(e, this.value);
                        }
                        this.setAriaAttrValue(this.firstHandle);
                    } else {
                        var n = this.value = [
                            this.handleVal1,
                            this.handleVal2
                        ];
                        this.setProperties({
                            'value': n
                        }, true);
                        if (i.length === this.value.length && this.value[0] !== i[0] || this.value[1] !== i[1]) {
                            this.initialTooltip = false;
                            this.trigger(e, this.changeEventArgs(e, t));
                            this.initialTooltip = true;
                            this.setPreviousVal(e, this.value);
                        }
                        this.setAriaAttrValue(this.getHandle());
                    }
                    this.hiddenInput.value = this.value.toString();
                };
                t.prototype.changeEventArgs = function(e, t) {
                    var i;
                    if (this.tooltip.isVisible && this.tooltipObj && this.initialTooltip) {
                        this.tooltipValue();
                        i = {
                            value: this.value,
                            previousValue: e === 'change' ? this.previousVal : this.previousChanged,
                            action: e,
                            text: this.tooltipObj.content,
                            isInteracted: (0, n.le)(t) ? false : true
                        };
                    } else {
                        i = {
                            value: this.value,
                            previousValue: e === 'change' ? this.previousVal : this.previousChanged,
                            action: e,
                            text: (0, n.le)(this.ticksFormatInfo.format) ? this.value.toString() : (this.type !== 'Range' ? this.formatString(this.value, this.ticksFormatInfo).formatString : (this.formatString(this.value[0], this.ticksFormatInfo).formatString + ' - ' + this.formatString(this.value[1], this.ticksFormatInfo).formatString)),
                            isInteracted: (0, n.le)(t) ? false : true
                        };
                    }
                    return i;
                };
                t.prototype.setPreviousVal = function(e, t) {
                    if (e === 'change') {
                        this.previousVal = t;
                    } else {
                        this.previousChanged = t;
                    }
                };
                t.prototype.updateRangeValue = function() {
                    var e = this.value.toString().split(',').map(Number);
                    if ((this.enableRtl && this.orientation !== 'Vertical') || this.rtl) {
                        this.value = [
                            e[1],
                            e[0]
                        ];
                    } else {
                        this.value = [
                            e[0],
                            e[1]
                        ];
                    }
                    if (this.enableRtl && this.orientation !== 'Vertical') {
                        this.handleVal1 = this.checkHandleValue(this.value[1]);
                        this.handleVal2 = this.checkHandleValue(this.value[0]);
                    } else {
                        this.handleVal1 = this.checkHandleValue(this.value[0]);
                        this.handleVal2 = this.checkHandleValue(this.value[1]);
                    }
                    this.handlePos1 = this.checkHandlePosition(this.handleVal1);
                    this.handlePos2 = this.checkHandlePosition(this.handleVal2);
                    if (this.handlePos1 > this.handlePos2) {
                        this.handlePos1 = this.handlePos2;
                        this.handleVal1 = this.handleVal2;
                    }
                    this.preHandlePos1 = this.handlePos1;
                    this.preHandlePos2 = this.handlePos2;
                    if (this.limits.enabled) {
                        this.activeHandle = 1;
                        var t = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
                        this.handleVal1 = t[0];
                        this.handlePos1 = t[1];
                        this.preHandlePos1 = this.handlePos1;
                        this.activeHandle = 2;
                        t = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);
                        this.handleVal2 = t[0];
                        this.handlePos2 = t[1];
                        this.preHandlePos2 = this.handlePos2;
                    }
                };
                t.prototype.checkHandlePosition = function(e) {
                    var t;
                    e = (100 * (e - (parseFloat((0, n.Ac)(this.min))))) / ((parseFloat((0, n.Ac)(this.max))) - (parseFloat((0, n.Ac)(this.min))));
                    if (this.orientation === 'Horizontal') {
                        t = this.element.getBoundingClientRect().width * (e / 100);
                    } else {
                        t = this.element.getBoundingClientRect().height * (e / 100);
                    }
                    if (((parseFloat((0, n.Ac)(this.max))) === (parseFloat((0, n.Ac)(this.min))))) {
                        if (this.orientation === 'Horizontal') {
                            t = this.element.getBoundingClientRect().width;
                        } else {
                            t = this.element.getBoundingClientRect().height;
                        }
                    }
                    return t;
                };
                t.prototype.checkHandleValue = function(e) {
                    if (this.min > this.max) {
                        this.min = this.max;
                    }
                    if (this.min === this.max) {
                        return (parseFloat((0, n.Ac)(this.max)));
                    }
                    var t = this.tempStartEnd();
                    if (e < t.start) {
                        e = t.start;
                    } else if (e > t.end) {
                        e = t.end;
                    }
                    return e;
                };
                t.prototype.reposition = function() {
                    var e = this;
                    this.firstHandle.style.transition = 'none';
                    if (this.type !== 'Default') {
                        this.rangeBar.style.transition = 'none';
                    }
                    if (this.type === 'Range') {
                        this.secondHandle.style.transition = 'none';
                    }
                    this.handlePos1 = this.checkHandlePosition(this.handleVal1);
                    if (this.handleVal2) {
                        this.handlePos2 = this.checkHandlePosition(this.handleVal2);
                    }
                    if (this.orientation === 'Horizontal') {
                        this.enableRtl ? this.firstHandle.style.right = this.handlePos1 + "px" : this.firstHandle.style.left = this.handlePos1 + "px";
                        if (this.isMaterialTooltip) {
                            this.enableRtl ? this.materialHandle.style.right = this.handlePos1 + "px" : this.materialHandle.style.left = this.handlePos1 + "px";
                        }
                        if (this.type === 'MinRange') {
                            this.enableRtl ? (this.rangeBar.style.right = '0px') : (this.rangeBar.style.left = '0px');
                            (0, n.V7)(this.rangeBar, {
                                'width': (0, n.le)(this.handlePos1) ? 0 : this.handlePos1 + 'px'
                            });
                        } else if (this.type === 'Range') {
                            this.enableRtl ? this.secondHandle.style.right = this.handlePos2 + "px" : this.secondHandle.style.left = this.handlePos2 + "px";
                            this.enableRtl ? (this.rangeBar.style.right = this.handlePos1 + 'px') : (this.rangeBar.style.left = this.handlePos1 + 'px');
                            (0, n.V7)(this.rangeBar, {
                                'width': this.handlePos2 - this.handlePos1 + 'px'
                            });
                        }
                    } else {
                        this.firstHandle.style.bottom = this.handlePos1 + "px";
                        if (this.isMaterialTooltip) {
                            this.materialHandle.style.bottom = this.handlePos1 + "px";
                        }
                        if (this.type === 'MinRange') {
                            this.rangeBar.style.bottom = '0px';
                            (0, n.V7)(this.rangeBar, {
                                'height': (0, n.le)(this.handlePos1) ? 0 : this.handlePos1 + 'px'
                            });
                        } else if (this.type === 'Range') {
                            this.secondHandle.style.bottom = this.handlePos2 + "px";
                            this.rangeBar.style.bottom = this.handlePos1 + 'px';
                            (0, n.V7)(this.rangeBar, {
                                'height': this.handlePos2 - this.handlePos1 + 'px'
                            });
                        }
                    }
                    if (this.limits.enabled) {
                        this.setLimitBar();
                    }
                    if (this.ticks.placement !== 'None' && this.ul) {
                        this.removeElement(this.ul);
                        this.ul = undefined;
                        this.renderScale();
                    }
                    this.handleStart();
                    if (!this.tooltip.isVisible) {
                        setTimeout(function() {
                            e.firstHandle.style.transition = e.scaleTransform;
                            if (e.type === 'Range') {
                                e.secondHandle.style.transition = e.scaleTransform;
                            }
                        });
                    }
                    this.refreshTooltip(this.tooltipTarget);
                    this.setBarColor();
                };
                t.prototype.changeHandleValue = function(e) {
                    var t = null;
                    if (this.activeHandle === 1) {
                        if (!(this.limits.enabled && this.limits.startHandleFixed)) {
                            this.handleVal1 = this.checkHandleValue(e);
                            this.handlePos1 = this.checkHandlePosition(this.handleVal1);
                            if (this.type === 'Range' && this.handlePos1 > this.handlePos2) {
                                this.handlePos1 = this.handlePos2;
                                this.handleVal1 = this.handleVal2;
                            }
                            if (this.handlePos1 !== this.preHandlePos1) {
                                t = this.preHandlePos1 = this.handlePos1;
                            }
                        }
                        this.modifyZindex();
                    } else {
                        if (!(this.limits.enabled && this.limits.endHandleFixed)) {
                            this.handleVal2 = this.checkHandleValue(e);
                            this.handlePos2 = this.checkHandlePosition(this.handleVal2);
                            if (this.type === 'Range' && this.handlePos2 < this.handlePos1) {
                                this.handlePos2 = this.handlePos1;
                                this.handleVal2 = this.handleVal1;
                            }
                            if (this.handlePos2 !== this.preHandlePos2) {
                                t = this.preHandlePos2 = this.handlePos2;
                            }
                        }
                        this.modifyZindex();
                    }
                    if (t !== null) {
                        if (this.type !== 'Default') {
                            this.setRangeBar();
                        }
                        this.setHandlePosition(null);
                    }
                };
                t.prototype.tempStartEnd = function() {
                    if (this.min > this.max) {
                        return {
                            start: this.max,
                            end: this.min
                        };
                    } else {
                        return {
                            start: this.min,
                            end: this.max
                        };
                    }
                };
                t.prototype.xyToPosition = function(e) {
                    var t;
                    if (this.min === this.max) {
                        return 100;
                    }
                    if (this.orientation === 'Horizontal') {
                        var i = e.x - this.element.getBoundingClientRect().left;
                        var n = this.element.offsetWidth / 100;
                        this.val = (i / n);
                    } else {
                        var r = e.y - this.element.getBoundingClientRect().top;
                        var n = this.element.offsetHeight / 100;
                        this.val = 100 - (r / n);
                    }
                    var s = this.stepValueCalculation(this.val);
                    if (s < 0) {
                        s = 0;
                    } else if (s > 100) {
                        s = 100;
                    }
                    if (this.enableRtl && this.orientation !== 'Vertical') {
                        s = 100 - s;
                    }
                    if (this.orientation === 'Horizontal') {
                        t = this.element.getBoundingClientRect().width * (s / 100);
                    } else {
                        t = this.element.getBoundingClientRect().height * (s / 100);
                    }
                    return t;
                };
                t.prototype.stepValueCalculation = function(e) {
                    if (this.step === 0) {
                        this.step = 1;
                    }
                    var t = (parseFloat((0, n.Ac)(this.step))) / ((parseFloat((0, n.Ac)(this.max)) - parseFloat((0, n.Ac)(this.min))) / 100);
                    var i = e % Math.abs(t);
                    if (i !== 0) {
                        if ((t / 2) > i) {
                            e -= i;
                        } else {
                            e += Math.abs(t) - i;
                        }
                    }
                    return e;
                };
                t.prototype.add = function(e, t, i) {
                    var n;
                    var r = Math.pow(10, n || 3);
                    var s;
                    if (i) {
                        s = (Math.round(e * r) + Math.round(t * r)) / r;
                    } else {
                        s = (Math.round(e * r) - Math.round(t * r)) / r;
                    }
                    return s;
                };
                t.prototype.positionToValue = function(e) {
                    var t;
                    var i = parseFloat((0, n.Ac)(this.max)) - parseFloat((0, n.Ac)(this.min));
                    if (this.orientation === 'Horizontal') {
                        t = (e / this.element.getBoundingClientRect().width) * i;
                    } else {
                        t = (e / this.element.getBoundingClientRect().height) * i;
                    }
                    var r = this.add(t, parseFloat(this.min.toString()), true);
                    return (r);
                };
                t.prototype.sliderBarClick = function(e) {
                    e.preventDefault();
                    var t;
                    if (e.type === 'mousedown' || e.type === 'mouseup' || e.type === 'click') {
                        t = {
                            x: e.clientX,
                            y: e.clientY
                        };
                    } else if (e.type === 'touchend' || e.type === 'touchstart') {
                        t = {
                            x: e.changedTouches[0].clientX,
                            y: e.changedTouches[0].clientY
                        };
                    }
                    var i = this.xyToPosition(t);
                    var n = this.positionToValue(i);
                    if (this.type === 'Range' && (this.handlePos2 - i) < (i - this.handlePos1)) {
                        this.activeHandle = 2;
                        if (!(this.limits.enabled && this.limits.endHandleFixed)) {
                            if (this.limits.enabled) {
                                var r = this.getLimitValueAndPosition(n, this.limits.maxStart, this.limits.maxEnd);
                                n = r[0];
                                i = r[1];
                            }
                            this.secondHandle.classList.add(tR.sliderActiveHandle);
                            this.handlePos2 = this.preHandlePos2 = i;
                            this.handleVal2 = n;
                        }
                        this.modifyZindex();
                        this.secondHandle.focus();
                    } else {
                        this.activeHandle = 1;
                        if (!(this.limits.enabled && this.limits.startHandleFixed)) {
                            if (this.limits.enabled) {
                                var r = this.getLimitValueAndPosition(n, this.limits.minStart, this.limits.minEnd);
                                n = r[0];
                                i = r[1];
                            }
                            this.firstHandle.classList.add(tR.sliderActiveHandle);
                            this.handlePos1 = this.preHandlePos1 = i;
                            this.handleVal1 = n;
                        }
                        this.modifyZindex();
                        this.firstHandle.focus();
                    }
                    if (this.isMaterialTooltip) {
                        this.tooltipElement.classList.add(tR.materialTooltipActive);
                    }
                    var s = this.element.querySelector('.' + tR.sliderTabHandle);
                    if (s && this.getHandle() !== s) {
                        s.classList.remove(tR.sliderTabHandle);
                    }
                    var o = this.activeHandle === 1 ? this.firstHandle : this.secondHandle;
                    if (e.target === o) {
                        if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(tR.sliderTabHandle)) {
                            this.materialChange();
                        }
                        this.sliderBarUp(e);
                        this.tooltipToggle(this.getHandle());
                        return;
                    }
                    if (!this.checkRepeatedValue(n)) {
                        return;
                    }
                    var a = this.isMaterial && this.tooltip.isVisible ? this.transitionOnMaterialTooltip : this.transition;
                    this.getHandle().style.transition = a.handle;
                    if (this.type !== 'Default') {
                        this.rangeBar.style.transition = a.rangeBar;
                    }
                    this.setHandlePosition(e);
                    if (this.isMaterialTooltip) {
                        this.initialTooltip = false;
                    }
                    this.changeEvent('changed', e);
                    if (this.type !== 'Default') {
                        this.setRangeBar();
                    }
                };
                t.prototype.handleValueAdjust = function(e, t, i) {
                    if (i === 1) {
                        this.handleVal1 = t;
                        this.handleVal2 = this.handleVal1 + this.minDiff;
                    } else if (i === 2) {
                        this.handleVal2 = t;
                        this.handleVal1 = this.handleVal2 - this.minDiff;
                    }
                    this.handlePos1 = this.checkHandlePosition(this.handleVal1);
                    this.handlePos2 = this.checkHandlePosition(this.handleVal2);
                };
                t.prototype.dragRangeBarMove = function(e) {
                    var t, i;
                    if (e.type !== 'touchmove') {
                        e.preventDefault();
                    }
                    this.rangeBarDragged = true;
                    var n;
                    this.rangeBar.style.transition = 'none';
                    this.firstHandle.style.transition = 'none';
                    this.secondHandle.style.transition = 'none';
                    var r;
                    var s;
                    if (e.type === 'mousemove') {
                        t = [
                            e.clientX,
                            e.clientY
                        ], r = t[0], s = t[1];
                    } else {
                        i = [
                            e.changedTouches[0].clientX,
                            e.changedTouches[0].clientY
                        ], r = i[0], s = i[1];
                    }
                    if (!(this.limits.enabled && this.limits.startHandleFixed) && !(this.limits.enabled && this.limits.endHandleFixed)) {
                        if (!this.enableRtl) {
                            n = {
                                x: r - this.firstPartRemain,
                                y: s + this.secondPartRemain
                            };
                        } else {
                            n = {
                                x: r + this.secondPartRemain,
                                y: s + this.secondPartRemain
                            };
                        }
                        this.handlePos1 = this.xyToPosition(n);
                        this.handleVal1 = this.positionToValue(this.handlePos1);
                        if (!this.enableRtl) {
                            n = {
                                x: r + this.secondPartRemain,
                                y: s - this.firstPartRemain
                            };
                        } else {
                            n = {
                                x: r - this.firstPartRemain,
                                y: s - this.firstPartRemain
                            };
                        }
                        this.handlePos2 = this.xyToPosition(n);
                        this.handleVal2 = this.positionToValue(this.handlePos2);
                        if (this.limits.enabled) {
                            var o = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
                            this.handleVal1 = o[0];
                            this.handlePos1 = o[1];
                            if (this.handleVal1 === this.limits.minEnd) {
                                this.handleValueAdjust(this.handleVal1, this.limits.minEnd, 1);
                            }
                            if (this.handleVal1 === this.limits.minStart) {
                                this.handleValueAdjust(this.handleVal1, this.limits.minStart, 1);
                            }
                            o = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);
                            this.handleVal2 = o[0];
                            this.handlePos2 = o[1];
                            if (this.handleVal2 === this.limits.maxStart) {
                                this.handleValueAdjust(this.handleVal2, this.limits.maxStart, 2);
                            }
                            if (this.handleVal2 === this.limits.maxEnd) {
                                this.handleValueAdjust(this.handleVal2, this.limits.maxEnd, 2);
                            }
                        }
                        if (this.handleVal2 === this.max) {
                            this.handleValueAdjust(this.handleVal2, this.max, 2);
                        }
                        if (this.handleVal1 === this.min) {
                            this.handleValueAdjust(this.handleVal1, this.min, 1);
                        }
                    }
                    this.activeHandle = 1;
                    this.setHandlePosition(e);
                    this.activeHandle = 2;
                    this.setHandlePosition(e);
                    this.tooltipToggle(this.rangeBar);
                    this.setRangeBar();
                };
                t.prototype.sliderBarUp = function(e) {
                    this.changeEvent('changed', e);
                    this.handleFocusOut();
                    this.firstHandle.classList.remove(tR.sliderActiveHandle);
                    if (this.type === 'Range') {
                        this.initialTooltip = false;
                        this.secondHandle.classList.remove(tR.sliderActiveHandle);
                    }
                    this.closeTooltip();
                    if (this.isMaterial) {
                        this.getHandle().classList.remove('e-large-thumb-size');
                        if (this.isMaterialTooltip) {
                            this.tooltipElement.classList.remove(tR.materialTooltipActive);
                        }
                    }
                    n.bi.remove(document, 'mousemove touchmove', this.sliderBarMove);
                    n.bi.remove(document, 'mouseup touchend', this.sliderBarUp);
                };
                t.prototype.sliderBarMove = function(e) {
                    if (e.type !== 'touchmove') {
                        e.preventDefault();
                    }
                    var t;
                    if (e.type === 'mousemove') {
                        t = {
                            x: e.clientX,
                            y: e.clientY
                        };
                    } else {
                        t = {
                            x: e.changedTouches[0].clientX,
                            y: e.changedTouches[0].clientY
                        };
                    }
                    var i = this.xyToPosition(t);
                    var n = this.positionToValue(i);
                    i = Math.round(i);
                    if (this.type !== 'Range' && this.activeHandle === 1) {
                        if (!(this.limits.enabled && this.limits.startHandleFixed)) {
                            if (this.limits.enabled) {
                                var r = this.getLimitValueAndPosition(n, this.limits.minStart, this.limits.minEnd);
                                i = r[1];
                                n = r[0];
                            }
                            this.handlePos1 = i;
                            this.handleVal1 = n;
                        }
                        this.firstHandle.classList.add(tR.sliderActiveHandle);
                    }
                    if (this.type === 'Range') {
                        if (this.activeHandle === 1) {
                            this.firstHandle.classList.add(tR.sliderActiveHandle);
                            if (!(this.limits.enabled && this.limits.startHandleFixed)) {
                                if (i > this.handlePos2) {
                                    i = this.handlePos2;
                                    n = this.handleVal2;
                                }
                                if (i !== this.preHandlePos1) {
                                    if (this.limits.enabled) {
                                        var s = this.getLimitValueAndPosition(n, this.limits.minStart, this.limits.minEnd);
                                        n = s[0];
                                        i = s[1];
                                    }
                                    this.handlePos1 = this.preHandlePos1 = i;
                                    this.handleVal1 = n;
                                    this.activeHandle = 1;
                                }
                            }
                        } else if (this.activeHandle === 2) {
                            this.secondHandle.classList.add(tR.sliderActiveHandle);
                            if (!(this.limits.enabled && this.limits.endHandleFixed)) {
                                if (i < this.handlePos1) {
                                    i = this.handlePos1;
                                    n = this.handleVal1;
                                }
                                if (i !== this.preHandlePos2) {
                                    if (this.limits.enabled) {
                                        var s = this.getLimitValueAndPosition(n, this.limits.maxStart, this.limits.maxEnd);
                                        n = s[0];
                                        i = s[1];
                                    }
                                    this.handlePos2 = this.preHandlePos2 = i;
                                    this.handleVal2 = n;
                                    this.activeHandle = 2;
                                }
                            }
                        }
                    }
                    if (!this.checkRepeatedValue(n)) {
                        return;
                    }
                    this.getHandle().style.transition = this.scaleTransform;
                    if (this.type !== 'Default') {
                        this.rangeBar.style.transition = 'none';
                    }
                    this.setHandlePosition(e);
                    if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(tR.sliderTabHandle)) {
                        this.materialChange();
                    }
                    this.tooltipToggle(this.getHandle());
                    if (this.type !== 'Default') {
                        this.setRangeBar();
                    }
                };
                t.prototype.dragRangeBarUp = function(e) {
                    if (!this.rangeBarDragged) {
                        this.focusSliderElement();
                        this.sliderBarClick(e);
                    } else {
                        this.isDragComplete = true;
                    }
                    this.changeEvent('changed', e);
                    this.closeTooltip();
                    n.bi.remove(document, 'mousemove touchmove', this.dragRangeBarMove);
                    n.bi.remove(document, 'mouseup touchend', this.dragRangeBarUp);
                    this.rangeBarDragged = false;
                };
                t.prototype.checkRepeatedValue = function(e) {
                    if (this.type === 'Range') {
                        var t = this.enableRtl && this.orientation !== 'Vertical' ? (this.activeHandle === 1 ? this.previousVal[1] : this.previousVal[0]) : (this.activeHandle === 1 ? this.previousVal[0] : this.previousVal[1]);
                        if (e === t) {
                            return 0;
                        }
                    } else {
                        if (e === this.previousVal) {
                            return 0;
                        }
                    }
                    return 1;
                };
                t.prototype.refreshTooltip = function(e) {
                    if (this.tooltip.isVisible && this.tooltipObj) {
                        this.tooltipValue();
                        if (e) {
                            this.tooltipObj.refresh(e);
                            this.tooltipTarget = e;
                        }
                    }
                };
                t.prototype.openTooltip = function(e) {
                    if (this.tooltip.isVisible && this.tooltipObj && !this.isMaterialTooltip) {
                        this.tooltipValue();
                        this.tooltipObj.open(e);
                        this.tooltipTarget = e;
                    }
                };
                t.prototype.closeTooltip = function() {
                    if (this.tooltip.isVisible && this.tooltipObj && this.tooltip.showOn !== 'Always' && !this.isMaterialTooltip) {
                        this.tooltipValue();
                        this.tooltipObj.close();
                        this.tooltipTarget = undefined;
                    }
                };
                t.prototype.keyDown = function(e) {
                    switch(e.keyCode){
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 33:
                        case 34:
                        case 36:
                        case 35:
                            e.preventDefault();
                            this.buttonClick(e);
                            break;
                    }
                };
                t.prototype.wireButtonEvt = function(e) {
                    if (!e) {
                        n.bi.add(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut, this);
                        n.bi.add(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut, this);
                        n.bi.add(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);
                        n.bi.add(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);
                        n.bi.add(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);
                        n.bi.add(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);
                        n.bi.add(this.firstBtn, 'focusout', this.sliderFocusOut, this);
                        n.bi.add(this.secondBtn, 'focusout', this.sliderFocusOut, this);
                    } else {
                        n.bi.remove(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut);
                        n.bi.remove(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut);
                        n.bi.remove(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse);
                        n.bi.remove(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);
                        n.bi.remove(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse);
                        n.bi.remove(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);
                        n.bi.remove(this.firstBtn, 'focusout', this.sliderFocusOut);
                        n.bi.remove(this.secondBtn, 'focusout', this.sliderFocusOut);
                    }
                };
                t.prototype.rangeBarMousedown = function(e) {
                    var t, i;
                    e.preventDefault();
                    this.focusSliderElement();
                    if (this.type === 'Range' && this.drag && e.target === this.rangeBar) {
                        var r = void 0;
                        var s = void 0;
                        if (e.type === 'mousedown') {
                            t = [
                                e.clientX,
                                e.clientY
                            ], r = t[0], s = t[1];
                        } else if (e.type === 'touchstart') {
                            i = [
                                e.changedTouches[0].clientX,
                                e.changedTouches[0].clientY
                            ], r = i[0], s = i[1];
                        }
                        if (this.orientation === 'Horizontal') {
                            this.firstPartRemain = r - this.rangeBar.getBoundingClientRect().left;
                            this.secondPartRemain = this.rangeBar.getBoundingClientRect().right - r;
                        } else {
                            this.firstPartRemain = s - this.rangeBar.getBoundingClientRect().top;
                            this.secondPartRemain = this.rangeBar.getBoundingClientRect().bottom - s;
                        }
                        this.minDiff = this.handleVal2 - this.handleVal1;
                        this.tooltipToggle(this.rangeBar);
                        var o = this.element.querySelector('.' + tR.sliderTabHandle);
                        if (o) {
                            o.classList.remove(tR.sliderTabHandle);
                        }
                        n.bi.add(document, 'mousemove touchmove', this.dragRangeBarMove, this);
                        n.bi.add(document, 'mouseup touchend', this.dragRangeBarUp, this);
                    }
                };
                t.prototype.elementClick = function(e) {
                    if (this.isDragComplete) {
                        this.isDragComplete = false;
                        return;
                    }
                    e.preventDefault();
                    this.focusSliderElement();
                    this.sliderBarClick(e);
                    this.focusHandle();
                };
                t.prototype.wireEvents = function() {
                    this.onresize = this.reposition.bind(this);
                    window.addEventListener('resize', this.onresize);
                    if (this.enabled && !this.readonly) {
                        n.bi.add(this.element, 'click', this.elementClick, this);
                        if (this.type === 'Range' && this.drag) {
                            n.bi.add(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown, this);
                        }
                        n.bi.add(this.sliderContainer, 'keydown', this.keyDown, this);
                        n.bi.add(this.sliderContainer, 'keyup', this.keyUp, this);
                        n.bi.add(this.element, 'focusout', this.sliderFocusOut, this);
                        n.bi.add(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover, this);
                        this.wireFirstHandleEvt(false);
                        if (this.type === 'Range') {
                            this.wireSecondHandleEvt(false);
                        }
                        if (this.showButtons) {
                            this.wireButtonEvt(false);
                        }
                        this.wireMaterialTooltipEvent(false);
                        if (this.isForm) {
                            n.bi.add(this.formElement, 'reset', this.formResetHandler, this);
                        }
                    }
                };
                t.prototype.unwireEvents = function() {
                    n.bi.remove(this.element, 'click', this.elementClick);
                    if (this.type === 'Range' && this.drag) {
                        n.bi.remove(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown);
                    }
                    n.bi.remove(this.sliderContainer, 'keydown', this.keyDown);
                    n.bi.remove(this.sliderContainer, 'keyup', this.keyUp);
                    n.bi.remove(this.element, 'focusout', this.sliderFocusOut);
                    n.bi.remove(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover);
                    this.wireFirstHandleEvt(true);
                    if (this.type === 'Range') {
                        this.wireSecondHandleEvt(true);
                    }
                    if (this.showButtons) {
                        this.wireButtonEvt(true);
                    }
                    this.wireMaterialTooltipEvent(true);
                    n.bi.remove(this.element, 'reset', this.formResetHandler);
                };
                t.prototype.formResetHandler = function() {
                    this.setProperties({
                        'value': this.formResetValue
                    }, true);
                    this.setValue();
                };
                t.prototype.keyUp = function(e) {
                    if (e.keyCode === 9 && e.target.classList.contains(tR.sliderHandle)) {
                        this.focusSliderElement();
                        if (!e.target.classList.contains(tR.sliderTabHandle)) {
                            if (this.element.querySelector('.' + tR.sliderTabHandle)) {
                                this.element.querySelector('.' + tR.sliderTabHandle).classList.remove(tR.sliderTabHandle);
                            }
                            e.target.classList.add(tR.sliderTabHandle);
                            var t = e.target.parentElement;
                            if (t === this.element) {
                                t.querySelector('.' + tR.sliderTrack).classList.add(tR.sliderTabTrack);
                                if (this.type === 'Range' || this.type === 'MinRange') {
                                    t.querySelector('.' + tR.rangeBar).classList.add(tR.sliderTabRange);
                                }
                            }
                            if (this.type === 'Range') {
                                (e.target.previousSibling).classList.contains(tR.sliderHandle) ? this.activeHandle = 2 : this.activeHandle = 1;
                            }
                            this.getHandle().focus();
                            this.tooltipToggle(this.getHandle());
                        }
                    }
                    this.closeTooltip();
                    this.changeEvent('changed', e);
                };
                t.prototype.hover = function(e) {
                    if (!(0, n.le)(e)) {
                        if (e.type === 'mouseover' || e.type === 'touchmove' || e.type === 'mousemove' || e.type === 'pointermove' || e.type === 'touchstart') {
                            this.sliderContainer.classList.add(tR.sliderHover);
                        } else {
                            this.sliderContainer.classList.remove(tR.sliderHover);
                            var t = e.currentTarget;
                            if (this.tooltip.isVisible && this.tooltip.showOn !== 'Always' && this.tooltipObj && this.isMaterialTooltip && !t.classList.contains(tR.sliderHandleFocused) && !t.classList.contains(tR.sliderTabHandle)) {
                                this.closeMaterialTooltip();
                            }
                        }
                    }
                };
                t.prototype.sliderFocusOut = function(e) {
                    if (e.relatedTarget !== this.secondHandle && e.relatedTarget !== this.firstHandle && e.relatedTarget !== this.element && e.relatedTarget !== this.firstBtn && e.relatedTarget !== this.secondBtn) {
                        this.closeMaterialTooltip();
                        this.closeTooltip();
                        if (this.element.querySelector('.' + tR.sliderTabHandle)) {
                            this.element.querySelector('.' + tR.sliderTabHandle).classList.remove(tR.sliderTabHandle);
                        }
                        if (this.element.querySelector('.' + tR.sliderTabTrack)) {
                            this.element.querySelector('.' + tR.sliderTabTrack).classList.remove(tR.sliderTabTrack);
                            if ((this.type === 'Range' || this.type === 'MinRange') && this.element.querySelector('.' + tR.sliderTabRange)) {
                                this.element.querySelector('.' + tR.sliderTabRange).classList.remove(tR.sliderTabRange);
                            }
                        }
                        this.hiddenInput.focus();
                        this.hiddenInput.blur();
                        this.isElementFocused = false;
                    }
                };
                t.prototype.removeElement = function(e) {
                    if (e.parentNode) {
                        e.parentNode.removeChild(e);
                    }
                };
                t.prototype.changeSliderType = function(e, t) {
                    if (this.isMaterialTooltip && this.materialHandle) {
                        this.sliderContainer.classList.remove(tR.materialSlider);
                        this.removeElement(this.materialHandle);
                        this.materialHandle = undefined;
                    }
                    this.removeElement(this.firstHandle);
                    this.firstHandle = undefined;
                    if (e !== 'Default') {
                        if (e === 'Range') {
                            this.removeElement(this.secondHandle);
                            this.secondHandle = undefined;
                        }
                        this.removeElement(this.rangeBar);
                        this.rangeBar = undefined;
                    }
                    if (this.tooltip.isVisible && !(0, n.le)(this.tooltipObj)) {
                        this.tooltipObj.destroy();
                        this.tooltipElement = undefined;
                        this.tooltipCollidedPosition = undefined;
                    }
                    if (this.limits.enabled) {
                        if (e === 'MinRange' || e === 'Default') {
                            if (!(0, n.le)(this.limitBarFirst)) {
                                this.removeElement(this.limitBarFirst);
                                this.limitBarFirst = undefined;
                            }
                        } else {
                            if (!(0, n.le)(this.limitBarSecond)) {
                                this.removeElement(this.limitBarSecond);
                                this.limitBarSecond = undefined;
                            }
                        }
                    }
                    this.activeHandle = 1;
                    this.getThemeInitialization();
                    if (this.type === 'Range') {
                        this.rangeValueUpdate();
                    }
                    this.createRangeBar();
                    if (this.limits.enabled) {
                        this.createLimitBar();
                    }
                    this.setHandler();
                    this.setOrientClass();
                    this.wireFirstHandleEvt(false);
                    if (this.type === 'Range') {
                        this.wireSecondHandleEvt(false);
                    }
                    this.setValue();
                    if (this.tooltip.isVisible) {
                        this.renderTooltip();
                        this.wireMaterialTooltipEvent(false);
                    }
                    this.setBarColor();
                    if (t !== 'tooltip') {
                        this.updateConfig();
                    }
                };
                t.prototype.changeRtl = function() {
                    if (!this.enableRtl && this.type === 'Range') {
                        this.value = [
                            this.handleVal2,
                            this.handleVal1
                        ];
                    }
                    this.updateConfig();
                    if (this.tooltip.isVisible) {
                        this.tooltipObj.refresh(this.firstHandle);
                    }
                    if (this.showButtons) {
                        var e = this.enableRtl && this.orientation !== 'Vertical';
                        (0, n.Y4)(e ? this.secondBtn : this.firstBtn, {
                            'aria-label': 'Decrease',
                            title: 'Decrease'
                        });
                        (0, n.Y4)(e ? this.firstBtn : this.secondBtn, {
                            'aria-label': 'Increase',
                            title: 'Increase'
                        });
                    }
                };
                t.prototype.changeOrientation = function() {
                    this.changeSliderType(this.type, 'null');
                };
                t.prototype.updateConfig = function() {
                    this.setEnableRTL();
                    this.setValue();
                    if (this.tooltip.isVisible) {
                        this.refreshTooltip(this.tooltipTarget);
                    }
                    if (this.ticks.placement !== 'None') {
                        if (this.ul) {
                            this.removeElement(this.ul);
                            this.ul = undefined;
                            this.renderScale();
                        }
                    }
                    this.limitsPropertyChange();
                };
                t.prototype.limitsPropertyChange = function() {
                    if (this.limits.enabled) {
                        if ((0, n.le)(this.limitBarFirst) && this.type !== 'Range') {
                            this.createLimitBar();
                        }
                        if ((0, n.le)(this.limitBarFirst) && (0, n.le)(this.limitBarSecond) && this.type === 'Range') {
                            this.createLimitBar();
                        }
                        this.setLimitBar();
                        this.setValue();
                    } else {
                        if (!(0, n.le)(this.limitBarFirst)) {
                            (0, n.og)(this.limitBarFirst);
                        }
                        if (!(0, n.le)(this.limitBarSecond)) {
                            (0, n.og)(this.limitBarSecond);
                        }
                    }
                };
                t.prototype.getPersistData = function() {
                    var e = [
                        'value'
                    ];
                    return this.addOnPersist(e);
                };
                t.prototype.destroy = function() {
                    e.prototype.destroy.call(this);
                    this.unwireEvents();
                    window.removeEventListener('resize', this.onresize);
                    (0, n.IV)([
                        this.sliderContainer
                    ], [
                        tR.sliderDisabled
                    ]);
                    this.firstHandle.removeAttribute('aria-orientation');
                    if (this.type === 'Range') {
                        this.secondHandle.removeAttribute('aria-orientation');
                    }
                    this.sliderContainer.parentNode.insertBefore(this.element, this.sliderContainer);
                    (0, n.og)(this.sliderContainer);
                    if (this.tooltip.isVisible) {
                        this.tooltipObj.destroy();
                    }
                    this.element.innerHTML = '';
                };
                t.prototype.onPropertyChanged = function(e, t) {
                    var i = this;
                    for(var r = 0, s = Object.keys(e); r < s.length; r++){
                        var o = s[r];
                        switch(o){
                            case 'cssClass':
                                this.setCSSClass(t.cssClass);
                                break;
                            case 'value':
                                if (e && t) {
                                    var a = (0, n.le)(e.value) ? (this.type === 'Range' ? [
                                        this.min,
                                        this.max
                                    ] : this.min) : e.value;
                                    this.setProperties({
                                        'value': a
                                    }, true);
                                    if (!(0, n.le)(t.value) && t.value.toString() !== a.toString()) {
                                        this.setValue();
                                        this.refreshTooltip(this.tooltipTarget);
                                        if (this.type === 'Range') {
                                            if ((0, n.le)(e.value) || t.value[1] === a[1]) {
                                                this.activeHandle = 1;
                                            } else {
                                                this.activeHandle = 2;
                                            }
                                        }
                                    }
                                }
                                break;
                            case 'min':
                            case 'step':
                            case 'max':
                                this.setMinMaxValue();
                                break;
                            case 'tooltip':
                                if (!(0, n.le)(e.tooltip) && !(0, n.le)(t.tooltip)) {
                                    this.setTooltip(o);
                                }
                                break;
                            case 'type':
                                if (!(0, n.le)(t) && Object.keys(t).length && !(0, n.le)(t.type)) {
                                    this.changeSliderType(t.type, o);
                                    this.setZindex();
                                }
                                break;
                            case 'enableRtl':
                                if (t.enableRtl !== e.enableRtl && this.orientation !== 'Vertical') {
                                    this.rtl = t.enableRtl;
                                    this.changeRtl();
                                }
                                break;
                            case 'limits':
                                this.limitsPropertyChange();
                                break;
                            case 'orientation':
                                this.changeOrientation();
                                break;
                            case 'ticks':
                                if (!(0, n.le)(this.sliderContainer.querySelector('.' + tR.scale))) {
                                    (0, n.og)(this.ul);
                                    Array.prototype.forEach.call(this.sliderContainer.classList, function(e) {
                                        if (e.match(/e-scale-/)) {
                                            i.sliderContainer.classList.remove(e);
                                        }
                                    });
                                }
                                if (this.ticks.placement !== 'None') {
                                    this.renderScale();
                                    this.setZindex();
                                }
                                break;
                            case 'locale':
                                if (this.showButtons) {
                                    this.buttonTitle();
                                }
                                break;
                            case 'showButtons':
                                if (e.showButtons) {
                                    this.setButtons();
                                    this.reposition();
                                    if (this.enabled && !this.readonly) {
                                        this.wireButtonEvt(false);
                                    }
                                } else {
                                    if (this.firstBtn && this.secondBtn) {
                                        this.sliderContainer.removeChild(this.firstBtn);
                                        this.sliderContainer.removeChild(this.secondBtn);
                                        this.sliderContainer.classList.remove(tR.sliderButtonClass);
                                        this.firstBtn = undefined;
                                        this.secondBtn = undefined;
                                        this.reposition();
                                    }
                                }
                                break;
                            case 'enabled':
                                this.setEnabled();
                                break;
                            case 'readonly':
                                this.setReadOnly();
                                break;
                            case 'customValues':
                                this.setValue();
                                this.reposition();
                                break;
                            case 'colorRange':
                                this.reposition();
                                break;
                            case 'width':
                                this.setElementWidth(e.width);
                                this.setMinMaxValue();
                                if (this.limits) {
                                    this.limitsPropertyChange();
                                }
                                break;
                        }
                    }
                };
                t.prototype.setReadOnly = function() {
                    if (this.readonly) {
                        this.unwireEvents();
                        this.sliderContainer.classList.add(tR.readonly);
                    } else {
                        this.wireEvents();
                        this.sliderContainer.classList.remove(tR.readonly);
                    }
                };
                t.prototype.setMinMaxValue = function() {
                    var e = this;
                    this.setValue();
                    this.refreshTooltip(this.tooltipTarget);
                    if (!(0, n.le)(this.sliderContainer.querySelector('.' + tR.scale))) {
                        if (this.ul) {
                            (0, n.og)(this.ul);
                            Array.prototype.forEach.call(this.sliderContainer.classList, function(t) {
                                if (t.match(/e-scale-/)) {
                                    e.sliderContainer.classList.remove(t);
                                }
                            });
                        }
                    }
                    if (this.ticks.placement !== 'None') {
                        this.renderScale();
                        this.setZindex();
                    }
                };
                t.prototype.setZindex = function() {
                    this.zIndex = 6;
                    if (!(0, n.le)(this.ticks) && this.ticks.placement !== 'None') {
                        this.ul.style.zIndex = (this.zIndex + -7) + '';
                        this.element.style.zIndex = (this.zIndex + 2) + '';
                    }
                    if (!this.isMaterial && !(0, n.le)(this.ticks) && this.ticks.placement === 'Both') {
                        this.element.style.zIndex = (this.zIndex + 2) + '';
                    }
                    this.firstHandle.style.zIndex = (this.zIndex + 3) + '';
                    if (this.type === 'Range') {
                        this.secondHandle.style.zIndex = (this.zIndex + 4) + '';
                    }
                };
                t.prototype.setTooltip = function(e) {
                    this.changeSliderType(this.type, e);
                };
                t.prototype.setBarColor = function() {
                    var e;
                    var t;
                    var i = this.sliderTrack.lastElementChild;
                    while(i){
                        this.sliderTrack.removeChild(i);
                        i = this.sliderTrack.lastElementChild;
                    }
                    for(var r = 0; r < this.colorRange.length; r++){
                        if (!(0, n.le)(this.colorRange[r].start) && !(0, n.le)(this.colorRange[r].end)) {
                            if (this.colorRange[r].end > this.colorRange[r].start) {
                                if (this.colorRange[r].start < this.min) {
                                    this.colorRange[r].start = this.min;
                                }
                                if (this.colorRange[r].end > this.max) {
                                    this.colorRange[r].end = this.max;
                                }
                                var s = this.checkHandlePosition(this.colorRange[r].start);
                                var o = this.checkHandlePosition(this.colorRange[r].end);
                                var a = this.createElement('div');
                                a.style.backgroundColor = this.colorRange[r].color;
                                a.style.border = '1px solid ' + this.colorRange[r].color;
                                if (this.orientation === 'Horizontal') {
                                    t = tR.sliderHorizantalColor;
                                    if (this.enableRtl) {
                                        if ((0, n.le)(this.customValues)) {
                                            e = this.checkHandlePosition(this.max) - this.checkHandlePosition(this.colorRange[r].end);
                                        } else {
                                            e = this.checkHandlePosition(this.customValues.length - this.colorRange[r].end - 1);
                                        }
                                    } else {
                                        e = this.checkHandlePosition(this.colorRange[r].start);
                                    }
                                    a.style.width = o - s + 'px';
                                    a.style.left = e + 'px';
                                } else {
                                    t = tR.sliderVerticalColor;
                                    e = this.checkHandlePosition(this.colorRange[r].start);
                                    a.style.height = o - s + 'px';
                                    a.style.bottom = e + 'px';
                                }
                                a.classList.add(t);
                                this.sliderTrack.appendChild(a);
                            }
                        }
                    }
                };
                t.prototype.getModuleName = function() {
                    return 'slider';
                };
                tL([
                    (0, n.Z9)(null)
                ], t.prototype, "value", void 0);
                tL([
                    (0, n.Z9)(null)
                ], t.prototype, "customValues", void 0);
                tL([
                    (0, n.Z9)(1)
                ], t.prototype, "step", void 0);
                tL([
                    (0, n.Z9)(null)
                ], t.prototype, "width", void 0);
                tL([
                    (0, n.Z9)(0)
                ], t.prototype, "min", void 0);
                tL([
                    (0, n.Z9)(100)
                ], t.prototype, "max", void 0);
                tL([
                    (0, n.Z9)(false)
                ], t.prototype, "readonly", void 0);
                tL([
                    (0, n.Z9)('Default')
                ], t.prototype, "type", void 0);
                tL([
                    (0, n.FE)([
                        {}
                    ], tD)
                ], t.prototype, "colorRange", void 0);
                tL([
                    (0, n.Zz)({}, tN)
                ], t.prototype, "ticks", void 0);
                tL([
                    (0, n.Zz)({}, tO)
                ], t.prototype, "limits", void 0);
                tL([
                    (0, n.Z9)(true)
                ], t.prototype, "enabled", void 0);
                tL([
                    (0, n.Zz)({}, tA)
                ], t.prototype, "tooltip", void 0);
                tL([
                    (0, n.Z9)(false)
                ], t.prototype, "showButtons", void 0);
                tL([
                    (0, n.Z9)(true)
                ], t.prototype, "enableAnimation", void 0);
                tL([
                    (0, n.Z9)('Horizontal')
                ], t.prototype, "orientation", void 0);
                tL([
                    (0, n.Z9)('')
                ], t.prototype, "cssClass", void 0);
                tL([
                    (0, n.Z9)(false)
                ], t.prototype, "enableHtmlSanitizer", void 0);
                tL([
                    (0, n.ju)()
                ], t.prototype, "created", void 0);
                tL([
                    (0, n.ju)()
                ], t.prototype, "change", void 0);
                tL([
                    (0, n.ju)()
                ], t.prototype, "changed", void 0);
                tL([
                    (0, n.ju)()
                ], t.prototype, "renderingTicks", void 0);
                tL([
                    (0, n.ju)()
                ], t.prototype, "renderedTicks", void 0);
                tL([
                    (0, n.ju)()
                ], t.prototype, "tooltipChange", void 0);
                t = tL([
                    n.Zl
                ], t);
                return t;
            }(n.wA));
            ;
            var tI = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var tH = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var tF = 'e-apply';
            var tj = 'e-cancel';
            var tz = 'e-current';
            var tq = 'e-container';
            var tV = 'e-ctrl-btn';
            var t_ = 'e-switch-ctrl-btn';
            var tU = 'e-disabled';
            var tW = 'e-value-switch-btn';
            var tZ = 'e-handler';
            var tY = 'e-hex';
            var tX = 'e-hide-hex-value';
            var tG = 'e-hide-opacity';
            var tK = 'e-hide-switchable-value';
            var tJ = 'e-hide-value';
            var t$ = 'e-hide-valueswitcher';
            var tQ = 'e-hsv-color';
            var t0 = 'e-hsv-container';
            var t1 = 'e-selected-value';
            var t3 = 'e-mode-switch-btn';
            var t2 = 'e-nocolor-item';
            var t4 = 'e-opacity-value';
            var t5 = 'e-palette';
            var t7 = 'e-color-palette';
            var t9 = 'e-color-picker';
            var t6 = 'e-preview-container';
            var t8 = 'e-previous';
            var ie = 'e-rtl';
            var it = 'e-show-value';
            var ii = 'e-selected';
            var ir = 'e-split-preview';
            var is = 'e-tile';
            var io = {
                default: [
                    '#000000',
                    '#f44336',
                    '#e91e63',
                    '#9c27b0',
                    '#673ab7',
                    '#2196f3',
                    '#03a9f4',
                    '#00bcd4',
                    '#009688',
                    '#ffeb3b',
                    '#ffffff',
                    '#ffebee',
                    '#fce4ec',
                    '#f3e5f5',
                    '#ede7f6',
                    '#e3f2fd',
                    '#e1f5fe',
                    '#e0f7fa',
                    '#e0f2f1',
                    '#fffde7',
                    '#f2f2f2',
                    '#ffcdd2',
                    '#f8bbd0',
                    '#e1bee7',
                    '#d1c4e9',
                    '#bbdefb',
                    '#b3e5fc',
                    '#b2ebf2',
                    '#b2dfdb',
                    '#fff9c4',
                    '#e6e6e6',
                    '#ef9a9a',
                    '#f48fb1',
                    '#ce93d8',
                    '#b39ddb',
                    '#90caf9',
                    '#81d4fa',
                    '#80deea',
                    '#80cbc4',
                    '#fff59d',
                    '#cccccc',
                    '#e57373',
                    '#f06292',
                    '#ba68c8',
                    '#9575cd',
                    '#64b5f6',
                    '#4fc3f7',
                    '#4dd0e1',
                    '#4db6ac',
                    '#fff176',
                    '#b3b3b3',
                    '#ef5350',
                    '#ec407a',
                    '#ab47bc',
                    '#7e57c2',
                    '#42a5f5',
                    '#29b6f6',
                    '#26c6da',
                    '#26a69a',
                    '#ffee58',
                    '#999999',
                    '#e53935',
                    '#d81b60',
                    '#8e24aa',
                    '#5e35b1',
                    '#1e88e5',
                    '#039be5',
                    '#00acc1',
                    '#00897b',
                    '#fdd835',
                    '#808080',
                    '#d32f2f',
                    '#c2185b',
                    '#7b1fa2',
                    '#512da8',
                    '#1976d2',
                    '#0288d1',
                    '#0097a7',
                    '#00796b',
                    '#fbc02d',
                    '#666666',
                    '#c62828',
                    '#ad1457',
                    '#6a1b9a',
                    '#4527a0',
                    '#1565c0',
                    '#0277bd',
                    '#00838f',
                    '#00695c',
                    '#f9a825',
                    '#4d4d4d',
                    '#b71c1c',
                    '#880e4f',
                    '#4a148c',
                    '#311b92',
                    '#0d47a1',
                    '#01579b',
                    '#006064',
                    '#004d40',
                    '#f57f17'
                ]
            };
            var ia = (function(e) {
                tI(t, e);
                function t(t, i) {
                    return e.call(this, t, i) || this;
                }
                t.prototype.preRender = function() {
                    var e = this.element;
                    this.formElement = (0, n.oq)(this.element, 'form');
                    if (this.formElement) {
                        n.bi.add(this.formElement, 'reset', this.formResetHandler, this);
                    }
                    var t = {
                        Apply: 'Apply',
                        Cancel: 'Cancel',
                        ModeSwitcher: 'Switch Mode'
                    };
                    this.l10n = new n.E7('colorpicker', t, this.locale);
                    if (e.getAttribute('ejs-for') && !e.getAttribute('name')) {
                        e.setAttribute('name', e.id);
                    }
                };
                t.prototype.render = function() {
                    this.initWrapper();
                    if (this.inline) {
                        this.createWidget();
                    } else {
                        this.createSplitBtn();
                    }
                    if (!this.enableOpacity) {
                        (0, n.cn)([
                            this.container.parentElement
                        ], tG);
                    }
                    this.renderComplete();
                };
                t.prototype.initWrapper = function() {
                    var e = this.createElement('div', {
                        className: 'e-' + this.getModuleName() + '-wrapper'
                    });
                    this.element.parentNode.insertBefore(e, this.element);
                    e.appendChild(this.element);
                    (0, n.Y4)(this.element, {
                        'tabindex': '-1',
                        'spellcheck': 'false'
                    });
                    this.container = this.createElement('div', {
                        className: tq
                    });
                    this.getWrapper().appendChild(this.container);
                    var t = this.value ? this.roundValue(this.value).toLowerCase() : '#008000ff';
                    if (this.noColor && this.mode === 'Palette' && this.value === '') {
                        t = '';
                    }
                    var i = t.slice(0, 7);
                    if ((0, n.le)(this.initialInputValue)) {
                        this.initialInputValue = i;
                    }
                    this.element.value = i;
                    if (this.enableOpacity) {
                        this.setProperties({
                            'value': t
                        }, true);
                    } else {
                        this.setProperties({
                            'value': i
                        }, true);
                    }
                    if (this.enableRtl) {
                        e.classList.add(ie);
                    }
                    if (this.cssClass) {
                        (0, n.cn)([
                            e
                        ], this.cssClass.split(' '));
                    }
                    this.tileRipple = (0, n.qx)(this.container, {
                        selector: '.' + is
                    });
                    this.ctrlBtnRipple = (0, n.qx)(this.container, {
                        selector: '.e-btn'
                    });
                };
                t.prototype.getWrapper = function() {
                    return this.element.parentElement;
                };
                t.prototype.createWidget = function() {
                    if (this.mode === 'Palette') {
                        this.createPalette();
                        if (!this.inline) {
                            this.firstPaletteFocus();
                        }
                    } else {
                        this.createPicker();
                        if (!this.inline) {
                            this.getDragHandler().focus();
                        }
                    }
                    this.isRgb = true;
                    this.createInput();
                    this.createCtrlBtn();
                    if (!this.disabled) {
                        this.wireEvents();
                    }
                    if (this.inline && this.disabled) {
                        this.toggleDisabled(true);
                    }
                    if (n.AR.isDevice) {
                        this.refreshPopupPos();
                    }
                };
                t.prototype.createSplitBtn = function() {
                    var e = this;
                    var t = this.createElement('button', {
                        className: 'e-split-colorpicker'
                    });
                    this.getWrapper().appendChild(t);
                    this.splitBtn = new e1({
                        iconCss: 'e-selected-color',
                        target: this.container,
                        disabled: this.disabled,
                        enableRtl: this.enableRtl,
                        createPopupOnClick: this.createPopupOnClick,
                        open: this.onOpen.bind(this),
                        click: function() {
                            e.trigger('change', {
                                currentValue: {
                                    hex: e.value.slice(0, 7),
                                    rgba: e.convertToRgbString(e.hexToRgb(e.value))
                                },
                                previousValue: {
                                    hex: null,
                                    rgba: null
                                },
                                value: e.value
                            });
                        }
                    });
                    this.splitBtn.createElement = this.createElement;
                    this.splitBtn.appendTo(t);
                    var i = this.createElement('span', {
                        className: ir
                    });
                    (0, n.Ys)('.e-selected-color', t).appendChild(i);
                    i.style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
                    var r = this.getPopupEle();
                    (0, n.cn)([
                        r
                    ], 'e-colorpicker-popup');
                    if (this.cssClass) {
                        (0, n.cn)([
                            r
                        ], this.cssClass.split(' '));
                    }
                    if (n.AR.isDevice) {
                        var s = this.getPopupInst();
                        s.relateTo = document.body;
                        s.position = {
                            X: 'center',
                            Y: 'center'
                        };
                        s.targetType = 'container';
                        s.collision = {
                            X: 'fit',
                            Y: 'fit'
                        };
                        s.offsetY = 4;
                        r.style.zIndex = (0, h.TE)(this.splitBtn.element).toString();
                    }
                    this.bindCallBackEvent();
                };
                t.prototype.onOpen = function() {
                    this.trigger('open', {
                        element: this.container
                    });
                };
                t.prototype.getPopupInst = function() {
                    return (0, n.s8)(this.getPopupEle(), h.GI);
                };
                t.prototype.bindCallBackEvent = function() {
                    var e = this;
                    this.splitBtn.beforeOpen = function(t) {
                        var i = new e3();
                        e.trigger('beforeOpen', t, function(r) {
                            if (!r.cancel) {
                                var s = e.getPopupEle();
                                s.style.top = (0, n.Ac)(0 + pageYOffset);
                                s.style.left = (0, n.Ac)(0 + pageXOffset);
                                s.style.display = 'block';
                                e.createWidget();
                                s.style.display = '';
                                if (n.AR.isDevice) {
                                    e.modal = e.createElement('div');
                                    e.modal.className = 'e-' + e.getModuleName() + ' e-modal';
                                    e.modal.style.display = 'none';
                                    document.body.insertBefore(e.modal, s);
                                    document.body.className += ' e-colorpicker-overflow';
                                    e.modal.style.display = 'block';
                                    e.modal.style.zIndex = (Number(s.style.zIndex) - 1).toString();
                                }
                            }
                            t.cancel = r.cancel;
                            i.resolve(r);
                        });
                        return i;
                    };
                    this.splitBtn.beforeClose = function(t) {
                        var i = new e3();
                        if (!(0, n.le)(t.event)) {
                            var r = {
                                element: e.container,
                                event: t.event,
                                cancel: false
                            };
                            e.trigger('beforeClose', r, function(r) {
                                if (n.AR.isDevice && t.event.target === e.modal) {
                                    r.cancel = true;
                                }
                                if (!r.cancel) {
                                    e.onPopupClose();
                                }
                                t.cancel = r.cancel;
                                i.resolve(r);
                            });
                        } else {
                            i.resolve(t);
                        }
                        return i;
                    };
                };
                t.prototype.onPopupClose = function() {
                    this.unWireEvents();
                    this.destroyOtherComp();
                    this.container.style.width = '';
                    (0, n.Ys)('.' + ir, this.splitBtn.element).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
                    this.container.innerHTML = '';
                    (0, n.IV)([
                        this.container
                    ], [
                        t9,
                        t7
                    ]);
                    if (n.AR.isDevice && this.modal) {
                        (0, n.IV)([
                            document.body
                        ], 'e-colorpicker-overflow');
                        this.modal.style.display = 'none';
                        this.modal.outerHTML = '';
                        this.modal = null;
                    }
                };
                t.prototype.createPalette = function() {
                    (0, n.s1)(this.container, [
                        t7
                    ], [
                        t9
                    ]);
                    if (this.presetColors) {
                        var e = this.createElement('div', {
                            className: 'e-custom-palette'
                        });
                        this.appendElement(e);
                        var t = Object.keys(this.presetColors);
                        if (t.length === 1) {
                            this.appendPalette(this.presetColors[t[0]], t[0], e);
                        } else {
                            for(var i = 0, r = t.length; i < r; i++){
                                this.appendPalette(this.presetColors[t[i]], t[i], e);
                            }
                        }
                        if ((0, n.td)('.e-row', e).length > 10) {
                            (0, n.cn)([
                                e
                            ], 'e-palette-group');
                        }
                    } else {
                        this.appendPalette(io.default, 'default');
                    }
                    if (this.mode === 'Palette' && !this.modeSwitcher && this.noColor) {
                        this.setNoColor();
                    }
                    var s = parseInt(getComputedStyle(this.container).borderBottomWidth, 10);
                    this.container.style.width = (0, n.Ac)(this.container.children[0].offsetWidth + s + s);
                    this.rgb = this.hexToRgb(this.roundValue(this.value));
                    this.hsv = this.rgbToHsv.apply(this, this.rgb);
                };
                t.prototype.firstPaletteFocus = function() {
                    if (!(0, n.Ys)('.' + ii, this.container.children[0])) {
                        (0, n.td)('.' + t5, this.container)[0].focus();
                    }
                };
                t.prototype.appendPalette = function(e, t, i) {
                    var n = this.createElement('div', {
                        className: t5,
                        attrs: {
                            'tabindex': '0'
                        }
                    });
                    if (i) {
                        i.appendChild(n);
                    } else {
                        this.appendElement(n);
                    }
                    var r;
                    var s;
                    var o;
                    for(var a = 0, l = e.length; a < l; a++){
                        if (a === 0 || a % this.columns === 0) {
                            r = this.createElement('div', {
                                className: 'e-row',
                                attrs: {
                                    'role': 'presentation'
                                }
                            });
                            n.appendChild(r);
                        }
                        o = this.roundValue(e[a]).toLowerCase();
                        s = this.createElement('span', {
                            className: is,
                            attrs: {
                                'role': 'gridcell',
                                'aria-label': o,
                                'aria-selected': 'false',
                                'tabindex': '0'
                            }
                        });
                        this.trigger('beforeTileRender', {
                            element: s,
                            presetName: t,
                            value: e[a]
                        });
                        r.appendChild(s);
                        if (this.value === o) {
                            this.addTileSelection(s);
                            n.focus();
                        }
                        s.style.backgroundColor = this.convertToRgbString(this.hexToRgb(o));
                    }
                };
                t.prototype.setNoColor = function() {
                    var e = this.container.querySelector('.e-row').children[0];
                    e.classList.add(t2);
                    if (!this.value) {
                        e.classList.add(ii);
                        (0, n.oq)(e, '.' + t5).focus();
                    }
                    [
                        'aria-selected',
                        'aria-label'
                    ].forEach(function(t) {
                        e.removeAttribute(t);
                    });
                    e.style.backgroundColor = '';
                };
                t.prototype.appendElement = function(e, t) {
                    if (t === void 0) {
                        t = 0;
                    }
                    var i = this.container.children[t];
                    if (i) {
                        this.container.insertBefore(e, i);
                    } else {
                        this.container.appendChild(e);
                    }
                };
                t.prototype.addTileSelection = function(e) {
                    e.classList.add(ii);
                    e.setAttribute('aria-selected', 'true');
                };
                t.prototype.createPicker = function() {
                    (0, n.s1)(this.container, [
                        t9
                    ], [
                        t7
                    ]);
                    var e = this.createElement('div', {
                        className: t0
                    });
                    this.appendElement(e);
                    e.appendChild(this.createElement('div', {
                        className: tQ
                    }));
                    var t = this.createElement('span', {
                        className: tZ,
                        attrs: {
                            'tabindex': '0'
                        }
                    });
                    e.appendChild(t);
                    if (this.value === null) {
                        this.value = '#008000ff';
                    }
                    this.rgb = this.hexToRgb(this.value);
                    this.hsv = this.rgbToHsv.apply(this, this.rgb);
                    this.setHsvContainerBg();
                    this.setHandlerPosition();
                    this.createSlider();
                    this.createDragTooltip();
                };
                t.prototype.setHsvContainerBg = function(e) {
                    if (e === void 0) {
                        e = this.hsv[0];
                    }
                    this.getHsvContainer().style.backgroundColor = this.convertToRgbString(this.hsvToRgb(e, 100, 100, 1));
                };
                t.prototype.getHsvContainer = function() {
                    return (0, n.Ys)('.' + t0, this.container);
                };
                t.prototype.setHandlerPosition = function() {
                    var e = this.getDragHandler();
                    var t = (0, n.Ys)('.' + tQ, this.container);
                    if (this.enableRtl) {
                        e.style.left = (0, n.Ac)(t.offsetWidth * Math.abs(100 - this.hsv[1]) / 100);
                    } else {
                        e.style.left = (0, n.Ac)(t.offsetWidth * this.hsv[1] / 100);
                    }
                    e.style.top = (0, n.Ac)(t.offsetHeight * (100 - this.hsv[2]) / 100);
                };
                t.prototype.createSlider = function() {
                    var e = this.createElement('div', {
                        className: 'e-slider-preview'
                    });
                    this.appendElement(e, 1);
                    this.createPreview(e);
                    var t = this.createElement('div', {
                        className: 'e-colorpicker-slider'
                    });
                    e.insertBefore(t, e.children[0]);
                    var i = this.createElement('div', {
                        className: 'e-hue-slider'
                    });
                    t.appendChild(i);
                    this.hueSlider = new tB({
                        value: this.hsv[0],
                        min: 0,
                        max: 359,
                        enableRtl: this.enableRtl,
                        enabled: !this.disabled,
                        change: this.hueChange.bind(this)
                    });
                    this.hueSlider.createElement = this.createElement;
                    this.hueSlider.appendTo(i);
                    if (this.enableOpacity) {
                        i = this.createElement('div', {
                            className: 'e-opacity-slider'
                        });
                        t.appendChild(i);
                        this.createOpacitySlider(i);
                    }
                };
                t.prototype.createOpacitySlider = function(e) {
                    this.opacitySlider = new tB({
                        value: this.rgb[3] * 100,
                        min: 0,
                        max: 100,
                        enableRtl: this.enableRtl,
                        enabled: !this.disabled,
                        change: this.opacityChange.bind(this)
                    });
                    this.opacitySlider.createElement = this.createElement;
                    this.opacitySlider.appendTo(e);
                    var t = this.createElement('div', {
                        className: 'e-opacity-empty-track'
                    });
                    e.appendChild(t);
                    this.updateOpacitySliderBg();
                };
                t.prototype.updateOpacitySliderBg = function() {
                    var e = this.enableRtl ? 'to left' : 'to right';
                    var t = (0, n.Ys)('.e-opacity-empty-track', this.opacitySlider.element);
                    if (t) {
                        t.style.background = 'linear-gradient(' + e + ', rgba(' + this.rgb.slice(0, 3) + ', 0) 0%, ' + this.convertToRgbString(this.rgb.slice(0, 3)) + ' 100%)';
                    }
                };
                t.prototype.hueChange = function(e) {
                    this.hsv[0] = e.value;
                    this.setHsvContainerBg();
                    this.convertToOtherFormat();
                };
                t.prototype.opacityChange = function(e) {
                    var t = e.value;
                    var i = this.rgbToHex(this.rgb);
                    this.hsv[3] = t / 100;
                    this.rgb[3] = t / 100;
                    var n = this.rgbToHex(this.rgb);
                    this.updateOpacityInput(t);
                    var r = this.convertToRgbString(this.rgb);
                    this.updatePreview(r);
                    this.triggerEvent(n, i, r);
                };
                t.prototype.updateOpacityInput = function(e) {
                    if (this.enableOpacity && !this.getWrapper().classList.contains(tJ)) {
                        var t = (0, n.s8)((0, n.Ys)('.' + t4, this.container), tk.N);
                        t.value = e;
                        t.dataBind();
                    }
                };
                t.prototype.createPreview = function(e) {
                    var t = this.createElement('div', {
                        className: t6
                    });
                    e.appendChild(t);
                    var i = this.createElement('span', {
                        className: 'e-preview ' + tz
                    });
                    t.appendChild(i);
                    var n = this.convertToRgbString(this.rgb);
                    i.style.backgroundColor = n;
                    i = this.createElement('span', {
                        className: 'e-preview ' + t8
                    });
                    t.appendChild(i);
                    i.style.backgroundColor = n;
                };
                t.prototype.isPicker = function() {
                    return !this.container.classList.contains(t7);
                };
                t.prototype.getPopupEle = function() {
                    return this.container.parentElement;
                };
                t.prototype.createNumericInput = function(e, t, i, n) {
                    var r = this;
                    var s = new tk.N({
                        value: t,
                        placeholder: i,
                        min: 0,
                        max: n,
                        format: '###.##',
                        showSpinButton: false,
                        floatLabelType: 'Always',
                        enableRtl: this.enableRtl,
                        enabled: !this.disabled,
                        readonly: this.isPicker() ? false : true,
                        change: function(e) {
                            if (e.event) {
                                r.inputHandler(e.event);
                            }
                        }
                    });
                    s.createElement = this.createElement;
                    s.appendTo(e);
                };
                t.prototype.createInput = function() {
                    var e = this.isPicker();
                    var t = this.getWrapper();
                    if ((e && !t.classList.contains(tJ)) || (!e && t.classList.contains(it))) {
                        var i = this.createElement('div', {
                            className: t1
                        });
                        if (e) {
                            this.appendElement(i, 2);
                        } else {
                            this.appendElement(i, 1);
                        }
                        var n = this.createElement('div', {
                            className: 'e-input-container'
                        });
                        i.appendChild(n);
                        if (!t.classList.contains(t$)) {
                            this.appendValueSwitchBtn(i);
                        }
                        if (!t.classList.contains(tX)) {
                            var r = this.createElement('input', {
                                className: tY,
                                attrs: {
                                    'maxlength': '7',
                                    'spellcheck': 'false'
                                }
                            });
                            n.appendChild(r);
                            tT.I.createInput({
                                element: r,
                                floatLabelType: 'Always',
                                properties: {
                                    placeholder: 'HEX',
                                    enableRtl: this.enableRtl,
                                    enabled: !this.disabled,
                                    readonly: this.isPicker() ? false : true
                                }
                            }, this.createElement);
                            tT.I.setValue(this.value.slice(0, 7), r);
                            r.addEventListener('input', this.inputHandler.bind(this));
                        }
                        if (!t.classList.contains(tK)) {
                            var s = void 0;
                            var o = void 0;
                            if (this.isRgb) {
                                s = 'RGB';
                                o = this.rgb;
                            } else {
                                s = 'HSV';
                                o = this.hsv;
                            }
                            var a = [
                                'rh',
                                'gs',
                                'bv'
                            ];
                            for(var l = 0; l < 3; l++){
                                this.createNumericInput(n.appendChild(this.createElement('input', {
                                    className: 'e-' + a[l] + '-value'
                                })), o[l], s[l], 255);
                            }
                            if (this.enableOpacity) {
                                this.appendOpacityValue(n);
                            }
                        }
                    }
                };
                t.prototype.appendOpacityValue = function(e) {
                    this.createNumericInput(e.appendChild(this.createElement('input', {
                        className: t4
                    })), this.rgb[3] * 100, 'A', 100);
                };
                t.prototype.appendValueSwitchBtn = function(e) {
                    var t = this.createElement('button', {
                        className: 'e-icons e-css e-btn e-flat e-icon-btn ' + tW
                    });
                    e.appendChild(t);
                    if (this.isPicker() && !this.getWrapper().classList.contains(tK)) {
                        t.addEventListener('click', this.formatSwitchHandler.bind(this));
                    }
                };
                t.prototype.createCtrlBtn = function() {
                    if (this.modeSwitcher || this.showButtons) {
                        this.l10n.setLocale(this.locale);
                        var e = this.createElement('div', {
                            className: t_
                        });
                        this.container.appendChild(e);
                        if (this.showButtons) {
                            var t = this.createElement('div', {
                                className: tV
                            });
                            e.appendChild(t);
                            var i = this.l10n.getConstant('Apply');
                            t.appendChild(this.createElement('button', {
                                innerHTML: i,
                                className: 'e-btn e-css e-flat e-primary e-small ' + tF,
                                attrs: {
                                    'title': i
                                }
                            }));
                            var n = this.l10n.getConstant('Cancel');
                            t.appendChild(this.createElement('button', {
                                innerHTML: n,
                                className: 'e-btn e-css e-flat e-small ' + tj,
                                attrs: {
                                    'title': n
                                }
                            }));
                        }
                        if (this.modeSwitcher) {
                            this.appendModeSwitchBtn();
                        }
                    }
                };
                t.prototype.appendModeSwitchBtn = function() {
                    var e = this.createElement('button', {
                        className: 'e-icons e-btn e-flat e-icon-btn ' + t3,
                        attrs: {
                            title: this.l10n.getConstant('ModeSwitcher')
                        }
                    });
                    (0, n.Ys)('.' + t_, this.container).insertBefore(e, (0, n.Ys)('.' + tV, this.container));
                };
                t.prototype.createDragTooltip = function() {
                    var e = this;
                    var t = new tw({
                        opensOn: 'Custom',
                        showTipPointer: false,
                        cssClass: 'e-color-picker-tooltip',
                        beforeOpen: function(t) {
                            e.tooltipEle = t.element;
                        },
                        animation: {
                            open: {
                                effect: 'None'
                            },
                            close: {
                                effect: 'None'
                            }
                        }
                    });
                    t.createElement = this.createElement;
                    t.appendTo(this.container);
                    t.open(this.container);
                    this.tooltipEle.style.zIndex = (0, h.TE)(this.tooltipEle).toString();
                    (0, n.Ys)('.e-tip-content', this.tooltipEle).appendChild(this.createElement('div', {
                        className: 'e-tip-transparent'
                    }));
                };
                t.prototype.getTooltipInst = function() {
                    return (0, n.s8)(this.container, tw);
                };
                t.prototype.setTooltipOffset = function(e) {
                    this.getTooltipInst().offsetY = e;
                };
                t.prototype.toggleDisabled = function(e) {
                    if (e) {
                        this.getWrapper().classList.add(tU);
                    } else {
                        this.getWrapper().classList.remove(tU);
                    }
                    if (this.showButtons) {
                        ([].slice.call((0, n.td)('.e-btn', this.container))).forEach(function(t) {
                            if (e) {
                                (0, n.Y4)(t, {
                                    'disabled': ''
                                });
                            } else {
                                t.removeAttribute('disabled');
                            }
                        });
                    }
                };
                t.prototype.convertToRgbString = function(e) {
                    return e.length ? e.length === 4 ? 'rgba(' + e.join() + ')' : 'rgb(' + e.join() + ')' : '';
                };
                t.prototype.convertToHsvString = function(e) {
                    return e.length === 4 ? 'hsva(' + e.join() + ')' : 'hsv(' + e.join() + ')';
                };
                t.prototype.updateHsv = function() {
                    this.hsv[1] = this.hsv[1] > 100 ? 100 : this.hsv[1];
                    this.hsv[2] = this.hsv[2] > 100 ? 100 : this.hsv[2];
                    this.setHandlerPosition();
                };
                t.prototype.convertToOtherFormat = function(e) {
                    if (e === void 0) {
                        e = false;
                    }
                    var t = this.rgbToHex(this.rgb);
                    this.rgb = this.hsvToRgb.apply(this, this.hsv);
                    var i = this.rgbToHex(this.rgb);
                    var n = this.convertToRgbString(this.rgb);
                    this.updatePreview(n);
                    this.updateInput(i);
                    this.triggerEvent(i, t, n, e);
                };
                t.prototype.updateInput = function(e) {
                    var t = this.getWrapper();
                    if (!t.classList.contains(tJ)) {
                        if (!t.classList.contains(tX)) {
                            tT.I.setValue(e.substr(0, 7), (0, n.Ys)('.' + tY, this.container));
                        }
                        if (!t.classList.contains(tK)) {
                            if (this.isRgb) {
                                this.updateValue(this.rgb, false);
                            } else {
                                this.updateValue(this.hsv, false);
                            }
                        }
                    }
                };
                t.prototype.updatePreview = function(e) {
                    if (this.enableOpacity) {
                        this.updateOpacitySliderBg();
                    }
                    (0, n.Ys)('.e-tip-transparent', this.tooltipEle).style.backgroundColor = e;
                    (0, n.Ys)('.' + t6 + ' .' + tz, this.container).style.backgroundColor = e;
                    (0, n.Ys)('.' + t6 + ' .' + t8, this.container).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
                };
                t.prototype.getDragHandler = function() {
                    return (0, n.Ys)('.' + tZ, this.container);
                };
                t.prototype.removeTileSelection = function() {
                    var e = [].slice.call((0, n.td)('.' + ii, this.container.children[0]));
                    e.forEach(function(e) {
                        e.classList.remove(ii);
                        e.setAttribute('aria-selected', 'false');
                    });
                };
                t.prototype.convertRgbToNumberArray = function(e) {
                    return (e.slice(e.indexOf('(') + 1, e.indexOf(')'))).split(',').map(function(e, t) {
                        return (t !== 3) ? parseInt(e, 10) : parseFloat(e);
                    });
                };
                t.prototype.getValue = function(e, t) {
                    if (!e) {
                        e = this.value;
                    }
                    t = !t ? 'hex' : t.toLowerCase();
                    if (e[0] === 'r') {
                        var i = this.convertRgbToNumberArray(e);
                        if (t === 'hex' || t === 'hexa') {
                            var n = this.rgbToHex(i);
                            return t === 'hex' ? n.slice(0, 7) : n;
                        } else {
                            if (t === 'hsv') {
                                return this.convertToHsvString(this.rgbToHsv.apply(this, i.slice(0, 3)));
                            } else {
                                if (t === 'hsva') {
                                    return this.convertToHsvString(this.rgbToHsv.apply(this, i));
                                } else {
                                    return 'null';
                                }
                            }
                        }
                    } else {
                        if (e[0] === 'h') {
                            var i = this.hsvToRgb.apply(this, this.convertRgbToNumberArray(e));
                            if (t === 'rgba') {
                                return this.convertToRgbString(i);
                            } else {
                                if (t === 'hex' || t === 'hexa') {
                                    var n = this.rgbToHex(i);
                                    return t === 'hex' ? n.slice(0, 7) : n;
                                } else {
                                    if (t === 'rgb') {
                                        return this.convertToRgbString(i.slice(0, 3));
                                    } else {
                                        return 'null';
                                    }
                                }
                            }
                        } else {
                            e = this.roundValue(e);
                            var r = this.hexToRgb(e);
                            if (t === 'rgb' || t === 'hsv') {
                                r = r.slice(0, 3);
                            }
                            if (t === 'rgba' || t === 'rgb') {
                                return this.convertToRgbString(r);
                            } else {
                                if (t === 'hsva' || t === 'hsv') {
                                    return this.convertToHsvString(this.rgbToHsv.apply(this, r));
                                } else {
                                    if (t === 'hex') {
                                        return e.slice(0, 7);
                                    } else {
                                        if (t === 'a') {
                                            return r[3].toString();
                                        } else {
                                            return 'null';
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                t.prototype.toggle = function() {
                    if (this.container.parentElement.classList.contains('e-popup-close')) {
                        this.splitBtn.toggle();
                    } else {
                        this.closePopup(null);
                    }
                };
                t.prototype.getModuleName = function() {
                    return 'colorpicker';
                };
                t.prototype.getPersistData = function() {
                    return this.addOnPersist([
                        'value'
                    ]);
                };
                t.prototype.wireEvents = function() {
                    if (this.isPicker()) {
                        var e = this.getDragHandler();
                        n.bi.add(e, 'keydown', this.pickerKeyDown, this);
                        n.bi.add(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown, this);
                        if (this.modeSwitcher || this.showButtons) {
                            this.addCtrlSwitchEvent();
                        }
                        n.bi.add((0, n.Ys)('.' + t8, this.container), 'click', this.previewHandler, this);
                    } else {
                        n.bi.add(this.container, 'click', this.paletteClickHandler, this);
                        n.bi.add(this.container, 'keydown', this.paletteKeyDown, this);
                    }
                };
                t.prototype.formResetHandler = function() {
                    this.value = this.initialInputValue;
                    (0, n.Y4)(this.element, {
                        'value': this.initialInputValue
                    });
                };
                t.prototype.addCtrlSwitchEvent = function() {
                    var e = (0, n.Ys)('.' + t_, this.container);
                    if (e) {
                        n.bi.add(e, 'click', this.btnClickHandler, this);
                    }
                };
                t.prototype.pickerKeyDown = function(e) {
                    switch(e.keyCode){
                        case 39:
                            this.handlerDragPosition(1, this.enableRtl ? -1 : 1, e);
                            break;
                        case 37:
                            this.handlerDragPosition(1, this.enableRtl ? 1 : -1, e);
                            break;
                        case 38:
                            this.handlerDragPosition(2, 1, e);
                            break;
                        case 40:
                            this.handlerDragPosition(2, -1, e);
                            break;
                        case 13:
                            {
                                e.preventDefault();
                                var t = this.rgbToHex(this.rgb);
                                this.enterKeyHandler(t, e);
                            }
                    }
                };
                t.prototype.enterKeyHandler = function(e, t) {
                    this.triggerChangeEvent(e);
                    if (!this.inline) {
                        this.closePopup(t);
                        this.splitBtn.element.focus();
                    }
                };
                t.prototype.closePopup = function(e) {
                    var t = this;
                    var i = {
                        element: this.container,
                        event: e,
                        cancel: false
                    };
                    this.trigger('beforeClose', i, function(e) {
                        if (!e.cancel) {
                            t.splitBtn.toggle();
                            t.onPopupClose();
                        }
                    });
                };
                t.prototype.triggerChangeEvent = function(e) {
                    var t = e.slice(0, 7);
                    this.trigger('change', {
                        currentValue: {
                            hex: t,
                            rgba: this.convertToRgbString(this.rgb)
                        },
                        previousValue: {
                            hex: this.value.slice(0, 7),
                            rgba: this.convertToRgbString(this.hexToRgb(this.value))
                        },
                        value: this.enableOpacity ? e : t
                    });
                    if (this.enableOpacity) {
                        this.setProperties({
                            'value': e
                        }, true);
                    } else {
                        this.setProperties({
                            'value': t
                        }, true);
                    }
                    this.element.value = t ? t : '#000000';
                };
                t.prototype.handlerDragPosition = function(e, t, i) {
                    i.preventDefault();
                    this.hsv[e] += t * (i.ctrlKey ? 1 : 3);
                    if (this.hsv[e] < 0) {
                        this.hsv[e] = 0;
                    }
                    this.updateHsv();
                    this.convertToOtherFormat(true);
                };
                t.prototype.handlerDown = function(e) {
                    e.preventDefault();
                    if (e.type === 'mousedown') {
                        this.clientX = Math.abs(e.pageX - pageXOffset);
                        this.clientY = Math.abs(e.pageY - pageYOffset);
                        this.setTooltipOffset(8);
                    } else {
                        this.clientX = Math.abs(e.changedTouches[0].pageX - pageXOffset);
                        this.clientY = Math.abs(e.changedTouches[0].pageY - pageYOffset);
                        this.setTooltipOffset(-8);
                    }
                    this.setHsv(this.clientX, this.clientY);
                    this.getDragHandler().style.transition = 'left .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1)';
                    this.updateHsv();
                    this.convertToOtherFormat();
                    this.getDragHandler().focus();
                    n.bi.add(document, 'mousemove touchmove', this.handlerMove, this);
                    n.bi.add(document, 'mouseup touchend', this.handlerEnd, this);
                };
                t.prototype.handlerMove = function(e) {
                    if (e.type !== 'touchmove') {
                        e.preventDefault();
                    }
                    var t;
                    var i;
                    if (e.type === 'mousemove') {
                        t = Math.abs(e.pageX - pageXOffset);
                        i = Math.abs(e.pageY - pageYOffset);
                    } else {
                        t = Math.abs(e.changedTouches[0].pageX - pageXOffset);
                        i = Math.abs(e.changedTouches[0].pageY - pageYOffset);
                    }
                    this.setHsv(t, i);
                    var r = this.getDragHandler();
                    this.updateHsv();
                    this.convertToOtherFormat();
                    this.getTooltipInst().refresh(r);
                    if (!this.tooltipEle.style.transform) {
                        if (Math.abs(this.clientX - t) > 8 || Math.abs(this.clientY - i) > 8) {
                            (0, n.Ys)('.' + tQ, this.container).style.cursor = 'pointer';
                            r.style.transition = 'none';
                            if (!this.inline) {
                                this.tooltipEle.style.zIndex = (parseInt(this.getPopupEle().style.zIndex, 10) + 1).toString();
                            }
                            this.tooltipEle.style.transform = 'rotate(45deg)';
                            r.classList.add('e-hide-handler');
                        }
                    }
                };
                t.prototype.setHsv = function(e, t) {
                    var i = (0, n.Ys)('.' + tQ, this.container);
                    var r = i.getBoundingClientRect();
                    if (this.enableRtl) {
                        e = e > r.right ? 0 : Math.abs(e - r.right);
                    } else {
                        e = e > r.left ? Math.abs(e - r.left) : 0;
                    }
                    t = t > r.top ? Math.abs(t - r.top) : 0;
                    this.hsv[2] = Math.round(Number(100 * (i.offsetHeight - Math.max(0, Math.min(i.offsetHeight, (t - i.offsetTop)))) / i.offsetHeight) * 10) / 10;
                    this.hsv[1] = Math.round(Number(100 * (Math.max(0, Math.min(i.offsetWidth, (e - i.offsetLeft)))) / i.offsetWidth) * 10) / 10;
                };
                t.prototype.handlerEnd = function(e) {
                    if (e.type !== 'touchend') {
                        e.preventDefault();
                    }
                    n.bi.remove(document, 'mousemove touchmove', this.handlerMove);
                    n.bi.remove(document, 'mouseup touchend', this.handlerEnd);
                    var t = this.getDragHandler();
                    (0, n.Ys)('.' + tQ, this.container).style.cursor = '';
                    if (this.tooltipEle.style.transform) {
                        this.tooltipEle.style.transform = '';
                        t.classList.remove('e-hide-handler');
                    }
                    if (!this.inline && !this.showButtons) {
                        this.closePopup(e);
                    }
                };
                t.prototype.btnClickHandler = function(e) {
                    var t = e.target;
                    if ((0, n.oq)(t, '.' + t3)) {
                        e.stopPropagation();
                        this.switchToPalette();
                    } else {
                        if (t.classList.contains(tF) || t.classList.contains(tj)) {
                            this.ctrlBtnClick(t, e);
                        }
                    }
                };
                t.prototype.switchToPalette = function() {
                    this.trigger('beforeModeSwitch', {
                        element: this.container,
                        mode: 'Palette'
                    });
                    this.unWireEvents();
                    this.destroyOtherComp();
                    (0, n.og)((0, n.Ys)('.e-slider-preview', this.container));
                    if (!this.getWrapper().classList.contains(tJ)) {
                        (0, n.Od)((0, n.Ys)('.' + t1, this.container));
                    }
                    (0, n.og)(this.getHsvContainer());
                    this.createPalette();
                    this.firstPaletteFocus();
                    this.createInput();
                    this.refreshPopupPos();
                    this.wireEvents();
                    this.trigger('onModeSwitch', {
                        element: this.container,
                        mode: 'Palette'
                    });
                };
                t.prototype.refreshPopupPos = function() {
                    if (!this.inline) {
                        var e = this.getPopupEle();
                        e.style.left = (0, n.Ac)(0 + pageXOffset);
                        e.style.top = (0, n.Ac)(0 + pageYOffset);
                        this.getPopupInst().refreshPosition(this.splitBtn.element.parentElement);
                    }
                };
                t.prototype.formatSwitchHandler = function() {
                    if (this.isRgb) {
                        this.updateValue(this.hsv, true, 3, [
                            360,
                            100,
                            100
                        ]);
                        this.isRgb = false;
                    } else {
                        this.updateValue(this.rgb, true, 2);
                        this.isRgb = true;
                    }
                };
                t.prototype.updateValue = function(e, t, i, r) {
                    var s = [
                        'e-rh-value',
                        'e-gs-value',
                        'e-bv-value'
                    ];
                    var o;
                    for(var a = 0, l = s.length; a < l; a++){
                        o = (0, n.s8)((0, n.Ys)('.' + s[a], this.container), tk.N);
                        o.value = Math.round(e[a]);
                        if (t) {
                            o.placeholder = s[a].substr(i, 1).toUpperCase();
                            o.max = r ? r[a] : 255;
                        }
                        o.dataBind();
                    }
                };
                t.prototype.previewHandler = function(e) {
                    var t = e.target;
                    var i = this.rgbToHex(this.rgb);
                    this.rgb = this.convertRgbToNumberArray(t.style.backgroundColor);
                    if (!this.rgb[3]) {
                        this.rgb[3] = 1;
                    }
                    var r = this.rgbToHex(this.rgb);
                    var s = this.rgbToHsv.apply(this, this.rgb);
                    if (s[0] !== this.hsv[0]) {
                        this.hueSlider.setProperties({
                            'value': s[0]
                        }, true);
                        this.hueSlider.refresh();
                    }
                    this.setHsvContainerBg(s[0]);
                    if (this.enableOpacity && s[3] !== this.hsv[3]) {
                        this.opacitySlider.setProperties({
                            'value': s[3] * 100
                        }, true);
                        this.opacitySlider.refresh();
                        this.updateOpacitySliderBg();
                    }
                    this.hsv = s;
                    this.setHandlerPosition();
                    this.updateInput(r);
                    (0, n.Ys)('.' + t6 + ' .' + tz, this.container).style.backgroundColor = this.convertToRgbString(this.rgb);
                    this.triggerEvent(r, i, this.convertToRgbString(this.rgb));
                };
                t.prototype.paletteClickHandler = function(e) {
                    e.preventDefault();
                    var t = e.target;
                    if (t.classList.contains(is)) {
                        this.removeTileSelection();
                        this.addTileSelection(t);
                        if (t.classList.contains(t2)) {
                            this.noColorTile();
                        } else {
                            var i = t.getAttribute('aria-label');
                            var r = this.rgbToHex(this.rgb);
                            this.rgb = this.hexToRgb(this.roundValue(i));
                            this.hsv = this.rgbToHsv.apply(this, this.rgb);
                            if (this.getWrapper().classList.contains(it)) {
                                this.updateInput(i);
                            }
                            this.triggerEvent(i, r, this.convertToRgbString(this.rgb));
                        }
                        if (!this.inline && !this.showButtons) {
                            this.closePopup(e);
                        }
                    } else {
                        if ((0, n.oq)(t, '.' + t3)) {
                            this.switchToPicker();
                        } else {
                            if (t.classList.contains(tF) || t.classList.contains(tj)) {
                                this.ctrlBtnClick(t, e);
                            } else {
                                if (this.getWrapper().classList.contains(it) && (0, n.oq)(t, '.' + tW)) {
                                    this.formatSwitchHandler();
                                }
                            }
                        }
                    }
                };
                t.prototype.noColorTile = function(e) {
                    if (e === void 0) {
                        e = false;
                    }
                    var t = this.rgbToHex(this.rgb);
                    this.rgb = [];
                    this.hsv = [];
                    this.triggerEvent('', t, '', e);
                };
                t.prototype.switchToPicker = function() {
                    var e = this.getWrapper();
                    this.trigger('beforeModeSwitch', {
                        element: this.container,
                        mode: 'Picker'
                    });
                    this.unWireEvents();
                    ([].slice.call((0, n.td)('.' + t5, this.container))).forEach(function(e) {
                        (0, n.og)(e);
                    });
                    if (e.classList.contains(it)) {
                        (0, n.og)((0, n.Ys)('.' + t1, this.container));
                    }
                    this.container.style.width = '';
                    var t = (0, n.Ys)('.e-custom-palette', this.container);
                    if (this.presetColors) {
                        (0, n.Od)(t);
                    }
                    this.createPicker();
                    this.getDragHandler().focus();
                    this.createInput();
                    this.refreshPopupPos();
                    this.wireEvents();
                    this.trigger('onModeSwitch', {
                        element: this.container,
                        mode: 'Picker'
                    });
                };
                t.prototype.ctrlBtnClick = function(e, t) {
                    if (e.classList.contains(tF)) {
                        var i = this.rgbToHex(this.rgb);
                        this.triggerChangeEvent(i);
                    }
                    if (!this.inline) {
                        this.closePopup(t);
                        this.splitBtn.element.focus();
                    }
                };
                t.prototype.paletteKeyDown = function(e) {
                    var t = e.target;
                    if (!t.classList.contains(t5)) {
                        return;
                    }
                    var i;
                    var r;
                    var s = [].slice.call((0, n.td)('.' + is, t));
                    var o = (s.filter(function(e) {
                        return e.classList.contains('e-selected');
                    })).pop();
                    switch(!e.altKey && e.keyCode){
                        case 39:
                            e.preventDefault();
                            i = o ? s[this.tilePosition(s, o, this.enableRtl ? -1 : 1)] : s[this.enableRtl ? s.length - 1 : 0];
                            this.keySelectionChanges(i);
                            break;
                        case 37:
                            e.preventDefault();
                            i = o ? s[this.tilePosition(s, o, this.enableRtl ? 1 : -1)] : s[this.enableRtl ? 0 : s.length - 1];
                            this.keySelectionChanges(i);
                            break;
                        case 38:
                            e.preventDefault();
                            r = o ? this.tilePosition(s, o, -this.columns) : 0;
                            i = s[r] ? s[r] : s[r - this.columns];
                            this.keySelectionChanges(i);
                            break;
                        case 40:
                            e.preventDefault();
                            r = o ? this.tilePosition(s, o, this.columns) : s.length - 1;
                            if (s[r]) {
                                i = s[r];
                            } else {
                                r %= s.length;
                                r += s[s.length - 1].parentElement.childElementCount;
                                i = s[r];
                            }
                            this.keySelectionChanges(i);
                            break;
                        case 13:
                            e.preventDefault();
                            if (o) {
                                var a = o.getAttribute('aria-label');
                                this.enterKeyHandler(a ? a : '', e);
                            }
                    }
                };
                t.prototype.keySelectionChanges = function(e) {
                    this.removeTileSelection();
                    this.addTileSelection(e);
                    if (e.classList.contains(t2)) {
                        this.noColorTile(true);
                    } else {
                        var t = e.getAttribute('aria-label');
                        var i = this.rgbToHex(this.rgb);
                        this.rgb = this.hexToRgb(t);
                        this.hsv = this.rgbToHsv.apply(this, this.rgb);
                        if (this.getWrapper().classList.contains(it)) {
                            this.updateInput(t);
                        }
                        this.triggerEvent(t, i, this.convertToRgbString(this.rgb), true);
                    }
                };
                t.prototype.tilePosition = function(e, t, i) {
                    e = Array.prototype.slice.call(e);
                    var n = e.length;
                    var r = this.columns - e[n - 1].parentElement.childElementCount;
                    var s = e.indexOf(t);
                    s += i;
                    if (s < 0) {
                        s += n + r;
                    } else {
                        s %= n + r;
                    }
                    return s;
                };
                t.prototype.inputHandler = function(e) {
                    var t = e.target;
                    if (!t.value.length) {
                        return;
                    }
                    var i;
                    var r;
                    var s = (0, n.Ys)('.e-float-text', t.parentElement).textContent;
                    switch(s){
                        case 'HEX':
                            {
                                var o = '';
                                if ((t.value[0] === '#' && t.value.length !== 5) || (t.value[0] !== '#' && t.value.length !== 4)) {
                                    o = this.roundValue(t.value);
                                }
                                if (o.length === 9) {
                                    r = this.rgbToHex(this.rgb);
                                    this.rgb = this.hexToRgb(o + o.substr(-2));
                                    this.inputValueChange(this.rgbToHsv.apply(this, this.rgb), r, t.value);
                                } else {
                                    return;
                                }
                                break;
                            }
                        case 'R':
                            if (this.rgb[0] !== Number(t.value)) {
                                r = this.rgbToHex(this.rgb);
                                this.rgb[0] = Number(t.value);
                                i = this.rgbToHsv.apply(this, this.rgb);
                                this.inputValueChange(i, r);
                            }
                            break;
                        case 'G':
                            if (this.rgb[1] !== Number(t.value)) {
                                r = this.rgbToHex(this.rgb);
                                this.rgb[1] = Number(t.value);
                                i = this.rgbToHsv.apply(this, this.rgb);
                                this.inputValueChange(i, r);
                            }
                            break;
                        case 'B':
                            if (this.rgb[2] !== Number(t.value)) {
                                r = this.rgbToHex(this.rgb);
                                this.rgb[2] = Number(t.value);
                                i = this.rgbToHsv.apply(this, this.rgb);
                                this.inputValueChange(i, r);
                            }
                            break;
                        case 'H':
                            this.hueSlider.value = Number(t.value);
                            break;
                        case 'S':
                            if (this.hsv[1] !== Number(t.value)) {
                                this.hsv[1] = Number(t.value);
                                this.updateHsv();
                                this.convertToOtherFormat();
                            }
                            break;
                        case 'V':
                            if (this.hsv[2] !== Number(t.value)) {
                                this.hsv[2] = Number(t.value);
                                this.updateHsv();
                                this.convertToOtherFormat();
                            }
                            break;
                        case 'A':
                            this.opacitySlider.value = Number(t.value);
                            break;
                    }
                };
                t.prototype.inputValueChange = function(e, t, i) {
                    if (e[0] !== this.hsv[0]) {
                        this.hueSlider.setProperties({
                            'value': e[0]
                        }, true);
                        this.hueSlider.refresh();
                        this.setHsvContainerBg(e[0]);
                    }
                    this.hsv = e;
                    var n = this.rgbToHex(this.rgb);
                    this.setHandlerPosition();
                    this.updateInput(i ? i : n);
                    var r = this.convertToRgbString(this.rgb);
                    this.updatePreview(r);
                    this.triggerEvent(n, t, r);
                };
                t.prototype.triggerEvent = function(e, t, i, n) {
                    if (n === void 0) {
                        n = false;
                    }
                    var r = e.slice(0, 7);
                    if (!this.showButtons && !n) {
                        this.trigger('change', {
                            currentValue: {
                                hex: r,
                                rgba: i
                            },
                            previousValue: {
                                hex: this.value.slice(0, 7),
                                rgba: this.convertToRgbString(this.hexToRgb(this.value))
                            },
                            value: e
                        });
                        if (this.enableOpacity) {
                            this.setProperties({
                                'value': e
                            }, true);
                        } else {
                            this.setProperties({
                                'value': r
                            }, true);
                        }
                        this.element.value = r ? r : '#000000';
                    } else {
                        this.trigger('select', {
                            currentValue: {
                                hex: r,
                                rgba: i
                            },
                            previousValue: {
                                hex: t.slice(0, 7),
                                rgba: this.convertToRgbString(this.hexToRgb(t))
                            }
                        });
                    }
                };
                t.prototype.destroy = function() {
                    var t = this;
                    var i = this.getWrapper();
                    e.prototype.destroy.call(this);
                    [
                        'tabindex',
                        'spellcheck'
                    ].forEach(function(e) {
                        t.element.removeAttribute(e);
                    });
                    if (this.inline) {
                        this.unWireEvents();
                        this.destroyOtherComp();
                    } else {
                        if (this.isPopupOpen()) {
                            this.unWireEvents();
                            this.destroyOtherComp();
                        }
                        this.splitBtn.destroy();
                        this.splitBtn = null;
                    }
                    this.tileRipple();
                    this.tileRipple = null;
                    this.ctrlBtnRipple();
                    this.ctrlBtnRipple = null;
                    if (this.element.nextElementSibling) {
                        (0, n.og)(this.element.nextElementSibling);
                    }
                    if (i) {
                        i.parentElement.insertBefore(this.element, i);
                        (0, n.og)(i);
                    }
                    this.container = null;
                    if (this.formElement) {
                        n.bi.remove(this.formElement, 'reset', this.formResetHandler);
                    }
                };
                t.prototype.destroyOtherComp = function() {
                    if (this.isPicker()) {
                        this.hueSlider.destroy();
                        if (this.enableOpacity) {
                            this.opacitySlider.destroy();
                            this.opacitySlider = null;
                        }
                        this.hueSlider = null;
                        var e = this.getTooltipInst();
                        e.close();
                        e.destroy();
                        this.tooltipEle = null;
                    }
                };
                t.prototype.isPopupOpen = function() {
                    return this.getPopupEle().classList.contains('e-popup-open');
                };
                t.prototype.unWireEvents = function() {
                    if (this.isPicker()) {
                        var e = this.getDragHandler();
                        n.bi.remove(e, 'keydown', this.pickerKeyDown);
                        n.bi.remove(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown);
                        if (this.modeSwitcher || this.showButtons) {
                            n.bi.remove((0, n.Ys)('.' + t_, this.container), 'click', this.btnClickHandler);
                        }
                        n.bi.remove((0, n.Ys)('.' + t8, this.container), 'click', this.previewHandler);
                    } else {
                        n.bi.remove(this.container, 'click', this.paletteClickHandler);
                        n.bi.remove(this.container, 'keydown', this.paletteKeyDown);
                    }
                };
                t.prototype.roundValue = function(e) {
                    if (!e) {
                        return '';
                    }
                    if (e[0] !== '#') {
                        e = '#' + e;
                    }
                    var t = e.length;
                    if (t === 4) {
                        e += 'f';
                        t = 5;
                    }
                    if (t === 5) {
                        var i = '';
                        for(var n = 1, r = e.length; n < r; n++){
                            i += (e.charAt(n) + e.charAt(n));
                        }
                        e = '#' + i;
                        t = 9;
                    }
                    if (t === 7) {
                        e += 'ff';
                    }
                    return e;
                };
                t.prototype.hexToRgb = function(e) {
                    if (!e) {
                        return [];
                    }
                    e = e.trim();
                    if (e.length !== 9) {
                        e = this.roundValue(e);
                    }
                    var t = Number((parseInt(e.slice(-2), 16) / 255).toFixed(2));
                    e = e.slice(1, 7);
                    var i = parseInt(e, 16);
                    var n = [];
                    n.push((i >> 16) & 255);
                    n.push((i >> 8) & 255);
                    n.push(i & 255);
                    n.push(t);
                    return n;
                };
                t.prototype.rgbToHsv = function(e, t, i, r) {
                    if (this.rgb && !this.rgb.length) {
                        return [];
                    }
                    e /= 255;
                    t /= 255;
                    i /= 255;
                    var s = Math.max(e, t, i);
                    var o = Math.min(e, t, i);
                    var a;
                    var l = s;
                    var h = s - o;
                    var c = s === 0 ? 0 : h / s;
                    if (s === o) {
                        a = 0;
                    } else {
                        switch(s){
                            case e:
                                a = (t - i) / h + (t < i ? 6 : 0);
                                break;
                            case t:
                                a = (i - e) / h + 2;
                                break;
                            case i:
                                a = (e - t) / h + 4;
                                break;
                        }
                        a /= 6;
                    }
                    var d = [
                        Math.round(a * 360),
                        Math.round(c * 1000) / 10,
                        Math.round(l * 1000) / 10
                    ];
                    if (!(0, n.le)(r)) {
                        d.push(r);
                    }
                    return d;
                };
                t.prototype.hsvToRgb = function(e, t, i, r) {
                    var s;
                    var o;
                    var a;
                    t /= 100;
                    i /= 100;
                    if (t === 0) {
                        s = o = a = i;
                        return [
                            Math.round(s * 255),
                            Math.round(o * 255),
                            Math.round(a * 255),
                            r
                        ];
                    }
                    e /= 60;
                    var l = Math.floor(e);
                    var h = e - l;
                    var c = i * (1 - t);
                    var d = i * (1 - t * h);
                    var p = i * (1 - t * (1 - h));
                    switch(l){
                        case 0:
                            s = i;
                            o = p;
                            a = c;
                            break;
                        case 1:
                            s = d;
                            o = i;
                            a = c;
                            break;
                        case 2:
                            s = c;
                            o = i;
                            a = p;
                            break;
                        case 3:
                            s = c;
                            o = d;
                            a = i;
                            break;
                        case 4:
                            s = p;
                            o = c;
                            a = i;
                            break;
                        default:
                            s = i;
                            o = c;
                            a = d;
                    }
                    var u = [
                        Math.round(s * 255),
                        Math.round(o * 255),
                        Math.round(a * 255)
                    ];
                    if (!(0, n.le)(r)) {
                        u.push(r);
                    }
                    return u;
                };
                t.prototype.rgbToHex = function(e) {
                    return e.length ? ('#' + this.hex(e[0]) + this.hex(e[1]) + this.hex(e[2]) + (!(0, n.le)(e[3]) ? (e[3] !== 0 ? (Math.round(e[3] * 255) + 0x10000).toString(16).substr(-2) : '00') : '')) : '';
                };
                t.prototype.hex = function(e) {
                    return ('0' + e.toString(16)).slice(-2);
                };
                t.prototype.changeModeSwitcherProp = function(e) {
                    var t = (0, n.Ys)('.' + t_, this.container);
                    if (e) {
                        if (t) {
                            this.appendModeSwitchBtn();
                        } else {
                            this.createCtrlBtn();
                            if (this.isPicker() && !this.disabled) {
                                this.addCtrlSwitchEvent();
                            }
                        }
                    } else {
                        if (t) {
                            if (this.showButtons) {
                                (0, n.og)((0, n.Ys)('.' + t3, t));
                            } else {
                                (0, n.Od)(t);
                            }
                        }
                    }
                };
                t.prototype.changeShowBtnProps = function(e) {
                    var t = (0, n.Ys)('.' + t_, this.container);
                    if (e) {
                        if (t) {
                            (0, n.Od)(t);
                        }
                        this.createCtrlBtn();
                        if (this.isPicker() && !this.disabled) {
                            this.addCtrlSwitchEvent();
                        }
                    } else {
                        if (this.modeSwitcher) {
                            (0, n.og)((0, n.Ys)('.' + tV, t));
                        } else {
                            (0, n.Od)(t);
                        }
                    }
                };
                t.prototype.changeValueProp = function(e) {
                    if (this.isPicker()) {
                        this.rgb = this.hexToRgb(e);
                        this.hsv = this.rgbToHsv.apply(this, this.rgb);
                        this.setHandlerPosition();
                        (0, n.og)((0, n.oq)(this.hueSlider.element, '.e-slider-preview'));
                        this.createSlider();
                        this.setHsvContainerBg();
                        this.updateInput(e);
                        if (this.rgb.length === 4) {
                            this.updateOpacityInput(this.rgb[3] * 100);
                        }
                    } else {
                        this.removeTileSelection();
                        var t = this.container.querySelector('span[aria-label="' + this.roundValue(e) + '"]');
                        if (t) {
                            this.addTileSelection(t);
                        }
                    }
                };
                t.prototype.setInputEleProps = function() {
                    (0, n.Od)((0, n.Ys)('.' + t1, this.container));
                    this.createInput();
                };
                t.prototype.changeDisabledProp = function(e) {
                    if (this.isPicker()) {
                        this.hueSlider.enabled = !e;
                        this.opacitySlider.enabled = !e;
                        this.setInputEleProps();
                    }
                    if (e) {
                        this.toggleDisabled(true);
                        this.unWireEvents();
                    } else {
                        this.toggleDisabled(false);
                        this.wireEvents();
                    }
                };
                t.prototype.changeCssClassProps = function(e, t) {
                    var i = this.getWrapper();
                    var r = this.getPopupEle();
                    if (t) {
                        (0, n.IV)([
                            i,
                            r
                        ], t.split(' '));
                    }
                    if (e) {
                        (0, n.cn)([
                            i,
                            r
                        ], e.split(' '));
                    }
                };
                t.prototype.changeRtlProps = function(e) {
                    if (e) {
                        (0, n.cn)([
                            this.getWrapper()
                        ], 'e-rtl');
                    } else {
                        (0, n.IV)([
                            this.getWrapper()
                        ], 'e-rtl');
                    }
                };
                t.prototype.changePaletteProps = function() {
                    (0, n.og)(this.container.children[0]);
                    this.container.style.width = '';
                    this.createPalette();
                };
                t.prototype.changeOpacityProps = function(e) {
                    var t = this.getWrapper();
                    if (e) {
                        (0, n.IV)([
                            this.container.parentElement
                        ], tG);
                        this.createOpacitySlider((0, n.Ys)('.e-colorpicker-slider', this.container).appendChild(this.createElement('div', {
                            className: 'e-opacity-slider'
                        })));
                        if (!t.classList.contains(tJ) && !t.classList.contains(tK)) {
                            this.appendOpacityValue((0, n.Ys)('.e-input-container', this.container));
                        }
                    } else {
                        (0, n.cn)([
                            this.container.parentElement
                        ], tG);
                        this.opacitySlider.destroy();
                        (0, n.Od)(this.opacitySlider.element);
                        this.opacitySlider = null;
                        if (!t.classList.contains(tJ) && !t.classList.contains(tK)) {
                            (0, n.Od)((0, n.Ys)('.' + t4, this.container).parentElement);
                        }
                    }
                };
                t.prototype.onPropertyChanged = function(e, t) {
                    var i = this;
                    if (!(0, n.le)(e.value)) {
                        var r = this.roundValue(e.value);
                        if (r.length === 9) {
                            this.element.value = this.roundValue(r).slice(0, 7);
                            var s = this.splitBtn && (0, n.Ys)('.' + ir, this.splitBtn.element);
                            if (s) {
                                s.style.backgroundColor = this.convertToRgbString(this.hexToRgb(e.value));
                            }
                        } else {
                            this.value = t.value;
                        }
                    }
                    if (!this.inline && (0, n.le)(e.inline)) {
                        var o = [
                            'disabled',
                            'enableRtl'
                        ];
                        this.splitBtn.setProperties(eV(e, o));
                        if (!this.isPopupOpen()) {
                            this.changeCssClassProps(e.cssClass, t.cssClass);
                            this.changeRtlProps(e.enableRtl);
                            return;
                        }
                    }
                    var a = function(r) {
                        switch(r){
                            case 'inline':
                                if (e.inline) {
                                    l.getWrapper().appendChild(l.container);
                                    l.splitBtn.destroy();
                                    (0, n.og)(l.element.nextElementSibling);
                                    if (!l.container.children.length) {
                                        l.createWidget();
                                    }
                                } else {
                                    l.destroyOtherComp();
                                    l.unWireEvents();
                                    l.container.innerHTML = '';
                                    l.createSplitBtn();
                                }
                                break;
                            case 'cssClass':
                                {
                                    l.changeCssClassProps(e.cssClass, t.cssClass);
                                    var s = e.cssClass.split(' ').concat(t.cssClass.split(' '));
                                    s = s.reduce(function(e, t) {
                                        if (e.indexOf(t) < 0) {
                                            e.push(t);
                                        }
                                        return e;
                                    }, []);
                                    var o = 0;
                                    s.forEach(function(e) {
                                        if (o === 0 && (e === tJ || e === t$ || e === it || e === tX || e === tK)) {
                                            var t = (0, n.Ys)('.' + t1, i.container);
                                            if (t) {
                                                (0, n.Od)((0, n.Ys)('.' + t1, i.container));
                                            }
                                            i.createInput();
                                            o++;
                                        }
                                    });
                                    break;
                                }
                            case 'enableRtl':
                                if (l.isPicker()) {
                                    l.hueSlider.enableRtl = e.enableRtl;
                                    if (l.enableOpacity) {
                                        l.opacitySlider.enableRtl = e.enableRtl;
                                    }
                                    l.setInputEleProps();
                                }
                                l.changeRtlProps(e.enableRtl);
                                break;
                            case 'disabled':
                                l.changeDisabledProp(e.disabled);
                                break;
                            case 'value':
                                if (l.value !== t.value) {
                                    l.changeValueProp(e.value);
                                }
                                break;
                            case 'showButtons':
                                l.changeShowBtnProps(e.showButtons);
                                break;
                            case 'mode':
                                if (e.mode === 'Picker') {
                                    l.switchToPicker();
                                } else {
                                    l.switchToPalette();
                                }
                                break;
                            case 'modeSwitcher':
                                l.changeModeSwitcherProp(e.modeSwitcher);
                                break;
                            case 'columns':
                            case 'presetColors':
                                if (!l.isPicker()) {
                                    l.changePaletteProps();
                                }
                                break;
                            case 'noColor':
                                if (e.noColor) {
                                    if (l.mode === 'Palette' && !l.modeSwitcher) {
                                        l.setNoColor();
                                    }
                                } else {
                                    l.changePaletteProps();
                                }
                                break;
                            case 'enableOpacity':
                                l.changeOpacityProps(e.enableOpacity);
                                break;
                        }
                    };
                    var l = this;
                    for(var h = 0, c = Object.keys(e); h < c.length; h++){
                        var d = c[h];
                        a(d);
                    }
                };
                t.prototype.focusIn = function() {
                    this.element.parentElement.focus();
                };
                tH([
                    (0, n.Z9)('#008000ff')
                ], t.prototype, "value", void 0);
                tH([
                    (0, n.Z9)('')
                ], t.prototype, "cssClass", void 0);
                tH([
                    (0, n.Z9)(false)
                ], t.prototype, "disabled", void 0);
                tH([
                    (0, n.Z9)('Picker')
                ], t.prototype, "mode", void 0);
                tH([
                    (0, n.Z9)(true)
                ], t.prototype, "modeSwitcher", void 0);
                tH([
                    (0, n.Z9)(null)
                ], t.prototype, "presetColors", void 0);
                tH([
                    (0, n.Z9)(true)
                ], t.prototype, "showButtons", void 0);
                tH([
                    (0, n.Z9)(10)
                ], t.prototype, "columns", void 0);
                tH([
                    (0, n.Z9)(false)
                ], t.prototype, "inline", void 0);
                tH([
                    (0, n.Z9)(false)
                ], t.prototype, "noColor", void 0);
                tH([
                    (0, n.Z9)(false)
                ], t.prototype, "enablePersistence", void 0);
                tH([
                    (0, n.Z9)(true)
                ], t.prototype, "enableOpacity", void 0);
                tH([
                    (0, n.Z9)(false)
                ], t.prototype, "createPopupOnClick", void 0);
                tH([
                    (0, n.ju)()
                ], t.prototype, "select", void 0);
                tH([
                    (0, n.ju)()
                ], t.prototype, "change", void 0);
                tH([
                    (0, n.ju)()
                ], t.prototype, "beforeTileRender", void 0);
                tH([
                    (0, n.ju)()
                ], t.prototype, "beforeOpen", void 0);
                tH([
                    (0, n.ju)()
                ], t.prototype, "open", void 0);
                tH([
                    (0, n.ju)()
                ], t.prototype, "beforeClose", void 0);
                tH([
                    (0, n.ju)()
                ], t.prototype, "beforeModeSwitch", void 0);
                tH([
                    (0, n.ju)()
                ], t.prototype, "onModeSwitch", void 0);
                tH([
                    (0, n.ju)()
                ], t.prototype, "created", void 0);
                t = tH([
                    n.Zl
                ], t);
                return t;
            }(n.wA));
            ;
            var il = (function() {
                function e(e) {
                    this.parent = e;
                    this.wireEvent();
                }
                e.prototype.wireEvent = function() {
                    this.parent.on(r.ob, this.unWireEvent, this);
                };
                e.prototype.unWireEvent = function() {
                    this.parent.off(r.ob, this.unWireEvent);
                    if (this.popupOverlay) {
                        n.bi.remove(this.popupOverlay, 'click touchmove', this.onPopupOverlay);
                    }
                    this.removePopupContainer();
                };
                e.prototype.toolbarBeforeCreate = function(e) {
                    if (this.mode === 'Extended') {
                        e.enableCollision = false;
                    }
                };
                e.prototype.toolbarCreated = function() {
                    this.parent.notify(r.CK, this);
                };
                e.prototype.toolbarClicked = function(e) {
                    if (!this.parent.enabled) {
                        return;
                    }
                    if (!this.parent.readonly || (0, n.le)(e.item)) {
                        this.parent.notify(r.kE, e);
                    }
                    this.parent.trigger('toolbarClick', e);
                };
                e.prototype.dropDownSelected = function(e) {
                    this.parent.notify(r.s7, e);
                    this.onPopupOverlay();
                };
                e.prototype.beforeDropDownItemRender = function(e) {
                    if (this.parent.readonly || !this.parent.enabled) {
                        return;
                    }
                    this.parent.notify(r.nd, e);
                };
                e.prototype.dropDownOpen = function(e) {
                    if (e.element.parentElement.getAttribute('id').indexOf('TableCell') > -1 && !(0, n.le)(e.element.parentElement.querySelector('.e-cell-merge')) && (!(0, n.le)(e.element.parentElement.querySelector('.e-cell-horizontal-split')) || !(0, n.le)(e.element.parentElement.querySelector('.e-cell-vertical-split')))) {
                        var t = e.element.querySelectorAll('li');
                        if (this.parent.inputElement.querySelectorAll('.e-cell-select').length === 1) {
                            (0, n.cn)([
                                t[0]
                            ], 'e-disabled');
                            (0, n.IV)([
                                t[1],
                                t[2]
                            ], 'e-disabled');
                        } else if (this.parent.inputElement.querySelectorAll('.e-cell-select').length > 1) {
                            (0, n.IV)([
                                t[0]
                            ], 'e-disabled');
                            (0, n.cn)([
                                t[1],
                                t[2]
                            ], 'e-disabled');
                        }
                    }
                    if (n.AR.isDevice && !e.element.parentElement.classList.contains(s.uO)) {
                        this.popupModal(e.element.parentElement);
                    }
                    this.parent.notify(r.gA, e);
                };
                e.prototype.dropDownClose = function(e) {
                    this.removePopupContainer();
                    this.parent.notify(r.Wz, e);
                };
                e.prototype.removePopupContainer = function() {
                    if (n.AR.isDevice && !(0, n.le)(this.popupContainer)) {
                        var e = this.popupContainer.querySelector('.e-dropdown-popup.e-tbar-btn.e-control');
                        if (e) {
                            this.popupContainer.parentNode.insertBefore(e, this.popupContainer.nextSibling);
                            e.style.removeProperty('position');
                            (0, n.IV)([
                                e
                            ], 'e-popup-modal');
                        }
                        (0, n.og)(this.popupContainer);
                        this.popupContainer = undefined;
                    }
                };
                e.prototype.renderToolbar = function(e) {
                    this.setPanel(e.target);
                    this.renderPanel();
                    this.mode = e.overflowMode;
                    e.rteToolbarObj.toolbarObj = new ej({
                        items: e.items,
                        width: '100%',
                        overflowMode: e.overflowMode,
                        beforeCreate: this.toolbarBeforeCreate.bind(this),
                        created: this.toolbarCreated.bind(this),
                        clicked: this.toolbarClicked.bind(this),
                        enablePersistence: e.enablePersistence,
                        enableRtl: e.enableRtl,
                        cssClass: e.cssClass
                    });
                    e.rteToolbarObj.toolbarObj.isStringTemplate = true;
                    e.rteToolbarObj.toolbarObj.createElement = this.parent.createElement;
                    e.rteToolbarObj.toolbarObj.appendTo(e.target);
                };
                e.prototype.renderDropDownButton = function(e) {
                    var t = this;
                    var i;
                    e.element.classList.add(s.zD);
                    i = e.cssClass + ' ' + s.i7 + ' ' + s.Fs;
                    if (this.parent.inlineMode.enable && n.AR.isDevice) {
                        i = i + ' ' + s.ZV;
                    }
                    var o = this;
                    var a = new eK({
                        items: e.items,
                        iconCss: e.iconCss,
                        cssClass: i,
                        content: e.content,
                        enablePersistence: this.parent.enablePersistence,
                        enableRtl: this.parent.enableRtl,
                        select: this.dropDownSelected.bind(this),
                        beforeOpen: function(e) {
                            if (o.parent.readonly || !o.parent.enabled) {
                                e.cancel = true;
                                return;
                            }
                            for(var i = 0; i < e.element.childNodes.length; i++){
                                var s = t.parent.createElement('div');
                                s.innerHTML = a.content.trim();
                                if (s.textContent.trim() !== '' && e.element.childNodes[i].textContent.trim() === s.textContent.trim()) {
                                    if (!e.element.childNodes[i].classList.contains('e-active')) {
                                        (0, n.cn)([
                                            e.element.childNodes[i]
                                        ], 'e-active');
                                    }
                                } else {
                                    (0, n.IV)([
                                        e.element.childNodes[i]
                                    ], 'e-active');
                                }
                            }
                            o.parent.notify(r.rc, e);
                        },
                        close: this.dropDownClose.bind(this),
                        open: this.dropDownOpen.bind(this),
                        beforeItemRender: this.beforeDropDownItemRender.bind(this)
                    });
                    a.isStringTemplate = true;
                    a.createElement = o.parent.createElement;
                    a.appendTo(e.element);
                    e.element.tabIndex = -1;
                    var l = document.getElementById(a.element.id + '-popup');
                    l.setAttribute('aria-owns', this.parent.getID());
                    return a;
                };
                e.prototype.renderListDropDown = function(e) {
                    var t = this;
                    var i = s.i7 + ' ' + s.Fs + ((this.parent.inlineMode) ? (' ' + s.ZV) : '');
                    i += (' ' + ((e.itemName === 'NumberFormatList') ? s.CY : s.Cs));
                    var n = t.parent.createElement('span', {
                        className: s.$j
                    });
                    var o = t.parent.createElement('span', {
                        className: e.cssClass
                    });
                    n.appendChild(o);
                    var a = new eK({
                        items: e.items,
                        cssClass: i,
                        content: e.content,
                        enablePersistence: this.parent.enablePersistence,
                        enableRtl: this.parent.enableRtl,
                        select: this.dropDownSelected.bind(this),
                        beforeOpen: function(e) {
                            if (t.parent.readonly || !t.parent.enabled) {
                                e.cancel = true;
                                return;
                            }
                            var i = (e.event) ? e.event.target : null;
                            t.currentElement = a.element;
                            t.currentDropdown = a;
                            if (e.event && e.event.type === 'click' && (i.classList.contains(s.$j) || i.parentElement.classList.contains(s.$j))) {
                                e.cancel = true;
                                return;
                            }
                            t.parent.notify(r.rc, e);
                        },
                        close: this.dropDownClose.bind(this),
                        open: this.dropDownOpen.bind(this),
                        beforeItemRender: this.beforeDropDownItemRender.bind(this)
                    });
                    a.isStringTemplate = true;
                    a.createElement = t.parent.createElement;
                    a.appendTo(e.element);
                    e.element.tabIndex = -1;
                    var l = document.getElementById(a.element.id + '-popup');
                    l.setAttribute('aria-owns', this.parent.getID());
                    if (e.element.childElementCount === 1) {
                        a.element.insertBefore(n, a.element.querySelector('.e-caret'));
                    }
                    e.element.tabIndex = -1;
                    a.element.removeAttribute('type');
                    return a;
                };
                e.prototype.onPopupOverlay = function(e) {
                    if (!(0, n.le)(this.popupOverlay)) {
                        (0, n.oq)(this.popupOverlay, '.e-popup-container').style.display = 'none';
                        this.popupOverlay.style.display = 'none';
                        (0, n.IV)([
                            this.popupOverlay
                        ], 'e-popup-overlay');
                    }
                };
                e.prototype.setIsModel = function(e) {
                    if (!(0, n.oq)(e, '.e-popup-container')) {
                        this.popupContainer = this.parent.createElement('div', {
                            className: 'e-rte-modal-popup e-popup-container e-center'
                        });
                        e.parentNode.insertBefore(this.popupContainer, e);
                        this.popupContainer.appendChild(e);
                        this.popupContainer.style.zIndex = e.style.zIndex;
                        this.popupContainer.style.display = 'flex';
                        e.style.position = 'relative';
                        (0, n.cn)([
                            e
                        ], 'e-popup-modal');
                        this.popupOverlay = this.parent.createElement('div', {
                            className: 'e-popup-overlay'
                        });
                        this.popupOverlay.style.zIndex = (parseInt(e.style.zIndex, null) - 1).toString();
                        this.popupOverlay.style.display = 'block';
                        this.popupContainer.appendChild(this.popupOverlay);
                        n.bi.add(this.popupOverlay, 'click touchmove', this.onPopupOverlay, this);
                    } else {
                        e.parentElement.style.display = 'flex';
                        this.popupOverlay = e.nextElementSibling;
                        this.popupOverlay.style.display = 'block';
                        (0, n.cn)([
                            this.popupOverlay
                        ], 'e-popup-overlay');
                    }
                };
                e.prototype.paletteSelection = function(e, t) {
                    var i = e.element.querySelector('.e-control.e-colorpicker');
                    var r = [].slice.call((0, n.td)('.e-tile', i.parentElement));
                    (0, n.IV)(r, 'e-selected');
                    var o = t.querySelector('.' + s.i7).style.borderBottomColor;
                    (r.filter(function(e) {
                        if (e.style.backgroundColor === o) {
                            (0, n.cn)([
                                e
                            ], 'e-selected');
                        }
                    }));
                };
                e.prototype.renderColorPickerDropDown = function(e, t, i, o) {
                    var l = this;
                    var h = this;
                    var c = s.i7 + ' ' + s.Fs + ((this.parent.inlineMode) ? (' ' + s.ZV) : '');
                    c += (' ' + ((t === 'backgroundcolor') ? s.Z8 : s.UQ));
                    c += ' ' + this.parent.cssClass;
                    var d = h.parent.createElement('span', {
                        className: s.uN
                    });
                    var p = h.parent.createElement('span', {
                        className: e.cssClass
                    });
                    var u;
                    var f = ((0, n.le)(o)) ? h.parent.backgroundColor.default : o;
                    p.style.borderBottomColor = (t === 'backgroundcolor') ? f : h.parent.fontColor.default;
                    d.appendChild(p);
                    var m = new eK({
                        target: i.element.parentElement,
                        cssClass: c,
                        enablePersistence: this.parent.enablePersistence,
                        enableRtl: this.parent.enableRtl,
                        beforeOpen: function(t) {
                            if (h.parent.readonly || !h.parent.enabled) {
                                t.cancel = true;
                                return;
                            }
                            var i = (t.event) ? t.event.target : null;
                            h.currentElement = m.element;
                            h.currentDropdown = m;
                            h.paletteSelection(t, h.currentElement);
                            if (t.event && t.event.type === 'click' && (i.classList.contains(s.uN) || i.parentElement.classList.contains(s.uN))) {
                                t.cancel = true;
                                var o = i.classList.contains(s.i7) ? i.style.borderBottomColor : i.querySelector('.' + s.i7).style.borderBottomColor;
                                h.parent.notify(r.Wz, {});
                                u = h.parent.formatter.editorManager.nodeSelection.getRange(h.parent.contentModule.getDocument());
                                var l = u.startContainer.parentNode;
                                var c = (0, n.oq)(u.startContainer.parentNode, 'table');
                                if ((u.startContainer.nodeName === 'TD' || u.startContainer.nodeName === 'TH' || ((0, n.oq)(u.startContainer.parentNode, 'td,th')) || (h.parent.iframeSettings.enable && !(0, a.pv)(l.ownerDocument.querySelector('body'), 'e-lib'))) && u.collapsed && e.subCommand === 'BackgroundColor' && (0, n.oq)(c, '.' + s.$E)) {
                                    h.parent.notify(r.Yo, {
                                        item: {
                                            command: e.command,
                                            subCommand: e.subCommand,
                                            value: o
                                        }
                                    });
                                } else {
                                    h.parent.notify(r.Kz, {
                                        item: {
                                            command: e.command,
                                            subCommand: e.subCommand,
                                            value: o
                                        }
                                    });
                                }
                                return;
                            } else {
                                var d = t.element.querySelector('.e-control.e-colorpicker');
                                var p = (0, n.s8)(d, ia);
                                p.showButtons = (t.element.querySelector('.e-color-palette')) ? false : true;
                                p.dataBind();
                            }
                            t.element.onclick = function(e) {
                                if (e.target.classList.contains('e-cancel')) {
                                    m.toggle();
                                }
                            };
                        },
                        open: function(e) {
                            l.setColorPickerContentWidth(i);
                            var t;
                            var r = e.element.querySelector('.e-control.e-colorpicker');
                            if (e.element.querySelector('.e-color-palette')) {
                                t = r.parentElement.querySelector('.e-palette');
                            } else {
                                t = r.parentElement.querySelector('e-handler');
                            }
                            if (t) {
                                t.focus();
                            }
                            if (n.AR.isDevice) {
                                l.popupModal(e.element.parentElement);
                            }
                            l.pickerRefresh(e);
                        },
                        beforeClose: function(t) {
                            var i = (t.event) ? t.event.target : null;
                            if (t.event && t.event.type === 'click' && (i.classList.contains(s.uN) || i.parentElement.classList.contains(s.uN))) {
                                var o = i.classList.contains(s.i7) ? i.style.borderBottomColor : i.querySelector('.' + s.i7).style.borderBottomColor;
                                u = h.parent.formatter.editorManager.nodeSelection.getRange(h.parent.contentModule.getDocument());
                                if ((u.startContainer.nodeName === 'TD' || u.startContainer.nodeName === 'TH' || (0, n.oq)(u.startContainer.parentNode, 'td,th')) && u.collapsed) {
                                    h.parent.notify(r.Yo, {
                                        item: {
                                            command: e.command,
                                            subCommand: e.subCommand,
                                            value: o
                                        }
                                    });
                                } else {
                                    h.parent.notify(r.Kz, {
                                        item: {
                                            command: e.command,
                                            subCommand: e.subCommand,
                                            value: o
                                        }
                                    });
                                }
                                return;
                            }
                        },
                        close: function(e) {
                            h.parent.notify(r.Wz, {});
                            var t = (0, n.oq)(e.element.parentElement, '.e-popup-container');
                            if (t) {
                                t.style.display = 'none';
                                t.lastElementChild.style.display = 'none';
                                (0, n.IV)([
                                    t.lastElementChild
                                ], 'e-popup-overlay');
                            }
                            if (n.AR.isDevice && !(0, n.le)(t)) {
                                var i = t.querySelector('.e-dropdown-popup.e-tbar-btn.e-control');
                                if (i) {
                                    t.parentNode.insertBefore(i, t.nextSibling);
                                    i.style.removeProperty('position');
                                    (0, n.IV)([
                                        i
                                    ], 'e-popup-modal');
                                }
                                (0, n.og)(t);
                                h.popupContainer = undefined;
                            }
                        }
                    });
                    m.isStringTemplate = true;
                    m.createElement = h.parent.createElement;
                    e.element.setAttribute('role', 'button');
                    m.appendTo(e.element);
                    var v = document.getElementById(m.element.id + '-popup');
                    v.setAttribute('aria-owns', this.parent.getID());
                    m.element.insertBefore(d, m.element.querySelector('.e-caret'));
                    e.element.tabIndex = -1;
                    m.element.removeAttribute('type');
                    m.element.onmousedown = function() {
                        h.parent.notify(r.gA, {});
                    };
                    m.element.onkeydown = function() {
                        h.parent.notify(r.gA, {});
                    };
                    return m;
                };
                e.prototype.pickerRefresh = function(e) {
                    if (this.parent.backgroundColor.mode === 'Picker') {
                        var t = e.element.parentElement;
                        t.style.width = (t.offsetWidth + 5).toString() + 'px';
                        (0, n.s8)(t, h.GI).refreshPosition(t);
                        t.style.width = (t.offsetWidth - 5).toString() + 'px';
                    }
                };
                e.prototype.popupModal = function(e) {
                    var t = (0, n.s8)(e, h.GI);
                    t.relateTo = document.body;
                    t.position = {
                        X: 0,
                        Y: 0
                    };
                    t.targetType = 'container';
                    t.collision = {
                        X: 'fit',
                        Y: 'fit'
                    };
                    t.offsetY = 4;
                    t.dataBind();
                    this.setIsModel(e);
                };
                e.prototype.setColorPickerContentWidth = function(e) {
                    var t = e.element.nextSibling;
                    if (t.style.width === '0px') {
                        t.style.width = '';
                        var i = parseInt(getComputedStyle(t).borderBottomWidth, 10);
                        t.style.width = (0, n.Ac)(t.children[0].offsetWidth + i + i);
                    }
                };
                e.prototype.renderColorPicker = function(e, t) {
                    var i = this;
                    var o = this;
                    var a;
                    var l = new ia({
                        enablePersistence: this.parent.enablePersistence,
                        enableRtl: this.parent.enableRtl,
                        inline: true,
                        value: '#fff',
                        created: function() {
                            var e = (t === 'backgroundcolor') ? o.parent.backgroundColor.default : o.parent.fontColor.default;
                            l.setProperties({
                                value: e
                            });
                        },
                        mode: ((t === 'backgroundcolor') ? o.parent.backgroundColor.mode : o.parent.fontColor.mode),
                        modeSwitcher: ((t === 'backgroundcolor') ? o.parent.backgroundColor.modeSwitcher : o.parent.fontColor.modeSwitcher),
                        beforeTileRender: function(e) {
                            e.element.classList.add(s.kR);
                            e.element.classList.add(s.rG);
                            if (!(0, n.le)(i.parent.cssClass)) {
                                var t = i.parent.cssClass.split(' ');
                                for(var r = 0; r < t.length; r++){
                                    if (t[r].trim() !== '') {
                                        e.element.classList.add(t[r]);
                                    }
                                }
                            }
                            if (e.value === '') {
                                e.element.classList.add(s.Vb);
                            }
                        },
                        change: function(t) {
                            var i = t.currentValue.rgba;
                            t.item = {
                                command: e.command,
                                subCommand: e.subCommand,
                                value: i
                            };
                            o.parent.notify(r.Wz, {});
                            o.currentElement.querySelector('.' + s.i7).style.borderBottomColor = i;
                            var a = o.parent.formatter.editorManager.nodeSelection.getRange(o.parent.contentModule.getDocument());
                            var l = (0, n.oq)(a.startContainer.parentNode, 'table');
                            if ((a.startContainer.nodeName === 'TD' || a.startContainer.nodeName === 'TH' || a.startContainer.nodeName === 'BODY' || (0, n.oq)(a.startContainer.parentNode, 'td,th')) && a.collapsed && e.subCommand === 'BackgroundColor' && (0, n.oq)(l, '.' + s.$E)) {
                                o.parent.notify(r.Yo, t);
                            } else {
                                o.parent.notify(r.Kz, t);
                            }
                            o.currentDropdown.toggle();
                        },
                        beforeModeSwitch: function(e) {
                            a = l.value;
                            if (a === '') {
                                l.setProperties({
                                    value: ((e.mode === 'Picker') ? '#008000ff' : '')
                                }, true);
                            }
                            l.showButtons = e.mode === 'Palette' ? false : true;
                        }
                    });
                    l.isStringTemplate = true;
                    l.columns = (t === 'backgroundcolor') ? this.parent.backgroundColor.columns : this.parent.fontColor.columns;
                    l.presetColors = (t === 'backgroundcolor') ? this.parent.backgroundColor.colorCode : this.parent.fontColor.colorCode;
                    l.cssClass = ((t === 'backgroundcolor') ? s.oO : s.o7) + ' ' + e.cssClass;
                    l.createElement = this.parent.createElement;
                    l.appendTo(document.getElementById(e.target));
                    return l;
                };
                e.prototype.renderPanel = function() {
                    this.getPanel().classList.add(s.zE);
                };
                e.prototype.getPanel = function() {
                    return this.toolbarPanel;
                };
                e.prototype.setPanel = function(e) {
                    this.toolbarPanel = e;
                };
                return e;
            }());
            ;
            var ih = (function() {
                function e(e, t) {
                    this.tools = {};
                    this.parent = e;
                    this.locator = t;
                    this.renderFactory = this.locator.getService('rendererFactory');
                    this.addEventListener();
                    if (this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0) {
                        (0, n.l7)(this.tools, l.rj, (0, a.E)(this.parent.toolbarSettings.itemConfigs), true);
                    } else {
                        this.tools = l.rj;
                    }
                }
                e.prototype.addEventListener = function() {
                    this.parent.on(r.vN, this.setRtl, this);
                    this.parent.on(r._8, this.setCssClass, this);
                    this.parent.on(r.ob, this.removeEventListener, this);
                };
                e.prototype.removeEventListener = function() {
                    this.parent.off(r.vN, this.setRtl);
                    this.parent.off(r._8, this.setCssClass);
                    this.parent.off(r.ob, this.removeEventListener);
                };
                e.prototype.setCssClass = function(e) {
                    if (!(0, n.le)(this.toolbarObj)) {
                        if ((0, n.le)(e.oldCssClass)) {
                            this.toolbarObj.setProperties({
                                cssClass: (this.toolbarObj.cssClass + ' ' + e.cssClass).trim()
                            });
                        } else {
                            this.toolbarObj.setProperties({
                                cssClass: (this.toolbarObj.cssClass.replace(e.oldCssClass, '').trim() + ' ' + e.cssClass).trim()
                            });
                        }
                    }
                };
                e.prototype.setRtl = function(e) {
                    if (!(0, n.le)(this.toolbarObj)) {
                        this.toolbarObj.setProperties({
                            enableRtl: e.enableRtl
                        });
                    }
                };
                e.prototype.getClass = function(e) {
                    var t;
                    switch(e){
                        case 'fontsize':
                            t = 'e-rte-inline-size-template';
                            break;
                        case 'fontcolor':
                        case 'backgroundcolor':
                            t = 'e-rte-inline-color-template';
                            break;
                        default:
                            t = 'e-rte-inline-template';
                            break;
                    }
                    return t;
                };
                e.prototype.getTemplateObject = function(e, t) {
                    var i;
                    switch(e){
                        case 'fontcolor':
                        case 'backgroundcolor':
                        case 'numberformatlist':
                        case 'bulletformatlist':
                            i = 'span';
                            break;
                        default:
                            i = 'button';
                            break;
                    }
                    return {
                        command: this.tools[e.toLocaleLowerCase()].command,
                        subCommand: this.tools[e.toLocaleLowerCase()].subCommand,
                        template: this.parent.createElement(i, {
                            id: this.parent.getID() + '_' + t + '_' + this.tools[e.toLocaleLowerCase()].id
                        }).outerHTML,
                        cssClass: this.parent.inlineMode.enable ? this.getClass(e) : '',
                        tooltipText: (0, a.rX)(e, this.locator)
                    };
                };
                e.prototype.getObject = function(e, t) {
                    var i = e.toLowerCase();
                    if (l.rS.indexOf(i) !== -1) {
                        return this.getTemplateObject(i, t);
                    } else {
                        switch(i){
                            case '|':
                                return {
                                    type: 'Separator'
                                };
                            case '-':
                                return {
                                    type: 'Separator',
                                    cssClass: s["in"]
                                };
                            default:
                                return {
                                    id: this.parent.getID() + '_' + t + '_' + this.tools[i.toLocaleLowerCase()].id,
                                    prefixIcon: this.tools[i.toLocaleLowerCase()].icon,
                                    tooltipText: (0, a.rX)(i, this.locator),
                                    command: this.tools[i.toLocaleLowerCase()].command,
                                    subCommand: this.tools[i.toLocaleLowerCase()].subCommand
                                };
                        }
                    }
                };
                e.prototype.getItems = function(e, t) {
                    var i = this;
                    if (this.parent.toolbarSettings.items.length < 1) {
                        return [];
                    }
                    var r = [];
                    var s = function(e) {
                        switch(typeof e){
                            case 'string':
                                r.push(o.getObject(e, t));
                                break;
                            default:
                                if (!(0, n.le)(e.click)) {
                                    var s = e;
                                    var a = s.click;
                                    s.click = function() {
                                        if (s.undo && i.parent.formatter.getUndoRedoStack().length === 0) {
                                            i.parent.formatter.saveData();
                                        }
                                        a.call(i);
                                        if ((i.parent.formatter.getUndoRedoStack()[i.parent.formatter.getUndoRedoStack().length - 1].text.trim() === i.parent.inputElement.innerHTML.trim())) {
                                            return;
                                        }
                                        if (s.undo) {
                                            i.parent.formatter.saveData();
                                        }
                                    };
                                }
                                r.push(e);
                        }
                    };
                    var o = this;
                    for(var a = 0, l = e; a < l.length; a++){
                        var h = l[a];
                        s(h);
                    }
                    return r;
                };
                e.prototype.getToolbarOptions = function(e) {
                    return {
                        target: e.target,
                        rteToolbarObj: this,
                        items: this.getItems(e.items, e.container),
                        overflowMode: e.mode,
                        enablePersistence: this.parent.enablePersistence,
                        enableRtl: this.parent.enableRtl,
                        cssClass: e.cssClass
                    };
                };
                e.prototype.render = function(e) {
                    this.toolbarRenderer = this.renderFactory.getRenderer(o.y2.Toolbar);
                    this.toolbarRenderer.renderToolbar(this.getToolbarOptions(e));
                };
                return e;
            }());
            ;
            var ic = (function() {
                function e(e, t) {
                    this.parent = e;
                    this.locator = t;
                    this.renderFactory = this.locator.getService('rendererFactory');
                    this.addEventListener();
                }
                e.prototype.initializeInstance = function() {
                    this.toolbarRenderer = this.renderFactory.getRenderer(o.y2.Toolbar);
                };
                e.prototype.beforeRender = function(e) {
                    var t = e.item;
                    if (t.cssClass) {
                        (0, n.cn)([
                            e.element
                        ], t.cssClass);
                    }
                    if (t.command === 'Alignments' || t.subCommand === 'JustifyLeft' || t.subCommand === 'JustifyRight' || t.subCommand === 'JustifyCenter') {
                        e.element.setAttribute('title', (0, a.rX)(t.subCommand.toLocaleLowerCase(), this.locator));
                    }
                };
                e.prototype.dropdownContent = function(e, t, i) {
                    return ('<span style="display: inline-flex;' + 'width:' + ((t === 'quick') ? 'auto' : e) + '" >' + '<span class="e-rte-dropdown-btn-text">' + i + '</span></span>');
                };
                e.prototype.renderDropDowns = function(e) {
                    var t = this;
                    this.initializeInstance();
                    var i = e.containerType;
                    var r = e.container;
                    l.rS.forEach(function(o) {
                        var h = undefined;
                        if ((0, a.rw)(o, e.items) !== -1) {
                            switch(o){
                                case 'numberformatlist':
                                    {
                                        h = (0, n.Ys)('#' + t.parent.getID() + '_' + i + '_NumberFormatList', r);
                                        if ((0, n.le)(h) || h.classList.contains(s.zD)) {
                                            return;
                                        }
                                        var c = t.parent.numberFormatList.types.slice();
                                        c.forEach(function(e) {
                                            Object.defineProperties(e, {
                                                command: {
                                                    value: 'Lists',
                                                    enumerable: true
                                                },
                                                subCommand: {
                                                    value: 'NumberFormatList',
                                                    enumerable: true
                                                }
                                            });
                                        });
                                        t.numberFormatListDropDown = t.toolbarRenderer.renderListDropDown({
                                            cssClass: 'e-order-list' + ' ' + s.i7 + ' ' + s.Cd,
                                            itemName: 'NumberFormatList',
                                            items: c,
                                            element: h
                                        });
                                        break;
                                    }
                                case 'bulletformatlist':
                                    {
                                        h = (0, n.Ys)('#' + t.parent.getID() + '_' + i + '_BulletFormatList', r);
                                        if ((0, n.le)(h) || h.classList.contains(s.zD)) {
                                            return;
                                        }
                                        var d = t.parent.bulletFormatList.types.slice();
                                        d.forEach(function(e) {
                                            Object.defineProperties(e, {
                                                command: {
                                                    value: 'Lists',
                                                    enumerable: true
                                                },
                                                subCommand: {
                                                    value: 'BulletFormatList',
                                                    enumerable: true
                                                }
                                            });
                                        });
                                        t.bulletFormatListDropDown = t.toolbarRenderer.renderListDropDown({
                                            cssClass: 'e-unorder-list' + ' ' + s.i7 + ' ' + s.Cd,
                                            itemName: 'BulletFormatList',
                                            items: d,
                                            element: h
                                        });
                                        break;
                                    }
                                case 'formats':
                                    {
                                        h = (0, n.Ys)('#' + t.parent.getID() + '_' + i + '_Formats', r);
                                        if ((0, n.le)(h) || h.classList.contains(s.zD)) {
                                            return;
                                        }
                                        var p = t.parent.format.types.slice();
                                        p.forEach(function(e) {
                                            Object.defineProperties(e, {
                                                command: {
                                                    value: 'Formats',
                                                    enumerable: true
                                                },
                                                subCommand: {
                                                    value: e.value,
                                                    enumerable: true
                                                }
                                            });
                                        });
                                        var u = (0, n.le)(t.parent.format.default) ? p[0].text : t.parent.format.default;
                                        t.formatDropDown = t.toolbarRenderer.renderDropDownButton({
                                            iconCss: ((i === 'quick') ? 'e-formats e-icons' : ''),
                                            content: t.dropdownContent(t.parent.format.width, i, ((i === 'quick') ? '' : (0, a.Iw)(p, u, 'text', 'text'))),
                                            cssClass: s.LK + ' ' + s.br + ' ' + s.dc,
                                            itemName: 'Formats',
                                            items: p,
                                            element: h
                                        });
                                        break;
                                    }
                                case 'fontname':
                                    {
                                        h = (0, n.Ys)('#' + t.parent.getID() + '_' + i + '_FontName', r);
                                        if ((0, n.le)(h) || h.classList.contains(s.zD)) {
                                            return;
                                        }
                                        var f = t.parent.fontFamily.items.slice();
                                        f.forEach(function(e) {
                                            Object.defineProperties(e, {
                                                command: {
                                                    value: 'Font',
                                                    enumerable: true
                                                },
                                                subCommand: {
                                                    value: 'FontName',
                                                    enumerable: true
                                                }
                                            });
                                        });
                                        var m = (0, n.le)(t.parent.fontFamily.default) ? f[0].text : t.parent.fontFamily.default;
                                        t.fontNameDropDown = t.toolbarRenderer.renderDropDownButton({
                                            iconCss: ((i === 'quick') ? 'e-font-name e-icons' : ''),
                                            content: t.dropdownContent(t.parent.fontFamily.width, i, ((i === 'quick') ? '' : (0, a.Iw)(f, m, 'text', 'text'))),
                                            cssClass: s.LK + ' ' + s.br + ' ' + s.D6,
                                            itemName: 'FontName',
                                            items: f,
                                            element: h
                                        });
                                        if (!(0, n.le)(t.parent.fontFamily.default)) {
                                            t.getEditNode().style.fontFamily = t.parent.fontFamily.default;
                                        }
                                        break;
                                    }
                                case 'fontsize':
                                    {
                                        h = (0, n.Ys)('#' + t.parent.getID() + '_' + i + '_FontSize', r);
                                        if ((0, n.le)(h) || h.classList.contains(s.zD)) {
                                            return;
                                        }
                                        var v = t.parent.fontSize.items.slice();
                                        v.forEach(function(e) {
                                            Object.defineProperties(e, {
                                                command: {
                                                    value: 'Font',
                                                    enumerable: true
                                                },
                                                subCommand: {
                                                    value: 'FontSize',
                                                    enumerable: true
                                                }
                                            });
                                        });
                                        var g = (0, n.le)(t.parent.fontSize.default) ? v[1].text : t.parent.fontSize.default;
                                        t.fontSizeDropDown = t.toolbarRenderer.renderDropDownButton({
                                            content: t.dropdownContent(t.parent.fontSize.width, i, (0, a.R1)((0, a.Iw)(v, g.replace(/\s/g, ''), 'value', 'text'))),
                                            cssClass: s.LK + ' ' + s.br + ' ' + s.Jh,
                                            itemName: 'FontSize',
                                            items: v,
                                            element: h
                                        });
                                        if (!(0, n.le)(t.parent.fontSize.default)) {
                                            t.getEditNode().style.fontSize = t.parent.fontSize.default;
                                        }
                                        break;
                                    }
                                case 'alignments':
                                    h = (0, n.Ys)('#' + t.parent.getID() + '_' + i + '_Alignments', r);
                                    if ((0, n.le)(h) || h.classList.contains(s.zD)) {
                                        return;
                                    }
                                    t.alignDropDown = t.toolbarRenderer.renderDropDownButton({
                                        iconCss: 'e-justify-left e-icons',
                                        cssClass: s.LK + ' ' + s.br + ' ' + s.Cb,
                                        itemName: 'Alignments',
                                        items: l.Fg,
                                        element: h
                                    });
                                    break;
                                case 'align':
                                    t.imageAlignmentDropDown(i, r, h);
                                    break;
                                case 'display':
                                    t.imageDisplayDropDown(i, r, h);
                                    break;
                                case 'tablerows':
                                    t.rowDropDown(i, r, h);
                                    break;
                                case 'tablecolumns':
                                    t.columnDropDown(i, r, h);
                                    break;
                                case 'tablecell':
                                    t.cellDropDown(i, r, h);
                                    break;
                                case 'tablecellverticalalign':
                                    t.verticalAlignDropDown(i, r, h);
                                    break;
                                case 'styles':
                                    t.tableStylesDropDown(i, r, h);
                                    break;
                            }
                        }
                    });
                    if (this.parent.inlineMode.enable) {
                        this.setCssClass({
                            cssClass: this.parent.cssClass
                        });
                    }
                };
                e.prototype.getUpdateItems = function(e, t) {
                    var i = e.slice();
                    i.forEach(function(e) {
                        Object.defineProperties(e, {
                            command: {
                                value: (t === 'Format' ? 'Formats' : 'Font'),
                                enumerable: true
                            },
                            subCommand: {
                                value: (t === 'Format' ? e.value : t),
                                enumerable: true
                            }
                        });
                    });
                    return i;
                };
                e.prototype.onPropertyChanged = function(e) {
                    var t = e.newProp;
                    var i;
                    var r;
                    for(var o = 0, l = Object.keys(t); o < l.length; o++){
                        var h = l[o];
                        switch(h){
                            case 'fontFamily':
                                if (this.fontNameDropDown) {
                                    for(var c = 0, d = Object.keys(t.fontFamily); c < d.length; c++){
                                        var p = d[c];
                                        switch(p){
                                            case 'default':
                                            case 'width':
                                                {
                                                    var u = this.fontNameDropDown.items;
                                                    i = !(0, n.le)((0, n.oq)(this.fontNameDropDown.element, '.' + s.gr)) ? 'quick' : 'toolbar';
                                                    var f = (0, n.le)(this.parent.fontFamily.default) ? u[0].text : this.parent.fontFamily.default;
                                                    r = this.dropdownContent(this.parent.fontFamily.width, i, ((i === 'quick') ? '' : (0, a.Iw)(u, f, 'text', 'text')));
                                                    this.fontNameDropDown.setProperties({
                                                        content: r
                                                    });
                                                    if (!(0, n.le)(this.parent.fontFamily.default)) {
                                                        this.getEditNode().style.fontFamily = this.parent.fontFamily.default;
                                                    } else {
                                                        this.getEditNode().style.removeProperty('font-family');
                                                    }
                                                    break;
                                                }
                                            case 'items':
                                                this.fontNameDropDown.setProperties({
                                                    items: this.getUpdateItems(t.fontFamily.items, 'FontName')
                                                });
                                                break;
                                        }
                                    }
                                }
                                break;
                            case 'fontSize':
                                if (this.fontSizeDropDown) {
                                    for(var m = 0, v = Object.keys(t.fontSize); m < v.length; m++){
                                        var g = v[m];
                                        switch(g){
                                            case 'default':
                                            case 'width':
                                                {
                                                    var b = this.fontSizeDropDown.items;
                                                    i = !(0, n.le)((0, n.oq)(this.fontSizeDropDown.element, '.' + s.gr)) ? 'quick' : 'toolbar';
                                                    var y = (0, n.le)(this.parent.fontSize.default) ? b[1].text : this.parent.fontSize.default;
                                                    r = this.dropdownContent(this.parent.fontSize.width, i, (0, a.R1)((0, a.Iw)(b, y.replace(/\s/g, ''), 'value', 'text')));
                                                    this.fontSizeDropDown.setProperties({
                                                        content: r
                                                    });
                                                    if (!(0, n.le)(this.parent.fontSize.default)) {
                                                        this.getEditNode().style.fontSize = this.parent.fontSize.default;
                                                    } else {
                                                        this.getEditNode().style.removeProperty('font-size');
                                                    }
                                                    break;
                                                }
                                            case 'items':
                                                this.fontSizeDropDown.setProperties({
                                                    items: this.getUpdateItems(t.fontSize.items, 'FontSize')
                                                });
                                                break;
                                        }
                                    }
                                }
                                break;
                            case 'format':
                                if (this.formatDropDown) {
                                    for(var C = 0, E = Object.keys(t.format); C < E.length; C++){
                                        var S = E[C];
                                        switch(S){
                                            case 'default':
                                            case 'width':
                                                {
                                                    var w = this.formatDropDown.items;
                                                    i = !(0, n.le)((0, n.oq)(this.formatDropDown.element, '.' + s.gr)) ? 'quick' : 'toolbar';
                                                    var T = (0, n.le)(this.parent.format.default) ? w[0].text : this.parent.format.default;
                                                    r = this.dropdownContent(this.parent.format.width, i, ((i === 'quick') ? '' : (0, a.Iw)(w, T, 'text', 'text')));
                                                    this.formatDropDown.setProperties({
                                                        content: r
                                                    });
                                                    break;
                                                }
                                            case 'types':
                                                this.formatDropDown.setProperties({
                                                    items: this.getUpdateItems(t.format.types, 'Format')
                                                });
                                                break;
                                        }
                                    }
                                }
                                break;
                        }
                    }
                };
                e.prototype.getEditNode = function() {
                    return this.parent.contentModule.getEditPanel();
                };
                e.prototype.rowDropDown = function(e, t, i) {
                    i = (0, n.Ys)('#' + this.parent.getID() + '_' + e + '_TableRows', t);
                    if (i.classList.contains(s.zD)) {
                        return;
                    }
                    this.tableRowsDropDown = this.toolbarRenderer.renderDropDownButton({
                        iconCss: 'e-table-rows e-icons',
                        cssClass: s.LK + ' ' + s.br + ' ' + s.uO,
                        itemName: 'TableRows',
                        items: l.D1,
                        element: i
                    });
                };
                e.prototype.columnDropDown = function(e, t, i) {
                    i = (0, n.Ys)('#' + this.parent.getID() + '_' + e + '_TableColumns', t);
                    if (i.classList.contains(s.zD)) {
                        return;
                    }
                    this.tableColumnsDropDown = this.toolbarRenderer.renderDropDownButton({
                        iconCss: 'e-table-columns e-icons',
                        cssClass: s.LK + ' ' + s.br + ' ' + s.uO,
                        itemName: 'TableColumns',
                        items: l.AW,
                        element: i
                    });
                };
                e.prototype.cellDropDown = function(e, t, i) {
                    i = (0, n.Ys)('#' + this.parent.getID() + '_' + e + '_TableCell', t);
                    if (i.classList.contains(s.zD)) {
                        return;
                    }
                    this.tableRowsDropDown = this.toolbarRenderer.renderDropDownButton({
                        iconCss: 'e-table-cell e-icons',
                        cssClass: s.LK + ' ' + s.br + ' ' + s.uO,
                        itemName: 'TableCell',
                        items: l.Sz,
                        element: i
                    });
                };
                e.prototype.verticalAlignDropDown = function(e, t, i) {
                    i = (0, n.Ys)('#' + this.parent.getID() + '_' + e + '_TableCellVerticalAlign', t);
                    if (i.classList.contains(s.zD)) {
                        return;
                    }
                    this.tableCellVerticalAlignDropDown = this.toolbarRenderer.renderDropDownButton({
                        iconCss: 'e-table-cell-ver-align e-icons',
                        cssClass: s.LK + ' ' + s.br + ' ' + s.uO,
                        itemName: 'TableCellVerticalAlign',
                        items: l.Tg,
                        element: i
                    });
                };
                e.prototype.imageDisplayDropDown = function(e, t, i) {
                    i = (0, n.Ys)('#' + this.parent.getID() + '_' + e + '_Display', t);
                    if (i.classList.contains(s.zD)) {
                        return;
                    }
                    this.displayDropDown = this.toolbarRenderer.renderDropDownButton({
                        iconCss: 'e-display e-icons',
                        cssClass: s.LK + ' ' + s.br + ' ' + s.uO,
                        itemName: 'Display',
                        items: l.NO,
                        element: i
                    });
                };
                e.prototype.imageAlignmentDropDown = function(e, t, i) {
                    i = (0, n.Ys)('#' + this.parent.getID() + '_' + e + '_Align', t);
                    if (i.classList.contains(s.zD)) {
                        return;
                    }
                    this.imageAlignDropDown = this.toolbarRenderer.renderDropDownButton({
                        iconCss: 'e-justify-left e-icons',
                        cssClass: s.LK + ' ' + s.yH + ' ' + s.uO,
                        itemName: 'Align',
                        items: l.ry,
                        element: i
                    });
                };
                e.prototype.tableStylesDropDown = function(e, t, i) {
                    i = (0, n.Ys)('#' + this.parent.getID() + '_' + e + '_Styles', t);
                    if (i.classList.contains(s.zD)) {
                        return;
                    }
                    this.imageAlignDropDown = this.toolbarRenderer.renderDropDownButton({
                        iconCss: 'e-style e-icons',
                        cssClass: s.LK + ' ' + s.yH + ' ' + s.uO,
                        itemName: 'Styles',
                        items: this.parent.tableSettings.styles,
                        element: i
                    });
                };
                e.prototype.removeDropDownClasses = function(e) {
                    (0, n.IV)([
                        e
                    ], [
                        s.zD,
                        s.LK,
                        s.yH,
                        s.br
                    ]);
                };
                e.prototype.destroyDropDowns = function() {
                    if (this.formatDropDown) {
                        this.removeDropDownClasses(this.formatDropDown.element);
                        this.formatDropDown.destroy();
                    }
                    if (this.fontNameDropDown) {
                        this.removeDropDownClasses(this.fontNameDropDown.element);
                        this.fontNameDropDown.destroy();
                    }
                    if (this.fontSizeDropDown) {
                        this.removeDropDownClasses(this.fontSizeDropDown.element);
                        this.fontSizeDropDown.destroy();
                    }
                    if (this.alignDropDown) {
                        this.removeDropDownClasses(this.alignDropDown.element);
                        this.alignDropDown.destroy();
                    }
                    if (this.imageAlignDropDown) {
                        this.removeDropDownClasses(this.imageAlignDropDown.element);
                        this.imageAlignDropDown.destroy();
                    }
                    if (this.displayDropDown) {
                        this.removeDropDownClasses(this.displayDropDown.element);
                        this.displayDropDown.destroy();
                    }
                    if (this.tableRowsDropDown) {
                        this.removeDropDownClasses(this.tableRowsDropDown.element);
                        this.tableRowsDropDown.destroy();
                    }
                    if (this.tableColumnsDropDown) {
                        this.removeDropDownClasses(this.tableColumnsDropDown.element);
                        this.tableColumnsDropDown.destroy();
                    }
                    if (this.tableCellVerticalAlignDropDown) {
                        this.removeDropDownClasses(this.tableCellVerticalAlignDropDown.element);
                        this.tableCellVerticalAlignDropDown.destroy();
                    }
                    if (this.numberFormatListDropDown) {
                        this.removeDropDownClasses(this.numberFormatListDropDown.element);
                        this.numberFormatListDropDown.destroy();
                    }
                    if (this.bulletFormatListDropDown) {
                        this.removeDropDownClasses(this.bulletFormatListDropDown.element);
                        this.bulletFormatListDropDown.destroy();
                    }
                };
                e.prototype.setRtl = function(e) {
                    if (this.formatDropDown) {
                        this.formatDropDown.setProperties({
                            enableRtl: e.enableRtl
                        });
                    }
                    if (this.fontNameDropDown) {
                        this.fontNameDropDown.setProperties({
                            enableRtl: e.enableRtl
                        });
                    }
                    if (this.fontSizeDropDown) {
                        this.fontSizeDropDown.setProperties({
                            enableRtl: e.enableRtl
                        });
                    }
                    if (this.alignDropDown) {
                        this.alignDropDown.setProperties({
                            enableRtl: e.enableRtl
                        });
                    }
                    if (this.imageAlignDropDown) {
                        this.imageAlignDropDown.setProperties({
                            enableRtl: e.enableRtl
                        });
                    }
                    if (this.displayDropDown) {
                        this.displayDropDown.setProperties({
                            enableRtl: e.enableRtl
                        });
                    }
                    if (this.numberFormatListDropDown) {
                        this.numberFormatListDropDown.setProperties({
                            enableRtl: e.enableRtl
                        });
                    }
                    if (this.bulletFormatListDropDown) {
                        this.bulletFormatListDropDown.setProperties({
                            enableRtl: e.enableRtl
                        });
                    }
                };
                e.prototype.updateCss = function(e, t) {
                    if (e && t.cssClass) {
                        if ((0, n.le)(t.oldCssClass)) {
                            e.setProperties({
                                cssClass: (e.cssClass + ' ' + t.cssClass).trim()
                            });
                        } else {
                            e.setProperties({
                                cssClass: (e.cssClass.replace(t.oldCssClass, '').trim() + ' ' + t.cssClass).trim()
                            });
                        }
                    }
                };
                e.prototype.setCssClass = function(e) {
                    var t = [
                        this.formatDropDown,
                        this.fontNameDropDown,
                        this.fontSizeDropDown,
                        this.alignDropDown,
                        this.imageAlignDropDown,
                        this.displayDropDown,
                        this.numberFormatListDropDown,
                        this.bulletFormatListDropDown,
                        this.tableRowsDropDown,
                        this.tableColumnsDropDown,
                        this.tableCellVerticalAlignDropDown
                    ];
                    for(var i = 0; i < t.length; i++){
                        this.updateCss(t[i], e);
                    }
                };
                e.prototype.addEventListener = function() {
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.parent.on(r.nd, this.beforeRender, this);
                    this.parent.on(r.a$, this.onIframeMouseDown, this);
                    this.parent.on(r.vN, this.setRtl, this);
                    this.parent.on(r.ob, this.removeEventListener, this);
                    this.parent.on(r.CC, this.onPropertyChanged, this);
                    this.parent.on(r._8, this.setCssClass, this);
                };
                e.prototype.onIframeMouseDown = function() {
                    (0, a.Nu)(document, 'mousedown');
                };
                e.prototype.removeEventListener = function() {
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.parent.off(r.a$, this.onIframeMouseDown);
                    this.parent.off(r.vN, this.setRtl);
                    this.parent.off(r.nd, this.beforeRender);
                    this.parent.off(r.ob, this.removeEventListener);
                    this.parent.off(r.CC, this.onPropertyChanged);
                    this.parent.off(r._8, this.setCssClass);
                };
                return e;
            }());
            var id = i(9336);
            var ip = i(2503);
            ;
            var iu = (function() {
                function e(e) {
                    this.parent = e;
                    this.addEventListener();
                    this.serviceLocator = new id.S;
                    this.serviceLocator.register('rendererFactory', new ip.z);
                }
                e.prototype.addEventListener = function() {
                    this.parent.on(r.kE, this.toolbarClick, this);
                    this.parent.on(r.s7, this.dropDownSelect, this);
                    this.parent.on(r.Kz, this.renderSelection, this);
                    this.parent.on(r.ob, this.removeEventListener, this);
                };
                e.prototype.toolbarClick = function(e) {
                    if ((0, n.le)(e.item)) {
                        return;
                    }
                    if (!(0, n.le)(e.item.controlParent)) {
                        var t = e.item.controlParent.activeEle;
                        if (t) {
                            t.tabIndex = -1;
                        }
                    }
                    if (e.item.command === 'NumberFormatList' || e.item.command === 'BulletFormatList') {
                        if (e.originalEvent.target.classList.contains('e-order-list') || e.originalEvent.target.classList.contains('e-unorder-list')) {
                            e.item.command = 'Lists';
                            e.item.subCommand = e.item.subCommand === 'NumberFormatList' ? 'OL' : 'UL';
                        }
                    }
                    if (e.item.command === 'Lists') {
                        if (e.originalEvent.target.classList.contains('e-caret') && (e.originalEvent.target.parentElement.classList.contains('e-rte-bulletformatlist-dropdown') || e.originalEvent.target.parentElement.classList.contains('e-rte-numberformatlist-dropdown'))) {
                            e.item.command = e.item.subCommand = null;
                        }
                    }
                    this.parent.notify(r.s0, e);
                    this.parent.notify(r.gk, e);
                };
                e.prototype.dropDownSelect = function(e) {
                    this.parent.notify(r.Wz, {});
                    if (!(document.body.contains(document.body.querySelector('.e-rte-quick-toolbar')) && e.item && (e.item.command === 'Images' || e.item.command === 'Display' || e.item.command === 'Table'))) {
                        var t = e.item.controlParent && this.parent.quickToolbarModule && this.parent.quickToolbarModule.tableQTBar && this.parent.quickToolbarModule.tableQTBar.element.contains(e.item.controlParent.element) ? 'Table' : null;
                        if (e.item.command === 'Lists') {
                            var i = {
                                listStyle: e.item.value,
                                listImage: e.item.listImage,
                                type: e.item.subCommand
                            };
                            this.parent.formatter.process(this.parent, e, e.originalEvent, i);
                        } else {
                            this.parent.formatter.process(this.parent, e, e.originalEvent, t);
                        }
                    }
                    this.parent.notify(r.gA, {});
                };
                e.prototype.renderSelection = function(e) {
                    this.parent.notify(r.Wz, {});
                    this.parent.formatter.process(this.parent, e, e.originalEvent, null);
                    this.parent.notify(r.gA, {});
                };
                e.prototype.removeEventListener = function() {
                    this.parent.off(r.kE, this.toolbarClick);
                    this.parent.off(r.s7, this.dropDownSelect);
                    this.parent.off(r.Kz, this.renderSelection);
                    this.parent.off(r.ob, this.removeEventListener);
                };
                return e;
            }());
            ;
            var im = (function() {
                function e(e, t) {
                    this.parent = e;
                    this.isToolbar = false;
                    this.locator = t;
                    this.isTransformChild = false;
                    this.renderFactory = this.locator.getService('rendererFactory');
                    l.QP(this.parent);
                    (0, a.AV)(this.parent);
                    this.renderFactory.addRenderer(o.y2.Toolbar, new il(this.parent));
                    this.toolbarRenderer = this.renderFactory.getRenderer(o.y2.Toolbar);
                    this.baseToolbar = new ih(this.parent, this.locator);
                    this.addEventListener();
                    if (this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0) {
                        (0, n.l7)(this.tools, l.rj, (0, a.E)(this.parent.toolbarSettings.itemConfigs), true);
                    } else {
                        this.tools = l.rj;
                    }
                }
                e.prototype.initializeInstance = function() {
                    this.contentRenderer = this.renderFactory.getRenderer(o.y2.Content);
                    this.editableElement = this.contentRenderer.getEditPanel();
                    this.editPanel = this.contentRenderer.getPanel();
                };
                e.prototype.toolbarBindEvent = function() {
                    if (!this.parent.inlineMode.enable) {
                        this.keyBoardModule = new n.nv(this.getToolbarElement(), {
                            keyAction: this.toolBarKeyDown.bind(this),
                            keyConfigs: this.parent.formatter.keyConfig,
                            eventName: 'keydown'
                        });
                    }
                };
                e.prototype.toolBarKeyDown = function(e) {
                    switch(e.action){
                        case 'escape':
                            this.parent.contentModule.getEditPanel().focus();
                            break;
                    }
                };
                e.prototype.createToolbarElement = function() {
                    this.tbElement = this.parent.createElement('div', {
                        id: this.parent.getID() + '_toolbar'
                    });
                    if (!n.AR.isDevice && this.parent.inlineMode.enable && (0, a.FA)()) {
                        return;
                    } else {
                        if (this.parent.toolbarSettings.enableFloating && !this.parent.inlineMode.enable) {
                            this.tbWrapper = this.parent.createElement('div', {
                                id: this.parent.getID() + '_toolbar_wrapper',
                                innerHTML: this.tbElement.outerHTML,
                                className: s.Rj
                            });
                            this.tbElement = this.tbWrapper.firstElementChild;
                            this.parent.element.insertBefore(this.tbWrapper, this.editPanel);
                        } else {
                            this.parent.element.insertBefore(this.tbElement, this.editPanel);
                        }
                    }
                };
                e.prototype.getToolbarMode = function() {
                    var e;
                    switch(this.parent.toolbarSettings.type){
                        case o.Bv.Expand:
                            e = 'Extended';
                            break;
                        case o.Bv.Scrollable:
                            e = 'Scrollable';
                            break;
                        default:
                            e = 'MultiRow';
                    }
                    if ((0, a.FA)() && this.parent.toolbarSettings.type === o.Bv.Expand) {
                        e = o.Bv.Scrollable;
                    }
                    return e;
                };
                e.prototype.checkToolbarResponsive = function(e) {
                    if (!n.AR.isDevice || (0, a.FA)()) {
                        return false;
                    }
                    var t;
                    if (this.parent.toolbarSettings.type === o.Bv.Expand) {
                        t = o.Bv.MultiRow;
                    } else {
                        t = this.parent.toolbarSettings.type;
                    }
                    this.baseToolbar.render({
                        container: ((this.parent.inlineMode.enable) ? 'quick' : 'toolbar'),
                        items: this.parent.toolbarSettings.items,
                        mode: t,
                        target: e,
                        cssClass: this.parent.cssClass
                    });
                    if (this.parent.toolbarSettings.type === o.Bv.Expand) {
                        (0, n.cn)([
                            e
                        ], [
                            'e-rte-tb-mobile'
                        ]);
                        if (this.parent.inlineMode.enable) {
                            this.addFixedTBarClass();
                        } else {
                            (0, n.cn)([
                                e
                            ], [
                                s.iu
                            ]);
                        }
                    }
                    this.wireEvents();
                    this.dropDownModule.renderDropDowns({
                        container: e,
                        containerType: ((this.parent.inlineMode.enable) ? 'quick' : 'toolbar'),
                        items: this.parent.toolbarSettings.items
                    });
                    this.parent.notify(r.jm, {
                        container: this.tbElement,
                        containerType: ((this.parent.inlineMode.enable) ? 'quick' : 'toolbar'),
                        items: this.parent.toolbarSettings.items
                    });
                    return true;
                };
                e.prototype.checkIsTransformChild = function() {
                    this.isTransformChild = false;
                    var e = (0, n.td)('[style*="transform"]', document);
                    for(var t = 0; t < e.length; t++){
                        if (!(0, n.le)(e[t].contains) && e[t].contains(this.parent.element)) {
                            this.isTransformChild = true;
                            break;
                        }
                    }
                };
                e.prototype.toggleFloatClass = function(e) {
                    var t;
                    var i = false;
                    var r = false;
                    var o;
                    var a = this.parent.floatingToolbarOffset;
                    if (e && this.parent.iframeSettings.enable && this.parent.inputElement.ownerDocument === e.target) {
                        o = e.target.body;
                    } else if (e && e.target !== document) {
                        o = e.target;
                    } else {
                        i = true;
                        o = document.body;
                    }
                    var l = this.getToolbarHeight() + this.getExpandTBarPopHeight();
                    if (this.isTransformChild) {
                        t = 0;
                        var h = 0;
                        var c = this.parent.element.offsetHeight;
                        if (i) {
                            var d = window.getComputedStyle(o);
                            h = parseFloat(d.marginTop.split('px')[0]) + parseFloat(d.paddingTop.split('px')[0]);
                        }
                        var p = this.parent.element.getBoundingClientRect().top;
                        var u = (n.AR.isMSPointer && i) ? window.pageYOffset : o.parentElement.scrollTop;
                        var f = o.getBoundingClientRect();
                        var m = (!i) ? f.top : (f.top + u);
                        var v = ((p - ((!i) ? m : 0)) + c > l + a) ? false : true;
                        if (p > (m + a) || p < -c || ((p < 0) ? v : false)) {
                            r = false;
                            (0, n.IV)([
                                this.tbElement
                            ], [
                                s.IW
                            ]);
                        } else if (p < (m + a)) {
                            if (p < 0) {
                                t = (-p) + m;
                            } else {
                                t = m - p;
                            }
                            t = (i) ? t - h : t;
                            (0, n.cn)([
                                this.tbElement
                            ], [
                                s.IW
                            ]);
                            r = true;
                        }
                    } else {
                        var g = this.parent.element.getBoundingClientRect();
                        if (window.innerHeight < g.top) {
                            return;
                        }
                        t = (e && e.target !== document) ? o.getBoundingClientRect().top : 0;
                        if ((g.bottom < (a + l + t)) || g.bottom < 0 || g.top > a + t) {
                            r = false;
                        } else if (g.top < a || g.top < a + t) {
                            r = true;
                        }
                    }
                    if (!r) {
                        (0, n.IV)([
                            this.tbElement
                        ], [
                            s.to
                        ]);
                        (0, n.V7)(this.tbElement, {
                            top: 0 + 'px',
                            width: '100%'
                        });
                    } else {
                        (0, n.cn)([
                            this.tbElement
                        ], [
                            s.to
                        ]);
                        (0, n.V7)(this.tbElement, {
                            width: this.parent.element.offsetWidth + 'px',
                            top: (a + t) + 'px'
                        });
                    }
                };
                e.prototype.renderToolbar = function() {
                    this.initializeInstance();
                    this.createToolbarElement();
                    if (this.checkToolbarResponsive(this.tbElement)) {
                        return;
                    }
                    if (this.parent.inlineMode.enable) {
                        this.parent.notify(r.bb, {});
                    } else {
                        this.baseToolbar.render({
                            container: 'toolbar',
                            items: this.parent.toolbarSettings.items,
                            mode: this.getToolbarMode(),
                            target: this.tbElement,
                            cssClass: this.parent.cssClass
                        });
                        if (!this.parent.inlineMode.enable) {
                            if (this.parent.toolbarSettings.enableFloating) {
                                this.checkIsTransformChild();
                                this.toggleFloatClass();
                            }
                            (0, n.cn)([
                                this.parent.element
                            ], [
                                s.bs
                            ]);
                            if (this.parent.toolbarSettings.type === o.Bv.Expand) {
                                (0, n.cn)([
                                    this.parent.element
                                ], [
                                    s.re
                                ]);
                            }
                        }
                    }
                    this.wireEvents();
                    if (this.parent.inlineMode.enable && !(0, a.FA)()) {
                        this.addFixedTBarClass();
                    }
                    if (!this.parent.inlineMode.enable) {
                        this.dropDownModule.renderDropDowns({
                            container: this.tbElement,
                            containerType: 'toolbar',
                            items: this.parent.toolbarSettings.items
                        });
                        this.parent.notify(r.jm, {
                            container: this.tbElement,
                            containerType: 'toolbar',
                            items: this.parent.toolbarSettings.items
                        });
                        this.refreshToolbarOverflow();
                    }
                    var e = this.parent.element.querySelector('.e-rte-srctextarea');
                    var t = this.parent.element.querySelector('.e-source-content');
                    if ((!this.parent.iframeSettings.enable && (!(0, n.le)(e) && e.style.display === 'block')) || (this.parent.iframeSettings.enable && (!(0, n.le)(t) && t.style.display === 'block'))) {
                        this.parent.notify(r.W0, {
                            targetItem: 'SourceCode',
                            updateItem: 'Preview',
                            baseToolbar: this.parent.getBaseToolbarObject()
                        });
                        this.parent.disableToolbarItem(this.parent.toolbarSettings.items);
                    }
                };
                e.prototype.addFixedTBarClass = function() {
                    (0, n.cn)([
                        this.tbElement
                    ], [
                        s.TN
                    ]);
                };
                e.prototype.removeFixedTBarClass = function() {
                    (0, n.IV)([
                        this.tbElement
                    ], [
                        s.TN
                    ]);
                };
                e.prototype.showFixedTBar = function() {
                    (0, n.cn)([
                        this.tbElement
                    ], [
                        s.X7
                    ]);
                    if (n.AR.isIos) {
                        (0, n.cn)([
                            this.tbElement
                        ], [
                            s.ok
                        ]);
                    }
                };
                e.prototype.hideFixedTBar = function() {
                    (!this.isToolbar) ? (0, n.IV)([
                        this.tbElement
                    ], [
                        s.X7,
                        s.ok
                    ]) : this.isToolbar = false;
                };
                e.prototype.updateItem = function(e) {
                    var t = this.tools[e.updateItem.toLocaleLowerCase()];
                    var i = this.tools[e.targetItem.toLocaleLowerCase()];
                    var r = (0, a.a_)((0, a._N)(i.subCommand), e.baseToolbar.toolbarObj.items)[0];
                    if (!(0, n.le)(r)) {
                        var s = this.parent.inlineMode.enable ? '_quick_' : '_toolbar_';
                        e.baseToolbar.toolbarObj.items[r].id = this.parent.getID() + s + t.id;
                        e.baseToolbar.toolbarObj.items[r].prefixIcon = t.icon;
                        e.baseToolbar.toolbarObj.items[r].tooltipText = t.tooltip;
                        e.baseToolbar.toolbarObj.items[r].subCommand = t.subCommand;
                        e.baseToolbar.toolbarObj.dataBind();
                    } else {
                        this.addTBarItem(e, 0);
                    }
                };
                e.prototype.updateToolbarStatus = function(e) {
                    if (!this.tbElement || (this.parent.inlineMode.enable && ((0, a.FA)() || !n.AR.isDevice))) {
                        return;
                    }
                    var t = {
                        args: e,
                        dropDownModule: this.dropDownModule,
                        parent: this.parent,
                        tbElements: (0, n.td)('.' + s.Xh, this.tbElement),
                        tbItems: this.baseToolbar.toolbarObj.items
                    };
                    (0, a.kj)(t, (this.parent.inlineMode.enable ? true : false), this.parent);
                };
                e.prototype.fullScreen = function(e) {
                    this.parent.fullScreenModule.showFullScreen(e);
                };
                e.prototype.hideScreen = function(e) {
                    this.parent.fullScreenModule.hideFullScreen(e);
                };
                e.prototype.getBaseToolbar = function() {
                    return this.baseToolbar;
                };
                e.prototype.addTBarItem = function(e, t) {
                    e.baseToolbar.toolbarObj.addItems([
                        e.baseToolbar.getObject(e.updateItem, 'toolbar')
                    ], t);
                };
                e.prototype.enableTBarItems = function(e, t, i, r) {
                    var o = (0, a.a_)((0, a._N)(t), e.toolbarObj.items);
                    this.tbItems = (0, n.td)('.' + s.Xh, e.toolbarObj.element);
                    for(var l = 0; l < o.length; l++){
                        var h = this.tbItems[o[l]];
                        if (h) {
                            e.toolbarObj.enableItems(h, i);
                        }
                    }
                    if (!(0, n.Ys)('.e-rte-srctextarea', this.parent.element) && !r) {
                        (0, a.j)(e, this.parent.formatter.editorManager.undoRedoManager.getUndoStatus());
                    }
                };
                e.prototype.removeTBarItems = function(e) {
                    if ((0, n.le)(this.baseToolbar.toolbarObj)) {
                        this.baseToolbar = this.parent.getBaseToolbarObject();
                    }
                    var t = (0, a.a_)((0, a._N)(e), this.baseToolbar.toolbarObj.items);
                    this.tbItems = (this.parent.inlineMode.enable) ? (0, n.td)('.' + s.Xh, this.baseToolbar.toolbarObj.element) : (0, n.td)('.' + s.Xh, this.parent.element);
                    for(var i = 0; i < t.length; i++){
                        this.baseToolbar.toolbarObj.removeItems(this.tbItems[t[i]]);
                    }
                };
                e.prototype.getExpandTBarPopHeight = function() {
                    var e = 0;
                    if (this.parent.toolbarSettings.type === o.Bv.Expand && this.tbElement.classList.contains('e-extended-toolbar')) {
                        var t = (0, n.Ys)('.e-toolbar-extended', this.tbElement);
                        if (t && this.tbElement.classList.contains('e-expand-open') || t && t.classList.contains('e-popup-open')) {
                            (0, n.cn)([
                                t
                            ], [
                                s.Hy
                            ]);
                            e = e + t.offsetHeight;
                            (0, n.IV)([
                                t
                            ], [
                                s.Hy
                            ]);
                        } else {
                            (0, n.IV)([
                                this.tbElement
                            ], [
                                s.Yi
                            ]);
                        }
                    }
                    return e;
                };
                e.prototype.getToolbarHeight = function() {
                    return this.tbElement.offsetHeight;
                };
                e.prototype.getToolbarElement = function() {
                    return (0, n.Ys)('.' + s.zE, this.parent.element);
                };
                e.prototype.refreshToolbarOverflow = function() {
                    this.baseToolbar.toolbarObj.refreshOverflow();
                };
                e.prototype.isToolbarDestroyed = function() {
                    return this.baseToolbar.toolbarObj && !this.baseToolbar.toolbarObj.isDestroyed;
                };
                e.prototype.destroyToolbar = function() {
                    if (this.isToolbarDestroyed()) {
                        this.parent.unWireScrollElementsEvents();
                        this.unWireEvents();
                        this.parent.notify(r.c0, {});
                        this.dropDownModule.destroyDropDowns();
                        this.baseToolbar.toolbarObj.destroy();
                        this.removeEventListener();
                        (0, n.IV)([
                            this.parent.element
                        ], [
                            s.bs
                        ]);
                        (0, n.IV)([
                            this.parent.element
                        ], [
                            s.re
                        ]);
                        var e = (0, n.Ys)('.' + s.Rj, this.parent.element);
                        var t = (0, n.Ys)('.' + s.zE, this.parent.element);
                        if (!(0, n.le)(e)) {
                            (0, n.og)(e);
                        } else if (!(0, n.le)(t)) {
                            (0, n.og)(t);
                        }
                    }
                };
                e.prototype.destroy = function() {
                    if (this.isToolbarDestroyed()) {
                        this.destroyToolbar();
                        if (this.keyBoardModule) {
                            this.keyBoardModule.destroy();
                        }
                    }
                };
                e.prototype.moduleDestroy = function() {
                    this.parent = null;
                    this.baseToolbar.parent = null;
                    this.toolbarActionModule.parent = null;
                    this.dropDownModule.parent = null;
                };
                e.prototype.scrollHandler = function(e) {
                    if (!this.parent.inlineMode.enable) {
                        if (this.parent.toolbarSettings.enableFloating && this.getDOMVisibility(this.tbElement)) {
                            this.toggleFloatClass(e.args);
                        }
                    }
                };
                e.prototype.getDOMVisibility = function(e) {
                    if (!e.offsetParent && e.offsetWidth === 0 && e.offsetHeight === 0) {
                        return false;
                    }
                    return true;
                };
                e.prototype.mouseDownHandler = function() {
                    if (n.AR.isDevice && this.parent.inlineMode.enable && !(0, a.FA)()) {
                        this.showFixedTBar();
                    }
                };
                e.prototype.focusChangeHandler = function() {
                    if (n.AR.isDevice && this.parent.inlineMode.enable && !(0, a.FA)()) {
                        this.isToolbar = false;
                        this.hideFixedTBar();
                    }
                };
                e.prototype.dropDownBeforeOpenHandler = function() {
                    this.isToolbar = true;
                };
                e.prototype.tbFocusHandler = function(e) {
                    var t = document.activeElement;
                    var i = (0, n.oq)(t, '.e-rte-toolbar');
                    if (t === this.parent.getToolbarElement() || i === this.parent.getToolbarElement()) {
                        var r = this.parent.getToolbarElement().querySelectorAll('.e-expended-nav');
                        for(var s = 0; s < r.length; s++){
                            if ((0, n.le)(this.parent.getToolbarElement().querySelector('.e-insert-table-btn'))) {
                                r[s].setAttribute('tabindex', '0');
                            } else {
                                r[s].setAttribute('tabindex', '1');
                            }
                        }
                    }
                };
                e.prototype.tbKeydownHandler = function(e) {
                    if (e.target.classList.contains('e-dropdown-btn') || e.target.getAttribute('id') === this.parent.getID() + '_toolbar_CreateTable') {
                        e.target.setAttribute('tabindex', '0');
                    }
                };
                e.prototype.toolbarClickHandler = function(e) {
                    var t = (0, n.oq)(e.originalEvent.target, '.e-hor-nav');
                    if (t && this.parent.toolbarSettings.type === o.Bv.Expand && !(0, n.le)(t)) {
                        if (!t.classList.contains('e-nav-active')) {
                            (0, n.IV)([
                                this.tbElement
                            ], [
                                s.Yi
                            ]);
                            this.parent.setContentHeight('toolbar', false);
                        } else {
                            (0, n.cn)([
                                this.tbElement
                            ], [
                                s.Yi
                            ]);
                            this.parent.setContentHeight('toolbar', true);
                        }
                    } else if (n.AR.isDevice || this.parent.inlineMode.enable) {
                        this.isToolbar = true;
                    }
                    if ((0, n.le)(t) && this.parent.toolbarSettings.type === o.Bv.Expand) {
                        (0, n.IV)([
                            this.tbElement
                        ], [
                            s.Yi
                        ]);
                    }
                };
                e.prototype.wireEvents = function() {
                    if (this.parent.inlineMode.enable && (0, a.FA)()) {
                        return;
                    }
                    n.bi.add(this.tbElement, 'focusin', this.tbFocusHandler, this);
                    n.bi.add(this.tbElement, 'keydown', this.tbKeydownHandler, this);
                };
                e.prototype.unWireEvents = function() {
                    n.bi.remove(this.tbElement, 'focusin', this.tbFocusHandler);
                    n.bi.remove(this.tbElement, 'keydown', this.tbKeydownHandler);
                };
                e.prototype.addEventListener = function() {
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.dropDownModule = new ic(this.parent, this.locator);
                    this.toolbarActionModule = new iu(this.parent);
                    this.parent.on(r.Xr, this.renderToolbar, this);
                    this.parent.on(r.AR, this.scrollHandler, this);
                    this.parent.on(r.$d, this.toolbarBindEvent, this);
                    this.parent.on(r.ko, this.updateToolbarStatus, this);
                    this.parent.on(r.CC, this.onPropertyChanged, this);
                    this.parent.on(r.Jz, this.onRefresh, this);
                    this.parent.on(r.ob, this.destroy, this);
                    this.parent.on(r.ex, this.fullScreen, this);
                    this.parent.on(r.Fx, this.hideScreen, this);
                    this.parent.on(r.W0, this.updateItem, this);
                    this.parent.on(r.rc, this.dropDownBeforeOpenHandler, this);
                    this.parent.on(r.IJ, this.parent.setContentHeight, this.parent);
                    this.parent.on(r.Z7, this.focusChangeHandler, this);
                    this.parent.on(r.uG, this.mouseDownHandler, this);
                    this.parent.on(r.tO, this.mouseDownHandler, this);
                    this.parent.on(r._8, this.setCssClass, this);
                    this.parent.on(r.P0, this.moduleDestroy, this);
                    if (!this.parent.inlineMode.enable && !(0, a.FA)()) {
                        this.parent.on(r.kE, this.toolbarClickHandler, this);
                    }
                };
                e.prototype.removeEventListener = function() {
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.parent.off(r.Xr, this.renderToolbar);
                    this.parent.off(r.AR, this.scrollHandler);
                    this.parent.off(r.$d, this.toolbarBindEvent);
                    this.parent.off(r.ko, this.updateToolbarStatus);
                    this.parent.off(r.CC, this.onPropertyChanged);
                    this.parent.off(r.Jz, this.onRefresh);
                    this.parent.off(r.ob, this.destroy);
                    this.parent.off(r.ex, this.parent.fullScreenModule.showFullScreen);
                    this.parent.off(r.Fx, this.parent.fullScreenModule.hideFullScreen);
                    this.parent.off(r.W0, this.updateItem);
                    this.parent.off(r.rc, this.dropDownBeforeOpenHandler);
                    this.parent.off(r.IJ, this.parent.setContentHeight);
                    this.parent.off(r.Z7, this.focusChangeHandler);
                    this.parent.off(r.uG, this.mouseDownHandler);
                    this.parent.off(r.tO, this.mouseDownHandler);
                    this.parent.off(r._8, this.setCssClass);
                    this.parent.off(r.P0, this.moduleDestroy);
                    if (!this.parent.inlineMode.enable && !(0, a.FA)()) {
                        this.parent.off(r.kE, this.toolbarClickHandler);
                    }
                };
                e.prototype.setCssClass = function(e) {
                    if (this.toolbarObj && e.cssClass) {
                        if ((0, n.le)(e.oldCssClass)) {
                            this.toolbarObj.setProperties({
                                cssClass: (this.toolbarObj.cssClass + ' ' + e.cssClass).trim()
                            });
                        } else {
                            this.toolbarObj.setProperties({
                                cssClass: (this.toolbarObj.cssClass.replace(e.oldCssClass, '').trim() + ' ' + e.cssClass).trim()
                            });
                        }
                    }
                };
                e.prototype.onRefresh = function() {
                    if (!this.parent.inlineMode.enable) {
                        this.refreshToolbarOverflow();
                    }
                    this.parent.setContentHeight('', true);
                };
                e.prototype.onPropertyChanged = function(e) {
                    if (!(0, n.le)(e.newProp.inlineMode)) {
                        for(var t = 0, i = Object.keys(e.newProp.inlineMode); t < i.length; t++){
                            var r = i[t];
                            switch(r){
                                case 'enable':
                                    this.refreshToolbar();
                                    break;
                            }
                        }
                    }
                    if (e.module !== this.getModuleName()) {
                        return;
                    }
                    this.refreshToolbar();
                };
                e.prototype.refreshToolbar = function() {
                    if ((0, n.le)(this.baseToolbar.toolbarObj)) {
                        this.baseToolbar = this.parent.getBaseToolbarObject();
                    }
                    var e = (0, n.Ys)('.' + s.Rj, this.parent.element);
                    var t = (0, n.Ys)('.' + s.zE, this.parent.element);
                    if (t || e) {
                        this.destroyToolbar();
                    }
                    if (this.parent.toolbarSettings.enable) {
                        this.addEventListener();
                        this.renderToolbar();
                        this.parent.wireScrollElementsEvents();
                        if (!(0, n.Ys)('.e-rte-srctextarea', this.parent.element)) {
                            (0, a.j)(this.baseToolbar, this.parent.formatter.editorManager.undoRedoManager.getUndoStatus());
                        }
                        this.parent.notify(r.ny, {});
                    }
                };
                e.prototype.getModuleName = function() {
                    return 'toolbar';
                };
                return e;
            }());
        }),
        9805: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "$E": function() {
                    return n;
                },
                "$j": function() {
                    return ea;
                },
                "Bn": function() {
                    return Z;
                },
                "CY": function() {
                    return el;
                },
                "Cb": function() {
                    return eu;
                },
                "Cd": function() {
                    return ee;
                },
                "Cs": function() {
                    return eh;
                },
                "D6": function() {
                    return ed;
                },
                "Ds": function() {
                    return ef;
                },
                "Dw": function() {
                    return eL;
                },
                "Em": function() {
                    return K;
                },
                "Fs": function() {
                    return er;
                },
                "GY": function() {
                    return v;
                },
                "Gj": function() {
                    return eR;
                },
                "Gp": function() {
                    return l;
                },
                "HC": function() {
                    return ew;
                },
                "Hy": function() {
                    return z;
                },
                "IJ": function() {
                    return e0;
                },
                "IW": function() {
                    return p;
                },
                "Ig": function() {
                    return em;
                },
                "Jh": function() {
                    return ep;
                },
                "LK": function() {
                    return k;
                },
                "MO": function() {
                    return eV;
                },
                "Mv": function() {
                    return q;
                },
                "OC": function() {
                    return eP;
                },
                "PW": function() {
                    return eS;
                },
                "Qk": function() {
                    return eF;
                },
                "Rj": function() {
                    return P;
                },
                "Rw": function() {
                    return eB;
                },
                "TN": function() {
                    return c;
                },
                "UQ": function() {
                    return eg;
                },
                "VE": function() {
                    return eX;
                },
                "Vb": function() {
                    return eJ;
                },
                "Wk": function() {
                    return eI;
                },
                "X7": function() {
                    return F;
                },
                "XS": function() {
                    return et;
                },
                "Xh": function() {
                    return O;
                },
                "Yi": function() {
                    return ei;
                },
                "Z0": function() {
                    return a;
                },
                "Z8": function() {
                    return eb;
                },
                "ZV": function() {
                    return T;
                },
                "_G": function() {
                    return eQ;
                },
                "_R": function() {
                    return e_;
                },
                "br": function() {
                    return L;
                },
                "bs": function() {
                    return e3;
                },
                "cm": function() {
                    return eO;
                },
                "dc": function() {
                    return ec;
                },
                "gr": function() {
                    return g;
                },
                "i7": function() {
                    return en;
                },
                "in": function() {
                    return es;
                },
                "iu": function() {
                    return y;
                },
                "jC": function() {
                    return eA;
                },
                "jQ": function() {
                    return eT;
                },
                "je": function() {
                    return eD;
                },
                "kR": function() {
                    return ey;
                },
                "lm": function() {
                    return r;
                },
                "mO": function() {
                    return eM;
                },
                "o7": function() {
                    return eC;
                },
                "oO": function() {
                    return eE;
                },
                "ok": function() {
                    return eo;
                },
                "rG": function() {
                    return eK;
                },
                "re": function() {
                    return m;
                },
                "rp": function() {
                    return ex;
                },
                "s8": function() {
                    return D;
                },
                "to": function() {
                    return d;
                },
                "uN": function() {
                    return ev;
                },
                "uO": function() {
                    return E;
                },
                "uX": function() {
                    return eN;
                },
                "xu": function() {
                    return o;
                },
                "yH": function() {
                    return x;
                },
                "yW": function() {
                    return ek;
                },
                "yw": function() {
                    return e1;
                },
                "zD": function() {
                    return N;
                },
                "zE": function() {
                    return h;
                }
            });
            var n = 'e-richtexteditor';
            var r = 'e-rtl';
            var s = 'e-content';
            var o = 'e-disabled';
            var a = 'rte-iframe-script-sheet';
            var l = 'rte-iframe-style-sheet';
            var h = 'e-rte-toolbar';
            var c = 'e-rte-tb-fixed';
            var d = 'e-rte-tb-float';
            var p = 'e-rte-tb-abs-float';
            var u = 'e-rte-inline';
            var f = 'e-rte-tb-inline';
            var m = 'e-rte-tb-expand';
            var v = 'e-rte-full-screen';
            var g = 'e-rte-quick-toolbar';
            var b = 'e-rte-pop';
            var y = 'e-tb-static';
            var C = 'e-rte-quick-popup';
            var E = 'e-quick-dropdown';
            var S = 'e-rte-image-popup';
            var w = 'e-rte-inline-popup';
            var T = 'e-rte-inline-dropdown';
            var k = 'e-rte-dropdown-popup';
            var x = 'e-rte-dropdown-icons';
            var L = 'e-rte-dropdown-items';
            var N = 'e-rte-dropdown-btn';
            var D = 'e-rte-content';
            var O = 'e-toolbar-item';
            var A = 'e-toolbar-extended';
            var P = 'e-toolbar-wrapper';
            var M = 'e-popup';
            var R = 'e-separator';
            var B = 'e-minimize';
            var I = 'e-maximize';
            var H = 'e-back';
            var F = 'e-show';
            var j = 'e-hide';
            var z = 'e-visible';
            var q = 'e-focused';
            var V = 'e-remove-white-space';
            var _ = 'e-imgright';
            var U = 'e-imgleft';
            var W = 'e-imgcenter';
            var Z = 'e-imgbreak';
            var Y = 'e-img-caption';
            var X = 'e-rte-img-caption';
            var G = 'e-caption-inline';
            var K = 'e-imginline';
            var J = 'e-rte-character-count';
            var $ = 'e-warning';
            var Q = 'e-error';
            var ee = 'e-icons';
            var et = 'e-active';
            var ei = 'e-expand-open';
            var en = 'e-rte-elements';
            var er = 'e-tbar-btn';
            var es = 'e-rte-horizontal-separator';
            var eo = 'e-tbar-ios-fixed';
            var ea = 'e-rte-list-primary-content';
            var el = 'e-rte-numberformatlist-dropdown';
            var eh = 'e-rte-bulletformatlist-dropdown';
            var ec = 'e-formats-tbar-btn';
            var ed = 'e-font-name-tbar-btn';
            var ep = 'e-font-size-tbar-btn';
            var eu = 'e-alignment-tbar-btn';
            var ef = 'e-rte-fontcolor-element';
            var em = 'e-rte-backgroundcolor-element';
            var ev = 'e-rte-color-content';
            var eg = 'e-rte-fontcolor-dropdown';
            var eb = 'e-rte-backgroundcolor-dropdown';
            var ey = 'e-rte-square-palette';
            var eC = 'e-rte-fontcolor-colorpicker';
            var eE = 'e-rte-backgroundcolor-colorpicker';
            var eS = 'e-rte-readonly';
            var ew = 'e-cell-select';
            var eT = 'e-dashed-border';
            var ek = 'e-alternate-border';
            var ex = 'e-column-resize';
            var eL = 'e-row-resize';
            var eN = 'e-table-box';
            var eD = 'e-rte-hidden';
            var eO = 'e-rte-keepformat';
            var eA = 'e-rte-removeformat';
            var eP = 'e-rte-plainformat';
            var eM = 'e-rte-pasteok';
            var eR = 'e-rte-pastecancel';
            var eB = 'e-rte-dialog-minheight';
            var eI = 'e-resize-handle';
            var eH = 'e-south-east';
            var eF = 'e-rte-image';
            var ej = 'e-resize';
            var ez = 'e-img-focus';
            var eq = 'e-rte-drag-image';
            var eV = 'e-rte-upload-popup';
            var e_ = 'e-popup-open';
            var eU = 'e-img-resize';
            var eW = 'e-droparea';
            var eZ = 'e-img-inner';
            var eY = 'e-upload-files';
            var eX = 'e-rte-dialog-upload';
            var eG = 'e-rte-resize';
            var eK = 'e-custom-tile';
            var eJ = 'e-nocolor-item';
            var e$ = 'e-rte-table';
            var eQ = 'e-rte-table-border';
            var e0 = 'e-rte-table-resize';
            var e1 = 'e-rte-fixed-tb-expand';
            var e3 = 'e-rte-toolbar-enabled';
            var e2 = 'e-south-west';
        }),
        3386: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "$d": function() {
                    return v;
                },
                "AL": function() {
                    return eJ;
                },
                "AR": function() {
                    return eC;
                },
                "Ak": function() {
                    return l;
                },
                "CC": function() {
                    return E;
                },
                "CK": function() {
                    return k;
                },
                "Db": function() {
                    return eL;
                },
                "Ed": function() {
                    return eI;
                },
                "F": function() {
                    return e6;
                },
                "F7": function() {
                    return tv;
                },
                "Fx": function() {
                    return N;
                },
                "Go": function() {
                    return eK;
                },
                "HB": function() {
                    return tf;
                },
                "IJ": function() {
                    return eu;
                },
                "IK": function() {
                    return K;
                },
                "Jz": function() {
                    return f;
                },
                "KS": function() {
                    return tg;
                },
                "Kz": function() {
                    return eS;
                },
                "LF": function() {
                    return s;
                },
                "Np": function() {
                    return tu;
                },
                "OI": function() {
                    return th;
                },
                "P0": function() {
                    return eH;
                },
                "QG": function() {
                    return w;
                },
                "QX": function() {
                    return ef;
                },
                "Qr": function() {
                    return R;
                },
                "RE": function() {
                    return eD;
                },
                "Sy": function() {
                    return Z;
                },
                "T5": function() {
                    return a;
                },
                "T8": function() {
                    return z;
                },
                "Tc": function() {
                    return M;
                },
                "W0": function() {
                    return X;
                },
                "W_": function() {
                    return eP;
                },
                "Wp": function() {
                    return ta;
                },
                "Wz": function() {
                    return ep;
                },
                "Xr": function() {
                    return h;
                },
                "YV": function() {
                    return P;
                },
                "Yb": function() {
                    return ez;
                },
                "Yo": function() {
                    return ew;
                },
                "Z7": function() {
                    return eT;
                },
                "ZY": function() {
                    return eR;
                },
                "_8": function() {
                    return tm;
                },
                "_I": function() {
                    return ti;
                },
                "a$": function() {
                    return c;
                },
                "bb": function() {
                    return eN;
                },
                "bi": function() {
                    return eB;
                },
                "c0": function() {
                    return C;
                },
                "cA": function() {
                    return e8;
                },
                "d$": function() {
                    return H;
                },
                "dI": function() {
                    return eF;
                },
                "dp": function() {
                    return ej;
                },
                "ex": function() {
                    return L;
                },
                "gA": function() {
                    return ed;
                },
                "gk": function() {
                    return y;
                },
                "i8": function() {
                    return W;
                },
                "ib": function() {
                    return I;
                },
                "jh": function() {
                    return ex;
                },
                "jm": function() {
                    return g;
                },
                "kE": function() {
                    return p;
                },
                "ko": function() {
                    return m;
                },
                "kq": function() {
                    return td;
                },
                "l0": function() {
                    return u;
                },
                "lj": function() {
                    return tc;
                },
                "m2": function() {
                    return U;
                },
                "mf": function() {
                    return e_;
                },
                "nG": function() {
                    return _;
                },
                "nd": function() {
                    return O;
                },
                "nk": function() {
                    return tl;
                },
                "ny": function() {
                    return tr;
                },
                "ob": function() {
                    return d;
                },
                "p0": function() {
                    return eV;
                },
                "rL": function() {
                    return G;
                },
                "rc": function() {
                    return ec;
                },
                "s0": function() {
                    return b;
                },
                "s4": function() {
                    return A;
                },
                "s7": function() {
                    return D;
                },
                "sh": function() {
                    return eE;
                },
                "sv": function() {
                    return ea;
                },
                "tC": function() {
                    return q;
                },
                "tO": function() {
                    return eb;
                },
                "td": function() {
                    return ek;
                },
                "tw": function() {
                    return B;
                },
                "uG": function() {
                    return eg;
                },
                "uU": function() {
                    return ey;
                },
                "v": function() {
                    return to;
                },
                "v0": function() {
                    return el;
                },
                "v4": function() {
                    return eM;
                },
                "vD": function() {
                    return e$;
                },
                "vN": function() {
                    return eA;
                },
                "vV": function() {
                    return T;
                },
                "vW": function() {
                    return x;
                },
                "xD": function() {
                    return V;
                },
                "xu": function() {
                    return ts;
                },
                "yR": function() {
                    return S;
                },
                "z6": function() {
                    return eU;
                },
                "zA": function() {
                    return eq;
                },
                "zB": function() {
                    return tt;
                },
                "zD": function() {
                    return o;
                }
            });
            var n = 'create';
            var r = 'destroy';
            var s = 'tableclass';
            var o = 'load';
            var a = 'initial-load';
            var l = 'content-changed';
            var h = 'initial-end';
            var c = 'iframe-click';
            var d = 'destroy';
            var p = 'toolbarClick';
            var u = 'toolbar-refresh';
            var f = 'refresh-begin';
            var m = 'toolbar-updated';
            var v = 'bind-on-end';
            var g = 'render-color-picker';
            var b = 'html-toolbar-click';
            var y = 'markdown-toolbar-click';
            var C = 'destroy-color-picker';
            var E = 'model-changed';
            var S = 'keyUp';
            var w = 'keyDown';
            var T = 'mouseUp';
            var k = 'toolbarCreated';
            var x = 'toolbarRenderComplete';
            var L = 'enableFullScreen';
            var N = 'disableFullScreen';
            var D = 'dropDownSelect';
            var O = 'beforeDropDownItemRender';
            var A = 'execCommandCallBack';
            var P = 'image-toolbar-action';
            var M = 'link-toolbar-action';
            var R = 'resize';
            var B = 'resizeStart';
            var I = 'resizing';
            var H = 'resizeStop';
            var F = 'undo';
            var j = 'redo';
            var z = 'insertLink';
            var q = 'unLink';
            var V = 'editLink';
            var _ = 'openLink';
            var U = 'actionBegin';
            var W = 'actionComplete';
            var Z = 'updatedToolbarStatus';
            var Y = 'actionSuccess';
            var X = 'updateToolbarItem';
            var G = 'insertImage';
            var K = 'insertCompleted';
            var J = 'justifyLeft';
            var $ = 'justifyRight';
            var Q = 'justifyCenter';
            var ee = 'break';
            var et = 'inline';
            var ei = 'insertImgLink';
            var en = 'imgAltText';
            var er = 'delete';
            var es = 'caption';
            var eo = 'imageSize';
            var ea = 'sourceCode';
            var el = 'updateSource';
            var eh = 'toolbarOpen';
            var ec = 'beforeDropDownOpen';
            var ed = 'selection-save';
            var ep = 'selection-restore';
            var eu = 'expandPopupClick';
            var ef = 'count';
            var em = 'contentFocus';
            var ev = 'contentBlur';
            var eg = 'mouseDown';
            var eb = 'sourceCodeMouseDown';
            var ey = 'editAreaClick';
            var eC = 'scroll';
            var eE = 'contentscroll';
            var eS = 'colorPickerChanged';
            var ew = 'tableColorPickerChanged';
            var eT = 'focusChange';
            var ek = 'selectAll';
            var ex = 'selectRange';
            var eL = 'getSelectedHtml';
            var eN = 'renderInlineToolbar';
            var eD = 'paste-content';
            var eO = 'imageModule';
            var eA = 'rtl-mode';
            var eP = 'createTable';
            var eM = 'docClick';
            var eR = 'table-toolbar-action';
            var eB = 'checkUndoStack';
            var eI = 'readOnlyMode';
            var eH = 'moduleDestroy';
            var eF = 'pasteClean';
            var ej = 'enterHandler';
            var ez = 'beforeDialogOpen';
            var eq = 'clearDialogObj';
            var eV = 'dialogOpen';
            var e_ = 'beforeDialogClose';
            var eU = 'dialogClose';
            var eW = 'beforeQuickToolbarOpen';
            var eZ = 'quickToolbarOpen';
            var eY = 'quickToolbarClose';
            var eX = 'popupHide';
            var eG = 'imageSelected';
            var eK = 'imageUploading';
            var eJ = 'imageUploadSuccess';
            var e$ = 'imageUploadFailed';
            var eQ = 'imageRemoving';
            var e0 = 'mediaSelected';
            var e1 = 'mediaUploading';
            var e3 = 'mediaUploadSuccess';
            var e2 = 'mediaUploadFailed';
            var e4 = 'mediaRemoving';
            var e5 = 'afterImageDelete';
            var e7 = 'afterMediaaDelete';
            var e9 = 'drop';
            var e6 = 'xhtmlValidation';
            var e8 = 'beforeImageUpload';
            var te = 'beforeMediaUpload';
            var tt = 'resizeInitialized';
            var ti = 'renderFileManager';
            var tn = 'beforeImageDrop';
            var tr = 'dynamicModule';
            var ts = 'beforePasteCleanup';
            var to = 'afterPasteCleanup';
            var ta = 'updateTbItemsStatus';
            var tl = 'showLinkDialog';
            var th = 'closeLinkDialog';
            var tc = 'showImageDialog';
            var td = 'closeImageDialog';
            var tp = 'closeAudioDialog';
            var tu = 'showTableDialog';
            var tf = 'closeTableDialog';
            var tm = 'closeTableDialog';
            var tv = "address:empty, article:empty, aside:empty, blockquote:empty,\n details:empty, dd:empty, div:empty, dl:empty, dt:empty, fieldset:empty, footer:empty,form:empty, h1:empty,\n h2:empty, h3:empty, h4:empty, h5:empty, h6:empty, header:empty, hgroup:empty, li:empty, main:empty, nav:empty,\n noscript:empty, output:empty, p:empty, pre:empty, section:empty, td:empty, th:empty";
            var tg = "a:empty, abbr:empty, acronym:empty, b:empty, bdi:empty, bdo:empty, big:empty, button:empty,\n canvas:empty, cite:empty, code:empty, data:empty, datalist:empty, del:empty, dfn:empty, em:empty, font:empty, i:empty, iframe:empty,\n ins:empty, kbd:empty, label:empty, map:empty, mark:empty, meter:empty, noscript:empty, object:empty, output:empty, picture:empty, progress:empty,\n q:empty, ruby:empty, s:empty, samp:empty, script:empty, select:empty, slot:empty, small:empty, span:empty, strong:empty, strike:empty, sub:empty, sup:empty, svg:empty,\n template:empty, textarea:empty, time:empty, u:empty, tt:empty, var:empty, wbr:empty";
        }),
        809: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "Bv": function() {
                    return r;
                },
                "iR": function() {
                    return s;
                },
                "y2": function() {
                    return n;
                }
            });
            var n;
            (function(e) {
                e[e["Toolbar"] = 0] = "Toolbar";
                e[e["Content"] = 1] = "Content";
                e[e["Popup"] = 2] = "Popup";
                e[e["LinkToolbar"] = 3] = "LinkToolbar";
                e[e["TextToolbar"] = 4] = "TextToolbar";
                e[e["ImageToolbar"] = 5] = "ImageToolbar";
                e[e["InlineToolbar"] = 6] = "InlineToolbar";
                e[e["TableToolbar"] = 7] = "TableToolbar";
            })(n || (n = {}));
            var r;
            (function(e) {
                e["Expand"] = "Expand";
                e["MultiRow"] = "MultiRow";
                e["Scrollable"] = "Scrollable";
            })(r || (r = {}));
            var s;
            (function(e) {
                e["InsertLink"] = "InsertLink";
                e["InsertImage"] = "InsertImage";
                e["InsertTable"] = "InsertTable";
            })(s || (s = {}));
        }),
        5932: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "AV": function() {
                    return M;
                },
                "E": function() {
                    return T;
                },
                "FA": function() {
                    return u;
                },
                "Iw": function() {
                    return p;
                },
                "Jx": function() {
                    return D;
                },
                "K_": function() {
                    return A;
                },
                "Nu": function() {
                    return E;
                },
                "R1": function() {
                    return f;
                },
                "_N": function() {
                    return b;
                },
                "a_": function() {
                    return y;
                },
                "cC": function() {
                    return O;
                },
                "dW": function() {
                    return S;
                },
                "j": function() {
                    return C;
                },
                "kj": function() {
                    return g;
                },
                "nu": function() {
                    return N;
                },
                "oG": function() {
                    return L;
                },
                "pv": function() {
                    return d;
                },
                "rX": function() {
                    return v;
                },
                "rw": function() {
                    return c;
                },
                "v7": function() {
                    return k;
                },
                "wX": function() {
                    return w;
                }
            });
            var n = i(1807);
            var r = i(9805);
            var s = i(3386);
            var o = i(3276);
            var a = i(8491);
            var l = [
                'Undo',
                'Redo'
            ];
            var h = [
                'a',
                'abbr',
                'acronym',
                'audio',
                'b',
                'bdi',
                'bdo',
                'big',
                'br',
                'button',
                'canvas',
                'cite',
                'code',
                'data',
                'datalist',
                'del',
                'dfn',
                'em',
                'embed',
                'font',
                'i',
                'iframe',
                'img',
                'input',
                'ins',
                'kbd',
                'label',
                'map',
                'mark',
                'meter',
                'noscript',
                'object',
                'output',
                'picture',
                'progress',
                'q',
                'ruby',
                's',
                'samp',
                'script',
                'select',
                'slot',
                'small',
                'span',
                'strong',
                'strike',
                'sub',
                'sup',
                'svg',
                'template',
                'textarea',
                'time',
                'u',
                'tt',
                'var',
                'video',
                'wbr'
            ];
            function c(e, t) {
                var i = -1;
                t.some(function(t, n) {
                    if (typeof t === 'string' && e === t.toLocaleLowerCase()) {
                        i = n;
                        return true;
                    }
                    return false;
                });
                return i;
            }
            function d(e, t) {
                var i = false;
                if (e.classList.contains(t)) {
                    i = true;
                }
                return i;
            }
            function p(e, t, i, r) {
                var s;
                var o;
                for(var a = 0; a < e.length; a++){
                    if (i === 'value' && e[a].value.toLocaleLowerCase() === t.toLocaleLowerCase()) {
                        s = e[a];
                        break;
                    } else if (i === 'text' && e[a].text.toLocaleLowerCase() === t.toLocaleLowerCase()) {
                        s = e[a];
                        break;
                    } else if (i === 'subCommand' && e[a].subCommand.toLocaleLowerCase() === t.toLocaleLowerCase()) {
                        s = e[a];
                        break;
                    }
                }
                if (!(0, n.le)(s)) {
                    switch(r){
                        case 'text':
                            o = s.text;
                            break;
                        case 'value':
                            o = s.value;
                            break;
                        case 'iconCss':
                            o = s.iconCss;
                            break;
                    }
                }
                return o;
            }
            function u() {
                var e = false;
                if (n.AR.isDevice && n.AR.isIos) {
                    e = true;
                }
                return e;
            }
            function f(e) {
                if ((0, n.le)(e)) {
                    return '';
                }
                return e;
            }
            function m(e, t, i) {
                var n = 0;
                if (i) {
                    n = window.pageYOffset + t.getBoundingClientRect().top + e.clientY;
                } else {
                    n = e.pageY;
                }
                return n;
            }
            function v(e, t) {
                var i = t.getService('rteLocale');
                var n = a.Y7[e];
                var r = i.getConstant(n);
                return r;
            }
            function g(e, t, i) {
                M(i);
                var s = e.dropDownModule;
                var a = e.args;
                var l = Object.keys(e.args);
                for(var h = 0, d = l; h < d.length; h++){
                    var u = d[h];
                    for(var m = 0; m < e.tbItems.length; m++){
                        var v = e.tbItems[m].subCommand;
                        var g = v && v.toLocaleLowerCase();
                        if (v && (g === u) || (v === 'UL' && u === 'unorderedlist') || (v === 'OL' && u === 'orderedlist') || (g === 'pre' && u === 'insertcode')) {
                            if (typeof a[u] === 'boolean') {
                                if (a[u] === true) {
                                    (0, n.cn)([
                                        e.tbElements[m]
                                    ], [
                                        r.XS
                                    ]);
                                } else {
                                    (0, n.IV)([
                                        e.tbElements[m]
                                    ], [
                                        r.XS
                                    ]);
                                }
                            } else if ((typeof a[u] === 'string' || a[u] === null) && c(u, e.parent.toolbarSettings.items) > -1) {
                                var b = ((a[u]) ? a[u] : '');
                                var y = '';
                                switch(u){
                                    case 'formats':
                                        {
                                            if ((0, n.le)(s.formatDropDown) || t || (!(0, n.le)(s.formatDropDown) && s.formatDropDown.isDestroyed)) {
                                                break;
                                            }
                                            var C = e.parent.format.types;
                                            var E = (0, n.le)(e.parent.format.default) ? C[0].text : e.parent.format.default;
                                            y = p(C, b, 'subCommand', 'text');
                                            s.formatDropDown.content = ('<span style="display: inline-flex;' + 'width:' + e.parent.format.width + '" >' + '<span class="e-rte-dropdown-btn-text' + ' ' + e.parent.cssClass + '">' + ((0, n.le)(y) ? E : y) + '</span></span>');
                                            s.formatDropDown.dataBind();
                                            break;
                                        }
                                    case 'alignments':
                                        {
                                            if ((0, n.le)(s.alignDropDown) || (!(0, n.le)(s.alignDropDown) && s.alignDropDown.isDestroyed)) {
                                                break;
                                            }
                                            var S = o.Fg;
                                            y = p(S, b, 'subCommand', 'iconCss');
                                            s.alignDropDown.iconCss = (0, n.le)(y) ? 'e-icons e-justify-left' : y;
                                            s.alignDropDown.dataBind();
                                            break;
                                        }
                                    case 'fontname':
                                        {
                                            if ((0, n.le)(s.fontNameDropDown) || t || (!(0, n.le)(s.fontNameDropDown) && s.fontNameDropDown.isDestroyed)) {
                                                break;
                                            }
                                            var w = e.parent.fontFamily.items;
                                            y = p(w, b, 'value', 'text');
                                            var T = (0, n.le)(e.parent.fontFamily.default) ? w[0].text : e.parent.fontFamily.default;
                                            var k = ((0, n.le)(y) ? T : y);
                                            e.tbElements[m].title = k;
                                            s.fontNameDropDown.content = ('<span style="display: inline-flex;' + 'width:' + e.parent.fontFamily.width + '" >' + '<span class="e-rte-dropdown-btn-text' + ' ' + e.parent.cssClass + '">' + k + '</span></span>');
                                            s.fontNameDropDown.dataBind();
                                            break;
                                        }
                                    case 'fontsize':
                                        {
                                            if ((0, n.le)(s.fontSizeDropDown) || (!(0, n.le)(s.fontSizeDropDown) && s.fontSizeDropDown.isDestroyed)) {
                                                break;
                                            }
                                            var x = e.parent.fontSize.items;
                                            var L = (0, n.le)(e.parent.fontSize.default) ? x[1].text : e.parent.fontSize.default;
                                            y = p(x, (b === '' ? L.replace(/\s/g, '') : b), 'value', 'text');
                                            s.fontSizeDropDown.content = ('<span style="display: inline-flex;' + 'width:' + e.parent.fontSize.width + '" >' + '<span class="e-rte-dropdown-btn-text' + ' ' + e.parent.cssClass + '">' + f(y) + '</span></span>');
                                            s.fontSizeDropDown.dataBind();
                                            break;
                                        }
                                }
                            }
                        }
                    }
                }
            }
            function b(e) {
                if (typeof e === 'object') {
                    return e;
                } else {
                    return [
                        e
                    ];
                }
            }
            function y(e, t) {
                var i = [];
                for(var n = 0; n < e.length; n++){
                    for(var r = 0; r < t.length; r++){
                        if (t[r].type === 'Separator') {
                            continue;
                        } else {
                            if (e[n] === 'OrderedList' && t[r].subCommand === 'OL') {
                                i.push(r);
                                break;
                            } else if (e[n] === 'UnorderedList' && t[r].subCommand === 'UL') {
                                i.push(r);
                                break;
                            } else if (e[n] === 'InsertCode' && t[r].subCommand === 'Pre') {
                                i.push(r);
                                break;
                            } else if (e[n] === 'FileManager' && t[r].subCommand === 'File') {
                                i.push(r);
                                break;
                            } else if (typeof (e[n]) === 'object' && e[n].command === 'Custom') {
                                i.push(n);
                                break;
                            } else if (e[n] === t[r].subCommand) {
                                i.push(r);
                                break;
                            }
                        }
                    }
                }
                return i;
            }
            function C(e, t) {
                var i = 0;
                var s = y(b(l), e.toolbarObj.items);
                var o = (0, n.td)('.' + r.Xh, e.toolbarObj.element);
                var a = Object.keys(t);
                for(var h = 0, c = a; h < c.length; h++){
                    var d = c[h];
                    var p = o[s[i]];
                    if (p) {
                        e.toolbarObj.enableItems(p, t[d]);
                    }
                    i++;
                }
            }
            function E(e, t) {
                var i = document.createEvent('HTMLEvents');
                i.initEvent(t, false, true);
                e.dispatchEvent(i);
            }
            function S(e) {
                var t = (0, n.az)('template');
                t.innerHTML = e;
                if (t.content instanceof DocumentFragment) {
                    return t.content;
                } else {
                    return document.createRange().createContextualFragment(e);
                }
            }
            function w(e, t) {
                var i = [];
                for(t = t.firstChild; t; t = t.nextSibling){
                    if (t.nodeType === 3) {
                        i.push(t);
                    } else {
                        i = i.concat(w(e, t));
                    }
                }
                return i;
            }
            function T(e) {
                var t = {};
                var i = Object.keys(e);
                for(var n = 0; n < Object.keys(e).length; n++){
                    t[i[n].toLocaleLowerCase()] = e[i[n]];
                }
                return t;
            }
            function k(e, t) {
                var i;
                if (e !== null && e !== '') {
                    i = t.enableHtmlEncode ? x(D(e), t) : x(e, t);
                    t.setProperties({
                        value: i
                    }, true);
                } else {
                    if (t.enterKey === 'DIV') {
                        i = t.enableHtmlEncode ? '&lt;div&gt;&lt;br/&gt;&lt;/div&gt;' : '<div><br/></div>';
                    } else if (t.enterKey === 'BR') {
                        i = t.enableHtmlEncode ? '&lt;br/&gt;' : '<br/>';
                    } else {
                        i = t.enableHtmlEncode ? '&lt;p&gt;&lt;br/&gt;&lt;/p&gt;' : '<p><br/></p>';
                    }
                }
                return i;
            }
            function x(e, t) {
                var i = document.createElement('div');
                var o = document.createElement('div');
                var a = i.childNodes;
                i.innerHTML = e;
                i.setAttribute('class', 'tempDiv');
                if (a.length > 0) {
                    var l = void 0;
                    var c = void 0;
                    var d = void 0;
                    while(i.firstChild){
                        var p = i.querySelectorAll(s.F7);
                        for(var u = 0; u < p.length; u++){
                            p[u].innerHTML = '<br>';
                        }
                        var f = i.querySelectorAll(s.KS);
                        for(var u = 0; u < f.length; u++){
                            f[u].innerHTML = '&ZeroWidthSpace;';
                        }
                        if (t.enterKey !== 'BR' && ((i.firstChild.nodeName === '#text' && (i.firstChild.textContent.indexOf('\n') < 0 || i.firstChild.textContent.trim() !== '')) || h.indexOf(i.firstChild.nodeName.toLocaleLowerCase()) >= 0)) {
                            if (!l) {
                                if (t.enterKey === 'DIV') {
                                    d = (0, n.az)('div');
                                } else {
                                    d = (0, n.az)('p');
                                }
                                o.appendChild(d);
                                d.appendChild(i.firstChild);
                            } else {
                                c.appendChild(i.firstChild);
                            }
                            c = d;
                            l = true;
                        } else if (i.firstChild.nodeName === '#text' && (i.firstChild.textContent === '\n' || (i.firstChild.textContent.indexOf('\n') >= 0 && i.firstChild.textContent.trim() === ''))) {
                            (0, n.og)(i.firstChild);
                        } else {
                            o.appendChild(i.firstChild);
                            l = false;
                        }
                    }
                    var m = o.querySelectorAll('img');
                    for(var u = 0; u < m.length; u++){
                        if (!m[u].classList.contains(r.Qk)) {
                            m[u].classList.add(r.Qk);
                        }
                        if (!(m[u].classList.contains(r.Em) || m[u].classList.contains(r.Bn))) {
                            m[u].classList.add(r.Em);
                        }
                    }
                }
                return o.innerHTML;
            }
            function L(e) {
                var t;
                if (e.enterKey === 'DIV') {
                    t = e.enableHtmlEncode ? '&lt;div&gt;&lt;br/&gt;&lt;/div&gt;' : '<div><br/></div>';
                } else if (e.enterKey === 'BR') {
                    t = e.enableHtmlEncode ? '&lt;br/&gt;' : '<br/>';
                } else {
                    t = e.enableHtmlEncode ? '&lt;p&gt;&lt;br/&gt;&lt;/p&gt;' : '<p><br/></p>';
                }
                return t;
            }
            function N(e) {
                return (e === '<p><br></p>' || e === '&lt;p&gt;&lt;br&gt;&lt;/p&gt;' || e === '<div><br></div>' || e === '&lt;div&gt;&lt;br&gt;&lt;/div&gt;' || e === '<br>' || e === '&lt;br&gt;' || e === '') ? true : false;
            }
            function D(e) {
                return e.replace(/&amp;/g, '&').replace(/&amp;lt;/g, '<').replace(/&lt;/g, '<').replace(/&amp;gt;/g, '>').replace(/&gt;/g, '>').replace(/&nbsp;/g, ' ').replace(/&amp;nbsp;/g, ' ').replace(/&quot;/g, '');
            }
            function O(e, t) {
                if (t.enableHtmlSanitizer) {
                    var i = n.pJ.beforeSanitize();
                    var r = {
                        cancel: false,
                        helper: null
                    };
                    (0, n.l7)(i, i, r);
                    t.trigger('beforeSanitizeHtml', i);
                    if (i.cancel && !(0, n.le)(i.helper)) {
                        e = i.helper(e);
                    } else if (!i.cancel) {
                        e = n.pJ.serializeValue(i, e);
                    }
                }
                return e;
            }
            function A(e) {
                var t = e.split(',');
                var i = t[0].match(/:(.*?);/)[1];
                var n = atob(t[1]);
                var r = n.length;
                var s = new Uint8Array(r);
                while(r--){
                    s[r] = n.charCodeAt(r);
                }
                return new Blob([
                    s
                ], {
                    type: i
                });
            }
            function P(e, t, i) {
                for(var n = 0; t.length > n; n++){
                    if (t[n].value === i.value || t[n].value === i.subCommand) {
                        return e.localeObj.getConstant(t[n].locale);
                    }
                }
                return i.text;
            }
            function M(e) {
                o.I8.forEach(function(t, i) {
                    o.I8[i].text = P(e, a.Jk, o.I8[i]);
                });
                o.gk.forEach(function(t, i) {
                    o.gk[i].text = P(e, a.Sv, o.gk[i]);
                });
                o.UP.forEach(function(t, i) {
                    o.UP[i].text = P(e, a.Jz, o.UP[i]);
                });
                o.Ju.forEach(function(t, i) {
                    o.Ju[i].text = P(e, a.zD, o.Ju[i]);
                });
            }
        }),
        8491: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "Jk": function() {
                    return s;
                },
                "Jz": function() {
                    return a;
                },
                "Sv": function() {
                    return o;
                },
                "Y7": function() {
                    return r;
                },
                "al": function() {
                    return n;
                },
                "zD": function() {
                    return l;
                }
            });
            var n = {
                'alignments': 'Alignments',
                'justifyLeft': 'Align Left',
                'justifyCenter': 'Align Center',
                'justifyRight': 'Align Right',
                'justifyFull': 'Align Justify',
                'fontName': 'Font Name',
                'fontSize': 'Font Size',
                'fontColor': 'Font Color',
                'backgroundColor': 'Background Color',
                'bold': 'Bold',
                'italic': 'Italic',
                'underline': 'Underline',
                'strikethrough': 'Strikethrough',
                'clearFormat': 'Clear Format',
                'clearAll': 'Clear All',
                'cut': 'Cut',
                'copy': 'Copy',
                'paste': 'Paste',
                'unorderedList': 'Bulleted List',
                'orderedList': 'Numbered List',
                'indent': 'Increase Indent',
                'outdent': 'Decrease Indent',
                'undo': 'Undo',
                'redo': 'Redo',
                'superscript': 'Superscript',
                'subscript': 'Subscript',
                'createLink': 'Insert Link',
                'openLink': 'Open Link',
                'editLink': 'Edit Link',
                'removeLink': 'Remove Link',
                'image': 'Insert Image',
                'replace': 'Replace',
                'align': 'Align',
                'caption': 'Image Caption',
                'remove': 'Remove',
                'insertLink': 'Insert Link',
                'display': 'Display',
                'altText': 'Alternative Text',
                'dimension': 'Change Size',
                'fullscreen': 'Maximize',
                'maximize': 'Maximize',
                'minimize': 'Minimize',
                'lowerCase': 'Lower Case',
                'upperCase': 'Upper Case',
                'print': 'Print',
                'formats': 'Formats',
                'numberFormatList': 'Number Format List',
                'bulletFormatList': 'Bullet Format List',
                'sourcecode': 'Code View',
                'preview': 'Preview',
                'viewside': 'ViewSide',
                'insertCode': 'Insert Code',
                'linkText': 'Display Text',
                'linkTooltipLabel': 'Title',
                'linkWebUrl': 'Web Address',
                'linkTitle': 'Enter a title',
                'linkurl': 'http://example.com',
                'linkOpenInNewWindow': 'Open Link in New Window',
                'linkHeader': 'Insert Link',
                'dialogInsert': 'Insert',
                'dialogCancel': 'Cancel',
                'dialogUpdate': 'Update',
                'imageHeader': 'Insert Image',
                'imageLinkHeader': 'You can also provide a link from the web',
                'mdimageLink': 'Please provide a URL for your image',
                'imageUploadMessage': 'Drop image here or browse to upload',
                'imageDeviceUploadMessage': 'Click here to upload',
                'imageAlternateText': 'Alternate Text',
                'alternateHeader': 'Alternative Text',
                'browse': 'Browse',
                'imageUrl': 'http://example.com/image.png',
                'imageCaption': 'Caption',
                'imageSizeHeader': 'Image Size',
                'imageHeight': 'Height',
                'imageWidth': 'Width',
                'textPlaceholder': 'Enter Text',
                'inserttablebtn': 'Insert Table',
                'tabledialogHeader': 'Insert Table',
                'tableWidth': 'Width',
                'cellpadding': 'Cell Padding',
                'cellspacing': 'Cell Spacing',
                'columns': 'Number of columns',
                'rows': 'Number of rows',
                'tableRows': 'Table Rows',
                'tableColumns': 'Table Columns',
                'tableCellHorizontalAlign': 'Table Cell Horizontal Align',
                'tableCellVerticalAlign': 'Table Cell Vertical Align',
                'createTable': 'Create Table',
                'removeTable': 'Remove Table',
                'tableHeader': 'Table Header',
                'tableRemove': 'Table Remove',
                'tableCellBackground': 'Table Cell Background',
                'tableEditProperties': 'Table Edit Properties',
                'styles': 'Styles',
                'insertColumnLeft': 'Insert Column Left',
                'insertColumnRight': 'Insert Column Right',
                'deleteColumn': 'Delete Column',
                'insertRowBefore': 'Insert Row Before',
                'insertRowAfter': 'Insert Row After',
                'deleteRow': 'Delete Row',
                'tableEditHeader': 'Edit Table',
                'TableHeadingText': 'Heading',
                'TableColText': 'Col',
                'imageInsertLinkHeader': 'Insert Link',
                'editImageHeader': 'Edit Image',
                "alignmentsDropDownLeft": 'Align Left',
                "alignmentsDropDownCenter": 'Align Center',
                "alignmentsDropDownRight": 'Align Right',
                "alignmentsDropDownJustify": 'Align Justify',
                "imageDisplayDropDownInline": 'Inline',
                "imageDisplayDropDownBreak": 'Break',
                "tableInsertRowDropDownBefore": 'Insert row before',
                "tableInsertRowDropDownAfter": 'Insert row after',
                "tableInsertRowDropDownDelete": 'Delete row',
                "tableInsertColumnDropDownLeft": 'Insert column left',
                "tableInsertColumnDropDownRight": 'Insert column right',
                "tableInsertColumnDropDownDelete": 'Delete column',
                "tableVerticalAlignDropDownTop": 'Align Top',
                "tableVerticalAlignDropDownMiddle": 'Align Middle',
                "tableVerticalAlignDropDownBottom": 'Align Bottom',
                "tableStylesDropDownDashedBorder": 'Dashed Borders',
                "tableStylesDropDownAlternateRows": 'Alternate Rows',
                'pasteFormat': 'Paste Format',
                'pasteFormatContent': 'Choose the formatting action',
                'plainText': 'Plain Text',
                'cleanFormat': 'Clean',
                'keepFormat': 'Keep',
                'pasteDialogOk': 'OK',
                'pasteDialogCancel': 'Cancel',
                'fileManager': 'File Manager',
                'fileDialogHeader': 'File Browser',
                "formatsDropDownParagraph": 'Paragraph',
                'formatsDropDownCode': 'Code',
                'formatsDropDownQuotation': 'Quotation',
                'formatsDropDownHeading1': 'Heading 1',
                'formatsDropDownHeading2': 'Heading 2',
                'formatsDropDownHeading3': 'Heading 3',
                'formatsDropDownHeading4': 'Heading 4',
                'fontNameSegoeUI': 'Segoe UI',
                'fontNameArial': 'Arial',
                'fontNameGeorgia': 'Georgia',
                'fontNameImpact': 'Impact',
                'fontNameTahoma': 'Tahoma',
                'fontNameTimesNewRoman': 'Times New Roman',
                'fontNameVerdana': 'Verdana',
                'numberFormatListNumber': 'Number',
                'numberFormatListLowerAlpha': 'LowerAlpha',
                'numberFormatListUpperAlpha': 'UpperAlpha',
                'numberFormatListLowerRoman': 'LowerRoman',
                'numberFormatListUpperRoman': 'UpperRoman',
                'numberFormatListLowerGreek': 'LowerGreek',
                'bulletFormatListDisc': 'Disc',
                'bulletFormatListCircle': 'Circle',
                'bulletFormatListSquare': 'Square',
                'numberFormatListNone': 'None',
                'bulletFormatListNone': 'None'
            };
            var r = {
                'alignments': 'alignments',
                'justifyleft': 'justifyLeft',
                'justifycenter': 'justifyCenter',
                'justifyright': 'justifyRight',
                'justifyfull': 'justifyFull',
                'fontname': 'fontName',
                'fontsize': 'fontSize',
                'fontcolor': 'fontColor',
                'backgroundcolor': 'backgroundColor',
                'bold': 'bold',
                'italic': 'italic',
                'underline': 'underline',
                'strikethrough': 'strikethrough',
                'clearformat': 'clearFormat',
                'clearall': 'clearAll',
                'cut': 'cut',
                'copy': 'copy',
                'paste': 'paste',
                'unorderedlist': 'unorderedList',
                'orderedlist': 'orderedList',
                'indent': 'indent',
                'outdent': 'outdent',
                'undo': 'undo',
                'redo': 'redo',
                'superscript': 'superscript',
                'subscript': 'subscript',
                'createlink': 'createLink',
                'openlink': 'openLink',
                'editlink': 'editLink',
                'removelink': 'removeLink',
                'openimagelink': 'openLink',
                'editimagelink': 'editLink',
                'removeimagelink': 'removeLink',
                'image': 'image',
                'replace': 'replace',
                'align': 'align',
                'caption': 'caption',
                'remove': 'remove',
                'insertlink': 'insertLink',
                'display': 'display',
                'alttext': 'altText',
                'dimension': 'dimension',
                'fullscreen': 'fullscreen',
                'maximize': 'maximize',
                'minimize': 'minimize',
                'lowercase': 'lowerCase',
                'uppercase': 'upperCase',
                'print': 'print',
                'formats': 'formats',
                'numberformatlist': 'numberFormatList',
                'bulletformatlist': 'bulletFormatList',
                'sourcecode': 'sourcecode',
                'preview': 'preview',
                'viewside': 'viewside',
                'insertcode': 'insertCode',
                'tablerows': 'tableRows',
                'tablecolumns': 'tableColumns',
                'tablecellhorizontalalign': 'tableCellHorizontalAlign',
                'tablecellverticalalign': 'tableCellVerticalAlign',
                'createtable': 'createTable',
                'removetable': 'removeTable',
                'tableheader': 'tableHeader',
                'tableremove': 'tableRemove',
                'tablecellbackground': 'tableCellBackground',
                'tableeditproperties': 'tableEditProperties',
                'styles': 'styles',
                'insertcolumnleft': 'insertColumnLeft',
                'insertcolumnright': 'insertColumnRight',
                'deletecolumn': 'deleteColumn',
                'aligntop': 'AlignTop',
                'alignmiddle': 'AlignMiddle',
                'alignbottom': 'AlignBottom',
                'insertrowbefore': 'insertRowBefore',
                'insertrowafter': 'insertRowAfter',
                'deleterow': 'deleteRow'
            };
            var s = [
                {
                    locale: 'fontNameSegoeUI',
                    value: 'Segoe UI'
                },
                {
                    locale: 'fontNameArial',
                    value: 'Arial,Helvetica,sans-serif'
                },
                {
                    locale: 'fontNameGeorgia',
                    value: 'Georgia,serif'
                },
                {
                    locale: 'fontNameImpact',
                    value: 'Impact,Charcoal,sans-serif'
                },
                {
                    locale: 'fontNameTahoma',
                    value: 'Tahoma,Geneva,sans-serif'
                },
                {
                    locale: 'fontNameTimesNewRoman',
                    value: 'Times New Roman,Times,serif'
                },
                {
                    locale: 'fontNameVerdana',
                    value: 'Verdana,Geneva,sans-serif'
                }
            ];
            var o = [
                {
                    locale: 'formatsDropDownParagraph',
                    value: 'P'
                },
                {
                    locale: 'formatsDropDownCode',
                    value: 'Pre'
                },
                {
                    locale: 'formatsDropDownQuotation',
                    value: 'BlockQuote'
                },
                {
                    locale: 'formatsDropDownHeading1',
                    value: 'H1'
                },
                {
                    locale: 'formatsDropDownHeading2',
                    value: 'H2'
                },
                {
                    locale: 'formatsDropDownHeading3',
                    value: 'H3'
                },
                {
                    locale: 'formatsDropDownHeading4',
                    value: 'H4'
                }
            ];
            var a = [
                {
                    locale: 'numberFormatListNone',
                    value: 'none'
                },
                {
                    locale: 'numberFormatListNumber',
                    value: 'decimal'
                },
                {
                    locale: 'numberFormatListLowerAlpha',
                    value: 'lower-alpha'
                },
                {
                    locale: 'numberFormatListUpperAlpha',
                    value: 'upper-alpha'
                },
                {
                    locale: 'numberFormatListLowerRoman',
                    value: 'lower-roman'
                },
                {
                    locale: 'numberFormatListUpperRoman',
                    value: 'upper-roman'
                },
                {
                    locale: 'numberFormatListLowerGreek',
                    value: 'lower-greek'
                }
            ];
            var l = [
                {
                    locale: 'bulletFormatListNone',
                    value: 'none'
                },
                {
                    locale: 'bulletFormatListDisc',
                    value: 'disc'
                },
                {
                    locale: 'bulletFormatListCircle',
                    value: 'circle'
                },
                {
                    locale: 'bulletFormatListSquare',
                    value: 'square'
                }
            ];
        }),
        3276: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "AW": function() {
                    return f;
                },
                "B3": function() {
                    return w;
                },
                "Cz": function() {
                    return T;
                },
                "D1": function() {
                    return p;
                },
                "Fg": function() {
                    return o;
                },
                "Gf": function() {
                    return y;
                },
                "I8": function() {
                    return C;
                },
                "JB": function() {
                    return E;
                },
                "Ju": function() {
                    return x;
                },
                "NO": function() {
                    return h;
                },
                "QP": function() {
                    return N;
                },
                "Sz": function() {
                    return c;
                },
                "Tg": function() {
                    return v;
                },
                "UP": function() {
                    return k;
                },
                "_f": function() {
                    return b;
                },
                "gk": function() {
                    return S;
                },
                "rS": function() {
                    return n;
                },
                "rj": function() {
                    return r;
                },
                "ry": function() {
                    return a;
                }
            });
            var n = [
                'alignments',
                'formats',
                'fontname',
                'fontsize',
                'fontcolor',
                'backgroundcolor',
                'align',
                'display',
                'tablerows',
                'tablecolumns',
                'tablecell',
                'tablecellhorizontalalign',
                'tablecellverticalalign',
                'styles',
                'numberformatlist',
                'bulletformatlist'
            ];
            var r = {
                'alignments': {
                    'id': 'Alignments',
                    'icon': 'e-alignments',
                    'tooltip': 'Alignments',
                    'command': 'Alignments',
                    'subCommand': 'Alignments'
                },
                'justifyleft': {
                    'id': 'JustifyLeft',
                    'icon': 'e-justify-left',
                    'tooltip': 'JustifyLeft',
                    'command': 'Alignments',
                    'subCommand': 'JustifyLeft'
                },
                'justifycenter': {
                    'id': 'JustifyCenter',
                    'icon': 'e-justify-center',
                    'tooltip': 'JustifyCenter',
                    'command': 'Alignments',
                    'subCommand': 'JustifyCenter'
                },
                'justifyright': {
                    'id': 'JustifyRight',
                    'icon': 'e-justify-right',
                    'tooltip': 'JustifyRight',
                    'command': 'Alignments',
                    'subCommand': 'JustifyRight'
                },
                'justifyfull': {
                    'id': 'JustifyFull',
                    'icon': 'e-justify-full',
                    'tooltip': 'JustifyFull',
                    'command': 'Alignments',
                    'subCommand': 'JustifyFull'
                },
                'fontname': {
                    'id': 'FontName',
                    'icon': 'e-font-name',
                    'tooltip': 'Font Name',
                    'command': 'Font',
                    'subCommand': 'FontName'
                },
                'fontsize': {
                    'id': 'FontSize',
                    'icon': 'e-font-size',
                    'tooltip': 'Font Size',
                    'command': 'Font',
                    'subCommand': 'FontSize'
                },
                'fontcolor': {
                    'id': 'FontColor',
                    'icon': 'e-font-color',
                    'tooltip': 'Font Color',
                    'command': 'Font',
                    'subCommand': 'FontColor',
                    'value': '#ff0000ff'
                },
                'backgroundcolor': {
                    'id': 'BackgroundColor',
                    'icon': 'e-background-color',
                    'tooltip': 'Background Color',
                    'command': 'Font',
                    'subCommand': 'BackgroundColor',
                    'value': '#ffff00ff'
                },
                'bold': {
                    'id': 'Bold',
                    'icon': 'e-bold',
                    'tooltip': 'Bold',
                    'command': 'Style',
                    'subCommand': 'Bold'
                },
                'italic': {
                    'id': 'Italic',
                    'icon': 'e-italic',
                    'tooltip': 'Italic',
                    'command': 'Style',
                    'subCommand': 'Italic'
                },
                'underline': {
                    'id': 'Underline',
                    'icon': 'e-underline',
                    'tooltip': 'Underline',
                    'command': 'Style',
                    'subCommand': 'Underline'
                },
                'strikethrough': {
                    'id': 'StrikeThrough',
                    'icon': 'e-strike-through',
                    'tooltip': 'StrikeThrough',
                    'command': 'Style',
                    'subCommand': 'StrikeThrough'
                },
                'clearformat': {
                    'id': 'ClearFormat',
                    'icon': 'e-clear-format',
                    'tooltip': 'Clear Format',
                    'command': 'Clear',
                    'subCommand': 'ClearFormat'
                },
                'clearall': {
                    'id': 'ClearAll',
                    'icon': 'e-clear-all',
                    'tooltip': 'Clear All',
                    'command': 'Clear',
                    'subCommand': 'ClearAll'
                },
                'cut': {
                    'id': 'Cut',
                    'icon': 'e-cut',
                    'tooltip': 'Cut',
                    'command': 'ClipBoard',
                    'subCommand': 'Cut'
                },
                'copy': {
                    'id': 'Copy',
                    'icon': 'e-copy',
                    'tooltip': 'Copy',
                    'command': 'ClipBoard',
                    'subCommand': 'Copy'
                },
                'paste': {
                    'id': 'Paste',
                    'icon': 'e-paste',
                    'tooltip': 'Paste',
                    'command': 'ClipBoard',
                    'subCommand': 'Paste'
                },
                'unorderedlist': {
                    'id': 'UnorderedList',
                    'icon': 'e-unorder-list',
                    'tooltip': 'Bulleted List',
                    'command': 'Lists',
                    'subCommand': 'UL'
                },
                'orderedlist': {
                    'id': 'OrderedList',
                    'icon': 'e-order-list',
                    'tooltip': 'Numbered List',
                    'command': 'Lists',
                    'subCommand': 'OL'
                },
                'numberformatlist': {
                    'id': 'NumberFormatList',
                    'icon': 'e-order-list',
                    'tooltip': 'Number Format List',
                    'command': 'NumberFormatList',
                    'subCommand': 'NumberFormatList'
                },
                'bulletformatlist': {
                    'id': 'BulletFormatList',
                    'icon': 'e-unorder-list',
                    'tooltip': 'Bullet Format List',
                    'command': 'BulletFormatList',
                    'subCommand': 'BulletFormatList'
                },
                'indent': {
                    'id': 'Indent',
                    'icon': 'e-indent',
                    'tooltip': 'Increase Indent',
                    'command': 'Indents',
                    'subCommand': 'Indent'
                },
                'outdent': {
                    'id': 'Outdent',
                    'icon': 'e-outdent',
                    'tooltip': 'Decrease Indent',
                    'command': 'Indents',
                    'subCommand': 'Outdent'
                },
                'undo': {
                    'id': 'Undo',
                    'icon': 'e-undo',
                    'tooltip': 'Undo',
                    'command': 'Actions',
                    'subCommand': 'Undo'
                },
                'redo': {
                    'id': 'Redo',
                    'icon': 'e-redo',
                    'tooltip': 'Redo',
                    'command': 'Actions',
                    'subCommand': 'Redo'
                },
                'superscript': {
                    'id': 'SuperScript',
                    'icon': 'e-super-script',
                    'tooltip': 'Superscript',
                    'command': 'Effects',
                    'subCommand': 'SuperScript'
                },
                'subscript': {
                    'id': 'SubScript',
                    'icon': 'e-sub-script',
                    'tooltip': 'Subscript',
                    'command': 'Effects',
                    'subCommand': 'SubScript'
                },
                'createlink': {
                    'id': 'CreateLink',
                    'icon': 'e-create-link',
                    'tooltip': 'Insert Hyperlink',
                    'command': 'Links',
                    'subCommand': 'CreateLink'
                },
                'openlink': {
                    'id': 'OpenLink',
                    'icon': 'e-open-link',
                    'tooltip': 'Open Link',
                    'command': 'Links',
                    'subCommand': 'OpenLink'
                },
                'editlink': {
                    'id': 'EditLink',
                    'icon': 'e-edit-link',
                    'tooltip': 'Edit Link',
                    'command': 'Links',
                    'subCommand': 'EditLink'
                },
                'removelink': {
                    'id': 'RemoveLink',
                    'icon': 'e-remove-link',
                    'tooltip': 'Remove Link',
                    'command': 'Links',
                    'subCommand': 'RemoveLink'
                },
                'image': {
                    'id': 'Image',
                    'icon': 'e-image',
                    'tooltip': 'Insert Image',
                    'command': 'Images',
                    'subCommand': 'Image'
                },
                'filemanager': {
                    'id': 'FileManager',
                    'icon': 'e-rte-file-manager',
                    'tooltip': 'File Manager',
                    'command': 'Files',
                    'subCommand': 'File'
                },
                'createtable': {
                    'id': 'CreateTable',
                    'icon': 'e-create-table',
                    'tooltip': 'Create Table',
                    'command': 'Table',
                    'subCommand': 'CreateTable'
                },
                'removetable': {
                    'id': 'removeTable',
                    'icon': 'e-remove-table',
                    'tooltip': 'Remove Table',
                    'command': 'removeTable',
                    'subCommand': 'removeTable'
                },
                'replace': {
                    'id': 'Replace',
                    'icon': 'e-replace',
                    'tooltip': 'Replace',
                    'command': 'Images',
                    'subCommand': 'Replace'
                },
                'align': {
                    'id': 'Align',
                    'icon': 'e-align',
                    'tooltip': 'Align',
                    'command': 'Images',
                    'subCommand': 'Align'
                },
                'caption': {
                    'id': 'Caption',
                    'icon': 'e-caption',
                    'tooltip': 'Image Caption',
                    'command': 'Images',
                    'subCommand': 'Caption'
                },
                'remove': {
                    'id': 'Remove',
                    'icon': 'e-remove',
                    'tooltip': 'Remove',
                    'command': 'Images',
                    'subCommand': 'Remove'
                },
                'openimagelink': {
                    'id': 'OpenImageLink',
                    'icon': 'e-open-link',
                    'tooltip': 'Open Link',
                    'command': 'Images',
                    'subCommand': 'OpenImageLink'
                },
                'editimagelink': {
                    'id': 'EditImageLink',
                    'icon': 'e-edit-link',
                    'tooltip': 'Edit Link',
                    'command': 'Images',
                    'subCommand': 'EditImageLink'
                },
                'removeimagelink': {
                    'id': 'RemoveImageLink',
                    'icon': 'e-remove-link',
                    'tooltip': 'Remove Link',
                    'command': 'Images',
                    'subCommand': 'RemoveImageLink'
                },
                'insertlink': {
                    'id': 'InsertLink',
                    'icon': 'e-insert-link',
                    'tooltip': 'Insert Link',
                    'command': 'Images',
                    'subCommand': 'InsertLink'
                },
                'display': {
                    'id': 'Display',
                    'icon': 'e-display',
                    'tooltip': 'Display',
                    'command': 'Images',
                    'subCommand': 'Display'
                },
                'alttext': {
                    'id': 'AltText',
                    'icon': 'e-alt-text',
                    'tooltip': 'Alternative Text',
                    'command': 'Images',
                    'subCommand': 'AltText'
                },
                'dimension': {
                    'id': 'Dimension',
                    'icon': 'e-img-dimension',
                    'tooltip': 'Change Size',
                    'command': 'Images',
                    'subCommand': 'Dimension'
                },
                'fullscreen': {
                    'id': 'Maximize',
                    'icon': 'e-maximize',
                    'tooltip': 'Maximize',
                    'command': 'View',
                    'subCommand': 'Maximize'
                },
                'maximize': {
                    'id': 'Maximize',
                    'icon': 'e-maximize',
                    'tooltip': 'Maximize',
                    'command': 'FullScreen',
                    'subCommand': 'Maximize'
                },
                'minimize': {
                    'id': 'Minimize',
                    'icon': 'e-minimize',
                    'tooltip': 'Minimize',
                    'command': 'FullScreen',
                    'subCommand': 'Minimize'
                },
                'lowercase': {
                    'id': 'LowerCase',
                    'icon': 'e-lower-case',
                    'tooltip': 'Lower Case',
                    'command': 'Casing',
                    'subCommand': 'LowerCase'
                },
                'uppercase': {
                    'id': 'UpperCase',
                    'icon': 'e-upper-case',
                    'tooltip': 'Upper Case',
                    'command': 'Casing',
                    'subCommand': 'UpperCase'
                },
                'print': {
                    'id': 'Print',
                    'icon': 'e-print',
                    'tooltip': 'Print',
                    'command': 'Print',
                    'subCommand': 'Print'
                },
                'formats': {
                    'id': 'Formats',
                    'icon': 'e-formats',
                    'tooltip': 'Formats',
                    'command': 'Formats',
                    'subCommand': 'Formats'
                },
                'sourcecode': {
                    'id': 'SourceCode',
                    'icon': 'e-source-code',
                    'tooltip': 'Source Code',
                    'command': 'SourceCode',
                    'subCommand': 'SourceCode'
                },
                'preview': {
                    'id': 'Preview',
                    'icon': 'e-preview',
                    'tooltip': 'Preview',
                    'command': 'Preview',
                    'subCommand': 'Preview'
                },
                'viewside': {
                    'id': 'ViewSide',
                    'icon': 'e-view-side',
                    'tooltip': 'ViewSide',
                    'command': 'ViewSide',
                    'subCommand': 'ViewSide'
                },
                'insertcode': {
                    'id': 'InsertCode',
                    'icon': 'e-insert-code',
                    'tooltip': 'Insert Code',
                    'command': 'Formats',
                    'subCommand': 'Pre'
                },
                'tableheader': {
                    'id': 'TableHeader',
                    'icon': 'e-table-header',
                    'tooltip': 'Table Header',
                    'command': 'Table',
                    'subCommand': 'TableHeader'
                },
                'tableremove': {
                    'id': 'TableRemove',
                    'icon': 'e-table-remove',
                    'tooltip': 'Table Remove',
                    'command': 'Table',
                    'subCommand': 'TableRemove'
                },
                'tablerows': {
                    'id': 'TableRows',
                    'icon': 'e-table-rows',
                    'tooltip': 'Table Rows',
                    'command': 'Table',
                    'subCommand': 'TableRows'
                },
                'tablecolumns': {
                    'id': 'TableColumns',
                    'icon': 'e-table-columns',
                    'tooltip': 'Table Columns',
                    'command': 'Table',
                    'subCommand': 'TableColumns'
                },
                'tablecell': {
                    'id': 'TableCell',
                    'icon': 'e-table-cell',
                    'tooltip': 'Table Cell',
                    'command': 'Table',
                    'subCommand': 'TableCell'
                },
                'tablecellbackground': {
                    'id': 'TableCellBackground',
                    'icon': 'e-table-cell-background',
                    'tooltip': 'Table Cell Background',
                    'command': 'Table',
                    'subCommand': 'TableCellBackground'
                },
                'tablecellhorizontalalign': {
                    'id': 'TableCellHorizontalAlign',
                    'icon': 'e-table-cell-horizontalAlign',
                    'tooltip': 'Table Cell HorizontalAlign',
                    'command': 'Table',
                    'subCommand': 'TableCellHorizontalAlign'
                },
                'tablecellverticalalign': {
                    'id': 'TableCellVerticalAlign',
                    'icon': 'e-table-cell-verticalAlign',
                    'tooltip': 'Table Cell VerticalAlign',
                    'command': 'Table',
                    'subCommand': 'TableCellVerticalAlign'
                },
                'tableeditproperties': {
                    'id': 'TableEditProperties',
                    'icon': 'e-table-edit-properties',
                    'tooltip': 'Table Edit Properties',
                    'command': 'Table',
                    'subCommand': 'TableEditProperties'
                },
                'styles': {
                    'id': 'Styles',
                    'icon': 'e-table-styles',
                    'tooltip': 'Styles',
                    'command': 'Table',
                    'subCommand': 'Styles'
                }
            };
            var s = [
                {
                    locale: 'alignmentsDropDownLeft',
                    value: 'JustifyLeft'
                },
                {
                    locale: 'alignmentsDropDownCenter',
                    value: 'JustifyCenter'
                },
                {
                    locale: 'alignmentsDropDownRight',
                    value: 'JustifyRight'
                },
                {
                    locale: 'alignmentsDropDownJustify',
                    value: 'JustifyFull'
                }
            ];
            var o = [
                {
                    iconCss: 'e-icons e-justify-left',
                    text: 'Align Left',
                    command: 'Alignments',
                    subCommand: 'JustifyLeft'
                },
                {
                    iconCss: 'e-icons e-justify-center',
                    text: 'Align Center',
                    command: 'Alignments',
                    subCommand: 'JustifyCenter'
                },
                {
                    iconCss: 'e-icons e-justify-right',
                    text: 'Align Right',
                    command: 'Alignments',
                    subCommand: 'JustifyRight'
                },
                {
                    iconCss: 'e-icons e-justify-full',
                    text: 'Align Justify',
                    command: 'Alignments',
                    subCommand: 'JustifyFull'
                }
            ];
            var a = [
                {
                    iconCss: 'e-icons e-justify-left',
                    command: 'Images',
                    subCommand: 'JustifyLeft'
                },
                {
                    iconCss: 'e-icons e-justify-center',
                    command: 'Images',
                    subCommand: 'JustifyCenter'
                },
                {
                    iconCss: 'e-icons e-justify-right',
                    command: 'Images',
                    subCommand: 'JustifyRight'
                }
            ];
            var l = [
                {
                    locale: 'imageDisplayDropDownInline',
                    value: 'Inline'
                },
                {
                    locale: 'imageDisplayDropDownBreak',
                    value: 'Break'
                }
            ];
            var h = [
                {
                    text: 'Inline',
                    cssClass: 'e-inline',
                    command: 'Images',
                    subCommand: 'Inline'
                },
                {
                    text: 'Break',
                    cssClass: 'e-break',
                    command: 'Images',
                    subCommand: 'Break'
                }
            ];
            var c = [
                {
                    iconCss: 'e-icons e-cell-merge',
                    text: 'Merge cells',
                    command: 'Table',
                    subCommand: 'Merge'
                },
                {
                    iconCss: 'e-icons e-cell-horizontal-split',
                    text: 'Horizontal split',
                    command: 'Table',
                    subCommand: 'HorizontalSplit'
                },
                {
                    iconCss: 'e-icons e-cell-vertical-split',
                    text: 'Vertical split',
                    command: 'Table',
                    subCommand: 'VerticalSplit'
                }
            ];
            var d = [
                {
                    locale: 'tableInsertRowDropDownBefore',
                    value: 'InsertRowBefore'
                },
                {
                    locale: 'tableInsertRowDropDownAfter',
                    value: 'InsertRowAfter'
                },
                {
                    locale: 'tableInsertRowDropDownDelete',
                    value: 'DeleteRow'
                }
            ];
            var p = [
                {
                    iconCss: 'e-icons e-insert-row-before',
                    text: 'Insert row before',
                    command: 'Table',
                    subCommand: 'InsertRowBefore'
                },
                {
                    iconCss: 'e-icons e-insert-row-after',
                    text: 'Insert row after',
                    command: 'Table',
                    subCommand: 'InsertRowAfter'
                },
                {
                    iconCss: 'e-icons e-delete-row',
                    text: 'Delete row',
                    command: 'Table',
                    subCommand: 'DeleteRow'
                }
            ];
            var u = [
                {
                    locale: 'tableInsertColumnDropDownLeft',
                    value: 'InsertColumnLeft'
                },
                {
                    locale: 'tableInsertColumnDropDownRight',
                    value: 'InsertColumnRight'
                },
                {
                    locale: 'tableInsertColumnDropDownDelete',
                    value: 'DeleteColumn'
                }
            ];
            var f = [
                {
                    iconCss: 'e-icons e-insert-column-left',
                    text: 'Insert column left',
                    command: 'Table',
                    subCommand: 'InsertColumnLeft'
                },
                {
                    iconCss: 'e-icons e-insert-column-right',
                    text: 'Insert column right',
                    command: 'Table',
                    subCommand: 'InsertColumnRight'
                },
                {
                    iconCss: 'e-icons e-delete-column',
                    text: 'Delete column',
                    command: 'Table',
                    subCommand: 'DeleteColumn'
                }
            ];
            var m = [
                {
                    locale: 'tableVerticalAlignDropDownTop',
                    value: 'AlignTop'
                },
                {
                    locale: 'tableVerticalAlignDropDownMiddle',
                    value: 'AlignMiddle'
                },
                {
                    locale: 'tableVerticalAlignDropDownBottom',
                    value: 'AlignBottom'
                }
            ];
            var v = [
                {
                    iconCss: 'e-icons e-align-top',
                    text: 'Align Top',
                    command: 'Table',
                    subCommand: 'AlignTop'
                },
                {
                    iconCss: 'e-icons e-align-middle',
                    text: 'Align Middle',
                    command: 'Table',
                    subCommand: 'AlignMiddle'
                },
                {
                    iconCss: 'e-icons e-align-bottom',
                    text: 'Align Bottom',
                    command: 'Table',
                    subCommand: 'AlignBottom'
                }
            ];
            var g = [
                {
                    locale: 'tableStylesDropDownDashedBorder',
                    value: 'Dashed'
                },
                {
                    locale: 'tableStylesDropDownAlternateRows',
                    value: 'Alternate'
                }
            ];
            var b = [
                {
                    text: 'Dashed Borders',
                    cssClass: 'e-dashed-borders',
                    command: 'Table',
                    subCommand: 'Dashed'
                },
                {
                    text: 'Alternate Rows',
                    cssClass: 'e-alternate-rows',
                    command: 'Table',
                    subCommand: 'Alternate'
                }
            ];
            var y = [
                'Bold',
                'Italic',
                'Underline',
                '|',
                'Formats',
                'Alignments',
                'OrderedList',
                'UnorderedList',
                '|',
                'CreateLink',
                'Image',
                '|',
                'SourceCode',
                'Undo',
                'Redo'
            ];
            var C = [
                {
                    cssClass: 'e-segoe-ui',
                    text: 'Segoe UI',
                    command: 'Font',
                    subCommand: 'FontName',
                    value: 'Segoe UI'
                },
                {
                    cssClass: 'e-arial',
                    text: 'Arial',
                    command: 'Font',
                    subCommand: 'FontName',
                    value: 'Arial,Helvetica,sans-serif'
                },
                {
                    cssClass: 'e-georgia',
                    text: 'Georgia',
                    command: 'Font',
                    subCommand: 'FontName',
                    value: 'Georgia,serif'
                },
                {
                    cssClass: 'e-impact',
                    text: 'Impact',
                    command: 'Font',
                    subCommand: 'FontName',
                    value: 'Impact,Charcoal,sans-serif'
                },
                {
                    cssClass: 'e-tahoma',
                    text: 'Tahoma',
                    command: 'Font',
                    subCommand: 'FontName',
                    value: 'Tahoma,Geneva,sans-serif'
                },
                {
                    cssClass: 'e-times-new-roman',
                    text: 'Times New Roman',
                    command: 'Font',
                    subCommand: 'FontName',
                    value: 'Times New Roman,Times,serif'
                },
                {
                    cssClass: 'e-verdana',
                    text: 'Verdana',
                    command: 'Font',
                    subCommand: 'FontName',
                    value: 'Verdana,Geneva,sans-serif'
                }
            ];
            var E = [
                {
                    text: '8 pt',
                    value: '8pt'
                },
                {
                    text: '10 pt',
                    value: '10pt'
                },
                {
                    text: '12 pt',
                    value: '12pt'
                },
                {
                    text: '14 pt',
                    value: '14pt'
                },
                {
                    text: '18 pt',
                    value: '18pt'
                },
                {
                    text: '24 pt',
                    value: '24pt'
                },
                {
                    text: '36 pt',
                    value: '36pt'
                }
            ];
            var S = [
                {
                    cssClass: 'e-paragraph',
                    text: 'Paragraph',
                    command: 'Formats',
                    subCommand: 'P',
                    value: 'P'
                },
                {
                    cssClass: 'e-code',
                    text: 'Code',
                    command: 'Formats',
                    subCommand: 'Pre',
                    value: 'Pre'
                },
                {
                    cssClass: 'e-quote',
                    text: 'Quotation',
                    command: 'Formats',
                    subCommand: 'BlockQuote',
                    value: 'BlockQuote'
                },
                {
                    cssClass: 'e-h1',
                    text: 'Heading 1',
                    command: 'Formats',
                    subCommand: 'H1',
                    value: 'H1'
                },
                {
                    cssClass: 'e-h2',
                    text: 'Heading 2',
                    command: 'Formats',
                    subCommand: 'H2',
                    value: 'H2'
                },
                {
                    cssClass: 'e-h3',
                    text: 'Heading 3',
                    command: 'Formats',
                    subCommand: 'H3',
                    value: 'H3'
                },
                {
                    cssClass: 'e-h4',
                    text: 'Heading 4',
                    command: 'Formats',
                    subCommand: 'H4',
                    value: 'H4'
                }
            ];
            var w = {
                'Custom': [
                    '',
                    '#000000',
                    '#e7e6e6',
                    '#44546a',
                    '#4472c4',
                    '#ed7d31',
                    '#a5a5a5',
                    '#ffc000',
                    '#70ad47',
                    '#ff0000',
                    '#f2f2f2',
                    '#808080',
                    '#cfcdcd',
                    '#d5dce4',
                    '#d9e2f3',
                    '#fbe4d5',
                    '#ededed',
                    '#fff2cc',
                    '#e2efd9',
                    '#ffcccc',
                    '#d9d9d9',
                    '#595959',
                    '#aeaaaa',
                    '#acb9ca',
                    '#b4c6e7',
                    '#f7caac',
                    '#dbdbdb',
                    '#ffe599',
                    '#c5e0b3',
                    '#ff8080',
                    '#bfbfbf',
                    '#404040',
                    '#747070',
                    '#8496b0',
                    '#8eaadb',
                    '#f4b083',
                    '#c9c9c9',
                    '#ffd966',
                    '#a8d08d',
                    '#ff3333',
                    '#a6a6a6',
                    '#262626',
                    '#3b3838',
                    '#323e4f',
                    '#2f5496',
                    '#c45911',
                    '#7b7b7b',
                    '#bf8f00',
                    '#538135',
                    '#b30000',
                    '#7f7f7f',
                    '#0d0d0d',
                    '#161616',
                    '#212934',
                    '#1f3763',
                    '#823b0b',
                    '#525252',
                    '#7f5f00',
                    '#375623',
                    '#660000'
                ]
            };
            var T = {
                'Custom': [
                    '',
                    '#000000',
                    '#ffff00',
                    '#00ff00',
                    '#00ffff',
                    '#0000ff',
                    '#ff0000',
                    '#000080',
                    '#800080',
                    '#996633',
                    '#f2f2f2',
                    '#808080',
                    '#ffffcc',
                    '#b3ffb3',
                    '#ccffff',
                    '#ccccff',
                    '#ffcccc',
                    '#ccccff',
                    '#ff80ff',
                    '#f2e6d9',
                    '#d9d9d9',
                    '#595959',
                    '#ffff80',
                    '#80ff80',
                    '#b3ffff',
                    '#8080ff',
                    '#ff8080',
                    '#8080ff',
                    '#ff00ff',
                    '#dfbf9f',
                    '#bfbfbf',
                    '#404040',
                    '#ffff33',
                    '#33ff33',
                    '#33ffff',
                    '#3333ff',
                    '#ff3333',
                    '#0000b3',
                    '#b300b3',
                    '#c68c53',
                    '#a6a6a6',
                    '#262626',
                    '#e6e600',
                    '#00b300',
                    '#009999',
                    '#000099',
                    '#b30000',
                    '#000066',
                    '#660066',
                    '#86592d',
                    '#7f7f7f',
                    '#0d0d0d',
                    '#999900',
                    '#006600',
                    '#006666',
                    '#000066',
                    '#660000',
                    '#00004d',
                    '#4d004d',
                    '#734d26'
                ]
            };
            var k = [
                {
                    text: 'None',
                    command: 'Lists',
                    subCommand: 'NumberFormatList',
                    value: 'none'
                },
                {
                    text: 'Number',
                    command: 'Lists',
                    subCommand: 'NumberFormatList',
                    value: 'decimal'
                },
                {
                    text: 'Lower Greek',
                    command: 'Lists',
                    subCommand: 'NumberFormatList',
                    value: 'lowerGreek'
                },
                {
                    text: 'Lower Roman',
                    command: 'Lists',
                    subCommand: 'NumberFormatList',
                    value: 'lowerRoman'
                },
                {
                    text: 'Upper Alpha',
                    command: 'Lists',
                    subCommand: 'NumberFormatList',
                    value: 'upperAlpha'
                },
                {
                    text: 'Lower Alpha',
                    command: 'Lists',
                    subCommand: 'NumberFormatList',
                    value: 'lowerAlpha'
                },
                {
                    text: 'Upper Roman',
                    command: 'Lists',
                    subCommand: 'NumberFormatList',
                    value: 'upperRoman'
                }
            ];
            var x = [
                {
                    text: 'None',
                    command: 'Lists',
                    subCommand: 'BulletFormatList',
                    value: 'none'
                },
                {
                    text: 'Disc',
                    command: 'Lists',
                    subCommand: 'BulletFormatList',
                    value: 'disc'
                },
                {
                    text: 'Circle',
                    command: 'Lists',
                    subCommand: 'BulletFormatList',
                    value: 'circle'
                },
                {
                    text: 'Square',
                    command: 'Lists',
                    subCommand: 'BulletFormatList',
                    value: 'square'
                }
            ];
            function L(e, t, i) {
                for(var n = 0; t.length > n; n++){
                    if (t[n].value === i.subCommand) {
                        return e.localeObj.getConstant(t[n].locale);
                    }
                }
                return i.text;
            }
            function N(e) {
                o.forEach(function(t, i) {
                    o[i].text = L(e, s, o[i]);
                });
                h.forEach(function(t, i) {
                    h[i].text = L(e, l, h[i]);
                });
                p.forEach(function(t, i) {
                    p[i].text = L(e, d, p[i]);
                });
                f.forEach(function(t, i) {
                    f[i].text = L(e, u, f[i]);
                });
                v.forEach(function(t, i) {
                    v[i].text = L(e, m, v[i]);
                });
                b.forEach(function(t, i) {
                    b[i].text = L(e, g, b[i]);
                });
            }
        }),
        1860: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "r": function() {
                    return T;
                }
            });
            var n = i(1807);
            var r = i(3386);
            var s = i(9805);
            var o = i(759);
            ;
            var a = (undefined && undefined.__extends) || (function() {
                var e = function(t, i) {
                    e = Object.setPrototypeOf || ({
                        __proto__: []
                    } instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    }) || function(e, t) {
                        for(var i in t)if (t.hasOwnProperty(i)) e[i] = t[i];
                    };
                    return e(t, i);
                };
                return function(t, i) {
                    e(t, i);
                    function n() {
                        this.constructor = t;
                    }
                    t.prototype = i === null ? Object.create(i) : (n.prototype = i.prototype, new n());
                };
            })();
            var l = (undefined && undefined.__decorate) || function(e, t, i, n) {
                var r = arguments.length, s = r < 3 ? t : n === null ? n = Object.getOwnPropertyDescriptor(t, i) : n, o;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function") s = Reflect.decorate(e, t, i, n);
                else for(var a = e.length - 1; a >= 0; a--)if (o = e[a]) s = (r < 3 ? o(s) : r > 3 ? o(t, i, s) : o(t, i)) || s;
                return r > 3 && s && Object.defineProperty(t, i, s), s;
            };
            var h = 'e-check';
            var c = 'e-checkbox-disabled';
            var d = 'e-frame';
            var p = 'e-stop';
            var u = 'e-label';
            var f = 'e-ripple-container';
            var m = 'e-ripple-check';
            var v = 'e-ripple-stop';
            var g = 'e-rtl';
            var b = 'e-checkbox-wrapper';
            var y = [
                'title',
                'class',
                'style',
                'disabled',
                'readonly',
                'name',
                'value'
            ];
            var C = (function(e) {
                a(t, e);
                function t(t, i) {
                    var n = e.call(this, t, i) || this;
                    n.isFocused = false;
                    n.isMouseClick = false;
                    n.clickTriggered = false;
                    n.validCheck = true;
                    return n;
                }
                t.prototype.changeState = function(e) {
                    var t;
                    var i;
                    var r = this.getWrapper().getElementsByClassName(d)[0];
                    if (n.re) {
                        i = this.getWrapper().getElementsByClassName(f)[0];
                    }
                    if (e === 'check') {
                        r.classList.remove(p);
                        r.classList.add(h);
                        if (i) {
                            i.classList.remove(v);
                            i.classList.add(m);
                        }
                        t = 'true';
                        this.element.checked = true;
                        if (this.element.required && this.validCheck) {
                            this.element.checked = false;
                            this.validCheck = false;
                        } else if (this.element.required) {
                            this.validCheck = true;
                        }
                    } else if (e === 'uncheck') {
                        (0, n.IV)([
                            r
                        ], [
                            h,
                            p
                        ]);
                        if (i) {
                            (0, n.IV)([
                                i
                            ], [
                                m,
                                v
                            ]);
                        }
                        t = 'false';
                        this.element.checked = false;
                        if (this.element.required && this.validCheck) {
                            this.element.checked = true;
                            this.validCheck = false;
                        } else if (this.element.required) {
                            this.validCheck = true;
                        }
                    } else {
                        r.classList.remove(h);
                        r.classList.add(p);
                        if (i) {
                            i.classList.remove(m);
                            i.classList.add(v);
                        }
                        t = 'mixed';
                        this.element.indeterminate = true;
                    }
                };
                t.prototype.clickHandler = function(e) {
                    if (e.target.tagName === 'INPUT' && this.clickTriggered) {
                        this.clickTriggered = false;
                        return;
                    }
                    if (e.target.tagName === 'SPAN' || e.target.tagName === 'LABEL') {
                        this.clickTriggered = true;
                    }
                    if (this.isMouseClick) {
                        this.focusOutHandler();
                        this.isMouseClick = false;
                    }
                    if (this.indeterminate) {
                        this.changeState(this.checked ? 'check' : 'uncheck');
                        this.indeterminate = false;
                        this.element.indeterminate = false;
                    } else if (this.checked) {
                        this.changeState('uncheck');
                        this.checked = false;
                    } else {
                        this.changeState('check');
                        this.checked = true;
                    }
                    var t = {
                        checked: this.updateVueArrayModel(false),
                        event: e
                    };
                    this.trigger('change', t);
                    e.stopPropagation();
                };
                t.prototype.destroy = function() {
                    var t = this;
                    var i = this.getWrapper();
                    e.prototype.destroy.call(this);
                    if (this.wrapper) {
                        i = this.wrapper;
                        if (!this.disabled) {
                            this.unWireEvents();
                        }
                        if (this.tagName === 'INPUT') {
                            if (this.getWrapper() && i.parentNode) {
                                i.parentNode.insertBefore(this.element, i);
                            }
                            (0, n.og)(i);
                            this.element.checked = false;
                            if (this.indeterminate) {
                                this.element.indeterminate = false;
                            }
                            [
                                'name',
                                'value',
                                'disabled'
                            ].forEach(function(e) {
                                t.element.removeAttribute(e);
                            });
                        } else {
                            [
                                'class'
                            ].forEach(function(e) {
                                i.removeAttribute(e);
                            });
                            i.innerHTML = '';
                        }
                    }
                };
                t.prototype.focusHandler = function() {
                    this.isFocused = true;
                };
                t.prototype.focusOutHandler = function() {
                    var e = this.getWrapper();
                    if (e) {
                        e.classList.remove('e-focus');
                    }
                    this.isFocused = false;
                };
                t.prototype.getModuleName = function() {
                    return 'checkbox';
                };
                t.prototype.getPersistData = function() {
                    return this.addOnPersist([
                        'checked',
                        'indeterminate'
                    ]);
                };
                t.prototype.getWrapper = function() {
                    if (this.element && this.element.parentElement) {
                        return this.element.parentElement.parentElement;
                    } else {
                        return null;
                    }
                };
                t.prototype.initialize = function() {
                    if ((0, n.le)(this.initialCheckedValue)) {
                        this.initialCheckedValue = this.checked;
                    }
                    if (this.name) {
                        this.element.setAttribute('name', this.name);
                    }
                    if (this.value) {
                        this.element.setAttribute('value', this.value);
                        if (this.isVue && typeof this.value === 'boolean' && this.value === true) {
                            this.setProperties({
                                'checked': true
                            }, true);
                        }
                    }
                    if (this.checked) {
                        this.changeState('check');
                    }
                    if (this.indeterminate) {
                        this.changeState();
                    }
                    if (this.disabled) {
                        this.setDisabled();
                    }
                };
                t.prototype.initWrapper = function() {
                    var e = this.element.parentElement;
                    if (!e.classList.contains(b)) {
                        e = this.createElement('div', {
                            className: b
                        });
                        this.element.parentNode.insertBefore(e, this.element);
                    }
                    var t = this.createElement('label', {
                        attrs: {
                            for: this.element.id
                        }
                    });
                    var i = this.createElement('span', {
                        className: 'e-icons ' + d
                    });
                    e.classList.add('e-wrapper');
                    if (this.enableRtl) {
                        e.classList.add(g);
                    }
                    if (this.cssClass) {
                        (0, n.cn)([
                            e
                        ], this.cssClass.split(' '));
                    }
                    e.appendChild(t);
                    t.appendChild(this.element);
                    (0, o.Z5)(this, t);
                    t.appendChild(i);
                    if (n.re) {
                        var r = this.createElement('span', {
                            className: f
                        });
                        if (this.labelPosition === 'Before') {
                            t.appendChild(r);
                        } else {
                            t.insertBefore(r, i);
                        }
                        (0, n.qx)(r, {
                            duration: 400,
                            isCenterRipple: true
                        });
                    }
                    if (this.label) {
                        this.setText(this.label);
                    }
                };
                t.prototype.keyUpHandler = function() {
                    if (this.isFocused) {
                        this.getWrapper().classList.add('e-focus');
                    }
                };
                t.prototype.labelMouseDownHandler = function(e) {
                    this.isMouseClick = true;
                    var t = this.getWrapper().getElementsByClassName(f)[0];
                    (0, o.sg)(e, t);
                };
                t.prototype.labelMouseUpHandler = function(e) {
                    this.isMouseClick = true;
                    var t = this.getWrapper().getElementsByClassName(f)[0];
                    if (t) {
                        var i = t.querySelectorAll('.e-ripple-element');
                        for(var n = 0; n < i.length - 1; n++){
                            t.removeChild(t.childNodes[n]);
                        }
                        (0, o.sg)(e, t);
                    }
                };
                t.prototype.onPropertyChanged = function(e, t) {
                    var i = this.getWrapper();
                    for(var r = 0, s = Object.keys(e); r < s.length; r++){
                        var o = s[r];
                        switch(o){
                            case 'checked':
                                this.indeterminate = false;
                                this.element.indeterminate = false;
                                this.changeState(e.checked ? 'check' : 'uncheck');
                                break;
                            case 'indeterminate':
                                if (e.indeterminate) {
                                    this.changeState();
                                } else {
                                    this.element.indeterminate = false;
                                    this.changeState(this.checked ? 'check' : 'uncheck');
                                }
                                break;
                            case 'disabled':
                                if (e.disabled) {
                                    this.setDisabled();
                                    this.wrapper = this.getWrapper();
                                    this.unWireEvents();
                                } else {
                                    this.element.disabled = false;
                                    i.classList.remove(c);
                                    i.setAttribute('aria-disabled', 'false');
                                    this.wireEvents();
                                }
                                break;
                            case 'cssClass':
                                if (t.cssClass) {
                                    (0, n.IV)([
                                        i
                                    ], t.cssClass.split(' '));
                                }
                                if (e.cssClass) {
                                    (0, n.cn)([
                                        i
                                    ], e.cssClass.split(' '));
                                }
                                break;
                            case 'enableRtl':
                                if (e.enableRtl) {
                                    i.classList.add(g);
                                } else {
                                    i.classList.remove(g);
                                }
                                break;
                            case 'label':
                                this.setText(e.label);
                                break;
                            case 'labelPosition':
                                {
                                    var a = i.getElementsByClassName(u)[0];
                                    var l = i.getElementsByTagName('label')[0];
                                    (0, n.og)(a);
                                    if (e.labelPosition === 'After') {
                                        l.appendChild(a);
                                    } else {
                                        l.insertBefore(a, i.getElementsByClassName(d)[0]);
                                    }
                                    break;
                                }
                            case 'name':
                                this.element.setAttribute('name', e.name);
                                break;
                            case 'value':
                                if (this.isVue && typeof e.value === 'object') {
                                    break;
                                }
                                this.element.setAttribute('value', e.value);
                                break;
                            case 'htmlAttributes':
                                this.updateHtmlAttributeToWrapper();
                                break;
                        }
                    }
                };
                t.prototype.preRender = function() {
                    var e = this.element;
                    this.tagName = this.element.tagName;
                    e = (0, o.Rm)(this.createElement, 'EJS-CHECKBOX', 'checkbox', e, b, 'checkbox');
                    this.element = e;
                    if (this.element.getAttribute('type') !== 'checkbox') {
                        this.element.setAttribute('type', 'checkbox');
                    }
                    if (!this.element.id) {
                        this.element.id = (0, n.QI)('e-' + this.getModuleName());
                    }
                };
                t.prototype.render = function() {
                    this.initWrapper();
                    this.initialize();
                    if (!this.disabled) {
                        this.wireEvents();
                    }
                    this.updateHtmlAttributeToWrapper();
                    this.updateVueArrayModel(true);
                    this.renderComplete();
                    this.wrapper = this.getWrapper();
                };
                t.prototype.setDisabled = function() {
                    var e = this.getWrapper();
                    this.element.disabled = true;
                    e.classList.add(c);
                    e.setAttribute('aria-disabled', 'true');
                };
                t.prototype.setText = function(e) {
                    var t = this.getWrapper();
                    if (!t) {
                        return;
                    }
                    var i = t.getElementsByClassName(u)[0];
                    if (i) {
                        i.textContent = e;
                    } else {
                        e = (this.enableHtmlSanitizer) ? n.pJ.sanitize(e) : e;
                        i = this.createElement('span', {
                            className: u,
                            innerHTML: e
                        });
                        var r = t.getElementsByTagName('label')[0];
                        if (this.labelPosition === 'Before') {
                            r.insertBefore(i, t.getElementsByClassName(d)[0]);
                        } else {
                            r.appendChild(i);
                        }
                    }
                };
                t.prototype.changeHandler = function(e) {
                    e.stopPropagation();
                };
                t.prototype.formResetHandler = function() {
                    this.checked = this.initialCheckedValue;
                    this.element.checked = this.initialCheckedValue;
                };
                t.prototype.unWireEvents = function() {
                    var e = this.wrapper;
                    n.bi.remove(e, 'click', this.clickHandler);
                    n.bi.remove(this.element, 'keyup', this.keyUpHandler);
                    n.bi.remove(this.element, 'focus', this.focusHandler);
                    n.bi.remove(this.element, 'focusout', this.focusOutHandler);
                    var t = e.getElementsByTagName('label')[0];
                    n.bi.remove(t, 'mousedown', this.labelMouseDownHandler);
                    n.bi.remove(t, 'mouseup', this.labelMouseUpHandler);
                    var i = (0, n.oq)(this.element, 'form');
                    if (i) {
                        n.bi.remove(i, 'reset', this.formResetHandler);
                    }
                    if (this.tagName === 'EJS-CHECKBOX') {
                        n.bi.remove(this.element, 'change', this.changeHandler);
                    }
                };
                t.prototype.wireEvents = function() {
                    var e = this.getWrapper();
                    n.bi.add(e, 'click', this.clickHandler, this);
                    n.bi.add(this.element, 'keyup', this.keyUpHandler, this);
                    n.bi.add(this.element, 'focus', this.focusHandler, this);
                    n.bi.add(this.element, 'focusout', this.focusOutHandler, this);
                    var t = e.getElementsByTagName('label')[0];
                    n.bi.add(t, 'mousedown', this.labelMouseDownHandler, this);
                    n.bi.add(t, 'mouseup', this.labelMouseUpHandler, this);
                    var i = (0, n.oq)(this.element, 'form');
                    if (i) {
                        n.bi.add(i, 'reset', this.formResetHandler, this);
                    }
                    if (this.tagName === 'EJS-CHECKBOX') {
                        n.bi.add(this.element, 'change', this.changeHandler, this);
                    }
                };
                t.prototype.updateVueArrayModel = function(e) {
                    if (this.isVue && typeof this.value === 'object') {
                        var t = this.element.value;
                        if (t && this.value) {
                            if (e) {
                                for(var i = 0; i < this.value.length; i++){
                                    if (t === this.value[i]) {
                                        this.changeState('check');
                                        this.setProperties({
                                            'checked': true
                                        }, true);
                                    }
                                }
                            } else {
                                var n = this.value.indexOf(t);
                                if (this.checked) {
                                    if (n < 0) {
                                        this.value.push(t);
                                    }
                                } else {
                                    if (n > -1) {
                                        this.value.splice(n, 1);
                                    }
                                }
                                return this.value;
                            }
                        }
                    }
                    return this.validCheck ? this.element.checked : !this.element.checked;
                };
                t.prototype.updateHtmlAttributeToWrapper = function() {
                    if (!(0, n.le)(this.htmlAttributes)) {
                        for(var e = 0, t = Object.keys(this.htmlAttributes); e < t.length; e++){
                            var i = t[e];
                            if (y.indexOf(i) > -1) {
                                var r = this.getWrapper();
                                if (i === 'class') {
                                    (0, n.cn)([
                                        r
                                    ], this.htmlAttributes[i].split(' '));
                                } else if (i === 'title') {
                                    r.setAttribute(i, this.htmlAttributes[i]);
                                } else if (i === 'style') {
                                    var s = this.getWrapper().getElementsByClassName(d)[0];
                                    s.setAttribute(i, this.htmlAttributes[i]);
                                } else {
                                    this.element.setAttribute(i, this.htmlAttributes[i]);
                                }
                            }
                        }
                    }
                };
                t.prototype.click = function() {
                    this.element.click();
                };
                t.prototype.focusIn = function() {
                    this.element.focus();
                };
                l([
                    (0, n.ju)()
                ], t.prototype, "change", void 0);
                l([
                    (0, n.ju)()
                ], t.prototype, "created", void 0);
                l([
                    (0, n.Z9)(false)
                ], t.prototype, "checked", void 0);
                l([
                    (0, n.Z9)('')
                ], t.prototype, "cssClass", void 0);
                l([
                    (0, n.Z9)(false)
                ], t.prototype, "disabled", void 0);
                l([
                    (0, n.Z9)(false)
                ], t.prototype, "indeterminate", void 0);
                l([
                    (0, n.Z9)('')
                ], t.prototype, "label", void 0);
                l([
                    (0, n.Z9)('After')
                ], t.prototype, "labelPosition", void 0);
                l([
                    (0, n.Z9)('')
                ], t.prototype, "name", void 0);
                l([
                    (0, n.Z9)('')
                ], t.prototype, "value", void 0);
                l([
                    (0, n.Z9)(false)
                ], t.prototype, "enableHtmlSanitizer", void 0);
                l([
                    (0, n.Z9)({})
                ], t.prototype, "htmlAttributes", void 0);
                t = l([
                    n.Zl
                ], t);
                return t;
            }(n.wA));
            var E = i(809);
            var S = i(5932);
            var w = i(1386);
            ;
            var T = (function() {
                function e(e, t) {
                    this.parent = e;
                    this.rteID = e.element.id;
                    this.i10n = t.getService('rteLocale');
                    this.addEventListener();
                    this.serviceLocator = t;
                    this.rendererFactory = t.getService('rendererFactory');
                    this.dialogRenderObj = t.getService('dialogRenderObject');
                }
                e.prototype.addEventListener = function() {
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.parent.on(r.T8, this.linkDialog, this);
                    this.parent.on(r.nk, this.showDialog, this);
                    this.parent.on(r.OI, this.closeDialog, this);
                    this.parent.on(r.QG, this.onKeyDown, this);
                    this.parent.on(r.IK, this.showLinkQuickToolbar, this);
                    this.parent.on(r.zA, this.clearDialogObj, this);
                    this.parent.on(r.Tc, this.onToolbarAction, this);
                    this.parent.on(r.a$, this.onIframeMouseDown, this);
                    this.parent.on(r.tC, this.removeLink, this);
                    this.parent.on(r.xD, this.editLink, this);
                    this.parent.on(r.nG, this.openLink, this);
                    this.parent.on(r.uU, this.editAreaClickHandler, this);
                    this.parent.on(r._8, this.setCssClass, this);
                    this.parent.on(r.ob, this.destroy, this);
                    this.parent.on(r.P0, this.moduleDestroy, this);
                };
                e.prototype.onToolbarAction = function(e) {
                    var t = e.args.item;
                    switch(t.subCommand){
                        case 'OpenLink':
                            this.parent.notify(r.nG, e);
                            break;
                        case 'EditLink':
                            this.parent.notify(r.xD, e);
                            break;
                        case 'RemoveLink':
                            this.parent.notify(r.tC, e);
                            break;
                    }
                };
                e.prototype.removeEventListener = function() {
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.parent.off(r.T8, this.linkDialog);
                    this.parent.off(r.nk, this.showDialog);
                    this.parent.off(r.OI, this.closeDialog);
                    this.parent.off(r.QG, this.onKeyDown);
                    this.parent.off(r.IK, this.showLinkQuickToolbar);
                    this.parent.off(r.zA, this.clearDialogObj);
                    this.parent.off(r.Tc, this.onToolbarAction);
                    this.parent.off(r.tC, this.removeLink);
                    this.parent.off(r.a$, this.onIframeMouseDown);
                    this.parent.off(r.xD, this.editLink);
                    this.parent.off(r.nG, this.openLink);
                    this.parent.off(r.uU, this.editAreaClickHandler);
                    this.parent.off(r._8, this.setCssClass);
                    this.parent.off(r.ob, this.destroy);
                    this.parent.off(r.P0, this.moduleDestroy);
                };
                e.prototype.onIframeMouseDown = function() {
                    if (this.dialogObj) {
                        this.dialogObj.hide({
                            returnValue: true
                        });
                    }
                };
                e.prototype.updateCss = function(e, t) {
                    if (e && t.cssClass) {
                        if ((0, n.le)(t.oldCssClass)) {
                            e.setProperties({
                                cssClass: (e.cssClass + ' ' + t.cssClass).trim()
                            });
                        } else {
                            e.setProperties({
                                cssClass: (e.cssClass.replace(t.oldCssClass, '').trim() + ' ' + t.cssClass).trim()
                            });
                        }
                    }
                };
                e.prototype.setCssClass = function(e) {
                    this.updateCss(this.checkBoxObj, e);
                    this.updateCss(this.dialogObj, e);
                };
                e.prototype.showLinkQuickToolbar = function(e) {
                    if (!(0, n.le)(e.args) && e.args.action !== 'enter' && e.args.action !== 'space') {
                        var t = void 0;
                        var i = void 0;
                        if (e.type !== 'Links' || (0, n.le)(this.parent.quickToolbarModule) || (0, n.le)(this.parent.quickToolbarModule.linkQTBar)) {
                            return;
                        }
                        this.quickToolObj = this.parent.quickToolbarModule;
                        var r = this.parent.element.getBoundingClientRect().top;
                        var s = this.parent.element.getBoundingClientRect().left;
                        var o = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
                        var a;
                        [].forEach.call(e.elements, function(e, t) {
                            if (t === 0) {
                                a = ((e.nodeName === '#text') ? (e.parentNode) : e);
                            }
                        });
                        if (e.isNotify) {
                            var l = this.parent.toolbarModule.getToolbarElement();
                            var h = a.getBoundingClientRect().top;
                            var c = a.getBoundingClientRect().left;
                            var d = h - r;
                            var p = (l) ? (l.offsetHeight + this.parent.toolbarModule.getExpandTBarPopHeight()) : 0;
                            t = (this.parent.iframeSettings.enable) ? s + c : a.getBoundingClientRect().left;
                            i = window.pageYOffset + ((this.parent.iframeSettings.enable) ? (r + p + h) : (r + d));
                        } else {
                            var u = void 0;
                            u = e.args.touches ? e.args.changedTouches[0] : u = e.args;
                            t = (this.parent.iframeSettings.enable) ? window.pageXOffset + s + u.clientX : u.pageX;
                            i = (this.parent.iframeSettings.enable) ? window.pageYOffset + r + u.clientY : u.pageY;
                        }
                        if (this.quickToolObj.linkQTBar) {
                            this.quickToolObj.linkQTBar.showPopup(t, i, o.endContainer);
                        }
                    }
                };
                e.prototype.hideLinkQuickToolbar = function() {
                    if (this.quickToolObj && this.quickToolObj.linkQTBar && document.body.contains(this.quickToolObj.linkQTBar.element)) {
                        this.quickToolObj.linkQTBar.hidePopup();
                    }
                };
                e.prototype.editAreaClickHandler = function(e) {
                    if (this.parent.readonly) {
                        this.hideLinkQuickToolbar();
                        return;
                    }
                    var t = e.args;
                    var i = this.parent.quickToolbarSettings.showOnRightClick;
                    if (t.which === 2 || (i && t.which === 1) || (!i && t.which === 3)) {
                        return;
                    }
                    if (this.parent.editorMode === 'HTML' && this.parent.quickToolbarModule && this.parent.quickToolbarModule.linkQTBar) {
                        this.quickToolObj = this.parent.quickToolbarModule;
                        var r = t.target;
                        r = this.getAnchorNode(r);
                        this.contentModule = this.rendererFactory.getRenderer(E.y2.Content);
                        var s = this.quickToolObj.linkQTBar.element.classList.contains('e-rte-pop');
                        if (r.nodeName === 'A' && (r.childNodes.length > 0 && r.childNodes[0].nodeName !== 'IMG') && e.args.target.nodeName !== 'IMG' && !(0, n.le)((0, n.oq)(this.parent.getRange().startContainer.parentElement, 'A')) && !(0, n.le)((0, n.oq)(this.parent.getRange().endContainer.parentElement, 'A'))) {
                            if (s) {
                                return;
                            }
                            this.showLinkQuickToolbar({
                                args: t,
                                isNotify: false,
                                type: 'Links',
                                elements: [
                                    t.target
                                ]
                            });
                        } else {
                            this.hideLinkQuickToolbar();
                        }
                    }
                };
                e.prototype.onKeyDown = function(e) {
                    var t = e.args;
                    switch(t.action){
                        case 'escape':
                            if (!(0, n.le)(this.dialogObj)) {
                                this.dialogObj.close();
                            }
                            break;
                        case 'insert-link':
                            this.openDialog(true, e);
                            t.preventDefault();
                            break;
                    }
                };
                e.prototype.openDialog = function(e, t) {
                    if (!e) {
                        this.parent.contentModule.getEditPanel().focus();
                    }
                    if (this.parent.editorMode === 'HTML') {
                        var i = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
                        var n = this.parent.formatter.editorManager.nodeSelection.save(i, this.parent.contentModule.getDocument());
                        var r = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(i);
                        var s = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(i);
                        var o = {
                            args: t ? t.args : {
                                item: {
                                    command: 'Links',
                                    subCommand: 'CreateLink'
                                },
                                originalEvent: undefined
                            },
                            selectNode: r,
                            selection: n,
                            selectParent: s
                        };
                        this.linkDialog(o);
                    } else {
                        var a = this.parent.contentModule.getEditPanel();
                        this.parent.formatter.editorManager.markdownSelection.save(a.selectionStart, a.selectionEnd);
                        this.linkDialog({
                            args: {
                                item: {
                                    command: 'Links',
                                    subCommand: 'Link'
                                },
                                originalEvent: t && t.args
                            },
                            member: 'link',
                            text: this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.contentModule.getEditPanel()),
                            module: 'Markdown',
                            name: 'insertLink'
                        });
                    }
                };
                e.prototype.showDialog = function() {
                    this.openDialog(false);
                    this.setCssClass({
                        cssClass: this.parent.cssClass
                    });
                };
                e.prototype.closeDialog = function() {
                    if (this.dialogObj) {
                        this.dialogObj.hide({
                            returnValue: true
                        });
                    }
                };
                e.prototype.clearDialogObj = function() {
                    if (this.dialogObj) {
                        this.dialogObj.destroy();
                        (0, n.og)(this.dialogObj.element);
                        this.dialogObj = null;
                    }
                };
                e.prototype.linkDialog = function(e, t) {
                    var i = this;
                    if (this.dialogObj) {
                        this.dialogObj.hide({
                            returnValue: true
                        });
                        return;
                    }
                    if (this.parent.editorMode === 'HTML' && (e.selectParent.length > 0 && !(0, n.le)(e.selectParent[0].classList) && e.selectParent[0].classList.contains('e-rte-anchor')) && (0, n.le)(t)) {
                        this.editLink(e);
                        return;
                    }
                    var r = this.i10n.getConstant('linkWebUrl');
                    var o = this.i10n.getConstant('linkText');
                    var a = this.i10n.getConstant('linkTooltipLabel');
                    var l = this.i10n.getConstant('linkurl');
                    var h = this.i10n.getConstant('textPlaceholder');
                    var c = this.i10n.getConstant('linkTitle');
                    var d = this.parent.createElement('div', {
                        className: 'e-rte-link-dialog' + ' ' + this.parent.cssClass,
                        id: this.rteID + '_rtelink'
                    });
                    this.parent.element.appendChild(d);
                    var p = this.parent.createElement('div', {
                        className: 'e-rte-linkcontent' + ' ' + this.parent.cssClass,
                        id: this.rteID + '_linkContent'
                    });
                    var u = (this.parent.editorMode === 'HTML') ? '<label>' + a + '</label></div><div class="e-rte-field' + ' ' + this.parent.cssClass + '">' + '<input type="text" data-role ="none" spellcheck="false" placeholder = "' + c + '" class="e-input e-rte-linkTitle' + ' ' + this.parent.cssClass + '"></div>' + '<div class="e-rte-label' + ' ' + this.parent.cssClass + '"></div>' + '<div class="e-rte-field' + ' ' + this.parent.cssClass + '">' + '<input type="checkbox" class="e-rte-linkTarget' + ' ' + this.parent.cssClass + '"  data-role ="none"></div>' : '';
                    var f = '<div class="e-rte-label' + ' ' + this.parent.cssClass + '"><label>' + r + '</label></div>' + '<div class="e-rte-field' + ' ' + this.parent.cssClass + '">' + '<input type="text" data-role ="none" spellcheck="false" placeholder="' + l + '" class="e-input e-rte-linkurl' + ' ' + this.parent.cssClass + '"/></div>' + '<div class="e-rte-label' + ' ' + this.parent.cssClass + '">' + '<label>' + o + '</label></div><div class="e-rte-field' + ' ' + this.parent.cssClass + '"> ' + '<input type="text" data-role ="none" spellcheck="false" class="e-input e-rte-linkText' + ' ' + this.parent.cssClass + '" placeholder="' + h + '">' + '</div><div class="e-rte-label' + ' ' + this.parent.cssClass + '">' + u;
                    var m = (0, S.dW)(f);
                    p.appendChild(m);
                    var v = p.querySelector('.e-rte-linkTarget');
                    var g = p.querySelector('.e-rte-linkurl');
                    var b = p.querySelector('.e-rte-linkText');
                    var y = p.querySelector('.e-rte-linkTitle');
                    var E = this.i10n.getConstant('linkOpenInNewWindow');
                    this.checkBoxObj = new C({
                        label: E,
                        checked: true,
                        enableRtl: this.parent.enableRtl,
                        cssClass: this.parent.cssClass
                    });
                    this.checkBoxObj.isStringTemplate = true;
                    this.checkBoxObj.createElement = this.parent.createElement;
                    this.checkBoxObj.appendTo(v);
                    var w = (this.parent.editorMode === 'HTML') ? e.selection.getRange(this.parent.contentModule.getDocument()).toString() : e.text;
                    var T = this.i10n.getConstant('dialogInsert');
                    var k = this.i10n.getConstant('dialogCancel');
                    var x = e.selection;
                    var L = {
                        selfLink: this,
                        selection: e.selection,
                        selectParent: e.selectParent,
                        args: e.args
                    };
                    var N = {
                        header: this.i10n.getConstant('linkHeader'),
                        content: p,
                        cssClass: s.i7 + ' ' + this.parent.cssClass,
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale,
                        showCloseIcon: true,
                        closeOnEscape: true,
                        width: (n.AR.isDevice) ? '290px' : '310px',
                        height: 'inherit',
                        isModal: n.AR.isDevice,
                        buttons: [
                            {
                                click: this.insertlink.bind(L),
                                buttonModel: {
                                    content: T,
                                    cssClass: 'e-flat e-insertLink' + ' ' + this.parent.cssClass,
                                    isPrimary: true
                                }
                            },
                            {
                                click: this.cancelDialog.bind(L),
                                buttonModel: {
                                    cssClass: 'e-flat' + ' ' + this.parent.cssClass,
                                    content: k
                                }
                            }
                        ],
                        target: (n.AR.isDevice) ? document.body : this.parent.element,
                        animationSettings: {
                            effect: 'None'
                        },
                        close: function(e) {
                            i.parent.isBlur = false;
                            if (e && e.event.returnValue) {
                                if (i.parent.editorMode === 'HTML') {
                                    x.restore();
                                } else {
                                    i.parent.formatter.editorManager.markdownSelection.restore(i.parent.contentModule.getEditPanel());
                                }
                            }
                            i.dialogObj.destroy();
                            (0, n.og)(i.dialogObj.element);
                            var t = i.dialogObj;
                            i.dialogRenderObj.close(t);
                            i.dialogObj = null;
                        }
                    };
                    this.dialogObj = this.dialogRenderObj.render(N);
                    this.dialogObj.createElement = this.parent.createElement;
                    this.dialogObj.appendTo(d);
                    d.style.maxHeight = 'inherit';
                    if ((0, n.le)(this.dialogObj)) {
                        return;
                    }
                    if (!(0, n.le)(t)) {
                        g.value = t.url;
                        b.value = t.text;
                        y.value = t.title;
                        (t.target) ? this.checkBoxObj.checked = true : this.checkBoxObj.checked = false;
                        this.dialogObj.header = t.header;
                        this.dialogObj.element.querySelector('.e-insertLink').textContent = t.btnText;
                    }
                    this.checkUrl(false);
                    if ((this.parent.editorMode === 'HTML' && (0, n.le)(t) && ((!(0, n.le)(w) && w !== '') && (e.selection.range.startOffset === 0) || e.selection.range.startOffset !== e.selection.range.endOffset)) || e.module === 'Markdown') {
                        b.value = w;
                    }
                    n.bi.add(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick, this);
                    if (this.quickToolObj) {
                        this.hideLinkQuickToolbar();
                        if (this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {
                            this.quickToolObj.inlineQTBar.hidePopup();
                        }
                    }
                };
                e.prototype.insertlink = function(e) {
                    var t = this.selfLink.dialogObj.element;
                    var i = t.querySelector('.e-rte-linkurl').value;
                    var r = t.querySelector('.e-rte-linkText').value;
                    var s;
                    if (this.selfLink.parent.editorMode === 'HTML') {
                        s = t.querySelector('.e-rte-linkTitle').value;
                    }
                    var o = (this.selfLink.checkBoxObj.checked) ? '_blank' : null;
                    if (i === '') {
                        this.selfLink.checkUrl(true);
                        return;
                    }
                    if (!this.selfLink.isUrl(i)) {
                        r = (r === '') ? i : r;
                        if (!this.selfLink.parent.enableAutoUrl) {
                            i = i.indexOf('http') > -1 ? i : 'http://' + i;
                        } else {
                            i = i;
                        }
                    } else {
                        this.selfLink.checkUrl(false);
                    }
                    var a = this.selfLink;
                    if (a.parent.editorMode === 'HTML' && (0, n.le)((0, n.oq)(this.selection.range.startContainer.parentNode, '[id=' + "'" + a.parent.contentModule.getPanel().id + "'" + ']'))) {
                        a.parent.contentModule.getEditPanel().focus();
                        if (n.AR.isIE && a.parent.iframeSettings.enable) {
                            this.selection.restore();
                        }
                        var l = a.parent.formatter.editorManager.nodeSelection.getRange(a.parent.contentModule.getDocument());
                        this.selection = a.parent.formatter.editorManager.nodeSelection.save(l, a.parent.contentModule.getDocument());
                        this.selectParent = a.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(l);
                    }
                    var h = {
                        url: i,
                        text: r,
                        title: s,
                        target: o,
                        selection: this.selection,
                        selectParent: this.selectParent
                    };
                    if (document.body.contains(a.dialogObj.element)) {
                        this.selfLink.dialogObj.hide({
                            returnValue: false
                        });
                    }
                    if ((0, w.FA)() && a.parent.iframeSettings.enable) {
                        (0, n.Ys)('iframe', a.parent.element).contentWindow.focus();
                    }
                    if (a.parent.editorMode === 'HTML') {
                        this.selection.restore();
                    }
                    if (a.parent.formatter.getUndoRedoStack().length === 0) {
                        a.parent.formatter.saveData();
                    }
                    var c;
                    if (!(0, n.le)(this.args) && this.args.code === 'KeyK') {
                        var d = this.args;
                        (0, n.l7)(this.args, {
                            item: {
                                command: 'Links',
                                subCommand: 'CreateLink'
                            },
                            originalEvent: d
                        }, true);
                        var p = {
                            item: {
                                command: 'Links',
                                subCommand: 'CreateLink'
                            },
                            originalEvent: d
                        };
                        c = p;
                    } else {
                        c = this.args;
                    }
                    this.selfLink.parent.formatter.process(this.selfLink.parent, c, (!(0, n.le)(this.args) && this.args.originalEvent), h);
                    this.selfLink.parent.contentModule.getEditPanel().focus();
                };
                e.prototype.isUrl = function(e) {
                    var t = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/gi;
                    return t.test(e);
                };
                e.prototype.checkUrl = function(e) {
                    var t = this.dialogObj.element;
                    var i = t.querySelector('.e-rte-linkurl');
                    if (e) {
                        (0, n.cn)([
                            i
                        ], 'e-error');
                        i.setSelectionRange(0, i.value.length);
                        i.focus();
                    } else {
                        (0, n.IV)([
                            i
                        ], 'e-error');
                    }
                };
                e.prototype.removeLink = function(e) {
                    if (this.parent.formatter.getUndoRedoStack().length === 0) {
                        this.parent.formatter.saveData();
                    }
                    var t = this.getAnchorNode(e.selectParent[0]);
                    this.parent.formatter.process(this.parent, e.args, e.args, {
                        selectNode: e.selectNode,
                        selectParent: e.selectParent,
                        selection: e.selection,
                        text: t.innerText,
                        subCommand: e.args.item.subCommand
                    });
                    if ((0, w.FA)() && this.parent.iframeSettings.enable) {
                        (0, n.Ys)('iframe', this.parent.element).contentWindow.focus();
                    } else {
                        this.parent.contentModule.getEditPanel().focus();
                    }
                    this.hideLinkQuickToolbar();
                };
                e.prototype.openLink = function(e) {
                    var t = this.getAnchorNode(e.selectParent[0]);
                    if (t.classList.contains('e-rte-anchor') || t.tagName === 'A') {
                        this.parent.formatter.process(this.parent, e.args, e.args, {
                            url: t.href,
                            text: t.innerText,
                            target: t.target === '' ? '_self' : '_blank',
                            selectNode: e.selectNode,
                            subCommand: e.args.item.subCommand
                        });
                    }
                };
                e.prototype.getAnchorNode = function(e) {
                    var t = (0, n.oq)(e, 'a');
                    return (t ? t : e);
                };
                e.prototype.editLink = function(e) {
                    var t = this.getAnchorNode(e.selectNode[0]);
                    var i = this.getAnchorNode(e.selectParent[0]);
                    i = t.nodeName === 'A' ? t : i;
                    if (i.classList.contains('e-rte-anchor') || i.tagName === 'A') {
                        var n = this.i10n.getConstant('dialogUpdate');
                        var r = {
                            url: i.getAttribute('href'),
                            text: i.innerText,
                            title: i.title,
                            target: i.target,
                            header: this.i10n.getConstant('editLink'),
                            btnText: n
                        };
                        this.linkDialog(e, r);
                    }
                };
                e.prototype.cancelDialog = function(e) {
                    this.selfLink.parent.isBlur = false;
                    this.selfLink.dialogObj.hide({
                        returnValue: true
                    });
                    if ((0, w.FA)()) {
                        this.selection.restore();
                    } else {
                        this.selfLink.parent.contentModule.getEditPanel().focus();
                    }
                };
                e.prototype.onDocumentClick = function(e) {
                    var t = e.target;
                    if (!(0, n.le)(this.dialogObj) && ((!(0, n.oq)(t, '[id=' + "'" + this.dialogObj.element.id + "'" + ']') && this.parent.toolbarSettings.enable && this.parent.getToolbarElement() && !this.parent.getToolbarElement().contains(e.target)) || (((this.parent.getToolbarElement() && this.parent.getToolbarElement().contains(e.target)) || this.parent.inlineMode.enable && !(0, n.oq)(t, '#' + this.dialogObj.element.id)) && !(0, n.oq)(t, '#' + this.parent.getID() + '_toolbar_CreateLink') && !t.querySelector('#' + this.parent.getID() + '_toolbar_CreateLink')))) {
                        this.dialogObj.hide({
                            returnValue: true
                        });
                        n.bi.remove(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick);
                        this.parent.isBlur = true;
                        (0, S.Nu)(this.parent.element, 'focusout');
                    }
                };
                e.prototype.destroy = function() {
                    this.removeEventListener();
                };
                e.prototype.moduleDestroy = function() {
                    this.parent = null;
                };
                e.prototype.getModuleName = function() {
                    return 'link';
                };
                return e;
            }());
        }),
        9123: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "i": function() {
                    return d;
                }
            });
            var n = i(1807);
            var r = i(9486);
            var s = i(78);
            var o = i(3386);
            var a = i(809);
            var l = i(8801);
            var h = i(9805);
            var c = i(5932);
            var d = (function() {
                function e(e, t) {
                    this.ensureInsideTableList = true;
                    this.pageX = null;
                    this.pageY = null;
                    this.moveEle = null;
                    this.currentColumnResize = '';
                    this.currentMarginLeft = 0;
                    this.parent = e;
                    this.rteID = e.element.id;
                    this.l10n = t.getService('rteLocale');
                    this.rendererFactory = t.getService('rendererFactory');
                    this.dialogRenderObj = t.getService('dialogRenderObject');
                    this.addEventListener();
                }
                e.prototype.addEventListener = function() {
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.parent.on(o.W_, this.renderDlgContent, this);
                    this.parent.on(o.Xr, this.afterRender, this);
                    this.parent.on(o.ny, this.afterRender, this);
                    this.parent.on(o.Np, this.showDialog, this);
                    this.parent.on(o.HB, this.closeDialog, this);
                    this.parent.on(o.v4, this.docClick, this);
                    this.parent.on(o.uU, this.editAreaClickHandler, this);
                    this.parent.on(o.zA, this.clearDialogObj, this);
                    this.parent.on(o.ZY, this.onToolbarAction, this);
                    this.parent.on(o.s7, this.dropdownSelect, this);
                    this.parent.on(o.QG, this.keyDown, this);
                    this.parent.on(o.vV, this.selectionTable, this);
                    this.parent.on(o._8, this.setCssClass, this);
                    this.parent.on(o.ob, this.destroy, this);
                    this.parent.on(o.P0, this.moduleDestroy, this);
                };
                e.prototype.removeEventListener = function() {
                    if (this.parent.isDestroyed) {
                        return;
                    }
                    this.parent.off(o.W_, this.renderDlgContent);
                    this.parent.off(o.Xr, this.afterRender);
                    this.parent.off(o.ny, this.afterRender);
                    this.parent.off(o.v4, this.docClick);
                    this.parent.off(o.Np, this.showDialog);
                    this.parent.off(o.HB, this.closeDialog);
                    this.parent.off(o.uU, this.editAreaClickHandler);
                    this.parent.off(o.zA, this.clearDialogObj);
                    this.parent.off(o.ZY, this.onToolbarAction);
                    this.parent.off(o.s7, this.dropdownSelect);
                    this.parent.off(o.uG, this.cellSelect);
                    this.parent.off(o.Yo, this.setBGColor);
                    this.parent.off(o.QG, this.keyDown);
                    this.parent.off(o.vV, this.selectionTable);
                    this.parent.off(o._8, this.setCssClass);
                    this.parent.off(o.ob, this.destroy);
                    this.parent.off(o.P0, this.moduleDestroy);
                };
                e.prototype.updateCss = function(e, t) {
                    if (e && t.cssClass) {
                        if ((0, n.le)(t.oldCssClass)) {
                            e.setProperties({
                                cssClass: (e.cssClass + ' ' + t.cssClass).trim()
                            });
                        } else {
                            e.setProperties({
                                cssClass: (e.cssClass.replace(t.oldCssClass, '').trim() + ' ' + t.cssClass).trim()
                            });
                        }
                    }
                };
                e.prototype.setCssClass = function(e) {
                    if (this.popupObj && e.cssClass) {
                        if ((0, n.le)(e.oldCssClass)) {
                            (0, n.cn)([
                                this.popupObj.element
                            ], e.cssClass);
                        } else {
                            (0, n.IV)([
                                this.popupObj.element
                            ], e.oldCssClass);
                            (0, n.cn)([
                                this.popupObj.element
                            ], e.cssClass);
                        }
                    }
                    this.updateCss(this.createTableButton, e);
                    this.updateCss(this.editdlgObj, e);
                    var t = [
                        this.columnTextBox,
                        this.rowTextBox,
                        this.tableWidthNum,
                        this.tableCellPadding,
                        this.tableCellSpacing
                    ];
                    for(var i = 0; i < t.length; i++){
                        this.updateCss(t[i], e);
                    }
                };
                e.prototype.selectionTable = function(e) {
                    var t = e.args.target;
                    if (n.AR.info.name === 'mozilla' && !(0, n.le)((0, n.oq)(t, 'table')) && (0, n.oq)(t, 'table').tagName === 'TABLE') {
                        this.parent.contentModule.getEditPanel().setAttribute('contenteditable', 'true');
                    }
                };
                e.prototype.afterRender = function() {
                    if ((0, n.le)(this.contentModule)) {
                        this.contentModule = this.rendererFactory.getRenderer(a.y2.Content);
                        this.parent.on(o.Yo, this.setBGColor, this);
                        this.parent.on(o.uG, this.cellSelect, this);
                        if (this.parent.tableSettings.resize) {
                            n.bi.add(this.parent.contentModule.getEditPanel(), n.AR.touchStartEvent, this.resizeStart, this);
                        }
                        if (!n.AR.isDevice && this.parent.tableSettings.resize) {
                            n.bi.add(this.contentModule.getEditPanel(), 'mouseover', this.resizeHelper, this);
                        }
                    }
                };
                e.prototype.dropdownSelect = function(e) {
                    var t = e.item;
                    if (!document.body.contains(document.body.querySelector('.e-rte-quick-toolbar')) || t.command !== 'Table') {
                        return;
                    }
                    var i = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
                    var n = {
                        args: e,
                        selection: this.parent.formatter.editorManager.nodeSelection.save(i, this.contentModule.getDocument()),
                        selectParent: this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(i)
                    };
                    switch(t.subCommand){
                        case 'InsertRowBefore':
                        case 'InsertRowAfter':
                            this.addRow(n.selection, e);
                            break;
                        case 'InsertColumnLeft':
                        case 'InsertColumnRight':
                            this.addColumn(n.selection, e);
                            break;
                        case 'DeleteColumn':
                        case 'DeleteRow':
                            this.removeRowColumn(n.selection, e);
                            break;
                        case 'AlignTop':
                        case 'AlignMiddle':
                        case 'AlignBottom':
                            this.verticalAlign(n, e);
                            break;
                        case 'Dashed':
                        case 'Alternate':
                        case 'Custom':
                            this.tableStyles(n, t.subCommand);
                            break;
                        case 'Merge':
                        case 'VerticalSplit':
                        case 'HorizontalSplit':
                            this.UpdateCells(n.selection, e);
                            break;
                    }
                };
                e.prototype.UpdateCells = function(e, t) {
                    this.parent.formatter.process(this.parent, t, t, {
                        selection: e,
                        subCommand: t.item.subCommand
                    });
                    this.hideTableQuickToolbar();
                };
                e.prototype.keyDown = function(e) {
                    var t = e.args;
                    var i = this;
                    switch(t.action){
                        case 'escape':
                            break;
                        case 'insert-table':
                            this.openDialog(true, e);
                            t.preventDefault();
                            break;
                    }
                    if (!(0, n.le)(this.parent.formatter.editorManager.nodeSelection) && this.contentModule && t.code !== 'KeyK') {
                        var r = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
                        var s = this.parent.formatter.editorManager.nodeSelection.save(r, this.contentModule.getDocument());
                        var o = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(r)[0];
                        o = (o && o.tagName !== 'TD' && o.tagName !== 'TH') ? o.parentElement : o;
                        if ((t.keyCode === 8 || t.keyCode === 46) || (t.ctrlKey && t.keyCode === 88)) {
                            if (o && o.tagName === 'TBODY') {
                                t.preventDefault();
                                i.removeTable(s, t, true);
                            } else if (o && o.querySelectorAll('table').length > 0) {
                                this.removeResizeElement();
                                this.hideTableQuickToolbar();
                            }
                        }
                        if (o && o.tagName !== 'TD' && o.tagName !== 'TH') {
                            var a = (0, n.oq)(o, 'td');
                            o = !(0, n.le)(a) && this.parent.inputElement.contains(a) ? a : o;
                        }
                        if (o && (o.tagName === 'TD' || o.tagName === 'TH')) {
                            switch(t.keyCode){
                                case 9:
                                case 37:
                                case 39:
                                    i.tabSelection(t, s, o);
                                    break;
                                case 40:
                                case 38:
                                    i.tableArrowNavigation(t, s, o);
                                    break;
                            }
                        }
                    }
                };
                e.prototype.openDialog = function(e, t) {
                    if (!e) {
                        this.parent.contentModule.getEditPanel().focus();
                    }
                    if (this.parent.editorMode === 'HTML') {
                        var i = this.parent.contentModule.getDocument();
                        var n = this.parent.formatter.editorManager.nodeSelection.getRange(i);
                        var r = this.parent.formatter.editorManager.nodeSelection.save(n, i);
                        var s = {
                            originalEvent: t ? t.args : {
                                action: 'insert-table'
                            },
                            item: {
                                command: 'Table',
                                subCommand: 'CreateTable'
                            }
                        };
                        this.insertTableDialog({
                            self: this,
                            args: s,
                            selection: r
                        });
                    }
                };
                e.prototype.showDialog = function() {
                    this.openDialog(false);
                    this.setCssClass({
                        cssClass: this.parent.cssClass
                    });
                };
                e.prototype.closeDialog = function() {
                    if (this.editdlgObj) {
                        this.editdlgObj.hide({
                            returnValue: true
                        });
                    }
                };
                e.prototype.onToolbarAction = function(e) {
                    var t = e.args.item;
                    switch(t.subCommand){
                        case 'TableHeader':
                            this.tableHeader(e.selection, e.args);
                            break;
                        case 'TableRemove':
                            this.removeTable(e.selection, e.args);
                            break;
                        case 'TableEditProperties':
                            this.editTable(e);
                            break;
                    }
                };
                e.prototype.verticalAlign = function(e, t) {
                    var i = (0, n.oq)(e.selectParent[0], 'td') || (0, n.oq)(e.selectParent[0], 'th');
                    if (i) {
                        this.parent.formatter.process(this.parent, t, t, {
                            tableCell: i,
                            subCommand: t.item.subCommand
                        });
                    }
                };
                e.prototype.tableStyles = function(e, t) {
                    var i = (0, n.oq)(e.selectParent[0], 'table');
                    if (t === 'Dashed') {
                        (this.parent.element.classList.contains(h.jQ)) ? this.parent.element.classList.remove(h.jQ) : this.parent.element.classList.add(h.jQ);
                        (i.classList.contains(h.jQ)) ? i.classList.remove(h.jQ) : i.classList.add(h.jQ);
                    }
                    if (t === 'Alternate') {
                        (this.parent.element.classList.contains(h.yW)) ? this.parent.element.classList.remove(h.yW) : this.parent.element.classList.add(h.yW);
                        (i.classList.contains(h.yW)) ? i.classList.remove(h.yW) : i.classList.add(h.yW);
                    }
                    if (e.args && e.args.item.cssClass) {
                        var r = e.args.item.cssClass.split(' ');
                        for(var s = 0; s < r.length; s++){
                            if (i.classList.contains(r[s])) {
                                i.classList.remove(r[s]);
                            } else {
                                i.classList.add(r[s]);
                            }
                        }
                    }
                    this.parent.formatter.saveData();
                    this.parent.formatter.editorManager.nodeSelection.restore();
                };
                e.prototype.insideList = function(e) {
                    var t = this.parent.formatter.editorManager.domNode.blockNodes();
                    var i = [];
                    for(var n = 0; n < t.length; n++){
                        if (t[n].parentNode.tagName === 'LI') {
                            i.push(t[n].parentNode);
                        } else if (t[n].tagName === 'LI' && t[n].childNodes[0].tagName !== 'P' && (t[n].childNodes[0].tagName !== 'OL' && t[n].childNodes[0].tagName !== 'UL')) {
                            i.push(t[n]);
                        }
                    }
                    if (i.length > 1 || i.length && ((e.startOffset === 0 && e.endOffset === 0))) {
                        this.ensureInsideTableList = true;
                        return true;
                    } else {
                        this.ensureInsideTableList = false;
                        return false;
                    }
                };
                e.prototype.tabSelection = function(e, t, i) {
                    var r = this.insideList(t.range);
                    if ((e.keyCode === 37 || e.keyCode === 39) && t.range.startContainer.nodeType === 3 || r) {
                        return;
                    }
                    e.preventDefault();
                    i.classList.remove(h.HC);
                    if (!e.shiftKey && e.keyCode !== 37) {
                        var s = (!(0, n.le)(i.nextSibling)) ? i.nextSibling : (!(0, n.le)((0, n.oq)(i, 'tr').nextSibling) ? (0, n.oq)(i, 'tr').nextSibling.childNodes[0] : (!(0, n.le)((0, n.oq)(i, 'table').nextSibling)) ? ((0, n.oq)(i, 'table').nextSibling.nodeName.toLowerCase() === 'td') ? (0, n.oq)(i, 'table').nextSibling : i : i);
                        if (i === s && i.nodeName === 'TH') {
                            s = (0, n.oq)(i, 'table').rows[1].cells[0];
                        }
                        if (e.keyCode === 39 && i === s) {
                            s = (0, n.oq)(i, 'table').nextSibling;
                        }
                        if (s) {
                            (s.textContent.trim() !== '' && (0, n.oq)(s, 'td')) ? t.setSelectionNode(this.contentModule.getDocument(), s) : t.setSelectionText(this.contentModule.getDocument(), s, s, 0, 0);
                        }
                        if (i === s && e.keyCode !== 39 && s) {
                            i.classList.add(h.HC);
                            this.addRow(t, e, true);
                            i.classList.remove(h.HC);
                            s = s.parentElement.nextSibling ? s.parentElement.nextSibling.firstChild : s.parentElement.firstChild;
                            (s.textContent.trim() !== '' && (0, n.oq)(s, 'td')) ? t.setSelectionNode(this.contentModule.getDocument(), s) : t.setSelectionText(this.contentModule.getDocument(), s, s, 0, 0);
                        }
                    } else {
                        var o = (!(0, n.le)(i.previousSibling)) ? i.previousSibling : (!(0, n.le)((0, n.oq)(i, 'tr').previousSibling) ? (0, n.oq)(i, 'tr').previousSibling.childNodes[(0, n.oq)(i, 'tr').previousSibling.childNodes.length - 1] : (!(0, n.le)((0, n.oq)(i, 'table').previousSibling)) ? ((0, n.oq)(i, 'table').previousSibling.nodeName.toLowerCase() === 'td') ? (0, n.oq)(i, 'table').previousSibling : i : i);
                        if (i === o && i.cellIndex === 0 && (0, n.oq)(i, 'table').tHead) {
                            var a = (0, n.oq)(i, 'table');
                            o = a.rows[0].cells[a.rows[0].cells.length - 1];
                        }
                        if (e.keyCode === 37 && i === o) {
                            o = (0, n.oq)(i, 'table').previousSibling;
                        }
                        if (o) {
                            (o.textContent.trim() !== '' && (0, n.oq)(o, 'td')) ? t.setSelectionNode(this.contentModule.getDocument(), o) : t.setSelectionText(this.contentModule.getDocument(), o, o, 0, 0);
                        }
                    }
                };
                e.prototype.tableArrowNavigation = function(e, t, i) {
                    var r = t.range.startContainer;
                    if ((e.keyCode === 40 && r.nodeType === 3 && (r.nextSibling && r.nextSibling.nodeName === 'BR' || r.parentNode && r.parentNode.nodeName !== 'TD')) || (e.keyCode === 38 && r.nodeType === 3 && (r.previousSibling && r.previousSibling.nodeName === 'BR' || r.parentNode && r.parentNode.nodeName !== 'TD'))) {
                        return;
                    }
                    e.preventDefault();
                    i.classList.remove(h.HC);
                    if (e.keyCode === 40) {
                        i = (!(0, n.le)((0, n.oq)(i, 'tr').nextElementSibling)) ? (0, n.oq)(i, 'tr').nextElementSibling.children[i.cellIndex] : ((0, n.oq)(i, 'table').tHead && i.nodeName === 'TH') ? (0, n.oq)(i, 'table').rows[1].cells[i.cellIndex] : (!(0, n.le)((0, n.oq)(i, 'table').nextSibling)) ? (0, n.oq)(i, 'table').nextSibling : i;
                    } else {
                        i = (!(0, n.le)((0, n.oq)(i, 'tr').previousElementSibling)) ? (0, n.oq)(i, 'tr').previousElementSibling.children[i.cellIndex] : ((0, n.oq)(i, 'table').tHead && i.nodeName !== 'TH') ? (0, n.oq)(i, 'table').tHead.rows[0].cells[i.cellIndex] : (!(0, n.le)((0, n.oq)(i, 'table').previousSibling)) ? (0, n.oq)(i, 'table').previousSibling : i;
                    }
                    if (i) {
                        t.setSelectionText(this.contentModule.getDocument(), i, i, 0, 0);
                    }
                };
                e.prototype.setBGColor = function(e) {
                    var t = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
                    var i = this.parent.formatter.editorManager.nodeSelection.save(t, this.contentModule.getDocument());
                    var n = this.curTable.querySelectorAll('.e-cell-select');
                    for(var r = 0; r < n.length; r++){
                        n[r].style.backgroundColor = e.item.value;
                    }
                    this.parent.formatter.saveData();
                };
                e.prototype.hideTableQuickToolbar = function() {
                    if (this.quickToolObj && this.quickToolObj.tableQTBar && document.body.contains(this.quickToolObj.tableQTBar.element)) {
                        this.quickToolObj.tableQTBar.hidePopup();
                    }
                };
                e.prototype.tableHeader = function(e, t) {
                    this.parent.formatter.process(this.parent, t, t.originalEvent, {
                        selection: e,
                        subCommand: t.item.subCommand
                    });
                };
                e.prototype.editAreaClickHandler = function(e) {
                    if (this.parent.readonly || !(0, n.le)((0, n.oq)(e.args.target, '.e-img-caption'))) {
                        return;
                    }
                    var t = e.args;
                    var i = this.parent.quickToolbarSettings.showOnRightClick;
                    if (t.which === 2 || (i && t.which === 1) || (!i && t.which === 3)) {
                        return;
                    }
                    if (this.parent.editorMode === 'HTML' && this.parent.quickToolbarModule && this.parent.quickToolbarModule.tableQTBar) {
                        this.quickToolObj = this.parent.quickToolbarModule;
                        var r = t.target;
                        this.contentModule = this.rendererFactory.getRenderer(a.y2.Content);
                        var s = this.quickToolObj.tableQTBar.element.classList.contains('e-rte-pop');
                        if (s) {
                            return;
                        }
                        var o = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
                        var l = (0, n.oq)(r, 'table');
                        var h = this.parent.getRange().startContainer.parentElement;
                        var c = this.parent.getRange().endContainer.parentElement;
                        if (r && r.nodeName !== 'A' && r.nodeName !== 'IMG' && h === c && (r.nodeName === 'TD' || r.nodeName === 'TH' || r.nodeName === 'TABLE' || (l && this.parent.contentModule.getEditPanel().contains(l))) && !(o.startContainer.nodeType === 3 && !o.collapsed)) {
                            var d = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
                            this.parent.formatter.editorManager.nodeSelection.save(d, this.contentModule.getDocument());
                            this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
                            var p = (this.parent.iframeSettings.enable) ? window.pageYOffset + this.parent.element.getBoundingClientRect().top + t.clientY : t.pageY;
                            this.quickToolObj.tableQTBar.showPopup(t.pageX, p, r);
                            this.parent.formatter.editorManager.nodeSelection.restore();
                        } else {
                            this.hideTableQuickToolbar();
                        }
                    }
                };
                e.prototype.tableCellSelect = function(e) {
                    var t = e.target;
                    var i = Array.prototype.slice.call(t.parentElement.parentElement.children).indexOf(t.parentElement);
                    var r = Array.prototype.slice.call(t.parentElement.children).indexOf(t);
                    var s = this.dlgDiv.querySelectorAll('.e-rte-tablecell');
                    Array.prototype.forEach.call(s, function(e) {
                        var t = Array.prototype.slice.call(e.parentElement.parentElement.children).indexOf(e.parentElement);
                        var s = Array.prototype.slice.call(e.parentElement.children).indexOf(e);
                        (0, n.IV)([
                            e
                        ], 'e-active');
                        if (t <= i && s <= r) {
                            (0, n.cn)([
                                e
                            ], 'e-active');
                        }
                    });
                    this.tblHeader.innerHTML = (r + 1) + 'x' + (i + 1);
                };
                e.prototype.tableMouseUp = function(e) {
                    n.bi.remove(this.curTable, 'mousemove', this.tableMove);
                };
                e.prototype.tableCellLeave = function(e) {
                    (0, n.IV)(this.dlgDiv.querySelectorAll('.e-rte-tablecell'), 'e-active');
                    (0, n.cn)([
                        this.dlgDiv.querySelector('.e-rte-tablecell')
                    ], 'e-active');
                    this.tblHeader.innerHTML = 1 + 'x' + 1;
                };
                e.prototype.tableCellClick = function(e) {
                    var t = e.target;
                    var i = Array.prototype.slice.call(t.parentElement.parentElement.children).indexOf(t.parentElement) + 1;
                    var n = Array.prototype.slice.call(t.parentElement.children).indexOf(t) + 1;
                    this.self.tableInsert(i, n, e, this);
                };
                e.prototype.tableInsert = function(e, t, i, r) {
                    var s = (r.self) ? r.self : this;
                    var a = r.selection.range.startContainer;
                    if (a.nodeName === 'P' && a.textContent.trim() === '' && !(a.childNodes.length > 0)) {
                        a.innerHTML = '<br />';
                    }
                    var l = a.parentNode;
                    if (s.parent.editorMode === 'HTML' && ((s.parent.iframeSettings.enable && !(0, c.pv)(l.ownerDocument.querySelector('body'), 'e-lib')) || (!s.parent.iframeSettings.enable && (0, n.le)((0, n.oq)(l, '[id=' + "'" + s.contentModule.getPanel().id + "'" + ']'))))) {
                        s.contentModule.getEditPanel().focus();
                        var h = s.parent.formatter.editorManager.nodeSelection.getRange(s.contentModule.getDocument());
                        r.selection = s.parent.formatter.editorManager.nodeSelection.save(h, s.contentModule.getDocument());
                    }
                    var d = {
                        rows: e,
                        columns: t,
                        width: {
                            minWidth: s.parent.tableSettings.minWidth,
                            maxWidth: s.parent.tableSettings.maxWidth,
                            width: s.parent.tableSettings.width
                        },
                        selection: r.selection
                    };
                    if (s.popupObj) {
                        s.popupObj.hide();
                    }
                    if (s.editdlgObj) {
                        s.editdlgObj.hide();
                    }
                    s.parent.formatter.process(s.parent, r.args, r.args.originalEvent, d);
                    s.contentModule.getEditPanel().focus();
                    s.parent.on(o.uG, s.cellSelect, s);
                };
                e.prototype.cellSelect = function(e) {
                    var t = e.args.target;
                    var i = (0, n.oq)(t, 'td,th');
                    t = (t.nodeName !== 'TD' && i && this.parent.contentModule.getEditPanel().contains(i)) ? i : t;
                    (0, n.IV)(this.contentModule.getEditPanel().querySelectorAll('table td, table th'), h.HC);
                    if (t && (t.tagName === 'TD' || t.tagName === 'TH')) {
                        (0, n.cn)([
                            t
                        ], h.HC);
                        this.activeCell = t;
                        this.curTable = (this.curTable) ? this.curTable : (0, n.oq)(t, 'table');
                        n.bi.add(this.curTable, 'mousemove', this.tableMove, this);
                        n.bi.add(this.curTable, 'mouseup', this.tableMouseUp, this);
                        this.removeResizeElement();
                        if (this.helper && this.contentModule.getEditPanel().contains(this.helper)) {
                            (0, n.og)(this.helper);
                        }
                    }
                    if (n.AR.info.name === 'mozilla' && !(0, n.le)((0, n.oq)(t, 'table')) && (0, n.oq)(t, 'table').tagName === 'TABLE') {
                        this.parent.contentModule.getEditPanel().setAttribute('contenteditable', 'false');
                    }
                };
                e.prototype.tableMove = function(e) {
                    this.parent.formatter.editorManager.observer.notify('TABLE_MOVE', {
                        event: e,
                        selectNode: [
                            this.activeCell
                        ]
                    });
                };
                e.prototype.resizeHelper = function(e) {
                    if (this.parent.readonly) {
                        return;
                    }
                    var t = e.target || e.targetTouches[0].target;
                    var i = (0, n.oq)(t, 'table.e-rte-table');
                    if (!(0, n.le)(this.curTable) && !(0, n.le)(i) && i !== this.curTable && this.parent.contentModule.getEditPanel().contains(i)) {
                        this.removeResizeElement();
                        this.removeHelper(e);
                        this.cancelResizeAction();
                    }
                    if (t.nodeName === 'TABLE' || t.nodeName === 'TD' || t.nodeName === 'TH') {
                        this.curTable = (i && this.parent.contentModule.getEditPanel().contains(i)) && (t.nodeName === 'TD' || t.nodeName === 'TH') ? i : t;
                        this.removeResizeElement();
                        this.tableResizeEleCreation(this.curTable, e);
                    }
                };
                e.prototype.tableResizeEleCreation = function(e, t) {
                    this.parent.preventDefaultResize(t);
                    var i = e.rows[this.calMaxCol(e)].cells;
                    var r = [];
                    for(var s = 0; s < e.rows.length; s++){
                        r.push(Array.prototype.slice.call(e.rows[s].cells, 0, 1)[0]);
                    }
                    var o = parseInt(getComputedStyle(e).height, 10);
                    var a = parseInt(getComputedStyle(e).width, 10);
                    var l = this.calcPos(e);
                    for(var s = 0; i.length >= s; s++){
                        var c = this.parent.createElement('span', {
                            attrs: {
                                'data-col': (s).toString(),
                                'unselectable': 'on',
                                'contenteditable': 'false'
                            }
                        });
                        c.classList.add(h.IJ, h.rp);
                        if (i.length === s) {
                            c.style.cssText = 'height: ' + o + 'px; width: 4px; top: ' + l.top + 'px; left:' + (l.left + this.calcPos(i[s - 1]).left + i[s - 1].offsetWidth) + 'px;';
                        } else {
                            c.style.cssText = 'height: ' + o + 'px; width: 4px; top: ' + l.top + 'px; left:' + (l.left + this.calcPos(i[s]).left) + 'px;';
                        }
                        this.contentModule.getEditPanel().appendChild(c);
                    }
                    for(var s = 0; r.length > s; s++){
                        var d = this.parent.createElement('span', {
                            attrs: {
                                'data-row': (s).toString(),
                                'unselectable': 'on',
                                'contenteditable': 'false'
                            }
                        });
                        d.classList.add(h.IJ, h.Dw);
                        var p = !(0, n.le)(e.getAttribute('cellspacing')) || e.getAttribute('cellspacing') !== '' ? 0 : this.calcPos(r[s]).left;
                        d.style.cssText = 'width: ' + a + 'px; height: 4px; top: ' + (this.calcPos(r[s]).top + l.top + r[s].offsetHeight - 2) + 'px; left:' + (p + l.left) + 'px;';
                        this.contentModule.getEditPanel().appendChild(d);
                    }
                    var u = this.parent.createElement('span', {
                        className: h.uX + ' ' + this.parent.cssClass,
                        attrs: {
                            'data-col': i.length.toString(),
                            'unselectable': 'on',
                            'contenteditable': 'false'
                        }
                    });
                    u.style.cssText = 'top: ' + (l.top + o - 4) + 'px; left:' + (l.left + a - 4) + 'px;';
                    if (n.AR.isDevice) {
                        u.classList.add('e-rmob');
                    }
                    this.contentModule.getEditPanel().appendChild(u);
                };
                e.prototype.removeResizeElement = function() {
                    var e = this.parent.contentModule.getEditPanel().querySelectorAll('.e-column-resize, .e-row-resize, .e-table-box');
                    if (e.length > 0) {
                        for(var t = 0; t < e.length; t++){
                            (0, n.og)(e[t]);
                        }
                    }
                };
                e.prototype.calcPos = function(e) {
                    var t = {
                        top: 0,
                        left: 0
                    };
                    var i = e.getBoundingClientRect();
                    var r = e.ownerDocument;
                    var s = e.offsetParent || r.documentElement;
                    var o = false;
                    while(s && (s === r.body || s === r.documentElement) && s.style.position === 'static'){
                        s = s.parentNode;
                    }
                    if (s.nodeName === 'TD' && e.nodeName === 'TABLE') {
                        s = (0, n.oq)(s, '.e-rte-content');
                        o = true;
                    }
                    if (s && s !== e && s.nodeType === 1) {
                        t = s.getBoundingClientRect();
                    }
                    if (o) {
                        o = false;
                        var a = this.parent.inputElement && this.parent.inputElement.scrollTop > 0 ? (this.parent.inputElement.scrollTop + i.top) - t.top : i.top - t.top;
                        var l = this.parent.inputElement && this.parent.inputElement.scrollLeft > 0 ? (this.parent.inputElement.scrollLeft + i.left) - t.left : i.left - t.left;
                        return {
                            top: a,
                            left: l
                        };
                    } else {
                        return {
                            top: e.offsetTop,
                            left: e.offsetLeft
                        };
                    }
                };
                e.prototype.getPointX = function(e) {
                    if (e.touches && e.touches.length) {
                        return e.touches[0].pageX;
                    } else {
                        return e.pageX;
                    }
                };
                e.prototype.getPointY = function(e) {
                    if (e.touches && e.touches.length) {
                        return e.touches[0].pageY;
                    } else {
                        return e.pageY;
                    }
                };
                e.prototype.resizeStart = function(e) {
                    var t = this;
                    if (this.parent.readonly) {
                        return;
                    }
                    if (n.AR.isDevice) {
                        this.resizeHelper(e);
                    }
                    var i = e.target;
                    if (i.classList.contains(h.rp) || i.classList.contains(h.Dw) || i.classList.contains(h.uX)) {
                        e.preventDefault();
                        this.parent.preventDefaultResize(e);
                        (0, n.IV)(this.curTable.querySelectorAll('td,th'), h.HC);
                        this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
                        this.pageX = this.getPointX(e);
                        this.pageY = this.getPointY(e);
                        this.resizeBtnInit();
                        this.hideTableQuickToolbar();
                        if (i.classList.contains(h.rp)) {
                            this.resizeBtnStat.column = true;
                            if (parseInt(i.getAttribute('data-col'), 10) === this.curTable.rows[this.calMaxCol(this.curTable)].cells.length) {
                                this.currentColumnResize = 'last';
                                this.columnEle = this.curTable.rows[this.calMaxCol(this.curTable)].cells[parseInt(i.getAttribute('data-col'), 10) - 1];
                            } else {
                                if (parseInt(i.getAttribute('data-col'), 10) === 0) {
                                    this.currentColumnResize = 'first';
                                } else {
                                    this.currentColumnResize = 'middle';
                                }
                                this.columnEle = this.curTable.rows[this.calMaxCol(this.curTable)].cells[parseInt(i.getAttribute('data-col'), 10)];
                            }
                            this.colIndex = this.columnEle.cellIndex;
                            this.moveEle = e.target;
                            this.appendHelper();
                        }
                        if (i.classList.contains(h.Dw)) {
                            this.rowEle = this.curTable.rows[parseInt(i.getAttribute('data-row'), 10)];
                            this.resizeBtnStat.row = true;
                            this.appendHelper();
                        }
                        if (i.classList.contains(h.uX)) {
                            this.resizeBtnStat.tableBox = true;
                        }
                        if (n.AR.isDevice && this.helper && !this.helper.classList.contains('e-reicon')) {
                            this.helper.classList.add('e-reicon');
                            n.bi.add(document, n.AR.touchStartEvent, this.removeHelper, this);
                            n.bi.add(this.helper, n.AR.touchStartEvent, this.resizeStart, this);
                        } else {
                            var r = {
                                event: e,
                                requestType: 'Table'
                            };
                            this.parent.trigger(o.tw, r, function(e) {
                                if (e.cancel) {
                                    t.cancelResizeAction();
                                }
                            });
                        }
                        n.bi.add(this.contentModule.getDocument(), n.AR.touchMoveEvent, this.resizing, this);
                        n.bi.add(this.contentModule.getDocument(), n.AR.touchEndEvent, this.resizeEnd, this);
                    }
                };
                e.prototype.removeHelper = function(e) {
                    var t = e.target.classList;
                    if (!(t.contains('e-reicon')) && this.helper) {
                        n.bi.remove(document, n.AR.touchStartEvent, this.removeHelper);
                        n.bi.remove(this.helper, n.AR.touchStartEvent, this.resizeStart);
                        if (this.helper && this.contentModule.getEditPanel().contains(this.helper)) {
                            (0, n.og)(this.helper);
                        }
                        this.pageX = null;
                        this.helper = null;
                    }
                };
                e.prototype.appendHelper = function() {
                    this.helper = this.parent.createElement('div', {
                        className: 'e-table-rhelper' + ' ' + this.parent.cssClass
                    });
                    if (n.AR.isDevice) {
                        this.helper.classList.add('e-reicon');
                    }
                    this.contentModule.getEditPanel().appendChild(this.helper);
                    this.setHelperHeight();
                };
                e.prototype.setHelperHeight = function() {
                    var e = this.calcPos(this.curTable);
                    if (this.resizeBtnStat.column) {
                        this.helper.classList.add('e-column-helper');
                        this.helper.style.cssText = 'height: ' + getComputedStyle(this.curTable).height + '; top: ' + e.top + 'px; left:' + ((e.left + this.calcPos(this.columnEle).left) + (this.currentColumnResize === 'last' ? this.columnEle.offsetWidth + 2 : 0) - 1) + 'px;';
                    } else {
                        this.helper.classList.add('e-row-helper');
                        this.helper.style.cssText = 'width: ' + getComputedStyle(this.curTable).width + '; top: ' + (this.calcPos(this.rowEle).top + e.top + this.rowEle.offsetHeight) + 'px; left:' + (this.calcPos(this.rowEle).left + e.left) + 'px;';
                    }
                };
                e.prototype.updateHelper = function() {
                    var e = this.calcPos(this.curTable);
                    if (this.resizeBtnStat.column) {
                        var t = (e.left + this.calcPos(this.columnEle).left) + (this.currentColumnResize === 'last' ? this.columnEle.offsetWidth + 2 : 0) - 1;
                        this.helper.style.left = t + 'px';
                    } else {
                        var i = this.calcPos(this.rowEle).top + e.top + this.rowEle.offsetHeight;
                        this.helper.style.top = i + 'px';
                    }
                };
                e.prototype.calMaxCol = function(e) {
                    var t = 0;
                    var i;
                    for(var n = 0; n < e.rows.length; n++){
                        if (t < e.rows[n].cells.length) {
                            i = n;
                            t = e.rows[n].cells.length;
                        }
                    }
                    return i;
                };
                e.prototype.resizing = function(e) {
                    var t = this;
                    var i = this.getPointX(e);
                    var r = this.getPointY(e);
                    var s = (this.parent.enableRtl) ? -(i - this.pageX) : (i - this.pageX);
                    var a = (this.parent.enableRtl) ? -(r - this.pageY) : (r - this.pageY);
                    this.pageX = i;
                    this.pageY = r;
                    var l = {
                        event: e,
                        requestType: 'table'
                    };
                    this.parent.trigger(o.ib, l, function(i) {
                        if (i.cancel) {
                            t.cancelResizeAction();
                        } else {
                            var r = t.contentModule.getEditPanel().querySelector('.e-table-box');
                            var o = parseInt(getComputedStyle(t.curTable).width, 10);
                            var l = parseInt(getComputedStyle(t.curTable).height, 10);
                            var h = +getComputedStyle(t.contentModule.getEditPanel()).paddingRight.match(/\d/g).join('');
                            var c = t.contentModule.getEditPanel().offsetWidth - (t.contentModule.getEditPanel().offsetWidth - t.contentModule.getEditPanel().clientWidth) - h * 2;
                            var d = void 0;
                            if (!(0, n.le)(t.curTable.parentElement.closest('table')) && !(0, n.le)(t.curTable.closest('td')) && t.contentModule.getEditPanel().contains(t.curTable.closest('td'))) {
                                var p = t.curTable.closest('td');
                                var u = +getComputedStyle(p).paddingRight.match(/\d/g).join('');
                                d = p.offsetWidth - (p.offsetWidth - p.clientWidth) - u * 2;
                            } else {
                                d = c;
                            }
                            if (t.resizeBtnStat.column) {
                                var f = parseFloat(t.columnEle.offsetWidth.toString());
                                var m = t.curTable.rows[0].cells[0].nodeName === 'TH' ? 1 : 0;
                                var v = parseFloat(t.curTable.style.width.split('%')[0]);
                                var g = parseFloat(t.curTable.rows[m].cells[t.colIndex].style.width.split('%')[0]);
                                if (t.currentColumnResize === 'first') {
                                    s = s - 0.75;
                                    t.removeResizeElement();
                                    if (((s !== 0 && 5 < g) || s < 0) && v <= 100 && t.convertPixelToPercentage(o - s, d) <= 100) {
                                        var b = t.findFirstLastColCells(t.curTable, true);
                                        t.curTable.style.width = t.convertPixelToPercentage(o - s, d) > 100 ? (100 + '%') : (t.convertPixelToPercentage(o - s, d) + '%');
                                        var y = v - t.convertPixelToPercentage(o - s, d);
                                        t.currentMarginLeft = t.currentMarginLeft + y;
                                        t.curTable.style.marginLeft = 'calc(' + (t.curTable.style.width === '100%' ? 0 : t.currentMarginLeft) + '%)';
                                        for(var C = 0; C < b.length; C++){
                                            t.curTable.rows[C].cells[t.colIndex].style.width = (g - y) + '%';
                                        }
                                    }
                                } else if (t.currentColumnResize === 'last') {
                                    s = s + 0.75;
                                    t.removeResizeElement();
                                    if (((s !== 0 && 5 < g) || s > 0) && v <= 100 && t.convertPixelToPercentage(o + s, d) <= 100) {
                                        var E = t.findFirstLastColCells(t.curTable, false);
                                        t.curTable.style.width = t.convertPixelToPercentage(o + s, d) > 100 ? (100 + '%') : (t.convertPixelToPercentage(o + s, d) + '%');
                                        var y = v - t.convertPixelToPercentage(o + s, d);
                                        for(var C = 0; C < E.length; C++){
                                            t.curTable.rows[C].cells[t.colIndex].style.width = (g - y) + '%';
                                        }
                                    }
                                } else {
                                    var S = t.curTable.rows[t.calMaxCol(t.curTable)].cells;
                                    var w = f - s;
                                    var T = parseFloat(t.columnEle.offsetWidth.toString()) + parseFloat(S[t.colIndex - 1].offsetWidth.toString());
                                    for(var C = 0; C < t.curTable.rows.length; C++){
                                        if ((T - w) > 20 && w > 20) {
                                            var k = T - w;
                                            var x = w;
                                            if (!(0, n.le)(t.curTable.rows[C].cells[t.colIndex - 1])) {
                                                t.curTable.rows[C].cells[t.colIndex - 1].style.width = t.convertPixelToPercentage(k, o) + '%';
                                            }
                                            if (!(0, n.le)(t.curTable.rows[C].cells[t.colIndex])) {
                                                t.curTable.rows[C].cells[t.colIndex].style.width = t.convertPixelToPercentage(x, o) + '%';
                                            }
                                        }
                                    }
                                }
                                t.updateHelper();
                            } else if (t.resizeBtnStat.row) {
                                t.parent.preventDefaultResize(e);
                                var L = parseFloat(t.rowEle.clientHeight.toString()) + a;
                                if (L > 20) {
                                    t.rowEle.style.height = L + 'px';
                                }
                                t.curTable.style.height = '';
                                if (!(0, n.le)(r)) {
                                    r.style.cssText = 'top: ' + (t.calcPos(t.curTable).top + l - 4) + 'px; left:' + (t.calcPos(t.curTable).left + o - 4) + 'px;';
                                }
                                t.updateHelper();
                            } else if (t.resizeBtnStat.tableBox) {
                                if (!n.AR.isDevice) {
                                    n.bi.remove(t.contentModule.getEditPanel(), 'mouseover', t.resizeHelper);
                                }
                                var N = t.curTable.style.width.indexOf('%') > -1;
                                t.curTable.style.width = N ? t.convertPixelToPercentage(o + s, d) + '%' : o + s + 'px';
                                t.curTable.style.height = l + a + 'px';
                                r.classList.add('e-rbox-select');
                                r.style.cssText = 'top: ' + (t.calcPos(t.curTable).top + l - 4) + 'px; left:' + (t.calcPos(t.curTable).left + o - 4) + 'px;';
                            }
                        }
                    });
                };
                e.prototype.findFirstLastColCells = function(e, t) {
                    var i = [];
                    var n = e.querySelectorAll('tr');
                    for(var r = 0; r < n.length; r++){
                        if (n[r].closest('table') === e) {
                            var s = n[r].querySelectorAll('th, td');
                            i.push(t ? s[0] : s[s.length - 1]);
                        }
                    }
                    return i;
                };
                e.prototype.convertPixelToPercentage = function(e, t) {
                    return (e / t) * 100;
                };
                e.prototype.cancelResizeAction = function() {
                    n.bi.remove(this.contentModule.getDocument(), n.AR.touchMoveEvent, this.resizing);
                    n.bi.remove(this.contentModule.getDocument(), n.AR.touchEndEvent, this.resizeEnd);
                    this.removeResizeElement();
                };
                e.prototype.resizeEnd = function(e) {
                    this.resizeBtnInit();
                    n.bi.remove(this.contentModule.getDocument(), n.AR.touchMoveEvent, this.resizing);
                    n.bi.remove(this.contentModule.getDocument(), n.AR.touchEndEvent, this.resizeEnd);
                    if (this.contentModule.getEditPanel().querySelector('.e-table-box') && this.contentModule.getEditPanel().contains(this.contentModule.getEditPanel().querySelector('.e-table-box'))) {
                        if (!n.AR.isDevice) {
                            n.bi.add(this.contentModule.getEditPanel(), 'mouseover', this.resizeHelper, this);
                        }
                        this.removeResizeElement();
                    }
                    if (this.helper && this.contentModule.getEditPanel().contains(this.helper)) {
                        (0, n.og)(this.helper);
                        this.helper = null;
                    }
                    this.pageX = null;
                    this.pageY = null;
                    this.moveEle = null;
                    var t = {
                        event: e,
                        requestType: 'table'
                    };
                    this.parent.trigger(o.d$, t);
                    this.parent.formatter.saveData();
                };
                e.prototype.resizeBtnInit = function() {
                    return this.resizeBtnStat = {
                        column: false,
                        row: false,
                        tableBox: false
                    };
                };
                e.prototype.addRow = function(e, t, i) {
                    var n;
                    if (i) {
                        n = {
                            item: {
                                command: 'Table',
                                subCommand: 'InsertRowAfter'
                            }
                        };
                    }
                    var r = {
                        selection: e,
                        subCommand: (i) ? n.item.subCommand : t.item.subCommand
                    };
                    this.parent.formatter.process(this.parent, (i) ? n : t, t, r);
                };
                e.prototype.addColumn = function(e, t) {
                    this.parent.formatter.process(this.parent, t, t, {
                        selection: e,
                        width: this.parent.tableSettings.width,
                        subCommand: t.item.subCommand
                    });
                };
                e.prototype.removeRowColumn = function(e, t) {
                    this.parent.formatter.process(this.parent, t, t, {
                        selection: e,
                        subCommand: t.item.subCommand
                    });
                    this.hideTableQuickToolbar();
                };
                e.prototype.removeTable = function(e, t, i) {
                    var n;
                    if (i) {
                        n = {
                            item: {
                                command: 'Table',
                                subCommand: 'TableRemove'
                            }
                        };
                    }
                    var r = {
                        selection: e,
                        subCommand: (i) ? n.item.subCommand : t.item.subCommand
                    };
                    this.parent.formatter.process(this.parent, (i) ? n : t, t.originalEvent, r);
                    this.contentModule.getEditPanel().focus();
                    if (this.parent.inputElement.innerHTML === null || this.parent.inputElement.innerHTML === '') {
                        if (this.parent.enterKey === 'DIV') {
                            this.contentModule.getEditPanel().innerHTML = '<div><br/></div>';
                        } else if (this.parent.enterKey === 'BR') {
                            this.contentModule.getEditPanel().innerHTML = '<br/>';
                        } else {
                            this.contentModule.getEditPanel().innerHTML = '<p><br/></p>';
                        }
                    }
                    this.removeResizeElement();
                    this.hideTableQuickToolbar();
                };
                e.prototype.renderDlgContent = function(e) {
                    var t = this;
                    if (n.AR.isDevice || this.parent.inlineMode.enable) {
                        this.insertTableDialog(e);
                        return;
                    }
                    if (this.popupObj) {
                        this.popupObj.hide();
                        return;
                    }
                    this.hideTableQuickToolbar();
                    var i = '1X1';
                    var o = this.l10n.getConstant('inserttablebtn');
                    this.dlgDiv = this.parent.createElement('div', {
                        className: 'e-rte-table-popup' + ' ' + this.parent.cssClass,
                        id: this.rteID + '_table'
                    });
                    this.tblHeader = this.parent.createElement('div', {
                        className: 'e-rte-popup-header' + ' ' + this.parent.cssClass
                    });
                    this.tblHeader.innerHTML = i;
                    this.dlgDiv.appendChild(this.tblHeader);
                    var a = this.parent.createElement('div', {
                        className: 'e-rte-table-span' + ' ' + this.parent.cssClass
                    });
                    this.drawTable(a, e);
                    this.dlgDiv.appendChild(a);
                    this.dlgDiv.appendChild(this.parent.createElement('span', {
                        className: 'e-span-border' + ' ' + this.parent.cssClass
                    }));
                    var l = this.parent.createElement('button', {
                        className: 'e-insert-table-btn' + ' ' + this.parent.cssClass,
                        id: this.rteID + '_insertTable',
                        attrs: {
                            type: 'button',
                            tabindex: '0'
                        }
                    });
                    if (!(0, n.le)(this.parent.getToolbarElement().querySelector('.e-expended-nav'))) {
                        this.parent.getToolbarElement().querySelector('.e-expended-nav').setAttribute('tabindex', '1');
                    }
                    this.dlgDiv.appendChild(l);
                    this.createTableButton = new s.z({
                        iconCss: 'e-icons e-create-table',
                        content: o,
                        cssClass: 'e-flat' + ' ' + this.parent.cssClass,
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale
                    });
                    this.createTableButton.isStringTemplate = true;
                    this.createTableButton.appendTo(l);
                    n.bi.add(l, 'click', this.insertTableDialog, {
                        self: this,
                        args: e.args,
                        selection: e.selection
                    });
                    this.parent.getToolbar().appendChild(this.dlgDiv);
                    var h = e.args.originalEvent.target;
                    h = h.classList.contains('e-toolbar-item') ? h.firstChild : h.parentElement;
                    this.popupObj = new r.GI(this.dlgDiv, {
                        targetType: 'relative',
                        relateTo: h,
                        collision: {
                            X: 'fit',
                            Y: 'none'
                        },
                        offsetY: 8,
                        viewPortElement: this.parent.element,
                        position: {
                            X: 'left',
                            Y: 'bottom'
                        },
                        enableRtl: this.parent.enableRtl,
                        zIndex: 10001,
                        close: function(e) {
                            t.parent.isBlur = false;
                            t.popupObj.destroy();
                            (0, n.og)(t.popupObj.element);
                            t.popupObj = null;
                        }
                    });
                    (0, n.cn)([
                        this.popupObj.element
                    ], 'e-popup-open');
                    if (!(0, n.le)(this.parent.cssClass)) {
                        (0, n.cn)([
                            this.popupObj.element
                        ], this.parent.cssClass);
                    }
                    this.popupObj.refreshPosition(h);
                };
                e.prototype.docClick = function(e) {
                    var t = e.args.target;
                    if (t && t.classList && ((this.popupObj && !(0, n.oq)(t, '[id=' + "'" + this.popupObj.element.id + "'" + ']') || (this.editdlgObj && !(0, n.oq)(t, '#' + this.editdlgObj.element.id)))) && !t.classList.contains('e-create-table') && t.offsetParent && !t.offsetParent.classList.contains('e-rte-backgroundcolor-dropdown')) {
                        if (this.popupObj) {
                            this.popupObj.hide();
                        }
                        if (this.editdlgObj) {
                            this.editdlgObj.hide();
                        }
                        this.parent.isBlur = true;
                        (0, c.Nu)(this.parent.element, 'focusout');
                    }
                    var i = (0, n.oq)(t, 'td');
                    var r = i && this.parent.contentModule.getEditPanel().contains(i) ? true : false;
                    if (t && t.tagName !== 'TD' && t.tagName !== 'TH' && !r && (0, n.oq)(t, '.e-rte-quick-popup') === null && t.offsetParent && !t.offsetParent.classList.contains('e-quick-dropdown') && !t.offsetParent.classList.contains('e-rte-backgroundcolor-dropdown') && !(0, n.oq)(t, '.e-rte-dropdown-popup') && !(0, n.oq)(t, '.e-rte-elements')) {
                        (0, n.IV)(this.parent.inputElement.querySelectorAll('table td'), h.HC);
                        if (!n.AR.isIE) {
                            this.hideTableQuickToolbar();
                        }
                    }
                    if (t && t.classList && !t.classList.contains(h.rp) && !t.classList.contains(h.Dw) && !t.classList.contains(h.uX)) {
                        this.removeResizeElement();
                    }
                };
                e.prototype.drawTable = function(e, t) {
                    var i;
                    var r;
                    for(var s = 0; s < 3; s++){
                        i = this.parent.createElement('div', {
                            className: 'e-rte-table-row' + ' ' + this.parent.cssClass,
                            attrs: {
                                'data-column': '' + s
                            }
                        });
                        for(var o = 0; o < 10; o++){
                            var a = (s > 2) ? 'none' : 'inline-block';
                            r = this.parent.createElement('div', {
                                className: 'e-rte-tablecell e-default' + ' ' + this.parent.cssClass,
                                attrs: {
                                    'data-cell': '' + o
                                }
                            });
                            i.appendChild(r);
                            r.style.display = a;
                            if (o === 0 && s === 0) {
                                (0, n.cn)([
                                    r
                                ], 'e-active');
                            }
                            n.bi.add(r, 'mousemove', this.tableCellSelect, this);
                            n.bi.add(i, 'mouseleave', this.tableCellLeave, this);
                            n.bi.add(r, 'mouseup', this.tableCellClick, {
                                self: this,
                                args: t.args,
                                selection: t.selection
                            });
                        }
                        e.appendChild(i);
                    }
                };
                e.prototype.editTable = function(e) {
                    var t = this;
                    this.createDialog(e);
                    var i = this.tableDlgContent(e);
                    var n = this.l10n.getConstant('dialogUpdate');
                    var r = this.l10n.getConstant('dialogCancel');
                    var s = this.l10n.getConstant('tableEditHeader');
                    this.editdlgObj.setProperties({
                        height: 'initial',
                        width: '290px',
                        content: i,
                        header: s,
                        buttons: [
                            {
                                click: this.applyProperties.bind(this, e),
                                buttonModel: {
                                    content: n,
                                    cssClass: 'e-flat e-size-update' + ' ' + this.parent.cssClass,
                                    isPrimary: true
                                }
                            },
                            {
                                click: function(e) {
                                    t.cancelDialog(e);
                                },
                                buttonModel: {
                                    cssClass: 'e-flat e-cancel' + ' ' + this.parent.cssClass,
                                    content: r
                                }
                            }
                        ],
                        cssClass: this.editdlgObj.cssClass + ' e-rte-edit-table-prop-dialog'
                    });
                    this.editdlgObj.element.style.maxHeight = 'none';
                    this.editdlgObj.content.querySelector('input').focus();
                    this.hideTableQuickToolbar();
                };
                e.prototype.insertTableDialog = function(e) {
                    var t = (this.self) ? this.self : this;
                    if (t.popupObj) {
                        t.popupObj.hide();
                    }
                    t.createDialog(e);
                    var i = t.tableCellDlgContent();
                    var r = t.l10n.getConstant('dialogInsert');
                    var s = t.l10n.getConstant('dialogCancel');
                    if ((0, n.le)(t.editdlgObj)) {
                        return;
                    }
                    t.editdlgObj.setProperties({
                        height: 'initial',
                        width: '290px',
                        content: i,
                        buttons: [
                            {
                                click: t.customTable.bind(this, e),
                                buttonModel: {
                                    content: r,
                                    cssClass: 'e-flat e-insert-table' + ' ' + t.parent.cssClass,
                                    isPrimary: true
                                }
                            },
                            {
                                click: function(e) {
                                    t.cancelDialog(e);
                                },
                                buttonModel: {
                                    cssClass: 'e-flat e-cancel' + ' ' + t.parent.cssClass,
                                    content: s
                                }
                            }
                        ]
                    });
                    if (!(0, n.le)(t.parent.cssClass)) {
                        t.editdlgObj.setProperties({
                            cssClass: t.parent.cssClass
                        });
                    }
                    t.editdlgObj.element.style.maxHeight = 'none';
                    t.editdlgObj.content.querySelector('input').focus();
                };
                e.prototype.tableCellDlgContent = function() {
                    var e = this.l10n.getConstant('columns');
                    var t = this.l10n.getConstant('rows');
                    var i = this.parent.createElement('div', {
                        className: 'e-cell-wrap' + ' ' + this.parent.cssClass
                    });
                    var n = '<div class="e-rte-field' + ' ' + this.parent.cssClass + '"><input type="text" ' + ' data-role ="none" id="tableColumn" class="e-table-column' + ' ' + this.parent.cssClass + '"/></div>' + '<div class="e-rte-field' + ' ' + this.parent.cssClass + '"><input type="text" data-role ="none" id="tableRow" class="e-table-row' + ' ' + this.parent.cssClass + '" /></div>';
                    var r = (0, c.dW)(n);
                    i.appendChild(r);
                    this.columnTextBox = new l.N({
                        format: 'n0',
                        min: 1,
                        value: 3,
                        placeholder: e,
                        floatLabelType: 'Auto',
                        max: 50,
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale,
                        cssClass: this.parent.cssClass
                    });
                    this.columnTextBox.isStringTemplate = true;
                    this.columnTextBox.appendTo(i.querySelector('#tableColumn'));
                    this.rowTextBox = new l.N({
                        format: 'n0',
                        min: 1,
                        value: 3,
                        placeholder: t,
                        floatLabelType: 'Auto',
                        max: 50,
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale,
                        cssClass: this.parent.cssClass
                    });
                    this.rowTextBox.isStringTemplate = true;
                    this.rowTextBox.appendTo(i.querySelector('#tableRow'));
                    return i;
                };
                e.prototype.clearDialogObj = function() {
                    if (this.editdlgObj) {
                        this.editdlgObj.destroy();
                        (0, n.og)(this.editdlgObj.element);
                        this.editdlgObj = null;
                    }
                };
                e.prototype.createDialog = function(e) {
                    var t = this;
                    if (this.editdlgObj) {
                        this.editdlgObj.hide({
                            returnValue: true
                        });
                        return;
                    }
                    var i = this.parent.createElement('div', {
                        className: 'e-rte-edit-table' + ' ' + this.parent.cssClass,
                        id: this.rteID + '_tabledialog'
                    });
                    this.parent.element.appendChild(i);
                    var r = this.l10n.getConstant('dialogInsert');
                    var s = this.l10n.getConstant('dialogCancel');
                    var o = this.l10n.getConstant('tabledialogHeader');
                    var a = {
                        header: o,
                        cssClass: h.i7 + ' ' + this.parent.cssClass,
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale,
                        showCloseIcon: true,
                        closeOnEscape: true,
                        width: (n.AR.isDevice) ? '290px' : '340px',
                        height: 'initial',
                        position: {
                            X: 'center',
                            Y: (n.AR.isDevice) ? 'center' : 'top'
                        },
                        isModal: n.AR.isDevice,
                        buttons: [
                            {
                                buttonModel: {
                                    content: r,
                                    cssClass: 'e-flat e-insert-table' + ' ' + this.parent.cssClass,
                                    isPrimary: true
                                }
                            },
                            {
                                click: function(e) {
                                    t.cancelDialog(e);
                                },
                                buttonModel: {
                                    cssClass: 'e-flat e-cancel' + ' ' + this.parent.cssClass,
                                    content: s
                                }
                            }
                        ],
                        target: (n.AR.isDevice) ? document.body : this.parent.element,
                        animationSettings: {
                            effect: 'None'
                        },
                        close: function(e) {
                            t.parent.isBlur = false;
                            t.editdlgObj.destroy();
                            (0, n.og)(t.editdlgObj.element);
                            t.dialogRenderObj.close(e);
                            t.editdlgObj = null;
                        }
                    };
                    this.editdlgObj = this.dialogRenderObj.render(a);
                    this.editdlgObj.appendTo(i);
                    if (this.quickToolObj && this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {
                        this.quickToolObj.inlineQTBar.hidePopup();
                    }
                };
                e.prototype.customTable = function(e, t) {
                    var i = (this.self) ? this.self : this;
                    if (i.rowTextBox.value && i.columnTextBox.value) {
                        var r = ((n.AR.isDevice || (!(0, n.le)(e.args) && !(0, n.le)(e.args.originalEvent) && e.args.originalEvent.action === 'insert-table') || i.parent.inlineMode.enable) ? e : this);
                        i.tableInsert(i.rowTextBox.value, i.columnTextBox.value, t, r);
                    }
                };
                e.prototype.cancelDialog = function(e) {
                    this.parent.isBlur = false;
                    this.editdlgObj.hide({
                        returnValue: true
                    });
                };
                e.prototype.applyProperties = function(e, t) {
                    var i = this.editdlgObj.element;
                    var r = (0, n.oq)(e.selectNode[0], 'table');
                    r.style.width = i.querySelector('.e-table-width').value + 'px';
                    if (i.querySelector('.e-cell-padding').value !== '') {
                        var s = r.querySelectorAll('td');
                        for(var o = 0; o < s.length; o++){
                            var a = '';
                            if (s[o].style.padding === '') {
                                a = s[o].getAttribute('style') + ' padding:' + i.querySelector('.e-cell-padding').value + 'px;';
                            } else {
                                s[o].style.padding = i.querySelector('.e-cell-padding').value + 'px';
                                a = s[o].getAttribute('style');
                            }
                            s[o].setAttribute('style', a);
                        }
                    }
                    r.cellSpacing = i.querySelector('.e-cell-spacing').value;
                    if (!(0, n.le)(r.cellSpacing) || r.cellSpacing !== '0') {
                        (0, n.cn)([
                            r
                        ], h._G);
                    } else {
                        (0, n.IV)([
                            r
                        ], h._G);
                    }
                    this.parent.formatter.saveData();
                    this.editdlgObj.hide({
                        returnValue: true
                    });
                };
                e.prototype.tableDlgContent = function(e) {
                    var t = e.selectParent[0];
                    var i = this.l10n.getConstant('tableWidth');
                    var r = this.l10n.getConstant('cellpadding');
                    var s = this.l10n.getConstant('cellspacing');
                    var o = this.parent.createElement('div', {
                        className: 'e-table-sizewrap' + ' ' + this.parent.cssClass
                    });
                    var a = (0, n.oq)(t, 'table').getClientRects()[0].width;
                    var h = (0, n.oq)(t, 'td').style.padding;
                    var d = (0, n.oq)(t, 'table').getAttribute('cellspacing');
                    var p = '<div class="e-rte-field' + ' ' + this.parent.cssClass + '"><input type="text" data-role ="none" id="tableWidth" class="e-table-width' + ' ' + this.parent.cssClass + '" ' + ' /></div>' + '<div class="e-rte-field' + ' ' + this.parent.cssClass + '"><input type="text" data-role ="none" id="cellPadding" class="e-cell-padding' + ' ' + this.parent.cssClass + '" />' + ' </div><div class="e-rte-field' + ' ' + this.parent.cssClass + '"><input type="text" data-role ="none" id="cellSpacing" class="e-cell-spacing' + ' ' + this.parent.cssClass + '" /></div>';
                    var u = (0, c.dW)(p);
                    o.appendChild(u);
                    this.tableWidthNum = new l.N({
                        format: 'n0',
                        min: 0,
                        value: a,
                        placeholder: i,
                        floatLabelType: 'Auto',
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale
                    });
                    this.tableWidthNum.isStringTemplate = true;
                    this.tableWidthNum.appendTo(o.querySelector('#tableWidth'));
                    this.tableCellPadding = new l.N({
                        format: 'n0',
                        min: 0,
                        value: h !== '' ? parseInt(h, null) : 0,
                        placeholder: r,
                        floatLabelType: 'Auto',
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale
                    });
                    this.tableCellPadding.isStringTemplate = true;
                    this.tableCellPadding.appendTo(o.querySelector('#cellPadding'));
                    this.tableCellSpacing = new l.N({
                        format: 'n0',
                        min: 0,
                        value: d !== '' && !(0, n.le)(d) ? parseInt(d, null) : 0,
                        placeholder: s,
                        floatLabelType: 'Auto',
                        enableRtl: this.parent.enableRtl,
                        locale: this.parent.locale
                    });
                    this.tableCellSpacing.isStringTemplate = true;
                    this.tableCellSpacing.appendTo(o.querySelector('#cellSpacing'));
                    return o;
                };
                e.prototype.destroy = function() {
                    this.removeEventListener();
                };
                e.prototype.moduleDestroy = function() {
                    this.parent = null;
                };
                e.prototype.getModuleName = function() {
                    return 'table';
                };
                return e;
            }());
        }),
        2503: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "z": function() {
                    return s;
                }
            });
            var n = i(1807);
            var r = i(809);
            var s = (function() {
                function e() {
                    this.rendererMap = {};
                }
                e.prototype.addRenderer = function(e, t) {
                    var i = (0, n.I$)(r.y2, e);
                    if ((0, n.le)(this.rendererMap[i])) {
                        this.rendererMap[i] = t;
                    }
                };
                e.prototype.getRenderer = function(e) {
                    var t = (0, n.I$)(r.y2, e);
                    if ((0, n.le)(this.rendererMap[t])) {
                        throw "The renderer " + t + " is not found";
                    } else {
                        return this.rendererMap[t];
                    }
                };
                return e;
            }());
        }),
        9336: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "S": function() {
                    return r;
                }
            });
            var n = i(1807);
            var r = (function() {
                function e() {
                    this.services = {};
                }
                e.prototype.register = function(e, t) {
                    if ((0, n.le)(this.services[e])) {
                        this.services[e] = t;
                    }
                };
                e.prototype.getService = function(e) {
                    if ((0, n.le)(this.services[e])) {
                        throw "The service " + e + " is not registered";
                    }
                    return this.services[e];
                };
                return e;
            }());
        }),
        8867: (function(e, t, i) {
            "use strict";
            i.d(t, {
                "q": function() {
                    return r;
                }
            });
            var n = i(1807);
            var r = (function() {
                function e() {
                    this.startNodeName = [];
                    this.endNodeName = [];
                }
                e.prototype.saveInstance = function(e, t) {
                    this.range = e.cloneRange();
                    this.rootNode = this.documentFromRange(e);
                    this.body = t;
                    this.startContainer = this.getNodeArray(e.startContainer, true);
                    this.endContainer = this.getNodeArray(e.endContainer, false);
                    this.startOffset = e.startOffset;
                    this.endOffset = e.endOffset;
                    this.html = this.body.innerHTML;
                    return this;
                };
                e.prototype.documentFromRange = function(e) {
                    return (9 === e.startContainer.nodeType) ? e.startContainer : e.startContainer.ownerDocument;
                };
                e.prototype.getRange = function(e) {
                    var t = this.get(e);
                    var i = t && t.rangeCount > 0 ? t.getRangeAt(t.rangeCount - 1) : e.createRange();
                    return (i.startContainer !== e || i.endContainer !== e || i.startOffset || i.endOffset || (i.setStart(e.body, 0), i.collapse(!0)), i);
                };
                e.prototype.get = function(e) {
                    return e.defaultView.getSelection();
                };
                e.prototype.save = function(e, t) {
                    e = (e) ? e.cloneRange() : this.getRange(t);
                    return this.saveInstance(e, t.body);
                };
                e.prototype.getIndex = function(e) {
                    var t;
                    var i = 0;
                    e = !e.previousSibling && e.tagName === 'BR' ? e : e.previousSibling;
                    if (e) {
                        for(var n = e.nodeType; e; null){
                            t = e.nodeType;
                            i++;
                            n = t;
                            e = e.previousSibling;
                        }
                    }
                    return i;
                };
                e.prototype.isChildNode = function(e, t) {
                    for(var i = 0; i < t.childNodes.length; i++){
                        if (e.indexOf(t.childNodes[i]) > -1) {
                            return true;
                        }
                    }
                    return false;
                };
                e.prototype.getNode = function(e, t, i) {
                    if (t === e && (e.nodeType === 3 || !e.firstChild || i.indexOf(e.firstChild) !== -1 || this.isChildNode(i, e))) {
                        return null;
                    }
                    if (i.indexOf(e.firstChild) === -1 && e.firstChild && !this.isChildNode(i, e)) {
                        return e.firstChild;
                    }
                    if (e.nextSibling) {
                        return e.nextSibling;
                    }
                    if (!e.parentNode) {
                        return null;
                    } else {
                        return e.parentNode;
                    }
                };
                e.prototype.getNodeCollection = function(e) {
                    var t = e.startContainer.childNodes[e.startOffset] || e.startContainer;
                    var i = e.endContainer.childNodes[(e.endOffset > 0) ? (e.endOffset - 1) : e.endOffset] || e.endContainer;
                    if ((t === i || (t.nodeName === 'BR' && t === e.endContainer.childNodes[e.endOffset])) && t.childNodes.length === 0) {
                        return [
                            t
                        ];
                    }
                    if (e.startOffset === e.endOffset && e.startOffset !== 0 && e.startContainer.nodeName === 'PRE') {
                        return [
                            t.nodeName === 'BR' || t.nodeName === '#text' ? t : t.childNodes[0]
                        ];
                    }
                    var n = [];
                    do {
                        if (n.indexOf(t) === -1) {
                            n.push(t);
                        }
                        t = this.getNode(t, i, n);
                    }while (t)
                    return n;
                };
                e.prototype.getParentNodeCollection = function(e) {
                    return this.getParentNodes(this.getNodeCollection(e), e);
                };
                e.prototype.getParentNodes = function(e, t) {
                    e = e.reverse();
                    for(var i = 0; i < e.length; i++){
                        if ((e.indexOf(e[i].parentNode) !== -1) || (e[i].nodeType === 3 && t.startContainer !== t.endContainer && t.startContainer.parentNode !== t.endContainer.parentNode)) {
                            e.splice(i, 1);
                            i--;
                        } else if (e[i].nodeType === 3) {
                            e[i] = e[i].parentNode;
                        }
                    }
                    return e;
                };
                e.prototype.getSelectionNodeCollection = function(e) {
                    return this.getSelectionNodes(this.getNodeCollection(e));
                };
                e.prototype.getSelectionNodeCollectionBr = function(e) {
                    return this.getSelectionNodesBr(this.getNodeCollection(e));
                };
                e.prototype.getSelectionNodes = function(e) {
                    e = e.reverse();
                    var t = new RegExp(String.fromCharCode(8203), 'g');
                    for(var i = 0; i < e.length; i++){
                        if (e[i].nodeType !== 3 || (e[i].textContent.trim() === '' || (e[i].textContent.length === 1 && e[i].textContent.match(t)))) {
                            e.splice(i, 1);
                            i--;
                        }
                    }
                    return e.reverse();
                };
                e.prototype.getSelectionNodesBr = function(e) {
                    e = e.reverse();
                    var t = new RegExp(String.fromCharCode(8203), 'g');
                    for(var i = 0; i < e.length; i++){
                        if (e[i].nodeName !== 'BR' && (e[i].nodeType !== 3 || (e[i].textContent.trim() === '' || (e[i].textContent.length === 1 && e[i].textContent.match(t))))) {
                            e.splice(i, 1);
                            i--;
                        }
                    }
                    return e.reverse();
                };
                e.prototype.getInsertNodeCollection = function(e) {
                    return this.getInsertNodes(this.getNodeCollection(e));
                };
                e.prototype.getInsertNodes = function(e) {
                    e = e.reverse();
                    for(var t = 0; t < e.length; t++){
                        if ((e[t].childNodes.length !== 0 && e[t].nodeType !== 3) || (e[t].nodeType === 3 && e[t].textContent === '')) {
                            e.splice(t, 1);
                            t--;
                        }
                    }
                    return e.reverse();
                };
                e.prototype.getNodeArray = function(e, t, i) {
                    var r = [];
                    ((t) ? (this.startNodeName = []) : (this.endNodeName = []));
                    for(; e !== (i ? i : this.rootNode); null){
                        if ((0, n.le)(e)) {
                            break;
                        }
                        (t) ? this.startNodeName.push(e.nodeName.toLowerCase()) : this.endNodeName.push(e.nodeName.toLowerCase());
                        r.push(this.getIndex(e));
                        e = e.parentNode;
                    }
                    return r;
                };
                e.prototype.setRangePoint = function(e, t, i, n) {
                    var r = this.rootNode;
                    var s = i.length;
                    var o = n;
                    for(; s--; null){
                        r = r && r.childNodes[i[s]];
                    }
                    if (r && o >= 0 && r.nodeName !== 'html') {
                        if (r.nodeType === 3 && r.nodeValue.replace(/\u00a0/g, '&nbsp;') === '&nbsp;') {
                            o = r.textContent.length;
                        }
                        e[t ? 'setStart' : 'setEnd'](r, o);
                    }
                    return e;
                };
                e.prototype.restore = function() {
                    var e = this.range.cloneRange();
                    e = this.setRangePoint(e, true, this.startContainer, this.startOffset);
                    e = this.setRangePoint(e, false, this.endContainer, this.endOffset);
                    this.selectRange(this.rootNode, e);
                    return e;
                };
                e.prototype.selectRange = function(e, t) {
                    this.setRange(e, t);
                    this.save(t, e);
                };
                e.prototype.setRange = function(e, t) {
                    var i = this.get(e);
                    i.removeAllRanges();
                    i.addRange(t);
                };
                e.prototype.setSelectionText = function(e, t, i, n, r) {
                    var s = e.createRange();
                    s.setStart(t, n);
                    s.setEnd(i, r);
                    this.setRange(e, s);
                };
                e.prototype.setSelectionContents = function(e, t) {
                    var i = e.createRange();
                    i.selectNode(t);
                    this.setRange(e, i);
                };
                e.prototype.setSelectionNode = function(e, t) {
                    var i = e.createRange();
                    i.selectNodeContents(t);
                    this.setRange(e, i);
                };
                e.prototype.getSelectedNodes = function(e) {
                    return this.getNodeCollection(this.getRange(e));
                };
                e.prototype.Clear = function(e) {
                    this.get(e).removeAllRanges();
                };
                e.prototype.insertParentNode = function(e, t, i) {
                    i.surroundContents(t);
                    this.selectRange(e, i);
                };
                e.prototype.setCursorPoint = function(e, t, i) {
                    var n = e.createRange();
                    var r = e.defaultView.getSelection();
                    n.setStart(t, i);
                    n.collapse(true);
                    r.removeAllRanges();
                    r.addRange(n);
                };
                return e;
            }());
        }),
        9008: (function(e, t, i) {
            e.exports = i(5443);
        })
    }
]);
