"use strict";
(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([
    [
        186
    ],
    {
        6054: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            __webpack_require__.d(__webpack_exports__, {
                MR: function() {
                    return PDFFont;
                },
                ZP: function() {
                    return PDFDocument;
                }
            });
            var currentQueue, ReflectOwnKeys, _Object$setPrototypeO, debug, StringDecoder, createReadableStreamAsyncIterator, from, realHasInstance, eos, undefined$1, GeneratorFunction, assert$1, util, keysShim$1, isDeepEqual, isDeepStrictEqual, cx, cy, px, py, sx, sy, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(5068), _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(7326), pako_lib_zlib_zstream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2292), pako_lib_zlib_zstream__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(pako_lib_zlib_zstream__WEBPACK_IMPORTED_MODULE_0__), pako_lib_zlib_deflate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(405), pako_lib_zlib_inflate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7948), pako_lib_zlib_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1619), pako_lib_zlib_constants__WEBPACK_IMPORTED_MODULE_3___default = __webpack_require__.n(pako_lib_zlib_constants__WEBPACK_IMPORTED_MODULE_3__), _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(7855), crypto_js_md5__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8214), crypto_js_md5__WEBPACK_IMPORTED_MODULE_4___default = __webpack_require__.n(crypto_js_md5__WEBPACK_IMPORTED_MODULE_4__), fontkit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4201), _react_pdf_png_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1852), _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(7462), global$1 = void 0 !== __webpack_require__.g ? __webpack_require__.g : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, lookup$1 = [], revLookup$1 = [], Arr$1 = 'undefined' != typeof Uint8Array ? Uint8Array : Array, inited = !1;
            function init() {
                inited = !0;
                for(var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/', i = 0, len = code.length; i < len; ++i)lookup$1[i] = code[i], revLookup$1[code.charCodeAt(i)] = i;
                revLookup$1['-'.charCodeAt(0)] = 62, revLookup$1['_'.charCodeAt(0)] = 63;
            }
            function toByteArray$1(b64) {
                inited || init();
                var i, j, l, tmp, placeHolders, arr, len = b64.length;
                if (len % 4 > 0) throw Error('Invalid string. Length must be a multiple of 4');
                placeHolders = '=' === b64[len - 2] ? 2 : '=' === b64[len - 1] ? 1 : 0, arr = new Arr$1(3 * len / 4 - placeHolders), l = placeHolders > 0 ? len - 4 : len;
                var L = 0;
                for(i = 0, j = 0; i < l; i += 4, j += 3)tmp = revLookup$1[b64.charCodeAt(i)] << 18 | revLookup$1[b64.charCodeAt(i + 1)] << 12 | revLookup$1[b64.charCodeAt(i + 2)] << 6 | revLookup$1[b64.charCodeAt(i + 3)], arr[L++] = tmp >> 16 & 0xFF, arr[L++] = tmp >> 8 & 0xFF, arr[L++] = 0xFF & tmp;
                return 2 === placeHolders ? (tmp = revLookup$1[b64.charCodeAt(i)] << 2 | revLookup$1[b64.charCodeAt(i + 1)] >> 4, arr[L++] = 0xFF & tmp) : 1 === placeHolders && (tmp = revLookup$1[b64.charCodeAt(i)] << 10 | revLookup$1[b64.charCodeAt(i + 1)] << 4 | revLookup$1[b64.charCodeAt(i + 2)] >> 2, arr[L++] = tmp >> 8 & 0xFF, arr[L++] = 0xFF & tmp), arr;
            }
            function tripletToBase64$1(num) {
                return lookup$1[num >> 18 & 0x3F] + lookup$1[num >> 12 & 0x3F] + lookup$1[num >> 6 & 0x3F] + lookup$1[0x3F & num];
            }
            function encodeChunk$1(uint8, start, end) {
                for(var output = [], i = start; i < end; i += 3)output.push(tripletToBase64$1((uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]));
                return output.join('');
            }
            function fromByteArray$1(uint8) {
                inited || init();
                for(var tmp, len = uint8.length, extraBytes = len % 3, output = '', parts = [], maxChunkLength = 16383, i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk$1(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
                return 1 === extraBytes ? (output += lookup$1[(tmp = uint8[len - 1]) >> 2], output += lookup$1[tmp << 4 & 0x3F], output += '==') : 2 === extraBytes && (output += lookup$1[(tmp = (uint8[len - 2] << 8) + uint8[len - 1]) >> 10], output += lookup$1[tmp >> 4 & 0x3F], output += lookup$1[tmp << 2 & 0x3F], output += '='), parts.push(output), parts.join('');
            }
            function read(buffer, offset, isLE, mLen, nBytes) {
                var e, m, eLen = 8 * nBytes - mLen - 1, eMax = (1 << eLen) - 1, eBias = eMax >> 1, nBits = -7, i = isLE ? nBytes - 1 : 0, d = isLE ? -1 : 1, s = buffer[offset + i];
                for(i += d, e = s & (1 << -nBits) - 1, s >>= -nBits, nBits += eLen; nBits > 0; e = 256 * e + buffer[offset + i], i += d, nBits -= 8);
                for(m = e & (1 << -nBits) - 1, e >>= -nBits, nBits += mLen; nBits > 0; m = 256 * m + buffer[offset + i], i += d, nBits -= 8);
                if (0 === e) e = 1 - eBias;
                else {
                    if (e === eMax) return m ? NaN : (s ? -1 : 1) * (1 / 0);
                    m += Math.pow(2, mLen), e -= eBias;
                }
                return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
            }
            function write(buffer, value, offset, isLE, mLen, nBytes) {
                var e, m, c, eLen = 8 * nBytes - mLen - 1, eMax = (1 << eLen) - 1, eBias = eMax >> 1, rt = 23 === mLen ? 0.00000005960464477539062 : 0, i = isLE ? 0 : nBytes - 1, d = isLE ? 1 : -1, s = value < 0 || 0 === value && 1 / value < 0 ? 1 : 0;
                for(value = Math.abs(value), isNaN(value) || value === 1 / 0 ? (m = isNaN(value) ? 1 : 0, e = eMax) : (e = Math.floor(Math.log(value) / Math.LN2), value * (c = Math.pow(2, -e)) < 1 && (e--, c *= 2), e + eBias >= 1 ? value += rt / c : value += rt * Math.pow(2, 1 - eBias), value * c >= 2 && (e++, c /= 2), e + eBias >= eMax ? (m = 0, e = eMax) : e + eBias >= 1 ? (m = (value * c - 1) * Math.pow(2, mLen), e += eBias) : (m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen), e = 0)); mLen >= 8; buffer[offset + i] = 0xff & m, i += d, m /= 256, mLen -= 8);
                for(e = e << mLen | m, eLen += mLen; eLen > 0; buffer[offset + i] = 0xff & e, i += d, e /= 256, eLen -= 8);
                buffer[offset + i - d] |= 128 * s;
            }
            var toString$1 = {}.toString, isArray = Array.isArray || function(arr) {
                return '[object Array]' == toString$1.call(arr);
            };
            function kMaxLength() {
                return Buffer$4.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
            }
            function createBuffer(that, length) {
                if (kMaxLength() < length) throw RangeError('Invalid typed array length');
                return Buffer$4.TYPED_ARRAY_SUPPORT ? (that = new Uint8Array(length)).__proto__ = Buffer$4.prototype : (null === that && (that = new Buffer$4(length)), that.length = length), that;
            }
            function Buffer$4(arg, encodingOrOffset, length) {
                if (!Buffer$4.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$4)) return new Buffer$4(arg, encodingOrOffset, length);
                if ('number' == typeof arg) {
                    if ('string' == typeof encodingOrOffset) throw Error('If encoding is specified then the first argument must be a string');
                    return allocUnsafe(this, arg);
                }
                return from$1(this, arg, encodingOrOffset, length);
            }
            function from$1(that, value, encodingOrOffset, length) {
                if ('number' == typeof value) throw TypeError('"value" argument must not be a number');
                return 'undefined' != typeof ArrayBuffer && value instanceof ArrayBuffer ? fromArrayBuffer(that, value, encodingOrOffset, length) : 'string' == typeof value ? fromString(that, value, encodingOrOffset) : fromObject(that, value);
            }
            function assertSize(size) {
                if ('number' != typeof size) throw TypeError('"size" argument must be a number');
                if (size < 0) throw RangeError('"size" argument must not be negative');
            }
            function alloc(that, size, fill, encoding) {
                return (assertSize(size), size <= 0) ? createBuffer(that, size) : void 0 !== fill ? 'string' == typeof encoding ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill) : createBuffer(that, size);
            }
            function allocUnsafe(that, size) {
                if (assertSize(size), that = createBuffer(that, size < 0 ? 0 : 0 | checked(size)), !Buffer$4.TYPED_ARRAY_SUPPORT) for(var i = 0; i < size; ++i)that[i] = 0;
                return that;
            }
            function fromString(that, string, encoding) {
                if (('string' != typeof encoding || '' === encoding) && (encoding = 'utf8'), !Buffer$4.isEncoding(encoding)) throw TypeError('"encoding" must be a valid string encoding');
                var length = 0 | byteLength$1(string, encoding), actual = (that = createBuffer(that, length)).write(string, encoding);
                return actual !== length && (that = that.slice(0, actual)), that;
            }
            function fromArrayLike(that, array) {
                var length = array.length < 0 ? 0 : 0 | checked(array.length);
                that = createBuffer(that, length);
                for(var i = 0; i < length; i += 1)that[i] = 255 & array[i];
                return that;
            }
            function fromArrayBuffer(that, array, byteOffset, length) {
                if (array.byteLength, byteOffset < 0 || array.byteLength < byteOffset) throw RangeError('\'offset\' is out of bounds');
                if (array.byteLength < byteOffset + (length || 0)) throw RangeError('\'length\' is out of bounds');
                return array = void 0 === byteOffset && void 0 === length ? new Uint8Array(array) : void 0 === length ? new Uint8Array(array, byteOffset) : new Uint8Array(array, byteOffset, length), Buffer$4.TYPED_ARRAY_SUPPORT ? (that = array).__proto__ = Buffer$4.prototype : that = fromArrayLike(that, array), that;
            }
            function fromObject(that, obj) {
                if (internalIsBuffer(obj)) {
                    var len = 0 | checked(obj.length);
                    return 0 === (that = createBuffer(that, len)).length || obj.copy(that, 0, 0, len), that;
                }
                if (obj) {
                    if ('undefined' != typeof ArrayBuffer && obj.buffer instanceof ArrayBuffer || 'length' in obj) return 'number' != typeof obj.length || isnan(obj.length) ? createBuffer(that, 0) : fromArrayLike(that, obj);
                    if ('Buffer' === obj.type && isArray(obj.data)) return fromArrayLike(that, obj.data);
                }
                throw TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
            }
            function checked(length) {
                if (length >= kMaxLength()) throw RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + ' bytes');
                return 0 | length;
            }
            function internalIsBuffer(b) {
                return !!(null != b && b._isBuffer);
            }
            function byteLength$1(string, encoding) {
                if (internalIsBuffer(string)) return string.length;
                if ('undefined' != typeof ArrayBuffer && 'function' == typeof ArrayBuffer.isView && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) return string.byteLength;
                'string' != typeof string && (string = '' + string);
                var len = string.length;
                if (0 === len) return 0;
                for(var loweredCase = !1;;)switch(encoding){
                    case 'ascii':
                    case 'latin1':
                    case 'binary':
                        return len;
                    case 'utf8':
                    case 'utf-8':
                    case void 0:
                        return utf8ToBytes(string).length;
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return 2 * len;
                    case 'hex':
                        return len >>> 1;
                    case 'base64':
                        return base64ToBytes(string).length;
                    default:
                        if (loweredCase) return utf8ToBytes(string).length;
                        encoding = ('' + encoding).toLowerCase(), loweredCase = !0;
                }
            }
            function slowToString(encoding, start, end) {
                var loweredCase = !1;
                if ((void 0 === start || start < 0) && (start = 0), start > this.length || ((void 0 === end || end > this.length) && (end = this.length), end <= 0 || (end >>>= 0) <= (start >>>= 0))) return '';
                for(encoding || (encoding = 'utf8');;)switch(encoding){
                    case 'hex':
                        return hexSlice(this, start, end);
                    case 'utf8':
                    case 'utf-8':
                        return utf8Slice(this, start, end);
                    case 'ascii':
                        return asciiSlice(this, start, end);
                    case 'latin1':
                    case 'binary':
                        return latin1Slice(this, start, end);
                    case 'base64':
                        return base64Slice(this, start, end);
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return utf16leSlice(this, start, end);
                    default:
                        if (loweredCase) throw TypeError('Unknown encoding: ' + encoding);
                        encoding = (encoding + '').toLowerCase(), loweredCase = !0;
                }
            }
            function swap(b, n, m) {
                var i = b[n];
                b[n] = b[m], b[m] = i;
            }
            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                if (0 === buffer.length) return -1;
                if ('string' == typeof byteOffset ? (encoding = byteOffset, byteOffset = 0) : byteOffset > 0x7fffffff ? byteOffset = 0x7fffffff : byteOffset < -2147483648 && (byteOffset = -2147483648), isNaN(byteOffset = +byteOffset) && (byteOffset = dir ? 0 : buffer.length - 1), byteOffset < 0 && (byteOffset = buffer.length + byteOffset), byteOffset >= buffer.length) {
                    if (dir) return -1;
                    byteOffset = buffer.length - 1;
                } else if (byteOffset < 0) {
                    if (!dir) return -1;
                    byteOffset = 0;
                }
                if ('string' == typeof val && (val = Buffer$4.from(val, encoding)), internalIsBuffer(val)) return 0 === val.length ? -1 : arrayIndexOf(buffer, val, byteOffset, encoding, dir);
                if ('number' == typeof val) return (val &= 0xFF, Buffer$4.TYPED_ARRAY_SUPPORT && 'function' == typeof Uint8Array.prototype.indexOf) ? dir ? Uint8Array.prototype.indexOf.call(buffer, val, byteOffset) : Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset) : arrayIndexOf(buffer, [
                    val
                ], byteOffset, encoding, dir);
                throw TypeError('val must be string, number or Buffer');
            }
            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                var i, indexSize = 1, arrLength = arr.length, valLength = val.length;
                if (void 0 !== encoding && ('ucs2' === (encoding = String(encoding).toLowerCase()) || 'ucs-2' === encoding || 'utf16le' === encoding || 'utf-16le' === encoding)) {
                    if (arr.length < 2 || val.length < 2) return -1;
                    indexSize = 2, arrLength /= 2, valLength /= 2, byteOffset /= 2;
                }
                function read(buf, i) {
                    return 1 === indexSize ? buf[i] : buf.readUInt16BE(i * indexSize);
                }
                if (dir) {
                    var foundIndex = -1;
                    for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, -1 === foundIndex ? 0 : i - foundIndex)) {
                        if (-1 === foundIndex && (foundIndex = i), i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                    } else -1 !== foundIndex && (i -= i - foundIndex), foundIndex = -1;
                } else for(byteOffset + valLength > arrLength && (byteOffset = arrLength - valLength), i = byteOffset; i >= 0; i--){
                    for(var found = !0, j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                        found = !1;
                        break;
                    }
                    if (found) return i;
                }
                return -1;
            }
            function hexWrite(buf, string, offset, length) {
                offset = Number(offset) || 0;
                var remaining = buf.length - offset;
                length ? (length = Number(length)) > remaining && (length = remaining) : length = remaining;
                var strLen = string.length;
                if (strLen % 2 != 0) throw TypeError('Invalid hex string');
                length > strLen / 2 && (length = strLen / 2);
                for(var i = 0; i < length; ++i){
                    var parsed = parseInt(string.substr(2 * i, 2), 16);
                    if (isNaN(parsed)) break;
                    buf[offset + i] = parsed;
                }
                return i;
            }
            function utf8Write(buf, string, offset, length) {
                return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
            }
            function asciiWrite(buf, string, offset, length) {
                return blitBuffer(asciiToBytes(string), buf, offset, length);
            }
            function latin1Write(buf, string, offset, length) {
                return asciiWrite(buf, string, offset, length);
            }
            function base64Write(buf, string, offset, length) {
                return blitBuffer(base64ToBytes(string), buf, offset, length);
            }
            function ucs2Write(buf, string, offset, length) {
                return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
            }
            function base64Slice(buf, start, end) {
                return 0 === start && end === buf.length ? fromByteArray$1(buf) : fromByteArray$1(buf.slice(start, end));
            }
            function utf8Slice(buf, start, end) {
                end = Math.min(buf.length, end);
                for(var res = [], i = start; i < end;){
                    var secondByte, thirdByte, fourthByte, tempCodePoint, firstByte = buf[i], codePoint = null, bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
                    if (i + bytesPerSequence <= end) switch(bytesPerSequence){
                        case 1:
                            firstByte < 0x80 && (codePoint = firstByte);
                            break;
                        case 2:
                            (0xC0 & (secondByte = buf[i + 1])) == 0x80 && (tempCodePoint = (0x1F & firstByte) << 0x6 | 0x3F & secondByte) > 0x7F && (codePoint = tempCodePoint);
                            break;
                        case 3:
                            secondByte = buf[i + 1], thirdByte = buf[i + 2], (0xC0 & secondByte) == 0x80 && (0xC0 & thirdByte) == 0x80 && (tempCodePoint = (0xF & firstByte) << 0xC | (0x3F & secondByte) << 0x6 | 0x3F & thirdByte) > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF) && (codePoint = tempCodePoint);
                            break;
                        case 4:
                            secondByte = buf[i + 1], thirdByte = buf[i + 2], fourthByte = buf[i + 3], (0xC0 & secondByte) == 0x80 && (0xC0 & thirdByte) == 0x80 && (0xC0 & fourthByte) == 0x80 && (tempCodePoint = (0xF & firstByte) << 0x12 | (0x3F & secondByte) << 0xC | (0x3F & thirdByte) << 0x6 | 0x3F & fourthByte) > 0xFFFF && tempCodePoint < 0x110000 && (codePoint = tempCodePoint);
                    }
                    null === codePoint ? (codePoint = 0xFFFD, bytesPerSequence = 1) : codePoint > 0xFFFF && (codePoint -= 0x10000, res.push(codePoint >>> 10 & 0x3FF | 0xD800), codePoint = 0xDC00 | 0x3FF & codePoint), res.push(codePoint), i += bytesPerSequence;
                }
                return decodeCodePointsArray(res);
            }
            Buffer$4.TYPED_ARRAY_SUPPORT = void 0 === global$1.TYPED_ARRAY_SUPPORT || global$1.TYPED_ARRAY_SUPPORT, Buffer$4.poolSize = 8192, Buffer$4._augment = function(arr) {
                return arr.__proto__ = Buffer$4.prototype, arr;
            }, Buffer$4.from = function(value, encodingOrOffset, length) {
                return from$1(null, value, encodingOrOffset, length);
            }, Buffer$4.TYPED_ARRAY_SUPPORT && (Buffer$4.prototype.__proto__ = Uint8Array.prototype, Buffer$4.__proto__ = Uint8Array), Buffer$4.alloc = function(size, fill, encoding) {
                return alloc(null, size, fill, encoding);
            }, Buffer$4.allocUnsafe = function(size) {
                return allocUnsafe(null, size);
            }, Buffer$4.allocUnsafeSlow = function(size) {
                return allocUnsafe(null, size);
            }, Buffer$4.isBuffer = isBuffer, Buffer$4.compare = function(a, b) {
                if (!internalIsBuffer(a) || !internalIsBuffer(b)) throw TypeError('Arguments must be Buffers');
                if (a === b) return 0;
                for(var x = a.length, y = b.length, i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
                    x = a[i], y = b[i];
                    break;
                }
                return x < y ? -1 : y < x ? 1 : 0;
            }, Buffer$4.isEncoding = function(encoding) {
                switch(String(encoding).toLowerCase()){
                    case 'hex':
                    case 'utf8':
                    case 'utf-8':
                    case 'ascii':
                    case 'latin1':
                    case 'binary':
                    case 'base64':
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return !0;
                    default:
                        return !1;
                }
            }, Buffer$4.concat = function(list, length) {
                if (!isArray(list)) throw TypeError('"list" argument must be an Array of Buffers');
                if (0 === list.length) return Buffer$4.alloc(0);
                if (void 0 === length) for(i = 0, length = 0; i < list.length; ++i)length += list[i].length;
                var i, buffer = Buffer$4.allocUnsafe(length), pos = 0;
                for(i = 0; i < list.length; ++i){
                    var buf = list[i];
                    if (!internalIsBuffer(buf)) throw TypeError('"list" argument must be an Array of Buffers');
                    buf.copy(buffer, pos), pos += buf.length;
                }
                return buffer;
            }, Buffer$4.byteLength = byteLength$1, Buffer$4.prototype._isBuffer = !0, Buffer$4.prototype.swap16 = function() {
                var len = this.length;
                if (len % 2 != 0) throw RangeError('Buffer size must be a multiple of 16-bits');
                for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
                return this;
            }, Buffer$4.prototype.swap32 = function() {
                var len = this.length;
                if (len % 4 != 0) throw RangeError('Buffer size must be a multiple of 32-bits');
                for(var i = 0; i < len; i += 4)swap(this, i, i + 3), swap(this, i + 1, i + 2);
                return this;
            }, Buffer$4.prototype.swap64 = function() {
                var len = this.length;
                if (len % 8 != 0) throw RangeError('Buffer size must be a multiple of 64-bits');
                for(var i = 0; i < len; i += 8)swap(this, i, i + 7), swap(this, i + 1, i + 6), swap(this, i + 2, i + 5), swap(this, i + 3, i + 4);
                return this;
            }, Buffer$4.prototype.toString = function() {
                var length = 0 | this.length;
                return 0 === length ? '' : 0 === arguments.length ? utf8Slice(this, 0, length) : slowToString.apply(this, arguments);
            }, Buffer$4.prototype.equals = function(b) {
                if (!internalIsBuffer(b)) throw TypeError('Argument must be a Buffer');
                return this === b || 0 === Buffer$4.compare(this, b);
            }, Buffer$4.prototype.inspect = function() {
                var str = '', max = 50;
                return this.length > 0 && (str = this.toString('hex', 0, max).match(/.{2}/g).join(' '), this.length > max && (str += ' ... ')), '<Buffer ' + str + '>';
            }, Buffer$4.prototype.compare = function(target, start, end, thisStart, thisEnd) {
                if (!internalIsBuffer(target)) throw TypeError('Argument must be a Buffer');
                if (void 0 === start && (start = 0), void 0 === end && (end = target ? target.length : 0), void 0 === thisStart && (thisStart = 0), void 0 === thisEnd && (thisEnd = this.length), start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw RangeError('out of range index');
                if (thisStart >= thisEnd && start >= end) return 0;
                if (thisStart >= thisEnd) return -1;
                if (start >= end) return 1;
                if (start >>>= 0, end >>>= 0, thisStart >>>= 0, thisEnd >>>= 0, this === target) return 0;
                for(var x = thisEnd - thisStart, y = end - start, len = Math.min(x, y), thisCopy = this.slice(thisStart, thisEnd), targetCopy = target.slice(start, end), i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
                    x = thisCopy[i], y = targetCopy[i];
                    break;
                }
                return x < y ? -1 : y < x ? 1 : 0;
            }, Buffer$4.prototype.includes = function(val, byteOffset, encoding) {
                return -1 !== this.indexOf(val, byteOffset, encoding);
            }, Buffer$4.prototype.indexOf = function(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, !0);
            }, Buffer$4.prototype.lastIndexOf = function(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, !1);
            }, Buffer$4.prototype.write = function(string, offset, length, encoding) {
                if (void 0 === offset) encoding = 'utf8', length = this.length, offset = 0;
                else if (void 0 === length && 'string' == typeof offset) encoding = offset, length = this.length, offset = 0;
                else if (isFinite(offset)) offset |= 0, isFinite(length) ? (length |= 0, void 0 === encoding && (encoding = 'utf8')) : (encoding = length, length = void 0);
                else throw Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
                var remaining = this.length - offset;
                if ((void 0 === length || length > remaining) && (length = remaining), string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw RangeError('Attempt to write outside buffer bounds');
                encoding || (encoding = 'utf8');
                for(var loweredCase = !1;;)switch(encoding){
                    case 'hex':
                        return hexWrite(this, string, offset, length);
                    case 'utf8':
                    case 'utf-8':
                        return utf8Write(this, string, offset, length);
                    case 'ascii':
                        return asciiWrite(this, string, offset, length);
                    case 'latin1':
                    case 'binary':
                        return latin1Write(this, string, offset, length);
                    case 'base64':
                        return base64Write(this, string, offset, length);
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return ucs2Write(this, string, offset, length);
                    default:
                        if (loweredCase) throw TypeError('Unknown encoding: ' + encoding);
                        encoding = ('' + encoding).toLowerCase(), loweredCase = !0;
                }
            }, Buffer$4.prototype.toJSON = function() {
                return {
                    type: 'Buffer',
                    data: Array.prototype.slice.call(this._arr || this, 0)
                };
            };
            var MAX_ARGUMENTS_LENGTH = 0x1000;
            function decodeCodePointsArray(codePoints) {
                var len = codePoints.length;
                if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints);
                for(var res = '', i = 0; i < len;)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
                return res;
            }
            function asciiSlice(buf, start, end) {
                var ret = '';
                end = Math.min(buf.length, end);
                for(var i = start; i < end; ++i)ret += String.fromCharCode(0x7F & buf[i]);
                return ret;
            }
            function latin1Slice(buf, start, end) {
                var ret = '';
                end = Math.min(buf.length, end);
                for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
                return ret;
            }
            function hexSlice(buf, start, end) {
                var len = buf.length;
                (!start || start < 0) && (start = 0), (!end || end < 0 || end > len) && (end = len);
                for(var out = '', i = start; i < end; ++i)out += toHex$1(buf[i]);
                return out;
            }
            function utf16leSlice(buf, start, end) {
                for(var bytes = buf.slice(start, end), res = '', i = 0; i < bytes.length; i += 2)res += String.fromCharCode(bytes[i] + 256 * bytes[i + 1]);
                return res;
            }
            function checkOffset(offset, ext, length) {
                if (offset % 1 != 0 || offset < 0) throw RangeError('offset is not uint');
                if (offset + ext > length) throw RangeError('Trying to access beyond buffer length');
            }
            function checkInt(buf, value, offset, ext, max, min) {
                if (!internalIsBuffer(buf)) throw TypeError('"buffer" argument must be a Buffer instance');
                if (value > max || value < min) throw RangeError('"value" argument is out of bounds');
                if (offset + ext > buf.length) throw RangeError('Index out of range');
            }
            function objectWriteUInt16(buf, value, offset, littleEndian) {
                value < 0 && (value = 0xffff + value + 1);
                for(var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i)buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
            }
            function objectWriteUInt32(buf, value, offset, littleEndian) {
                value < 0 && (value = 0xffffffff + value + 1);
                for(var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i)buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
            }
            function checkIEEE754(buf, value, offset, ext, max, min) {
                if (offset + ext > buf.length || offset < 0) throw RangeError('Index out of range');
            }
            function writeFloat(buf, value, offset, littleEndian, noAssert) {
                return noAssert || checkIEEE754(buf, value, offset, 4), write(buf, value, offset, littleEndian, 23, 4), offset + 4;
            }
            function writeDouble(buf, value, offset, littleEndian, noAssert) {
                return noAssert || checkIEEE754(buf, value, offset, 8), write(buf, value, offset, littleEndian, 52, 8), offset + 8;
            }
            Buffer$4.prototype.slice = function(start, end) {
                var newBuf, len = this.length;
                if (start = ~~start, end = void 0 === end ? len : ~~end, start < 0 ? (start += len) < 0 && (start = 0) : start > len && (start = len), end < 0 ? (end += len) < 0 && (end = 0) : end > len && (end = len), end < start && (end = start), Buffer$4.TYPED_ARRAY_SUPPORT) (newBuf = this.subarray(start, end)).__proto__ = Buffer$4.prototype;
                else {
                    var sliceLen = end - start;
                    newBuf = new Buffer$4(sliceLen, void 0);
                    for(var i = 0; i < sliceLen; ++i)newBuf[i] = this[i + start];
                }
                return newBuf;
            }, Buffer$4.prototype.readUIntLE = function(offset, byteLength, noAssert) {
                offset |= 0, byteLength |= 0, noAssert || checkOffset(offset, byteLength, this.length);
                for(var val = this[offset], mul = 1, i = 0; ++i < byteLength && (mul *= 0x100);)val += this[offset + i] * mul;
                return val;
            }, Buffer$4.prototype.readUIntBE = function(offset, byteLength, noAssert) {
                offset |= 0, byteLength |= 0, noAssert || checkOffset(offset, byteLength, this.length);
                for(var val = this[offset + --byteLength], mul = 1; byteLength > 0 && (mul *= 0x100);)val += this[offset + --byteLength] * mul;
                return val;
            }, Buffer$4.prototype.readUInt8 = function(offset, noAssert) {
                return noAssert || checkOffset(offset, 1, this.length), this[offset];
            }, Buffer$4.prototype.readUInt16LE = function(offset, noAssert) {
                return noAssert || checkOffset(offset, 2, this.length), this[offset] | this[offset + 1] << 8;
            }, Buffer$4.prototype.readUInt16BE = function(offset, noAssert) {
                return noAssert || checkOffset(offset, 2, this.length), this[offset] << 8 | this[offset + 1];
            }, Buffer$4.prototype.readUInt32LE = function(offset, noAssert) {
                return noAssert || checkOffset(offset, 4, this.length), (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + 0x1000000 * this[offset + 3];
            }, Buffer$4.prototype.readUInt32BE = function(offset, noAssert) {
                return noAssert || checkOffset(offset, 4, this.length), 0x1000000 * this[offset] + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
            }, Buffer$4.prototype.readIntLE = function(offset, byteLength, noAssert) {
                offset |= 0, byteLength |= 0, noAssert || checkOffset(offset, byteLength, this.length);
                for(var val = this[offset], mul = 1, i = 0; ++i < byteLength && (mul *= 0x100);)val += this[offset + i] * mul;
                return val >= (mul *= 0x80) && (val -= Math.pow(2, 8 * byteLength)), val;
            }, Buffer$4.prototype.readIntBE = function(offset, byteLength, noAssert) {
                offset |= 0, byteLength |= 0, noAssert || checkOffset(offset, byteLength, this.length);
                for(var i = byteLength, mul = 1, val = this[offset + --i]; i > 0 && (mul *= 0x100);)val += this[offset + --i] * mul;
                return val >= (mul *= 0x80) && (val -= Math.pow(2, 8 * byteLength)), val;
            }, Buffer$4.prototype.readInt8 = function(offset, noAssert) {
                return (noAssert || checkOffset(offset, 1, this.length), 0x80 & this[offset]) ? -((0xff - this[offset] + 1) * 1) : this[offset];
            }, Buffer$4.prototype.readInt16LE = function(offset, noAssert) {
                noAssert || checkOffset(offset, 2, this.length);
                var val = this[offset] | this[offset + 1] << 8;
                return 0x8000 & val ? 0xFFFF0000 | val : val;
            }, Buffer$4.prototype.readInt16BE = function(offset, noAssert) {
                noAssert || checkOffset(offset, 2, this.length);
                var val = this[offset + 1] | this[offset] << 8;
                return 0x8000 & val ? 0xFFFF0000 | val : val;
            }, Buffer$4.prototype.readInt32LE = function(offset, noAssert) {
                return noAssert || checkOffset(offset, 4, this.length), this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
            }, Buffer$4.prototype.readInt32BE = function(offset, noAssert) {
                return noAssert || checkOffset(offset, 4, this.length), this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
            }, Buffer$4.prototype.readFloatLE = function(offset, noAssert) {
                return noAssert || checkOffset(offset, 4, this.length), read(this, offset, !0, 23, 4);
            }, Buffer$4.prototype.readFloatBE = function(offset, noAssert) {
                return noAssert || checkOffset(offset, 4, this.length), read(this, offset, !1, 23, 4);
            }, Buffer$4.prototype.readDoubleLE = function(offset, noAssert) {
                return noAssert || checkOffset(offset, 8, this.length), read(this, offset, !0, 52, 8);
            }, Buffer$4.prototype.readDoubleBE = function(offset, noAssert) {
                return noAssert || checkOffset(offset, 8, this.length), read(this, offset, !1, 52, 8);
            }, Buffer$4.prototype.writeUIntLE = function(value, offset, byteLength, noAssert) {
                value = +value, offset |= 0, byteLength |= 0, noAssert || checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength) - 1, 0);
                var mul = 1, i = 0;
                for(this[offset] = 0xFF & value; ++i < byteLength && (mul *= 0x100);)this[offset + i] = value / mul & 0xFF;
                return offset + byteLength;
            }, Buffer$4.prototype.writeUIntBE = function(value, offset, byteLength, noAssert) {
                value = +value, offset |= 0, byteLength |= 0, noAssert || checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength) - 1, 0);
                var i = byteLength - 1, mul = 1;
                for(this[offset + i] = 0xFF & value; --i >= 0 && (mul *= 0x100);)this[offset + i] = value / mul & 0xFF;
                return offset + byteLength;
            }, Buffer$4.prototype.writeUInt8 = function(value, offset, noAssert) {
                return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 1, 0xff, 0), Buffer$4.TYPED_ARRAY_SUPPORT || (value = Math.floor(value)), this[offset] = 0xff & value, offset + 1;
            }, Buffer$4.prototype.writeUInt16LE = function(value, offset, noAssert) {
                return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 2, 0xffff, 0), Buffer$4.TYPED_ARRAY_SUPPORT ? (this[offset] = 0xff & value, this[offset + 1] = value >>> 8) : objectWriteUInt16(this, value, offset, !0), offset + 2;
            }, Buffer$4.prototype.writeUInt16BE = function(value, offset, noAssert) {
                return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 2, 0xffff, 0), Buffer$4.TYPED_ARRAY_SUPPORT ? (this[offset] = value >>> 8, this[offset + 1] = 0xff & value) : objectWriteUInt16(this, value, offset, !1), offset + 2;
            }, Buffer$4.prototype.writeUInt32LE = function(value, offset, noAssert) {
                return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 4, 0xffffffff, 0), Buffer$4.TYPED_ARRAY_SUPPORT ? (this[offset + 3] = value >>> 24, this[offset + 2] = value >>> 16, this[offset + 1] = value >>> 8, this[offset] = 0xff & value) : objectWriteUInt32(this, value, offset, !0), offset + 4;
            }, Buffer$4.prototype.writeUInt32BE = function(value, offset, noAssert) {
                return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 4, 0xffffffff, 0), Buffer$4.TYPED_ARRAY_SUPPORT ? (this[offset] = value >>> 24, this[offset + 1] = value >>> 16, this[offset + 2] = value >>> 8, this[offset + 3] = 0xff & value) : objectWriteUInt32(this, value, offset, !1), offset + 4;
            }, Buffer$4.prototype.writeIntLE = function(value, offset, byteLength, noAssert) {
                if (value = +value, offset |= 0, !noAssert) {
                    var limit = Math.pow(2, 8 * byteLength - 1);
                    checkInt(this, value, offset, byteLength, limit - 1, -limit);
                }
                var i = 0, mul = 1, sub = 0;
                for(this[offset] = 0xFF & value; ++i < byteLength && (mul *= 0x100);)value < 0 && 0 === sub && 0 !== this[offset + i - 1] && (sub = 1), this[offset + i] = (value / mul >> 0) - sub & 0xFF;
                return offset + byteLength;
            }, Buffer$4.prototype.writeIntBE = function(value, offset, byteLength, noAssert) {
                if (value = +value, offset |= 0, !noAssert) {
                    var limit = Math.pow(2, 8 * byteLength - 1);
                    checkInt(this, value, offset, byteLength, limit - 1, -limit);
                }
                var i = byteLength - 1, mul = 1, sub = 0;
                for(this[offset + i] = 0xFF & value; --i >= 0 && (mul *= 0x100);)value < 0 && 0 === sub && 0 !== this[offset + i + 1] && (sub = 1), this[offset + i] = (value / mul >> 0) - sub & 0xFF;
                return offset + byteLength;
            }, Buffer$4.prototype.writeInt8 = function(value, offset, noAssert) {
                return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 1, 0x7f, -128), Buffer$4.TYPED_ARRAY_SUPPORT || (value = Math.floor(value)), value < 0 && (value = 0xff + value + 1), this[offset] = 0xff & value, offset + 1;
            }, Buffer$4.prototype.writeInt16LE = function(value, offset, noAssert) {
                return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 2, 0x7fff, -32768), Buffer$4.TYPED_ARRAY_SUPPORT ? (this[offset] = 0xff & value, this[offset + 1] = value >>> 8) : objectWriteUInt16(this, value, offset, !0), offset + 2;
            }, Buffer$4.prototype.writeInt16BE = function(value, offset, noAssert) {
                return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 2, 0x7fff, -32768), Buffer$4.TYPED_ARRAY_SUPPORT ? (this[offset] = value >>> 8, this[offset + 1] = 0xff & value) : objectWriteUInt16(this, value, offset, !1), offset + 2;
            }, Buffer$4.prototype.writeInt32LE = function(value, offset, noAssert) {
                return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 4, 0x7fffffff, -2147483648), Buffer$4.TYPED_ARRAY_SUPPORT ? (this[offset] = 0xff & value, this[offset + 1] = value >>> 8, this[offset + 2] = value >>> 16, this[offset + 3] = value >>> 24) : objectWriteUInt32(this, value, offset, !0), offset + 4;
            }, Buffer$4.prototype.writeInt32BE = function(value, offset, noAssert) {
                return value = +value, offset |= 0, noAssert || checkInt(this, value, offset, 4, 0x7fffffff, -2147483648), value < 0 && (value = 0xffffffff + value + 1), Buffer$4.TYPED_ARRAY_SUPPORT ? (this[offset] = value >>> 24, this[offset + 1] = value >>> 16, this[offset + 2] = value >>> 8, this[offset + 3] = 0xff & value) : objectWriteUInt32(this, value, offset, !1), offset + 4;
            }, Buffer$4.prototype.writeFloatLE = function(value, offset, noAssert) {
                return writeFloat(this, value, offset, !0, noAssert);
            }, Buffer$4.prototype.writeFloatBE = function(value, offset, noAssert) {
                return writeFloat(this, value, offset, !1, noAssert);
            }, Buffer$4.prototype.writeDoubleLE = function(value, offset, noAssert) {
                return writeDouble(this, value, offset, !0, noAssert);
            }, Buffer$4.prototype.writeDoubleBE = function(value, offset, noAssert) {
                return writeDouble(this, value, offset, !1, noAssert);
            }, Buffer$4.prototype.copy = function(target, targetStart, start, end) {
                if (start || (start = 0), end || 0 === end || (end = this.length), targetStart >= target.length && (targetStart = target.length), targetStart || (targetStart = 0), end > 0 && end < start && (end = start), end === start || 0 === target.length || 0 === this.length) return 0;
                if (targetStart < 0) throw RangeError('targetStart out of bounds');
                if (start < 0 || start >= this.length) throw RangeError('sourceStart out of bounds');
                if (end < 0) throw RangeError('sourceEnd out of bounds');
                end > this.length && (end = this.length), target.length - targetStart < end - start && (end = target.length - targetStart + start);
                var i, len = end - start;
                if (this === target && start < targetStart && targetStart < end) for(i = len - 1; i >= 0; --i)target[i + targetStart] = this[i + start];
                else if (len < 1000 || !Buffer$4.TYPED_ARRAY_SUPPORT) for(i = 0; i < len; ++i)target[i + targetStart] = this[i + start];
                else Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
                return len;
            }, Buffer$4.prototype.fill = function(val, start, end, encoding) {
                if ('string' == typeof val) {
                    if ('string' == typeof start ? (encoding = start, start = 0, end = this.length) : 'string' == typeof end && (encoding = end, end = this.length), 1 === val.length) {
                        var i, code = val.charCodeAt(0);
                        code < 256 && (val = code);
                    }
                    if (void 0 !== encoding && 'string' != typeof encoding) throw TypeError('encoding must be a string');
                    if ('string' == typeof encoding && !Buffer$4.isEncoding(encoding)) throw TypeError('Unknown encoding: ' + encoding);
                } else 'number' == typeof val && (val &= 255);
                if (start < 0 || this.length < start || this.length < end) throw RangeError('Out of range index');
                if (end <= start) return this;
                if (start >>>= 0, end = void 0 === end ? this.length : end >>> 0, val || (val = 0), 'number' == typeof val) for(i = start; i < end; ++i)this[i] = val;
                else {
                    var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer$4(val, encoding).toString()), len = bytes.length;
                    for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
                }
                return this;
            };
            var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
            function base64clean(str) {
                if ((str = stringtrim(str).replace(INVALID_BASE64_RE, '')).length < 2) return '';
                for(; str.length % 4 != 0;)str += '=';
                return str;
            }
            function stringtrim(str) {
                return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
            }
            function toHex$1(n) {
                return n < 16 ? '0' + n.toString(16) : n.toString(16);
            }
            function utf8ToBytes(string, units) {
                units = units || 1 / 0;
                for(var codePoint, length = string.length, leadSurrogate = null, bytes = [], i = 0; i < length; ++i){
                    if ((codePoint = string.charCodeAt(i)) > 0xD7FF && codePoint < 0xE000) {
                        if (!leadSurrogate) {
                            if (codePoint > 0xDBFF || i + 1 === length) {
                                (units -= 3) > -1 && bytes.push(0xEF, 0xBF, 0xBD);
                                continue;
                            }
                            leadSurrogate = codePoint;
                            continue;
                        }
                        if (codePoint < 0xDC00) {
                            (units -= 3) > -1 && bytes.push(0xEF, 0xBF, 0xBD), leadSurrogate = codePoint;
                            continue;
                        }
                        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
                    } else leadSurrogate && (units -= 3) > -1 && bytes.push(0xEF, 0xBF, 0xBD);
                    if (leadSurrogate = null, codePoint < 0x80) {
                        if ((units -= 1) < 0) break;
                        bytes.push(codePoint);
                    } else if (codePoint < 0x800) {
                        if ((units -= 2) < 0) break;
                        bytes.push(codePoint >> 0x6 | 0xC0, 0x3F & codePoint | 0x80);
                    } else if (codePoint < 0x10000) {
                        if ((units -= 3) < 0) break;
                        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, 0x3F & codePoint | 0x80);
                    } else if (codePoint < 0x110000) {
                        if ((units -= 4) < 0) break;
                        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, 0x3F & codePoint | 0x80);
                    } else throw Error('Invalid code point');
                }
                return bytes;
            }
            function asciiToBytes(str) {
                for(var byteArray = [], i = 0; i < str.length; ++i)byteArray.push(0xFF & str.charCodeAt(i));
                return byteArray;
            }
            function utf16leToBytes(str, units) {
                for(var c, hi, byteArray = [], i = 0; i < str.length && !((units -= 2) < 0); ++i)hi = (c = str.charCodeAt(i)) >> 8, byteArray.push(c % 256), byteArray.push(hi);
                return byteArray;
            }
            function base64ToBytes(str) {
                return toByteArray$1(base64clean(str));
            }
            function blitBuffer(src, dst, offset, length) {
                for(var i = 0; i < length && !(i + offset >= dst.length) && !(i >= src.length); ++i)dst[i + offset] = src[i];
                return i;
            }
            function isnan(val) {
                return val != val;
            }
            function isBuffer(obj) {
                return null != obj && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
            }
            function isFastBuffer(obj) {
                return !!obj.constructor && 'function' == typeof obj.constructor.isBuffer && obj.constructor.isBuffer(obj);
            }
            function isSlowBuffer(obj) {
                return 'function' == typeof obj.readFloatLE && 'function' == typeof obj.slice && isFastBuffer(obj.slice(0, 0));
            }
            var commonjsGlobal = 'undefined' != typeof globalThis ? globalThis : 'undefined' != typeof window ? window : void 0 !== __webpack_require__.g ? __webpack_require__.g : 'undefined' != typeof self ? self : {};
            function getAugmentedNamespace(n) {
                if (n.__esModule) return n;
                var a = Object.defineProperty({}, '__esModule', {
                    value: !0
                });
                return Object.keys(n).forEach(function(k) {
                    var d = Object.getOwnPropertyDescriptor(n, k);
                    Object.defineProperty(a, k, d.get ? d : {
                        enumerable: !0,
                        get: function() {
                            return n[k];
                        }
                    });
                }), a;
            }
            var readableBrowser = {
                exports: {}
            }, _registry = {};
            function defaultSetTimout() {
                throw Error('setTimeout has not been defined');
            }
            function defaultClearTimeout() {
                throw Error('clearTimeout has not been defined');
            }
            var cachedSetTimeout = defaultSetTimout, cachedClearTimeout = defaultClearTimeout;
            function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) return setTimeout(fun, 0);
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) return cachedSetTimeout = setTimeout, setTimeout(fun, 0);
                try {
                    return cachedSetTimeout(fun, 0);
                } catch (e1) {
                    try {
                        return cachedSetTimeout.call(null, fun, 0);
                    } catch (e) {
                        return cachedSetTimeout.call(this, fun, 0);
                    }
                }
            }
            function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) return clearTimeout(marker);
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) return cachedClearTimeout = clearTimeout, clearTimeout(marker);
                try {
                    return cachedClearTimeout(marker);
                } catch (e1) {
                    try {
                        return cachedClearTimeout.call(null, marker);
                    } catch (e) {
                        return cachedClearTimeout.call(this, marker);
                    }
                }
            }
            'function' == typeof global$1.setTimeout && (cachedSetTimeout = setTimeout), 'function' == typeof global$1.clearTimeout && (cachedClearTimeout = clearTimeout);
            var queue = [], draining = !1, queueIndex = -1;
            function cleanUpNextTick() {
                draining && currentQueue && (draining = !1, currentQueue.length ? queue = currentQueue.concat(queue) : queueIndex = -1, queue.length && drainQueue());
            }
            function drainQueue() {
                if (!draining) {
                    var timeout = runTimeout(cleanUpNextTick);
                    draining = !0;
                    for(var len = queue.length; len;){
                        for(currentQueue = queue, queue = []; ++queueIndex < len;)currentQueue && currentQueue[queueIndex].run();
                        queueIndex = -1, len = queue.length;
                    }
                    currentQueue = null, draining = !1, runClearTimeout(timeout);
                }
            }
            function nextTick(fun) {
                var args = Array(arguments.length - 1);
                if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
                queue.push(new Item(fun, args)), 1 !== queue.length || draining || runTimeout(drainQueue);
            }
            function Item(fun, array) {
                this.fun = fun, this.array = array;
            }
            function noop$2() {}
            function binding$1(name) {
                throw Error('process.binding is not supported');
            }
            function cwd() {
                return '/';
            }
            function chdir(dir) {
                throw Error('process.chdir is not supported');
            }
            function umask() {
                return 0;
            }
            Item.prototype.run = function() {
                this.fun.apply(null, this.array);
            };
            var performance = global$1.performance || {}, performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function() {
                return new Date().getTime();
            };
            function hrtime(previousTimestamp) {
                var clocktime = 1e-3 * performanceNow.call(performance), seconds = Math.floor(clocktime), nanoseconds = Math.floor(clocktime % 1 * 1e9);
                return previousTimestamp && (seconds -= previousTimestamp[0], (nanoseconds -= previousTimestamp[1]) < 0 && (seconds--, nanoseconds += 1e9)), [
                    seconds,
                    nanoseconds
                ];
            }
            var startTime = new Date();
            function uptime() {
                return (new Date() - startTime) / 1000;
            }
            var browser$1$1 = {
                nextTick: nextTick,
                title: 'browser',
                browser: !0,
                env: {},
                argv: [],
                version: '',
                versions: {},
                on: noop$2,
                addListener: noop$2,
                once: noop$2,
                off: noop$2,
                removeListener: noop$2,
                removeAllListeners: noop$2,
                emit: noop$2,
                binding: binding$1,
                cwd: cwd,
                chdir: chdir,
                umask: umask,
                hrtime: hrtime,
                platform: 'browser',
                release: {},
                config: {},
                uptime: uptime
            }, events = {
                exports: {}
            }, R = 'object' == typeof Reflect ? Reflect : null, ReflectApply = R && 'function' == typeof R.apply ? R.apply : function(target, receiver, args) {
                return Function.prototype.apply.call(target, receiver, args);
            };
            function ProcessEmitWarning(warning) {
                console && console.warn && console.warn(warning);
            }
            ReflectOwnKeys = R && 'function' == typeof R.ownKeys ? R.ownKeys : Object.getOwnPropertySymbols ? function(target) {
                return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
            } : function(target) {
                return Object.getOwnPropertyNames(target);
            };
            var NumberIsNaN = Number.isNaN || function(value) {
                return value != value;
            };
            function EventEmitter() {
                EventEmitter.init.call(this);
            }
            events.exports = EventEmitter, events.exports.once = once$2, EventEmitter.EventEmitter = EventEmitter, EventEmitter.prototype._events = void 0, EventEmitter.prototype._eventsCount = 0, EventEmitter.prototype._maxListeners = void 0;
            var defaultMaxListeners = 10;
            function checkListener(listener) {
                if ('function' != typeof listener) throw TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
            }
            function _getMaxListeners(that) {
                return void 0 === that._maxListeners ? EventEmitter.defaultMaxListeners : that._maxListeners;
            }
            function _addListener(target, type, listener, prepend) {
                if (checkListener(listener), void 0 === (events = target._events) ? (events = target._events = Object.create(null), target._eventsCount = 0) : (void 0 !== events.newListener && (target.emit('newListener', type, listener.listener ? listener.listener : listener), events = target._events), existing = events[type]), void 0 === existing) existing = events[type] = listener, ++target._eventsCount;
                else if ('function' == typeof existing ? existing = events[type] = prepend ? [
                    listener,
                    existing
                ] : [
                    existing,
                    listener
                ] : prepend ? existing.unshift(listener) : existing.push(listener), (m = _getMaxListeners(target)) > 0 && existing.length > m && !existing.warned) {
                    existing.warned = !0;
                    var m, events, existing, w = Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
                    w.name = 'MaxListenersExceededWarning', w.emitter = target, w.type = type, w.count = existing.length, ProcessEmitWarning(w);
                }
                return target;
            }
            function onceWrapper() {
                if (!this.fired) return (this.target.removeListener(this.type, this.wrapFn), this.fired = !0, 0 === arguments.length) ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
            }
            function _onceWrap(target, type, listener) {
                var state = {
                    fired: !1,
                    wrapFn: void 0,
                    target: target,
                    type: type,
                    listener: listener
                }, wrapped = onceWrapper.bind(state);
                return wrapped.listener = listener, state.wrapFn = wrapped, wrapped;
            }
            function _listeners(target, type, unwrap) {
                var events = target._events;
                if (void 0 === events) return [];
                var evlistener = events[type];
                return void 0 === evlistener ? [] : 'function' == typeof evlistener ? unwrap ? [
                    evlistener.listener || evlistener
                ] : [
                    evlistener
                ] : unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
            }
            function listenerCount(type) {
                var events = this._events;
                if (void 0 !== events) {
                    var evlistener = events[type];
                    if ('function' == typeof evlistener) return 1;
                    if (void 0 !== evlistener) return evlistener.length;
                }
                return 0;
            }
            function arrayClone(arr, n) {
                for(var copy = Array(n), i = 0; i < n; ++i)copy[i] = arr[i];
                return copy;
            }
            function spliceOne(list, index) {
                for(; index + 1 < list.length; index++)list[index] = list[index + 1];
                list.pop();
            }
            function unwrapListeners(arr) {
                for(var ret = Array(arr.length), i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
                return ret;
            }
            function once$2(emitter, name) {
                return new Promise(function(resolve, reject) {
                    function errorListener(err) {
                        emitter.removeListener(name, resolver), reject(err);
                    }
                    function resolver() {
                        'function' == typeof emitter.removeListener && emitter.removeListener('error', errorListener), resolve([].slice.call(arguments));
                    }
                    eventTargetAgnosticAddListener(emitter, name, resolver, {
                        once: !0
                    }), 'error' !== name && addErrorHandlerIfEventEmitter(emitter, errorListener, {
                        once: !0
                    });
                });
            }
            function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
                'function' == typeof emitter.on && eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
            }
            function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
                if ('function' == typeof emitter.on) flags.once ? emitter.once(name, listener) : emitter.on(name, listener);
                else if ('function' == typeof emitter.addEventListener) emitter.addEventListener(name, function wrapListener(arg) {
                    flags.once && emitter.removeEventListener(name, wrapListener), listener(arg);
                });
                else throw TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
            }
            Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
                enumerable: !0,
                get: function() {
                    return defaultMaxListeners;
                },
                set: function(arg) {
                    if ('number' != typeof arg || arg < 0 || NumberIsNaN(arg)) throw RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
                    defaultMaxListeners = arg;
                }
            }), EventEmitter.init = function() {
                (void 0 === this._events || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
            }, EventEmitter.prototype.setMaxListeners = function(n) {
                if ('number' != typeof n || n < 0 || NumberIsNaN(n)) throw RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
                return this._maxListeners = n, this;
            }, EventEmitter.prototype.getMaxListeners = function() {
                return _getMaxListeners(this);
            }, EventEmitter.prototype.emit = function(type) {
                for(var args = [], i = 1; i < arguments.length; i++)args.push(arguments[i]);
                var doError = 'error' === type, events = this._events;
                if (void 0 !== events) doError = doError && void 0 === events.error;
                else if (!doError) return !1;
                if (doError) {
                    if (args.length > 0 && (er = args[0]), er instanceof Error) throw er;
                    var er, err = Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
                    throw err.context = er, err;
                }
                var handler = events[type];
                if (void 0 === handler) return !1;
                if ('function' == typeof handler) ReflectApply(handler, this, args);
                else for(var len = handler.length, listeners = arrayClone(handler, len), i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
                return !0;
            }, EventEmitter.prototype.addListener = function(type, listener) {
                return _addListener(this, type, listener, !1);
            }, EventEmitter.prototype.on = EventEmitter.prototype.addListener, EventEmitter.prototype.prependListener = function(type, listener) {
                return _addListener(this, type, listener, !0);
            }, EventEmitter.prototype.once = function(type, listener) {
                return checkListener(listener), this.on(type, _onceWrap(this, type, listener)), this;
            }, EventEmitter.prototype.prependOnceListener = function(type, listener) {
                return checkListener(listener), this.prependListener(type, _onceWrap(this, type, listener)), this;
            }, EventEmitter.prototype.removeListener = function(type, listener) {
                var list, events, position, i, originalListener;
                if (checkListener(listener), void 0 === (events = this._events) || void 0 === (list = events[type])) return this;
                if (list === listener || list.listener === listener) 0 == --this._eventsCount ? this._events = Object.create(null) : (delete events[type], events.removeListener && this.emit('removeListener', type, list.listener || listener));
                else if ('function' != typeof list) {
                    for(position = -1, i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
                        originalListener = list[i].listener, position = i;
                        break;
                    }
                    if (position < 0) return this;
                    0 === position ? list.shift() : spliceOne(list, position), 1 === list.length && (events[type] = list[0]), void 0 !== events.removeListener && this.emit('removeListener', type, originalListener || listener);
                }
                return this;
            }, EventEmitter.prototype.off = EventEmitter.prototype.removeListener, EventEmitter.prototype.removeAllListeners = function(type) {
                var listeners, events, i;
                if (void 0 === (events = this._events)) return this;
                if (void 0 === events.removeListener) return 0 === arguments.length ? (this._events = Object.create(null), this._eventsCount = 0) : void 0 !== events[type] && (0 == --this._eventsCount ? this._events = Object.create(null) : delete events[type]), this;
                if (0 === arguments.length) {
                    var key, keys = Object.keys(events);
                    for(i = 0; i < keys.length; ++i)'removeListener' !== (key = keys[i]) && this.removeAllListeners(key);
                    return this.removeAllListeners('removeListener'), this._events = Object.create(null), this._eventsCount = 0, this;
                }
                if ('function' == typeof (listeners = events[type])) this.removeListener(type, listeners);
                else if (void 0 !== listeners) for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
                return this;
            }, EventEmitter.prototype.listeners = function(type) {
                return _listeners(this, type, !0);
            }, EventEmitter.prototype.rawListeners = function(type) {
                return _listeners(this, type, !1);
            }, EventEmitter.listenerCount = function(emitter, type) {
                return 'function' == typeof emitter.listenerCount ? emitter.listenerCount(type) : listenerCount.call(emitter, type);
            }, EventEmitter.prototype.listenerCount = listenerCount, EventEmitter.prototype.eventNames = function() {
                return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
            };
            var streamBrowser = events.exports.EventEmitter, buffer = {}, base64Js = {};
            base64Js.byteLength = byteLength, base64Js.toByteArray = toByteArray, base64Js.fromByteArray = fromByteArray;
            for(var lookup = [], revLookup = [], Arr = 'undefined' != typeof Uint8Array ? Uint8Array : Array, code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/', i = 0, len = code.length; i < len; ++i)lookup[i] = code[i], revLookup[code.charCodeAt(i)] = i;
            function getLens(b64) {
                var len = b64.length;
                if (len % 4 > 0) throw Error('Invalid string. Length must be a multiple of 4');
                var validLen = b64.indexOf('=');
                -1 === validLen && (validLen = len);
                var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
                return [
                    validLen,
                    placeHoldersLen
                ];
            }
            function byteLength(b64) {
                var lens = getLens(b64), validLen = lens[0], placeHoldersLen = lens[1];
                return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
            }
            function _byteLength(b64, validLen, placeHoldersLen) {
                return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
            }
            function toByteArray(b64) {
                var tmp, i, lens = getLens(b64), validLen = lens[0], placeHoldersLen = lens[1], arr = new Arr(_byteLength(b64, validLen, placeHoldersLen)), curByte = 0, len = placeHoldersLen > 0 ? validLen - 4 : validLen;
                for(i = 0; i < len; i += 4)tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)], arr[curByte++] = tmp >> 16 & 0xFF, arr[curByte++] = tmp >> 8 & 0xFF, arr[curByte++] = 0xFF & tmp;
                return 2 === placeHoldersLen && (tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4, arr[curByte++] = 0xFF & tmp), 1 === placeHoldersLen && (tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2, arr[curByte++] = tmp >> 8 & 0xFF, arr[curByte++] = 0xFF & tmp), arr;
            }
            function tripletToBase64(num) {
                return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[0x3F & num];
            }
            function encodeChunk(uint8, start, end) {
                for(var output = [], i = start; i < end; i += 3)output.push(tripletToBase64((uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (0xFF & uint8[i + 2])));
                return output.join('');
            }
            function fromByteArray(uint8) {
                for(var tmp, len = uint8.length, extraBytes = len % 3, parts = [], maxChunkLength = 16383, i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
                return 1 === extraBytes ? parts.push(lookup[(tmp = uint8[len - 1]) >> 2] + lookup[tmp << 4 & 0x3F] + '==') : 2 === extraBytes && parts.push(lookup[(tmp = (uint8[len - 2] << 8) + uint8[len - 1]) >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '='), parts.join('');
            }
            revLookup['-'.charCodeAt(0)] = 62, revLookup['_'.charCodeAt(0)] = 63;
            var ieee754 = {};
            ieee754.read = function(buffer, offset, isLE, mLen, nBytes) {
                var e, m, eLen = 8 * nBytes - mLen - 1, eMax = (1 << eLen) - 1, eBias = eMax >> 1, nBits = -7, i = isLE ? nBytes - 1 : 0, d = isLE ? -1 : 1, s = buffer[offset + i];
                for(i += d, e = s & (1 << -nBits) - 1, s >>= -nBits, nBits += eLen; nBits > 0; e = 256 * e + buffer[offset + i], i += d, nBits -= 8);
                for(m = e & (1 << -nBits) - 1, e >>= -nBits, nBits += mLen; nBits > 0; m = 256 * m + buffer[offset + i], i += d, nBits -= 8);
                if (0 === e) e = 1 - eBias;
                else {
                    if (e === eMax) return m ? NaN : (s ? -1 : 1) * (1 / 0);
                    m += Math.pow(2, mLen), e -= eBias;
                }
                return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
            }, ieee754.write = function(buffer, value, offset, isLE, mLen, nBytes) {
                var e, m, c, eLen = 8 * nBytes - mLen - 1, eMax = (1 << eLen) - 1, eBias = eMax >> 1, rt = 23 === mLen ? 0.00000005960464477539062 : 0, i = isLE ? 0 : nBytes - 1, d = isLE ? 1 : -1, s = value < 0 || 0 === value && 1 / value < 0 ? 1 : 0;
                for(value = Math.abs(value), isNaN(value) || value === 1 / 0 ? (m = isNaN(value) ? 1 : 0, e = eMax) : (e = Math.floor(Math.log(value) / Math.LN2), value * (c = Math.pow(2, -e)) < 1 && (e--, c *= 2), e + eBias >= 1 ? value += rt / c : value += rt * Math.pow(2, 1 - eBias), value * c >= 2 && (e++, c /= 2), e + eBias >= eMax ? (m = 0, e = eMax) : e + eBias >= 1 ? (m = (value * c - 1) * Math.pow(2, mLen), e += eBias) : (m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen), e = 0)); mLen >= 8; buffer[offset + i] = 0xff & m, i += d, m /= 256, mLen -= 8);
                for(e = e << mLen | m, eLen += mLen; eLen > 0; buffer[offset + i] = 0xff & e, i += d, e /= 256, eLen -= 8);
                buffer[offset + i - d] |= 128 * s;
            }, function(exports) {
                var base64 = base64Js, ieee754$1 = ieee754, customInspectSymbol = 'function' == typeof Symbol && 'function' == typeof Symbol.for ? Symbol.for('nodejs.util.inspect.custom') : null;
                exports.Buffer = Buffer, exports.SlowBuffer = SlowBuffer, exports.INSPECT_MAX_BYTES = 50;
                var K_MAX_LENGTH = 0x7fffffff;
                function typedArraySupport() {
                    try {
                        var arr = new Uint8Array(1), proto = {
                            foo: function() {
                                return 42;
                            }
                        };
                        return Object.setPrototypeOf(proto, Uint8Array.prototype), Object.setPrototypeOf(arr, proto), 42 === arr.foo();
                    } catch (e) {
                        return !1;
                    }
                }
                function createBuffer(length) {
                    if (length > K_MAX_LENGTH) throw RangeError('The value "' + length + '" is invalid for option "size"');
                    var buf = new Uint8Array(length);
                    return Object.setPrototypeOf(buf, Buffer.prototype), buf;
                }
                function Buffer(arg, encodingOrOffset, length) {
                    if ('number' == typeof arg) {
                        if ('string' == typeof encodingOrOffset) throw TypeError('The "string" argument must be of type string. Received type number');
                        return allocUnsafe(arg);
                    }
                    return from(arg, encodingOrOffset, length);
                }
                function from(value, encodingOrOffset, length) {
                    if ('string' == typeof value) return fromString(value, encodingOrOffset);
                    if (ArrayBuffer.isView(value)) return fromArrayView(value);
                    if (null == value) throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
                    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer) || 'undefined' != typeof SharedArrayBuffer && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
                    if ('number' == typeof value) throw TypeError('The "value" argument must not be of type number. Received type number');
                    var valueOf = value.valueOf && value.valueOf();
                    if (null != valueOf && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
                    var b = fromObject(value);
                    if (b) return b;
                    if ('undefined' != typeof Symbol && null != Symbol.toPrimitive && 'function' == typeof value[Symbol.toPrimitive]) return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
                    throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
                }
                function assertSize(size) {
                    if ('number' != typeof size) throw TypeError('"size" argument must be of type number');
                    if (size < 0) throw RangeError('The value "' + size + '" is invalid for option "size"');
                }
                function alloc(size, fill, encoding) {
                    return (assertSize(size), size <= 0) ? createBuffer(size) : void 0 !== fill ? 'string' == typeof encoding ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill) : createBuffer(size);
                }
                function allocUnsafe(size) {
                    return assertSize(size), createBuffer(size < 0 ? 0 : 0 | checked(size));
                }
                function fromString(string, encoding) {
                    if (('string' != typeof encoding || '' === encoding) && (encoding = 'utf8'), !Buffer.isEncoding(encoding)) throw TypeError('Unknown encoding: ' + encoding);
                    var length = 0 | byteLength(string, encoding), buf = createBuffer(length), actual = buf.write(string, encoding);
                    return actual !== length && (buf = buf.slice(0, actual)), buf;
                }
                function fromArrayLike(array) {
                    for(var length = array.length < 0 ? 0 : 0 | checked(array.length), buf = createBuffer(length), i = 0; i < length; i += 1)buf[i] = 255 & array[i];
                    return buf;
                }
                function fromArrayView(arrayView) {
                    if (isInstance(arrayView, Uint8Array)) {
                        var copy = new Uint8Array(arrayView);
                        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
                    }
                    return fromArrayLike(arrayView);
                }
                function fromArrayBuffer(array, byteOffset, length) {
                    var buf;
                    if (byteOffset < 0 || array.byteLength < byteOffset) throw RangeError('"offset" is outside of buffer bounds');
                    if (array.byteLength < byteOffset + (length || 0)) throw RangeError('"length" is outside of buffer bounds');
                    return Object.setPrototypeOf(buf = void 0 === byteOffset && void 0 === length ? new Uint8Array(array) : void 0 === length ? new Uint8Array(array, byteOffset) : new Uint8Array(array, byteOffset, length), Buffer.prototype), buf;
                }
                function fromObject(obj) {
                    if (Buffer.isBuffer(obj)) {
                        var len = 0 | checked(obj.length), buf = createBuffer(len);
                        return 0 === buf.length || obj.copy(buf, 0, 0, len), buf;
                    }
                    return void 0 !== obj.length ? 'number' != typeof obj.length || numberIsNaN(obj.length) ? createBuffer(0) : fromArrayLike(obj) : 'Buffer' === obj.type && Array.isArray(obj.data) ? fromArrayLike(obj.data) : void 0;
                }
                function checked(length) {
                    if (length >= K_MAX_LENGTH) throw RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + ' bytes');
                    return 0 | length;
                }
                function SlowBuffer(length) {
                    return +length != length && (length = 0), Buffer.alloc(+length);
                }
                function byteLength(string, encoding) {
                    if (Buffer.isBuffer(string)) return string.length;
                    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
                    if ('string' != typeof string) throw TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
                    var len = string.length, mustMatch = arguments.length > 2 && !0 === arguments[2];
                    if (!mustMatch && 0 === len) return 0;
                    for(var loweredCase = !1;;)switch(encoding){
                        case 'ascii':
                        case 'latin1':
                        case 'binary':
                            return len;
                        case 'utf8':
                        case 'utf-8':
                            return utf8ToBytes(string).length;
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return 2 * len;
                        case 'hex':
                            return len >>> 1;
                        case 'base64':
                            return base64ToBytes(string).length;
                        default:
                            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length;
                            encoding = ('' + encoding).toLowerCase(), loweredCase = !0;
                    }
                }
                function slowToString(encoding, start, end) {
                    var loweredCase = !1;
                    if ((void 0 === start || start < 0) && (start = 0), start > this.length || ((void 0 === end || end > this.length) && (end = this.length), end <= 0 || (end >>>= 0) <= (start >>>= 0))) return '';
                    for(encoding || (encoding = 'utf8');;)switch(encoding){
                        case 'hex':
                            return hexSlice(this, start, end);
                        case 'utf8':
                        case 'utf-8':
                            return utf8Slice(this, start, end);
                        case 'ascii':
                            return asciiSlice(this, start, end);
                        case 'latin1':
                        case 'binary':
                            return latin1Slice(this, start, end);
                        case 'base64':
                            return base64Slice(this, start, end);
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return utf16leSlice(this, start, end);
                        default:
                            if (loweredCase) throw TypeError('Unknown encoding: ' + encoding);
                            encoding = (encoding + '').toLowerCase(), loweredCase = !0;
                    }
                }
                function swap(b, n, m) {
                    var i = b[n];
                    b[n] = b[m], b[m] = i;
                }
                function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                    if (0 === buffer.length) return -1;
                    if ('string' == typeof byteOffset ? (encoding = byteOffset, byteOffset = 0) : byteOffset > 0x7fffffff ? byteOffset = 0x7fffffff : byteOffset < -2147483648 && (byteOffset = -2147483648), numberIsNaN(byteOffset = +byteOffset) && (byteOffset = dir ? 0 : buffer.length - 1), byteOffset < 0 && (byteOffset = buffer.length + byteOffset), byteOffset >= buffer.length) {
                        if (dir) return -1;
                        byteOffset = buffer.length - 1;
                    } else if (byteOffset < 0) {
                        if (!dir) return -1;
                        byteOffset = 0;
                    }
                    if ('string' == typeof val && (val = Buffer.from(val, encoding)), Buffer.isBuffer(val)) return 0 === val.length ? -1 : arrayIndexOf(buffer, val, byteOffset, encoding, dir);
                    if ('number' == typeof val) return (val &= 0xFF, 'function' == typeof Uint8Array.prototype.indexOf) ? dir ? Uint8Array.prototype.indexOf.call(buffer, val, byteOffset) : Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset) : arrayIndexOf(buffer, [
                        val
                    ], byteOffset, encoding, dir);
                    throw TypeError('val must be string, number or Buffer');
                }
                function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                    var i, indexSize = 1, arrLength = arr.length, valLength = val.length;
                    if (void 0 !== encoding && ('ucs2' === (encoding = String(encoding).toLowerCase()) || 'ucs-2' === encoding || 'utf16le' === encoding || 'utf-16le' === encoding)) {
                        if (arr.length < 2 || val.length < 2) return -1;
                        indexSize = 2, arrLength /= 2, valLength /= 2, byteOffset /= 2;
                    }
                    function read(buf, i) {
                        return 1 === indexSize ? buf[i] : buf.readUInt16BE(i * indexSize);
                    }
                    if (dir) {
                        var foundIndex = -1;
                        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, -1 === foundIndex ? 0 : i - foundIndex)) {
                            if (-1 === foundIndex && (foundIndex = i), i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                        } else -1 !== foundIndex && (i -= i - foundIndex), foundIndex = -1;
                    } else for(byteOffset + valLength > arrLength && (byteOffset = arrLength - valLength), i = byteOffset; i >= 0; i--){
                        for(var found = !0, j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                            found = !1;
                            break;
                        }
                        if (found) return i;
                    }
                    return -1;
                }
                function hexWrite(buf, string, offset, length) {
                    offset = Number(offset) || 0;
                    var remaining = buf.length - offset;
                    length ? (length = Number(length)) > remaining && (length = remaining) : length = remaining;
                    var strLen = string.length;
                    length > strLen / 2 && (length = strLen / 2);
                    for(var i = 0; i < length; ++i){
                        var parsed = parseInt(string.substr(2 * i, 2), 16);
                        if (numberIsNaN(parsed)) break;
                        buf[offset + i] = parsed;
                    }
                    return i;
                }
                function utf8Write(buf, string, offset, length) {
                    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
                }
                function asciiWrite(buf, string, offset, length) {
                    return blitBuffer(asciiToBytes(string), buf, offset, length);
                }
                function base64Write(buf, string, offset, length) {
                    return blitBuffer(base64ToBytes(string), buf, offset, length);
                }
                function ucs2Write(buf, string, offset, length) {
                    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
                }
                function base64Slice(buf, start, end) {
                    return 0 === start && end === buf.length ? base64.fromByteArray(buf) : base64.fromByteArray(buf.slice(start, end));
                }
                function utf8Slice(buf, start, end) {
                    end = Math.min(buf.length, end);
                    for(var res = [], i = start; i < end;){
                        var secondByte, thirdByte, fourthByte, tempCodePoint, firstByte = buf[i], codePoint = null, bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
                        if (i + bytesPerSequence <= end) switch(bytesPerSequence){
                            case 1:
                                firstByte < 0x80 && (codePoint = firstByte);
                                break;
                            case 2:
                                (0xC0 & (secondByte = buf[i + 1])) == 0x80 && (tempCodePoint = (0x1F & firstByte) << 0x6 | 0x3F & secondByte) > 0x7F && (codePoint = tempCodePoint);
                                break;
                            case 3:
                                secondByte = buf[i + 1], thirdByte = buf[i + 2], (0xC0 & secondByte) == 0x80 && (0xC0 & thirdByte) == 0x80 && (tempCodePoint = (0xF & firstByte) << 0xC | (0x3F & secondByte) << 0x6 | 0x3F & thirdByte) > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF) && (codePoint = tempCodePoint);
                                break;
                            case 4:
                                secondByte = buf[i + 1], thirdByte = buf[i + 2], fourthByte = buf[i + 3], (0xC0 & secondByte) == 0x80 && (0xC0 & thirdByte) == 0x80 && (0xC0 & fourthByte) == 0x80 && (tempCodePoint = (0xF & firstByte) << 0x12 | (0x3F & secondByte) << 0xC | (0x3F & thirdByte) << 0x6 | 0x3F & fourthByte) > 0xFFFF && tempCodePoint < 0x110000 && (codePoint = tempCodePoint);
                        }
                        null === codePoint ? (codePoint = 0xFFFD, bytesPerSequence = 1) : codePoint > 0xFFFF && (codePoint -= 0x10000, res.push(codePoint >>> 10 & 0x3FF | 0xD800), codePoint = 0xDC00 | 0x3FF & codePoint), res.push(codePoint), i += bytesPerSequence;
                    }
                    return decodeCodePointsArray(res);
                }
                exports.kMaxLength = K_MAX_LENGTH, Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport(), Buffer.TYPED_ARRAY_SUPPORT || 'undefined' == typeof console || 'function' != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(Buffer.prototype, 'parent', {
                    enumerable: !0,
                    get: function() {
                        if (Buffer.isBuffer(this)) return this.buffer;
                    }
                }), Object.defineProperty(Buffer.prototype, 'offset', {
                    enumerable: !0,
                    get: function() {
                        if (Buffer.isBuffer(this)) return this.byteOffset;
                    }
                }), Buffer.poolSize = 8192, Buffer.from = function(value, encodingOrOffset, length) {
                    return from(value, encodingOrOffset, length);
                }, Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype), Object.setPrototypeOf(Buffer, Uint8Array), Buffer.alloc = function(size, fill, encoding) {
                    return alloc(size, fill, encoding);
                }, Buffer.allocUnsafe = function(size) {
                    return allocUnsafe(size);
                }, Buffer.allocUnsafeSlow = function(size) {
                    return allocUnsafe(size);
                }, Buffer.isBuffer = function(b) {
                    return null != b && !0 === b._isBuffer && b !== Buffer.prototype;
                }, Buffer.compare = function(a, b) {
                    if (isInstance(a, Uint8Array) && (a = Buffer.from(a, a.offset, a.byteLength)), isInstance(b, Uint8Array) && (b = Buffer.from(b, b.offset, b.byteLength)), !Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
                    if (a === b) return 0;
                    for(var x = a.length, y = b.length, i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
                        x = a[i], y = b[i];
                        break;
                    }
                    return x < y ? -1 : y < x ? 1 : 0;
                }, Buffer.isEncoding = function(encoding) {
                    switch(String(encoding).toLowerCase()){
                        case 'hex':
                        case 'utf8':
                        case 'utf-8':
                        case 'ascii':
                        case 'latin1':
                        case 'binary':
                        case 'base64':
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return !0;
                        default:
                            return !1;
                    }
                }, Buffer.concat = function(list, length) {
                    if (!Array.isArray(list)) throw TypeError('"list" argument must be an Array of Buffers');
                    if (0 === list.length) return Buffer.alloc(0);
                    if (void 0 === length) for(i = 0, length = 0; i < list.length; ++i)length += list[i].length;
                    var i, buffer = Buffer.allocUnsafe(length), pos = 0;
                    for(i = 0; i < list.length; ++i){
                        var buf = list[i];
                        if (isInstance(buf, Uint8Array)) pos + buf.length > buffer.length ? Buffer.from(buf).copy(buffer, pos) : Uint8Array.prototype.set.call(buffer, buf, pos);
                        else if (Buffer.isBuffer(buf)) buf.copy(buffer, pos);
                        else throw TypeError('"list" argument must be an Array of Buffers');
                        pos += buf.length;
                    }
                    return buffer;
                }, Buffer.byteLength = byteLength, Buffer.prototype._isBuffer = !0, Buffer.prototype.swap16 = function() {
                    var len = this.length;
                    if (len % 2 != 0) throw RangeError('Buffer size must be a multiple of 16-bits');
                    for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
                    return this;
                }, Buffer.prototype.swap32 = function() {
                    var len = this.length;
                    if (len % 4 != 0) throw RangeError('Buffer size must be a multiple of 32-bits');
                    for(var i = 0; i < len; i += 4)swap(this, i, i + 3), swap(this, i + 1, i + 2);
                    return this;
                }, Buffer.prototype.swap64 = function() {
                    var len = this.length;
                    if (len % 8 != 0) throw RangeError('Buffer size must be a multiple of 64-bits');
                    for(var i = 0; i < len; i += 8)swap(this, i, i + 7), swap(this, i + 1, i + 6), swap(this, i + 2, i + 5), swap(this, i + 3, i + 4);
                    return this;
                }, Buffer.prototype.toString = function() {
                    var length = this.length;
                    return 0 === length ? '' : 0 === arguments.length ? utf8Slice(this, 0, length) : slowToString.apply(this, arguments);
                }, Buffer.prototype.toLocaleString = Buffer.prototype.toString, Buffer.prototype.equals = function(b) {
                    if (!Buffer.isBuffer(b)) throw TypeError('Argument must be a Buffer');
                    return this === b || 0 === Buffer.compare(this, b);
                }, Buffer.prototype.inspect = function() {
                    var str = '', max = exports.INSPECT_MAX_BYTES;
                    return str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim(), this.length > max && (str += ' ... '), '<Buffer ' + str + '>';
                }, customInspectSymbol && (Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect), Buffer.prototype.compare = function(target, start, end, thisStart, thisEnd) {
                    if (isInstance(target, Uint8Array) && (target = Buffer.from(target, target.offset, target.byteLength)), !Buffer.isBuffer(target)) throw TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
                    if (void 0 === start && (start = 0), void 0 === end && (end = target ? target.length : 0), void 0 === thisStart && (thisStart = 0), void 0 === thisEnd && (thisEnd = this.length), start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw RangeError('out of range index');
                    if (thisStart >= thisEnd && start >= end) return 0;
                    if (thisStart >= thisEnd) return -1;
                    if (start >= end) return 1;
                    if (start >>>= 0, end >>>= 0, thisStart >>>= 0, thisEnd >>>= 0, this === target) return 0;
                    for(var x = thisEnd - thisStart, y = end - start, len = Math.min(x, y), thisCopy = this.slice(thisStart, thisEnd), targetCopy = target.slice(start, end), i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
                        x = thisCopy[i], y = targetCopy[i];
                        break;
                    }
                    return x < y ? -1 : y < x ? 1 : 0;
                }, Buffer.prototype.includes = function(val, byteOffset, encoding) {
                    return -1 !== this.indexOf(val, byteOffset, encoding);
                }, Buffer.prototype.indexOf = function(val, byteOffset, encoding) {
                    return bidirectionalIndexOf(this, val, byteOffset, encoding, !0);
                }, Buffer.prototype.lastIndexOf = function(val, byteOffset, encoding) {
                    return bidirectionalIndexOf(this, val, byteOffset, encoding, !1);
                }, Buffer.prototype.write = function(string, offset, length, encoding) {
                    if (void 0 === offset) encoding = 'utf8', length = this.length, offset = 0;
                    else if (void 0 === length && 'string' == typeof offset) encoding = offset, length = this.length, offset = 0;
                    else if (isFinite(offset)) offset >>>= 0, isFinite(length) ? (length >>>= 0, void 0 === encoding && (encoding = 'utf8')) : (encoding = length, length = void 0);
                    else throw Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
                    var remaining = this.length - offset;
                    if ((void 0 === length || length > remaining) && (length = remaining), string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw RangeError('Attempt to write outside buffer bounds');
                    encoding || (encoding = 'utf8');
                    for(var loweredCase = !1;;)switch(encoding){
                        case 'hex':
                            return hexWrite(this, string, offset, length);
                        case 'utf8':
                        case 'utf-8':
                            return utf8Write(this, string, offset, length);
                        case 'ascii':
                        case 'latin1':
                        case 'binary':
                            return asciiWrite(this, string, offset, length);
                        case 'base64':
                            return base64Write(this, string, offset, length);
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return ucs2Write(this, string, offset, length);
                        default:
                            if (loweredCase) throw TypeError('Unknown encoding: ' + encoding);
                            encoding = ('' + encoding).toLowerCase(), loweredCase = !0;
                    }
                }, Buffer.prototype.toJSON = function() {
                    return {
                        type: 'Buffer',
                        data: Array.prototype.slice.call(this._arr || this, 0)
                    };
                };
                var MAX_ARGUMENTS_LENGTH = 0x1000;
                function decodeCodePointsArray(codePoints) {
                    var len = codePoints.length;
                    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints);
                    for(var res = '', i = 0; i < len;)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
                    return res;
                }
                function asciiSlice(buf, start, end) {
                    var ret = '';
                    end = Math.min(buf.length, end);
                    for(var i = start; i < end; ++i)ret += String.fromCharCode(0x7F & buf[i]);
                    return ret;
                }
                function latin1Slice(buf, start, end) {
                    var ret = '';
                    end = Math.min(buf.length, end);
                    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
                    return ret;
                }
                function hexSlice(buf, start, end) {
                    var len = buf.length;
                    (!start || start < 0) && (start = 0), (!end || end < 0 || end > len) && (end = len);
                    for(var out = '', i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
                    return out;
                }
                function utf16leSlice(buf, start, end) {
                    for(var bytes = buf.slice(start, end), res = '', i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + 256 * bytes[i + 1]);
                    return res;
                }
                function checkOffset(offset, ext, length) {
                    if (offset % 1 != 0 || offset < 0) throw RangeError('offset is not uint');
                    if (offset + ext > length) throw RangeError('Trying to access beyond buffer length');
                }
                function checkInt(buf, value, offset, ext, max, min) {
                    if (!Buffer.isBuffer(buf)) throw TypeError('"buffer" argument must be a Buffer instance');
                    if (value > max || value < min) throw RangeError('"value" argument is out of bounds');
                    if (offset + ext > buf.length) throw RangeError('Index out of range');
                }
                function checkIEEE754(buf, value, offset, ext, max, min) {
                    if (offset + ext > buf.length || offset < 0) throw RangeError('Index out of range');
                }
                function writeFloat(buf, value, offset, littleEndian, noAssert) {
                    return value = +value, offset >>>= 0, noAssert || checkIEEE754(buf, value, offset, 4), ieee754$1.write(buf, value, offset, littleEndian, 23, 4), offset + 4;
                }
                function writeDouble(buf, value, offset, littleEndian, noAssert) {
                    return value = +value, offset >>>= 0, noAssert || checkIEEE754(buf, value, offset, 8), ieee754$1.write(buf, value, offset, littleEndian, 52, 8), offset + 8;
                }
                Buffer.prototype.slice = function(start, end) {
                    var len = this.length;
                    start = ~~start, end = void 0 === end ? len : ~~end, start < 0 ? (start += len) < 0 && (start = 0) : start > len && (start = len), end < 0 ? (end += len) < 0 && (end = 0) : end > len && (end = len), end < start && (end = start);
                    var newBuf = this.subarray(start, end);
                    return Object.setPrototypeOf(newBuf, Buffer.prototype), newBuf;
                }, Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function(offset, byteLength, noAssert) {
                    offset >>>= 0, byteLength >>>= 0, noAssert || checkOffset(offset, byteLength, this.length);
                    for(var val = this[offset], mul = 1, i = 0; ++i < byteLength && (mul *= 0x100);)val += this[offset + i] * mul;
                    return val;
                }, Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function(offset, byteLength, noAssert) {
                    offset >>>= 0, byteLength >>>= 0, noAssert || checkOffset(offset, byteLength, this.length);
                    for(var val = this[offset + --byteLength], mul = 1; byteLength > 0 && (mul *= 0x100);)val += this[offset + --byteLength] * mul;
                    return val;
                }, Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function(offset, noAssert) {
                    return offset >>>= 0, noAssert || checkOffset(offset, 1, this.length), this[offset];
                }, Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function(offset, noAssert) {
                    return offset >>>= 0, noAssert || checkOffset(offset, 2, this.length), this[offset] | this[offset + 1] << 8;
                }, Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function(offset, noAssert) {
                    return offset >>>= 0, noAssert || checkOffset(offset, 2, this.length), this[offset] << 8 | this[offset + 1];
                }, Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function(offset, noAssert) {
                    return offset >>>= 0, noAssert || checkOffset(offset, 4, this.length), (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + 0x1000000 * this[offset + 3];
                }, Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function(offset, noAssert) {
                    return offset >>>= 0, noAssert || checkOffset(offset, 4, this.length), 0x1000000 * this[offset] + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
                }, Buffer.prototype.readIntLE = function(offset, byteLength, noAssert) {
                    offset >>>= 0, byteLength >>>= 0, noAssert || checkOffset(offset, byteLength, this.length);
                    for(var val = this[offset], mul = 1, i = 0; ++i < byteLength && (mul *= 0x100);)val += this[offset + i] * mul;
                    return val >= (mul *= 0x80) && (val -= Math.pow(2, 8 * byteLength)), val;
                }, Buffer.prototype.readIntBE = function(offset, byteLength, noAssert) {
                    offset >>>= 0, byteLength >>>= 0, noAssert || checkOffset(offset, byteLength, this.length);
                    for(var i = byteLength, mul = 1, val = this[offset + --i]; i > 0 && (mul *= 0x100);)val += this[offset + --i] * mul;
                    return val >= (mul *= 0x80) && (val -= Math.pow(2, 8 * byteLength)), val;
                }, Buffer.prototype.readInt8 = function(offset, noAssert) {
                    return (offset >>>= 0, noAssert || checkOffset(offset, 1, this.length), 0x80 & this[offset]) ? -((0xff - this[offset] + 1) * 1) : this[offset];
                }, Buffer.prototype.readInt16LE = function(offset, noAssert) {
                    offset >>>= 0, noAssert || checkOffset(offset, 2, this.length);
                    var val = this[offset] | this[offset + 1] << 8;
                    return 0x8000 & val ? 0xFFFF0000 | val : val;
                }, Buffer.prototype.readInt16BE = function(offset, noAssert) {
                    offset >>>= 0, noAssert || checkOffset(offset, 2, this.length);
                    var val = this[offset + 1] | this[offset] << 8;
                    return 0x8000 & val ? 0xFFFF0000 | val : val;
                }, Buffer.prototype.readInt32LE = function(offset, noAssert) {
                    return offset >>>= 0, noAssert || checkOffset(offset, 4, this.length), this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
                }, Buffer.prototype.readInt32BE = function(offset, noAssert) {
                    return offset >>>= 0, noAssert || checkOffset(offset, 4, this.length), this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
                }, Buffer.prototype.readFloatLE = function(offset, noAssert) {
                    return offset >>>= 0, noAssert || checkOffset(offset, 4, this.length), ieee754$1.read(this, offset, !0, 23, 4);
                }, Buffer.prototype.readFloatBE = function(offset, noAssert) {
                    return offset >>>= 0, noAssert || checkOffset(offset, 4, this.length), ieee754$1.read(this, offset, !1, 23, 4);
                }, Buffer.prototype.readDoubleLE = function(offset, noAssert) {
                    return offset >>>= 0, noAssert || checkOffset(offset, 8, this.length), ieee754$1.read(this, offset, !0, 52, 8);
                }, Buffer.prototype.readDoubleBE = function(offset, noAssert) {
                    return offset >>>= 0, noAssert || checkOffset(offset, 8, this.length), ieee754$1.read(this, offset, !1, 52, 8);
                }, Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function(value, offset, byteLength, noAssert) {
                    value = +value, offset >>>= 0, byteLength >>>= 0, noAssert || checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength) - 1, 0);
                    var mul = 1, i = 0;
                    for(this[offset] = 0xFF & value; ++i < byteLength && (mul *= 0x100);)this[offset + i] = value / mul & 0xFF;
                    return offset + byteLength;
                }, Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function(value, offset, byteLength, noAssert) {
                    value = +value, offset >>>= 0, byteLength >>>= 0, noAssert || checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength) - 1, 0);
                    var i = byteLength - 1, mul = 1;
                    for(this[offset + i] = 0xFF & value; --i >= 0 && (mul *= 0x100);)this[offset + i] = value / mul & 0xFF;
                    return offset + byteLength;
                }, Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function(value, offset, noAssert) {
                    return value = +value, offset >>>= 0, noAssert || checkInt(this, value, offset, 1, 0xff, 0), this[offset] = 0xff & value, offset + 1;
                }, Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function(value, offset, noAssert) {
                    return value = +value, offset >>>= 0, noAssert || checkInt(this, value, offset, 2, 0xffff, 0), this[offset] = 0xff & value, this[offset + 1] = value >>> 8, offset + 2;
                }, Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function(value, offset, noAssert) {
                    return value = +value, offset >>>= 0, noAssert || checkInt(this, value, offset, 2, 0xffff, 0), this[offset] = value >>> 8, this[offset + 1] = 0xff & value, offset + 2;
                }, Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function(value, offset, noAssert) {
                    return value = +value, offset >>>= 0, noAssert || checkInt(this, value, offset, 4, 0xffffffff, 0), this[offset + 3] = value >>> 24, this[offset + 2] = value >>> 16, this[offset + 1] = value >>> 8, this[offset] = 0xff & value, offset + 4;
                }, Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function(value, offset, noAssert) {
                    return value = +value, offset >>>= 0, noAssert || checkInt(this, value, offset, 4, 0xffffffff, 0), this[offset] = value >>> 24, this[offset + 1] = value >>> 16, this[offset + 2] = value >>> 8, this[offset + 3] = 0xff & value, offset + 4;
                }, Buffer.prototype.writeIntLE = function(value, offset, byteLength, noAssert) {
                    if (value = +value, offset >>>= 0, !noAssert) {
                        var limit = Math.pow(2, 8 * byteLength - 1);
                        checkInt(this, value, offset, byteLength, limit - 1, -limit);
                    }
                    var i = 0, mul = 1, sub = 0;
                    for(this[offset] = 0xFF & value; ++i < byteLength && (mul *= 0x100);)value < 0 && 0 === sub && 0 !== this[offset + i - 1] && (sub = 1), this[offset + i] = (value / mul >> 0) - sub & 0xFF;
                    return offset + byteLength;
                }, Buffer.prototype.writeIntBE = function(value, offset, byteLength, noAssert) {
                    if (value = +value, offset >>>= 0, !noAssert) {
                        var limit = Math.pow(2, 8 * byteLength - 1);
                        checkInt(this, value, offset, byteLength, limit - 1, -limit);
                    }
                    var i = byteLength - 1, mul = 1, sub = 0;
                    for(this[offset + i] = 0xFF & value; --i >= 0 && (mul *= 0x100);)value < 0 && 0 === sub && 0 !== this[offset + i + 1] && (sub = 1), this[offset + i] = (value / mul >> 0) - sub & 0xFF;
                    return offset + byteLength;
                }, Buffer.prototype.writeInt8 = function(value, offset, noAssert) {
                    return value = +value, offset >>>= 0, noAssert || checkInt(this, value, offset, 1, 0x7f, -128), value < 0 && (value = 0xff + value + 1), this[offset] = 0xff & value, offset + 1;
                }, Buffer.prototype.writeInt16LE = function(value, offset, noAssert) {
                    return value = +value, offset >>>= 0, noAssert || checkInt(this, value, offset, 2, 0x7fff, -32768), this[offset] = 0xff & value, this[offset + 1] = value >>> 8, offset + 2;
                }, Buffer.prototype.writeInt16BE = function(value, offset, noAssert) {
                    return value = +value, offset >>>= 0, noAssert || checkInt(this, value, offset, 2, 0x7fff, -32768), this[offset] = value >>> 8, this[offset + 1] = 0xff & value, offset + 2;
                }, Buffer.prototype.writeInt32LE = function(value, offset, noAssert) {
                    return value = +value, offset >>>= 0, noAssert || checkInt(this, value, offset, 4, 0x7fffffff, -2147483648), this[offset] = 0xff & value, this[offset + 1] = value >>> 8, this[offset + 2] = value >>> 16, this[offset + 3] = value >>> 24, offset + 4;
                }, Buffer.prototype.writeInt32BE = function(value, offset, noAssert) {
                    return value = +value, offset >>>= 0, noAssert || checkInt(this, value, offset, 4, 0x7fffffff, -2147483648), value < 0 && (value = 0xffffffff + value + 1), this[offset] = value >>> 24, this[offset + 1] = value >>> 16, this[offset + 2] = value >>> 8, this[offset + 3] = 0xff & value, offset + 4;
                }, Buffer.prototype.writeFloatLE = function(value, offset, noAssert) {
                    return writeFloat(this, value, offset, !0, noAssert);
                }, Buffer.prototype.writeFloatBE = function(value, offset, noAssert) {
                    return writeFloat(this, value, offset, !1, noAssert);
                }, Buffer.prototype.writeDoubleLE = function(value, offset, noAssert) {
                    return writeDouble(this, value, offset, !0, noAssert);
                }, Buffer.prototype.writeDoubleBE = function(value, offset, noAssert) {
                    return writeDouble(this, value, offset, !1, noAssert);
                }, Buffer.prototype.copy = function(target, targetStart, start, end) {
                    if (!Buffer.isBuffer(target)) throw TypeError('argument should be a Buffer');
                    if (start || (start = 0), end || 0 === end || (end = this.length), targetStart >= target.length && (targetStart = target.length), targetStart || (targetStart = 0), end > 0 && end < start && (end = start), end === start || 0 === target.length || 0 === this.length) return 0;
                    if (targetStart < 0) throw RangeError('targetStart out of bounds');
                    if (start < 0 || start >= this.length) throw RangeError('Index out of range');
                    if (end < 0) throw RangeError('sourceEnd out of bounds');
                    end > this.length && (end = this.length), target.length - targetStart < end - start && (end = target.length - targetStart + start);
                    var len = end - start;
                    return this === target && 'function' == typeof Uint8Array.prototype.copyWithin ? this.copyWithin(targetStart, start, end) : Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart), len;
                }, Buffer.prototype.fill = function(val, start, end, encoding) {
                    if ('string' == typeof val) {
                        if ('string' == typeof start ? (encoding = start, start = 0, end = this.length) : 'string' == typeof end && (encoding = end, end = this.length), void 0 !== encoding && 'string' != typeof encoding) throw TypeError('encoding must be a string');
                        if ('string' == typeof encoding && !Buffer.isEncoding(encoding)) throw TypeError('Unknown encoding: ' + encoding);
                        if (1 === val.length) {
                            var i, code = val.charCodeAt(0);
                            ('utf8' === encoding && code < 128 || 'latin1' === encoding) && (val = code);
                        }
                    } else 'number' == typeof val ? val &= 255 : 'boolean' == typeof val && (val = Number(val));
                    if (start < 0 || this.length < start || this.length < end) throw RangeError('Out of range index');
                    if (end <= start) return this;
                    if (start >>>= 0, end = void 0 === end ? this.length : end >>> 0, val || (val = 0), 'number' == typeof val) for(i = start; i < end; ++i)this[i] = val;
                    else {
                        var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding), len = bytes.length;
                        if (0 === len) throw TypeError('The value "' + val + '" is invalid for argument "value"');
                        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
                    }
                    return this;
                };
                var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
                function base64clean(str) {
                    if ((str = (str = str.split('=')[0]).trim().replace(INVALID_BASE64_RE, '')).length < 2) return '';
                    for(; str.length % 4 != 0;)str += '=';
                    return str;
                }
                function utf8ToBytes(string, units) {
                    units = units || 1 / 0;
                    for(var codePoint, length = string.length, leadSurrogate = null, bytes = [], i = 0; i < length; ++i){
                        if ((codePoint = string.charCodeAt(i)) > 0xD7FF && codePoint < 0xE000) {
                            if (!leadSurrogate) {
                                if (codePoint > 0xDBFF || i + 1 === length) {
                                    (units -= 3) > -1 && bytes.push(0xEF, 0xBF, 0xBD);
                                    continue;
                                }
                                leadSurrogate = codePoint;
                                continue;
                            }
                            if (codePoint < 0xDC00) {
                                (units -= 3) > -1 && bytes.push(0xEF, 0xBF, 0xBD), leadSurrogate = codePoint;
                                continue;
                            }
                            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
                        } else leadSurrogate && (units -= 3) > -1 && bytes.push(0xEF, 0xBF, 0xBD);
                        if (leadSurrogate = null, codePoint < 0x80) {
                            if ((units -= 1) < 0) break;
                            bytes.push(codePoint);
                        } else if (codePoint < 0x800) {
                            if ((units -= 2) < 0) break;
                            bytes.push(codePoint >> 0x6 | 0xC0, 0x3F & codePoint | 0x80);
                        } else if (codePoint < 0x10000) {
                            if ((units -= 3) < 0) break;
                            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, 0x3F & codePoint | 0x80);
                        } else if (codePoint < 0x110000) {
                            if ((units -= 4) < 0) break;
                            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, 0x3F & codePoint | 0x80);
                        } else throw Error('Invalid code point');
                    }
                    return bytes;
                }
                function asciiToBytes(str) {
                    for(var byteArray = [], i = 0; i < str.length; ++i)byteArray.push(0xFF & str.charCodeAt(i));
                    return byteArray;
                }
                function utf16leToBytes(str, units) {
                    for(var c, hi, byteArray = [], i = 0; i < str.length && !((units -= 2) < 0); ++i)hi = (c = str.charCodeAt(i)) >> 8, byteArray.push(c % 256), byteArray.push(hi);
                    return byteArray;
                }
                function base64ToBytes(str) {
                    return base64.toByteArray(base64clean(str));
                }
                function blitBuffer(src, dst, offset, length) {
                    for(var i = 0; i < length && !(i + offset >= dst.length) && !(i >= src.length); ++i)dst[i + offset] = src[i];
                    return i;
                }
                function isInstance(obj, type) {
                    return obj instanceof type || null != obj && null != obj.constructor && null != obj.constructor.name && obj.constructor.name === type.name;
                }
                function numberIsNaN(obj) {
                    return obj != obj;
                }
                var hexSliceLookupTable = function() {
                    for(var alphabet = '0123456789abcdef', table = Array(256), i = 0; i < 16; ++i)for(var i16 = 16 * i, j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
                    return table;
                }();
            }(buffer);
            var require$$4 = getAugmentedNamespace(Object.freeze({
                __proto__: null,
                default: {}
            }));
            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    enumerableOnly && (symbols = symbols.filter(function(sym) {
                        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                    })), keys.push.apply(keys, symbols);
                }
                return keys;
            }
            function _objectSpread$1(target) {
                for(var i = 1; i < arguments.length; i++){
                    var source = null != arguments[i] ? arguments[i] : {};
                    i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
                        _defineProperty$2(target, key, source[key]);
                    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
                        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                    });
                }
                return target;
            }
            function _defineProperty$2(obj, key, value) {
                return key in obj ? Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : obj[key] = value, obj;
            }
            function _classCallCheck$3(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw TypeError("Cannot call a class as a function");
            }
            function _defineProperties$2(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function _createClass$2(Constructor, protoProps, staticProps) {
                return protoProps && _defineProperties$2(Constructor.prototype, protoProps), staticProps && _defineProperties$2(Constructor, staticProps), Constructor;
            }
            var Buffer$3 = buffer.Buffer, inspect$2 = require$$4.inspect, custom = inspect$2 && inspect$2.custom || 'inspect';
            function copyBuffer(src, target, offset) {
                Buffer$3.prototype.copy.call(src, target, offset);
            }
            var buffer_list = function() {
                function BufferList() {
                    _classCallCheck$3(this, BufferList), this.head = null, this.tail = null, this.length = 0;
                }
                return _createClass$2(BufferList, [
                    {
                        key: "push",
                        value: function(v) {
                            var entry = {
                                data: v,
                                next: null
                            };
                            this.length > 0 ? this.tail.next = entry : this.head = entry, this.tail = entry, ++this.length;
                        }
                    },
                    {
                        key: "unshift",
                        value: function(v) {
                            var entry = {
                                data: v,
                                next: this.head
                            };
                            0 === this.length && (this.tail = entry), this.head = entry, ++this.length;
                        }
                    },
                    {
                        key: "shift",
                        value: function() {
                            if (0 !== this.length) {
                                var ret = this.head.data;
                                return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, ret;
                            }
                        }
                    },
                    {
                        key: "clear",
                        value: function() {
                            this.head = this.tail = null, this.length = 0;
                        }
                    },
                    {
                        key: "join",
                        value: function(s) {
                            if (0 === this.length) return '';
                            for(var p = this.head, ret = '' + p.data; p = p.next;)ret += s + p.data;
                            return ret;
                        }
                    },
                    {
                        key: "concat",
                        value: function(n) {
                            if (0 === this.length) return Buffer$3.alloc(0);
                            for(var ret = Buffer$3.allocUnsafe(n >>> 0), p = this.head, i = 0; p;)copyBuffer(p.data, ret, i), i += p.data.length, p = p.next;
                            return ret;
                        }
                    },
                    {
                        key: "consume",
                        value: function(n, hasStrings) {
                            var ret;
                            return n < this.head.data.length ? (ret = this.head.data.slice(0, n), this.head.data = this.head.data.slice(n)) : ret = n === this.head.data.length ? this.shift() : hasStrings ? this._getString(n) : this._getBuffer(n), ret;
                        }
                    },
                    {
                        key: "first",
                        value: function() {
                            return this.head.data;
                        }
                    },
                    {
                        key: "_getString",
                        value: function(n) {
                            var p = this.head, c = 1, ret = p.data;
                            for(n -= ret.length; p = p.next;){
                                var str = p.data, nb = n > str.length ? str.length : n;
                                if (nb === str.length ? ret += str : ret += str.slice(0, n), 0 == (n -= nb)) {
                                    nb === str.length ? (++c, p.next ? this.head = p.next : this.head = this.tail = null) : (this.head = p, p.data = str.slice(nb));
                                    break;
                                }
                                ++c;
                            }
                            return this.length -= c, ret;
                        }
                    },
                    {
                        key: "_getBuffer",
                        value: function(n) {
                            var ret = Buffer$3.allocUnsafe(n), p = this.head, c = 1;
                            for(p.data.copy(ret), n -= p.data.length; p = p.next;){
                                var buf = p.data, nb = n > buf.length ? buf.length : n;
                                if (buf.copy(ret, ret.length - n, 0, nb), 0 == (n -= nb)) {
                                    nb === buf.length ? (++c, p.next ? this.head = p.next : this.head = this.tail = null) : (this.head = p, p.data = buf.slice(nb));
                                    break;
                                }
                                ++c;
                            }
                            return this.length -= c, ret;
                        }
                    },
                    {
                        key: custom,
                        value: function(_, options) {
                            return inspect$2(this, _objectSpread$1({}, options, {
                                depth: 0,
                                customInspect: !1
                            }));
                        }
                    }
                ]), BufferList;
            }();
            function destroy(err, cb) {
                var _this = this, readableDestroyed = this._readableState && this._readableState.destroyed, writableDestroyed = this._writableState && this._writableState.destroyed;
                return readableDestroyed || writableDestroyed ? (cb ? cb(err) : err && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, browser$1$1.nextTick(emitErrorNT, this, err)) : browser$1$1.nextTick(emitErrorNT, this, err)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(err || null, function(err) {
                    !cb && err ? _this._writableState ? _this._writableState.errorEmitted ? browser$1$1.nextTick(emitCloseNT, _this) : (_this._writableState.errorEmitted = !0, browser$1$1.nextTick(emitErrorAndCloseNT, _this, err)) : browser$1$1.nextTick(emitErrorAndCloseNT, _this, err) : cb ? (browser$1$1.nextTick(emitCloseNT, _this), cb(err)) : browser$1$1.nextTick(emitCloseNT, _this);
                }), this);
            }
            function emitErrorAndCloseNT(self1, err) {
                emitErrorNT(self1, err), emitCloseNT(self1);
            }
            function emitCloseNT(self1) {
                (!self1._writableState || self1._writableState.emitClose) && (!self1._readableState || self1._readableState.emitClose) && self1.emit('close');
            }
            function undestroy() {
                this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
            }
            function emitErrorNT(self1, err) {
                self1.emit('error', err);
            }
            function errorOrDestroy$2(stream, err) {
                var rState = stream._readableState, wState = stream._writableState;
                rState && rState.autoDestroy || wState && wState.autoDestroy ? stream.destroy(err) : stream.emit('error', err);
            }
            var destroy_1 = {
                destroy: destroy,
                undestroy: undestroy,
                errorOrDestroy: errorOrDestroy$2
            }, errorsBrowser = {};
            function _inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype), subClass.prototype.constructor = subClass, subClass.__proto__ = superClass;
            }
            var codes$1 = {};
            function createErrorType$1(code, message, Base) {
                function getMessage(arg1, arg2, arg3) {
                    return 'string' == typeof message ? message : message(arg1, arg2, arg3);
                }
                Base || (Base = Error);
                var NodeError = function(_Base) {
                    function NodeError(arg1, arg2, arg3) {
                        return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
                    }
                    return _inheritsLoose(NodeError, _Base), NodeError;
                }(Base);
                NodeError.prototype.name = Base.name, NodeError.prototype.code = code, codes$1[code] = NodeError;
            }
            function oneOf$1(expected, thing) {
                if (!Array.isArray(expected)) return "of ".concat(thing, " ").concat(String(expected));
                var len = expected.length;
                return (expected = expected.map(function(i) {
                    return String(i);
                }), len > 2) ? "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1] : 2 === len ? "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]) : "of ".concat(thing, " ").concat(expected[0]);
            }
            function startsWith$1(str, search, pos) {
                return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
            }
            function endsWith$2(str, search, this_len) {
                return (void 0 === this_len || this_len > str.length) && (this_len = str.length), str.substring(this_len - search.length, this_len) === search;
            }
            function includes$1(str, search, start) {
                return 'number' != typeof start && (start = 0), !(start + search.length > str.length) && -1 !== str.indexOf(search, start);
            }
            createErrorType$1('ERR_INVALID_OPT_VALUE', function(name, value) {
                return 'The value "' + value + '" is invalid for option "' + name + '"';
            }, TypeError), createErrorType$1('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
                if ('string' == typeof expected && startsWith$1(expected, 'not ') ? (determiner = 'must not be', expected = expected.replace(/^not /, '')) : determiner = 'must be', endsWith$2(name, ' argument')) msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf$1(expected, 'type'));
                else {
                    var determiner, msg, type = includes$1(name, '.') ? 'property' : 'argument';
                    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf$1(expected, 'type'));
                }
                return msg + ". Received type ".concat(typeof actual);
            }, TypeError), createErrorType$1('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF'), createErrorType$1('ERR_METHOD_NOT_IMPLEMENTED', function(name) {
                return 'The ' + name + ' method is not implemented';
            }), createErrorType$1('ERR_STREAM_PREMATURE_CLOSE', 'Premature close'), createErrorType$1('ERR_STREAM_DESTROYED', function(name) {
                return 'Cannot call ' + name + ' after a stream was destroyed';
            }), createErrorType$1('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times'), createErrorType$1('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable'), createErrorType$1('ERR_STREAM_WRITE_AFTER_END', 'write after end'), createErrorType$1('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError), createErrorType$1('ERR_UNKNOWN_ENCODING', function(arg) {
                return 'Unknown encoding: ' + arg;
            }, TypeError), createErrorType$1('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event'), errorsBrowser.codes = codes$1;
            var ERR_INVALID_OPT_VALUE = errorsBrowser.codes.ERR_INVALID_OPT_VALUE;
            function highWaterMarkFrom(options, isDuplex, duplexKey) {
                return null != options.highWaterMark ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
            }
            function getHighWaterMark$2(state, options, duplexKey, isDuplex) {
                var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
                if (null != hwm) {
                    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) throw new ERR_INVALID_OPT_VALUE(isDuplex ? duplexKey : 'highWaterMark', hwm);
                    return Math.floor(hwm);
                }
                return state.objectMode ? 16 : 16384;
            }
            var state = {
                getHighWaterMark: getHighWaterMark$2
            }, inherits_browser = {
                exports: {}
            };
            'function' == typeof Object.create ? inherits_browser.exports = function(ctor, superCtor) {
                superCtor && (ctor.super_ = superCtor, ctor.prototype = Object.create(superCtor.prototype, {
                    constructor: {
                        value: ctor,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }));
            } : inherits_browser.exports = function(ctor, superCtor) {
                if (superCtor) {
                    ctor.super_ = superCtor;
                    var TempCtor = function() {};
                    TempCtor.prototype = superCtor.prototype, ctor.prototype = new TempCtor(), ctor.prototype.constructor = ctor;
                }
            };
            var string_decoder = {}, safeBuffer = {
                exports: {}
            };
            !function(module, exports) {
                var buffer$1 = buffer, Buffer = buffer$1.Buffer;
                function copyProps(src, dst) {
                    for(var key in src)dst[key] = src[key];
                }
                function SafeBuffer(arg, encodingOrOffset, length) {
                    return Buffer(arg, encodingOrOffset, length);
                }
                Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow ? module.exports = buffer$1 : (copyProps(buffer$1, exports), exports.Buffer = SafeBuffer), SafeBuffer.prototype = Object.create(Buffer.prototype), copyProps(Buffer, SafeBuffer), SafeBuffer.from = function(arg, encodingOrOffset, length) {
                    if ('number' == typeof arg) throw TypeError('Argument must not be a number');
                    return Buffer(arg, encodingOrOffset, length);
                }, SafeBuffer.alloc = function(size, fill, encoding) {
                    if ('number' != typeof size) throw TypeError('Argument must be a number');
                    var buf = Buffer(size);
                    return void 0 !== fill ? 'string' == typeof encoding ? buf.fill(fill, encoding) : buf.fill(fill) : buf.fill(0), buf;
                }, SafeBuffer.allocUnsafe = function(size) {
                    if ('number' != typeof size) throw TypeError('Argument must be a number');
                    return Buffer(size);
                }, SafeBuffer.allocUnsafeSlow = function(size) {
                    if ('number' != typeof size) throw TypeError('Argument must be a number');
                    return buffer$1.SlowBuffer(size);
                };
            }(safeBuffer, safeBuffer.exports);
            var Buffer$2 = safeBuffer.exports.Buffer, isEncoding = Buffer$2.isEncoding || function(encoding) {
                switch((encoding = '' + encoding) && encoding.toLowerCase()){
                    case 'hex':
                    case 'utf8':
                    case 'utf-8':
                    case 'ascii':
                    case 'binary':
                    case 'base64':
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                    case 'raw':
                        return !0;
                    default:
                        return !1;
                }
            };
            function _normalizeEncoding(enc) {
                var retried;
                if (!enc) return 'utf8';
                for(;;)switch(enc){
                    case 'utf8':
                    case 'utf-8':
                        return 'utf8';
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return 'utf16le';
                    case 'latin1':
                    case 'binary':
                        return 'latin1';
                    case 'base64':
                    case 'ascii':
                    case 'hex':
                        return enc;
                    default:
                        if (retried) return;
                        enc = ('' + enc).toLowerCase(), retried = !0;
                }
            }
            function normalizeEncoding(enc) {
                var nenc = _normalizeEncoding(enc);
                if ('string' != typeof nenc && (Buffer$2.isEncoding === isEncoding || !isEncoding(enc))) throw Error('Unknown encoding: ' + enc);
                return nenc || enc;
            }
            function StringDecoder$1(encoding) {
                var nb;
                switch(this.encoding = normalizeEncoding(encoding), this.encoding){
                    case 'utf16le':
                        this.text = utf16Text, this.end = utf16End, nb = 4;
                        break;
                    case 'utf8':
                        this.fillLast = utf8FillLast, nb = 4;
                        break;
                    case 'base64':
                        this.text = base64Text, this.end = base64End, nb = 3;
                        break;
                    default:
                        this.write = simpleWrite, this.end = simpleEnd;
                        return;
                }
                this.lastNeed = 0, this.lastTotal = 0, this.lastChar = Buffer$2.allocUnsafe(nb);
            }
            function utf8CheckByte(byte) {
                return byte <= 0x7F ? 0 : byte >> 5 == 0x06 ? 2 : byte >> 4 == 0x0E ? 3 : byte >> 3 == 0x1E ? 4 : byte >> 6 == 0x02 ? -1 : -2;
            }
            function utf8CheckIncomplete(self1, buf, i) {
                var j = buf.length - 1;
                if (j < i) return 0;
                var nb = utf8CheckByte(buf[j]);
                return nb >= 0 ? (nb > 0 && (self1.lastNeed = nb - 1), nb) : --j < i || -2 === nb ? 0 : (nb = utf8CheckByte(buf[j])) >= 0 ? (nb > 0 && (self1.lastNeed = nb - 2), nb) : --j < i || -2 === nb ? 0 : (nb = utf8CheckByte(buf[j])) >= 0 ? (nb > 0 && (2 === nb ? nb = 0 : self1.lastNeed = nb - 3), nb) : 0;
            }
            function utf8CheckExtraBytes(self1, buf, p) {
                if ((0xC0 & buf[0]) != 0x80) return self1.lastNeed = 0, "\uFFFD";
                if (self1.lastNeed > 1 && buf.length > 1) {
                    if ((0xC0 & buf[1]) != 0x80) return self1.lastNeed = 1, "\uFFFD";
                    if (self1.lastNeed > 2 && buf.length > 2 && (0xC0 & buf[2]) != 0x80) return self1.lastNeed = 2, "\uFFFD";
                }
            }
            function utf8FillLast(buf) {
                var p = this.lastTotal - this.lastNeed, r = utf8CheckExtraBytes(this, buf);
                return void 0 !== r ? r : this.lastNeed <= buf.length ? (buf.copy(this.lastChar, p, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : void (buf.copy(this.lastChar, p, 0, buf.length), this.lastNeed -= buf.length);
            }
            function utf8Text(buf, i) {
                var total = utf8CheckIncomplete(this, buf, i);
                if (!this.lastNeed) return buf.toString('utf8', i);
                this.lastTotal = total;
                var end = buf.length - (total - this.lastNeed);
                return buf.copy(this.lastChar, 0, end), buf.toString('utf8', i, end);
            }
            function utf8End(buf) {
                var r = buf && buf.length ? this.write(buf) : '';
                return this.lastNeed ? r + "\uFFFD" : r;
            }
            function utf16Text(buf, i) {
                if ((buf.length - i) % 2 == 0) {
                    var r = buf.toString('utf16le', i);
                    if (r) {
                        var c = r.charCodeAt(r.length - 1);
                        if (c >= 0xD800 && c <= 0xDBFF) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = buf[buf.length - 2], this.lastChar[1] = buf[buf.length - 1], r.slice(0, -1);
                    }
                    return r;
                }
                return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = buf[buf.length - 1], buf.toString('utf16le', i, buf.length - 1);
            }
            function utf16End(buf) {
                var r = buf && buf.length ? this.write(buf) : '';
                if (this.lastNeed) {
                    var end = this.lastTotal - this.lastNeed;
                    return r + this.lastChar.toString('utf16le', 0, end);
                }
                return r;
            }
            function base64Text(buf, i) {
                var n = (buf.length - i) % 3;
                return 0 === n ? buf.toString('base64', i) : (this.lastNeed = 3 - n, this.lastTotal = 3, 1 === n ? this.lastChar[0] = buf[buf.length - 1] : (this.lastChar[0] = buf[buf.length - 2], this.lastChar[1] = buf[buf.length - 1]), buf.toString('base64', i, buf.length - n));
            }
            function base64End(buf) {
                var r = buf && buf.length ? this.write(buf) : '';
                return this.lastNeed ? r + this.lastChar.toString('base64', 0, 3 - this.lastNeed) : r;
            }
            function simpleWrite(buf) {
                return buf.toString(this.encoding);
            }
            function simpleEnd(buf) {
                return buf && buf.length ? this.write(buf) : '';
            }
            string_decoder.StringDecoder = StringDecoder$1, StringDecoder$1.prototype.write = function(buf) {
                var r, i;
                if (0 === buf.length) return '';
                if (this.lastNeed) {
                    if (void 0 === (r = this.fillLast(buf))) return '';
                    i = this.lastNeed, this.lastNeed = 0;
                } else i = 0;
                return i < buf.length ? r ? r + this.text(buf, i) : this.text(buf, i) : r || '';
            }, StringDecoder$1.prototype.end = utf8End, StringDecoder$1.prototype.text = utf8Text, StringDecoder$1.prototype.fillLast = function(buf) {
                if (this.lastNeed <= buf.length) return buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
                buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length), this.lastNeed -= buf.length;
            };
            var ERR_STREAM_PREMATURE_CLOSE = errorsBrowser.codes.ERR_STREAM_PREMATURE_CLOSE;
            function once$1(callback) {
                var called = !1;
                return function() {
                    if (!called) {
                        called = !0;
                        for(var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                        callback.apply(this, args);
                    }
                };
            }
            function noop$1() {}
            function isRequest$1(stream) {
                return stream.setHeader && 'function' == typeof stream.abort;
            }
            function eos$1(stream, opts, callback) {
                if ('function' == typeof opts) return eos$1(stream, null, opts);
                opts || (opts = {}), callback = once$1(callback || noop$1);
                var readable = opts.readable || !1 !== opts.readable && stream.readable, writable = opts.writable || !1 !== opts.writable && stream.writable, onlegacyfinish = function() {
                    stream.writable || onfinish();
                }, writableEnded = stream._writableState && stream._writableState.finished, onfinish = function() {
                    writable = !1, writableEnded = !0, readable || callback.call(stream);
                }, readableEnded = stream._readableState && stream._readableState.endEmitted, onend = function() {
                    readable = !1, readableEnded = !0, writable || callback.call(stream);
                }, onerror = function(err) {
                    callback.call(stream, err);
                }, onclose = function() {
                    var err;
                    return readable && !readableEnded ? (stream._readableState && stream._readableState.ended || (err = new ERR_STREAM_PREMATURE_CLOSE()), callback.call(stream, err)) : writable && !writableEnded ? (stream._writableState && stream._writableState.ended || (err = new ERR_STREAM_PREMATURE_CLOSE()), callback.call(stream, err)) : void 0;
                }, onrequest = function() {
                    stream.req.on('finish', onfinish);
                };
                return isRequest$1(stream) ? (stream.on('complete', onfinish), stream.on('abort', onclose), stream.req ? onrequest() : stream.on('request', onrequest)) : writable && !stream._writableState && (stream.on('end', onlegacyfinish), stream.on('close', onlegacyfinish)), stream.on('end', onend), stream.on('finish', onfinish), !1 !== opts.error && stream.on('error', onerror), stream.on('close', onclose), function() {
                    stream.removeListener('complete', onfinish), stream.removeListener('abort', onclose), stream.removeListener('request', onrequest), stream.req && stream.req.removeListener('finish', onfinish), stream.removeListener('end', onlegacyfinish), stream.removeListener('close', onlegacyfinish), stream.removeListener('finish', onfinish), stream.removeListener('end', onend), stream.removeListener('error', onerror), stream.removeListener('close', onclose);
                };
            }
            var endOfStream = eos$1;
            function _defineProperty$1(obj, key, value) {
                return key in obj ? Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : obj[key] = value, obj;
            }
            var kLastResolve = Symbol('lastResolve'), kLastReject = Symbol('lastReject'), kError = Symbol('error'), kEnded = Symbol('ended'), kLastPromise = Symbol('lastPromise'), kHandlePromise = Symbol('handlePromise'), kStream = Symbol('stream');
            function createIterResult(value, done) {
                return {
                    value: value,
                    done: done
                };
            }
            function readAndResolve(iter) {
                var resolve = iter[kLastResolve];
                if (null !== resolve) {
                    var data = iter[kStream].read();
                    null !== data && (iter[kLastPromise] = null, iter[kLastResolve] = null, iter[kLastReject] = null, resolve(createIterResult(data, !1)));
                }
            }
            function onReadable(iter) {
                browser$1$1.nextTick(readAndResolve, iter);
            }
            function wrapForNext(lastPromise, iter) {
                return function(resolve, reject) {
                    lastPromise.then(function() {
                        if (iter[kEnded]) {
                            resolve(createIterResult(void 0, !0));
                            return;
                        }
                        iter[kHandlePromise](resolve, reject);
                    }, reject);
                };
            }
            var AsyncIteratorPrototype = Object.getPrototypeOf(function() {}), ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
                get stream () {
                    return this[kStream];
                },
                next: function() {
                    var promise, _this = this, error = this[kError];
                    if (null !== error) return Promise.reject(error);
                    if (this[kEnded]) return Promise.resolve(createIterResult(void 0, !0));
                    if (this[kStream].destroyed) return new Promise(function(resolve, reject) {
                        browser$1$1.nextTick(function() {
                            _this[kError] ? reject(_this[kError]) : resolve(createIterResult(void 0, !0));
                        });
                    });
                    var lastPromise = this[kLastPromise];
                    if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
                    else {
                        var data = this[kStream].read();
                        if (null !== data) return Promise.resolve(createIterResult(data, !1));
                        promise = new Promise(this[kHandlePromise]);
                    }
                    return this[kLastPromise] = promise, promise;
                }
            }, _defineProperty$1(_Object$setPrototypeO, Symbol.asyncIterator, function() {
                return this;
            }), _defineProperty$1(_Object$setPrototypeO, "return", function() {
                var _this2 = this;
                return new Promise(function(resolve, reject) {
                    _this2[kStream].destroy(null, function(err) {
                        if (err) {
                            reject(err);
                            return;
                        }
                        resolve(createIterResult(void 0, !0));
                    });
                });
            }), _Object$setPrototypeO), AsyncIteratorPrototype), createReadableStreamAsyncIterator$1 = function(stream) {
                var _Object$create, iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_defineProperty$1(_Object$create = {}, kStream, {
                    value: stream,
                    writable: !0
                }), _defineProperty$1(_Object$create, kLastResolve, {
                    value: null,
                    writable: !0
                }), _defineProperty$1(_Object$create, kLastReject, {
                    value: null,
                    writable: !0
                }), _defineProperty$1(_Object$create, kError, {
                    value: null,
                    writable: !0
                }), _defineProperty$1(_Object$create, kEnded, {
                    value: stream._readableState.endEmitted,
                    writable: !0
                }), _defineProperty$1(_Object$create, kHandlePromise, {
                    value: function(resolve, reject) {
                        var data = iterator[kStream].read();
                        data ? (iterator[kLastPromise] = null, iterator[kLastResolve] = null, iterator[kLastReject] = null, resolve(createIterResult(data, !1))) : (iterator[kLastResolve] = resolve, iterator[kLastReject] = reject);
                    },
                    writable: !0
                }), _Object$create));
                return iterator[kLastPromise] = null, endOfStream(stream, function(err) {
                    if (err && 'ERR_STREAM_PREMATURE_CLOSE' !== err.code) {
                        var reject = iterator[kLastReject];
                        null !== reject && (iterator[kLastPromise] = null, iterator[kLastResolve] = null, iterator[kLastReject] = null, reject(err)), iterator[kError] = err;
                        return;
                    }
                    var resolve = iterator[kLastResolve];
                    null !== resolve && (iterator[kLastPromise] = null, iterator[kLastResolve] = null, iterator[kLastReject] = null, resolve(createIterResult(void 0, !0))), iterator[kEnded] = !0;
                }), stream.on('readable', onReadable.bind(null, iterator)), iterator;
            }, fromBrowser = function() {
                throw Error('Readable.from is not available in the browser');
            }, Registry$4 = _registry;
            Registry$4.Readable = Readable, Readable.ReadableState = ReadableState, events.exports.EventEmitter;
            var EElistenerCount = function(emitter, type) {
                return emitter.listeners(type).length;
            }, Stream$1 = streamBrowser, Buffer$1 = buffer.Buffer, OurUint8Array$1 = commonjsGlobal.Uint8Array || function() {};
            function _uint8ArrayToBuffer$1(chunk) {
                return Buffer$1.from(chunk);
            }
            function _isUint8Array$1(obj) {
                return Buffer$1.isBuffer(obj) || obj instanceof OurUint8Array$1;
            }
            var debugUtil = require$$4;
            debug = debugUtil && debugUtil.debuglog ? debugUtil.debuglog('stream') : function() {};
            var destroyImpl$1 = destroy_1, getHighWaterMark$1 = state.getHighWaterMark, _require$codes$4 = errorsBrowser.codes, ERR_INVALID_ARG_TYPE$3 = _require$codes$4.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes$4.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED$2 = _require$codes$4.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes$4.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
            inherits_browser.exports(Readable, Stream$1);
            var errorOrDestroy$1 = destroyImpl$1.errorOrDestroy, kProxyEvents = [
                'error',
                'close',
                'destroy',
                'pause',
                'resume'
            ];
            function prependListener(emitter, event, fn) {
                if ('function' == typeof emitter.prependListener) return emitter.prependListener(event, fn);
                emitter._events && emitter._events[event] ? Array.isArray(emitter._events[event]) ? emitter._events[event].unshift(fn) : emitter._events[event] = [
                    fn,
                    emitter._events[event]
                ] : emitter.on(event, fn);
            }
            function ReadableState(options, stream, isDuplex) {
                options = options || {}, 'boolean' != typeof isDuplex && (isDuplex = stream instanceof Registry$4.Duplex), this.objectMode = !!options.objectMode, isDuplex && (this.objectMode = this.objectMode || !!options.readableObjectMode), this.highWaterMark = getHighWaterMark$1(this, options, 'readableHighWaterMark', isDuplex), this.buffer = new buffer_list(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = !1 !== options.emitClose, this.autoDestroy = !!options.autoDestroy, this.destroyed = !1, this.defaultEncoding = options.defaultEncoding || 'utf8', this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, options.encoding && (StringDecoder || (StringDecoder = string_decoder.StringDecoder), this.decoder = new StringDecoder(options.encoding), this.encoding = options.encoding);
            }
            function Readable(options) {
                if (!(this instanceof Readable)) return new Readable(options);
                var isDuplex = this instanceof Registry$4.Duplex;
                this._readableState = new ReadableState(options, this, isDuplex), this.readable = !0, options && ('function' == typeof options.read && (this._read = options.read), 'function' == typeof options.destroy && (this._destroy = options.destroy)), Stream$1.call(this);
            }
            function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                debug('readableAddChunk', chunk);
                var er, state = stream._readableState;
                if (null === chunk) state.reading = !1, onEofChunk(stream, state);
                else if (skipChunkCheck || (er = chunkInvalid(state, chunk)), er) errorOrDestroy$1(stream, er);
                else if (state.objectMode || chunk && chunk.length > 0) {
                    if ('string' == typeof chunk || state.objectMode || Object.getPrototypeOf(chunk) === Buffer$1.prototype || (chunk = _uint8ArrayToBuffer$1(chunk)), addToFront) state.endEmitted ? errorOrDestroy$1(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT()) : addChunk(stream, state, chunk, !0);
                    else if (state.ended) errorOrDestroy$1(stream, new ERR_STREAM_PUSH_AFTER_EOF());
                    else {
                        if (state.destroyed) return !1;
                        state.reading = !1, state.decoder && !encoding ? (chunk = state.decoder.write(chunk), state.objectMode || 0 !== chunk.length ? addChunk(stream, state, chunk, !1) : maybeReadMore(stream, state)) : addChunk(stream, state, chunk, !1);
                    }
                } else addToFront || (state.reading = !1, maybeReadMore(stream, state));
                return !state.ended && (state.length < state.highWaterMark || 0 === state.length);
            }
            function addChunk(stream, state, chunk, addToFront) {
                state.flowing && 0 === state.length && !state.sync ? (state.awaitDrain = 0, stream.emit('data', chunk)) : (state.length += state.objectMode ? 1 : chunk.length, addToFront ? state.buffer.unshift(chunk) : state.buffer.push(chunk), state.needReadable && emitReadable(stream)), maybeReadMore(stream, state);
            }
            function chunkInvalid(state, chunk) {
                var er;
                return _isUint8Array$1(chunk) || 'string' == typeof chunk || void 0 === chunk || state.objectMode || (er = new ERR_INVALID_ARG_TYPE$3('chunk', [
                    'string',
                    'Buffer',
                    'Uint8Array'
                ], chunk)), er;
            }
            Object.defineProperty(Readable.prototype, 'destroyed', {
                enumerable: !1,
                get: function() {
                    return void 0 !== this._readableState && this._readableState.destroyed;
                },
                set: function(value) {
                    this._readableState && (this._readableState.destroyed = value);
                }
            }), Readable.prototype.destroy = destroyImpl$1.destroy, Readable.prototype._undestroy = destroyImpl$1.undestroy, Readable.prototype._destroy = function(err, cb) {
                cb(err);
            }, Readable.prototype.push = function(chunk, encoding) {
                var skipChunkCheck, state = this._readableState;
                return state.objectMode ? skipChunkCheck = !0 : 'string' == typeof chunk && ((encoding = encoding || state.defaultEncoding) !== state.encoding && (chunk = Buffer$1.from(chunk, encoding), encoding = ''), skipChunkCheck = !0), readableAddChunk(this, chunk, encoding, !1, skipChunkCheck);
            }, Readable.prototype.unshift = function(chunk) {
                return readableAddChunk(this, chunk, null, !0, !1);
            }, Readable.prototype.isPaused = function() {
                return !1 === this._readableState.flowing;
            }, Readable.prototype.setEncoding = function(enc) {
                StringDecoder || (StringDecoder = string_decoder.StringDecoder);
                var decoder = new StringDecoder(enc);
                this._readableState.decoder = decoder, this._readableState.encoding = this._readableState.decoder.encoding;
                for(var p = this._readableState.buffer.head, content = ''; null !== p;)content += decoder.write(p.data), p = p.next;
                return this._readableState.buffer.clear(), '' !== content && this._readableState.buffer.push(content), this._readableState.length = content.length, this;
            };
            var MAX_HWM = 0x40000000;
            function computeNewHighWaterMark(n) {
                return n >= MAX_HWM ? n = MAX_HWM : (n--, n |= n >>> 1, n |= n >>> 2, n |= n >>> 4, n |= n >>> 8, n |= n >>> 16, n++), n;
            }
            function howMuchToRead(n, state) {
                return n <= 0 || 0 === state.length && state.ended ? 0 : state.objectMode ? 1 : n != n ? state.flowing && state.length ? state.buffer.head.data.length : state.length : (n > state.highWaterMark && (state.highWaterMark = computeNewHighWaterMark(n)), n <= state.length) ? n : state.ended ? state.length : (state.needReadable = !0, 0);
            }
            function onEofChunk(stream, state) {
                if (debug('onEofChunk'), !state.ended) {
                    if (state.decoder) {
                        var chunk = state.decoder.end();
                        chunk && chunk.length && (state.buffer.push(chunk), state.length += state.objectMode ? 1 : chunk.length);
                    }
                    state.ended = !0, state.sync ? emitReadable(stream) : (state.needReadable = !1, state.emittedReadable || (state.emittedReadable = !0, emitReadable_(stream)));
                }
            }
            function emitReadable(stream) {
                var state = stream._readableState;
                debug('emitReadable', state.needReadable, state.emittedReadable), state.needReadable = !1, state.emittedReadable || (debug('emitReadable', state.flowing), state.emittedReadable = !0, browser$1$1.nextTick(emitReadable_, stream));
            }
            function emitReadable_(stream) {
                var state = stream._readableState;
                debug('emitReadable_', state.destroyed, state.length, state.ended), !state.destroyed && (state.length || state.ended) && (stream.emit('readable'), state.emittedReadable = !1), state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark, flow(stream);
            }
            function maybeReadMore(stream, state) {
                state.readingMore || (state.readingMore = !0, browser$1$1.nextTick(maybeReadMore_, stream, state));
            }
            function maybeReadMore_(stream, state) {
                for(; !state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && 0 === state.length);){
                    var len = state.length;
                    if (debug('maybeReadMore read 0'), stream.read(0), len === state.length) break;
                }
                state.readingMore = !1;
            }
            function pipeOnDrain(src) {
                return function() {
                    var state = src._readableState;
                    debug('pipeOnDrain', state.awaitDrain), state.awaitDrain && state.awaitDrain--, 0 === state.awaitDrain && EElistenerCount(src, 'data') && (state.flowing = !0, flow(src));
                };
            }
            function updateReadableListening(self1) {
                var state = self1._readableState;
                state.readableListening = self1.listenerCount('readable') > 0, state.resumeScheduled && !state.paused ? state.flowing = !0 : self1.listenerCount('data') > 0 && self1.resume();
            }
            function nReadingNextTick(self1) {
                debug('readable nexttick read 0'), self1.read(0);
            }
            function resume(stream, state) {
                state.resumeScheduled || (state.resumeScheduled = !0, browser$1$1.nextTick(resume_, stream, state));
            }
            function resume_(stream, state) {
                debug('resume', state.reading), state.reading || stream.read(0), state.resumeScheduled = !1, stream.emit('resume'), flow(stream), state.flowing && !state.reading && stream.read(0);
            }
            function flow(stream) {
                var state = stream._readableState;
                for(debug('flow', state.flowing); state.flowing && null !== stream.read(););
            }
            function fromList(n, state) {
                var ret;
                return 0 === state.length ? null : (state.objectMode ? ret = state.buffer.shift() : !n || n >= state.length ? (ret = state.decoder ? state.buffer.join('') : 1 === state.buffer.length ? state.buffer.first() : state.buffer.concat(state.length), state.buffer.clear()) : ret = state.buffer.consume(n, state.decoder), ret);
            }
            function endReadable(stream) {
                var state = stream._readableState;
                debug('endReadable', state.endEmitted), state.endEmitted || (state.ended = !0, browser$1$1.nextTick(endReadableNT, state, stream));
            }
            function endReadableNT(state, stream) {
                if (debug('endReadableNT', state.endEmitted, state.length), !state.endEmitted && 0 === state.length && (state.endEmitted = !0, stream.readable = !1, stream.emit('end'), state.autoDestroy)) {
                    var wState = stream._writableState;
                    (!wState || wState.autoDestroy && wState.finished) && stream.destroy();
                }
            }
            function indexOf(xs, x) {
                for(var i = 0, l = xs.length; i < l; i++)if (xs[i] === x) return i;
                return -1;
            }
            function deprecate(fn, msg) {
                if (config('noDeprecation')) return fn;
                var warned = !1;
                function deprecated() {
                    if (!warned) {
                        if (config('throwDeprecation')) throw Error(msg);
                        config('traceDeprecation') ? console.trace(msg) : console.warn(msg), warned = !0;
                    }
                    return fn.apply(this, arguments);
                }
                return deprecated;
            }
            function config(name) {
                try {
                    if (!commonjsGlobal.localStorage) return !1;
                } catch (_) {
                    return !1;
                }
                var val = commonjsGlobal.localStorage[name];
                return null != val && 'true' === String(val).toLowerCase();
            }
            Readable.prototype.read = function(n) {
                debug('read', n), n = parseInt(n, 10);
                var ret, state = this._readableState, nOrig = n;
                if (0 !== n && (state.emittedReadable = !1), 0 === n && state.needReadable && ((0 !== state.highWaterMark ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) return debug('read: emitReadable', state.length, state.ended), 0 === state.length && state.ended ? endReadable(this) : emitReadable(this), null;
                if (0 === (n = howMuchToRead(n, state)) && state.ended) return 0 === state.length && endReadable(this), null;
                var doRead = state.needReadable;
                return debug('need readable', doRead), (0 === state.length || state.length - n < state.highWaterMark) && debug('length less than watermark', doRead = !0), state.ended || state.reading ? debug('reading or ended', doRead = !1) : doRead && (debug('do read'), state.reading = !0, state.sync = !0, 0 === state.length && (state.needReadable = !0), this._read(state.highWaterMark), state.sync = !1, state.reading || (n = howMuchToRead(nOrig, state))), null === (ret = n > 0 ? fromList(n, state) : null) ? (state.needReadable = state.length <= state.highWaterMark, n = 0) : (state.length -= n, state.awaitDrain = 0), 0 === state.length && (state.ended || (state.needReadable = !0), nOrig !== n && state.ended && endReadable(this)), null !== ret && this.emit('data', ret), ret;
            }, Readable.prototype._read = function(n) {
                errorOrDestroy$1(this, new ERR_METHOD_NOT_IMPLEMENTED$2('_read()'));
            }, Readable.prototype.pipe = function(dest, pipeOpts) {
                var src = this, state = this._readableState;
                switch(state.pipesCount){
                    case 0:
                        state.pipes = dest;
                        break;
                    case 1:
                        state.pipes = [
                            state.pipes,
                            dest
                        ];
                        break;
                    default:
                        state.pipes.push(dest);
                }
                state.pipesCount += 1, debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
                var endFn = pipeOpts && !1 === pipeOpts.end || dest === browser$1$1.stdout || dest === browser$1$1.stderr ? unpipe : onend;
                function onunpipe(readable, unpipeInfo) {
                    debug('onunpipe'), readable === src && unpipeInfo && !1 === unpipeInfo.hasUnpiped && (unpipeInfo.hasUnpiped = !0, cleanup());
                }
                function onend() {
                    debug('onend'), dest.end();
                }
                state.endEmitted ? browser$1$1.nextTick(endFn) : src.once('end', endFn), dest.on('unpipe', onunpipe);
                var ondrain = pipeOnDrain(src);
                dest.on('drain', ondrain);
                var cleanedUp = !1;
                function cleanup() {
                    debug('cleanup'), dest.removeListener('close', onclose), dest.removeListener('finish', onfinish), dest.removeListener('drain', ondrain), dest.removeListener('error', onerror), dest.removeListener('unpipe', onunpipe), src.removeListener('end', onend), src.removeListener('end', unpipe), src.removeListener('data', ondata), cleanedUp = !0, state.awaitDrain && (!dest._writableState || dest._writableState.needDrain) && ondrain();
                }
                function ondata(chunk) {
                    debug('ondata');
                    var ret = dest.write(chunk);
                    debug('dest.write', ret), !1 === ret && ((1 === state.pipesCount && state.pipes === dest || state.pipesCount > 1 && -1 !== indexOf(state.pipes, dest)) && !cleanedUp && (debug('false write response, pause', state.awaitDrain), state.awaitDrain++), src.pause());
                }
                function onerror(er) {
                    debug('onerror', er), unpipe(), dest.removeListener('error', onerror), 0 === EElistenerCount(dest, 'error') && errorOrDestroy$1(dest, er);
                }
                function onclose() {
                    dest.removeListener('finish', onfinish), unpipe();
                }
                function onfinish() {
                    debug('onfinish'), dest.removeListener('close', onclose), unpipe();
                }
                function unpipe() {
                    debug('unpipe'), src.unpipe(dest);
                }
                return src.on('data', ondata), prependListener(dest, 'error', onerror), dest.once('close', onclose), dest.once('finish', onfinish), dest.emit('pipe', src), state.flowing || (debug('pipe resume'), src.resume()), dest;
            }, Readable.prototype.unpipe = function(dest) {
                var state = this._readableState, unpipeInfo = {
                    hasUnpiped: !1
                };
                if (0 === state.pipesCount) return this;
                if (1 === state.pipesCount) return dest && dest !== state.pipes || (dest || (dest = state.pipes), state.pipes = null, state.pipesCount = 0, state.flowing = !1, dest && dest.emit('unpipe', this, unpipeInfo)), this;
                if (!dest) {
                    var dests = state.pipes, len = state.pipesCount;
                    state.pipes = null, state.pipesCount = 0, state.flowing = !1;
                    for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
                        hasUnpiped: !1
                    });
                    return this;
                }
                var index = indexOf(state.pipes, dest);
                return -1 === index || (state.pipes.splice(index, 1), state.pipesCount -= 1, 1 === state.pipesCount && (state.pipes = state.pipes[0]), dest.emit('unpipe', this, unpipeInfo)), this;
            }, Readable.prototype.on = function(ev, fn) {
                var res = Stream$1.prototype.on.call(this, ev, fn), state = this._readableState;
                return 'data' === ev ? (state.readableListening = this.listenerCount('readable') > 0, !1 !== state.flowing && this.resume()) : 'readable' !== ev || state.endEmitted || state.readableListening || (state.readableListening = state.needReadable = !0, state.flowing = !1, state.emittedReadable = !1, debug('on readable', state.length, state.reading), state.length ? emitReadable(this) : state.reading || browser$1$1.nextTick(nReadingNextTick, this)), res;
            }, Readable.prototype.addListener = Readable.prototype.on, Readable.prototype.removeListener = function(ev, fn) {
                var res = Stream$1.prototype.removeListener.call(this, ev, fn);
                return 'readable' === ev && browser$1$1.nextTick(updateReadableListening, this), res;
            }, Readable.prototype.removeAllListeners = function(ev) {
                var res = Stream$1.prototype.removeAllListeners.apply(this, arguments);
                return ('readable' === ev || void 0 === ev) && browser$1$1.nextTick(updateReadableListening, this), res;
            }, Readable.prototype.resume = function() {
                var state = this._readableState;
                return state.flowing || (debug('resume'), state.flowing = !state.readableListening, resume(this, state)), state.paused = !1, this;
            }, Readable.prototype.pause = function() {
                return debug('call pause flowing=%j', this._readableState.flowing), !1 !== this._readableState.flowing && (debug('pause'), this._readableState.flowing = !1, this.emit('pause')), this._readableState.paused = !0, this;
            }, Readable.prototype.wrap = function(stream) {
                var _this = this, state = this._readableState, paused = !1;
                for(var i in stream.on('end', function() {
                    if (debug('wrapped end'), state.decoder && !state.ended) {
                        var chunk = state.decoder.end();
                        chunk && chunk.length && _this.push(chunk);
                    }
                    _this.push(null);
                }), stream.on('data', function(chunk) {
                    debug('wrapped data'), state.decoder && (chunk = state.decoder.write(chunk)), (!state.objectMode || null != chunk) && (state.objectMode || chunk && chunk.length) && (_this.push(chunk) || (paused = !0, stream.pause()));
                }), stream)void 0 === this[i] && 'function' == typeof stream[i] && (this[i] = function(method) {
                    return function() {
                        return stream[method].apply(stream, arguments);
                    };
                }(i));
                for(var n = 0; n < kProxyEvents.length; n++)stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
                return this._read = function(n) {
                    debug('wrapped _read', n), paused && (paused = !1, stream.resume());
                }, this;
            }, 'function' == typeof Symbol && (Readable.prototype[Symbol.asyncIterator] = function() {
                return void 0 === createReadableStreamAsyncIterator && (createReadableStreamAsyncIterator = createReadableStreamAsyncIterator$1), createReadableStreamAsyncIterator(this);
            }), Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
                enumerable: !1,
                get: function() {
                    return this._readableState.highWaterMark;
                }
            }), Object.defineProperty(Readable.prototype, 'readableBuffer', {
                enumerable: !1,
                get: function() {
                    return this._readableState && this._readableState.buffer;
                }
            }), Object.defineProperty(Readable.prototype, 'readableFlowing', {
                enumerable: !1,
                get: function() {
                    return this._readableState.flowing;
                },
                set: function(state) {
                    this._readableState && (this._readableState.flowing = state);
                }
            }), Readable._fromList = fromList, Object.defineProperty(Readable.prototype, 'readableLength', {
                enumerable: !1,
                get: function() {
                    return this._readableState.length;
                }
            }), 'function' == typeof Symbol && (Readable.from = function(iterable, opts) {
                return void 0 === from && (from = fromBrowser), from(Readable, iterable, opts);
            });
            var Registry$3 = _registry;
            function CorkedRequest(state) {
                var _this = this;
                this.next = null, this.entry = null, this.finish = function() {
                    onCorkedFinish(_this, state);
                };
            }
            Registry$3.Writable = Writable, Writable.WritableState = WritableState;
            var internalUtil = {
                deprecate: deprecate
            }, Stream = streamBrowser, Buffer = buffer.Buffer, OurUint8Array = commonjsGlobal.Uint8Array || function() {};
            function _uint8ArrayToBuffer(chunk) {
                return Buffer.from(chunk);
            }
            function _isUint8Array(obj) {
                return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
            }
            var destroyImpl = destroy_1, getHighWaterMark = state.getHighWaterMark, _require$codes$3 = errorsBrowser.codes, ERR_INVALID_ARG_TYPE$2 = _require$codes$3.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED$1 = _require$codes$3.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK$1 = _require$codes$3.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes$3.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED$1 = _require$codes$3.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes$3.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes$3.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes$3.ERR_UNKNOWN_ENCODING, errorOrDestroy = destroyImpl.errorOrDestroy;
            function nop() {}
            function WritableState(options, stream, isDuplex) {
                options = options || {}, 'boolean' != typeof isDuplex && (isDuplex = stream instanceof Registry$3.Duplex), this.objectMode = !!options.objectMode, isDuplex && (this.objectMode = this.objectMode || !!options.writableObjectMode), this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
                var noDecode = !1 === options.decodeStrings;
                this.decodeStrings = !noDecode, this.defaultEncoding = options.defaultEncoding || 'utf8', this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(er) {
                    onwrite(stream, er);
                }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.emitClose = !1 !== options.emitClose, this.autoDestroy = !!options.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new CorkedRequest(this);
            }
            function Writable(options) {
                var isDuplex = this instanceof Registry$3.Duplex;
                if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
                this._writableState = new WritableState(options, this, isDuplex), this.writable = !0, options && ('function' == typeof options.write && (this._write = options.write), 'function' == typeof options.writev && (this._writev = options.writev), 'function' == typeof options.destroy && (this._destroy = options.destroy), 'function' == typeof options.final && (this._final = options.final)), Stream.call(this);
            }
            function writeAfterEnd(stream, cb) {
                var er = new ERR_STREAM_WRITE_AFTER_END();
                errorOrDestroy(stream, er), browser$1$1.nextTick(cb, er);
            }
            function validChunk(stream, state, chunk, cb) {
                var er;
                return null === chunk ? er = new ERR_STREAM_NULL_VALUES() : 'string' == typeof chunk || state.objectMode || (er = new ERR_INVALID_ARG_TYPE$2('chunk', [
                    'string',
                    'Buffer'
                ], chunk)), !er || (errorOrDestroy(stream, er), browser$1$1.nextTick(cb, er), !1);
            }
            function decodeChunk(state, chunk, encoding) {
                return state.objectMode || !1 === state.decodeStrings || 'string' != typeof chunk || (chunk = Buffer.from(chunk, encoding)), chunk;
            }
            function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                if (!isBuf) {
                    var newChunk = decodeChunk(state, chunk, encoding);
                    chunk !== newChunk && (isBuf = !0, encoding = 'buffer', chunk = newChunk);
                }
                var len = state.objectMode ? 1 : chunk.length;
                state.length += len;
                var ret = state.length < state.highWaterMark;
                if (ret || (state.needDrain = !0), state.writing || state.corked) {
                    var last = state.lastBufferedRequest;
                    state.lastBufferedRequest = {
                        chunk: chunk,
                        encoding: encoding,
                        isBuf: isBuf,
                        callback: cb,
                        next: null
                    }, last ? last.next = state.lastBufferedRequest : state.bufferedRequest = state.lastBufferedRequest, state.bufferedRequestCount += 1;
                } else doWrite(stream, state, !1, len, chunk, encoding, cb);
                return ret;
            }
            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                state.writelen = len, state.writecb = cb, state.writing = !0, state.sync = !0, state.destroyed ? state.onwrite(new ERR_STREAM_DESTROYED$1('write')) : writev ? stream._writev(chunk, state.onwrite) : stream._write(chunk, encoding, state.onwrite), state.sync = !1;
            }
            function onwriteError(stream, state, sync, er, cb) {
                --state.pendingcb, sync ? (browser$1$1.nextTick(cb, er), browser$1$1.nextTick(finishMaybe, stream, state), stream._writableState.errorEmitted = !0, errorOrDestroy(stream, er)) : (cb(er), stream._writableState.errorEmitted = !0, errorOrDestroy(stream, er), finishMaybe(stream, state));
            }
            function onwriteStateUpdate(state) {
                state.writing = !1, state.writecb = null, state.length -= state.writelen, state.writelen = 0;
            }
            function onwrite(stream, er) {
                var state = stream._writableState, sync = state.sync, cb = state.writecb;
                if ('function' != typeof cb) throw new ERR_MULTIPLE_CALLBACK$1();
                if (onwriteStateUpdate(state), er) onwriteError(stream, state, sync, er, cb);
                else {
                    var finished = needFinish(state) || stream.destroyed;
                    finished || state.corked || state.bufferProcessing || !state.bufferedRequest || clearBuffer(stream, state), sync ? browser$1$1.nextTick(afterWrite, stream, state, finished, cb) : afterWrite(stream, state, finished, cb);
                }
            }
            function afterWrite(stream, state, finished, cb) {
                finished || onwriteDrain(stream, state), state.pendingcb--, cb(), finishMaybe(stream, state);
            }
            function onwriteDrain(stream, state) {
                0 === state.length && state.needDrain && (state.needDrain = !1, stream.emit('drain'));
            }
            function clearBuffer(stream, state) {
                state.bufferProcessing = !0;
                var entry = state.bufferedRequest;
                if (stream._writev && entry && entry.next) {
                    var buffer = Array(state.bufferedRequestCount), holder = state.corkedRequestsFree;
                    holder.entry = entry;
                    for(var count = 0, allBuffers = !0; entry;)buffer[count] = entry, entry.isBuf || (allBuffers = !1), entry = entry.next, count += 1;
                    buffer.allBuffers = allBuffers, doWrite(stream, state, !0, state.length, buffer, '', holder.finish), state.pendingcb++, state.lastBufferedRequest = null, holder.next ? (state.corkedRequestsFree = holder.next, holder.next = null) : state.corkedRequestsFree = new CorkedRequest(state), state.bufferedRequestCount = 0;
                } else {
                    for(; entry;){
                        var chunk = entry.chunk, encoding = entry.encoding, cb = entry.callback, len = state.objectMode ? 1 : chunk.length;
                        if (doWrite(stream, state, !1, len, chunk, encoding, cb), entry = entry.next, state.bufferedRequestCount--, state.writing) break;
                    }
                    null === entry && (state.lastBufferedRequest = null);
                }
                state.bufferedRequest = entry, state.bufferProcessing = !1;
            }
            function needFinish(state) {
                return state.ending && 0 === state.length && null === state.bufferedRequest && !state.finished && !state.writing;
            }
            function callFinal(stream, state) {
                stream._final(function(err) {
                    state.pendingcb--, err && errorOrDestroy(stream, err), state.prefinished = !0, stream.emit('prefinish'), finishMaybe(stream, state);
                });
            }
            function prefinish$1(stream, state) {
                state.prefinished || state.finalCalled || ('function' != typeof stream._final || state.destroyed ? (state.prefinished = !0, stream.emit('prefinish')) : (state.pendingcb++, state.finalCalled = !0, browser$1$1.nextTick(callFinal, stream, state)));
            }
            function finishMaybe(stream, state) {
                var need = needFinish(state);
                if (need && (prefinish$1(stream, state), 0 === state.pendingcb && (state.finished = !0, stream.emit('finish'), state.autoDestroy))) {
                    var rState = stream._readableState;
                    (!rState || rState.autoDestroy && rState.endEmitted) && stream.destroy();
                }
                return need;
            }
            function endWritable(stream, state, cb) {
                state.ending = !0, finishMaybe(stream, state), cb && (state.finished ? browser$1$1.nextTick(cb) : stream.once('finish', cb)), state.ended = !0, stream.writable = !1;
            }
            function onCorkedFinish(corkReq, state, err) {
                var entry = corkReq.entry;
                for(corkReq.entry = null; entry;){
                    var cb = entry.callback;
                    state.pendingcb--, cb(err), entry = entry.next;
                }
                state.corkedRequestsFree.next = corkReq;
            }
            inherits_browser.exports(Writable, Stream), WritableState.prototype.getBuffer = function() {
                for(var current = this.bufferedRequest, out = []; current;)out.push(current), current = current.next;
                return out;
            }, function() {
                try {
                    Object.defineProperty(WritableState.prototype, 'buffer', {
                        get: internalUtil.deprecate(function() {
                            return this.getBuffer();
                        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
                    });
                } catch (_) {}
            }(), 'function' == typeof Symbol && Symbol.hasInstance && 'function' == typeof Function.prototype[Symbol.hasInstance] ? (realHasInstance = Function.prototype[Symbol.hasInstance], Object.defineProperty(Writable, Symbol.hasInstance, {
                value: function(object) {
                    return !!realHasInstance.call(this, object) || this === Writable && object && object._writableState instanceof WritableState;
                }
            })) : realHasInstance = function(object) {
                return object instanceof this;
            }, Writable.prototype.pipe = function() {
                errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
            }, Writable.prototype.write = function(chunk, encoding, cb) {
                var state = this._writableState, ret = !1, isBuf = !state.objectMode && _isUint8Array(chunk);
                return isBuf && !Buffer.isBuffer(chunk) && (chunk = _uint8ArrayToBuffer(chunk)), 'function' == typeof encoding && (cb = encoding, encoding = null), isBuf ? encoding = 'buffer' : encoding || (encoding = state.defaultEncoding), 'function' != typeof cb && (cb = nop), state.ending ? writeAfterEnd(this, cb) : (isBuf || validChunk(this, state, chunk, cb)) && (state.pendingcb++, ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb)), ret;
            }, Writable.prototype.cork = function() {
                this._writableState.corked++;
            }, Writable.prototype.uncork = function() {
                var state = this._writableState;
                !state.corked || (state.corked--, state.writing || state.corked || state.bufferProcessing || !state.bufferedRequest || clearBuffer(this, state));
            }, Writable.prototype.setDefaultEncoding = function(encoding) {
                if ('string' == typeof encoding && (encoding = encoding.toLowerCase()), !([
                    'hex',
                    'utf8',
                    'utf-8',
                    'ascii',
                    'binary',
                    'base64',
                    'ucs2',
                    'ucs-2',
                    'utf16le',
                    'utf-16le',
                    'raw'
                ].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
                return this._writableState.defaultEncoding = encoding, this;
            }, Object.defineProperty(Writable.prototype, 'writableBuffer', {
                enumerable: !1,
                get: function() {
                    return this._writableState && this._writableState.getBuffer();
                }
            }), Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
                enumerable: !1,
                get: function() {
                    return this._writableState.highWaterMark;
                }
            }), Writable.prototype._write = function(chunk, encoding, cb) {
                cb(new ERR_METHOD_NOT_IMPLEMENTED$1('_write()'));
            }, Writable.prototype._writev = null, Writable.prototype.end = function(chunk, encoding, cb) {
                var state = this._writableState;
                return 'function' == typeof chunk ? (cb = chunk, chunk = null, encoding = null) : 'function' == typeof encoding && (cb = encoding, encoding = null), null != chunk && this.write(chunk, encoding), state.corked && (state.corked = 1, this.uncork()), state.ending || endWritable(this, state, cb), this;
            }, Object.defineProperty(Writable.prototype, 'writableLength', {
                enumerable: !1,
                get: function() {
                    return this._writableState.length;
                }
            }), Object.defineProperty(Writable.prototype, 'destroyed', {
                enumerable: !1,
                get: function() {
                    return void 0 !== this._writableState && this._writableState.destroyed;
                },
                set: function(value) {
                    this._writableState && (this._writableState.destroyed = value);
                }
            }), Writable.prototype.destroy = destroyImpl.destroy, Writable.prototype._undestroy = destroyImpl.undestroy, Writable.prototype._destroy = function(err, cb) {
                cb(err);
            };
            var objectKeys$1 = Object.keys || function(obj) {
                var keys = [];
                for(var key in obj)keys.push(key);
                return keys;
            }, Registry$2 = _registry;
            Registry$2.Duplex = Duplex, inherits_browser.exports(Duplex, Registry$2.Readable);
            for(var keys$1 = objectKeys$1(Registry$2.Writable.prototype), v = 0; v < keys$1.length; v++){
                var method = keys$1[v];
                Duplex.prototype[method] || (Duplex.prototype[method] = Registry$2.Writable.prototype[method]);
            }
            function Duplex(options) {
                if (!(this instanceof Duplex)) return new Duplex(options);
                Registry$2.Readable.call(this, options), Registry$2.Writable.call(this, options), this.allowHalfOpen = !0, options && (!1 === options.readable && (this.readable = !1), !1 === options.writable && (this.writable = !1), !1 === options.allowHalfOpen && (this.allowHalfOpen = !1, this.once('end', onend)));
            }
            function onend() {
                this._writableState.ended || browser$1$1.nextTick(onEndNT, this);
            }
            function onEndNT(self1) {
                self1.end();
            }
            Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
                enumerable: !1,
                get: function() {
                    return this._writableState.highWaterMark;
                }
            }), Object.defineProperty(Duplex.prototype, 'writableBuffer', {
                enumerable: !1,
                get: function() {
                    return this._writableState && this._writableState.getBuffer();
                }
            }), Object.defineProperty(Duplex.prototype, 'writableLength', {
                enumerable: !1,
                get: function() {
                    return this._writableState.length;
                }
            }), Object.defineProperty(Duplex.prototype, 'destroyed', {
                enumerable: !1,
                get: function() {
                    return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
                },
                set: function(value) {
                    void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = value, this._writableState.destroyed = value);
                }
            });
            var Registry$1 = _registry;
            Registry$1.Transform = Transform$1;
            var _require$codes$2 = errorsBrowser.codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes$2.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes$2.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$2.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$2.ERR_TRANSFORM_WITH_LENGTH_0;
            function afterTransform(er, data) {
                var ts = this._transformState;
                ts.transforming = !1;
                var cb = ts.writecb;
                if (null === cb) return this.emit('error', new ERR_MULTIPLE_CALLBACK());
                ts.writechunk = null, ts.writecb = null, null != data && this.push(data), cb(er);
                var rs = this._readableState;
                rs.reading = !1, (rs.needReadable || rs.length < rs.highWaterMark) && this._read(rs.highWaterMark);
            }
            function Transform$1(options) {
                if (!(this instanceof Transform$1)) return new Transform$1(options);
                Registry$1.Duplex.call(this, options), this._transformState = {
                    afterTransform: afterTransform.bind(this),
                    needTransform: !1,
                    transforming: !1,
                    writecb: null,
                    writechunk: null,
                    writeencoding: null
                }, this._readableState.needReadable = !0, this._readableState.sync = !1, options && ('function' == typeof options.transform && (this._transform = options.transform), 'function' == typeof options.flush && (this._flush = options.flush)), this.on('prefinish', prefinish);
            }
            function prefinish() {
                var _this = this;
                'function' != typeof this._flush || this._readableState.destroyed ? done(this, null, null) : this._flush(function(er, data) {
                    done(_this, er, data);
                });
            }
            function done(stream, er, data) {
                if (er) return stream.emit('error', er);
                if (null != data && stream.push(data), stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
                if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
                return stream.push(null);
            }
            inherits_browser.exports(Transform$1, Registry$1.Duplex), Transform$1.prototype.push = function(chunk, encoding) {
                return this._transformState.needTransform = !1, Registry$1.Duplex.prototype.push.call(this, chunk, encoding);
            }, Transform$1.prototype._transform = function(chunk, encoding, cb) {
                cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
            }, Transform$1.prototype._write = function(chunk, encoding, cb) {
                var ts = this._transformState;
                if (ts.writecb = cb, ts.writechunk = chunk, ts.writeencoding = encoding, !ts.transforming) {
                    var rs = this._readableState;
                    (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) && this._read(rs.highWaterMark);
                }
            }, Transform$1.prototype._read = function(n) {
                var ts = this._transformState;
                null === ts.writechunk || ts.transforming ? ts.needTransform = !0 : (ts.transforming = !0, this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform));
            }, Transform$1.prototype._destroy = function(err, cb) {
                Registry$1.Duplex.prototype._destroy.call(this, err, function(err2) {
                    cb(err2);
                });
            };
            var Registry = _registry;
            function PassThrough(options) {
                if (!(this instanceof PassThrough)) return new PassThrough(options);
                Transform.call(this, options);
            }
            function once(callback) {
                var called = !1;
                return function() {
                    called || (called = !0, callback.apply(void 0, arguments));
                };
            }
            Registry.PassThrough = PassThrough, inherits_browser.exports(PassThrough, Registry.Transform), PassThrough.prototype._transform = function(chunk, encoding, cb) {
                cb(null, chunk);
            };
            var _require$codes$1 = errorsBrowser.codes, ERR_MISSING_ARGS$1 = _require$codes$1.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes$1.ERR_STREAM_DESTROYED;
            function noop(err) {
                if (err) throw err;
            }
            function isRequest(stream) {
                return stream.setHeader && 'function' == typeof stream.abort;
            }
            function destroyer(stream, reading, writing, callback) {
                callback = once(callback);
                var closed = !1;
                stream.on('close', function() {
                    closed = !0;
                }), void 0 === eos && (eos = endOfStream), eos(stream, {
                    readable: reading,
                    writable: writing
                }, function(err) {
                    if (err) return callback(err);
                    closed = !0, callback();
                });
                var destroyed = !1;
                return function(err) {
                    if (!closed && !destroyed) {
                        if (destroyed = !0, isRequest(stream)) return stream.abort();
                        if ('function' == typeof stream.destroy) return stream.destroy();
                        callback(err || new ERR_STREAM_DESTROYED('pipe'));
                    }
                };
            }
            function call(fn) {
                fn();
            }
            function pipe(from, to) {
                return from.pipe(to);
            }
            function popCallback(streams) {
                return streams.length && 'function' == typeof streams[streams.length - 1] ? streams.pop() : noop;
            }
            function pipeline() {
                for(var error, _len = arguments.length, streams = Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
                var callback = popCallback(streams);
                if (Array.isArray(streams[0]) && (streams = streams[0]), streams.length < 2) throw new ERR_MISSING_ARGS$1('streams');
                var destroys = streams.map(function(stream, i) {
                    var reading = i < streams.length - 1;
                    return destroyer(stream, reading, i > 0, function(err) {
                        error || (error = err), err && destroys.forEach(call), reading || (destroys.forEach(call), callback(error));
                    });
                });
                return streams.reduce(pipe);
            }
            !function(module, exports) {
                var Registry = _registry;
                (exports = module.exports = Registry.Readable).Stream = Registry.Readable, exports.Readable = Registry.Readable, exports.Writable = Registry.Writable, exports.Duplex = Registry.Duplex, exports.Transform = Registry.Transform, exports.PassThrough = Registry.PassThrough, exports.finished = endOfStream, exports.pipeline = pipeline;
            }(readableBrowser, readableBrowser.exports);
            var stream = readableBrowser.exports, lib = {}, binding = {}, assert$2 = {
                exports: {}
            }, errors = {}, util$1 = {}, types = {}, shams$1 = function() {
                if ('function' != typeof Symbol || 'function' != typeof Object.getOwnPropertySymbols) return !1;
                if ('symbol' == typeof Symbol.iterator) return !0;
                var obj = {}, sym = Symbol('test'), symObj = Object(sym);
                if ('string' == typeof sym || '[object Symbol]' !== Object.prototype.toString.call(sym) || '[object Symbol]' !== Object.prototype.toString.call(symObj)) return !1;
                var symVal = 42;
                for(sym in obj[sym] = symVal, obj)return !1;
                if ('function' == typeof Object.keys && 0 !== Object.keys(obj).length || 'function' == typeof Object.getOwnPropertyNames && 0 !== Object.getOwnPropertyNames(obj).length) return !1;
                var syms = Object.getOwnPropertySymbols(obj);
                if (1 !== syms.length || syms[0] !== sym || !Object.prototype.propertyIsEnumerable.call(obj, sym)) return !1;
                if ('function' == typeof Object.getOwnPropertyDescriptor) {
                    var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
                    if (descriptor.value !== symVal || !0 !== descriptor.enumerable) return !1;
                }
                return !0;
            }, origSymbol = 'undefined' != typeof Symbol && Symbol, slice$1 = Array.prototype.slice, toStr$4 = Object.prototype.toString, implementation$8 = function(that) {
                var bound, target = this;
                if ('function' != typeof target || '[object Function]' !== toStr$4.call(target)) throw TypeError('Function.prototype.bind called on incompatible ' + target);
                for(var args = slice$1.call(arguments, 1), binder = function() {
                    if (!(this instanceof bound)) return target.apply(that, args.concat(slice$1.call(arguments)));
                    var result = target.apply(this, args.concat(slice$1.call(arguments)));
                    return Object(result) === result ? result : this;
                }, boundLength = Math.max(0, target.length - args.length), boundArgs = [], i = 0; i < boundLength; i++)boundArgs.push('$' + i);
                if (bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder), target.prototype) {
                    var Empty = function() {};
                    Empty.prototype = target.prototype, bound.prototype = new Empty(), Empty.prototype = null;
                }
                return bound;
            }, functionBind = Function.prototype.bind || implementation$8, src = functionBind.call(Function.call, Object.prototype.hasOwnProperty), $SyntaxError = SyntaxError, $Function = Function, $TypeError = TypeError, getEvalledConstructor = function(expressionSyntax) {
                try {
                    return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
                } catch (e) {}
            }, $gOPD$1 = Object.getOwnPropertyDescriptor;
            if ($gOPD$1) try {
                $gOPD$1({}, '');
            } catch (e) {
                $gOPD$1 = null;
            }
            var throwTypeError = function() {
                throw new $TypeError();
            }, ThrowTypeError = $gOPD$1 ? function() {
                try {
                    return arguments.callee, throwTypeError;
                } catch (calleeThrows) {
                    try {
                        return $gOPD$1(arguments, 'callee').get;
                    } catch (gOPDthrows) {
                        return throwTypeError;
                    }
                }
            }() : throwTypeError, hasSymbols$2 = function() {
                return 'function' == typeof origSymbol && 'function' == typeof Symbol && 'symbol' == typeof origSymbol('foo') && 'symbol' == typeof Symbol('bar') && shams$1();
            }(), getProto$1 = Object.getPrototypeOf || function(x) {
                return x.__proto__;
            }, needsEval = {}, TypedArray = 'undefined' == typeof Uint8Array ? undefined$1 : getProto$1(Uint8Array), INTRINSICS = {
                '%AggregateError%': 'undefined' == typeof AggregateError ? undefined$1 : AggregateError,
                '%Array%': Array,
                '%ArrayBuffer%': 'undefined' == typeof ArrayBuffer ? undefined$1 : ArrayBuffer,
                '%ArrayIteratorPrototype%': hasSymbols$2 ? getProto$1([][Symbol.iterator]()) : undefined$1,
                '%AsyncFromSyncIteratorPrototype%': undefined$1,
                '%AsyncFunction%': needsEval,
                '%AsyncGenerator%': needsEval,
                '%AsyncGeneratorFunction%': needsEval,
                '%AsyncIteratorPrototype%': needsEval,
                '%Atomics%': 'undefined' == typeof Atomics ? undefined$1 : Atomics,
                '%BigInt%': 'undefined' == typeof BigInt ? undefined$1 : BigInt,
                '%Boolean%': Boolean,
                '%DataView%': 'undefined' == typeof DataView ? undefined$1 : DataView,
                '%Date%': Date,
                '%decodeURI%': decodeURI,
                '%decodeURIComponent%': decodeURIComponent,
                '%encodeURI%': encodeURI,
                '%encodeURIComponent%': encodeURIComponent,
                '%Error%': Error,
                '%eval%': eval,
                '%EvalError%': EvalError,
                '%Float32Array%': 'undefined' == typeof Float32Array ? undefined$1 : Float32Array,
                '%Float64Array%': 'undefined' == typeof Float64Array ? undefined$1 : Float64Array,
                '%FinalizationRegistry%': 'undefined' == typeof FinalizationRegistry ? undefined$1 : FinalizationRegistry,
                '%Function%': $Function,
                '%GeneratorFunction%': needsEval,
                '%Int8Array%': 'undefined' == typeof Int8Array ? undefined$1 : Int8Array,
                '%Int16Array%': 'undefined' == typeof Int16Array ? undefined$1 : Int16Array,
                '%Int32Array%': 'undefined' == typeof Int32Array ? undefined$1 : Int32Array,
                '%isFinite%': isFinite,
                '%isNaN%': isNaN,
                '%IteratorPrototype%': hasSymbols$2 ? getProto$1(getProto$1([][Symbol.iterator]())) : undefined$1,
                '%JSON%': 'object' == typeof JSON ? JSON : undefined$1,
                '%Map%': 'undefined' == typeof Map ? undefined$1 : Map,
                '%MapIteratorPrototype%': 'undefined' != typeof Map && hasSymbols$2 ? getProto$1(new Map()[Symbol.iterator]()) : undefined$1,
                '%Math%': Math,
                '%Number%': Number,
                '%Object%': Object,
                '%parseFloat%': parseFloat,
                '%parseInt%': parseInt,
                '%Promise%': 'undefined' == typeof Promise ? undefined$1 : Promise,
                '%Proxy%': 'undefined' == typeof Proxy ? undefined$1 : Proxy,
                '%RangeError%': RangeError,
                '%ReferenceError%': ReferenceError,
                '%Reflect%': 'undefined' == typeof Reflect ? undefined$1 : Reflect,
                '%RegExp%': RegExp,
                '%Set%': 'undefined' == typeof Set ? undefined$1 : Set,
                '%SetIteratorPrototype%': 'undefined' != typeof Set && hasSymbols$2 ? getProto$1(new Set()[Symbol.iterator]()) : undefined$1,
                '%SharedArrayBuffer%': 'undefined' == typeof SharedArrayBuffer ? undefined$1 : SharedArrayBuffer,
                '%String%': String,
                '%StringIteratorPrototype%': hasSymbols$2 ? getProto$1(''[Symbol.iterator]()) : undefined$1,
                '%Symbol%': hasSymbols$2 ? Symbol : undefined$1,
                '%SyntaxError%': $SyntaxError,
                '%ThrowTypeError%': ThrowTypeError,
                '%TypedArray%': TypedArray,
                '%TypeError%': $TypeError,
                '%Uint8Array%': 'undefined' == typeof Uint8Array ? undefined$1 : Uint8Array,
                '%Uint8ClampedArray%': 'undefined' == typeof Uint8ClampedArray ? undefined$1 : Uint8ClampedArray,
                '%Uint16Array%': 'undefined' == typeof Uint16Array ? undefined$1 : Uint16Array,
                '%Uint32Array%': 'undefined' == typeof Uint32Array ? undefined$1 : Uint32Array,
                '%URIError%': URIError,
                '%WeakMap%': 'undefined' == typeof WeakMap ? undefined$1 : WeakMap,
                '%WeakRef%': 'undefined' == typeof WeakRef ? undefined$1 : WeakRef,
                '%WeakSet%': 'undefined' == typeof WeakSet ? undefined$1 : WeakSet
            }, doEval = function doEval(name) {
                var value;
                if ('%AsyncFunction%' === name) value = getEvalledConstructor('async function () {}');
                else if ('%GeneratorFunction%' === name) value = getEvalledConstructor('function* () {}');
                else if ('%AsyncGeneratorFunction%' === name) value = getEvalledConstructor('async function* () {}');
                else if ('%AsyncGenerator%' === name) {
                    var fn = doEval('%AsyncGeneratorFunction%');
                    fn && (value = fn.prototype);
                } else if ('%AsyncIteratorPrototype%' === name) {
                    var gen = doEval('%AsyncGenerator%');
                    gen && (value = getProto$1(gen.prototype));
                }
                return INTRINSICS[name] = value, value;
            }, LEGACY_ALIASES = {
                '%ArrayBufferPrototype%': [
                    'ArrayBuffer',
                    'prototype'
                ],
                '%ArrayPrototype%': [
                    'Array',
                    'prototype'
                ],
                '%ArrayProto_entries%': [
                    'Array',
                    'prototype',
                    'entries'
                ],
                '%ArrayProto_forEach%': [
                    'Array',
                    'prototype',
                    'forEach'
                ],
                '%ArrayProto_keys%': [
                    'Array',
                    'prototype',
                    'keys'
                ],
                '%ArrayProto_values%': [
                    'Array',
                    'prototype',
                    'values'
                ],
                '%AsyncFunctionPrototype%': [
                    'AsyncFunction',
                    'prototype'
                ],
                '%AsyncGenerator%': [
                    'AsyncGeneratorFunction',
                    'prototype'
                ],
                '%AsyncGeneratorPrototype%': [
                    'AsyncGeneratorFunction',
                    'prototype',
                    'prototype'
                ],
                '%BooleanPrototype%': [
                    'Boolean',
                    'prototype'
                ],
                '%DataViewPrototype%': [
                    'DataView',
                    'prototype'
                ],
                '%DatePrototype%': [
                    'Date',
                    'prototype'
                ],
                '%ErrorPrototype%': [
                    'Error',
                    'prototype'
                ],
                '%EvalErrorPrototype%': [
                    'EvalError',
                    'prototype'
                ],
                '%Float32ArrayPrototype%': [
                    'Float32Array',
                    'prototype'
                ],
                '%Float64ArrayPrototype%': [
                    'Float64Array',
                    'prototype'
                ],
                '%FunctionPrototype%': [
                    'Function',
                    'prototype'
                ],
                '%Generator%': [
                    'GeneratorFunction',
                    'prototype'
                ],
                '%GeneratorPrototype%': [
                    'GeneratorFunction',
                    'prototype',
                    'prototype'
                ],
                '%Int8ArrayPrototype%': [
                    'Int8Array',
                    'prototype'
                ],
                '%Int16ArrayPrototype%': [
                    'Int16Array',
                    'prototype'
                ],
                '%Int32ArrayPrototype%': [
                    'Int32Array',
                    'prototype'
                ],
                '%JSONParse%': [
                    'JSON',
                    'parse'
                ],
                '%JSONStringify%': [
                    'JSON',
                    'stringify'
                ],
                '%MapPrototype%': [
                    'Map',
                    'prototype'
                ],
                '%NumberPrototype%': [
                    'Number',
                    'prototype'
                ],
                '%ObjectPrototype%': [
                    'Object',
                    'prototype'
                ],
                '%ObjProto_toString%': [
                    'Object',
                    'prototype',
                    'toString'
                ],
                '%ObjProto_valueOf%': [
                    'Object',
                    'prototype',
                    'valueOf'
                ],
                '%PromisePrototype%': [
                    'Promise',
                    'prototype'
                ],
                '%PromiseProto_then%': [
                    'Promise',
                    'prototype',
                    'then'
                ],
                '%Promise_all%': [
                    'Promise',
                    'all'
                ],
                '%Promise_reject%': [
                    'Promise',
                    'reject'
                ],
                '%Promise_resolve%': [
                    'Promise',
                    'resolve'
                ],
                '%RangeErrorPrototype%': [
                    'RangeError',
                    'prototype'
                ],
                '%ReferenceErrorPrototype%': [
                    'ReferenceError',
                    'prototype'
                ],
                '%RegExpPrototype%': [
                    'RegExp',
                    'prototype'
                ],
                '%SetPrototype%': [
                    'Set',
                    'prototype'
                ],
                '%SharedArrayBufferPrototype%': [
                    'SharedArrayBuffer',
                    'prototype'
                ],
                '%StringPrototype%': [
                    'String',
                    'prototype'
                ],
                '%SymbolPrototype%': [
                    'Symbol',
                    'prototype'
                ],
                '%SyntaxErrorPrototype%': [
                    'SyntaxError',
                    'prototype'
                ],
                '%TypedArrayPrototype%': [
                    'TypedArray',
                    'prototype'
                ],
                '%TypeErrorPrototype%': [
                    'TypeError',
                    'prototype'
                ],
                '%Uint8ArrayPrototype%': [
                    'Uint8Array',
                    'prototype'
                ],
                '%Uint8ClampedArrayPrototype%': [
                    'Uint8ClampedArray',
                    'prototype'
                ],
                '%Uint16ArrayPrototype%': [
                    'Uint16Array',
                    'prototype'
                ],
                '%Uint32ArrayPrototype%': [
                    'Uint32Array',
                    'prototype'
                ],
                '%URIErrorPrototype%': [
                    'URIError',
                    'prototype'
                ],
                '%WeakMapPrototype%': [
                    'WeakMap',
                    'prototype'
                ],
                '%WeakSetPrototype%': [
                    'WeakSet',
                    'prototype'
                ]
            }, bind = functionBind, hasOwn$1 = src, $concat = bind.call(Function.call, Array.prototype.concat), $spliceApply = bind.call(Function.apply, Array.prototype.splice), $replace = bind.call(Function.call, String.prototype.replace), $strSlice = bind.call(Function.call, String.prototype.slice), rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, reEscapeChar = /\\(\\)?/g, stringToPath = function(string) {
                var first = $strSlice(string, 0, 1), last = $strSlice(string, -1);
                if ('%' === first && '%' !== last) throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
                if ('%' === last && '%' !== first) throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
                var result = [];
                return $replace(string, rePropName, function(match, number, quote, subString) {
                    result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
                }), result;
            }, getBaseIntrinsic = function(name, allowMissing) {
                var alias, intrinsicName = name;
                if (hasOwn$1(LEGACY_ALIASES, intrinsicName) && (intrinsicName = '%' + (alias = LEGACY_ALIASES[intrinsicName])[0] + '%'), hasOwn$1(INTRINSICS, intrinsicName)) {
                    var value = INTRINSICS[intrinsicName];
                    if (value === needsEval && (value = doEval(intrinsicName)), void 0 === value && !allowMissing) throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
                    return {
                        alias: alias,
                        name: intrinsicName,
                        value: value
                    };
                }
                throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
            }, getIntrinsic = function(name, allowMissing) {
                if ('string' != typeof name || 0 === name.length) throw new $TypeError('intrinsic name must be a non-empty string');
                if (arguments.length > 1 && 'boolean' != typeof allowMissing) throw new $TypeError('"allowMissing" argument must be a boolean');
                var parts = stringToPath(name), intrinsicBaseName = parts.length > 0 ? parts[0] : '', intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing), intrinsicRealName = intrinsic.name, value = intrinsic.value, skipFurtherCaching = !1, alias = intrinsic.alias;
                alias && (intrinsicBaseName = alias[0], $spliceApply(parts, $concat([
                    0,
                    1
                ], alias)));
                for(var i = 1, isOwn = !0; i < parts.length; i += 1){
                    var part = parts[i], first = $strSlice(part, 0, 1), last = $strSlice(part, -1);
                    if (('"' === first || "'" === first || '`' === first || '"' === last || "'" === last || '`' === last) && first !== last) throw new $SyntaxError('property names with quotes must have matching quotes');
                    if ('constructor' !== part && isOwn || (skipFurtherCaching = !0), intrinsicBaseName += '.' + part, hasOwn$1(INTRINSICS, intrinsicRealName = '%' + intrinsicBaseName + '%')) value = INTRINSICS[intrinsicRealName];
                    else if (null != value) {
                        if (!(part in value)) {
                            if (!allowMissing) throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
                            return;
                        }
                        if ($gOPD$1 && i + 1 >= parts.length) {
                            var desc = $gOPD$1(value, part);
                            value = (isOwn = !!desc) && 'get' in desc && !('originalValue' in desc.get) ? desc.get : value[part];
                        } else isOwn = hasOwn$1(value, part), value = value[part];
                        isOwn && !skipFurtherCaching && (INTRINSICS[intrinsicRealName] = value);
                    }
                }
                return value;
            }, callBind$3 = {
                exports: {}
            };
            !function(module) {
                var bind = functionBind, GetIntrinsic = getIntrinsic, $apply = GetIntrinsic('%Function.prototype.apply%'), $call = GetIntrinsic('%Function.prototype.call%'), $reflectApply = GetIntrinsic('%Reflect.apply%', !0) || bind.call($call, $apply), $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', !0), $defineProperty = GetIntrinsic('%Object.defineProperty%', !0), $max = GetIntrinsic('%Math.max%');
                if ($defineProperty) try {
                    $defineProperty({}, 'a', {
                        value: 1
                    });
                } catch (e) {
                    $defineProperty = null;
                }
                module.exports = function(originalFunction) {
                    var func = $reflectApply(bind, $call, arguments);
                    return $gOPD && $defineProperty && $gOPD(func, 'length').configurable && $defineProperty(func, 'length', {
                        value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
                    }), func;
                };
                var applyBind = function() {
                    return $reflectApply(bind, $apply, arguments);
                };
                $defineProperty ? $defineProperty(module.exports, 'apply', {
                    value: applyBind
                }) : module.exports.apply = applyBind;
            }(callBind$3);
            var GetIntrinsic$1 = getIntrinsic, callBind$2 = callBind$3.exports, $indexOf$1 = callBind$2(GetIntrinsic$1('String.prototype.indexOf')), callBound$3 = function(name, allowMissing) {
                var intrinsic = GetIntrinsic$1(name, !!allowMissing);
                return 'function' == typeof intrinsic && $indexOf$1(name, '.prototype.') > -1 ? callBind$2(intrinsic) : intrinsic;
            }, hasToStringTag$3 = 'function' == typeof Symbol && 'symbol' == typeof Symbol.toStringTag, $toString$2 = callBound$3('Object.prototype.toString'), isStandardArguments = function(value) {
                return (!hasToStringTag$3 || !value || 'object' != typeof value || !(Symbol.toStringTag in value)) && '[object Arguments]' === $toString$2(value);
            }, isLegacyArguments = function(value) {
                return !!isStandardArguments(value) || null !== value && 'object' == typeof value && 'number' == typeof value.length && value.length >= 0 && '[object Array]' !== $toString$2(value) && '[object Function]' === $toString$2(value.callee);
            }, supportsStandardArguments = function() {
                return isStandardArguments(arguments);
            }();
            isStandardArguments.isLegacyArguments = isLegacyArguments;
            var isArguments$1 = supportsStandardArguments ? isStandardArguments : isLegacyArguments, shams = function() {
                return shams$1() && !!Symbol.toStringTag;
            }, toStr$3 = Object.prototype.toString, fnToStr = Function.prototype.toString, isFnRegex = /^\s*(?:function)?\*/, hasToStringTag$2 = shams(), getProto = Object.getPrototypeOf, getGeneratorFunc = function() {
                if (!hasToStringTag$2) return !1;
                try {
                    return Function('return function*() {}')();
                } catch (e) {}
            }, isGeneratorFunction = function(fn) {
                if ('function' != typeof fn) return !1;
                if (isFnRegex.test(fnToStr.call(fn))) return !0;
                if (!hasToStringTag$2) return '[object GeneratorFunction]' === toStr$3.call(fn);
                if (!getProto) return !1;
                if (void 0 === GeneratorFunction) {
                    var generatorFunc = getGeneratorFunc();
                    GeneratorFunction = !!generatorFunc && getProto(generatorFunc);
                }
                return getProto(fn) === GeneratorFunction;
            }, hasOwn = Object.prototype.hasOwnProperty, toString = Object.prototype.toString, foreach = function(obj, fn, ctx) {
                if ('[object Function]' !== toString.call(fn)) throw TypeError('iterator must be a function');
                var l = obj.length;
                if (l === +l) for(var i = 0; i < l; i++)fn.call(ctx, obj[i], i, obj);
                else for(var k in obj)hasOwn.call(obj, k) && fn.call(ctx, obj[k], k, obj);
            }, possibleNames = [
                'BigInt64Array',
                'BigUint64Array',
                'Float32Array',
                'Float64Array',
                'Int16Array',
                'Int32Array',
                'Int8Array',
                'Uint16Array',
                'Uint32Array',
                'Uint8Array',
                'Uint8ClampedArray'
            ], g$2 = 'undefined' == typeof globalThis ? commonjsGlobal : globalThis, availableTypedArrays$2 = function() {
                for(var out = [], i = 0; i < possibleNames.length; i++)'function' == typeof g$2[possibleNames[i]] && (out[out.length] = possibleNames[i]);
                return out;
            }, $gOPD = getIntrinsic('%Object.getOwnPropertyDescriptor%', !0);
            if ($gOPD) try {
                $gOPD([], 'length');
            } catch (e) {
                $gOPD = null;
            }
            var getOwnPropertyDescriptor = $gOPD, forEach$1 = foreach, callBound$1 = callBound$3, $toString$1 = callBound$1('Object.prototype.toString'), hasToStringTag$1 = shams(), g$1 = 'undefined' == typeof globalThis ? commonjsGlobal : globalThis, typedArrays$1 = availableTypedArrays$2(), $indexOf = callBound$1('Array.prototype.indexOf', !0) || function(array, value) {
                for(var i = 0; i < array.length; i += 1)if (array[i] === value) return i;
                return -1;
            }, $slice$1 = callBound$1('String.prototype.slice'), toStrTags$1 = {}, gOPD$1 = getOwnPropertyDescriptor, getPrototypeOf$1 = Object.getPrototypeOf;
            hasToStringTag$1 && gOPD$1 && getPrototypeOf$1 && forEach$1(typedArrays$1, function(typedArray) {
                var arr = new g$1[typedArray]();
                if (Symbol.toStringTag in arr) {
                    var proto = getPrototypeOf$1(arr), descriptor = gOPD$1(proto, Symbol.toStringTag);
                    if (!descriptor) {
                        var superProto = getPrototypeOf$1(proto);
                        descriptor = gOPD$1(superProto, Symbol.toStringTag);
                    }
                    toStrTags$1[typedArray] = descriptor.get;
                }
            });
            var tryTypedArrays$1 = function(value) {
                var anyTrue = !1;
                return forEach$1(toStrTags$1, function(getter, typedArray) {
                    if (!anyTrue) try {
                        anyTrue = getter.call(value) === typedArray;
                    } catch (e) {}
                }), anyTrue;
            }, isTypedArray$1 = function(value) {
                if (!value || 'object' != typeof value) return !1;
                if (!hasToStringTag$1 || !(Symbol.toStringTag in value)) {
                    var tag = $slice$1($toString$1(value), 8, -1);
                    return $indexOf(typedArrays$1, tag) > -1;
                }
                return !!gOPD$1 && tryTypedArrays$1(value);
            }, forEach = foreach, callBound = callBound$3, $toString = callBound('Object.prototype.toString'), hasToStringTag = shams(), g = 'undefined' == typeof globalThis ? commonjsGlobal : globalThis, typedArrays = availableTypedArrays$2(), $slice = callBound('String.prototype.slice'), toStrTags = {}, gOPD = getOwnPropertyDescriptor, getPrototypeOf = Object.getPrototypeOf;
            hasToStringTag && gOPD && getPrototypeOf && forEach(typedArrays, function(typedArray) {
                if ('function' == typeof g[typedArray]) {
                    var arr = new g[typedArray]();
                    if (Symbol.toStringTag in arr) {
                        var proto = getPrototypeOf(arr), descriptor = gOPD(proto, Symbol.toStringTag);
                        if (!descriptor) {
                            var superProto = getPrototypeOf(proto);
                            descriptor = gOPD(superProto, Symbol.toStringTag);
                        }
                        toStrTags[typedArray] = descriptor.get;
                    }
                }
            });
            var tryTypedArrays = function(value) {
                var foundName = !1;
                return forEach(toStrTags, function(getter, typedArray) {
                    if (!foundName) try {
                        var name = getter.call(value);
                        name === typedArray && (foundName = name);
                    } catch (e) {}
                }), foundName;
            }, whichTypedArray = function(value) {
                return !!isTypedArray$1(value) && (hasToStringTag && Symbol.toStringTag in value ? tryTypedArrays(value) : $slice($toString(value), 8, -1));
            };
            !function(exports) {
                var whichTypedArray$1 = whichTypedArray, isTypedArray = isTypedArray$1;
                function uncurryThis(f) {
                    return f.call.bind(f);
                }
                var BigIntSupported = 'undefined' != typeof BigInt, SymbolSupported = 'undefined' != typeof Symbol, ObjectToString = uncurryThis(Object.prototype.toString), numberValue = uncurryThis(Number.prototype.valueOf), stringValue = uncurryThis(String.prototype.valueOf), booleanValue = uncurryThis(Boolean.prototype.valueOf);
                if (BigIntSupported) var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
                if (SymbolSupported) var symbolValue = uncurryThis(Symbol.prototype.valueOf);
                function checkBoxedPrimitive(value, prototypeValueOf) {
                    if ('object' != typeof value) return !1;
                    try {
                        return prototypeValueOf(value), !0;
                    } catch (e) {
                        return !1;
                    }
                }
                function isPromise(input) {
                    return 'undefined' != typeof Promise && input instanceof Promise || null !== input && 'object' == typeof input && 'function' == typeof input.then && 'function' == typeof input.catch;
                }
                function isArrayBufferView(value) {
                    return 'undefined' != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(value) : isTypedArray(value) || isDataView(value);
                }
                function isUint8Array(value) {
                    return 'Uint8Array' === whichTypedArray$1(value);
                }
                function isUint8ClampedArray(value) {
                    return 'Uint8ClampedArray' === whichTypedArray$1(value);
                }
                function isUint16Array(value) {
                    return 'Uint16Array' === whichTypedArray$1(value);
                }
                function isUint32Array(value) {
                    return 'Uint32Array' === whichTypedArray$1(value);
                }
                function isInt8Array(value) {
                    return 'Int8Array' === whichTypedArray$1(value);
                }
                function isInt16Array(value) {
                    return 'Int16Array' === whichTypedArray$1(value);
                }
                function isInt32Array(value) {
                    return 'Int32Array' === whichTypedArray$1(value);
                }
                function isFloat32Array(value) {
                    return 'Float32Array' === whichTypedArray$1(value);
                }
                function isFloat64Array(value) {
                    return 'Float64Array' === whichTypedArray$1(value);
                }
                function isBigInt64Array(value) {
                    return 'BigInt64Array' === whichTypedArray$1(value);
                }
                function isBigUint64Array(value) {
                    return 'BigUint64Array' === whichTypedArray$1(value);
                }
                function isMapToString(value) {
                    return '[object Map]' === ObjectToString(value);
                }
                function isMap(value) {
                    return 'undefined' != typeof Map && (isMapToString.working ? isMapToString(value) : value instanceof Map);
                }
                function isSetToString(value) {
                    return '[object Set]' === ObjectToString(value);
                }
                function isSet(value) {
                    return 'undefined' != typeof Set && (isSetToString.working ? isSetToString(value) : value instanceof Set);
                }
                function isWeakMapToString(value) {
                    return '[object WeakMap]' === ObjectToString(value);
                }
                function isWeakMap(value) {
                    return 'undefined' != typeof WeakMap && (isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap);
                }
                function isWeakSetToString(value) {
                    return '[object WeakSet]' === ObjectToString(value);
                }
                function isWeakSet(value) {
                    return isWeakSetToString(value);
                }
                function isArrayBufferToString(value) {
                    return '[object ArrayBuffer]' === ObjectToString(value);
                }
                function isArrayBuffer(value) {
                    return 'undefined' != typeof ArrayBuffer && (isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer);
                }
                function isDataViewToString(value) {
                    return '[object DataView]' === ObjectToString(value);
                }
                function isDataView(value) {
                    return 'undefined' != typeof DataView && (isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView);
                }
                exports.isArgumentsObject = isArguments$1, exports.isGeneratorFunction = isGeneratorFunction, exports.isTypedArray = isTypedArray, exports.isPromise = isPromise, exports.isArrayBufferView = isArrayBufferView, exports.isUint8Array = isUint8Array, exports.isUint8ClampedArray = isUint8ClampedArray, exports.isUint16Array = isUint16Array, exports.isUint32Array = isUint32Array, exports.isInt8Array = isInt8Array, exports.isInt16Array = isInt16Array, exports.isInt32Array = isInt32Array, exports.isFloat32Array = isFloat32Array, exports.isFloat64Array = isFloat64Array, exports.isBigInt64Array = isBigInt64Array, exports.isBigUint64Array = isBigUint64Array, isMapToString.working = 'undefined' != typeof Map && isMapToString(new Map()), exports.isMap = isMap, isSetToString.working = 'undefined' != typeof Set && isSetToString(new Set()), exports.isSet = isSet, isWeakMapToString.working = 'undefined' != typeof WeakMap && isWeakMapToString(new WeakMap()), exports.isWeakMap = isWeakMap, isWeakSetToString.working = 'undefined' != typeof WeakSet && isWeakSetToString(new WeakSet()), exports.isWeakSet = isWeakSet, isArrayBufferToString.working = 'undefined' != typeof ArrayBuffer && isArrayBufferToString(new ArrayBuffer()), exports.isArrayBuffer = isArrayBuffer, isDataViewToString.working = 'undefined' != typeof ArrayBuffer && 'undefined' != typeof DataView && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1)), exports.isDataView = isDataView;
                var SharedArrayBufferCopy = 'undefined' != typeof SharedArrayBuffer ? SharedArrayBuffer : void 0;
                function isSharedArrayBufferToString(value) {
                    return '[object SharedArrayBuffer]' === ObjectToString(value);
                }
                function isSharedArrayBuffer(value) {
                    return void 0 !== SharedArrayBufferCopy && (void 0 === isSharedArrayBufferToString.working && (isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy())), isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy);
                }
                function isAsyncFunction(value) {
                    return '[object AsyncFunction]' === ObjectToString(value);
                }
                function isMapIterator(value) {
                    return '[object Map Iterator]' === ObjectToString(value);
                }
                function isSetIterator(value) {
                    return '[object Set Iterator]' === ObjectToString(value);
                }
                function isGeneratorObject(value) {
                    return '[object Generator]' === ObjectToString(value);
                }
                function isWebAssemblyCompiledModule(value) {
                    return '[object WebAssembly.Module]' === ObjectToString(value);
                }
                function isNumberObject(value) {
                    return checkBoxedPrimitive(value, numberValue);
                }
                function isStringObject(value) {
                    return checkBoxedPrimitive(value, stringValue);
                }
                function isBooleanObject(value) {
                    return checkBoxedPrimitive(value, booleanValue);
                }
                function isBigIntObject(value) {
                    return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
                }
                function isSymbolObject(value) {
                    return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
                }
                function isBoxedPrimitive(value) {
                    return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
                }
                function isAnyArrayBuffer(value) {
                    return 'undefined' != typeof Uint8Array && (isArrayBuffer(value) || isSharedArrayBuffer(value));
                }
                exports.isSharedArrayBuffer = isSharedArrayBuffer, exports.isAsyncFunction = isAsyncFunction, exports.isMapIterator = isMapIterator, exports.isSetIterator = isSetIterator, exports.isGeneratorObject = isGeneratorObject, exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule, exports.isNumberObject = isNumberObject, exports.isStringObject = isStringObject, exports.isBooleanObject = isBooleanObject, exports.isBigIntObject = isBigIntObject, exports.isSymbolObject = isSymbolObject, exports.isBoxedPrimitive = isBoxedPrimitive, exports.isAnyArrayBuffer = isAnyArrayBuffer, [
                    'isProxy',
                    'isExternal',
                    'isModuleNamespaceObject'
                ].forEach(function(method) {
                    Object.defineProperty(exports, method, {
                        enumerable: !1,
                        value: function() {
                            throw Error(method + ' is not supported in userland');
                        }
                    });
                });
            }(types);
            var isBufferBrowser = function(arg) {
                return arg && 'object' == typeof arg && 'function' == typeof arg.copy && 'function' == typeof arg.fill && 'function' == typeof arg.readUInt8;
            };
            function _typeof$3(obj) {
                return (_typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
                    return typeof obj;
                } : function(obj) {
                    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                })(obj);
            }
            function _classCallCheck$2(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw TypeError("Cannot call a class as a function");
            }
            function _possibleConstructorReturn$1(self1, call) {
                return call && ("object" === _typeof$3(call) || "function" == typeof call) ? call : _assertThisInitialized$1(self1);
            }
            function _assertThisInitialized$1(self1) {
                if (void 0 === self1) throw ReferenceError("this hasn't been initialised - super() hasn't been called");
                return self1;
            }
            function _getPrototypeOf$1(o) {
                return (_getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                })(o);
            }
            function _inherits$1(subClass, superClass) {
                if ("function" != typeof superClass && null !== superClass) throw TypeError("Super expression must either be null or a function");
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: !0,
                        configurable: !0
                    }
                }), superClass && _setPrototypeOf$1(subClass, superClass);
            }
            function _setPrototypeOf$1(o, p) {
                return (_setPrototypeOf$1 = Object.setPrototypeOf || function(o, p) {
                    return o.__proto__ = p, o;
                })(o, p);
            }
            !function(exports) {
                var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function(obj) {
                    for(var keys = Object.keys(obj), descriptors = {}, i = 0; i < keys.length; i++)descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
                    return descriptors;
                }, formatRegExp = /%[sdj%]/g;
                exports.format = function(f) {
                    if (!isString(f)) {
                        for(var objects = [], i = 0; i < arguments.length; i++)objects.push(inspect(arguments[i]));
                        return objects.join(' ');
                    }
                    for(var i = 1, args = arguments, len = args.length, str = String(f).replace(formatRegExp, function(x) {
                        if ('%%' === x) return '%';
                        if (i >= len) return x;
                        switch(x){
                            case '%s':
                                return String(args[i++]);
                            case '%d':
                                return Number(args[i++]);
                            case '%j':
                                try {
                                    return JSON.stringify(args[i++]);
                                } catch (_) {
                                    return '[Circular]';
                                }
                            default:
                                return x;
                        }
                    }), x = args[i]; i < len; x = args[++i])isNull(x) || !isObject(x) ? str += ' ' + x : str += ' ' + inspect(x);
                    return str;
                }, exports.deprecate = function(fn, msg) {
                    if (void 0 !== browser$1$1 && !0 === browser$1$1.noDeprecation) return fn;
                    if (void 0 === browser$1$1) return function() {
                        return exports.deprecate(fn, msg).apply(this, arguments);
                    };
                    var warned = !1;
                    function deprecated() {
                        return warned || (console.error(msg), warned = !0), fn.apply(this, arguments);
                    }
                    return deprecated;
                };
                var debugs = {}, debugEnvRegex = /^$/;
                if (browser$1$1.env.NODE_DEBUG) {
                    var debugEnv = browser$1$1.env.NODE_DEBUG;
                    debugEnvRegex = RegExp('^' + (debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&').replace(/\*/g, '.*').replace(/,/g, '$|^').toUpperCase()) + '$', 'i');
                }
                function inspect(obj, opts) {
                    var ctx = {
                        seen: [],
                        stylize: stylizeNoColor
                    };
                    return arguments.length >= 3 && (ctx.depth = arguments[2]), arguments.length >= 4 && (ctx.colors = arguments[3]), isBoolean(opts) ? ctx.showHidden = opts : opts && exports._extend(ctx, opts), isUndefined(ctx.showHidden) && (ctx.showHidden = !1), isUndefined(ctx.depth) && (ctx.depth = 2), isUndefined(ctx.colors) && (ctx.colors = !1), isUndefined(ctx.customInspect) && (ctx.customInspect = !0), ctx.colors && (ctx.stylize = stylizeWithColor), formatValue(ctx, obj, ctx.depth);
                }
                function stylizeWithColor(str, styleType) {
                    var style = inspect.styles[styleType];
                    return style ? "\x1B[" + inspect.colors[style][0] + 'm' + str + "\x1B[" + inspect.colors[style][1] + 'm' : str;
                }
                function stylizeNoColor(str, styleType) {
                    return str;
                }
                function arrayToHash(array) {
                    var hash = {};
                    return array.forEach(function(val, idx) {
                        hash[val] = !0;
                    }), hash;
                }
                function formatValue(ctx, value, recurseTimes) {
                    if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
                        var output, ret = value.inspect(recurseTimes, ctx);
                        return isString(ret) || (ret = formatValue(ctx, ret, recurseTimes)), ret;
                    }
                    var primitive = formatPrimitive(ctx, value);
                    if (primitive) return primitive;
                    var keys = Object.keys(value), visibleKeys = arrayToHash(keys);
                    if (ctx.showHidden && (keys = Object.getOwnPropertyNames(value)), isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) return formatError(value);
                    if (0 === keys.length) {
                        if (isFunction(value)) {
                            var name = value.name ? ': ' + value.name : '';
                            return ctx.stylize('[Function' + name + ']', 'special');
                        }
                        if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                        if (isDate(value)) return ctx.stylize(Date.prototype.toString.call(value), 'date');
                        if (isError(value)) return formatError(value);
                    }
                    var base = '', array = !1, braces = [
                        '{',
                        '}'
                    ];
                    return (isArray(value) && (array = !0, braces = [
                        '[',
                        ']'
                    ]), isFunction(value) && (base = ' [Function' + (value.name ? ': ' + value.name : '') + ']'), isRegExp(value) && (base = ' ' + RegExp.prototype.toString.call(value)), isDate(value) && (base = ' ' + Date.prototype.toUTCString.call(value)), isError(value) && (base = ' ' + formatError(value)), 0 !== keys.length || array && 0 != value.length) ? recurseTimes < 0 ? isRegExp(value) ? ctx.stylize(RegExp.prototype.toString.call(value), 'regexp') : ctx.stylize('[Object]', 'special') : (ctx.seen.push(value), output = array ? formatArray(ctx, value, recurseTimes, visibleKeys, keys) : keys.map(function(key) {
                        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                    }), ctx.seen.pop(), reduceToSingleString(output, base, braces)) : braces[0] + base + braces[1];
                }
                function formatPrimitive(ctx, value) {
                    if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
                    if (isString(value)) {
                        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
                        return ctx.stylize(simple, 'string');
                    }
                    return isNumber(value) ? ctx.stylize('' + value, 'number') : isBoolean(value) ? ctx.stylize('' + value, 'boolean') : isNull(value) ? ctx.stylize('null', 'null') : void 0;
                }
                function formatError(value) {
                    return '[' + Error.prototype.toString.call(value) + ']';
                }
                function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                    for(var output = [], i = 0, l = value.length; i < l; ++i)hasOwnProperty(value, String(i)) ? output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), !0)) : output.push('');
                    return keys.forEach(function(key) {
                        key.match(/^\d+$/) || output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, !0));
                    }), output;
                }
                function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                    var name, str, desc;
                    if ((desc = Object.getOwnPropertyDescriptor(value, key) || {
                        value: value[key]
                    }).get ? str = desc.set ? ctx.stylize('[Getter/Setter]', 'special') : ctx.stylize('[Getter]', 'special') : desc.set && (str = ctx.stylize('[Setter]', 'special')), hasOwnProperty(visibleKeys, key) || (name = '[' + key + ']'), !str && (0 > ctx.seen.indexOf(desc.value) ? (str = isNull(recurseTimes) ? formatValue(ctx, desc.value, null) : formatValue(ctx, desc.value, recurseTimes - 1)).indexOf('\n') > -1 && (str = array ? str.split('\n').map(function(line) {
                        return '  ' + line;
                    }).join('\n').substr(2) : '\n' + str.split('\n').map(function(line) {
                        return '   ' + line;
                    }).join('\n')) : str = ctx.stylize('[Circular]', 'special')), isUndefined(name)) {
                        if (array && key.match(/^\d+$/)) return str;
                        (name = JSON.stringify('' + key)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (name = name.substr(1, name.length - 2), name = ctx.stylize(name, 'name')) : (name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), name = ctx.stylize(name, 'string'));
                    }
                    return name + ': ' + str;
                }
                function reduceToSingleString(output, base, braces) {
                    return output.reduce(function(prev, cur) {
                        return cur.indexOf('\n'), prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
                    }, 0) > 60 ? braces[0] + ('' === base ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1] : braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
                }
                function isArray(ar) {
                    return Array.isArray(ar);
                }
                function isBoolean(arg) {
                    return 'boolean' == typeof arg;
                }
                function isNull(arg) {
                    return null === arg;
                }
                function isNullOrUndefined(arg) {
                    return null == arg;
                }
                function isNumber(arg) {
                    return 'number' == typeof arg;
                }
                function isString(arg) {
                    return 'string' == typeof arg;
                }
                function isSymbol(arg) {
                    return 'symbol' == typeof arg;
                }
                function isUndefined(arg) {
                    return void 0 === arg;
                }
                function isRegExp(re) {
                    return isObject(re) && '[object RegExp]' === objectToString(re);
                }
                function isObject(arg) {
                    return 'object' == typeof arg && null !== arg;
                }
                function isDate(d) {
                    return isObject(d) && '[object Date]' === objectToString(d);
                }
                function isError(e) {
                    return isObject(e) && ('[object Error]' === objectToString(e) || e instanceof Error);
                }
                function isFunction(arg) {
                    return 'function' == typeof arg;
                }
                function isPrimitive(arg) {
                    return null === arg || 'boolean' == typeof arg || 'number' == typeof arg || 'string' == typeof arg || 'symbol' == typeof arg || void 0 === arg;
                }
                function objectToString(o) {
                    return Object.prototype.toString.call(o);
                }
                function pad(n) {
                    return n < 10 ? '0' + n.toString(10) : n.toString(10);
                }
                exports.debuglog = function(set) {
                    if (!debugs[set = set.toUpperCase()]) {
                        if (debugEnvRegex.test(set)) {
                            var pid = browser$1$1.pid;
                            debugs[set] = function() {
                                var msg = exports.format.apply(exports, arguments);
                                console.error('%s %d: %s', set, pid, msg);
                            };
                        } else debugs[set] = function() {};
                    }
                    return debugs[set];
                }, exports.inspect = inspect, inspect.colors = {
                    bold: [
                        1,
                        22
                    ],
                    italic: [
                        3,
                        23
                    ],
                    underline: [
                        4,
                        24
                    ],
                    inverse: [
                        7,
                        27
                    ],
                    white: [
                        37,
                        39
                    ],
                    grey: [
                        90,
                        39
                    ],
                    black: [
                        30,
                        39
                    ],
                    blue: [
                        34,
                        39
                    ],
                    cyan: [
                        36,
                        39
                    ],
                    green: [
                        32,
                        39
                    ],
                    magenta: [
                        35,
                        39
                    ],
                    red: [
                        31,
                        39
                    ],
                    yellow: [
                        33,
                        39
                    ]
                }, inspect.styles = {
                    special: 'cyan',
                    number: 'yellow',
                    boolean: 'yellow',
                    undefined: 'grey',
                    null: 'bold',
                    string: 'green',
                    date: 'magenta',
                    regexp: 'red'
                }, exports.types = types, exports.isArray = isArray, exports.isBoolean = isBoolean, exports.isNull = isNull, exports.isNullOrUndefined = isNullOrUndefined, exports.isNumber = isNumber, exports.isString = isString, exports.isSymbol = isSymbol, exports.isUndefined = isUndefined, exports.isRegExp = isRegExp, exports.types.isRegExp = isRegExp, exports.isObject = isObject, exports.isDate = isDate, exports.types.isDate = isDate, exports.isError = isError, exports.types.isNativeError = isError, exports.isFunction = isFunction, exports.isPrimitive = isPrimitive, exports.isBuffer = isBufferBrowser;
                var months = [
                    'Jan',
                    'Feb',
                    'Mar',
                    'Apr',
                    'May',
                    'Jun',
                    'Jul',
                    'Aug',
                    'Sep',
                    'Oct',
                    'Nov',
                    'Dec'
                ];
                function timestamp() {
                    var d = new Date(), time = [
                        pad(d.getHours()),
                        pad(d.getMinutes()),
                        pad(d.getSeconds())
                    ].join(':');
                    return [
                        d.getDate(),
                        months[d.getMonth()],
                        time
                    ].join(' ');
                }
                function hasOwnProperty(obj, prop) {
                    return Object.prototype.hasOwnProperty.call(obj, prop);
                }
                exports.log = function() {
                    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
                }, exports.inherits = inherits_browser.exports, exports._extend = function(origin, add) {
                    if (!add || !isObject(add)) return origin;
                    for(var keys = Object.keys(add), i = keys.length; i--;)origin[keys[i]] = add[keys[i]];
                    return origin;
                };
                var kCustomPromisifiedSymbol = 'undefined' != typeof Symbol ? Symbol('util.promisify.custom') : void 0;
                function callbackifyOnRejected(reason, cb) {
                    if (!reason) {
                        var newReason = Error('Promise was rejected with a falsy value');
                        newReason.reason = reason, reason = newReason;
                    }
                    return cb(reason);
                }
                function callbackify(original) {
                    if ('function' != typeof original) throw TypeError('The "original" argument must be of type Function');
                    function callbackified() {
                        for(var args = [], i = 0; i < arguments.length; i++)args.push(arguments[i]);
                        var maybeCb = args.pop();
                        if ('function' != typeof maybeCb) throw TypeError('The last argument must be of type Function');
                        var self1 = this, cb = function() {
                            return maybeCb.apply(self1, arguments);
                        };
                        original.apply(this, args).then(function(ret) {
                            browser$1$1.nextTick(cb.bind(null, null, ret));
                        }, function(rej) {
                            browser$1$1.nextTick(callbackifyOnRejected.bind(null, rej, cb));
                        });
                    }
                    return Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original)), Object.defineProperties(callbackified, getOwnPropertyDescriptors(original)), callbackified;
                }
                exports.promisify = function(original) {
                    if ('function' != typeof original) throw TypeError('The "original" argument must be of type Function');
                    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
                        var fn = original[kCustomPromisifiedSymbol];
                        if ('function' != typeof fn) throw TypeError('The "util.promisify.custom" argument must be of type Function');
                        return Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                            value: fn,
                            enumerable: !1,
                            writable: !1,
                            configurable: !0
                        }), fn;
                    }
                    function fn() {
                        for(var promiseResolve, promiseReject, promise = new Promise(function(resolve, reject) {
                            promiseResolve = resolve, promiseReject = reject;
                        }), args = [], i = 0; i < arguments.length; i++)args.push(arguments[i]);
                        args.push(function(err, value) {
                            err ? promiseReject(err) : promiseResolve(value);
                        });
                        try {
                            original.apply(this, args);
                        } catch (err) {
                            promiseReject(err);
                        }
                        return promise;
                    }
                    return Object.setPrototypeOf(fn, Object.getPrototypeOf(original)), kCustomPromisifiedSymbol && Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                        value: fn,
                        enumerable: !1,
                        writable: !1,
                        configurable: !0
                    }), Object.defineProperties(fn, getOwnPropertyDescriptors(original));
                }, exports.promisify.custom = kCustomPromisifiedSymbol, exports.callbackify = callbackify;
            }(util$1);
            var codes = {};
            function createErrorType(code, message, Base) {
                function getMessage(arg1, arg2, arg3) {
                    return 'string' == typeof message ? message : message(arg1, arg2, arg3);
                }
                Base || (Base = Error);
                var NodeError = function(_Base) {
                    function NodeError(arg1, arg2, arg3) {
                        var _this;
                        return _classCallCheck$2(this, NodeError), (_this = _possibleConstructorReturn$1(this, _getPrototypeOf$1(NodeError).call(this, getMessage(arg1, arg2, arg3)))).code = code, _this;
                    }
                    return _inherits$1(NodeError, _Base), NodeError;
                }(Base);
                codes[code] = NodeError;
            }
            function oneOf(expected, thing) {
                if (!Array.isArray(expected)) return "of ".concat(thing, " ").concat(String(expected));
                var len = expected.length;
                return (expected = expected.map(function(i) {
                    return String(i);
                }), len > 2) ? "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1] : 2 === len ? "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]) : "of ".concat(thing, " ").concat(expected[0]);
            }
            function startsWith(str, search, pos) {
                return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
            }
            function endsWith$1(str, search, this_len) {
                return (void 0 === this_len || this_len > str.length) && (this_len = str.length), str.substring(this_len - search.length, this_len) === search;
            }
            function includes(str, search, start) {
                return 'number' != typeof start && (start = 0), !(start + search.length > str.length) && -1 !== str.indexOf(search, start);
            }
            function _objectSpread(target) {
                for(var i = 1; i < arguments.length; i++){
                    var source = null != arguments[i] ? arguments[i] : {}, ownKeys = Object.keys(source);
                    'function' == typeof Object.getOwnPropertySymbols && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                    }))), ownKeys.forEach(function(key) {
                        _defineProperty(target, key, source[key]);
                    });
                }
                return target;
            }
            function _defineProperty(obj, key, value) {
                return key in obj ? Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : obj[key] = value, obj;
            }
            function _classCallCheck$1(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw TypeError("Cannot call a class as a function");
            }
            function _defineProperties$1(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function _createClass$1(Constructor, protoProps, staticProps) {
                return protoProps && _defineProperties$1(Constructor.prototype, protoProps), staticProps && _defineProperties$1(Constructor, staticProps), Constructor;
            }
            function _possibleConstructorReturn(self1, call) {
                return call && ("object" === _typeof$2(call) || "function" == typeof call) ? call : _assertThisInitialized(self1);
            }
            function _assertThisInitialized(self1) {
                if (void 0 === self1) throw ReferenceError("this hasn't been initialised - super() hasn't been called");
                return self1;
            }
            function _inherits(subClass, superClass) {
                if ("function" != typeof superClass && null !== superClass) throw TypeError("Super expression must either be null or a function");
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        writable: !0,
                        configurable: !0
                    }
                }), superClass && _setPrototypeOf(subClass, superClass);
            }
            function _wrapNativeSuper(Class) {
                var _cache = "function" == typeof Map ? new Map() : void 0;
                return (_wrapNativeSuper = function(Class) {
                    if (null === Class || !_isNativeFunction(Class)) return Class;
                    if ("function" != typeof Class) throw TypeError("Super expression must either be null or a function");
                    if (void 0 !== _cache) {
                        if (_cache.has(Class)) return _cache.get(Class);
                        _cache.set(Class, Wrapper);
                    }
                    function Wrapper() {
                        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
                    }
                    return Wrapper.prototype = Object.create(Class.prototype, {
                        constructor: {
                            value: Wrapper,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    }), _setPrototypeOf(Wrapper, Class);
                })(Class);
            }
            function isNativeReflectConstruct() {
                if ("undefined" == typeof Reflect || !Reflect.construct || Reflect.construct.sham) return !1;
                if ("function" == typeof Proxy) return !0;
                try {
                    return Date.prototype.toString.call(Reflect.construct(Date, [], function() {})), !0;
                } catch (e) {
                    return !1;
                }
            }
            function _construct(Parent, args, Class) {
                return (_construct = isNativeReflectConstruct() ? Reflect.construct : function(Parent, args, Class) {
                    var a = [
                        null
                    ];
                    a.push.apply(a, args);
                    var instance = new (Function.bind.apply(Parent, a))();
                    return Class && _setPrototypeOf(instance, Class.prototype), instance;
                }).apply(null, arguments);
            }
            function _isNativeFunction(fn) {
                return -1 !== Function.toString.call(fn).indexOf("[native code]");
            }
            function _setPrototypeOf(o, p) {
                return (_setPrototypeOf = Object.setPrototypeOf || function(o, p) {
                    return o.__proto__ = p, o;
                })(o, p);
            }
            function _getPrototypeOf(o) {
                return (_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(o) {
                    return o.__proto__ || Object.getPrototypeOf(o);
                })(o);
            }
            function _typeof$2(obj) {
                return (_typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
                    return typeof obj;
                } : function(obj) {
                    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                })(obj);
            }
            createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError), createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
                if (void 0 === assert$1 && (assert$1 = assert$2.exports), assert$1('string' == typeof name, "'name' must be a string"), 'string' == typeof expected && startsWith(expected, 'not ') ? (determiner = 'must not be', expected = expected.replace(/^not /, '')) : determiner = 'must be', endsWith$1(name, ' argument')) msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
                else {
                    var determiner, msg, type = includes(name, '.') ? 'property' : 'argument';
                    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
                }
                return msg + ". Received type ".concat(_typeof$3(actual));
            }, TypeError), createErrorType('ERR_INVALID_ARG_VALUE', function(name, value) {
                var reason = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 'is invalid';
                void 0 === util && (util = util$1);
                var inspected = util.inspect(value);
                return inspected.length > 128 && (inspected = "".concat(inspected.slice(0, 128), "...")), "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
            }, TypeError), createErrorType('ERR_INVALID_RETURN_VALUE', function(input, name, value) {
                var type;
                return type = value && value.constructor && value.constructor.name ? "instance of ".concat(value.constructor.name) : "type ".concat(_typeof$3(value)), "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
            }, TypeError), createErrorType('ERR_MISSING_ARGS', function() {
                for(var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                void 0 === assert$1 && (assert$1 = assert$2.exports), assert$1(args.length > 0, 'At least one arg needs to be specified');
                var msg = 'The ', len = args.length;
                switch(args = args.map(function(a) {
                    return "\"".concat(a, "\"");
                }), len){
                    case 1:
                        msg += "".concat(args[0], " argument");
                        break;
                    case 2:
                        msg += "".concat(args[0], " and ").concat(args[1], " arguments");
                        break;
                    default:
                        msg += args.slice(0, len - 1).join(', '), msg += ", and ".concat(args[len - 1], " arguments");
                }
                return "".concat(msg, " must be specified");
            }, TypeError), errors.codes = codes;
            var inspect$1 = util$1.inspect, ERR_INVALID_ARG_TYPE$1 = errors.codes.ERR_INVALID_ARG_TYPE;
            function endsWith(str, search, this_len) {
                return (void 0 === this_len || this_len > str.length) && (this_len = str.length), str.substring(this_len - search.length, this_len) === search;
            }
            function repeat(str, count) {
                if (count = Math.floor(count), 0 == str.length || 0 == count) return '';
                var maxCount = str.length * count;
                for(count = Math.floor(Math.log(count) / Math.log(2)); count;)str += str, count--;
                return str + str.substring(0, maxCount - str.length);
            }
            var blue = '', green = '', red = '', white = '', kReadableOperator = {
                deepStrictEqual: 'Expected values to be strictly deep-equal:',
                strictEqual: 'Expected values to be strictly equal:',
                strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
                deepEqual: 'Expected values to be loosely deep-equal:',
                equal: 'Expected values to be loosely equal:',
                notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
                notStrictEqual: 'Expected "actual" to be strictly unequal to:',
                notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
                notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
                notEqual: 'Expected "actual" to be loosely unequal to:',
                notIdentical: 'Values identical but not reference-equal:'
            };
            function copyError(source) {
                var keys = Object.keys(source), target = Object.create(Object.getPrototypeOf(source));
                return keys.forEach(function(key) {
                    target[key] = source[key];
                }), Object.defineProperty(target, 'message', {
                    value: source.message
                }), target;
            }
            function inspectValue(val) {
                return inspect$1(val, {
                    compact: !1,
                    customInspect: !1,
                    depth: 1000,
                    maxArrayLength: 1 / 0,
                    showHidden: !1,
                    breakLength: 1 / 0,
                    showProxy: !1,
                    sorted: !0,
                    getters: !0
                });
            }
            function createErrDiff(actual, expected, operator) {
                var other = '', res = '', lastPos = 0, end = '', skipped = !1, actualInspected = inspectValue(actual), actualLines = actualInspected.split('\n'), expectedLines = inspectValue(expected).split('\n'), i = 0, indicator = '';
                if ('strictEqual' === operator && 'object' === _typeof$2(actual) && 'object' === _typeof$2(expected) && null !== actual && null !== expected && (operator = 'strictEqualObject'), 1 === actualLines.length && 1 === expectedLines.length && actualLines[0] !== expectedLines[0]) {
                    var inputLength = actualLines[0].length + expectedLines[0].length;
                    if (inputLength <= 10) {
                        if (('object' !== _typeof$2(actual) || null === actual) && ('object' !== _typeof$2(expected) || null === expected) && (0 !== actual || 0 !== expected)) return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
                    } else if ('strictEqualObject' !== operator && inputLength < 80) {
                        for(; actualLines[0][i] === expectedLines[0][i];)i++;
                        i > 2 && (indicator = "\n  ".concat(repeat(' ', i), "^"), i = 0);
                    }
                }
                for(var a = actualLines[actualLines.length - 1], b = expectedLines[expectedLines.length - 1]; a === b && (i++ < 2 ? end = "\n  ".concat(a).concat(end) : other = a, actualLines.pop(), expectedLines.pop(), 0 !== actualLines.length && 0 !== expectedLines.length);)a = actualLines[actualLines.length - 1], b = expectedLines[expectedLines.length - 1];
                var maxLines = Math.max(actualLines.length, expectedLines.length);
                if (0 === maxLines) {
                    var _actualLines = actualInspected.split('\n');
                    if (_actualLines.length > 30) for(_actualLines[26] = "".concat(blue, "...").concat(white); _actualLines.length > 27;)_actualLines.pop();
                    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
                }
                i > 3 && (end = "\n".concat(blue, "...").concat(white).concat(end), skipped = !0), '' !== other && (end = "\n  ".concat(other).concat(end), other = '');
                var printedLines = 0, msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white), skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
                for(i = 0; i < maxLines; i++){
                    var cur = i - lastPos;
                    if (actualLines.length < i + 1) cur > 1 && i > 2 && (cur > 4 ? (res += "\n".concat(blue, "...").concat(white), skipped = !0) : cur > 3 && (res += "\n  ".concat(expectedLines[i - 2]), printedLines++), res += "\n  ".concat(expectedLines[i - 1]), printedLines++), lastPos = i, other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]), printedLines++;
                    else if (expectedLines.length < i + 1) cur > 1 && i > 2 && (cur > 4 ? (res += "\n".concat(blue, "...").concat(white), skipped = !0) : cur > 3 && (res += "\n  ".concat(actualLines[i - 2]), printedLines++), res += "\n  ".concat(actualLines[i - 1]), printedLines++), lastPos = i, res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]), printedLines++;
                    else {
                        var expectedLine = expectedLines[i], actualLine = actualLines[i], divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine);
                        divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine && (divergingLines = !1, actualLine += ','), divergingLines ? (cur > 1 && i > 2 && (cur > 4 ? (res += "\n".concat(blue, "...").concat(white), skipped = !0) : cur > 3 && (res += "\n  ".concat(actualLines[i - 2]), printedLines++), res += "\n  ".concat(actualLines[i - 1]), printedLines++), lastPos = i, res += "\n".concat(green, "+").concat(white, " ").concat(actualLine), other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine), printedLines += 2) : (res += other, other = '', (1 === cur || 0 === i) && (res += "\n  ".concat(actualLine), printedLines++));
                    }
                    if (printedLines > 20 && i < maxLines - 2) return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
                }
                return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
            }
            var AssertionError$1 = function(_Error) {
                function AssertionError(options) {
                    if (_classCallCheck$1(this, AssertionError), 'object' !== _typeof$2(options) || null === options) throw new ERR_INVALID_ARG_TYPE$1('options', 'Object', options);
                    var _this, message = options.message, operator = options.operator, stackStartFn = options.stackStartFn, actual = options.actual, expected = options.expected, limit = Error.stackTraceLimit;
                    if (Error.stackTraceLimit = 0, null != message) _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
                    else if ('object' === _typeof$2(actual) && null !== actual && 'object' === _typeof$2(expected) && null !== expected && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error && (actual = copyError(actual), expected = copyError(expected)), 'deepStrictEqual' === operator || 'strictEqual' === operator) _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
                    else if ('notDeepStrictEqual' === operator || 'notStrictEqual' === operator) {
                        var base = kReadableOperator[operator], res = inspectValue(actual).split('\n');
                        if ('notStrictEqual' === operator && 'object' === _typeof$2(actual) && null !== actual && (base = kReadableOperator.notStrictEqualObject), res.length > 30) for(res[26] = "".concat(blue, "...").concat(white); res.length > 27;)res.pop();
                        _this = 1 === res.length ? _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0]))) : _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
                    } else {
                        var _res = inspectValue(actual), other = '', knownOperators = kReadableOperator[operator];
                        'notDeepEqual' === operator || 'notEqual' === operator ? (_res = "".concat(kReadableOperator[operator], "\n\n").concat(_res)).length > 1024 && (_res = "".concat(_res.slice(0, 1021), "...")) : (other = "".concat(inspectValue(expected)), _res.length > 512 && (_res = "".concat(_res.slice(0, 509), "...")), other.length > 512 && (other = "".concat(other.slice(0, 509), "...")), 'deepEqual' === operator || 'equal' === operator ? _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n") : other = " ".concat(operator, " ").concat(other)), _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
                    }
                    return Error.stackTraceLimit = limit, _this.generatedMessage = !message, Object.defineProperty(_assertThisInitialized(_this), 'name', {
                        value: 'AssertionError [ERR_ASSERTION]',
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }), _this.code = 'ERR_ASSERTION', _this.actual = actual, _this.expected = expected, _this.operator = operator, Error.captureStackTrace && Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn), _this.stack, _this.name = 'AssertionError', _possibleConstructorReturn(_this);
                }
                return _inherits(AssertionError, _Error), _createClass$1(AssertionError, [
                    {
                        key: "toString",
                        value: function() {
                            return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
                        }
                    },
                    {
                        key: inspect$1.custom,
                        value: function(recurseTimes, ctx) {
                            return inspect$1(this, _objectSpread({}, ctx, {
                                customInspect: !1,
                                depth: 0
                            }));
                        }
                    }
                ]), AssertionError;
            }(_wrapNativeSuper(Error));
            function assign(target, firstSource) {
                if (null == target) throw TypeError('Cannot convert first argument to object');
                for(var to = Object(target), i = 1; i < arguments.length; i++){
                    var nextSource = arguments[i];
                    if (null != nextSource) for(var keysArray = Object.keys(Object(nextSource)), nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++){
                        var nextKey = keysArray[nextIndex], desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                        void 0 !== desc && desc.enumerable && (to[nextKey] = nextSource[nextKey]);
                    }
                }
                return to;
            }
            var toStr$2 = Object.prototype.toString, isArguments = function(value) {
                var str = toStr$2.call(value), isArgs = '[object Arguments]' === str;
                return isArgs || (isArgs = '[object Array]' !== str && null !== value && 'object' == typeof value && 'number' == typeof value.length && value.length >= 0 && '[object Function]' === toStr$2.call(value.callee)), isArgs;
            };
            if (!Object.keys) {
                var has = Object.prototype.hasOwnProperty, toStr$1 = Object.prototype.toString, isEnumerable = Object.prototype.propertyIsEnumerable, hasDontEnumBug = !isEnumerable.call({
                    toString: null
                }, 'toString'), hasProtoEnumBug = isEnumerable.call(function() {}, 'prototype'), dontEnums = [
                    'toString',
                    'toLocaleString',
                    'valueOf',
                    'hasOwnProperty',
                    'isPrototypeOf',
                    'propertyIsEnumerable',
                    'constructor'
                ], equalsConstructorPrototype = function(o) {
                    var ctor = o.constructor;
                    return ctor && ctor.prototype === o;
                }, excludedKeys = {
                    $applicationCache: !0,
                    $console: !0,
                    $external: !0,
                    $frame: !0,
                    $frameElement: !0,
                    $frames: !0,
                    $innerHeight: !0,
                    $innerWidth: !0,
                    $onmozfullscreenchange: !0,
                    $onmozfullscreenerror: !0,
                    $outerHeight: !0,
                    $outerWidth: !0,
                    $pageXOffset: !0,
                    $pageYOffset: !0,
                    $parent: !0,
                    $scrollLeft: !0,
                    $scrollTop: !0,
                    $scrollX: !0,
                    $scrollY: !0,
                    $self: !0,
                    $webkitIndexedDB: !0,
                    $webkitStorageInfo: !0,
                    $window: !0
                }, hasAutomationEqualityBug = function() {
                    if ('undefined' == typeof window) return !1;
                    for(var k in window)try {
                        if (!excludedKeys['$' + k] && has.call(window, k) && null !== window[k] && 'object' == typeof window[k]) try {
                            equalsConstructorPrototype(window[k]);
                        } catch (e) {
                            return !0;
                        }
                    } catch (e1) {
                        return !0;
                    }
                    return !1;
                }(), equalsConstructorPrototypeIfNotBuggy = function(o) {
                    if ('undefined' == typeof window || !hasAutomationEqualityBug) return equalsConstructorPrototype(o);
                    try {
                        return equalsConstructorPrototype(o);
                    } catch (e) {
                        return !1;
                    }
                };
                keysShim$1 = function(object) {
                    var isObject = null !== object && 'object' == typeof object, isFunction = '[object Function]' === toStr$1.call(object), isArguments1 = isArguments(object), isString = isObject && '[object String]' === toStr$1.call(object), theKeys = [];
                    if (!isObject && !isFunction && !isArguments1) throw TypeError('Object.keys called on a non-object');
                    var skipProto = hasProtoEnumBug && isFunction;
                    if (isString && object.length > 0 && !has.call(object, 0)) for(var i = 0; i < object.length; ++i)theKeys.push(String(i));
                    if (isArguments1 && object.length > 0) for(var j = 0; j < object.length; ++j)theKeys.push(String(j));
                    else for(var name in object)!(skipProto && 'prototype' === name) && has.call(object, name) && theKeys.push(String(name));
                    if (hasDontEnumBug) for(var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object), k = 0; k < dontEnums.length; ++k)!(skipConstructor && 'constructor' === dontEnums[k]) && has.call(object, dontEnums[k]) && theKeys.push(dontEnums[k]);
                    return theKeys;
                };
            }
            var implementation$6 = keysShim$1, slice = Array.prototype.slice, origKeys = Object.keys, keysShim = origKeys ? function(o) {
                return origKeys(o);
            } : implementation$6, originalKeys = Object.keys;
            keysShim.shim = function() {
                return Object.keys ? !function() {
                    var args = Object.keys(arguments);
                    return args && args.length === arguments.length;
                }(1, 2) && (Object.keys = function(object) {
                    return isArguments(object) ? originalKeys(slice.call(object)) : originalKeys(object);
                }) : Object.keys = keysShim, Object.keys || keysShim;
            };
            var hasSymbols = 'function' == typeof Symbol && 'symbol' == typeof Symbol('foo'), toStr = Object.prototype.toString, concat = Array.prototype.concat, origDefineProperty = Object.defineProperty, supportsDescriptors = origDefineProperty && function() {
                var obj = {};
                try {
                    for(var _ in origDefineProperty(obj, 'x', {
                        enumerable: !1,
                        value: obj
                    }), obj)return !1;
                    return obj.x === obj;
                } catch (e) {
                    return !1;
                }
            }(), defineProperty = function(object, name, value, predicate) {
                (!(name in object) || function(fn) {
                    return 'function' == typeof fn && '[object Function]' === toStr.call(fn);
                }(predicate) && predicate()) && (supportsDescriptors ? origDefineProperty(object, name, {
                    configurable: !0,
                    enumerable: !1,
                    value: value,
                    writable: !0
                }) : object[name] = value);
            }, defineProperties = function(object, map) {
                var predicates = arguments.length > 2 ? arguments[2] : {}, props = keysShim(map);
                hasSymbols && (props = concat.call(props, Object.getOwnPropertySymbols(map)));
                for(var i = 0; i < props.length; i += 1)defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
            };
            defineProperties.supportsDescriptors = !!supportsDescriptors;
            var defineProperties_1 = defineProperties, numberIsNaN$1 = function(value) {
                return value != value;
            }, implementation$5 = function(a, b) {
                return 0 === a && 0 === b ? 1 / a == 1 / b : !!(a === b || numberIsNaN$1(a) && numberIsNaN$1(b));
            }, polyfill$3 = function() {
                return 'function' == typeof Object.is ? Object.is : implementation$5;
            }, shim$3 = function() {
                var polyfill = polyfill$3();
                return defineProperties_1(Object, {
                    is: polyfill
                }, {
                    is: function() {
                        return Object.is !== polyfill;
                    }
                }), polyfill;
            }, callBind$1 = callBind$3.exports, getPolyfill$2 = polyfill$3, polyfill$2 = callBind$1(getPolyfill$2(), Object);
            defineProperties_1(polyfill$2, {
                getPolyfill: getPolyfill$2,
                implementation: implementation$5,
                shim: shim$3
            });
            var objectIs$2 = polyfill$2, implementation$2 = function(value) {
                return value != value;
            }, polyfill$1 = function() {
                return Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a') ? Number.isNaN : implementation$2;
            }, shim$1 = function() {
                var polyfill = polyfill$1();
                return defineProperties_1(Number, {
                    isNaN: polyfill
                }, {
                    isNaN: function() {
                        return Number.isNaN !== polyfill;
                    }
                }), polyfill;
            }, callBind = callBind$3.exports, getPolyfill = polyfill$1, polyfill = callBind(getPolyfill(), Number);
            function _slicedToArray(arr, i) {
                return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
            }
            function _nonIterableRest() {
                throw TypeError("Invalid attempt to destructure non-iterable instance");
            }
            function _iterableToArrayLimit(arr, i) {
                var _arr = [], _n = !0, _d = !1, _e = void 0;
                try {
                    for(var _s, _i = arr[Symbol.iterator](); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !i || _arr.length !== i); _n = !0);
                } catch (err) {
                    _d = !0, _e = err;
                } finally{
                    try {
                        _n || null == _i.return || _i.return();
                    } finally{
                        if (_d) throw _e;
                    }
                }
                return _arr;
            }
            function _arrayWithHoles(arr) {
                if (Array.isArray(arr)) return arr;
            }
            function _typeof$1(obj) {
                return (_typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
                    return typeof obj;
                } : function(obj) {
                    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                })(obj);
            }
            defineProperties_1(polyfill, {
                getPolyfill: getPolyfill,
                implementation: implementation$2,
                shim: shim$1
            });
            var regexFlagsSupported = void 0 !== /a/g.flags, arrayFromSet = function(set) {
                var array = [];
                return set.forEach(function(value) {
                    return array.push(value);
                }), array;
            }, arrayFromMap = function(map) {
                var array = [];
                return map.forEach(function(value, key) {
                    return array.push([
                        key,
                        value
                    ]);
                }), array;
            }, objectIs$1 = Object.is ? Object.is : objectIs$2, objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
                return [];
            }, numberIsNaN = Number.isNaN ? Number.isNaN : polyfill;
            function uncurryThis(f) {
                return f.call.bind(f);
            }
            var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty), propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable), objectToString = uncurryThis(Object.prototype.toString), _require$types$1 = util$1.types, isAnyArrayBuffer = _require$types$1.isAnyArrayBuffer, isArrayBufferView = _require$types$1.isArrayBufferView, isDate = _require$types$1.isDate, isMap = _require$types$1.isMap, isRegExp$1 = _require$types$1.isRegExp, isSet = _require$types$1.isSet, isNativeError = _require$types$1.isNativeError, isBoxedPrimitive = _require$types$1.isBoxedPrimitive, isNumberObject = _require$types$1.isNumberObject, isStringObject = _require$types$1.isStringObject, isBooleanObject = _require$types$1.isBooleanObject, isBigIntObject = _require$types$1.isBigIntObject, isSymbolObject = _require$types$1.isSymbolObject, isFloat32Array = _require$types$1.isFloat32Array, isFloat64Array = _require$types$1.isFloat64Array;
            function isNonIndex(key) {
                if (0 === key.length || key.length > 10) return !0;
                for(var i = 0; i < key.length; i++){
                    var code = key.charCodeAt(i);
                    if (code < 48 || code > 57) return !0;
                }
                return 10 === key.length && key >= 4294967296;
            }
            function getOwnNonIndexProperties(value) {
                return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
            }
            function compare(a, b) {
                if (a === b) return 0;
                for(var x = a.length, y = b.length, i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
                    x = a[i], y = b[i];
                    break;
                }
                return x < y ? -1 : y < x ? 1 : 0;
            }
            var kNoIterator = 0, kIsArray = 1, kIsSet = 2, kIsMap = 3;
            function areSimilarRegExps(a, b) {
                return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
            }
            function areSimilarFloatArrays(a, b) {
                if (a.byteLength !== b.byteLength) return !1;
                for(var offset = 0; offset < a.byteLength; offset++)if (a[offset] !== b[offset]) return !1;
                return !0;
            }
            function areSimilarTypedArrays(a, b) {
                return a.byteLength === b.byteLength && 0 === compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength));
            }
            function areEqualArrayBuffers(buf1, buf2) {
                return buf1.byteLength === buf2.byteLength && 0 === compare(new Uint8Array(buf1), new Uint8Array(buf2));
            }
            function isEqualBoxedPrimitive(val1, val2) {
                return isNumberObject(val1) ? isNumberObject(val2) && objectIs$1(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2)) : isStringObject(val1) ? isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2) : isBooleanObject(val1) ? isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2) : isBigIntObject(val1) ? isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2) : isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
            }
            function innerDeepEqual(val1, val2, strict, memos) {
                if (val1 === val2) return 0 !== val1 || !strict || objectIs$1(val1, val2);
                if (strict) {
                    if ('object' !== _typeof$1(val1)) return 'number' == typeof val1 && numberIsNaN(val1) && numberIsNaN(val2);
                    if ('object' !== _typeof$1(val2) || null === val1 || null === val2 || Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) return !1;
                } else {
                    if (null === val1 || 'object' !== _typeof$1(val1)) return (null === val2 || 'object' !== _typeof$1(val2)) && val1 == val2;
                    if (null === val2 || 'object' !== _typeof$1(val2)) return !1;
                }
                var val1Tag = objectToString(val1), val2Tag = objectToString(val2);
                if (val1Tag !== val2Tag) return !1;
                if (Array.isArray(val1)) {
                    if (val1.length !== val2.length) return !1;
                    var keys1 = getOwnNonIndexProperties(val1), keys2 = getOwnNonIndexProperties(val2);
                    return keys1.length === keys2.length && keyCheck(val1, val2, strict, memos, kIsArray, keys1);
                }
                if ('[object Object]' === val1Tag && (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2))) return !1;
                if (isDate(val1)) {
                    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) return !1;
                } else if (isRegExp$1(val1)) {
                    if (!isRegExp$1(val2) || !areSimilarRegExps(val1, val2)) return !1;
                } else if (isNativeError(val1) || val1 instanceof Error) {
                    if (val1.message !== val2.message || val1.name !== val2.name) return !1;
                } else if (isArrayBufferView(val1)) {
                    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
                        if (!areSimilarFloatArrays(val1, val2)) return !1;
                    } else if (!areSimilarTypedArrays(val1, val2)) return !1;
                    var _keys = getOwnNonIndexProperties(val1), _keys2 = getOwnNonIndexProperties(val2);
                    return _keys.length === _keys2.length && keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
                } else if (isSet(val1)) return !!isSet(val2) && val1.size === val2.size && keyCheck(val1, val2, strict, memos, kIsSet);
                else if (isMap(val1)) return !!isMap(val2) && val1.size === val2.size && keyCheck(val1, val2, strict, memos, kIsMap);
                else if (isAnyArrayBuffer(val1)) {
                    if (!areEqualArrayBuffers(val1, val2)) return !1;
                } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) return !1;
                return keyCheck(val1, val2, strict, memos, kNoIterator);
            }
            function getEnumerables(val, keys) {
                return keys.filter(function(k) {
                    return propertyIsEnumerable(val, k);
                });
            }
            function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
                if (5 === arguments.length) {
                    aKeys = Object.keys(val1);
                    var bKeys = Object.keys(val2);
                    if (aKeys.length !== bKeys.length) return !1;
                }
                for(var i = 0; i < aKeys.length; i++)if (!hasOwnProperty(val2, aKeys[i])) return !1;
                if (strict && 5 === arguments.length) {
                    var symbolKeysA = objectGetOwnPropertySymbols(val1);
                    if (0 !== symbolKeysA.length) {
                        var count = 0;
                        for(i = 0; i < symbolKeysA.length; i++){
                            var key = symbolKeysA[i];
                            if (propertyIsEnumerable(val1, key)) {
                                if (!propertyIsEnumerable(val2, key)) return !1;
                                aKeys.push(key), count++;
                            } else if (propertyIsEnumerable(val2, key)) return !1;
                        }
                        var symbolKeysB = objectGetOwnPropertySymbols(val2);
                        if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) return !1;
                    } else {
                        var _symbolKeysB = objectGetOwnPropertySymbols(val2);
                        if (0 !== _symbolKeysB.length && 0 !== getEnumerables(val2, _symbolKeysB).length) return !1;
                    }
                }
                if (0 === aKeys.length && (iterationType === kNoIterator || iterationType === kIsArray && 0 === val1.length || 0 === val1.size)) return !0;
                if (void 0 === memos) memos = {
                    val1: new Map(),
                    val2: new Map(),
                    position: 0
                };
                else {
                    var val2MemoA = memos.val1.get(val1);
                    if (void 0 !== val2MemoA) {
                        var val2MemoB = memos.val2.get(val2);
                        if (void 0 !== val2MemoB) return val2MemoA === val2MemoB;
                    }
                    memos.position++;
                }
                memos.val1.set(val1, memos.position), memos.val2.set(val2, memos.position);
                var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
                return memos.val1.delete(val1), memos.val2.delete(val2), areEq;
            }
            function setHasEqualElement(set, val1, strict, memo) {
                for(var setValues = arrayFromSet(set), i = 0; i < setValues.length; i++){
                    var val2 = setValues[i];
                    if (innerDeepEqual(val1, val2, strict, memo)) return set.delete(val2), !0;
                }
                return !1;
            }
            function findLooseMatchingPrimitives(prim) {
                switch(_typeof$1(prim)){
                    case 'undefined':
                        return null;
                    case 'object':
                        return;
                    case 'symbol':
                        return !1;
                    case 'string':
                        prim = +prim;
                    case 'number':
                        if (numberIsNaN(prim)) return !1;
                }
                return !0;
            }
            function setMightHaveLoosePrim(a, b, prim) {
                var altValue = findLooseMatchingPrimitives(prim);
                return null != altValue ? altValue : b.has(altValue) && !a.has(altValue);
            }
            function mapMightHaveLoosePrim(a, b, prim, item, memo) {
                var altValue = findLooseMatchingPrimitives(prim);
                if (null != altValue) return altValue;
                var curB = b.get(altValue);
                return !!((void 0 !== curB || b.has(altValue)) && innerDeepEqual(item, curB, !1, memo)) && !a.has(altValue) && innerDeepEqual(item, curB, !1, memo);
            }
            function setEquiv(a, b, strict, memo) {
                for(var set = null, aValues = arrayFromSet(a), i = 0; i < aValues.length; i++){
                    var val = aValues[i];
                    if ('object' === _typeof$1(val) && null !== val) null === set && (set = new Set()), set.add(val);
                    else if (!b.has(val)) {
                        if (strict || !setMightHaveLoosePrim(a, b, val)) return !1;
                        null === set && (set = new Set()), set.add(val);
                    }
                }
                if (null !== set) {
                    for(var bValues = arrayFromSet(b), _i = 0; _i < bValues.length; _i++){
                        var _val = bValues[_i];
                        if ('object' === _typeof$1(_val) && null !== _val) {
                            if (!setHasEqualElement(set, _val, strict, memo)) return !1;
                        } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) return !1;
                    }
                    return 0 === set.size;
                }
                return !0;
            }
            function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
                for(var setValues = arrayFromSet(set), i = 0; i < setValues.length; i++){
                    var key2 = setValues[i];
                    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) return set.delete(key2), !0;
                }
                return !1;
            }
            function mapEquiv(a, b, strict, memo) {
                for(var set = null, aEntries = arrayFromMap(a), i = 0; i < aEntries.length; i++){
                    var _aEntries$i = _slicedToArray(aEntries[i], 2), key = _aEntries$i[0], item1 = _aEntries$i[1];
                    if ('object' === _typeof$1(key) && null !== key) null === set && (set = new Set()), set.add(key);
                    else {
                        var item2 = b.get(key);
                        if (void 0 === item2 && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
                            if (strict || !mapMightHaveLoosePrim(a, b, key, item1, memo)) return !1;
                            null === set && (set = new Set()), set.add(key);
                        }
                    }
                }
                if (null !== set) {
                    for(var bEntries = arrayFromMap(b), _i2 = 0; _i2 < bEntries.length; _i2++){
                        var _bEntries$_i = _slicedToArray(bEntries[_i2], 2), key = _bEntries$_i[0], item = _bEntries$_i[1];
                        if ('object' === _typeof$1(key) && null !== key) {
                            if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return !1;
                        } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, !1, memo)) && !mapHasEqualEntry(set, a, key, item, !1, memo)) return !1;
                    }
                    return 0 === set.size;
                }
                return !0;
            }
            function objEquiv(a, b, strict, keys, memos, iterationType) {
                var i = 0;
                if (iterationType === kIsSet) {
                    if (!setEquiv(a, b, strict, memos)) return !1;
                } else if (iterationType === kIsMap) {
                    if (!mapEquiv(a, b, strict, memos)) return !1;
                } else if (iterationType === kIsArray) for(; i < a.length; i++)if (hasOwnProperty(a, i)) {
                    if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) return !1;
                } else {
                    if (hasOwnProperty(b, i)) return !1;
                    for(var keysA = Object.keys(a); i < keysA.length; i++){
                        var key = keysA[i];
                        if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) return !1;
                    }
                    if (keysA.length !== Object.keys(b).length) return !1;
                    return !0;
                }
                for(i = 0; i < keys.length; i++){
                    var _key = keys[i];
                    if (!innerDeepEqual(a[_key], b[_key], strict, memos)) return !1;
                }
                return !0;
            }
            function isDeepEqual$1(val1, val2) {
                return innerDeepEqual(val1, val2, !1);
            }
            function isDeepStrictEqual$1(val1, val2) {
                return innerDeepEqual(val1, val2, !0);
            }
            var comparisons = {
                isDeepEqual: isDeepEqual$1,
                isDeepStrictEqual: isDeepStrictEqual$1
            };
            function _typeof(obj) {
                return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
                    return typeof obj;
                } : function(obj) {
                    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                })(obj);
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw TypeError("Cannot call a class as a function");
            }
            var _require$codes = errors.codes, ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE, ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, AssertionError = AssertionError$1, inspect = util$1.inspect, _require$types = util$1.types, isPromise = _require$types.isPromise, isRegExp = _require$types.isRegExp, objectAssign = Object.assign ? Object.assign : assign, objectIs = Object.is ? Object.is : objectIs$2;
            function lazyLoadComparison() {
                var comparison = comparisons;
                isDeepEqual = comparison.isDeepEqual, isDeepStrictEqual = comparison.isDeepStrictEqual;
            }
            var warned = !1, assert = assert$2.exports = ok, NO_EXCEPTION_SENTINEL = {};
            function innerFail(obj) {
                if (obj.message instanceof Error) throw obj.message;
                throw new AssertionError(obj);
            }
            function fail(actual, expected, message, operator, stackStartFn) {
                var internalMessage, argsLen = arguments.length;
                if (0 === argsLen ? internalMessage = 'Failed' : 1 === argsLen ? (message = actual, actual = void 0) : (!1 === warned && (warned = !0, console.warn.bind(console)("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", 'DeprecationWarning', 'DEP0094')), 2 === argsLen && (operator = '!=')), message instanceof Error) throw message;
                var errArgs = {
                    actual: actual,
                    expected: expected,
                    operator: void 0 === operator ? 'fail' : operator,
                    stackStartFn: stackStartFn || fail
                };
                void 0 !== message && (errArgs.message = message);
                var err = new AssertionError(errArgs);
                throw internalMessage && (err.message = internalMessage, err.generatedMessage = !0), err;
            }
            function innerOk(fn, argLen, value, message) {
                if (!value) {
                    var generatedMessage = !1;
                    if (0 === argLen) generatedMessage = !0, message = 'No value argument passed to `assert.ok()`';
                    else if (message instanceof Error) throw message;
                    var err = new AssertionError({
                        actual: value,
                        expected: !0,
                        message: message,
                        operator: '==',
                        stackStartFn: fn
                    });
                    throw err.generatedMessage = generatedMessage, err;
                }
            }
            function ok() {
                for(var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                innerOk.apply(void 0, [
                    ok,
                    args.length
                ].concat(args));
            }
            function notDeepStrictEqual(actual, expected, message) {
                if (arguments.length < 2) throw new ERR_MISSING_ARGS('actual', 'expected');
                void 0 === isDeepEqual && lazyLoadComparison(), isDeepStrictEqual(actual, expected) && innerFail({
                    actual: actual,
                    expected: expected,
                    message: message,
                    operator: 'notDeepStrictEqual',
                    stackStartFn: notDeepStrictEqual
                });
            }
            assert.fail = fail, assert.AssertionError = AssertionError, assert.ok = ok, assert.equal = function equal(actual, expected, message) {
                if (arguments.length < 2) throw new ERR_MISSING_ARGS('actual', 'expected');
                actual != expected && innerFail({
                    actual: actual,
                    expected: expected,
                    message: message,
                    operator: '==',
                    stackStartFn: equal
                });
            }, assert.notEqual = function notEqual(actual, expected, message) {
                if (arguments.length < 2) throw new ERR_MISSING_ARGS('actual', 'expected');
                actual == expected && innerFail({
                    actual: actual,
                    expected: expected,
                    message: message,
                    operator: '!=',
                    stackStartFn: notEqual
                });
            }, assert.deepEqual = function deepEqual(actual, expected, message) {
                if (arguments.length < 2) throw new ERR_MISSING_ARGS('actual', 'expected');
                void 0 === isDeepEqual && lazyLoadComparison(), isDeepEqual(actual, expected) || innerFail({
                    actual: actual,
                    expected: expected,
                    message: message,
                    operator: 'deepEqual',
                    stackStartFn: deepEqual
                });
            }, assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
                if (arguments.length < 2) throw new ERR_MISSING_ARGS('actual', 'expected');
                void 0 === isDeepEqual && lazyLoadComparison(), isDeepEqual(actual, expected) && innerFail({
                    actual: actual,
                    expected: expected,
                    message: message,
                    operator: 'notDeepEqual',
                    stackStartFn: notDeepEqual
                });
            }, assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
                if (arguments.length < 2) throw new ERR_MISSING_ARGS('actual', 'expected');
                void 0 === isDeepEqual && lazyLoadComparison(), isDeepStrictEqual(actual, expected) || innerFail({
                    actual: actual,
                    expected: expected,
                    message: message,
                    operator: 'deepStrictEqual',
                    stackStartFn: deepStrictEqual
                });
            }, assert.notDeepStrictEqual = notDeepStrictEqual, assert.strictEqual = function strictEqual(actual, expected, message) {
                if (arguments.length < 2) throw new ERR_MISSING_ARGS('actual', 'expected');
                objectIs(actual, expected) || innerFail({
                    actual: actual,
                    expected: expected,
                    message: message,
                    operator: 'strictEqual',
                    stackStartFn: strictEqual
                });
            }, assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
                if (arguments.length < 2) throw new ERR_MISSING_ARGS('actual', 'expected');
                objectIs(actual, expected) && innerFail({
                    actual: actual,
                    expected: expected,
                    message: message,
                    operator: 'notStrictEqual',
                    stackStartFn: notStrictEqual
                });
            };
            var Comparison = function Comparison(obj, keys, actual) {
                var _this = this;
                _classCallCheck(this, Comparison), keys.forEach(function(key) {
                    key in obj && (void 0 !== actual && 'string' == typeof actual[key] && isRegExp(obj[key]) && obj[key].test(actual[key]) ? _this[key] = actual[key] : _this[key] = obj[key]);
                });
            };
            function compareExceptionKey(actual, expected, key, message, keys, fn) {
                if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
                    if (!message) {
                        var a = new Comparison(actual, keys), b = new Comparison(expected, keys, actual), err = new AssertionError({
                            actual: a,
                            expected: b,
                            operator: 'deepStrictEqual',
                            stackStartFn: fn
                        });
                        throw err.actual = actual, err.expected = expected, err.operator = fn.name, err;
                    }
                    innerFail({
                        actual: actual,
                        expected: expected,
                        message: message,
                        operator: fn.name,
                        stackStartFn: fn
                    });
                }
            }
            function expectedException(actual, expected, msg, fn) {
                if ('function' != typeof expected) {
                    if (isRegExp(expected)) return expected.test(actual);
                    if (2 === arguments.length) throw new ERR_INVALID_ARG_TYPE('expected', [
                        'Function',
                        'RegExp'
                    ], expected);
                    if ('object' !== _typeof(actual) || null === actual) {
                        var err = new AssertionError({
                            actual: actual,
                            expected: expected,
                            message: msg,
                            operator: 'deepStrictEqual',
                            stackStartFn: fn
                        });
                        throw err.operator = fn.name, err;
                    }
                    var keys = Object.keys(expected);
                    if (expected instanceof Error) keys.push('name', 'message');
                    else if (0 === keys.length) throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
                    return void 0 === isDeepEqual && lazyLoadComparison(), keys.forEach(function(key) {
                        'string' == typeof actual[key] && isRegExp(expected[key]) && expected[key].test(actual[key]) || compareExceptionKey(actual, expected, key, msg, keys, fn);
                    }), !0;
                }
                return void 0 !== expected.prototype && actual instanceof expected || !Error.isPrototypeOf(expected) && !0 === expected.call({}, actual);
            }
            function getActual(fn) {
                if ('function' != typeof fn) throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
                try {
                    fn();
                } catch (e) {
                    return e;
                }
                return NO_EXCEPTION_SENTINEL;
            }
            function checkIsPromise(obj) {
                return isPromise(obj) || null !== obj && 'object' === _typeof(obj) && 'function' == typeof obj.then && 'function' == typeof obj.catch;
            }
            function waitForActual(promiseFn) {
                return Promise.resolve().then(function() {
                    var resultPromise;
                    if ('function' == typeof promiseFn) {
                        if (!checkIsPromise(resultPromise = promiseFn())) throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
                    } else if (checkIsPromise(promiseFn)) resultPromise = promiseFn;
                    else throw new ERR_INVALID_ARG_TYPE('promiseFn', [
                        'Function',
                        'Promise'
                    ], promiseFn);
                    return Promise.resolve().then(function() {
                        return resultPromise;
                    }).then(function() {
                        return NO_EXCEPTION_SENTINEL;
                    }).catch(function(e) {
                        return e;
                    });
                });
            }
            function expectsError(stackStartFn, actual, error, message) {
                if ('string' == typeof error) {
                    if (4 === arguments.length) throw new ERR_INVALID_ARG_TYPE('error', [
                        'Object',
                        'Error',
                        'Function',
                        'RegExp'
                    ], error);
                    if ('object' === _typeof(actual) && null !== actual) {
                        if (actual.message === error) throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
                    } else if (actual === error) throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
                    message = error, error = void 0;
                } else if (null != error && 'object' !== _typeof(error) && 'function' != typeof error) throw new ERR_INVALID_ARG_TYPE('error', [
                    'Object',
                    'Error',
                    'Function',
                    'RegExp'
                ], error);
                if (actual === NO_EXCEPTION_SENTINEL) {
                    var details = '';
                    error && error.name && (details += " (".concat(error.name, ")")), details += message ? ": ".concat(message) : '.';
                    var fnType = 'rejects' === stackStartFn.name ? 'rejection' : 'exception';
                    innerFail({
                        actual: void 0,
                        expected: error,
                        operator: stackStartFn.name,
                        message: "Missing expected ".concat(fnType).concat(details),
                        stackStartFn: stackStartFn
                    });
                }
                if (error && !expectedException(actual, error, message, stackStartFn)) throw actual;
            }
            function expectsNoError(stackStartFn, actual, error, message) {
                if (actual !== NO_EXCEPTION_SENTINEL) {
                    if ('string' == typeof error && (message = error, error = void 0), !error || expectedException(actual, error)) {
                        var details = message ? ": ".concat(message) : '.', fnType = 'doesNotReject' === stackStartFn.name ? 'rejection' : 'exception';
                        innerFail({
                            actual: actual,
                            expected: error,
                            operator: stackStartFn.name,
                            message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
                            stackStartFn: stackStartFn
                        });
                    }
                    throw actual;
                }
            }
            function strict() {
                for(var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++)args[_key6] = arguments[_key6];
                innerOk.apply(void 0, [
                    strict,
                    args.length
                ].concat(args));
            }
            assert.throws = function throws(promiseFn) {
                for(var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
                expectsError.apply(void 0, [
                    throws,
                    getActual(promiseFn)
                ].concat(args));
            }, assert.rejects = function rejects(promiseFn) {
                for(var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++)args[_key3 - 1] = arguments[_key3];
                return waitForActual(promiseFn).then(function(result) {
                    return expectsError.apply(void 0, [
                        rejects,
                        result
                    ].concat(args));
                });
            }, assert.doesNotThrow = function doesNotThrow(fn) {
                for(var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++)args[_key4 - 1] = arguments[_key4];
                expectsNoError.apply(void 0, [
                    doesNotThrow,
                    getActual(fn)
                ].concat(args));
            }, assert.doesNotReject = function doesNotReject(fn) {
                for(var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++)args[_key5 - 1] = arguments[_key5];
                return waitForActual(fn).then(function(result) {
                    return expectsNoError.apply(void 0, [
                        doesNotReject,
                        result
                    ].concat(args));
                });
            }, assert.ifError = function ifError(err) {
                if (null != err) {
                    var message = 'ifError got unwanted exception: ';
                    'object' === _typeof(err) && 'string' == typeof err.message ? 0 === err.message.length && err.constructor ? message += err.constructor.name : message += err.message : message += inspect(err);
                    var newErr = new AssertionError({
                        actual: err,
                        expected: null,
                        operator: 'ifError',
                        message: message,
                        stackStartFn: ifError
                    }), origStack = err.stack;
                    if ('string' == typeof origStack) {
                        var tmp2 = origStack.split('\n');
                        tmp2.shift();
                        for(var tmp1 = newErr.stack.split('\n'), i = 0; i < tmp2.length; i++){
                            var pos = tmp1.indexOf(tmp2[i]);
                            if (-1 !== pos) {
                                tmp1 = tmp1.slice(0, pos);
                                break;
                            }
                        }
                        newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
                    }
                    throw newErr;
                }
            }, assert.strict = objectAssign(strict, assert, {
                equal: assert.strictEqual,
                deepEqual: assert.deepStrictEqual,
                notEqual: assert.notStrictEqual,
                notDeepEqual: assert.notDeepStrictEqual
            }), assert.strict.strict = assert.strict, function(exports) {
                var assert = assert$2.exports, Zstream = pako_lib_zlib_zstream__WEBPACK_IMPORTED_MODULE_0___default(), zlib_deflate = pako_lib_zlib_deflate_js__WEBPACK_IMPORTED_MODULE_1__, zlib_inflate = pako_lib_zlib_inflate_js__WEBPACK_IMPORTED_MODULE_2__, constants = pako_lib_zlib_constants__WEBPACK_IMPORTED_MODULE_3___default();
                for(var key in constants)exports[key] = constants[key];
                function Zlib(mode) {
                    if ('number' != typeof mode || mode < exports.DEFLATE || mode > exports.UNZIP) throw TypeError('Bad argument');
                    this.dictionary = null, this.err = 0, this.flush = 0, this.init_done = !1, this.level = 0, this.memLevel = 0, this.mode = mode, this.strategy = 0, this.windowBits = 0, this.write_in_progress = !1, this.pending_close = !1, this.gzip_id_bytes_read = 0;
                }
                exports.NONE = 0, exports.DEFLATE = 1, exports.INFLATE = 2, exports.GZIP = 3, exports.GUNZIP = 4, exports.DEFLATERAW = 5, exports.INFLATERAW = 6, exports.UNZIP = 7, Zlib.prototype.close = function() {
                    if (this.write_in_progress) {
                        this.pending_close = !0;
                        return;
                    }
                    this.pending_close = !1, assert(this.init_done, 'close before init'), assert(this.mode <= exports.UNZIP), this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW ? zlib_deflate.deflateEnd(this.strm) : (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) && zlib_inflate.inflateEnd(this.strm), this.mode = exports.NONE, this.dictionary = null;
                }, Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {
                    return this._write(!0, flush, input, in_off, in_len, out, out_off, out_len);
                }, Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
                    return this._write(!1, flush, input, in_off, in_len, out, out_off, out_len);
                }, Zlib.prototype._write = function(async, flush, input, in_off, in_len, out, out_off, out_len) {
                    if (assert.equal(arguments.length, 8), assert(this.init_done, 'write before init'), assert(this.mode !== exports.NONE, 'already finalized'), assert.equal(!1, this.write_in_progress, 'write already in progress'), assert.equal(!1, this.pending_close, 'close is pending'), this.write_in_progress = !0, assert.equal(!1, void 0 === flush, 'must provide flush value'), this.write_in_progress = !0, flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) throw Error('Invalid flush value');
                    if (null == input && (input = Buffer$4.alloc(0), in_len = 0, in_off = 0), this.strm.avail_in = in_len, this.strm.input = input, this.strm.next_in = in_off, this.strm.avail_out = out_len, this.strm.output = out, this.strm.next_out = out_off, this.flush = flush, !async) return (this._process(), this._checkError()) ? this._afterSync() : void 0;
                    var self1 = this;
                    return browser$1$1.nextTick(function() {
                        self1._process(), self1._after();
                    }), this;
                }, Zlib.prototype._afterSync = function() {
                    var avail_out = this.strm.avail_out, avail_in = this.strm.avail_in;
                    return this.write_in_progress = !1, [
                        avail_in,
                        avail_out
                    ];
                }, Zlib.prototype._process = function() {
                    var next_expected_header_byte = null;
                    switch(this.mode){
                        case exports.DEFLATE:
                        case exports.GZIP:
                        case exports.DEFLATERAW:
                            this.err = zlib_deflate.deflate(this.strm, this.flush);
                            break;
                        case exports.UNZIP:
                            switch(this.strm.avail_in > 0 && (next_expected_header_byte = this.strm.next_in), this.gzip_id_bytes_read){
                                case 0:
                                    if (null === next_expected_header_byte) break;
                                    if (0x1f === this.strm.input[next_expected_header_byte]) {
                                        if (this.gzip_id_bytes_read = 1, next_expected_header_byte++, 1 === this.strm.avail_in) break;
                                    } else {
                                        this.mode = exports.INFLATE;
                                        break;
                                    }
                                case 1:
                                    if (null === next_expected_header_byte) break;
                                    0x8b === this.strm.input[next_expected_header_byte] ? (this.gzip_id_bytes_read = 2, this.mode = exports.GUNZIP) : this.mode = exports.INFLATE;
                                    break;
                                default:
                                    throw Error('invalid number of gzip magic number bytes read');
                            }
                        case exports.INFLATE:
                        case exports.GUNZIP:
                        case exports.INFLATERAW:
                            for(this.err = zlib_inflate.inflate(this.strm, this.flush), this.err === exports.Z_NEED_DICT && this.dictionary && (this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary), this.err === exports.Z_OK ? this.err = zlib_inflate.inflate(this.strm, this.flush) : this.err === exports.Z_DATA_ERROR && (this.err = exports.Z_NEED_DICT)); this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && 0x00 !== this.strm.next_in[0];)this.reset(), this.err = zlib_inflate.inflate(this.strm, this.flush);
                            break;
                        default:
                            throw Error('Unknown mode ' + this.mode);
                    }
                }, Zlib.prototype._checkError = function() {
                    switch(this.err){
                        case exports.Z_OK:
                        case exports.Z_BUF_ERROR:
                            if (0 !== this.strm.avail_out && this.flush === exports.Z_FINISH) return this._error('unexpected end of file'), !1;
                            break;
                        case exports.Z_STREAM_END:
                            break;
                        case exports.Z_NEED_DICT:
                            return null == this.dictionary ? this._error('Missing dictionary') : this._error('Bad dictionary'), !1;
                        default:
                            return this._error('Zlib error'), !1;
                    }
                    return !0;
                }, Zlib.prototype._after = function() {
                    if (this._checkError()) {
                        var avail_out = this.strm.avail_out, avail_in = this.strm.avail_in;
                        this.write_in_progress = !1, this.callback(avail_in, avail_out), this.pending_close && this.close();
                    }
                }, Zlib.prototype._error = function(message) {
                    this.strm.msg && (message = this.strm.msg), this.onerror(message, this.err), this.write_in_progress = !1, this.pending_close && this.close();
                }, Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
                    assert(4 === arguments.length || 5 === arguments.length, 'init(windowBits, level, memLevel, strategy, [dictionary])'), assert(windowBits >= 8 && windowBits <= 15, 'invalid windowBits'), assert(level >= -1 && level <= 9, 'invalid compression level'), assert(memLevel >= 1 && memLevel <= 9, 'invalid memlevel'), assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, 'invalid strategy'), this._init(level, windowBits, memLevel, strategy, dictionary), this._setDictionary();
                }, Zlib.prototype.params = function() {
                    throw Error('deflateParams Not supported');
                }, Zlib.prototype.reset = function() {
                    this._reset(), this._setDictionary();
                }, Zlib.prototype._init = function(level, windowBits, memLevel, strategy, dictionary) {
                    switch(this.level = level, this.windowBits = windowBits, this.memLevel = memLevel, this.strategy = strategy, this.flush = exports.Z_NO_FLUSH, this.err = exports.Z_OK, (this.mode === exports.GZIP || this.mode === exports.GUNZIP) && (this.windowBits += 16), this.mode === exports.UNZIP && (this.windowBits += 32), (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) && (this.windowBits = -1 * this.windowBits), this.strm = new Zstream(), this.mode){
                        case exports.DEFLATE:
                        case exports.GZIP:
                        case exports.DEFLATERAW:
                            this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
                            break;
                        case exports.INFLATE:
                        case exports.GUNZIP:
                        case exports.INFLATERAW:
                        case exports.UNZIP:
                            this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
                            break;
                        default:
                            throw Error('Unknown mode ' + this.mode);
                    }
                    this.err !== exports.Z_OK && this._error('Init error'), this.dictionary = dictionary, this.write_in_progress = !1, this.init_done = !0;
                }, Zlib.prototype._setDictionary = function() {
                    if (null != this.dictionary) {
                        switch(this.err = exports.Z_OK, this.mode){
                            case exports.DEFLATE:
                            case exports.DEFLATERAW:
                                this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
                        }
                        this.err !== exports.Z_OK && this._error('Failed to set dictionary');
                    }
                }, Zlib.prototype._reset = function() {
                    switch(this.err = exports.Z_OK, this.mode){
                        case exports.DEFLATE:
                        case exports.DEFLATERAW:
                        case exports.GZIP:
                            this.err = zlib_deflate.deflateReset(this.strm);
                            break;
                        case exports.INFLATE:
                        case exports.INFLATERAW:
                        case exports.GUNZIP:
                            this.err = zlib_inflate.inflateReset(this.strm);
                    }
                    this.err !== exports.Z_OK && this._error('Failed to reset stream');
                }, exports.Zlib = Zlib;
            }(binding), function(exports) {
                var Buffer = buffer.Buffer, Transform1 = readableBrowser.exports.Transform, binding$1 = binding, util = util$1, assert = assert$2.exports.ok, kMaxLength = buffer.kMaxLength, kRangeErrorMessage = "Cannot create final Buffer. It would be larger than 0x" + kMaxLength.toString(16) + ' bytes';
                binding$1.Z_MIN_WINDOWBITS = 8, binding$1.Z_MAX_WINDOWBITS = 15, binding$1.Z_DEFAULT_WINDOWBITS = 15, binding$1.Z_MIN_CHUNK = 64, binding$1.Z_MAX_CHUNK = 1 / 0, binding$1.Z_DEFAULT_CHUNK = 16384, binding$1.Z_MIN_MEMLEVEL = 1, binding$1.Z_MAX_MEMLEVEL = 9, binding$1.Z_DEFAULT_MEMLEVEL = 8, binding$1.Z_MIN_LEVEL = -1, binding$1.Z_MAX_LEVEL = 9, binding$1.Z_DEFAULT_LEVEL = binding$1.Z_DEFAULT_COMPRESSION;
                for(var bkeys = Object.keys(binding$1), bk = 0; bk < bkeys.length; bk++){
                    var bkey = bkeys[bk];
                    bkey.match(/^Z/) && Object.defineProperty(exports, bkey, {
                        enumerable: !0,
                        value: binding$1[bkey],
                        writable: !1
                    });
                }
                for(var codes = {
                    Z_OK: binding$1.Z_OK,
                    Z_STREAM_END: binding$1.Z_STREAM_END,
                    Z_NEED_DICT: binding$1.Z_NEED_DICT,
                    Z_ERRNO: binding$1.Z_ERRNO,
                    Z_STREAM_ERROR: binding$1.Z_STREAM_ERROR,
                    Z_DATA_ERROR: binding$1.Z_DATA_ERROR,
                    Z_MEM_ERROR: binding$1.Z_MEM_ERROR,
                    Z_BUF_ERROR: binding$1.Z_BUF_ERROR,
                    Z_VERSION_ERROR: binding$1.Z_VERSION_ERROR
                }, ckeys = Object.keys(codes), ck = 0; ck < ckeys.length; ck++){
                    var ckey = ckeys[ck];
                    codes[codes[ckey]] = ckey;
                }
                function zlibBuffer(engine, buffer1, callback) {
                    var buffers = [], nread = 0;
                    function flow() {
                        for(var chunk; null !== (chunk = engine.read());)buffers.push(chunk), nread += chunk.length;
                        engine.once('readable', flow);
                    }
                    function onError(err) {
                        engine.removeListener('end', onEnd), engine.removeListener('readable', flow), callback(err);
                    }
                    function onEnd() {
                        var buf, err = null;
                        nread >= kMaxLength ? err = RangeError(kRangeErrorMessage) : buf = Buffer.concat(buffers, nread), buffers = [], engine.close(), callback(err, buf);
                    }
                    engine.on('error', onError), engine.on('end', onEnd), engine.end(buffer1), flow();
                }
                function zlibBufferSync(engine, buffer1) {
                    if ('string' == typeof buffer1 && (buffer1 = Buffer.from(buffer1)), !Buffer.isBuffer(buffer1)) throw TypeError('Not a string or buffer');
                    var flushFlag = engine._finishFlushFlag;
                    return engine._processChunk(buffer1, flushFlag);
                }
                function Deflate(opts) {
                    if (!(this instanceof Deflate)) return new Deflate(opts);
                    Zlib.call(this, opts, binding$1.DEFLATE);
                }
                function Inflate(opts) {
                    if (!(this instanceof Inflate)) return new Inflate(opts);
                    Zlib.call(this, opts, binding$1.INFLATE);
                }
                function Gzip(opts) {
                    if (!(this instanceof Gzip)) return new Gzip(opts);
                    Zlib.call(this, opts, binding$1.GZIP);
                }
                function Gunzip(opts) {
                    if (!(this instanceof Gunzip)) return new Gunzip(opts);
                    Zlib.call(this, opts, binding$1.GUNZIP);
                }
                function DeflateRaw(opts) {
                    if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
                    Zlib.call(this, opts, binding$1.DEFLATERAW);
                }
                function InflateRaw(opts) {
                    if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
                    Zlib.call(this, opts, binding$1.INFLATERAW);
                }
                function Unzip(opts) {
                    if (!(this instanceof Unzip)) return new Unzip(opts);
                    Zlib.call(this, opts, binding$1.UNZIP);
                }
                function isValidFlushFlag(flag) {
                    return flag === binding$1.Z_NO_FLUSH || flag === binding$1.Z_PARTIAL_FLUSH || flag === binding$1.Z_SYNC_FLUSH || flag === binding$1.Z_FULL_FLUSH || flag === binding$1.Z_FINISH || flag === binding$1.Z_BLOCK;
                }
                function Zlib(opts, mode) {
                    var _this = this;
                    if (this._opts = opts = opts || {}, this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK, Transform1.call(this, opts), opts.flush && !isValidFlushFlag(opts.flush)) throw Error('Invalid flush flag: ' + opts.flush);
                    if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) throw Error('Invalid flush flag: ' + opts.finishFlush);
                    if (this._flushFlag = opts.flush || binding$1.Z_NO_FLUSH, this._finishFlushFlag = void 0 !== opts.finishFlush ? opts.finishFlush : binding$1.Z_FINISH, opts.chunkSize && (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK)) throw Error('Invalid chunk size: ' + opts.chunkSize);
                    if (opts.windowBits && (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS)) throw Error('Invalid windowBits: ' + opts.windowBits);
                    if (opts.level && (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL)) throw Error('Invalid compression level: ' + opts.level);
                    if (opts.memLevel && (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL)) throw Error('Invalid memLevel: ' + opts.memLevel);
                    if (opts.strategy && opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) throw Error('Invalid strategy: ' + opts.strategy);
                    if (opts.dictionary && !Buffer.isBuffer(opts.dictionary)) throw Error('Invalid dictionary: it should be a Buffer instance');
                    this._handle = new binding$1.Zlib(mode);
                    var self1 = this;
                    this._hadError = !1, this._handle.onerror = function(message, errno) {
                        _close(self1), self1._hadError = !0;
                        var error = Error(message);
                        error.errno = errno, error.code = exports.codes[errno], self1.emit('error', error);
                    };
                    var level = exports.Z_DEFAULT_COMPRESSION;
                    'number' == typeof opts.level && (level = opts.level);
                    var strategy = exports.Z_DEFAULT_STRATEGY;
                    'number' == typeof opts.strategy && (strategy = opts.strategy), this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary), this._buffer = Buffer.allocUnsafe(this._chunkSize), this._offset = 0, this._level = level, this._strategy = strategy, this.once('end', this.close), Object.defineProperty(this, '_closed', {
                        get: function() {
                            return !_this._handle;
                        },
                        configurable: !0,
                        enumerable: !0
                    });
                }
                function _close(engine, callback) {
                    callback && browser$1$1.nextTick(callback), engine._handle && (engine._handle.close(), engine._handle = null);
                }
                function emitCloseNT(self1) {
                    self1.emit('close');
                }
                Object.defineProperty(exports, 'codes', {
                    enumerable: !0,
                    value: Object.freeze(codes),
                    writable: !1
                }), exports.Deflate = Deflate, exports.Inflate = Inflate, exports.Gzip = Gzip, exports.Gunzip = Gunzip, exports.DeflateRaw = DeflateRaw, exports.InflateRaw = InflateRaw, exports.Unzip = Unzip, exports.createDeflate = function(o) {
                    return new Deflate(o);
                }, exports.createInflate = function(o) {
                    return new Inflate(o);
                }, exports.createDeflateRaw = function(o) {
                    return new DeflateRaw(o);
                }, exports.createInflateRaw = function(o) {
                    return new InflateRaw(o);
                }, exports.createGzip = function(o) {
                    return new Gzip(o);
                }, exports.createGunzip = function(o) {
                    return new Gunzip(o);
                }, exports.createUnzip = function(o) {
                    return new Unzip(o);
                }, exports.deflate = function(buffer1, opts, callback) {
                    return 'function' == typeof opts && (callback = opts, opts = {}), zlibBuffer(new Deflate(opts), buffer1, callback);
                }, exports.deflateSync = function(buffer1, opts) {
                    return zlibBufferSync(new Deflate(opts), buffer1);
                }, exports.gzip = function(buffer1, opts, callback) {
                    return 'function' == typeof opts && (callback = opts, opts = {}), zlibBuffer(new Gzip(opts), buffer1, callback);
                }, exports.gzipSync = function(buffer1, opts) {
                    return zlibBufferSync(new Gzip(opts), buffer1);
                }, exports.deflateRaw = function(buffer1, opts, callback) {
                    return 'function' == typeof opts && (callback = opts, opts = {}), zlibBuffer(new DeflateRaw(opts), buffer1, callback);
                }, exports.deflateRawSync = function(buffer1, opts) {
                    return zlibBufferSync(new DeflateRaw(opts), buffer1);
                }, exports.unzip = function(buffer1, opts, callback) {
                    return 'function' == typeof opts && (callback = opts, opts = {}), zlibBuffer(new Unzip(opts), buffer1, callback);
                }, exports.unzipSync = function(buffer1, opts) {
                    return zlibBufferSync(new Unzip(opts), buffer1);
                }, exports.inflate = function(buffer1, opts, callback) {
                    return 'function' == typeof opts && (callback = opts, opts = {}), zlibBuffer(new Inflate(opts), buffer1, callback);
                }, exports.inflateSync = function(buffer1, opts) {
                    return zlibBufferSync(new Inflate(opts), buffer1);
                }, exports.gunzip = function(buffer1, opts, callback) {
                    return 'function' == typeof opts && (callback = opts, opts = {}), zlibBuffer(new Gunzip(opts), buffer1, callback);
                }, exports.gunzipSync = function(buffer1, opts) {
                    return zlibBufferSync(new Gunzip(opts), buffer1);
                }, exports.inflateRaw = function(buffer1, opts, callback) {
                    return 'function' == typeof opts && (callback = opts, opts = {}), zlibBuffer(new InflateRaw(opts), buffer1, callback);
                }, exports.inflateRawSync = function(buffer1, opts) {
                    return zlibBufferSync(new InflateRaw(opts), buffer1);
                }, util.inherits(Zlib, Transform1), Zlib.prototype.params = function(level, strategy, callback) {
                    if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) throw RangeError('Invalid compression level: ' + level);
                    if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) throw TypeError('Invalid strategy: ' + strategy);
                    if (this._level !== level || this._strategy !== strategy) {
                        var self1 = this;
                        this.flush(binding$1.Z_SYNC_FLUSH, function() {
                            assert(self1._handle, 'zlib binding closed'), self1._handle.params(level, strategy), !self1._hadError && (self1._level = level, self1._strategy = strategy, callback && callback());
                        });
                    } else browser$1$1.nextTick(callback);
                }, Zlib.prototype.reset = function() {
                    return assert(this._handle, 'zlib binding closed'), this._handle.reset();
                }, Zlib.prototype._flush = function(callback) {
                    this._transform(Buffer.alloc(0), '', callback);
                }, Zlib.prototype.flush = function(kind, callback) {
                    var _this2 = this, ws = this._writableState;
                    'function' != typeof kind && (void 0 !== kind || callback) || (callback = kind, kind = binding$1.Z_FULL_FLUSH), ws.ended ? callback && browser$1$1.nextTick(callback) : ws.ending ? callback && this.once('end', callback) : ws.needDrain ? callback && this.once('drain', function() {
                        return _this2.flush(kind, callback);
                    }) : (this._flushFlag = kind, this.write(Buffer.alloc(0), '', callback));
                }, Zlib.prototype.close = function(callback) {
                    _close(this, callback), browser$1$1.nextTick(emitCloseNT, this);
                }, Zlib.prototype._transform = function(chunk, encoding, cb) {
                    var flushFlag, ws = this._writableState, last = (ws.ending || ws.ended) && (!chunk || ws.length === chunk.length);
                    return null === chunk || Buffer.isBuffer(chunk) ? this._handle ? void (last ? flushFlag = this._finishFlushFlag : (flushFlag = this._flushFlag, chunk.length >= ws.length && (this._flushFlag = this._opts.flush || binding$1.Z_NO_FLUSH)), this._processChunk(chunk, flushFlag, cb)) : cb(Error('zlib binding closed')) : cb(Error('invalid input'));
                }, Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
                    var availInBefore = chunk && chunk.length, availOutBefore = this._chunkSize - this._offset, inOff = 0, self1 = this, async = 'function' == typeof cb;
                    if (!async) {
                        var error, buffers = [], nread = 0;
                        this.on('error', function(er) {
                            error = er;
                        }), assert(this._handle, 'zlib binding closed');
                        do var res = this._handle.writeSync(flushFlag, chunk, inOff, availInBefore, this._buffer, this._offset, availOutBefore);
                        while (!this._hadError && callback(res[0], res[1]))
                        if (this._hadError) throw error;
                        if (nread >= kMaxLength) throw _close(this), RangeError(kRangeErrorMessage);
                        var buf = Buffer.concat(buffers, nread);
                        return _close(this), buf;
                    }
                    assert(this._handle, 'zlib binding closed');
                    var req = this._handle.write(flushFlag, chunk, inOff, availInBefore, this._buffer, this._offset, availOutBefore);
                    function callback(availInAfter, availOutAfter) {
                        if (this && (this.buffer = null, this.callback = null), !self1._hadError) {
                            var have = availOutBefore - availOutAfter;
                            if (assert(have >= 0, 'have should not go down'), have > 0) {
                                var out = self1._buffer.slice(self1._offset, self1._offset + have);
                                self1._offset += have, async ? self1.push(out) : (buffers.push(out), nread += out.length);
                            }
                            if ((0 === availOutAfter || self1._offset >= self1._chunkSize) && (availOutBefore = self1._chunkSize, self1._offset = 0, self1._buffer = Buffer.allocUnsafe(self1._chunkSize)), 0 === availOutAfter) {
                                if (inOff += availInBefore - availInAfter, availInBefore = availInAfter, !async) return !0;
                                var newReq = self1._handle.write(flushFlag, chunk, inOff, availInBefore, self1._buffer, self1._offset, self1._chunkSize);
                                return newReq.callback = callback, void (newReq.buffer = chunk);
                            }
                            if (!async) return !1;
                            cb();
                        }
                    }
                    req.buffer = chunk, req.callback = callback;
                }, util.inherits(Deflate, Zlib), util.inherits(Inflate, Zlib), util.inherits(Gzip, Zlib), util.inherits(Gunzip, Zlib), util.inherits(DeflateRaw, Zlib), util.inherits(InflateRaw, Zlib), util.inherits(Unzip, Zlib);
            }(lib);
            var PDFReference = function(_stream$Writable) {
                function PDFReference(document, id, data) {
                    var _this;
                    return (_this = _stream$Writable.call(this, {
                        decodeStrings: !1
                    }) || this).finalize = _this.finalize.bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__.Z)(_this)), _this.document = document, _this.id = id, null == data && (data = {}), _this.data = data, _this.gen = 0, _this.deflate = null, _this.compress = _this.document.compress && !_this.data.Filter, _this.uncompressedLength = 0, _this.chunks = [], _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__.Z)(PDFReference, _stream$Writable);
                var _proto = PDFReference.prototype;
                return _proto.initDeflate = function() {
                    var _this2 = this;
                    return this.data.Filter = 'FlateDecode', this.deflate = lib.createDeflate(), this.deflate.on('data', function(chunk) {
                        return _this2.chunks.push(chunk), _this2.data.Length += chunk.length;
                    }), this.deflate.on('end', this.finalize);
                }, _proto._write = function(chunk, encoding, callback) {
                    return chunk instanceof Uint8Array || (chunk = Buffer$4.from(chunk + '\n', 'binary')), this.uncompressedLength += chunk.length, null == this.data.Length && (this.data.Length = 0), this.compress ? (this.deflate || this.initDeflate(), this.deflate.write(chunk)) : (this.chunks.push(chunk), this.data.Length += chunk.length), callback();
                }, _proto.end = function() {
                    return (_stream$Writable.prototype.end.apply(this, arguments), this.deflate) ? this.deflate.end() : this.finalize();
                }, _proto.finalize = function() {
                    if (this.offset = this.document._offset, this.document._write(this.id + " " + this.gen + " obj"), this.document._write(PDFObject$1.convert(this.data)), this.chunks.length) {
                        this.document._write('stream');
                        for(var _i = 0, _Array$from = Array.from(this.chunks); _i < _Array$from.length; _i++){
                            var chunk = _Array$from[_i];
                            this.document._write(chunk);
                        }
                        this.chunks.length = 0, this.document._write('\nendstream');
                    }
                    return this.document._write('endobj'), this.document._refEnd(this);
                }, _proto.toString = function() {
                    return this.id + " " + this.gen + " R";
                }, PDFReference;
            }(stream.Writable), PDFNameTree = function(_PDFTree) {
                function PDFNameTree() {
                    return _PDFTree.apply(this, arguments) || this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__.Z)(PDFNameTree, _PDFTree);
                var _proto = PDFNameTree.prototype;
                return _proto._compareKeys = function(a, b) {
                    return a.localeCompare(b);
                }, _proto._keysName = function() {
                    return 'Names';
                }, _proto._dataForKey = function(k) {
                    return new String(k);
                }, PDFNameTree;
            }(function() {
                function PDFTree(options) {
                    void 0 === options && (options = {}), this._items = {}, this.limits = 'boolean' != typeof options.limits || options.limits;
                }
                var _proto = PDFTree.prototype;
                return _proto.add = function(key, val) {
                    return this._items[key] = val;
                }, _proto.get = function(key) {
                    return this._items[key];
                }, _proto.toString = function() {
                    var _this = this, sortedKeys = Object.keys(this._items).sort(function(a, b) {
                        return _this._compareKeys(a, b);
                    }), out = [
                        '<<'
                    ];
                    if (this.limits && sortedKeys.length > 1) {
                        var first = sortedKeys[0], last = sortedKeys[sortedKeys.length - 1];
                        out.push("  /Limits " + PDFObject$1.convert([
                            this._dataForKey(first),
                            this._dataForKey(last)
                        ]));
                    }
                    out.push("  /" + this._keysName() + " [");
                    for(var _step, _iterator = (0, _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_9__.Z)(sortedKeys); !(_step = _iterator()).done;){
                        var key = _step.value;
                        out.push("    " + PDFObject$1.convert(this._dataForKey(key)) + " " + PDFObject$1.convert(this._items[key]));
                    }
                    return out.push(']'), out.push('>>'), out.join('\n');
                }, _proto._compareKeys = function() {
                    throw Error('Must be implemented by subclasses');
                }, _proto._keysName = function() {
                    throw Error('Must be implemented by subclasses');
                }, _proto._dataForKey = function() {
                    throw Error('Must be implemented by subclasses');
                }, PDFTree;
            }()), escapableRe = /[\n\r\t\b\f\(\)\\]/g, escapable = {
                '\n': '\\n',
                '\r': '\\r',
                '\t': '\\t',
                '\b': '\\b',
                '\f': '\\f',
                '\\': '\\\\',
                '(': '\\(',
                ')': '\\)'
            }, pad = function(str, length) {
                return (Array(length + 1).join('0') + str).slice(-length);
            }, swapBytes = function(buff) {
                var l = buff.length;
                if (0x01 & l) throw Error('Buffer length must be even');
                for(var i = 0, end = l - 1; i < end; i += 2){
                    var a = buff[i];
                    buff[i] = buff[i + 1], buff[i + 1] = a;
                }
                return buff;
            }, PDFObject$1 = function() {
                function PDFObject() {}
                return PDFObject.convert = function(object) {
                    if ('string' == typeof object) return "/" + object;
                    if (object instanceof String) {
                        for(var string = object, isUnicode = !1, i = 0, end = string.length; i < end; i++)if (string.charCodeAt(i) > 0x7f) {
                            isUnicode = !0;
                            break;
                        }
                        return isUnicode && (string = swapBytes(Buffer$4.from("\uFEFF" + string, 'utf16le')).toString('binary')), "(" + (string = string.replace(escapableRe, function(c) {
                            return escapable[c];
                        })) + ")";
                    }
                    if (Buffer$4.isBuffer(object)) return "<" + object.toString('hex') + ">";
                    if (object instanceof PDFReference || object instanceof PDFNameTree) return object.toString();
                    if (object instanceof Date) return "(D:" + pad(object.getUTCFullYear(), 4) + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + 'Z)';
                    if (Array.isArray(object)) return "[" + Array.from(object).map(function(e) {
                        return PDFObject.convert(e);
                    }).join(' ') + "]";
                    if ('[object Object]' === ({}).toString.call(object)) {
                        var out = [
                            '<<'
                        ];
                        for(var key in object){
                            var val = object[key];
                            out.push("/" + key + " " + PDFObject.convert(val));
                        }
                        return out.push('>>'), out.join('\n');
                    }
                    return 'number' == typeof object ? PDFObject.number(object) : "" + object;
                }, PDFObject.number = function(n) {
                    if (n > -1000000000000000000000 && n < 1e21) return Math.round(1e6 * n) / 1e6;
                    throw Error("unsupported number: " + n);
                }, PDFObject;
            }();
            function _defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function _createClass(Constructor, protoProps, staticProps) {
                return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Object.defineProperty(Constructor, "prototype", {
                    writable: !1
                }), Constructor;
            }
            var DEFAULT_MARGINS = {
                top: 0,
                left: 0,
                bottom: 0,
                right: 0
            }, SIZES = {
                '4A0': [
                    4767.87,
                    6740.79
                ],
                '2A0': [
                    3370.39,
                    4767.87
                ],
                A0: [
                    2383.94,
                    3370.39
                ],
                A1: [
                    1683.78,
                    2383.94
                ],
                A2: [
                    1190.55,
                    1683.78
                ],
                A3: [
                    841.89,
                    1190.55
                ],
                A4: [
                    595.28,
                    841.89
                ],
                A5: [
                    419.53,
                    595.28
                ],
                A6: [
                    297.64,
                    419.53
                ],
                A7: [
                    209.76,
                    297.64
                ],
                A8: [
                    147.4,
                    209.76
                ],
                A9: [
                    104.88,
                    147.4
                ],
                A10: [
                    73.7,
                    104.88
                ],
                B0: [
                    2834.65,
                    4008.19
                ],
                B1: [
                    2004.09,
                    2834.65
                ],
                B2: [
                    1417.32,
                    2004.09
                ],
                B3: [
                    1000.63,
                    1417.32
                ],
                B4: [
                    708.66,
                    1000.63
                ],
                B5: [
                    498.9,
                    708.66
                ],
                B6: [
                    354.33,
                    498.9
                ],
                B7: [
                    249.45,
                    354.33
                ],
                B8: [
                    175.75,
                    249.45
                ],
                B9: [
                    124.72,
                    175.75
                ],
                B10: [
                    87.87,
                    124.72
                ],
                C0: [
                    2599.37,
                    3676.54
                ],
                C1: [
                    1836.85,
                    2599.37
                ],
                C2: [
                    1298.27,
                    1836.85
                ],
                C3: [
                    918.43,
                    1298.27
                ],
                C4: [
                    649.13,
                    918.43
                ],
                C5: [
                    459.21,
                    649.13
                ],
                C6: [
                    323.15,
                    459.21
                ],
                C7: [
                    229.61,
                    323.15
                ],
                C8: [
                    161.57,
                    229.61
                ],
                C9: [
                    113.39,
                    161.57
                ],
                C10: [
                    79.37,
                    113.39
                ],
                RA0: [
                    2437.8,
                    3458.27
                ],
                RA1: [
                    1729.13,
                    2437.8
                ],
                RA2: [
                    1218.9,
                    1729.13
                ],
                RA3: [
                    864.57,
                    1218.9
                ],
                RA4: [
                    609.45,
                    864.57
                ],
                SRA0: [
                    2551.18,
                    3628.35
                ],
                SRA1: [
                    1814.17,
                    2551.18
                ],
                SRA2: [
                    1275.59,
                    1814.17
                ],
                SRA3: [
                    907.09,
                    1275.59
                ],
                SRA4: [
                    637.8,
                    907.09
                ],
                EXECUTIVE: [
                    521.86,
                    756.0
                ],
                FOLIO: [
                    612.0,
                    936.0
                ],
                LEGAL: [
                    612.0,
                    1008.0
                ],
                LETTER: [
                    612.0,
                    792.0
                ],
                TABLOID: [
                    792.0,
                    1224.0
                ]
            }, PDFPage = function() {
                function PDFPage(document, options) {
                    void 0 === options && (options = {}), this.document = document, this.size = options.size || 'letter', this.layout = options.layout || 'portrait', this.userUnit = options.userUnit || 1.0, this.margins = DEFAULT_MARGINS;
                    var dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];
                    this.width = dimensions['portrait' === this.layout ? 0 : 1], this.height = dimensions['portrait' === this.layout ? 1 : 0], this.content = this.document.ref(), this.resources = this.document.ref({
                        ProcSet: [
                            'PDF',
                            'Text',
                            'ImageB',
                            'ImageC',
                            'ImageI'
                        ]
                    }), this.dictionary = this.document.ref({
                        Type: 'Page',
                        Parent: this.document._root.data.Pages,
                        MediaBox: [
                            0,
                            0,
                            this.width,
                            this.height
                        ],
                        Contents: this.content,
                        Resources: this.resources,
                        UserUnit: this.userUnit
                    });
                }
                var _proto = PDFPage.prototype;
                return _proto.maxY = function() {
                    return this.height;
                }, _proto.write = function(chunk) {
                    return this.content.write(chunk);
                }, _proto.end = function() {
                    return this.dictionary.end(), this.resources.end(), this.content.end();
                }, _createClass(PDFPage, [
                    {
                        key: "fonts",
                        get: function() {
                            var data = this.resources.data;
                            return null != data.Font ? data.Font : data.Font = {};
                        }
                    },
                    {
                        key: "xobjects",
                        get: function() {
                            var data = this.resources.data;
                            return null != data.XObject ? data.XObject : data.XObject = {};
                        }
                    },
                    {
                        key: "ext_gstates",
                        get: function() {
                            var data = this.resources.data;
                            return null != data.ExtGState ? data.ExtGState : data.ExtGState = {};
                        }
                    },
                    {
                        key: "patterns",
                        get: function() {
                            var data = this.resources.data;
                            return null != data.Pattern ? data.Pattern : data.Pattern = {};
                        }
                    },
                    {
                        key: "colorSpaces",
                        get: function() {
                            var data = this.resources.data;
                            return data.ColorSpace || (data.ColorSpace = {});
                        }
                    },
                    {
                        key: "annotations",
                        get: function() {
                            var data = this.dictionary.data;
                            return null != data.Annots ? data.Annots : data.Annots = [];
                        }
                    },
                    {
                        key: "structParentTreeKey",
                        get: function() {
                            var data = this.dictionary.data;
                            return null != data.StructParents ? data.StructParents : data.StructParents = this.document.createStructParentTreeNextKey();
                        }
                    }
                ]), PDFPage;
            }(), wordArrayToBuffer = function(wordArray) {
                for(var byteArray = [], i = 0; i < wordArray.sigBytes; i++)byteArray.push(wordArray.words[Math.floor(i / 4)] >> 8 * (3 - i % 4) & 0xff);
                return Buffer$4.from(byteArray);
            }, PDFSecurity = function() {
                function PDFSecurity() {}
                return PDFSecurity.generateFileID = function(info) {
                    void 0 === info && (info = {});
                    var infoStr = info.CreationDate.getTime() + "\n";
                    for(var key in info)info.hasOwnProperty(key) && (infoStr += key + ": " + info[key].valueOf() + "\n");
                    return wordArrayToBuffer(crypto_js_md5__WEBPACK_IMPORTED_MODULE_4___default()(infoStr));
                }, PDFSecurity;
            }(), number$2 = PDFObject$1.number, PDFGradient$1 = function() {
                function PDFGradient(doc) {
                    this.doc = doc, this.stops = [], this.embedded = !1, this.transform = [
                        1,
                        0,
                        0,
                        1,
                        0,
                        0
                    ];
                }
                var _proto = PDFGradient.prototype;
                return _proto.stop = function(pos, color, opacity) {
                    if (null == opacity && (opacity = 1), color = this.doc._normalizeColor(color), 0 === this.stops.length) {
                        if (3 === color.length) this._colorSpace = 'DeviceRGB';
                        else if (4 === color.length) this._colorSpace = 'DeviceCMYK';
                        else if (1 === color.length) this._colorSpace = 'DeviceGray';
                        else throw Error('Unknown color space');
                    } else if ('DeviceRGB' === this._colorSpace && 3 !== color.length || 'DeviceCMYK' === this._colorSpace && 4 !== color.length || 'DeviceGray' === this._colorSpace && 1 !== color.length) throw Error('All gradient stops must use the same color space');
                    return opacity = Math.max(0, Math.min(1, opacity)), this.stops.push([
                        pos,
                        color,
                        opacity
                    ]), this;
                }, _proto.setTransform = function(m11, m12, m21, m22, dx, dy) {
                    return this.transform = [
                        m11,
                        m12,
                        m21,
                        m22,
                        dx,
                        dy
                    ], this;
                }, _proto.embed = function(m) {
                    var stopsLength = this.stops.length;
                    if (0 !== stopsLength) {
                        this.embedded = !0, this.matrix = m;
                        var last = this.stops[stopsLength - 1];
                        last[0] < 1 && this.stops.push([
                            1,
                            last[1],
                            last[2]
                        ]);
                        for(var bounds = [], encode = [], stops = [], i = 0; i < stopsLength - 1; i++)encode.push(0, 1), i + 2 !== stopsLength && bounds.push(this.stops[i + 1][0]), stops.push(fn = this.doc.ref({
                            FunctionType: 2,
                            Domain: [
                                0,
                                1
                            ],
                            C0: this.stops[i + 0][1],
                            C1: this.stops[i + 1][1],
                            N: 1
                        })), fn.end();
                        1 === stopsLength ? fn = stops[0] : (fn = this.doc.ref({
                            FunctionType: 3,
                            Domain: [
                                0,
                                1
                            ],
                            Functions: stops,
                            Bounds: bounds,
                            Encode: encode
                        })).end(), this.id = "Sh" + ++this.doc._gradCount;
                        var shader = this.shader(fn);
                        shader.end();
                        var pattern = this.doc.ref({
                            Type: 'Pattern',
                            PatternType: 2,
                            Shading: shader,
                            Matrix: this.matrix.map(number$2)
                        });
                        if (pattern.end(), this.stops.some(function(stop) {
                            return stop[2] < 1;
                        })) {
                            var grad = this.opacityGradient();
                            grad._colorSpace = 'DeviceGray';
                            for(var fn, _step, _iterator = (0, _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_9__.Z)(this.stops); !(_step = _iterator()).done;){
                                var stop = _step.value;
                                grad.stop(stop[0], [
                                    stop[2]
                                ]);
                            }
                            grad = grad.embed(this.matrix);
                            var pageBBox = [
                                0,
                                0,
                                this.doc.page.width,
                                this.doc.page.height
                            ], form = this.doc.ref({
                                Type: 'XObject',
                                Subtype: 'Form',
                                FormType: 1,
                                BBox: pageBBox,
                                Group: {
                                    Type: 'Group',
                                    S: 'Transparency',
                                    CS: 'DeviceGray'
                                },
                                Resources: {
                                    ProcSet: [
                                        'PDF',
                                        'Text',
                                        'ImageB',
                                        'ImageC',
                                        'ImageI'
                                    ],
                                    Pattern: {
                                        Sh1: grad
                                    }
                                }
                            });
                            form.write('/Pattern cs /Sh1 scn'), form.end(pageBBox.join(' ') + " re f");
                            var gstate = this.doc.ref({
                                Type: 'ExtGState',
                                SMask: {
                                    Type: 'Mask',
                                    S: 'Luminosity',
                                    G: form
                                }
                            });
                            gstate.end();
                            var opacityPattern = this.doc.ref({
                                Type: 'Pattern',
                                PatternType: 1,
                                PaintType: 1,
                                TilingType: 2,
                                BBox: pageBBox,
                                XStep: pageBBox[2],
                                YStep: pageBBox[3],
                                Resources: {
                                    ProcSet: [
                                        'PDF',
                                        'Text',
                                        'ImageB',
                                        'ImageC',
                                        'ImageI'
                                    ],
                                    Pattern: {
                                        Sh1: pattern
                                    },
                                    ExtGState: {
                                        Gs1: gstate
                                    }
                                }
                            });
                            opacityPattern.write('/Gs1 gs /Pattern cs /Sh1 scn'), opacityPattern.end(pageBBox.join(' ') + " re f"), this.doc.page.patterns[this.id] = opacityPattern;
                        } else this.doc.page.patterns[this.id] = pattern;
                        return pattern;
                    }
                }, _proto.apply = function(op) {
                    var _this$doc$_ctm = this.doc._ctm, m0 = _this$doc$_ctm[0], m1 = _this$doc$_ctm[1], m2 = _this$doc$_ctm[2], m3 = _this$doc$_ctm[3], m4 = _this$doc$_ctm[4], m5 = _this$doc$_ctm[5], _this$transform = this.transform, m11 = _this$transform[0], m12 = _this$transform[1], m21 = _this$transform[2], m22 = _this$transform[3], dx = _this$transform[4], dy = _this$transform[5], m = [
                        m0 * m11 + m2 * m12,
                        m1 * m11 + m3 * m12,
                        m0 * m21 + m2 * m22,
                        m1 * m21 + m3 * m22,
                        m0 * dx + m2 * dy + m4,
                        m1 * dx + m3 * dy + m5
                    ];
                    return this.embedded && m.join(' ') === this.matrix.join(' ') || this.embed(m), this.doc.addContent("/" + this.id + " " + op);
                }, PDFGradient;
            }(), PDFLinearGradient$1 = function(_PDFGradient) {
                function PDFLinearGradient(doc, x1, y1, x2, y2) {
                    var _this;
                    return (_this = _PDFGradient.call(this, doc) || this).x1 = x1, _this.y1 = y1, _this.x2 = x2, _this.y2 = y2, _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__.Z)(PDFLinearGradient, _PDFGradient);
                var _proto2 = PDFLinearGradient.prototype;
                return _proto2.shader = function(fn) {
                    return this.doc.ref({
                        ShadingType: 2,
                        ColorSpace: this._colorSpace,
                        Coords: [
                            this.x1,
                            this.y1,
                            this.x2,
                            this.y2
                        ],
                        Function: fn,
                        Extend: [
                            !0,
                            !0
                        ]
                    });
                }, _proto2.opacityGradient = function() {
                    return new PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);
                }, PDFLinearGradient;
            }(PDFGradient$1), PDFRadialGradient$1 = function(_PDFGradient2) {
                function PDFRadialGradient(doc, x1, y1, r1, x2, y2, r2) {
                    var _this2;
                    return (_this2 = _PDFGradient2.call(this, doc) || this).doc = doc, _this2.x1 = x1, _this2.y1 = y1, _this2.r1 = r1, _this2.x2 = x2, _this2.y2 = y2, _this2.r2 = r2, _this2;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__.Z)(PDFRadialGradient, _PDFGradient2);
                var _proto3 = PDFRadialGradient.prototype;
                return _proto3.shader = function(fn) {
                    return this.doc.ref({
                        ShadingType: 3,
                        ColorSpace: this._colorSpace,
                        Coords: [
                            this.x1,
                            this.y1,
                            this.r1,
                            this.x2,
                            this.y2,
                            this.r2
                        ],
                        Function: fn,
                        Extend: [
                            !0,
                            !0
                        ]
                    });
                }, _proto3.opacityGradient = function() {
                    return new PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);
                }, PDFRadialGradient;
            }(PDFGradient$1), Gradient = {
                PDFGradient: PDFGradient$1,
                PDFLinearGradient: PDFLinearGradient$1,
                PDFRadialGradient: PDFRadialGradient$1
            }, PDFGradient = Gradient.PDFGradient, PDFLinearGradient = Gradient.PDFLinearGradient, PDFRadialGradient = Gradient.PDFRadialGradient, namedColors = {
                aliceblue: [
                    240,
                    248,
                    255
                ],
                antiquewhite: [
                    250,
                    235,
                    215
                ],
                aqua: [
                    0,
                    255,
                    255
                ],
                aquamarine: [
                    127,
                    255,
                    212
                ],
                azure: [
                    240,
                    255,
                    255
                ],
                beige: [
                    245,
                    245,
                    220
                ],
                bisque: [
                    255,
                    228,
                    196
                ],
                black: [
                    0,
                    0,
                    0
                ],
                blanchedalmond: [
                    255,
                    235,
                    205
                ],
                blue: [
                    0,
                    0,
                    255
                ],
                blueviolet: [
                    138,
                    43,
                    226
                ],
                brown: [
                    165,
                    42,
                    42
                ],
                burlywood: [
                    222,
                    184,
                    135
                ],
                cadetblue: [
                    95,
                    158,
                    160
                ],
                chartreuse: [
                    127,
                    255,
                    0
                ],
                chocolate: [
                    210,
                    105,
                    30
                ],
                coral: [
                    255,
                    127,
                    80
                ],
                cornflowerblue: [
                    100,
                    149,
                    237
                ],
                cornsilk: [
                    255,
                    248,
                    220
                ],
                crimson: [
                    220,
                    20,
                    60
                ],
                cyan: [
                    0,
                    255,
                    255
                ],
                darkblue: [
                    0,
                    0,
                    139
                ],
                darkcyan: [
                    0,
                    139,
                    139
                ],
                darkgoldenrod: [
                    184,
                    134,
                    11
                ],
                darkgray: [
                    169,
                    169,
                    169
                ],
                darkgreen: [
                    0,
                    100,
                    0
                ],
                darkgrey: [
                    169,
                    169,
                    169
                ],
                darkkhaki: [
                    189,
                    183,
                    107
                ],
                darkmagenta: [
                    139,
                    0,
                    139
                ],
                darkolivegreen: [
                    85,
                    107,
                    47
                ],
                darkorange: [
                    255,
                    140,
                    0
                ],
                darkorchid: [
                    153,
                    50,
                    204
                ],
                darkred: [
                    139,
                    0,
                    0
                ],
                darksalmon: [
                    233,
                    150,
                    122
                ],
                darkseagreen: [
                    143,
                    188,
                    143
                ],
                darkslateblue: [
                    72,
                    61,
                    139
                ],
                darkslategray: [
                    47,
                    79,
                    79
                ],
                darkslategrey: [
                    47,
                    79,
                    79
                ],
                darkturquoise: [
                    0,
                    206,
                    209
                ],
                darkviolet: [
                    148,
                    0,
                    211
                ],
                deeppink: [
                    255,
                    20,
                    147
                ],
                deepskyblue: [
                    0,
                    191,
                    255
                ],
                dimgray: [
                    105,
                    105,
                    105
                ],
                dimgrey: [
                    105,
                    105,
                    105
                ],
                dodgerblue: [
                    30,
                    144,
                    255
                ],
                firebrick: [
                    178,
                    34,
                    34
                ],
                floralwhite: [
                    255,
                    250,
                    240
                ],
                forestgreen: [
                    34,
                    139,
                    34
                ],
                fuchsia: [
                    255,
                    0,
                    255
                ],
                gainsboro: [
                    220,
                    220,
                    220
                ],
                ghostwhite: [
                    248,
                    248,
                    255
                ],
                gold: [
                    255,
                    215,
                    0
                ],
                goldenrod: [
                    218,
                    165,
                    32
                ],
                gray: [
                    128,
                    128,
                    128
                ],
                grey: [
                    128,
                    128,
                    128
                ],
                green: [
                    0,
                    128,
                    0
                ],
                greenyellow: [
                    173,
                    255,
                    47
                ],
                honeydew: [
                    240,
                    255,
                    240
                ],
                hotpink: [
                    255,
                    105,
                    180
                ],
                indianred: [
                    205,
                    92,
                    92
                ],
                indigo: [
                    75,
                    0,
                    130
                ],
                ivory: [
                    255,
                    255,
                    240
                ],
                khaki: [
                    240,
                    230,
                    140
                ],
                lavender: [
                    230,
                    230,
                    250
                ],
                lavenderblush: [
                    255,
                    240,
                    245
                ],
                lawngreen: [
                    124,
                    252,
                    0
                ],
                lemonchiffon: [
                    255,
                    250,
                    205
                ],
                lightblue: [
                    173,
                    216,
                    230
                ],
                lightcoral: [
                    240,
                    128,
                    128
                ],
                lightcyan: [
                    224,
                    255,
                    255
                ],
                lightgoldenrodyellow: [
                    250,
                    250,
                    210
                ],
                lightgray: [
                    211,
                    211,
                    211
                ],
                lightgreen: [
                    144,
                    238,
                    144
                ],
                lightgrey: [
                    211,
                    211,
                    211
                ],
                lightpink: [
                    255,
                    182,
                    193
                ],
                lightsalmon: [
                    255,
                    160,
                    122
                ],
                lightseagreen: [
                    32,
                    178,
                    170
                ],
                lightskyblue: [
                    135,
                    206,
                    250
                ],
                lightslategray: [
                    119,
                    136,
                    153
                ],
                lightslategrey: [
                    119,
                    136,
                    153
                ],
                lightsteelblue: [
                    176,
                    196,
                    222
                ],
                lightyellow: [
                    255,
                    255,
                    224
                ],
                lime: [
                    0,
                    255,
                    0
                ],
                limegreen: [
                    50,
                    205,
                    50
                ],
                linen: [
                    250,
                    240,
                    230
                ],
                magenta: [
                    255,
                    0,
                    255
                ],
                maroon: [
                    128,
                    0,
                    0
                ],
                mediumaquamarine: [
                    102,
                    205,
                    170
                ],
                mediumblue: [
                    0,
                    0,
                    205
                ],
                mediumorchid: [
                    186,
                    85,
                    211
                ],
                mediumpurple: [
                    147,
                    112,
                    219
                ],
                mediumseagreen: [
                    60,
                    179,
                    113
                ],
                mediumslateblue: [
                    123,
                    104,
                    238
                ],
                mediumspringgreen: [
                    0,
                    250,
                    154
                ],
                mediumturquoise: [
                    72,
                    209,
                    204
                ],
                mediumvioletred: [
                    199,
                    21,
                    133
                ],
                midnightblue: [
                    25,
                    25,
                    112
                ],
                mintcream: [
                    245,
                    255,
                    250
                ],
                mistyrose: [
                    255,
                    228,
                    225
                ],
                moccasin: [
                    255,
                    228,
                    181
                ],
                navajowhite: [
                    255,
                    222,
                    173
                ],
                navy: [
                    0,
                    0,
                    128
                ],
                oldlace: [
                    253,
                    245,
                    230
                ],
                olive: [
                    128,
                    128,
                    0
                ],
                olivedrab: [
                    107,
                    142,
                    35
                ],
                orange: [
                    255,
                    165,
                    0
                ],
                orangered: [
                    255,
                    69,
                    0
                ],
                orchid: [
                    218,
                    112,
                    214
                ],
                palegoldenrod: [
                    238,
                    232,
                    170
                ],
                palegreen: [
                    152,
                    251,
                    152
                ],
                paleturquoise: [
                    175,
                    238,
                    238
                ],
                palevioletred: [
                    219,
                    112,
                    147
                ],
                papayawhip: [
                    255,
                    239,
                    213
                ],
                peachpuff: [
                    255,
                    218,
                    185
                ],
                peru: [
                    205,
                    133,
                    63
                ],
                pink: [
                    255,
                    192,
                    203
                ],
                plum: [
                    221,
                    160,
                    221
                ],
                powderblue: [
                    176,
                    224,
                    230
                ],
                purple: [
                    128,
                    0,
                    128
                ],
                red: [
                    255,
                    0,
                    0
                ],
                rosybrown: [
                    188,
                    143,
                    143
                ],
                royalblue: [
                    65,
                    105,
                    225
                ],
                saddlebrown: [
                    139,
                    69,
                    19
                ],
                salmon: [
                    250,
                    128,
                    114
                ],
                sandybrown: [
                    244,
                    164,
                    96
                ],
                seagreen: [
                    46,
                    139,
                    87
                ],
                seashell: [
                    255,
                    245,
                    238
                ],
                sienna: [
                    160,
                    82,
                    45
                ],
                silver: [
                    192,
                    192,
                    192
                ],
                skyblue: [
                    135,
                    206,
                    235
                ],
                slateblue: [
                    106,
                    90,
                    205
                ],
                slategray: [
                    112,
                    128,
                    144
                ],
                slategrey: [
                    112,
                    128,
                    144
                ],
                snow: [
                    255,
                    250,
                    250
                ],
                springgreen: [
                    0,
                    255,
                    127
                ],
                steelblue: [
                    70,
                    130,
                    180
                ],
                tan: [
                    210,
                    180,
                    140
                ],
                teal: [
                    0,
                    128,
                    128
                ],
                thistle: [
                    216,
                    191,
                    216
                ],
                tomato: [
                    255,
                    99,
                    71
                ],
                turquoise: [
                    64,
                    224,
                    208
                ],
                violet: [
                    238,
                    130,
                    238
                ],
                wheat: [
                    245,
                    222,
                    179
                ],
                white: [
                    255,
                    255,
                    255
                ],
                whitesmoke: [
                    245,
                    245,
                    245
                ],
                yellow: [
                    255,
                    255,
                    0
                ],
                yellowgreen: [
                    154,
                    205,
                    50
                ]
            };
            cx = cy = px = py = sx = sy = 0;
            var argsCountPerCommand = {
                M: 2,
                m: 2,
                Z: 0,
                z: 0,
                L: 2,
                l: 2,
                H: 1,
                h: 1,
                V: 1,
                v: 1,
                C: 6,
                c: 6,
                S: 4,
                s: 4,
                Q: 4,
                q: 4,
                T: 2,
                t: 2,
                A: 7,
                a: 7
            }, isWsp = function(c) {
                var codePoint = c.codePointAt(0);
                return 0x20 === codePoint || 0x9 === codePoint || 0xd === codePoint || 0xa === codePoint;
            }, isDigit = function(c) {
                var codePoint = c.codePointAt(0);
                return null != codePoint && 48 <= codePoint && codePoint <= 57;
            }, readNumber = function(string, cursor) {
                for(var i = cursor, value = '', state = 'none'; i < string.length; i += 1){
                    var c = string[i];
                    if ('+' === c || '-' === c) {
                        if ('none' === state) {
                            state = 'sign', value += c;
                            continue;
                        }
                        if ('e' === state) {
                            state = 'exponent_sign', value += c;
                            continue;
                        }
                    }
                    if (isDigit(c)) {
                        if ('none' === state || 'sign' === state || 'whole' === state) {
                            state = 'whole', value += c;
                            continue;
                        }
                        if ('decimal_point' === state || 'decimal' === state) {
                            state = 'decimal', value += c;
                            continue;
                        }
                        if ('e' === state || 'exponent_sign' === state || 'exponent' === state) {
                            state = 'exponent', value += c;
                            continue;
                        }
                    }
                    if ('.' === c && ('none' === state || 'sign' === state || 'whole' === state)) {
                        state = 'decimal_point', value += c;
                        continue;
                    }
                    if (('E' === c || 'e' === c) && ('whole' === state || 'decimal_point' === state || 'decimal' === state)) {
                        state = 'e', value += c;
                        continue;
                    }
                    break;
                }
                var number = Number.parseFloat(value);
                return Number.isNaN(number) ? [
                    cursor,
                    null
                ] : [
                    i - 1,
                    number
                ];
            }, parsePathData = function(string) {
                for(var pathData = [], command = null, args = [], argsCount = 0, canHaveComma = !1, hadComma = !1, i = 0; i < string.length; i += 1){
                    var c = string.charAt(i);
                    if (!isWsp(c)) {
                        if (canHaveComma && ',' === c) {
                            if (hadComma) break;
                            hadComma = !0;
                            continue;
                        }
                        if (function(c) {
                            return c in argsCountPerCommand;
                        }(c)) {
                            if (hadComma) return pathData;
                            if (null == command) {
                                if ('M' !== c && 'm' !== c) return pathData;
                            } else if (0 !== args.length) return pathData;
                            args = [], argsCount = argsCountPerCommand[command = c], canHaveComma = !1, 0 === argsCount && pathData.push({
                                command: command,
                                args: args
                            });
                            continue;
                        }
                        if (null == command) break;
                        var newCursor = i, number = null;
                        if ('A' === command || 'a' === command) {
                            var position = args.length;
                            if ((0 === position || 1 === position) && '+' !== c && '-' !== c) {
                                var _readNumber = readNumber(string, i);
                                newCursor = _readNumber[0], number = _readNumber[1];
                            }
                            if (2 === position || 5 === position || 6 === position) {
                                var _readNumber2 = readNumber(string, i);
                                newCursor = _readNumber2[0], number = _readNumber2[1];
                            }
                            (3 === position || 4 === position) && ('0' === c && (number = 0), '1' === c && (number = 1));
                        } else {
                            var _readNumber3 = readNumber(string, i);
                            newCursor = _readNumber3[0], number = _readNumber3[1];
                        }
                        if (null == number) break;
                        args.push(number), canHaveComma = !0, hadComma = !1, i = newCursor, args.length === argsCount && (pathData.push({
                            command: command,
                            args: args
                        }), 'M' === command && (command = 'L'), 'm' === command && (command = 'l'), args = []);
                    }
                }
                return pathData;
            }, _apply = function(commands, doc) {
                cx = cy = px = py = sx = sy = 0;
                for(var i = 0; i < commands.length; i++){
                    var _commands$i = commands[i], command = _commands$i.command, args = _commands$i.args;
                    'function' == typeof runners[command] && runners[command](doc, args);
                }
            }, runners = {
                M: function(doc, a) {
                    return cx = a[0], cy = a[1], px = py = null, sx = cx, sy = cy, doc.moveTo(cx, cy);
                },
                m: function(doc, a) {
                    return cx += a[0], cy += a[1], px = py = null, sx = cx, sy = cy, doc.moveTo(cx, cy);
                },
                C: function(doc, a) {
                    return cx = a[4], cy = a[5], px = a[2], py = a[3], doc.bezierCurveTo.apply(doc, a);
                },
                c: function(doc, a) {
                    return doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy), px = cx + a[2], py = cy + a[3], cx += a[4], cy += a[5];
                },
                S: function(doc, a) {
                    return null === px && (px = cx, py = cy), doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]), px = a[0], py = a[1], cx = a[2], cy = a[3];
                },
                s: function(doc, a) {
                    return null === px && (px = cx, py = cy), doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]), px = cx + a[0], py = cy + a[1], cx += a[2], cy += a[3];
                },
                Q: function(doc, a) {
                    return px = a[0], py = a[1], cx = a[2], cy = a[3], doc.quadraticCurveTo(a[0], a[1], cx, cy);
                },
                q: function(doc, a) {
                    return doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy), px = cx + a[0], py = cy + a[1], cx += a[2], cy += a[3];
                },
                T: function(doc, a) {
                    return null === px ? (px = cx, py = cy) : (px = cx - (px - cx), py = cy - (py - cy)), doc.quadraticCurveTo(px, py, a[0], a[1]), px = cx - (px - cx), py = cy - (py - cy), cx = a[0], cy = a[1];
                },
                t: function(doc, a) {
                    return null === px ? (px = cx, py = cy) : (px = cx - (px - cx), py = cy - (py - cy)), doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]), cx += a[0], cy += a[1];
                },
                A: function(doc, a) {
                    return solveArc(doc, cx, cy, a), cx = a[5], cy = a[6];
                },
                a: function(doc, _a) {
                    return _a[5] += cx, _a[6] += cy, solveArc(doc, cx, cy, _a), cx = _a[5], cy = _a[6];
                },
                L: function(doc, a) {
                    return cx = a[0], cy = a[1], px = py = null, doc.lineTo(cx, cy);
                },
                l: function(doc, a) {
                    return cx += a[0], cy += a[1], px = py = null, doc.lineTo(cx, cy);
                },
                H: function(doc, a) {
                    return cx = a[0], px = py = null, doc.lineTo(cx, cy);
                },
                h: function(doc, a) {
                    return cx += a[0], px = py = null, doc.lineTo(cx, cy);
                },
                V: function(doc, a) {
                    return cy = a[0], px = py = null, doc.lineTo(cx, cy);
                },
                v: function(doc, a) {
                    return cy += a[0], px = py = null, doc.lineTo(cx, cy);
                },
                Z: function(doc) {
                    return doc.closePath(), cx = sx, cy = sy;
                },
                z: function(doc) {
                    return doc.closePath(), cx = sx, cy = sy;
                }
            }, solveArc = function(doc, x, y, coords) {
                for(var _step, rx = coords[0], ry = coords[1], rot = coords[2], large = coords[3], sweep = coords[4], ex = coords[5], segs = arcToSegments(ex, coords[6], rx, ry, large, sweep, rot, x, y), _iterator = (0, _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_9__.Z)(segs); !(_step = _iterator()).done;){
                    var seg = _step.value, bez = segmentToBezier.apply(void 0, seg);
                    doc.bezierCurveTo.apply(doc, bez);
                }
            }, arcToSegments = function(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
                var th = rotateX * (Math.PI / 180), sin_th = Math.sin(th), cos_th = Math.cos(th);
                rx = Math.abs(rx), ry = Math.abs(ry);
                var pl = (px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5) * px / (rx * rx) + (py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5) * py / (ry * ry);
                pl > 1 && (rx *= pl = Math.sqrt(pl), ry *= pl);
                var a00 = cos_th / rx, a01 = sin_th / rx, a10 = -sin_th / ry, a11 = cos_th / ry, x0 = a00 * ox + a01 * oy, y0 = a10 * ox + a11 * oy, x1 = a00 * x + a01 * y, y1 = a10 * x + a11 * y, sfactor_sq = 1 / ((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0)) - 0.25;
                sfactor_sq < 0 && (sfactor_sq = 0);
                var sfactor = Math.sqrt(sfactor_sq);
                sweep === large && (sfactor = -sfactor);
                var xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0), yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0), th0 = Math.atan2(y0 - yc, x0 - xc), th_arc = Math.atan2(y1 - yc, x1 - xc) - th0;
                th_arc < 0 && 1 === sweep ? th_arc += 2 * Math.PI : th_arc > 0 && 0 === sweep && (th_arc -= 2 * Math.PI);
                for(var segments = Math.ceil(Math.abs(th_arc / (0.5 * Math.PI + 0.001))), result = [], i = 0; i < segments; i++){
                    var th2 = th0 + i * th_arc / segments, th3 = th0 + (i + 1) * th_arc / segments;
                    result[i] = [
                        xc,
                        yc,
                        th2,
                        th3,
                        rx,
                        ry,
                        sin_th,
                        cos_th
                    ];
                }
                return result;
            }, segmentToBezier = function(cx, cy, th0, th1, rx, ry, sin_th, cos_th) {
                var a00 = cos_th * rx, a01 = -sin_th * ry, a10 = sin_th * rx, a11 = cos_th * ry, th_half = 0.5 * (th1 - th0), t = 8 / 3 * Math.sin(0.5 * th_half) * Math.sin(0.5 * th_half) / Math.sin(th_half), x1 = cx + Math.cos(th0) - t * Math.sin(th0), y1 = cy + Math.sin(th0) + t * Math.cos(th0), x3 = cx + Math.cos(th1), y3 = cy + Math.sin(th1), x2 = x3 + t * Math.sin(th1), y2 = y3 - t * Math.cos(th1);
                return [
                    a00 * x1 + a01 * y1,
                    a10 * x1 + a11 * y1,
                    a00 * x2 + a01 * y2,
                    a10 * x2 + a11 * y2,
                    a00 * x3 + a01 * y3,
                    a10 * x3 + a11 * y3
                ];
            }, SVGPath = function() {
                function SVGPath() {}
                return SVGPath.apply = function(doc, path) {
                    var commands = parsePathData(path);
                    _apply(commands, doc);
                }, SVGPath;
            }(), number$1 = PDFObject$1.number, KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0), range = function(left, right, inclusive) {
                for(var range = [], ascending = left < right, end = inclusive ? ascending ? right + 1 : right - 1 : right, i = left; ascending ? i < end : i > end; ascending ? i++ : i--)range.push(i);
                return range;
            }, WIN_ANSI_MAP = {
                402: 131,
                8211: 150,
                8212: 151,
                8216: 145,
                8217: 146,
                8218: 130,
                8220: 147,
                8221: 148,
                8222: 132,
                8224: 134,
                8225: 135,
                8226: 149,
                8230: 133,
                8364: 128,
                8240: 137,
                8249: 139,
                8250: 155,
                710: 136,
                8482: 153,
                338: 140,
                339: 156,
                732: 152,
                352: 138,
                353: 154,
                376: 159,
                381: 142,
                382: 158
            }, characters = ".notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n\nspace         exclam         quotedbl       numbersign\ndollar        percent        ampersand      quotesingle\nparenleft     parenright     asterisk       plus\ncomma         hyphen         period         slash\nzero          one            two            three\nfour          five           six            seven\neight         nine           colon          semicolon\nless          equal          greater        question\n\nat            A              B              C\nD             E              F              G\nH             I              J              K\nL             M              N              O\nP             Q              R              S\nT             U              V              W\nX             Y              Z              bracketleft\nbackslash     bracketright   asciicircum    underscore\n\ngrave         a              b              c\nd             e              f              g\nh             i              j              k\nl             m              n              o\np             q              r              s\nt             u              v              w\nx             y              z              braceleft\nbar           braceright     asciitilde     .notdef\n\nEuro          .notdef        quotesinglbase florin\nquotedblbase  ellipsis       dagger         daggerdbl\ncircumflex    perthousand    Scaron         guilsinglleft\nOE            .notdef        Zcaron         .notdef\n.notdef       quoteleft      quoteright     quotedblleft\nquotedblright bullet         endash         emdash\ntilde         trademark      scaron         guilsinglright\noe            .notdef        zcaron         ydieresis\n\nspace         exclamdown     cent           sterling\ncurrency      yen            brokenbar      section\ndieresis      copyright      ordfeminine    guillemotleft\nlogicalnot    hyphen         registered     macron\ndegree        plusminus      twosuperior    threesuperior\nacute         mu             paragraph      periodcentered\ncedilla       onesuperior    ordmasculine   guillemotright\nonequarter    onehalf        threequarters  questiondown\n\nAgrave        Aacute         Acircumflex    Atilde\nAdieresis     Aring          AE             Ccedilla\nEgrave        Eacute         Ecircumflex    Edieresis\nIgrave        Iacute         Icircumflex    Idieresis\nEth           Ntilde         Ograve         Oacute\nOcircumflex   Otilde         Odieresis      multiply\nOslash        Ugrave         Uacute         Ucircumflex\nUdieresis     Yacute         Thorn          germandbls\n\nagrave        aacute         acircumflex    atilde\nadieresis     aring          ae             ccedilla\negrave        eacute         ecircumflex    edieresis\nigrave        iacute         icircumflex    idieresis\neth           ntilde         ograve         oacute\nocircumflex   otilde         odieresis      divide\noslash        ugrave         uacute         ucircumflex\nudieresis     yacute         thorn          ydieresis".split(/\s+/);
            function _parse(contents) {
                for(var _step, obj = {
                    attributes: {},
                    glyphWidths: {},
                    kernPairs: {}
                }, section = '', _iterator = (0, _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_9__.Z)(contents.split('\n')); !(_step = _iterator()).done;){
                    var match, a, line = _step.value;
                    if (match = line.match(/^Start(\w+)/)) {
                        section = match[1];
                        continue;
                    }
                    if (match = line.match(/^End(\w+)/)) {
                        section = '';
                        continue;
                    }
                    switch(section){
                        case 'FontMetrics':
                            var key = (match = line.match(/(^\w+)\s+(.*)/))[1], value = match[2];
                            (a = obj.attributes[key]) ? (Array.isArray(a) || (a = obj.attributes[key] = [
                                a
                            ]), a.push(value)) : obj.attributes[key] = value;
                            break;
                        case 'CharMetrics':
                            if (!/^CH?\s/.test(line)) continue;
                            var name = line.match(/\bN\s+(\.?\w+)\s*;/)[1];
                            obj.glyphWidths[name] = +line.match(/\bWX\s+(\d+)\s*;/)[1];
                            break;
                        case 'KernPairs':
                            (match = line.match(/^KPX\s+(\.?\w+)\s+(\.?\w+)\s+(-?\d+)/)) && (obj.kernPairs[match[1] + match[2]] = parseInt(match[3]));
                    }
                }
                return obj;
            }
            var AFMFont = function() {
                function AFMFont(contents) {
                    var _this = this;
                    'string' == typeof contents ? (this.contents = contents, this.parse()) : (this.attributes = contents.attributes, this.glyphWidths = contents.glyphWidths, this.kernPairs = contents.kernPairs), this.charWidths = range(0, 255, !0).map(function(i) {
                        return _this.glyphWidths[characters[i]];
                    }), this.bbox = Array.from(this.attributes.FontBBox.split(/\s+/)).map(function(e) {
                        return +e;
                    }), this.ascender = +(this.attributes.Ascender || 0), this.descender = +(this.attributes.Descender || 0), this.xHeight = +(this.attributes.XHeight || 0), this.capHeight = +(this.attributes.CapHeight || 0), this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);
                }
                AFMFont.open = function(filename) {
                    throw Error('AFMFont.open not available on browser build');
                }, AFMFont.fromJson = function(json) {
                    return new AFMFont(json);
                };
                var _proto = AFMFont.prototype;
                return _proto.parse = function() {
                    var parsed = _parse(this.contents);
                    this.attributes = parsed.attributes, this.glyphWidths = parsed.glyphWidths, this.kernPairs = parsed.kernPairs;
                }, _proto.encodeText = function(text) {
                    for(var res = [], i = 0, end = text.length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--){
                        var char = text.charCodeAt(i);
                        char = WIN_ANSI_MAP[char] || char, res.push(char.toString(16));
                    }
                    return res;
                }, _proto.glyphsForString = function(string) {
                    for(var glyphs = [], i = 0, end = string.length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--){
                        var charCode = string.charCodeAt(i);
                        glyphs.push(this.characterToGlyph(charCode));
                    }
                    return glyphs;
                }, _proto.characterToGlyph = function(character) {
                    return characters[WIN_ANSI_MAP[character] || character] || '.notdef';
                }, _proto.widthOfGlyph = function(glyph) {
                    return this.glyphWidths[glyph] || 0;
                }, _proto.getKernPair = function(left, right) {
                    return this.kernPairs[left + right] || 0;
                }, _proto.advancesForGlyphs = function(glyphs) {
                    for(var advances = [], index = 0; index < glyphs.length; index++){
                        var left = glyphs[index], right = glyphs[index + 1];
                        advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));
                    }
                    return advances;
                }, AFMFont;
            }(), initFont = function(font) {
                return [
                    font.FontName,
                    {
                        attributes: font,
                        glyphWidths: {},
                        kernPairs: {}
                    }
                ];
            }, STANDARD_FONTS = function(data) {
                var attributes = data.attributes, glyphWidths = data.glyphWidths, kernPairs = data.kernPairs, fonts = attributes.map(initFont);
                return Object.keys(glyphWidths).forEach(function(key) {
                    glyphWidths[key].forEach(function(value, index) {
                        value && (fonts[index][1].glyphWidths[key] = value);
                    });
                }), Object.keys(kernPairs).forEach(function(key) {
                    kernPairs[key].forEach(function(value, index) {
                        value && (fonts[index][1].kernPairs[key] = value);
                    });
                }), Object.fromEntries(fonts);
            }({
                attributes: [
                    {
                        Comment: [
                            "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                            "Creation Date: Thu May  1 12:43:52 1997",
                            "UniqueID 43052",
                            "VMusage 37169 48194"
                        ],
                        FontName: "Helvetica-Bold",
                        FullName: "Helvetica Bold",
                        FamilyName: "Helvetica",
                        Weight: "Bold",
                        ItalicAngle: "0",
                        IsFixedPitch: "false",
                        CharacterSet: "ExtendedRoman",
                        FontBBox: "-170 -228 1003 962 ",
                        UnderlinePosition: "-100",
                        UnderlineThickness: "50",
                        Version: "002.000",
                        Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                        EncodingScheme: "AdobeStandardEncoding",
                        CapHeight: "718",
                        XHeight: "532",
                        Ascender: "718",
                        Descender: "-207",
                        StdHW: "118",
                        StdVW: "140"
                    },
                    {
                        Comment: [
                            "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                            "Creation Date: Thu May  1 12:45:12 1997",
                            "UniqueID 43053",
                            "VMusage 14482 68586"
                        ],
                        FontName: "Helvetica-BoldOblique",
                        FullName: "Helvetica Bold Oblique",
                        FamilyName: "Helvetica",
                        Weight: "Bold",
                        ItalicAngle: "-12",
                        IsFixedPitch: "false",
                        CharacterSet: "ExtendedRoman",
                        FontBBox: "-174 -228 1114 962",
                        UnderlinePosition: "-100",
                        UnderlineThickness: "50",
                        Version: "002.000",
                        Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                        EncodingScheme: "AdobeStandardEncoding",
                        CapHeight: "718",
                        XHeight: "532",
                        Ascender: "718",
                        Descender: "-207",
                        StdHW: "118",
                        StdVW: "140"
                    },
                    {
                        Comment: [
                            "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                            "Creation Date: Thu May  1 12:44:31 1997",
                            "UniqueID 43055",
                            "VMusage 14960 69346"
                        ],
                        FontName: "Helvetica-Oblique",
                        FullName: "Helvetica Oblique",
                        FamilyName: "Helvetica",
                        Weight: "Medium",
                        ItalicAngle: "-12",
                        IsFixedPitch: "false",
                        CharacterSet: "ExtendedRoman",
                        FontBBox: "-170 -225 1116 931 ",
                        UnderlinePosition: "-100",
                        UnderlineThickness: "50",
                        Version: "002.000",
                        Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                        EncodingScheme: "AdobeStandardEncoding",
                        CapHeight: "718",
                        XHeight: "523",
                        Ascender: "718",
                        Descender: "-207",
                        StdHW: "76",
                        StdVW: "88"
                    },
                    {
                        Comment: [
                            "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                            "Creation Date: Thu May  1 12:38:23 1997",
                            "UniqueID 43054",
                            "VMusage 37069 48094"
                        ],
                        FontName: "Helvetica",
                        FullName: "Helvetica",
                        FamilyName: "Helvetica",
                        Weight: "Medium",
                        ItalicAngle: "0",
                        IsFixedPitch: "false",
                        CharacterSet: "ExtendedRoman",
                        FontBBox: "-166 -225 1000 931 ",
                        UnderlinePosition: "-100",
                        UnderlineThickness: "50",
                        Version: "002.000",
                        Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                        EncodingScheme: "AdobeStandardEncoding",
                        CapHeight: "718",
                        XHeight: "523",
                        Ascender: "718",
                        Descender: "-207",
                        StdHW: "76",
                        StdVW: "88"
                    },
                    {
                        Comment: [
                            "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                            "Creation Date: Thu May  1 12:52:56 1997",
                            "UniqueID 43065",
                            "VMusage 41636 52661"
                        ],
                        FontName: "Times-Bold",
                        FullName: "Times Bold",
                        FamilyName: "Times",
                        Weight: "Bold",
                        ItalicAngle: "0",
                        IsFixedPitch: "false",
                        CharacterSet: "ExtendedRoman",
                        FontBBox: "-168 -218 1000 935 ",
                        UnderlinePosition: "-100",
                        UnderlineThickness: "50",
                        Version: "002.000",
                        Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                        EncodingScheme: "AdobeStandardEncoding",
                        CapHeight: "676",
                        XHeight: "461",
                        Ascender: "683",
                        Descender: "-217",
                        StdHW: "44",
                        StdVW: "139"
                    },
                    {
                        Comment: [
                            "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                            "Creation Date: Thu May  1 13:04:06 1997",
                            "UniqueID 43066",
                            "VMusage 45874 56899"
                        ],
                        FontName: "Times-BoldItalic",
                        FullName: "Times Bold Italic",
                        FamilyName: "Times",
                        Weight: "Bold",
                        ItalicAngle: "-15",
                        IsFixedPitch: "false",
                        CharacterSet: "ExtendedRoman",
                        FontBBox: "-200 -218 996 921",
                        UnderlinePosition: "-100",
                        UnderlineThickness: "50",
                        Version: "002.000",
                        Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                        EncodingScheme: "AdobeStandardEncoding",
                        CapHeight: "669",
                        XHeight: "462",
                        Ascender: "683",
                        Descender: "-217",
                        StdHW: "42",
                        StdVW: "121"
                    },
                    {
                        Comment: [
                            "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                            "Creation Date: Thu May  1 12:56:55 1997",
                            "UniqueID 43067",
                            "VMusage 47727 58752"
                        ],
                        FontName: "Times-Italic",
                        FullName: "Times Italic",
                        FamilyName: "Times",
                        Weight: "Medium",
                        ItalicAngle: "-15.5",
                        IsFixedPitch: "false",
                        CharacterSet: "ExtendedRoman",
                        FontBBox: "-169 -217 1010 883 ",
                        UnderlinePosition: "-100",
                        UnderlineThickness: "50",
                        Version: "002.000",
                        Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                        EncodingScheme: "AdobeStandardEncoding",
                        CapHeight: "653",
                        XHeight: "441",
                        Ascender: "683",
                        Descender: "-217",
                        StdHW: "32",
                        StdVW: "76"
                    },
                    {
                        Comment: [
                            "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                            "Creation Date: Thu May  1 12:49:17 1997",
                            "UniqueID 43068",
                            "VMusage 43909 54934"
                        ],
                        FontName: "Times-Roman",
                        FullName: "Times Roman",
                        FamilyName: "Times",
                        Weight: "Roman",
                        ItalicAngle: "0",
                        IsFixedPitch: "false",
                        CharacterSet: "ExtendedRoman",
                        FontBBox: "-168 -218 1000 898 ",
                        UnderlinePosition: "-100",
                        UnderlineThickness: "50",
                        Version: "002.000",
                        Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                        EncodingScheme: "AdobeStandardEncoding",
                        CapHeight: "662",
                        XHeight: "450",
                        Ascender: "683",
                        Descender: "-217",
                        StdHW: "28",
                        StdVW: "84"
                    },
                    {
                        Comment: [
                            "Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                            "Creation Date: Mon Jun 23 16:28:00 1997",
                            "UniqueID 43048",
                            "VMusage 41139 52164"
                        ],
                        FontName: "Courier-Bold",
                        FullName: "Courier Bold",
                        FamilyName: "Courier",
                        Weight: "Bold",
                        ItalicAngle: "0",
                        IsFixedPitch: "true",
                        CharacterSet: "ExtendedRoman",
                        FontBBox: "-113 -250 749 801 ",
                        UnderlinePosition: "-100",
                        UnderlineThickness: "50",
                        Version: "003.000",
                        Notice: "Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        EncodingScheme: "AdobeStandardEncoding",
                        CapHeight: "562",
                        XHeight: "439",
                        Ascender: "629",
                        Descender: "-157",
                        StdHW: "84",
                        StdVW: "106"
                    },
                    {
                        Comment: [
                            "Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                            "Creation Date: Mon Jun 23 16:28:46 1997",
                            "UniqueID 43049",
                            "VMusage 17529 79244"
                        ],
                        FontName: "Courier-BoldOblique",
                        FullName: "Courier Bold Oblique",
                        FamilyName: "Courier",
                        Weight: "Bold",
                        ItalicAngle: "-12",
                        IsFixedPitch: "true",
                        CharacterSet: "ExtendedRoman",
                        FontBBox: "-57 -250 869 801",
                        UnderlinePosition: "-100",
                        UnderlineThickness: "50",
                        Version: "003.000",
                        Notice: "Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        EncodingScheme: "AdobeStandardEncoding",
                        CapHeight: "562",
                        XHeight: "439",
                        Ascender: "629",
                        Descender: "-157",
                        StdHW: "84",
                        StdVW: "106"
                    },
                    {
                        Comment: [
                            "Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                            "Creation Date: Thu May  1 17:37:52 1997",
                            "UniqueID 43051",
                            "VMusage 16248 75829"
                        ],
                        FontName: "Courier-Oblique",
                        FullName: "Courier Oblique",
                        FamilyName: "Courier",
                        Weight: "Medium",
                        ItalicAngle: "-12",
                        IsFixedPitch: "true",
                        CharacterSet: "ExtendedRoman",
                        FontBBox: "-27 -250 849 805 ",
                        UnderlinePosition: "-100",
                        UnderlineThickness: "50",
                        Version: "003.000",
                        Notice: "Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        EncodingScheme: "AdobeStandardEncoding",
                        CapHeight: "562",
                        XHeight: "426",
                        Ascender: "629",
                        Descender: "-157",
                        StdHW: "51",
                        StdVW: "51"
                    },
                    {
                        Comment: [
                            "Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                            "Creation Date: Thu May  1 17:27:09 1997",
                            "UniqueID 43050",
                            "VMusage 39754 50779"
                        ],
                        FontName: "Courier",
                        FullName: "Courier",
                        FamilyName: "Courier",
                        Weight: "Medium",
                        ItalicAngle: "0",
                        IsFixedPitch: "true",
                        CharacterSet: "ExtendedRoman",
                        FontBBox: "-23 -250 715 805 ",
                        UnderlinePosition: "-100",
                        UnderlineThickness: "50",
                        Version: "003.000",
                        Notice: "Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        EncodingScheme: "AdobeStandardEncoding",
                        CapHeight: "562",
                        XHeight: "426",
                        Ascender: "629",
                        Descender: "-157",
                        StdHW: "51",
                        StdVW: "51"
                    }
                ],
                glyphWidths: {
                    space: [
                        278,
                        278,
                        278,
                        278,
                        250,
                        250,
                        250,
                        250,
                        600,
                        600,
                        600,
                        600
                    ],
                    exclam: [
                        333,
                        333,
                        278,
                        278,
                        333,
                        389,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    quotedbl: [
                        474,
                        474,
                        355,
                        355,
                        555,
                        555,
                        420,
                        408,
                        600,
                        600,
                        600,
                        600
                    ],
                    numbersign: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    dollar: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    percent: [
                        889,
                        889,
                        889,
                        889,
                        1000,
                        833,
                        833,
                        833,
                        600,
                        600,
                        600,
                        600
                    ],
                    ampersand: [
                        722,
                        722,
                        667,
                        667,
                        833,
                        778,
                        778,
                        778,
                        600,
                        600,
                        600,
                        600
                    ],
                    quoteright: [
                        278,
                        278,
                        222,
                        222,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    parenleft: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    parenright: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    asterisk: [
                        389,
                        389,
                        389,
                        389,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    plus: [
                        584,
                        584,
                        584,
                        584,
                        570,
                        570,
                        675,
                        564,
                        600,
                        600,
                        600,
                        600
                    ],
                    comma: [
                        278,
                        278,
                        278,
                        278,
                        250,
                        250,
                        250,
                        250,
                        600,
                        600,
                        600,
                        600
                    ],
                    hyphen: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    period: [
                        278,
                        278,
                        278,
                        278,
                        250,
                        250,
                        250,
                        250,
                        600,
                        600,
                        600,
                        600
                    ],
                    slash: [
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    zero: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    one: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    two: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    three: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    four: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    five: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    six: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    seven: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    eight: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    nine: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    colon: [
                        333,
                        333,
                        278,
                        278,
                        333,
                        333,
                        333,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    semicolon: [
                        333,
                        333,
                        278,
                        278,
                        333,
                        333,
                        333,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    less: [
                        584,
                        584,
                        584,
                        584,
                        570,
                        570,
                        675,
                        564,
                        600,
                        600,
                        600,
                        600
                    ],
                    equal: [
                        584,
                        584,
                        584,
                        584,
                        570,
                        570,
                        675,
                        564,
                        600,
                        600,
                        600,
                        600
                    ],
                    greater: [
                        584,
                        584,
                        584,
                        584,
                        570,
                        570,
                        675,
                        564,
                        600,
                        600,
                        600,
                        600
                    ],
                    question: [
                        611,
                        611,
                        556,
                        556,
                        500,
                        500,
                        500,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    at: [
                        975,
                        975,
                        1015,
                        1015,
                        930,
                        832,
                        920,
                        921,
                        600,
                        600,
                        600,
                        600
                    ],
                    A: [
                        722,
                        722,
                        667,
                        667,
                        722,
                        667,
                        611,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    B: [
                        722,
                        722,
                        667,
                        667,
                        667,
                        667,
                        611,
                        667,
                        600,
                        600,
                        600,
                        600
                    ],
                    C: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        667,
                        667,
                        667,
                        600,
                        600,
                        600,
                        600
                    ],
                    D: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    E: [
                        667,
                        667,
                        667,
                        667,
                        667,
                        667,
                        611,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    F: [
                        611,
                        611,
                        611,
                        611,
                        611,
                        667,
                        611,
                        556,
                        600,
                        600,
                        600,
                        600
                    ],
                    G: [
                        778,
                        778,
                        778,
                        778,
                        778,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    H: [
                        722,
                        722,
                        722,
                        722,
                        778,
                        778,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    I: [
                        278,
                        278,
                        278,
                        278,
                        389,
                        389,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    J: [
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        444,
                        389,
                        600,
                        600,
                        600,
                        600
                    ],
                    K: [
                        722,
                        722,
                        667,
                        667,
                        778,
                        667,
                        667,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    L: [
                        611,
                        611,
                        556,
                        556,
                        667,
                        611,
                        556,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    M: [
                        833,
                        833,
                        833,
                        833,
                        944,
                        889,
                        833,
                        889,
                        600,
                        600,
                        600,
                        600
                    ],
                    N: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        667,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    O: [
                        778,
                        778,
                        778,
                        778,
                        778,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    P: [
                        667,
                        667,
                        667,
                        667,
                        611,
                        611,
                        611,
                        556,
                        600,
                        600,
                        600,
                        600
                    ],
                    Q: [
                        778,
                        778,
                        778,
                        778,
                        778,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    R: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        667,
                        611,
                        667,
                        600,
                        600,
                        600,
                        600
                    ],
                    S: [
                        667,
                        667,
                        667,
                        667,
                        556,
                        556,
                        500,
                        556,
                        600,
                        600,
                        600,
                        600
                    ],
                    T: [
                        611,
                        611,
                        611,
                        611,
                        667,
                        611,
                        556,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    U: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    V: [
                        667,
                        667,
                        667,
                        667,
                        722,
                        667,
                        611,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    W: [
                        944,
                        944,
                        944,
                        944,
                        1000,
                        889,
                        833,
                        944,
                        600,
                        600,
                        600,
                        600
                    ],
                    X: [
                        667,
                        667,
                        667,
                        667,
                        722,
                        667,
                        611,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Y: [
                        667,
                        667,
                        667,
                        667,
                        722,
                        611,
                        556,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Z: [
                        611,
                        611,
                        611,
                        611,
                        667,
                        611,
                        556,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    bracketleft: [
                        333,
                        333,
                        278,
                        278,
                        333,
                        333,
                        389,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    backslash: [
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    bracketright: [
                        333,
                        333,
                        278,
                        278,
                        333,
                        333,
                        389,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    asciicircum: [
                        584,
                        584,
                        469,
                        469,
                        581,
                        570,
                        422,
                        469,
                        600,
                        600,
                        600,
                        600
                    ],
                    underscore: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    quoteleft: [
                        278,
                        278,
                        222,
                        222,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    a: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    b: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    c: [
                        556,
                        556,
                        500,
                        500,
                        444,
                        444,
                        444,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    d: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    e: [
                        556,
                        556,
                        556,
                        556,
                        444,
                        444,
                        444,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    f: [
                        333,
                        333,
                        278,
                        278,
                        333,
                        333,
                        278,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    g: [
                        611,
                        611,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    h: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    i: [
                        278,
                        278,
                        222,
                        222,
                        278,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    j: [
                        278,
                        278,
                        222,
                        222,
                        333,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    k: [
                        556,
                        556,
                        500,
                        500,
                        556,
                        500,
                        444,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    l: [
                        278,
                        278,
                        222,
                        222,
                        278,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    m: [
                        889,
                        889,
                        833,
                        833,
                        833,
                        778,
                        722,
                        778,
                        600,
                        600,
                        600,
                        600
                    ],
                    n: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    o: [
                        611,
                        611,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    p: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    q: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    r: [
                        389,
                        389,
                        333,
                        333,
                        444,
                        389,
                        389,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    s: [
                        556,
                        556,
                        500,
                        500,
                        389,
                        389,
                        389,
                        389,
                        600,
                        600,
                        600,
                        600
                    ],
                    t: [
                        333,
                        333,
                        278,
                        278,
                        333,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    u: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    v: [
                        556,
                        556,
                        500,
                        500,
                        500,
                        444,
                        444,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    w: [
                        778,
                        778,
                        722,
                        722,
                        722,
                        667,
                        667,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    x: [
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        444,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    y: [
                        556,
                        556,
                        500,
                        500,
                        500,
                        444,
                        444,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    z: [
                        500,
                        500,
                        500,
                        500,
                        444,
                        389,
                        389,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    braceleft: [
                        389,
                        389,
                        334,
                        334,
                        394,
                        348,
                        400,
                        480,
                        600,
                        600,
                        600,
                        600
                    ],
                    bar: [
                        280,
                        280,
                        260,
                        260,
                        220,
                        220,
                        275,
                        200,
                        600,
                        600,
                        600,
                        600
                    ],
                    braceright: [
                        389,
                        389,
                        334,
                        334,
                        394,
                        348,
                        400,
                        480,
                        600,
                        600,
                        600,
                        600
                    ],
                    asciitilde: [
                        584,
                        584,
                        584,
                        584,
                        520,
                        570,
                        541,
                        541,
                        600,
                        600,
                        600,
                        600
                    ],
                    exclamdown: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        389,
                        389,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    cent: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    sterling: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    fraction: [
                        167,
                        167,
                        167,
                        167,
                        167,
                        167,
                        167,
                        167,
                        600,
                        600,
                        600,
                        600
                    ],
                    yen: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    florin: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    section: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    currency: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    quotesingle: [
                        238,
                        238,
                        191,
                        191,
                        278,
                        278,
                        214,
                        180,
                        600,
                        600,
                        600,
                        600
                    ],
                    quotedblleft: [
                        500,
                        500,
                        333,
                        333,
                        500,
                        500,
                        556,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    guillemotleft: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    guilsinglleft: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    guilsinglright: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    fi: [
                        611,
                        611,
                        500,
                        500,
                        556,
                        556,
                        500,
                        556,
                        600,
                        600,
                        600,
                        600
                    ],
                    fl: [
                        611,
                        611,
                        500,
                        500,
                        556,
                        556,
                        500,
                        556,
                        600,
                        600,
                        600,
                        600
                    ],
                    endash: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    dagger: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    daggerdbl: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    periodcentered: [
                        278,
                        278,
                        278,
                        278,
                        250,
                        250,
                        250,
                        250,
                        600,
                        600,
                        600,
                        600
                    ],
                    paragraph: [
                        556,
                        556,
                        537,
                        537,
                        540,
                        500,
                        523,
                        453,
                        600,
                        600,
                        600,
                        600
                    ],
                    bullet: [
                        350,
                        350,
                        350,
                        350,
                        350,
                        350,
                        350,
                        350,
                        600,
                        600,
                        600,
                        600
                    ],
                    quotesinglbase: [
                        278,
                        278,
                        222,
                        222,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    quotedblbase: [
                        500,
                        500,
                        333,
                        333,
                        500,
                        500,
                        556,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    quotedblright: [
                        500,
                        500,
                        333,
                        333,
                        500,
                        500,
                        556,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    guillemotright: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    ellipsis: [
                        1000,
                        1000,
                        1000,
                        1000,
                        1000,
                        1000,
                        889,
                        1000,
                        600,
                        600,
                        600,
                        600
                    ],
                    perthousand: [
                        1000,
                        1000,
                        1000,
                        1000,
                        1000,
                        1000,
                        1000,
                        1000,
                        600,
                        600,
                        600,
                        600
                    ],
                    questiondown: [
                        611,
                        611,
                        611,
                        611,
                        500,
                        500,
                        500,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    grave: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    acute: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    circumflex: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    tilde: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    macron: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    breve: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    dotaccent: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    dieresis: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    ring: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    cedilla: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    hungarumlaut: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    ogonek: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    caron: [
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    emdash: [
                        1000,
                        1000,
                        1000,
                        1000,
                        1000,
                        1000,
                        889,
                        1000,
                        600,
                        600,
                        600,
                        600
                    ],
                    AE: [
                        1000,
                        1000,
                        1000,
                        1000,
                        1000,
                        944,
                        889,
                        889,
                        600,
                        600,
                        600,
                        600
                    ],
                    ordfeminine: [
                        370,
                        370,
                        370,
                        370,
                        300,
                        266,
                        276,
                        276,
                        600,
                        600,
                        600,
                        600
                    ],
                    Lslash: [
                        611,
                        611,
                        556,
                        556,
                        667,
                        611,
                        556,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    Oslash: [
                        778,
                        778,
                        778,
                        778,
                        778,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    OE: [
                        1000,
                        1000,
                        1000,
                        1000,
                        1000,
                        944,
                        944,
                        889,
                        600,
                        600,
                        600,
                        600
                    ],
                    ordmasculine: [
                        365,
                        365,
                        365,
                        365,
                        330,
                        300,
                        310,
                        310,
                        600,
                        600,
                        600,
                        600
                    ],
                    ae: [
                        889,
                        889,
                        889,
                        889,
                        722,
                        722,
                        667,
                        667,
                        600,
                        600,
                        600,
                        600
                    ],
                    dotlessi: [
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    lslash: [
                        278,
                        278,
                        222,
                        222,
                        278,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    oslash: [
                        611,
                        611,
                        611,
                        611,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    oe: [
                        944,
                        944,
                        944,
                        944,
                        722,
                        722,
                        667,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    germandbls: [
                        611,
                        611,
                        611,
                        611,
                        556,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    Idieresis: [
                        278,
                        278,
                        278,
                        278,
                        389,
                        389,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    eacute: [
                        556,
                        556,
                        556,
                        556,
                        444,
                        444,
                        444,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    abreve: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    uhungarumlaut: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    ecaron: [
                        556,
                        556,
                        556,
                        556,
                        444,
                        444,
                        444,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    Ydieresis: [
                        667,
                        667,
                        667,
                        667,
                        722,
                        611,
                        556,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    divide: [
                        584,
                        584,
                        584,
                        584,
                        570,
                        570,
                        675,
                        564,
                        600,
                        600,
                        600,
                        600
                    ],
                    Yacute: [
                        667,
                        667,
                        667,
                        667,
                        722,
                        611,
                        556,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Acircumflex: [
                        722,
                        722,
                        667,
                        667,
                        722,
                        667,
                        611,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    aacute: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    Ucircumflex: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    yacute: [
                        556,
                        556,
                        500,
                        500,
                        500,
                        444,
                        444,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    scommaaccent: [
                        556,
                        556,
                        500,
                        500,
                        389,
                        389,
                        389,
                        389,
                        600,
                        600,
                        600,
                        600
                    ],
                    ecircumflex: [
                        556,
                        556,
                        556,
                        556,
                        444,
                        444,
                        444,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    Uring: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Udieresis: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    aogonek: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    Uacute: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    uogonek: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    Edieresis: [
                        667,
                        667,
                        667,
                        667,
                        667,
                        667,
                        611,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    Dcroat: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    commaaccent: [
                        250,
                        250,
                        250,
                        250,
                        250,
                        250,
                        250,
                        250,
                        600,
                        600,
                        600,
                        600
                    ],
                    copyright: [
                        737,
                        737,
                        737,
                        737,
                        747,
                        747,
                        760,
                        760,
                        600,
                        600,
                        600,
                        600
                    ],
                    Emacron: [
                        667,
                        667,
                        667,
                        667,
                        667,
                        667,
                        611,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    ccaron: [
                        556,
                        556,
                        500,
                        500,
                        444,
                        444,
                        444,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    aring: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    Ncommaaccent: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        667,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    lacute: [
                        278,
                        278,
                        222,
                        222,
                        278,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    agrave: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    Tcommaaccent: [
                        611,
                        611,
                        611,
                        611,
                        667,
                        611,
                        556,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    Cacute: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        667,
                        667,
                        667,
                        600,
                        600,
                        600,
                        600
                    ],
                    atilde: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    Edotaccent: [
                        667,
                        667,
                        667,
                        667,
                        667,
                        667,
                        611,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    scaron: [
                        556,
                        556,
                        500,
                        500,
                        389,
                        389,
                        389,
                        389,
                        600,
                        600,
                        600,
                        600
                    ],
                    scedilla: [
                        556,
                        556,
                        500,
                        500,
                        389,
                        389,
                        389,
                        389,
                        600,
                        600,
                        600,
                        600
                    ],
                    iacute: [
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    lozenge: [
                        494,
                        494,
                        471,
                        471,
                        494,
                        494,
                        471,
                        471,
                        600,
                        600,
                        600,
                        600
                    ],
                    Rcaron: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        667,
                        611,
                        667,
                        600,
                        600,
                        600,
                        600
                    ],
                    Gcommaaccent: [
                        778,
                        778,
                        778,
                        778,
                        778,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    ucircumflex: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    acircumflex: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    Amacron: [
                        722,
                        722,
                        667,
                        667,
                        722,
                        667,
                        611,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    rcaron: [
                        389,
                        389,
                        333,
                        333,
                        444,
                        389,
                        389,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    ccedilla: [
                        556,
                        556,
                        500,
                        500,
                        444,
                        444,
                        444,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    Zdotaccent: [
                        611,
                        611,
                        611,
                        611,
                        667,
                        611,
                        556,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    Thorn: [
                        667,
                        667,
                        667,
                        667,
                        611,
                        611,
                        611,
                        556,
                        600,
                        600,
                        600,
                        600
                    ],
                    Omacron: [
                        778,
                        778,
                        778,
                        778,
                        778,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Racute: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        667,
                        611,
                        667,
                        600,
                        600,
                        600,
                        600
                    ],
                    Sacute: [
                        667,
                        667,
                        667,
                        667,
                        556,
                        556,
                        500,
                        556,
                        600,
                        600,
                        600,
                        600
                    ],
                    dcaron: [
                        743,
                        743,
                        643,
                        643,
                        672,
                        608,
                        544,
                        588,
                        600,
                        600,
                        600,
                        600
                    ],
                    Umacron: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    uring: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    threesuperior: [
                        333,
                        333,
                        333,
                        333,
                        300,
                        300,
                        300,
                        300,
                        600,
                        600,
                        600,
                        600
                    ],
                    Ograve: [
                        778,
                        778,
                        778,
                        778,
                        778,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Agrave: [
                        722,
                        722,
                        667,
                        667,
                        722,
                        667,
                        611,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Abreve: [
                        722,
                        722,
                        667,
                        667,
                        722,
                        667,
                        611,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    multiply: [
                        584,
                        584,
                        584,
                        584,
                        570,
                        570,
                        675,
                        564,
                        600,
                        600,
                        600,
                        600
                    ],
                    uacute: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    Tcaron: [
                        611,
                        611,
                        611,
                        611,
                        667,
                        611,
                        556,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    partialdiff: [
                        494,
                        494,
                        476,
                        476,
                        494,
                        494,
                        476,
                        476,
                        600,
                        600,
                        600,
                        600
                    ],
                    ydieresis: [
                        556,
                        556,
                        500,
                        500,
                        500,
                        444,
                        444,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    Nacute: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        667,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    icircumflex: [
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    Ecircumflex: [
                        667,
                        667,
                        667,
                        667,
                        667,
                        667,
                        611,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    adieresis: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    edieresis: [
                        556,
                        556,
                        556,
                        556,
                        444,
                        444,
                        444,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    cacute: [
                        556,
                        556,
                        500,
                        500,
                        444,
                        444,
                        444,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    nacute: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    umacron: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    Ncaron: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        667,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Iacute: [
                        278,
                        278,
                        278,
                        278,
                        389,
                        389,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    plusminus: [
                        584,
                        584,
                        584,
                        584,
                        570,
                        570,
                        675,
                        564,
                        600,
                        600,
                        600,
                        600
                    ],
                    brokenbar: [
                        280,
                        280,
                        260,
                        260,
                        220,
                        220,
                        275,
                        200,
                        600,
                        600,
                        600,
                        600
                    ],
                    registered: [
                        737,
                        737,
                        737,
                        737,
                        747,
                        747,
                        760,
                        760,
                        600,
                        600,
                        600,
                        600
                    ],
                    Gbreve: [
                        778,
                        778,
                        778,
                        778,
                        778,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Idotaccent: [
                        278,
                        278,
                        278,
                        278,
                        389,
                        389,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    summation: [
                        600,
                        600,
                        600,
                        600,
                        600,
                        600,
                        600,
                        600,
                        600,
                        600,
                        600,
                        600
                    ],
                    Egrave: [
                        667,
                        667,
                        667,
                        667,
                        667,
                        667,
                        611,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    racute: [
                        389,
                        389,
                        333,
                        333,
                        444,
                        389,
                        389,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    omacron: [
                        611,
                        611,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    Zacute: [
                        611,
                        611,
                        611,
                        611,
                        667,
                        611,
                        556,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    Zcaron: [
                        611,
                        611,
                        611,
                        611,
                        667,
                        611,
                        556,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    greaterequal: [
                        549,
                        549,
                        549,
                        549,
                        549,
                        549,
                        549,
                        549,
                        600,
                        600,
                        600,
                        600
                    ],
                    Eth: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Ccedilla: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        667,
                        667,
                        667,
                        600,
                        600,
                        600,
                        600
                    ],
                    lcommaaccent: [
                        278,
                        278,
                        222,
                        222,
                        278,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    tcaron: [
                        389,
                        389,
                        317,
                        317,
                        416,
                        366,
                        300,
                        326,
                        600,
                        600,
                        600,
                        600
                    ],
                    eogonek: [
                        556,
                        556,
                        556,
                        556,
                        444,
                        444,
                        444,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    Uogonek: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Aacute: [
                        722,
                        722,
                        667,
                        667,
                        722,
                        667,
                        611,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Adieresis: [
                        722,
                        722,
                        667,
                        667,
                        722,
                        667,
                        611,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    egrave: [
                        556,
                        556,
                        556,
                        556,
                        444,
                        444,
                        444,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    zacute: [
                        500,
                        500,
                        500,
                        500,
                        444,
                        389,
                        389,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    iogonek: [
                        278,
                        278,
                        222,
                        222,
                        278,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    Oacute: [
                        778,
                        778,
                        778,
                        778,
                        778,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    oacute: [
                        611,
                        611,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    amacron: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    sacute: [
                        556,
                        556,
                        500,
                        500,
                        389,
                        389,
                        389,
                        389,
                        600,
                        600,
                        600,
                        600
                    ],
                    idieresis: [
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    Ocircumflex: [
                        778,
                        778,
                        778,
                        778,
                        778,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Ugrave: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Delta: [
                        612,
                        612,
                        612,
                        612,
                        612,
                        612,
                        612,
                        612,
                        600,
                        600,
                        600,
                        600
                    ],
                    thorn: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    twosuperior: [
                        333,
                        333,
                        333,
                        333,
                        300,
                        300,
                        300,
                        300,
                        600,
                        600,
                        600,
                        600
                    ],
                    Odieresis: [
                        778,
                        778,
                        778,
                        778,
                        778,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    mu: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        576,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    igrave: [
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    ohungarumlaut: [
                        611,
                        611,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    Eogonek: [
                        667,
                        667,
                        667,
                        667,
                        667,
                        667,
                        611,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    dcroat: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    threequarters: [
                        834,
                        834,
                        834,
                        834,
                        750,
                        750,
                        750,
                        750,
                        600,
                        600,
                        600,
                        600
                    ],
                    Scedilla: [
                        667,
                        667,
                        667,
                        667,
                        556,
                        556,
                        500,
                        556,
                        600,
                        600,
                        600,
                        600
                    ],
                    lcaron: [
                        400,
                        400,
                        299,
                        299,
                        394,
                        382,
                        300,
                        344,
                        600,
                        600,
                        600,
                        600
                    ],
                    Kcommaaccent: [
                        722,
                        722,
                        667,
                        667,
                        778,
                        667,
                        667,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Lacute: [
                        611,
                        611,
                        556,
                        556,
                        667,
                        611,
                        556,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    trademark: [
                        1000,
                        1000,
                        1000,
                        1000,
                        1000,
                        1000,
                        980,
                        980,
                        600,
                        600,
                        600,
                        600
                    ],
                    edotaccent: [
                        556,
                        556,
                        556,
                        556,
                        444,
                        444,
                        444,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    Igrave: [
                        278,
                        278,
                        278,
                        278,
                        389,
                        389,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    Imacron: [
                        278,
                        278,
                        278,
                        278,
                        389,
                        389,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    Lcaron: [
                        611,
                        611,
                        556,
                        556,
                        667,
                        611,
                        611,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    onehalf: [
                        834,
                        834,
                        834,
                        834,
                        750,
                        750,
                        750,
                        750,
                        600,
                        600,
                        600,
                        600
                    ],
                    lessequal: [
                        549,
                        549,
                        549,
                        549,
                        549,
                        549,
                        549,
                        549,
                        600,
                        600,
                        600,
                        600
                    ],
                    ocircumflex: [
                        611,
                        611,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    ntilde: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    Uhungarumlaut: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Eacute: [
                        667,
                        667,
                        667,
                        667,
                        667,
                        667,
                        611,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    emacron: [
                        556,
                        556,
                        556,
                        556,
                        444,
                        444,
                        444,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    gbreve: [
                        611,
                        611,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    onequarter: [
                        834,
                        834,
                        834,
                        834,
                        750,
                        750,
                        750,
                        750,
                        600,
                        600,
                        600,
                        600
                    ],
                    Scaron: [
                        667,
                        667,
                        667,
                        667,
                        556,
                        556,
                        500,
                        556,
                        600,
                        600,
                        600,
                        600
                    ],
                    Scommaaccent: [
                        667,
                        667,
                        667,
                        667,
                        556,
                        556,
                        500,
                        556,
                        600,
                        600,
                        600,
                        600
                    ],
                    Ohungarumlaut: [
                        778,
                        778,
                        778,
                        778,
                        778,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    degree: [
                        400,
                        400,
                        400,
                        400,
                        400,
                        400,
                        400,
                        400,
                        600,
                        600,
                        600,
                        600
                    ],
                    ograve: [
                        611,
                        611,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    Ccaron: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        667,
                        667,
                        667,
                        600,
                        600,
                        600,
                        600
                    ],
                    ugrave: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    radical: [
                        549,
                        549,
                        453,
                        453,
                        549,
                        549,
                        453,
                        453,
                        600,
                        600,
                        600,
                        600
                    ],
                    Dcaron: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    rcommaaccent: [
                        389,
                        389,
                        333,
                        333,
                        444,
                        389,
                        389,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    Ntilde: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        722,
                        667,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    otilde: [
                        611,
                        611,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    Rcommaaccent: [
                        722,
                        722,
                        722,
                        722,
                        722,
                        667,
                        611,
                        667,
                        600,
                        600,
                        600,
                        600
                    ],
                    Lcommaaccent: [
                        611,
                        611,
                        556,
                        556,
                        667,
                        611,
                        556,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    Atilde: [
                        722,
                        722,
                        667,
                        667,
                        722,
                        667,
                        611,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Aogonek: [
                        722,
                        722,
                        667,
                        667,
                        722,
                        667,
                        611,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Aring: [
                        722,
                        722,
                        667,
                        667,
                        722,
                        667,
                        611,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    Otilde: [
                        778,
                        778,
                        778,
                        778,
                        778,
                        722,
                        722,
                        722,
                        600,
                        600,
                        600,
                        600
                    ],
                    zdotaccent: [
                        500,
                        500,
                        500,
                        500,
                        444,
                        389,
                        389,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    Ecaron: [
                        667,
                        667,
                        667,
                        667,
                        667,
                        667,
                        611,
                        611,
                        600,
                        600,
                        600,
                        600
                    ],
                    Iogonek: [
                        278,
                        278,
                        278,
                        278,
                        389,
                        389,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    kcommaaccent: [
                        556,
                        556,
                        500,
                        500,
                        556,
                        500,
                        444,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    minus: [
                        584,
                        584,
                        584,
                        584,
                        570,
                        606,
                        675,
                        564,
                        600,
                        600,
                        600,
                        600
                    ],
                    Icircumflex: [
                        278,
                        278,
                        278,
                        278,
                        389,
                        389,
                        333,
                        333,
                        600,
                        600,
                        600,
                        600
                    ],
                    ncaron: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    tcommaaccent: [
                        333,
                        333,
                        278,
                        278,
                        333,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    logicalnot: [
                        584,
                        584,
                        584,
                        584,
                        570,
                        606,
                        675,
                        564,
                        600,
                        600,
                        600,
                        600
                    ],
                    odieresis: [
                        611,
                        611,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    udieresis: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    notequal: [
                        549,
                        549,
                        549,
                        549,
                        549,
                        549,
                        549,
                        549,
                        600,
                        600,
                        600,
                        600
                    ],
                    gcommaaccent: [
                        611,
                        611,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    eth: [
                        611,
                        611,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    zcaron: [
                        500,
                        500,
                        500,
                        500,
                        444,
                        389,
                        389,
                        444,
                        600,
                        600,
                        600,
                        600
                    ],
                    ncommaaccent: [
                        611,
                        611,
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ],
                    onesuperior: [
                        333,
                        333,
                        333,
                        333,
                        300,
                        300,
                        300,
                        300,
                        600,
                        600,
                        600,
                        600
                    ],
                    imacron: [
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        278,
                        600,
                        600,
                        600,
                        600
                    ],
                    Euro: [
                        556,
                        556,
                        556,
                        556,
                        500,
                        500,
                        500,
                        500,
                        600,
                        600,
                        600,
                        600
                    ]
                },
                kernPairs: {
                    AC: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    ACacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    ACcaron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    ACcedilla: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AG: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AGbreve: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AGcommaaccent: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AO: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AOacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AOcircumflex: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AOdieresis: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AOgrave: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AOhungarumlaut: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AOmacron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AOslash: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AOtilde: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AQ: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -55,
                        -40,
                        -55
                    ],
                    AT: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    ATcaron: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    ATcommaaccent: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AU: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AUacute: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AUcircumflex: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AUdieresis: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AUgrave: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AUhungarumlaut: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AUmacron: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AUogonek: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AUring: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AV: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -145,
                        -95,
                        -105,
                        -135
                    ],
                    AW: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -130,
                        -100,
                        -95,
                        -90
                    ],
                    AY: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AYacute: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AYdieresis: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    Au: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Auacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aucircumflex: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Audieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Augrave: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Auhungarumlaut: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aumacron: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Auogonek: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Auring: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Av: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -100,
                        -74,
                        -55,
                        -74
                    ],
                    Aw: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -90,
                        -74,
                        -55,
                        -92
                    ],
                    Ay: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Ayacute: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Aydieresis: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    AacuteC: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AacuteCacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AacuteCcaron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AacuteCcedilla: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AacuteG: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AacuteGbreve: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AacuteGcommaaccent: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AacuteO: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AacuteOacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AacuteOcircumflex: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AacuteOdieresis: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AacuteOgrave: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AacuteOhungarumlaut: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AacuteOmacron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AacuteOslash: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AacuteOtilde: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AacuteQ: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -55,
                        -40,
                        -55
                    ],
                    AacuteT: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AacuteTcaron: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AacuteTcommaaccent: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AacuteU: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AacuteUacute: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AacuteUcircumflex: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AacuteUdieresis: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AacuteUgrave: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AacuteUhungarumlaut: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AacuteUmacron: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AacuteUogonek: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AacuteUring: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AacuteV: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -145,
                        -95,
                        -105,
                        -135
                    ],
                    AacuteW: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -130,
                        -100,
                        -95,
                        -90
                    ],
                    AacuteY: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AacuteYacute: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AacuteYdieresis: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    Aacuteu: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aacuteuacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aacuteucircumflex: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aacuteudieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aacuteugrave: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aacuteuhungarumlaut: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aacuteumacron: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aacuteuogonek: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aacuteuring: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aacutev: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -100,
                        -74,
                        -55,
                        -74
                    ],
                    Aacutew: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -90,
                        -74,
                        -55,
                        -92
                    ],
                    Aacutey: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Aacuteyacute: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Aacuteydieresis: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    AbreveC: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AbreveCacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AbreveCcaron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AbreveCcedilla: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AbreveG: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AbreveGbreve: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AbreveGcommaaccent: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AbreveO: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AbreveOacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AbreveOcircumflex: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AbreveOdieresis: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AbreveOgrave: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AbreveOhungarumlaut: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AbreveOmacron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AbreveOslash: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AbreveOtilde: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AbreveQ: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -55,
                        -40,
                        -55
                    ],
                    AbreveT: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AbreveTcaron: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AbreveTcommaaccent: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AbreveU: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AbreveUacute: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AbreveUcircumflex: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AbreveUdieresis: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AbreveUgrave: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AbreveUhungarumlaut: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AbreveUmacron: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AbreveUogonek: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AbreveUring: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AbreveV: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -145,
                        -95,
                        -105,
                        -135
                    ],
                    AbreveW: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -130,
                        -100,
                        -95,
                        -90
                    ],
                    AbreveY: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AbreveYacute: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AbreveYdieresis: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    Abreveu: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Abreveuacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Abreveucircumflex: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Abreveudieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Abreveugrave: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Abreveuhungarumlaut: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Abreveumacron: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Abreveuogonek: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Abreveuring: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Abrevev: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -100,
                        -74,
                        -55,
                        -74
                    ],
                    Abrevew: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -90,
                        -74,
                        -55,
                        -92
                    ],
                    Abrevey: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Abreveyacute: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Abreveydieresis: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    AcircumflexC: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AcircumflexCacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AcircumflexCcaron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AcircumflexCcedilla: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AcircumflexG: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AcircumflexGbreve: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AcircumflexGcommaaccent: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AcircumflexO: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AcircumflexOacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AcircumflexOcircumflex: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AcircumflexOdieresis: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AcircumflexOgrave: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AcircumflexOhungarumlaut: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AcircumflexOmacron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AcircumflexOslash: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AcircumflexOtilde: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AcircumflexQ: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -55,
                        -40,
                        -55
                    ],
                    AcircumflexT: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AcircumflexTcaron: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AcircumflexTcommaaccent: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AcircumflexU: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AcircumflexUacute: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AcircumflexUcircumflex: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AcircumflexUdieresis: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AcircumflexUgrave: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AcircumflexUhungarumlaut: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AcircumflexUmacron: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AcircumflexUogonek: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AcircumflexUring: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AcircumflexV: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -145,
                        -95,
                        -105,
                        -135
                    ],
                    AcircumflexW: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -130,
                        -100,
                        -95,
                        -90
                    ],
                    AcircumflexY: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AcircumflexYacute: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AcircumflexYdieresis: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    Acircumflexu: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Acircumflexuacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Acircumflexucircumflex: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Acircumflexudieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Acircumflexugrave: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Acircumflexuhungarumlaut: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Acircumflexumacron: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Acircumflexuogonek: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Acircumflexuring: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Acircumflexv: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -100,
                        -74,
                        -55,
                        -74
                    ],
                    Acircumflexw: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -90,
                        -74,
                        -55,
                        -92
                    ],
                    Acircumflexy: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Acircumflexyacute: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Acircumflexydieresis: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    AdieresisC: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AdieresisCacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AdieresisCcaron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AdieresisCcedilla: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AdieresisG: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AdieresisGbreve: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AdieresisGcommaaccent: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AdieresisO: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AdieresisOacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AdieresisOcircumflex: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AdieresisOdieresis: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AdieresisOgrave: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AdieresisOhungarumlaut: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AdieresisOmacron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AdieresisOslash: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AdieresisOtilde: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AdieresisQ: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -55,
                        -40,
                        -55
                    ],
                    AdieresisT: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AdieresisTcaron: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AdieresisTcommaaccent: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AdieresisU: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AdieresisUacute: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AdieresisUcircumflex: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AdieresisUdieresis: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AdieresisUgrave: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AdieresisUhungarumlaut: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AdieresisUmacron: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AdieresisUogonek: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AdieresisUring: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AdieresisV: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -145,
                        -95,
                        -105,
                        -135
                    ],
                    AdieresisW: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -130,
                        -100,
                        -95,
                        -90
                    ],
                    AdieresisY: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AdieresisYacute: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AdieresisYdieresis: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    Adieresisu: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Adieresisuacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Adieresisucircumflex: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Adieresisudieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Adieresisugrave: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Adieresisuhungarumlaut: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Adieresisumacron: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Adieresisuogonek: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Adieresisuring: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Adieresisv: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -100,
                        -74,
                        -55,
                        -74
                    ],
                    Adieresisw: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -90,
                        -74,
                        -55,
                        -92
                    ],
                    Adieresisy: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Adieresisyacute: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Adieresisydieresis: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    AgraveC: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AgraveCacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AgraveCcaron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AgraveCcedilla: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AgraveG: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AgraveGbreve: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AgraveGcommaaccent: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AgraveO: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AgraveOacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AgraveOcircumflex: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AgraveOdieresis: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AgraveOgrave: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AgraveOhungarumlaut: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AgraveOmacron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AgraveOslash: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AgraveOtilde: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AgraveQ: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -55,
                        -40,
                        -55
                    ],
                    AgraveT: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AgraveTcaron: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AgraveTcommaaccent: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AgraveU: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AgraveUacute: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AgraveUcircumflex: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AgraveUdieresis: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AgraveUgrave: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AgraveUhungarumlaut: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AgraveUmacron: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AgraveUogonek: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AgraveUring: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AgraveV: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -145,
                        -95,
                        -105,
                        -135
                    ],
                    AgraveW: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -130,
                        -100,
                        -95,
                        -90
                    ],
                    AgraveY: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AgraveYacute: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AgraveYdieresis: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    Agraveu: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Agraveuacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Agraveucircumflex: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Agraveudieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Agraveugrave: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Agraveuhungarumlaut: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Agraveumacron: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Agraveuogonek: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Agraveuring: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Agravev: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -100,
                        -74,
                        -55,
                        -74
                    ],
                    Agravew: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -90,
                        -74,
                        -55,
                        -92
                    ],
                    Agravey: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Agraveyacute: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Agraveydieresis: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    AmacronC: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AmacronCacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AmacronCcaron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AmacronCcedilla: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AmacronG: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AmacronGbreve: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AmacronGcommaaccent: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AmacronO: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AmacronOacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AmacronOcircumflex: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AmacronOdieresis: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AmacronOgrave: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AmacronOhungarumlaut: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AmacronOmacron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AmacronOslash: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AmacronOtilde: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AmacronQ: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -55,
                        -40,
                        -55
                    ],
                    AmacronT: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AmacronTcaron: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AmacronTcommaaccent: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AmacronU: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AmacronUacute: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AmacronUcircumflex: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AmacronUdieresis: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AmacronUgrave: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AmacronUhungarumlaut: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AmacronUmacron: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AmacronUogonek: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AmacronUring: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AmacronV: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -145,
                        -95,
                        -105,
                        -135
                    ],
                    AmacronW: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -130,
                        -100,
                        -95,
                        -90
                    ],
                    AmacronY: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AmacronYacute: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AmacronYdieresis: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    Amacronu: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Amacronuacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Amacronucircumflex: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Amacronudieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Amacronugrave: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Amacronuhungarumlaut: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Amacronumacron: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Amacronuogonek: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Amacronuring: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Amacronv: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -100,
                        -74,
                        -55,
                        -74
                    ],
                    Amacronw: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -90,
                        -74,
                        -55,
                        -92
                    ],
                    Amacrony: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Amacronyacute: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Amacronydieresis: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    AogonekC: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AogonekCacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AogonekCcaron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AogonekCcedilla: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AogonekG: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AogonekGbreve: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AogonekGcommaaccent: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AogonekO: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AogonekOacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AogonekOcircumflex: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AogonekOdieresis: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AogonekOgrave: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AogonekOhungarumlaut: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AogonekOmacron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AogonekOslash: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AogonekOtilde: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AogonekQ: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -55,
                        -40,
                        -55
                    ],
                    AogonekT: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AogonekTcaron: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AogonekTcommaaccent: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AogonekU: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AogonekUacute: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AogonekUcircumflex: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AogonekUdieresis: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AogonekUgrave: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AogonekUhungarumlaut: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AogonekUmacron: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AogonekUogonek: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AogonekUring: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AogonekV: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -145,
                        -95,
                        -105,
                        -135
                    ],
                    AogonekW: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -130,
                        -100,
                        -95,
                        -90
                    ],
                    AogonekY: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AogonekYacute: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AogonekYdieresis: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    Aogoneku: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aogonekuacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aogonekucircumflex: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aogonekudieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aogonekugrave: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aogonekuhungarumlaut: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aogonekumacron: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aogonekuogonek: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aogonekuring: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aogonekv: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -100,
                        -74,
                        -55,
                        -74
                    ],
                    Aogonekw: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -90,
                        -74,
                        -55,
                        -52
                    ],
                    Aogoneky: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -34,
                        -34,
                        -55,
                        -52
                    ],
                    Aogonekyacute: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -34,
                        -34,
                        -55,
                        -52
                    ],
                    Aogonekydieresis: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -34,
                        -34,
                        -55,
                        -52
                    ],
                    AringC: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AringCacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AringCcaron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AringCcedilla: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AringG: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AringGbreve: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AringGcommaaccent: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AringO: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AringOacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AringOcircumflex: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AringOdieresis: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AringOgrave: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AringOhungarumlaut: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AringOmacron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AringOslash: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AringOtilde: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AringQ: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -55,
                        -40,
                        -55
                    ],
                    AringT: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AringTcaron: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AringTcommaaccent: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AringU: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AringUacute: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AringUcircumflex: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AringUdieresis: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AringUgrave: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AringUhungarumlaut: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AringUmacron: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AringUogonek: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AringUring: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AringV: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -145,
                        -95,
                        -105,
                        -135
                    ],
                    AringW: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -130,
                        -100,
                        -95,
                        -90
                    ],
                    AringY: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AringYacute: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AringYdieresis: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    Aringu: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aringuacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aringucircumflex: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aringudieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aringugrave: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aringuhungarumlaut: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aringumacron: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aringuogonek: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aringuring: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Aringv: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -100,
                        -74,
                        -55,
                        -74
                    ],
                    Aringw: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -90,
                        -74,
                        -55,
                        -92
                    ],
                    Aringy: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Aringyacute: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Aringydieresis: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    AtildeC: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AtildeCacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AtildeCcaron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AtildeCcedilla: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -55,
                        -65,
                        -30,
                        -40
                    ],
                    AtildeG: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AtildeGbreve: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AtildeGcommaaccent: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -55,
                        -60,
                        -35,
                        -40
                    ],
                    AtildeO: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AtildeOacute: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AtildeOcircumflex: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AtildeOdieresis: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AtildeOgrave: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AtildeOhungarumlaut: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AtildeOmacron: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AtildeOslash: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AtildeOtilde: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -50,
                        -40,
                        -55
                    ],
                    AtildeQ: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -45,
                        -55,
                        -40,
                        -55
                    ],
                    AtildeT: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AtildeTcaron: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AtildeTcommaaccent: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -95,
                        -55,
                        -37,
                        -111
                    ],
                    AtildeU: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AtildeUacute: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AtildeUcircumflex: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AtildeUdieresis: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AtildeUgrave: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AtildeUhungarumlaut: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AtildeUmacron: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AtildeUogonek: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AtildeUring: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -55
                    ],
                    AtildeV: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -145,
                        -95,
                        -105,
                        -135
                    ],
                    AtildeW: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -130,
                        -100,
                        -95,
                        -90
                    ],
                    AtildeY: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AtildeYacute: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    AtildeYdieresis: [
                        -110,
                        -110,
                        -100,
                        -100,
                        -100,
                        -70,
                        -55,
                        -105
                    ],
                    Atildeu: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Atildeuacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Atildeucircumflex: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Atildeudieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Atildeugrave: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Atildeuhungarumlaut: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Atildeumacron: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Atildeuogonek: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Atildeuring: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -50,
                        -30,
                        -20
                    ],
                    Atildev: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -100,
                        -74,
                        -55,
                        -74
                    ],
                    Atildew: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -90,
                        -74,
                        -55,
                        -92
                    ],
                    Atildey: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Atildeyacute: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    Atildeydieresis: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -74,
                        -74,
                        -55,
                        -92
                    ],
                    BA: [
                        -30,
                        -30,
                        0,
                        0,
                        -30,
                        -25,
                        -25,
                        -35
                    ],
                    BAacute: [
                        -30,
                        -30,
                        0,
                        0,
                        -30,
                        -25,
                        -25,
                        -35
                    ],
                    BAbreve: [
                        -30,
                        -30,
                        0,
                        0,
                        -30,
                        -25,
                        -25,
                        -35
                    ],
                    BAcircumflex: [
                        -30,
                        -30,
                        0,
                        0,
                        -30,
                        -25,
                        -25,
                        -35
                    ],
                    BAdieresis: [
                        -30,
                        -30,
                        0,
                        0,
                        -30,
                        -25,
                        -25,
                        -35
                    ],
                    BAgrave: [
                        -30,
                        -30,
                        0,
                        0,
                        -30,
                        -25,
                        -25,
                        -35
                    ],
                    BAmacron: [
                        -30,
                        -30,
                        0,
                        0,
                        -30,
                        -25,
                        -25,
                        -35
                    ],
                    BAogonek: [
                        -30,
                        -30,
                        0,
                        0,
                        -30,
                        -25,
                        -25,
                        -35
                    ],
                    BAring: [
                        -30,
                        -30,
                        0,
                        0,
                        -30,
                        -25,
                        -25,
                        -35
                    ],
                    BAtilde: [
                        -30,
                        -30,
                        0,
                        0,
                        -30,
                        -25,
                        -25,
                        -35
                    ],
                    BU: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    BUacute: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    BUcircumflex: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    BUdieresis: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    BUgrave: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    BUhungarumlaut: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    BUmacron: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    BUogonek: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    BUring: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    DA: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DAacute: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DAbreve: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DAcircumflex: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DAdieresis: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DAgrave: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DAmacron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DAogonek: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DAring: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DAtilde: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DV: [
                        -40,
                        -40,
                        -70,
                        -70,
                        -40,
                        -50,
                        -40,
                        -40
                    ],
                    DW: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -30
                    ],
                    DY: [
                        -70,
                        -70,
                        -90,
                        -90,
                        -40,
                        -50,
                        -40,
                        -55
                    ],
                    DYacute: [
                        -70,
                        -70,
                        -90,
                        -90,
                        -40,
                        -50,
                        -40,
                        -55
                    ],
                    DYdieresis: [
                        -70,
                        -70,
                        -90,
                        -90,
                        -40,
                        -50,
                        -40,
                        -55
                    ],
                    Dcomma: [
                        -30,
                        -30,
                        -70,
                        -70
                    ],
                    Dperiod: [
                        -30,
                        -30,
                        -70,
                        -70,
                        -20
                    ],
                    DcaronA: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcaronAacute: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcaronAbreve: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcaronAcircumflex: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcaronAdieresis: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcaronAgrave: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcaronAmacron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcaronAogonek: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcaronAring: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcaronAtilde: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcaronV: [
                        -40,
                        -40,
                        -70,
                        -70,
                        -40,
                        -50,
                        -40,
                        -40
                    ],
                    DcaronW: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -30
                    ],
                    DcaronY: [
                        -70,
                        -70,
                        -90,
                        -90,
                        -40,
                        -50,
                        -40,
                        -55
                    ],
                    DcaronYacute: [
                        -70,
                        -70,
                        -90,
                        -90,
                        -40,
                        -50,
                        -40,
                        -55
                    ],
                    DcaronYdieresis: [
                        -70,
                        -70,
                        -90,
                        -90,
                        -40,
                        -50,
                        -40,
                        -55
                    ],
                    Dcaroncomma: [
                        -30,
                        -30,
                        -70,
                        -70
                    ],
                    Dcaronperiod: [
                        -30,
                        -30,
                        -70,
                        -70,
                        -20
                    ],
                    DcroatA: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcroatAacute: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcroatAbreve: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcroatAcircumflex: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcroatAdieresis: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcroatAgrave: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcroatAmacron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcroatAogonek: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcroatAring: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcroatAtilde: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -35,
                        -25,
                        -35,
                        -40
                    ],
                    DcroatV: [
                        -40,
                        -40,
                        -70,
                        -70,
                        -40,
                        -50,
                        -40,
                        -40
                    ],
                    DcroatW: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -30
                    ],
                    DcroatY: [
                        -70,
                        -70,
                        -90,
                        -90,
                        -40,
                        -50,
                        -40,
                        -55
                    ],
                    DcroatYacute: [
                        -70,
                        -70,
                        -90,
                        -90,
                        -40,
                        -50,
                        -40,
                        -55
                    ],
                    DcroatYdieresis: [
                        -70,
                        -70,
                        -90,
                        -90,
                        -40,
                        -50,
                        -40,
                        -55
                    ],
                    Dcroatcomma: [
                        -30,
                        -30,
                        -70,
                        -70
                    ],
                    Dcroatperiod: [
                        -30,
                        -30,
                        -70,
                        -70,
                        -20
                    ],
                    FA: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -90,
                        -100,
                        -115,
                        -74
                    ],
                    FAacute: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -90,
                        -100,
                        -115,
                        -74
                    ],
                    FAbreve: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -90,
                        -100,
                        -115,
                        -74
                    ],
                    FAcircumflex: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -90,
                        -100,
                        -115,
                        -74
                    ],
                    FAdieresis: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -90,
                        -100,
                        -115,
                        -74
                    ],
                    FAgrave: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -90,
                        -100,
                        -115,
                        -74
                    ],
                    FAmacron: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -90,
                        -100,
                        -115,
                        -74
                    ],
                    FAogonek: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -90,
                        -100,
                        -115,
                        -74
                    ],
                    FAring: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -90,
                        -100,
                        -115,
                        -74
                    ],
                    FAtilde: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -90,
                        -100,
                        -115,
                        -74
                    ],
                    Fa: [
                        -20,
                        -20,
                        -50,
                        -50,
                        -25,
                        -95,
                        -75,
                        -15
                    ],
                    Faacute: [
                        -20,
                        -20,
                        -50,
                        -50,
                        -25,
                        -95,
                        -75,
                        -15
                    ],
                    Fabreve: [
                        -20,
                        -20,
                        -50,
                        -50,
                        -25,
                        -95,
                        -75,
                        -15
                    ],
                    Facircumflex: [
                        -20,
                        -20,
                        -50,
                        -50,
                        -25,
                        -95,
                        -75,
                        -15
                    ],
                    Fadieresis: [
                        -20,
                        -20,
                        -50,
                        -50,
                        -25,
                        -95,
                        -75,
                        -15
                    ],
                    Fagrave: [
                        -20,
                        -20,
                        -50,
                        -50,
                        -25,
                        -95,
                        -75,
                        -15
                    ],
                    Famacron: [
                        -20,
                        -20,
                        -50,
                        -50,
                        -25,
                        -95,
                        -75,
                        -15
                    ],
                    Faogonek: [
                        -20,
                        -20,
                        -50,
                        -50,
                        -25,
                        -95,
                        -75,
                        -15
                    ],
                    Faring: [
                        -20,
                        -20,
                        -50,
                        -50,
                        -25,
                        -95,
                        -75,
                        -15
                    ],
                    Fatilde: [
                        -20,
                        -20,
                        -50,
                        -50,
                        -25,
                        -95,
                        -75,
                        -15
                    ],
                    Fcomma: [
                        -100,
                        -100,
                        -150,
                        -150,
                        -92,
                        -129,
                        -135,
                        -80
                    ],
                    Fperiod: [
                        -100,
                        -100,
                        -150,
                        -150,
                        -110,
                        -129,
                        -135,
                        -80
                    ],
                    JA: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -25,
                        -40,
                        -60
                    ],
                    JAacute: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -25,
                        -40,
                        -60
                    ],
                    JAbreve: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -25,
                        -40,
                        -60
                    ],
                    JAcircumflex: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -25,
                        -40,
                        -60
                    ],
                    JAdieresis: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -25,
                        -40,
                        -60
                    ],
                    JAgrave: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -25,
                        -40,
                        -60
                    ],
                    JAmacron: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -25,
                        -40,
                        -60
                    ],
                    JAogonek: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -25,
                        -40,
                        -60
                    ],
                    JAring: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -25,
                        -40,
                        -60
                    ],
                    JAtilde: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -25,
                        -40,
                        -60
                    ],
                    Jcomma: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        -25
                    ],
                    Jperiod: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -20,
                        -10,
                        -25
                    ],
                    Ju: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Juacute: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Jucircumflex: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Judieresis: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Jugrave: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Juhungarumlaut: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Jumacron: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Juogonek: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Juring: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    KO: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KOacute: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KOcircumflex: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KOdieresis: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KOgrave: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KOhungarumlaut: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KOmacron: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KOslash: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KOtilde: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    Ke: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Keacute: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Kecaron: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Kecircumflex: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Kedieresis: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Kedotaccent: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Kegrave: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Kemacron: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Keogonek: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Ko: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Koacute: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Kocircumflex: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Kodieresis: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Kograve: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Kohungarumlaut: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Komacron: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Koslash: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Kotilde: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Ku: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kuacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kucircumflex: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kudieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kugrave: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kuhungarumlaut: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kumacron: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kuogonek: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kuring: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Ky: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -45,
                        -20,
                        -40,
                        -25
                    ],
                    Kyacute: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -45,
                        -20,
                        -40,
                        -25
                    ],
                    Kydieresis: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -45,
                        -20,
                        -40,
                        -25
                    ],
                    KcommaaccentO: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KcommaaccentOacute: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KcommaaccentOcircumflex: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KcommaaccentOdieresis: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KcommaaccentOgrave: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KcommaaccentOhungarumlaut: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KcommaaccentOmacron: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KcommaaccentOslash: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    KcommaaccentOtilde: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -30
                    ],
                    Kcommaaccente: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Kcommaaccenteacute: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Kcommaaccentecaron: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Kcommaaccentecircumflex: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Kcommaaccentedieresis: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Kcommaaccentedotaccent: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Kcommaaccentegrave: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Kcommaaccentemacron: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Kcommaaccenteogonek: [
                        -15,
                        -15,
                        -40,
                        -40,
                        -25,
                        -25,
                        -35,
                        -25
                    ],
                    Kcommaaccento: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Kcommaaccentoacute: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Kcommaaccentocircumflex: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Kcommaaccentodieresis: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Kcommaaccentograve: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Kcommaaccentohungarumlaut: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Kcommaaccentomacron: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Kcommaaccentoslash: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Kcommaaccentotilde: [
                        -35,
                        -35,
                        -40,
                        -40,
                        -25,
                        -25,
                        -40,
                        -35
                    ],
                    Kcommaaccentu: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kcommaaccentuacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kcommaaccentucircumflex: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kcommaaccentudieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kcommaaccentugrave: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kcommaaccentuhungarumlaut: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kcommaaccentumacron: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kcommaaccentuogonek: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kcommaaccenturing: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -15,
                        -20,
                        -40,
                        -15
                    ],
                    Kcommaaccenty: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -45,
                        -20,
                        -40,
                        -25
                    ],
                    Kcommaaccentyacute: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -45,
                        -20,
                        -40,
                        -25
                    ],
                    Kcommaaccentydieresis: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -45,
                        -20,
                        -40,
                        -25
                    ],
                    LT: [
                        -90,
                        -90,
                        -110,
                        -110,
                        -92,
                        -18,
                        -20,
                        -92
                    ],
                    LTcaron: [
                        -90,
                        -90,
                        -110,
                        -110,
                        -92,
                        -18,
                        -20,
                        -92
                    ],
                    LTcommaaccent: [
                        -90,
                        -90,
                        -110,
                        -110,
                        -92,
                        -18,
                        -20,
                        -92
                    ],
                    LV: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -92,
                        -37,
                        -55,
                        -100
                    ],
                    LW: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -92,
                        -37,
                        -55,
                        -74
                    ],
                    LY: [
                        -120,
                        -120,
                        -140,
                        -140,
                        -92,
                        -37,
                        -20,
                        -100
                    ],
                    LYacute: [
                        -120,
                        -120,
                        -140,
                        -140,
                        -92,
                        -37,
                        -20,
                        -100
                    ],
                    LYdieresis: [
                        -120,
                        -120,
                        -140,
                        -140,
                        -92,
                        -37,
                        -20,
                        -100
                    ],
                    Lquotedblright: [
                        -140,
                        -140,
                        -140,
                        -140,
                        -20
                    ],
                    Lquoteright: [
                        -140,
                        -140,
                        -160,
                        -160,
                        -110,
                        -55,
                        -37,
                        -92
                    ],
                    Ly: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -55,
                        -37,
                        -30,
                        -55
                    ],
                    Lyacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -55,
                        -37,
                        -30,
                        -55
                    ],
                    Lydieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -55,
                        -37,
                        -30,
                        -55
                    ],
                    LacuteT: [
                        -90,
                        -90,
                        -110,
                        -110,
                        -92,
                        -18,
                        -20,
                        -92
                    ],
                    LacuteTcaron: [
                        -90,
                        -90,
                        -110,
                        -110,
                        -92,
                        -18,
                        -20,
                        -92
                    ],
                    LacuteTcommaaccent: [
                        -90,
                        -90,
                        -110,
                        -110,
                        -92,
                        -18,
                        -20,
                        -92
                    ],
                    LacuteV: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -92,
                        -37,
                        -55,
                        -100
                    ],
                    LacuteW: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -92,
                        -37,
                        -55,
                        -74
                    ],
                    LacuteY: [
                        -120,
                        -120,
                        -140,
                        -140,
                        -92,
                        -37,
                        -20,
                        -100
                    ],
                    LacuteYacute: [
                        -120,
                        -120,
                        -140,
                        -140,
                        -92,
                        -37,
                        -20,
                        -100
                    ],
                    LacuteYdieresis: [
                        -120,
                        -120,
                        -140,
                        -140,
                        -92,
                        -37,
                        -20,
                        -100
                    ],
                    Lacutequotedblright: [
                        -140,
                        -140,
                        -140,
                        -140,
                        -20
                    ],
                    Lacutequoteright: [
                        -140,
                        -140,
                        -160,
                        -160,
                        -110,
                        -55,
                        -37,
                        -92
                    ],
                    Lacutey: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -55,
                        -37,
                        -30,
                        -55
                    ],
                    Lacuteyacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -55,
                        -37,
                        -30,
                        -55
                    ],
                    Lacuteydieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -55,
                        -37,
                        -30,
                        -55
                    ],
                    LcommaaccentT: [
                        -90,
                        -90,
                        -110,
                        -110,
                        -92,
                        -18,
                        -20,
                        -92
                    ],
                    LcommaaccentTcaron: [
                        -90,
                        -90,
                        -110,
                        -110,
                        -92,
                        -18,
                        -20,
                        -92
                    ],
                    LcommaaccentTcommaaccent: [
                        -90,
                        -90,
                        -110,
                        -110,
                        -92,
                        -18,
                        -20,
                        -92
                    ],
                    LcommaaccentV: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -92,
                        -37,
                        -55,
                        -100
                    ],
                    LcommaaccentW: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -92,
                        -37,
                        -55,
                        -74
                    ],
                    LcommaaccentY: [
                        -120,
                        -120,
                        -140,
                        -140,
                        -92,
                        -37,
                        -20,
                        -100
                    ],
                    LcommaaccentYacute: [
                        -120,
                        -120,
                        -140,
                        -140,
                        -92,
                        -37,
                        -20,
                        -100
                    ],
                    LcommaaccentYdieresis: [
                        -120,
                        -120,
                        -140,
                        -140,
                        -92,
                        -37,
                        -20,
                        -100
                    ],
                    Lcommaaccentquotedblright: [
                        -140,
                        -140,
                        -140,
                        -140,
                        -20
                    ],
                    Lcommaaccentquoteright: [
                        -140,
                        -140,
                        -160,
                        -160,
                        -110,
                        -55,
                        -37,
                        -92
                    ],
                    Lcommaaccenty: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -55,
                        -37,
                        -30,
                        -55
                    ],
                    Lcommaaccentyacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -55,
                        -37,
                        -30,
                        -55
                    ],
                    Lcommaaccentydieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -55,
                        -37,
                        -30,
                        -55
                    ],
                    LslashT: [
                        -90,
                        -90,
                        -110,
                        -110,
                        -92,
                        -18,
                        -20,
                        -92
                    ],
                    LslashTcaron: [
                        -90,
                        -90,
                        -110,
                        -110,
                        -92,
                        -18,
                        -20,
                        -92
                    ],
                    LslashTcommaaccent: [
                        -90,
                        -90,
                        -110,
                        -110,
                        -92,
                        -18,
                        -20,
                        -92
                    ],
                    LslashV: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -92,
                        -37,
                        -55,
                        -100
                    ],
                    LslashW: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -92,
                        -37,
                        -55,
                        -74
                    ],
                    LslashY: [
                        -120,
                        -120,
                        -140,
                        -140,
                        -92,
                        -37,
                        -20,
                        -100
                    ],
                    LslashYacute: [
                        -120,
                        -120,
                        -140,
                        -140,
                        -92,
                        -37,
                        -20,
                        -100
                    ],
                    LslashYdieresis: [
                        -120,
                        -120,
                        -140,
                        -140,
                        -92,
                        -37,
                        -20,
                        -100
                    ],
                    Lslashquotedblright: [
                        -140,
                        -140,
                        -140,
                        -140,
                        -20
                    ],
                    Lslashquoteright: [
                        -140,
                        -140,
                        -160,
                        -160,
                        -110,
                        -55,
                        -37,
                        -92
                    ],
                    Lslashy: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -55,
                        -37,
                        -30,
                        -55
                    ],
                    Lslashyacute: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -55,
                        -37,
                        -30,
                        -55
                    ],
                    Lslashydieresis: [
                        -30,
                        -30,
                        -30,
                        -30,
                        -55,
                        -37,
                        -30,
                        -55
                    ],
                    OA: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OAacute: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OAbreve: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OAcircumflex: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OAdieresis: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OAgrave: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OAmacron: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OAogonek: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OAring: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OAtilde: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OT: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OTcaron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OTcommaaccent: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OV: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OW: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -50,
                        -50,
                        -35
                    ],
                    OX: [
                        -50,
                        -50,
                        -60,
                        -60,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OY: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OYacute: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OYdieresis: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    Ocomma: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    Operiod: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OacuteA: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OacuteAacute: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OacuteAbreve: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OacuteAcircumflex: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OacuteAdieresis: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OacuteAgrave: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OacuteAmacron: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OacuteAogonek: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OacuteAring: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OacuteAtilde: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OacuteT: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OacuteTcaron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OacuteTcommaaccent: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OacuteV: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OacuteW: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -50,
                        -50,
                        -35
                    ],
                    OacuteX: [
                        -50,
                        -50,
                        -60,
                        -60,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OacuteY: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OacuteYacute: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OacuteYdieresis: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    Oacutecomma: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    Oacuteperiod: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OcircumflexA: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OcircumflexAacute: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OcircumflexAbreve: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OcircumflexAcircumflex: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OcircumflexAdieresis: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OcircumflexAgrave: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OcircumflexAmacron: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OcircumflexAogonek: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OcircumflexAring: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OcircumflexAtilde: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OcircumflexT: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OcircumflexTcaron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OcircumflexTcommaaccent: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OcircumflexV: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OcircumflexW: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -50,
                        -50,
                        -35
                    ],
                    OcircumflexX: [
                        -50,
                        -50,
                        -60,
                        -60,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OcircumflexY: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OcircumflexYacute: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OcircumflexYdieresis: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    Ocircumflexcomma: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    Ocircumflexperiod: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OdieresisA: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OdieresisAacute: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OdieresisAbreve: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OdieresisAcircumflex: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OdieresisAdieresis: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OdieresisAgrave: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OdieresisAmacron: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OdieresisAogonek: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OdieresisAring: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OdieresisAtilde: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OdieresisT: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OdieresisTcaron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OdieresisTcommaaccent: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OdieresisV: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OdieresisW: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -50,
                        -50,
                        -35
                    ],
                    OdieresisX: [
                        -50,
                        -50,
                        -60,
                        -60,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OdieresisY: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OdieresisYacute: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OdieresisYdieresis: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    Odieresiscomma: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    Odieresisperiod: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OgraveA: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OgraveAacute: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OgraveAbreve: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OgraveAcircumflex: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OgraveAdieresis: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OgraveAgrave: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OgraveAmacron: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OgraveAogonek: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OgraveAring: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OgraveAtilde: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OgraveT: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OgraveTcaron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OgraveTcommaaccent: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OgraveV: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OgraveW: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -50,
                        -50,
                        -35
                    ],
                    OgraveX: [
                        -50,
                        -50,
                        -60,
                        -60,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OgraveY: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OgraveYacute: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OgraveYdieresis: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    Ogravecomma: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    Ograveperiod: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OhungarumlautA: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OhungarumlautAacute: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OhungarumlautAbreve: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OhungarumlautAcircumflex: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OhungarumlautAdieresis: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OhungarumlautAgrave: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OhungarumlautAmacron: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OhungarumlautAogonek: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OhungarumlautAring: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OhungarumlautAtilde: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OhungarumlautT: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OhungarumlautTcaron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OhungarumlautTcommaaccent: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OhungarumlautV: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OhungarumlautW: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -50,
                        -50,
                        -35
                    ],
                    OhungarumlautX: [
                        -50,
                        -50,
                        -60,
                        -60,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OhungarumlautY: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OhungarumlautYacute: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OhungarumlautYdieresis: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    Ohungarumlautcomma: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    Ohungarumlautperiod: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OmacronA: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OmacronAacute: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OmacronAbreve: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OmacronAcircumflex: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OmacronAdieresis: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OmacronAgrave: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OmacronAmacron: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OmacronAogonek: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OmacronAring: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OmacronAtilde: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OmacronT: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OmacronTcaron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OmacronTcommaaccent: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OmacronV: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OmacronW: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -50,
                        -50,
                        -35
                    ],
                    OmacronX: [
                        -50,
                        -50,
                        -60,
                        -60,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OmacronY: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OmacronYacute: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OmacronYdieresis: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    Omacroncomma: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    Omacronperiod: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OslashA: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OslashAacute: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OslashAbreve: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OslashAcircumflex: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OslashAdieresis: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OslashAgrave: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OslashAmacron: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OslashAogonek: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OslashAring: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OslashAtilde: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OslashT: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OslashTcaron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OslashTcommaaccent: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OslashV: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OslashW: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -50,
                        -50,
                        -35
                    ],
                    OslashX: [
                        -50,
                        -50,
                        -60,
                        -60,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OslashY: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OslashYacute: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OslashYdieresis: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    Oslashcomma: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    Oslashperiod: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OtildeA: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OtildeAacute: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OtildeAbreve: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OtildeAcircumflex: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OtildeAdieresis: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OtildeAgrave: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OtildeAmacron: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OtildeAogonek: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OtildeAring: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OtildeAtilde: [
                        -50,
                        -50,
                        -20,
                        -20,
                        -40,
                        -40,
                        -55,
                        -35
                    ],
                    OtildeT: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OtildeTcaron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OtildeTcommaaccent: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OtildeV: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OtildeW: [
                        -50,
                        -50,
                        -30,
                        -30,
                        -50,
                        -50,
                        -50,
                        -35
                    ],
                    OtildeX: [
                        -50,
                        -50,
                        -60,
                        -60,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    OtildeY: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OtildeYacute: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    OtildeYdieresis: [
                        -70,
                        -70,
                        -70,
                        -70,
                        -50,
                        -50,
                        -50,
                        -50
                    ],
                    Otildecomma: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    Otildeperiod: [
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    PA: [
                        -100,
                        -100,
                        -120,
                        -120,
                        -74,
                        -85,
                        -90,
                        -92
                    ],
                    PAacute: [
                        -100,
                        -100,
                        -120,
                        -120,
                        -74,
                        -85,
                        -90,
                        -92
                    ],
                    PAbreve: [
                        -100,
                        -100,
                        -120,
                        -120,
                        -74,
                        -85,
                        -90,
                        -92
                    ],
                    PAcircumflex: [
                        -100,
                        -100,
                        -120,
                        -120,
                        -74,
                        -85,
                        -90,
                        -92
                    ],
                    PAdieresis: [
                        -100,
                        -100,
                        -120,
                        -120,
                        -74,
                        -85,
                        -90,
                        -92
                    ],
                    PAgrave: [
                        -100,
                        -100,
                        -120,
                        -120,
                        -74,
                        -85,
                        -90,
                        -92
                    ],
                    PAmacron: [
                        -100,
                        -100,
                        -120,
                        -120,
                        -74,
                        -85,
                        -90,
                        -92
                    ],
                    PAogonek: [
                        -100,
                        -100,
                        -120,
                        -120,
                        -74,
                        -85,
                        -90,
                        -92
                    ],
                    PAring: [
                        -100,
                        -100,
                        -120,
                        -120,
                        -74,
                        -85,
                        -90,
                        -92
                    ],
                    PAtilde: [
                        -100,
                        -100,
                        -120,
                        -120,
                        -74,
                        -85,
                        -90,
                        -92
                    ],
                    Pa: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -10,
                        -40,
                        -80,
                        -15
                    ],
                    Paacute: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -10,
                        -40,
                        -80,
                        -15
                    ],
                    Pabreve: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -10,
                        -40,
                        -80,
                        -15
                    ],
                    Pacircumflex: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -10,
                        -40,
                        -80,
                        -15
                    ],
                    Padieresis: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -10,
                        -40,
                        -80,
                        -15
                    ],
                    Pagrave: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -10,
                        -40,
                        -80,
                        -15
                    ],
                    Pamacron: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -10,
                        -40,
                        -80,
                        -15
                    ],
                    Paogonek: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -10,
                        -40,
                        -80,
                        -15
                    ],
                    Paring: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -10,
                        -40,
                        -80,
                        -15
                    ],
                    Patilde: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -10,
                        -40,
                        -80,
                        -15
                    ],
                    Pcomma: [
                        -120,
                        -120,
                        -180,
                        -180,
                        -92,
                        -129,
                        -135,
                        -111
                    ],
                    Pe: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -20,
                        -50,
                        -80
                    ],
                    Peacute: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -20,
                        -50,
                        -80
                    ],
                    Pecaron: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -20,
                        -50,
                        -80
                    ],
                    Pecircumflex: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -20,
                        -50,
                        -80
                    ],
                    Pedieresis: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -20,
                        -50,
                        -80
                    ],
                    Pedotaccent: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -20,
                        -50,
                        -80
                    ],
                    Pegrave: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -20,
                        -50,
                        -80
                    ],
                    Pemacron: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -20,
                        -50,
                        -80
                    ],
                    Peogonek: [
                        -30,
                        -30,
                        -50,
                        -50,
                        -20,
                        -50,
                        -80
                    ],
                    Po: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -20,
                        -55,
                        -80
                    ],
                    Poacute: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -20,
                        -55,
                        -80
                    ],
                    Pocircumflex: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -20,
                        -55,
                        -80
                    ],
                    Podieresis: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -20,
                        -55,
                        -80
                    ],
                    Pograve: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -20,
                        -55,
                        -80
                    ],
                    Pohungarumlaut: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -20,
                        -55,
                        -80
                    ],
                    Pomacron: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -20,
                        -55,
                        -80
                    ],
                    Poslash: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -20,
                        -55,
                        -80
                    ],
                    Potilde: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -20,
                        -55,
                        -80
                    ],
                    Pperiod: [
                        -120,
                        -120,
                        -180,
                        -180,
                        -110,
                        -129,
                        -135,
                        -111
                    ],
                    QU: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    QUacute: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    QUcircumflex: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    QUdieresis: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    QUgrave: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    QUhungarumlaut: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    QUmacron: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    QUogonek: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    QUring: [
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    Qcomma: [
                        20,
                        20
                    ],
                    Qperiod: [
                        20,
                        20,
                        0,
                        0,
                        -20
                    ],
                    RO: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    ROacute: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    ROcircumflex: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    ROdieresis: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    ROgrave: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    ROhungarumlaut: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    ROmacron: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    ROslash: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    ROtilde: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RT: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -40,
                        -30,
                        0,
                        -60
                    ],
                    RTcaron: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -40,
                        -30,
                        0,
                        -60
                    ],
                    RTcommaaccent: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -40,
                        -30,
                        0,
                        -60
                    ],
                    RU: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RUacute: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RUcircumflex: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RUdieresis: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RUgrave: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RUhungarumlaut: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RUmacron: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RUogonek: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RUring: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RV: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -55,
                        -18,
                        -18,
                        -80
                    ],
                    RW: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -35,
                        -18,
                        -18,
                        -55
                    ],
                    RY: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -35,
                        -18,
                        -18,
                        -65
                    ],
                    RYacute: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -35,
                        -18,
                        -18,
                        -65
                    ],
                    RYdieresis: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -35,
                        -18,
                        -18,
                        -65
                    ],
                    RacuteO: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteOacute: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteOcircumflex: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteOdieresis: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteOgrave: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteOhungarumlaut: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteOmacron: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteOslash: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteOtilde: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteT: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -40,
                        -30,
                        0,
                        -60
                    ],
                    RacuteTcaron: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -40,
                        -30,
                        0,
                        -60
                    ],
                    RacuteTcommaaccent: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -40,
                        -30,
                        0,
                        -60
                    ],
                    RacuteU: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteUacute: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteUcircumflex: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteUdieresis: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteUgrave: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteUhungarumlaut: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteUmacron: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteUogonek: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteUring: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RacuteV: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -55,
                        -18,
                        -18,
                        -80
                    ],
                    RacuteW: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -35,
                        -18,
                        -18,
                        -55
                    ],
                    RacuteY: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -35,
                        -18,
                        -18,
                        -65
                    ],
                    RacuteYacute: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -35,
                        -18,
                        -18,
                        -65
                    ],
                    RacuteYdieresis: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -35,
                        -18,
                        -18,
                        -65
                    ],
                    RcaronO: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronOacute: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronOcircumflex: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronOdieresis: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronOgrave: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronOhungarumlaut: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronOmacron: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronOslash: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronOtilde: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronT: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -40,
                        -30,
                        0,
                        -60
                    ],
                    RcaronTcaron: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -40,
                        -30,
                        0,
                        -60
                    ],
                    RcaronTcommaaccent: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -40,
                        -30,
                        0,
                        -60
                    ],
                    RcaronU: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronUacute: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronUcircumflex: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronUdieresis: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronUgrave: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronUhungarumlaut: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronUmacron: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronUogonek: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronUring: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcaronV: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -55,
                        -18,
                        -18,
                        -80
                    ],
                    RcaronW: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -35,
                        -18,
                        -18,
                        -55
                    ],
                    RcaronY: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -35,
                        -18,
                        -18,
                        -65
                    ],
                    RcaronYacute: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -35,
                        -18,
                        -18,
                        -65
                    ],
                    RcaronYdieresis: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -35,
                        -18,
                        -18,
                        -65
                    ],
                    RcommaaccentO: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentOacute: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentOcircumflex: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentOdieresis: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentOgrave: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentOhungarumlaut: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentOmacron: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentOslash: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentOtilde: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentT: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -40,
                        -30,
                        0,
                        -60
                    ],
                    RcommaaccentTcaron: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -40,
                        -30,
                        0,
                        -60
                    ],
                    RcommaaccentTcommaaccent: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -40,
                        -30,
                        0,
                        -60
                    ],
                    RcommaaccentU: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentUacute: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentUcircumflex: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentUdieresis: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentUgrave: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentUhungarumlaut: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentUmacron: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentUogonek: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentUring: [
                        -20,
                        -20,
                        -40,
                        -40,
                        -30,
                        -40,
                        -40,
                        -40
                    ],
                    RcommaaccentV: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -55,
                        -18,
                        -18,
                        -80
                    ],
                    RcommaaccentW: [
                        -40,
                        -40,
                        -30,
                        -30,
                        -35,
                        -18,
                        -18,
                        -55
                    ],
                    RcommaaccentY: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -35,
                        -18,
                        -18,
                        -65
                    ],
                    RcommaaccentYacute: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -35,
                        -18,
                        -18,
                        -65
                    ],
                    RcommaaccentYdieresis: [
                        -50,
                        -50,
                        -50,
                        -50,
                        -35,
                        -18,
                        -18,
                        -65
                    ],
                    TA: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TAacute: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TAbreve: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TAcircumflex: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TAdieresis: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TAgrave: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TAmacron: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TAogonek: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TAring: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TAtilde: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TO: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TOacute: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TOcircumflex: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TOdieresis: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TOgrave: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TOhungarumlaut: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TOmacron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TOslash: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TOtilde: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    Ta: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -80
                    ],
                    Taacute: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -80
                    ],
                    Tabreve: [
                        -80,
                        -80,
                        -60,
                        -60,
                        -52,
                        -92,
                        -92,
                        -80
                    ],
                    Tacircumflex: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -52,
                        -92,
                        -92,
                        -80
                    ],
                    Tadieresis: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -52,
                        -92,
                        -92,
                        -40
                    ],
                    Tagrave: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -52,
                        -92,
                        -92,
                        -40
                    ],
                    Tamacron: [
                        -80,
                        -80,
                        -60,
                        -60,
                        -52,
                        -92,
                        -92,
                        -40
                    ],
                    Taogonek: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -80
                    ],
                    Taring: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -80
                    ],
                    Tatilde: [
                        -80,
                        -80,
                        -60,
                        -60,
                        -52,
                        -92,
                        -92,
                        -40
                    ],
                    Tcolon: [
                        -40,
                        -40,
                        -20,
                        -20,
                        -74,
                        -74,
                        -55,
                        -50
                    ],
                    Tcomma: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -74,
                        -92,
                        -74,
                        -74
                    ],
                    Te: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -70
                    ],
                    Teacute: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -70
                    ],
                    Tecaron: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -70
                    ],
                    Tecircumflex: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -52,
                        -70
                    ],
                    Tedieresis: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -52,
                        -52,
                        -52,
                        -30
                    ],
                    Tedotaccent: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -70
                    ],
                    Tegrave: [
                        -60,
                        -60,
                        -60,
                        -60,
                        -52,
                        -52,
                        -52,
                        -70
                    ],
                    Temacron: [
                        -60,
                        -60,
                        -60,
                        -60,
                        -52,
                        -52,
                        -52,
                        -30
                    ],
                    Teogonek: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -70
                    ],
                    Thyphen: [
                        -120,
                        -120,
                        -140,
                        -140,
                        -92,
                        -92,
                        -74,
                        -92
                    ],
                    To: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Toacute: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tocircumflex: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Todieresis: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tograve: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tohungarumlaut: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tomacron: [
                        -80,
                        -80,
                        -60,
                        -60,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Toslash: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Totilde: [
                        -80,
                        -80,
                        -60,
                        -60,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tperiod: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -90,
                        -92,
                        -74,
                        -74
                    ],
                    Tr: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -74,
                        -37,
                        -55,
                        -35
                    ],
                    Tracute: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -74,
                        -37,
                        -55,
                        -35
                    ],
                    Trcommaaccent: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -74,
                        -37,
                        -55,
                        -35
                    ],
                    Tsemicolon: [
                        -40,
                        -40,
                        -20,
                        -20,
                        -74,
                        -74,
                        -65,
                        -55
                    ],
                    Tu: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tuacute: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tucircumflex: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tudieresis: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tugrave: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tuhungarumlaut: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tumacron: [
                        -90,
                        -90,
                        -60,
                        -60,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tuogonek: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Turing: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tw: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -74,
                        -37,
                        -74,
                        -80
                    ],
                    Ty: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -34,
                        -37,
                        -74,
                        -80
                    ],
                    Tyacute: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -34,
                        -37,
                        -74,
                        -80
                    ],
                    Tydieresis: [
                        -60,
                        -60,
                        -60,
                        -60,
                        -34,
                        -37,
                        -34,
                        -80
                    ],
                    TcaronA: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcaronAacute: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcaronAbreve: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcaronAcircumflex: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcaronAdieresis: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcaronAgrave: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcaronAmacron: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcaronAogonek: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcaronAring: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcaronAtilde: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcaronO: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcaronOacute: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcaronOcircumflex: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcaronOdieresis: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcaronOgrave: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcaronOhungarumlaut: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcaronOmacron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcaronOslash: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcaronOtilde: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    Tcarona: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -80
                    ],
                    Tcaronaacute: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -80
                    ],
                    Tcaronabreve: [
                        -80,
                        -80,
                        -60,
                        -60,
                        -52,
                        -92,
                        -92,
                        -80
                    ],
                    Tcaronacircumflex: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -52,
                        -92,
                        -92,
                        -80
                    ],
                    Tcaronadieresis: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -52,
                        -92,
                        -92,
                        -40
                    ],
                    Tcaronagrave: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -52,
                        -92,
                        -92,
                        -40
                    ],
                    Tcaronamacron: [
                        -80,
                        -80,
                        -60,
                        -60,
                        -52,
                        -92,
                        -92,
                        -40
                    ],
                    Tcaronaogonek: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -80
                    ],
                    Tcaronaring: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -80
                    ],
                    Tcaronatilde: [
                        -80,
                        -80,
                        -60,
                        -60,
                        -52,
                        -92,
                        -92,
                        -40
                    ],
                    Tcaroncolon: [
                        -40,
                        -40,
                        -20,
                        -20,
                        -74,
                        -74,
                        -55,
                        -50
                    ],
                    Tcaroncomma: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -74,
                        -92,
                        -74,
                        -74
                    ],
                    Tcarone: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -70
                    ],
                    Tcaroneacute: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -70
                    ],
                    Tcaronecaron: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -70
                    ],
                    Tcaronecircumflex: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -52,
                        -30
                    ],
                    Tcaronedieresis: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -52,
                        -52,
                        -52,
                        -30
                    ],
                    Tcaronedotaccent: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -70
                    ],
                    Tcaronegrave: [
                        -60,
                        -60,
                        -60,
                        -60,
                        -52,
                        -52,
                        -52,
                        -70
                    ],
                    Tcaronemacron: [
                        -60,
                        -60,
                        -60,
                        -60,
                        -52,
                        -52,
                        -52,
                        -30
                    ],
                    Tcaroneogonek: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -70
                    ],
                    Tcaronhyphen: [
                        -120,
                        -120,
                        -140,
                        -140,
                        -92,
                        -92,
                        -74,
                        -92
                    ],
                    Tcarono: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcaronoacute: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcaronocircumflex: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcaronodieresis: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcaronograve: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcaronohungarumlaut: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcaronomacron: [
                        -80,
                        -80,
                        -60,
                        -60,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcaronoslash: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcaronotilde: [
                        -80,
                        -80,
                        -60,
                        -60,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcaronperiod: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -90,
                        -92,
                        -74,
                        -74
                    ],
                    Tcaronr: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -74,
                        -37,
                        -55,
                        -35
                    ],
                    Tcaronracute: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -74,
                        -37,
                        -55,
                        -35
                    ],
                    Tcaronrcommaaccent: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -74,
                        -37,
                        -55,
                        -35
                    ],
                    Tcaronsemicolon: [
                        -40,
                        -40,
                        -20,
                        -20,
                        -74,
                        -74,
                        -65,
                        -55
                    ],
                    Tcaronu: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcaronuacute: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcaronucircumflex: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcaronudieresis: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcaronugrave: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcaronuhungarumlaut: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcaronumacron: [
                        -90,
                        -90,
                        -60,
                        -60,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcaronuogonek: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcaronuring: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcaronw: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -74,
                        -37,
                        -74,
                        -80
                    ],
                    Tcarony: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -34,
                        -37,
                        -74,
                        -80
                    ],
                    Tcaronyacute: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -34,
                        -37,
                        -74,
                        -80
                    ],
                    Tcaronydieresis: [
                        -60,
                        -60,
                        -60,
                        -60,
                        -34,
                        -37,
                        -34,
                        -80
                    ],
                    TcommaaccentA: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcommaaccentAacute: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcommaaccentAbreve: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcommaaccentAcircumflex: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcommaaccentAdieresis: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcommaaccentAgrave: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcommaaccentAmacron: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcommaaccentAogonek: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcommaaccentAring: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcommaaccentAtilde: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -90,
                        -55,
                        -50,
                        -93
                    ],
                    TcommaaccentO: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcommaaccentOacute: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcommaaccentOcircumflex: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcommaaccentOdieresis: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcommaaccentOgrave: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcommaaccentOhungarumlaut: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcommaaccentOmacron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcommaaccentOslash: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    TcommaaccentOtilde: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -18,
                        -18,
                        -18,
                        -18
                    ],
                    Tcommaaccenta: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -80
                    ],
                    Tcommaaccentaacute: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -80
                    ],
                    Tcommaaccentabreve: [
                        -80,
                        -80,
                        -60,
                        -60,
                        -52,
                        -92,
                        -92,
                        -80
                    ],
                    Tcommaaccentacircumflex: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -52,
                        -92,
                        -92,
                        -80
                    ],
                    Tcommaaccentadieresis: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -52,
                        -92,
                        -92,
                        -40
                    ],
                    Tcommaaccentagrave: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -52,
                        -92,
                        -92,
                        -40
                    ],
                    Tcommaaccentamacron: [
                        -80,
                        -80,
                        -60,
                        -60,
                        -52,
                        -92,
                        -92,
                        -40
                    ],
                    Tcommaaccentaogonek: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -80
                    ],
                    Tcommaaccentaring: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -80
                    ],
                    Tcommaaccentatilde: [
                        -80,
                        -80,
                        -60,
                        -60,
                        -52,
                        -92,
                        -92,
                        -40
                    ],
                    Tcommaaccentcolon: [
                        -40,
                        -40,
                        -20,
                        -20,
                        -74,
                        -74,
                        -55,
                        -50
                    ],
                    Tcommaaccentcomma: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -74,
                        -92,
                        -74,
                        -74
                    ],
                    Tcommaaccente: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -70
                    ],
                    Tcommaaccenteacute: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -70
                    ],
                    Tcommaaccentecaron: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -70
                    ],
                    Tcommaaccentecircumflex: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -52,
                        -30
                    ],
                    Tcommaaccentedieresis: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -52,
                        -52,
                        -52,
                        -30
                    ],
                    Tcommaaccentedotaccent: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -70
                    ],
                    Tcommaaccentegrave: [
                        -60,
                        -60,
                        -60,
                        -60,
                        -52,
                        -52,
                        -52,
                        -30
                    ],
                    Tcommaaccentemacron: [
                        -60,
                        -60,
                        -60,
                        -60,
                        -52,
                        -52,
                        -52,
                        -70
                    ],
                    Tcommaaccenteogonek: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -92,
                        -92,
                        -92,
                        -70
                    ],
                    Tcommaaccenthyphen: [
                        -120,
                        -120,
                        -140,
                        -140,
                        -92,
                        -92,
                        -74,
                        -92
                    ],
                    Tcommaaccento: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcommaaccentoacute: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcommaaccentocircumflex: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcommaaccentodieresis: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcommaaccentograve: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcommaaccentohungarumlaut: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcommaaccentomacron: [
                        -80,
                        -80,
                        -60,
                        -60,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcommaaccentoslash: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcommaaccentotilde: [
                        -80,
                        -80,
                        -60,
                        -60,
                        -92,
                        -95,
                        -92,
                        -80
                    ],
                    Tcommaaccentperiod: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -90,
                        -92,
                        -74,
                        -74
                    ],
                    Tcommaaccentr: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -74,
                        -37,
                        -55,
                        -35
                    ],
                    Tcommaaccentracute: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -74,
                        -37,
                        -55,
                        -35
                    ],
                    Tcommaaccentrcommaaccent: [
                        -80,
                        -80,
                        -120,
                        -120,
                        -74,
                        -37,
                        -55,
                        -35
                    ],
                    Tcommaaccentsemicolon: [
                        -40,
                        -40,
                        -20,
                        -20,
                        -74,
                        -74,
                        -65,
                        -55
                    ],
                    Tcommaaccentu: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcommaaccentuacute: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcommaaccentucircumflex: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcommaaccentudieresis: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcommaaccentugrave: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcommaaccentuhungarumlaut: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcommaaccentumacron: [
                        -90,
                        -90,
                        -60,
                        -60,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcommaaccentuogonek: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcommaaccenturing: [
                        -90,
                        -90,
                        -120,
                        -120,
                        -92,
                        -37,
                        -55,
                        -45
                    ],
                    Tcommaaccentw: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -74,
                        -37,
                        -74,
                        -80
                    ],
                    Tcommaaccenty: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -34,
                        -37,
                        -74,
                        -80
                    ],
                    Tcommaaccentyacute: [
                        -60,
                        -60,
                        -120,
                        -120,
                        -34,
                        -37,
                        -74,
                        -80
                    ],
                    Tcommaaccentydieresis: [
                        -60,
                        -60,
                        -60,
                        -60,
                        -34,
                        -37,
                        -34,
                        -80
                    ],
                    UA: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UAacute: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UAbreve: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UAcircumflex: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UAdieresis: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UAgrave: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UAmacron: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UAogonek: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UAring: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UAtilde: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    Ucomma: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    Uperiod: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    UacuteA: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UacuteAacute: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UacuteAbreve: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UacuteAcircumflex: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UacuteAdieresis: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UacuteAgrave: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UacuteAmacron: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UacuteAogonek: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UacuteAring: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UacuteAtilde: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    Uacutecomma: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    Uacuteperiod: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    UcircumflexA: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UcircumflexAacute: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UcircumflexAbreve: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UcircumflexAcircumflex: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UcircumflexAdieresis: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UcircumflexAgrave: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UcircumflexAmacron: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UcircumflexAogonek: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UcircumflexAring: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UcircumflexAtilde: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    Ucircumflexcomma: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    Ucircumflexperiod: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    UdieresisA: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UdieresisAacute: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UdieresisAbreve: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UdieresisAcircumflex: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UdieresisAdieresis: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UdieresisAgrave: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UdieresisAmacron: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UdieresisAogonek: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UdieresisAring: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UdieresisAtilde: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    Udieresiscomma: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    Udieresisperiod: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    UgraveA: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UgraveAacute: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UgraveAbreve: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UgraveAcircumflex: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UgraveAdieresis: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UgraveAgrave: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UgraveAmacron: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UgraveAogonek: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UgraveAring: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UgraveAtilde: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    Ugravecomma: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    Ugraveperiod: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    UhungarumlautA: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UhungarumlautAacute: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UhungarumlautAbreve: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UhungarumlautAcircumflex: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UhungarumlautAdieresis: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UhungarumlautAgrave: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UhungarumlautAmacron: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UhungarumlautAogonek: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UhungarumlautAring: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UhungarumlautAtilde: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    Uhungarumlautcomma: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    Uhungarumlautperiod: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    UmacronA: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UmacronAacute: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UmacronAbreve: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UmacronAcircumflex: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UmacronAdieresis: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UmacronAgrave: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UmacronAmacron: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UmacronAogonek: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UmacronAring: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UmacronAtilde: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    Umacroncomma: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    Umacronperiod: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    UogonekA: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UogonekAacute: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UogonekAbreve: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UogonekAcircumflex: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UogonekAdieresis: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UogonekAgrave: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UogonekAmacron: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UogonekAogonek: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UogonekAring: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UogonekAtilde: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    Uogonekcomma: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    Uogonekperiod: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    UringA: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UringAacute: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UringAbreve: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UringAcircumflex: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UringAdieresis: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UringAgrave: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UringAmacron: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UringAogonek: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UringAring: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    UringAtilde: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -60,
                        -45,
                        -40,
                        -40
                    ],
                    Uringcomma: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    Uringperiod: [
                        -30,
                        -30,
                        -40,
                        -40,
                        -50,
                        0,
                        -25
                    ],
                    VA: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -135,
                        -85,
                        -60,
                        -135
                    ],
                    VAacute: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -135,
                        -85,
                        -60,
                        -135
                    ],
                    VAbreve: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -135,
                        -85,
                        -60,
                        -135
                    ],
                    VAcircumflex: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -135,
                        -85,
                        -60,
                        -135
                    ],
                    VAdieresis: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -135,
                        -85,
                        -60,
                        -135
                    ],
                    VAgrave: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -135,
                        -85,
                        -60,
                        -135
                    ],
                    VAmacron: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -135,
                        -85,
                        -60,
                        -135
                    ],
                    VAogonek: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -135,
                        -85,
                        -60,
                        -135
                    ],
                    VAring: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -135,
                        -85,
                        -60,
                        -135
                    ],
                    VAtilde: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -135,
                        -85,
                        -60,
                        -135
                    ],
                    VG: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -30,
                        -10,
                        0,
                        -15
                    ],
                    VGbreve: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -30,
                        -10,
                        0,
                        -15
                    ],
                    VGcommaaccent: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -30,
                        -10,
                        0,
                        -15
                    ],
                    VO: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -45,
                        -30,
                        -30,
                        -40
                    ],
                    VOacute: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -45,
                        -30,
                        -30,
                        -40
                    ],
                    VOcircumflex: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -45,
                        -30,
                        -30,
                        -40
                    ],
                    VOdieresis: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -45,
                        -30,
                        -30,
                        -40
                    ],
                    VOgrave: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -45,
                        -30,
                        -30,
                        -40
                    ],
                    VOhungarumlaut: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -45,
                        -30,
                        -30,
                        -40
                    ],
                    VOmacron: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -45,
                        -30,
                        -30,
                        -40
                    ],
                    VOslash: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -45,
                        -30,
                        -30,
                        -40
                    ],
                    VOtilde: [
                        -50,
                        -50,
                        -40,
                        -40,
                        -45,
                        -30,
                        -30,
                        -40
                    ],
                    Va: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -111,
                        -111,
                        -111
                    ],
                    Vaacute: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -111,
                        -111,
                        -111
                    ],
                    Vabreve: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -111,
                        -111,
                        -111
                    ],
                    Vacircumflex: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -111,
                        -111,
                        -71
                    ],
                    Vadieresis: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -111,
                        -111,
                        -71
                    ],
                    Vagrave: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -111,
                        -111,
                        -71
                    ],
                    Vamacron: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -111,
                        -111,
                        -71
                    ],
                    Vaogonek: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -111,
                        -111,
                        -111
                    ],
                    Varing: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -111,
                        -111,
                        -111
                    ],
                    Vatilde: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -111,
                        -111,
                        -71
                    ],
                    Vcolon: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -92,
                        -74,
                        -65,
                        -74
                    ],
                    Vcomma: [
                        -120,
                        -120,
                        -125,
                        -125,
                        -129,
                        -129,
                        -129,
                        -129
                    ],
                    Ve: [
                        -50,
                        -50,
                        -80,
                        -80,
                        -100,
                        -111,
                        -111,
                        -111
                    ],
                    Veacute: [
                        -50,
                        -50,
                        -80,
                        -80,
                        -100,
                        -111,
                        -111,
                        -111
                    ],
                    Vecaron: [
                        -50,
                        -50,
                        -80,
                        -80,
                        -100,
                        -111,
                        -111,
                        -71
                    ],
                    Vecircumflex: [
                        -50,
                        -50,
                        -80,
                        -80,
                        -100,
                        -111,
                        -111,
                        -71
                    ],
                    Vedieresis: [
                        -50,
                        -50,
                        -80,
                        -80,
                        -100,
                        -71,
                        -71,
                        -71
                    ],
                    Vedotaccent: [
                        -50,
                        -50,
                        -80,
                        -80,
                        -100,
                        -111,
                        -111,
                        -111
                    ],
                    Vegrave: [
                        -50,
                        -50,
                        -80,
                        -80,
                        -100,
                        -71,
                        -71,
                        -71
                    ],
                    Vemacron: [
                        -50,
                        -50,
                        -80,
                        -80,
                        -100,
                        -71,
                        -71,
                        -71
                    ],
                    Veogonek: [
                        -50,
                        -50,
                        -80,
                        -80,
                        -100,
                        -111,
                        -111,
                        -111
                    ],
                    Vhyphen: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -74,
                        -70,
                        -55,
                        -100
                    ],
                    Vo: [
                        -90,
                        -90,
                        -80,
                        -80,
                        -100,
                        -111,
                        -111,
                        -129
                    ],
                    Voacute: [
                        -90,
                        -90,
                        -80,
                        -80,
                        -100,
                        -111,
                        -111,
                        -129
                    ],
                    Vocircumflex: [
                        -90,
                        -90,
                        -80,
                        -80,
                        -100,
                        -111,
                        -111,
                        -129
                    ],
                    Vodieresis: [
                        -90,
                        -90,
                        -80,
                        -80,
                        -100,
                        -111,
                        -111,
                        -89
                    ],
                    Vograve: [
                        -90,
                        -90,
                        -80,
                        -80,
                        -100,
                        -111,
                        -111,
                        -89
                    ],
                    Vohungarumlaut: [
                        -90,
                        -90,
                        -80,
                        -80,
                        -100,
                        -111,
                        -111,
                        -129
                    ],
                    Vomacron: [
                        -90,
                        -90,
                        -80,
                        -80,
                        -100,
                        -111,
                        -111,
                        -89
                    ],
                    Voslash: [
                        -90,
                        -90,
                        -80,
                        -80,
                        -100,
                        -111,
                        -111,
                        -129
                    ],
                    Votilde: [
                        -90,
                        -90,
                        -80,
                        -80,
                        -100,
                        -111,
                        -111,
                        -89
                    ],
                    Vperiod: [
                        -120,
                        -120,
                        -125,
                        -125,
                        -145,
                        -129,
                        -129,
                        -129
                    ],
                    Vsemicolon: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -92,
                        -74,
                        -74,
                        -74
                    ],
                    Vu: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -55,
                        -74,
                        -75
                    ],
                    Vuacute: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -55,
                        -74,
                        -75
                    ],
                    Vucircumflex: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -55,
                        -74,
                        -75
                    ],
                    Vudieresis: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -55,
                        -74,
                        -75
                    ],
                    Vugrave: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -55,
                        -74,
                        -75
                    ],
                    Vuhungarumlaut: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -55,
                        -74,
                        -75
                    ],
                    Vumacron: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -55,
                        -74,
                        -75
                    ],
                    Vuogonek: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -55,
                        -74,
                        -75
                    ],
                    Vuring: [
                        -60,
                        -60,
                        -70,
                        -70,
                        -92,
                        -55,
                        -74,
                        -75
                    ],
                    WA: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -120,
                        -74,
                        -60,
                        -120
                    ],
                    WAacute: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -120,
                        -74,
                        -60,
                        -120
                    ],
                    WAbreve: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -120,
                        -74,
                        -60,
                        -120
                    ],
                    WAcircumflex: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -120,
                        -74,
                        -60,
                        -120
                    ],
                    WAdieresis: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -120,
                        -74,
                        -60,
                        -120
                    ],
                    WAgrave: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -120,
                        -74,
                        -60,
                        -120
                    ],
                    WAmacron: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -120,
                        -74,
                        -60,
                        -120
                    ],
                    WAogonek: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -120,
                        -74,
                        -60,
                        -120
                    ],
                    WAring: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -120,
                        -74,
                        -60,
                        -120
                    ],
                    WAtilde: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -120,
                        -74,
                        -60,
                        -120
                    ],
                    WO: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -10,
                        -15,
                        -25,
                        -10
                    ],
                    WOacute: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -10,
                        -15,
                        -25,
                        -10
                    ],
                    WOcircumflex: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -10,
                        -15,
                        -25,
                        -10
                    ],
                    WOdieresis: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -10,
                        -15,
                        -25,
                        -10
                    ],
                    WOgrave: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -10,
                        -15,
                        -25,
                        -10
                    ],
                    WOhungarumlaut: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -10,
                        -15,
                        -25,
                        -10
                    ],
                    WOmacron: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -10,
                        -15,
                        -25,
                        -10
                    ],
                    WOslash: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -10,
                        -15,
                        -25,
                        -10
                    ],
                    WOtilde: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -10,
                        -15,
                        -25,
                        -10
                    ],
                    Wa: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -65,
                        -85,
                        -92,
                        -80
                    ],
                    Waacute: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -65,
                        -85,
                        -92,
                        -80
                    ],
                    Wabreve: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -65,
                        -85,
                        -92,
                        -80
                    ],
                    Wacircumflex: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -65,
                        -85,
                        -92,
                        -80
                    ],
                    Wadieresis: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -65,
                        -85,
                        -92,
                        -80
                    ],
                    Wagrave: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -65,
                        -85,
                        -92,
                        -80
                    ],
                    Wamacron: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -65,
                        -85,
                        -92,
                        -80
                    ],
                    Waogonek: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -65,
                        -85,
                        -92,
                        -80
                    ],
                    Waring: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -65,
                        -85,
                        -92,
                        -80
                    ],
                    Watilde: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -65,
                        -85,
                        -92,
                        -80
                    ],
                    Wcolon: [
                        -10,
                        -10,
                        0,
                        0,
                        -55,
                        -55,
                        -65,
                        -37
                    ],
                    Wcomma: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -92,
                        -74,
                        -92,
                        -92
                    ],
                    We: [
                        -35,
                        -35,
                        -30,
                        -30,
                        -65,
                        -90,
                        -92,
                        -80
                    ],
                    Weacute: [
                        -35,
                        -35,
                        -30,
                        -30,
                        -65,
                        -90,
                        -92,
                        -80
                    ],
                    Wecaron: [
                        -35,
                        -35,
                        -30,
                        -30,
                        -65,
                        -90,
                        -92,
                        -80
                    ],
                    Wecircumflex: [
                        -35,
                        -35,
                        -30,
                        -30,
                        -65,
                        -90,
                        -92,
                        -80
                    ],
                    Wedieresis: [
                        -35,
                        -35,
                        -30,
                        -30,
                        -65,
                        -50,
                        -52,
                        -40
                    ],
                    Wedotaccent: [
                        -35,
                        -35,
                        -30,
                        -30,
                        -65,
                        -90,
                        -92,
                        -80
                    ],
                    Wegrave: [
                        -35,
                        -35,
                        -30,
                        -30,
                        -65,
                        -50,
                        -52,
                        -40
                    ],
                    Wemacron: [
                        -35,
                        -35,
                        -30,
                        -30,
                        -65,
                        -50,
                        -52,
                        -40
                    ],
                    Weogonek: [
                        -35,
                        -35,
                        -30,
                        -30,
                        -65,
                        -90,
                        -92,
                        -80
                    ],
                    Whyphen: [
                        -40,
                        -40,
                        -40,
                        -40,
                        -37,
                        -50,
                        -37,
                        -65
                    ],
                    Wo: [
                        -60,
                        -60,
                        -30,
                        -30,
                        -75,
                        -80,
                        -92,
                        -80
                    ],
                    Woacute: [
                        -60,
                        -60,
                        -30,
                        -30,
                        -75,
                        -80,
                        -92,
                        -80
                    ],
                    Wocircumflex: [
                        -60,
                        -60,
                        -30,
                        -30,
                        -75,
                        -80,
                        -92,
                        -80
                    ],
                    Wodieresis: [
                        -60,
                        -60,
                        -30,
                        -30,
                        -75,
                        -80,
                        -92,
                        -80
                    ],
                    Wograve: [
                        -60,
                        -60,
                        -30,
                        -30,
                        -75,
                        -80,
                        -92,
                        -80
                    ],
                    Wohungarumlaut: [
                        -60,
                        -60,
                        -30,
                        -30,
                        -75,
                        -80,
                        -92,
                        -80
                    ],
                    Womacron: [
                        -60,
                        -60,
                        -30,
                        -30,
                        -75,
                        -80,
                        -92,
                        -80
                    ],
                    Woslash: [
                        -60,
                        -60,
                        -30,
                        -30,
                        -75,
                        -80,
                        -92,
                        -80
                    ],
                    Wotilde: [
                        -60,
                        -60,
                        -30,
                        -30,
                        -75,
                        -80,
                        -92,
                        -80
                    ],
                    Wperiod: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -92,
                        -74,
                        -92,
                        -92
                    ],
                    Wsemicolon: [
                        -10,
                        -10,
                        0,
                        0,
                        -55,
                        -55,
                        -65,
                        -37
                    ],
                    Wu: [
                        -45,
                        -45,
                        -30,
                        -30,
                        -50,
                        -55,
                        -55,
                        -50
                    ],
                    Wuacute: [
                        -45,
                        -45,
                        -30,
                        -30,
                        -50,
                        -55,
                        -55,
                        -50
                    ],
                    Wucircumflex: [
                        -45,
                        -45,
                        -30,
                        -30,
                        -50,
                        -55,
                        -55,
                        -50
                    ],
                    Wudieresis: [
                        -45,
                        -45,
                        -30,
                        -30,
                        -50,
                        -55,
                        -55,
                        -50
                    ],
                    Wugrave: [
                        -45,
                        -45,
                        -30,
                        -30,
                        -50,
                        -55,
                        -55,
                        -50
                    ],
                    Wuhungarumlaut: [
                        -45,
                        -45,
                        -30,
                        -30,
                        -50,
                        -55,
                        -55,
                        -50
                    ],
                    Wumacron: [
                        -45,
                        -45,
                        -30,
                        -30,
                        -50,
                        -55,
                        -55,
                        -50
                    ],
                    Wuogonek: [
                        -45,
                        -45,
                        -30,
                        -30,
                        -50,
                        -55,
                        -55,
                        -50
                    ],
                    Wuring: [
                        -45,
                        -45,
                        -30,
                        -30,
                        -50,
                        -55,
                        -55,
                        -50
                    ],
                    Wy: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -60,
                        -55,
                        -70,
                        -73
                    ],
                    Wyacute: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -60,
                        -55,
                        -70,
                        -73
                    ],
                    Wydieresis: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -60,
                        -55,
                        -70,
                        -73
                    ],
                    YA: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YAacute: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YAbreve: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YAcircumflex: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YAdieresis: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YAgrave: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YAmacron: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YAogonek: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YAring: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YAtilde: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YO: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YOacute: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YOcircumflex: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YOdieresis: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YOgrave: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YOhungarumlaut: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YOmacron: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YOslash: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YOtilde: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    Ya: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Yaacute: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Yabreve: [
                        -90,
                        -90,
                        -70,
                        -70,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Yacircumflex: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Yadieresis: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -60
                    ],
                    Yagrave: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -60
                    ],
                    Yamacron: [
                        -90,
                        -90,
                        -70,
                        -70,
                        -85,
                        -92,
                        -92,
                        -60
                    ],
                    Yaogonek: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Yaring: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Yatilde: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -60
                    ],
                    Ycolon: [
                        -50,
                        -50,
                        -60,
                        -60,
                        -92,
                        -92,
                        -65,
                        -92
                    ],
                    Ycomma: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -92,
                        -92,
                        -92,
                        -129
                    ],
                    Ye: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -100
                    ],
                    Yeacute: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -100
                    ],
                    Yecaron: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -100
                    ],
                    Yecircumflex: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -71,
                        -92,
                        -100
                    ],
                    Yedieresis: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -71,
                        -71,
                        -52,
                        -60
                    ],
                    Yedotaccent: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -100
                    ],
                    Yegrave: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -71,
                        -71,
                        -52,
                        -60
                    ],
                    Yemacron: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -71,
                        -71,
                        -52,
                        -60
                    ],
                    Yeogonek: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -100
                    ],
                    Yo: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -110
                    ],
                    Yoacute: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -110
                    ],
                    Yocircumflex: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -110
                    ],
                    Yodieresis: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -70
                    ],
                    Yograve: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -70
                    ],
                    Yohungarumlaut: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -110
                    ],
                    Yomacron: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -70
                    ],
                    Yoslash: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -110
                    ],
                    Yotilde: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -70
                    ],
                    Yperiod: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -92,
                        -74,
                        -92,
                        -129
                    ],
                    Ysemicolon: [
                        -50,
                        -50,
                        -60,
                        -60,
                        -92,
                        -92,
                        -65,
                        -92
                    ],
                    Yu: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    Yuacute: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    Yucircumflex: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    Yudieresis: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -71
                    ],
                    Yugrave: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -71
                    ],
                    Yuhungarumlaut: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    Yumacron: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -71
                    ],
                    Yuogonek: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    Yuring: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    YacuteA: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YacuteAacute: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YacuteAbreve: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YacuteAcircumflex: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YacuteAdieresis: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YacuteAgrave: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YacuteAmacron: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YacuteAogonek: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YacuteAring: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YacuteAtilde: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YacuteO: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YacuteOacute: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YacuteOcircumflex: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YacuteOdieresis: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YacuteOgrave: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YacuteOhungarumlaut: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YacuteOmacron: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YacuteOslash: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YacuteOtilde: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    Yacutea: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Yacuteaacute: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Yacuteabreve: [
                        -90,
                        -90,
                        -70,
                        -70,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Yacuteacircumflex: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Yacuteadieresis: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -60
                    ],
                    Yacuteagrave: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -60
                    ],
                    Yacuteamacron: [
                        -90,
                        -90,
                        -70,
                        -70,
                        -85,
                        -92,
                        -92,
                        -60
                    ],
                    Yacuteaogonek: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Yacutearing: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Yacuteatilde: [
                        -90,
                        -90,
                        -70,
                        -70,
                        -85,
                        -92,
                        -92,
                        -60
                    ],
                    Yacutecolon: [
                        -50,
                        -50,
                        -60,
                        -60,
                        -92,
                        -92,
                        -65,
                        -92
                    ],
                    Yacutecomma: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -92,
                        -92,
                        -92,
                        -129
                    ],
                    Yacutee: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -100
                    ],
                    Yacuteeacute: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -100
                    ],
                    Yacuteecaron: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -100
                    ],
                    Yacuteecircumflex: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -71,
                        -92,
                        -100
                    ],
                    Yacuteedieresis: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -71,
                        -71,
                        -52,
                        -60
                    ],
                    Yacuteedotaccent: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -100
                    ],
                    Yacuteegrave: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -71,
                        -71,
                        -52,
                        -60
                    ],
                    Yacuteemacron: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -71,
                        -71,
                        -52,
                        -60
                    ],
                    Yacuteeogonek: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -100
                    ],
                    Yacuteo: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -110
                    ],
                    Yacuteoacute: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -110
                    ],
                    Yacuteocircumflex: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -110
                    ],
                    Yacuteodieresis: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -70
                    ],
                    Yacuteograve: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -70
                    ],
                    Yacuteohungarumlaut: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -110
                    ],
                    Yacuteomacron: [
                        -100,
                        -100,
                        -70,
                        -70,
                        -111,
                        -111,
                        -92,
                        -70
                    ],
                    Yacuteoslash: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -110
                    ],
                    Yacuteotilde: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -70
                    ],
                    Yacuteperiod: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -92,
                        -74,
                        -92,
                        -129
                    ],
                    Yacutesemicolon: [
                        -50,
                        -50,
                        -60,
                        -60,
                        -92,
                        -92,
                        -65,
                        -92
                    ],
                    Yacuteu: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    Yacuteuacute: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    Yacuteucircumflex: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    Yacuteudieresis: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -71
                    ],
                    Yacuteugrave: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -71
                    ],
                    Yacuteuhungarumlaut: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    Yacuteumacron: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -71
                    ],
                    Yacuteuogonek: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    Yacuteuring: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    YdieresisA: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YdieresisAacute: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YdieresisAbreve: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YdieresisAcircumflex: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YdieresisAdieresis: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YdieresisAgrave: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YdieresisAmacron: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YdieresisAogonek: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YdieresisAring: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YdieresisAtilde: [
                        -110,
                        -110,
                        -110,
                        -110,
                        -110,
                        -74,
                        -50,
                        -120
                    ],
                    YdieresisO: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YdieresisOacute: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YdieresisOcircumflex: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YdieresisOdieresis: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YdieresisOgrave: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YdieresisOhungarumlaut: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YdieresisOmacron: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YdieresisOslash: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    YdieresisOtilde: [
                        -70,
                        -70,
                        -85,
                        -85,
                        -35,
                        -25,
                        -15,
                        -30
                    ],
                    Ydieresisa: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Ydieresisaacute: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Ydieresisabreve: [
                        -90,
                        -90,
                        -70,
                        -70,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Ydieresisacircumflex: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Ydieresisadieresis: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -60
                    ],
                    Ydieresisagrave: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -60
                    ],
                    Ydieresisamacron: [
                        -90,
                        -90,
                        -70,
                        -70,
                        -85,
                        -92,
                        -92,
                        -60
                    ],
                    Ydieresisaogonek: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Ydieresisaring: [
                        -90,
                        -90,
                        -140,
                        -140,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Ydieresisatilde: [
                        -90,
                        -90,
                        -70,
                        -70,
                        -85,
                        -92,
                        -92,
                        -100
                    ],
                    Ydieresiscolon: [
                        -50,
                        -50,
                        -60,
                        -60,
                        -92,
                        -92,
                        -65,
                        -92
                    ],
                    Ydieresiscomma: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -92,
                        -92,
                        -92,
                        -129
                    ],
                    Ydieresise: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -100
                    ],
                    Ydieresiseacute: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -100
                    ],
                    Ydieresisecaron: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -100
                    ],
                    Ydieresisecircumflex: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -71,
                        -92,
                        -100
                    ],
                    Ydieresisedieresis: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -71,
                        -71,
                        -52,
                        -60
                    ],
                    Ydieresisedotaccent: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -100
                    ],
                    Ydieresisegrave: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -71,
                        -71,
                        -52,
                        -60
                    ],
                    Ydieresisemacron: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -71,
                        -71,
                        -52,
                        -60
                    ],
                    Ydieresiseogonek: [
                        -80,
                        -80,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -100
                    ],
                    Ydieresiso: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -110
                    ],
                    Ydieresisoacute: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -110
                    ],
                    Ydieresisocircumflex: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -110
                    ],
                    Ydieresisodieresis: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -70
                    ],
                    Ydieresisograve: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -70
                    ],
                    Ydieresisohungarumlaut: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -110
                    ],
                    Ydieresisomacron: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -70
                    ],
                    Ydieresisoslash: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -110
                    ],
                    Ydieresisotilde: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -111,
                        -111,
                        -92,
                        -70
                    ],
                    Ydieresisperiod: [
                        -100,
                        -100,
                        -140,
                        -140,
                        -92,
                        -74,
                        -92,
                        -129
                    ],
                    Ydieresissemicolon: [
                        -50,
                        -50,
                        -60,
                        -60,
                        -92,
                        -92,
                        -65,
                        -92
                    ],
                    Ydieresisu: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    Ydieresisuacute: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    Ydieresisucircumflex: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    Ydieresisudieresis: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -71
                    ],
                    Ydieresisugrave: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -71
                    ],
                    Ydieresisuhungarumlaut: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    Ydieresisumacron: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -71
                    ],
                    Ydieresisuogonek: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    Ydieresisuring: [
                        -100,
                        -100,
                        -110,
                        -110,
                        -92,
                        -92,
                        -92,
                        -111
                    ],
                    ag: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    agbreve: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    agcommaaccent: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    av: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -25,
                        0,
                        0,
                        -20
                    ],
                    aw: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ay: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    ayacute: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    aydieresis: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    aacuteg: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    aacutegbreve: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    aacutegcommaaccent: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    aacutev: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -25,
                        0,
                        0,
                        -20
                    ],
                    aacutew: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        -15
                    ],
                    aacutey: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    aacuteyacute: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    aacuteydieresis: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    abreveg: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    abrevegbreve: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    abrevegcommaaccent: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    abrevev: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -25,
                        0,
                        0,
                        -20
                    ],
                    abrevew: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        -15
                    ],
                    abrevey: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    abreveyacute: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    abreveydieresis: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    acircumflexg: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    acircumflexgbreve: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    acircumflexgcommaaccent: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    acircumflexv: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -25,
                        0,
                        0,
                        -20
                    ],
                    acircumflexw: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        -15
                    ],
                    acircumflexy: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    acircumflexyacute: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    acircumflexydieresis: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    adieresisg: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    adieresisgbreve: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    adieresisgcommaaccent: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    adieresisv: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -25,
                        0,
                        0,
                        -20
                    ],
                    adieresisw: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        -15
                    ],
                    adieresisy: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    adieresisyacute: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    adieresisydieresis: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    agraveg: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    agravegbreve: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    agravegcommaaccent: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    agravev: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -25,
                        0,
                        0,
                        -20
                    ],
                    agravew: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        -15
                    ],
                    agravey: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    agraveyacute: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    agraveydieresis: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    amacrong: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    amacrongbreve: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    amacrongcommaaccent: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    amacronv: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -25,
                        0,
                        0,
                        -20
                    ],
                    amacronw: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        -15
                    ],
                    amacrony: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    amacronyacute: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    amacronydieresis: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    aogonekg: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    aogonekgbreve: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    aogonekgcommaaccent: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    aogonekv: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -25,
                        0,
                        0,
                        -20
                    ],
                    aogonekw: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        -15
                    ],
                    aogoneky: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    aogonekyacute: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    aogonekydieresis: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    aringg: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    aringgbreve: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    aringgcommaaccent: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    aringv: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -25,
                        0,
                        0,
                        -20
                    ],
                    aringw: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        -15
                    ],
                    aringy: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    aringyacute: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    aringydieresis: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    atildeg: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    atildegbreve: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    atildegcommaaccent: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    atildev: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -25,
                        0,
                        0,
                        -20
                    ],
                    atildew: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        -15
                    ],
                    atildey: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    atildeyacute: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    atildeydieresis: [
                        -20,
                        -20,
                        -30,
                        -30
                    ],
                    bl: [
                        -10,
                        -10,
                        -20,
                        -20
                    ],
                    blacute: [
                        -10,
                        -10,
                        -20,
                        -20
                    ],
                    blcommaaccent: [
                        -10,
                        -10,
                        -20,
                        -20
                    ],
                    blslash: [
                        -10,
                        -10,
                        -20,
                        -20
                    ],
                    bu: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20
                    ],
                    buacute: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20
                    ],
                    bucircumflex: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20
                    ],
                    budieresis: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20
                    ],
                    bugrave: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20
                    ],
                    buhungarumlaut: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20
                    ],
                    bumacron: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20
                    ],
                    buogonek: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20
                    ],
                    buring: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20,
                        -20
                    ],
                    bv: [
                        -20,
                        -20,
                        -20,
                        -20,
                        -15,
                        0,
                        0,
                        -15
                    ],
                    by: [
                        -20,
                        -20,
                        -20,
                        -20
                    ],
                    byacute: [
                        -20,
                        -20,
                        -20,
                        -20
                    ],
                    bydieresis: [
                        -20,
                        -20,
                        -20,
                        -20
                    ],
                    ch: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        -10,
                        -15
                    ],
                    ck: [
                        -20,
                        -20,
                        -20,
                        -20,
                        0,
                        -10,
                        -20
                    ],
                    ckcommaaccent: [
                        -20,
                        -20,
                        -20,
                        -20,
                        0,
                        -10,
                        -20
                    ],
                    cl: [
                        -20,
                        -20
                    ],
                    clacute: [
                        -20,
                        -20
                    ],
                    clcommaaccent: [
                        -20,
                        -20
                    ],
                    clslash: [
                        -20,
                        -20
                    ],
                    cy: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -15
                    ],
                    cyacute: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -15
                    ],
                    cydieresis: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -15
                    ],
                    cacuteh: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        -10,
                        -15
                    ],
                    cacutek: [
                        -20,
                        -20,
                        -20,
                        -20,
                        0,
                        -10,
                        -20
                    ],
                    cacutekcommaaccent: [
                        -20,
                        -20,
                        -20,
                        -20,
                        0,
                        -10,
                        -20
                    ],
                    cacutel: [
                        -20,
                        -20
                    ],
                    cacutelacute: [
                        -20,
                        -20
                    ],
                    cacutelcommaaccent: [
                        -20,
                        -20
                    ],
                    cacutelslash: [
                        -20,
                        -20
                    ],
                    cacutey: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -15
                    ],
                    cacuteyacute: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -15
                    ],
                    cacuteydieresis: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ccaronh: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        -10,
                        -15
                    ],
                    ccaronk: [
                        -20,
                        -20,
                        -20,
                        -20,
                        0,
                        -10,
                        -20
                    ],
                    ccaronkcommaaccent: [
                        -20,
                        -20,
                        -20,
                        -20,
                        0,
                        -10,
                        -20
                    ],
                    ccaronl: [
                        -20,
                        -20
                    ],
                    ccaronlacute: [
                        -20,
                        -20
                    ],
                    ccaronlcommaaccent: [
                        -20,
                        -20
                    ],
                    ccaronlslash: [
                        -20,
                        -20
                    ],
                    ccarony: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ccaronyacute: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ccaronydieresis: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ccedillah: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        -10,
                        -15
                    ],
                    ccedillak: [
                        -20,
                        -20,
                        -20,
                        -20,
                        0,
                        -10,
                        -20
                    ],
                    ccedillakcommaaccent: [
                        -20,
                        -20,
                        -20,
                        -20,
                        0,
                        -10,
                        -20
                    ],
                    ccedillal: [
                        -20,
                        -20
                    ],
                    ccedillalacute: [
                        -20,
                        -20
                    ],
                    ccedillalcommaaccent: [
                        -20,
                        -20
                    ],
                    ccedillalslash: [
                        -20,
                        -20
                    ],
                    ccedillay: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ccedillayacute: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ccedillaydieresis: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -15
                    ],
                    colonspace: [
                        -40,
                        -40,
                        -50,
                        -50
                    ],
                    commaquotedblright: [
                        -120,
                        -120,
                        -100,
                        -100,
                        -45,
                        -95,
                        -140,
                        -70
                    ],
                    commaquoteright: [
                        -120,
                        -120,
                        -100,
                        -100,
                        -55,
                        -95,
                        -140,
                        -70
                    ],
                    commaspace: [
                        -40,
                        -40
                    ],
                    dd: [
                        -10,
                        -10
                    ],
                    ddcroat: [
                        -10,
                        -10
                    ],
                    dv: [
                        -15,
                        -15
                    ],
                    dw: [
                        -15,
                        -15,
                        0,
                        0,
                        -15
                    ],
                    dy: [
                        -15,
                        -15
                    ],
                    dyacute: [
                        -15,
                        -15
                    ],
                    dydieresis: [
                        -15,
                        -15
                    ],
                    dcroatd: [
                        -10,
                        -10
                    ],
                    dcroatdcroat: [
                        -10,
                        -10
                    ],
                    dcroatv: [
                        -15,
                        -15
                    ],
                    dcroatw: [
                        -15,
                        -15,
                        0,
                        0,
                        -15
                    ],
                    dcroaty: [
                        -15,
                        -15
                    ],
                    dcroatyacute: [
                        -15,
                        -15
                    ],
                    dcroatydieresis: [
                        -15,
                        -15
                    ],
                    ecomma: [
                        10,
                        10,
                        -15,
                        -15,
                        0,
                        0,
                        -10
                    ],
                    eperiod: [
                        20,
                        20,
                        -15,
                        -15,
                        0,
                        0,
                        -15
                    ],
                    ev: [
                        -15,
                        -15,
                        -30,
                        -30,
                        -15,
                        0,
                        -15,
                        -25
                    ],
                    ew: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -15,
                        -25
                    ],
                    ex: [
                        -15,
                        -15,
                        -30,
                        -30,
                        0,
                        0,
                        -20,
                        -15
                    ],
                    ey: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    eyacute: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    eydieresis: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    eacutecomma: [
                        10,
                        10,
                        -15,
                        -15,
                        0,
                        0,
                        -10
                    ],
                    eacuteperiod: [
                        20,
                        20,
                        -15,
                        -15,
                        0,
                        0,
                        -15
                    ],
                    eacutev: [
                        -15,
                        -15,
                        -30,
                        -30,
                        -15,
                        0,
                        -15,
                        -25
                    ],
                    eacutew: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -15,
                        -25
                    ],
                    eacutex: [
                        -15,
                        -15,
                        -30,
                        -30,
                        0,
                        0,
                        -20,
                        -15
                    ],
                    eacutey: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    eacuteyacute: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    eacuteydieresis: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    ecaroncomma: [
                        10,
                        10,
                        -15,
                        -15,
                        0,
                        0,
                        -10
                    ],
                    ecaronperiod: [
                        20,
                        20,
                        -15,
                        -15,
                        0,
                        0,
                        -15
                    ],
                    ecaronv: [
                        -15,
                        -15,
                        -30,
                        -30,
                        -15,
                        0,
                        -15,
                        -25
                    ],
                    ecaronw: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -15,
                        -25
                    ],
                    ecaronx: [
                        -15,
                        -15,
                        -30,
                        -30,
                        0,
                        0,
                        -20,
                        -15
                    ],
                    ecarony: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    ecaronyacute: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    ecaronydieresis: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    ecircumflexcomma: [
                        10,
                        10,
                        -15,
                        -15,
                        0,
                        0,
                        -10
                    ],
                    ecircumflexperiod: [
                        20,
                        20,
                        -15,
                        -15,
                        0,
                        0,
                        -15
                    ],
                    ecircumflexv: [
                        -15,
                        -15,
                        -30,
                        -30,
                        -15,
                        0,
                        -15,
                        -25
                    ],
                    ecircumflexw: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -15,
                        -25
                    ],
                    ecircumflexx: [
                        -15,
                        -15,
                        -30,
                        -30,
                        0,
                        0,
                        -20,
                        -15
                    ],
                    ecircumflexy: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    ecircumflexyacute: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    ecircumflexydieresis: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    edieresiscomma: [
                        10,
                        10,
                        -15,
                        -15,
                        0,
                        0,
                        -10
                    ],
                    edieresisperiod: [
                        20,
                        20,
                        -15,
                        -15,
                        0,
                        0,
                        -15
                    ],
                    edieresisv: [
                        -15,
                        -15,
                        -30,
                        -30,
                        -15,
                        0,
                        -15,
                        -25
                    ],
                    edieresisw: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -15,
                        -25
                    ],
                    edieresisx: [
                        -15,
                        -15,
                        -30,
                        -30,
                        0,
                        0,
                        -20,
                        -15
                    ],
                    edieresisy: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    edieresisyacute: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    edieresisydieresis: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    edotaccentcomma: [
                        10,
                        10,
                        -15,
                        -15,
                        0,
                        0,
                        -10
                    ],
                    edotaccentperiod: [
                        20,
                        20,
                        -15,
                        -15,
                        0,
                        0,
                        -15
                    ],
                    edotaccentv: [
                        -15,
                        -15,
                        -30,
                        -30,
                        -15,
                        0,
                        -15,
                        -25
                    ],
                    edotaccentw: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -15,
                        -25
                    ],
                    edotaccentx: [
                        -15,
                        -15,
                        -30,
                        -30,
                        0,
                        0,
                        -20,
                        -15
                    ],
                    edotaccenty: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    edotaccentyacute: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    edotaccentydieresis: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    egravecomma: [
                        10,
                        10,
                        -15,
                        -15,
                        0,
                        0,
                        -10
                    ],
                    egraveperiod: [
                        20,
                        20,
                        -15,
                        -15,
                        0,
                        0,
                        -15
                    ],
                    egravev: [
                        -15,
                        -15,
                        -30,
                        -30,
                        -15,
                        0,
                        -15,
                        -25
                    ],
                    egravew: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -15,
                        -25
                    ],
                    egravex: [
                        -15,
                        -15,
                        -30,
                        -30,
                        0,
                        0,
                        -20,
                        -15
                    ],
                    egravey: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    egraveyacute: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    egraveydieresis: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    emacroncomma: [
                        10,
                        10,
                        -15,
                        -15,
                        0,
                        0,
                        -10
                    ],
                    emacronperiod: [
                        20,
                        20,
                        -15,
                        -15,
                        0,
                        0,
                        -15
                    ],
                    emacronv: [
                        -15,
                        -15,
                        -30,
                        -30,
                        -15,
                        0,
                        -15,
                        -25
                    ],
                    emacronw: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -15,
                        -25
                    ],
                    emacronx: [
                        -15,
                        -15,
                        -30,
                        -30,
                        0,
                        0,
                        -20,
                        -15
                    ],
                    emacrony: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    emacronyacute: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    emacronydieresis: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    eogonekcomma: [
                        10,
                        10,
                        -15,
                        -15,
                        0,
                        0,
                        -10
                    ],
                    eogonekperiod: [
                        20,
                        20,
                        -15,
                        -15,
                        0,
                        0,
                        -15
                    ],
                    eogonekv: [
                        -15,
                        -15,
                        -30,
                        -30,
                        -15,
                        0,
                        -15,
                        -25
                    ],
                    eogonekw: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -15,
                        -25
                    ],
                    eogonekx: [
                        -15,
                        -15,
                        -30,
                        -30,
                        0,
                        0,
                        -20,
                        -15
                    ],
                    eogoneky: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    eogonekyacute: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    eogonekydieresis: [
                        -15,
                        -15,
                        -20,
                        -20,
                        0,
                        0,
                        -30,
                        -15
                    ],
                    fcomma: [
                        -10,
                        -10,
                        -30,
                        -30,
                        -15,
                        -10,
                        -10
                    ],
                    fe: [
                        -10,
                        -10,
                        -30,
                        -30,
                        0,
                        -10
                    ],
                    feacute: [
                        -10,
                        -10,
                        -30,
                        -30,
                        0,
                        -10
                    ],
                    fecaron: [
                        -10,
                        -10,
                        -30,
                        -30
                    ],
                    fecircumflex: [
                        -10,
                        -10,
                        -30,
                        -30
                    ],
                    fedieresis: [
                        -10,
                        -10,
                        -30,
                        -30
                    ],
                    fedotaccent: [
                        -10,
                        -10,
                        -30,
                        -30,
                        0,
                        -10
                    ],
                    fegrave: [
                        -10,
                        -10,
                        -30,
                        -30
                    ],
                    femacron: [
                        -10,
                        -10,
                        -30,
                        -30
                    ],
                    feogonek: [
                        -10,
                        -10,
                        -30,
                        -30,
                        0,
                        -10
                    ],
                    fo: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -25,
                        -10
                    ],
                    foacute: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -25,
                        -10
                    ],
                    focircumflex: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -25,
                        -10
                    ],
                    fodieresis: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -25
                    ],
                    fograve: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -25,
                        -10
                    ],
                    fohungarumlaut: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -25,
                        -10
                    ],
                    fomacron: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -25
                    ],
                    foslash: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -25,
                        -10
                    ],
                    fotilde: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -25,
                        -10
                    ],
                    fperiod: [
                        -10,
                        -10,
                        -30,
                        -30,
                        -15,
                        -10,
                        -15
                    ],
                    fquotedblright: [
                        30,
                        30,
                        60,
                        60,
                        50
                    ],
                    fquoteright: [
                        30,
                        30,
                        50,
                        50,
                        55,
                        55,
                        92,
                        55
                    ],
                    ge: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    geacute: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gecaron: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gecircumflex: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gedieresis: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gedotaccent: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gegrave: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gemacron: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    geogonek: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gg: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ggbreve: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ggcommaaccent: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gbrevee: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gbreveeacute: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gbreveecaron: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gbreveecircumflex: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gbreveedieresis: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gbreveedotaccent: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gbreveegrave: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gbreveemacron: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gbreveeogonek: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gbreveg: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gbrevegbreve: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gbrevegcommaaccent: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gcommaaccente: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gcommaaccenteacute: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gcommaaccentecaron: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gcommaaccentecircumflex: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gcommaaccentedieresis: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gcommaaccentedotaccent: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gcommaaccentegrave: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gcommaaccentemacron: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gcommaaccenteogonek: [
                        10,
                        10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gcommaaccentg: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gcommaaccentgbreve: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gcommaaccentgcommaaccent: [
                        -10,
                        -10,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    hy: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -15,
                        0,
                        0,
                        -5
                    ],
                    hyacute: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -15,
                        0,
                        0,
                        -5
                    ],
                    hydieresis: [
                        -20,
                        -20,
                        -30,
                        -30,
                        -15,
                        0,
                        0,
                        -5
                    ],
                    ko: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    koacute: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    kocircumflex: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    kodieresis: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    kograve: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    kohungarumlaut: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    komacron: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    koslash: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    kotilde: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    kcommaaccento: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    kcommaaccentoacute: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    kcommaaccentocircumflex: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    kcommaaccentodieresis: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    kcommaaccentograve: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    kcommaaccentohungarumlaut: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    kcommaaccentomacron: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    kcommaaccentoslash: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    kcommaaccentotilde: [
                        -15,
                        -15,
                        -20,
                        -20,
                        -15,
                        -10,
                        -10,
                        -10
                    ],
                    lw: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ly: [
                        -15,
                        -15
                    ],
                    lyacute: [
                        -15,
                        -15
                    ],
                    lydieresis: [
                        -15,
                        -15
                    ],
                    lacutew: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    lacutey: [
                        -15,
                        -15
                    ],
                    lacuteyacute: [
                        -15,
                        -15
                    ],
                    lacuteydieresis: [
                        -15,
                        -15
                    ],
                    lcommaaccentw: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    lcommaaccenty: [
                        -15,
                        -15
                    ],
                    lcommaaccentyacute: [
                        -15,
                        -15
                    ],
                    lcommaaccentydieresis: [
                        -15,
                        -15
                    ],
                    lslashw: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    lslashy: [
                        -15,
                        -15
                    ],
                    lslashyacute: [
                        -15,
                        -15
                    ],
                    lslashydieresis: [
                        -15,
                        -15
                    ],
                    mu: [
                        -20,
                        -20,
                        -10,
                        -10
                    ],
                    muacute: [
                        -20,
                        -20,
                        -10,
                        -10
                    ],
                    mucircumflex: [
                        -20,
                        -20,
                        -10,
                        -10
                    ],
                    mudieresis: [
                        -20,
                        -20,
                        -10,
                        -10
                    ],
                    mugrave: [
                        -20,
                        -20,
                        -10,
                        -10
                    ],
                    muhungarumlaut: [
                        -20,
                        -20,
                        -10,
                        -10
                    ],
                    mumacron: [
                        -20,
                        -20,
                        -10,
                        -10
                    ],
                    muogonek: [
                        -20,
                        -20,
                        -10,
                        -10
                    ],
                    muring: [
                        -20,
                        -20,
                        -10,
                        -10
                    ],
                    my: [
                        -30,
                        -30,
                        -15,
                        -15
                    ],
                    myacute: [
                        -30,
                        -30,
                        -15,
                        -15
                    ],
                    mydieresis: [
                        -30,
                        -30,
                        -15,
                        -15
                    ],
                    nu: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nuacute: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nucircumflex: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nudieresis: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nugrave: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nuhungarumlaut: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    numacron: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nuogonek: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nuring: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nv: [
                        -40,
                        -40,
                        -20,
                        -20,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    ny: [
                        -20,
                        -20,
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        -15
                    ],
                    nyacute: [
                        -20,
                        -20,
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        -15
                    ],
                    nydieresis: [
                        -20,
                        -20,
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        -15
                    ],
                    nacuteu: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nacuteuacute: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nacuteucircumflex: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nacuteudieresis: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nacuteugrave: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nacuteuhungarumlaut: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nacuteumacron: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nacuteuogonek: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nacuteuring: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    nacutev: [
                        -40,
                        -40,
                        -20,
                        -20,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    nacutey: [
                        -20,
                        -20,
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        -15
                    ],
                    nacuteyacute: [
                        -20,
                        -20,
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        -15
                    ],
                    nacuteydieresis: [
                        -20,
                        -20,
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ncaronu: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncaronuacute: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncaronucircumflex: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncaronudieresis: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncaronugrave: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncaronuhungarumlaut: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncaronumacron: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncaronuogonek: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncaronuring: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncaronv: [
                        -40,
                        -40,
                        -20,
                        -20,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    ncarony: [
                        -20,
                        -20,
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ncaronyacute: [
                        -20,
                        -20,
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ncaronydieresis: [
                        -20,
                        -20,
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ncommaaccentu: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncommaaccentuacute: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncommaaccentucircumflex: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncommaaccentudieresis: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncommaaccentugrave: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncommaaccentuhungarumlaut: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncommaaccentumacron: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncommaaccentuogonek: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncommaaccenturing: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ncommaaccentv: [
                        -40,
                        -40,
                        -20,
                        -20,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    ncommaaccenty: [
                        -20,
                        -20,
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ncommaaccentyacute: [
                        -20,
                        -20,
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ncommaaccentydieresis: [
                        -20,
                        -20,
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ntildeu: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ntildeuacute: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ntildeucircumflex: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ntildeudieresis: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ntildeugrave: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ntildeuhungarumlaut: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ntildeumacron: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ntildeuogonek: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ntildeuring: [
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    ntildev: [
                        -40,
                        -40,
                        -20,
                        -20,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    ntildey: [
                        -20,
                        -20,
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ntildeyacute: [
                        -20,
                        -20,
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ntildeydieresis: [
                        -20,
                        -20,
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        -15
                    ],
                    ov: [
                        -20,
                        -20,
                        -15,
                        -15,
                        -10,
                        -15,
                        -10,
                        -15
                    ],
                    ow: [
                        -15,
                        -15,
                        -15,
                        -15,
                        -10,
                        -25,
                        0,
                        -25
                    ],
                    ox: [
                        -30,
                        -30,
                        -30,
                        -30,
                        0,
                        -10
                    ],
                    oy: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    oyacute: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    oydieresis: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    oacutev: [
                        -20,
                        -20,
                        -15,
                        -15,
                        -10,
                        -15,
                        -10,
                        -15
                    ],
                    oacutew: [
                        -15,
                        -15,
                        -15,
                        -15,
                        -10,
                        -25,
                        0,
                        -25
                    ],
                    oacutex: [
                        -30,
                        -30,
                        -30,
                        -30,
                        0,
                        -10
                    ],
                    oacutey: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    oacuteyacute: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    oacuteydieresis: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    ocircumflexv: [
                        -20,
                        -20,
                        -15,
                        -15,
                        -10,
                        -15,
                        -10,
                        -15
                    ],
                    ocircumflexw: [
                        -15,
                        -15,
                        -15,
                        -15,
                        -10,
                        -25,
                        0,
                        -25
                    ],
                    ocircumflexx: [
                        -30,
                        -30,
                        -30,
                        -30,
                        0,
                        -10
                    ],
                    ocircumflexy: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    ocircumflexyacute: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    ocircumflexydieresis: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    odieresisv: [
                        -20,
                        -20,
                        -15,
                        -15,
                        -10,
                        -15,
                        -10,
                        -15
                    ],
                    odieresisw: [
                        -15,
                        -15,
                        -15,
                        -15,
                        -10,
                        -25,
                        0,
                        -25
                    ],
                    odieresisx: [
                        -30,
                        -30,
                        -30,
                        -30,
                        0,
                        -10
                    ],
                    odieresisy: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    odieresisyacute: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    odieresisydieresis: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    ogravev: [
                        -20,
                        -20,
                        -15,
                        -15,
                        -10,
                        -15,
                        -10,
                        -15
                    ],
                    ogravew: [
                        -15,
                        -15,
                        -15,
                        -15,
                        -10,
                        -25,
                        0,
                        -25
                    ],
                    ogravex: [
                        -30,
                        -30,
                        -30,
                        -30,
                        0,
                        -10
                    ],
                    ogravey: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    ograveyacute: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    ograveydieresis: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    ohungarumlautv: [
                        -20,
                        -20,
                        -15,
                        -15,
                        -10,
                        -15,
                        -10,
                        -15
                    ],
                    ohungarumlautw: [
                        -15,
                        -15,
                        -15,
                        -15,
                        -10,
                        -25,
                        0,
                        -25
                    ],
                    ohungarumlautx: [
                        -30,
                        -30,
                        -30,
                        -30,
                        0,
                        -10
                    ],
                    ohungarumlauty: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    ohungarumlautyacute: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    ohungarumlautydieresis: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    omacronv: [
                        -20,
                        -20,
                        -15,
                        -15,
                        -10,
                        -15,
                        -10,
                        -15
                    ],
                    omacronw: [
                        -15,
                        -15,
                        -15,
                        -15,
                        -10,
                        -25,
                        0,
                        -25
                    ],
                    omacronx: [
                        -30,
                        -30,
                        -30,
                        -30,
                        0,
                        -10
                    ],
                    omacrony: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    omacronyacute: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    omacronydieresis: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    oslashv: [
                        -20,
                        -20,
                        -70,
                        -70,
                        -10,
                        -15,
                        -10,
                        -15
                    ],
                    oslashw: [
                        -15,
                        -15,
                        -70,
                        -70,
                        -10,
                        -25,
                        0,
                        -25
                    ],
                    oslashx: [
                        -30,
                        -30,
                        -85,
                        -85,
                        0,
                        -10
                    ],
                    oslashy: [
                        -20,
                        -20,
                        -70,
                        -70,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    oslashyacute: [
                        -20,
                        -20,
                        -70,
                        -70,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    oslashydieresis: [
                        -20,
                        -20,
                        -70,
                        -70,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    otildev: [
                        -20,
                        -20,
                        -15,
                        -15,
                        -10,
                        -15,
                        -10,
                        -15
                    ],
                    otildew: [
                        -15,
                        -15,
                        -15,
                        -15,
                        -10,
                        -25,
                        0,
                        -25
                    ],
                    otildex: [
                        -30,
                        -30,
                        -30,
                        -30,
                        0,
                        -10
                    ],
                    otildey: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    otildeyacute: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    otildeydieresis: [
                        -20,
                        -20,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    py: [
                        -15,
                        -15,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -10
                    ],
                    pyacute: [
                        -15,
                        -15,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -10
                    ],
                    pydieresis: [
                        -15,
                        -15,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -10
                    ],
                    periodquotedblright: [
                        -120,
                        -120,
                        -100,
                        -100,
                        -55,
                        -95,
                        -140,
                        -70
                    ],
                    periodquoteright: [
                        -120,
                        -120,
                        -100,
                        -100,
                        -55,
                        -95,
                        -140,
                        -70
                    ],
                    periodspace: [
                        -40,
                        -40,
                        -60,
                        -60
                    ],
                    quotedblrightspace: [
                        -80,
                        -80,
                        -40,
                        -40
                    ],
                    quoteleftquoteleft: [
                        -46,
                        -46,
                        -57,
                        -57,
                        -63,
                        -74,
                        -111,
                        -74
                    ],
                    quoterightd: [
                        -80,
                        -80,
                        -50,
                        -50,
                        -20,
                        -15,
                        -25,
                        -50
                    ],
                    quoterightdcroat: [
                        -80,
                        -80,
                        -50,
                        -50,
                        -20,
                        -15,
                        -25,
                        -50
                    ],
                    quoterightl: [
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    quoterightlacute: [
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    quoterightlcommaaccent: [
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    quoterightlslash: [
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    quoterightquoteright: [
                        -46,
                        -46,
                        -57,
                        -57,
                        -63,
                        -74,
                        -111,
                        -74
                    ],
                    quoterightr: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -20,
                        -15,
                        -25,
                        -50
                    ],
                    quoterightracute: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -20,
                        -15,
                        -25,
                        -50
                    ],
                    quoterightrcaron: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -20,
                        -15,
                        -25,
                        -50
                    ],
                    quoterightrcommaaccent: [
                        -40,
                        -40,
                        -50,
                        -50,
                        -20,
                        -15,
                        -25,
                        -50
                    ],
                    quoterights: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -37,
                        -74,
                        -40,
                        -55
                    ],
                    quoterightsacute: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -37,
                        -74,
                        -40,
                        -55
                    ],
                    quoterightscaron: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -37,
                        -74,
                        -40,
                        -55
                    ],
                    quoterightscedilla: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -37,
                        -74,
                        -40,
                        -55
                    ],
                    quoterightscommaaccent: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -37,
                        -74,
                        -40,
                        -55
                    ],
                    quoterightspace: [
                        -80,
                        -80,
                        -70,
                        -70,
                        -74,
                        -74,
                        -111,
                        -74
                    ],
                    quoterightv: [
                        -20,
                        -20,
                        0,
                        0,
                        -20,
                        -15,
                        -10,
                        -50
                    ],
                    rc: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcacute: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rccaron: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rccedilla: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcomma: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -92,
                        -65,
                        -111,
                        -40
                    ],
                    rd: [
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        0,
                        -37
                    ],
                    rdcroat: [
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        0,
                        -37
                    ],
                    rg: [
                        -15,
                        -15,
                        0,
                        0,
                        -10,
                        0,
                        -37,
                        -18
                    ],
                    rgbreve: [
                        -15,
                        -15,
                        0,
                        0,
                        -10,
                        0,
                        -37,
                        -18
                    ],
                    rgcommaaccent: [
                        -15,
                        -15,
                        0,
                        0,
                        -10,
                        0,
                        -37,
                        -18
                    ],
                    rhyphen: [
                        -20,
                        -20,
                        0,
                        0,
                        -37,
                        0,
                        -20,
                        -20
                    ],
                    ro: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    roacute: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rocircumflex: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rodieresis: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rograve: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rohungarumlaut: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    romacron: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    roslash: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rotilde: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rperiod: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -100,
                        -65,
                        -111,
                        -55
                    ],
                    rq: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rs: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    rsacute: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    rscaron: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    rscedilla: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    rscommaaccent: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    rt: [
                        20,
                        20,
                        40,
                        40
                    ],
                    rtcommaaccent: [
                        20,
                        20,
                        40,
                        40
                    ],
                    rv: [
                        10,
                        10,
                        30,
                        30,
                        -10
                    ],
                    ry: [
                        10,
                        10,
                        30,
                        30
                    ],
                    ryacute: [
                        10,
                        10,
                        30,
                        30
                    ],
                    rydieresis: [
                        10,
                        10,
                        30,
                        30
                    ],
                    racutec: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    racutecacute: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    racuteccaron: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    racuteccedilla: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    racutecomma: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -92,
                        -65,
                        -111,
                        -40
                    ],
                    racuted: [
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        0,
                        -37
                    ],
                    racutedcroat: [
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        0,
                        -37
                    ],
                    racuteg: [
                        -15,
                        -15,
                        0,
                        0,
                        -10,
                        0,
                        -37,
                        -18
                    ],
                    racutegbreve: [
                        -15,
                        -15,
                        0,
                        0,
                        -10,
                        0,
                        -37,
                        -18
                    ],
                    racutegcommaaccent: [
                        -15,
                        -15,
                        0,
                        0,
                        -10,
                        0,
                        -37,
                        -18
                    ],
                    racutehyphen: [
                        -20,
                        -20,
                        0,
                        0,
                        -37,
                        0,
                        -20,
                        -20
                    ],
                    racuteo: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    racuteoacute: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    racuteocircumflex: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    racuteodieresis: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    racuteograve: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    racuteohungarumlaut: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    racuteomacron: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    racuteoslash: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    racuteotilde: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    racuteperiod: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -100,
                        -65,
                        -111,
                        -55
                    ],
                    racuteq: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    racutes: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    racutesacute: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    racutescaron: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    racutescedilla: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    racutescommaaccent: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    racutet: [
                        20,
                        20,
                        40,
                        40
                    ],
                    racutetcommaaccent: [
                        20,
                        20,
                        40,
                        40
                    ],
                    racutev: [
                        10,
                        10,
                        30,
                        30,
                        -10
                    ],
                    racutey: [
                        10,
                        10,
                        30,
                        30
                    ],
                    racuteyacute: [
                        10,
                        10,
                        30,
                        30
                    ],
                    racuteydieresis: [
                        10,
                        10,
                        30,
                        30
                    ],
                    rcaronc: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcaroncacute: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcaronccaron: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcaronccedilla: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcaroncomma: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -92,
                        -65,
                        -111,
                        -40
                    ],
                    rcarond: [
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        0,
                        -37
                    ],
                    rcarondcroat: [
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        0,
                        -37
                    ],
                    rcarong: [
                        -15,
                        -15,
                        0,
                        0,
                        -10,
                        0,
                        -37,
                        -18
                    ],
                    rcarongbreve: [
                        -15,
                        -15,
                        0,
                        0,
                        -10,
                        0,
                        -37,
                        -18
                    ],
                    rcarongcommaaccent: [
                        -15,
                        -15,
                        0,
                        0,
                        -10,
                        0,
                        -37,
                        -18
                    ],
                    rcaronhyphen: [
                        -20,
                        -20,
                        0,
                        0,
                        -37,
                        0,
                        -20,
                        -20
                    ],
                    rcarono: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcaronoacute: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcaronocircumflex: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcaronodieresis: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcaronograve: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcaronohungarumlaut: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcaronomacron: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcaronoslash: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcaronotilde: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcaronperiod: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -100,
                        -65,
                        -111,
                        -55
                    ],
                    rcaronq: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcarons: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    rcaronsacute: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    rcaronscaron: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    rcaronscedilla: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    rcaronscommaaccent: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    rcaront: [
                        20,
                        20,
                        40,
                        40
                    ],
                    rcarontcommaaccent: [
                        20,
                        20,
                        40,
                        40
                    ],
                    rcaronv: [
                        10,
                        10,
                        30,
                        30,
                        -10
                    ],
                    rcarony: [
                        10,
                        10,
                        30,
                        30
                    ],
                    rcaronyacute: [
                        10,
                        10,
                        30,
                        30
                    ],
                    rcaronydieresis: [
                        10,
                        10,
                        30,
                        30
                    ],
                    rcommaaccentc: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcommaaccentcacute: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcommaaccentccaron: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcommaaccentccedilla: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcommaaccentcomma: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -92,
                        -65,
                        -111,
                        -40
                    ],
                    rcommaaccentd: [
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        0,
                        -37
                    ],
                    rcommaaccentdcroat: [
                        -20,
                        -20,
                        0,
                        0,
                        0,
                        0,
                        -37
                    ],
                    rcommaaccentg: [
                        -15,
                        -15,
                        0,
                        0,
                        -10,
                        0,
                        -37,
                        -18
                    ],
                    rcommaaccentgbreve: [
                        -15,
                        -15,
                        0,
                        0,
                        -10,
                        0,
                        -37,
                        -18
                    ],
                    rcommaaccentgcommaaccent: [
                        -15,
                        -15,
                        0,
                        0,
                        -10,
                        0,
                        -37,
                        -18
                    ],
                    rcommaaccenthyphen: [
                        -20,
                        -20,
                        0,
                        0,
                        -37,
                        0,
                        -20,
                        -20
                    ],
                    rcommaaccento: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcommaaccentoacute: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcommaaccentocircumflex: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcommaaccentodieresis: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcommaaccentograve: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcommaaccentohungarumlaut: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcommaaccentomacron: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcommaaccentoslash: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcommaaccentotilde: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -45
                    ],
                    rcommaaccentperiod: [
                        -60,
                        -60,
                        -50,
                        -50,
                        -100,
                        -65,
                        -111,
                        -55
                    ],
                    rcommaaccentq: [
                        -20,
                        -20,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcommaaccents: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    rcommaaccentsacute: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    rcommaaccentscaron: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    rcommaaccentscedilla: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    rcommaaccentscommaaccent: [
                        -15,
                        -15,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    rcommaaccentt: [
                        20,
                        20,
                        40,
                        40
                    ],
                    rcommaaccenttcommaaccent: [
                        20,
                        20,
                        40,
                        40
                    ],
                    rcommaaccentv: [
                        10,
                        10,
                        30,
                        30,
                        -10
                    ],
                    rcommaaccenty: [
                        10,
                        10,
                        30,
                        30
                    ],
                    rcommaaccentyacute: [
                        10,
                        10,
                        30,
                        30
                    ],
                    rcommaaccentydieresis: [
                        10,
                        10,
                        30,
                        30
                    ],
                    sw: [
                        -15,
                        -15,
                        -30,
                        -30
                    ],
                    sacutew: [
                        -15,
                        -15,
                        -30,
                        -30
                    ],
                    scaronw: [
                        -15,
                        -15,
                        -30,
                        -30
                    ],
                    scedillaw: [
                        -15,
                        -15,
                        -30,
                        -30
                    ],
                    scommaaccentw: [
                        -15,
                        -15,
                        -30,
                        -30
                    ],
                    semicolonspace: [
                        -40,
                        -40,
                        -50,
                        -50
                    ],
                    spaceT: [
                        -100,
                        -100,
                        -50,
                        -50,
                        -30,
                        0,
                        -18,
                        -18
                    ],
                    spaceTcaron: [
                        -100,
                        -100,
                        -50,
                        -50,
                        -30,
                        0,
                        -18,
                        -18
                    ],
                    spaceTcommaaccent: [
                        -100,
                        -100,
                        -50,
                        -50,
                        -30,
                        0,
                        -18,
                        -18
                    ],
                    spaceV: [
                        -80,
                        -80,
                        -50,
                        -50,
                        -45,
                        -70,
                        -35,
                        -50
                    ],
                    spaceW: [
                        -80,
                        -80,
                        -40,
                        -40,
                        -30,
                        -70,
                        -40,
                        -30
                    ],
                    spaceY: [
                        -120,
                        -120,
                        -90,
                        -90,
                        -55,
                        -70,
                        -75,
                        -90
                    ],
                    spaceYacute: [
                        -120,
                        -120,
                        -90,
                        -90,
                        -55,
                        -70,
                        -75,
                        -90
                    ],
                    spaceYdieresis: [
                        -120,
                        -120,
                        -90,
                        -90,
                        -55,
                        -70,
                        -75,
                        -90
                    ],
                    spacequotedblleft: [
                        -80,
                        -80,
                        -30,
                        -30
                    ],
                    spacequoteleft: [
                        -60,
                        -60,
                        -60,
                        -60
                    ],
                    va: [
                        -20,
                        -20,
                        -25,
                        -25,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    vaacute: [
                        -20,
                        -20,
                        -25,
                        -25,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    vabreve: [
                        -20,
                        -20,
                        -25,
                        -25,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    vacircumflex: [
                        -20,
                        -20,
                        -25,
                        -25,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    vadieresis: [
                        -20,
                        -20,
                        -25,
                        -25,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    vagrave: [
                        -20,
                        -20,
                        -25,
                        -25,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    vamacron: [
                        -20,
                        -20,
                        -25,
                        -25,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    vaogonek: [
                        -20,
                        -20,
                        -25,
                        -25,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    varing: [
                        -20,
                        -20,
                        -25,
                        -25,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    vatilde: [
                        -20,
                        -20,
                        -25,
                        -25,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    vcomma: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -55,
                        -37,
                        -74,
                        -65
                    ],
                    vo: [
                        -30,
                        -30,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -20
                    ],
                    voacute: [
                        -30,
                        -30,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -20
                    ],
                    vocircumflex: [
                        -30,
                        -30,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -20
                    ],
                    vodieresis: [
                        -30,
                        -30,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -20
                    ],
                    vograve: [
                        -30,
                        -30,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -20
                    ],
                    vohungarumlaut: [
                        -30,
                        -30,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -20
                    ],
                    vomacron: [
                        -30,
                        -30,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -20
                    ],
                    voslash: [
                        -30,
                        -30,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -20
                    ],
                    votilde: [
                        -30,
                        -30,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -20
                    ],
                    vperiod: [
                        -80,
                        -80,
                        -80,
                        -80,
                        -70,
                        -37,
                        -74,
                        -65
                    ],
                    wcomma: [
                        -40,
                        -40,
                        -60,
                        -60,
                        -55,
                        -37,
                        -74,
                        -65
                    ],
                    wo: [
                        -20,
                        -20,
                        -10,
                        -10,
                        -10,
                        -15,
                        0,
                        -10
                    ],
                    woacute: [
                        -20,
                        -20,
                        -10,
                        -10,
                        -10,
                        -15,
                        0,
                        -10
                    ],
                    wocircumflex: [
                        -20,
                        -20,
                        -10,
                        -10,
                        -10,
                        -15,
                        0,
                        -10
                    ],
                    wodieresis: [
                        -20,
                        -20,
                        -10,
                        -10,
                        -10,
                        -15,
                        0,
                        -10
                    ],
                    wograve: [
                        -20,
                        -20,
                        -10,
                        -10,
                        -10,
                        -15,
                        0,
                        -10
                    ],
                    wohungarumlaut: [
                        -20,
                        -20,
                        -10,
                        -10,
                        -10,
                        -15,
                        0,
                        -10
                    ],
                    womacron: [
                        -20,
                        -20,
                        -10,
                        -10,
                        -10,
                        -15,
                        0,
                        -10
                    ],
                    woslash: [
                        -20,
                        -20,
                        -10,
                        -10,
                        -10,
                        -15,
                        0,
                        -10
                    ],
                    wotilde: [
                        -20,
                        -20,
                        -10,
                        -10,
                        -10,
                        -15,
                        0,
                        -10
                    ],
                    wperiod: [
                        -40,
                        -40,
                        -60,
                        -60,
                        -70,
                        -37,
                        -74,
                        -65
                    ],
                    xe: [
                        -10,
                        -10,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -15
                    ],
                    xeacute: [
                        -10,
                        -10,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -15
                    ],
                    xecaron: [
                        -10,
                        -10,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -15
                    ],
                    xecircumflex: [
                        -10,
                        -10,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -15
                    ],
                    xedieresis: [
                        -10,
                        -10,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -15
                    ],
                    xedotaccent: [
                        -10,
                        -10,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -15
                    ],
                    xegrave: [
                        -10,
                        -10,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -15
                    ],
                    xemacron: [
                        -10,
                        -10,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -15
                    ],
                    xeogonek: [
                        -10,
                        -10,
                        -30,
                        -30,
                        0,
                        -10,
                        0,
                        -15
                    ],
                    ya: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yaacute: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yabreve: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yacircumflex: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yadieresis: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yagrave: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yamacron: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yaogonek: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yaring: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yatilde: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    ycomma: [
                        -80,
                        -80,
                        -100,
                        -100,
                        -55,
                        -37,
                        -55,
                        -65
                    ],
                    ye: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yeacute: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yecaron: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yecircumflex: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yedieresis: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yedotaccent: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yegrave: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yemacron: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yeogonek: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yo: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yoacute: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yocircumflex: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yodieresis: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yograve: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yohungarumlaut: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yomacron: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yoslash: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yotilde: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yperiod: [
                        -80,
                        -80,
                        -100,
                        -100,
                        -70,
                        -37,
                        -55,
                        -65
                    ],
                    yacutea: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yacuteaacute: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yacuteabreve: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yacuteacircumflex: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yacuteadieresis: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yacuteagrave: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yacuteamacron: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yacuteaogonek: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yacutearing: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yacuteatilde: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    yacutecomma: [
                        -80,
                        -80,
                        -100,
                        -100,
                        -55,
                        -37,
                        -55,
                        -65
                    ],
                    yacutee: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yacuteeacute: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yacuteecaron: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yacuteecircumflex: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yacuteedieresis: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yacuteedotaccent: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yacuteegrave: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yacuteemacron: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yacuteeogonek: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    yacuteo: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yacuteoacute: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yacuteocircumflex: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yacuteodieresis: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yacuteograve: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yacuteohungarumlaut: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yacuteomacron: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yacuteoslash: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yacuteotilde: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    yacuteperiod: [
                        -80,
                        -80,
                        -100,
                        -100,
                        -70,
                        -37,
                        -55,
                        -65
                    ],
                    ydieresisa: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    ydieresisaacute: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    ydieresisabreve: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    ydieresisacircumflex: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    ydieresisadieresis: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    ydieresisagrave: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    ydieresisamacron: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    ydieresisaogonek: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    ydieresisaring: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    ydieresisatilde: [
                        -30,
                        -30,
                        -20,
                        -20
                    ],
                    ydieresiscomma: [
                        -80,
                        -80,
                        -100,
                        -100,
                        -55,
                        -37,
                        -55,
                        -65
                    ],
                    ydieresise: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    ydieresiseacute: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    ydieresisecaron: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    ydieresisecircumflex: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    ydieresisedieresis: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    ydieresisedotaccent: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    ydieresisegrave: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    ydieresisemacron: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    ydieresiseogonek: [
                        -10,
                        -10,
                        -20,
                        -20,
                        -10
                    ],
                    ydieresiso: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    ydieresisoacute: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    ydieresisocircumflex: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    ydieresisodieresis: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    ydieresisograve: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    ydieresisohungarumlaut: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    ydieresisomacron: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    ydieresisoslash: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    ydieresisotilde: [
                        -25,
                        -25,
                        -20,
                        -20,
                        -25
                    ],
                    ydieresisperiod: [
                        -80,
                        -80,
                        -100,
                        -100,
                        -70,
                        -37,
                        -55,
                        -65
                    ],
                    ze: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zeacute: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zecaron: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zecircumflex: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zedieresis: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zedotaccent: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zegrave: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zemacron: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zeogonek: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zacutee: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zacuteeacute: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zacuteecaron: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zacuteecircumflex: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zacuteedieresis: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zacuteedotaccent: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zacuteegrave: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zacuteemacron: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zacuteeogonek: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zcarone: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zcaroneacute: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zcaronecaron: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zcaronecircumflex: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zcaronedieresis: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zcaronedotaccent: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zcaronegrave: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zcaronemacron: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zcaroneogonek: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zdotaccente: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zdotaccenteacute: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zdotaccentecaron: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zdotaccentecircumflex: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zdotaccentedieresis: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zdotaccentedotaccent: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zdotaccentegrave: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zdotaccentemacron: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    zdotaccenteogonek: [
                        10,
                        10,
                        -15,
                        -15
                    ],
                    Bcomma: [
                        0,
                        0,
                        -20,
                        -20
                    ],
                    Bperiod: [
                        0,
                        0,
                        -20,
                        -20
                    ],
                    Ccomma: [
                        0,
                        0,
                        -30,
                        -30
                    ],
                    Cperiod: [
                        0,
                        0,
                        -30,
                        -30
                    ],
                    Cacutecomma: [
                        0,
                        0,
                        -30,
                        -30
                    ],
                    Cacuteperiod: [
                        0,
                        0,
                        -30,
                        -30
                    ],
                    Ccaroncomma: [
                        0,
                        0,
                        -30,
                        -30
                    ],
                    Ccaronperiod: [
                        0,
                        0,
                        -30,
                        -30
                    ],
                    Ccedillacomma: [
                        0,
                        0,
                        -30,
                        -30
                    ],
                    Ccedillaperiod: [
                        0,
                        0,
                        -30,
                        -30
                    ],
                    Fe: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -100,
                        -75
                    ],
                    Feacute: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -100,
                        -75
                    ],
                    Fecaron: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -100,
                        -75
                    ],
                    Fecircumflex: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -100,
                        -75
                    ],
                    Fedieresis: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -100,
                        -75
                    ],
                    Fedotaccent: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -100,
                        -75
                    ],
                    Fegrave: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -100,
                        -75
                    ],
                    Femacron: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -100,
                        -75
                    ],
                    Feogonek: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -100,
                        -75
                    ],
                    Fo: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -70,
                        -105,
                        -15
                    ],
                    Foacute: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -70,
                        -105,
                        -15
                    ],
                    Focircumflex: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -70,
                        -105,
                        -15
                    ],
                    Fodieresis: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -70,
                        -105,
                        -15
                    ],
                    Fograve: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -70,
                        -105,
                        -15
                    ],
                    Fohungarumlaut: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -70,
                        -105,
                        -15
                    ],
                    Fomacron: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -70,
                        -105,
                        -15
                    ],
                    Foslash: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -70,
                        -105,
                        -15
                    ],
                    Fotilde: [
                        0,
                        0,
                        -30,
                        -30,
                        -25,
                        -70,
                        -105,
                        -15
                    ],
                    Fr: [
                        0,
                        0,
                        -45,
                        -45,
                        0,
                        -50,
                        -55
                    ],
                    Fracute: [
                        0,
                        0,
                        -45,
                        -45,
                        0,
                        -50,
                        -55
                    ],
                    Frcaron: [
                        0,
                        0,
                        -45,
                        -45,
                        0,
                        -50,
                        -55
                    ],
                    Frcommaaccent: [
                        0,
                        0,
                        -45,
                        -45,
                        0,
                        -50,
                        -55
                    ],
                    Ja: [
                        0,
                        0,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Jaacute: [
                        0,
                        0,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Jabreve: [
                        0,
                        0,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Jacircumflex: [
                        0,
                        0,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Jadieresis: [
                        0,
                        0,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Jagrave: [
                        0,
                        0,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Jamacron: [
                        0,
                        0,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Jaogonek: [
                        0,
                        0,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Jaring: [
                        0,
                        0,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    Jatilde: [
                        0,
                        0,
                        -20,
                        -20,
                        -15,
                        -40,
                        -35
                    ],
                    LcaronT: [
                        0,
                        0,
                        -110,
                        -110
                    ],
                    LcaronTcaron: [
                        0,
                        0,
                        -110,
                        -110
                    ],
                    LcaronTcommaaccent: [
                        0,
                        0,
                        -110,
                        -110
                    ],
                    LcaronV: [
                        0,
                        0,
                        -110,
                        -110
                    ],
                    LcaronW: [
                        0,
                        0,
                        -70,
                        -70
                    ],
                    LcaronY: [
                        0,
                        0,
                        -140,
                        -140
                    ],
                    LcaronYacute: [
                        0,
                        0,
                        -140,
                        -140
                    ],
                    LcaronYdieresis: [
                        0,
                        0,
                        -140,
                        -140
                    ],
                    Lcaronquotedblright: [
                        0,
                        0,
                        -140,
                        -140
                    ],
                    Lcaronquoteright: [
                        0,
                        0,
                        -160,
                        -160,
                        0,
                        0,
                        0,
                        -92
                    ],
                    Lcarony: [
                        0,
                        0,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -55
                    ],
                    Lcaronyacute: [
                        0,
                        0,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -55
                    ],
                    Lcaronydieresis: [
                        0,
                        0,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -55
                    ],
                    Scomma: [
                        0,
                        0,
                        -20,
                        -20
                    ],
                    Speriod: [
                        0,
                        0,
                        -20,
                        -20
                    ],
                    Sacutecomma: [
                        0,
                        0,
                        -20,
                        -20
                    ],
                    Sacuteperiod: [
                        0,
                        0,
                        -20,
                        -20
                    ],
                    Scaroncomma: [
                        0,
                        0,
                        -20,
                        -20
                    ],
                    Scaronperiod: [
                        0,
                        0,
                        -20,
                        -20
                    ],
                    Scedillacomma: [
                        0,
                        0,
                        -20,
                        -20
                    ],
                    Scedillaperiod: [
                        0,
                        0,
                        -20,
                        -20
                    ],
                    Scommaaccentcomma: [
                        0,
                        0,
                        -20,
                        -20
                    ],
                    Scommaaccentperiod: [
                        0,
                        0,
                        -20,
                        -20
                    ],
                    Trcaron: [
                        0,
                        0,
                        -120,
                        -120,
                        -74,
                        -37,
                        -55,
                        -35
                    ],
                    Tcaronrcaron: [
                        0,
                        0,
                        -120,
                        -120,
                        -74,
                        -37,
                        -55,
                        -35
                    ],
                    Tcommaaccentrcaron: [
                        0,
                        0,
                        -120,
                        -120,
                        -74,
                        -37,
                        -55,
                        -35
                    ],
                    Yhyphen: [
                        0,
                        0,
                        -140,
                        -140,
                        -92,
                        -92,
                        -74,
                        -111
                    ],
                    Yi: [
                        0,
                        0,
                        -20,
                        -20,
                        -37,
                        -55,
                        -74,
                        -55
                    ],
                    Yiacute: [
                        0,
                        0,
                        -20,
                        -20,
                        -37,
                        -55,
                        -74,
                        -55
                    ],
                    Yiogonek: [
                        0,
                        0,
                        -20,
                        -20,
                        -37,
                        -55,
                        -74,
                        -55
                    ],
                    Yacutehyphen: [
                        0,
                        0,
                        -140,
                        -140,
                        -92,
                        -92,
                        -74,
                        -111
                    ],
                    Yacutei: [
                        0,
                        0,
                        -20,
                        -20,
                        -37,
                        -55,
                        -74,
                        -55
                    ],
                    Yacuteiacute: [
                        0,
                        0,
                        -20,
                        -20,
                        -37,
                        -55,
                        -74,
                        -55
                    ],
                    Yacuteiogonek: [
                        0,
                        0,
                        -20,
                        -20,
                        -37,
                        -55,
                        -74,
                        -55
                    ],
                    Ydieresishyphen: [
                        0,
                        0,
                        -140,
                        -140,
                        -92,
                        -92,
                        -74,
                        -111
                    ],
                    Ydieresisi: [
                        0,
                        0,
                        -20,
                        -20,
                        -37,
                        -55,
                        -74,
                        -55
                    ],
                    Ydieresisiacute: [
                        0,
                        0,
                        -20,
                        -20,
                        -37,
                        -55,
                        -74,
                        -55
                    ],
                    Ydieresisiogonek: [
                        0,
                        0,
                        -20,
                        -20,
                        -37,
                        -55,
                        -74,
                        -55
                    ],
                    bb: [
                        0,
                        0,
                        -10,
                        -10,
                        -10,
                        -10
                    ],
                    bcomma: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    bperiod: [
                        0,
                        0,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40,
                        -40
                    ],
                    ccomma: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    cacutecomma: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    ccaroncomma: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    ccedillacomma: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    fa: [
                        0,
                        0,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -10
                    ],
                    faacute: [
                        0,
                        0,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -10
                    ],
                    fabreve: [
                        0,
                        0,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -10
                    ],
                    facircumflex: [
                        0,
                        0,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -10
                    ],
                    fadieresis: [
                        0,
                        0,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -10
                    ],
                    fagrave: [
                        0,
                        0,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -10
                    ],
                    famacron: [
                        0,
                        0,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -10
                    ],
                    faogonek: [
                        0,
                        0,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -10
                    ],
                    faring: [
                        0,
                        0,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -10
                    ],
                    fatilde: [
                        0,
                        0,
                        -30,
                        -30,
                        0,
                        0,
                        0,
                        -10
                    ],
                    fdotlessi: [
                        0,
                        0,
                        -28,
                        -28,
                        -35,
                        -30,
                        -60,
                        -50
                    ],
                    gr: [
                        0,
                        0,
                        -10,
                        -10
                    ],
                    gracute: [
                        0,
                        0,
                        -10,
                        -10
                    ],
                    grcaron: [
                        0,
                        0,
                        -10,
                        -10
                    ],
                    grcommaaccent: [
                        0,
                        0,
                        -10,
                        -10
                    ],
                    gbrever: [
                        0,
                        0,
                        -10,
                        -10
                    ],
                    gbreveracute: [
                        0,
                        0,
                        -10,
                        -10
                    ],
                    gbrevercaron: [
                        0,
                        0,
                        -10,
                        -10
                    ],
                    gbrevercommaaccent: [
                        0,
                        0,
                        -10,
                        -10
                    ],
                    gcommaaccentr: [
                        0,
                        0,
                        -10,
                        -10
                    ],
                    gcommaaccentracute: [
                        0,
                        0,
                        -10,
                        -10
                    ],
                    gcommaaccentrcaron: [
                        0,
                        0,
                        -10,
                        -10
                    ],
                    gcommaaccentrcommaaccent: [
                        0,
                        0,
                        -10,
                        -10
                    ],
                    ke: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    keacute: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    kecaron: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    kecircumflex: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    kedieresis: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    kedotaccent: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    kegrave: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    kemacron: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    keogonek: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    kcommaaccente: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    kcommaaccenteacute: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    kcommaaccentecaron: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    kcommaaccentecircumflex: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    kcommaaccentedieresis: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    kcommaaccentedotaccent: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    kcommaaccentegrave: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    kcommaaccentemacron: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    kcommaaccenteogonek: [
                        0,
                        0,
                        -20,
                        -20,
                        -10,
                        -30,
                        -10,
                        -10
                    ],
                    ocomma: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    operiod: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    oacutecomma: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    oacuteperiod: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    ocircumflexcomma: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    ocircumflexperiod: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    odieresiscomma: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    odieresisperiod: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    ogravecomma: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    ograveperiod: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    ohungarumlautcomma: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    ohungarumlautperiod: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    omacroncomma: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    omacronperiod: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    oslasha: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashaacute: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashabreve: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashacircumflex: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashadieresis: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashagrave: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashamacron: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashaogonek: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslasharing: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashatilde: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashb: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashc: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashcacute: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashccaron: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashccedilla: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashcomma: [
                        0,
                        0,
                        -95,
                        -95
                    ],
                    oslashd: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashdcroat: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashe: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslasheacute: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashecaron: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashecircumflex: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashedieresis: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashedotaccent: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashegrave: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashemacron: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslasheogonek: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashf: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashg: [
                        0,
                        0,
                        -55,
                        -55,
                        0,
                        0,
                        -10
                    ],
                    oslashgbreve: [
                        0,
                        0,
                        -55,
                        -55,
                        0,
                        0,
                        -10
                    ],
                    oslashgcommaaccent: [
                        0,
                        0,
                        -55,
                        -55,
                        0,
                        0,
                        -10
                    ],
                    oslashh: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashi: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashiacute: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashicircumflex: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashidieresis: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashigrave: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashimacron: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashiogonek: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashj: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashk: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashkcommaaccent: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashl: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashlacute: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashlcommaaccent: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashlslash: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashm: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashn: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashnacute: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashncaron: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashncommaaccent: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashntilde: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslasho: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashoacute: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashocircumflex: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashodieresis: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashograve: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashohungarumlaut: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashomacron: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashoslash: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashotilde: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashp: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashperiod: [
                        0,
                        0,
                        -95,
                        -95
                    ],
                    oslashq: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashr: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashracute: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashrcaron: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashrcommaaccent: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashs: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashsacute: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashscaron: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashscedilla: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashscommaaccent: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslasht: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashtcommaaccent: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashu: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashuacute: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashucircumflex: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashudieresis: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashugrave: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashuhungarumlaut: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashumacron: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashuogonek: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashuring: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashz: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashzacute: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashzcaron: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    oslashzdotaccent: [
                        0,
                        0,
                        -55,
                        -55
                    ],
                    otildecomma: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    otildeperiod: [
                        0,
                        0,
                        -40,
                        -40
                    ],
                    pcomma: [
                        0,
                        0,
                        -35,
                        -35
                    ],
                    pperiod: [
                        0,
                        0,
                        -35,
                        -35
                    ],
                    ra: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    raacute: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rabreve: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    racircumflex: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    radieresis: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    ragrave: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    ramacron: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    raogonek: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    raring: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    ratilde: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcolon: [
                        0,
                        0,
                        30,
                        30
                    ],
                    ri: [
                        0,
                        0,
                        15,
                        15
                    ],
                    riacute: [
                        0,
                        0,
                        15,
                        15
                    ],
                    ricircumflex: [
                        0,
                        0,
                        15,
                        15
                    ],
                    ridieresis: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rigrave: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rimacron: [
                        0,
                        0,
                        15,
                        15
                    ],
                    riogonek: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rk: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rkcommaaccent: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rl: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rlacute: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rlcommaaccent: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rlslash: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rm: [
                        0,
                        0,
                        25,
                        25
                    ],
                    rn: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    rnacute: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    rncaron: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    rncommaaccent: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    rntilde: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    rp: [
                        0,
                        0,
                        30,
                        30,
                        -10
                    ],
                    rsemicolon: [
                        0,
                        0,
                        30,
                        30
                    ],
                    ru: [
                        0,
                        0,
                        15,
                        15
                    ],
                    ruacute: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rucircumflex: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rudieresis: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rugrave: [
                        0,
                        0,
                        15,
                        15
                    ],
                    ruhungarumlaut: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rumacron: [
                        0,
                        0,
                        15,
                        15
                    ],
                    ruogonek: [
                        0,
                        0,
                        15,
                        15
                    ],
                    ruring: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racutea: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    racuteaacute: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    racuteabreve: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    racuteacircumflex: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    racuteadieresis: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    racuteagrave: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    racuteamacron: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    racuteaogonek: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    racutearing: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    racuteatilde: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    racutecolon: [
                        0,
                        0,
                        30,
                        30
                    ],
                    racutei: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racuteiacute: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racuteicircumflex: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racuteidieresis: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racuteigrave: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racuteimacron: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racuteiogonek: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racutek: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racutekcommaaccent: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racutel: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racutelacute: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racutelcommaaccent: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racutelslash: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racutem: [
                        0,
                        0,
                        25,
                        25
                    ],
                    racuten: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    racutenacute: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    racutencaron: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    racutencommaaccent: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    racutentilde: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    racutep: [
                        0,
                        0,
                        30,
                        30,
                        -10
                    ],
                    racutesemicolon: [
                        0,
                        0,
                        30,
                        30
                    ],
                    racuteu: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racuteuacute: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racuteucircumflex: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racuteudieresis: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racuteugrave: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racuteuhungarumlaut: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racuteumacron: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racuteuogonek: [
                        0,
                        0,
                        15,
                        15
                    ],
                    racuteuring: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcarona: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcaronaacute: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcaronabreve: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcaronacircumflex: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcaronadieresis: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcaronagrave: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcaronamacron: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcaronaogonek: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcaronaring: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcaronatilde: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcaroncolon: [
                        0,
                        0,
                        30,
                        30
                    ],
                    rcaroni: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaroniacute: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronicircumflex: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronidieresis: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronigrave: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronimacron: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaroniogonek: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronk: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronkcommaaccent: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronl: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronlacute: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronlcommaaccent: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronlslash: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronm: [
                        0,
                        0,
                        25,
                        25
                    ],
                    rcaronn: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    rcaronnacute: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    rcaronncaron: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    rcaronncommaaccent: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    rcaronntilde: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    rcaronp: [
                        0,
                        0,
                        30,
                        30,
                        -10
                    ],
                    rcaronsemicolon: [
                        0,
                        0,
                        30,
                        30
                    ],
                    rcaronu: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronuacute: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronucircumflex: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronudieresis: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronugrave: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronuhungarumlaut: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronumacron: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronuogonek: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcaronuring: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccenta: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcommaaccentaacute: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcommaaccentabreve: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcommaaccentacircumflex: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcommaaccentadieresis: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcommaaccentagrave: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcommaaccentamacron: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcommaaccentaogonek: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcommaaccentaring: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcommaaccentatilde: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        0,
                        -15
                    ],
                    rcommaaccentcolon: [
                        0,
                        0,
                        30,
                        30
                    ],
                    rcommaaccenti: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentiacute: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccenticircumflex: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentidieresis: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentigrave: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentimacron: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentiogonek: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentk: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentkcommaaccent: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentl: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentlacute: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentlcommaaccent: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentlslash: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentm: [
                        0,
                        0,
                        25,
                        25
                    ],
                    rcommaaccentn: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    rcommaaccentnacute: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    rcommaaccentncaron: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    rcommaaccentncommaaccent: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    rcommaaccentntilde: [
                        0,
                        0,
                        25,
                        25,
                        -15
                    ],
                    rcommaaccentp: [
                        0,
                        0,
                        30,
                        30,
                        -10
                    ],
                    rcommaaccentsemicolon: [
                        0,
                        0,
                        30,
                        30
                    ],
                    rcommaaccentu: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentuacute: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentucircumflex: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentudieresis: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentugrave: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentuhungarumlaut: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentumacron: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccentuogonek: [
                        0,
                        0,
                        15,
                        15
                    ],
                    rcommaaccenturing: [
                        0,
                        0,
                        15,
                        15
                    ],
                    scomma: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    speriod: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    sacutecomma: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    sacuteperiod: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    scaroncomma: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    scaronperiod: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    scedillacomma: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    scedillaperiod: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    scommaaccentcomma: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    scommaaccentperiod: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    ve: [
                        0,
                        0,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -15
                    ],
                    veacute: [
                        0,
                        0,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -15
                    ],
                    vecaron: [
                        0,
                        0,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -15
                    ],
                    vecircumflex: [
                        0,
                        0,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -15
                    ],
                    vedieresis: [
                        0,
                        0,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -15
                    ],
                    vedotaccent: [
                        0,
                        0,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -15
                    ],
                    vegrave: [
                        0,
                        0,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -15
                    ],
                    vemacron: [
                        0,
                        0,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -15
                    ],
                    veogonek: [
                        0,
                        0,
                        -25,
                        -25,
                        -10,
                        -15,
                        0,
                        -15
                    ],
                    wa: [
                        0,
                        0,
                        -15,
                        -15,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    waacute: [
                        0,
                        0,
                        -15,
                        -15,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    wabreve: [
                        0,
                        0,
                        -15,
                        -15,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    wacircumflex: [
                        0,
                        0,
                        -15,
                        -15,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    wadieresis: [
                        0,
                        0,
                        -15,
                        -15,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    wagrave: [
                        0,
                        0,
                        -15,
                        -15,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    wamacron: [
                        0,
                        0,
                        -15,
                        -15,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    waogonek: [
                        0,
                        0,
                        -15,
                        -15,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    waring: [
                        0,
                        0,
                        -15,
                        -15,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    watilde: [
                        0,
                        0,
                        -15,
                        -15,
                        0,
                        -10,
                        0,
                        -10
                    ],
                    we: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        -10
                    ],
                    weacute: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        -10
                    ],
                    wecaron: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        -10
                    ],
                    wecircumflex: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        -10
                    ],
                    wedieresis: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        -10
                    ],
                    wedotaccent: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        -10
                    ],
                    wegrave: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        -10
                    ],
                    wemacron: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        -10
                    ],
                    weogonek: [
                        0,
                        0,
                        -10,
                        -10,
                        0,
                        -10
                    ],
                    zo: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zoacute: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zocircumflex: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zodieresis: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zograve: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zohungarumlaut: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zomacron: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zoslash: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zotilde: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zacuteo: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zacuteoacute: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zacuteocircumflex: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zacuteodieresis: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zacuteograve: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zacuteohungarumlaut: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zacuteomacron: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zacuteoslash: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zacuteotilde: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zcarono: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zcaronoacute: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zcaronocircumflex: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zcaronodieresis: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zcaronograve: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zcaronohungarumlaut: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zcaronomacron: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zcaronoslash: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zcaronotilde: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zdotaccento: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zdotaccentoacute: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zdotaccentocircumflex: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zdotaccentodieresis: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zdotaccentograve: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zdotaccentohungarumlaut: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zdotaccentomacron: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zdotaccentoslash: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    zdotaccentotilde: [
                        0,
                        0,
                        -15,
                        -15
                    ],
                    Ap: [
                        0,
                        0,
                        0,
                        0,
                        -25
                    ],
                    Aquoteright: [
                        0,
                        0,
                        0,
                        0,
                        -74,
                        -74,
                        -37,
                        -111
                    ],
                    Aacutep: [
                        0,
                        0,
                        0,
                        0,
                        -25
                    ],
                    Aacutequoteright: [
                        0,
                        0,
                        0,
                        0,
                        -74,
                        -74,
                        -37,
                        -111
                    ],
                    Abrevep: [
                        0,
                        0,
                        0,
                        0,
                        -25
                    ],
                    Abrevequoteright: [
                        0,
                        0,
                        0,
                        0,
                        -74,
                        -74,
                        -37,
                        -111
                    ],
                    Acircumflexp: [
                        0,
                        0,
                        0,
                        0,
                        -25
                    ],
                    Acircumflexquoteright: [
                        0,
                        0,
                        0,
                        0,
                        -74,
                        -74,
                        -37,
                        -111
                    ],
                    Adieresisp: [
                        0,
                        0,
                        0,
                        0,
                        -25
                    ],
                    Adieresisquoteright: [
                        0,
                        0,
                        0,
                        0,
                        -74,
                        -74,
                        -37,
                        -111
                    ],
                    Agravep: [
                        0,
                        0,
                        0,
                        0,
                        -25
                    ],
                    Agravequoteright: [
                        0,
                        0,
                        0,
                        0,
                        -74,
                        -74,
                        -37,
                        -111
                    ],
                    Amacronp: [
                        0,
                        0,
                        0,
                        0,
                        -25
                    ],
                    Amacronquoteright: [
                        0,
                        0,
                        0,
                        0,
                        -74,
                        -74,
                        -37,
                        -111
                    ],
                    Aogonekp: [
                        0,
                        0,
                        0,
                        0,
                        -25
                    ],
                    Aogonekquoteright: [
                        0,
                        0,
                        0,
                        0,
                        -74,
                        -74,
                        -37,
                        -111
                    ],
                    Aringp: [
                        0,
                        0,
                        0,
                        0,
                        -25
                    ],
                    Aringquoteright: [
                        0,
                        0,
                        0,
                        0,
                        -74,
                        -74,
                        -37,
                        -111
                    ],
                    Atildep: [
                        0,
                        0,
                        0,
                        0,
                        -25
                    ],
                    Atildequoteright: [
                        0,
                        0,
                        0,
                        0,
                        -74,
                        -74,
                        -37,
                        -111
                    ],
                    Je: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Jeacute: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Jecaron: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Jecircumflex: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Jedieresis: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Jedotaccent: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Jegrave: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Jemacron: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Jeogonek: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Jo: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Joacute: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Jocircumflex: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Jodieresis: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Jograve: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Johungarumlaut: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Jomacron: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Joslash: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    Jotilde: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        -40,
                        -25
                    ],
                    NA: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NAacute: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NAbreve: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NAcircumflex: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NAdieresis: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NAgrave: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NAmacron: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NAogonek: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NAring: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NAtilde: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NacuteA: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NacuteAacute: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NacuteAbreve: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NacuteAcircumflex: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NacuteAdieresis: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NacuteAgrave: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NacuteAmacron: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NacuteAogonek: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NacuteAring: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NacuteAtilde: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcaronA: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcaronAacute: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcaronAbreve: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcaronAcircumflex: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcaronAdieresis: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcaronAgrave: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcaronAmacron: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcaronAogonek: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcaronAring: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcaronAtilde: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcommaaccentA: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcommaaccentAacute: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcommaaccentAbreve: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcommaaccentAcircumflex: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcommaaccentAdieresis: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcommaaccentAgrave: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcommaaccentAmacron: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcommaaccentAogonek: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcommaaccentAring: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NcommaaccentAtilde: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NtildeA: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NtildeAacute: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NtildeAbreve: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NtildeAcircumflex: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NtildeAdieresis: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NtildeAgrave: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NtildeAmacron: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NtildeAogonek: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NtildeAring: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    NtildeAtilde: [
                        0,
                        0,
                        0,
                        0,
                        -20,
                        -30,
                        -27,
                        -35
                    ],
                    Ti: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        -37,
                        -55,
                        -35
                    ],
                    Tiacute: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        -37,
                        -55,
                        -35
                    ],
                    Tiogonek: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        -37,
                        -55,
                        -35
                    ],
                    Tcaroni: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        -37,
                        -55,
                        -35
                    ],
                    Tcaroniacute: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        -37,
                        -55,
                        -35
                    ],
                    Tcaroniogonek: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        -37,
                        -55,
                        -35
                    ],
                    Tcommaaccenti: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        -37,
                        -55,
                        -35
                    ],
                    Tcommaaccentiacute: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        -37,
                        -55,
                        -35
                    ],
                    Tcommaaccentiogonek: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        -37,
                        -55,
                        -35
                    ],
                    Vi: [
                        0,
                        0,
                        0,
                        0,
                        -37,
                        -55,
                        -74,
                        -60
                    ],
                    Viacute: [
                        0,
                        0,
                        0,
                        0,
                        -37,
                        -55,
                        -74,
                        -60
                    ],
                    Vicircumflex: [
                        0,
                        0,
                        0,
                        0,
                        -37,
                        0,
                        -34,
                        -20
                    ],
                    Vidieresis: [
                        0,
                        0,
                        0,
                        0,
                        -37,
                        0,
                        -34,
                        -20
                    ],
                    Vigrave: [
                        0,
                        0,
                        0,
                        0,
                        -37,
                        0,
                        -34,
                        -20
                    ],
                    Vimacron: [
                        0,
                        0,
                        0,
                        0,
                        -37,
                        0,
                        -34,
                        -20
                    ],
                    Viogonek: [
                        0,
                        0,
                        0,
                        0,
                        -37,
                        -55,
                        -74,
                        -60
                    ],
                    Wi: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        -37,
                        -55,
                        -40
                    ],
                    Wiacute: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        -37,
                        -55,
                        -40
                    ],
                    Wiogonek: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        -37,
                        -55,
                        -40
                    ],
                    fi: [
                        0,
                        0,
                        0,
                        0,
                        -25,
                        0,
                        -20,
                        -20
                    ],
                    gperiod: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        0,
                        -15
                    ],
                    gbreveperiod: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        0,
                        -15
                    ],
                    gcommaaccentperiod: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        0,
                        -15
                    ],
                    iv: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    iacutev: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    icircumflexv: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    idieresisv: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    igravev: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    imacronv: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    iogonekv: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -25
                    ],
                    ky: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        0,
                        -10,
                        -15
                    ],
                    kyacute: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        0,
                        -10,
                        -15
                    ],
                    kydieresis: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        0,
                        -10,
                        -15
                    ],
                    kcommaaccenty: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        0,
                        -10,
                        -15
                    ],
                    kcommaaccentyacute: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        0,
                        -10,
                        -15
                    ],
                    kcommaaccentydieresis: [
                        0,
                        0,
                        0,
                        0,
                        -15,
                        0,
                        -10,
                        -15
                    ],
                    quotedblleftA: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quotedblleftAacute: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quotedblleftAbreve: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quotedblleftAcircumflex: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quotedblleftAdieresis: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quotedblleftAgrave: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quotedblleftAmacron: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quotedblleftAogonek: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quotedblleftAring: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quotedblleftAtilde: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quoteleftA: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quoteleftAacute: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quoteleftAbreve: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quoteleftAcircumflex: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quoteleftAdieresis: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quoteleftAgrave: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quoteleftAmacron: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quoteleftAogonek: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quoteleftAring: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    quoteleftAtilde: [
                        0,
                        0,
                        0,
                        0,
                        -10,
                        0,
                        0,
                        -80
                    ],
                    re: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    reacute: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    recaron: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    recircumflex: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    redieresis: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    redotaccent: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    regrave: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    remacron: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    reogonek: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    racutee: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    racuteeacute: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    racuteecaron: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    racuteecircumflex: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    racuteedieresis: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    racuteedotaccent: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    racuteegrave: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    racuteemacron: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    racuteeogonek: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcarone: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcaroneacute: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcaronecaron: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcaronecircumflex: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcaronedieresis: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcaronedotaccent: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcaronegrave: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcaronemacron: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcaroneogonek: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcommaaccente: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcommaaccenteacute: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcommaaccentecaron: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcommaaccentecircumflex: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcommaaccentedieresis: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcommaaccentedotaccent: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcommaaccentegrave: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcommaaccentemacron: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    rcommaaccenteogonek: [
                        0,
                        0,
                        0,
                        0,
                        -18,
                        0,
                        -37
                    ],
                    spaceA: [
                        0,
                        0,
                        0,
                        0,
                        -55,
                        -37,
                        -18,
                        -55
                    ],
                    spaceAacute: [
                        0,
                        0,
                        0,
                        0,
                        -55,
                        -37,
                        -18,
                        -55
                    ],
                    spaceAbreve: [
                        0,
                        0,
                        0,
                        0,
                        -55,
                        -37,
                        -18,
                        -55
                    ],
                    spaceAcircumflex: [
                        0,
                        0,
                        0,
                        0,
                        -55,
                        -37,
                        -18,
                        -55
                    ],
                    spaceAdieresis: [
                        0,
                        0,
                        0,
                        0,
                        -55,
                        -37,
                        -18,
                        -55
                    ],
                    spaceAgrave: [
                        0,
                        0,
                        0,
                        0,
                        -55,
                        -37,
                        -18,
                        -55
                    ],
                    spaceAmacron: [
                        0,
                        0,
                        0,
                        0,
                        -55,
                        -37,
                        -18,
                        -55
                    ],
                    spaceAogonek: [
                        0,
                        0,
                        0,
                        0,
                        -55,
                        -37,
                        -18,
                        -55
                    ],
                    spaceAring: [
                        0,
                        0,
                        0,
                        0,
                        -55,
                        -37,
                        -18,
                        -55
                    ],
                    spaceAtilde: [
                        0,
                        0,
                        0,
                        0,
                        -55,
                        -37,
                        -18,
                        -55
                    ],
                    Fi: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -45
                    ],
                    Fiacute: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -45
                    ],
                    Ficircumflex: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -45
                    ],
                    Fidieresis: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -45
                    ],
                    Figrave: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -45
                    ],
                    Fimacron: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -45
                    ],
                    Fiogonek: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -45
                    ],
                    eb: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    eacuteb: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ecaronb: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ecircumflexb: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    edieresisb: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    edotaccentb: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    egraveb: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    emacronb: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    eogonekb: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ff: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -18,
                        -18,
                        -25
                    ],
                    quoterightt: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -37,
                        -30,
                        -18
                    ],
                    quoterighttcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        -37,
                        -30,
                        -18
                    ],
                    Yicircumflex: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -34
                    ],
                    Yidieresis: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -34
                    ],
                    Yigrave: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -34
                    ],
                    Yimacron: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -34
                    ],
                    Yacuteicircumflex: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -34
                    ],
                    Yacuteidieresis: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -34
                    ],
                    Yacuteigrave: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -34
                    ],
                    Yacuteimacron: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -34
                    ],
                    Ydieresisicircumflex: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -34
                    ],
                    Ydieresisidieresis: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -34
                    ],
                    Ydieresisigrave: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -34
                    ],
                    Ydieresisimacron: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -34
                    ],
                    eg: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    egbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    egcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    eacuteg: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    eacutegbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    eacutegcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    ecarong: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    ecarongbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    ecarongcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    ecircumflexg: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    ecircumflexgbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    ecircumflexgcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    edieresisg: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    edieresisgbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    edieresisgcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    edotaccentg: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    edotaccentgbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    edotaccentgcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    egraveg: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    egravegbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    egravegcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    emacrong: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    emacrongbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    emacrongcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    eogonekg: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    eogonekgbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    eogonekgcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -40,
                        -15
                    ],
                    fiogonek: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -20
                    ],
                    gcomma: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gbrevecomma: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    gcommaaccentcomma: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    og: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ogbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ogcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    oacuteg: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    oacutegbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    oacutegcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ocircumflexg: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ocircumflexgbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ocircumflexgcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    odieresisg: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    odieresisgbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    odieresisgcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ograveg: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ogravegbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ogravegcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ohungarumlautg: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ohungarumlautgbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    ohungarumlautgcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    omacrong: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    omacrongbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    omacrongcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    otildeg: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    otildegbreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    otildegcommaaccent: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -10
                    ],
                    fiacute: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -20
                    ],
                    ga: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gaacute: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gabreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gacircumflex: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gadieresis: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gagrave: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gamacron: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gaogonek: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    garing: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gatilde: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gbrevea: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gbreveaacute: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gbreveabreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gbreveacircumflex: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gbreveadieresis: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gbreveagrave: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gbreveamacron: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gbreveaogonek: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gbrevearing: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gbreveatilde: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gcommaaccenta: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gcommaaccentaacute: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gcommaaccentabreve: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gcommaaccentacircumflex: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gcommaaccentadieresis: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gcommaaccentagrave: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gcommaaccentamacron: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gcommaaccentaogonek: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gcommaaccentaring: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ],
                    gcommaaccentatilde: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        -5
                    ]
                }
            }), toHex = function() {
                for(var _len = arguments.length, codePoints = Array(_len), _key = 0; _key < _len; _key++)codePoints[_key] = arguments[_key];
                return Array.from(codePoints).map(function(code) {
                    return ("0000" + code.toString(16)).slice(-4);
                }).join('');
            }, PDFFont = function() {
                function PDFFont() {}
                PDFFont.open = function(document, src, family, id) {
                    var font;
                    if ('string' == typeof src) {
                        if (StandardFont.isStandardFont(src)) return new StandardFont(document, src, id);
                        throw Error("Can't open " + src + " in browser build");
                    }
                    if (src instanceof Uint8Array ? font = fontkit__WEBPACK_IMPORTED_MODULE_5__.Ue(src, family) : src instanceof ArrayBuffer ? font = fontkit__WEBPACK_IMPORTED_MODULE_5__.Ue(new Uint8Array(src), family) : 'object' == typeof src && (font = src), null == font) throw Error('Not a supported font format or standard PDF font.');
                    return new EmbeddedFont(document, font, id);
                };
                var _proto = PDFFont.prototype;
                return _proto.encode = function() {
                    throw Error('Must be implemented by subclasses');
                }, _proto.widthOfString = function() {
                    throw Error('Must be implemented by subclasses');
                }, _proto.ref = function() {
                    return null != this.dictionary ? this.dictionary : this.dictionary = this.document.ref();
                }, _proto.finalize = function() {
                    if (!this.embedded && null != this.dictionary) return this.embed(), this.embedded = !0;
                }, _proto.embed = function() {
                    throw Error('Must be implemented by subclasses');
                }, _proto.lineHeight = function(size, includeGap) {
                    null == includeGap && (includeGap = !1);
                    var gap = includeGap ? this.lineGap : 0;
                    return (this.ascender + gap - this.descender) / 1000 * size;
                }, PDFFont;
            }(), StandardFont = function(PDFFont) {
                return function(_PDFFont) {
                    function StandardFont(document, name, id) {
                        var _this;
                        return (_this = _PDFFont.call(this) || this).document = document, _this.name = name, _this.id = id, _this.font = AFMFont.fromJson(STANDARD_FONTS[_this.name]), _this.ascender = _this.font.ascender, _this.descender = _this.font.descender, _this.bbox = _this.font.bbox, _this.lineGap = _this.font.lineGap, _this;
                    }
                    (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__.Z)(StandardFont, _PDFFont);
                    var _proto = StandardFont.prototype;
                    return _proto.embed = function() {
                        return this.dictionary.data = {
                            Type: 'Font',
                            BaseFont: this.name,
                            Subtype: 'Type1',
                            Encoding: 'WinAnsiEncoding'
                        }, this.dictionary.end();
                    }, _proto.encode = function(text) {
                        for(var encoded = this.font.encodeText(text), glyphs = this.font.glyphsForString("" + text), advances = this.font.advancesForGlyphs(glyphs), positions = [], i = 0; i < glyphs.length; i++){
                            var glyph = glyphs[i];
                            positions.push({
                                xAdvance: advances[i],
                                yAdvance: 0,
                                xOffset: 0,
                                yOffset: 0,
                                advanceWidth: this.font.widthOfGlyph(glyph)
                            });
                        }
                        return [
                            encoded,
                            positions
                        ];
                    }, _proto.encodeGlyphs = function(glyphs) {
                        for(var res = [], _i = 0, _Array$from = Array.from(glyphs); _i < _Array$from.length; _i++){
                            var glyph = _Array$from[_i];
                            res.push(("00" + glyph.id.toString(16)).slice(-2));
                        }
                        return res;
                    }, _proto.widthOfString = function(string, size) {
                        for(var glyphs = this.font.glyphsForString("" + string), advances = this.font.advancesForGlyphs(glyphs), width = 0, _i2 = 0, _Array$from2 = Array.from(advances); _i2 < _Array$from2.length; _i2++)width += _Array$from2[_i2];
                        return width * (size / 1000);
                    }, StandardFont.isStandardFont = function(name) {
                        return name in STANDARD_FONTS;
                    }, StandardFont;
                }(PDFFont);
            }(PDFFont), EmbeddedFont = function(PDFFont) {
                return function(_PDFFont) {
                    function EmbeddedFont(document, font, id) {
                        var _this;
                        return (_this = _PDFFont.call(this) || this).document = document, _this.font = font, _this.id = id, _this.subset = _this.font.createSubset(), _this.unicode = [
                            [
                                0
                            ]
                        ], _this.widths = [
                            _this.font.getGlyph(0).advanceWidth
                        ], _this.name = _this.font.postscriptName, _this.scale = 1000 / _this.font.unitsPerEm, _this.ascender = _this.font.ascent * _this.scale, _this.descender = _this.font.descent * _this.scale, _this.xHeight = _this.font.xHeight * _this.scale, _this.capHeight = _this.font.capHeight * _this.scale, _this.lineGap = _this.font.lineGap * _this.scale, _this.bbox = _this.font.bbox, _this.layoutCache = Object.create(null), _this;
                    }
                    (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__.Z)(EmbeddedFont, _PDFFont);
                    var _proto = EmbeddedFont.prototype;
                    return _proto.layoutRun = function(text, features) {
                        for(var run = this.font.layout(text, features), i = 0; i < run.positions.length; i++){
                            var position = run.positions[i];
                            for(var key in position)position[key] *= this.scale;
                            position.advanceWidth = run.glyphs[i].advanceWidth * this.scale;
                        }
                        return run;
                    }, _proto.layoutCached = function(text) {
                        if (cached = this.layoutCache[text]) return cached;
                        var cached, run = this.layoutRun(text);
                        return this.layoutCache[text] = run, run;
                    }, _proto.layout = function(text, features, onlyWidth) {
                        if (null == onlyWidth && (onlyWidth = !1), features) return this.layoutRun(text, features);
                        for(var glyphs = onlyWidth ? null : [], positions = onlyWidth ? null : [], advanceWidth = 0, last = 0, index = 0; index <= text.length;)if (index === text.length && last < index || [
                            ' ',
                            '\t'
                        ].includes(text.charAt(index))) {
                            var run = this.layoutCached(text.slice(last, ++index));
                            onlyWidth || (glyphs.push.apply(glyphs, Array.from(run.glyphs || [])), positions.push.apply(positions, Array.from(run.positions || []))), advanceWidth += run.advanceWidth, last = index;
                        } else index++;
                        return {
                            glyphs: glyphs,
                            positions: positions,
                            advanceWidth: advanceWidth
                        };
                    }, _proto.encode = function(text, features) {
                        for(var _this$layout = this.layout(text, features), glyphs = _this$layout.glyphs, positions = _this$layout.positions, res = [], i = 0; i < glyphs.length; i++){
                            var glyph = glyphs[i], gid = this.subset.includeGlyph(glyph.id);
                            res.push(("0000" + gid.toString(16)).slice(-4)), null == this.widths[gid] && (this.widths[gid] = glyph.advanceWidth * this.scale), null == this.unicode[gid] && (this.unicode[gid] = this.font._cmapProcessor.codePointsForGlyph(glyph.id));
                        }
                        return [
                            res,
                            positions
                        ];
                    }, _proto.encodeGlyphs = function(glyphs) {
                        for(var res = [], i = 0; i < glyphs.length; i++){
                            var glyph = glyphs[i], gid = this.subset.includeGlyph(glyph.id);
                            res.push(("0000" + gid.toString(16)).slice(-4)), null == this.widths[gid] && (this.widths[gid] = glyph.advanceWidth * this.scale), null == this.unicode[gid] && (this.unicode[gid] = this.font._cmapProcessor.codePointsForGlyph(glyph.id));
                        }
                        return res;
                    }, _proto.widthOfString = function(string, size, features) {
                        return this.layout(string, features, !0).advanceWidth * (size / 1000);
                    }, _proto.embed = function() {
                        var isCFF = null != this.subset.cff, fontFile = this.document.ref();
                        isCFF && (fontFile.data.Subtype = 'CIDFontType0C'), fontFile.end(this.subset.encode());
                        var familyClass = ((null != this.font['OS/2'] ? this.font['OS/2'].sFamilyClass : void 0) || 0) >> 8, flags = 0;
                        this.font.post.isFixedPitch && (flags |= 1), 1 <= familyClass && familyClass <= 7 && (flags |= 2), flags |= 4, 10 === familyClass && (flags |= 8), this.font.head.macStyle.italic && (flags |= 64);
                        var name = [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5
                        ].map(function(i) {
                            return String.fromCharCode(26 * Math.random() + 65);
                        }).join('') + '+' + this.font.postscriptName, bbox = this.font.bbox, descriptor = this.document.ref({
                            Type: 'FontDescriptor',
                            FontName: name,
                            Flags: flags,
                            FontBBox: [
                                bbox.minX * this.scale,
                                bbox.minY * this.scale,
                                bbox.maxX * this.scale,
                                bbox.maxY * this.scale
                            ],
                            ItalicAngle: this.font.italicAngle,
                            Ascent: this.ascender,
                            Descent: this.descender,
                            CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,
                            XHeight: (this.font.xHeight || 0) * this.scale,
                            StemV: 0
                        });
                        isCFF ? descriptor.data.FontFile3 = fontFile : descriptor.data.FontFile2 = fontFile, descriptor.end();
                        var descendantFont = this.document.ref({
                            Type: 'Font',
                            Subtype: isCFF ? 'CIDFontType0' : 'CIDFontType2',
                            BaseFont: name,
                            CIDSystemInfo: {
                                Registry: new String('Adobe'),
                                Ordering: new String('Identity'),
                                Supplement: 0
                            },
                            FontDescriptor: descriptor,
                            W: [
                                0,
                                this.widths
                            ]
                        });
                        return descendantFont.end(), this.dictionary.data = {
                            Type: 'Font',
                            Subtype: 'Type0',
                            BaseFont: name,
                            Encoding: 'Identity-H',
                            DescendantFonts: [
                                descendantFont
                            ],
                            ToUnicode: this.toUnicodeCmap()
                        }, this.dictionary.end();
                    }, _proto.toUnicodeCmap = function() {
                        for(var cmap = this.document.ref(), entries = [], _i = 0, _Array$from = Array.from(this.unicode); _i < _Array$from.length; _i++)for(var codePoints = _Array$from[_i], encoded = [], _i2 = 0, _Array$from2 = Array.from(codePoints); _i2 < _Array$from2.length; _i2++){
                            var value = _Array$from2[_i2];
                            value > 0xffff && (value -= 0x10000, encoded.push(toHex(value >>> 10 & 0x3ff | 0xd800)), value = 0xdc00 | 0x3ff & value), encoded.push(toHex(value)), entries.push("<" + encoded.join(' ') + ">");
                        }
                        return cmap.end("  /CIDInit /ProcSet findresource begin\n  12 dict begin\n  begincmap\n  /CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n  >> def\n  /CMapName /Adobe-Identity-UCS def\n  /CMapType 2 def\n  1 begincodespacerange\n  <0000><ffff>\n  endcodespacerange\n  1 beginbfrange\n  <0000> <" + toHex(entries.length - 1) + "> [" + entries.join(' ') + "]\n  endbfrange\n  endcmap\n  CMapName currentdict /CMap defineresource pop\n  end\n  end  "), cmap;
                    }, EmbeddedFont;
                }(PDFFont);
            }(PDFFont), number = PDFObject$1.number, MARKERS = [
                0xffc0,
                0xffc1,
                0xffc2,
                0xffc3,
                0xffc5,
                0xffc6,
                0xffc7,
                0xffc8,
                0xffc9,
                0xffca,
                0xffcb,
                0xffcc,
                0xffcd,
                0xffce,
                0xffcf
            ], JPEG = function() {
                function JPEG(data, label) {
                    if (this.data = data, this.label = label, 0xffd8 !== this.data.readUInt16BE(0)) throw 'SOI not found in JPEG';
                    for(var marker, pos = 2; pos < this.data.length && (marker = this.data.readUInt16BE(pos), pos += 2, !Array.from(MARKERS).includes(marker));)pos += this.data.readUInt16BE(pos);
                    if (!Array.from(MARKERS).includes(marker)) throw 'Invalid JPEG.';
                    pos += 2, this.bits = this.data[pos++], this.height = this.data.readUInt16BE(pos), pos += 2, this.width = this.data.readUInt16BE(pos), pos += 2;
                    var channels = this.data[pos++];
                    this.colorSpace = function() {
                        switch(channels){
                            case 1:
                                return 'DeviceGray';
                            case 3:
                                return 'DeviceRGB';
                            case 4:
                                return 'DeviceCMYK';
                        }
                    }(), this.obj = null;
                }
                return JPEG.prototype.embed = function(document) {
                    this.obj || (this.obj = document.ref({
                        Type: 'XObject',
                        Subtype: 'Image',
                        BitsPerComponent: this.bits,
                        Width: this.width,
                        Height: this.height,
                        ColorSpace: this.colorSpace,
                        Filter: 'DCTDecode'
                    }), 'DeviceCMYK' === this.colorSpace && (this.obj.data.Decode = [
                        1.0,
                        0.0,
                        1.0,
                        0.0,
                        1.0,
                        0.0,
                        1.0,
                        0.0
                    ]), this.obj.end(this.data), this.data = null);
                }, JPEG;
            }(), PNGImage = function() {
                function PNGImage(data, label) {
                    this.label = label, this.image = new _react_pdf_png_js__WEBPACK_IMPORTED_MODULE_6__.Z(data), this.width = this.image.width, this.height = this.image.height, this.imgData = this.image.imgData, this.obj = null;
                }
                var _proto = PNGImage.prototype;
                return _proto.embed = function(document) {
                    var dataDecoded = !1;
                    if (this.document = document, !this.obj) {
                        var hasAlphaChannel = this.image.hasAlphaChannel, isInterlaced = 1 === this.image.interlaceMethod;
                        if (this.obj = this.document.ref({
                            Type: 'XObject',
                            Subtype: 'Image',
                            BitsPerComponent: hasAlphaChannel ? 8 : this.image.bits,
                            Width: this.width,
                            Height: this.height,
                            Filter: 'FlateDecode'
                        }), !hasAlphaChannel) {
                            var params = this.document.ref({
                                Predictor: isInterlaced ? 1 : 15,
                                Colors: this.image.colors,
                                BitsPerComponent: this.image.bits,
                                Columns: this.width
                            });
                            this.obj.data.DecodeParms = params, params.end();
                        }
                        if (0 === this.image.palette.length) this.obj.data.ColorSpace = this.image.colorSpace;
                        else {
                            var palette = this.document.ref();
                            palette.end(Buffer$4.from(this.image.palette)), this.obj.data.ColorSpace = [
                                'Indexed',
                                'DeviceRGB',
                                this.image.palette.length / 3 - 1,
                                palette
                            ];
                        }
                        if (null != this.image.transparency.grayscale) {
                            var val = this.image.transparency.grayscale;
                            this.obj.data.Mask = [
                                val,
                                val
                            ];
                        } else if (this.image.transparency.rgb) {
                            for(var _step, rgb = this.image.transparency.rgb, mask = [], _iterator = (0, _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_9__.Z)(rgb); !(_step = _iterator()).done;){
                                var x = _step.value;
                                mask.push(x, x);
                            }
                            this.obj.data.Mask = mask;
                        } else if (this.image.transparency.indexed) return dataDecoded = !0, this.loadIndexedAlphaChannel();
                        else if (hasAlphaChannel) return dataDecoded = !0, this.splitAlphaChannel();
                        if (isInterlaced && !dataDecoded) return this.decodeData();
                        this.finalize();
                    }
                }, _proto.finalize = function() {
                    if (this.alphaChannel) {
                        var sMask = this.document.ref({
                            Type: 'XObject',
                            Subtype: 'Image',
                            Height: this.height,
                            Width: this.width,
                            BitsPerComponent: 8,
                            Filter: 'FlateDecode',
                            ColorSpace: 'DeviceGray',
                            Decode: [
                                0,
                                1
                            ]
                        });
                        sMask.end(this.alphaChannel), this.obj.data.SMask = sMask;
                    }
                    this.obj.end(this.imgData), this.image = null, this.imgData = null;
                }, _proto.splitAlphaChannel = function() {
                    var _this = this;
                    return this.image.decodePixels(function(pixels) {
                        for(var a, p, colorCount = _this.image.colors, pixelCount = _this.width * _this.height, imgData = Buffer$4.alloc(pixelCount * colorCount), alphaChannel = Buffer$4.alloc(pixelCount), i = p = a = 0, len = pixels.length, skipByteCount = 16 === _this.image.bits ? 1 : 0; i < len;){
                            for(var colorIndex = 0; colorIndex < colorCount; colorIndex++)imgData[p++] = pixels[i++], i += skipByteCount;
                            alphaChannel[a++] = pixels[i++], i += skipByteCount;
                        }
                        return _this.imgData = lib.deflateSync(imgData), _this.alphaChannel = lib.deflateSync(alphaChannel), _this.finalize();
                    });
                }, _proto.loadIndexedAlphaChannel = function() {
                    var _this2 = this, transparency = this.image.transparency.indexed;
                    return this.image.decodePixels(function(pixels) {
                        for(var alphaChannel = Buffer$4.alloc(_this2.width * _this2.height), i = 0, j = 0, end = pixels.length; j < end; j++)alphaChannel[i++] = transparency[pixels[j]];
                        return _this2.alphaChannel = lib.deflateSync(alphaChannel), _this2.finalize();
                    });
                }, _proto.decodeData = function() {
                    var _this3 = this;
                    this.image.decodePixels(function(pixels) {
                        _this3.imgData = lib.deflateSync(pixels), _this3.finalize();
                    });
                }, PNGImage;
            }(), PDFImage = function() {
                function PDFImage() {}
                return PDFImage.open = function(src, label) {
                    var data;
                    if (Buffer$4.isBuffer(src)) data = src;
                    else if (src instanceof ArrayBuffer) data = Buffer$4.from(new Uint8Array(src));
                    else {
                        var match = /^data:.+;base64,(.*)$/.exec(src);
                        match && (data = Buffer$4.from(match[1], 'base64'));
                    }
                    if (0xff === data[0] && 0xd8 === data[1]) return new JPEG(data, label);
                    if (0x89 === data[0] && 'PNG' === data.toString('ascii', 1, 4)) return new PNGImage(data, label);
                    throw Error('Unknown image format.');
                }, PDFImage;
            }(), DEFAULT_OPTIONS = {
                top: 0,
                left: 0,
                zoom: 0,
                fit: !1,
                pageNumber: null,
                expanded: !1
            }, PDFOutline = function() {
                function PDFOutline(document, parent, title, dest, options) {
                    if (void 0 === options && (options = DEFAULT_OPTIONS), this.document = document, this.options = options, this.outlineData = {}, null !== dest) {
                        var destWidth = dest.data.MediaBox[2], top = dest.data.MediaBox[3] - (options.top || 0), left = destWidth - (options.left || 0), zoom = options.zoom || 0;
                        this.outlineData.Dest = options.fit ? [
                            dest,
                            'Fit'
                        ] : [
                            dest,
                            'XYZ',
                            left,
                            top,
                            zoom
                        ];
                    }
                    null !== parent && (this.outlineData.Parent = parent), null !== title && (this.outlineData.Title = new String(title)), this.dictionary = this.document.ref(this.outlineData), this.children = [];
                }
                var _proto = PDFOutline.prototype;
                return _proto.addItem = function(title, options) {
                    void 0 === options && (options = DEFAULT_OPTIONS);
                    var pages = this.document._root.data.Pages.data.Kids, dest = null !== options.pageNumber ? pages[options.pageNumber] : this.document.page.dictionary, result = new PDFOutline(this.document, this.dictionary, title, dest, options);
                    return this.children.push(result), result;
                }, _proto.endOutline = function() {
                    if (this.children.length > 0) {
                        this.options.expanded && (this.outlineData.Count = this.children.length);
                        var first = this.children[0], last = this.children[this.children.length - 1];
                        this.outlineData.First = first.dictionary, this.outlineData.Last = last.dictionary;
                        for(var i = 0, len = this.children.length; i < len; i++){
                            var child = this.children[i];
                            i > 0 && (child.outlineData.Prev = this.children[i - 1].dictionary), i < this.children.length - 1 && (child.outlineData.Next = this.children[i + 1].dictionary), child.endOutline();
                        }
                    }
                    return this.dictionary.end();
                }, PDFOutline;
            }(), FIELD_FLAGS = {
                readOnly: 1,
                required: 2,
                noExport: 4,
                multiline: 0x1000,
                password: 0x2000,
                toggleToOffButton: 0x4000,
                radioButton: 0x8000,
                pushButton: 0x10000,
                combo: 0x20000,
                edit: 0x40000,
                sort: 0x80000,
                multiSelect: 0x200000,
                noSpell: 0x400000
            }, FIELD_JUSTIFY = {
                left: 0,
                center: 1,
                right: 2
            }, VALUE_MAP = {
                value: 'V',
                defaultValue: 'DV'
            }, FORMAT_SPECIAL = {
                zip: '0',
                zipPlus4: '1',
                zip4: '1',
                phone: '2',
                ssn: '3'
            }, FORMAT_DEFAULT = {
                number: {
                    nDec: 0,
                    sepComma: !1,
                    negStyle: 'MinusBlack',
                    currency: '',
                    currencyPrepend: !0
                },
                percent: {
                    nDec: 0,
                    sepComma: !1
                }
            };
            function isEqual(a, b) {
                return a.Subtype === b.Subtype && a.Params.CheckSum.toString() === b.Params.CheckSum.toString() && a.Params.Size === b.Params.Size && a.Params.CreationDate === b.Params.CreationDate && a.Params.ModDate === b.Params.ModDate;
            }
            var capitalize = function(v) {
                return v[0].toUpperCase() + v.slice(1);
            }, PDFDocument = function(_stream$Readable) {
                function PDFDocument(options) {
                    switch(void 0 === options && (options = {}), (_this = _stream$Readable.call(this) || this).options = options, options.pdfVersion){
                        case '1.4':
                            _this.version = 1.4;
                            break;
                        case '1.5':
                            _this.version = 1.5;
                            break;
                        case '1.6':
                            _this.version = 1.6;
                            break;
                        case '1.7':
                        case '1.7ext3':
                            _this.version = 1.7;
                            break;
                        default:
                            _this.version = 1.3;
                    }
                    _this.compress = null == _this.options.compress || _this.options.compress, _this._pageBuffer = [], _this._pageBufferStart = 0, _this._offsets = [], _this._waiting = 0, _this._ended = !1, _this._offset = 0;
                    var _this, Pages = _this.ref({
                        Type: 'Pages',
                        Count: 0,
                        Kids: []
                    }), Names = _this.ref({
                        Dests: new PDFNameTree()
                    });
                    if (_this._root = _this.ref({
                        Type: 'Catalog',
                        Pages: Pages,
                        Names: Names
                    }), _this.options.lang && (_this._root.data.Lang = new String(_this.options.lang)), _this.options.pageLayout && (_this._root.data.PageLayout = capitalize(_this.options.pageLayout)), _this.options.pageMode && (_this._root.data.PageMode = capitalize(_this.options.pageMode)), _this.page = null, _this.initColor(), _this.initVector(), _this.initFonts(), _this.initText(), _this.initImages(), _this.initOutline(), _this.info = {
                        Producer: 'PDFKit',
                        Creator: 'PDFKit',
                        CreationDate: new Date()
                    }, _this.options.info) for(var key in _this.options.info){
                        var val = _this.options.info[key];
                        _this.info[key] = val;
                    }
                    return _this.options.displayTitle && (_this._root.data.ViewerPreferences = _this.ref({
                        DisplayDocTitle: !0
                    })), _this._id = PDFSecurity.generateFileID(_this.info), _this._write("%PDF-" + _this.version), _this._write('%\xFF\xFF\xFF\xFF'), !1 !== _this.options.autoFirstPage && _this.addPage(), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__.Z)(PDFDocument, _stream$Readable);
                var _proto = PDFDocument.prototype;
                return _proto.addPage = function(options) {
                    null == options && (options = this.options), this.options.bufferPages || this.flushPages(), this.page = new PDFPage(this, options), this._pageBuffer.push(this.page);
                    var pages = this._root.data.Pages.data;
                    return pages.Kids.push(this.page.dictionary), pages.Count++, this._ctm = [
                        1,
                        0,
                        0,
                        1,
                        0,
                        0
                    ], this.transform(1, 0, 0, -1, 0, this.page.height), this;
                }, _proto.flushPages = function() {
                    var pages = this._pageBuffer;
                    this._pageBuffer = [], this._pageBufferStart += pages.length;
                    for(var _i = 0, _Array$from = Array.from(pages); _i < _Array$from.length; _i++)_Array$from[_i].end();
                }, _proto.addNamedDestination = function(name) {
                    for(var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
                    0 === args.length && (args = [
                        'XYZ',
                        null,
                        null,
                        null
                    ]), 'XYZ' === args[0] && null !== args[2] && (args[2] = this.page.height - args[2]), args.unshift(this.page.dictionary), this._root.data.Names.data.Dests.add(name, args);
                }, _proto.addNamedEmbeddedFile = function(name, ref) {
                    this._root.data.Names.data.EmbeddedFiles || (this._root.data.Names.data.EmbeddedFiles = new PDFNameTree({
                        limits: !1
                    })), this._root.data.Names.data.EmbeddedFiles.add(name, ref);
                }, _proto.addNamedJavaScript = function(name, js) {
                    this._root.data.Names.data.JavaScript || (this._root.data.Names.data.JavaScript = new PDFNameTree());
                    var data = {
                        JS: new String(js),
                        S: 'JavaScript'
                    };
                    this._root.data.Names.data.JavaScript.add(name, data);
                }, _proto.ref = function(data) {
                    var ref = new PDFReference(this, this._offsets.length + 1, data);
                    return this._offsets.push(null), this._waiting++, ref;
                }, _proto._read = function() {}, _proto._write = function(data) {
                    return Buffer$4.isBuffer(data) || (data = Buffer$4.from(data + '\n', 'binary')), this.push(data), this._offset += data.length;
                }, _proto.addContent = function(data) {
                    return this.page.write(data), this;
                }, _proto._refEnd = function(ref) {
                    if (this._offsets[ref.id - 1] = ref.offset, 0 == --this._waiting && this._ended) return this._finalize(), this._ended = !1;
                }, _proto.end = function() {
                    for(var key in this.flushPages(), this._info = this.ref(), this.info){
                        var val = this.info[key];
                        'string' == typeof val && (val = new String(val));
                        var entry = this.ref(val);
                        entry.end(), this._info.data[key] = entry;
                    }
                    for(var name in this._info.end(), this._fontFamilies)this._fontFamilies[name].finalize();
                    if (this.endOutline(), this._root.end(), this._root.data.Pages.end(), this._root.data.Names.end(), this.endAcroForm(), this._root.data.ViewerPreferences && this._root.data.ViewerPreferences.end(), 0 === this._waiting) return this._finalize();
                    this._ended = !0;
                }, _proto._finalize = function() {
                    var xRefOffset = this._offset;
                    this._write('xref'), this._write("0 " + (this._offsets.length + 1)), this._write('0000000000 65535 f ');
                    for(var _i2 = 0, _Array$from2 = Array.from(this._offsets); _i2 < _Array$from2.length; _i2++){
                        var offset = _Array$from2[_i2];
                        offset = ("0000000000" + offset).slice(-10), this._write(offset + ' 00000 n ');
                    }
                    var trailer = {
                        Size: this._offsets.length + 1,
                        Root: this._root,
                        Info: this._info,
                        ID: [
                            this._id,
                            this._id
                        ]
                    };
                    return this._write('trailer'), this._write(PDFObject$1.convert(trailer)), this._write('startxref'), this._write("" + xRefOffset), this._write('%%EOF'), this.push(null);
                }, _proto.toString = function() {
                    return '[object PDFDocument]';
                }, PDFDocument;
            }(stream.Readable), mixin = function(methods) {
                Object.assign(PDFDocument.prototype, methods);
            };
            mixin({
                initColor: function() {
                    return this._opacityRegistry = {}, this._opacityCount = 0, this._gradCount = 0;
                },
                _normalizeColor: function(color) {
                    if (color instanceof PDFGradient) return color;
                    if ('string' == typeof color) {
                        if ('#' === color.charAt(0)) {
                            4 === color.length && (color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, '#$1$1$2$2$3$3'));
                            var hex = parseInt(color.slice(1), 16);
                            color = [
                                hex >> 16,
                                hex >> 8 & 0xff,
                                0xff & hex
                            ];
                        } else namedColors[color] && (color = namedColors[color]);
                    }
                    return Array.isArray(color) ? (3 === color.length ? color = function() {
                        for(var result = [], _i = 0, _Array$from = Array.from(color); _i < _Array$from.length; _i++)result.push(_Array$from[_i] / 255);
                        return result;
                    }() : 4 === color.length && (color = function() {
                        for(var result1 = [], _i2 = 0, _Array$from2 = Array.from(color); _i2 < _Array$from2.length; _i2++)result1.push(_Array$from2[_i2] / 100);
                        return result1;
                    }()), color) : null;
                },
                _setColor: function(color, stroke) {
                    if (!(color = this._normalizeColor(color))) return !1;
                    var op = stroke ? 'SCN' : 'scn';
                    if (color instanceof PDFGradient) this._setColorSpace('Pattern', stroke), color.apply(op);
                    else {
                        var space = 4 === color.length ? 'DeviceCMYK' : 'DeviceRGB';
                        this._setColorSpace(space, stroke), color = color.join(' '), this.addContent(color + " " + op);
                    }
                    return !0;
                },
                _setColorSpace: function(space, stroke) {
                    return this.addContent("/" + space + " " + (stroke ? 'CS' : 'cs'));
                },
                fillColor: function(color, opacity) {
                    return this._setColor(color, !1) && this.fillOpacity(opacity), this._fillColor = [
                        color,
                        opacity
                    ], this;
                },
                strokeColor: function(color, opacity) {
                    return this._setColor(color, !0) && this.strokeOpacity(opacity), this;
                },
                opacity: function(_opacity) {
                    return this._doOpacity(_opacity, _opacity), this;
                },
                fillOpacity: function(opacity) {
                    return this._doOpacity(opacity, null), this;
                },
                strokeOpacity: function(opacity) {
                    return this._doOpacity(null, opacity), this;
                },
                _doOpacity: function(fillOpacity, strokeOpacity) {
                    if (null != fillOpacity || null != strokeOpacity) {
                        null != fillOpacity && (fillOpacity = Math.max(0, Math.min(1, fillOpacity))), null != strokeOpacity && (strokeOpacity = Math.max(0, Math.min(1, strokeOpacity)));
                        var dictionary, name, key = fillOpacity + "_" + strokeOpacity;
                        if (this._opacityRegistry[key]) {
                            var _Array$from3 = Array.from(this._opacityRegistry[key]);
                            dictionary = _Array$from3[0], name = _Array$from3[1];
                        } else dictionary = {
                            Type: 'ExtGState'
                        }, null != fillOpacity && (dictionary.ca = fillOpacity), null != strokeOpacity && (dictionary.CA = strokeOpacity), (dictionary = this.ref(dictionary)).end(), name = "Gs" + ++this._opacityCount, this._opacityRegistry[key] = [
                            dictionary,
                            name
                        ];
                        return this.page.ext_gstates[name] = dictionary, this.addContent("/" + name + " gs");
                    }
                },
                linearGradient: function(x1, y1, x2, y2) {
                    return new PDFLinearGradient(this, x1, y1, x2, y2);
                },
                radialGradient: function(x1, y1, r1, x2, y2, r2) {
                    return new PDFRadialGradient(this, x1, y1, r1, x2, y2, r2);
                }
            }), mixin({
                initVector: function() {
                    return this._ctm = [
                        1,
                        0,
                        0,
                        1,
                        0,
                        0
                    ], this._ctmStack = [];
                },
                save: function() {
                    return this._ctmStack.push(this._ctm.slice()), this.addContent('q');
                },
                restore: function() {
                    return this._ctm = this._ctmStack.pop() || [
                        1,
                        0,
                        0,
                        1,
                        0,
                        0
                    ], this.addContent('Q');
                },
                closePath: function() {
                    return this.addContent('h');
                },
                lineWidth: function(w) {
                    return this.addContent(number$1(w) + " w");
                },
                _CAP_STYLES: {
                    BUTT: 0,
                    ROUND: 1,
                    SQUARE: 2
                },
                lineCap: function(c) {
                    return 'string' == typeof c && (c = this._CAP_STYLES[c.toUpperCase()]), this.addContent(c + " J");
                },
                _JOIN_STYLES: {
                    MITER: 0,
                    ROUND: 1,
                    BEVEL: 2
                },
                lineJoin: function(j) {
                    return 'string' == typeof j && (j = this._JOIN_STYLES[j.toUpperCase()]), this.addContent(j + " j");
                },
                miterLimit: function(m) {
                    return this.addContent(number$1(m) + " M");
                },
                dash: function(length, options) {
                    if (null == options && (options = {}), null == length) return this;
                    if (Array.isArray(length)) return length = Array.from(length).map(function(v) {
                        return PDFObject$1.number(v);
                    }).join(' '), phase = options.phase || 0, this.addContent("[" + length + "] " + PDFObject$1.number(phase) + " d");
                    var phase, space = null != options.space ? options.space : length;
                    return phase = options.phase || 0, this.addContent("[" + PDFObject$1.number(length) + " " + PDFObject$1.number(space) + "] " + PDFObject$1.number(phase) + " d");
                },
                undash: function() {
                    return this.addContent('[] 0 d');
                },
                moveTo: function(x, y) {
                    return this.addContent(number$1(x) + " " + number$1(y) + " m");
                },
                lineTo: function(x, y) {
                    return this.addContent(number$1(x) + " " + number$1(y) + " l");
                },
                bezierCurveTo: function(cp1x, cp1y, cp2x, cp2y, x, y) {
                    return this.addContent(number$1(cp1x) + " " + number$1(cp1y) + " " + number$1(cp2x) + " " + number$1(cp2y) + " " + number$1(x) + " " + number$1(y) + " c");
                },
                quadraticCurveTo: function(cpx, cpy, x, y) {
                    return this.addContent(number$1(cpx) + " " + number$1(cpy) + " " + number$1(x) + " " + number$1(y) + " v");
                },
                rect: function(x, y, w, h) {
                    return this.addContent(number$1(x) + " " + number$1(y) + " " + number$1(w) + " " + number$1(h) + " re");
                },
                roundedRect: function(x, y, w, h, r) {
                    null == r && (r = 0);
                    var c = (r = Math.min(r, 0.5 * w, 0.5 * h)) * (1.0 - KAPPA);
                    return this.moveTo(x + r, y), this.lineTo(x + w - r, y), this.bezierCurveTo(x + w - c, y, x + w, y + c, x + w, y + r), this.lineTo(x + w, y + h - r), this.bezierCurveTo(x + w, y + h - c, x + w - c, y + h, x + w - r, y + h), this.lineTo(x + r, y + h), this.bezierCurveTo(x + c, y + h, x, y + h - c, x, y + h - r), this.lineTo(x, y + r), this.bezierCurveTo(x, y + c, x + c, y, x + r, y), this.closePath();
                },
                ellipse: function(x, y, r1, r2) {
                    null == r2 && (r2 = r1), x -= r1, y -= r2;
                    var ox = r1 * KAPPA, oy = r2 * KAPPA, xe = x + 2 * r1, ye = y + 2 * r2, xm = x + r1, ym = y + r2;
                    return this.moveTo(x, ym), this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y), this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym), this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye), this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym), this.closePath();
                },
                circle: function(x, y, radius) {
                    return this.ellipse(x, y, radius);
                },
                arc: function(x, y, radius, startAngle, endAngle, anticlockwise) {
                    null == anticlockwise && (anticlockwise = !1);
                    var TWO_PI = 2.0 * Math.PI, HALF_PI = 0.5 * Math.PI, deltaAng = endAngle - startAngle;
                    Math.abs(deltaAng) > TWO_PI ? deltaAng = TWO_PI : 0 !== deltaAng && anticlockwise !== deltaAng < 0 && (deltaAng = (anticlockwise ? -1 : 1) * TWO_PI + deltaAng);
                    var numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI), segAng = deltaAng / numSegs, handleLen = segAng / HALF_PI * KAPPA * radius, curAng = startAngle, deltaCx = -Math.sin(curAng) * handleLen, deltaCy = Math.cos(curAng) * handleLen, ax = x + Math.cos(curAng) * radius, ay = y + Math.sin(curAng) * radius;
                    this.moveTo(ax, ay);
                    for(var segIdx = 0, end = numSegs, asc = 0 <= end; asc ? segIdx < end : segIdx > end; asc ? segIdx++ : segIdx--){
                        var cp1x = ax + deltaCx, cp1y = ay + deltaCy;
                        curAng += segAng, ax = x + Math.cos(curAng) * radius, ay = y + Math.sin(curAng) * radius, deltaCx = -Math.sin(curAng) * handleLen, deltaCy = Math.cos(curAng) * handleLen;
                        var cp2x = ax - deltaCx, cp2y = ay - deltaCy;
                        this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);
                    }
                    return this;
                },
                polygon: function() {
                    for(var _len = arguments.length, points = Array(_len), _key = 0; _key < _len; _key++)points[_key] = arguments[_key];
                    this.moveTo.apply(this, Array.from(points.shift() || []));
                    for(var _i = 0, _Array$from = Array.from(points); _i < _Array$from.length; _i++){
                        var point = _Array$from[_i];
                        this.lineTo.apply(this, Array.from(point || []));
                    }
                    return this.closePath();
                },
                path: function(_path) {
                    return SVGPath.apply(this, _path), this;
                },
                _windingRule: function(rule) {
                    return /even-?odd/.test(rule) ? '*' : '';
                },
                fill: function(color, rule) {
                    return /(even-?odd)|(non-?zero)/.test(color) && (rule = color, color = null), color && this.fillColor(color), this.addContent("f" + this._windingRule(rule));
                },
                stroke: function(color) {
                    return color && this.strokeColor(color), this.addContent('S');
                },
                fillAndStroke: function(fillColor, strokeColor, rule) {
                    null == strokeColor && (strokeColor = fillColor);
                    var isFillRule = /(even-?odd)|(non-?zero)/;
                    return isFillRule.test(fillColor) && (rule = fillColor, fillColor = null), isFillRule.test(strokeColor) && (rule = strokeColor, strokeColor = fillColor), fillColor && (this.fillColor(fillColor), this.strokeColor(strokeColor)), this.addContent("B" + this._windingRule(rule));
                },
                clip: function(rule) {
                    return this.addContent("W" + this._windingRule(rule) + " n");
                },
                transform: function(m11, m12, m21, m22, dx, dy) {
                    var m = this._ctm, _Array$from2 = Array.from(m), m0 = _Array$from2[0], m1 = _Array$from2[1], m2 = _Array$from2[2], m3 = _Array$from2[3], m4 = _Array$from2[4], m5 = _Array$from2[5];
                    m[0] = m0 * m11 + m2 * m12, m[1] = m1 * m11 + m3 * m12, m[2] = m0 * m21 + m2 * m22, m[3] = m1 * m21 + m3 * m22, m[4] = m0 * dx + m2 * dy + m4, m[5] = m1 * dx + m3 * dy + m5;
                    var values = [
                        m11,
                        m12,
                        m21,
                        m22,
                        dx,
                        dy
                    ].map(function(v) {
                        return PDFObject$1.number(v);
                    }).join(' ');
                    return this.addContent(values + " cm");
                },
                translate: function(x, y) {
                    return this.transform(1, 0, 0, 1, x, y);
                },
                rotate: function(angle, options) {
                    void 0 === options && (options = {});
                    var rad = angle * Math.PI / 180, cos = Math.cos(rad), sin = Math.sin(rad), x = 0, y = 0;
                    if (null != options.origin) {
                        var _Array$from3 = Array.from(options.origin), x1 = (x = _Array$from3[0]) * cos - (y = _Array$from3[1]) * sin, y1 = x * sin + y * cos;
                        x -= x1, y -= y1;
                    }
                    return this.transform(cos, sin, -sin, cos, x, y);
                },
                scale: function(xFactor, yFactor, options) {
                    void 0 === options && (options = {}), null == yFactor && (yFactor = xFactor), 'object' == typeof yFactor && (options = yFactor, yFactor = xFactor);
                    var x = 0, y = 0;
                    if (null != options.origin) {
                        var _Array$from4 = Array.from(options.origin);
                        x = _Array$from4[0], y = _Array$from4[1], x -= xFactor * x, y -= yFactor * y;
                    }
                    return this.transform(xFactor, 0, 0, yFactor, x, y);
                },
                skew: function(xAngle, yAngle, options) {
                    void 0 === xAngle && (xAngle = 0), void 0 === yAngle && (yAngle = 0);
                    var tanx = Math.tan(xAngle * Math.PI / 180), tany = Math.tan(yAngle * Math.PI / 180), x = 0, y = 0;
                    if (null != options.origin) {
                        var _Array$from5 = Array.from(options.origin), x1 = (x = _Array$from5[0]) + tanx * (y = _Array$from5[1]), y1 = y + tany * x;
                        x -= x1, y -= y1;
                    }
                    return this.transform(1, tany, tanx, 1, x, y);
                }
            }), mixin({
                initFonts: function() {
                    return this._fontFamilies = {}, this._fontCount = 0, this._fontSize = 12, this._font = null, this._registeredFonts = {}, this.font('Helvetica');
                },
                font: function(src, family, size) {
                    if ('number' == typeof family && (size = family, family = null), 'string' == typeof src && this._registeredFonts[src]) {
                        cacheKey = src;
                        var cacheKey, font, _this$_registeredFont = this._registeredFonts[src];
                        src = _this$_registeredFont.src, family = _this$_registeredFont.family;
                    } else 'string' != typeof (cacheKey = family || src) && (cacheKey = null);
                    if (null != size && this.fontSize(size), font = this._fontFamilies[cacheKey]) return this._font = font, this;
                    var id = "F" + ++this._fontCount;
                    return (this._font = PDFFont.open(this, src, family, id), font = this._fontFamilies[this._font.name]) ? (this._font = font, this) : (cacheKey && (this._fontFamilies[cacheKey] = this._font), this._font.name && (this._fontFamilies[this._font.name] = this._font), this);
                },
                fontSize: function(_fontSize) {
                    return this._fontSize = _fontSize, this;
                },
                currentLineHeight: function(includeGap) {
                    return null == includeGap && (includeGap = !1), this._font.lineHeight(this._fontSize, includeGap);
                },
                registerFont: function(name, src, family) {
                    return this._registeredFonts[name] = {
                        src: src,
                        family: family
                    }, this;
                }
            }), mixin({
                initText: function() {
                    return this._line = this._line.bind(this), this.x = 0, this.y = 0, this._lineGap = 0;
                },
                _text: function(text, x, y, options, lineCallback) {
                    var _this = this;
                    options = this._initOptions(x, y, options), text = null == text ? '' : "" + text, options.wordSpacing && (text = text.replace(/\s{2,}/g, ' '));
                    for(var _step, _iterator = (0, _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_9__.Z)(text.split('\n')); !(_step = _iterator()).done;){
                        var line = _step.value;
                        (function() {
                            options.structParent && options.structParent.add(_this.struct(options.structType || 'P', [
                                _this.markStructureContent(options.structType || 'P')
                            ]));
                        })(), lineCallback(line, options);
                    }
                    return this;
                },
                text: function(_text2, x, y, options) {
                    return this._text(_text2, x, y, options, this._line);
                },
                widthOfString: function(string, options) {
                    return void 0 === options && (options = {}), this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1);
                },
                _initOptions: function(x, y, options) {
                    void 0 === x && (x = {}), void 0 === options && (options = {}), 'object' == typeof x && (options = x, x = null);
                    var result = Object.assign({}, options);
                    if (this._textOptions) for(var key in this._textOptions){
                        var val = this._textOptions[key];
                        'continued' !== key && void 0 === result[key] && (result[key] = val);
                    }
                    return null != x && (this.x = x), null != y && (this.y = y), !1 !== result.lineBreak && (null == result.width && (result.width = this.page.width - this.x - this.page.margins.right), result.width = Math.max(result.width, 0)), result.columns || (result.columns = 0), null == result.columnGap && (result.columnGap = 18), result;
                },
                _line: function(text, options) {
                    return void 0 === options && (options = {}), this._fragment(text, this.x, this.y, options), this.x += this.widthOfString(text);
                },
                _fragment: function(text, x, y, options) {
                    if (0 !== (text = ("" + text).replace(/\n/g, '')).length) {
                        var _this$_font$encode = this._font.encode(text, options.features), encoded = _this$_font$encode[0], positions = _this$_font$encode[1], dy = this._font.ascender / 1000 * this._fontSize;
                        this._glyphs(encoded, positions, x, y + dy, options);
                    }
                },
                _glyphs: function(encoded, positions, x, y, options) {
                    var i, _this2 = this, commands = [], scale = this._fontSize / 1000, last = 0, hadOffset = !1;
                    this.save(), this.transform(1, 0, 0, -1, 0, this.page.height), y = this.page.height - y, null == this.page.fonts[this._font.id] && (this.page.fonts[this._font.id] = this._font.ref()), this.addContent('BT'), this.addContent("1 0 0 1 " + number(x) + " " + number(y) + " Tm"), this.addContent("/" + this._font.id + " " + number(this._fontSize) + " Tf");
                    var mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;
                    mode && this.addContent(mode + " Tr");
                    var addSegment = function(cur) {
                        if (last < cur) {
                            var hex = encoded.slice(last, cur).join(''), advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;
                            commands.push("<" + hex + "> " + number(-advance));
                        }
                        return last = cur;
                    }, flush = function(i) {
                        if (addSegment(i), commands.length > 0) return _this2.addContent("[" + commands.join(' ') + "] TJ"), commands.length = 0;
                    };
                    for(i = 0; i < positions.length; i++){
                        var pos = positions[i];
                        pos.xOffset || pos.yOffset ? (flush(i), this.addContent("1 0 0 1 " + number(x + pos.xOffset * scale) + " " + number(y + pos.yOffset * scale) + " Tm"), flush(i + 1), hadOffset = !0) : (hadOffset && (this.addContent("1 0 0 1 " + number(x) + " " + number(y) + " Tm"), hadOffset = !1), pos.xAdvance - pos.advanceWidth != 0 && addSegment(i + 1)), x += pos.xAdvance * scale;
                    }
                    return flush(i), this.addContent('ET'), this.restore();
                }
            }), mixin({
                initImages: function() {
                    this._imageRegistry = {}, this._imageCount = 0;
                },
                embedImage: function(src) {
                    var image;
                    return 'string' == typeof src && (image = this._imageRegistry[src]), image || (image = src.width && src.height ? src : this.openImage(src)), image.obj || image.embed(this), image;
                },
                image: function(src, x, y, options) {
                    void 0 === options && (options = {}), 'object' == typeof x && (options = x, x = null);
                    var bh, bp, bw, ip, left, left1, image = src instanceof PDFImage ? src : this.embedImage(src);
                    x = null != (left = null != x ? x : options.x) ? left : this.x, y = null != (left1 = null != y ? y : options.y) ? left1 : this.y, null == this.page.xobjects[image.label] && (this.page.xobjects[image.label] = image.obj);
                    var w = options.width || image.width, h = options.height || image.height;
                    if (options.width && !options.height) {
                        var wp = w / image.width;
                        w = image.width * wp, h = image.height * wp;
                    } else if (options.height && !options.width) {
                        var hp = h / image.height;
                        w = image.width * hp, h = image.height * hp;
                    } else if (options.scale) w = image.width * options.scale, h = image.height * options.scale;
                    else if (options.fit) {
                        var _Array$from = Array.from(options.fit);
                        bp = (bw = _Array$from[0]) / (bh = _Array$from[1]), (ip = image.width / image.height) > bp ? (w = bw, h = bw / ip) : (h = bh, w = bh * ip);
                    }
                    return this.y === y && (this.y += h), this.save(), this.transform(w, 0, 0, -h, x, y + h), this.addContent("/" + image.label + " Do"), this.restore(), this;
                },
                openImage: function(src) {
                    var image;
                    return 'string' == typeof src && (image = this._imageRegistry[src]), image || (image = PDFImage.open(src, "I" + ++this._imageCount), 'string' != typeof src || (this._imageRegistry[src] = image)), image;
                }
            }), mixin({
                annotate: function(x, y, w, h, options) {
                    for(var key in options.Type = 'Annot', options.Rect = this._convertRect(x, y, w, h), options.Border = [
                        0,
                        0,
                        0
                    ], 'Link' === options.Subtype && void 0 === options.F && (options.F = 4), 'Link' !== options.Subtype && null == options.C && (options.C = this._normalizeColor(options.color || [
                        0,
                        0,
                        0
                    ])), delete options.color, 'string' == typeof options.Dest && (options.Dest = new String(options.Dest)), options){
                        var val = options[key];
                        options[key[0].toUpperCase() + key.slice(1)] = val;
                    }
                    var ref = this.ref(options);
                    return this.page.annotations.push(ref), ref.end(), this;
                },
                note: function(x, y, w, h, contents, options) {
                    return void 0 === options && (options = {}), options.Subtype = 'Text', options.Contents = new String(contents), options.Name = 'Comment', null == options.color && (options.color = [
                        243,
                        223,
                        92
                    ]), options.Border = [
                        0,
                        0,
                        options.borderWidth || 0
                    ], delete options.borderWidth, this.annotate(x, y, w, h, options);
                },
                goTo: function(x, y, w, h, name, options) {
                    return void 0 === options && (options = {}), options.Subtype = 'Link', options.A = this.ref({
                        S: 'GoTo',
                        D: new String(name)
                    }), options.A.end(), this.annotate(x, y, w, h, options);
                },
                link: function(x, y, w, h, url, options) {
                    if (void 0 === options && (options = {}), options.Subtype = 'Link', 'number' == typeof url) {
                        var pages = this._root.data.Pages.data;
                        if (url >= 0 && url < pages.Kids.length) options.A = this.ref({
                            S: 'GoTo',
                            D: [
                                pages.Kids[url],
                                'XYZ',
                                null,
                                null,
                                null
                            ]
                        }), options.A.end();
                        else throw Error("The document has no page " + url);
                    } else options.A = this.ref({
                        S: 'URI',
                        URI: new String(url)
                    }), options.A.end();
                    return this.annotate(x, y, w, h, options);
                },
                _markup: function(x, y, w, h, options) {
                    void 0 === options && (options = {});
                    var _this$_convertRect = this._convertRect(x, y, w, h), x1 = _this$_convertRect[0], y1 = _this$_convertRect[1], x2 = _this$_convertRect[2], y2 = _this$_convertRect[3];
                    return options.QuadPoints = [
                        x1,
                        y2,
                        x2,
                        y2,
                        x1,
                        y1,
                        x2,
                        y1
                    ], options.Contents = new String(), this.annotate(x, y, w, h, options);
                },
                highlight: function(x, y, w, h, options) {
                    return void 0 === options && (options = {}), options.Subtype = 'Highlight', null == options.color && (options.color = [
                        241,
                        238,
                        148
                    ]), this._markup(x, y, w, h, options);
                },
                fileAnnotation: function(x, y, w, h, file, options) {
                    void 0 === file && (file = {}), void 0 === options && (options = {});
                    var filespec = this.file(file.src, Object.assign({
                        hidden: !0
                    }, file));
                    return options.Subtype = 'FileAttachment', options.FS = filespec, options.Contents ? options.Contents = new String(options.Contents) : filespec.data.Desc && (options.Contents = filespec.data.Desc), this.annotate(x, y, w, h, options);
                },
                _convertRect: function(x1, y1, w, h) {
                    var y2 = y1;
                    y1 += h;
                    var x2 = x1 + w, _this$_ctm = this._ctm, m0 = _this$_ctm[0], m1 = _this$_ctm[1], m2 = _this$_ctm[2], m3 = _this$_ctm[3], m4 = _this$_ctm[4], m5 = _this$_ctm[5];
                    return y1 = m1 * (x1 = m0 * x1 + m2 * y1 + m4) + m3 * y1 + m5, y2 = m1 * (x2 = m0 * x2 + m2 * y2 + m4) + m3 * y2 + m5, [
                        x1,
                        y1,
                        x2,
                        y2
                    ];
                }
            }), mixin({
                initOutline: function() {
                    this.outline = new PDFOutline(this, null, null, null);
                },
                endOutline: function() {
                    this.outline.endOutline(), this.outline.children.length > 0 && (this._root.data.Outlines = this.outline.dictionary, this._root.data.PageMode = this._root.data.PageMode || 'UseOutlines');
                }
            }), mixin({
                initForm: function() {
                    if (!this._font) throw Error('Must set a font before calling initForm method');
                    this._acroform = {
                        fonts: {},
                        defaultFont: this._font.name
                    }, this._acroform.fonts[this._font.id] = this._font.ref();
                    var data = {
                        Fields: [],
                        NeedAppearances: !0,
                        DA: new String("/" + this._font.id + " 0 Tf 0 g"),
                        DR: {
                            Font: {}
                        }
                    };
                    data.DR.Font[this._font.id] = this._font.ref();
                    var AcroForm = this.ref(data);
                    return this._root.data.AcroForm = AcroForm, this;
                },
                endAcroForm: function() {
                    var _this = this;
                    if (this._root.data.AcroForm) {
                        if (!Object.keys(this._acroform.fonts).length && !this._acroform.defaultFont) throw Error('No fonts specified for PDF form');
                        var fontDict = this._root.data.AcroForm.data.DR.Font;
                        Object.keys(this._acroform.fonts).forEach(function(name) {
                            fontDict[name] = _this._acroform.fonts[name];
                        }), this._root.data.AcroForm.data.Fields.forEach(function(fieldRef) {
                            _this._endChild(fieldRef);
                        }), this._root.data.AcroForm.end();
                    }
                    return this;
                },
                _endChild: function(ref) {
                    var _this2 = this;
                    return Array.isArray(ref.data.Kids) && (ref.data.Kids.forEach(function(childRef) {
                        _this2._endChild(childRef);
                    }), ref.end()), this;
                },
                formField: function(name, options) {
                    void 0 === options && (options = {});
                    var fieldDict = this._fieldDict(name, null, options), fieldRef = this.ref(fieldDict);
                    return this._addToParent(fieldRef), fieldRef;
                },
                formAnnotation: function(name, type, x, y, w, h, options) {
                    void 0 === options && (options = {});
                    var fieldDict = this._fieldDict(name, type, options);
                    fieldDict.Subtype = 'Widget', void 0 === fieldDict.F && (fieldDict.F = 4), this.annotate(x, y, w, h, fieldDict);
                    var annotRef = this.page.annotations[this.page.annotations.length - 1];
                    return this._addToParent(annotRef);
                },
                formText: function(name, x, y, w, h, options) {
                    return void 0 === options && (options = {}), this.formAnnotation(name, 'text', x, y, w, h, options);
                },
                formPushButton: function(name, x, y, w, h, options) {
                    return void 0 === options && (options = {}), this.formAnnotation(name, 'pushButton', x, y, w, h, options);
                },
                formCombo: function(name, x, y, w, h, options) {
                    return void 0 === options && (options = {}), this.formAnnotation(name, 'combo', x, y, w, h, options);
                },
                formList: function(name, x, y, w, h, options) {
                    return void 0 === options && (options = {}), this.formAnnotation(name, 'list', x, y, w, h, options);
                },
                formRadioButton: function(name, x, y, w, h, options) {
                    return void 0 === options && (options = {}), this.formAnnotation(name, 'radioButton', x, y, w, h, options);
                },
                formCheckbox: function(name, x, y, w, h, options) {
                    return void 0 === options && (options = {}), this.formAnnotation(name, 'checkbox', x, y, w, h, options);
                },
                _addToParent: function(fieldRef) {
                    var parent = fieldRef.data.Parent;
                    return parent ? (parent.data.Kids || (parent.data.Kids = []), parent.data.Kids.push(fieldRef)) : this._root.data.AcroForm.data.Fields.push(fieldRef), this;
                },
                _fieldDict: function(name, type, options) {
                    if (void 0 === options && (options = {}), !this._acroform) throw Error('Call document.initForms() method before adding form elements to document');
                    var opts = Object.assign({}, options);
                    return null !== type && (opts = this._resolveType(type, options)), opts = this._resolveFlags(opts), opts = this._resolveJustify(opts), opts = this._resolveFont(opts), opts = this._resolveStrings(opts), opts = this._resolveColors(opts), (opts = this._resolveFormat(opts)).T = new String(name), opts.parent && (opts.Parent = opts.parent, delete opts.parent), opts;
                },
                _resolveType: function(type, opts) {
                    if ('text' === type) opts.FT = 'Tx';
                    else if ('pushButton' === type) opts.FT = 'Btn', opts.pushButton = !0;
                    else if ('radioButton' === type) opts.FT = 'Btn', opts.radioButton = !0;
                    else if ('checkbox' === type) opts.FT = 'Btn';
                    else if ('combo' === type) opts.FT = 'Ch', opts.combo = !0;
                    else if ('list' === type) opts.FT = 'Ch';
                    else throw Error("Invalid form annotation type '" + type + "'");
                    return opts;
                },
                _resolveFormat: function(opts) {
                    var f = opts.format;
                    if (f && f.type) {
                        var fnKeystroke, fnFormat, params = '';
                        if (void 0 !== FORMAT_SPECIAL[f.type]) fnKeystroke = "AFSpecial_Keystroke", fnFormat = "AFSpecial_Format", params = FORMAT_SPECIAL[f.type];
                        else {
                            var format = f.type.charAt(0).toUpperCase() + f.type.slice(1);
                            if (fnKeystroke = "AF" + format + "_Keystroke", fnFormat = "AF" + format + "_Format", 'date' === f.type) fnKeystroke += 'Ex', params = String(f.param);
                            else if ('time' === f.type) params = String(f.param);
                            else if ('number' === f.type) {
                                var p = Object.assign({}, FORMAT_DEFAULT.number, f);
                                params = String([
                                    String(p.nDec),
                                    p.sepComma ? '0' : '1',
                                    '"' + p.negStyle + '"',
                                    'null',
                                    '"' + p.currency + '"',
                                    String(p.currencyPrepend)
                                ].join(','));
                            } else if ('percent' === f.type) {
                                var _p = Object.assign({}, FORMAT_DEFAULT.percent, f);
                                params = String([
                                    String(_p.nDec),
                                    _p.sepComma ? '0' : '1'
                                ].join(','));
                            }
                        }
                        opts.AA = opts.AA ? opts.AA : {}, opts.AA.K = {
                            S: 'JavaScript',
                            JS: new String(fnKeystroke + "(" + params + ");")
                        }, opts.AA.F = {
                            S: 'JavaScript',
                            JS: new String(fnFormat + "(" + params + ");")
                        };
                    }
                    return delete opts.format, opts;
                },
                _resolveColors: function(opts) {
                    var color = this._normalizeColor(opts.backgroundColor);
                    return color && (opts.MK || (opts.MK = {}), opts.MK.BG = color), (color = this._normalizeColor(opts.borderColor)) && (opts.MK || (opts.MK = {}), opts.MK.BC = color), delete opts.backgroundColor, delete opts.borderColor, opts;
                },
                _resolveFlags: function(options) {
                    var result = 0;
                    return Object.keys(options).forEach(function(key) {
                        FIELD_FLAGS[key] && (result |= FIELD_FLAGS[key], delete options[key]);
                    }), 0 !== result && (options.Ff = options.Ff ? options.Ff : 0, options.Ff |= result), options;
                },
                _resolveJustify: function(options) {
                    var result = 0;
                    return void 0 !== options.align && ('number' == typeof FIELD_JUSTIFY[options.align] && (result = FIELD_JUSTIFY[options.align]), delete options.align), 0 !== result && (options.Q = result), options;
                },
                _resolveFont: function(options) {
                    if (null === this._acroform.fonts[this._font.id] && (this._acroform.fonts[this._font.id] = this._font.ref()), this._acroform.defaultFont !== this._font.name) {
                        options.DR = {
                            Font: {}
                        };
                        var fontSize = options.fontSize || 0;
                        options.DR.Font[this._font.id] = this._font.ref(), options.DA = new String("/" + this._font.id + " " + fontSize + " Tf 0 g");
                    }
                    return options;
                },
                _resolveStrings: function(options) {
                    var select = [];
                    function appendChoices(a) {
                        if (Array.isArray(a)) for(var idx = 0; idx < a.length; idx++)'string' == typeof a[idx] ? select.push(new String(a[idx])) : select.push(a[idx]);
                    }
                    return appendChoices(options.Opt), options.select && (appendChoices(options.select), delete options.select), select.length && (options.Opt = select), Object.keys(VALUE_MAP).forEach(function(key) {
                        void 0 !== options[key] && (options[VALUE_MAP[key]] = options[key], delete options[key]);
                    }), [
                        'V',
                        'DV'
                    ].forEach(function(key) {
                        'string' == typeof options[key] && (options[key] = new String(options[key]));
                    }), options.MK && options.MK.CA && (options.MK.CA = new String(options.MK.CA)), options.label && (options.MK = options.MK ? options.MK : {}, options.MK.CA = new String(options.label), delete options.label), options;
                }
            }), mixin({
                file: function(src, options) {
                    void 0 === options && (options = {}), options.name = options.name || src;
                    var data, match, ref, refBody = {
                        Type: 'EmbeddedFile',
                        Params: {}
                    };
                    if (!src) throw Error('No src specified');
                    if (Buffer$4.isBuffer(src)) data = src;
                    else if (src instanceof ArrayBuffer) data = Buffer$4.from(new Uint8Array(src));
                    else if (match = /^data:(.*);base64,(.*)$/.exec(src)) match[1] && (refBody.Subtype = match[1].replace('/', '#2F')), data = Buffer$4.from(match[2], 'base64');
                    else throw Error("Could not find file " + src);
                    options.creationDate instanceof Date && (refBody.Params.CreationDate = options.creationDate), options.modifiedDate instanceof Date && (refBody.Params.ModDate = options.modifiedDate), options.type && (refBody.Subtype = options.type.replace('/', '#2F'));
                    var checksum = crypto_js_md5__WEBPACK_IMPORTED_MODULE_4___default().MD5(crypto_js_md5__WEBPACK_IMPORTED_MODULE_4___default().lib.WordArray.create(new Uint8Array(data)));
                    refBody.Params.CheckSum = new String(checksum), refBody.Params.Size = data.byteLength, this._fileRegistry || (this._fileRegistry = {});
                    var file = this._fileRegistry[options.name];
                    file && isEqual(refBody, file) ? ref = file.ref : ((ref = this.ref(refBody)).end(data), this._fileRegistry[options.name] = (0, _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_10__.Z)({}, refBody, {
                        ref: ref
                    }));
                    var fileSpecBody = {
                        Type: 'Filespec',
                        F: new String(options.name),
                        EF: {
                            F: ref
                        },
                        UF: new String(options.name)
                    };
                    options.description && (fileSpecBody.Desc = new String(options.description));
                    var filespec = this.ref(fileSpecBody);
                    return filespec.end(), options.hidden || this.addNamedEmbeddedFile(options.name, filespec), filespec;
                }
            });
        }
    }
]);
