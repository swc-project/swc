"use strict";
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([
    [
        186
    ],
    {
        6054: (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            __webpack_require__.d(__webpack_exports__, {
                "MR": function() {
                    return PDFFont;
                },
                "ZP": function() {
                    return PDFDocument;
                }
            });
            var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(5068);
            var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(7326);
            var pako_lib_zlib_zstream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2292);
            var pako_lib_zlib_zstream__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(pako_lib_zlib_zstream__WEBPACK_IMPORTED_MODULE_0__);
            var pako_lib_zlib_deflate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(405);
            var pako_lib_zlib_inflate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7948);
            var pako_lib_zlib_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1619);
            var pako_lib_zlib_constants__WEBPACK_IMPORTED_MODULE_3___default = __webpack_require__.n(pako_lib_zlib_constants__WEBPACK_IMPORTED_MODULE_3__);
            var _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(7855);
            var crypto_js_md5__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8214);
            var crypto_js_md5__WEBPACK_IMPORTED_MODULE_4___default = __webpack_require__.n(crypto_js_md5__WEBPACK_IMPORTED_MODULE_4__);
            var fontkit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4201);
            var _react_pdf_png_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1852);
            var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(7462);
            var global$1 = (typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            var lookup$1 = [];
            var revLookup$1 = [];
            var Arr$1 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
            var inited = false;
            function init() {
                inited = true;
                var e = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                for(var t = 0, r = e.length; t < r; ++t){
                    lookup$1[t] = e[t];
                    revLookup$1[e.charCodeAt(t)] = t;
                }
                revLookup$1['-'.charCodeAt(0)] = 62;
                revLookup$1['_'.charCodeAt(0)] = 63;
            }
            function toByteArray$1(e) {
                if (!inited) {
                    init();
                }
                var t, r, n, i, a, o;
                var c = e.length;
                if (c % 4 > 0) {
                    throw new Error('Invalid string. Length must be a multiple of 4');
                }
                a = e[c - 2] === '=' ? 2 : e[c - 1] === '=' ? 1 : 0;
                o = new Arr$1(c * 3 / 4 - a);
                n = a > 0 ? c - 4 : c;
                var s = 0;
                for(t = 0, r = 0; t < n; t += 4, r += 3){
                    i = (revLookup$1[e.charCodeAt(t)] << 18) | (revLookup$1[e.charCodeAt(t + 1)] << 12) | (revLookup$1[e.charCodeAt(t + 2)] << 6) | revLookup$1[e.charCodeAt(t + 3)];
                    o[s++] = (i >> 16) & 0xFF;
                    o[s++] = (i >> 8) & 0xFF;
                    o[s++] = i & 0xFF;
                }
                if (a === 2) {
                    i = (revLookup$1[e.charCodeAt(t)] << 2) | (revLookup$1[e.charCodeAt(t + 1)] >> 4);
                    o[s++] = i & 0xFF;
                } else if (a === 1) {
                    i = (revLookup$1[e.charCodeAt(t)] << 10) | (revLookup$1[e.charCodeAt(t + 1)] << 4) | (revLookup$1[e.charCodeAt(t + 2)] >> 2);
                    o[s++] = (i >> 8) & 0xFF;
                    o[s++] = i & 0xFF;
                }
                return o;
            }
            function tripletToBase64$1(e) {
                return lookup$1[e >> 18 & 0x3F] + lookup$1[e >> 12 & 0x3F] + lookup$1[e >> 6 & 0x3F] + lookup$1[e & 0x3F];
            }
            function encodeChunk$1(e, t, r) {
                var n;
                var i = [];
                for(var a = t; a < r; a += 3){
                    n = (e[a] << 16) + (e[a + 1] << 8) + (e[a + 2]);
                    i.push(tripletToBase64$1(n));
                }
                return i.join('');
            }
            function fromByteArray$1(e) {
                if (!inited) {
                    init();
                }
                var t;
                var r = e.length;
                var n = r % 3;
                var i = '';
                var a = [];
                var o = 16383;
                for(var c = 0, s = r - n; c < s; c += o){
                    a.push(encodeChunk$1(e, c, (c + o) > s ? s : (c + o)));
                }
                if (n === 1) {
                    t = e[r - 1];
                    i += lookup$1[t >> 2];
                    i += lookup$1[(t << 4) & 0x3F];
                    i += '==';
                } else if (n === 2) {
                    t = (e[r - 2] << 8) + (e[r - 1]);
                    i += lookup$1[t >> 10];
                    i += lookup$1[(t >> 4) & 0x3F];
                    i += lookup$1[(t << 2) & 0x3F];
                    i += '=';
                }
                a.push(i);
                return a.join('');
            }
            function read(e, t, r, n, i) {
                var a, o;
                var c = i * 8 - n - 1;
                var s = (1 << c) - 1;
                var u = s >> 1;
                var f = -7;
                var l = r ? (i - 1) : 0;
                var h = r ? -1 : 1;
                var d = e[t + l];
                l += h;
                a = d & ((1 << (-f)) - 1);
                d >>= (-f);
                f += c;
                for(; f > 0; a = a * 256 + e[t + l], l += h, f -= 8){}
                o = a & ((1 << (-f)) - 1);
                a >>= (-f);
                f += n;
                for(; f > 0; o = o * 256 + e[t + l], l += h, f -= 8){}
                if (a === 0) {
                    a = 1 - u;
                } else if (a === s) {
                    return o ? NaN : ((d ? -1 : 1) * Infinity);
                } else {
                    o = o + Math.pow(2, n);
                    a = a - u;
                }
                return (d ? -1 : 1) * o * Math.pow(2, a - n);
            }
            function write(e, t, r, n, i, a) {
                var o, c, s;
                var u = a * 8 - i - 1;
                var f = (1 << u) - 1;
                var l = f >> 1;
                var h = (i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
                var d = n ? 0 : (a - 1);
                var m = n ? 1 : -1;
                var g = t < 0 || (t === 0 && 1 / t < 0) ? 1 : 0;
                t = Math.abs(t);
                if (isNaN(t) || t === Infinity) {
                    c = isNaN(t) ? 1 : 0;
                    o = f;
                } else {
                    o = Math.floor(Math.log(t) / Math.LN2);
                    if (t * (s = Math.pow(2, -o)) < 1) {
                        o--;
                        s *= 2;
                    }
                    if (o + l >= 1) {
                        t += h / s;
                    } else {
                        t += h * Math.pow(2, 1 - l);
                    }
                    if (t * s >= 2) {
                        o++;
                        s /= 2;
                    }
                    if (o + l >= f) {
                        c = 0;
                        o = f;
                    } else if (o + l >= 1) {
                        c = (t * s - 1) * Math.pow(2, i);
                        o = o + l;
                    } else {
                        c = t * Math.pow(2, l - 1) * Math.pow(2, i);
                        o = 0;
                    }
                }
                for(; i >= 8; e[r + d] = c & 0xff, d += m, c /= 256, i -= 8){}
                o = (o << i) | c;
                u += i;
                for(; u > 0; e[r + d] = o & 0xff, d += m, o /= 256, u -= 8){}
                e[r + d - m] |= g * 128;
            }
            var toString$1 = {}.toString;
            var isArray = Array.isArray || function(e) {
                return toString$1.call(e) == '[object Array]';
            };
            var INSPECT_MAX_BYTES = 50;
            Buffer$4.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined ? global$1.TYPED_ARRAY_SUPPORT : true;
            function kMaxLength() {
                return Buffer$4.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
            }
            function createBuffer(e, t) {
                if (kMaxLength() < t) {
                    throw new RangeError('Invalid typed array length');
                }
                if (Buffer$4.TYPED_ARRAY_SUPPORT) {
                    e = new Uint8Array(t);
                    e.__proto__ = Buffer$4.prototype;
                } else {
                    if (e === null) {
                        e = new Buffer$4(t);
                    }
                    e.length = t;
                }
                return e;
            }
            function Buffer$4(e, t, r) {
                if (!Buffer$4.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$4)) {
                    return new Buffer$4(e, t, r);
                }
                if (typeof e === 'number') {
                    if (typeof t === 'string') {
                        throw new Error('If encoding is specified then the first argument must be a string');
                    }
                    return allocUnsafe(this, e);
                }
                return from$1(this, e, t, r);
            }
            Buffer$4.poolSize = 8192;
            Buffer$4._augment = function(e) {
                e.__proto__ = Buffer$4.prototype;
                return e;
            };
            function from$1(e, t, r, n) {
                if (typeof t === 'number') {
                    throw new TypeError('"value" argument must not be a number');
                }
                if (typeof ArrayBuffer !== 'undefined' && t instanceof ArrayBuffer) {
                    return fromArrayBuffer(e, t, r, n);
                }
                if (typeof t === 'string') {
                    return fromString(e, t, r);
                }
                return fromObject(e, t);
            }
            Buffer$4.from = function(e, t, r) {
                return from$1(null, e, t, r);
            };
            if (Buffer$4.TYPED_ARRAY_SUPPORT) {
                Buffer$4.prototype.__proto__ = Uint8Array.prototype;
                Buffer$4.__proto__ = Uint8Array;
            }
            function assertSize(e) {
                if (typeof e !== 'number') {
                    throw new TypeError('"size" argument must be a number');
                } else if (e < 0) {
                    throw new RangeError('"size" argument must not be negative');
                }
            }
            function alloc(e, t, r, n) {
                assertSize(t);
                if (t <= 0) {
                    return createBuffer(e, t);
                }
                if (r !== undefined) {
                    return typeof n === 'string' ? createBuffer(e, t).fill(r, n) : createBuffer(e, t).fill(r);
                }
                return createBuffer(e, t);
            }
            Buffer$4.alloc = function(e, t, r) {
                return alloc(null, e, t, r);
            };
            function allocUnsafe(e, t) {
                assertSize(t);
                e = createBuffer(e, t < 0 ? 0 : checked(t) | 0);
                if (!Buffer$4.TYPED_ARRAY_SUPPORT) {
                    for(var r = 0; r < t; ++r){
                        e[r] = 0;
                    }
                }
                return e;
            }
            Buffer$4.allocUnsafe = function(e) {
                return allocUnsafe(null, e);
            };
            Buffer$4.allocUnsafeSlow = function(e) {
                return allocUnsafe(null, e);
            };
            function fromString(e, t, r) {
                if (typeof r !== 'string' || r === '') {
                    r = 'utf8';
                }
                if (!Buffer$4.isEncoding(r)) {
                    throw new TypeError('"encoding" must be a valid string encoding');
                }
                var n = byteLength$1(t, r) | 0;
                e = createBuffer(e, n);
                var i = e.write(t, r);
                if (i !== n) {
                    e = e.slice(0, i);
                }
                return e;
            }
            function fromArrayLike(e, t) {
                var r = t.length < 0 ? 0 : checked(t.length) | 0;
                e = createBuffer(e, r);
                for(var n = 0; n < r; n += 1){
                    e[n] = t[n] & 255;
                }
                return e;
            }
            function fromArrayBuffer(e, t, r, n) {
                t.byteLength;
                if (r < 0 || t.byteLength < r) {
                    throw new RangeError('\'offset\' is out of bounds');
                }
                if (t.byteLength < r + (n || 0)) {
                    throw new RangeError('\'length\' is out of bounds');
                }
                if (r === undefined && n === undefined) {
                    t = new Uint8Array(t);
                } else if (n === undefined) {
                    t = new Uint8Array(t, r);
                } else {
                    t = new Uint8Array(t, r, n);
                }
                if (Buffer$4.TYPED_ARRAY_SUPPORT) {
                    e = t;
                    e.__proto__ = Buffer$4.prototype;
                } else {
                    e = fromArrayLike(e, t);
                }
                return e;
            }
            function fromObject(e, t) {
                if (internalIsBuffer(t)) {
                    var r = checked(t.length) | 0;
                    e = createBuffer(e, r);
                    if (e.length === 0) {
                        return e;
                    }
                    t.copy(e, 0, 0, r);
                    return e;
                }
                if (t) {
                    if ((typeof ArrayBuffer !== 'undefined' && t.buffer instanceof ArrayBuffer) || 'length' in t) {
                        if (typeof t.length !== 'number' || isnan(t.length)) {
                            return createBuffer(e, 0);
                        }
                        return fromArrayLike(e, t);
                    }
                    if (t.type === 'Buffer' && isArray(t.data)) {
                        return fromArrayLike(e, t.data);
                    }
                }
                throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
            }
            function checked(e) {
                if (e >= kMaxLength()) {
                    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
                }
                return e | 0;
            }
            Buffer$4.isBuffer = isBuffer;
            function internalIsBuffer(e) {
                return !!(e != null && e._isBuffer);
            }
            Buffer$4.compare = function e(t, r) {
                if (!internalIsBuffer(t) || !internalIsBuffer(r)) {
                    throw new TypeError('Arguments must be Buffers');
                }
                if (t === r) return 0;
                var n = t.length;
                var i = r.length;
                for(var a = 0, o = Math.min(n, i); a < o; ++a){
                    if (t[a] !== r[a]) {
                        n = t[a];
                        i = r[a];
                        break;
                    }
                }
                if (n < i) return -1;
                if (i < n) return 1;
                return 0;
            };
            Buffer$4.isEncoding = function e(t) {
                switch(String(t).toLowerCase()){
                    case 'hex':
                    case 'utf8':
                    case 'utf-8':
                    case 'ascii':
                    case 'latin1':
                    case 'binary':
                    case 'base64':
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return true;
                    default:
                        return false;
                }
            };
            Buffer$4.concat = function e(t, r) {
                if (!isArray(t)) {
                    throw new TypeError('"list" argument must be an Array of Buffers');
                }
                if (t.length === 0) {
                    return Buffer$4.alloc(0);
                }
                var n;
                if (r === undefined) {
                    r = 0;
                    for(n = 0; n < t.length; ++n){
                        r += t[n].length;
                    }
                }
                var i = Buffer$4.allocUnsafe(r);
                var a = 0;
                for(n = 0; n < t.length; ++n){
                    var o = t[n];
                    if (!internalIsBuffer(o)) {
                        throw new TypeError('"list" argument must be an Array of Buffers');
                    }
                    o.copy(i, a);
                    a += o.length;
                }
                return i;
            };
            function byteLength$1(e, t) {
                if (internalIsBuffer(e)) {
                    return e.length;
                }
                if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(e) || e instanceof ArrayBuffer)) {
                    return e.byteLength;
                }
                if (typeof e !== 'string') {
                    e = '' + e;
                }
                var r = e.length;
                if (r === 0) return 0;
                var n = false;
                for(;;){
                    switch(t){
                        case 'ascii':
                        case 'latin1':
                        case 'binary':
                            return r;
                        case 'utf8':
                        case 'utf-8':
                        case undefined:
                            return utf8ToBytes(e).length;
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return r * 2;
                        case 'hex':
                            return r >>> 1;
                        case 'base64':
                            return base64ToBytes(e).length;
                        default:
                            if (n) return utf8ToBytes(e).length;
                            t = ('' + t).toLowerCase();
                            n = true;
                    }
                }
            }
            Buffer$4.byteLength = byteLength$1;
            function slowToString(e, t, r) {
                var n = false;
                if (t === undefined || t < 0) {
                    t = 0;
                }
                if (t > this.length) {
                    return '';
                }
                if (r === undefined || r > this.length) {
                    r = this.length;
                }
                if (r <= 0) {
                    return '';
                }
                r >>>= 0;
                t >>>= 0;
                if (r <= t) {
                    return '';
                }
                if (!e) e = 'utf8';
                while(true){
                    switch(e){
                        case 'hex':
                            return hexSlice(this, t, r);
                        case 'utf8':
                        case 'utf-8':
                            return utf8Slice(this, t, r);
                        case 'ascii':
                            return asciiSlice(this, t, r);
                        case 'latin1':
                        case 'binary':
                            return latin1Slice(this, t, r);
                        case 'base64':
                            return base64Slice(this, t, r);
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return utf16leSlice(this, t, r);
                        default:
                            if (n) throw new TypeError('Unknown encoding: ' + e);
                            e = (e + '').toLowerCase();
                            n = true;
                    }
                }
            }
            Buffer$4.prototype._isBuffer = true;
            function swap(e, t, r) {
                var n = e[t];
                e[t] = e[r];
                e[r] = n;
            }
            Buffer$4.prototype.swap16 = function e() {
                var t = this.length;
                if (t % 2 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 16-bits');
                }
                for(var r = 0; r < t; r += 2){
                    swap(this, r, r + 1);
                }
                return this;
            };
            Buffer$4.prototype.swap32 = function e() {
                var t = this.length;
                if (t % 4 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 32-bits');
                }
                for(var r = 0; r < t; r += 4){
                    swap(this, r, r + 3);
                    swap(this, r + 1, r + 2);
                }
                return this;
            };
            Buffer$4.prototype.swap64 = function e() {
                var t = this.length;
                if (t % 8 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 64-bits');
                }
                for(var r = 0; r < t; r += 8){
                    swap(this, r, r + 7);
                    swap(this, r + 1, r + 6);
                    swap(this, r + 2, r + 5);
                    swap(this, r + 3, r + 4);
                }
                return this;
            };
            Buffer$4.prototype.toString = function e() {
                var t = this.length | 0;
                if (t === 0) return '';
                if (arguments.length === 0) return utf8Slice(this, 0, t);
                return slowToString.apply(this, arguments);
            };
            Buffer$4.prototype.equals = function e(t) {
                if (!internalIsBuffer(t)) throw new TypeError('Argument must be a Buffer');
                if (this === t) return true;
                return Buffer$4.compare(this, t) === 0;
            };
            Buffer$4.prototype.inspect = function e() {
                var t = '';
                var r = INSPECT_MAX_BYTES;
                if (this.length > 0) {
                    t = this.toString('hex', 0, r).match(/.{2}/g).join(' ');
                    if (this.length > r) t += ' ... ';
                }
                return '<Buffer ' + t + '>';
            };
            Buffer$4.prototype.compare = function e(t, r, n, i, a) {
                if (!internalIsBuffer(t)) {
                    throw new TypeError('Argument must be a Buffer');
                }
                if (r === undefined) {
                    r = 0;
                }
                if (n === undefined) {
                    n = t ? t.length : 0;
                }
                if (i === undefined) {
                    i = 0;
                }
                if (a === undefined) {
                    a = this.length;
                }
                if (r < 0 || n > t.length || i < 0 || a > this.length) {
                    throw new RangeError('out of range index');
                }
                if (i >= a && r >= n) {
                    return 0;
                }
                if (i >= a) {
                    return -1;
                }
                if (r >= n) {
                    return 1;
                }
                r >>>= 0;
                n >>>= 0;
                i >>>= 0;
                a >>>= 0;
                if (this === t) return 0;
                var o = a - i;
                var c = n - r;
                var s = Math.min(o, c);
                var u = this.slice(i, a);
                var f = t.slice(r, n);
                for(var l = 0; l < s; ++l){
                    if (u[l] !== f[l]) {
                        o = u[l];
                        c = f[l];
                        break;
                    }
                }
                if (o < c) return -1;
                if (c < o) return 1;
                return 0;
            };
            function bidirectionalIndexOf(e, t, r, n, i) {
                if (e.length === 0) return -1;
                if (typeof r === 'string') {
                    n = r;
                    r = 0;
                } else if (r > 0x7fffffff) {
                    r = 0x7fffffff;
                } else if (r < -0x80000000) {
                    r = -0x80000000;
                }
                r = +r;
                if (isNaN(r)) {
                    r = i ? 0 : (e.length - 1);
                }
                if (r < 0) r = e.length + r;
                if (r >= e.length) {
                    if (i) return -1;
                    else r = e.length - 1;
                } else if (r < 0) {
                    if (i) r = 0;
                    else return -1;
                }
                if (typeof t === 'string') {
                    t = Buffer$4.from(t, n);
                }
                if (internalIsBuffer(t)) {
                    if (t.length === 0) {
                        return -1;
                    }
                    return arrayIndexOf(e, t, r, n, i);
                } else if (typeof t === 'number') {
                    t = t & 0xFF;
                    if (Buffer$4.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
                        if (i) {
                            return Uint8Array.prototype.indexOf.call(e, t, r);
                        } else {
                            return Uint8Array.prototype.lastIndexOf.call(e, t, r);
                        }
                    }
                    return arrayIndexOf(e, [
                        t
                    ], r, n, i);
                }
                throw new TypeError('val must be string, number or Buffer');
            }
            function arrayIndexOf(e, t, r, n, i) {
                var a = 1;
                var o = e.length;
                var c = t.length;
                if (n !== undefined) {
                    n = String(n).toLowerCase();
                    if (n === 'ucs2' || n === 'ucs-2' || n === 'utf16le' || n === 'utf-16le') {
                        if (e.length < 2 || t.length < 2) {
                            return -1;
                        }
                        a = 2;
                        o /= 2;
                        c /= 2;
                        r /= 2;
                    }
                }
                function s(e, t) {
                    if (a === 1) {
                        return e[t];
                    } else {
                        return e.readUInt16BE(t * a);
                    }
                }
                var u;
                if (i) {
                    var f = -1;
                    for(u = r; u < o; u++){
                        if (s(e, u) === s(t, f === -1 ? 0 : u - f)) {
                            if (f === -1) f = u;
                            if (u - f + 1 === c) return f * a;
                        } else {
                            if (f !== -1) u -= u - f;
                            f = -1;
                        }
                    }
                } else {
                    if (r + c > o) r = o - c;
                    for(u = r; u >= 0; u--){
                        var l = true;
                        for(var h = 0; h < c; h++){
                            if (s(e, u + h) !== s(t, h)) {
                                l = false;
                                break;
                            }
                        }
                        if (l) return u;
                    }
                }
                return -1;
            }
            Buffer$4.prototype.includes = function e(t, r, n) {
                return this.indexOf(t, r, n) !== -1;
            };
            Buffer$4.prototype.indexOf = function e(t, r, n) {
                return bidirectionalIndexOf(this, t, r, n, true);
            };
            Buffer$4.prototype.lastIndexOf = function e(t, r, n) {
                return bidirectionalIndexOf(this, t, r, n, false);
            };
            function hexWrite(e, t, r, n) {
                r = Number(r) || 0;
                var i = e.length - r;
                if (!n) {
                    n = i;
                } else {
                    n = Number(n);
                    if (n > i) {
                        n = i;
                    }
                }
                var a = t.length;
                if (a % 2 !== 0) throw new TypeError('Invalid hex string');
                if (n > a / 2) {
                    n = a / 2;
                }
                for(var o = 0; o < n; ++o){
                    var c = parseInt(t.substr(o * 2, 2), 16);
                    if (isNaN(c)) return o;
                    e[r + o] = c;
                }
                return o;
            }
            function utf8Write(e, t, r, n) {
                return blitBuffer(utf8ToBytes(t, e.length - r), e, r, n);
            }
            function asciiWrite(e, t, r, n) {
                return blitBuffer(asciiToBytes(t), e, r, n);
            }
            function latin1Write(e, t, r, n) {
                return asciiWrite(e, t, r, n);
            }
            function base64Write(e, t, r, n) {
                return blitBuffer(base64ToBytes(t), e, r, n);
            }
            function ucs2Write(e, t, r, n) {
                return blitBuffer(utf16leToBytes(t, e.length - r), e, r, n);
            }
            Buffer$4.prototype.write = function e(t, r, n, i) {
                if (r === undefined) {
                    i = 'utf8';
                    n = this.length;
                    r = 0;
                } else if (n === undefined && typeof r === 'string') {
                    i = r;
                    n = this.length;
                    r = 0;
                } else if (isFinite(r)) {
                    r = r | 0;
                    if (isFinite(n)) {
                        n = n | 0;
                        if (i === undefined) i = 'utf8';
                    } else {
                        i = n;
                        n = undefined;
                    }
                } else {
                    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
                }
                var a = this.length - r;
                if (n === undefined || n > a) n = a;
                if ((t.length > 0 && (n < 0 || r < 0)) || r > this.length) {
                    throw new RangeError('Attempt to write outside buffer bounds');
                }
                if (!i) i = 'utf8';
                var o = false;
                for(;;){
                    switch(i){
                        case 'hex':
                            return hexWrite(this, t, r, n);
                        case 'utf8':
                        case 'utf-8':
                            return utf8Write(this, t, r, n);
                        case 'ascii':
                            return asciiWrite(this, t, r, n);
                        case 'latin1':
                        case 'binary':
                            return latin1Write(this, t, r, n);
                        case 'base64':
                            return base64Write(this, t, r, n);
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return ucs2Write(this, t, r, n);
                        default:
                            if (o) throw new TypeError('Unknown encoding: ' + i);
                            i = ('' + i).toLowerCase();
                            o = true;
                    }
                }
            };
            Buffer$4.prototype.toJSON = function e() {
                return {
                    type: 'Buffer',
                    data: Array.prototype.slice.call(this._arr || this, 0)
                };
            };
            function base64Slice(e, t, r) {
                if (t === 0 && r === e.length) {
                    return fromByteArray$1(e);
                } else {
                    return fromByteArray$1(e.slice(t, r));
                }
            }
            function utf8Slice(e, t, r) {
                r = Math.min(e.length, r);
                var n = [];
                var i = t;
                while(i < r){
                    var a = e[i];
                    var o = null;
                    var c = (a > 0xEF) ? 4 : (a > 0xDF) ? 3 : (a > 0xBF) ? 2 : 1;
                    if (i + c <= r) {
                        var s, u, f, l;
                        switch(c){
                            case 1:
                                if (a < 0x80) {
                                    o = a;
                                }
                                break;
                            case 2:
                                s = e[i + 1];
                                if ((s & 0xC0) === 0x80) {
                                    l = (a & 0x1F) << 0x6 | (s & 0x3F);
                                    if (l > 0x7F) {
                                        o = l;
                                    }
                                }
                                break;
                            case 3:
                                s = e[i + 1];
                                u = e[i + 2];
                                if ((s & 0xC0) === 0x80 && (u & 0xC0) === 0x80) {
                                    l = (a & 0xF) << 0xC | (s & 0x3F) << 0x6 | (u & 0x3F);
                                    if (l > 0x7FF && (l < 0xD800 || l > 0xDFFF)) {
                                        o = l;
                                    }
                                }
                                break;
                            case 4:
                                s = e[i + 1];
                                u = e[i + 2];
                                f = e[i + 3];
                                if ((s & 0xC0) === 0x80 && (u & 0xC0) === 0x80 && (f & 0xC0) === 0x80) {
                                    l = (a & 0xF) << 0x12 | (s & 0x3F) << 0xC | (u & 0x3F) << 0x6 | (f & 0x3F);
                                    if (l > 0xFFFF && l < 0x110000) {
                                        o = l;
                                    }
                                }
                        }
                    }
                    if (o === null) {
                        o = 0xFFFD;
                        c = 1;
                    } else if (o > 0xFFFF) {
                        o -= 0x10000;
                        n.push(o >>> 10 & 0x3FF | 0xD800);
                        o = 0xDC00 | o & 0x3FF;
                    }
                    n.push(o);
                    i += c;
                }
                return decodeCodePointsArray(n);
            }
            var MAX_ARGUMENTS_LENGTH = 0x1000;
            function decodeCodePointsArray(e) {
                var t = e.length;
                if (t <= MAX_ARGUMENTS_LENGTH) {
                    return String.fromCharCode.apply(String, e);
                }
                var r = '';
                var n = 0;
                while(n < t){
                    r += String.fromCharCode.apply(String, e.slice(n, n += MAX_ARGUMENTS_LENGTH));
                }
                return r;
            }
            function asciiSlice(e, t, r) {
                var n = '';
                r = Math.min(e.length, r);
                for(var i = t; i < r; ++i){
                    n += String.fromCharCode(e[i] & 0x7F);
                }
                return n;
            }
            function latin1Slice(e, t, r) {
                var n = '';
                r = Math.min(e.length, r);
                for(var i = t; i < r; ++i){
                    n += String.fromCharCode(e[i]);
                }
                return n;
            }
            function hexSlice(e, t, r) {
                var n = e.length;
                if (!t || t < 0) t = 0;
                if (!r || r < 0 || r > n) r = n;
                var i = '';
                for(var a = t; a < r; ++a){
                    i += toHex$1(e[a]);
                }
                return i;
            }
            function utf16leSlice(e, t, r) {
                var n = e.slice(t, r);
                var i = '';
                for(var a = 0; a < n.length; a += 2){
                    i += String.fromCharCode(n[a] + n[a + 1] * 256);
                }
                return i;
            }
            Buffer$4.prototype.slice = function e(t, r) {
                var n = this.length;
                t = ~~t;
                r = r === undefined ? n : ~~r;
                if (t < 0) {
                    t += n;
                    if (t < 0) t = 0;
                } else if (t > n) {
                    t = n;
                }
                if (r < 0) {
                    r += n;
                    if (r < 0) r = 0;
                } else if (r > n) {
                    r = n;
                }
                if (r < t) r = t;
                var i;
                if (Buffer$4.TYPED_ARRAY_SUPPORT) {
                    i = this.subarray(t, r);
                    i.__proto__ = Buffer$4.prototype;
                } else {
                    var a = r - t;
                    i = new Buffer$4(a, undefined);
                    for(var o = 0; o < a; ++o){
                        i[o] = this[o + t];
                    }
                }
                return i;
            };
            function checkOffset(e, t, r) {
                if ((e % 1) !== 0 || e < 0) throw new RangeError('offset is not uint');
                if (e + t > r) throw new RangeError('Trying to access beyond buffer length');
            }
            Buffer$4.prototype.readUIntLE = function e(t, r, n) {
                t = t | 0;
                r = r | 0;
                if (!n) checkOffset(t, r, this.length);
                var i = this[t];
                var a = 1;
                var o = 0;
                while(++o < r && (a *= 0x100)){
                    i += this[t + o] * a;
                }
                return i;
            };
            Buffer$4.prototype.readUIntBE = function e(t, r, n) {
                t = t | 0;
                r = r | 0;
                if (!n) {
                    checkOffset(t, r, this.length);
                }
                var i = this[t + --r];
                var a = 1;
                while(r > 0 && (a *= 0x100)){
                    i += this[t + --r] * a;
                }
                return i;
            };
            Buffer$4.prototype.readUInt8 = function e(t, r) {
                if (!r) checkOffset(t, 1, this.length);
                return this[t];
            };
            Buffer$4.prototype.readUInt16LE = function e(t, r) {
                if (!r) checkOffset(t, 2, this.length);
                return this[t] | (this[t + 1] << 8);
            };
            Buffer$4.prototype.readUInt16BE = function e(t, r) {
                if (!r) checkOffset(t, 2, this.length);
                return (this[t] << 8) | this[t + 1];
            };
            Buffer$4.prototype.readUInt32LE = function e(t, r) {
                if (!r) checkOffset(t, 4, this.length);
                return ((this[t]) | (this[t + 1] << 8) | (this[t + 2] << 16)) + (this[t + 3] * 0x1000000);
            };
            Buffer$4.prototype.readUInt32BE = function e(t, r) {
                if (!r) checkOffset(t, 4, this.length);
                return (this[t] * 0x1000000) + ((this[t + 1] << 16) | (this[t + 2] << 8) | this[t + 3]);
            };
            Buffer$4.prototype.readIntLE = function e(t, r, n) {
                t = t | 0;
                r = r | 0;
                if (!n) checkOffset(t, r, this.length);
                var i = this[t];
                var a = 1;
                var o = 0;
                while(++o < r && (a *= 0x100)){
                    i += this[t + o] * a;
                }
                a *= 0x80;
                if (i >= a) i -= Math.pow(2, 8 * r);
                return i;
            };
            Buffer$4.prototype.readIntBE = function e(t, r, n) {
                t = t | 0;
                r = r | 0;
                if (!n) checkOffset(t, r, this.length);
                var i = r;
                var a = 1;
                var o = this[t + --i];
                while(i > 0 && (a *= 0x100)){
                    o += this[t + --i] * a;
                }
                a *= 0x80;
                if (o >= a) o -= Math.pow(2, 8 * r);
                return o;
            };
            Buffer$4.prototype.readInt8 = function e(t, r) {
                if (!r) checkOffset(t, 1, this.length);
                if (!(this[t] & 0x80)) return (this[t]);
                return ((0xff - this[t] + 1) * -1);
            };
            Buffer$4.prototype.readInt16LE = function e(t, r) {
                if (!r) checkOffset(t, 2, this.length);
                var n = this[t] | (this[t + 1] << 8);
                return (n & 0x8000) ? n | 0xFFFF0000 : n;
            };
            Buffer$4.prototype.readInt16BE = function e(t, r) {
                if (!r) checkOffset(t, 2, this.length);
                var n = this[t + 1] | (this[t] << 8);
                return (n & 0x8000) ? n | 0xFFFF0000 : n;
            };
            Buffer$4.prototype.readInt32LE = function e(t, r) {
                if (!r) checkOffset(t, 4, this.length);
                return (this[t]) | (this[t + 1] << 8) | (this[t + 2] << 16) | (this[t + 3] << 24);
            };
            Buffer$4.prototype.readInt32BE = function e(t, r) {
                if (!r) checkOffset(t, 4, this.length);
                return (this[t] << 24) | (this[t + 1] << 16) | (this[t + 2] << 8) | (this[t + 3]);
            };
            Buffer$4.prototype.readFloatLE = function e(t, r) {
                if (!r) checkOffset(t, 4, this.length);
                return read(this, t, true, 23, 4);
            };
            Buffer$4.prototype.readFloatBE = function e(t, r) {
                if (!r) checkOffset(t, 4, this.length);
                return read(this, t, false, 23, 4);
            };
            Buffer$4.prototype.readDoubleLE = function e(t, r) {
                if (!r) checkOffset(t, 8, this.length);
                return read(this, t, true, 52, 8);
            };
            Buffer$4.prototype.readDoubleBE = function e(t, r) {
                if (!r) checkOffset(t, 8, this.length);
                return read(this, t, false, 52, 8);
            };
            function checkInt(e, t, r, n, i, a) {
                if (!internalIsBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
                if (t > i || t < a) throw new RangeError('"value" argument is out of bounds');
                if (r + n > e.length) throw new RangeError('Index out of range');
            }
            Buffer$4.prototype.writeUIntLE = function e(t, r, n, i) {
                t = +t;
                r = r | 0;
                n = n | 0;
                if (!i) {
                    var a = Math.pow(2, 8 * n) - 1;
                    checkInt(this, t, r, n, a, 0);
                }
                var o = 1;
                var c = 0;
                this[r] = t & 0xFF;
                while(++c < n && (o *= 0x100)){
                    this[r + c] = (t / o) & 0xFF;
                }
                return r + n;
            };
            Buffer$4.prototype.writeUIntBE = function e(t, r, n, i) {
                t = +t;
                r = r | 0;
                n = n | 0;
                if (!i) {
                    var a = Math.pow(2, 8 * n) - 1;
                    checkInt(this, t, r, n, a, 0);
                }
                var o = n - 1;
                var c = 1;
                this[r + o] = t & 0xFF;
                while(--o >= 0 && (c *= 0x100)){
                    this[r + o] = (t / c) & 0xFF;
                }
                return r + n;
            };
            Buffer$4.prototype.writeUInt8 = function e(t, r, n) {
                t = +t;
                r = r | 0;
                if (!n) checkInt(this, t, r, 1, 0xff, 0);
                if (!Buffer$4.TYPED_ARRAY_SUPPORT) t = Math.floor(t);
                this[r] = (t & 0xff);
                return r + 1;
            };
            function objectWriteUInt16(e, t, r, n) {
                if (t < 0) t = 0xffff + t + 1;
                for(var i = 0, a = Math.min(e.length - r, 2); i < a; ++i){
                    e[r + i] = (t & (0xff << (8 * (n ? i : 1 - i)))) >>> (n ? i : 1 - i) * 8;
                }
            }
            Buffer$4.prototype.writeUInt16LE = function e(t, r, n) {
                t = +t;
                r = r | 0;
                if (!n) checkInt(this, t, r, 2, 0xffff, 0);
                if (Buffer$4.TYPED_ARRAY_SUPPORT) {
                    this[r] = (t & 0xff);
                    this[r + 1] = (t >>> 8);
                } else {
                    objectWriteUInt16(this, t, r, true);
                }
                return r + 2;
            };
            Buffer$4.prototype.writeUInt16BE = function e(t, r, n) {
                t = +t;
                r = r | 0;
                if (!n) checkInt(this, t, r, 2, 0xffff, 0);
                if (Buffer$4.TYPED_ARRAY_SUPPORT) {
                    this[r] = (t >>> 8);
                    this[r + 1] = (t & 0xff);
                } else {
                    objectWriteUInt16(this, t, r, false);
                }
                return r + 2;
            };
            function objectWriteUInt32(e, t, r, n) {
                if (t < 0) t = 0xffffffff + t + 1;
                for(var i = 0, a = Math.min(e.length - r, 4); i < a; ++i){
                    e[r + i] = (t >>> (n ? i : 3 - i) * 8) & 0xff;
                }
            }
            Buffer$4.prototype.writeUInt32LE = function e(t, r, n) {
                t = +t;
                r = r | 0;
                if (!n) checkInt(this, t, r, 4, 0xffffffff, 0);
                if (Buffer$4.TYPED_ARRAY_SUPPORT) {
                    this[r + 3] = (t >>> 24);
                    this[r + 2] = (t >>> 16);
                    this[r + 1] = (t >>> 8);
                    this[r] = (t & 0xff);
                } else {
                    objectWriteUInt32(this, t, r, true);
                }
                return r + 4;
            };
            Buffer$4.prototype.writeUInt32BE = function e(t, r, n) {
                t = +t;
                r = r | 0;
                if (!n) checkInt(this, t, r, 4, 0xffffffff, 0);
                if (Buffer$4.TYPED_ARRAY_SUPPORT) {
                    this[r] = (t >>> 24);
                    this[r + 1] = (t >>> 16);
                    this[r + 2] = (t >>> 8);
                    this[r + 3] = (t & 0xff);
                } else {
                    objectWriteUInt32(this, t, r, false);
                }
                return r + 4;
            };
            Buffer$4.prototype.writeIntLE = function e(t, r, n, i) {
                t = +t;
                r = r | 0;
                if (!i) {
                    var a = Math.pow(2, 8 * n - 1);
                    checkInt(this, t, r, n, a - 1, -a);
                }
                var o = 0;
                var c = 1;
                var s = 0;
                this[r] = t & 0xFF;
                while(++o < n && (c *= 0x100)){
                    if (t < 0 && s === 0 && this[r + o - 1] !== 0) {
                        s = 1;
                    }
                    this[r + o] = ((t / c) >> 0) - s & 0xFF;
                }
                return r + n;
            };
            Buffer$4.prototype.writeIntBE = function e(t, r, n, i) {
                t = +t;
                r = r | 0;
                if (!i) {
                    var a = Math.pow(2, 8 * n - 1);
                    checkInt(this, t, r, n, a - 1, -a);
                }
                var o = n - 1;
                var c = 1;
                var s = 0;
                this[r + o] = t & 0xFF;
                while(--o >= 0 && (c *= 0x100)){
                    if (t < 0 && s === 0 && this[r + o + 1] !== 0) {
                        s = 1;
                    }
                    this[r + o] = ((t / c) >> 0) - s & 0xFF;
                }
                return r + n;
            };
            Buffer$4.prototype.writeInt8 = function e(t, r, n) {
                t = +t;
                r = r | 0;
                if (!n) checkInt(this, t, r, 1, 0x7f, -0x80);
                if (!Buffer$4.TYPED_ARRAY_SUPPORT) t = Math.floor(t);
                if (t < 0) t = 0xff + t + 1;
                this[r] = (t & 0xff);
                return r + 1;
            };
            Buffer$4.prototype.writeInt16LE = function e(t, r, n) {
                t = +t;
                r = r | 0;
                if (!n) checkInt(this, t, r, 2, 0x7fff, -0x8000);
                if (Buffer$4.TYPED_ARRAY_SUPPORT) {
                    this[r] = (t & 0xff);
                    this[r + 1] = (t >>> 8);
                } else {
                    objectWriteUInt16(this, t, r, true);
                }
                return r + 2;
            };
            Buffer$4.prototype.writeInt16BE = function e(t, r, n) {
                t = +t;
                r = r | 0;
                if (!n) checkInt(this, t, r, 2, 0x7fff, -0x8000);
                if (Buffer$4.TYPED_ARRAY_SUPPORT) {
                    this[r] = (t >>> 8);
                    this[r + 1] = (t & 0xff);
                } else {
                    objectWriteUInt16(this, t, r, false);
                }
                return r + 2;
            };
            Buffer$4.prototype.writeInt32LE = function e(t, r, n) {
                t = +t;
                r = r | 0;
                if (!n) checkInt(this, t, r, 4, 0x7fffffff, -0x80000000);
                if (Buffer$4.TYPED_ARRAY_SUPPORT) {
                    this[r] = (t & 0xff);
                    this[r + 1] = (t >>> 8);
                    this[r + 2] = (t >>> 16);
                    this[r + 3] = (t >>> 24);
                } else {
                    objectWriteUInt32(this, t, r, true);
                }
                return r + 4;
            };
            Buffer$4.prototype.writeInt32BE = function e(t, r, n) {
                t = +t;
                r = r | 0;
                if (!n) checkInt(this, t, r, 4, 0x7fffffff, -0x80000000);
                if (t < 0) t = 0xffffffff + t + 1;
                if (Buffer$4.TYPED_ARRAY_SUPPORT) {
                    this[r] = (t >>> 24);
                    this[r + 1] = (t >>> 16);
                    this[r + 2] = (t >>> 8);
                    this[r + 3] = (t & 0xff);
                } else {
                    objectWriteUInt32(this, t, r, false);
                }
                return r + 4;
            };
            function checkIEEE754(e, t, r, n, i, a) {
                if (r + n > e.length) throw new RangeError('Index out of range');
                if (r < 0) throw new RangeError('Index out of range');
            }
            function writeFloat(e, t, r, n, i) {
                if (!i) {
                    checkIEEE754(e, t, r, 4);
                }
                write(e, t, r, n, 23, 4);
                return r + 4;
            }
            Buffer$4.prototype.writeFloatLE = function e(t, r, n) {
                return writeFloat(this, t, r, true, n);
            };
            Buffer$4.prototype.writeFloatBE = function e(t, r, n) {
                return writeFloat(this, t, r, false, n);
            };
            function writeDouble(e, t, r, n, i) {
                if (!i) {
                    checkIEEE754(e, t, r, 8);
                }
                write(e, t, r, n, 52, 8);
                return r + 8;
            }
            Buffer$4.prototype.writeDoubleLE = function e(t, r, n) {
                return writeDouble(this, t, r, true, n);
            };
            Buffer$4.prototype.writeDoubleBE = function e(t, r, n) {
                return writeDouble(this, t, r, false, n);
            };
            Buffer$4.prototype.copy = function e(t, r, n, i) {
                if (!n) n = 0;
                if (!i && i !== 0) i = this.length;
                if (r >= t.length) r = t.length;
                if (!r) r = 0;
                if (i > 0 && i < n) i = n;
                if (i === n) return 0;
                if (t.length === 0 || this.length === 0) return 0;
                if (r < 0) {
                    throw new RangeError('targetStart out of bounds');
                }
                if (n < 0 || n >= this.length) throw new RangeError('sourceStart out of bounds');
                if (i < 0) throw new RangeError('sourceEnd out of bounds');
                if (i > this.length) i = this.length;
                if (t.length - r < i - n) {
                    i = t.length - r + n;
                }
                var a = i - n;
                var o;
                if (this === t && n < r && r < i) {
                    for(o = a - 1; o >= 0; --o){
                        t[o + r] = this[o + n];
                    }
                } else if (a < 1000 || !Buffer$4.TYPED_ARRAY_SUPPORT) {
                    for(o = 0; o < a; ++o){
                        t[o + r] = this[o + n];
                    }
                } else {
                    Uint8Array.prototype.set.call(t, this.subarray(n, n + a), r);
                }
                return a;
            };
            Buffer$4.prototype.fill = function e(t, r, n, i) {
                if (typeof t === 'string') {
                    if (typeof r === 'string') {
                        i = r;
                        r = 0;
                        n = this.length;
                    } else if (typeof n === 'string') {
                        i = n;
                        n = this.length;
                    }
                    if (t.length === 1) {
                        var a = t.charCodeAt(0);
                        if (a < 256) {
                            t = a;
                        }
                    }
                    if (i !== undefined && typeof i !== 'string') {
                        throw new TypeError('encoding must be a string');
                    }
                    if (typeof i === 'string' && !Buffer$4.isEncoding(i)) {
                        throw new TypeError('Unknown encoding: ' + i);
                    }
                } else if (typeof t === 'number') {
                    t = t & 255;
                }
                if (r < 0 || this.length < r || this.length < n) {
                    throw new RangeError('Out of range index');
                }
                if (n <= r) {
                    return this;
                }
                r = r >>> 0;
                n = n === undefined ? this.length : n >>> 0;
                if (!t) t = 0;
                var o;
                if (typeof t === 'number') {
                    for(o = r; o < n; ++o){
                        this[o] = t;
                    }
                } else {
                    var c = internalIsBuffer(t) ? t : utf8ToBytes(new Buffer$4(t, i).toString());
                    var s = c.length;
                    for(o = 0; o < n - r; ++o){
                        this[o + r] = c[o % s];
                    }
                }
                return this;
            };
            var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
            function base64clean(e) {
                e = stringtrim(e).replace(INVALID_BASE64_RE, '');
                if (e.length < 2) return '';
                while(e.length % 4 !== 0){
                    e = e + '=';
                }
                return e;
            }
            function stringtrim(e) {
                if (e.trim) return e.trim();
                return e.replace(/^\s+|\s+$/g, '');
            }
            function toHex$1(e) {
                if (e < 16) return '0' + e.toString(16);
                return e.toString(16);
            }
            function utf8ToBytes(e, t) {
                t = t || Infinity;
                var r;
                var n = e.length;
                var i = null;
                var a = [];
                for(var o = 0; o < n; ++o){
                    r = e.charCodeAt(o);
                    if (r > 0xD7FF && r < 0xE000) {
                        if (!i) {
                            if (r > 0xDBFF) {
                                if ((t -= 3) > -1) a.push(0xEF, 0xBF, 0xBD);
                                continue;
                            } else if (o + 1 === n) {
                                if ((t -= 3) > -1) a.push(0xEF, 0xBF, 0xBD);
                                continue;
                            }
                            i = r;
                            continue;
                        }
                        if (r < 0xDC00) {
                            if ((t -= 3) > -1) a.push(0xEF, 0xBF, 0xBD);
                            i = r;
                            continue;
                        }
                        r = (i - 0xD800 << 10 | r - 0xDC00) + 0x10000;
                    } else if (i) {
                        if ((t -= 3) > -1) a.push(0xEF, 0xBF, 0xBD);
                    }
                    i = null;
                    if (r < 0x80) {
                        if ((t -= 1) < 0) break;
                        a.push(r);
                    } else if (r < 0x800) {
                        if ((t -= 2) < 0) break;
                        a.push(r >> 0x6 | 0xC0, r & 0x3F | 0x80);
                    } else if (r < 0x10000) {
                        if ((t -= 3) < 0) break;
                        a.push(r >> 0xC | 0xE0, r >> 0x6 & 0x3F | 0x80, r & 0x3F | 0x80);
                    } else if (r < 0x110000) {
                        if ((t -= 4) < 0) break;
                        a.push(r >> 0x12 | 0xF0, r >> 0xC & 0x3F | 0x80, r >> 0x6 & 0x3F | 0x80, r & 0x3F | 0x80);
                    } else {
                        throw new Error('Invalid code point');
                    }
                }
                return a;
            }
            function asciiToBytes(e) {
                var t = [];
                for(var r = 0; r < e.length; ++r){
                    t.push(e.charCodeAt(r) & 0xFF);
                }
                return t;
            }
            function utf16leToBytes(e, t) {
                var r, n, i;
                var a = [];
                for(var o = 0; o < e.length; ++o){
                    if ((t -= 2) < 0) break;
                    r = e.charCodeAt(o);
                    n = r >> 8;
                    i = r % 256;
                    a.push(i);
                    a.push(n);
                }
                return a;
            }
            function base64ToBytes(e) {
                return toByteArray$1(base64clean(e));
            }
            function blitBuffer(e, t, r, n) {
                for(var i = 0; i < n; ++i){
                    if ((i + r >= t.length) || (i >= e.length)) break;
                    t[i + r] = e[i];
                }
                return i;
            }
            function isnan(e) {
                return e !== e;
            }
            function isBuffer(e) {
                return e != null && (!!e._isBuffer || isFastBuffer(e) || isSlowBuffer(e));
            }
            function isFastBuffer(e) {
                return !!e.constructor && typeof e.constructor.isBuffer === 'function' && e.constructor.isBuffer(e);
            }
            function isSlowBuffer(e) {
                return typeof e.readFloatLE === 'function' && typeof e.slice === 'function' && isFastBuffer(e.slice(0, 0));
            }
            var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};
            function getAugmentedNamespace(e) {
                if (e.__esModule) return e;
                var t = Object.defineProperty({}, '__esModule', {
                    value: true
                });
                Object.keys(e).forEach(function(r) {
                    var n = Object.getOwnPropertyDescriptor(e, r);
                    Object.defineProperty(t, r, n.get ? n : {
                        enumerable: true,
                        get: function() {
                            return e[r];
                        }
                    });
                });
                return t;
            }
            var readableBrowser = {
                exports: {}
            };
            var _registry = {};
            function defaultSetTimout() {
                throw new Error('setTimeout has not been defined');
            }
            function defaultClearTimeout() {
                throw new Error('clearTimeout has not been defined');
            }
            var cachedSetTimeout = defaultSetTimout;
            var cachedClearTimeout = defaultClearTimeout;
            if (typeof global$1.setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            }
            if (typeof global$1.clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            }
            function runTimeout(e) {
                if (cachedSetTimeout === setTimeout) {
                    return setTimeout(e, 0);
                }
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                    cachedSetTimeout = setTimeout;
                    return setTimeout(e, 0);
                }
                try {
                    return cachedSetTimeout(e, 0);
                } catch (r) {
                    try {
                        return cachedSetTimeout.call(null, e, 0);
                    } catch (t) {
                        return cachedSetTimeout.call(this, e, 0);
                    }
                }
            }
            function runClearTimeout(e) {
                if (cachedClearTimeout === clearTimeout) {
                    return clearTimeout(e);
                }
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                    cachedClearTimeout = clearTimeout;
                    return clearTimeout(e);
                }
                try {
                    return cachedClearTimeout(e);
                } catch (r) {
                    try {
                        return cachedClearTimeout.call(null, e);
                    } catch (t) {
                        return cachedClearTimeout.call(this, e);
                    }
                }
            }
            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;
            function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                    return;
                }
                draining = false;
                if (currentQueue.length) {
                    queue = currentQueue.concat(queue);
                } else {
                    queueIndex = -1;
                }
                if (queue.length) {
                    drainQueue();
                }
            }
            function drainQueue() {
                if (draining) {
                    return;
                }
                var e = runTimeout(cleanUpNextTick);
                draining = true;
                var t = queue.length;
                while(t){
                    currentQueue = queue;
                    queue = [];
                    while(++queueIndex < t){
                        if (currentQueue) {
                            currentQueue[queueIndex].run();
                        }
                    }
                    queueIndex = -1;
                    t = queue.length;
                }
                currentQueue = null;
                draining = false;
                runClearTimeout(e);
            }
            function nextTick(e) {
                var t = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                    for(var r = 1; r < arguments.length; r++){
                        t[r - 1] = arguments[r];
                    }
                }
                queue.push(new Item(e, t));
                if (queue.length === 1 && !draining) {
                    runTimeout(drainQueue);
                }
            }
            function Item(e, t) {
                this.fun = e;
                this.array = t;
            }
            Item.prototype.run = function() {
                this.fun.apply(null, this.array);
            };
            var title = 'browser';
            var platform = 'browser';
            var browser$1 = true;
            var env = {};
            var argv = [];
            var version = '';
            var versions = {};
            var release = {};
            var config$1 = {};
            function noop$2() {}
            var on = noop$2;
            var addListener = noop$2;
            var once$3 = noop$2;
            var off = noop$2;
            var removeListener = noop$2;
            var removeAllListeners = noop$2;
            var emit = noop$2;
            function binding$1(e) {
                throw new Error('process.binding is not supported');
            }
            function cwd() {
                return '/';
            }
            function chdir(e) {
                throw new Error('process.chdir is not supported');
            }
            function umask() {
                return 0;
            }
            var performance = global$1.performance || {};
            var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function() {
                return (new Date()).getTime();
            };
            function hrtime(e) {
                var t = performanceNow.call(performance) * 1e-3;
                var r = Math.floor(t);
                var n = Math.floor((t % 1) * 1e9);
                if (e) {
                    r = r - e[0];
                    n = n - e[1];
                    if (n < 0) {
                        r--;
                        n += 1e9;
                    }
                }
                return [
                    r,
                    n
                ];
            }
            var startTime = new Date();
            function uptime() {
                var e = new Date();
                var t = e - startTime;
                return t / 1000;
            }
            var browser$1$1 = {
                nextTick: nextTick,
                title: title,
                browser: browser$1,
                env: env,
                argv: argv,
                version: version,
                versions: versions,
                on: on,
                addListener: addListener,
                once: once$3,
                off: off,
                removeListener: removeListener,
                removeAllListeners: removeAllListeners,
                emit: emit,
                binding: binding$1,
                cwd: cwd,
                chdir: chdir,
                umask: umask,
                hrtime: hrtime,
                platform: platform,
                release: release,
                config: config$1,
                uptime: uptime
            };
            var events = {
                exports: {}
            };
            var R = typeof Reflect === 'object' ? Reflect : null;
            var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function e(t, r, n) {
                return Function.prototype.apply.call(t, r, n);
            };
            var ReflectOwnKeys;
            if (R && typeof R.ownKeys === 'function') {
                ReflectOwnKeys = R.ownKeys;
            } else if (Object.getOwnPropertySymbols) {
                ReflectOwnKeys = function e(t) {
                    return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t));
                };
            } else {
                ReflectOwnKeys = function e(t) {
                    return Object.getOwnPropertyNames(t);
                };
            }
            function ProcessEmitWarning(e) {
                if (console && console.warn) console.warn(e);
            }
            var NumberIsNaN = Number.isNaN || function e(t) {
                return t !== t;
            };
            function EventEmitter() {
                EventEmitter.init.call(this);
            }
            events.exports = EventEmitter;
            events.exports.once = once$2;
            EventEmitter.EventEmitter = EventEmitter;
            EventEmitter.prototype._events = undefined;
            EventEmitter.prototype._eventsCount = 0;
            EventEmitter.prototype._maxListeners = undefined;
            var defaultMaxListeners = 10;
            function checkListener(e) {
                if (typeof e !== 'function') {
                    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e);
                }
            }
            Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
                enumerable: true,
                get: function e() {
                    return defaultMaxListeners;
                },
                set: function e(t) {
                    if (typeof t !== 'number' || t < 0 || NumberIsNaN(t)) {
                        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t + '.');
                    }
                    defaultMaxListeners = t;
                }
            });
            EventEmitter.init = function() {
                if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
                    this._events = Object.create(null);
                    this._eventsCount = 0;
                }
                this._maxListeners = this._maxListeners || undefined;
            };
            EventEmitter.prototype.setMaxListeners = function e(t) {
                if (typeof t !== 'number' || t < 0 || NumberIsNaN(t)) {
                    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + t + '.');
                }
                this._maxListeners = t;
                return this;
            };
            function _getMaxListeners(e) {
                if (e._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
                return e._maxListeners;
            }
            EventEmitter.prototype.getMaxListeners = function e() {
                return _getMaxListeners(this);
            };
            EventEmitter.prototype.emit = function e(t) {
                var r = [];
                for(var n = 1; n < arguments.length; n++){
                    r.push(arguments[n]);
                }
                var i = t === 'error';
                var a = this._events;
                if (a !== undefined) i = i && a.error === undefined;
                else if (!i) return false;
                if (i) {
                    var o;
                    if (r.length > 0) o = r[0];
                    if (o instanceof Error) {
                        throw o;
                    }
                    var c = new Error('Unhandled error.' + (o ? ' (' + o.message + ')' : ''));
                    c.context = o;
                    throw c;
                }
                var s = a[t];
                if (s === undefined) return false;
                if (typeof s === 'function') {
                    ReflectApply(s, this, r);
                } else {
                    var u = s.length;
                    var f = arrayClone(s, u);
                    for(var n = 0; n < u; ++n){
                        ReflectApply(f[n], this, r);
                    }
                }
                return true;
            };
            function _addListener(e, t, r, n) {
                var i;
                var a;
                var o;
                checkListener(r);
                a = e._events;
                if (a === undefined) {
                    a = e._events = Object.create(null);
                    e._eventsCount = 0;
                } else {
                    if (a.newListener !== undefined) {
                        e.emit('newListener', t, r.listener ? r.listener : r);
                        a = e._events;
                    }
                    o = a[t];
                }
                if (o === undefined) {
                    o = a[t] = r;
                    ++e._eventsCount;
                } else {
                    if (typeof o === 'function') {
                        o = a[t] = n ? [
                            r,
                            o
                        ] : [
                            o,
                            r
                        ];
                    } else if (n) {
                        o.unshift(r);
                    } else {
                        o.push(r);
                    }
                    i = _getMaxListeners(e);
                    if (i > 0 && o.length > i && !o.warned) {
                        o.warned = true;
                        var c = new Error('Possible EventEmitter memory leak detected. ' + o.length + ' ' + String(t) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
                        c.name = 'MaxListenersExceededWarning';
                        c.emitter = e;
                        c.type = t;
                        c.count = o.length;
                        ProcessEmitWarning(c);
                    }
                }
                return e;
            }
            EventEmitter.prototype.addListener = function e(t, r) {
                return _addListener(this, t, r, false);
            };
            EventEmitter.prototype.on = EventEmitter.prototype.addListener;
            EventEmitter.prototype.prependListener = function e(t, r) {
                return _addListener(this, t, r, true);
            };
            function onceWrapper() {
                if (!this.fired) {
                    this.target.removeListener(this.type, this.wrapFn);
                    this.fired = true;
                    if (arguments.length === 0) return this.listener.call(this.target);
                    return this.listener.apply(this.target, arguments);
                }
            }
            function _onceWrap(e, t, r) {
                var n = {
                    fired: false,
                    wrapFn: undefined,
                    target: e,
                    type: t,
                    listener: r
                };
                var i = onceWrapper.bind(n);
                i.listener = r;
                n.wrapFn = i;
                return i;
            }
            EventEmitter.prototype.once = function e(t, r) {
                checkListener(r);
                this.on(t, _onceWrap(this, t, r));
                return this;
            };
            EventEmitter.prototype.prependOnceListener = function e(t, r) {
                checkListener(r);
                this.prependListener(t, _onceWrap(this, t, r));
                return this;
            };
            EventEmitter.prototype.removeListener = function e(t, r) {
                var n, i, a, o, c;
                checkListener(r);
                i = this._events;
                if (i === undefined) return this;
                n = i[t];
                if (n === undefined) return this;
                if (n === r || n.listener === r) {
                    if (--this._eventsCount === 0) this._events = Object.create(null);
                    else {
                        delete i[t];
                        if (i.removeListener) this.emit('removeListener', t, n.listener || r);
                    }
                } else if (typeof n !== 'function') {
                    a = -1;
                    for(o = n.length - 1; o >= 0; o--){
                        if (n[o] === r || n[o].listener === r) {
                            c = n[o].listener;
                            a = o;
                            break;
                        }
                    }
                    if (a < 0) return this;
                    if (a === 0) n.shift();
                    else {
                        spliceOne(n, a);
                    }
                    if (n.length === 1) i[t] = n[0];
                    if (i.removeListener !== undefined) this.emit('removeListener', t, c || r);
                }
                return this;
            };
            EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
            EventEmitter.prototype.removeAllListeners = function e(t) {
                var r, n, i;
                n = this._events;
                if (n === undefined) return this;
                if (n.removeListener === undefined) {
                    if (arguments.length === 0) {
                        this._events = Object.create(null);
                        this._eventsCount = 0;
                    } else if (n[t] !== undefined) {
                        if (--this._eventsCount === 0) this._events = Object.create(null);
                        else delete n[t];
                    }
                    return this;
                }
                if (arguments.length === 0) {
                    var a = Object.keys(n);
                    var o;
                    for(i = 0; i < a.length; ++i){
                        o = a[i];
                        if (o === 'removeListener') continue;
                        this.removeAllListeners(o);
                    }
                    this.removeAllListeners('removeListener');
                    this._events = Object.create(null);
                    this._eventsCount = 0;
                    return this;
                }
                r = n[t];
                if (typeof r === 'function') {
                    this.removeListener(t, r);
                } else if (r !== undefined) {
                    for(i = r.length - 1; i >= 0; i--){
                        this.removeListener(t, r[i]);
                    }
                }
                return this;
            };
            function _listeners(e, t, r) {
                var n = e._events;
                if (n === undefined) return [];
                var i = n[t];
                if (i === undefined) return [];
                if (typeof i === 'function') return r ? [
                    i.listener || i
                ] : [
                    i
                ];
                return r ? unwrapListeners(i) : arrayClone(i, i.length);
            }
            EventEmitter.prototype.listeners = function e(t) {
                return _listeners(this, t, true);
            };
            EventEmitter.prototype.rawListeners = function e(t) {
                return _listeners(this, t, false);
            };
            EventEmitter.listenerCount = function(e, t) {
                if (typeof e.listenerCount === 'function') {
                    return e.listenerCount(t);
                } else {
                    return listenerCount.call(e, t);
                }
            };
            EventEmitter.prototype.listenerCount = listenerCount;
            function listenerCount(e) {
                var t = this._events;
                if (t !== undefined) {
                    var r = t[e];
                    if (typeof r === 'function') {
                        return 1;
                    } else if (r !== undefined) {
                        return r.length;
                    }
                }
                return 0;
            }
            EventEmitter.prototype.eventNames = function e() {
                return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
            };
            function arrayClone(e, t) {
                var r = new Array(t);
                for(var n = 0; n < t; ++n){
                    r[n] = e[n];
                }
                return r;
            }
            function spliceOne(e, t) {
                for(; t + 1 < e.length; t++){
                    e[t] = e[t + 1];
                }
                e.pop();
            }
            function unwrapListeners(e) {
                var t = new Array(e.length);
                for(var r = 0; r < t.length; ++r){
                    t[r] = e[r].listener || e[r];
                }
                return t;
            }
            function once$2(e, t) {
                return new Promise(function(r, n) {
                    function i(r) {
                        e.removeListener(t, a);
                        n(r);
                    }
                    function a() {
                        if (typeof e.removeListener === 'function') {
                            e.removeListener('error', i);
                        }
                        r([].slice.call(arguments));
                    }
                    eventTargetAgnosticAddListener(e, t, a, {
                        once: true
                    });
                    if (t !== 'error') {
                        addErrorHandlerIfEventEmitter(e, i, {
                            once: true
                        });
                    }
                });
            }
            function addErrorHandlerIfEventEmitter(e, t, r) {
                if (typeof e.on === 'function') {
                    eventTargetAgnosticAddListener(e, 'error', t, r);
                }
            }
            function eventTargetAgnosticAddListener(e, t, r, n) {
                if (typeof e.on === 'function') {
                    if (n.once) {
                        e.once(t, r);
                    } else {
                        e.on(t, r);
                    }
                } else if (typeof e.addEventListener === 'function') {
                    e.addEventListener(t, function i(a) {
                        if (n.once) {
                            e.removeEventListener(t, i);
                        }
                        r(a);
                    });
                } else {
                    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof e);
                }
            }
            var streamBrowser = events.exports.EventEmitter;
            var buffer = {};
            var base64Js = {};
            base64Js.byteLength = byteLength;
            base64Js.toByteArray = toByteArray;
            base64Js.fromByteArray = fromByteArray;
            var lookup = [];
            var revLookup = [];
            var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
            var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
            for(var i = 0, len = code.length; i < len; ++i){
                lookup[i] = code[i];
                revLookup[code.charCodeAt(i)] = i;
            }
            revLookup['-'.charCodeAt(0)] = 62;
            revLookup['_'.charCodeAt(0)] = 63;
            function getLens(e) {
                var t = e.length;
                if (t % 4 > 0) {
                    throw new Error('Invalid string. Length must be a multiple of 4');
                }
                var r = e.indexOf('=');
                if (r === -1) r = t;
                var n = r === t ? 0 : 4 - r % 4;
                return [
                    r,
                    n
                ];
            }
            function byteLength(e) {
                var t = getLens(e);
                var r = t[0];
                var n = t[1];
                return (r + n) * 3 / 4 - n;
            }
            function _byteLength(e, t, r) {
                return (t + r) * 3 / 4 - r;
            }
            function toByteArray(e) {
                var t;
                var r = getLens(e);
                var n = r[0];
                var i = r[1];
                var a = new Arr(_byteLength(e, n, i));
                var o = 0;
                var c = i > 0 ? n - 4 : n;
                var s;
                for(s = 0; s < c; s += 4){
                    t = revLookup[e.charCodeAt(s)] << 18 | revLookup[e.charCodeAt(s + 1)] << 12 | revLookup[e.charCodeAt(s + 2)] << 6 | revLookup[e.charCodeAt(s + 3)];
                    a[o++] = t >> 16 & 0xFF;
                    a[o++] = t >> 8 & 0xFF;
                    a[o++] = t & 0xFF;
                }
                if (i === 2) {
                    t = revLookup[e.charCodeAt(s)] << 2 | revLookup[e.charCodeAt(s + 1)] >> 4;
                    a[o++] = t & 0xFF;
                }
                if (i === 1) {
                    t = revLookup[e.charCodeAt(s)] << 10 | revLookup[e.charCodeAt(s + 1)] << 4 | revLookup[e.charCodeAt(s + 2)] >> 2;
                    a[o++] = t >> 8 & 0xFF;
                    a[o++] = t & 0xFF;
                }
                return a;
            }
            function tripletToBase64(e) {
                return lookup[e >> 18 & 0x3F] + lookup[e >> 12 & 0x3F] + lookup[e >> 6 & 0x3F] + lookup[e & 0x3F];
            }
            function encodeChunk(e, t, r) {
                var n;
                var i = [];
                for(var a = t; a < r; a += 3){
                    n = (e[a] << 16 & 0xFF0000) + (e[a + 1] << 8 & 0xFF00) + (e[a + 2] & 0xFF);
                    i.push(tripletToBase64(n));
                }
                return i.join('');
            }
            function fromByteArray(e) {
                var t;
                var r = e.length;
                var n = r % 3;
                var i = [];
                var a = 16383;
                for(var o = 0, c = r - n; o < c; o += a){
                    i.push(encodeChunk(e, o, o + a > c ? c : o + a));
                }
                if (n === 1) {
                    t = e[r - 1];
                    i.push(lookup[t >> 2] + lookup[t << 4 & 0x3F] + '==');
                } else if (n === 2) {
                    t = (e[r - 2] << 8) + e[r - 1];
                    i.push(lookup[t >> 10] + lookup[t >> 4 & 0x3F] + lookup[t << 2 & 0x3F] + '=');
                }
                return i.join('');
            }
            var ieee754 = {};
            ieee754.read = function(e, t, r, n, i) {
                var a, o;
                var c = i * 8 - n - 1;
                var s = (1 << c) - 1;
                var u = s >> 1;
                var f = -7;
                var l = r ? i - 1 : 0;
                var h = r ? -1 : 1;
                var d = e[t + l];
                l += h;
                a = d & (1 << -f) - 1;
                d >>= -f;
                f += c;
                for(; f > 0; a = a * 256 + e[t + l], l += h, f -= 8){}
                o = a & (1 << -f) - 1;
                a >>= -f;
                f += n;
                for(; f > 0; o = o * 256 + e[t + l], l += h, f -= 8){}
                if (a === 0) {
                    a = 1 - u;
                } else if (a === s) {
                    return o ? NaN : (d ? -1 : 1) * Infinity;
                } else {
                    o = o + Math.pow(2, n);
                    a = a - u;
                }
                return (d ? -1 : 1) * o * Math.pow(2, a - n);
            };
            ieee754.write = function(e, t, r, n, i, a) {
                var o, c, s;
                var u = a * 8 - i - 1;
                var f = (1 << u) - 1;
                var l = f >> 1;
                var h = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
                var d = n ? 0 : a - 1;
                var m = n ? 1 : -1;
                var g = t < 0 || t === 0 && 1 / t < 0 ? 1 : 0;
                t = Math.abs(t);
                if (isNaN(t) || t === Infinity) {
                    c = isNaN(t) ? 1 : 0;
                    o = f;
                } else {
                    o = Math.floor(Math.log(t) / Math.LN2);
                    if (t * (s = Math.pow(2, -o)) < 1) {
                        o--;
                        s *= 2;
                    }
                    if (o + l >= 1) {
                        t += h / s;
                    } else {
                        t += h * Math.pow(2, 1 - l);
                    }
                    if (t * s >= 2) {
                        o++;
                        s /= 2;
                    }
                    if (o + l >= f) {
                        c = 0;
                        o = f;
                    } else if (o + l >= 1) {
                        c = (t * s - 1) * Math.pow(2, i);
                        o = o + l;
                    } else {
                        c = t * Math.pow(2, l - 1) * Math.pow(2, i);
                        o = 0;
                    }
                }
                for(; i >= 8; e[r + d] = c & 0xff, d += m, c /= 256, i -= 8){}
                o = o << i | c;
                u += i;
                for(; u > 0; e[r + d] = o & 0xff, d += m, o /= 256, u -= 8){}
                e[r + d - m] |= g * 128;
            };
            (function(e) {
                var t = base64Js;
                var r = ieee754;
                var n = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for']('nodejs.util.inspect.custom') : null;
                e.Buffer = c;
                e.SlowBuffer = y;
                e.INSPECT_MAX_BYTES = 50;
                var i = 0x7fffffff;
                e.kMaxLength = i;
                c.TYPED_ARRAY_SUPPORT = a();
                if (!c.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
                    console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
                }
                function a() {
                    try {
                        var e = new Uint8Array(1);
                        var t = {
                            foo: function e() {
                                return 42;
                            }
                        };
                        Object.setPrototypeOf(t, Uint8Array.prototype);
                        Object.setPrototypeOf(e, t);
                        return e.foo() === 42;
                    } catch (r) {
                        return false;
                    }
                }
                Object.defineProperty(c.prototype, 'parent', {
                    enumerable: true,
                    get: function e() {
                        if (!c.isBuffer(this)) return undefined;
                        return this.buffer;
                    }
                });
                Object.defineProperty(c.prototype, 'offset', {
                    enumerable: true,
                    get: function e() {
                        if (!c.isBuffer(this)) return undefined;
                        return this.byteOffset;
                    }
                });
                function o(e) {
                    if (e > i) {
                        throw new RangeError('The value "' + e + '" is invalid for option "size"');
                    }
                    var t = new Uint8Array(e);
                    Object.setPrototypeOf(t, c.prototype);
                    return t;
                }
                function c(e, t, r) {
                    if (typeof e === 'number') {
                        if (typeof t === 'string') {
                            throw new TypeError('The "string" argument must be of type string. Received type number');
                        }
                        return l(e);
                    }
                    return s(e, t, r);
                }
                c.poolSize = 8192;
                function s(e, t, r) {
                    if (typeof e === 'string') {
                        return h(e, t);
                    }
                    if (ArrayBuffer.isView(e)) {
                        return m(e);
                    }
                    if (e == null) {
                        throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof e);
                    }
                    if (H(e, ArrayBuffer) || e && H(e.buffer, ArrayBuffer)) {
                        return g(e, t, r);
                    }
                    if (typeof SharedArrayBuffer !== 'undefined' && (H(e, SharedArrayBuffer) || e && H(e.buffer, SharedArrayBuffer))) {
                        return g(e, t, r);
                    }
                    if (typeof e === 'number') {
                        throw new TypeError('The "value" argument must not be of type number. Received type number');
                    }
                    var n = e.valueOf && e.valueOf();
                    if (n != null && n !== e) {
                        return c.from(n, t, r);
                    }
                    var i = p(e);
                    if (i) return i;
                    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof e[Symbol.toPrimitive] === 'function') {
                        return c.from(e[Symbol.toPrimitive]('string'), t, r);
                    }
                    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof e);
                }
                c.from = function(e, t, r) {
                    return s(e, t, r);
                };
                Object.setPrototypeOf(c.prototype, Uint8Array.prototype);
                Object.setPrototypeOf(c, Uint8Array);
                function u(e) {
                    if (typeof e !== 'number') {
                        throw new TypeError('"size" argument must be of type number');
                    } else if (e < 0) {
                        throw new RangeError('The value "' + e + '" is invalid for option "size"');
                    }
                }
                function f(e, t, r) {
                    u(e);
                    if (e <= 0) {
                        return o(e);
                    }
                    if (t !== undefined) {
                        return typeof r === 'string' ? o(e).fill(t, r) : o(e).fill(t);
                    }
                    return o(e);
                }
                c.alloc = function(e, t, r) {
                    return f(e, t, r);
                };
                function l(e) {
                    u(e);
                    return o(e < 0 ? 0 : v(e) | 0);
                }
                c.allocUnsafe = function(e) {
                    return l(e);
                };
                c.allocUnsafeSlow = function(e) {
                    return l(e);
                };
                function h(e, t) {
                    if (typeof t !== 'string' || t === '') {
                        t = 'utf8';
                    }
                    if (!c.isEncoding(t)) {
                        throw new TypeError('Unknown encoding: ' + t);
                    }
                    var r = b(e, t) | 0;
                    var n = o(r);
                    var i = n.write(e, t);
                    if (i !== r) {
                        n = n.slice(0, i);
                    }
                    return n;
                }
                function d(e) {
                    var t = e.length < 0 ? 0 : v(e.length) | 0;
                    var r = o(t);
                    for(var n = 0; n < t; n += 1){
                        r[n] = e[n] & 255;
                    }
                    return r;
                }
                function m(e) {
                    if (H(e, Uint8Array)) {
                        var t = new Uint8Array(e);
                        return g(t.buffer, t.byteOffset, t.byteLength);
                    }
                    return d(e);
                }
                function g(e, t, r) {
                    if (t < 0 || e.byteLength < t) {
                        throw new RangeError('"offset" is outside of buffer bounds');
                    }
                    if (e.byteLength < t + (r || 0)) {
                        throw new RangeError('"length" is outside of buffer bounds');
                    }
                    var n;
                    if (t === undefined && r === undefined) {
                        n = new Uint8Array(e);
                    } else if (r === undefined) {
                        n = new Uint8Array(e, t);
                    } else {
                        n = new Uint8Array(e, t, r);
                    }
                    Object.setPrototypeOf(n, c.prototype);
                    return n;
                }
                function p(e) {
                    if (c.isBuffer(e)) {
                        var t = v(e.length) | 0;
                        var r = o(t);
                        if (r.length === 0) {
                            return r;
                        }
                        e.copy(r, 0, 0, t);
                        return r;
                    }
                    if (e.length !== undefined) {
                        if (typeof e.length !== 'number' || J(e.length)) {
                            return o(0);
                        }
                        return d(e);
                    }
                    if (e.type === 'Buffer' && Array.isArray(e.data)) {
                        return d(e.data);
                    }
                }
                function v(e) {
                    if (e >= i) {
                        throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + i.toString(16) + ' bytes');
                    }
                    return e | 0;
                }
                function y(e) {
                    if (+e != e) {
                        e = 0;
                    }
                    return c.alloc(+e);
                }
                c.isBuffer = function e(t) {
                    return t != null && t._isBuffer === true && t !== c.prototype;
                };
                c.compare = function e(t, r) {
                    if (H(t, Uint8Array)) t = c.from(t, t.offset, t.byteLength);
                    if (H(r, Uint8Array)) r = c.from(r, r.offset, r.byteLength);
                    if (!c.isBuffer(t) || !c.isBuffer(r)) {
                        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
                    }
                    if (t === r) return 0;
                    var n = t.length;
                    var i = r.length;
                    for(var a = 0, o = Math.min(n, i); a < o; ++a){
                        if (t[a] !== r[a]) {
                            n = t[a];
                            i = r[a];
                            break;
                        }
                    }
                    if (n < i) return -1;
                    if (i < n) return 1;
                    return 0;
                };
                c.isEncoding = function e(t) {
                    switch(String(t).toLowerCase()){
                        case 'hex':
                        case 'utf8':
                        case 'utf-8':
                        case 'ascii':
                        case 'latin1':
                        case 'binary':
                        case 'base64':
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return true;
                        default:
                            return false;
                    }
                };
                c.concat = function e(t, r) {
                    if (!Array.isArray(t)) {
                        throw new TypeError('"list" argument must be an Array of Buffers');
                    }
                    if (t.length === 0) {
                        return c.alloc(0);
                    }
                    var n;
                    if (r === undefined) {
                        r = 0;
                        for(n = 0; n < t.length; ++n){
                            r += t[n].length;
                        }
                    }
                    var i = c.allocUnsafe(r);
                    var a = 0;
                    for(n = 0; n < t.length; ++n){
                        var o = t[n];
                        if (H(o, Uint8Array)) {
                            if (a + o.length > i.length) {
                                c.from(o).copy(i, a);
                            } else {
                                Uint8Array.prototype.set.call(i, o, a);
                            }
                        } else if (!c.isBuffer(o)) {
                            throw new TypeError('"list" argument must be an Array of Buffers');
                        } else {
                            o.copy(i, a);
                        }
                        a += o.length;
                    }
                    return i;
                };
                function b(e, t) {
                    if (c.isBuffer(e)) {
                        return e.length;
                    }
                    if (ArrayBuffer.isView(e) || H(e, ArrayBuffer)) {
                        return e.byteLength;
                    }
                    if (typeof e !== 'string') {
                        throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof e);
                    }
                    var r = e.length;
                    var n = arguments.length > 2 && arguments[2] === true;
                    if (!n && r === 0) return 0;
                    var i = false;
                    for(;;){
                        switch(t){
                            case 'ascii':
                            case 'latin1':
                            case 'binary':
                                return r;
                            case 'utf8':
                            case 'utf-8':
                                return z(e).length;
                            case 'ucs2':
                            case 'ucs-2':
                            case 'utf16le':
                            case 'utf-16le':
                                return r * 2;
                            case 'hex':
                                return r >>> 1;
                            case 'base64':
                                return Z(e).length;
                            default:
                                if (i) {
                                    return n ? -1 : z(e).length;
                                }
                                t = ('' + t).toLowerCase();
                                i = true;
                        }
                    }
                }
                c.byteLength = b;
                function A(e, t, r) {
                    var n = false;
                    if (t === undefined || t < 0) {
                        t = 0;
                    }
                    if (t > this.length) {
                        return '';
                    }
                    if (r === undefined || r > this.length) {
                        r = this.length;
                    }
                    if (r <= 0) {
                        return '';
                    }
                    r >>>= 0;
                    t >>>= 0;
                    if (r <= t) {
                        return '';
                    }
                    if (!e) e = 'utf8';
                    while(true){
                        switch(e){
                            case 'hex':
                                return D(this, t, r);
                            case 'utf8':
                            case 'utf-8':
                                return U(this, t, r);
                            case 'ascii':
                                return F(this, t, r);
                            case 'latin1':
                            case 'binary':
                                return I(this, t, r);
                            case 'base64':
                                return R(this, t, r);
                            case 'ucs2':
                            case 'ucs-2':
                            case 'utf16le':
                            case 'utf-16le':
                                return L(this, t, r);
                            default:
                                if (n) throw new TypeError('Unknown encoding: ' + e);
                                e = (e + '').toLowerCase();
                                n = true;
                        }
                    }
                }
                c.prototype._isBuffer = true;
                function w(e, t, r) {
                    var n = e[t];
                    e[t] = e[r];
                    e[r] = n;
                }
                c.prototype.swap16 = function e() {
                    var t = this.length;
                    if (t % 2 !== 0) {
                        throw new RangeError('Buffer size must be a multiple of 16-bits');
                    }
                    for(var r = 0; r < t; r += 2){
                        w(this, r, r + 1);
                    }
                    return this;
                };
                c.prototype.swap32 = function e() {
                    var t = this.length;
                    if (t % 4 !== 0) {
                        throw new RangeError('Buffer size must be a multiple of 32-bits');
                    }
                    for(var r = 0; r < t; r += 4){
                        w(this, r, r + 3);
                        w(this, r + 1, r + 2);
                    }
                    return this;
                };
                c.prototype.swap64 = function e() {
                    var t = this.length;
                    if (t % 8 !== 0) {
                        throw new RangeError('Buffer size must be a multiple of 64-bits');
                    }
                    for(var r = 0; r < t; r += 8){
                        w(this, r, r + 7);
                        w(this, r + 1, r + 6);
                        w(this, r + 2, r + 5);
                        w(this, r + 3, r + 4);
                    }
                    return this;
                };
                c.prototype.toString = function e() {
                    var t = this.length;
                    if (t === 0) return '';
                    if (arguments.length === 0) return U(this, 0, t);
                    return A.apply(this, arguments);
                };
                c.prototype.toLocaleString = c.prototype.toString;
                c.prototype.equals = function e(t) {
                    if (!c.isBuffer(t)) throw new TypeError('Argument must be a Buffer');
                    if (this === t) return true;
                    return c.compare(this, t) === 0;
                };
                c.prototype.inspect = function t() {
                    var r = '';
                    var n = e.INSPECT_MAX_BYTES;
                    r = this.toString('hex', 0, n).replace(/(.{2})/g, '$1 ').trim();
                    if (this.length > n) r += ' ... ';
                    return '<Buffer ' + r + '>';
                };
                if (n) {
                    c.prototype[n] = c.prototype.inspect;
                }
                c.prototype.compare = function e(t, r, n, i, a) {
                    if (H(t, Uint8Array)) {
                        t = c.from(t, t.offset, t.byteLength);
                    }
                    if (!c.isBuffer(t)) {
                        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof t);
                    }
                    if (r === undefined) {
                        r = 0;
                    }
                    if (n === undefined) {
                        n = t ? t.length : 0;
                    }
                    if (i === undefined) {
                        i = 0;
                    }
                    if (a === undefined) {
                        a = this.length;
                    }
                    if (r < 0 || n > t.length || i < 0 || a > this.length) {
                        throw new RangeError('out of range index');
                    }
                    if (i >= a && r >= n) {
                        return 0;
                    }
                    if (i >= a) {
                        return -1;
                    }
                    if (r >= n) {
                        return 1;
                    }
                    r >>>= 0;
                    n >>>= 0;
                    i >>>= 0;
                    a >>>= 0;
                    if (this === t) return 0;
                    var o = a - i;
                    var s = n - r;
                    var u = Math.min(o, s);
                    var f = this.slice(i, a);
                    var l = t.slice(r, n);
                    for(var h = 0; h < u; ++h){
                        if (f[h] !== l[h]) {
                            o = f[h];
                            s = l[h];
                            break;
                        }
                    }
                    if (o < s) return -1;
                    if (s < o) return 1;
                    return 0;
                };
                function _(e, t, r, n, i) {
                    if (e.length === 0) return -1;
                    if (typeof r === 'string') {
                        n = r;
                        r = 0;
                    } else if (r > 0x7fffffff) {
                        r = 0x7fffffff;
                    } else if (r < -0x80000000) {
                        r = -0x80000000;
                    }
                    r = +r;
                    if (J(r)) {
                        r = i ? 0 : e.length - 1;
                    }
                    if (r < 0) r = e.length + r;
                    if (r >= e.length) {
                        if (i) return -1;
                        else r = e.length - 1;
                    } else if (r < 0) {
                        if (i) r = 0;
                        else return -1;
                    }
                    if (typeof t === 'string') {
                        t = c.from(t, n);
                    }
                    if (c.isBuffer(t)) {
                        if (t.length === 0) {
                            return -1;
                        }
                        return O(e, t, r, n, i);
                    } else if (typeof t === 'number') {
                        t = t & 0xFF;
                        if (typeof Uint8Array.prototype.indexOf === 'function') {
                            if (i) {
                                return Uint8Array.prototype.indexOf.call(e, t, r);
                            } else {
                                return Uint8Array.prototype.lastIndexOf.call(e, t, r);
                            }
                        }
                        return O(e, [
                            t
                        ], r, n, i);
                    }
                    throw new TypeError('val must be string, number or Buffer');
                }
                function O(e, t, r, n, i) {
                    var a = 1;
                    var o = e.length;
                    var c = t.length;
                    if (n !== undefined) {
                        n = String(n).toLowerCase();
                        if (n === 'ucs2' || n === 'ucs-2' || n === 'utf16le' || n === 'utf-16le') {
                            if (e.length < 2 || t.length < 2) {
                                return -1;
                            }
                            a = 2;
                            o /= 2;
                            c /= 2;
                            r /= 2;
                        }
                    }
                    function s(e, t) {
                        if (a === 1) {
                            return e[t];
                        } else {
                            return e.readUInt16BE(t * a);
                        }
                    }
                    var u;
                    if (i) {
                        var f = -1;
                        for(u = r; u < o; u++){
                            if (s(e, u) === s(t, f === -1 ? 0 : u - f)) {
                                if (f === -1) f = u;
                                if (u - f + 1 === c) return f * a;
                            } else {
                                if (f !== -1) u -= u - f;
                                f = -1;
                            }
                        }
                    } else {
                        if (r + c > o) r = o - c;
                        for(u = r; u >= 0; u--){
                            var l = true;
                            for(var h = 0; h < c; h++){
                                if (s(e, u + h) !== s(t, h)) {
                                    l = false;
                                    break;
                                }
                            }
                            if (l) return u;
                        }
                    }
                    return -1;
                }
                c.prototype.includes = function e(t, r, n) {
                    return this.indexOf(t, r, n) !== -1;
                };
                c.prototype.indexOf = function e(t, r, n) {
                    return _(this, t, r, n, true);
                };
                c.prototype.lastIndexOf = function e(t, r, n) {
                    return _(this, t, r, n, false);
                };
                function S(e, t, r, n) {
                    r = Number(r) || 0;
                    var i = e.length - r;
                    if (!n) {
                        n = i;
                    } else {
                        n = Number(n);
                        if (n > i) {
                            n = i;
                        }
                    }
                    var a = t.length;
                    if (n > a / 2) {
                        n = a / 2;
                    }
                    for(var o = 0; o < n; ++o){
                        var c = parseInt(t.substr(o * 2, 2), 16);
                        if (J(c)) return o;
                        e[r + o] = c;
                    }
                    return o;
                }
                function E(e, t, r, n) {
                    return K(z(t, e.length - r), e, r, n);
                }
                function T(e, t, r, n) {
                    return K(V(t), e, r, n);
                }
                function x(e, t, r, n) {
                    return K(Z(t), e, r, n);
                }
                function k(e, t, r, n) {
                    return K(G(t, e.length - r), e, r, n);
                }
                c.prototype.write = function e(t, r, n, i) {
                    if (r === undefined) {
                        i = 'utf8';
                        n = this.length;
                        r = 0;
                    } else if (n === undefined && typeof r === 'string') {
                        i = r;
                        n = this.length;
                        r = 0;
                    } else if (isFinite(r)) {
                        r = r >>> 0;
                        if (isFinite(n)) {
                            n = n >>> 0;
                            if (i === undefined) i = 'utf8';
                        } else {
                            i = n;
                            n = undefined;
                        }
                    } else {
                        throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
                    }
                    var a = this.length - r;
                    if (n === undefined || n > a) n = a;
                    if (t.length > 0 && (n < 0 || r < 0) || r > this.length) {
                        throw new RangeError('Attempt to write outside buffer bounds');
                    }
                    if (!i) i = 'utf8';
                    var o = false;
                    for(;;){
                        switch(i){
                            case 'hex':
                                return S(this, t, r, n);
                            case 'utf8':
                            case 'utf-8':
                                return E(this, t, r, n);
                            case 'ascii':
                            case 'latin1':
                            case 'binary':
                                return T(this, t, r, n);
                            case 'base64':
                                return x(this, t, r, n);
                            case 'ucs2':
                            case 'ucs-2':
                            case 'utf16le':
                            case 'utf-16le':
                                return k(this, t, r, n);
                            default:
                                if (o) throw new TypeError('Unknown encoding: ' + i);
                                i = ('' + i).toLowerCase();
                                o = true;
                        }
                    }
                };
                c.prototype.toJSON = function e() {
                    return {
                        type: 'Buffer',
                        data: Array.prototype.slice.call(this._arr || this, 0)
                    };
                };
                function R(e, r, n) {
                    if (r === 0 && n === e.length) {
                        return t.fromByteArray(e);
                    } else {
                        return t.fromByteArray(e.slice(r, n));
                    }
                }
                function U(e, t, r) {
                    r = Math.min(e.length, r);
                    var n = [];
                    var i = t;
                    while(i < r){
                        var a = e[i];
                        var o = null;
                        var c = a > 0xEF ? 4 : a > 0xDF ? 3 : a > 0xBF ? 2 : 1;
                        if (i + c <= r) {
                            var s, u, f, l;
                            switch(c){
                                case 1:
                                    if (a < 0x80) {
                                        o = a;
                                    }
                                    break;
                                case 2:
                                    s = e[i + 1];
                                    if ((s & 0xC0) === 0x80) {
                                        l = (a & 0x1F) << 0x6 | s & 0x3F;
                                        if (l > 0x7F) {
                                            o = l;
                                        }
                                    }
                                    break;
                                case 3:
                                    s = e[i + 1];
                                    u = e[i + 2];
                                    if ((s & 0xC0) === 0x80 && (u & 0xC0) === 0x80) {
                                        l = (a & 0xF) << 0xC | (s & 0x3F) << 0x6 | u & 0x3F;
                                        if (l > 0x7FF && (l < 0xD800 || l > 0xDFFF)) {
                                            o = l;
                                        }
                                    }
                                    break;
                                case 4:
                                    s = e[i + 1];
                                    u = e[i + 2];
                                    f = e[i + 3];
                                    if ((s & 0xC0) === 0x80 && (u & 0xC0) === 0x80 && (f & 0xC0) === 0x80) {
                                        l = (a & 0xF) << 0x12 | (s & 0x3F) << 0xC | (u & 0x3F) << 0x6 | f & 0x3F;
                                        if (l > 0xFFFF && l < 0x110000) {
                                            o = l;
                                        }
                                    }
                            }
                        }
                        if (o === null) {
                            o = 0xFFFD;
                            c = 1;
                        } else if (o > 0xFFFF) {
                            o -= 0x10000;
                            n.push(o >>> 10 & 0x3FF | 0xD800);
                            o = 0xDC00 | o & 0x3FF;
                        }
                        n.push(o);
                        i += c;
                    }
                    return P(n);
                }
                var C = 0x1000;
                function P(e) {
                    var t = e.length;
                    if (t <= C) {
                        return String.fromCharCode.apply(String, e);
                    }
                    var r = '';
                    var n = 0;
                    while(n < t){
                        r += String.fromCharCode.apply(String, e.slice(n, n += C));
                    }
                    return r;
                }
                function F(e, t, r) {
                    var n = '';
                    r = Math.min(e.length, r);
                    for(var i = t; i < r; ++i){
                        n += String.fromCharCode(e[i] & 0x7F);
                    }
                    return n;
                }
                function I(e, t, r) {
                    var n = '';
                    r = Math.min(e.length, r);
                    for(var i = t; i < r; ++i){
                        n += String.fromCharCode(e[i]);
                    }
                    return n;
                }
                function D(e, t, r) {
                    var n = e.length;
                    if (!t || t < 0) t = 0;
                    if (!r || r < 0 || r > n) r = n;
                    var i = '';
                    for(var a = t; a < r; ++a){
                        i += X[e[a]];
                    }
                    return i;
                }
                function L(e, t, r) {
                    var n = e.slice(t, r);
                    var i = '';
                    for(var a = 0; a < n.length - 1; a += 2){
                        i += String.fromCharCode(n[a] + n[a + 1] * 256);
                    }
                    return i;
                }
                c.prototype.slice = function e(t, r) {
                    var n = this.length;
                    t = ~~t;
                    r = r === undefined ? n : ~~r;
                    if (t < 0) {
                        t += n;
                        if (t < 0) t = 0;
                    } else if (t > n) {
                        t = n;
                    }
                    if (r < 0) {
                        r += n;
                        if (r < 0) r = 0;
                    } else if (r > n) {
                        r = n;
                    }
                    if (r < t) r = t;
                    var i = this.subarray(t, r);
                    Object.setPrototypeOf(i, c.prototype);
                    return i;
                };
                function N(e, t, r) {
                    if (e % 1 !== 0 || e < 0) throw new RangeError('offset is not uint');
                    if (e + t > r) throw new RangeError('Trying to access beyond buffer length');
                }
                c.prototype.readUintLE = c.prototype.readUIntLE = function e(t, r, n) {
                    t = t >>> 0;
                    r = r >>> 0;
                    if (!n) N(t, r, this.length);
                    var i = this[t];
                    var a = 1;
                    var o = 0;
                    while(++o < r && (a *= 0x100)){
                        i += this[t + o] * a;
                    }
                    return i;
                };
                c.prototype.readUintBE = c.prototype.readUIntBE = function e(t, r, n) {
                    t = t >>> 0;
                    r = r >>> 0;
                    if (!n) {
                        N(t, r, this.length);
                    }
                    var i = this[t + --r];
                    var a = 1;
                    while(r > 0 && (a *= 0x100)){
                        i += this[t + --r] * a;
                    }
                    return i;
                };
                c.prototype.readUint8 = c.prototype.readUInt8 = function e(t, r) {
                    t = t >>> 0;
                    if (!r) N(t, 1, this.length);
                    return this[t];
                };
                c.prototype.readUint16LE = c.prototype.readUInt16LE = function e(t, r) {
                    t = t >>> 0;
                    if (!r) N(t, 2, this.length);
                    return this[t] | this[t + 1] << 8;
                };
                c.prototype.readUint16BE = c.prototype.readUInt16BE = function e(t, r) {
                    t = t >>> 0;
                    if (!r) N(t, 2, this.length);
                    return this[t] << 8 | this[t + 1];
                };
                c.prototype.readUint32LE = c.prototype.readUInt32LE = function e(t, r) {
                    t = t >>> 0;
                    if (!r) N(t, 4, this.length);
                    return (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + this[t + 3] * 0x1000000;
                };
                c.prototype.readUint32BE = c.prototype.readUInt32BE = function e(t, r) {
                    t = t >>> 0;
                    if (!r) N(t, 4, this.length);
                    return this[t] * 0x1000000 + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]);
                };
                c.prototype.readIntLE = function e(t, r, n) {
                    t = t >>> 0;
                    r = r >>> 0;
                    if (!n) N(t, r, this.length);
                    var i = this[t];
                    var a = 1;
                    var o = 0;
                    while(++o < r && (a *= 0x100)){
                        i += this[t + o] * a;
                    }
                    a *= 0x80;
                    if (i >= a) i -= Math.pow(2, 8 * r);
                    return i;
                };
                c.prototype.readIntBE = function e(t, r, n) {
                    t = t >>> 0;
                    r = r >>> 0;
                    if (!n) N(t, r, this.length);
                    var i = r;
                    var a = 1;
                    var o = this[t + --i];
                    while(i > 0 && (a *= 0x100)){
                        o += this[t + --i] * a;
                    }
                    a *= 0x80;
                    if (o >= a) o -= Math.pow(2, 8 * r);
                    return o;
                };
                c.prototype.readInt8 = function e(t, r) {
                    t = t >>> 0;
                    if (!r) N(t, 1, this.length);
                    if (!(this[t] & 0x80)) return this[t];
                    return (0xff - this[t] + 1) * -1;
                };
                c.prototype.readInt16LE = function e(t, r) {
                    t = t >>> 0;
                    if (!r) N(t, 2, this.length);
                    var n = this[t] | this[t + 1] << 8;
                    return n & 0x8000 ? n | 0xFFFF0000 : n;
                };
                c.prototype.readInt16BE = function e(t, r) {
                    t = t >>> 0;
                    if (!r) N(t, 2, this.length);
                    var n = this[t + 1] | this[t] << 8;
                    return n & 0x8000 ? n | 0xFFFF0000 : n;
                };
                c.prototype.readInt32LE = function e(t, r) {
                    t = t >>> 0;
                    if (!r) N(t, 4, this.length);
                    return this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24;
                };
                c.prototype.readInt32BE = function e(t, r) {
                    t = t >>> 0;
                    if (!r) N(t, 4, this.length);
                    return this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3];
                };
                c.prototype.readFloatLE = function e(t, n) {
                    t = t >>> 0;
                    if (!n) N(t, 4, this.length);
                    return r.read(this, t, true, 23, 4);
                };
                c.prototype.readFloatBE = function e(t, n) {
                    t = t >>> 0;
                    if (!n) N(t, 4, this.length);
                    return r.read(this, t, false, 23, 4);
                };
                c.prototype.readDoubleLE = function e(t, n) {
                    t = t >>> 0;
                    if (!n) N(t, 8, this.length);
                    return r.read(this, t, true, 52, 8);
                };
                c.prototype.readDoubleBE = function e(t, n) {
                    t = t >>> 0;
                    if (!n) N(t, 8, this.length);
                    return r.read(this, t, false, 52, 8);
                };
                function j(e, t, r, n, i, a) {
                    if (!c.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
                    if (t > i || t < a) throw new RangeError('"value" argument is out of bounds');
                    if (r + n > e.length) throw new RangeError('Index out of range');
                }
                c.prototype.writeUintLE = c.prototype.writeUIntLE = function e(t, r, n, i) {
                    t = +t;
                    r = r >>> 0;
                    n = n >>> 0;
                    if (!i) {
                        var a = Math.pow(2, 8 * n) - 1;
                        j(this, t, r, n, a, 0);
                    }
                    var o = 1;
                    var c = 0;
                    this[r] = t & 0xFF;
                    while(++c < n && (o *= 0x100)){
                        this[r + c] = t / o & 0xFF;
                    }
                    return r + n;
                };
                c.prototype.writeUintBE = c.prototype.writeUIntBE = function e(t, r, n, i) {
                    t = +t;
                    r = r >>> 0;
                    n = n >>> 0;
                    if (!i) {
                        var a = Math.pow(2, 8 * n) - 1;
                        j(this, t, r, n, a, 0);
                    }
                    var o = n - 1;
                    var c = 1;
                    this[r + o] = t & 0xFF;
                    while(--o >= 0 && (c *= 0x100)){
                        this[r + o] = t / c & 0xFF;
                    }
                    return r + n;
                };
                c.prototype.writeUint8 = c.prototype.writeUInt8 = function e(t, r, n) {
                    t = +t;
                    r = r >>> 0;
                    if (!n) j(this, t, r, 1, 0xff, 0);
                    this[r] = t & 0xff;
                    return r + 1;
                };
                c.prototype.writeUint16LE = c.prototype.writeUInt16LE = function e(t, r, n) {
                    t = +t;
                    r = r >>> 0;
                    if (!n) j(this, t, r, 2, 0xffff, 0);
                    this[r] = t & 0xff;
                    this[r + 1] = t >>> 8;
                    return r + 2;
                };
                c.prototype.writeUint16BE = c.prototype.writeUInt16BE = function e(t, r, n) {
                    t = +t;
                    r = r >>> 0;
                    if (!n) j(this, t, r, 2, 0xffff, 0);
                    this[r] = t >>> 8;
                    this[r + 1] = t & 0xff;
                    return r + 2;
                };
                c.prototype.writeUint32LE = c.prototype.writeUInt32LE = function e(t, r, n) {
                    t = +t;
                    r = r >>> 0;
                    if (!n) j(this, t, r, 4, 0xffffffff, 0);
                    this[r + 3] = t >>> 24;
                    this[r + 2] = t >>> 16;
                    this[r + 1] = t >>> 8;
                    this[r] = t & 0xff;
                    return r + 4;
                };
                c.prototype.writeUint32BE = c.prototype.writeUInt32BE = function e(t, r, n) {
                    t = +t;
                    r = r >>> 0;
                    if (!n) j(this, t, r, 4, 0xffffffff, 0);
                    this[r] = t >>> 24;
                    this[r + 1] = t >>> 16;
                    this[r + 2] = t >>> 8;
                    this[r + 3] = t & 0xff;
                    return r + 4;
                };
                c.prototype.writeIntLE = function e(t, r, n, i) {
                    t = +t;
                    r = r >>> 0;
                    if (!i) {
                        var a = Math.pow(2, 8 * n - 1);
                        j(this, t, r, n, a - 1, -a);
                    }
                    var o = 0;
                    var c = 1;
                    var s = 0;
                    this[r] = t & 0xFF;
                    while(++o < n && (c *= 0x100)){
                        if (t < 0 && s === 0 && this[r + o - 1] !== 0) {
                            s = 1;
                        }
                        this[r + o] = (t / c >> 0) - s & 0xFF;
                    }
                    return r + n;
                };
                c.prototype.writeIntBE = function e(t, r, n, i) {
                    t = +t;
                    r = r >>> 0;
                    if (!i) {
                        var a = Math.pow(2, 8 * n - 1);
                        j(this, t, r, n, a - 1, -a);
                    }
                    var o = n - 1;
                    var c = 1;
                    var s = 0;
                    this[r + o] = t & 0xFF;
                    while(--o >= 0 && (c *= 0x100)){
                        if (t < 0 && s === 0 && this[r + o + 1] !== 0) {
                            s = 1;
                        }
                        this[r + o] = (t / c >> 0) - s & 0xFF;
                    }
                    return r + n;
                };
                c.prototype.writeInt8 = function e(t, r, n) {
                    t = +t;
                    r = r >>> 0;
                    if (!n) j(this, t, r, 1, 0x7f, -0x80);
                    if (t < 0) t = 0xff + t + 1;
                    this[r] = t & 0xff;
                    return r + 1;
                };
                c.prototype.writeInt16LE = function e(t, r, n) {
                    t = +t;
                    r = r >>> 0;
                    if (!n) j(this, t, r, 2, 0x7fff, -0x8000);
                    this[r] = t & 0xff;
                    this[r + 1] = t >>> 8;
                    return r + 2;
                };
                c.prototype.writeInt16BE = function e(t, r, n) {
                    t = +t;
                    r = r >>> 0;
                    if (!n) j(this, t, r, 2, 0x7fff, -0x8000);
                    this[r] = t >>> 8;
                    this[r + 1] = t & 0xff;
                    return r + 2;
                };
                c.prototype.writeInt32LE = function e(t, r, n) {
                    t = +t;
                    r = r >>> 0;
                    if (!n) j(this, t, r, 4, 0x7fffffff, -0x80000000);
                    this[r] = t & 0xff;
                    this[r + 1] = t >>> 8;
                    this[r + 2] = t >>> 16;
                    this[r + 3] = t >>> 24;
                    return r + 4;
                };
                c.prototype.writeInt32BE = function e(t, r, n) {
                    t = +t;
                    r = r >>> 0;
                    if (!n) j(this, t, r, 4, 0x7fffffff, -0x80000000);
                    if (t < 0) t = 0xffffffff + t + 1;
                    this[r] = t >>> 24;
                    this[r + 1] = t >>> 16;
                    this[r + 2] = t >>> 8;
                    this[r + 3] = t & 0xff;
                    return r + 4;
                };
                function M(e, t, r, n, i, a) {
                    if (r + n > e.length) throw new RangeError('Index out of range');
                    if (r < 0) throw new RangeError('Index out of range');
                }
                function B(e, t, n, i, a) {
                    t = +t;
                    n = n >>> 0;
                    if (!a) {
                        M(e, t, n, 4);
                    }
                    r.write(e, t, n, i, 23, 4);
                    return n + 4;
                }
                c.prototype.writeFloatLE = function e(t, r, n) {
                    return B(this, t, r, true, n);
                };
                c.prototype.writeFloatBE = function e(t, r, n) {
                    return B(this, t, r, false, n);
                };
                function Y(e, t, n, i, a) {
                    t = +t;
                    n = n >>> 0;
                    if (!a) {
                        M(e, t, n, 8);
                    }
                    r.write(e, t, n, i, 52, 8);
                    return n + 8;
                }
                c.prototype.writeDoubleLE = function e(t, r, n) {
                    return Y(this, t, r, true, n);
                };
                c.prototype.writeDoubleBE = function e(t, r, n) {
                    return Y(this, t, r, false, n);
                };
                c.prototype.copy = function e(t, r, n, i) {
                    if (!c.isBuffer(t)) throw new TypeError('argument should be a Buffer');
                    if (!n) n = 0;
                    if (!i && i !== 0) i = this.length;
                    if (r >= t.length) r = t.length;
                    if (!r) r = 0;
                    if (i > 0 && i < n) i = n;
                    if (i === n) return 0;
                    if (t.length === 0 || this.length === 0) return 0;
                    if (r < 0) {
                        throw new RangeError('targetStart out of bounds');
                    }
                    if (n < 0 || n >= this.length) throw new RangeError('Index out of range');
                    if (i < 0) throw new RangeError('sourceEnd out of bounds');
                    if (i > this.length) i = this.length;
                    if (t.length - r < i - n) {
                        i = t.length - r + n;
                    }
                    var a = i - n;
                    if (this === t && typeof Uint8Array.prototype.copyWithin === 'function') {
                        this.copyWithin(r, n, i);
                    } else {
                        Uint8Array.prototype.set.call(t, this.subarray(n, i), r);
                    }
                    return a;
                };
                c.prototype.fill = function e(t, r, n, i) {
                    if (typeof t === 'string') {
                        if (typeof r === 'string') {
                            i = r;
                            r = 0;
                            n = this.length;
                        } else if (typeof n === 'string') {
                            i = n;
                            n = this.length;
                        }
                        if (i !== undefined && typeof i !== 'string') {
                            throw new TypeError('encoding must be a string');
                        }
                        if (typeof i === 'string' && !c.isEncoding(i)) {
                            throw new TypeError('Unknown encoding: ' + i);
                        }
                        if (t.length === 1) {
                            var a = t.charCodeAt(0);
                            if (i === 'utf8' && a < 128 || i === 'latin1') {
                                t = a;
                            }
                        }
                    } else if (typeof t === 'number') {
                        t = t & 255;
                    } else if (typeof t === 'boolean') {
                        t = Number(t);
                    }
                    if (r < 0 || this.length < r || this.length < n) {
                        throw new RangeError('Out of range index');
                    }
                    if (n <= r) {
                        return this;
                    }
                    r = r >>> 0;
                    n = n === undefined ? this.length : n >>> 0;
                    if (!t) t = 0;
                    var o;
                    if (typeof t === 'number') {
                        for(o = r; o < n; ++o){
                            this[o] = t;
                        }
                    } else {
                        var s = c.isBuffer(t) ? t : c.from(t, i);
                        var u = s.length;
                        if (u === 0) {
                            throw new TypeError('The value "' + t + '" is invalid for argument "value"');
                        }
                        for(o = 0; o < n - r; ++o){
                            this[o + r] = s[o % u];
                        }
                    }
                    return this;
                };
                var W = /[^+/0-9A-Za-z-_]/g;
                function q(e) {
                    e = e.split('=')[0];
                    e = e.trim().replace(W, '');
                    if (e.length < 2) return '';
                    while(e.length % 4 !== 0){
                        e = e + '=';
                    }
                    return e;
                }
                function z(e, t) {
                    t = t || Infinity;
                    var r;
                    var n = e.length;
                    var i = null;
                    var a = [];
                    for(var o = 0; o < n; ++o){
                        r = e.charCodeAt(o);
                        if (r > 0xD7FF && r < 0xE000) {
                            if (!i) {
                                if (r > 0xDBFF) {
                                    if ((t -= 3) > -1) a.push(0xEF, 0xBF, 0xBD);
                                    continue;
                                } else if (o + 1 === n) {
                                    if ((t -= 3) > -1) a.push(0xEF, 0xBF, 0xBD);
                                    continue;
                                }
                                i = r;
                                continue;
                            }
                            if (r < 0xDC00) {
                                if ((t -= 3) > -1) a.push(0xEF, 0xBF, 0xBD);
                                i = r;
                                continue;
                            }
                            r = (i - 0xD800 << 10 | r - 0xDC00) + 0x10000;
                        } else if (i) {
                            if ((t -= 3) > -1) a.push(0xEF, 0xBF, 0xBD);
                        }
                        i = null;
                        if (r < 0x80) {
                            if ((t -= 1) < 0) break;
                            a.push(r);
                        } else if (r < 0x800) {
                            if ((t -= 2) < 0) break;
                            a.push(r >> 0x6 | 0xC0, r & 0x3F | 0x80);
                        } else if (r < 0x10000) {
                            if ((t -= 3) < 0) break;
                            a.push(r >> 0xC | 0xE0, r >> 0x6 & 0x3F | 0x80, r & 0x3F | 0x80);
                        } else if (r < 0x110000) {
                            if ((t -= 4) < 0) break;
                            a.push(r >> 0x12 | 0xF0, r >> 0xC & 0x3F | 0x80, r >> 0x6 & 0x3F | 0x80, r & 0x3F | 0x80);
                        } else {
                            throw new Error('Invalid code point');
                        }
                    }
                    return a;
                }
                function V(e) {
                    var t = [];
                    for(var r = 0; r < e.length; ++r){
                        t.push(e.charCodeAt(r) & 0xFF);
                    }
                    return t;
                }
                function G(e, t) {
                    var r, n, i;
                    var a = [];
                    for(var o = 0; o < e.length; ++o){
                        if ((t -= 2) < 0) break;
                        r = e.charCodeAt(o);
                        n = r >> 8;
                        i = r % 256;
                        a.push(i);
                        a.push(n);
                    }
                    return a;
                }
                function Z(e) {
                    return t.toByteArray(q(e));
                }
                function K(e, t, r, n) {
                    for(var i = 0; i < n; ++i){
                        if (i + r >= t.length || i >= e.length) break;
                        t[i + r] = e[i];
                    }
                    return i;
                }
                function H(e, t) {
                    return e instanceof t || e != null && e.constructor != null && e.constructor.name != null && e.constructor.name === t.name;
                }
                function J(e) {
                    return e !== e;
                }
                var X = function() {
                    var e = '0123456789abcdef';
                    var t = new Array(256);
                    for(var r = 0; r < 16; ++r){
                        var n = r * 16;
                        for(var i = 0; i < 16; ++i){
                            t[n + i] = e[r] + e[i];
                        }
                    }
                    return t;
                }();
            })(buffer);
            var _nodeResolve_empty = {};
            var _nodeResolve_empty$1 = Object.freeze({
                __proto__: null,
                'default': _nodeResolve_empty
            });
            var require$$4 = getAugmentedNamespace(_nodeResolve_empty$1);
            function ownKeys(e, t) {
                var r = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var n = Object.getOwnPropertySymbols(e);
                    if (t) n = n.filter(function(t) {
                        return Object.getOwnPropertyDescriptor(e, t).enumerable;
                    });
                    r.push.apply(r, n);
                }
                return r;
            }
            function _objectSpread$1(e) {
                for(var t = 1; t < arguments.length; t++){
                    var r = arguments[t] != null ? arguments[t] : {};
                    if (t % 2) {
                        ownKeys(Object(r), true).forEach(function(t) {
                            _defineProperty$2(e, t, r[t]);
                        });
                    } else if (Object.getOwnPropertyDescriptors) {
                        Object.defineProperties(e, Object.getOwnPropertyDescriptors(r));
                    } else {
                        ownKeys(Object(r)).forEach(function(t) {
                            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
                        });
                    }
                }
                return e;
            }
            function _defineProperty$2(e, t, r) {
                if (t in e) {
                    Object.defineProperty(e, t, {
                        value: r,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    e[t] = r;
                }
                return e;
            }
            function _classCallCheck$3(e, t) {
                if (!(e instanceof t)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _defineProperties$2(e, t) {
                for(var r = 0; r < t.length; r++){
                    var n = t[r];
                    n.enumerable = n.enumerable || false;
                    n.configurable = true;
                    if ("value" in n) n.writable = true;
                    Object.defineProperty(e, n.key, n);
                }
            }
            function _createClass$2(e, t, r) {
                if (t) _defineProperties$2(e.prototype, t);
                if (r) _defineProperties$2(e, r);
                return e;
            }
            var _require$4 = buffer, Buffer$3 = _require$4.Buffer;
            var _require2$2 = require$$4, inspect$2 = _require2$2.inspect;
            var custom = inspect$2 && inspect$2.custom || 'inspect';
            function copyBuffer(e, t, r) {
                Buffer$3.prototype.copy.call(e, t, r);
            }
            var buffer_list = function() {
                function e() {
                    _classCallCheck$3(this, e);
                    this.head = null;
                    this.tail = null;
                    this.length = 0;
                }
                _createClass$2(e, [
                    {
                        key: "push",
                        value: function e(t) {
                            var r = {
                                data: t,
                                next: null
                            };
                            if (this.length > 0) this.tail.next = r;
                            else this.head = r;
                            this.tail = r;
                            ++this.length;
                        }
                    },
                    {
                        key: "unshift",
                        value: function e(t) {
                            var r = {
                                data: t,
                                next: this.head
                            };
                            if (this.length === 0) this.tail = r;
                            this.head = r;
                            ++this.length;
                        }
                    },
                    {
                        key: "shift",
                        value: function e() {
                            if (this.length === 0) return;
                            var t = this.head.data;
                            if (this.length === 1) this.head = this.tail = null;
                            else this.head = this.head.next;
                            --this.length;
                            return t;
                        }
                    },
                    {
                        key: "clear",
                        value: function e() {
                            this.head = this.tail = null;
                            this.length = 0;
                        }
                    },
                    {
                        key: "join",
                        value: function e(t) {
                            if (this.length === 0) return '';
                            var r = this.head;
                            var n = '' + r.data;
                            while(r = r.next){
                                n += t + r.data;
                            }
                            return n;
                        }
                    },
                    {
                        key: "concat",
                        value: function e(t) {
                            if (this.length === 0) return Buffer$3.alloc(0);
                            var r = Buffer$3.allocUnsafe(t >>> 0);
                            var n = this.head;
                            var i = 0;
                            while(n){
                                copyBuffer(n.data, r, i);
                                i += n.data.length;
                                n = n.next;
                            }
                            return r;
                        }
                    },
                    {
                        key: "consume",
                        value: function e(t, r) {
                            var n;
                            if (t < this.head.data.length) {
                                n = this.head.data.slice(0, t);
                                this.head.data = this.head.data.slice(t);
                            } else if (t === this.head.data.length) {
                                n = this.shift();
                            } else {
                                n = r ? this._getString(t) : this._getBuffer(t);
                            }
                            return n;
                        }
                    },
                    {
                        key: "first",
                        value: function e() {
                            return this.head.data;
                        }
                    },
                    {
                        key: "_getString",
                        value: function e(t) {
                            var r = this.head;
                            var n = 1;
                            var i = r.data;
                            t -= i.length;
                            while(r = r.next){
                                var a = r.data;
                                var o = t > a.length ? a.length : t;
                                if (o === a.length) i += a;
                                else i += a.slice(0, t);
                                t -= o;
                                if (t === 0) {
                                    if (o === a.length) {
                                        ++n;
                                        if (r.next) this.head = r.next;
                                        else this.head = this.tail = null;
                                    } else {
                                        this.head = r;
                                        r.data = a.slice(o);
                                    }
                                    break;
                                }
                                ++n;
                            }
                            this.length -= n;
                            return i;
                        }
                    },
                    {
                        key: "_getBuffer",
                        value: function e(t) {
                            var r = Buffer$3.allocUnsafe(t);
                            var n = this.head;
                            var i = 1;
                            n.data.copy(r);
                            t -= n.data.length;
                            while(n = n.next){
                                var a = n.data;
                                var o = t > a.length ? a.length : t;
                                a.copy(r, r.length - t, 0, o);
                                t -= o;
                                if (t === 0) {
                                    if (o === a.length) {
                                        ++i;
                                        if (n.next) this.head = n.next;
                                        else this.head = this.tail = null;
                                    } else {
                                        this.head = n;
                                        n.data = a.slice(o);
                                    }
                                    break;
                                }
                                ++i;
                            }
                            this.length -= i;
                            return r;
                        }
                    },
                    {
                        key: custom,
                        value: function e(t, r) {
                            return inspect$2(this, _objectSpread$1({}, r, {
                                depth: 0,
                                customInspect: false
                            }));
                        }
                    }
                ]);
                return e;
            }();
            function destroy(e, t) {
                var r = this;
                var n = this._readableState && this._readableState.destroyed;
                var i = this._writableState && this._writableState.destroyed;
                if (n || i) {
                    if (t) {
                        t(e);
                    } else if (e) {
                        if (!this._writableState) {
                            browser$1$1.nextTick(emitErrorNT, this, e);
                        } else if (!this._writableState.errorEmitted) {
                            this._writableState.errorEmitted = true;
                            browser$1$1.nextTick(emitErrorNT, this, e);
                        }
                    }
                    return this;
                }
                if (this._readableState) {
                    this._readableState.destroyed = true;
                }
                if (this._writableState) {
                    this._writableState.destroyed = true;
                }
                this._destroy(e || null, function(e) {
                    if (!t && e) {
                        if (!r._writableState) {
                            browser$1$1.nextTick(emitErrorAndCloseNT, r, e);
                        } else if (!r._writableState.errorEmitted) {
                            r._writableState.errorEmitted = true;
                            browser$1$1.nextTick(emitErrorAndCloseNT, r, e);
                        } else {
                            browser$1$1.nextTick(emitCloseNT, r);
                        }
                    } else if (t) {
                        browser$1$1.nextTick(emitCloseNT, r);
                        t(e);
                    } else {
                        browser$1$1.nextTick(emitCloseNT, r);
                    }
                });
                return this;
            }
            function emitErrorAndCloseNT(e, t) {
                emitErrorNT(e, t);
                emitCloseNT(e);
            }
            function emitCloseNT(e) {
                if (e._writableState && !e._writableState.emitClose) return;
                if (e._readableState && !e._readableState.emitClose) return;
                e.emit('close');
            }
            function undestroy() {
                if (this._readableState) {
                    this._readableState.destroyed = false;
                    this._readableState.reading = false;
                    this._readableState.ended = false;
                    this._readableState.endEmitted = false;
                }
                if (this._writableState) {
                    this._writableState.destroyed = false;
                    this._writableState.ended = false;
                    this._writableState.ending = false;
                    this._writableState.finalCalled = false;
                    this._writableState.prefinished = false;
                    this._writableState.finished = false;
                    this._writableState.errorEmitted = false;
                }
            }
            function emitErrorNT(e, t) {
                e.emit('error', t);
            }
            function errorOrDestroy$2(e, t) {
                var r = e._readableState;
                var n = e._writableState;
                if (r && r.autoDestroy || n && n.autoDestroy) e.destroy(t);
                else e.emit('error', t);
            }
            var destroy_1 = {
                destroy: destroy,
                undestroy: undestroy,
                errorOrDestroy: errorOrDestroy$2
            };
            var errorsBrowser = {};
            function _inheritsLoose(e, t) {
                e.prototype = Object.create(t.prototype);
                e.prototype.constructor = e;
                e.__proto__ = t;
            }
            var codes$1 = {};
            function createErrorType$1(e, t, r) {
                if (!r) {
                    r = Error;
                }
                function n(e, r, n) {
                    if (typeof t === 'string') {
                        return t;
                    } else {
                        return t(e, r, n);
                    }
                }
                var i = function(e) {
                    _inheritsLoose(t, e);
                    function t(t, r, i) {
                        return e.call(this, n(t, r, i)) || this;
                    }
                    return t;
                }(r);
                i.prototype.name = r.name;
                i.prototype.code = e;
                codes$1[e] = i;
            }
            function oneOf$1(e, t) {
                if (Array.isArray(e)) {
                    var r = e.length;
                    e = e.map(function(e) {
                        return String(e);
                    });
                    if (r > 2) {
                        return "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(', '), ", or ") + e[r - 1];
                    } else if (r === 2) {
                        return "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]);
                    } else {
                        return "of ".concat(t, " ").concat(e[0]);
                    }
                } else {
                    return "of ".concat(t, " ").concat(String(e));
                }
            }
            function startsWith$1(e, t, r) {
                return e.substr(!r || r < 0 ? 0 : +r, t.length) === t;
            }
            function endsWith$2(e, t, r) {
                if (r === undefined || r > e.length) {
                    r = e.length;
                }
                return e.substring(r - t.length, r) === t;
            }
            function includes$1(e, t, r) {
                if (typeof r !== 'number') {
                    r = 0;
                }
                if (r + t.length > e.length) {
                    return false;
                } else {
                    return e.indexOf(t, r) !== -1;
                }
            }
            createErrorType$1('ERR_INVALID_OPT_VALUE', function(e, t) {
                return 'The value "' + t + '" is invalid for option "' + e + '"';
            }, TypeError);
            createErrorType$1('ERR_INVALID_ARG_TYPE', function(e, t, r) {
                var n;
                if (typeof t === 'string' && startsWith$1(t, 'not ')) {
                    n = 'must not be';
                    t = t.replace(/^not /, '');
                } else {
                    n = 'must be';
                }
                var i;
                if (endsWith$2(e, ' argument')) {
                    i = "The ".concat(e, " ").concat(n, " ").concat(oneOf$1(t, 'type'));
                } else {
                    var a = includes$1(e, '.') ? 'property' : 'argument';
                    i = "The \"".concat(e, "\" ").concat(a, " ").concat(n, " ").concat(oneOf$1(t, 'type'));
                }
                i += ". Received type ".concat(typeof r);
                return i;
            }, TypeError);
            createErrorType$1('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
            createErrorType$1('ERR_METHOD_NOT_IMPLEMENTED', function(e) {
                return 'The ' + e + ' method is not implemented';
            });
            createErrorType$1('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
            createErrorType$1('ERR_STREAM_DESTROYED', function(e) {
                return 'Cannot call ' + e + ' after a stream was destroyed';
            });
            createErrorType$1('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
            createErrorType$1('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
            createErrorType$1('ERR_STREAM_WRITE_AFTER_END', 'write after end');
            createErrorType$1('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
            createErrorType$1('ERR_UNKNOWN_ENCODING', function(e) {
                return 'Unknown encoding: ' + e;
            }, TypeError);
            createErrorType$1('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
            errorsBrowser.codes = codes$1;
            var ERR_INVALID_OPT_VALUE = errorsBrowser.codes.ERR_INVALID_OPT_VALUE;
            function highWaterMarkFrom(e, t, r) {
                return e.highWaterMark != null ? e.highWaterMark : t ? e[r] : null;
            }
            function getHighWaterMark$2(e, t, r, n) {
                var i = highWaterMarkFrom(t, n, r);
                if (i != null) {
                    if (!(isFinite(i) && Math.floor(i) === i) || i < 0) {
                        var a = n ? r : 'highWaterMark';
                        throw new ERR_INVALID_OPT_VALUE(a, i);
                    }
                    return Math.floor(i);
                }
                return e.objectMode ? 16 : 16 * 1024;
            }
            var state = {
                getHighWaterMark: getHighWaterMark$2
            };
            var inherits_browser = {
                exports: {}
            };
            if (typeof Object.create === 'function') {
                inherits_browser.exports = function e(t, r) {
                    if (r) {
                        t.super_ = r;
                        t.prototype = Object.create(r.prototype, {
                            constructor: {
                                value: t,
                                enumerable: false,
                                writable: true,
                                configurable: true
                            }
                        });
                    }
                };
            } else {
                inherits_browser.exports = function e(t, r) {
                    if (r) {
                        t.super_ = r;
                        var n = function e() {};
                        n.prototype = r.prototype;
                        t.prototype = new n();
                        t.prototype.constructor = t;
                    }
                };
            }
            var string_decoder = {};
            var safeBuffer = {
                exports: {}
            };
            (function(e, t) {
                var r = buffer;
                var n = r.Buffer;
                function i(e, t) {
                    for(var r in e){
                        t[r] = e[r];
                    }
                }
                if (n.from && n.alloc && n.allocUnsafe && n.allocUnsafeSlow) {
                    e.exports = r;
                } else {
                    i(r, t);
                    t.Buffer = a;
                }
                function a(e, t, r) {
                    return n(e, t, r);
                }
                a.prototype = Object.create(n.prototype);
                i(n, a);
                a.from = function(e, t, r) {
                    if (typeof e === 'number') {
                        throw new TypeError('Argument must not be a number');
                    }
                    return n(e, t, r);
                };
                a.alloc = function(e, t, r) {
                    if (typeof e !== 'number') {
                        throw new TypeError('Argument must be a number');
                    }
                    var i = n(e);
                    if (t !== undefined) {
                        if (typeof r === 'string') {
                            i.fill(t, r);
                        } else {
                            i.fill(t);
                        }
                    } else {
                        i.fill(0);
                    }
                    return i;
                };
                a.allocUnsafe = function(e) {
                    if (typeof e !== 'number') {
                        throw new TypeError('Argument must be a number');
                    }
                    return n(e);
                };
                a.allocUnsafeSlow = function(e) {
                    if (typeof e !== 'number') {
                        throw new TypeError('Argument must be a number');
                    }
                    return r.SlowBuffer(e);
                };
            })(safeBuffer, safeBuffer.exports);
            var Buffer$2 = safeBuffer.exports.Buffer;
            var isEncoding = Buffer$2.isEncoding || function(e) {
                e = '' + e;
                switch(e && e.toLowerCase()){
                    case 'hex':
                    case 'utf8':
                    case 'utf-8':
                    case 'ascii':
                    case 'binary':
                    case 'base64':
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                    case 'raw':
                        return true;
                    default:
                        return false;
                }
            };
            function _normalizeEncoding(e) {
                if (!e) return 'utf8';
                var t;
                while(true){
                    switch(e){
                        case 'utf8':
                        case 'utf-8':
                            return 'utf8';
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return 'utf16le';
                        case 'latin1':
                        case 'binary':
                            return 'latin1';
                        case 'base64':
                        case 'ascii':
                        case 'hex':
                            return e;
                        default:
                            if (t) return;
                            e = ('' + e).toLowerCase();
                            t = true;
                    }
                }
            }
            function normalizeEncoding(e) {
                var t = _normalizeEncoding(e);
                if (typeof t !== 'string' && (Buffer$2.isEncoding === isEncoding || !isEncoding(e))) throw new Error('Unknown encoding: ' + e);
                return t || e;
            }
            string_decoder.StringDecoder = StringDecoder$1;
            function StringDecoder$1(e) {
                this.encoding = normalizeEncoding(e);
                var t;
                switch(this.encoding){
                    case 'utf16le':
                        this.text = utf16Text;
                        this.end = utf16End;
                        t = 4;
                        break;
                    case 'utf8':
                        this.fillLast = utf8FillLast;
                        t = 4;
                        break;
                    case 'base64':
                        this.text = base64Text;
                        this.end = base64End;
                        t = 3;
                        break;
                    default:
                        this.write = simpleWrite;
                        this.end = simpleEnd;
                        return;
                }
                this.lastNeed = 0;
                this.lastTotal = 0;
                this.lastChar = Buffer$2.allocUnsafe(t);
            }
            StringDecoder$1.prototype.write = function(e) {
                if (e.length === 0) return '';
                var t;
                var r;
                if (this.lastNeed) {
                    t = this.fillLast(e);
                    if (t === undefined) return '';
                    r = this.lastNeed;
                    this.lastNeed = 0;
                } else {
                    r = 0;
                }
                if (r < e.length) return t ? t + this.text(e, r) : this.text(e, r);
                return t || '';
            };
            StringDecoder$1.prototype.end = utf8End;
            StringDecoder$1.prototype.text = utf8Text;
            StringDecoder$1.prototype.fillLast = function(e) {
                if (this.lastNeed <= e.length) {
                    e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                }
                e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length);
                this.lastNeed -= e.length;
            };
            function utf8CheckByte(e) {
                if (e <= 0x7F) return 0;
                else if (e >> 5 === 0x06) return 2;
                else if (e >> 4 === 0x0E) return 3;
                else if (e >> 3 === 0x1E) return 4;
                return e >> 6 === 0x02 ? -1 : -2;
            }
            function utf8CheckIncomplete(e, t, r) {
                var n = t.length - 1;
                if (n < r) return 0;
                var i = utf8CheckByte(t[n]);
                if (i >= 0) {
                    if (i > 0) e.lastNeed = i - 1;
                    return i;
                }
                if (--n < r || i === -2) return 0;
                i = utf8CheckByte(t[n]);
                if (i >= 0) {
                    if (i > 0) e.lastNeed = i - 2;
                    return i;
                }
                if (--n < r || i === -2) return 0;
                i = utf8CheckByte(t[n]);
                if (i >= 0) {
                    if (i > 0) {
                        if (i === 2) i = 0;
                        else e.lastNeed = i - 3;
                    }
                    return i;
                }
                return 0;
            }
            function utf8CheckExtraBytes(e, t, r) {
                if ((t[0] & 0xC0) !== 0x80) {
                    e.lastNeed = 0;
                    return "\uFFFD";
                }
                if (e.lastNeed > 1 && t.length > 1) {
                    if ((t[1] & 0xC0) !== 0x80) {
                        e.lastNeed = 1;
                        return "\uFFFD";
                    }
                    if (e.lastNeed > 2 && t.length > 2) {
                        if ((t[2] & 0xC0) !== 0x80) {
                            e.lastNeed = 2;
                            return "\uFFFD";
                        }
                    }
                }
            }
            function utf8FillLast(e) {
                var t = this.lastTotal - this.lastNeed;
                var r = utf8CheckExtraBytes(this, e);
                if (r !== undefined) return r;
                if (this.lastNeed <= e.length) {
                    e.copy(this.lastChar, t, 0, this.lastNeed);
                    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                }
                e.copy(this.lastChar, t, 0, e.length);
                this.lastNeed -= e.length;
            }
            function utf8Text(e, t) {
                var r = utf8CheckIncomplete(this, e, t);
                if (!this.lastNeed) return e.toString('utf8', t);
                this.lastTotal = r;
                var n = e.length - (r - this.lastNeed);
                e.copy(this.lastChar, 0, n);
                return e.toString('utf8', t, n);
            }
            function utf8End(e) {
                var t = e && e.length ? this.write(e) : '';
                if (this.lastNeed) return t + "\uFFFD";
                return t;
            }
            function utf16Text(e, t) {
                if ((e.length - t) % 2 === 0) {
                    var r = e.toString('utf16le', t);
                    if (r) {
                        var n = r.charCodeAt(r.length - 1);
                        if (n >= 0xD800 && n <= 0xDBFF) {
                            this.lastNeed = 2;
                            this.lastTotal = 4;
                            this.lastChar[0] = e[e.length - 2];
                            this.lastChar[1] = e[e.length - 1];
                            return r.slice(0, -1);
                        }
                    }
                    return r;
                }
                this.lastNeed = 1;
                this.lastTotal = 2;
                this.lastChar[0] = e[e.length - 1];
                return e.toString('utf16le', t, e.length - 1);
            }
            function utf16End(e) {
                var t = e && e.length ? this.write(e) : '';
                if (this.lastNeed) {
                    var r = this.lastTotal - this.lastNeed;
                    return t + this.lastChar.toString('utf16le', 0, r);
                }
                return t;
            }
            function base64Text(e, t) {
                var r = (e.length - t) % 3;
                if (r === 0) return e.toString('base64', t);
                this.lastNeed = 3 - r;
                this.lastTotal = 3;
                if (r === 1) {
                    this.lastChar[0] = e[e.length - 1];
                } else {
                    this.lastChar[0] = e[e.length - 2];
                    this.lastChar[1] = e[e.length - 1];
                }
                return e.toString('base64', t, e.length - r);
            }
            function base64End(e) {
                var t = e && e.length ? this.write(e) : '';
                if (this.lastNeed) return t + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
                return t;
            }
            function simpleWrite(e) {
                return e.toString(this.encoding);
            }
            function simpleEnd(e) {
                return e && e.length ? this.write(e) : '';
            }
            var ERR_STREAM_PREMATURE_CLOSE = errorsBrowser.codes.ERR_STREAM_PREMATURE_CLOSE;
            function once$1(e) {
                var t = false;
                return function() {
                    if (t) return;
                    t = true;
                    for(var r = arguments.length, n = new Array(r), i = 0; i < r; i++){
                        n[i] = arguments[i];
                    }
                    e.apply(this, n);
                };
            }
            function noop$1() {}
            function isRequest$1(e) {
                return e.setHeader && typeof e.abort === 'function';
            }
            function eos$1(e, t, r) {
                if (typeof t === 'function') return eos$1(e, null, t);
                if (!t) t = {};
                r = once$1(r || noop$1);
                var n = t.readable || t.readable !== false && e.readable;
                var i = t.writable || t.writable !== false && e.writable;
                var a = function t() {
                    if (!e.writable) c();
                };
                var o = e._writableState && e._writableState.finished;
                var c = function t() {
                    i = false;
                    o = true;
                    if (!n) r.call(e);
                };
                var s = e._readableState && e._readableState.endEmitted;
                var u = function t() {
                    n = false;
                    s = true;
                    if (!i) r.call(e);
                };
                var f = function t(n) {
                    r.call(e, n);
                };
                var l = function t() {
                    var a;
                    if (n && !s) {
                        if (!e._readableState || !e._readableState.ended) a = new ERR_STREAM_PREMATURE_CLOSE();
                        return r.call(e, a);
                    }
                    if (i && !o) {
                        if (!e._writableState || !e._writableState.ended) a = new ERR_STREAM_PREMATURE_CLOSE();
                        return r.call(e, a);
                    }
                };
                var h = function t() {
                    e.req.on('finish', c);
                };
                if (isRequest$1(e)) {
                    e.on('complete', c);
                    e.on('abort', l);
                    if (e.req) h();
                    else e.on('request', h);
                } else if (i && !e._writableState) {
                    e.on('end', a);
                    e.on('close', a);
                }
                e.on('end', u);
                e.on('finish', c);
                if (t.error !== false) e.on('error', f);
                e.on('close', l);
                return function() {
                    e.removeListener('complete', c);
                    e.removeListener('abort', l);
                    e.removeListener('request', h);
                    if (e.req) e.req.removeListener('finish', c);
                    e.removeListener('end', a);
                    e.removeListener('close', a);
                    e.removeListener('finish', c);
                    e.removeListener('end', u);
                    e.removeListener('error', f);
                    e.removeListener('close', l);
                };
            }
            var endOfStream = eos$1;
            var _Object$setPrototypeO;
            function _defineProperty$1(e, t, r) {
                if (t in e) {
                    Object.defineProperty(e, t, {
                        value: r,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    e[t] = r;
                }
                return e;
            }
            var finished = endOfStream;
            var kLastResolve = Symbol('lastResolve');
            var kLastReject = Symbol('lastReject');
            var kError = Symbol('error');
            var kEnded = Symbol('ended');
            var kLastPromise = Symbol('lastPromise');
            var kHandlePromise = Symbol('handlePromise');
            var kStream = Symbol('stream');
            function createIterResult(e, t) {
                return {
                    value: e,
                    done: t
                };
            }
            function readAndResolve(e) {
                var t = e[kLastResolve];
                if (t !== null) {
                    var r = e[kStream].read();
                    if (r !== null) {
                        e[kLastPromise] = null;
                        e[kLastResolve] = null;
                        e[kLastReject] = null;
                        t(createIterResult(r, false));
                    }
                }
            }
            function onReadable(e) {
                browser$1$1.nextTick(readAndResolve, e);
            }
            function wrapForNext(e, t) {
                return function(r, n) {
                    e.then(function() {
                        if (t[kEnded]) {
                            r(createIterResult(undefined, true));
                            return;
                        }
                        t[kHandlePromise](r, n);
                    }, n);
                };
            }
            var AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
            var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
                get stream () {
                    return this[kStream];
                },
                next: function e() {
                    var t = this;
                    var r = this[kError];
                    if (r !== null) {
                        return Promise.reject(r);
                    }
                    if (this[kEnded]) {
                        return Promise.resolve(createIterResult(undefined, true));
                    }
                    if (this[kStream].destroyed) {
                        return new Promise(function(e, r) {
                            browser$1$1.nextTick(function() {
                                if (t[kError]) {
                                    r(t[kError]);
                                } else {
                                    e(createIterResult(undefined, true));
                                }
                            });
                        });
                    }
                    var n = this[kLastPromise];
                    var i;
                    if (n) {
                        i = new Promise(wrapForNext(n, this));
                    } else {
                        var a = this[kStream].read();
                        if (a !== null) {
                            return Promise.resolve(createIterResult(a, false));
                        }
                        i = new Promise(this[kHandlePromise]);
                    }
                    this[kLastPromise] = i;
                    return i;
                }
            }, _defineProperty$1(_Object$setPrototypeO, Symbol.asyncIterator, function() {
                return this;
            }), _defineProperty$1(_Object$setPrototypeO, "return", function e() {
                var t = this;
                return new Promise(function(e, r) {
                    t[kStream].destroy(null, function(t) {
                        if (t) {
                            r(t);
                            return;
                        }
                        e(createIterResult(undefined, true));
                    });
                });
            }), _Object$setPrototypeO), AsyncIteratorPrototype);
            var createReadableStreamAsyncIterator$1 = function e(t) {
                var r;
                var n = Object.create(ReadableStreamAsyncIteratorPrototype, (r = {}, _defineProperty$1(r, kStream, {
                    value: t,
                    writable: true
                }), _defineProperty$1(r, kLastResolve, {
                    value: null,
                    writable: true
                }), _defineProperty$1(r, kLastReject, {
                    value: null,
                    writable: true
                }), _defineProperty$1(r, kError, {
                    value: null,
                    writable: true
                }), _defineProperty$1(r, kEnded, {
                    value: t._readableState.endEmitted,
                    writable: true
                }), _defineProperty$1(r, kHandlePromise, {
                    value: function e(t, r) {
                        var i = n[kStream].read();
                        if (i) {
                            n[kLastPromise] = null;
                            n[kLastResolve] = null;
                            n[kLastReject] = null;
                            t(createIterResult(i, false));
                        } else {
                            n[kLastResolve] = t;
                            n[kLastReject] = r;
                        }
                    },
                    writable: true
                }), r));
                n[kLastPromise] = null;
                finished(t, function(e) {
                    if (e && e.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
                        var t = n[kLastReject];
                        if (t !== null) {
                            n[kLastPromise] = null;
                            n[kLastResolve] = null;
                            n[kLastReject] = null;
                            t(e);
                        }
                        n[kError] = e;
                        return;
                    }
                    var r = n[kLastResolve];
                    if (r !== null) {
                        n[kLastPromise] = null;
                        n[kLastResolve] = null;
                        n[kLastReject] = null;
                        r(createIterResult(undefined, true));
                    }
                    n[kEnded] = true;
                });
                t.on('readable', onReadable.bind(null, n));
                return n;
            };
            var async_iterator = createReadableStreamAsyncIterator$1;
            var fromBrowser = function e() {
                throw new Error('Readable.from is not available in the browser');
            };
            var Registry$4 = _registry;
            Registry$4.Readable = Readable;
            Readable.ReadableState = ReadableState;
            events.exports.EventEmitter;
            var EElistenerCount = function e(t, r) {
                return t.listeners(r).length;
            };
            var Stream$1 = streamBrowser;
            var Buffer$1 = buffer.Buffer;
            var OurUint8Array$1 = commonjsGlobal.Uint8Array || function() {};
            function _uint8ArrayToBuffer$1(e) {
                return Buffer$1.from(e);
            }
            function _isUint8Array$1(e) {
                return Buffer$1.isBuffer(e) || e instanceof OurUint8Array$1;
            }
            var debugUtil = require$$4;
            var debug;
            if (debugUtil && debugUtil.debuglog) {
                debug = debugUtil.debuglog('stream');
            } else {
                debug = function e() {};
            }
            var BufferList = buffer_list;
            var destroyImpl$1 = destroy_1;
            var _require$3 = state, getHighWaterMark$1 = _require$3.getHighWaterMark;
            var _require$codes$4 = errorsBrowser.codes, ERR_INVALID_ARG_TYPE$3 = _require$codes$4.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes$4.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED$2 = _require$codes$4.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes$4.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
            var StringDecoder;
            var createReadableStreamAsyncIterator;
            var from;
            inherits_browser.exports(Readable, Stream$1);
            var errorOrDestroy$1 = destroyImpl$1.errorOrDestroy;
            var kProxyEvents = [
                'error',
                'close',
                'destroy',
                'pause',
                'resume'
            ];
            function prependListener(e, t, r) {
                if (typeof e.prependListener === 'function') return e.prependListener(t, r);
                if (!e._events || !e._events[t]) e.on(t, r);
                else if (Array.isArray(e._events[t])) e._events[t].unshift(r);
                else e._events[t] = [
                    r,
                    e._events[t]
                ];
            }
            function ReadableState(e, t, r) {
                e = e || {};
                if (typeof r !== 'boolean') r = t instanceof Registry$4.Duplex;
                this.objectMode = !!e.objectMode;
                if (r) this.objectMode = this.objectMode || !!e.readableObjectMode;
                this.highWaterMark = getHighWaterMark$1(this, e, 'readableHighWaterMark', r);
                this.buffer = new BufferList();
                this.length = 0;
                this.pipes = null;
                this.pipesCount = 0;
                this.flowing = null;
                this.ended = false;
                this.endEmitted = false;
                this.reading = false;
                this.sync = true;
                this.needReadable = false;
                this.emittedReadable = false;
                this.readableListening = false;
                this.resumeScheduled = false;
                this.paused = true;
                this.emitClose = e.emitClose !== false;
                this.autoDestroy = !!e.autoDestroy;
                this.destroyed = false;
                this.defaultEncoding = e.defaultEncoding || 'utf8';
                this.awaitDrain = 0;
                this.readingMore = false;
                this.decoder = null;
                this.encoding = null;
                if (e.encoding) {
                    if (!StringDecoder) StringDecoder = string_decoder.StringDecoder;
                    this.decoder = new StringDecoder(e.encoding);
                    this.encoding = e.encoding;
                }
            }
            function Readable(e) {
                if (!(this instanceof Readable)) return new Readable(e);
                var t = this instanceof Registry$4.Duplex;
                this._readableState = new ReadableState(e, this, t);
                this.readable = true;
                if (e) {
                    if (typeof e.read === 'function') this._read = e.read;
                    if (typeof e.destroy === 'function') this._destroy = e.destroy;
                }
                Stream$1.call(this);
            }
            Object.defineProperty(Readable.prototype, 'destroyed', {
                enumerable: false,
                get: function e() {
                    if (this._readableState === undefined) {
                        return false;
                    }
                    return this._readableState.destroyed;
                },
                set: function e(t) {
                    if (!this._readableState) {
                        return;
                    }
                    this._readableState.destroyed = t;
                }
            });
            Readable.prototype.destroy = destroyImpl$1.destroy;
            Readable.prototype._undestroy = destroyImpl$1.undestroy;
            Readable.prototype._destroy = function(e, t) {
                t(e);
            };
            Readable.prototype.push = function(e, t) {
                var r = this._readableState;
                var n;
                if (!r.objectMode) {
                    if (typeof e === 'string') {
                        t = t || r.defaultEncoding;
                        if (t !== r.encoding) {
                            e = Buffer$1.from(e, t);
                            t = '';
                        }
                        n = true;
                    }
                } else {
                    n = true;
                }
                return readableAddChunk(this, e, t, false, n);
            };
            Readable.prototype.unshift = function(e) {
                return readableAddChunk(this, e, null, true, false);
            };
            function readableAddChunk(e, t, r, n, i) {
                debug('readableAddChunk', t);
                var a = e._readableState;
                if (t === null) {
                    a.reading = false;
                    onEofChunk(e, a);
                } else {
                    var o;
                    if (!i) o = chunkInvalid(a, t);
                    if (o) {
                        errorOrDestroy$1(e, o);
                    } else if (a.objectMode || t && t.length > 0) {
                        if (typeof t !== 'string' && !a.objectMode && Object.getPrototypeOf(t) !== Buffer$1.prototype) {
                            t = _uint8ArrayToBuffer$1(t);
                        }
                        if (n) {
                            if (a.endEmitted) errorOrDestroy$1(e, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                            else addChunk(e, a, t, true);
                        } else if (a.ended) {
                            errorOrDestroy$1(e, new ERR_STREAM_PUSH_AFTER_EOF());
                        } else if (a.destroyed) {
                            return false;
                        } else {
                            a.reading = false;
                            if (a.decoder && !r) {
                                t = a.decoder.write(t);
                                if (a.objectMode || t.length !== 0) addChunk(e, a, t, false);
                                else maybeReadMore(e, a);
                            } else {
                                addChunk(e, a, t, false);
                            }
                        }
                    } else if (!n) {
                        a.reading = false;
                        maybeReadMore(e, a);
                    }
                }
                return !a.ended && (a.length < a.highWaterMark || a.length === 0);
            }
            function addChunk(e, t, r, n) {
                if (t.flowing && t.length === 0 && !t.sync) {
                    t.awaitDrain = 0;
                    e.emit('data', r);
                } else {
                    t.length += t.objectMode ? 1 : r.length;
                    if (n) t.buffer.unshift(r);
                    else t.buffer.push(r);
                    if (t.needReadable) emitReadable(e);
                }
                maybeReadMore(e, t);
            }
            function chunkInvalid(e, t) {
                var r;
                if (!_isUint8Array$1(t) && typeof t !== 'string' && t !== undefined && !e.objectMode) {
                    r = new ERR_INVALID_ARG_TYPE$3('chunk', [
                        'string',
                        'Buffer',
                        'Uint8Array'
                    ], t);
                }
                return r;
            }
            Readable.prototype.isPaused = function() {
                return this._readableState.flowing === false;
            };
            Readable.prototype.setEncoding = function(e) {
                if (!StringDecoder) StringDecoder = string_decoder.StringDecoder;
                var t = new StringDecoder(e);
                this._readableState.decoder = t;
                this._readableState.encoding = this._readableState.decoder.encoding;
                var r = this._readableState.buffer.head;
                var n = '';
                while(r !== null){
                    n += t.write(r.data);
                    r = r.next;
                }
                this._readableState.buffer.clear();
                if (n !== '') this._readableState.buffer.push(n);
                this._readableState.length = n.length;
                return this;
            };
            var MAX_HWM = 0x40000000;
            function computeNewHighWaterMark(e) {
                if (e >= MAX_HWM) {
                    e = MAX_HWM;
                } else {
                    e--;
                    e |= e >>> 1;
                    e |= e >>> 2;
                    e |= e >>> 4;
                    e |= e >>> 8;
                    e |= e >>> 16;
                    e++;
                }
                return e;
            }
            function howMuchToRead(e, t) {
                if (e <= 0 || t.length === 0 && t.ended) return 0;
                if (t.objectMode) return 1;
                if (e !== e) {
                    if (t.flowing && t.length) return t.buffer.head.data.length;
                    else return t.length;
                }
                if (e > t.highWaterMark) t.highWaterMark = computeNewHighWaterMark(e);
                if (e <= t.length) return e;
                if (!t.ended) {
                    t.needReadable = true;
                    return 0;
                }
                return t.length;
            }
            Readable.prototype.read = function(e) {
                debug('read', e);
                e = parseInt(e, 10);
                var t = this._readableState;
                var r = e;
                if (e !== 0) t.emittedReadable = false;
                if (e === 0 && t.needReadable && ((t.highWaterMark !== 0 ? t.length >= t.highWaterMark : t.length > 0) || t.ended)) {
                    debug('read: emitReadable', t.length, t.ended);
                    if (t.length === 0 && t.ended) endReadable(this);
                    else emitReadable(this);
                    return null;
                }
                e = howMuchToRead(e, t);
                if (e === 0 && t.ended) {
                    if (t.length === 0) endReadable(this);
                    return null;
                }
                var n = t.needReadable;
                debug('need readable', n);
                if (t.length === 0 || t.length - e < t.highWaterMark) {
                    n = true;
                    debug('length less than watermark', n);
                }
                if (t.ended || t.reading) {
                    n = false;
                    debug('reading or ended', n);
                } else if (n) {
                    debug('do read');
                    t.reading = true;
                    t.sync = true;
                    if (t.length === 0) t.needReadable = true;
                    this._read(t.highWaterMark);
                    t.sync = false;
                    if (!t.reading) e = howMuchToRead(r, t);
                }
                var i;
                if (e > 0) i = fromList(e, t);
                else i = null;
                if (i === null) {
                    t.needReadable = t.length <= t.highWaterMark;
                    e = 0;
                } else {
                    t.length -= e;
                    t.awaitDrain = 0;
                }
                if (t.length === 0) {
                    if (!t.ended) t.needReadable = true;
                    if (r !== e && t.ended) endReadable(this);
                }
                if (i !== null) this.emit('data', i);
                return i;
            };
            function onEofChunk(e, t) {
                debug('onEofChunk');
                if (t.ended) return;
                if (t.decoder) {
                    var r = t.decoder.end();
                    if (r && r.length) {
                        t.buffer.push(r);
                        t.length += t.objectMode ? 1 : r.length;
                    }
                }
                t.ended = true;
                if (t.sync) {
                    emitReadable(e);
                } else {
                    t.needReadable = false;
                    if (!t.emittedReadable) {
                        t.emittedReadable = true;
                        emitReadable_(e);
                    }
                }
            }
            function emitReadable(e) {
                var t = e._readableState;
                debug('emitReadable', t.needReadable, t.emittedReadable);
                t.needReadable = false;
                if (!t.emittedReadable) {
                    debug('emitReadable', t.flowing);
                    t.emittedReadable = true;
                    browser$1$1.nextTick(emitReadable_, e);
                }
            }
            function emitReadable_(e) {
                var t = e._readableState;
                debug('emitReadable_', t.destroyed, t.length, t.ended);
                if (!t.destroyed && (t.length || t.ended)) {
                    e.emit('readable');
                    t.emittedReadable = false;
                }
                t.needReadable = !t.flowing && !t.ended && t.length <= t.highWaterMark;
                flow(e);
            }
            function maybeReadMore(e, t) {
                if (!t.readingMore) {
                    t.readingMore = true;
                    browser$1$1.nextTick(maybeReadMore_, e, t);
                }
            }
            function maybeReadMore_(e, t) {
                while(!t.reading && !t.ended && (t.length < t.highWaterMark || t.flowing && t.length === 0)){
                    var r = t.length;
                    debug('maybeReadMore read 0');
                    e.read(0);
                    if (r === t.length) break;
                }
                t.readingMore = false;
            }
            Readable.prototype._read = function(e) {
                errorOrDestroy$1(this, new ERR_METHOD_NOT_IMPLEMENTED$2('_read()'));
            };
            Readable.prototype.pipe = function(e, t) {
                var r = this;
                var n = this._readableState;
                switch(n.pipesCount){
                    case 0:
                        n.pipes = e;
                        break;
                    case 1:
                        n.pipes = [
                            n.pipes,
                            e
                        ];
                        break;
                    default:
                        n.pipes.push(e);
                        break;
                }
                n.pipesCount += 1;
                debug('pipe count=%d opts=%j', n.pipesCount, t);
                var i = (!t || t.end !== false) && e !== browser$1$1.stdout && e !== browser$1$1.stderr;
                var a = i ? c : g;
                if (n.endEmitted) browser$1$1.nextTick(a);
                else r.once('end', a);
                e.on('unpipe', o);
                function o(e, t) {
                    debug('onunpipe');
                    if (e === r) {
                        if (t && t.hasUnpiped === false) {
                            t.hasUnpiped = true;
                            f();
                        }
                    }
                }
                function c() {
                    debug('onend');
                    e.end();
                }
                var s = pipeOnDrain(r);
                e.on('drain', s);
                var u = false;
                function f() {
                    debug('cleanup');
                    e.removeListener('close', d);
                    e.removeListener('finish', m);
                    e.removeListener('drain', s);
                    e.removeListener('error', h);
                    e.removeListener('unpipe', o);
                    r.removeListener('end', c);
                    r.removeListener('end', g);
                    r.removeListener('data', l);
                    u = true;
                    if (n.awaitDrain && (!e._writableState || e._writableState.needDrain)) s();
                }
                r.on('data', l);
                function l(t) {
                    debug('ondata');
                    var i = e.write(t);
                    debug('dest.write', i);
                    if (i === false) {
                        if ((n.pipesCount === 1 && n.pipes === e || n.pipesCount > 1 && indexOf(n.pipes, e) !== -1) && !u) {
                            debug('false write response, pause', n.awaitDrain);
                            n.awaitDrain++;
                        }
                        r.pause();
                    }
                }
                function h(t) {
                    debug('onerror', t);
                    g();
                    e.removeListener('error', h);
                    if (EElistenerCount(e, 'error') === 0) errorOrDestroy$1(e, t);
                }
                prependListener(e, 'error', h);
                function d() {
                    e.removeListener('finish', m);
                    g();
                }
                e.once('close', d);
                function m() {
                    debug('onfinish');
                    e.removeListener('close', d);
                    g();
                }
                e.once('finish', m);
                function g() {
                    debug('unpipe');
                    r.unpipe(e);
                }
                e.emit('pipe', r);
                if (!n.flowing) {
                    debug('pipe resume');
                    r.resume();
                }
                return e;
            };
            function pipeOnDrain(e) {
                return function t() {
                    var r = e._readableState;
                    debug('pipeOnDrain', r.awaitDrain);
                    if (r.awaitDrain) r.awaitDrain--;
                    if (r.awaitDrain === 0 && EElistenerCount(e, 'data')) {
                        r.flowing = true;
                        flow(e);
                    }
                };
            }
            Readable.prototype.unpipe = function(e) {
                var t = this._readableState;
                var r = {
                    hasUnpiped: false
                };
                if (t.pipesCount === 0) return this;
                if (t.pipesCount === 1) {
                    if (e && e !== t.pipes) return this;
                    if (!e) e = t.pipes;
                    t.pipes = null;
                    t.pipesCount = 0;
                    t.flowing = false;
                    if (e) e.emit('unpipe', this, r);
                    return this;
                }
                if (!e) {
                    var n = t.pipes;
                    var i = t.pipesCount;
                    t.pipes = null;
                    t.pipesCount = 0;
                    t.flowing = false;
                    for(var a = 0; a < i; a++){
                        n[a].emit('unpipe', this, {
                            hasUnpiped: false
                        });
                    }
                    return this;
                }
                var o = indexOf(t.pipes, e);
                if (o === -1) return this;
                t.pipes.splice(o, 1);
                t.pipesCount -= 1;
                if (t.pipesCount === 1) t.pipes = t.pipes[0];
                e.emit('unpipe', this, r);
                return this;
            };
            Readable.prototype.on = function(e, t) {
                var r = Stream$1.prototype.on.call(this, e, t);
                var n = this._readableState;
                if (e === 'data') {
                    n.readableListening = this.listenerCount('readable') > 0;
                    if (n.flowing !== false) this.resume();
                } else if (e === 'readable') {
                    if (!n.endEmitted && !n.readableListening) {
                        n.readableListening = n.needReadable = true;
                        n.flowing = false;
                        n.emittedReadable = false;
                        debug('on readable', n.length, n.reading);
                        if (n.length) {
                            emitReadable(this);
                        } else if (!n.reading) {
                            browser$1$1.nextTick(nReadingNextTick, this);
                        }
                    }
                }
                return r;
            };
            Readable.prototype.addListener = Readable.prototype.on;
            Readable.prototype.removeListener = function(e, t) {
                var r = Stream$1.prototype.removeListener.call(this, e, t);
                if (e === 'readable') {
                    browser$1$1.nextTick(updateReadableListening, this);
                }
                return r;
            };
            Readable.prototype.removeAllListeners = function(e) {
                var t = Stream$1.prototype.removeAllListeners.apply(this, arguments);
                if (e === 'readable' || e === undefined) {
                    browser$1$1.nextTick(updateReadableListening, this);
                }
                return t;
            };
            function updateReadableListening(e) {
                var t = e._readableState;
                t.readableListening = e.listenerCount('readable') > 0;
                if (t.resumeScheduled && !t.paused) {
                    t.flowing = true;
                } else if (e.listenerCount('data') > 0) {
                    e.resume();
                }
            }
            function nReadingNextTick(e) {
                debug('readable nexttick read 0');
                e.read(0);
            }
            Readable.prototype.resume = function() {
                var e = this._readableState;
                if (!e.flowing) {
                    debug('resume');
                    e.flowing = !e.readableListening;
                    resume(this, e);
                }
                e.paused = false;
                return this;
            };
            function resume(e, t) {
                if (!t.resumeScheduled) {
                    t.resumeScheduled = true;
                    browser$1$1.nextTick(resume_, e, t);
                }
            }
            function resume_(e, t) {
                debug('resume', t.reading);
                if (!t.reading) {
                    e.read(0);
                }
                t.resumeScheduled = false;
                e.emit('resume');
                flow(e);
                if (t.flowing && !t.reading) e.read(0);
            }
            Readable.prototype.pause = function() {
                debug('call pause flowing=%j', this._readableState.flowing);
                if (this._readableState.flowing !== false) {
                    debug('pause');
                    this._readableState.flowing = false;
                    this.emit('pause');
                }
                this._readableState.paused = true;
                return this;
            };
            function flow(e) {
                var t = e._readableState;
                debug('flow', t.flowing);
                while(t.flowing && e.read() !== null){}
            }
            Readable.prototype.wrap = function(e) {
                var t = this;
                var r = this._readableState;
                var n = false;
                e.on('end', function() {
                    debug('wrapped end');
                    if (r.decoder && !r.ended) {
                        var e = r.decoder.end();
                        if (e && e.length) t.push(e);
                    }
                    t.push(null);
                });
                e.on('data', function(i) {
                    debug('wrapped data');
                    if (r.decoder) i = r.decoder.write(i);
                    if (r.objectMode && (i === null || i === undefined)) return;
                    else if (!r.objectMode && (!i || !i.length)) return;
                    var a = t.push(i);
                    if (!a) {
                        n = true;
                        e.pause();
                    }
                });
                for(var i in e){
                    if (this[i] === undefined && typeof e[i] === 'function') {
                        this[i] = function t(r) {
                            return function t() {
                                return e[r].apply(e, arguments);
                            };
                        }(i);
                    }
                }
                for(var a = 0; a < kProxyEvents.length; a++){
                    e.on(kProxyEvents[a], this.emit.bind(this, kProxyEvents[a]));
                }
                this._read = function(t) {
                    debug('wrapped _read', t);
                    if (n) {
                        n = false;
                        e.resume();
                    }
                };
                return this;
            };
            if (typeof Symbol === 'function') {
                Readable.prototype[Symbol.asyncIterator] = function() {
                    if (createReadableStreamAsyncIterator === undefined) {
                        createReadableStreamAsyncIterator = async_iterator;
                    }
                    return createReadableStreamAsyncIterator(this);
                };
            }
            Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
                enumerable: false,
                get: function e() {
                    return this._readableState.highWaterMark;
                }
            });
            Object.defineProperty(Readable.prototype, 'readableBuffer', {
                enumerable: false,
                get: function e() {
                    return this._readableState && this._readableState.buffer;
                }
            });
            Object.defineProperty(Readable.prototype, 'readableFlowing', {
                enumerable: false,
                get: function e() {
                    return this._readableState.flowing;
                },
                set: function e(t) {
                    if (this._readableState) {
                        this._readableState.flowing = t;
                    }
                }
            });
            Readable._fromList = fromList;
            Object.defineProperty(Readable.prototype, 'readableLength', {
                enumerable: false,
                get: function e() {
                    return this._readableState.length;
                }
            });
            function fromList(e, t) {
                if (t.length === 0) return null;
                var r;
                if (t.objectMode) r = t.buffer.shift();
                else if (!e || e >= t.length) {
                    if (t.decoder) r = t.buffer.join('');
                    else if (t.buffer.length === 1) r = t.buffer.first();
                    else r = t.buffer.concat(t.length);
                    t.buffer.clear();
                } else {
                    r = t.buffer.consume(e, t.decoder);
                }
                return r;
            }
            function endReadable(e) {
                var t = e._readableState;
                debug('endReadable', t.endEmitted);
                if (!t.endEmitted) {
                    t.ended = true;
                    browser$1$1.nextTick(endReadableNT, t, e);
                }
            }
            function endReadableNT(e, t) {
                debug('endReadableNT', e.endEmitted, e.length);
                if (!e.endEmitted && e.length === 0) {
                    e.endEmitted = true;
                    t.readable = false;
                    t.emit('end');
                    if (e.autoDestroy) {
                        var r = t._writableState;
                        if (!r || r.autoDestroy && r.finished) {
                            t.destroy();
                        }
                    }
                }
            }
            if (typeof Symbol === 'function') {
                Readable.from = function(e, t) {
                    if (from === undefined) {
                        from = fromBrowser;
                    }
                    return from(Readable, e, t);
                };
            }
            function indexOf(e, t) {
                for(var r = 0, n = e.length; r < n; r++){
                    if (e[r] === t) return r;
                }
                return -1;
            }
            var browser = deprecate;
            function deprecate(e, t) {
                if (config('noDeprecation')) {
                    return e;
                }
                var r = false;
                function n() {
                    if (!r) {
                        if (config('throwDeprecation')) {
                            throw new Error(t);
                        } else if (config('traceDeprecation')) {
                            console.trace(t);
                        } else {
                            console.warn(t);
                        }
                        r = true;
                    }
                    return e.apply(this, arguments);
                }
                return n;
            }
            function config(e) {
                try {
                    if (!commonjsGlobal.localStorage) return false;
                } catch (t) {
                    return false;
                }
                var r = commonjsGlobal.localStorage[e];
                if (null == r) return false;
                return String(r).toLowerCase() === 'true';
            }
            var Registry$3 = _registry;
            Registry$3.Writable = Writable;
            function CorkedRequest(e) {
                var t = this;
                this.next = null;
                this.entry = null;
                this.finish = function() {
                    onCorkedFinish(t, e);
                };
            }
            Writable.WritableState = WritableState;
            var internalUtil = {
                deprecate: browser
            };
            var Stream = streamBrowser;
            var Buffer = buffer.Buffer;
            var OurUint8Array = commonjsGlobal.Uint8Array || function() {};
            function _uint8ArrayToBuffer(e) {
                return Buffer.from(e);
            }
            function _isUint8Array(e) {
                return Buffer.isBuffer(e) || e instanceof OurUint8Array;
            }
            var destroyImpl = destroy_1;
            var _require$2 = state, getHighWaterMark = _require$2.getHighWaterMark;
            var _require$codes$3 = errorsBrowser.codes, ERR_INVALID_ARG_TYPE$2 = _require$codes$3.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED$1 = _require$codes$3.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK$1 = _require$codes$3.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes$3.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED$1 = _require$codes$3.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes$3.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes$3.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes$3.ERR_UNKNOWN_ENCODING;
            var errorOrDestroy = destroyImpl.errorOrDestroy;
            inherits_browser.exports(Writable, Stream);
            function nop() {}
            function WritableState(e, t, r) {
                e = e || {};
                if (typeof r !== 'boolean') r = t instanceof Registry$3.Duplex;
                this.objectMode = !!e.objectMode;
                if (r) this.objectMode = this.objectMode || !!e.writableObjectMode;
                this.highWaterMark = getHighWaterMark(this, e, 'writableHighWaterMark', r);
                this.finalCalled = false;
                this.needDrain = false;
                this.ending = false;
                this.ended = false;
                this.finished = false;
                this.destroyed = false;
                var n = e.decodeStrings === false;
                this.decodeStrings = !n;
                this.defaultEncoding = e.defaultEncoding || 'utf8';
                this.length = 0;
                this.writing = false;
                this.corked = 0;
                this.sync = true;
                this.bufferProcessing = false;
                this.onwrite = function(e) {
                    onwrite(t, e);
                };
                this.writecb = null;
                this.writelen = 0;
                this.bufferedRequest = null;
                this.lastBufferedRequest = null;
                this.pendingcb = 0;
                this.prefinished = false;
                this.errorEmitted = false;
                this.emitClose = e.emitClose !== false;
                this.autoDestroy = !!e.autoDestroy;
                this.bufferedRequestCount = 0;
                this.corkedRequestsFree = new CorkedRequest(this);
            }
            WritableState.prototype.getBuffer = function e() {
                var t = this.bufferedRequest;
                var r = [];
                while(t){
                    r.push(t);
                    t = t.next;
                }
                return r;
            };
            (function() {
                try {
                    Object.defineProperty(WritableState.prototype, 'buffer', {
                        get: internalUtil.deprecate(function e() {
                            return this.getBuffer();
                        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
                    });
                } catch (e) {}
            })();
            var realHasInstance;
            if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
                realHasInstance = Function.prototype[Symbol.hasInstance];
                Object.defineProperty(Writable, Symbol.hasInstance, {
                    value: function e(t) {
                        if (realHasInstance.call(this, t)) return true;
                        if (this !== Writable) return false;
                        return t && t._writableState instanceof WritableState;
                    }
                });
            } else {
                realHasInstance = function e(t) {
                    return t instanceof this;
                };
            }
            function Writable(e) {
                var t = this instanceof Registry$3.Duplex;
                if (!t && !realHasInstance.call(Writable, this)) return new Writable(e);
                this._writableState = new WritableState(e, this, t);
                this.writable = true;
                if (e) {
                    if (typeof e.write === 'function') this._write = e.write;
                    if (typeof e.writev === 'function') this._writev = e.writev;
                    if (typeof e.destroy === 'function') this._destroy = e.destroy;
                    if (typeof e.final === 'function') this._final = e.final;
                }
                Stream.call(this);
            }
            Writable.prototype.pipe = function() {
                errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
            };
            function writeAfterEnd(e, t) {
                var r = new ERR_STREAM_WRITE_AFTER_END();
                errorOrDestroy(e, r);
                browser$1$1.nextTick(t, r);
            }
            function validChunk(e, t, r, n) {
                var i;
                if (r === null) {
                    i = new ERR_STREAM_NULL_VALUES();
                } else if (typeof r !== 'string' && !t.objectMode) {
                    i = new ERR_INVALID_ARG_TYPE$2('chunk', [
                        'string',
                        'Buffer'
                    ], r);
                }
                if (i) {
                    errorOrDestroy(e, i);
                    browser$1$1.nextTick(n, i);
                    return false;
                }
                return true;
            }
            Writable.prototype.write = function(e, t, r) {
                var n = this._writableState;
                var i = false;
                var a = !n.objectMode && _isUint8Array(e);
                if (a && !Buffer.isBuffer(e)) {
                    e = _uint8ArrayToBuffer(e);
                }
                if (typeof t === 'function') {
                    r = t;
                    t = null;
                }
                if (a) t = 'buffer';
                else if (!t) t = n.defaultEncoding;
                if (typeof r !== 'function') r = nop;
                if (n.ending) writeAfterEnd(this, r);
                else if (a || validChunk(this, n, e, r)) {
                    n.pendingcb++;
                    i = writeOrBuffer(this, n, a, e, t, r);
                }
                return i;
            };
            Writable.prototype.cork = function() {
                this._writableState.corked++;
            };
            Writable.prototype.uncork = function() {
                var e = this._writableState;
                if (e.corked) {
                    e.corked--;
                    if (!e.writing && !e.corked && !e.bufferProcessing && e.bufferedRequest) clearBuffer(this, e);
                }
            };
            Writable.prototype.setDefaultEncoding = function e(t) {
                if (typeof t === 'string') t = t.toLowerCase();
                if (!([
                    'hex',
                    'utf8',
                    'utf-8',
                    'ascii',
                    'binary',
                    'base64',
                    'ucs2',
                    'ucs-2',
                    'utf16le',
                    'utf-16le',
                    'raw'
                ].indexOf((t + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(t);
                this._writableState.defaultEncoding = t;
                return this;
            };
            Object.defineProperty(Writable.prototype, 'writableBuffer', {
                enumerable: false,
                get: function e() {
                    return this._writableState && this._writableState.getBuffer();
                }
            });
            function decodeChunk(e, t, r) {
                if (!e.objectMode && e.decodeStrings !== false && typeof t === 'string') {
                    t = Buffer.from(t, r);
                }
                return t;
            }
            Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
                enumerable: false,
                get: function e() {
                    return this._writableState.highWaterMark;
                }
            });
            function writeOrBuffer(e, t, r, n, i, a) {
                if (!r) {
                    var o = decodeChunk(t, n, i);
                    if (n !== o) {
                        r = true;
                        i = 'buffer';
                        n = o;
                    }
                }
                var c = t.objectMode ? 1 : n.length;
                t.length += c;
                var s = t.length < t.highWaterMark;
                if (!s) t.needDrain = true;
                if (t.writing || t.corked) {
                    var u = t.lastBufferedRequest;
                    t.lastBufferedRequest = {
                        chunk: n,
                        encoding: i,
                        isBuf: r,
                        callback: a,
                        next: null
                    };
                    if (u) {
                        u.next = t.lastBufferedRequest;
                    } else {
                        t.bufferedRequest = t.lastBufferedRequest;
                    }
                    t.bufferedRequestCount += 1;
                } else {
                    doWrite(e, t, false, c, n, i, a);
                }
                return s;
            }
            function doWrite(e, t, r, n, i, a, o) {
                t.writelen = n;
                t.writecb = o;
                t.writing = true;
                t.sync = true;
                if (t.destroyed) t.onwrite(new ERR_STREAM_DESTROYED$1('write'));
                else if (r) e._writev(i, t.onwrite);
                else e._write(i, a, t.onwrite);
                t.sync = false;
            }
            function onwriteError(e, t, r, n, i) {
                --t.pendingcb;
                if (r) {
                    browser$1$1.nextTick(i, n);
                    browser$1$1.nextTick(finishMaybe, e, t);
                    e._writableState.errorEmitted = true;
                    errorOrDestroy(e, n);
                } else {
                    i(n);
                    e._writableState.errorEmitted = true;
                    errorOrDestroy(e, n);
                    finishMaybe(e, t);
                }
            }
            function onwriteStateUpdate(e) {
                e.writing = false;
                e.writecb = null;
                e.length -= e.writelen;
                e.writelen = 0;
            }
            function onwrite(e, t) {
                var r = e._writableState;
                var n = r.sync;
                var i = r.writecb;
                if (typeof i !== 'function') throw new ERR_MULTIPLE_CALLBACK$1();
                onwriteStateUpdate(r);
                if (t) onwriteError(e, r, n, t, i);
                else {
                    var a = needFinish(r) || e.destroyed;
                    if (!a && !r.corked && !r.bufferProcessing && r.bufferedRequest) {
                        clearBuffer(e, r);
                    }
                    if (n) {
                        browser$1$1.nextTick(afterWrite, e, r, a, i);
                    } else {
                        afterWrite(e, r, a, i);
                    }
                }
            }
            function afterWrite(e, t, r, n) {
                if (!r) onwriteDrain(e, t);
                t.pendingcb--;
                n();
                finishMaybe(e, t);
            }
            function onwriteDrain(e, t) {
                if (t.length === 0 && t.needDrain) {
                    t.needDrain = false;
                    e.emit('drain');
                }
            }
            function clearBuffer(e, t) {
                t.bufferProcessing = true;
                var r = t.bufferedRequest;
                if (e._writev && r && r.next) {
                    var n = t.bufferedRequestCount;
                    var i = new Array(n);
                    var a = t.corkedRequestsFree;
                    a.entry = r;
                    var o = 0;
                    var c = true;
                    while(r){
                        i[o] = r;
                        if (!r.isBuf) c = false;
                        r = r.next;
                        o += 1;
                    }
                    i.allBuffers = c;
                    doWrite(e, t, true, t.length, i, '', a.finish);
                    t.pendingcb++;
                    t.lastBufferedRequest = null;
                    if (a.next) {
                        t.corkedRequestsFree = a.next;
                        a.next = null;
                    } else {
                        t.corkedRequestsFree = new CorkedRequest(t);
                    }
                    t.bufferedRequestCount = 0;
                } else {
                    while(r){
                        var s = r.chunk;
                        var u = r.encoding;
                        var f = r.callback;
                        var l = t.objectMode ? 1 : s.length;
                        doWrite(e, t, false, l, s, u, f);
                        r = r.next;
                        t.bufferedRequestCount--;
                        if (t.writing) {
                            break;
                        }
                    }
                    if (r === null) t.lastBufferedRequest = null;
                }
                t.bufferedRequest = r;
                t.bufferProcessing = false;
            }
            Writable.prototype._write = function(e, t, r) {
                r(new ERR_METHOD_NOT_IMPLEMENTED$1('_write()'));
            };
            Writable.prototype._writev = null;
            Writable.prototype.end = function(e, t, r) {
                var n = this._writableState;
                if (typeof e === 'function') {
                    r = e;
                    e = null;
                    t = null;
                } else if (typeof t === 'function') {
                    r = t;
                    t = null;
                }
                if (e !== null && e !== undefined) this.write(e, t);
                if (n.corked) {
                    n.corked = 1;
                    this.uncork();
                }
                if (!n.ending) endWritable(this, n, r);
                return this;
            };
            Object.defineProperty(Writable.prototype, 'writableLength', {
                enumerable: false,
                get: function e() {
                    return this._writableState.length;
                }
            });
            function needFinish(e) {
                return e.ending && e.length === 0 && e.bufferedRequest === null && !e.finished && !e.writing;
            }
            function callFinal(e, t) {
                e._final(function(r) {
                    t.pendingcb--;
                    if (r) {
                        errorOrDestroy(e, r);
                    }
                    t.prefinished = true;
                    e.emit('prefinish');
                    finishMaybe(e, t);
                });
            }
            function prefinish$1(e, t) {
                if (!t.prefinished && !t.finalCalled) {
                    if (typeof e._final === 'function' && !t.destroyed) {
                        t.pendingcb++;
                        t.finalCalled = true;
                        browser$1$1.nextTick(callFinal, e, t);
                    } else {
                        t.prefinished = true;
                        e.emit('prefinish');
                    }
                }
            }
            function finishMaybe(e, t) {
                var r = needFinish(t);
                if (r) {
                    prefinish$1(e, t);
                    if (t.pendingcb === 0) {
                        t.finished = true;
                        e.emit('finish');
                        if (t.autoDestroy) {
                            var n = e._readableState;
                            if (!n || n.autoDestroy && n.endEmitted) {
                                e.destroy();
                            }
                        }
                    }
                }
                return r;
            }
            function endWritable(e, t, r) {
                t.ending = true;
                finishMaybe(e, t);
                if (r) {
                    if (t.finished) browser$1$1.nextTick(r);
                    else e.once('finish', r);
                }
                t.ended = true;
                e.writable = false;
            }
            function onCorkedFinish(e, t, r) {
                var n = e.entry;
                e.entry = null;
                while(n){
                    var i = n.callback;
                    t.pendingcb--;
                    i(r);
                    n = n.next;
                }
                t.corkedRequestsFree.next = e;
            }
            Object.defineProperty(Writable.prototype, 'destroyed', {
                enumerable: false,
                get: function e() {
                    if (this._writableState === undefined) {
                        return false;
                    }
                    return this._writableState.destroyed;
                },
                set: function e(t) {
                    if (!this._writableState) {
                        return;
                    }
                    this._writableState.destroyed = t;
                }
            });
            Writable.prototype.destroy = destroyImpl.destroy;
            Writable.prototype._undestroy = destroyImpl.undestroy;
            Writable.prototype._destroy = function(e, t) {
                t(e);
            };
            var objectKeys$1 = Object.keys || function(e) {
                var t = [];
                for(var r in e){
                    t.push(r);
                }
                return t;
            };
            var Registry$2 = _registry;
            Registry$2.Duplex = Duplex;
            inherits_browser.exports(Duplex, Registry$2.Readable);
            {
                var keys$1 = objectKeys$1(Registry$2.Writable.prototype);
                for(var v = 0; v < keys$1.length; v++){
                    var method = keys$1[v];
                    if (!Duplex.prototype[method]) Duplex.prototype[method] = Registry$2.Writable.prototype[method];
                }
            }
            function Duplex(e) {
                if (!(this instanceof Duplex)) return new Duplex(e);
                Registry$2.Readable.call(this, e);
                Registry$2.Writable.call(this, e);
                this.allowHalfOpen = true;
                if (e) {
                    if (e.readable === false) this.readable = false;
                    if (e.writable === false) this.writable = false;
                    if (e.allowHalfOpen === false) {
                        this.allowHalfOpen = false;
                        this.once('end', onend);
                    }
                }
            }
            Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
                enumerable: false,
                get: function e() {
                    return this._writableState.highWaterMark;
                }
            });
            Object.defineProperty(Duplex.prototype, 'writableBuffer', {
                enumerable: false,
                get: function e() {
                    return this._writableState && this._writableState.getBuffer();
                }
            });
            Object.defineProperty(Duplex.prototype, 'writableLength', {
                enumerable: false,
                get: function e() {
                    return this._writableState.length;
                }
            });
            function onend() {
                if (this._writableState.ended) return;
                browser$1$1.nextTick(onEndNT, this);
            }
            function onEndNT(e) {
                e.end();
            }
            Object.defineProperty(Duplex.prototype, 'destroyed', {
                enumerable: false,
                get: function e() {
                    if (this._readableState === undefined || this._writableState === undefined) {
                        return false;
                    }
                    return this._readableState.destroyed && this._writableState.destroyed;
                },
                set: function e(t) {
                    if (this._readableState === undefined || this._writableState === undefined) {
                        return;
                    }
                    this._readableState.destroyed = t;
                    this._writableState.destroyed = t;
                }
            });
            var Registry$1 = _registry;
            Registry$1.Transform = Transform$1;
            var _require$codes$2 = errorsBrowser.codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes$2.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes$2.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$2.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$2.ERR_TRANSFORM_WITH_LENGTH_0;
            inherits_browser.exports(Transform$1, Registry$1.Duplex);
            function afterTransform(e, t) {
                var r = this._transformState;
                r.transforming = false;
                var n = r.writecb;
                if (n === null) {
                    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
                }
                r.writechunk = null;
                r.writecb = null;
                if (t != null) this.push(t);
                n(e);
                var i = this._readableState;
                i.reading = false;
                if (i.needReadable || i.length < i.highWaterMark) {
                    this._read(i.highWaterMark);
                }
            }
            function Transform$1(e) {
                if (!(this instanceof Transform$1)) return new Transform$1(e);
                Registry$1.Duplex.call(this, e);
                this._transformState = {
                    afterTransform: afterTransform.bind(this),
                    needTransform: false,
                    transforming: false,
                    writecb: null,
                    writechunk: null,
                    writeencoding: null
                };
                this._readableState.needReadable = true;
                this._readableState.sync = false;
                if (e) {
                    if (typeof e.transform === 'function') this._transform = e.transform;
                    if (typeof e.flush === 'function') this._flush = e.flush;
                }
                this.on('prefinish', prefinish);
            }
            function prefinish() {
                var e = this;
                if (typeof this._flush === 'function' && !this._readableState.destroyed) {
                    this._flush(function(t, r) {
                        done(e, t, r);
                    });
                } else {
                    done(this, null, null);
                }
            }
            Transform$1.prototype.push = function(e, t) {
                this._transformState.needTransform = false;
                return Registry$1.Duplex.prototype.push.call(this, e, t);
            };
            Transform$1.prototype._transform = function(e, t, r) {
                r(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
            };
            Transform$1.prototype._write = function(e, t, r) {
                var n = this._transformState;
                n.writecb = r;
                n.writechunk = e;
                n.writeencoding = t;
                if (!n.transforming) {
                    var i = this._readableState;
                    if (n.needTransform || i.needReadable || i.length < i.highWaterMark) this._read(i.highWaterMark);
                }
            };
            Transform$1.prototype._read = function(e) {
                var t = this._transformState;
                if (t.writechunk !== null && !t.transforming) {
                    t.transforming = true;
                    this._transform(t.writechunk, t.writeencoding, t.afterTransform);
                } else {
                    t.needTransform = true;
                }
            };
            Transform$1.prototype._destroy = function(e, t) {
                Registry$1.Duplex.prototype._destroy.call(this, e, function(e) {
                    t(e);
                });
            };
            function done(e, t, r) {
                if (t) return e.emit('error', t);
                if (r != null) e.push(r);
                if (e._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
                if (e._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
                return e.push(null);
            }
            var Registry = _registry;
            Registry.PassThrough = PassThrough;
            inherits_browser.exports(PassThrough, Registry.Transform);
            function PassThrough(e) {
                if (!(this instanceof PassThrough)) return new PassThrough(e);
                Transform.call(this, e);
            }
            PassThrough.prototype._transform = function(e, t, r) {
                r(null, e);
            };
            var eos;
            function once(e) {
                var t = false;
                return function() {
                    if (t) return;
                    t = true;
                    e.apply(void 0, arguments);
                };
            }
            var _require$codes$1 = errorsBrowser.codes, ERR_MISSING_ARGS$1 = _require$codes$1.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes$1.ERR_STREAM_DESTROYED;
            function noop(e) {
                if (e) throw e;
            }
            function isRequest(e) {
                return e.setHeader && typeof e.abort === 'function';
            }
            function destroyer(e, t, r, n) {
                n = once(n);
                var i = false;
                e.on('close', function() {
                    i = true;
                });
                if (eos === undefined) eos = endOfStream;
                eos(e, {
                    readable: t,
                    writable: r
                }, function(e) {
                    if (e) return n(e);
                    i = true;
                    n();
                });
                var a = false;
                return function(t) {
                    if (i) return;
                    if (a) return;
                    a = true;
                    if (isRequest(e)) return e.abort();
                    if (typeof e.destroy === 'function') return e.destroy();
                    n(t || new ERR_STREAM_DESTROYED('pipe'));
                };
            }
            function call(e) {
                e();
            }
            function pipe(e, t) {
                return e.pipe(t);
            }
            function popCallback(e) {
                if (!e.length) return noop;
                if (typeof e[e.length - 1] !== 'function') return noop;
                return e.pop();
            }
            function pipeline() {
                for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++){
                    t[r] = arguments[r];
                }
                var n = popCallback(t);
                if (Array.isArray(t[0])) t = t[0];
                if (t.length < 2) {
                    throw new ERR_MISSING_ARGS$1('streams');
                }
                var i;
                var a = t.map(function(e, r) {
                    var o = r < t.length - 1;
                    var c = r > 0;
                    return destroyer(e, o, c, function(e) {
                        if (!i) i = e;
                        if (e) a.forEach(call);
                        if (o) return;
                        a.forEach(call);
                        n(i);
                    });
                });
                return t.reduce(pipe);
            }
            var pipeline_1 = pipeline;
            (function(e, t) {
                var r = _registry;
                t = e.exports = r.Readable;
                t.Stream = r.Readable;
                t.Readable = r.Readable;
                t.Writable = r.Writable;
                t.Duplex = r.Duplex;
                t.Transform = r.Transform;
                t.PassThrough = r.PassThrough;
                t.finished = endOfStream;
                t.pipeline = pipeline_1;
            })(readableBrowser, readableBrowser.exports);
            var stream = readableBrowser.exports;
            var lib = {};
            var binding = {};
            var assert$2 = {
                exports: {}
            };
            var errors = {};
            var util$1 = {};
            var types = {};
            var shams$1 = function e() {
                if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
                    return false;
                }
                if (typeof Symbol.iterator === 'symbol') {
                    return true;
                }
                var t = {};
                var r = Symbol('test');
                var n = Object(r);
                if (typeof r === 'string') {
                    return false;
                }
                if (Object.prototype.toString.call(r) !== '[object Symbol]') {
                    return false;
                }
                if (Object.prototype.toString.call(n) !== '[object Symbol]') {
                    return false;
                }
                var i = 42;
                t[r] = i;
                for(r in t){
                    return false;
                }
                if (typeof Object.keys === 'function' && Object.keys(t).length !== 0) {
                    return false;
                }
                if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(t).length !== 0) {
                    return false;
                }
                var a = Object.getOwnPropertySymbols(t);
                if (a.length !== 1 || a[0] !== r) {
                    return false;
                }
                if (!Object.prototype.propertyIsEnumerable.call(t, r)) {
                    return false;
                }
                if (typeof Object.getOwnPropertyDescriptor === 'function') {
                    var o = Object.getOwnPropertyDescriptor(t, r);
                    if (o.value !== i || o.enumerable !== true) {
                        return false;
                    }
                }
                return true;
            };
            var origSymbol = typeof Symbol !== 'undefined' && Symbol;
            var hasSymbolSham = shams$1;
            var hasSymbols$3 = function e() {
                if (typeof origSymbol !== 'function') {
                    return false;
                }
                if (typeof Symbol !== 'function') {
                    return false;
                }
                if (typeof origSymbol('foo') !== 'symbol') {
                    return false;
                }
                if (typeof Symbol('bar') !== 'symbol') {
                    return false;
                }
                return hasSymbolSham();
            };
            var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
            var slice$1 = Array.prototype.slice;
            var toStr$4 = Object.prototype.toString;
            var funcType = '[object Function]';
            var implementation$8 = function e(t) {
                var r = this;
                if (typeof r !== 'function' || toStr$4.call(r) !== funcType) {
                    throw new TypeError(ERROR_MESSAGE + r);
                }
                var n = slice$1.call(arguments, 1);
                var i;
                var a = function e() {
                    if (this instanceof i) {
                        var a = r.apply(this, n.concat(slice$1.call(arguments)));
                        if (Object(a) === a) {
                            return a;
                        }
                        return this;
                    } else {
                        return r.apply(t, n.concat(slice$1.call(arguments)));
                    }
                };
                var o = Math.max(0, r.length - n.length);
                var c = [];
                for(var s = 0; s < o; s++){
                    c.push('$' + s);
                }
                i = Function('binder', 'return function (' + c.join(',') + '){ return binder.apply(this,arguments); }')(a);
                if (r.prototype) {
                    var u = function e() {};
                    u.prototype = r.prototype;
                    i.prototype = new u();
                    u.prototype = null;
                }
                return i;
            };
            var implementation$7 = implementation$8;
            var functionBind = Function.prototype.bind || implementation$7;
            var bind$1 = functionBind;
            var src = bind$1.call(Function.call, Object.prototype.hasOwnProperty);
            var undefined$1;
            var $SyntaxError = SyntaxError;
            var $Function = Function;
            var $TypeError = TypeError;
            var getEvalledConstructor = function e(t) {
                try {
                    return $Function('"use strict"; return (' + t + ').constructor;')();
                } catch (r) {}
            };
            var $gOPD$1 = Object.getOwnPropertyDescriptor;
            if ($gOPD$1) {
                try {
                    $gOPD$1({}, '');
                } catch (e) {
                    $gOPD$1 = null;
                }
            }
            var throwTypeError = function e() {
                throw new $TypeError();
            };
            var ThrowTypeError = $gOPD$1 ? function() {
                try {
                    arguments.callee;
                    return throwTypeError;
                } catch (t) {
                    try {
                        return $gOPD$1(arguments, 'callee').get;
                    } catch (e) {
                        return throwTypeError;
                    }
                }
            }() : throwTypeError;
            var hasSymbols$2 = hasSymbols$3();
            var getProto$1 = Object.getPrototypeOf || function(e) {
                return e.__proto__;
            };
            var needsEval = {};
            var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto$1(Uint8Array);
            var INTRINSICS = {
                '%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
                '%Array%': Array,
                '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
                '%ArrayIteratorPrototype%': hasSymbols$2 ? getProto$1([][Symbol.iterator]()) : undefined$1,
                '%AsyncFromSyncIteratorPrototype%': undefined$1,
                '%AsyncFunction%': needsEval,
                '%AsyncGenerator%': needsEval,
                '%AsyncGeneratorFunction%': needsEval,
                '%AsyncIteratorPrototype%': needsEval,
                '%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
                '%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
                '%Boolean%': Boolean,
                '%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
                '%Date%': Date,
                '%decodeURI%': decodeURI,
                '%decodeURIComponent%': decodeURIComponent,
                '%encodeURI%': encodeURI,
                '%encodeURIComponent%': encodeURIComponent,
                '%Error%': Error,
                '%eval%': eval,
                '%EvalError%': EvalError,
                '%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
                '%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
                '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
                '%Function%': $Function,
                '%GeneratorFunction%': needsEval,
                '%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
                '%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
                '%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
                '%isFinite%': isFinite,
                '%isNaN%': isNaN,
                '%IteratorPrototype%': hasSymbols$2 ? getProto$1(getProto$1([][Symbol.iterator]())) : undefined$1,
                '%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
                '%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
                '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto$1(new Map()[Symbol.iterator]()),
                '%Math%': Math,
                '%Number%': Number,
                '%Object%': Object,
                '%parseFloat%': parseFloat,
                '%parseInt%': parseInt,
                '%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
                '%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
                '%RangeError%': RangeError,
                '%ReferenceError%': ReferenceError,
                '%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
                '%RegExp%': RegExp,
                '%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
                '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto$1(new Set()[Symbol.iterator]()),
                '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
                '%String%': String,
                '%StringIteratorPrototype%': hasSymbols$2 ? getProto$1(''[Symbol.iterator]()) : undefined$1,
                '%Symbol%': hasSymbols$2 ? Symbol : undefined$1,
                '%SyntaxError%': $SyntaxError,
                '%ThrowTypeError%': ThrowTypeError,
                '%TypedArray%': TypedArray,
                '%TypeError%': $TypeError,
                '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
                '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
                '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
                '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
                '%URIError%': URIError,
                '%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
                '%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
                '%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
            };
            var doEval = function e(t) {
                var r;
                if (t === '%AsyncFunction%') {
                    r = getEvalledConstructor('async function () {}');
                } else if (t === '%GeneratorFunction%') {
                    r = getEvalledConstructor('function* () {}');
                } else if (t === '%AsyncGeneratorFunction%') {
                    r = getEvalledConstructor('async function* () {}');
                } else if (t === '%AsyncGenerator%') {
                    var n = e('%AsyncGeneratorFunction%');
                    if (n) {
                        r = n.prototype;
                    }
                } else if (t === '%AsyncIteratorPrototype%') {
                    var i = e('%AsyncGenerator%');
                    if (i) {
                        r = getProto$1(i.prototype);
                    }
                }
                INTRINSICS[t] = r;
                return r;
            };
            var LEGACY_ALIASES = {
                '%ArrayBufferPrototype%': [
                    'ArrayBuffer',
                    'prototype'
                ],
                '%ArrayPrototype%': [
                    'Array',
                    'prototype'
                ],
                '%ArrayProto_entries%': [
                    'Array',
                    'prototype',
                    'entries'
                ],
                '%ArrayProto_forEach%': [
                    'Array',
                    'prototype',
                    'forEach'
                ],
                '%ArrayProto_keys%': [
                    'Array',
                    'prototype',
                    'keys'
                ],
                '%ArrayProto_values%': [
                    'Array',
                    'prototype',
                    'values'
                ],
                '%AsyncFunctionPrototype%': [
                    'AsyncFunction',
                    'prototype'
                ],
                '%AsyncGenerator%': [
                    'AsyncGeneratorFunction',
                    'prototype'
                ],
                '%AsyncGeneratorPrototype%': [
                    'AsyncGeneratorFunction',
                    'prototype',
                    'prototype'
                ],
                '%BooleanPrototype%': [
                    'Boolean',
                    'prototype'
                ],
                '%DataViewPrototype%': [
                    'DataView',
                    'prototype'
                ],
                '%DatePrototype%': [
                    'Date',
                    'prototype'
                ],
                '%ErrorPrototype%': [
                    'Error',
                    'prototype'
                ],
                '%EvalErrorPrototype%': [
                    'EvalError',
                    'prototype'
                ],
                '%Float32ArrayPrototype%': [
                    'Float32Array',
                    'prototype'
                ],
                '%Float64ArrayPrototype%': [
                    'Float64Array',
                    'prototype'
                ],
                '%FunctionPrototype%': [
                    'Function',
                    'prototype'
                ],
                '%Generator%': [
                    'GeneratorFunction',
                    'prototype'
                ],
                '%GeneratorPrototype%': [
                    'GeneratorFunction',
                    'prototype',
                    'prototype'
                ],
                '%Int8ArrayPrototype%': [
                    'Int8Array',
                    'prototype'
                ],
                '%Int16ArrayPrototype%': [
                    'Int16Array',
                    'prototype'
                ],
                '%Int32ArrayPrototype%': [
                    'Int32Array',
                    'prototype'
                ],
                '%JSONParse%': [
                    'JSON',
                    'parse'
                ],
                '%JSONStringify%': [
                    'JSON',
                    'stringify'
                ],
                '%MapPrototype%': [
                    'Map',
                    'prototype'
                ],
                '%NumberPrototype%': [
                    'Number',
                    'prototype'
                ],
                '%ObjectPrototype%': [
                    'Object',
                    'prototype'
                ],
                '%ObjProto_toString%': [
                    'Object',
                    'prototype',
                    'toString'
                ],
                '%ObjProto_valueOf%': [
                    'Object',
                    'prototype',
                    'valueOf'
                ],
                '%PromisePrototype%': [
                    'Promise',
                    'prototype'
                ],
                '%PromiseProto_then%': [
                    'Promise',
                    'prototype',
                    'then'
                ],
                '%Promise_all%': [
                    'Promise',
                    'all'
                ],
                '%Promise_reject%': [
                    'Promise',
                    'reject'
                ],
                '%Promise_resolve%': [
                    'Promise',
                    'resolve'
                ],
                '%RangeErrorPrototype%': [
                    'RangeError',
                    'prototype'
                ],
                '%ReferenceErrorPrototype%': [
                    'ReferenceError',
                    'prototype'
                ],
                '%RegExpPrototype%': [
                    'RegExp',
                    'prototype'
                ],
                '%SetPrototype%': [
                    'Set',
                    'prototype'
                ],
                '%SharedArrayBufferPrototype%': [
                    'SharedArrayBuffer',
                    'prototype'
                ],
                '%StringPrototype%': [
                    'String',
                    'prototype'
                ],
                '%SymbolPrototype%': [
                    'Symbol',
                    'prototype'
                ],
                '%SyntaxErrorPrototype%': [
                    'SyntaxError',
                    'prototype'
                ],
                '%TypedArrayPrototype%': [
                    'TypedArray',
                    'prototype'
                ],
                '%TypeErrorPrototype%': [
                    'TypeError',
                    'prototype'
                ],
                '%Uint8ArrayPrototype%': [
                    'Uint8Array',
                    'prototype'
                ],
                '%Uint8ClampedArrayPrototype%': [
                    'Uint8ClampedArray',
                    'prototype'
                ],
                '%Uint16ArrayPrototype%': [
                    'Uint16Array',
                    'prototype'
                ],
                '%Uint32ArrayPrototype%': [
                    'Uint32Array',
                    'prototype'
                ],
                '%URIErrorPrototype%': [
                    'URIError',
                    'prototype'
                ],
                '%WeakMapPrototype%': [
                    'WeakMap',
                    'prototype'
                ],
                '%WeakSetPrototype%': [
                    'WeakSet',
                    'prototype'
                ]
            };
            var bind = functionBind;
            var hasOwn$1 = src;
            var $concat = bind.call(Function.call, Array.prototype.concat);
            var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
            var $replace = bind.call(Function.call, String.prototype.replace);
            var $strSlice = bind.call(Function.call, String.prototype.slice);
            var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
            var reEscapeChar = /\\(\\)?/g;
            var stringToPath = function e(t) {
                var r = $strSlice(t, 0, 1);
                var n = $strSlice(t, -1);
                if (r === '%' && n !== '%') {
                    throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
                } else if (n === '%' && r !== '%') {
                    throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
                }
                var i = [];
                $replace(t, rePropName, function(e, t, r, n) {
                    i[i.length] = r ? $replace(n, reEscapeChar, '$1') : t || e;
                });
                return i;
            };
            var getBaseIntrinsic = function e(t, r) {
                var n = t;
                var i;
                if (hasOwn$1(LEGACY_ALIASES, n)) {
                    i = LEGACY_ALIASES[n];
                    n = '%' + i[0] + '%';
                }
                if (hasOwn$1(INTRINSICS, n)) {
                    var a = INTRINSICS[n];
                    if (a === needsEval) {
                        a = doEval(n);
                    }
                    if (typeof a === 'undefined' && !r) {
                        throw new $TypeError('intrinsic ' + t + ' exists, but is not available. Please file an issue!');
                    }
                    return {
                        alias: i,
                        name: n,
                        value: a
                    };
                }
                throw new $SyntaxError('intrinsic ' + t + ' does not exist!');
            };
            var getIntrinsic = function e(t, r) {
                if (typeof t !== 'string' || t.length === 0) {
                    throw new $TypeError('intrinsic name must be a non-empty string');
                }
                if (arguments.length > 1 && typeof r !== 'boolean') {
                    throw new $TypeError('"allowMissing" argument must be a boolean');
                }
                var n = stringToPath(t);
                var i = n.length > 0 ? n[0] : '';
                var a = getBaseIntrinsic('%' + i + '%', r);
                var o = a.name;
                var c = a.value;
                var s = false;
                var u = a.alias;
                if (u) {
                    i = u[0];
                    $spliceApply(n, $concat([
                        0,
                        1
                    ], u));
                }
                for(var f = 1, l = true; f < n.length; f += 1){
                    var h = n[f];
                    var d = $strSlice(h, 0, 1);
                    var m = $strSlice(h, -1);
                    if ((d === '"' || d === "'" || d === '`' || m === '"' || m === "'" || m === '`') && d !== m) {
                        throw new $SyntaxError('property names with quotes must have matching quotes');
                    }
                    if (h === 'constructor' || !l) {
                        s = true;
                    }
                    i += '.' + h;
                    o = '%' + i + '%';
                    if (hasOwn$1(INTRINSICS, o)) {
                        c = INTRINSICS[o];
                    } else if (c != null) {
                        if (!(h in c)) {
                            if (!r) {
                                throw new $TypeError('base intrinsic for ' + t + ' exists, but the property is not available.');
                            }
                            return void undefined$1;
                        }
                        if ($gOPD$1 && f + 1 >= n.length) {
                            var g = $gOPD$1(c, h);
                            l = !!g;
                            if (l && 'get' in g && !('originalValue' in g.get)) {
                                c = g.get;
                            } else {
                                c = c[h];
                            }
                        } else {
                            l = hasOwn$1(c, h);
                            c = c[h];
                        }
                        if (l && !s) {
                            INTRINSICS[o] = c;
                        }
                    }
                }
                return c;
            };
            var callBind$3 = {
                exports: {}
            };
            (function(e) {
                var t = functionBind;
                var r = getIntrinsic;
                var n = r('%Function.prototype.apply%');
                var i = r('%Function.prototype.call%');
                var a = r('%Reflect.apply%', true) || t.call(i, n);
                var o = r('%Object.getOwnPropertyDescriptor%', true);
                var c = r('%Object.defineProperty%', true);
                var s = r('%Math.max%');
                if (c) {
                    try {
                        c({}, 'a', {
                            value: 1
                        });
                    } catch (u) {
                        c = null;
                    }
                }
                e.exports = function e(r) {
                    var n = a(t, i, arguments);
                    if (o && c) {
                        var u = o(n, 'length');
                        if (u.configurable) {
                            c(n, 'length', {
                                value: 1 + s(0, r.length - (arguments.length - 1))
                            });
                        }
                    }
                    return n;
                };
                var f = function e() {
                    return a(t, n, arguments);
                };
                if (c) {
                    c(e.exports, 'apply', {
                        value: f
                    });
                } else {
                    e.exports.apply = f;
                }
            })(callBind$3);
            var GetIntrinsic$1 = getIntrinsic;
            var callBind$2 = callBind$3.exports;
            var $indexOf$1 = callBind$2(GetIntrinsic$1('String.prototype.indexOf'));
            var callBound$3 = function e(t, r) {
                var n = GetIntrinsic$1(t, !!r);
                if (typeof n === 'function' && $indexOf$1(t, '.prototype.') > -1) {
                    return callBind$2(n);
                }
                return n;
            };
            var hasToStringTag$3 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
            var callBound$2 = callBound$3;
            var $toString$2 = callBound$2('Object.prototype.toString');
            var isStandardArguments = function e(t) {
                if (hasToStringTag$3 && t && typeof t === 'object' && Symbol.toStringTag in t) {
                    return false;
                }
                return $toString$2(t) === '[object Arguments]';
            };
            var isLegacyArguments = function e(t) {
                if (isStandardArguments(t)) {
                    return true;
                }
                return t !== null && typeof t === 'object' && typeof t.length === 'number' && t.length >= 0 && $toString$2(t) !== '[object Array]' && $toString$2(t.callee) === '[object Function]';
            };
            var supportsStandardArguments = function() {
                return isStandardArguments(arguments);
            }();
            isStandardArguments.isLegacyArguments = isLegacyArguments;
            var isArguments$1 = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
            var hasSymbols$1 = shams$1;
            var shams = function e() {
                return hasSymbols$1() && !!Symbol.toStringTag;
            };
            var toStr$3 = Object.prototype.toString;
            var fnToStr = Function.prototype.toString;
            var isFnRegex = /^\s*(?:function)?\*/;
            var hasToStringTag$2 = shams();
            var getProto = Object.getPrototypeOf;
            var getGeneratorFunc = function e() {
                if (!hasToStringTag$2) {
                    return false;
                }
                try {
                    return Function('return function*() {}')();
                } catch (t) {}
            };
            var GeneratorFunction;
            var isGeneratorFunction = function e(t) {
                if (typeof t !== 'function') {
                    return false;
                }
                if (isFnRegex.test(fnToStr.call(t))) {
                    return true;
                }
                if (!hasToStringTag$2) {
                    var r = toStr$3.call(t);
                    return r === '[object GeneratorFunction]';
                }
                if (!getProto) {
                    return false;
                }
                if (typeof GeneratorFunction === 'undefined') {
                    var n = getGeneratorFunc();
                    GeneratorFunction = n ? getProto(n) : false;
                }
                return getProto(t) === GeneratorFunction;
            };
            var hasOwn = Object.prototype.hasOwnProperty;
            var toString = Object.prototype.toString;
            var foreach = function e(t, r, n) {
                if (toString.call(r) !== '[object Function]') {
                    throw new TypeError('iterator must be a function');
                }
                var i = t.length;
                if (i === +i) {
                    for(var a = 0; a < i; a++){
                        r.call(n, t[a], a, t);
                    }
                } else {
                    for(var o in t){
                        if (hasOwn.call(t, o)) {
                            r.call(n, t[o], o, t);
                        }
                    }
                }
            };
            var possibleNames = [
                'BigInt64Array',
                'BigUint64Array',
                'Float32Array',
                'Float64Array',
                'Int16Array',
                'Int32Array',
                'Int8Array',
                'Uint16Array',
                'Uint32Array',
                'Uint8Array',
                'Uint8ClampedArray'
            ];
            var g$2 = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;
            var availableTypedArrays$2 = function e() {
                var t = [];
                for(var r = 0; r < possibleNames.length; r++){
                    if (typeof g$2[possibleNames[r]] === 'function') {
                        t[t.length] = possibleNames[r];
                    }
                }
                return t;
            };
            var GetIntrinsic = getIntrinsic;
            var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
            if ($gOPD) {
                try {
                    $gOPD([], 'length');
                } catch (e) {
                    $gOPD = null;
                }
            }
            var getOwnPropertyDescriptor = $gOPD;
            var forEach$1 = foreach;
            var availableTypedArrays$1 = availableTypedArrays$2;
            var callBound$1 = callBound$3;
            var $toString$1 = callBound$1('Object.prototype.toString');
            var hasToStringTag$1 = shams();
            var g$1 = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;
            var typedArrays$1 = availableTypedArrays$1();
            var $indexOf = callBound$1('Array.prototype.indexOf', true) || function e(t, r) {
                for(var n = 0; n < t.length; n += 1){
                    if (t[n] === r) {
                        return n;
                    }
                }
                return -1;
            };
            var $slice$1 = callBound$1('String.prototype.slice');
            var toStrTags$1 = {};
            var gOPD$1 = getOwnPropertyDescriptor;
            var getPrototypeOf$1 = Object.getPrototypeOf;
            if (hasToStringTag$1 && gOPD$1 && getPrototypeOf$1) {
                forEach$1(typedArrays$1, function(e) {
                    var t = new g$1[e]();
                    if (Symbol.toStringTag in t) {
                        var r = getPrototypeOf$1(t);
                        var n = gOPD$1(r, Symbol.toStringTag);
                        if (!n) {
                            var i = getPrototypeOf$1(r);
                            n = gOPD$1(i, Symbol.toStringTag);
                        }
                        toStrTags$1[e] = n.get;
                    }
                });
            }
            var tryTypedArrays$1 = function e(t) {
                var r = false;
                forEach$1(toStrTags$1, function(e, n) {
                    if (!r) {
                        try {
                            r = e.call(t) === n;
                        } catch (i) {}
                    }
                });
                return r;
            };
            var isTypedArray$1 = function e(t) {
                if (!t || typeof t !== 'object') {
                    return false;
                }
                if (!hasToStringTag$1 || !(Symbol.toStringTag in t)) {
                    var r = $slice$1($toString$1(t), 8, -1);
                    return $indexOf(typedArrays$1, r) > -1;
                }
                if (!gOPD$1) {
                    return false;
                }
                return tryTypedArrays$1(t);
            };
            var forEach = foreach;
            var availableTypedArrays = availableTypedArrays$2;
            var callBound = callBound$3;
            var $toString = callBound('Object.prototype.toString');
            var hasToStringTag = shams();
            var g = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;
            var typedArrays = availableTypedArrays();
            var $slice = callBound('String.prototype.slice');
            var toStrTags = {};
            var gOPD = getOwnPropertyDescriptor;
            var getPrototypeOf = Object.getPrototypeOf;
            if (hasToStringTag && gOPD && getPrototypeOf) {
                forEach(typedArrays, function(e) {
                    if (typeof g[e] === 'function') {
                        var t = new g[e]();
                        if (Symbol.toStringTag in t) {
                            var r = getPrototypeOf(t);
                            var n = gOPD(r, Symbol.toStringTag);
                            if (!n) {
                                var i = getPrototypeOf(r);
                                n = gOPD(i, Symbol.toStringTag);
                            }
                            toStrTags[e] = n.get;
                        }
                    }
                });
            }
            var tryTypedArrays = function e(t) {
                var r = false;
                forEach(toStrTags, function(e, n) {
                    if (!r) {
                        try {
                            var i = e.call(t);
                            if (i === n) {
                                r = i;
                            }
                        } catch (a) {}
                    }
                });
                return r;
            };
            var isTypedArray = isTypedArray$1;
            var whichTypedArray = function e(t) {
                if (!isTypedArray(t)) {
                    return false;
                }
                if (!hasToStringTag || !(Symbol.toStringTag in t)) {
                    return $slice($toString(t), 8, -1);
                }
                return tryTypedArrays(t);
            };
            (function(e) {
                var t = isArguments$1;
                var r = isGeneratorFunction;
                var n = whichTypedArray;
                var i = isTypedArray$1;
                function a(e) {
                    return e.call.bind(e);
                }
                var o = typeof BigInt !== 'undefined';
                var c = typeof Symbol !== 'undefined';
                var s = a(Object.prototype.toString);
                var u = a(Number.prototype.valueOf);
                var f = a(String.prototype.valueOf);
                var l = a(Boolean.prototype.valueOf);
                if (o) {
                    var h = a(BigInt.prototype.valueOf);
                }
                if (c) {
                    var d = a(Symbol.prototype.valueOf);
                }
                function m(e, t) {
                    if (typeof e !== 'object') {
                        return false;
                    }
                    try {
                        t(e);
                        return true;
                    } catch (r) {
                        return false;
                    }
                }
                e.isArgumentsObject = t;
                e.isGeneratorFunction = r;
                e.isTypedArray = i;
                function g(e) {
                    return typeof Promise !== 'undefined' && e instanceof Promise || e !== null && typeof e === 'object' && typeof e.then === 'function' && typeof e.catch === 'function';
                }
                e.isPromise = g;
                function p(e) {
                    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
                        return ArrayBuffer.isView(e);
                    }
                    return i(e) || M(e);
                }
                e.isArrayBufferView = p;
                function v(e) {
                    return n(e) === 'Uint8Array';
                }
                e.isUint8Array = v;
                function y(e) {
                    return n(e) === 'Uint8ClampedArray';
                }
                e.isUint8ClampedArray = y;
                function b(e) {
                    return n(e) === 'Uint16Array';
                }
                e.isUint16Array = b;
                function A(e) {
                    return n(e) === 'Uint32Array';
                }
                e.isUint32Array = A;
                function w(e) {
                    return n(e) === 'Int8Array';
                }
                e.isInt8Array = w;
                function _(e) {
                    return n(e) === 'Int16Array';
                }
                e.isInt16Array = _;
                function O(e) {
                    return n(e) === 'Int32Array';
                }
                e.isInt32Array = O;
                function S(e) {
                    return n(e) === 'Float32Array';
                }
                e.isFloat32Array = S;
                function E(e) {
                    return n(e) === 'Float64Array';
                }
                e.isFloat64Array = E;
                function T(e) {
                    return n(e) === 'BigInt64Array';
                }
                e.isBigInt64Array = T;
                function x(e) {
                    return n(e) === 'BigUint64Array';
                }
                e.isBigUint64Array = x;
                function k(e) {
                    return s(e) === '[object Map]';
                }
                k.working = typeof Map !== 'undefined' && k(new Map());
                function R(e) {
                    if (typeof Map === 'undefined') {
                        return false;
                    }
                    return k.working ? k(e) : e instanceof Map;
                }
                e.isMap = R;
                function U(e) {
                    return s(e) === '[object Set]';
                }
                U.working = typeof Set !== 'undefined' && U(new Set());
                function C(e) {
                    if (typeof Set === 'undefined') {
                        return false;
                    }
                    return U.working ? U(e) : e instanceof Set;
                }
                e.isSet = C;
                function P(e) {
                    return s(e) === '[object WeakMap]';
                }
                P.working = typeof WeakMap !== 'undefined' && P(new WeakMap());
                function F(e) {
                    if (typeof WeakMap === 'undefined') {
                        return false;
                    }
                    return P.working ? P(e) : e instanceof WeakMap;
                }
                e.isWeakMap = F;
                function I(e) {
                    return s(e) === '[object WeakSet]';
                }
                I.working = typeof WeakSet !== 'undefined' && I(new WeakSet());
                function D(e) {
                    return I(e);
                }
                e.isWeakSet = D;
                function L(e) {
                    return s(e) === '[object ArrayBuffer]';
                }
                L.working = typeof ArrayBuffer !== 'undefined' && L(new ArrayBuffer());
                function N(e) {
                    if (typeof ArrayBuffer === 'undefined') {
                        return false;
                    }
                    return L.working ? L(e) : e instanceof ArrayBuffer;
                }
                e.isArrayBuffer = N;
                function j(e) {
                    return s(e) === '[object DataView]';
                }
                j.working = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined' && j(new DataView(new ArrayBuffer(1), 0, 1));
                function M(e) {
                    if (typeof DataView === 'undefined') {
                        return false;
                    }
                    return j.working ? j(e) : e instanceof DataView;
                }
                e.isDataView = M;
                var B = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
                function Y(e) {
                    return s(e) === '[object SharedArrayBuffer]';
                }
                function W(e) {
                    if (typeof B === 'undefined') {
                        return false;
                    }
                    if (typeof Y.working === 'undefined') {
                        Y.working = Y(new B());
                    }
                    return Y.working ? Y(e) : e instanceof B;
                }
                e.isSharedArrayBuffer = W;
                function q(e) {
                    return s(e) === '[object AsyncFunction]';
                }
                e.isAsyncFunction = q;
                function z(e) {
                    return s(e) === '[object Map Iterator]';
                }
                e.isMapIterator = z;
                function V(e) {
                    return s(e) === '[object Set Iterator]';
                }
                e.isSetIterator = V;
                function G(e) {
                    return s(e) === '[object Generator]';
                }
                e.isGeneratorObject = G;
                function Z(e) {
                    return s(e) === '[object WebAssembly.Module]';
                }
                e.isWebAssemblyCompiledModule = Z;
                function K(e) {
                    return m(e, u);
                }
                e.isNumberObject = K;
                function H(e) {
                    return m(e, f);
                }
                e.isStringObject = H;
                function J(e) {
                    return m(e, l);
                }
                e.isBooleanObject = J;
                function X(e) {
                    return o && m(e, h);
                }
                e.isBigIntObject = X;
                function $(e) {
                    return c && m(e, d);
                }
                e.isSymbolObject = $;
                function Q(e) {
                    return K(e) || H(e) || J(e) || X(e) || $(e);
                }
                e.isBoxedPrimitive = Q;
                function ee(e) {
                    return typeof Uint8Array !== 'undefined' && (N(e) || W(e));
                }
                e.isAnyArrayBuffer = ee;
                [
                    'isProxy',
                    'isExternal',
                    'isModuleNamespaceObject'
                ].forEach(function(t) {
                    Object.defineProperty(e, t, {
                        enumerable: false,
                        value: function e() {
                            throw new Error(t + ' is not supported in userland');
                        }
                    });
                });
            })(types);
            var isBufferBrowser = function e(t) {
                return t && typeof t === 'object' && typeof t.copy === 'function' && typeof t.fill === 'function' && typeof t.readUInt8 === 'function';
            };
            (function(e) {
                var t = Object.getOwnPropertyDescriptors || function e(t) {
                    var r = Object.keys(t);
                    var n = {};
                    for(var i = 0; i < r.length; i++){
                        n[r[i]] = Object.getOwnPropertyDescriptor(t, r[i]);
                    }
                    return n;
                };
                var r = /%[sdj%]/g;
                e.format = function(e) {
                    if (!w(e)) {
                        var t = [];
                        for(var n = 0; n < arguments.length; n++){
                            t.push(o(arguments[n]));
                        }
                        return t.join(' ');
                    }
                    var n = 1;
                    var i = arguments;
                    var a = i.length;
                    var c = String(e).replace(r, function(e) {
                        if (e === '%%') return '%';
                        if (n >= a) return e;
                        switch(e){
                            case '%s':
                                return String(i[n++]);
                            case '%d':
                                return Number(i[n++]);
                            case '%j':
                                try {
                                    return JSON.stringify(i[n++]);
                                } catch (t) {
                                    return '[Circular]';
                                }
                            default:
                                return e;
                        }
                    });
                    for(var s = i[n]; n < a; s = i[++n]){
                        if (y(s) || !E(s)) {
                            c += ' ' + s;
                        } else {
                            c += ' ' + o(s);
                        }
                    }
                    return c;
                };
                e.deprecate = function(t, r) {
                    if (typeof browser$1$1 !== 'undefined' && browser$1$1.noDeprecation === true) {
                        return t;
                    }
                    if (typeof browser$1$1 === 'undefined') {
                        return function() {
                            return e.deprecate(t, r).apply(this, arguments);
                        };
                    }
                    var n = false;
                    function i() {
                        if (!n) {
                            {
                                console.error(r);
                            }
                            n = true;
                        }
                        return t.apply(this, arguments);
                    }
                    return i;
                };
                var n = {};
                var i = /^$/;
                if (browser$1$1.env.NODE_DEBUG) {
                    var a = browser$1$1.env.NODE_DEBUG;
                    a = a.replace(/[|\\{}()[\]^$+?.]/g, '\\$&').replace(/\*/g, '.*').replace(/,/g, '$|^').toUpperCase();
                    i = new RegExp('^' + a + '$', 'i');
                }
                e.debuglog = function(t) {
                    t = t.toUpperCase();
                    if (!n[t]) {
                        if (i.test(t)) {
                            var r = browser$1$1.pid;
                            n[t] = function() {
                                var n = e.format.apply(e, arguments);
                                console.error('%s %d: %s', t, r, n);
                            };
                        } else {
                            n[t] = function() {};
                        }
                    }
                    return n[t];
                };
                function o(t, r) {
                    var n = {
                        seen: [],
                        stylize: s
                    };
                    if (arguments.length >= 3) n.depth = arguments[2];
                    if (arguments.length >= 4) n.colors = arguments[3];
                    if (v(r)) {
                        n.showHidden = r;
                    } else if (r) {
                        e._extend(n, r);
                    }
                    if (O(n.showHidden)) n.showHidden = false;
                    if (O(n.depth)) n.depth = 2;
                    if (O(n.colors)) n.colors = false;
                    if (O(n.customInspect)) n.customInspect = true;
                    if (n.colors) n.stylize = c;
                    return f(n, t, n.depth);
                }
                e.inspect = o;
                o.colors = {
                    'bold': [
                        1,
                        22
                    ],
                    'italic': [
                        3,
                        23
                    ],
                    'underline': [
                        4,
                        24
                    ],
                    'inverse': [
                        7,
                        27
                    ],
                    'white': [
                        37,
                        39
                    ],
                    'grey': [
                        90,
                        39
                    ],
                    'black': [
                        30,
                        39
                    ],
                    'blue': [
                        34,
                        39
                    ],
                    'cyan': [
                        36,
                        39
                    ],
                    'green': [
                        32,
                        39
                    ],
                    'magenta': [
                        35,
                        39
                    ],
                    'red': [
                        31,
                        39
                    ],
                    'yellow': [
                        33,
                        39
                    ]
                };
                o.styles = {
                    'special': 'cyan',
                    'number': 'yellow',
                    'boolean': 'yellow',
                    'undefined': 'grey',
                    'null': 'bold',
                    'string': 'green',
                    'date': 'magenta',
                    'regexp': 'red'
                };
                function c(e, t) {
                    var r = o.styles[t];
                    if (r) {
                        return "\x1B[" + o.colors[r][0] + 'm' + e + "\x1B[" + o.colors[r][1] + 'm';
                    } else {
                        return e;
                    }
                }
                function s(e, t) {
                    return e;
                }
                function u(e) {
                    var t = {};
                    e.forEach(function(e, r) {
                        t[e] = true;
                    });
                    return t;
                }
                function f(t, r, n) {
                    if (t.customInspect && r && k(r.inspect) && r.inspect !== e.inspect && !(r.constructor && r.constructor.prototype === r)) {
                        var i = r.inspect(n, t);
                        if (!w(i)) {
                            i = f(t, i, n);
                        }
                        return i;
                    }
                    var a = l(t, r);
                    if (a) {
                        return a;
                    }
                    var o = Object.keys(r);
                    var c = u(o);
                    if (t.showHidden) {
                        o = Object.getOwnPropertyNames(r);
                    }
                    if (x(r) && (o.indexOf('message') >= 0 || o.indexOf('description') >= 0)) {
                        return h(r);
                    }
                    if (o.length === 0) {
                        if (k(r)) {
                            var s = r.name ? ': ' + r.name : '';
                            return t.stylize('[Function' + s + ']', 'special');
                        }
                        if (S(r)) {
                            return t.stylize(RegExp.prototype.toString.call(r), 'regexp');
                        }
                        if (T(r)) {
                            return t.stylize(Date.prototype.toString.call(r), 'date');
                        }
                        if (x(r)) {
                            return h(r);
                        }
                    }
                    var v = '', y = false, b = [
                        '{',
                        '}'
                    ];
                    if (p(r)) {
                        y = true;
                        b = [
                            '[',
                            ']'
                        ];
                    }
                    if (k(r)) {
                        var A = r.name ? ': ' + r.name : '';
                        v = ' [Function' + A + ']';
                    }
                    if (S(r)) {
                        v = ' ' + RegExp.prototype.toString.call(r);
                    }
                    if (T(r)) {
                        v = ' ' + Date.prototype.toUTCString.call(r);
                    }
                    if (x(r)) {
                        v = ' ' + h(r);
                    }
                    if (o.length === 0 && (!y || r.length == 0)) {
                        return b[0] + v + b[1];
                    }
                    if (n < 0) {
                        if (S(r)) {
                            return t.stylize(RegExp.prototype.toString.call(r), 'regexp');
                        } else {
                            return t.stylize('[Object]', 'special');
                        }
                    }
                    t.seen.push(r);
                    var _;
                    if (y) {
                        _ = d(t, r, n, c, o);
                    } else {
                        _ = o.map(function(e) {
                            return m(t, r, n, c, e, y);
                        });
                    }
                    t.seen.pop();
                    return g(_, v, b);
                }
                function l(e, t) {
                    if (O(t)) return e.stylize('undefined', 'undefined');
                    if (w(t)) {
                        var r = '\'' + JSON.stringify(t).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
                        return e.stylize(r, 'string');
                    }
                    if (A(t)) return e.stylize('' + t, 'number');
                    if (v(t)) return e.stylize('' + t, 'boolean');
                    if (y(t)) return e.stylize('null', 'null');
                }
                function h(e) {
                    return '[' + Error.prototype.toString.call(e) + ']';
                }
                function d(e, t, r, n, i) {
                    var a = [];
                    for(var o = 0, c = t.length; o < c; ++o){
                        if (I(t, String(o))) {
                            a.push(m(e, t, r, n, String(o), true));
                        } else {
                            a.push('');
                        }
                    }
                    i.forEach(function(i) {
                        if (!i.match(/^\d+$/)) {
                            a.push(m(e, t, r, n, i, true));
                        }
                    });
                    return a;
                }
                function m(e, t, r, n, i, a) {
                    var o, c, s;
                    s = Object.getOwnPropertyDescriptor(t, i) || {
                        value: t[i]
                    };
                    if (s.get) {
                        if (s.set) {
                            c = e.stylize('[Getter/Setter]', 'special');
                        } else {
                            c = e.stylize('[Getter]', 'special');
                        }
                    } else {
                        if (s.set) {
                            c = e.stylize('[Setter]', 'special');
                        }
                    }
                    if (!I(n, i)) {
                        o = '[' + i + ']';
                    }
                    if (!c) {
                        if (e.seen.indexOf(s.value) < 0) {
                            if (y(r)) {
                                c = f(e, s.value, null);
                            } else {
                                c = f(e, s.value, r - 1);
                            }
                            if (c.indexOf('\n') > -1) {
                                if (a) {
                                    c = c.split('\n').map(function(e) {
                                        return '  ' + e;
                                    }).join('\n').substr(2);
                                } else {
                                    c = '\n' + c.split('\n').map(function(e) {
                                        return '   ' + e;
                                    }).join('\n');
                                }
                            }
                        } else {
                            c = e.stylize('[Circular]', 'special');
                        }
                    }
                    if (O(o)) {
                        if (a && i.match(/^\d+$/)) {
                            return c;
                        }
                        o = JSON.stringify('' + i);
                        if (o.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                            o = o.substr(1, o.length - 2);
                            o = e.stylize(o, 'name');
                        } else {
                            o = o.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                            o = e.stylize(o, 'string');
                        }
                    }
                    return o + ': ' + c;
                }
                function g(e, t, r) {
                    var n = e.reduce(function(e, t) {
                        if (t.indexOf('\n') >= 0) ;
                        return e + t.replace(/\u001b\[\d\d?m/g, '').length + 1;
                    }, 0);
                    if (n > 60) {
                        return r[0] + (t === '' ? '' : t + '\n ') + ' ' + e.join(',\n  ') + ' ' + r[1];
                    }
                    return r[0] + t + ' ' + e.join(', ') + ' ' + r[1];
                }
                e.types = types;
                function p(e) {
                    return Array.isArray(e);
                }
                e.isArray = p;
                function v(e) {
                    return typeof e === 'boolean';
                }
                e.isBoolean = v;
                function y(e) {
                    return e === null;
                }
                e.isNull = y;
                function b(e) {
                    return e == null;
                }
                e.isNullOrUndefined = b;
                function A(e) {
                    return typeof e === 'number';
                }
                e.isNumber = A;
                function w(e) {
                    return typeof e === 'string';
                }
                e.isString = w;
                function _(e) {
                    return typeof e === 'symbol';
                }
                e.isSymbol = _;
                function O(e) {
                    return e === void 0;
                }
                e.isUndefined = O;
                function S(e) {
                    return E(e) && U(e) === '[object RegExp]';
                }
                e.isRegExp = S;
                e.types.isRegExp = S;
                function E(e) {
                    return typeof e === 'object' && e !== null;
                }
                e.isObject = E;
                function T(e) {
                    return E(e) && U(e) === '[object Date]';
                }
                e.isDate = T;
                e.types.isDate = T;
                function x(e) {
                    return E(e) && (U(e) === '[object Error]' || e instanceof Error);
                }
                e.isError = x;
                e.types.isNativeError = x;
                function k(e) {
                    return typeof e === 'function';
                }
                e.isFunction = k;
                function R(e) {
                    return e === null || typeof e === 'boolean' || typeof e === 'number' || typeof e === 'string' || typeof e === 'symbol' || typeof e === 'undefined';
                }
                e.isPrimitive = R;
                e.isBuffer = isBufferBrowser;
                function U(e) {
                    return Object.prototype.toString.call(e);
                }
                function C(e) {
                    return e < 10 ? '0' + e.toString(10) : e.toString(10);
                }
                var P = [
                    'Jan',
                    'Feb',
                    'Mar',
                    'Apr',
                    'May',
                    'Jun',
                    'Jul',
                    'Aug',
                    'Sep',
                    'Oct',
                    'Nov',
                    'Dec'
                ];
                function F() {
                    var e = new Date();
                    var t = [
                        C(e.getHours()),
                        C(e.getMinutes()),
                        C(e.getSeconds())
                    ].join(':');
                    return [
                        e.getDate(),
                        P[e.getMonth()],
                        t
                    ].join(' ');
                }
                e.log = function() {
                    console.log('%s - %s', F(), e.format.apply(e, arguments));
                };
                e.inherits = inherits_browser.exports;
                e._extend = function(e, t) {
                    if (!t || !E(t)) return e;
                    var r = Object.keys(t);
                    var n = r.length;
                    while(n--){
                        e[r[n]] = t[r[n]];
                    }
                    return e;
                };
                function I(e, t) {
                    return Object.prototype.hasOwnProperty.call(e, t);
                }
                var D = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;
                e.promisify = function e(r) {
                    if (typeof r !== 'function') throw new TypeError('The "original" argument must be of type Function');
                    if (D && r[D]) {
                        var n = r[D];
                        if (typeof n !== 'function') {
                            throw new TypeError('The "util.promisify.custom" argument must be of type Function');
                        }
                        Object.defineProperty(n, D, {
                            value: n,
                            enumerable: false,
                            writable: false,
                            configurable: true
                        });
                        return n;
                    }
                    function n() {
                        var e, t;
                        var n = new Promise(function(r, n) {
                            e = r;
                            t = n;
                        });
                        var i = [];
                        for(var a = 0; a < arguments.length; a++){
                            i.push(arguments[a]);
                        }
                        i.push(function(r, n) {
                            if (r) {
                                t(r);
                            } else {
                                e(n);
                            }
                        });
                        try {
                            r.apply(this, i);
                        } catch (o) {
                            t(o);
                        }
                        return n;
                    }
                    Object.setPrototypeOf(n, Object.getPrototypeOf(r));
                    if (D) Object.defineProperty(n, D, {
                        value: n,
                        enumerable: false,
                        writable: false,
                        configurable: true
                    });
                    return Object.defineProperties(n, t(r));
                };
                e.promisify.custom = D;
                function L(e, t) {
                    if (!e) {
                        var r = new Error('Promise was rejected with a falsy value');
                        r.reason = e;
                        e = r;
                    }
                    return t(e);
                }
                function N(e) {
                    if (typeof e !== 'function') {
                        throw new TypeError('The "original" argument must be of type Function');
                    }
                    function r() {
                        var t = [];
                        for(var r = 0; r < arguments.length; r++){
                            t.push(arguments[r]);
                        }
                        var n = t.pop();
                        if (typeof n !== 'function') {
                            throw new TypeError('The last argument must be of type Function');
                        }
                        var i = this;
                        var a = function e() {
                            return n.apply(i, arguments);
                        };
                        e.apply(this, t).then(function(e) {
                            browser$1$1.nextTick(a.bind(null, null, e));
                        }, function(e) {
                            browser$1$1.nextTick(L.bind(null, e, a));
                        });
                    }
                    Object.setPrototypeOf(r, Object.getPrototypeOf(e));
                    Object.defineProperties(r, t(e));
                    return r;
                }
                e.callbackify = N;
            })(util$1);
            function _typeof$3(e) {
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof$3 = function e(t) {
                        return typeof t;
                    };
                } else {
                    _typeof$3 = function e(t) {
                        return t && typeof Symbol === "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    };
                }
                return _typeof$3(e);
            }
            function _classCallCheck$2(e, t) {
                if (!(e instanceof t)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _possibleConstructorReturn$1(e, t) {
                if (t && (_typeof$3(t) === "object" || typeof t === "function")) {
                    return t;
                }
                return _assertThisInitialized$1(e);
            }
            function _assertThisInitialized$1(e) {
                if (e === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return e;
            }
            function _getPrototypeOf$1(e) {
                _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function e(t) {
                    return t.__proto__ || Object.getPrototypeOf(t);
                };
                return _getPrototypeOf$1(e);
            }
            function _inherits$1(e, t) {
                if (typeof t !== "function" && t !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        writable: true,
                        configurable: true
                    }
                });
                if (t) _setPrototypeOf$1(e, t);
            }
            function _setPrototypeOf$1(e, t) {
                _setPrototypeOf$1 = Object.setPrototypeOf || function e(t, r) {
                    t.__proto__ = r;
                    return t;
                };
                return _setPrototypeOf$1(e, t);
            }
            var codes = {};
            var assert$1;
            var util;
            function createErrorType(e, t, r) {
                if (!r) {
                    r = Error;
                }
                function n(e, r, n) {
                    if (typeof t === 'string') {
                        return t;
                    } else {
                        return t(e, r, n);
                    }
                }
                var i = function(t) {
                    _inherits$1(r, t);
                    function r(t, i, a) {
                        var o;
                        _classCallCheck$2(this, r);
                        o = _possibleConstructorReturn$1(this, _getPrototypeOf$1(r).call(this, n(t, i, a)));
                        o.code = e;
                        return o;
                    }
                    return r;
                }(r);
                codes[e] = i;
            }
            function oneOf(e, t) {
                if (Array.isArray(e)) {
                    var r = e.length;
                    e = e.map(function(e) {
                        return String(e);
                    });
                    if (r > 2) {
                        return "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(', '), ", or ") + e[r - 1];
                    } else if (r === 2) {
                        return "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]);
                    } else {
                        return "of ".concat(t, " ").concat(e[0]);
                    }
                } else {
                    return "of ".concat(t, " ").concat(String(e));
                }
            }
            function startsWith(e, t, r) {
                return e.substr(!r || r < 0 ? 0 : +r, t.length) === t;
            }
            function endsWith$1(e, t, r) {
                if (r === undefined || r > e.length) {
                    r = e.length;
                }
                return e.substring(r - t.length, r) === t;
            }
            function includes(e, t, r) {
                if (typeof r !== 'number') {
                    r = 0;
                }
                if (r + t.length > e.length) {
                    return false;
                } else {
                    return e.indexOf(t, r) !== -1;
                }
            }
            createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
            createErrorType('ERR_INVALID_ARG_TYPE', function(e, t, r) {
                if (assert$1 === undefined) assert$1 = assert$2.exports;
                assert$1(typeof e === 'string', "'name' must be a string");
                var n;
                if (typeof t === 'string' && startsWith(t, 'not ')) {
                    n = 'must not be';
                    t = t.replace(/^not /, '');
                } else {
                    n = 'must be';
                }
                var i;
                if (endsWith$1(e, ' argument')) {
                    i = "The ".concat(e, " ").concat(n, " ").concat(oneOf(t, 'type'));
                } else {
                    var a = includes(e, '.') ? 'property' : 'argument';
                    i = "The \"".concat(e, "\" ").concat(a, " ").concat(n, " ").concat(oneOf(t, 'type'));
                }
                i += ". Received type ".concat(_typeof$3(r));
                return i;
            }, TypeError);
            createErrorType('ERR_INVALID_ARG_VALUE', function(e, t) {
                var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
                if (util === undefined) util = util$1;
                var n = util.inspect(t);
                if (n.length > 128) {
                    n = "".concat(n.slice(0, 128), "...");
                }
                return "The argument '".concat(e, "' ").concat(r, ". Received ").concat(n);
            }, TypeError);
            createErrorType('ERR_INVALID_RETURN_VALUE', function(e, t, r) {
                var n;
                if (r && r.constructor && r.constructor.name) {
                    n = "instance of ".concat(r.constructor.name);
                } else {
                    n = "type ".concat(_typeof$3(r));
                }
                return "Expected ".concat(e, " to be returned from the \"").concat(t, "\"") + " function but got ".concat(n, ".");
            }, TypeError);
            createErrorType('ERR_MISSING_ARGS', function() {
                for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++){
                    t[r] = arguments[r];
                }
                if (assert$1 === undefined) assert$1 = assert$2.exports;
                assert$1(t.length > 0, 'At least one arg needs to be specified');
                var n = 'The ';
                var i = t.length;
                t = t.map(function(e) {
                    return "\"".concat(e, "\"");
                });
                switch(i){
                    case 1:
                        n += "".concat(t[0], " argument");
                        break;
                    case 2:
                        n += "".concat(t[0], " and ").concat(t[1], " arguments");
                        break;
                    default:
                        n += t.slice(0, i - 1).join(', ');
                        n += ", and ".concat(t[i - 1], " arguments");
                        break;
                }
                return "".concat(n, " must be specified");
            }, TypeError);
            errors.codes = codes;
            function _objectSpread(e) {
                for(var t = 1; t < arguments.length; t++){
                    var r = arguments[t] != null ? arguments[t] : {};
                    var n = Object.keys(r);
                    if (typeof Object.getOwnPropertySymbols === 'function') {
                        n = n.concat(Object.getOwnPropertySymbols(r).filter(function(e) {
                            return Object.getOwnPropertyDescriptor(r, e).enumerable;
                        }));
                    }
                    n.forEach(function(t) {
                        _defineProperty(e, t, r[t]);
                    });
                }
                return e;
            }
            function _defineProperty(e, t, r) {
                if (t in e) {
                    Object.defineProperty(e, t, {
                        value: r,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    e[t] = r;
                }
                return e;
            }
            function _classCallCheck$1(e, t) {
                if (!(e instanceof t)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            function _defineProperties$1(e, t) {
                for(var r = 0; r < t.length; r++){
                    var n = t[r];
                    n.enumerable = n.enumerable || false;
                    n.configurable = true;
                    if ("value" in n) n.writable = true;
                    Object.defineProperty(e, n.key, n);
                }
            }
            function _createClass$1(e, t, r) {
                if (t) _defineProperties$1(e.prototype, t);
                if (r) _defineProperties$1(e, r);
                return e;
            }
            function _possibleConstructorReturn(e, t) {
                if (t && (_typeof$2(t) === "object" || typeof t === "function")) {
                    return t;
                }
                return _assertThisInitialized(e);
            }
            function _assertThisInitialized(e) {
                if (e === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return e;
            }
            function _inherits(e, t) {
                if (typeof t !== "function" && t !== null) {
                    throw new TypeError("Super expression must either be null or a function");
                }
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        writable: true,
                        configurable: true
                    }
                });
                if (t) _setPrototypeOf(e, t);
            }
            function _wrapNativeSuper(e) {
                var t = typeof Map === "function" ? new Map() : undefined;
                _wrapNativeSuper = function e(r) {
                    if (r === null || !_isNativeFunction(r)) return r;
                    if (typeof r !== "function") {
                        throw new TypeError("Super expression must either be null or a function");
                    }
                    if (typeof t !== "undefined") {
                        if (t.has(r)) return t.get(r);
                        t.set(r, n);
                    }
                    function n() {
                        return _construct(r, arguments, _getPrototypeOf(this).constructor);
                    }
                    n.prototype = Object.create(r.prototype, {
                        constructor: {
                            value: n,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                    return _setPrototypeOf(n, r);
                };
                return _wrapNativeSuper(e);
            }
            function isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                if (Reflect.construct.sham) return false;
                if (typeof Proxy === "function") return true;
                try {
                    Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
                    return true;
                } catch (e) {
                    return false;
                }
            }
            function _construct(e, t, r) {
                if (isNativeReflectConstruct()) {
                    _construct = Reflect.construct;
                } else {
                    _construct = function e(t, r, n) {
                        var i = [
                            null
                        ];
                        i.push.apply(i, r);
                        var a = Function.bind.apply(t, i);
                        var o = new a();
                        if (n) _setPrototypeOf(o, n.prototype);
                        return o;
                    };
                }
                return _construct.apply(null, arguments);
            }
            function _isNativeFunction(e) {
                return Function.toString.call(e).indexOf("[native code]") !== -1;
            }
            function _setPrototypeOf(e, t) {
                _setPrototypeOf = Object.setPrototypeOf || function e(t, r) {
                    t.__proto__ = r;
                    return t;
                };
                return _setPrototypeOf(e, t);
            }
            function _getPrototypeOf(e) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function e(t) {
                    return t.__proto__ || Object.getPrototypeOf(t);
                };
                return _getPrototypeOf(e);
            }
            function _typeof$2(e) {
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof$2 = function e(t) {
                        return typeof t;
                    };
                } else {
                    _typeof$2 = function e(t) {
                        return t && typeof Symbol === "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    };
                }
                return _typeof$2(e);
            }
            var _require$1 = util$1, inspect$1 = _require$1.inspect;
            var _require2$1 = errors, ERR_INVALID_ARG_TYPE$1 = _require2$1.codes.ERR_INVALID_ARG_TYPE;
            function endsWith(e, t, r) {
                if (r === undefined || r > e.length) {
                    r = e.length;
                }
                return e.substring(r - t.length, r) === t;
            }
            function repeat(e, t) {
                t = Math.floor(t);
                if (e.length == 0 || t == 0) return '';
                var r = e.length * t;
                t = Math.floor(Math.log(t) / Math.log(2));
                while(t){
                    e += e;
                    t--;
                }
                e += e.substring(0, r - e.length);
                return e;
            }
            var blue = '';
            var green = '';
            var red = '';
            var white = '';
            var kReadableOperator = {
                deepStrictEqual: 'Expected values to be strictly deep-equal:',
                strictEqual: 'Expected values to be strictly equal:',
                strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
                deepEqual: 'Expected values to be loosely deep-equal:',
                equal: 'Expected values to be loosely equal:',
                notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
                notStrictEqual: 'Expected "actual" to be strictly unequal to:',
                notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
                notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
                notEqual: 'Expected "actual" to be loosely unequal to:',
                notIdentical: 'Values identical but not reference-equal:'
            };
            var kMaxShortLength = 10;
            function copyError(e) {
                var t = Object.keys(e);
                var r = Object.create(Object.getPrototypeOf(e));
                t.forEach(function(t) {
                    r[t] = e[t];
                });
                Object.defineProperty(r, 'message', {
                    value: e.message
                });
                return r;
            }
            function inspectValue(e) {
                return inspect$1(e, {
                    compact: false,
                    customInspect: false,
                    depth: 1000,
                    maxArrayLength: Infinity,
                    showHidden: false,
                    breakLength: Infinity,
                    showProxy: false,
                    sorted: true,
                    getters: true
                });
            }
            function createErrDiff(e, t, r) {
                var n = '';
                var i = '';
                var a = 0;
                var o = '';
                var c = false;
                var s = inspectValue(e);
                var u = s.split('\n');
                var f = inspectValue(t).split('\n');
                var l = 0;
                var h = '';
                if (r === 'strictEqual' && _typeof$2(e) === 'object' && _typeof$2(t) === 'object' && e !== null && t !== null) {
                    r = 'strictEqualObject';
                }
                if (u.length === 1 && f.length === 1 && u[0] !== f[0]) {
                    var d = u[0].length + f[0].length;
                    if (d <= kMaxShortLength) {
                        if ((_typeof$2(e) !== 'object' || e === null) && (_typeof$2(t) !== 'object' || t === null) && (e !== 0 || t !== 0)) {
                            return "".concat(kReadableOperator[r], "\n\n") + "".concat(u[0], " !== ").concat(f[0], "\n");
                        }
                    } else if (r !== 'strictEqualObject') {
                        var m = 80;
                        if (d < m) {
                            while(u[0][l] === f[0][l]){
                                l++;
                            }
                            if (l > 2) {
                                h = "\n  ".concat(repeat(' ', l), "^");
                                l = 0;
                            }
                        }
                    }
                }
                var g = u[u.length - 1];
                var p = f[f.length - 1];
                while(g === p){
                    if (l++ < 2) {
                        o = "\n  ".concat(g).concat(o);
                    } else {
                        n = g;
                    }
                    u.pop();
                    f.pop();
                    if (u.length === 0 || f.length === 0) break;
                    g = u[u.length - 1];
                    p = f[f.length - 1];
                }
                var v = Math.max(u.length, f.length);
                if (v === 0) {
                    var y = s.split('\n');
                    if (y.length > 30) {
                        y[26] = "".concat(blue, "...").concat(white);
                        while(y.length > 27){
                            y.pop();
                        }
                    }
                    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(y.join('\n'), "\n");
                }
                if (l > 3) {
                    o = "\n".concat(blue, "...").concat(white).concat(o);
                    c = true;
                }
                if (n !== '') {
                    o = "\n  ".concat(n).concat(o);
                    n = '';
                }
                var b = 0;
                var A = kReadableOperator[r] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
                var w = " ".concat(blue, "...").concat(white, " Lines skipped");
                for(l = 0; l < v; l++){
                    var _ = l - a;
                    if (u.length < l + 1) {
                        if (_ > 1 && l > 2) {
                            if (_ > 4) {
                                i += "\n".concat(blue, "...").concat(white);
                                c = true;
                            } else if (_ > 3) {
                                i += "\n  ".concat(f[l - 2]);
                                b++;
                            }
                            i += "\n  ".concat(f[l - 1]);
                            b++;
                        }
                        a = l;
                        n += "\n".concat(red, "-").concat(white, " ").concat(f[l]);
                        b++;
                    } else if (f.length < l + 1) {
                        if (_ > 1 && l > 2) {
                            if (_ > 4) {
                                i += "\n".concat(blue, "...").concat(white);
                                c = true;
                            } else if (_ > 3) {
                                i += "\n  ".concat(u[l - 2]);
                                b++;
                            }
                            i += "\n  ".concat(u[l - 1]);
                            b++;
                        }
                        a = l;
                        i += "\n".concat(green, "+").concat(white, " ").concat(u[l]);
                        b++;
                    } else {
                        var O = f[l];
                        var S = u[l];
                        var E = S !== O && (!endsWith(S, ',') || S.slice(0, -1) !== O);
                        if (E && endsWith(O, ',') && O.slice(0, -1) === S) {
                            E = false;
                            S += ',';
                        }
                        if (E) {
                            if (_ > 1 && l > 2) {
                                if (_ > 4) {
                                    i += "\n".concat(blue, "...").concat(white);
                                    c = true;
                                } else if (_ > 3) {
                                    i += "\n  ".concat(u[l - 2]);
                                    b++;
                                }
                                i += "\n  ".concat(u[l - 1]);
                                b++;
                            }
                            a = l;
                            i += "\n".concat(green, "+").concat(white, " ").concat(S);
                            n += "\n".concat(red, "-").concat(white, " ").concat(O);
                            b += 2;
                        } else {
                            i += n;
                            n = '';
                            if (_ === 1 || l === 0) {
                                i += "\n  ".concat(S);
                                b++;
                            }
                        }
                    }
                    if (b > 20 && l < v - 2) {
                        return "".concat(A).concat(w, "\n").concat(i, "\n").concat(blue, "...").concat(white).concat(n, "\n") + "".concat(blue, "...").concat(white);
                    }
                }
                return "".concat(A).concat(c ? w : '', "\n").concat(i).concat(n).concat(o).concat(h);
            }
            var AssertionError$1 = function(e) {
                _inherits(t, e);
                function t(e) {
                    var r;
                    _classCallCheck$1(this, t);
                    if (_typeof$2(e) !== 'object' || e === null) {
                        throw new ERR_INVALID_ARG_TYPE$1('options', 'Object', e);
                    }
                    var n = e.message, i = e.operator, a = e.stackStartFn;
                    var o = e.actual, c = e.expected;
                    var s = Error.stackTraceLimit;
                    Error.stackTraceLimit = 0;
                    if (n != null) {
                        r = _possibleConstructorReturn(this, _getPrototypeOf(t).call(this, String(n)));
                    } else {
                        if (_typeof$2(o) === 'object' && o !== null && _typeof$2(c) === 'object' && c !== null && 'stack' in o && o instanceof Error && 'stack' in c && c instanceof Error) {
                            o = copyError(o);
                            c = copyError(c);
                        }
                        if (i === 'deepStrictEqual' || i === 'strictEqual') {
                            r = _possibleConstructorReturn(this, _getPrototypeOf(t).call(this, createErrDiff(o, c, i)));
                        } else if (i === 'notDeepStrictEqual' || i === 'notStrictEqual') {
                            var u = kReadableOperator[i];
                            var f = inspectValue(o).split('\n');
                            if (i === 'notStrictEqual' && _typeof$2(o) === 'object' && o !== null) {
                                u = kReadableOperator.notStrictEqualObject;
                            }
                            if (f.length > 30) {
                                f[26] = "".concat(blue, "...").concat(white);
                                while(f.length > 27){
                                    f.pop();
                                }
                            }
                            if (f.length === 1) {
                                r = _possibleConstructorReturn(this, _getPrototypeOf(t).call(this, "".concat(u, " ").concat(f[0])));
                            } else {
                                r = _possibleConstructorReturn(this, _getPrototypeOf(t).call(this, "".concat(u, "\n\n").concat(f.join('\n'), "\n")));
                            }
                        } else {
                            var l = inspectValue(o);
                            var h = '';
                            var d = kReadableOperator[i];
                            if (i === 'notDeepEqual' || i === 'notEqual') {
                                l = "".concat(kReadableOperator[i], "\n\n").concat(l);
                                if (l.length > 1024) {
                                    l = "".concat(l.slice(0, 1021), "...");
                                }
                            } else {
                                h = "".concat(inspectValue(c));
                                if (l.length > 512) {
                                    l = "".concat(l.slice(0, 509), "...");
                                }
                                if (h.length > 512) {
                                    h = "".concat(h.slice(0, 509), "...");
                                }
                                if (i === 'deepEqual' || i === 'equal') {
                                    l = "".concat(d, "\n\n").concat(l, "\n\nshould equal\n\n");
                                } else {
                                    h = " ".concat(i, " ").concat(h);
                                }
                            }
                            r = _possibleConstructorReturn(this, _getPrototypeOf(t).call(this, "".concat(l).concat(h)));
                        }
                    }
                    Error.stackTraceLimit = s;
                    r.generatedMessage = !n;
                    Object.defineProperty(_assertThisInitialized(r), 'name', {
                        value: 'AssertionError [ERR_ASSERTION]',
                        enumerable: false,
                        writable: true,
                        configurable: true
                    });
                    r.code = 'ERR_ASSERTION';
                    r.actual = o;
                    r.expected = c;
                    r.operator = i;
                    if (Error.captureStackTrace) {
                        Error.captureStackTrace(_assertThisInitialized(r), a);
                    }
                    r.stack;
                    r.name = 'AssertionError';
                    return _possibleConstructorReturn(r);
                }
                _createClass$1(t, [
                    {
                        key: "toString",
                        value: function e() {
                            return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
                        }
                    },
                    {
                        key: inspect$1.custom,
                        value: function e(t, r) {
                            return inspect$1(this, _objectSpread({}, r, {
                                customInspect: false,
                                depth: 0
                            }));
                        }
                    }
                ]);
                return t;
            }(_wrapNativeSuper(Error));
            var assertion_error = AssertionError$1;
            function assign(e, t) {
                if (e === undefined || e === null) {
                    throw new TypeError('Cannot convert first argument to object');
                }
                var r = Object(e);
                for(var n = 1; n < arguments.length; n++){
                    var i = arguments[n];
                    if (i === undefined || i === null) {
                        continue;
                    }
                    var a = Object.keys(Object(i));
                    for(var o = 0, c = a.length; o < c; o++){
                        var s = a[o];
                        var u = Object.getOwnPropertyDescriptor(i, s);
                        if (u !== undefined && u.enumerable) {
                            r[s] = i[s];
                        }
                    }
                }
                return r;
            }
            function polyfill$4() {
                if (!Object.assign) {
                    Object.defineProperty(Object, 'assign', {
                        enumerable: false,
                        configurable: true,
                        writable: true,
                        value: assign
                    });
                }
            }
            var es6ObjectAssign = {
                assign: assign,
                polyfill: polyfill$4
            };
            var toStr$2 = Object.prototype.toString;
            var isArguments = function e(t) {
                var r = toStr$2.call(t);
                var n = r === '[object Arguments]';
                if (!n) {
                    n = r !== '[object Array]' && t !== null && typeof t === 'object' && typeof t.length === 'number' && t.length >= 0 && toStr$2.call(t.callee) === '[object Function]';
                }
                return n;
            };
            var keysShim$1;
            if (!Object.keys) {
                var has = Object.prototype.hasOwnProperty;
                var toStr$1 = Object.prototype.toString;
                var isArgs$1 = isArguments;
                var isEnumerable = Object.prototype.propertyIsEnumerable;
                var hasDontEnumBug = !isEnumerable.call({
                    toString: null
                }, 'toString');
                var hasProtoEnumBug = isEnumerable.call(function() {}, 'prototype');
                var dontEnums = [
                    'toString',
                    'toLocaleString',
                    'valueOf',
                    'hasOwnProperty',
                    'isPrototypeOf',
                    'propertyIsEnumerable',
                    'constructor'
                ];
                var equalsConstructorPrototype = function e(t) {
                    var r = t.constructor;
                    return r && r.prototype === t;
                };
                var excludedKeys = {
                    $applicationCache: true,
                    $console: true,
                    $external: true,
                    $frame: true,
                    $frameElement: true,
                    $frames: true,
                    $innerHeight: true,
                    $innerWidth: true,
                    $onmozfullscreenchange: true,
                    $onmozfullscreenerror: true,
                    $outerHeight: true,
                    $outerWidth: true,
                    $pageXOffset: true,
                    $pageYOffset: true,
                    $parent: true,
                    $scrollLeft: true,
                    $scrollTop: true,
                    $scrollX: true,
                    $scrollY: true,
                    $self: true,
                    $webkitIndexedDB: true,
                    $webkitStorageInfo: true,
                    $window: true
                };
                var hasAutomationEqualityBug = function() {
                    if (typeof window === 'undefined') {
                        return false;
                    }
                    for(var e in window){
                        try {
                            if (!excludedKeys['$' + e] && has.call(window, e) && window[e] !== null && typeof window[e] === 'object') {
                                try {
                                    equalsConstructorPrototype(window[e]);
                                } catch (t) {
                                    return true;
                                }
                            }
                        } catch (r) {
                            return true;
                        }
                    }
                    return false;
                }();
                var equalsConstructorPrototypeIfNotBuggy = function e(t) {
                    if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
                        return equalsConstructorPrototype(t);
                    }
                    try {
                        return equalsConstructorPrototype(t);
                    } catch (r) {
                        return false;
                    }
                };
                keysShim$1 = function e(t) {
                    var r = t !== null && typeof t === 'object';
                    var n = toStr$1.call(t) === '[object Function]';
                    var i = isArgs$1(t);
                    var a = r && toStr$1.call(t) === '[object String]';
                    var o = [];
                    if (!r && !n && !i) {
                        throw new TypeError('Object.keys called on a non-object');
                    }
                    var c = hasProtoEnumBug && n;
                    if (a && t.length > 0 && !has.call(t, 0)) {
                        for(var s = 0; s < t.length; ++s){
                            o.push(String(s));
                        }
                    }
                    if (i && t.length > 0) {
                        for(var u = 0; u < t.length; ++u){
                            o.push(String(u));
                        }
                    } else {
                        for(var f in t){
                            if (!(c && f === 'prototype') && has.call(t, f)) {
                                o.push(String(f));
                            }
                        }
                    }
                    if (hasDontEnumBug) {
                        var l = equalsConstructorPrototypeIfNotBuggy(t);
                        for(var h = 0; h < dontEnums.length; ++h){
                            if (!(l && dontEnums[h] === 'constructor') && has.call(t, dontEnums[h])) {
                                o.push(dontEnums[h]);
                            }
                        }
                    }
                    return o;
                };
            }
            var implementation$6 = keysShim$1;
            var slice = Array.prototype.slice;
            var isArgs = isArguments;
            var origKeys = Object.keys;
            var keysShim = origKeys ? function e(t) {
                return origKeys(t);
            } : implementation$6;
            var originalKeys = Object.keys;
            keysShim.shim = function e() {
                if (Object.keys) {
                    var t = function() {
                        var e = Object.keys(arguments);
                        return e && e.length === arguments.length;
                    }(1, 2);
                    if (!t) {
                        Object.keys = function e(t) {
                            if (isArgs(t)) {
                                return originalKeys(slice.call(t));
                            }
                            return originalKeys(t);
                        };
                    }
                } else {
                    Object.keys = keysShim;
                }
                return Object.keys || keysShim;
            };
            var objectKeys = keysShim;
            var keys = objectKeys;
            var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';
            var toStr = Object.prototype.toString;
            var concat = Array.prototype.concat;
            var origDefineProperty = Object.defineProperty;
            var isFunction = function e(t) {
                return typeof t === 'function' && toStr.call(t) === '[object Function]';
            };
            var arePropertyDescriptorsSupported = function e() {
                var t = {};
                try {
                    origDefineProperty(t, 'x', {
                        enumerable: false,
                        value: t
                    });
                    for(var r in t){
                        return false;
                    }
                    return t.x === t;
                } catch (n) {
                    return false;
                }
            };
            var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();
            var defineProperty = function e(t, r, n, i) {
                if (r in t && (!isFunction(i) || !i())) {
                    return;
                }
                if (supportsDescriptors) {
                    origDefineProperty(t, r, {
                        configurable: true,
                        enumerable: false,
                        value: n,
                        writable: true
                    });
                } else {
                    t[r] = n;
                }
            };
            var defineProperties = function e(t, r) {
                var n = arguments.length > 2 ? arguments[2] : {};
                var i = keys(r);
                if (hasSymbols) {
                    i = concat.call(i, Object.getOwnPropertySymbols(r));
                }
                for(var a = 0; a < i.length; a += 1){
                    defineProperty(t, i[a], r[i[a]], n[i[a]]);
                }
            };
            defineProperties.supportsDescriptors = !!supportsDescriptors;
            var defineProperties_1 = defineProperties;
            var numberIsNaN$1 = function e(t) {
                return t !== t;
            };
            var implementation$5 = function e(t, r) {
                if (t === 0 && r === 0) {
                    return 1 / t === 1 / r;
                }
                if (t === r) {
                    return true;
                }
                if (numberIsNaN$1(t) && numberIsNaN$1(r)) {
                    return true;
                }
                return false;
            };
            var implementation$4 = implementation$5;
            var polyfill$3 = function e() {
                return typeof Object.is === 'function' ? Object.is : implementation$4;
            };
            var getPolyfill$3 = polyfill$3;
            var define$3 = defineProperties_1;
            var shim$3 = function e() {
                var t = getPolyfill$3();
                define$3(Object, {
                    is: t
                }, {
                    is: function e() {
                        return Object.is !== t;
                    }
                });
                return t;
            };
            var define$2 = defineProperties_1;
            var callBind$1 = callBind$3.exports;
            var implementation$3 = implementation$5;
            var getPolyfill$2 = polyfill$3;
            var shim$2 = shim$3;
            var polyfill$2 = callBind$1(getPolyfill$2(), Object);
            define$2(polyfill$2, {
                getPolyfill: getPolyfill$2,
                implementation: implementation$3,
                shim: shim$2
            });
            var objectIs$2 = polyfill$2;
            var implementation$2 = function e(t) {
                return t !== t;
            };
            var implementation$1 = implementation$2;
            var polyfill$1 = function e() {
                if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
                    return Number.isNaN;
                }
                return implementation$1;
            };
            var define$1 = defineProperties_1;
            var getPolyfill$1 = polyfill$1;
            var shim$1 = function e() {
                var t = getPolyfill$1();
                define$1(Number, {
                    isNaN: t
                }, {
                    isNaN: function e() {
                        return Number.isNaN !== t;
                    }
                });
                return t;
            };
            var callBind = callBind$3.exports;
            var define = defineProperties_1;
            var implementation = implementation$2;
            var getPolyfill = polyfill$1;
            var shim = shim$1;
            var polyfill = callBind(getPolyfill(), Number);
            define(polyfill, {
                getPolyfill: getPolyfill,
                implementation: implementation,
                shim: shim
            });
            var isNan = polyfill;
            function _slicedToArray(e, t) {
                return _arrayWithHoles(e) || _iterableToArrayLimit(e, t) || _nonIterableRest();
            }
            function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
            function _iterableToArrayLimit(e, t) {
                var r = [];
                var n = true;
                var i = false;
                var a = undefined;
                try {
                    for(var o = e[Symbol.iterator](), c; !(n = (c = o.next()).done); n = true){
                        r.push(c.value);
                        if (t && r.length === t) break;
                    }
                } catch (s) {
                    i = true;
                    a = s;
                } finally{
                    try {
                        if (!n && o["return"] != null) o["return"]();
                    } finally{
                        if (i) throw a;
                    }
                }
                return r;
            }
            function _arrayWithHoles(e) {
                if (Array.isArray(e)) return e;
            }
            function _typeof$1(e) {
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof$1 = function e(t) {
                        return typeof t;
                    };
                } else {
                    _typeof$1 = function e(t) {
                        return t && typeof Symbol === "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    };
                }
                return _typeof$1(e);
            }
            var regexFlagsSupported = /a/g.flags !== undefined;
            var arrayFromSet = function e(t) {
                var r = [];
                t.forEach(function(e) {
                    return r.push(e);
                });
                return r;
            };
            var arrayFromMap = function e(t) {
                var r = [];
                t.forEach(function(e, t) {
                    return r.push([
                        t,
                        e
                    ]);
                });
                return r;
            };
            var objectIs$1 = Object.is ? Object.is : objectIs$2;
            var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
                return [];
            };
            var numberIsNaN = Number.isNaN ? Number.isNaN : isNan;
            function uncurryThis(e) {
                return e.call.bind(e);
            }
            var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
            var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
            var objectToString = uncurryThis(Object.prototype.toString);
            var _require$types$1 = util$1.types, isAnyArrayBuffer = _require$types$1.isAnyArrayBuffer, isArrayBufferView = _require$types$1.isArrayBufferView, isDate = _require$types$1.isDate, isMap = _require$types$1.isMap, isRegExp$1 = _require$types$1.isRegExp, isSet = _require$types$1.isSet, isNativeError = _require$types$1.isNativeError, isBoxedPrimitive = _require$types$1.isBoxedPrimitive, isNumberObject = _require$types$1.isNumberObject, isStringObject = _require$types$1.isStringObject, isBooleanObject = _require$types$1.isBooleanObject, isBigIntObject = _require$types$1.isBigIntObject, isSymbolObject = _require$types$1.isSymbolObject, isFloat32Array = _require$types$1.isFloat32Array, isFloat64Array = _require$types$1.isFloat64Array;
            function isNonIndex(e) {
                if (e.length === 0 || e.length > 10) return true;
                for(var t = 0; t < e.length; t++){
                    var r = e.charCodeAt(t);
                    if (r < 48 || r > 57) return true;
                }
                return e.length === 10 && e >= Math.pow(2, 32);
            }
            function getOwnNonIndexProperties(e) {
                return Object.keys(e).filter(isNonIndex).concat(objectGetOwnPropertySymbols(e).filter(Object.prototype.propertyIsEnumerable.bind(e)));
            }
            function compare(e, t) {
                if (e === t) {
                    return 0;
                }
                var r = e.length;
                var n = t.length;
                for(var i = 0, a = Math.min(r, n); i < a; ++i){
                    if (e[i] !== t[i]) {
                        r = e[i];
                        n = t[i];
                        break;
                    }
                }
                if (r < n) {
                    return -1;
                }
                if (n < r) {
                    return 1;
                }
                return 0;
            }
            var kStrict = true;
            var kLoose = false;
            var kNoIterator = 0;
            var kIsArray = 1;
            var kIsSet = 2;
            var kIsMap = 3;
            function areSimilarRegExps(e, t) {
                return regexFlagsSupported ? e.source === t.source && e.flags === t.flags : RegExp.prototype.toString.call(e) === RegExp.prototype.toString.call(t);
            }
            function areSimilarFloatArrays(e, t) {
                if (e.byteLength !== t.byteLength) {
                    return false;
                }
                for(var r = 0; r < e.byteLength; r++){
                    if (e[r] !== t[r]) {
                        return false;
                    }
                }
                return true;
            }
            function areSimilarTypedArrays(e, t) {
                if (e.byteLength !== t.byteLength) {
                    return false;
                }
                return compare(new Uint8Array(e.buffer, e.byteOffset, e.byteLength), new Uint8Array(t.buffer, t.byteOffset, t.byteLength)) === 0;
            }
            function areEqualArrayBuffers(e, t) {
                return e.byteLength === t.byteLength && compare(new Uint8Array(e), new Uint8Array(t)) === 0;
            }
            function isEqualBoxedPrimitive(e, t) {
                if (isNumberObject(e)) {
                    return isNumberObject(t) && objectIs$1(Number.prototype.valueOf.call(e), Number.prototype.valueOf.call(t));
                }
                if (isStringObject(e)) {
                    return isStringObject(t) && String.prototype.valueOf.call(e) === String.prototype.valueOf.call(t);
                }
                if (isBooleanObject(e)) {
                    return isBooleanObject(t) && Boolean.prototype.valueOf.call(e) === Boolean.prototype.valueOf.call(t);
                }
                if (isBigIntObject(e)) {
                    return isBigIntObject(t) && BigInt.prototype.valueOf.call(e) === BigInt.prototype.valueOf.call(t);
                }
                return isSymbolObject(t) && Symbol.prototype.valueOf.call(e) === Symbol.prototype.valueOf.call(t);
            }
            function innerDeepEqual(e, t, r, n) {
                if (e === t) {
                    if (e !== 0) return true;
                    return r ? objectIs$1(e, t) : true;
                }
                if (r) {
                    if (_typeof$1(e) !== 'object') {
                        return typeof e === 'number' && numberIsNaN(e) && numberIsNaN(t);
                    }
                    if (_typeof$1(t) !== 'object' || e === null || t === null) {
                        return false;
                    }
                    if (Object.getPrototypeOf(e) !== Object.getPrototypeOf(t)) {
                        return false;
                    }
                } else {
                    if (e === null || _typeof$1(e) !== 'object') {
                        if (t === null || _typeof$1(t) !== 'object') {
                            return e == t;
                        }
                        return false;
                    }
                    if (t === null || _typeof$1(t) !== 'object') {
                        return false;
                    }
                }
                var i = objectToString(e);
                var a = objectToString(t);
                if (i !== a) {
                    return false;
                }
                if (Array.isArray(e)) {
                    if (e.length !== t.length) {
                        return false;
                    }
                    var o = getOwnNonIndexProperties(e);
                    var c = getOwnNonIndexProperties(t);
                    if (o.length !== c.length) {
                        return false;
                    }
                    return keyCheck(e, t, r, n, kIsArray, o);
                }
                if (i === '[object Object]') {
                    if (!isMap(e) && isMap(t) || !isSet(e) && isSet(t)) {
                        return false;
                    }
                }
                if (isDate(e)) {
                    if (!isDate(t) || Date.prototype.getTime.call(e) !== Date.prototype.getTime.call(t)) {
                        return false;
                    }
                } else if (isRegExp$1(e)) {
                    if (!isRegExp$1(t) || !areSimilarRegExps(e, t)) {
                        return false;
                    }
                } else if (isNativeError(e) || e instanceof Error) {
                    if (e.message !== t.message || e.name !== t.name) {
                        return false;
                    }
                } else if (isArrayBufferView(e)) {
                    if (!r && (isFloat32Array(e) || isFloat64Array(e))) {
                        if (!areSimilarFloatArrays(e, t)) {
                            return false;
                        }
                    } else if (!areSimilarTypedArrays(e, t)) {
                        return false;
                    }
                    var s = getOwnNonIndexProperties(e);
                    var u = getOwnNonIndexProperties(t);
                    if (s.length !== u.length) {
                        return false;
                    }
                    return keyCheck(e, t, r, n, kNoIterator, s);
                } else if (isSet(e)) {
                    if (!isSet(t) || e.size !== t.size) {
                        return false;
                    }
                    return keyCheck(e, t, r, n, kIsSet);
                } else if (isMap(e)) {
                    if (!isMap(t) || e.size !== t.size) {
                        return false;
                    }
                    return keyCheck(e, t, r, n, kIsMap);
                } else if (isAnyArrayBuffer(e)) {
                    if (!areEqualArrayBuffers(e, t)) {
                        return false;
                    }
                } else if (isBoxedPrimitive(e) && !isEqualBoxedPrimitive(e, t)) {
                    return false;
                }
                return keyCheck(e, t, r, n, kNoIterator);
            }
            function getEnumerables(e, t) {
                return t.filter(function(t) {
                    return propertyIsEnumerable(e, t);
                });
            }
            function keyCheck(e, t, r, n, i, a) {
                if (arguments.length === 5) {
                    a = Object.keys(e);
                    var o = Object.keys(t);
                    if (a.length !== o.length) {
                        return false;
                    }
                }
                var c = 0;
                for(; c < a.length; c++){
                    if (!hasOwnProperty(t, a[c])) {
                        return false;
                    }
                }
                if (r && arguments.length === 5) {
                    var s = objectGetOwnPropertySymbols(e);
                    if (s.length !== 0) {
                        var u = 0;
                        for(c = 0; c < s.length; c++){
                            var f = s[c];
                            if (propertyIsEnumerable(e, f)) {
                                if (!propertyIsEnumerable(t, f)) {
                                    return false;
                                }
                                a.push(f);
                                u++;
                            } else if (propertyIsEnumerable(t, f)) {
                                return false;
                            }
                        }
                        var l = objectGetOwnPropertySymbols(t);
                        if (s.length !== l.length && getEnumerables(t, l).length !== u) {
                            return false;
                        }
                    } else {
                        var h = objectGetOwnPropertySymbols(t);
                        if (h.length !== 0 && getEnumerables(t, h).length !== 0) {
                            return false;
                        }
                    }
                }
                if (a.length === 0 && (i === kNoIterator || i === kIsArray && e.length === 0 || e.size === 0)) {
                    return true;
                }
                if (n === undefined) {
                    n = {
                        val1: new Map(),
                        val2: new Map(),
                        position: 0
                    };
                } else {
                    var d = n.val1.get(e);
                    if (d !== undefined) {
                        var m = n.val2.get(t);
                        if (m !== undefined) {
                            return d === m;
                        }
                    }
                    n.position++;
                }
                n.val1.set(e, n.position);
                n.val2.set(t, n.position);
                var g = objEquiv(e, t, r, a, n, i);
                n.val1.delete(e);
                n.val2.delete(t);
                return g;
            }
            function setHasEqualElement(e, t, r, n) {
                var i = arrayFromSet(e);
                for(var a = 0; a < i.length; a++){
                    var o = i[a];
                    if (innerDeepEqual(t, o, r, n)) {
                        e.delete(o);
                        return true;
                    }
                }
                return false;
            }
            function findLooseMatchingPrimitives(e) {
                switch(_typeof$1(e)){
                    case 'undefined':
                        return null;
                    case 'object':
                        return undefined;
                    case 'symbol':
                        return false;
                    case 'string':
                        e = +e;
                    case 'number':
                        if (numberIsNaN(e)) {
                            return false;
                        }
                }
                return true;
            }
            function setMightHaveLoosePrim(e, t, r) {
                var n = findLooseMatchingPrimitives(r);
                if (n != null) return n;
                return t.has(n) && !e.has(n);
            }
            function mapMightHaveLoosePrim(e, t, r, n, i) {
                var a = findLooseMatchingPrimitives(r);
                if (a != null) {
                    return a;
                }
                var o = t.get(a);
                if (o === undefined && !t.has(a) || !innerDeepEqual(n, o, false, i)) {
                    return false;
                }
                return !e.has(a) && innerDeepEqual(n, o, false, i);
            }
            function setEquiv(e, t, r, n) {
                var i = null;
                var a = arrayFromSet(e);
                for(var o = 0; o < a.length; o++){
                    var c = a[o];
                    if (_typeof$1(c) === 'object' && c !== null) {
                        if (i === null) {
                            i = new Set();
                        }
                        i.add(c);
                    } else if (!t.has(c)) {
                        if (r) return false;
                        if (!setMightHaveLoosePrim(e, t, c)) {
                            return false;
                        }
                        if (i === null) {
                            i = new Set();
                        }
                        i.add(c);
                    }
                }
                if (i !== null) {
                    var s = arrayFromSet(t);
                    for(var u = 0; u < s.length; u++){
                        var f = s[u];
                        if (_typeof$1(f) === 'object' && f !== null) {
                            if (!setHasEqualElement(i, f, r, n)) return false;
                        } else if (!r && !e.has(f) && !setHasEqualElement(i, f, r, n)) {
                            return false;
                        }
                    }
                    return i.size === 0;
                }
                return true;
            }
            function mapHasEqualEntry(e, t, r, n, i, a) {
                var o = arrayFromSet(e);
                for(var c = 0; c < o.length; c++){
                    var s = o[c];
                    if (innerDeepEqual(r, s, i, a) && innerDeepEqual(n, t.get(s), i, a)) {
                        e.delete(s);
                        return true;
                    }
                }
                return false;
            }
            function mapEquiv(e, t, r, n) {
                var i = null;
                var a = arrayFromMap(e);
                for(var o = 0; o < a.length; o++){
                    var c = _slicedToArray(a[o], 2), s = c[0], u = c[1];
                    if (_typeof$1(s) === 'object' && s !== null) {
                        if (i === null) {
                            i = new Set();
                        }
                        i.add(s);
                    } else {
                        var f = t.get(s);
                        if (f === undefined && !t.has(s) || !innerDeepEqual(u, f, r, n)) {
                            if (r) return false;
                            if (!mapMightHaveLoosePrim(e, t, s, u, n)) return false;
                            if (i === null) {
                                i = new Set();
                            }
                            i.add(s);
                        }
                    }
                }
                if (i !== null) {
                    var l = arrayFromMap(t);
                    for(var h = 0; h < l.length; h++){
                        var d = _slicedToArray(l[h], 2), s = d[0], m = d[1];
                        if (_typeof$1(s) === 'object' && s !== null) {
                            if (!mapHasEqualEntry(i, e, s, m, r, n)) return false;
                        } else if (!r && (!e.has(s) || !innerDeepEqual(e.get(s), m, false, n)) && !mapHasEqualEntry(i, e, s, m, false, n)) {
                            return false;
                        }
                    }
                    return i.size === 0;
                }
                return true;
            }
            function objEquiv(e, t, r, n, i, a) {
                var o = 0;
                if (a === kIsSet) {
                    if (!setEquiv(e, t, r, i)) {
                        return false;
                    }
                } else if (a === kIsMap) {
                    if (!mapEquiv(e, t, r, i)) {
                        return false;
                    }
                } else if (a === kIsArray) {
                    for(; o < e.length; o++){
                        if (hasOwnProperty(e, o)) {
                            if (!hasOwnProperty(t, o) || !innerDeepEqual(e[o], t[o], r, i)) {
                                return false;
                            }
                        } else if (hasOwnProperty(t, o)) {
                            return false;
                        } else {
                            var c = Object.keys(e);
                            for(; o < c.length; o++){
                                var s = c[o];
                                if (!hasOwnProperty(t, s) || !innerDeepEqual(e[s], t[s], r, i)) {
                                    return false;
                                }
                            }
                            if (c.length !== Object.keys(t).length) {
                                return false;
                            }
                            return true;
                        }
                    }
                }
                for(o = 0; o < n.length; o++){
                    var u = n[o];
                    if (!innerDeepEqual(e[u], t[u], r, i)) {
                        return false;
                    }
                }
                return true;
            }
            function isDeepEqual$1(e, t) {
                return innerDeepEqual(e, t, kLoose);
            }
            function isDeepStrictEqual$1(e, t) {
                return innerDeepEqual(e, t, kStrict);
            }
            var comparisons = {
                isDeepEqual: isDeepEqual$1,
                isDeepStrictEqual: isDeepStrictEqual$1
            };
            function _typeof(e) {
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function e(t) {
                        return typeof t;
                    };
                } else {
                    _typeof = function e(t) {
                        return t && typeof Symbol === "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                    };
                }
                return _typeof(e);
            }
            function _classCallCheck(e, t) {
                if (!(e instanceof t)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }
            var _require = errors, _require$codes = _require.codes, ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE, ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
            var AssertionError = assertion_error;
            var _require2 = util$1, inspect = _require2.inspect;
            var _require$types = util$1.types, isPromise = _require$types.isPromise, isRegExp = _require$types.isRegExp;
            var objectAssign = Object.assign ? Object.assign : es6ObjectAssign.assign;
            var objectIs = Object.is ? Object.is : objectIs$2;
            var isDeepEqual;
            var isDeepStrictEqual;
            function lazyLoadComparison() {
                var e = comparisons;
                isDeepEqual = e.isDeepEqual;
                isDeepStrictEqual = e.isDeepStrictEqual;
            }
            var warned = false;
            var assert = assert$2.exports = ok;
            var NO_EXCEPTION_SENTINEL = {};
            function innerFail(e) {
                if (e.message instanceof Error) throw e.message;
                throw new AssertionError(e);
            }
            function fail(e, t, r, n, i) {
                var a = arguments.length;
                var o;
                if (a === 0) {
                    o = 'Failed';
                } else if (a === 1) {
                    r = e;
                    e = undefined;
                } else {
                    if (warned === false) {
                        warned = true;
                        var c = console.warn.bind(console);
                        c('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
                    }
                    if (a === 2) n = '!=';
                }
                if (r instanceof Error) throw r;
                var s = {
                    actual: e,
                    expected: t,
                    operator: n === undefined ? 'fail' : n,
                    stackStartFn: i || fail
                };
                if (r !== undefined) {
                    s.message = r;
                }
                var u = new AssertionError(s);
                if (o) {
                    u.message = o;
                    u.generatedMessage = true;
                }
                throw u;
            }
            assert.fail = fail;
            assert.AssertionError = AssertionError;
            function innerOk(e, t, r, n) {
                if (!r) {
                    var i = false;
                    if (t === 0) {
                        i = true;
                        n = 'No value argument passed to `assert.ok()`';
                    } else if (n instanceof Error) {
                        throw n;
                    }
                    var a = new AssertionError({
                        actual: r,
                        expected: true,
                        message: n,
                        operator: '==',
                        stackStartFn: e
                    });
                    a.generatedMessage = i;
                    throw a;
                }
            }
            function ok() {
                for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++){
                    t[r] = arguments[r];
                }
                innerOk.apply(void 0, [
                    ok,
                    t.length
                ].concat(t));
            }
            assert.ok = ok;
            assert.equal = function e(t, r, n) {
                if (arguments.length < 2) {
                    throw new ERR_MISSING_ARGS('actual', 'expected');
                }
                if (t != r) {
                    innerFail({
                        actual: t,
                        expected: r,
                        message: n,
                        operator: '==',
                        stackStartFn: e
                    });
                }
            };
            assert.notEqual = function e(t, r, n) {
                if (arguments.length < 2) {
                    throw new ERR_MISSING_ARGS('actual', 'expected');
                }
                if (t == r) {
                    innerFail({
                        actual: t,
                        expected: r,
                        message: n,
                        operator: '!=',
                        stackStartFn: e
                    });
                }
            };
            assert.deepEqual = function e(t, r, n) {
                if (arguments.length < 2) {
                    throw new ERR_MISSING_ARGS('actual', 'expected');
                }
                if (isDeepEqual === undefined) lazyLoadComparison();
                if (!isDeepEqual(t, r)) {
                    innerFail({
                        actual: t,
                        expected: r,
                        message: n,
                        operator: 'deepEqual',
                        stackStartFn: e
                    });
                }
            };
            assert.notDeepEqual = function e(t, r, n) {
                if (arguments.length < 2) {
                    throw new ERR_MISSING_ARGS('actual', 'expected');
                }
                if (isDeepEqual === undefined) lazyLoadComparison();
                if (isDeepEqual(t, r)) {
                    innerFail({
                        actual: t,
                        expected: r,
                        message: n,
                        operator: 'notDeepEqual',
                        stackStartFn: e
                    });
                }
            };
            assert.deepStrictEqual = function e(t, r, n) {
                if (arguments.length < 2) {
                    throw new ERR_MISSING_ARGS('actual', 'expected');
                }
                if (isDeepEqual === undefined) lazyLoadComparison();
                if (!isDeepStrictEqual(t, r)) {
                    innerFail({
                        actual: t,
                        expected: r,
                        message: n,
                        operator: 'deepStrictEqual',
                        stackStartFn: e
                    });
                }
            };
            assert.notDeepStrictEqual = notDeepStrictEqual;
            function notDeepStrictEqual(e, t, r) {
                if (arguments.length < 2) {
                    throw new ERR_MISSING_ARGS('actual', 'expected');
                }
                if (isDeepEqual === undefined) lazyLoadComparison();
                if (isDeepStrictEqual(e, t)) {
                    innerFail({
                        actual: e,
                        expected: t,
                        message: r,
                        operator: 'notDeepStrictEqual',
                        stackStartFn: notDeepStrictEqual
                    });
                }
            }
            assert.strictEqual = function e(t, r, n) {
                if (arguments.length < 2) {
                    throw new ERR_MISSING_ARGS('actual', 'expected');
                }
                if (!objectIs(t, r)) {
                    innerFail({
                        actual: t,
                        expected: r,
                        message: n,
                        operator: 'strictEqual',
                        stackStartFn: e
                    });
                }
            };
            assert.notStrictEqual = function e(t, r, n) {
                if (arguments.length < 2) {
                    throw new ERR_MISSING_ARGS('actual', 'expected');
                }
                if (objectIs(t, r)) {
                    innerFail({
                        actual: t,
                        expected: r,
                        message: n,
                        operator: 'notStrictEqual',
                        stackStartFn: e
                    });
                }
            };
            var Comparison = function e(t, r, n) {
                var i = this;
                _classCallCheck(this, e);
                r.forEach(function(e) {
                    if (e in t) {
                        if (n !== undefined && typeof n[e] === 'string' && isRegExp(t[e]) && t[e].test(n[e])) {
                            i[e] = n[e];
                        } else {
                            i[e] = t[e];
                        }
                    }
                });
            };
            function compareExceptionKey(e, t, r, n, i, a) {
                if (!(r in e) || !isDeepStrictEqual(e[r], t[r])) {
                    if (!n) {
                        var o = new Comparison(e, i);
                        var c = new Comparison(t, i, e);
                        var s = new AssertionError({
                            actual: o,
                            expected: c,
                            operator: 'deepStrictEqual',
                            stackStartFn: a
                        });
                        s.actual = e;
                        s.expected = t;
                        s.operator = a.name;
                        throw s;
                    }
                    innerFail({
                        actual: e,
                        expected: t,
                        message: n,
                        operator: a.name,
                        stackStartFn: a
                    });
                }
            }
            function expectedException(e, t, r, n) {
                if (typeof t !== 'function') {
                    if (isRegExp(t)) return t.test(e);
                    if (arguments.length === 2) {
                        throw new ERR_INVALID_ARG_TYPE('expected', [
                            'Function',
                            'RegExp'
                        ], t);
                    }
                    if (_typeof(e) !== 'object' || e === null) {
                        var i = new AssertionError({
                            actual: e,
                            expected: t,
                            message: r,
                            operator: 'deepStrictEqual',
                            stackStartFn: n
                        });
                        i.operator = n.name;
                        throw i;
                    }
                    var a = Object.keys(t);
                    if (t instanceof Error) {
                        a.push('name', 'message');
                    } else if (a.length === 0) {
                        throw new ERR_INVALID_ARG_VALUE('error', t, 'may not be an empty object');
                    }
                    if (isDeepEqual === undefined) lazyLoadComparison();
                    a.forEach(function(i) {
                        if (typeof e[i] === 'string' && isRegExp(t[i]) && t[i].test(e[i])) {
                            return;
                        }
                        compareExceptionKey(e, t, i, r, a, n);
                    });
                    return true;
                }
                if (t.prototype !== undefined && e instanceof t) {
                    return true;
                }
                if (Error.isPrototypeOf(t)) {
                    return false;
                }
                return t.call({}, e) === true;
            }
            function getActual(e) {
                if (typeof e !== 'function') {
                    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', e);
                }
                try {
                    e();
                } catch (t) {
                    return t;
                }
                return NO_EXCEPTION_SENTINEL;
            }
            function checkIsPromise(e) {
                return isPromise(e) || e !== null && _typeof(e) === 'object' && typeof e.then === 'function' && typeof e.catch === 'function';
            }
            function waitForActual(e) {
                return Promise.resolve().then(function() {
                    var t;
                    if (typeof e === 'function') {
                        t = e();
                        if (!checkIsPromise(t)) {
                            throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', t);
                        }
                    } else if (checkIsPromise(e)) {
                        t = e;
                    } else {
                        throw new ERR_INVALID_ARG_TYPE('promiseFn', [
                            'Function',
                            'Promise'
                        ], e);
                    }
                    return Promise.resolve().then(function() {
                        return t;
                    }).then(function() {
                        return NO_EXCEPTION_SENTINEL;
                    }).catch(function(e) {
                        return e;
                    });
                });
            }
            function expectsError(e, t, r, n) {
                if (typeof r === 'string') {
                    if (arguments.length === 4) {
                        throw new ERR_INVALID_ARG_TYPE('error', [
                            'Object',
                            'Error',
                            'Function',
                            'RegExp'
                        ], r);
                    }
                    if (_typeof(t) === 'object' && t !== null) {
                        if (t.message === r) {
                            throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(t.message, "\" is identical to the message."));
                        }
                    } else if (t === r) {
                        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(t, "\" is identical to the message."));
                    }
                    n = r;
                    r = undefined;
                } else if (r != null && _typeof(r) !== 'object' && typeof r !== 'function') {
                    throw new ERR_INVALID_ARG_TYPE('error', [
                        'Object',
                        'Error',
                        'Function',
                        'RegExp'
                    ], r);
                }
                if (t === NO_EXCEPTION_SENTINEL) {
                    var i = '';
                    if (r && r.name) {
                        i += " (".concat(r.name, ")");
                    }
                    i += n ? ": ".concat(n) : '.';
                    var a = e.name === 'rejects' ? 'rejection' : 'exception';
                    innerFail({
                        actual: undefined,
                        expected: r,
                        operator: e.name,
                        message: "Missing expected ".concat(a).concat(i),
                        stackStartFn: e
                    });
                }
                if (r && !expectedException(t, r, n, e)) {
                    throw t;
                }
            }
            function expectsNoError(e, t, r, n) {
                if (t === NO_EXCEPTION_SENTINEL) return;
                if (typeof r === 'string') {
                    n = r;
                    r = undefined;
                }
                if (!r || expectedException(t, r)) {
                    var i = n ? ": ".concat(n) : '.';
                    var a = e.name === 'doesNotReject' ? 'rejection' : 'exception';
                    innerFail({
                        actual: t,
                        expected: r,
                        operator: e.name,
                        message: "Got unwanted ".concat(a).concat(i, "\n") + "Actual message: \"".concat(t && t.message, "\""),
                        stackStartFn: e
                    });
                }
                throw t;
            }
            assert.throws = function e(t) {
                for(var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++){
                    n[i - 1] = arguments[i];
                }
                expectsError.apply(void 0, [
                    e,
                    getActual(t)
                ].concat(n));
            };
            assert.rejects = function e(t) {
                for(var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++){
                    n[i - 1] = arguments[i];
                }
                return waitForActual(t).then(function(t) {
                    return expectsError.apply(void 0, [
                        e,
                        t
                    ].concat(n));
                });
            };
            assert.doesNotThrow = function e(t) {
                for(var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++){
                    n[i - 1] = arguments[i];
                }
                expectsNoError.apply(void 0, [
                    e,
                    getActual(t)
                ].concat(n));
            };
            assert.doesNotReject = function e(t) {
                for(var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++){
                    n[i - 1] = arguments[i];
                }
                return waitForActual(t).then(function(t) {
                    return expectsNoError.apply(void 0, [
                        e,
                        t
                    ].concat(n));
                });
            };
            assert.ifError = function e(t) {
                if (t !== null && t !== undefined) {
                    var r = 'ifError got unwanted exception: ';
                    if (_typeof(t) === 'object' && typeof t.message === 'string') {
                        if (t.message.length === 0 && t.constructor) {
                            r += t.constructor.name;
                        } else {
                            r += t.message;
                        }
                    } else {
                        r += inspect(t);
                    }
                    var n = new AssertionError({
                        actual: t,
                        expected: null,
                        operator: 'ifError',
                        message: r,
                        stackStartFn: e
                    });
                    var i = t.stack;
                    if (typeof i === 'string') {
                        var a = i.split('\n');
                        a.shift();
                        var o = n.stack.split('\n');
                        for(var c = 0; c < a.length; c++){
                            var s = o.indexOf(a[c]);
                            if (s !== -1) {
                                o = o.slice(0, s);
                                break;
                            }
                        }
                        n.stack = "".concat(o.join('\n'), "\n").concat(a.join('\n'));
                    }
                    throw n;
                }
            };
            function strict() {
                for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++){
                    t[r] = arguments[r];
                }
                innerOk.apply(void 0, [
                    strict,
                    t.length
                ].concat(t));
            }
            assert.strict = objectAssign(strict, assert, {
                equal: assert.strictEqual,
                deepEqual: assert.deepStrictEqual,
                notEqual: assert.notStrictEqual,
                notDeepEqual: assert.notDeepStrictEqual
            });
            assert.strict.strict = assert.strict;
            (function(e) {
                var t = assert$2.exports;
                var r = (pako_lib_zlib_zstream__WEBPACK_IMPORTED_MODULE_0___default());
                var n = pako_lib_zlib_deflate_js__WEBPACK_IMPORTED_MODULE_1__;
                var i = pako_lib_zlib_inflate_js__WEBPACK_IMPORTED_MODULE_2__;
                var a = (pako_lib_zlib_constants__WEBPACK_IMPORTED_MODULE_3___default());
                for(var o in a){
                    e[o] = a[o];
                }
                e.NONE = 0;
                e.DEFLATE = 1;
                e.INFLATE = 2;
                e.GZIP = 3;
                e.GUNZIP = 4;
                e.DEFLATERAW = 5;
                e.INFLATERAW = 6;
                e.UNZIP = 7;
                var c = 0x1f;
                var s = 0x8b;
                function u(t) {
                    if (typeof t !== 'number' || t < e.DEFLATE || t > e.UNZIP) {
                        throw new TypeError('Bad argument');
                    }
                    this.dictionary = null;
                    this.err = 0;
                    this.flush = 0;
                    this.init_done = false;
                    this.level = 0;
                    this.memLevel = 0;
                    this.mode = t;
                    this.strategy = 0;
                    this.windowBits = 0;
                    this.write_in_progress = false;
                    this.pending_close = false;
                    this.gzip_id_bytes_read = 0;
                }
                u.prototype.close = function() {
                    if (this.write_in_progress) {
                        this.pending_close = true;
                        return;
                    }
                    this.pending_close = false;
                    t(this.init_done, 'close before init');
                    t(this.mode <= e.UNZIP);
                    if (this.mode === e.DEFLATE || this.mode === e.GZIP || this.mode === e.DEFLATERAW) {
                        n.deflateEnd(this.strm);
                    } else if (this.mode === e.INFLATE || this.mode === e.GUNZIP || this.mode === e.INFLATERAW || this.mode === e.UNZIP) {
                        i.inflateEnd(this.strm);
                    }
                    this.mode = e.NONE;
                    this.dictionary = null;
                };
                u.prototype.write = function(e, t, r, n, i, a, o) {
                    return this._write(true, e, t, r, n, i, a, o);
                };
                u.prototype.writeSync = function(e, t, r, n, i, a, o) {
                    return this._write(false, e, t, r, n, i, a, o);
                };
                u.prototype._write = function(r, n, i, a, o, c, s, u) {
                    t.equal(arguments.length, 8);
                    t(this.init_done, 'write before init');
                    t(this.mode !== e.NONE, 'already finalized');
                    t.equal(false, this.write_in_progress, 'write already in progress');
                    t.equal(false, this.pending_close, 'close is pending');
                    this.write_in_progress = true;
                    t.equal(false, n === undefined, 'must provide flush value');
                    this.write_in_progress = true;
                    if (n !== e.Z_NO_FLUSH && n !== e.Z_PARTIAL_FLUSH && n !== e.Z_SYNC_FLUSH && n !== e.Z_FULL_FLUSH && n !== e.Z_FINISH && n !== e.Z_BLOCK) {
                        throw new Error('Invalid flush value');
                    }
                    if (i == null) {
                        i = Buffer$4.alloc(0);
                        o = 0;
                        a = 0;
                    }
                    this.strm.avail_in = o;
                    this.strm.input = i;
                    this.strm.next_in = a;
                    this.strm.avail_out = u;
                    this.strm.output = c;
                    this.strm.next_out = s;
                    this.flush = n;
                    if (!r) {
                        this._process();
                        if (this._checkError()) {
                            return this._afterSync();
                        }
                        return;
                    }
                    var f = this;
                    browser$1$1.nextTick(function() {
                        f._process();
                        f._after();
                    });
                    return this;
                };
                u.prototype._afterSync = function() {
                    var e = this.strm.avail_out;
                    var t = this.strm.avail_in;
                    this.write_in_progress = false;
                    return [
                        t,
                        e
                    ];
                };
                u.prototype._process = function() {
                    var t = null;
                    switch(this.mode){
                        case e.DEFLATE:
                        case e.GZIP:
                        case e.DEFLATERAW:
                            this.err = n.deflate(this.strm, this.flush);
                            break;
                        case e.UNZIP:
                            if (this.strm.avail_in > 0) {
                                t = this.strm.next_in;
                            }
                            switch(this.gzip_id_bytes_read){
                                case 0:
                                    if (t === null) {
                                        break;
                                    }
                                    if (this.strm.input[t] === c) {
                                        this.gzip_id_bytes_read = 1;
                                        t++;
                                        if (this.strm.avail_in === 1) {
                                            break;
                                        }
                                    } else {
                                        this.mode = e.INFLATE;
                                        break;
                                    }
                                case 1:
                                    if (t === null) {
                                        break;
                                    }
                                    if (this.strm.input[t] === s) {
                                        this.gzip_id_bytes_read = 2;
                                        this.mode = e.GUNZIP;
                                    } else {
                                        this.mode = e.INFLATE;
                                    }
                                    break;
                                default:
                                    throw new Error('invalid number of gzip magic number bytes read');
                            }
                        case e.INFLATE:
                        case e.GUNZIP:
                        case e.INFLATERAW:
                            this.err = i.inflate(this.strm, this.flush);
                            if (this.err === e.Z_NEED_DICT && this.dictionary) {
                                this.err = i.inflateSetDictionary(this.strm, this.dictionary);
                                if (this.err === e.Z_OK) {
                                    this.err = i.inflate(this.strm, this.flush);
                                } else if (this.err === e.Z_DATA_ERROR) {
                                    this.err = e.Z_NEED_DICT;
                                }
                            }
                            while(this.strm.avail_in > 0 && this.mode === e.GUNZIP && this.err === e.Z_STREAM_END && this.strm.next_in[0] !== 0x00){
                                this.reset();
                                this.err = i.inflate(this.strm, this.flush);
                            }
                            break;
                        default:
                            throw new Error('Unknown mode ' + this.mode);
                    }
                };
                u.prototype._checkError = function() {
                    switch(this.err){
                        case e.Z_OK:
                        case e.Z_BUF_ERROR:
                            if (this.strm.avail_out !== 0 && this.flush === e.Z_FINISH) {
                                this._error('unexpected end of file');
                                return false;
                            }
                            break;
                        case e.Z_STREAM_END:
                            break;
                        case e.Z_NEED_DICT:
                            if (this.dictionary == null) {
                                this._error('Missing dictionary');
                            } else {
                                this._error('Bad dictionary');
                            }
                            return false;
                        default:
                            this._error('Zlib error');
                            return false;
                    }
                    return true;
                };
                u.prototype._after = function() {
                    if (!this._checkError()) {
                        return;
                    }
                    var e = this.strm.avail_out;
                    var t = this.strm.avail_in;
                    this.write_in_progress = false;
                    this.callback(t, e);
                    if (this.pending_close) {
                        this.close();
                    }
                };
                u.prototype._error = function(e) {
                    if (this.strm.msg) {
                        e = this.strm.msg;
                    }
                    this.onerror(e, this.err);
                    this.write_in_progress = false;
                    if (this.pending_close) {
                        this.close();
                    }
                };
                u.prototype.init = function(r, n, i, a, o) {
                    t(arguments.length === 4 || arguments.length === 5, 'init(windowBits, level, memLevel, strategy, [dictionary])');
                    t(r >= 8 && r <= 15, 'invalid windowBits');
                    t(n >= -1 && n <= 9, 'invalid compression level');
                    t(i >= 1 && i <= 9, 'invalid memlevel');
                    t(a === e.Z_FILTERED || a === e.Z_HUFFMAN_ONLY || a === e.Z_RLE || a === e.Z_FIXED || a === e.Z_DEFAULT_STRATEGY, 'invalid strategy');
                    this._init(n, r, i, a, o);
                    this._setDictionary();
                };
                u.prototype.params = function() {
                    throw new Error('deflateParams Not supported');
                };
                u.prototype.reset = function() {
                    this._reset();
                    this._setDictionary();
                };
                u.prototype._init = function(t, a, o, c, s) {
                    this.level = t;
                    this.windowBits = a;
                    this.memLevel = o;
                    this.strategy = c;
                    this.flush = e.Z_NO_FLUSH;
                    this.err = e.Z_OK;
                    if (this.mode === e.GZIP || this.mode === e.GUNZIP) {
                        this.windowBits += 16;
                    }
                    if (this.mode === e.UNZIP) {
                        this.windowBits += 32;
                    }
                    if (this.mode === e.DEFLATERAW || this.mode === e.INFLATERAW) {
                        this.windowBits = -1 * this.windowBits;
                    }
                    this.strm = new r();
                    switch(this.mode){
                        case e.DEFLATE:
                        case e.GZIP:
                        case e.DEFLATERAW:
                            this.err = n.deflateInit2(this.strm, this.level, e.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
                            break;
                        case e.INFLATE:
                        case e.GUNZIP:
                        case e.INFLATERAW:
                        case e.UNZIP:
                            this.err = i.inflateInit2(this.strm, this.windowBits);
                            break;
                        default:
                            throw new Error('Unknown mode ' + this.mode);
                    }
                    if (this.err !== e.Z_OK) {
                        this._error('Init error');
                    }
                    this.dictionary = s;
                    this.write_in_progress = false;
                    this.init_done = true;
                };
                u.prototype._setDictionary = function() {
                    if (this.dictionary == null) {
                        return;
                    }
                    this.err = e.Z_OK;
                    switch(this.mode){
                        case e.DEFLATE:
                        case e.DEFLATERAW:
                            this.err = n.deflateSetDictionary(this.strm, this.dictionary);
                            break;
                    }
                    if (this.err !== e.Z_OK) {
                        this._error('Failed to set dictionary');
                    }
                };
                u.prototype._reset = function() {
                    this.err = e.Z_OK;
                    switch(this.mode){
                        case e.DEFLATE:
                        case e.DEFLATERAW:
                        case e.GZIP:
                            this.err = n.deflateReset(this.strm);
                            break;
                        case e.INFLATE:
                        case e.INFLATERAW:
                        case e.GUNZIP:
                            this.err = i.inflateReset(this.strm);
                            break;
                    }
                    if (this.err !== e.Z_OK) {
                        this._error('Failed to reset stream');
                    }
                };
                e.Zlib = u;
            })(binding);
            (function(e) {
                var t = buffer.Buffer;
                var r = readableBrowser.exports.Transform;
                var n = binding;
                var i = util$1;
                var a = assert$2.exports.ok;
                var o = buffer.kMaxLength;
                var c = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + o.toString(16) + ' bytes';
                n.Z_MIN_WINDOWBITS = 8;
                n.Z_MAX_WINDOWBITS = 15;
                n.Z_DEFAULT_WINDOWBITS = 15;
                n.Z_MIN_CHUNK = 64;
                n.Z_MAX_CHUNK = Infinity;
                n.Z_DEFAULT_CHUNK = 16 * 1024;
                n.Z_MIN_MEMLEVEL = 1;
                n.Z_MAX_MEMLEVEL = 9;
                n.Z_DEFAULT_MEMLEVEL = 8;
                n.Z_MIN_LEVEL = -1;
                n.Z_MAX_LEVEL = 9;
                n.Z_DEFAULT_LEVEL = n.Z_DEFAULT_COMPRESSION;
                var s = Object.keys(n);
                for(var u = 0; u < s.length; u++){
                    var f = s[u];
                    if (f.match(/^Z/)) {
                        Object.defineProperty(e, f, {
                            enumerable: true,
                            value: n[f],
                            writable: false
                        });
                    }
                }
                var l = {
                    Z_OK: n.Z_OK,
                    Z_STREAM_END: n.Z_STREAM_END,
                    Z_NEED_DICT: n.Z_NEED_DICT,
                    Z_ERRNO: n.Z_ERRNO,
                    Z_STREAM_ERROR: n.Z_STREAM_ERROR,
                    Z_DATA_ERROR: n.Z_DATA_ERROR,
                    Z_MEM_ERROR: n.Z_MEM_ERROR,
                    Z_BUF_ERROR: n.Z_BUF_ERROR,
                    Z_VERSION_ERROR: n.Z_VERSION_ERROR
                };
                var h = Object.keys(l);
                for(var d = 0; d < h.length; d++){
                    var m = h[d];
                    l[l[m]] = m;
                }
                Object.defineProperty(e, 'codes', {
                    enumerable: true,
                    value: Object.freeze(l),
                    writable: false
                });
                e.Deflate = v;
                e.Inflate = y;
                e.Gzip = b;
                e.Gunzip = A;
                e.DeflateRaw = w;
                e.InflateRaw = _;
                e.Unzip = O;
                e.createDeflate = function(e) {
                    return new v(e);
                };
                e.createInflate = function(e) {
                    return new y(e);
                };
                e.createDeflateRaw = function(e) {
                    return new w(e);
                };
                e.createInflateRaw = function(e) {
                    return new _(e);
                };
                e.createGzip = function(e) {
                    return new b(e);
                };
                e.createGunzip = function(e) {
                    return new A(e);
                };
                e.createUnzip = function(e) {
                    return new O(e);
                };
                e.deflate = function(e, t, r) {
                    if (typeof t === 'function') {
                        r = t;
                        t = {};
                    }
                    return g(new v(t), e, r);
                };
                e.deflateSync = function(e, t) {
                    return p(new v(t), e);
                };
                e.gzip = function(e, t, r) {
                    if (typeof t === 'function') {
                        r = t;
                        t = {};
                    }
                    return g(new b(t), e, r);
                };
                e.gzipSync = function(e, t) {
                    return p(new b(t), e);
                };
                e.deflateRaw = function(e, t, r) {
                    if (typeof t === 'function') {
                        r = t;
                        t = {};
                    }
                    return g(new w(t), e, r);
                };
                e.deflateRawSync = function(e, t) {
                    return p(new w(t), e);
                };
                e.unzip = function(e, t, r) {
                    if (typeof t === 'function') {
                        r = t;
                        t = {};
                    }
                    return g(new O(t), e, r);
                };
                e.unzipSync = function(e, t) {
                    return p(new O(t), e);
                };
                e.inflate = function(e, t, r) {
                    if (typeof t === 'function') {
                        r = t;
                        t = {};
                    }
                    return g(new y(t), e, r);
                };
                e.inflateSync = function(e, t) {
                    return p(new y(t), e);
                };
                e.gunzip = function(e, t, r) {
                    if (typeof t === 'function') {
                        r = t;
                        t = {};
                    }
                    return g(new A(t), e, r);
                };
                e.gunzipSync = function(e, t) {
                    return p(new A(t), e);
                };
                e.inflateRaw = function(e, t, r) {
                    if (typeof t === 'function') {
                        r = t;
                        t = {};
                    }
                    return g(new _(t), e, r);
                };
                e.inflateRawSync = function(e, t) {
                    return p(new _(t), e);
                };
                function g(e, r, n) {
                    var i = [];
                    var a = 0;
                    e.on('error', u);
                    e.on('end', f);
                    e.end(r);
                    s();
                    function s() {
                        var t;
                        while(null !== (t = e.read())){
                            i.push(t);
                            a += t.length;
                        }
                        e.once('readable', s);
                    }
                    function u(t) {
                        e.removeListener('end', f);
                        e.removeListener('readable', s);
                        n(t);
                    }
                    function f() {
                        var r;
                        var s = null;
                        if (a >= o) {
                            s = new RangeError(c);
                        } else {
                            r = t.concat(i, a);
                        }
                        i = [];
                        e.close();
                        n(s, r);
                    }
                }
                function p(e, r) {
                    if (typeof r === 'string') r = t.from(r);
                    if (!t.isBuffer(r)) throw new TypeError('Not a string or buffer');
                    var n = e._finishFlushFlag;
                    return e._processChunk(r, n);
                }
                function v(e) {
                    if (!(this instanceof v)) return new v(e);
                    E.call(this, e, n.DEFLATE);
                }
                function y(e) {
                    if (!(this instanceof y)) return new y(e);
                    E.call(this, e, n.INFLATE);
                }
                function b(e) {
                    if (!(this instanceof b)) return new b(e);
                    E.call(this, e, n.GZIP);
                }
                function A(e) {
                    if (!(this instanceof A)) return new A(e);
                    E.call(this, e, n.GUNZIP);
                }
                function w(e) {
                    if (!(this instanceof w)) return new w(e);
                    E.call(this, e, n.DEFLATERAW);
                }
                function _(e) {
                    if (!(this instanceof _)) return new _(e);
                    E.call(this, e, n.INFLATERAW);
                }
                function O(e) {
                    if (!(this instanceof O)) return new O(e);
                    E.call(this, e, n.UNZIP);
                }
                function S(e) {
                    return e === n.Z_NO_FLUSH || e === n.Z_PARTIAL_FLUSH || e === n.Z_SYNC_FLUSH || e === n.Z_FULL_FLUSH || e === n.Z_FINISH || e === n.Z_BLOCK;
                }
                function E(i, a) {
                    var o = this;
                    this._opts = i = i || {};
                    this._chunkSize = i.chunkSize || e.Z_DEFAULT_CHUNK;
                    r.call(this, i);
                    if (i.flush && !S(i.flush)) {
                        throw new Error('Invalid flush flag: ' + i.flush);
                    }
                    if (i.finishFlush && !S(i.finishFlush)) {
                        throw new Error('Invalid flush flag: ' + i.finishFlush);
                    }
                    this._flushFlag = i.flush || n.Z_NO_FLUSH;
                    this._finishFlushFlag = typeof i.finishFlush !== 'undefined' ? i.finishFlush : n.Z_FINISH;
                    if (i.chunkSize) {
                        if (i.chunkSize < e.Z_MIN_CHUNK || i.chunkSize > e.Z_MAX_CHUNK) {
                            throw new Error('Invalid chunk size: ' + i.chunkSize);
                        }
                    }
                    if (i.windowBits) {
                        if (i.windowBits < e.Z_MIN_WINDOWBITS || i.windowBits > e.Z_MAX_WINDOWBITS) {
                            throw new Error('Invalid windowBits: ' + i.windowBits);
                        }
                    }
                    if (i.level) {
                        if (i.level < e.Z_MIN_LEVEL || i.level > e.Z_MAX_LEVEL) {
                            throw new Error('Invalid compression level: ' + i.level);
                        }
                    }
                    if (i.memLevel) {
                        if (i.memLevel < e.Z_MIN_MEMLEVEL || i.memLevel > e.Z_MAX_MEMLEVEL) {
                            throw new Error('Invalid memLevel: ' + i.memLevel);
                        }
                    }
                    if (i.strategy) {
                        if (i.strategy != e.Z_FILTERED && i.strategy != e.Z_HUFFMAN_ONLY && i.strategy != e.Z_RLE && i.strategy != e.Z_FIXED && i.strategy != e.Z_DEFAULT_STRATEGY) {
                            throw new Error('Invalid strategy: ' + i.strategy);
                        }
                    }
                    if (i.dictionary) {
                        if (!t.isBuffer(i.dictionary)) {
                            throw new Error('Invalid dictionary: it should be a Buffer instance');
                        }
                    }
                    this._handle = new n.Zlib(a);
                    var c = this;
                    this._hadError = false;
                    this._handle.onerror = function(t, r) {
                        T(c);
                        c._hadError = true;
                        var n = new Error(t);
                        n.errno = r;
                        n.code = e.codes[r];
                        c.emit('error', n);
                    };
                    var s = e.Z_DEFAULT_COMPRESSION;
                    if (typeof i.level === 'number') s = i.level;
                    var u = e.Z_DEFAULT_STRATEGY;
                    if (typeof i.strategy === 'number') u = i.strategy;
                    this._handle.init(i.windowBits || e.Z_DEFAULT_WINDOWBITS, s, i.memLevel || e.Z_DEFAULT_MEMLEVEL, u, i.dictionary);
                    this._buffer = t.allocUnsafe(this._chunkSize);
                    this._offset = 0;
                    this._level = s;
                    this._strategy = u;
                    this.once('end', this.close);
                    Object.defineProperty(this, '_closed', {
                        get: function e() {
                            return !o._handle;
                        },
                        configurable: true,
                        enumerable: true
                    });
                }
                i.inherits(E, r);
                E.prototype.params = function(t, r, i) {
                    if (t < e.Z_MIN_LEVEL || t > e.Z_MAX_LEVEL) {
                        throw new RangeError('Invalid compression level: ' + t);
                    }
                    if (r != e.Z_FILTERED && r != e.Z_HUFFMAN_ONLY && r != e.Z_RLE && r != e.Z_FIXED && r != e.Z_DEFAULT_STRATEGY) {
                        throw new TypeError('Invalid strategy: ' + r);
                    }
                    if (this._level !== t || this._strategy !== r) {
                        var o = this;
                        this.flush(n.Z_SYNC_FLUSH, function() {
                            a(o._handle, 'zlib binding closed');
                            o._handle.params(t, r);
                            if (!o._hadError) {
                                o._level = t;
                                o._strategy = r;
                                if (i) i();
                            }
                        });
                    } else {
                        browser$1$1.nextTick(i);
                    }
                };
                E.prototype.reset = function() {
                    a(this._handle, 'zlib binding closed');
                    return this._handle.reset();
                };
                E.prototype._flush = function(e) {
                    this._transform(t.alloc(0), '', e);
                };
                E.prototype.flush = function(e, r) {
                    var i = this;
                    var a = this._writableState;
                    if (typeof e === 'function' || e === undefined && !r) {
                        r = e;
                        e = n.Z_FULL_FLUSH;
                    }
                    if (a.ended) {
                        if (r) browser$1$1.nextTick(r);
                    } else if (a.ending) {
                        if (r) this.once('end', r);
                    } else if (a.needDrain) {
                        if (r) {
                            this.once('drain', function() {
                                return i.flush(e, r);
                            });
                        }
                    } else {
                        this._flushFlag = e;
                        this.write(t.alloc(0), '', r);
                    }
                };
                E.prototype.close = function(e) {
                    T(this, e);
                    browser$1$1.nextTick(x, this);
                };
                function T(e, t) {
                    if (t) browser$1$1.nextTick(t);
                    if (!e._handle) return;
                    e._handle.close();
                    e._handle = null;
                }
                function x(e) {
                    e.emit('close');
                }
                E.prototype._transform = function(e, r, i) {
                    var a;
                    var o = this._writableState;
                    var c = o.ending || o.ended;
                    var s = c && (!e || o.length === e.length);
                    if (e !== null && !t.isBuffer(e)) return i(new Error('invalid input'));
                    if (!this._handle) return i(new Error('zlib binding closed'));
                    if (s) a = this._finishFlushFlag;
                    else {
                        a = this._flushFlag;
                        if (e.length >= o.length) {
                            this._flushFlag = this._opts.flush || n.Z_NO_FLUSH;
                        }
                    }
                    this._processChunk(e, a, i);
                };
                E.prototype._processChunk = function(e, r, n) {
                    var i = e && e.length;
                    var s = this._chunkSize - this._offset;
                    var u = 0;
                    var f = this;
                    var l = typeof n === 'function';
                    if (!l) {
                        var h = [];
                        var d = 0;
                        var m;
                        this.on('error', function(e) {
                            m = e;
                        });
                        a(this._handle, 'zlib binding closed');
                        do {
                            var g = this._handle.writeSync(r, e, u, i, this._buffer, this._offset, s);
                        }while (!this._hadError && y(g[0], g[1]))
                        if (this._hadError) {
                            throw m;
                        }
                        if (d >= o) {
                            T(this);
                            throw new RangeError(c);
                        }
                        var p = t.concat(h, d);
                        T(this);
                        return p;
                    }
                    a(this._handle, 'zlib binding closed');
                    var v = this._handle.write(r, e, u, i, this._buffer, this._offset, s);
                    v.buffer = e;
                    v.callback = y;
                    function y(o, c) {
                        if (this) {
                            this.buffer = null;
                            this.callback = null;
                        }
                        if (f._hadError) return;
                        var m = s - c;
                        a(m >= 0, 'have should not go down');
                        if (m > 0) {
                            var g = f._buffer.slice(f._offset, f._offset + m);
                            f._offset += m;
                            if (l) {
                                f.push(g);
                            } else {
                                h.push(g);
                                d += g.length;
                            }
                        }
                        if (c === 0 || f._offset >= f._chunkSize) {
                            s = f._chunkSize;
                            f._offset = 0;
                            f._buffer = t.allocUnsafe(f._chunkSize);
                        }
                        if (c === 0) {
                            u += i - o;
                            i = o;
                            if (!l) return true;
                            var p = f._handle.write(r, e, u, i, f._buffer, f._offset, f._chunkSize);
                            p.callback = y;
                            p.buffer = e;
                            return;
                        }
                        if (!l) return false;
                        n();
                    }
                };
                i.inherits(v, E);
                i.inherits(y, E);
                i.inherits(b, E);
                i.inherits(A, E);
                i.inherits(w, E);
                i.inherits(_, E);
                i.inherits(O, E);
            })(lib);
            var PDFReference = function(e) {
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__.Z)(t, e);
                function t(t, r, n) {
                    var i;
                    i = e.call(this, {
                        decodeStrings: false
                    }) || this;
                    i.finalize = i.finalize.bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__.Z)(i));
                    i.document = t;
                    i.id = r;
                    if (n == null) {
                        n = {};
                    }
                    i.data = n;
                    i.gen = 0;
                    i.deflate = null;
                    i.compress = i.document.compress && !i.data.Filter;
                    i.uncompressedLength = 0;
                    i.chunks = [];
                    return i;
                }
                var r = t.prototype;
                r.initDeflate = function e() {
                    var t = this;
                    this.data.Filter = 'FlateDecode';
                    this.deflate = lib.createDeflate();
                    this.deflate.on('data', function(e) {
                        t.chunks.push(e);
                        return t.data.Length += e.length;
                    });
                    return this.deflate.on('end', this.finalize);
                };
                r._write = function e(t, r, n) {
                    if (!(t instanceof Uint8Array)) {
                        t = Buffer$4.from(t + '\n', 'binary');
                    }
                    this.uncompressedLength += t.length;
                    if (this.data.Length == null) {
                        this.data.Length = 0;
                    }
                    if (this.compress) {
                        if (!this.deflate) {
                            this.initDeflate();
                        }
                        this.deflate.write(t);
                    } else {
                        this.chunks.push(t);
                        this.data.Length += t.length;
                    }
                    return n();
                };
                r.end = function t() {
                    e.prototype.end.apply(this, arguments);
                    if (this.deflate) {
                        return this.deflate.end();
                    }
                    return this.finalize();
                };
                r.finalize = function e() {
                    this.offset = this.document._offset;
                    this.document._write(this.id + " " + this.gen + " obj");
                    this.document._write(PDFObject$1.convert(this.data));
                    if (this.chunks.length) {
                        this.document._write('stream');
                        for(var t = 0, r = Array.from(this.chunks); t < r.length; t++){
                            var n = r[t];
                            this.document._write(n);
                        }
                        this.chunks.length = 0;
                        this.document._write('\nendstream');
                    }
                    this.document._write('endobj');
                    return this.document._refEnd(this);
                };
                r.toString = function e() {
                    return this.id + " " + this.gen + " R";
                };
                return t;
            }(stream.Writable);
            var PDFTree = function() {
                function e(e) {
                    if (e === void 0) {
                        e = {};
                    }
                    this._items = {};
                    this.limits = typeof e.limits === 'boolean' ? e.limits : true;
                }
                var t = e.prototype;
                t.add = function e(t, r) {
                    return this._items[t] = r;
                };
                t.get = function e(t) {
                    return this._items[t];
                };
                t.toString = function e() {
                    var t = this;
                    var r = Object.keys(this._items).sort(function(e, r) {
                        return t._compareKeys(e, r);
                    });
                    var n = [
                        '<<'
                    ];
                    if (this.limits && r.length > 1) {
                        var i = r[0];
                        var a = r[r.length - 1];
                        n.push("  /Limits " + PDFObject$1.convert([
                            this._dataForKey(i),
                            this._dataForKey(a)
                        ]));
                    }
                    n.push("  /" + this._keysName() + " [");
                    for(var o = (0, _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_9__.Z)(r), c; !(c = o()).done;){
                        var s = c.value;
                        n.push("    " + PDFObject$1.convert(this._dataForKey(s)) + " " + PDFObject$1.convert(this._items[s]));
                    }
                    n.push(']');
                    n.push('>>');
                    return n.join('\n');
                };
                t._compareKeys = function e() {
                    throw new Error('Must be implemented by subclasses');
                };
                t._keysName = function e() {
                    throw new Error('Must be implemented by subclasses');
                };
                t._dataForKey = function e() {
                    throw new Error('Must be implemented by subclasses');
                };
                return e;
            }();
            var PDFNameTree = function(e) {
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__.Z)(t, e);
                function t() {
                    return e.apply(this, arguments) || this;
                }
                var r = t.prototype;
                r._compareKeys = function e(t, r) {
                    return t.localeCompare(r);
                };
                r._keysName = function e() {
                    return 'Names';
                };
                r._dataForKey = function e(t) {
                    return new String(t);
                };
                return t;
            }(PDFTree);
            var escapableRe = /[\n\r\t\b\f\(\)\\]/g;
            var escapable = {
                '\n': '\\n',
                '\r': '\\r',
                '\t': '\\t',
                '\b': '\\b',
                '\f': '\\f',
                '\\': '\\\\',
                '(': '\\(',
                ')': '\\)'
            };
            var pad = function e(t, r) {
                return (Array(r + 1).join('0') + t).slice(-r);
            };
            var swapBytes = function e(t) {
                var r = t.length;
                if (r & 0x01) {
                    throw new Error('Buffer length must be even');
                } else {
                    for(var n = 0, i = r - 1; n < i; n += 2){
                        var a = t[n];
                        t[n] = t[n + 1];
                        t[n + 1] = a;
                    }
                }
                return t;
            };
            var PDFObject = function() {
                function e() {}
                e.convert = function t(r) {
                    if (typeof r === 'string') {
                        return "/" + r;
                    }
                    if (r instanceof String) {
                        var n = r;
                        var i = false;
                        for(var a = 0, o = n.length; a < o; a++){
                            if (n.charCodeAt(a) > 0x7f) {
                                i = true;
                                break;
                            }
                        }
                        if (i) {
                            n = swapBytes(Buffer$4.from("\uFEFF" + n, 'utf16le')).toString('binary');
                        }
                        n = n.replace(escapableRe, function(e) {
                            return escapable[e];
                        });
                        return "(" + n + ")";
                    }
                    if (Buffer$4.isBuffer(r)) {
                        return "<" + r.toString('hex') + ">";
                    }
                    if (r instanceof PDFReference || r instanceof PDFNameTree) {
                        return r.toString();
                    }
                    if (r instanceof Date) {
                        return "(D:" + pad(r.getUTCFullYear(), 4) + pad(r.getUTCMonth() + 1, 2) + pad(r.getUTCDate(), 2) + pad(r.getUTCHours(), 2) + pad(r.getUTCMinutes(), 2) + pad(r.getUTCSeconds(), 2) + 'Z)';
                    }
                    if (Array.isArray(r)) {
                        var c = Array.from(r).map(function(t) {
                            return e.convert(t);
                        }).join(' ');
                        return "[" + c + "]";
                    }
                    if ({}.toString.call(r) === '[object Object]') {
                        var s = [
                            '<<'
                        ];
                        for(var u in r){
                            var f = r[u];
                            s.push("/" + u + " " + e.convert(f));
                        }
                        s.push('>>');
                        return s.join('\n');
                    }
                    if (typeof r === 'number') {
                        return e.number(r);
                    }
                    return "" + r;
                };
                e.number = function e(t) {
                    if (t > -1e21 && t < 1e21) {
                        return Math.round(t * 1e6) / 1e6;
                    }
                    throw new Error("unsupported number: " + t);
                };
                return e;
            }();
            var PDFObject$1 = PDFObject;
            function _defineProperties(e, t) {
                for(var r = 0; r < t.length; r++){
                    var n = t[r];
                    n.enumerable = n.enumerable || false;
                    n.configurable = true;
                    if ("value" in n) n.writable = true;
                    Object.defineProperty(e, n.key, n);
                }
            }
            function _createClass(e, t, r) {
                if (t) _defineProperties(e.prototype, t);
                if (r) _defineProperties(e, r);
                Object.defineProperty(e, "prototype", {
                    writable: false
                });
                return e;
            }
            var DEFAULT_MARGINS = {
                top: 0,
                left: 0,
                bottom: 0,
                right: 0
            };
            var SIZES = {
                '4A0': [
                    4767.87,
                    6740.79
                ],
                '2A0': [
                    3370.39,
                    4767.87
                ],
                A0: [
                    2383.94,
                    3370.39
                ],
                A1: [
                    1683.78,
                    2383.94
                ],
                A2: [
                    1190.55,
                    1683.78
                ],
                A3: [
                    841.89,
                    1190.55
                ],
                A4: [
                    595.28,
                    841.89
                ],
                A5: [
                    419.53,
                    595.28
                ],
                A6: [
                    297.64,
                    419.53
                ],
                A7: [
                    209.76,
                    297.64
                ],
                A8: [
                    147.4,
                    209.76
                ],
                A9: [
                    104.88,
                    147.4
                ],
                A10: [
                    73.7,
                    104.88
                ],
                B0: [
                    2834.65,
                    4008.19
                ],
                B1: [
                    2004.09,
                    2834.65
                ],
                B2: [
                    1417.32,
                    2004.09
                ],
                B3: [
                    1000.63,
                    1417.32
                ],
                B4: [
                    708.66,
                    1000.63
                ],
                B5: [
                    498.9,
                    708.66
                ],
                B6: [
                    354.33,
                    498.9
                ],
                B7: [
                    249.45,
                    354.33
                ],
                B8: [
                    175.75,
                    249.45
                ],
                B9: [
                    124.72,
                    175.75
                ],
                B10: [
                    87.87,
                    124.72
                ],
                C0: [
                    2599.37,
                    3676.54
                ],
                C1: [
                    1836.85,
                    2599.37
                ],
                C2: [
                    1298.27,
                    1836.85
                ],
                C3: [
                    918.43,
                    1298.27
                ],
                C4: [
                    649.13,
                    918.43
                ],
                C5: [
                    459.21,
                    649.13
                ],
                C6: [
                    323.15,
                    459.21
                ],
                C7: [
                    229.61,
                    323.15
                ],
                C8: [
                    161.57,
                    229.61
                ],
                C9: [
                    113.39,
                    161.57
                ],
                C10: [
                    79.37,
                    113.39
                ],
                RA0: [
                    2437.8,
                    3458.27
                ],
                RA1: [
                    1729.13,
                    2437.8
                ],
                RA2: [
                    1218.9,
                    1729.13
                ],
                RA3: [
                    864.57,
                    1218.9
                ],
                RA4: [
                    609.45,
                    864.57
                ],
                SRA0: [
                    2551.18,
                    3628.35
                ],
                SRA1: [
                    1814.17,
                    2551.18
                ],
                SRA2: [
                    1275.59,
                    1814.17
                ],
                SRA3: [
                    907.09,
                    1275.59
                ],
                SRA4: [
                    637.8,
                    907.09
                ],
                EXECUTIVE: [
                    521.86,
                    756.0
                ],
                FOLIO: [
                    612.0,
                    936.0
                ],
                LEGAL: [
                    612.0,
                    1008.0
                ],
                LETTER: [
                    612.0,
                    792.0
                ],
                TABLOID: [
                    792.0,
                    1224.0
                ]
            };
            var PDFPage = function() {
                function e(e, t) {
                    if (t === void 0) {
                        t = {};
                    }
                    this.document = e;
                    this.size = t.size || 'letter';
                    this.layout = t.layout || 'portrait';
                    this.userUnit = t.userUnit || 1.0;
                    this.margins = DEFAULT_MARGINS;
                    var r = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];
                    this.width = r[this.layout === 'portrait' ? 0 : 1];
                    this.height = r[this.layout === 'portrait' ? 1 : 0];
                    this.content = this.document.ref();
                    this.resources = this.document.ref({
                        ProcSet: [
                            'PDF',
                            'Text',
                            'ImageB',
                            'ImageC',
                            'ImageI'
                        ]
                    });
                    this.dictionary = this.document.ref({
                        Type: 'Page',
                        Parent: this.document._root.data.Pages,
                        MediaBox: [
                            0,
                            0,
                            this.width,
                            this.height
                        ],
                        Contents: this.content,
                        Resources: this.resources,
                        UserUnit: this.userUnit
                    });
                }
                var t = e.prototype;
                t.maxY = function e() {
                    return this.height;
                };
                t.write = function e(t) {
                    return this.content.write(t);
                };
                t.end = function e() {
                    this.dictionary.end();
                    this.resources.end();
                    return this.content.end();
                };
                _createClass(e, [
                    {
                        key: "fonts",
                        get: function e() {
                            var t = this.resources.data;
                            return t.Font != null ? t.Font : t.Font = {};
                        }
                    },
                    {
                        key: "xobjects",
                        get: function e() {
                            var t = this.resources.data;
                            return t.XObject != null ? t.XObject : t.XObject = {};
                        }
                    },
                    {
                        key: "ext_gstates",
                        get: function e() {
                            var t = this.resources.data;
                            return t.ExtGState != null ? t.ExtGState : t.ExtGState = {};
                        }
                    },
                    {
                        key: "patterns",
                        get: function e() {
                            var t = this.resources.data;
                            return t.Pattern != null ? t.Pattern : t.Pattern = {};
                        }
                    },
                    {
                        key: "colorSpaces",
                        get: function e() {
                            var t = this.resources.data;
                            return t.ColorSpace || (t.ColorSpace = {});
                        }
                    },
                    {
                        key: "annotations",
                        get: function e() {
                            var t = this.dictionary.data;
                            return t.Annots != null ? t.Annots : t.Annots = [];
                        }
                    },
                    {
                        key: "structParentTreeKey",
                        get: function e() {
                            var t = this.dictionary.data;
                            return t.StructParents != null ? t.StructParents : t.StructParents = this.document.createStructParentTreeNextKey();
                        }
                    }
                ]);
                return e;
            }();
            var wordArrayToBuffer = function e(t) {
                var r = [];
                for(var n = 0; n < t.sigBytes; n++){
                    r.push(t.words[Math.floor(n / 4)] >> 8 * (3 - n % 4) & 0xff);
                }
                return Buffer$4.from(r);
            };
            var PDFSecurity = function() {
                function e() {}
                e.generateFileID = function e(t) {
                    if (t === void 0) {
                        t = {};
                    }
                    var r = t.CreationDate.getTime() + "\n";
                    for(var n in t){
                        if (!t.hasOwnProperty(n)) continue;
                        r += n + ": " + t[n].valueOf() + "\n";
                    }
                    return wordArrayToBuffer(crypto_js_md5__WEBPACK_IMPORTED_MODULE_4___default()(r));
                };
                return e;
            }();
            var number$2 = PDFObject$1.number;
            var PDFGradient$1 = function() {
                function e(e) {
                    this.doc = e;
                    this.stops = [];
                    this.embedded = false;
                    this.transform = [
                        1,
                        0,
                        0,
                        1,
                        0,
                        0
                    ];
                }
                var t = e.prototype;
                t.stop = function e(t, r, n) {
                    if (n == null) {
                        n = 1;
                    }
                    r = this.doc._normalizeColor(r);
                    if (this.stops.length === 0) {
                        if (r.length === 3) {
                            this._colorSpace = 'DeviceRGB';
                        } else if (r.length === 4) {
                            this._colorSpace = 'DeviceCMYK';
                        } else if (r.length === 1) {
                            this._colorSpace = 'DeviceGray';
                        } else {
                            throw new Error('Unknown color space');
                        }
                    } else if (this._colorSpace === 'DeviceRGB' && r.length !== 3 || this._colorSpace === 'DeviceCMYK' && r.length !== 4 || this._colorSpace === 'DeviceGray' && r.length !== 1) {
                        throw new Error('All gradient stops must use the same color space');
                    }
                    n = Math.max(0, Math.min(1, n));
                    this.stops.push([
                        t,
                        r,
                        n
                    ]);
                    return this;
                };
                t.setTransform = function e(t, r, n, i, a, o) {
                    this.transform = [
                        t,
                        r,
                        n,
                        i,
                        a,
                        o
                    ];
                    return this;
                };
                t.embed = function e(t) {
                    var r;
                    var n = this.stops.length;
                    if (n === 0) {
                        return;
                    }
                    this.embedded = true;
                    this.matrix = t;
                    var i = this.stops[n - 1];
                    if (i[0] < 1) {
                        this.stops.push([
                            1,
                            i[1],
                            i[2]
                        ]);
                    }
                    var a = [];
                    var o = [];
                    var c = [];
                    for(var s = 0; s < n - 1; s++){
                        o.push(0, 1);
                        if (s + 2 !== n) {
                            a.push(this.stops[s + 1][0]);
                        }
                        r = this.doc.ref({
                            FunctionType: 2,
                            Domain: [
                                0,
                                1
                            ],
                            C0: this.stops[s + 0][1],
                            C1: this.stops[s + 1][1],
                            N: 1
                        });
                        c.push(r);
                        r.end();
                    }
                    if (n === 1) {
                        r = c[0];
                    } else {
                        r = this.doc.ref({
                            FunctionType: 3,
                            Domain: [
                                0,
                                1
                            ],
                            Functions: c,
                            Bounds: a,
                            Encode: o
                        });
                        r.end();
                    }
                    this.id = "Sh" + ++this.doc._gradCount;
                    var u = this.shader(r);
                    u.end();
                    var f = this.doc.ref({
                        Type: 'Pattern',
                        PatternType: 2,
                        Shading: u,
                        Matrix: this.matrix.map(number$2)
                    });
                    f.end();
                    if (this.stops.some(function(e) {
                        return e[2] < 1;
                    })) {
                        var l = this.opacityGradient();
                        l._colorSpace = 'DeviceGray';
                        for(var h = (0, _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_9__.Z)(this.stops), d; !(d = h()).done;){
                            var m = d.value;
                            l.stop(m[0], [
                                m[2]
                            ]);
                        }
                        l = l.embed(this.matrix);
                        var g = [
                            0,
                            0,
                            this.doc.page.width,
                            this.doc.page.height
                        ];
                        var p = this.doc.ref({
                            Type: 'XObject',
                            Subtype: 'Form',
                            FormType: 1,
                            BBox: g,
                            Group: {
                                Type: 'Group',
                                S: 'Transparency',
                                CS: 'DeviceGray'
                            },
                            Resources: {
                                ProcSet: [
                                    'PDF',
                                    'Text',
                                    'ImageB',
                                    'ImageC',
                                    'ImageI'
                                ],
                                Pattern: {
                                    Sh1: l
                                }
                            }
                        });
                        p.write('/Pattern cs /Sh1 scn');
                        p.end(g.join(' ') + " re f");
                        var v = this.doc.ref({
                            Type: 'ExtGState',
                            SMask: {
                                Type: 'Mask',
                                S: 'Luminosity',
                                G: p
                            }
                        });
                        v.end();
                        var y = this.doc.ref({
                            Type: 'Pattern',
                            PatternType: 1,
                            PaintType: 1,
                            TilingType: 2,
                            BBox: g,
                            XStep: g[2],
                            YStep: g[3],
                            Resources: {
                                ProcSet: [
                                    'PDF',
                                    'Text',
                                    'ImageB',
                                    'ImageC',
                                    'ImageI'
                                ],
                                Pattern: {
                                    Sh1: f
                                },
                                ExtGState: {
                                    Gs1: v
                                }
                            }
                        });
                        y.write('/Gs1 gs /Pattern cs /Sh1 scn');
                        y.end(g.join(' ') + " re f");
                        this.doc.page.patterns[this.id] = y;
                    } else {
                        this.doc.page.patterns[this.id] = f;
                    }
                    return f;
                };
                t.apply = function e(t) {
                    var r = this.doc._ctm, n = r[0], i = r[1], a = r[2], o = r[3], c = r[4], s = r[5];
                    var u = this.transform, f = u[0], l = u[1], h = u[2], d = u[3], m = u[4], g = u[5];
                    var p = [
                        n * f + a * l,
                        i * f + o * l,
                        n * h + a * d,
                        i * h + o * d,
                        n * m + a * g + c,
                        i * m + o * g + s
                    ];
                    if (!this.embedded || p.join(' ') !== this.matrix.join(' ')) {
                        this.embed(p);
                    }
                    return this.doc.addContent("/" + this.id + " " + t);
                };
                return e;
            }();
            var PDFLinearGradient$1 = function(e) {
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__.Z)(t, e);
                function t(t, r, n, i, a) {
                    var o;
                    o = e.call(this, t) || this;
                    o.x1 = r;
                    o.y1 = n;
                    o.x2 = i;
                    o.y2 = a;
                    return o;
                }
                var r = t.prototype;
                r.shader = function e(t) {
                    return this.doc.ref({
                        ShadingType: 2,
                        ColorSpace: this._colorSpace,
                        Coords: [
                            this.x1,
                            this.y1,
                            this.x2,
                            this.y2
                        ],
                        Function: t,
                        Extend: [
                            true,
                            true
                        ]
                    });
                };
                r.opacityGradient = function e() {
                    return new t(this.doc, this.x1, this.y1, this.x2, this.y2);
                };
                return t;
            }(PDFGradient$1);
            var PDFRadialGradient$1 = function(e) {
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__.Z)(t, e);
                function t(t, r, n, i, a, o, c) {
                    var s;
                    s = e.call(this, t) || this;
                    s.doc = t;
                    s.x1 = r;
                    s.y1 = n;
                    s.r1 = i;
                    s.x2 = a;
                    s.y2 = o;
                    s.r2 = c;
                    return s;
                }
                var r = t.prototype;
                r.shader = function e(t) {
                    return this.doc.ref({
                        ShadingType: 3,
                        ColorSpace: this._colorSpace,
                        Coords: [
                            this.x1,
                            this.y1,
                            this.r1,
                            this.x2,
                            this.y2,
                            this.r2
                        ],
                        Function: t,
                        Extend: [
                            true,
                            true
                        ]
                    });
                };
                r.opacityGradient = function e() {
                    return new t(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);
                };
                return t;
            }(PDFGradient$1);
            var Gradient = {
                PDFGradient: PDFGradient$1,
                PDFLinearGradient: PDFLinearGradient$1,
                PDFRadialGradient: PDFRadialGradient$1
            };
            var PDFGradient = Gradient.PDFGradient, PDFLinearGradient = Gradient.PDFLinearGradient, PDFRadialGradient = Gradient.PDFRadialGradient;
            var ColorMixin = {
                initColor: function e() {
                    this._opacityRegistry = {};
                    this._opacityCount = 0;
                    return this._gradCount = 0;
                },
                _normalizeColor: function e(t) {
                    if (t instanceof PDFGradient) {
                        return t;
                    }
                    var r;
                    if (typeof t === 'string') {
                        if (t.charAt(0) === '#') {
                            if (t.length === 4) {
                                t = t.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, '#$1$1$2$2$3$3');
                            }
                            var n = parseInt(t.slice(1), 16);
                            t = [
                                n >> 16,
                                n >> 8 & 0xff,
                                n & 0xff
                            ];
                        } else if (namedColors[t]) {
                            t = namedColors[t];
                        }
                    }
                    if (Array.isArray(t)) {
                        if (t.length === 3) {
                            t = function() {
                                var e = [];
                                for(var n = 0, i = Array.from(t); n < i.length; n++){
                                    r = i[n];
                                    e.push(r / 255);
                                }
                                return e;
                            }();
                        } else if (t.length === 4) {
                            t = function() {
                                var e = [];
                                for(var n = 0, i = Array.from(t); n < i.length; n++){
                                    r = i[n];
                                    e.push(r / 100);
                                }
                                return e;
                            }();
                        }
                        return t;
                    }
                    return null;
                },
                _setColor: function e(t, r) {
                    t = this._normalizeColor(t);
                    if (!t) {
                        return false;
                    }
                    var n = r ? 'SCN' : 'scn';
                    if (t instanceof PDFGradient) {
                        this._setColorSpace('Pattern', r);
                        t.apply(n);
                    } else {
                        var i = t.length === 4 ? 'DeviceCMYK' : 'DeviceRGB';
                        this._setColorSpace(i, r);
                        t = t.join(' ');
                        this.addContent(t + " " + n);
                    }
                    return true;
                },
                _setColorSpace: function e(t, r) {
                    var n = r ? 'CS' : 'cs';
                    return this.addContent("/" + t + " " + n);
                },
                fillColor: function e(t, r) {
                    var n = this._setColor(t, false);
                    if (n) {
                        this.fillOpacity(r);
                    }
                    this._fillColor = [
                        t,
                        r
                    ];
                    return this;
                },
                strokeColor: function e(t, r) {
                    var n = this._setColor(t, true);
                    if (n) {
                        this.strokeOpacity(r);
                    }
                    return this;
                },
                opacity: function e(t) {
                    this._doOpacity(t, t);
                    return this;
                },
                fillOpacity: function e(t) {
                    this._doOpacity(t, null);
                    return this;
                },
                strokeOpacity: function e(t) {
                    this._doOpacity(null, t);
                    return this;
                },
                _doOpacity: function e(t, r) {
                    var n, i;
                    if (t == null && r == null) {
                        return;
                    }
                    if (t != null) {
                        t = Math.max(0, Math.min(1, t));
                    }
                    if (r != null) {
                        r = Math.max(0, Math.min(1, r));
                    }
                    var a = t + "_" + r;
                    if (this._opacityRegistry[a]) {
                        var o = Array.from(this._opacityRegistry[a]);
                        n = o[0];
                        i = o[1];
                    } else {
                        n = {
                            Type: 'ExtGState'
                        };
                        if (t != null) {
                            n.ca = t;
                        }
                        if (r != null) {
                            n.CA = r;
                        }
                        n = this.ref(n);
                        n.end();
                        var c = ++this._opacityCount;
                        i = "Gs" + c;
                        this._opacityRegistry[a] = [
                            n,
                            i
                        ];
                    }
                    this.page.ext_gstates[i] = n;
                    return this.addContent("/" + i + " gs");
                },
                linearGradient: function e(t, r, n, i) {
                    return new PDFLinearGradient(this, t, r, n, i);
                },
                radialGradient: function e(t, r, n, i, a, o) {
                    return new PDFRadialGradient(this, t, r, n, i, a, o);
                }
            };
            var namedColors = {
                aliceblue: [
                    240,
                    248,
                    255
                ],
                antiquewhite: [
                    250,
                    235,
                    215
                ],
                aqua: [
                    0,
                    255,
                    255
                ],
                aquamarine: [
                    127,
                    255,
                    212
                ],
                azure: [
                    240,
                    255,
                    255
                ],
                beige: [
                    245,
                    245,
                    220
                ],
                bisque: [
                    255,
                    228,
                    196
                ],
                black: [
                    0,
                    0,
                    0
                ],
                blanchedalmond: [
                    255,
                    235,
                    205
                ],
                blue: [
                    0,
                    0,
                    255
                ],
                blueviolet: [
                    138,
                    43,
                    226
                ],
                brown: [
                    165,
                    42,
                    42
                ],
                burlywood: [
                    222,
                    184,
                    135
                ],
                cadetblue: [
                    95,
                    158,
                    160
                ],
                chartreuse: [
                    127,
                    255,
                    0
                ],
                chocolate: [
                    210,
                    105,
                    30
                ],
                coral: [
                    255,
                    127,
                    80
                ],
                cornflowerblue: [
                    100,
                    149,
                    237
                ],
                cornsilk: [
                    255,
                    248,
                    220
                ],
                crimson: [
                    220,
                    20,
                    60
                ],
                cyan: [
                    0,
                    255,
                    255
                ],
                darkblue: [
                    0,
                    0,
                    139
                ],
                darkcyan: [
                    0,
                    139,
                    139
                ],
                darkgoldenrod: [
                    184,
                    134,
                    11
                ],
                darkgray: [
                    169,
                    169,
                    169
                ],
                darkgreen: [
                    0,
                    100,
                    0
                ],
                darkgrey: [
                    169,
                    169,
                    169
                ],
                darkkhaki: [
                    189,
                    183,
                    107
                ],
                darkmagenta: [
                    139,
                    0,
                    139
                ],
                darkolivegreen: [
                    85,
                    107,
                    47
                ],
                darkorange: [
                    255,
                    140,
                    0
                ],
                darkorchid: [
                    153,
                    50,
                    204
                ],
                darkred: [
                    139,
                    0,
                    0
                ],
                darksalmon: [
                    233,
                    150,
                    122
                ],
                darkseagreen: [
                    143,
                    188,
                    143
                ],
                darkslateblue: [
                    72,
                    61,
                    139
                ],
                darkslategray: [
                    47,
                    79,
                    79
                ],
                darkslategrey: [
                    47,
                    79,
                    79
                ],
                darkturquoise: [
                    0,
                    206,
                    209
                ],
                darkviolet: [
                    148,
                    0,
                    211
                ],
                deeppink: [
                    255,
                    20,
                    147
                ],
                deepskyblue: [
                    0,
                    191,
                    255
                ],
                dimgray: [
                    105,
                    105,
                    105
                ],
                dimgrey: [
                    105,
                    105,
                    105
                ],
                dodgerblue: [
                    30,
                    144,
                    255
                ],
                firebrick: [
                    178,
                    34,
                    34
                ],
                floralwhite: [
                    255,
                    250,
                    240
                ],
                forestgreen: [
                    34,
                    139,
                    34
                ],
                fuchsia: [
                    255,
                    0,
                    255
                ],
                gainsboro: [
                    220,
                    220,
                    220
                ],
                ghostwhite: [
                    248,
                    248,
                    255
                ],
                gold: [
                    255,
                    215,
                    0
                ],
                goldenrod: [
                    218,
                    165,
                    32
                ],
                gray: [
                    128,
                    128,
                    128
                ],
                grey: [
                    128,
                    128,
                    128
                ],
                green: [
                    0,
                    128,
                    0
                ],
                greenyellow: [
                    173,
                    255,
                    47
                ],
                honeydew: [
                    240,
                    255,
                    240
                ],
                hotpink: [
                    255,
                    105,
                    180
                ],
                indianred: [
                    205,
                    92,
                    92
                ],
                indigo: [
                    75,
                    0,
                    130
                ],
                ivory: [
                    255,
                    255,
                    240
                ],
                khaki: [
                    240,
                    230,
                    140
                ],
                lavender: [
                    230,
                    230,
                    250
                ],
                lavenderblush: [
                    255,
                    240,
                    245
                ],
                lawngreen: [
                    124,
                    252,
                    0
                ],
                lemonchiffon: [
                    255,
                    250,
                    205
                ],
                lightblue: [
                    173,
                    216,
                    230
                ],
                lightcoral: [
                    240,
                    128,
                    128
                ],
                lightcyan: [
                    224,
                    255,
                    255
                ],
                lightgoldenrodyellow: [
                    250,
                    250,
                    210
                ],
                lightgray: [
                    211,
                    211,
                    211
                ],
                lightgreen: [
                    144,
                    238,
                    144
                ],
                lightgrey: [
                    211,
                    211,
                    211
                ],
                lightpink: [
                    255,
                    182,
                    193
                ],
                lightsalmon: [
                    255,
                    160,
                    122
                ],
                lightseagreen: [
                    32,
                    178,
                    170
                ],
                lightskyblue: [
                    135,
                    206,
                    250
                ],
                lightslategray: [
                    119,
                    136,
                    153
                ],
                lightslategrey: [
                    119,
                    136,
                    153
                ],
                lightsteelblue: [
                    176,
                    196,
                    222
                ],
                lightyellow: [
                    255,
                    255,
                    224
                ],
                lime: [
                    0,
                    255,
                    0
                ],
                limegreen: [
                    50,
                    205,
                    50
                ],
                linen: [
                    250,
                    240,
                    230
                ],
                magenta: [
                    255,
                    0,
                    255
                ],
                maroon: [
                    128,
                    0,
                    0
                ],
                mediumaquamarine: [
                    102,
                    205,
                    170
                ],
                mediumblue: [
                    0,
                    0,
                    205
                ],
                mediumorchid: [
                    186,
                    85,
                    211
                ],
                mediumpurple: [
                    147,
                    112,
                    219
                ],
                mediumseagreen: [
                    60,
                    179,
                    113
                ],
                mediumslateblue: [
                    123,
                    104,
                    238
                ],
                mediumspringgreen: [
                    0,
                    250,
                    154
                ],
                mediumturquoise: [
                    72,
                    209,
                    204
                ],
                mediumvioletred: [
                    199,
                    21,
                    133
                ],
                midnightblue: [
                    25,
                    25,
                    112
                ],
                mintcream: [
                    245,
                    255,
                    250
                ],
                mistyrose: [
                    255,
                    228,
                    225
                ],
                moccasin: [
                    255,
                    228,
                    181
                ],
                navajowhite: [
                    255,
                    222,
                    173
                ],
                navy: [
                    0,
                    0,
                    128
                ],
                oldlace: [
                    253,
                    245,
                    230
                ],
                olive: [
                    128,
                    128,
                    0
                ],
                olivedrab: [
                    107,
                    142,
                    35
                ],
                orange: [
                    255,
                    165,
                    0
                ],
                orangered: [
                    255,
                    69,
                    0
                ],
                orchid: [
                    218,
                    112,
                    214
                ],
                palegoldenrod: [
                    238,
                    232,
                    170
                ],
                palegreen: [
                    152,
                    251,
                    152
                ],
                paleturquoise: [
                    175,
                    238,
                    238
                ],
                palevioletred: [
                    219,
                    112,
                    147
                ],
                papayawhip: [
                    255,
                    239,
                    213
                ],
                peachpuff: [
                    255,
                    218,
                    185
                ],
                peru: [
                    205,
                    133,
                    63
                ],
                pink: [
                    255,
                    192,
                    203
                ],
                plum: [
                    221,
                    160,
                    221
                ],
                powderblue: [
                    176,
                    224,
                    230
                ],
                purple: [
                    128,
                    0,
                    128
                ],
                red: [
                    255,
                    0,
                    0
                ],
                rosybrown: [
                    188,
                    143,
                    143
                ],
                royalblue: [
                    65,
                    105,
                    225
                ],
                saddlebrown: [
                    139,
                    69,
                    19
                ],
                salmon: [
                    250,
                    128,
                    114
                ],
                sandybrown: [
                    244,
                    164,
                    96
                ],
                seagreen: [
                    46,
                    139,
                    87
                ],
                seashell: [
                    255,
                    245,
                    238
                ],
                sienna: [
                    160,
                    82,
                    45
                ],
                silver: [
                    192,
                    192,
                    192
                ],
                skyblue: [
                    135,
                    206,
                    235
                ],
                slateblue: [
                    106,
                    90,
                    205
                ],
                slategray: [
                    112,
                    128,
                    144
                ],
                slategrey: [
                    112,
                    128,
                    144
                ],
                snow: [
                    255,
                    250,
                    250
                ],
                springgreen: [
                    0,
                    255,
                    127
                ],
                steelblue: [
                    70,
                    130,
                    180
                ],
                tan: [
                    210,
                    180,
                    140
                ],
                teal: [
                    0,
                    128,
                    128
                ],
                thistle: [
                    216,
                    191,
                    216
                ],
                tomato: [
                    255,
                    99,
                    71
                ],
                turquoise: [
                    64,
                    224,
                    208
                ],
                violet: [
                    238,
                    130,
                    238
                ],
                wheat: [
                    245,
                    222,
                    179
                ],
                white: [
                    255,
                    255,
                    255
                ],
                whitesmoke: [
                    245,
                    245,
                    245
                ],
                yellow: [
                    255,
                    255,
                    0
                ],
                yellowgreen: [
                    154,
                    205,
                    50
                ]
            };
            var cx, cy, px, py, sx, sy;
            cx = cy = px = py = sx = sy = 0;
            var argsCountPerCommand = {
                M: 2,
                m: 2,
                Z: 0,
                z: 0,
                L: 2,
                l: 2,
                H: 1,
                h: 1,
                V: 1,
                v: 1,
                C: 6,
                c: 6,
                S: 4,
                s: 4,
                Q: 4,
                q: 4,
                T: 2,
                t: 2,
                A: 7,
                a: 7
            };
            var isCommand = function e(t) {
                return t in argsCountPerCommand;
            };
            var isWsp = function e(t) {
                var r = t.codePointAt(0);
                return r === 0x20 || r === 0x9 || r === 0xd || r === 0xa;
            };
            var isDigit = function e(t) {
                var r = t.codePointAt(0);
                if (r == null) {
                    return false;
                }
                return 48 <= r && r <= 57;
            };
            var readNumber = function e(t, r) {
                var n = r;
                var i = '';
                var a = 'none';
                for(; n < t.length; n += 1){
                    var o = t[n];
                    if (o === '+' || o === '-') {
                        if (a === 'none') {
                            a = 'sign';
                            i += o;
                            continue;
                        }
                        if (a === 'e') {
                            a = 'exponent_sign';
                            i += o;
                            continue;
                        }
                    }
                    if (isDigit(o)) {
                        if (a === 'none' || a === 'sign' || a === 'whole') {
                            a = 'whole';
                            i += o;
                            continue;
                        }
                        if (a === 'decimal_point' || a === 'decimal') {
                            a = 'decimal';
                            i += o;
                            continue;
                        }
                        if (a === 'e' || a === 'exponent_sign' || a === 'exponent') {
                            a = 'exponent';
                            i += o;
                            continue;
                        }
                    }
                    if (o === '.') {
                        if (a === 'none' || a === 'sign' || a === 'whole') {
                            a = 'decimal_point';
                            i += o;
                            continue;
                        }
                    }
                    if (o === 'E' || o === 'e') {
                        if (a === 'whole' || a === 'decimal_point' || a === 'decimal') {
                            a = 'e';
                            i += o;
                            continue;
                        }
                    }
                    break;
                }
                var c = Number.parseFloat(i);
                if (Number.isNaN(c)) {
                    return [
                        r,
                        null
                    ];
                } else {
                    return [
                        n - 1,
                        c
                    ];
                }
            };
            var parsePathData = function e(t) {
                var r = [];
                var n = null;
                var i = [];
                var a = 0;
                var o = false;
                var c = false;
                for(var s = 0; s < t.length; s += 1){
                    var u = t.charAt(s);
                    if (isWsp(u)) {
                        continue;
                    }
                    if (o && u === ',') {
                        if (c) {
                            break;
                        }
                        c = true;
                        continue;
                    }
                    if (isCommand(u)) {
                        if (c) {
                            return r;
                        }
                        if (n == null) {
                            if (u !== 'M' && u !== 'm') {
                                return r;
                            }
                        } else {
                            if (i.length !== 0) {
                                return r;
                            }
                        }
                        n = u;
                        i = [];
                        a = argsCountPerCommand[n];
                        o = false;
                        if (a === 0) {
                            r.push({
                                command: n,
                                args: i
                            });
                        }
                        continue;
                    }
                    if (n == null) {
                        return r;
                    }
                    var f = s;
                    var l = null;
                    if (n === 'A' || n === 'a') {
                        var h = i.length;
                        if (h === 0 || h === 1) {
                            if (u !== '+' && u !== '-') {
                                var d = readNumber(t, s);
                                f = d[0];
                                l = d[1];
                            }
                        }
                        if (h === 2 || h === 5 || h === 6) {
                            var m = readNumber(t, s);
                            f = m[0];
                            l = m[1];
                        }
                        if (h === 3 || h === 4) {
                            if (u === '0') {
                                l = 0;
                            }
                            if (u === '1') {
                                l = 1;
                            }
                        }
                    } else {
                        var g = readNumber(t, s);
                        f = g[0];
                        l = g[1];
                    }
                    if (l == null) {
                        return r;
                    }
                    i.push(l);
                    o = true;
                    c = false;
                    s = f;
                    if (i.length === a) {
                        r.push({
                            command: n,
                            args: i
                        });
                        if (n === 'M') {
                            n = 'L';
                        }
                        if (n === 'm') {
                            n = 'l';
                        }
                        i = [];
                    }
                }
                return r;
            };
            var _apply = function e(t, r) {
                cx = cy = px = py = sx = sy = 0;
                for(var n = 0; n < t.length; n++){
                    var i = t[n], a = i.command, o = i.args;
                    if (typeof runners[a] === 'function') {
                        runners[a](r, o);
                    }
                }
            };
            var runners = {
                M: function e(t, r) {
                    cx = r[0];
                    cy = r[1];
                    px = py = null;
                    sx = cx;
                    sy = cy;
                    return t.moveTo(cx, cy);
                },
                m: function e(t, r) {
                    cx += r[0];
                    cy += r[1];
                    px = py = null;
                    sx = cx;
                    sy = cy;
                    return t.moveTo(cx, cy);
                },
                C: function e(t, r) {
                    cx = r[4];
                    cy = r[5];
                    px = r[2];
                    py = r[3];
                    return t.bezierCurveTo.apply(t, r);
                },
                c: function e(t, r) {
                    t.bezierCurveTo(r[0] + cx, r[1] + cy, r[2] + cx, r[3] + cy, r[4] + cx, r[5] + cy);
                    px = cx + r[2];
                    py = cy + r[3];
                    cx += r[4];
                    return cy += r[5];
                },
                S: function e(t, r) {
                    if (px === null) {
                        px = cx;
                        py = cy;
                    }
                    t.bezierCurveTo(cx - (px - cx), cy - (py - cy), r[0], r[1], r[2], r[3]);
                    px = r[0];
                    py = r[1];
                    cx = r[2];
                    return cy = r[3];
                },
                s: function e(t, r) {
                    if (px === null) {
                        px = cx;
                        py = cy;
                    }
                    t.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + r[0], cy + r[1], cx + r[2], cy + r[3]);
                    px = cx + r[0];
                    py = cy + r[1];
                    cx += r[2];
                    return cy += r[3];
                },
                Q: function e(t, r) {
                    px = r[0];
                    py = r[1];
                    cx = r[2];
                    cy = r[3];
                    return t.quadraticCurveTo(r[0], r[1], cx, cy);
                },
                q: function e(t, r) {
                    t.quadraticCurveTo(r[0] + cx, r[1] + cy, r[2] + cx, r[3] + cy);
                    px = cx + r[0];
                    py = cy + r[1];
                    cx += r[2];
                    return cy += r[3];
                },
                T: function e(t, r) {
                    if (px === null) {
                        px = cx;
                        py = cy;
                    } else {
                        px = cx - (px - cx);
                        py = cy - (py - cy);
                    }
                    t.quadraticCurveTo(px, py, r[0], r[1]);
                    px = cx - (px - cx);
                    py = cy - (py - cy);
                    cx = r[0];
                    return cy = r[1];
                },
                t: function e(t, r) {
                    if (px === null) {
                        px = cx;
                        py = cy;
                    } else {
                        px = cx - (px - cx);
                        py = cy - (py - cy);
                    }
                    t.quadraticCurveTo(px, py, cx + r[0], cy + r[1]);
                    cx += r[0];
                    return cy += r[1];
                },
                A: function e(t, r) {
                    solveArc(t, cx, cy, r);
                    cx = r[5];
                    return cy = r[6];
                },
                a: function e(t, r) {
                    r[5] += cx;
                    r[6] += cy;
                    solveArc(t, cx, cy, r);
                    cx = r[5];
                    return cy = r[6];
                },
                L: function e(t, r) {
                    cx = r[0];
                    cy = r[1];
                    px = py = null;
                    return t.lineTo(cx, cy);
                },
                l: function e(t, r) {
                    cx += r[0];
                    cy += r[1];
                    px = py = null;
                    return t.lineTo(cx, cy);
                },
                H: function e(t, r) {
                    cx = r[0];
                    px = py = null;
                    return t.lineTo(cx, cy);
                },
                h: function e(t, r) {
                    cx += r[0];
                    px = py = null;
                    return t.lineTo(cx, cy);
                },
                V: function e(t, r) {
                    cy = r[0];
                    px = py = null;
                    return t.lineTo(cx, cy);
                },
                v: function e(t, r) {
                    cy += r[0];
                    px = py = null;
                    return t.lineTo(cx, cy);
                },
                Z: function e(t) {
                    t.closePath();
                    cx = sx;
                    return cy = sy;
                },
                z: function e(t) {
                    t.closePath();
                    cx = sx;
                    return cy = sy;
                }
            };
            var solveArc = function e(t, r, n, i) {
                var a = i[0], o = i[1], c = i[2], s = i[3], u = i[4], f = i[5], l = i[6];
                var h = arcToSegments(f, l, a, o, s, u, c, r, n);
                for(var d = (0, _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_9__.Z)(h), m; !(m = d()).done;){
                    var g = m.value;
                    var p = segmentToBezier.apply(void 0, g);
                    t.bezierCurveTo.apply(t, p);
                }
            };
            var arcToSegments = function e(t, r, n, i, a, o, c, s, u) {
                var f = c * (Math.PI / 180);
                var l = Math.sin(f);
                var h = Math.cos(f);
                n = Math.abs(n);
                i = Math.abs(i);
                px = h * (s - t) * 0.5 + l * (u - r) * 0.5;
                py = h * (u - r) * 0.5 - l * (s - t) * 0.5;
                var d = px * px / (n * n) + py * py / (i * i);
                if (d > 1) {
                    d = Math.sqrt(d);
                    n *= d;
                    i *= d;
                }
                var m = h / n;
                var g = l / n;
                var p = -l / i;
                var v = h / i;
                var y = m * s + g * u;
                var b = p * s + v * u;
                var A = m * t + g * r;
                var w = p * t + v * r;
                var _ = (A - y) * (A - y) + (w - b) * (w - b);
                var O = 1 / _ - 0.25;
                if (O < 0) {
                    O = 0;
                }
                var S = Math.sqrt(O);
                if (o === a) {
                    S = -S;
                }
                var E = 0.5 * (y + A) - S * (w - b);
                var T = 0.5 * (b + w) + S * (A - y);
                var x = Math.atan2(b - T, y - E);
                var k = Math.atan2(w - T, A - E);
                var R = k - x;
                if (R < 0 && o === 1) {
                    R += 2 * Math.PI;
                } else if (R > 0 && o === 0) {
                    R -= 2 * Math.PI;
                }
                var U = Math.ceil(Math.abs(R / (Math.PI * 0.5 + 0.001)));
                var C = [];
                for(var P = 0; P < U; P++){
                    var F = x + P * R / U;
                    var I = x + (P + 1) * R / U;
                    C[P] = [
                        E,
                        T,
                        F,
                        I,
                        n,
                        i,
                        l,
                        h
                    ];
                }
                return C;
            };
            var segmentToBezier = function e(t, r, n, i, a, o, c, s) {
                var u = s * a;
                var f = -c * o;
                var l = c * a;
                var h = s * o;
                var d = 0.5 * (i - n);
                var m = 8 / 3 * Math.sin(d * 0.5) * Math.sin(d * 0.5) / Math.sin(d);
                var g = t + Math.cos(n) - m * Math.sin(n);
                var p = r + Math.sin(n) + m * Math.cos(n);
                var v = t + Math.cos(i);
                var y = r + Math.sin(i);
                var b = v + m * Math.sin(i);
                var A = y - m * Math.cos(i);
                return [
                    u * g + f * p,
                    l * g + h * p,
                    u * b + f * A,
                    l * b + h * A,
                    u * v + f * y,
                    l * v + h * y
                ];
            };
            var SVGPath = function() {
                function e() {}
                e.apply = function e(t, r) {
                    var n = parsePathData(r);
                    _apply(n, t);
                };
                return e;
            }();
            var number$1 = PDFObject$1.number;
            var KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);
            var VectorMixin = {
                initVector: function e() {
                    this._ctm = [
                        1,
                        0,
                        0,
                        1,
                        0,
                        0
                    ];
                    return this._ctmStack = [];
                },
                save: function e() {
                    this._ctmStack.push(this._ctm.slice());
                    return this.addContent('q');
                },
                restore: function e() {
                    this._ctm = this._ctmStack.pop() || [
                        1,
                        0,
                        0,
                        1,
                        0,
                        0
                    ];
                    return this.addContent('Q');
                },
                closePath: function e() {
                    return this.addContent('h');
                },
                lineWidth: function e(t) {
                    return this.addContent(number$1(t) + " w");
                },
                _CAP_STYLES: {
                    BUTT: 0,
                    ROUND: 1,
                    SQUARE: 2
                },
                lineCap: function e(t) {
                    if (typeof t === 'string') {
                        t = this._CAP_STYLES[t.toUpperCase()];
                    }
                    return this.addContent(t + " J");
                },
                _JOIN_STYLES: {
                    MITER: 0,
                    ROUND: 1,
                    BEVEL: 2
                },
                lineJoin: function e(t) {
                    if (typeof t === 'string') {
                        t = this._JOIN_STYLES[t.toUpperCase()];
                    }
                    return this.addContent(t + " j");
                },
                miterLimit: function e(t) {
                    return this.addContent(number$1(t) + " M");
                },
                dash: function e(t, r) {
                    var n;
                    if (r == null) {
                        r = {};
                    }
                    if (t == null) {
                        return this;
                    }
                    if (Array.isArray(t)) {
                        t = Array.from(t).map(function(e) {
                            return PDFObject$1.number(e);
                        }).join(' ');
                        n = r.phase || 0;
                        return this.addContent("[" + t + "] " + PDFObject$1.number(n) + " d");
                    }
                    var i = r.space != null ? r.space : t;
                    n = r.phase || 0;
                    return this.addContent("[" + PDFObject$1.number(t) + " " + PDFObject$1.number(i) + "] " + PDFObject$1.number(n) + " d");
                },
                undash: function e() {
                    return this.addContent('[] 0 d');
                },
                moveTo: function e(t, r) {
                    return this.addContent(number$1(t) + " " + number$1(r) + " m");
                },
                lineTo: function e(t, r) {
                    return this.addContent(number$1(t) + " " + number$1(r) + " l");
                },
                bezierCurveTo: function e(t, r, n, i, a, o) {
                    return this.addContent(number$1(t) + " " + number$1(r) + " " + number$1(n) + " " + number$1(i) + " " + number$1(a) + " " + number$1(o) + " c");
                },
                quadraticCurveTo: function e(t, r, n, i) {
                    return this.addContent(number$1(t) + " " + number$1(r) + " " + number$1(n) + " " + number$1(i) + " v");
                },
                rect: function e(t, r, n, i) {
                    return this.addContent(number$1(t) + " " + number$1(r) + " " + number$1(n) + " " + number$1(i) + " re");
                },
                roundedRect: function e(t, r, n, i, a) {
                    if (a == null) {
                        a = 0;
                    }
                    a = Math.min(a, 0.5 * n, 0.5 * i);
                    var o = a * (1.0 - KAPPA);
                    this.moveTo(t + a, r);
                    this.lineTo(t + n - a, r);
                    this.bezierCurveTo(t + n - o, r, t + n, r + o, t + n, r + a);
                    this.lineTo(t + n, r + i - a);
                    this.bezierCurveTo(t + n, r + i - o, t + n - o, r + i, t + n - a, r + i);
                    this.lineTo(t + a, r + i);
                    this.bezierCurveTo(t + o, r + i, t, r + i - o, t, r + i - a);
                    this.lineTo(t, r + a);
                    this.bezierCurveTo(t, r + o, t + o, r, t + a, r);
                    return this.closePath();
                },
                ellipse: function e(t, r, n, i) {
                    if (i == null) {
                        i = n;
                    }
                    t -= n;
                    r -= i;
                    var a = n * KAPPA;
                    var o = i * KAPPA;
                    var c = t + n * 2;
                    var s = r + i * 2;
                    var u = t + n;
                    var f = r + i;
                    this.moveTo(t, f);
                    this.bezierCurveTo(t, f - o, u - a, r, u, r);
                    this.bezierCurveTo(u + a, r, c, f - o, c, f);
                    this.bezierCurveTo(c, f + o, u + a, s, u, s);
                    this.bezierCurveTo(u - a, s, t, f + o, t, f);
                    return this.closePath();
                },
                circle: function e(t, r, n) {
                    return this.ellipse(t, r, n);
                },
                arc: function e(t, r, n, i, a, o) {
                    if (o == null) {
                        o = false;
                    }
                    var c = 2.0 * Math.PI;
                    var s = 0.5 * Math.PI;
                    var u = a - i;
                    if (Math.abs(u) > c) {
                        u = c;
                    } else if (u !== 0 && o !== u < 0) {
                        var f = o ? -1 : 1;
                        u = f * c + u;
                    }
                    var l = Math.ceil(Math.abs(u) / s);
                    var h = u / l;
                    var d = h / s * KAPPA * n;
                    var m = i;
                    var g = -Math.sin(m) * d;
                    var p = Math.cos(m) * d;
                    var v = t + Math.cos(m) * n;
                    var y = r + Math.sin(m) * n;
                    this.moveTo(v, y);
                    for(var b = 0, A = l, w = 0 <= A; w ? b < A : b > A; w ? b++ : b--){
                        var _ = v + g;
                        var O = y + p;
                        m += h;
                        v = t + Math.cos(m) * n;
                        y = r + Math.sin(m) * n;
                        g = -Math.sin(m) * d;
                        p = Math.cos(m) * d;
                        var S = v - g;
                        var E = y - p;
                        this.bezierCurveTo(_, O, S, E, v, y);
                    }
                    return this;
                },
                polygon: function e() {
                    for(var t = arguments.length, r = new Array(t), n = 0; n < t; n++){
                        r[n] = arguments[n];
                    }
                    this.moveTo.apply(this, Array.from(r.shift() || []));
                    for(var i = 0, a = Array.from(r); i < a.length; i++){
                        var o = a[i];
                        this.lineTo.apply(this, Array.from(o || []));
                    }
                    return this.closePath();
                },
                path: function e(t) {
                    SVGPath.apply(this, t);
                    return this;
                },
                _windingRule: function e(t) {
                    if (/even-?odd/.test(t)) {
                        return '*';
                    }
                    return '';
                },
                fill: function e(t, r) {
                    if (/(even-?odd)|(non-?zero)/.test(t)) {
                        r = t;
                        t = null;
                    }
                    if (t) {
                        this.fillColor(t);
                    }
                    return this.addContent("f" + this._windingRule(r));
                },
                stroke: function e(t) {
                    if (t) {
                        this.strokeColor(t);
                    }
                    return this.addContent('S');
                },
                fillAndStroke: function e(t, r, n) {
                    if (r == null) {
                        r = t;
                    }
                    var i = /(even-?odd)|(non-?zero)/;
                    if (i.test(t)) {
                        n = t;
                        t = null;
                    }
                    if (i.test(r)) {
                        n = r;
                        r = t;
                    }
                    if (t) {
                        this.fillColor(t);
                        this.strokeColor(r);
                    }
                    return this.addContent("B" + this._windingRule(n));
                },
                clip: function e(t) {
                    return this.addContent("W" + this._windingRule(t) + " n");
                },
                transform: function e(t, r, n, i, a, o) {
                    var c = this._ctm;
                    var s = Array.from(c), u = s[0], f = s[1], l = s[2], h = s[3], d = s[4], m = s[5];
                    c[0] = u * t + l * r;
                    c[1] = f * t + h * r;
                    c[2] = u * n + l * i;
                    c[3] = f * n + h * i;
                    c[4] = u * a + l * o + d;
                    c[5] = f * a + h * o + m;
                    var g = [
                        t,
                        r,
                        n,
                        i,
                        a,
                        o
                    ].map(function(e) {
                        return PDFObject$1.number(e);
                    }).join(' ');
                    return this.addContent(g + " cm");
                },
                translate: function e(t, r) {
                    return this.transform(1, 0, 0, 1, t, r);
                },
                rotate: function e(t, r) {
                    if (r === void 0) {
                        r = {};
                    }
                    var n = t * Math.PI / 180;
                    var i = Math.cos(n);
                    var a = Math.sin(n);
                    var o = 0;
                    var c = 0;
                    if (r.origin != null) {
                        var s = Array.from(r.origin);
                        o = s[0];
                        c = s[1];
                        var u = o * i - c * a;
                        var f = o * a + c * i;
                        o -= u;
                        c -= f;
                    }
                    return this.transform(i, a, -a, i, o, c);
                },
                scale: function e(t, r, n) {
                    if (n === void 0) {
                        n = {};
                    }
                    if (r == null) {
                        r = t;
                    }
                    if (typeof r === 'object') {
                        n = r;
                        r = t;
                    }
                    var i = 0;
                    var a = 0;
                    if (n.origin != null) {
                        var o = Array.from(n.origin);
                        i = o[0];
                        a = o[1];
                        i -= t * i;
                        a -= r * a;
                    }
                    return this.transform(t, 0, 0, r, i, a);
                },
                skew: function e(t, r, n) {
                    if (t === void 0) {
                        t = 0;
                    }
                    if (r === void 0) {
                        r = 0;
                    }
                    var i = t * Math.PI / 180;
                    var a = r * Math.PI / 180;
                    var o = Math.tan(i);
                    var c = Math.tan(a);
                    var s = 0;
                    var u = 0;
                    if (n.origin != null) {
                        var f = Array.from(n.origin);
                        s = f[0];
                        u = f[1];
                        var l = s + o * u;
                        var h = u + c * s;
                        s -= l;
                        u -= h;
                    }
                    return this.transform(1, c, o, 1, s, u);
                }
            };
            var range = function e(t, r, n) {
                var e = [];
                var i = t < r;
                var a = !n ? r : i ? r + 1 : r - 1;
                for(var o = t; i ? o < a : o > a; i ? o++ : o--){
                    e.push(o);
                }
                return e;
            };
            var WIN_ANSI_MAP = {
                402: 131,
                8211: 150,
                8212: 151,
                8216: 145,
                8217: 146,
                8218: 130,
                8220: 147,
                8221: 148,
                8222: 132,
                8224: 134,
                8225: 135,
                8226: 149,
                8230: 133,
                8364: 128,
                8240: 137,
                8249: 139,
                8250: 155,
                710: 136,
                8482: 153,
                338: 140,
                339: 156,
                732: 152,
                352: 138,
                353: 154,
                376: 159,
                381: 142,
                382: 158
            };
            var characters = ".notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n\nspace         exclam         quotedbl       numbersign\ndollar        percent        ampersand      quotesingle\nparenleft     parenright     asterisk       plus\ncomma         hyphen         period         slash\nzero          one            two            three\nfour          five           six            seven\neight         nine           colon          semicolon\nless          equal          greater        question\n\nat            A              B              C\nD             E              F              G\nH             I              J              K\nL             M              N              O\nP             Q              R              S\nT             U              V              W\nX             Y              Z              bracketleft\nbackslash     bracketright   asciicircum    underscore\n\ngrave         a              b              c\nd             e              f              g\nh             i              j              k\nl             m              n              o\np             q              r              s\nt             u              v              w\nx             y              z              braceleft\nbar           braceright     asciitilde     .notdef\n\nEuro          .notdef        quotesinglbase florin\nquotedblbase  ellipsis       dagger         daggerdbl\ncircumflex    perthousand    Scaron         guilsinglleft\nOE            .notdef        Zcaron         .notdef\n.notdef       quoteleft      quoteright     quotedblleft\nquotedblright bullet         endash         emdash\ntilde         trademark      scaron         guilsinglright\noe            .notdef        zcaron         ydieresis\n\nspace         exclamdown     cent           sterling\ncurrency      yen            brokenbar      section\ndieresis      copyright      ordfeminine    guillemotleft\nlogicalnot    hyphen         registered     macron\ndegree        plusminus      twosuperior    threesuperior\nacute         mu             paragraph      periodcentered\ncedilla       onesuperior    ordmasculine   guillemotright\nonequarter    onehalf        threequarters  questiondown\n\nAgrave        Aacute         Acircumflex    Atilde\nAdieresis     Aring          AE             Ccedilla\nEgrave        Eacute         Ecircumflex    Edieresis\nIgrave        Iacute         Icircumflex    Idieresis\nEth           Ntilde         Ograve         Oacute\nOcircumflex   Otilde         Odieresis      multiply\nOslash        Ugrave         Uacute         Ucircumflex\nUdieresis     Yacute         Thorn          germandbls\n\nagrave        aacute         acircumflex    atilde\nadieresis     aring          ae             ccedilla\negrave        eacute         ecircumflex    edieresis\nigrave        iacute         icircumflex    idieresis\neth           ntilde         ograve         oacute\nocircumflex   otilde         odieresis      divide\noslash        ugrave         uacute         ucircumflex\nudieresis     yacute         thorn          ydieresis".split(/\s+/);
            function _parse(e) {
                var t = {
                    attributes: {},
                    glyphWidths: {},
                    kernPairs: {}
                };
                var r = '';
                for(var n = (0, _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_9__.Z)(e.split('\n')), i; !(i = n()).done;){
                    var a = i.value;
                    var o;
                    var c;
                    if (o = a.match(/^Start(\w+)/)) {
                        r = o[1];
                        continue;
                    } else if (o = a.match(/^End(\w+)/)) {
                        r = '';
                        continue;
                    }
                    switch(r){
                        case 'FontMetrics':
                            o = a.match(/(^\w+)\s+(.*)/);
                            var s = o[1];
                            var u = o[2];
                            if (c = t.attributes[s]) {
                                if (!Array.isArray(c)) {
                                    c = t.attributes[s] = [
                                        c
                                    ];
                                }
                                c.push(u);
                            } else {
                                t.attributes[s] = u;
                            }
                            break;
                        case 'CharMetrics':
                            if (!/^CH?\s/.test(a)) {
                                continue;
                            }
                            var f = a.match(/\bN\s+(\.?\w+)\s*;/)[1];
                            t.glyphWidths[f] = +a.match(/\bWX\s+(\d+)\s*;/)[1];
                            break;
                        case 'KernPairs':
                            o = a.match(/^KPX\s+(\.?\w+)\s+(\.?\w+)\s+(-?\d+)/);
                            if (o) {
                                t.kernPairs[o[1] + o[2]] = parseInt(o[3]);
                            }
                            break;
                    }
                }
                return t;
            }
            var AFMFont = function() {
                e.open = function e(t) {
                    {
                        throw new Error('AFMFont.open not available on browser build');
                    }
                };
                e.fromJson = function t(r) {
                    return new e(r);
                };
                function e(e) {
                    var t = this;
                    if (typeof e === 'string') {
                        this.contents = e;
                        this.parse();
                    } else {
                        this.attributes = e.attributes;
                        this.glyphWidths = e.glyphWidths;
                        this.kernPairs = e.kernPairs;
                    }
                    this.charWidths = range(0, 255, true).map(function(e) {
                        return t.glyphWidths[characters[e]];
                    });
                    this.bbox = Array.from(this.attributes.FontBBox.split(/\s+/)).map(function(e) {
                        return +e;
                    });
                    this.ascender = +(this.attributes.Ascender || 0);
                    this.descender = +(this.attributes.Descender || 0);
                    this.xHeight = +(this.attributes.XHeight || 0);
                    this.capHeight = +(this.attributes.CapHeight || 0);
                    this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);
                }
                var t = e.prototype;
                t.parse = function e() {
                    var t = _parse(this.contents);
                    this.attributes = t.attributes;
                    this.glyphWidths = t.glyphWidths;
                    this.kernPairs = t.kernPairs;
                };
                t.encodeText = function e(t) {
                    var r = [];
                    for(var n = 0, i = t.length, a = 0 <= i; a ? n < i : n > i; a ? n++ : n--){
                        var o = t.charCodeAt(n);
                        o = WIN_ANSI_MAP[o] || o;
                        r.push(o.toString(16));
                    }
                    return r;
                };
                t.glyphsForString = function e(t) {
                    var r = [];
                    for(var n = 0, i = t.length, a = 0 <= i; a ? n < i : n > i; a ? n++ : n--){
                        var o = t.charCodeAt(n);
                        r.push(this.characterToGlyph(o));
                    }
                    return r;
                };
                t.characterToGlyph = function e(t) {
                    return characters[WIN_ANSI_MAP[t] || t] || '.notdef';
                };
                t.widthOfGlyph = function e(t) {
                    return this.glyphWidths[t] || 0;
                };
                t.getKernPair = function e(t, r) {
                    return this.kernPairs[t + r] || 0;
                };
                t.advancesForGlyphs = function e(t) {
                    var r = [];
                    for(var n = 0; n < t.length; n++){
                        var i = t[n];
                        var a = t[n + 1];
                        r.push(this.widthOfGlyph(i) + this.getKernPair(i, a));
                    }
                    return r;
                };
                return e;
            }();
            var attributes = [
                {
                    Comment: [
                        "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        "Creation Date: Thu May  1 12:43:52 1997",
                        "UniqueID 43052",
                        "VMusage 37169 48194"
                    ],
                    FontName: "Helvetica-Bold",
                    FullName: "Helvetica Bold",
                    FamilyName: "Helvetica",
                    Weight: "Bold",
                    ItalicAngle: "0",
                    IsFixedPitch: "false",
                    CharacterSet: "ExtendedRoman",
                    FontBBox: "-170 -228 1003 962 ",
                    UnderlinePosition: "-100",
                    UnderlineThickness: "50",
                    Version: "002.000",
                    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                    EncodingScheme: "AdobeStandardEncoding",
                    CapHeight: "718",
                    XHeight: "532",
                    Ascender: "718",
                    Descender: "-207",
                    StdHW: "118",
                    StdVW: "140"
                },
                {
                    Comment: [
                        "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        "Creation Date: Thu May  1 12:45:12 1997",
                        "UniqueID 43053",
                        "VMusage 14482 68586"
                    ],
                    FontName: "Helvetica-BoldOblique",
                    FullName: "Helvetica Bold Oblique",
                    FamilyName: "Helvetica",
                    Weight: "Bold",
                    ItalicAngle: "-12",
                    IsFixedPitch: "false",
                    CharacterSet: "ExtendedRoman",
                    FontBBox: "-174 -228 1114 962",
                    UnderlinePosition: "-100",
                    UnderlineThickness: "50",
                    Version: "002.000",
                    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                    EncodingScheme: "AdobeStandardEncoding",
                    CapHeight: "718",
                    XHeight: "532",
                    Ascender: "718",
                    Descender: "-207",
                    StdHW: "118",
                    StdVW: "140"
                },
                {
                    Comment: [
                        "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        "Creation Date: Thu May  1 12:44:31 1997",
                        "UniqueID 43055",
                        "VMusage 14960 69346"
                    ],
                    FontName: "Helvetica-Oblique",
                    FullName: "Helvetica Oblique",
                    FamilyName: "Helvetica",
                    Weight: "Medium",
                    ItalicAngle: "-12",
                    IsFixedPitch: "false",
                    CharacterSet: "ExtendedRoman",
                    FontBBox: "-170 -225 1116 931 ",
                    UnderlinePosition: "-100",
                    UnderlineThickness: "50",
                    Version: "002.000",
                    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                    EncodingScheme: "AdobeStandardEncoding",
                    CapHeight: "718",
                    XHeight: "523",
                    Ascender: "718",
                    Descender: "-207",
                    StdHW: "76",
                    StdVW: "88"
                },
                {
                    Comment: [
                        "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        "Creation Date: Thu May  1 12:38:23 1997",
                        "UniqueID 43054",
                        "VMusage 37069 48094"
                    ],
                    FontName: "Helvetica",
                    FullName: "Helvetica",
                    FamilyName: "Helvetica",
                    Weight: "Medium",
                    ItalicAngle: "0",
                    IsFixedPitch: "false",
                    CharacterSet: "ExtendedRoman",
                    FontBBox: "-166 -225 1000 931 ",
                    UnderlinePosition: "-100",
                    UnderlineThickness: "50",
                    Version: "002.000",
                    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                    EncodingScheme: "AdobeStandardEncoding",
                    CapHeight: "718",
                    XHeight: "523",
                    Ascender: "718",
                    Descender: "-207",
                    StdHW: "76",
                    StdVW: "88"
                },
                {
                    Comment: [
                        "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        "Creation Date: Thu May  1 12:52:56 1997",
                        "UniqueID 43065",
                        "VMusage 41636 52661"
                    ],
                    FontName: "Times-Bold",
                    FullName: "Times Bold",
                    FamilyName: "Times",
                    Weight: "Bold",
                    ItalicAngle: "0",
                    IsFixedPitch: "false",
                    CharacterSet: "ExtendedRoman",
                    FontBBox: "-168 -218 1000 935 ",
                    UnderlinePosition: "-100",
                    UnderlineThickness: "50",
                    Version: "002.000",
                    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                    EncodingScheme: "AdobeStandardEncoding",
                    CapHeight: "676",
                    XHeight: "461",
                    Ascender: "683",
                    Descender: "-217",
                    StdHW: "44",
                    StdVW: "139"
                },
                {
                    Comment: [
                        "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        "Creation Date: Thu May  1 13:04:06 1997",
                        "UniqueID 43066",
                        "VMusage 45874 56899"
                    ],
                    FontName: "Times-BoldItalic",
                    FullName: "Times Bold Italic",
                    FamilyName: "Times",
                    Weight: "Bold",
                    ItalicAngle: "-15",
                    IsFixedPitch: "false",
                    CharacterSet: "ExtendedRoman",
                    FontBBox: "-200 -218 996 921",
                    UnderlinePosition: "-100",
                    UnderlineThickness: "50",
                    Version: "002.000",
                    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                    EncodingScheme: "AdobeStandardEncoding",
                    CapHeight: "669",
                    XHeight: "462",
                    Ascender: "683",
                    Descender: "-217",
                    StdHW: "42",
                    StdVW: "121"
                },
                {
                    Comment: [
                        "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        "Creation Date: Thu May  1 12:56:55 1997",
                        "UniqueID 43067",
                        "VMusage 47727 58752"
                    ],
                    FontName: "Times-Italic",
                    FullName: "Times Italic",
                    FamilyName: "Times",
                    Weight: "Medium",
                    ItalicAngle: "-15.5",
                    IsFixedPitch: "false",
                    CharacterSet: "ExtendedRoman",
                    FontBBox: "-169 -217 1010 883 ",
                    UnderlinePosition: "-100",
                    UnderlineThickness: "50",
                    Version: "002.000",
                    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                    EncodingScheme: "AdobeStandardEncoding",
                    CapHeight: "653",
                    XHeight: "441",
                    Ascender: "683",
                    Descender: "-217",
                    StdHW: "32",
                    StdVW: "76"
                },
                {
                    Comment: [
                        "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        "Creation Date: Thu May  1 12:49:17 1997",
                        "UniqueID 43068",
                        "VMusage 43909 54934"
                    ],
                    FontName: "Times-Roman",
                    FullName: "Times Roman",
                    FamilyName: "Times",
                    Weight: "Roman",
                    ItalicAngle: "0",
                    IsFixedPitch: "false",
                    CharacterSet: "ExtendedRoman",
                    FontBBox: "-168 -218 1000 898 ",
                    UnderlinePosition: "-100",
                    UnderlineThickness: "50",
                    Version: "002.000",
                    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
                    EncodingScheme: "AdobeStandardEncoding",
                    CapHeight: "662",
                    XHeight: "450",
                    Ascender: "683",
                    Descender: "-217",
                    StdHW: "28",
                    StdVW: "84"
                },
                {
                    Comment: [
                        "Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        "Creation Date: Mon Jun 23 16:28:00 1997",
                        "UniqueID 43048",
                        "VMusage 41139 52164"
                    ],
                    FontName: "Courier-Bold",
                    FullName: "Courier Bold",
                    FamilyName: "Courier",
                    Weight: "Bold",
                    ItalicAngle: "0",
                    IsFixedPitch: "true",
                    CharacterSet: "ExtendedRoman",
                    FontBBox: "-113 -250 749 801 ",
                    UnderlinePosition: "-100",
                    UnderlineThickness: "50",
                    Version: "003.000",
                    Notice: "Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                    EncodingScheme: "AdobeStandardEncoding",
                    CapHeight: "562",
                    XHeight: "439",
                    Ascender: "629",
                    Descender: "-157",
                    StdHW: "84",
                    StdVW: "106"
                },
                {
                    Comment: [
                        "Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        "Creation Date: Mon Jun 23 16:28:46 1997",
                        "UniqueID 43049",
                        "VMusage 17529 79244"
                    ],
                    FontName: "Courier-BoldOblique",
                    FullName: "Courier Bold Oblique",
                    FamilyName: "Courier",
                    Weight: "Bold",
                    ItalicAngle: "-12",
                    IsFixedPitch: "true",
                    CharacterSet: "ExtendedRoman",
                    FontBBox: "-57 -250 869 801",
                    UnderlinePosition: "-100",
                    UnderlineThickness: "50",
                    Version: "003.000",
                    Notice: "Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                    EncodingScheme: "AdobeStandardEncoding",
                    CapHeight: "562",
                    XHeight: "439",
                    Ascender: "629",
                    Descender: "-157",
                    StdHW: "84",
                    StdVW: "106"
                },
                {
                    Comment: [
                        "Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        "Creation Date: Thu May  1 17:37:52 1997",
                        "UniqueID 43051",
                        "VMusage 16248 75829"
                    ],
                    FontName: "Courier-Oblique",
                    FullName: "Courier Oblique",
                    FamilyName: "Courier",
                    Weight: "Medium",
                    ItalicAngle: "-12",
                    IsFixedPitch: "true",
                    CharacterSet: "ExtendedRoman",
                    FontBBox: "-27 -250 849 805 ",
                    UnderlinePosition: "-100",
                    UnderlineThickness: "50",
                    Version: "003.000",
                    Notice: "Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                    EncodingScheme: "AdobeStandardEncoding",
                    CapHeight: "562",
                    XHeight: "426",
                    Ascender: "629",
                    Descender: "-157",
                    StdHW: "51",
                    StdVW: "51"
                },
                {
                    Comment: [
                        "Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                        "Creation Date: Thu May  1 17:27:09 1997",
                        "UniqueID 43050",
                        "VMusage 39754 50779"
                    ],
                    FontName: "Courier",
                    FullName: "Courier",
                    FamilyName: "Courier",
                    Weight: "Medium",
                    ItalicAngle: "0",
                    IsFixedPitch: "true",
                    CharacterSet: "ExtendedRoman",
                    FontBBox: "-23 -250 715 805 ",
                    UnderlinePosition: "-100",
                    UnderlineThickness: "50",
                    Version: "003.000",
                    Notice: "Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
                    EncodingScheme: "AdobeStandardEncoding",
                    CapHeight: "562",
                    XHeight: "426",
                    Ascender: "629",
                    Descender: "-157",
                    StdHW: "51",
                    StdVW: "51"
                }
            ];
            var glyphWidths = {
                space: [
                    278,
                    278,
                    278,
                    278,
                    250,
                    250,
                    250,
                    250,
                    600,
                    600,
                    600,
                    600
                ],
                exclam: [
                    333,
                    333,
                    278,
                    278,
                    333,
                    389,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                quotedbl: [
                    474,
                    474,
                    355,
                    355,
                    555,
                    555,
                    420,
                    408,
                    600,
                    600,
                    600,
                    600
                ],
                numbersign: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                dollar: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                percent: [
                    889,
                    889,
                    889,
                    889,
                    1000,
                    833,
                    833,
                    833,
                    600,
                    600,
                    600,
                    600
                ],
                ampersand: [
                    722,
                    722,
                    667,
                    667,
                    833,
                    778,
                    778,
                    778,
                    600,
                    600,
                    600,
                    600
                ],
                quoteright: [
                    278,
                    278,
                    222,
                    222,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                parenleft: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                parenright: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                asterisk: [
                    389,
                    389,
                    389,
                    389,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                plus: [
                    584,
                    584,
                    584,
                    584,
                    570,
                    570,
                    675,
                    564,
                    600,
                    600,
                    600,
                    600
                ],
                comma: [
                    278,
                    278,
                    278,
                    278,
                    250,
                    250,
                    250,
                    250,
                    600,
                    600,
                    600,
                    600
                ],
                hyphen: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                period: [
                    278,
                    278,
                    278,
                    278,
                    250,
                    250,
                    250,
                    250,
                    600,
                    600,
                    600,
                    600
                ],
                slash: [
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                zero: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                one: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                two: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                three: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                four: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                five: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                six: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                seven: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                eight: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                nine: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                colon: [
                    333,
                    333,
                    278,
                    278,
                    333,
                    333,
                    333,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                semicolon: [
                    333,
                    333,
                    278,
                    278,
                    333,
                    333,
                    333,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                less: [
                    584,
                    584,
                    584,
                    584,
                    570,
                    570,
                    675,
                    564,
                    600,
                    600,
                    600,
                    600
                ],
                equal: [
                    584,
                    584,
                    584,
                    584,
                    570,
                    570,
                    675,
                    564,
                    600,
                    600,
                    600,
                    600
                ],
                greater: [
                    584,
                    584,
                    584,
                    584,
                    570,
                    570,
                    675,
                    564,
                    600,
                    600,
                    600,
                    600
                ],
                question: [
                    611,
                    611,
                    556,
                    556,
                    500,
                    500,
                    500,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                at: [
                    975,
                    975,
                    1015,
                    1015,
                    930,
                    832,
                    920,
                    921,
                    600,
                    600,
                    600,
                    600
                ],
                A: [
                    722,
                    722,
                    667,
                    667,
                    722,
                    667,
                    611,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                B: [
                    722,
                    722,
                    667,
                    667,
                    667,
                    667,
                    611,
                    667,
                    600,
                    600,
                    600,
                    600
                ],
                C: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    667,
                    667,
                    667,
                    600,
                    600,
                    600,
                    600
                ],
                D: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                E: [
                    667,
                    667,
                    667,
                    667,
                    667,
                    667,
                    611,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                F: [
                    611,
                    611,
                    611,
                    611,
                    611,
                    667,
                    611,
                    556,
                    600,
                    600,
                    600,
                    600
                ],
                G: [
                    778,
                    778,
                    778,
                    778,
                    778,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                H: [
                    722,
                    722,
                    722,
                    722,
                    778,
                    778,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                I: [
                    278,
                    278,
                    278,
                    278,
                    389,
                    389,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                J: [
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    444,
                    389,
                    600,
                    600,
                    600,
                    600
                ],
                K: [
                    722,
                    722,
                    667,
                    667,
                    778,
                    667,
                    667,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                L: [
                    611,
                    611,
                    556,
                    556,
                    667,
                    611,
                    556,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                M: [
                    833,
                    833,
                    833,
                    833,
                    944,
                    889,
                    833,
                    889,
                    600,
                    600,
                    600,
                    600
                ],
                N: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    667,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                O: [
                    778,
                    778,
                    778,
                    778,
                    778,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                P: [
                    667,
                    667,
                    667,
                    667,
                    611,
                    611,
                    611,
                    556,
                    600,
                    600,
                    600,
                    600
                ],
                Q: [
                    778,
                    778,
                    778,
                    778,
                    778,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                R: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    667,
                    611,
                    667,
                    600,
                    600,
                    600,
                    600
                ],
                S: [
                    667,
                    667,
                    667,
                    667,
                    556,
                    556,
                    500,
                    556,
                    600,
                    600,
                    600,
                    600
                ],
                T: [
                    611,
                    611,
                    611,
                    611,
                    667,
                    611,
                    556,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                U: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                V: [
                    667,
                    667,
                    667,
                    667,
                    722,
                    667,
                    611,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                W: [
                    944,
                    944,
                    944,
                    944,
                    1000,
                    889,
                    833,
                    944,
                    600,
                    600,
                    600,
                    600
                ],
                X: [
                    667,
                    667,
                    667,
                    667,
                    722,
                    667,
                    611,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Y: [
                    667,
                    667,
                    667,
                    667,
                    722,
                    611,
                    556,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Z: [
                    611,
                    611,
                    611,
                    611,
                    667,
                    611,
                    556,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                bracketleft: [
                    333,
                    333,
                    278,
                    278,
                    333,
                    333,
                    389,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                backslash: [
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                bracketright: [
                    333,
                    333,
                    278,
                    278,
                    333,
                    333,
                    389,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                asciicircum: [
                    584,
                    584,
                    469,
                    469,
                    581,
                    570,
                    422,
                    469,
                    600,
                    600,
                    600,
                    600
                ],
                underscore: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                quoteleft: [
                    278,
                    278,
                    222,
                    222,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                a: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                b: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                c: [
                    556,
                    556,
                    500,
                    500,
                    444,
                    444,
                    444,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                d: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                e: [
                    556,
                    556,
                    556,
                    556,
                    444,
                    444,
                    444,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                f: [
                    333,
                    333,
                    278,
                    278,
                    333,
                    333,
                    278,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                g: [
                    611,
                    611,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                h: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                i: [
                    278,
                    278,
                    222,
                    222,
                    278,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                j: [
                    278,
                    278,
                    222,
                    222,
                    333,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                k: [
                    556,
                    556,
                    500,
                    500,
                    556,
                    500,
                    444,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                l: [
                    278,
                    278,
                    222,
                    222,
                    278,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                m: [
                    889,
                    889,
                    833,
                    833,
                    833,
                    778,
                    722,
                    778,
                    600,
                    600,
                    600,
                    600
                ],
                n: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                o: [
                    611,
                    611,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                p: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                q: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                r: [
                    389,
                    389,
                    333,
                    333,
                    444,
                    389,
                    389,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                s: [
                    556,
                    556,
                    500,
                    500,
                    389,
                    389,
                    389,
                    389,
                    600,
                    600,
                    600,
                    600
                ],
                t: [
                    333,
                    333,
                    278,
                    278,
                    333,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                u: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                v: [
                    556,
                    556,
                    500,
                    500,
                    500,
                    444,
                    444,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                w: [
                    778,
                    778,
                    722,
                    722,
                    722,
                    667,
                    667,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                x: [
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    444,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                y: [
                    556,
                    556,
                    500,
                    500,
                    500,
                    444,
                    444,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                z: [
                    500,
                    500,
                    500,
                    500,
                    444,
                    389,
                    389,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                braceleft: [
                    389,
                    389,
                    334,
                    334,
                    394,
                    348,
                    400,
                    480,
                    600,
                    600,
                    600,
                    600
                ],
                bar: [
                    280,
                    280,
                    260,
                    260,
                    220,
                    220,
                    275,
                    200,
                    600,
                    600,
                    600,
                    600
                ],
                braceright: [
                    389,
                    389,
                    334,
                    334,
                    394,
                    348,
                    400,
                    480,
                    600,
                    600,
                    600,
                    600
                ],
                asciitilde: [
                    584,
                    584,
                    584,
                    584,
                    520,
                    570,
                    541,
                    541,
                    600,
                    600,
                    600,
                    600
                ],
                exclamdown: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    389,
                    389,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                cent: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                sterling: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                fraction: [
                    167,
                    167,
                    167,
                    167,
                    167,
                    167,
                    167,
                    167,
                    600,
                    600,
                    600,
                    600
                ],
                yen: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                florin: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                section: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                currency: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                quotesingle: [
                    238,
                    238,
                    191,
                    191,
                    278,
                    278,
                    214,
                    180,
                    600,
                    600,
                    600,
                    600
                ],
                quotedblleft: [
                    500,
                    500,
                    333,
                    333,
                    500,
                    500,
                    556,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                guillemotleft: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                guilsinglleft: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                guilsinglright: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                fi: [
                    611,
                    611,
                    500,
                    500,
                    556,
                    556,
                    500,
                    556,
                    600,
                    600,
                    600,
                    600
                ],
                fl: [
                    611,
                    611,
                    500,
                    500,
                    556,
                    556,
                    500,
                    556,
                    600,
                    600,
                    600,
                    600
                ],
                endash: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                dagger: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                daggerdbl: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                periodcentered: [
                    278,
                    278,
                    278,
                    278,
                    250,
                    250,
                    250,
                    250,
                    600,
                    600,
                    600,
                    600
                ],
                paragraph: [
                    556,
                    556,
                    537,
                    537,
                    540,
                    500,
                    523,
                    453,
                    600,
                    600,
                    600,
                    600
                ],
                bullet: [
                    350,
                    350,
                    350,
                    350,
                    350,
                    350,
                    350,
                    350,
                    600,
                    600,
                    600,
                    600
                ],
                quotesinglbase: [
                    278,
                    278,
                    222,
                    222,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                quotedblbase: [
                    500,
                    500,
                    333,
                    333,
                    500,
                    500,
                    556,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                quotedblright: [
                    500,
                    500,
                    333,
                    333,
                    500,
                    500,
                    556,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                guillemotright: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                ellipsis: [
                    1000,
                    1000,
                    1000,
                    1000,
                    1000,
                    1000,
                    889,
                    1000,
                    600,
                    600,
                    600,
                    600
                ],
                perthousand: [
                    1000,
                    1000,
                    1000,
                    1000,
                    1000,
                    1000,
                    1000,
                    1000,
                    600,
                    600,
                    600,
                    600
                ],
                questiondown: [
                    611,
                    611,
                    611,
                    611,
                    500,
                    500,
                    500,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                grave: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                acute: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                circumflex: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                tilde: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                macron: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                breve: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                dotaccent: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                dieresis: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                ring: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                cedilla: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                hungarumlaut: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                ogonek: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                caron: [
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                emdash: [
                    1000,
                    1000,
                    1000,
                    1000,
                    1000,
                    1000,
                    889,
                    1000,
                    600,
                    600,
                    600,
                    600
                ],
                AE: [
                    1000,
                    1000,
                    1000,
                    1000,
                    1000,
                    944,
                    889,
                    889,
                    600,
                    600,
                    600,
                    600
                ],
                ordfeminine: [
                    370,
                    370,
                    370,
                    370,
                    300,
                    266,
                    276,
                    276,
                    600,
                    600,
                    600,
                    600
                ],
                Lslash: [
                    611,
                    611,
                    556,
                    556,
                    667,
                    611,
                    556,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                Oslash: [
                    778,
                    778,
                    778,
                    778,
                    778,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                OE: [
                    1000,
                    1000,
                    1000,
                    1000,
                    1000,
                    944,
                    944,
                    889,
                    600,
                    600,
                    600,
                    600
                ],
                ordmasculine: [
                    365,
                    365,
                    365,
                    365,
                    330,
                    300,
                    310,
                    310,
                    600,
                    600,
                    600,
                    600
                ],
                ae: [
                    889,
                    889,
                    889,
                    889,
                    722,
                    722,
                    667,
                    667,
                    600,
                    600,
                    600,
                    600
                ],
                dotlessi: [
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                lslash: [
                    278,
                    278,
                    222,
                    222,
                    278,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                oslash: [
                    611,
                    611,
                    611,
                    611,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                oe: [
                    944,
                    944,
                    944,
                    944,
                    722,
                    722,
                    667,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                germandbls: [
                    611,
                    611,
                    611,
                    611,
                    556,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                Idieresis: [
                    278,
                    278,
                    278,
                    278,
                    389,
                    389,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                eacute: [
                    556,
                    556,
                    556,
                    556,
                    444,
                    444,
                    444,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                abreve: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                uhungarumlaut: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                ecaron: [
                    556,
                    556,
                    556,
                    556,
                    444,
                    444,
                    444,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                Ydieresis: [
                    667,
                    667,
                    667,
                    667,
                    722,
                    611,
                    556,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                divide: [
                    584,
                    584,
                    584,
                    584,
                    570,
                    570,
                    675,
                    564,
                    600,
                    600,
                    600,
                    600
                ],
                Yacute: [
                    667,
                    667,
                    667,
                    667,
                    722,
                    611,
                    556,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Acircumflex: [
                    722,
                    722,
                    667,
                    667,
                    722,
                    667,
                    611,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                aacute: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                Ucircumflex: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                yacute: [
                    556,
                    556,
                    500,
                    500,
                    500,
                    444,
                    444,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                scommaaccent: [
                    556,
                    556,
                    500,
                    500,
                    389,
                    389,
                    389,
                    389,
                    600,
                    600,
                    600,
                    600
                ],
                ecircumflex: [
                    556,
                    556,
                    556,
                    556,
                    444,
                    444,
                    444,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                Uring: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Udieresis: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                aogonek: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                Uacute: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                uogonek: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                Edieresis: [
                    667,
                    667,
                    667,
                    667,
                    667,
                    667,
                    611,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                Dcroat: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                commaaccent: [
                    250,
                    250,
                    250,
                    250,
                    250,
                    250,
                    250,
                    250,
                    600,
                    600,
                    600,
                    600
                ],
                copyright: [
                    737,
                    737,
                    737,
                    737,
                    747,
                    747,
                    760,
                    760,
                    600,
                    600,
                    600,
                    600
                ],
                Emacron: [
                    667,
                    667,
                    667,
                    667,
                    667,
                    667,
                    611,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                ccaron: [
                    556,
                    556,
                    500,
                    500,
                    444,
                    444,
                    444,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                aring: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                Ncommaaccent: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    667,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                lacute: [
                    278,
                    278,
                    222,
                    222,
                    278,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                agrave: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                Tcommaaccent: [
                    611,
                    611,
                    611,
                    611,
                    667,
                    611,
                    556,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                Cacute: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    667,
                    667,
                    667,
                    600,
                    600,
                    600,
                    600
                ],
                atilde: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                Edotaccent: [
                    667,
                    667,
                    667,
                    667,
                    667,
                    667,
                    611,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                scaron: [
                    556,
                    556,
                    500,
                    500,
                    389,
                    389,
                    389,
                    389,
                    600,
                    600,
                    600,
                    600
                ],
                scedilla: [
                    556,
                    556,
                    500,
                    500,
                    389,
                    389,
                    389,
                    389,
                    600,
                    600,
                    600,
                    600
                ],
                iacute: [
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                lozenge: [
                    494,
                    494,
                    471,
                    471,
                    494,
                    494,
                    471,
                    471,
                    600,
                    600,
                    600,
                    600
                ],
                Rcaron: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    667,
                    611,
                    667,
                    600,
                    600,
                    600,
                    600
                ],
                Gcommaaccent: [
                    778,
                    778,
                    778,
                    778,
                    778,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                ucircumflex: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                acircumflex: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                Amacron: [
                    722,
                    722,
                    667,
                    667,
                    722,
                    667,
                    611,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                rcaron: [
                    389,
                    389,
                    333,
                    333,
                    444,
                    389,
                    389,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                ccedilla: [
                    556,
                    556,
                    500,
                    500,
                    444,
                    444,
                    444,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                Zdotaccent: [
                    611,
                    611,
                    611,
                    611,
                    667,
                    611,
                    556,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                Thorn: [
                    667,
                    667,
                    667,
                    667,
                    611,
                    611,
                    611,
                    556,
                    600,
                    600,
                    600,
                    600
                ],
                Omacron: [
                    778,
                    778,
                    778,
                    778,
                    778,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Racute: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    667,
                    611,
                    667,
                    600,
                    600,
                    600,
                    600
                ],
                Sacute: [
                    667,
                    667,
                    667,
                    667,
                    556,
                    556,
                    500,
                    556,
                    600,
                    600,
                    600,
                    600
                ],
                dcaron: [
                    743,
                    743,
                    643,
                    643,
                    672,
                    608,
                    544,
                    588,
                    600,
                    600,
                    600,
                    600
                ],
                Umacron: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                uring: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                threesuperior: [
                    333,
                    333,
                    333,
                    333,
                    300,
                    300,
                    300,
                    300,
                    600,
                    600,
                    600,
                    600
                ],
                Ograve: [
                    778,
                    778,
                    778,
                    778,
                    778,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Agrave: [
                    722,
                    722,
                    667,
                    667,
                    722,
                    667,
                    611,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Abreve: [
                    722,
                    722,
                    667,
                    667,
                    722,
                    667,
                    611,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                multiply: [
                    584,
                    584,
                    584,
                    584,
                    570,
                    570,
                    675,
                    564,
                    600,
                    600,
                    600,
                    600
                ],
                uacute: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                Tcaron: [
                    611,
                    611,
                    611,
                    611,
                    667,
                    611,
                    556,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                partialdiff: [
                    494,
                    494,
                    476,
                    476,
                    494,
                    494,
                    476,
                    476,
                    600,
                    600,
                    600,
                    600
                ],
                ydieresis: [
                    556,
                    556,
                    500,
                    500,
                    500,
                    444,
                    444,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                Nacute: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    667,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                icircumflex: [
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                Ecircumflex: [
                    667,
                    667,
                    667,
                    667,
                    667,
                    667,
                    611,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                adieresis: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                edieresis: [
                    556,
                    556,
                    556,
                    556,
                    444,
                    444,
                    444,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                cacute: [
                    556,
                    556,
                    500,
                    500,
                    444,
                    444,
                    444,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                nacute: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                umacron: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                Ncaron: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    667,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Iacute: [
                    278,
                    278,
                    278,
                    278,
                    389,
                    389,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                plusminus: [
                    584,
                    584,
                    584,
                    584,
                    570,
                    570,
                    675,
                    564,
                    600,
                    600,
                    600,
                    600
                ],
                brokenbar: [
                    280,
                    280,
                    260,
                    260,
                    220,
                    220,
                    275,
                    200,
                    600,
                    600,
                    600,
                    600
                ],
                registered: [
                    737,
                    737,
                    737,
                    737,
                    747,
                    747,
                    760,
                    760,
                    600,
                    600,
                    600,
                    600
                ],
                Gbreve: [
                    778,
                    778,
                    778,
                    778,
                    778,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Idotaccent: [
                    278,
                    278,
                    278,
                    278,
                    389,
                    389,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                summation: [
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600
                ],
                Egrave: [
                    667,
                    667,
                    667,
                    667,
                    667,
                    667,
                    611,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                racute: [
                    389,
                    389,
                    333,
                    333,
                    444,
                    389,
                    389,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                omacron: [
                    611,
                    611,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                Zacute: [
                    611,
                    611,
                    611,
                    611,
                    667,
                    611,
                    556,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                Zcaron: [
                    611,
                    611,
                    611,
                    611,
                    667,
                    611,
                    556,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                greaterequal: [
                    549,
                    549,
                    549,
                    549,
                    549,
                    549,
                    549,
                    549,
                    600,
                    600,
                    600,
                    600
                ],
                Eth: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Ccedilla: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    667,
                    667,
                    667,
                    600,
                    600,
                    600,
                    600
                ],
                lcommaaccent: [
                    278,
                    278,
                    222,
                    222,
                    278,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                tcaron: [
                    389,
                    389,
                    317,
                    317,
                    416,
                    366,
                    300,
                    326,
                    600,
                    600,
                    600,
                    600
                ],
                eogonek: [
                    556,
                    556,
                    556,
                    556,
                    444,
                    444,
                    444,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                Uogonek: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Aacute: [
                    722,
                    722,
                    667,
                    667,
                    722,
                    667,
                    611,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Adieresis: [
                    722,
                    722,
                    667,
                    667,
                    722,
                    667,
                    611,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                egrave: [
                    556,
                    556,
                    556,
                    556,
                    444,
                    444,
                    444,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                zacute: [
                    500,
                    500,
                    500,
                    500,
                    444,
                    389,
                    389,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                iogonek: [
                    278,
                    278,
                    222,
                    222,
                    278,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                Oacute: [
                    778,
                    778,
                    778,
                    778,
                    778,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                oacute: [
                    611,
                    611,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                amacron: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                sacute: [
                    556,
                    556,
                    500,
                    500,
                    389,
                    389,
                    389,
                    389,
                    600,
                    600,
                    600,
                    600
                ],
                idieresis: [
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                Ocircumflex: [
                    778,
                    778,
                    778,
                    778,
                    778,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Ugrave: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Delta: [
                    612,
                    612,
                    612,
                    612,
                    612,
                    612,
                    612,
                    612,
                    600,
                    600,
                    600,
                    600
                ],
                thorn: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                twosuperior: [
                    333,
                    333,
                    333,
                    333,
                    300,
                    300,
                    300,
                    300,
                    600,
                    600,
                    600,
                    600
                ],
                Odieresis: [
                    778,
                    778,
                    778,
                    778,
                    778,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                mu: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    576,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                igrave: [
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                ohungarumlaut: [
                    611,
                    611,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                Eogonek: [
                    667,
                    667,
                    667,
                    667,
                    667,
                    667,
                    611,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                dcroat: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                threequarters: [
                    834,
                    834,
                    834,
                    834,
                    750,
                    750,
                    750,
                    750,
                    600,
                    600,
                    600,
                    600
                ],
                Scedilla: [
                    667,
                    667,
                    667,
                    667,
                    556,
                    556,
                    500,
                    556,
                    600,
                    600,
                    600,
                    600
                ],
                lcaron: [
                    400,
                    400,
                    299,
                    299,
                    394,
                    382,
                    300,
                    344,
                    600,
                    600,
                    600,
                    600
                ],
                Kcommaaccent: [
                    722,
                    722,
                    667,
                    667,
                    778,
                    667,
                    667,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Lacute: [
                    611,
                    611,
                    556,
                    556,
                    667,
                    611,
                    556,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                trademark: [
                    1000,
                    1000,
                    1000,
                    1000,
                    1000,
                    1000,
                    980,
                    980,
                    600,
                    600,
                    600,
                    600
                ],
                edotaccent: [
                    556,
                    556,
                    556,
                    556,
                    444,
                    444,
                    444,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                Igrave: [
                    278,
                    278,
                    278,
                    278,
                    389,
                    389,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                Imacron: [
                    278,
                    278,
                    278,
                    278,
                    389,
                    389,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                Lcaron: [
                    611,
                    611,
                    556,
                    556,
                    667,
                    611,
                    611,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                onehalf: [
                    834,
                    834,
                    834,
                    834,
                    750,
                    750,
                    750,
                    750,
                    600,
                    600,
                    600,
                    600
                ],
                lessequal: [
                    549,
                    549,
                    549,
                    549,
                    549,
                    549,
                    549,
                    549,
                    600,
                    600,
                    600,
                    600
                ],
                ocircumflex: [
                    611,
                    611,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                ntilde: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                Uhungarumlaut: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Eacute: [
                    667,
                    667,
                    667,
                    667,
                    667,
                    667,
                    611,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                emacron: [
                    556,
                    556,
                    556,
                    556,
                    444,
                    444,
                    444,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                gbreve: [
                    611,
                    611,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                onequarter: [
                    834,
                    834,
                    834,
                    834,
                    750,
                    750,
                    750,
                    750,
                    600,
                    600,
                    600,
                    600
                ],
                Scaron: [
                    667,
                    667,
                    667,
                    667,
                    556,
                    556,
                    500,
                    556,
                    600,
                    600,
                    600,
                    600
                ],
                Scommaaccent: [
                    667,
                    667,
                    667,
                    667,
                    556,
                    556,
                    500,
                    556,
                    600,
                    600,
                    600,
                    600
                ],
                Ohungarumlaut: [
                    778,
                    778,
                    778,
                    778,
                    778,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                degree: [
                    400,
                    400,
                    400,
                    400,
                    400,
                    400,
                    400,
                    400,
                    600,
                    600,
                    600,
                    600
                ],
                ograve: [
                    611,
                    611,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                Ccaron: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    667,
                    667,
                    667,
                    600,
                    600,
                    600,
                    600
                ],
                ugrave: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                radical: [
                    549,
                    549,
                    453,
                    453,
                    549,
                    549,
                    453,
                    453,
                    600,
                    600,
                    600,
                    600
                ],
                Dcaron: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                rcommaaccent: [
                    389,
                    389,
                    333,
                    333,
                    444,
                    389,
                    389,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                Ntilde: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    722,
                    667,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                otilde: [
                    611,
                    611,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                Rcommaaccent: [
                    722,
                    722,
                    722,
                    722,
                    722,
                    667,
                    611,
                    667,
                    600,
                    600,
                    600,
                    600
                ],
                Lcommaaccent: [
                    611,
                    611,
                    556,
                    556,
                    667,
                    611,
                    556,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                Atilde: [
                    722,
                    722,
                    667,
                    667,
                    722,
                    667,
                    611,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Aogonek: [
                    722,
                    722,
                    667,
                    667,
                    722,
                    667,
                    611,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Aring: [
                    722,
                    722,
                    667,
                    667,
                    722,
                    667,
                    611,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                Otilde: [
                    778,
                    778,
                    778,
                    778,
                    778,
                    722,
                    722,
                    722,
                    600,
                    600,
                    600,
                    600
                ],
                zdotaccent: [
                    500,
                    500,
                    500,
                    500,
                    444,
                    389,
                    389,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                Ecaron: [
                    667,
                    667,
                    667,
                    667,
                    667,
                    667,
                    611,
                    611,
                    600,
                    600,
                    600,
                    600
                ],
                Iogonek: [
                    278,
                    278,
                    278,
                    278,
                    389,
                    389,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                kcommaaccent: [
                    556,
                    556,
                    500,
                    500,
                    556,
                    500,
                    444,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                minus: [
                    584,
                    584,
                    584,
                    584,
                    570,
                    606,
                    675,
                    564,
                    600,
                    600,
                    600,
                    600
                ],
                Icircumflex: [
                    278,
                    278,
                    278,
                    278,
                    389,
                    389,
                    333,
                    333,
                    600,
                    600,
                    600,
                    600
                ],
                ncaron: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                tcommaaccent: [
                    333,
                    333,
                    278,
                    278,
                    333,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                logicalnot: [
                    584,
                    584,
                    584,
                    584,
                    570,
                    606,
                    675,
                    564,
                    600,
                    600,
                    600,
                    600
                ],
                odieresis: [
                    611,
                    611,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                udieresis: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                notequal: [
                    549,
                    549,
                    549,
                    549,
                    549,
                    549,
                    549,
                    549,
                    600,
                    600,
                    600,
                    600
                ],
                gcommaaccent: [
                    611,
                    611,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                eth: [
                    611,
                    611,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                zcaron: [
                    500,
                    500,
                    500,
                    500,
                    444,
                    389,
                    389,
                    444,
                    600,
                    600,
                    600,
                    600
                ],
                ncommaaccent: [
                    611,
                    611,
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ],
                onesuperior: [
                    333,
                    333,
                    333,
                    333,
                    300,
                    300,
                    300,
                    300,
                    600,
                    600,
                    600,
                    600
                ],
                imacron: [
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    278,
                    600,
                    600,
                    600,
                    600
                ],
                Euro: [
                    556,
                    556,
                    556,
                    556,
                    500,
                    500,
                    500,
                    500,
                    600,
                    600,
                    600,
                    600
                ]
            };
            var kernPairs = {
                AC: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                ACacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                ACcaron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                ACcedilla: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AG: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AGbreve: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AGcommaaccent: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AO: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AOacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AOcircumflex: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AOdieresis: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AOgrave: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AOhungarumlaut: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AOmacron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AOslash: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AOtilde: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AQ: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -55,
                    -40,
                    -55
                ],
                AT: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                ATcaron: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                ATcommaaccent: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AU: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AUacute: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AUcircumflex: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AUdieresis: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AUgrave: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AUhungarumlaut: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AUmacron: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AUogonek: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AUring: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AV: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -145,
                    -95,
                    -105,
                    -135
                ],
                AW: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -130,
                    -100,
                    -95,
                    -90
                ],
                AY: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AYacute: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AYdieresis: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                Au: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Auacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aucircumflex: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Audieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Augrave: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Auhungarumlaut: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aumacron: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Auogonek: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Auring: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Av: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -100,
                    -74,
                    -55,
                    -74
                ],
                Aw: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -90,
                    -74,
                    -55,
                    -92
                ],
                Ay: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Ayacute: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Aydieresis: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                AacuteC: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AacuteCacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AacuteCcaron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AacuteCcedilla: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AacuteG: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AacuteGbreve: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AacuteGcommaaccent: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AacuteO: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AacuteOacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AacuteOcircumflex: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AacuteOdieresis: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AacuteOgrave: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AacuteOhungarumlaut: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AacuteOmacron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AacuteOslash: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AacuteOtilde: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AacuteQ: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -55,
                    -40,
                    -55
                ],
                AacuteT: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AacuteTcaron: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AacuteTcommaaccent: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AacuteU: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AacuteUacute: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AacuteUcircumflex: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AacuteUdieresis: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AacuteUgrave: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AacuteUhungarumlaut: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AacuteUmacron: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AacuteUogonek: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AacuteUring: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AacuteV: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -145,
                    -95,
                    -105,
                    -135
                ],
                AacuteW: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -130,
                    -100,
                    -95,
                    -90
                ],
                AacuteY: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AacuteYacute: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AacuteYdieresis: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                Aacuteu: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aacuteuacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aacuteucircumflex: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aacuteudieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aacuteugrave: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aacuteuhungarumlaut: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aacuteumacron: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aacuteuogonek: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aacuteuring: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aacutev: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -100,
                    -74,
                    -55,
                    -74
                ],
                Aacutew: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -90,
                    -74,
                    -55,
                    -92
                ],
                Aacutey: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Aacuteyacute: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Aacuteydieresis: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                AbreveC: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AbreveCacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AbreveCcaron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AbreveCcedilla: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AbreveG: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AbreveGbreve: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AbreveGcommaaccent: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AbreveO: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AbreveOacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AbreveOcircumflex: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AbreveOdieresis: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AbreveOgrave: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AbreveOhungarumlaut: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AbreveOmacron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AbreveOslash: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AbreveOtilde: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AbreveQ: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -55,
                    -40,
                    -55
                ],
                AbreveT: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AbreveTcaron: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AbreveTcommaaccent: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AbreveU: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AbreveUacute: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AbreveUcircumflex: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AbreveUdieresis: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AbreveUgrave: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AbreveUhungarumlaut: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AbreveUmacron: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AbreveUogonek: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AbreveUring: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AbreveV: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -145,
                    -95,
                    -105,
                    -135
                ],
                AbreveW: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -130,
                    -100,
                    -95,
                    -90
                ],
                AbreveY: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AbreveYacute: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AbreveYdieresis: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                Abreveu: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Abreveuacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Abreveucircumflex: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Abreveudieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Abreveugrave: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Abreveuhungarumlaut: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Abreveumacron: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Abreveuogonek: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Abreveuring: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Abrevev: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -100,
                    -74,
                    -55,
                    -74
                ],
                Abrevew: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -90,
                    -74,
                    -55,
                    -92
                ],
                Abrevey: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Abreveyacute: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Abreveydieresis: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                AcircumflexC: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AcircumflexCacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AcircumflexCcaron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AcircumflexCcedilla: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AcircumflexG: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AcircumflexGbreve: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AcircumflexGcommaaccent: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AcircumflexO: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AcircumflexOacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AcircumflexOcircumflex: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AcircumflexOdieresis: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AcircumflexOgrave: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AcircumflexOhungarumlaut: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AcircumflexOmacron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AcircumflexOslash: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AcircumflexOtilde: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AcircumflexQ: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -55,
                    -40,
                    -55
                ],
                AcircumflexT: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AcircumflexTcaron: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AcircumflexTcommaaccent: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AcircumflexU: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AcircumflexUacute: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AcircumflexUcircumflex: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AcircumflexUdieresis: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AcircumflexUgrave: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AcircumflexUhungarumlaut: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AcircumflexUmacron: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AcircumflexUogonek: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AcircumflexUring: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AcircumflexV: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -145,
                    -95,
                    -105,
                    -135
                ],
                AcircumflexW: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -130,
                    -100,
                    -95,
                    -90
                ],
                AcircumflexY: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AcircumflexYacute: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AcircumflexYdieresis: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                Acircumflexu: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Acircumflexuacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Acircumflexucircumflex: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Acircumflexudieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Acircumflexugrave: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Acircumflexuhungarumlaut: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Acircumflexumacron: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Acircumflexuogonek: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Acircumflexuring: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Acircumflexv: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -100,
                    -74,
                    -55,
                    -74
                ],
                Acircumflexw: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -90,
                    -74,
                    -55,
                    -92
                ],
                Acircumflexy: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Acircumflexyacute: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Acircumflexydieresis: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                AdieresisC: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AdieresisCacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AdieresisCcaron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AdieresisCcedilla: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AdieresisG: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AdieresisGbreve: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AdieresisGcommaaccent: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AdieresisO: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AdieresisOacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AdieresisOcircumflex: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AdieresisOdieresis: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AdieresisOgrave: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AdieresisOhungarumlaut: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AdieresisOmacron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AdieresisOslash: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AdieresisOtilde: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AdieresisQ: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -55,
                    -40,
                    -55
                ],
                AdieresisT: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AdieresisTcaron: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AdieresisTcommaaccent: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AdieresisU: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AdieresisUacute: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AdieresisUcircumflex: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AdieresisUdieresis: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AdieresisUgrave: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AdieresisUhungarumlaut: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AdieresisUmacron: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AdieresisUogonek: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AdieresisUring: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AdieresisV: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -145,
                    -95,
                    -105,
                    -135
                ],
                AdieresisW: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -130,
                    -100,
                    -95,
                    -90
                ],
                AdieresisY: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AdieresisYacute: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AdieresisYdieresis: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                Adieresisu: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Adieresisuacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Adieresisucircumflex: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Adieresisudieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Adieresisugrave: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Adieresisuhungarumlaut: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Adieresisumacron: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Adieresisuogonek: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Adieresisuring: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Adieresisv: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -100,
                    -74,
                    -55,
                    -74
                ],
                Adieresisw: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -90,
                    -74,
                    -55,
                    -92
                ],
                Adieresisy: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Adieresisyacute: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Adieresisydieresis: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                AgraveC: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AgraveCacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AgraveCcaron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AgraveCcedilla: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AgraveG: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AgraveGbreve: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AgraveGcommaaccent: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AgraveO: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AgraveOacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AgraveOcircumflex: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AgraveOdieresis: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AgraveOgrave: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AgraveOhungarumlaut: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AgraveOmacron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AgraveOslash: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AgraveOtilde: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AgraveQ: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -55,
                    -40,
                    -55
                ],
                AgraveT: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AgraveTcaron: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AgraveTcommaaccent: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AgraveU: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AgraveUacute: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AgraveUcircumflex: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AgraveUdieresis: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AgraveUgrave: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AgraveUhungarumlaut: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AgraveUmacron: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AgraveUogonek: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AgraveUring: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AgraveV: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -145,
                    -95,
                    -105,
                    -135
                ],
                AgraveW: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -130,
                    -100,
                    -95,
                    -90
                ],
                AgraveY: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AgraveYacute: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AgraveYdieresis: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                Agraveu: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Agraveuacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Agraveucircumflex: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Agraveudieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Agraveugrave: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Agraveuhungarumlaut: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Agraveumacron: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Agraveuogonek: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Agraveuring: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Agravev: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -100,
                    -74,
                    -55,
                    -74
                ],
                Agravew: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -90,
                    -74,
                    -55,
                    -92
                ],
                Agravey: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Agraveyacute: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Agraveydieresis: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                AmacronC: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AmacronCacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AmacronCcaron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AmacronCcedilla: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AmacronG: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AmacronGbreve: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AmacronGcommaaccent: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AmacronO: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AmacronOacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AmacronOcircumflex: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AmacronOdieresis: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AmacronOgrave: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AmacronOhungarumlaut: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AmacronOmacron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AmacronOslash: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AmacronOtilde: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AmacronQ: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -55,
                    -40,
                    -55
                ],
                AmacronT: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AmacronTcaron: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AmacronTcommaaccent: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AmacronU: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AmacronUacute: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AmacronUcircumflex: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AmacronUdieresis: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AmacronUgrave: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AmacronUhungarumlaut: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AmacronUmacron: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AmacronUogonek: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AmacronUring: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AmacronV: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -145,
                    -95,
                    -105,
                    -135
                ],
                AmacronW: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -130,
                    -100,
                    -95,
                    -90
                ],
                AmacronY: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AmacronYacute: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AmacronYdieresis: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                Amacronu: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Amacronuacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Amacronucircumflex: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Amacronudieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Amacronugrave: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Amacronuhungarumlaut: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Amacronumacron: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Amacronuogonek: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Amacronuring: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Amacronv: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -100,
                    -74,
                    -55,
                    -74
                ],
                Amacronw: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -90,
                    -74,
                    -55,
                    -92
                ],
                Amacrony: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Amacronyacute: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Amacronydieresis: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                AogonekC: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AogonekCacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AogonekCcaron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AogonekCcedilla: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AogonekG: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AogonekGbreve: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AogonekGcommaaccent: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AogonekO: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AogonekOacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AogonekOcircumflex: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AogonekOdieresis: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AogonekOgrave: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AogonekOhungarumlaut: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AogonekOmacron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AogonekOslash: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AogonekOtilde: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AogonekQ: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -55,
                    -40,
                    -55
                ],
                AogonekT: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AogonekTcaron: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AogonekTcommaaccent: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AogonekU: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AogonekUacute: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AogonekUcircumflex: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AogonekUdieresis: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AogonekUgrave: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AogonekUhungarumlaut: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AogonekUmacron: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AogonekUogonek: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AogonekUring: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AogonekV: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -145,
                    -95,
                    -105,
                    -135
                ],
                AogonekW: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -130,
                    -100,
                    -95,
                    -90
                ],
                AogonekY: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AogonekYacute: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AogonekYdieresis: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                Aogoneku: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aogonekuacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aogonekucircumflex: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aogonekudieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aogonekugrave: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aogonekuhungarumlaut: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aogonekumacron: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aogonekuogonek: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aogonekuring: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aogonekv: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -100,
                    -74,
                    -55,
                    -74
                ],
                Aogonekw: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -90,
                    -74,
                    -55,
                    -52
                ],
                Aogoneky: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -34,
                    -34,
                    -55,
                    -52
                ],
                Aogonekyacute: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -34,
                    -34,
                    -55,
                    -52
                ],
                Aogonekydieresis: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -34,
                    -34,
                    -55,
                    -52
                ],
                AringC: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AringCacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AringCcaron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AringCcedilla: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AringG: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AringGbreve: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AringGcommaaccent: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AringO: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AringOacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AringOcircumflex: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AringOdieresis: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AringOgrave: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AringOhungarumlaut: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AringOmacron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AringOslash: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AringOtilde: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AringQ: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -55,
                    -40,
                    -55
                ],
                AringT: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AringTcaron: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AringTcommaaccent: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AringU: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AringUacute: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AringUcircumflex: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AringUdieresis: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AringUgrave: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AringUhungarumlaut: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AringUmacron: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AringUogonek: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AringUring: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AringV: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -145,
                    -95,
                    -105,
                    -135
                ],
                AringW: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -130,
                    -100,
                    -95,
                    -90
                ],
                AringY: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AringYacute: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AringYdieresis: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                Aringu: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aringuacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aringucircumflex: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aringudieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aringugrave: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aringuhungarumlaut: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aringumacron: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aringuogonek: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aringuring: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Aringv: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -100,
                    -74,
                    -55,
                    -74
                ],
                Aringw: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -90,
                    -74,
                    -55,
                    -92
                ],
                Aringy: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Aringyacute: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Aringydieresis: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                AtildeC: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AtildeCacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AtildeCcaron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AtildeCcedilla: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -55,
                    -65,
                    -30,
                    -40
                ],
                AtildeG: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AtildeGbreve: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AtildeGcommaaccent: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -55,
                    -60,
                    -35,
                    -40
                ],
                AtildeO: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AtildeOacute: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AtildeOcircumflex: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AtildeOdieresis: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AtildeOgrave: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AtildeOhungarumlaut: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AtildeOmacron: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AtildeOslash: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AtildeOtilde: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -50,
                    -40,
                    -55
                ],
                AtildeQ: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -45,
                    -55,
                    -40,
                    -55
                ],
                AtildeT: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AtildeTcaron: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AtildeTcommaaccent: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -95,
                    -55,
                    -37,
                    -111
                ],
                AtildeU: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AtildeUacute: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AtildeUcircumflex: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AtildeUdieresis: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AtildeUgrave: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AtildeUhungarumlaut: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AtildeUmacron: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AtildeUogonek: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AtildeUring: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -55
                ],
                AtildeV: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -145,
                    -95,
                    -105,
                    -135
                ],
                AtildeW: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -130,
                    -100,
                    -95,
                    -90
                ],
                AtildeY: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AtildeYacute: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                AtildeYdieresis: [
                    -110,
                    -110,
                    -100,
                    -100,
                    -100,
                    -70,
                    -55,
                    -105
                ],
                Atildeu: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Atildeuacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Atildeucircumflex: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Atildeudieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Atildeugrave: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Atildeuhungarumlaut: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Atildeumacron: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Atildeuogonek: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Atildeuring: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -50,
                    -30,
                    -20
                ],
                Atildev: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -100,
                    -74,
                    -55,
                    -74
                ],
                Atildew: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -90,
                    -74,
                    -55,
                    -92
                ],
                Atildey: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Atildeyacute: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                Atildeydieresis: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -74,
                    -74,
                    -55,
                    -92
                ],
                BA: [
                    -30,
                    -30,
                    0,
                    0,
                    -30,
                    -25,
                    -25,
                    -35
                ],
                BAacute: [
                    -30,
                    -30,
                    0,
                    0,
                    -30,
                    -25,
                    -25,
                    -35
                ],
                BAbreve: [
                    -30,
                    -30,
                    0,
                    0,
                    -30,
                    -25,
                    -25,
                    -35
                ],
                BAcircumflex: [
                    -30,
                    -30,
                    0,
                    0,
                    -30,
                    -25,
                    -25,
                    -35
                ],
                BAdieresis: [
                    -30,
                    -30,
                    0,
                    0,
                    -30,
                    -25,
                    -25,
                    -35
                ],
                BAgrave: [
                    -30,
                    -30,
                    0,
                    0,
                    -30,
                    -25,
                    -25,
                    -35
                ],
                BAmacron: [
                    -30,
                    -30,
                    0,
                    0,
                    -30,
                    -25,
                    -25,
                    -35
                ],
                BAogonek: [
                    -30,
                    -30,
                    0,
                    0,
                    -30,
                    -25,
                    -25,
                    -35
                ],
                BAring: [
                    -30,
                    -30,
                    0,
                    0,
                    -30,
                    -25,
                    -25,
                    -35
                ],
                BAtilde: [
                    -30,
                    -30,
                    0,
                    0,
                    -30,
                    -25,
                    -25,
                    -35
                ],
                BU: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                BUacute: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                BUcircumflex: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                BUdieresis: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                BUgrave: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                BUhungarumlaut: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                BUmacron: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                BUogonek: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                BUring: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                DA: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DAacute: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DAbreve: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DAcircumflex: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DAdieresis: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DAgrave: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DAmacron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DAogonek: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DAring: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DAtilde: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DV: [
                    -40,
                    -40,
                    -70,
                    -70,
                    -40,
                    -50,
                    -40,
                    -40
                ],
                DW: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -30
                ],
                DY: [
                    -70,
                    -70,
                    -90,
                    -90,
                    -40,
                    -50,
                    -40,
                    -55
                ],
                DYacute: [
                    -70,
                    -70,
                    -90,
                    -90,
                    -40,
                    -50,
                    -40,
                    -55
                ],
                DYdieresis: [
                    -70,
                    -70,
                    -90,
                    -90,
                    -40,
                    -50,
                    -40,
                    -55
                ],
                Dcomma: [
                    -30,
                    -30,
                    -70,
                    -70
                ],
                Dperiod: [
                    -30,
                    -30,
                    -70,
                    -70,
                    -20
                ],
                DcaronA: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcaronAacute: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcaronAbreve: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcaronAcircumflex: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcaronAdieresis: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcaronAgrave: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcaronAmacron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcaronAogonek: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcaronAring: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcaronAtilde: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcaronV: [
                    -40,
                    -40,
                    -70,
                    -70,
                    -40,
                    -50,
                    -40,
                    -40
                ],
                DcaronW: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -30
                ],
                DcaronY: [
                    -70,
                    -70,
                    -90,
                    -90,
                    -40,
                    -50,
                    -40,
                    -55
                ],
                DcaronYacute: [
                    -70,
                    -70,
                    -90,
                    -90,
                    -40,
                    -50,
                    -40,
                    -55
                ],
                DcaronYdieresis: [
                    -70,
                    -70,
                    -90,
                    -90,
                    -40,
                    -50,
                    -40,
                    -55
                ],
                Dcaroncomma: [
                    -30,
                    -30,
                    -70,
                    -70
                ],
                Dcaronperiod: [
                    -30,
                    -30,
                    -70,
                    -70,
                    -20
                ],
                DcroatA: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcroatAacute: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcroatAbreve: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcroatAcircumflex: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcroatAdieresis: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcroatAgrave: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcroatAmacron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcroatAogonek: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcroatAring: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcroatAtilde: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -35,
                    -25,
                    -35,
                    -40
                ],
                DcroatV: [
                    -40,
                    -40,
                    -70,
                    -70,
                    -40,
                    -50,
                    -40,
                    -40
                ],
                DcroatW: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -30
                ],
                DcroatY: [
                    -70,
                    -70,
                    -90,
                    -90,
                    -40,
                    -50,
                    -40,
                    -55
                ],
                DcroatYacute: [
                    -70,
                    -70,
                    -90,
                    -90,
                    -40,
                    -50,
                    -40,
                    -55
                ],
                DcroatYdieresis: [
                    -70,
                    -70,
                    -90,
                    -90,
                    -40,
                    -50,
                    -40,
                    -55
                ],
                Dcroatcomma: [
                    -30,
                    -30,
                    -70,
                    -70
                ],
                Dcroatperiod: [
                    -30,
                    -30,
                    -70,
                    -70,
                    -20
                ],
                FA: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -90,
                    -100,
                    -115,
                    -74
                ],
                FAacute: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -90,
                    -100,
                    -115,
                    -74
                ],
                FAbreve: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -90,
                    -100,
                    -115,
                    -74
                ],
                FAcircumflex: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -90,
                    -100,
                    -115,
                    -74
                ],
                FAdieresis: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -90,
                    -100,
                    -115,
                    -74
                ],
                FAgrave: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -90,
                    -100,
                    -115,
                    -74
                ],
                FAmacron: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -90,
                    -100,
                    -115,
                    -74
                ],
                FAogonek: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -90,
                    -100,
                    -115,
                    -74
                ],
                FAring: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -90,
                    -100,
                    -115,
                    -74
                ],
                FAtilde: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -90,
                    -100,
                    -115,
                    -74
                ],
                Fa: [
                    -20,
                    -20,
                    -50,
                    -50,
                    -25,
                    -95,
                    -75,
                    -15
                ],
                Faacute: [
                    -20,
                    -20,
                    -50,
                    -50,
                    -25,
                    -95,
                    -75,
                    -15
                ],
                Fabreve: [
                    -20,
                    -20,
                    -50,
                    -50,
                    -25,
                    -95,
                    -75,
                    -15
                ],
                Facircumflex: [
                    -20,
                    -20,
                    -50,
                    -50,
                    -25,
                    -95,
                    -75,
                    -15
                ],
                Fadieresis: [
                    -20,
                    -20,
                    -50,
                    -50,
                    -25,
                    -95,
                    -75,
                    -15
                ],
                Fagrave: [
                    -20,
                    -20,
                    -50,
                    -50,
                    -25,
                    -95,
                    -75,
                    -15
                ],
                Famacron: [
                    -20,
                    -20,
                    -50,
                    -50,
                    -25,
                    -95,
                    -75,
                    -15
                ],
                Faogonek: [
                    -20,
                    -20,
                    -50,
                    -50,
                    -25,
                    -95,
                    -75,
                    -15
                ],
                Faring: [
                    -20,
                    -20,
                    -50,
                    -50,
                    -25,
                    -95,
                    -75,
                    -15
                ],
                Fatilde: [
                    -20,
                    -20,
                    -50,
                    -50,
                    -25,
                    -95,
                    -75,
                    -15
                ],
                Fcomma: [
                    -100,
                    -100,
                    -150,
                    -150,
                    -92,
                    -129,
                    -135,
                    -80
                ],
                Fperiod: [
                    -100,
                    -100,
                    -150,
                    -150,
                    -110,
                    -129,
                    -135,
                    -80
                ],
                JA: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -25,
                    -40,
                    -60
                ],
                JAacute: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -25,
                    -40,
                    -60
                ],
                JAbreve: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -25,
                    -40,
                    -60
                ],
                JAcircumflex: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -25,
                    -40,
                    -60
                ],
                JAdieresis: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -25,
                    -40,
                    -60
                ],
                JAgrave: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -25,
                    -40,
                    -60
                ],
                JAmacron: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -25,
                    -40,
                    -60
                ],
                JAogonek: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -25,
                    -40,
                    -60
                ],
                JAring: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -25,
                    -40,
                    -60
                ],
                JAtilde: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -25,
                    -40,
                    -60
                ],
                Jcomma: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    -25
                ],
                Jperiod: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -20,
                    -10,
                    -25
                ],
                Ju: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Juacute: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Jucircumflex: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Judieresis: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Jugrave: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Juhungarumlaut: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Jumacron: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Juogonek: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Juring: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                KO: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KOacute: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KOcircumflex: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KOdieresis: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KOgrave: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KOhungarumlaut: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KOmacron: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KOslash: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KOtilde: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                Ke: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Keacute: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Kecaron: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Kecircumflex: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Kedieresis: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Kedotaccent: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Kegrave: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Kemacron: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Keogonek: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Ko: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Koacute: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Kocircumflex: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Kodieresis: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Kograve: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Kohungarumlaut: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Komacron: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Koslash: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Kotilde: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Ku: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kuacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kucircumflex: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kudieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kugrave: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kuhungarumlaut: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kumacron: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kuogonek: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kuring: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Ky: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -45,
                    -20,
                    -40,
                    -25
                ],
                Kyacute: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -45,
                    -20,
                    -40,
                    -25
                ],
                Kydieresis: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -45,
                    -20,
                    -40,
                    -25
                ],
                KcommaaccentO: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KcommaaccentOacute: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KcommaaccentOcircumflex: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KcommaaccentOdieresis: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KcommaaccentOgrave: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KcommaaccentOhungarumlaut: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KcommaaccentOmacron: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KcommaaccentOslash: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                KcommaaccentOtilde: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -30
                ],
                Kcommaaccente: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Kcommaaccenteacute: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Kcommaaccentecaron: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Kcommaaccentecircumflex: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Kcommaaccentedieresis: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Kcommaaccentedotaccent: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Kcommaaccentegrave: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Kcommaaccentemacron: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Kcommaaccenteogonek: [
                    -15,
                    -15,
                    -40,
                    -40,
                    -25,
                    -25,
                    -35,
                    -25
                ],
                Kcommaaccento: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Kcommaaccentoacute: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Kcommaaccentocircumflex: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Kcommaaccentodieresis: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Kcommaaccentograve: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Kcommaaccentohungarumlaut: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Kcommaaccentomacron: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Kcommaaccentoslash: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Kcommaaccentotilde: [
                    -35,
                    -35,
                    -40,
                    -40,
                    -25,
                    -25,
                    -40,
                    -35
                ],
                Kcommaaccentu: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kcommaaccentuacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kcommaaccentucircumflex: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kcommaaccentudieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kcommaaccentugrave: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kcommaaccentuhungarumlaut: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kcommaaccentumacron: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kcommaaccentuogonek: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kcommaaccenturing: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -15,
                    -20,
                    -40,
                    -15
                ],
                Kcommaaccenty: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -45,
                    -20,
                    -40,
                    -25
                ],
                Kcommaaccentyacute: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -45,
                    -20,
                    -40,
                    -25
                ],
                Kcommaaccentydieresis: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -45,
                    -20,
                    -40,
                    -25
                ],
                LT: [
                    -90,
                    -90,
                    -110,
                    -110,
                    -92,
                    -18,
                    -20,
                    -92
                ],
                LTcaron: [
                    -90,
                    -90,
                    -110,
                    -110,
                    -92,
                    -18,
                    -20,
                    -92
                ],
                LTcommaaccent: [
                    -90,
                    -90,
                    -110,
                    -110,
                    -92,
                    -18,
                    -20,
                    -92
                ],
                LV: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -92,
                    -37,
                    -55,
                    -100
                ],
                LW: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -92,
                    -37,
                    -55,
                    -74
                ],
                LY: [
                    -120,
                    -120,
                    -140,
                    -140,
                    -92,
                    -37,
                    -20,
                    -100
                ],
                LYacute: [
                    -120,
                    -120,
                    -140,
                    -140,
                    -92,
                    -37,
                    -20,
                    -100
                ],
                LYdieresis: [
                    -120,
                    -120,
                    -140,
                    -140,
                    -92,
                    -37,
                    -20,
                    -100
                ],
                Lquotedblright: [
                    -140,
                    -140,
                    -140,
                    -140,
                    -20
                ],
                Lquoteright: [
                    -140,
                    -140,
                    -160,
                    -160,
                    -110,
                    -55,
                    -37,
                    -92
                ],
                Ly: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -55,
                    -37,
                    -30,
                    -55
                ],
                Lyacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -55,
                    -37,
                    -30,
                    -55
                ],
                Lydieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -55,
                    -37,
                    -30,
                    -55
                ],
                LacuteT: [
                    -90,
                    -90,
                    -110,
                    -110,
                    -92,
                    -18,
                    -20,
                    -92
                ],
                LacuteTcaron: [
                    -90,
                    -90,
                    -110,
                    -110,
                    -92,
                    -18,
                    -20,
                    -92
                ],
                LacuteTcommaaccent: [
                    -90,
                    -90,
                    -110,
                    -110,
                    -92,
                    -18,
                    -20,
                    -92
                ],
                LacuteV: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -92,
                    -37,
                    -55,
                    -100
                ],
                LacuteW: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -92,
                    -37,
                    -55,
                    -74
                ],
                LacuteY: [
                    -120,
                    -120,
                    -140,
                    -140,
                    -92,
                    -37,
                    -20,
                    -100
                ],
                LacuteYacute: [
                    -120,
                    -120,
                    -140,
                    -140,
                    -92,
                    -37,
                    -20,
                    -100
                ],
                LacuteYdieresis: [
                    -120,
                    -120,
                    -140,
                    -140,
                    -92,
                    -37,
                    -20,
                    -100
                ],
                Lacutequotedblright: [
                    -140,
                    -140,
                    -140,
                    -140,
                    -20
                ],
                Lacutequoteright: [
                    -140,
                    -140,
                    -160,
                    -160,
                    -110,
                    -55,
                    -37,
                    -92
                ],
                Lacutey: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -55,
                    -37,
                    -30,
                    -55
                ],
                Lacuteyacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -55,
                    -37,
                    -30,
                    -55
                ],
                Lacuteydieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -55,
                    -37,
                    -30,
                    -55
                ],
                LcommaaccentT: [
                    -90,
                    -90,
                    -110,
                    -110,
                    -92,
                    -18,
                    -20,
                    -92
                ],
                LcommaaccentTcaron: [
                    -90,
                    -90,
                    -110,
                    -110,
                    -92,
                    -18,
                    -20,
                    -92
                ],
                LcommaaccentTcommaaccent: [
                    -90,
                    -90,
                    -110,
                    -110,
                    -92,
                    -18,
                    -20,
                    -92
                ],
                LcommaaccentV: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -92,
                    -37,
                    -55,
                    -100
                ],
                LcommaaccentW: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -92,
                    -37,
                    -55,
                    -74
                ],
                LcommaaccentY: [
                    -120,
                    -120,
                    -140,
                    -140,
                    -92,
                    -37,
                    -20,
                    -100
                ],
                LcommaaccentYacute: [
                    -120,
                    -120,
                    -140,
                    -140,
                    -92,
                    -37,
                    -20,
                    -100
                ],
                LcommaaccentYdieresis: [
                    -120,
                    -120,
                    -140,
                    -140,
                    -92,
                    -37,
                    -20,
                    -100
                ],
                Lcommaaccentquotedblright: [
                    -140,
                    -140,
                    -140,
                    -140,
                    -20
                ],
                Lcommaaccentquoteright: [
                    -140,
                    -140,
                    -160,
                    -160,
                    -110,
                    -55,
                    -37,
                    -92
                ],
                Lcommaaccenty: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -55,
                    -37,
                    -30,
                    -55
                ],
                Lcommaaccentyacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -55,
                    -37,
                    -30,
                    -55
                ],
                Lcommaaccentydieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -55,
                    -37,
                    -30,
                    -55
                ],
                LslashT: [
                    -90,
                    -90,
                    -110,
                    -110,
                    -92,
                    -18,
                    -20,
                    -92
                ],
                LslashTcaron: [
                    -90,
                    -90,
                    -110,
                    -110,
                    -92,
                    -18,
                    -20,
                    -92
                ],
                LslashTcommaaccent: [
                    -90,
                    -90,
                    -110,
                    -110,
                    -92,
                    -18,
                    -20,
                    -92
                ],
                LslashV: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -92,
                    -37,
                    -55,
                    -100
                ],
                LslashW: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -92,
                    -37,
                    -55,
                    -74
                ],
                LslashY: [
                    -120,
                    -120,
                    -140,
                    -140,
                    -92,
                    -37,
                    -20,
                    -100
                ],
                LslashYacute: [
                    -120,
                    -120,
                    -140,
                    -140,
                    -92,
                    -37,
                    -20,
                    -100
                ],
                LslashYdieresis: [
                    -120,
                    -120,
                    -140,
                    -140,
                    -92,
                    -37,
                    -20,
                    -100
                ],
                Lslashquotedblright: [
                    -140,
                    -140,
                    -140,
                    -140,
                    -20
                ],
                Lslashquoteright: [
                    -140,
                    -140,
                    -160,
                    -160,
                    -110,
                    -55,
                    -37,
                    -92
                ],
                Lslashy: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -55,
                    -37,
                    -30,
                    -55
                ],
                Lslashyacute: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -55,
                    -37,
                    -30,
                    -55
                ],
                Lslashydieresis: [
                    -30,
                    -30,
                    -30,
                    -30,
                    -55,
                    -37,
                    -30,
                    -55
                ],
                OA: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OAacute: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OAbreve: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OAcircumflex: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OAdieresis: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OAgrave: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OAmacron: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OAogonek: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OAring: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OAtilde: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OT: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OTcaron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OTcommaaccent: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OV: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OW: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -50,
                    -50,
                    -35
                ],
                OX: [
                    -50,
                    -50,
                    -60,
                    -60,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OY: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OYacute: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OYdieresis: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                Ocomma: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                Operiod: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OacuteA: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OacuteAacute: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OacuteAbreve: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OacuteAcircumflex: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OacuteAdieresis: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OacuteAgrave: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OacuteAmacron: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OacuteAogonek: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OacuteAring: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OacuteAtilde: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OacuteT: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OacuteTcaron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OacuteTcommaaccent: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OacuteV: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OacuteW: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -50,
                    -50,
                    -35
                ],
                OacuteX: [
                    -50,
                    -50,
                    -60,
                    -60,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OacuteY: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OacuteYacute: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OacuteYdieresis: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                Oacutecomma: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                Oacuteperiod: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OcircumflexA: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OcircumflexAacute: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OcircumflexAbreve: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OcircumflexAcircumflex: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OcircumflexAdieresis: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OcircumflexAgrave: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OcircumflexAmacron: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OcircumflexAogonek: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OcircumflexAring: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OcircumflexAtilde: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OcircumflexT: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OcircumflexTcaron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OcircumflexTcommaaccent: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OcircumflexV: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OcircumflexW: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -50,
                    -50,
                    -35
                ],
                OcircumflexX: [
                    -50,
                    -50,
                    -60,
                    -60,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OcircumflexY: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OcircumflexYacute: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OcircumflexYdieresis: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                Ocircumflexcomma: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                Ocircumflexperiod: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OdieresisA: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OdieresisAacute: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OdieresisAbreve: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OdieresisAcircumflex: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OdieresisAdieresis: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OdieresisAgrave: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OdieresisAmacron: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OdieresisAogonek: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OdieresisAring: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OdieresisAtilde: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OdieresisT: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OdieresisTcaron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OdieresisTcommaaccent: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OdieresisV: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OdieresisW: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -50,
                    -50,
                    -35
                ],
                OdieresisX: [
                    -50,
                    -50,
                    -60,
                    -60,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OdieresisY: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OdieresisYacute: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OdieresisYdieresis: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                Odieresiscomma: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                Odieresisperiod: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OgraveA: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OgraveAacute: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OgraveAbreve: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OgraveAcircumflex: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OgraveAdieresis: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OgraveAgrave: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OgraveAmacron: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OgraveAogonek: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OgraveAring: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OgraveAtilde: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OgraveT: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OgraveTcaron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OgraveTcommaaccent: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OgraveV: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OgraveW: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -50,
                    -50,
                    -35
                ],
                OgraveX: [
                    -50,
                    -50,
                    -60,
                    -60,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OgraveY: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OgraveYacute: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OgraveYdieresis: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                Ogravecomma: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                Ograveperiod: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OhungarumlautA: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OhungarumlautAacute: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OhungarumlautAbreve: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OhungarumlautAcircumflex: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OhungarumlautAdieresis: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OhungarumlautAgrave: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OhungarumlautAmacron: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OhungarumlautAogonek: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OhungarumlautAring: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OhungarumlautAtilde: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OhungarumlautT: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OhungarumlautTcaron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OhungarumlautTcommaaccent: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OhungarumlautV: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OhungarumlautW: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -50,
                    -50,
                    -35
                ],
                OhungarumlautX: [
                    -50,
                    -50,
                    -60,
                    -60,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OhungarumlautY: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OhungarumlautYacute: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OhungarumlautYdieresis: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                Ohungarumlautcomma: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                Ohungarumlautperiod: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OmacronA: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OmacronAacute: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OmacronAbreve: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OmacronAcircumflex: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OmacronAdieresis: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OmacronAgrave: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OmacronAmacron: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OmacronAogonek: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OmacronAring: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OmacronAtilde: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OmacronT: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OmacronTcaron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OmacronTcommaaccent: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OmacronV: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OmacronW: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -50,
                    -50,
                    -35
                ],
                OmacronX: [
                    -50,
                    -50,
                    -60,
                    -60,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OmacronY: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OmacronYacute: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OmacronYdieresis: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                Omacroncomma: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                Omacronperiod: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OslashA: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OslashAacute: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OslashAbreve: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OslashAcircumflex: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OslashAdieresis: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OslashAgrave: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OslashAmacron: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OslashAogonek: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OslashAring: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OslashAtilde: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OslashT: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OslashTcaron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OslashTcommaaccent: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OslashV: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OslashW: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -50,
                    -50,
                    -35
                ],
                OslashX: [
                    -50,
                    -50,
                    -60,
                    -60,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OslashY: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OslashYacute: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OslashYdieresis: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                Oslashcomma: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                Oslashperiod: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OtildeA: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OtildeAacute: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OtildeAbreve: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OtildeAcircumflex: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OtildeAdieresis: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OtildeAgrave: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OtildeAmacron: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OtildeAogonek: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OtildeAring: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OtildeAtilde: [
                    -50,
                    -50,
                    -20,
                    -20,
                    -40,
                    -40,
                    -55,
                    -35
                ],
                OtildeT: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OtildeTcaron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OtildeTcommaaccent: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OtildeV: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OtildeW: [
                    -50,
                    -50,
                    -30,
                    -30,
                    -50,
                    -50,
                    -50,
                    -35
                ],
                OtildeX: [
                    -50,
                    -50,
                    -60,
                    -60,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                OtildeY: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OtildeYacute: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                OtildeYdieresis: [
                    -70,
                    -70,
                    -70,
                    -70,
                    -50,
                    -50,
                    -50,
                    -50
                ],
                Otildecomma: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                Otildeperiod: [
                    -40,
                    -40,
                    -40,
                    -40
                ],
                PA: [
                    -100,
                    -100,
                    -120,
                    -120,
                    -74,
                    -85,
                    -90,
                    -92
                ],
                PAacute: [
                    -100,
                    -100,
                    -120,
                    -120,
                    -74,
                    -85,
                    -90,
                    -92
                ],
                PAbreve: [
                    -100,
                    -100,
                    -120,
                    -120,
                    -74,
                    -85,
                    -90,
                    -92
                ],
                PAcircumflex: [
                    -100,
                    -100,
                    -120,
                    -120,
                    -74,
                    -85,
                    -90,
                    -92
                ],
                PAdieresis: [
                    -100,
                    -100,
                    -120,
                    -120,
                    -74,
                    -85,
                    -90,
                    -92
                ],
                PAgrave: [
                    -100,
                    -100,
                    -120,
                    -120,
                    -74,
                    -85,
                    -90,
                    -92
                ],
                PAmacron: [
                    -100,
                    -100,
                    -120,
                    -120,
                    -74,
                    -85,
                    -90,
                    -92
                ],
                PAogonek: [
                    -100,
                    -100,
                    -120,
                    -120,
                    -74,
                    -85,
                    -90,
                    -92
                ],
                PAring: [
                    -100,
                    -100,
                    -120,
                    -120,
                    -74,
                    -85,
                    -90,
                    -92
                ],
                PAtilde: [
                    -100,
                    -100,
                    -120,
                    -120,
                    -74,
                    -85,
                    -90,
                    -92
                ],
                Pa: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -10,
                    -40,
                    -80,
                    -15
                ],
                Paacute: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -10,
                    -40,
                    -80,
                    -15
                ],
                Pabreve: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -10,
                    -40,
                    -80,
                    -15
                ],
                Pacircumflex: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -10,
                    -40,
                    -80,
                    -15
                ],
                Padieresis: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -10,
                    -40,
                    -80,
                    -15
                ],
                Pagrave: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -10,
                    -40,
                    -80,
                    -15
                ],
                Pamacron: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -10,
                    -40,
                    -80,
                    -15
                ],
                Paogonek: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -10,
                    -40,
                    -80,
                    -15
                ],
                Paring: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -10,
                    -40,
                    -80,
                    -15
                ],
                Patilde: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -10,
                    -40,
                    -80,
                    -15
                ],
                Pcomma: [
                    -120,
                    -120,
                    -180,
                    -180,
                    -92,
                    -129,
                    -135,
                    -111
                ],
                Pe: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -20,
                    -50,
                    -80
                ],
                Peacute: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -20,
                    -50,
                    -80
                ],
                Pecaron: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -20,
                    -50,
                    -80
                ],
                Pecircumflex: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -20,
                    -50,
                    -80
                ],
                Pedieresis: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -20,
                    -50,
                    -80
                ],
                Pedotaccent: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -20,
                    -50,
                    -80
                ],
                Pegrave: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -20,
                    -50,
                    -80
                ],
                Pemacron: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -20,
                    -50,
                    -80
                ],
                Peogonek: [
                    -30,
                    -30,
                    -50,
                    -50,
                    -20,
                    -50,
                    -80
                ],
                Po: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -20,
                    -55,
                    -80
                ],
                Poacute: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -20,
                    -55,
                    -80
                ],
                Pocircumflex: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -20,
                    -55,
                    -80
                ],
                Podieresis: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -20,
                    -55,
                    -80
                ],
                Pograve: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -20,
                    -55,
                    -80
                ],
                Pohungarumlaut: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -20,
                    -55,
                    -80
                ],
                Pomacron: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -20,
                    -55,
                    -80
                ],
                Poslash: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -20,
                    -55,
                    -80
                ],
                Potilde: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -20,
                    -55,
                    -80
                ],
                Pperiod: [
                    -120,
                    -120,
                    -180,
                    -180,
                    -110,
                    -129,
                    -135,
                    -111
                ],
                QU: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                QUacute: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                QUcircumflex: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                QUdieresis: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                QUgrave: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                QUhungarumlaut: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                QUmacron: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                QUogonek: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                QUring: [
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                Qcomma: [
                    20,
                    20
                ],
                Qperiod: [
                    20,
                    20,
                    0,
                    0,
                    -20
                ],
                RO: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                ROacute: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                ROcircumflex: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                ROdieresis: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                ROgrave: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                ROhungarumlaut: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                ROmacron: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                ROslash: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                ROtilde: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RT: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -40,
                    -30,
                    0,
                    -60
                ],
                RTcaron: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -40,
                    -30,
                    0,
                    -60
                ],
                RTcommaaccent: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -40,
                    -30,
                    0,
                    -60
                ],
                RU: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RUacute: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RUcircumflex: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RUdieresis: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RUgrave: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RUhungarumlaut: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RUmacron: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RUogonek: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RUring: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RV: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -55,
                    -18,
                    -18,
                    -80
                ],
                RW: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -35,
                    -18,
                    -18,
                    -55
                ],
                RY: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -35,
                    -18,
                    -18,
                    -65
                ],
                RYacute: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -35,
                    -18,
                    -18,
                    -65
                ],
                RYdieresis: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -35,
                    -18,
                    -18,
                    -65
                ],
                RacuteO: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteOacute: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteOcircumflex: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteOdieresis: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteOgrave: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteOhungarumlaut: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteOmacron: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteOslash: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteOtilde: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteT: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -40,
                    -30,
                    0,
                    -60
                ],
                RacuteTcaron: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -40,
                    -30,
                    0,
                    -60
                ],
                RacuteTcommaaccent: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -40,
                    -30,
                    0,
                    -60
                ],
                RacuteU: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteUacute: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteUcircumflex: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteUdieresis: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteUgrave: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteUhungarumlaut: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteUmacron: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteUogonek: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteUring: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RacuteV: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -55,
                    -18,
                    -18,
                    -80
                ],
                RacuteW: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -35,
                    -18,
                    -18,
                    -55
                ],
                RacuteY: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -35,
                    -18,
                    -18,
                    -65
                ],
                RacuteYacute: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -35,
                    -18,
                    -18,
                    -65
                ],
                RacuteYdieresis: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -35,
                    -18,
                    -18,
                    -65
                ],
                RcaronO: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronOacute: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronOcircumflex: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronOdieresis: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronOgrave: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronOhungarumlaut: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronOmacron: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronOslash: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronOtilde: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronT: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -40,
                    -30,
                    0,
                    -60
                ],
                RcaronTcaron: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -40,
                    -30,
                    0,
                    -60
                ],
                RcaronTcommaaccent: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -40,
                    -30,
                    0,
                    -60
                ],
                RcaronU: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronUacute: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronUcircumflex: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronUdieresis: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronUgrave: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronUhungarumlaut: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronUmacron: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronUogonek: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronUring: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcaronV: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -55,
                    -18,
                    -18,
                    -80
                ],
                RcaronW: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -35,
                    -18,
                    -18,
                    -55
                ],
                RcaronY: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -35,
                    -18,
                    -18,
                    -65
                ],
                RcaronYacute: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -35,
                    -18,
                    -18,
                    -65
                ],
                RcaronYdieresis: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -35,
                    -18,
                    -18,
                    -65
                ],
                RcommaaccentO: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentOacute: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentOcircumflex: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentOdieresis: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentOgrave: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentOhungarumlaut: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentOmacron: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentOslash: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentOtilde: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentT: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -40,
                    -30,
                    0,
                    -60
                ],
                RcommaaccentTcaron: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -40,
                    -30,
                    0,
                    -60
                ],
                RcommaaccentTcommaaccent: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -40,
                    -30,
                    0,
                    -60
                ],
                RcommaaccentU: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentUacute: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentUcircumflex: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentUdieresis: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentUgrave: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentUhungarumlaut: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentUmacron: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentUogonek: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentUring: [
                    -20,
                    -20,
                    -40,
                    -40,
                    -30,
                    -40,
                    -40,
                    -40
                ],
                RcommaaccentV: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -55,
                    -18,
                    -18,
                    -80
                ],
                RcommaaccentW: [
                    -40,
                    -40,
                    -30,
                    -30,
                    -35,
                    -18,
                    -18,
                    -55
                ],
                RcommaaccentY: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -35,
                    -18,
                    -18,
                    -65
                ],
                RcommaaccentYacute: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -35,
                    -18,
                    -18,
                    -65
                ],
                RcommaaccentYdieresis: [
                    -50,
                    -50,
                    -50,
                    -50,
                    -35,
                    -18,
                    -18,
                    -65
                ],
                TA: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TAacute: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TAbreve: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TAcircumflex: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TAdieresis: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TAgrave: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TAmacron: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TAogonek: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TAring: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TAtilde: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TO: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TOacute: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TOcircumflex: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TOdieresis: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TOgrave: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TOhungarumlaut: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TOmacron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TOslash: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TOtilde: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                Ta: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -80
                ],
                Taacute: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -80
                ],
                Tabreve: [
                    -80,
                    -80,
                    -60,
                    -60,
                    -52,
                    -92,
                    -92,
                    -80
                ],
                Tacircumflex: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -52,
                    -92,
                    -92,
                    -80
                ],
                Tadieresis: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -52,
                    -92,
                    -92,
                    -40
                ],
                Tagrave: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -52,
                    -92,
                    -92,
                    -40
                ],
                Tamacron: [
                    -80,
                    -80,
                    -60,
                    -60,
                    -52,
                    -92,
                    -92,
                    -40
                ],
                Taogonek: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -80
                ],
                Taring: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -80
                ],
                Tatilde: [
                    -80,
                    -80,
                    -60,
                    -60,
                    -52,
                    -92,
                    -92,
                    -40
                ],
                Tcolon: [
                    -40,
                    -40,
                    -20,
                    -20,
                    -74,
                    -74,
                    -55,
                    -50
                ],
                Tcomma: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -74,
                    -92,
                    -74,
                    -74
                ],
                Te: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -70
                ],
                Teacute: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -70
                ],
                Tecaron: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -70
                ],
                Tecircumflex: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -52,
                    -70
                ],
                Tedieresis: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -52,
                    -52,
                    -52,
                    -30
                ],
                Tedotaccent: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -70
                ],
                Tegrave: [
                    -60,
                    -60,
                    -60,
                    -60,
                    -52,
                    -52,
                    -52,
                    -70
                ],
                Temacron: [
                    -60,
                    -60,
                    -60,
                    -60,
                    -52,
                    -52,
                    -52,
                    -30
                ],
                Teogonek: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -70
                ],
                Thyphen: [
                    -120,
                    -120,
                    -140,
                    -140,
                    -92,
                    -92,
                    -74,
                    -92
                ],
                To: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Toacute: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tocircumflex: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Todieresis: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tograve: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tohungarumlaut: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tomacron: [
                    -80,
                    -80,
                    -60,
                    -60,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Toslash: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Totilde: [
                    -80,
                    -80,
                    -60,
                    -60,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tperiod: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -90,
                    -92,
                    -74,
                    -74
                ],
                Tr: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -74,
                    -37,
                    -55,
                    -35
                ],
                Tracute: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -74,
                    -37,
                    -55,
                    -35
                ],
                Trcommaaccent: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -74,
                    -37,
                    -55,
                    -35
                ],
                Tsemicolon: [
                    -40,
                    -40,
                    -20,
                    -20,
                    -74,
                    -74,
                    -65,
                    -55
                ],
                Tu: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tuacute: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tucircumflex: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tudieresis: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tugrave: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tuhungarumlaut: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tumacron: [
                    -90,
                    -90,
                    -60,
                    -60,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tuogonek: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Turing: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tw: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -74,
                    -37,
                    -74,
                    -80
                ],
                Ty: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -34,
                    -37,
                    -74,
                    -80
                ],
                Tyacute: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -34,
                    -37,
                    -74,
                    -80
                ],
                Tydieresis: [
                    -60,
                    -60,
                    -60,
                    -60,
                    -34,
                    -37,
                    -34,
                    -80
                ],
                TcaronA: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcaronAacute: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcaronAbreve: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcaronAcircumflex: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcaronAdieresis: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcaronAgrave: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcaronAmacron: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcaronAogonek: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcaronAring: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcaronAtilde: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcaronO: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcaronOacute: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcaronOcircumflex: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcaronOdieresis: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcaronOgrave: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcaronOhungarumlaut: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcaronOmacron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcaronOslash: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcaronOtilde: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                Tcarona: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -80
                ],
                Tcaronaacute: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -80
                ],
                Tcaronabreve: [
                    -80,
                    -80,
                    -60,
                    -60,
                    -52,
                    -92,
                    -92,
                    -80
                ],
                Tcaronacircumflex: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -52,
                    -92,
                    -92,
                    -80
                ],
                Tcaronadieresis: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -52,
                    -92,
                    -92,
                    -40
                ],
                Tcaronagrave: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -52,
                    -92,
                    -92,
                    -40
                ],
                Tcaronamacron: [
                    -80,
                    -80,
                    -60,
                    -60,
                    -52,
                    -92,
                    -92,
                    -40
                ],
                Tcaronaogonek: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -80
                ],
                Tcaronaring: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -80
                ],
                Tcaronatilde: [
                    -80,
                    -80,
                    -60,
                    -60,
                    -52,
                    -92,
                    -92,
                    -40
                ],
                Tcaroncolon: [
                    -40,
                    -40,
                    -20,
                    -20,
                    -74,
                    -74,
                    -55,
                    -50
                ],
                Tcaroncomma: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -74,
                    -92,
                    -74,
                    -74
                ],
                Tcarone: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -70
                ],
                Tcaroneacute: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -70
                ],
                Tcaronecaron: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -70
                ],
                Tcaronecircumflex: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -52,
                    -30
                ],
                Tcaronedieresis: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -52,
                    -52,
                    -52,
                    -30
                ],
                Tcaronedotaccent: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -70
                ],
                Tcaronegrave: [
                    -60,
                    -60,
                    -60,
                    -60,
                    -52,
                    -52,
                    -52,
                    -70
                ],
                Tcaronemacron: [
                    -60,
                    -60,
                    -60,
                    -60,
                    -52,
                    -52,
                    -52,
                    -30
                ],
                Tcaroneogonek: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -70
                ],
                Tcaronhyphen: [
                    -120,
                    -120,
                    -140,
                    -140,
                    -92,
                    -92,
                    -74,
                    -92
                ],
                Tcarono: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcaronoacute: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcaronocircumflex: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcaronodieresis: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcaronograve: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcaronohungarumlaut: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcaronomacron: [
                    -80,
                    -80,
                    -60,
                    -60,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcaronoslash: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcaronotilde: [
                    -80,
                    -80,
                    -60,
                    -60,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcaronperiod: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -90,
                    -92,
                    -74,
                    -74
                ],
                Tcaronr: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -74,
                    -37,
                    -55,
                    -35
                ],
                Tcaronracute: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -74,
                    -37,
                    -55,
                    -35
                ],
                Tcaronrcommaaccent: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -74,
                    -37,
                    -55,
                    -35
                ],
                Tcaronsemicolon: [
                    -40,
                    -40,
                    -20,
                    -20,
                    -74,
                    -74,
                    -65,
                    -55
                ],
                Tcaronu: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcaronuacute: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcaronucircumflex: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcaronudieresis: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcaronugrave: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcaronuhungarumlaut: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcaronumacron: [
                    -90,
                    -90,
                    -60,
                    -60,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcaronuogonek: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcaronuring: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcaronw: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -74,
                    -37,
                    -74,
                    -80
                ],
                Tcarony: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -34,
                    -37,
                    -74,
                    -80
                ],
                Tcaronyacute: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -34,
                    -37,
                    -74,
                    -80
                ],
                Tcaronydieresis: [
                    -60,
                    -60,
                    -60,
                    -60,
                    -34,
                    -37,
                    -34,
                    -80
                ],
                TcommaaccentA: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcommaaccentAacute: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcommaaccentAbreve: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcommaaccentAcircumflex: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcommaaccentAdieresis: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcommaaccentAgrave: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcommaaccentAmacron: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcommaaccentAogonek: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcommaaccentAring: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcommaaccentAtilde: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -90,
                    -55,
                    -50,
                    -93
                ],
                TcommaaccentO: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcommaaccentOacute: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcommaaccentOcircumflex: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcommaaccentOdieresis: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcommaaccentOgrave: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcommaaccentOhungarumlaut: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcommaaccentOmacron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcommaaccentOslash: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                TcommaaccentOtilde: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -18,
                    -18,
                    -18,
                    -18
                ],
                Tcommaaccenta: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -80
                ],
                Tcommaaccentaacute: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -80
                ],
                Tcommaaccentabreve: [
                    -80,
                    -80,
                    -60,
                    -60,
                    -52,
                    -92,
                    -92,
                    -80
                ],
                Tcommaaccentacircumflex: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -52,
                    -92,
                    -92,
                    -80
                ],
                Tcommaaccentadieresis: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -52,
                    -92,
                    -92,
                    -40
                ],
                Tcommaaccentagrave: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -52,
                    -92,
                    -92,
                    -40
                ],
                Tcommaaccentamacron: [
                    -80,
                    -80,
                    -60,
                    -60,
                    -52,
                    -92,
                    -92,
                    -40
                ],
                Tcommaaccentaogonek: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -80
                ],
                Tcommaaccentaring: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -80
                ],
                Tcommaaccentatilde: [
                    -80,
                    -80,
                    -60,
                    -60,
                    -52,
                    -92,
                    -92,
                    -40
                ],
                Tcommaaccentcolon: [
                    -40,
                    -40,
                    -20,
                    -20,
                    -74,
                    -74,
                    -55,
                    -50
                ],
                Tcommaaccentcomma: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -74,
                    -92,
                    -74,
                    -74
                ],
                Tcommaaccente: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -70
                ],
                Tcommaaccenteacute: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -70
                ],
                Tcommaaccentecaron: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -70
                ],
                Tcommaaccentecircumflex: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -52,
                    -30
                ],
                Tcommaaccentedieresis: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -52,
                    -52,
                    -52,
                    -30
                ],
                Tcommaaccentedotaccent: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -70
                ],
                Tcommaaccentegrave: [
                    -60,
                    -60,
                    -60,
                    -60,
                    -52,
                    -52,
                    -52,
                    -30
                ],
                Tcommaaccentemacron: [
                    -60,
                    -60,
                    -60,
                    -60,
                    -52,
                    -52,
                    -52,
                    -70
                ],
                Tcommaaccenteogonek: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -92,
                    -92,
                    -92,
                    -70
                ],
                Tcommaaccenthyphen: [
                    -120,
                    -120,
                    -140,
                    -140,
                    -92,
                    -92,
                    -74,
                    -92
                ],
                Tcommaaccento: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcommaaccentoacute: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcommaaccentocircumflex: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcommaaccentodieresis: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcommaaccentograve: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcommaaccentohungarumlaut: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcommaaccentomacron: [
                    -80,
                    -80,
                    -60,
                    -60,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcommaaccentoslash: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcommaaccentotilde: [
                    -80,
                    -80,
                    -60,
                    -60,
                    -92,
                    -95,
                    -92,
                    -80
                ],
                Tcommaaccentperiod: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -90,
                    -92,
                    -74,
                    -74
                ],
                Tcommaaccentr: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -74,
                    -37,
                    -55,
                    -35
                ],
                Tcommaaccentracute: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -74,
                    -37,
                    -55,
                    -35
                ],
                Tcommaaccentrcommaaccent: [
                    -80,
                    -80,
                    -120,
                    -120,
                    -74,
                    -37,
                    -55,
                    -35
                ],
                Tcommaaccentsemicolon: [
                    -40,
                    -40,
                    -20,
                    -20,
                    -74,
                    -74,
                    -65,
                    -55
                ],
                Tcommaaccentu: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcommaaccentuacute: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcommaaccentucircumflex: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcommaaccentudieresis: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcommaaccentugrave: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcommaaccentuhungarumlaut: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcommaaccentumacron: [
                    -90,
                    -90,
                    -60,
                    -60,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcommaaccentuogonek: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcommaaccenturing: [
                    -90,
                    -90,
                    -120,
                    -120,
                    -92,
                    -37,
                    -55,
                    -45
                ],
                Tcommaaccentw: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -74,
                    -37,
                    -74,
                    -80
                ],
                Tcommaaccenty: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -34,
                    -37,
                    -74,
                    -80
                ],
                Tcommaaccentyacute: [
                    -60,
                    -60,
                    -120,
                    -120,
                    -34,
                    -37,
                    -74,
                    -80
                ],
                Tcommaaccentydieresis: [
                    -60,
                    -60,
                    -60,
                    -60,
                    -34,
                    -37,
                    -34,
                    -80
                ],
                UA: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UAacute: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UAbreve: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UAcircumflex: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UAdieresis: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UAgrave: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UAmacron: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UAogonek: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UAring: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UAtilde: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                Ucomma: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                Uperiod: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                UacuteA: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UacuteAacute: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UacuteAbreve: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UacuteAcircumflex: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UacuteAdieresis: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UacuteAgrave: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UacuteAmacron: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UacuteAogonek: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UacuteAring: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UacuteAtilde: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                Uacutecomma: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                Uacuteperiod: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                UcircumflexA: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UcircumflexAacute: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UcircumflexAbreve: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UcircumflexAcircumflex: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UcircumflexAdieresis: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UcircumflexAgrave: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UcircumflexAmacron: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UcircumflexAogonek: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UcircumflexAring: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UcircumflexAtilde: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                Ucircumflexcomma: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                Ucircumflexperiod: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                UdieresisA: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UdieresisAacute: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UdieresisAbreve: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UdieresisAcircumflex: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UdieresisAdieresis: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UdieresisAgrave: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UdieresisAmacron: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UdieresisAogonek: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UdieresisAring: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UdieresisAtilde: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                Udieresiscomma: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                Udieresisperiod: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                UgraveA: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UgraveAacute: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UgraveAbreve: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UgraveAcircumflex: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UgraveAdieresis: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UgraveAgrave: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UgraveAmacron: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UgraveAogonek: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UgraveAring: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UgraveAtilde: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                Ugravecomma: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                Ugraveperiod: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                UhungarumlautA: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UhungarumlautAacute: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UhungarumlautAbreve: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UhungarumlautAcircumflex: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UhungarumlautAdieresis: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UhungarumlautAgrave: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UhungarumlautAmacron: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UhungarumlautAogonek: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UhungarumlautAring: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UhungarumlautAtilde: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                Uhungarumlautcomma: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                Uhungarumlautperiod: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                UmacronA: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UmacronAacute: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UmacronAbreve: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UmacronAcircumflex: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UmacronAdieresis: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UmacronAgrave: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UmacronAmacron: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UmacronAogonek: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UmacronAring: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UmacronAtilde: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                Umacroncomma: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                Umacronperiod: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                UogonekA: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UogonekAacute: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UogonekAbreve: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UogonekAcircumflex: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UogonekAdieresis: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UogonekAgrave: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UogonekAmacron: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UogonekAogonek: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UogonekAring: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UogonekAtilde: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                Uogonekcomma: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                Uogonekperiod: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                UringA: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UringAacute: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UringAbreve: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UringAcircumflex: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UringAdieresis: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UringAgrave: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UringAmacron: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UringAogonek: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UringAring: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                UringAtilde: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -60,
                    -45,
                    -40,
                    -40
                ],
                Uringcomma: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                Uringperiod: [
                    -30,
                    -30,
                    -40,
                    -40,
                    -50,
                    0,
                    -25
                ],
                VA: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -135,
                    -85,
                    -60,
                    -135
                ],
                VAacute: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -135,
                    -85,
                    -60,
                    -135
                ],
                VAbreve: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -135,
                    -85,
                    -60,
                    -135
                ],
                VAcircumflex: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -135,
                    -85,
                    -60,
                    -135
                ],
                VAdieresis: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -135,
                    -85,
                    -60,
                    -135
                ],
                VAgrave: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -135,
                    -85,
                    -60,
                    -135
                ],
                VAmacron: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -135,
                    -85,
                    -60,
                    -135
                ],
                VAogonek: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -135,
                    -85,
                    -60,
                    -135
                ],
                VAring: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -135,
                    -85,
                    -60,
                    -135
                ],
                VAtilde: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -135,
                    -85,
                    -60,
                    -135
                ],
                VG: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -30,
                    -10,
                    0,
                    -15
                ],
                VGbreve: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -30,
                    -10,
                    0,
                    -15
                ],
                VGcommaaccent: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -30,
                    -10,
                    0,
                    -15
                ],
                VO: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -45,
                    -30,
                    -30,
                    -40
                ],
                VOacute: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -45,
                    -30,
                    -30,
                    -40
                ],
                VOcircumflex: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -45,
                    -30,
                    -30,
                    -40
                ],
                VOdieresis: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -45,
                    -30,
                    -30,
                    -40
                ],
                VOgrave: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -45,
                    -30,
                    -30,
                    -40
                ],
                VOhungarumlaut: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -45,
                    -30,
                    -30,
                    -40
                ],
                VOmacron: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -45,
                    -30,
                    -30,
                    -40
                ],
                VOslash: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -45,
                    -30,
                    -30,
                    -40
                ],
                VOtilde: [
                    -50,
                    -50,
                    -40,
                    -40,
                    -45,
                    -30,
                    -30,
                    -40
                ],
                Va: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -111,
                    -111,
                    -111
                ],
                Vaacute: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -111,
                    -111,
                    -111
                ],
                Vabreve: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -111,
                    -111,
                    -111
                ],
                Vacircumflex: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -111,
                    -111,
                    -71
                ],
                Vadieresis: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -111,
                    -111,
                    -71
                ],
                Vagrave: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -111,
                    -111,
                    -71
                ],
                Vamacron: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -111,
                    -111,
                    -71
                ],
                Vaogonek: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -111,
                    -111,
                    -111
                ],
                Varing: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -111,
                    -111,
                    -111
                ],
                Vatilde: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -111,
                    -111,
                    -71
                ],
                Vcolon: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -92,
                    -74,
                    -65,
                    -74
                ],
                Vcomma: [
                    -120,
                    -120,
                    -125,
                    -125,
                    -129,
                    -129,
                    -129,
                    -129
                ],
                Ve: [
                    -50,
                    -50,
                    -80,
                    -80,
                    -100,
                    -111,
                    -111,
                    -111
                ],
                Veacute: [
                    -50,
                    -50,
                    -80,
                    -80,
                    -100,
                    -111,
                    -111,
                    -111
                ],
                Vecaron: [
                    -50,
                    -50,
                    -80,
                    -80,
                    -100,
                    -111,
                    -111,
                    -71
                ],
                Vecircumflex: [
                    -50,
                    -50,
                    -80,
                    -80,
                    -100,
                    -111,
                    -111,
                    -71
                ],
                Vedieresis: [
                    -50,
                    -50,
                    -80,
                    -80,
                    -100,
                    -71,
                    -71,
                    -71
                ],
                Vedotaccent: [
                    -50,
                    -50,
                    -80,
                    -80,
                    -100,
                    -111,
                    -111,
                    -111
                ],
                Vegrave: [
                    -50,
                    -50,
                    -80,
                    -80,
                    -100,
                    -71,
                    -71,
                    -71
                ],
                Vemacron: [
                    -50,
                    -50,
                    -80,
                    -80,
                    -100,
                    -71,
                    -71,
                    -71
                ],
                Veogonek: [
                    -50,
                    -50,
                    -80,
                    -80,
                    -100,
                    -111,
                    -111,
                    -111
                ],
                Vhyphen: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -74,
                    -70,
                    -55,
                    -100
                ],
                Vo: [
                    -90,
                    -90,
                    -80,
                    -80,
                    -100,
                    -111,
                    -111,
                    -129
                ],
                Voacute: [
                    -90,
                    -90,
                    -80,
                    -80,
                    -100,
                    -111,
                    -111,
                    -129
                ],
                Vocircumflex: [
                    -90,
                    -90,
                    -80,
                    -80,
                    -100,
                    -111,
                    -111,
                    -129
                ],
                Vodieresis: [
                    -90,
                    -90,
                    -80,
                    -80,
                    -100,
                    -111,
                    -111,
                    -89
                ],
                Vograve: [
                    -90,
                    -90,
                    -80,
                    -80,
                    -100,
                    -111,
                    -111,
                    -89
                ],
                Vohungarumlaut: [
                    -90,
                    -90,
                    -80,
                    -80,
                    -100,
                    -111,
                    -111,
                    -129
                ],
                Vomacron: [
                    -90,
                    -90,
                    -80,
                    -80,
                    -100,
                    -111,
                    -111,
                    -89
                ],
                Voslash: [
                    -90,
                    -90,
                    -80,
                    -80,
                    -100,
                    -111,
                    -111,
                    -129
                ],
                Votilde: [
                    -90,
                    -90,
                    -80,
                    -80,
                    -100,
                    -111,
                    -111,
                    -89
                ],
                Vperiod: [
                    -120,
                    -120,
                    -125,
                    -125,
                    -145,
                    -129,
                    -129,
                    -129
                ],
                Vsemicolon: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -92,
                    -74,
                    -74,
                    -74
                ],
                Vu: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -55,
                    -74,
                    -75
                ],
                Vuacute: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -55,
                    -74,
                    -75
                ],
                Vucircumflex: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -55,
                    -74,
                    -75
                ],
                Vudieresis: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -55,
                    -74,
                    -75
                ],
                Vugrave: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -55,
                    -74,
                    -75
                ],
                Vuhungarumlaut: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -55,
                    -74,
                    -75
                ],
                Vumacron: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -55,
                    -74,
                    -75
                ],
                Vuogonek: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -55,
                    -74,
                    -75
                ],
                Vuring: [
                    -60,
                    -60,
                    -70,
                    -70,
                    -92,
                    -55,
                    -74,
                    -75
                ],
                WA: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -120,
                    -74,
                    -60,
                    -120
                ],
                WAacute: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -120,
                    -74,
                    -60,
                    -120
                ],
                WAbreve: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -120,
                    -74,
                    -60,
                    -120
                ],
                WAcircumflex: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -120,
                    -74,
                    -60,
                    -120
                ],
                WAdieresis: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -120,
                    -74,
                    -60,
                    -120
                ],
                WAgrave: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -120,
                    -74,
                    -60,
                    -120
                ],
                WAmacron: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -120,
                    -74,
                    -60,
                    -120
                ],
                WAogonek: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -120,
                    -74,
                    -60,
                    -120
                ],
                WAring: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -120,
                    -74,
                    -60,
                    -120
                ],
                WAtilde: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -120,
                    -74,
                    -60,
                    -120
                ],
                WO: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -10,
                    -15,
                    -25,
                    -10
                ],
                WOacute: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -10,
                    -15,
                    -25,
                    -10
                ],
                WOcircumflex: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -10,
                    -15,
                    -25,
                    -10
                ],
                WOdieresis: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -10,
                    -15,
                    -25,
                    -10
                ],
                WOgrave: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -10,
                    -15,
                    -25,
                    -10
                ],
                WOhungarumlaut: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -10,
                    -15,
                    -25,
                    -10
                ],
                WOmacron: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -10,
                    -15,
                    -25,
                    -10
                ],
                WOslash: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -10,
                    -15,
                    -25,
                    -10
                ],
                WOtilde: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -10,
                    -15,
                    -25,
                    -10
                ],
                Wa: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -65,
                    -85,
                    -92,
                    -80
                ],
                Waacute: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -65,
                    -85,
                    -92,
                    -80
                ],
                Wabreve: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -65,
                    -85,
                    -92,
                    -80
                ],
                Wacircumflex: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -65,
                    -85,
                    -92,
                    -80
                ],
                Wadieresis: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -65,
                    -85,
                    -92,
                    -80
                ],
                Wagrave: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -65,
                    -85,
                    -92,
                    -80
                ],
                Wamacron: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -65,
                    -85,
                    -92,
                    -80
                ],
                Waogonek: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -65,
                    -85,
                    -92,
                    -80
                ],
                Waring: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -65,
                    -85,
                    -92,
                    -80
                ],
                Watilde: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -65,
                    -85,
                    -92,
                    -80
                ],
                Wcolon: [
                    -10,
                    -10,
                    0,
                    0,
                    -55,
                    -55,
                    -65,
                    -37
                ],
                Wcomma: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -92,
                    -74,
                    -92,
                    -92
                ],
                We: [
                    -35,
                    -35,
                    -30,
                    -30,
                    -65,
                    -90,
                    -92,
                    -80
                ],
                Weacute: [
                    -35,
                    -35,
                    -30,
                    -30,
                    -65,
                    -90,
                    -92,
                    -80
                ],
                Wecaron: [
                    -35,
                    -35,
                    -30,
                    -30,
                    -65,
                    -90,
                    -92,
                    -80
                ],
                Wecircumflex: [
                    -35,
                    -35,
                    -30,
                    -30,
                    -65,
                    -90,
                    -92,
                    -80
                ],
                Wedieresis: [
                    -35,
                    -35,
                    -30,
                    -30,
                    -65,
                    -50,
                    -52,
                    -40
                ],
                Wedotaccent: [
                    -35,
                    -35,
                    -30,
                    -30,
                    -65,
                    -90,
                    -92,
                    -80
                ],
                Wegrave: [
                    -35,
                    -35,
                    -30,
                    -30,
                    -65,
                    -50,
                    -52,
                    -40
                ],
                Wemacron: [
                    -35,
                    -35,
                    -30,
                    -30,
                    -65,
                    -50,
                    -52,
                    -40
                ],
                Weogonek: [
                    -35,
                    -35,
                    -30,
                    -30,
                    -65,
                    -90,
                    -92,
                    -80
                ],
                Whyphen: [
                    -40,
                    -40,
                    -40,
                    -40,
                    -37,
                    -50,
                    -37,
                    -65
                ],
                Wo: [
                    -60,
                    -60,
                    -30,
                    -30,
                    -75,
                    -80,
                    -92,
                    -80
                ],
                Woacute: [
                    -60,
                    -60,
                    -30,
                    -30,
                    -75,
                    -80,
                    -92,
                    -80
                ],
                Wocircumflex: [
                    -60,
                    -60,
                    -30,
                    -30,
                    -75,
                    -80,
                    -92,
                    -80
                ],
                Wodieresis: [
                    -60,
                    -60,
                    -30,
                    -30,
                    -75,
                    -80,
                    -92,
                    -80
                ],
                Wograve: [
                    -60,
                    -60,
                    -30,
                    -30,
                    -75,
                    -80,
                    -92,
                    -80
                ],
                Wohungarumlaut: [
                    -60,
                    -60,
                    -30,
                    -30,
                    -75,
                    -80,
                    -92,
                    -80
                ],
                Womacron: [
                    -60,
                    -60,
                    -30,
                    -30,
                    -75,
                    -80,
                    -92,
                    -80
                ],
                Woslash: [
                    -60,
                    -60,
                    -30,
                    -30,
                    -75,
                    -80,
                    -92,
                    -80
                ],
                Wotilde: [
                    -60,
                    -60,
                    -30,
                    -30,
                    -75,
                    -80,
                    -92,
                    -80
                ],
                Wperiod: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -92,
                    -74,
                    -92,
                    -92
                ],
                Wsemicolon: [
                    -10,
                    -10,
                    0,
                    0,
                    -55,
                    -55,
                    -65,
                    -37
                ],
                Wu: [
                    -45,
                    -45,
                    -30,
                    -30,
                    -50,
                    -55,
                    -55,
                    -50
                ],
                Wuacute: [
                    -45,
                    -45,
                    -30,
                    -30,
                    -50,
                    -55,
                    -55,
                    -50
                ],
                Wucircumflex: [
                    -45,
                    -45,
                    -30,
                    -30,
                    -50,
                    -55,
                    -55,
                    -50
                ],
                Wudieresis: [
                    -45,
                    -45,
                    -30,
                    -30,
                    -50,
                    -55,
                    -55,
                    -50
                ],
                Wugrave: [
                    -45,
                    -45,
                    -30,
                    -30,
                    -50,
                    -55,
                    -55,
                    -50
                ],
                Wuhungarumlaut: [
                    -45,
                    -45,
                    -30,
                    -30,
                    -50,
                    -55,
                    -55,
                    -50
                ],
                Wumacron: [
                    -45,
                    -45,
                    -30,
                    -30,
                    -50,
                    -55,
                    -55,
                    -50
                ],
                Wuogonek: [
                    -45,
                    -45,
                    -30,
                    -30,
                    -50,
                    -55,
                    -55,
                    -50
                ],
                Wuring: [
                    -45,
                    -45,
                    -30,
                    -30,
                    -50,
                    -55,
                    -55,
                    -50
                ],
                Wy: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -60,
                    -55,
                    -70,
                    -73
                ],
                Wyacute: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -60,
                    -55,
                    -70,
                    -73
                ],
                Wydieresis: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -60,
                    -55,
                    -70,
                    -73
                ],
                YA: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YAacute: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YAbreve: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YAcircumflex: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YAdieresis: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YAgrave: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YAmacron: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YAogonek: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YAring: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YAtilde: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YO: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YOacute: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YOcircumflex: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YOdieresis: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YOgrave: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YOhungarumlaut: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YOmacron: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YOslash: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YOtilde: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                Ya: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Yaacute: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Yabreve: [
                    -90,
                    -90,
                    -70,
                    -70,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Yacircumflex: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Yadieresis: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -60
                ],
                Yagrave: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -60
                ],
                Yamacron: [
                    -90,
                    -90,
                    -70,
                    -70,
                    -85,
                    -92,
                    -92,
                    -60
                ],
                Yaogonek: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Yaring: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Yatilde: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -60
                ],
                Ycolon: [
                    -50,
                    -50,
                    -60,
                    -60,
                    -92,
                    -92,
                    -65,
                    -92
                ],
                Ycomma: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -92,
                    -92,
                    -92,
                    -129
                ],
                Ye: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -100
                ],
                Yeacute: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -100
                ],
                Yecaron: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -100
                ],
                Yecircumflex: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -71,
                    -92,
                    -100
                ],
                Yedieresis: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -71,
                    -71,
                    -52,
                    -60
                ],
                Yedotaccent: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -100
                ],
                Yegrave: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -71,
                    -71,
                    -52,
                    -60
                ],
                Yemacron: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -71,
                    -71,
                    -52,
                    -60
                ],
                Yeogonek: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -100
                ],
                Yo: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -110
                ],
                Yoacute: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -110
                ],
                Yocircumflex: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -110
                ],
                Yodieresis: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -70
                ],
                Yograve: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -70
                ],
                Yohungarumlaut: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -110
                ],
                Yomacron: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -70
                ],
                Yoslash: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -110
                ],
                Yotilde: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -70
                ],
                Yperiod: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -92,
                    -74,
                    -92,
                    -129
                ],
                Ysemicolon: [
                    -50,
                    -50,
                    -60,
                    -60,
                    -92,
                    -92,
                    -65,
                    -92
                ],
                Yu: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                Yuacute: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                Yucircumflex: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                Yudieresis: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -71
                ],
                Yugrave: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -71
                ],
                Yuhungarumlaut: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                Yumacron: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -71
                ],
                Yuogonek: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                Yuring: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                YacuteA: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YacuteAacute: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YacuteAbreve: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YacuteAcircumflex: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YacuteAdieresis: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YacuteAgrave: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YacuteAmacron: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YacuteAogonek: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YacuteAring: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YacuteAtilde: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YacuteO: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YacuteOacute: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YacuteOcircumflex: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YacuteOdieresis: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YacuteOgrave: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YacuteOhungarumlaut: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YacuteOmacron: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YacuteOslash: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YacuteOtilde: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                Yacutea: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Yacuteaacute: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Yacuteabreve: [
                    -90,
                    -90,
                    -70,
                    -70,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Yacuteacircumflex: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Yacuteadieresis: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -60
                ],
                Yacuteagrave: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -60
                ],
                Yacuteamacron: [
                    -90,
                    -90,
                    -70,
                    -70,
                    -85,
                    -92,
                    -92,
                    -60
                ],
                Yacuteaogonek: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Yacutearing: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Yacuteatilde: [
                    -90,
                    -90,
                    -70,
                    -70,
                    -85,
                    -92,
                    -92,
                    -60
                ],
                Yacutecolon: [
                    -50,
                    -50,
                    -60,
                    -60,
                    -92,
                    -92,
                    -65,
                    -92
                ],
                Yacutecomma: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -92,
                    -92,
                    -92,
                    -129
                ],
                Yacutee: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -100
                ],
                Yacuteeacute: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -100
                ],
                Yacuteecaron: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -100
                ],
                Yacuteecircumflex: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -71,
                    -92,
                    -100
                ],
                Yacuteedieresis: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -71,
                    -71,
                    -52,
                    -60
                ],
                Yacuteedotaccent: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -100
                ],
                Yacuteegrave: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -71,
                    -71,
                    -52,
                    -60
                ],
                Yacuteemacron: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -71,
                    -71,
                    -52,
                    -60
                ],
                Yacuteeogonek: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -100
                ],
                Yacuteo: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -110
                ],
                Yacuteoacute: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -110
                ],
                Yacuteocircumflex: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -110
                ],
                Yacuteodieresis: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -70
                ],
                Yacuteograve: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -70
                ],
                Yacuteohungarumlaut: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -110
                ],
                Yacuteomacron: [
                    -100,
                    -100,
                    -70,
                    -70,
                    -111,
                    -111,
                    -92,
                    -70
                ],
                Yacuteoslash: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -110
                ],
                Yacuteotilde: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -70
                ],
                Yacuteperiod: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -92,
                    -74,
                    -92,
                    -129
                ],
                Yacutesemicolon: [
                    -50,
                    -50,
                    -60,
                    -60,
                    -92,
                    -92,
                    -65,
                    -92
                ],
                Yacuteu: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                Yacuteuacute: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                Yacuteucircumflex: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                Yacuteudieresis: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -71
                ],
                Yacuteugrave: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -71
                ],
                Yacuteuhungarumlaut: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                Yacuteumacron: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -71
                ],
                Yacuteuogonek: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                Yacuteuring: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                YdieresisA: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YdieresisAacute: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YdieresisAbreve: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YdieresisAcircumflex: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YdieresisAdieresis: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YdieresisAgrave: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YdieresisAmacron: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YdieresisAogonek: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YdieresisAring: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YdieresisAtilde: [
                    -110,
                    -110,
                    -110,
                    -110,
                    -110,
                    -74,
                    -50,
                    -120
                ],
                YdieresisO: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YdieresisOacute: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YdieresisOcircumflex: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YdieresisOdieresis: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YdieresisOgrave: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YdieresisOhungarumlaut: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YdieresisOmacron: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YdieresisOslash: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                YdieresisOtilde: [
                    -70,
                    -70,
                    -85,
                    -85,
                    -35,
                    -25,
                    -15,
                    -30
                ],
                Ydieresisa: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Ydieresisaacute: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Ydieresisabreve: [
                    -90,
                    -90,
                    -70,
                    -70,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Ydieresisacircumflex: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Ydieresisadieresis: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -60
                ],
                Ydieresisagrave: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -60
                ],
                Ydieresisamacron: [
                    -90,
                    -90,
                    -70,
                    -70,
                    -85,
                    -92,
                    -92,
                    -60
                ],
                Ydieresisaogonek: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Ydieresisaring: [
                    -90,
                    -90,
                    -140,
                    -140,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Ydieresisatilde: [
                    -90,
                    -90,
                    -70,
                    -70,
                    -85,
                    -92,
                    -92,
                    -100
                ],
                Ydieresiscolon: [
                    -50,
                    -50,
                    -60,
                    -60,
                    -92,
                    -92,
                    -65,
                    -92
                ],
                Ydieresiscomma: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -92,
                    -92,
                    -92,
                    -129
                ],
                Ydieresise: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -100
                ],
                Ydieresiseacute: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -100
                ],
                Ydieresisecaron: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -100
                ],
                Ydieresisecircumflex: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -71,
                    -92,
                    -100
                ],
                Ydieresisedieresis: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -71,
                    -71,
                    -52,
                    -60
                ],
                Ydieresisedotaccent: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -100
                ],
                Ydieresisegrave: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -71,
                    -71,
                    -52,
                    -60
                ],
                Ydieresisemacron: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -71,
                    -71,
                    -52,
                    -60
                ],
                Ydieresiseogonek: [
                    -80,
                    -80,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -100
                ],
                Ydieresiso: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -110
                ],
                Ydieresisoacute: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -110
                ],
                Ydieresisocircumflex: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -110
                ],
                Ydieresisodieresis: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -70
                ],
                Ydieresisograve: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -70
                ],
                Ydieresisohungarumlaut: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -110
                ],
                Ydieresisomacron: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -70
                ],
                Ydieresisoslash: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -110
                ],
                Ydieresisotilde: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -111,
                    -111,
                    -92,
                    -70
                ],
                Ydieresisperiod: [
                    -100,
                    -100,
                    -140,
                    -140,
                    -92,
                    -74,
                    -92,
                    -129
                ],
                Ydieresissemicolon: [
                    -50,
                    -50,
                    -60,
                    -60,
                    -92,
                    -92,
                    -65,
                    -92
                ],
                Ydieresisu: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                Ydieresisuacute: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                Ydieresisucircumflex: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                Ydieresisudieresis: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -71
                ],
                Ydieresisugrave: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -71
                ],
                Ydieresisuhungarumlaut: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                Ydieresisumacron: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -71
                ],
                Ydieresisuogonek: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                Ydieresisuring: [
                    -100,
                    -100,
                    -110,
                    -110,
                    -92,
                    -92,
                    -92,
                    -111
                ],
                ag: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                agbreve: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                agcommaaccent: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                av: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -25,
                    0,
                    0,
                    -20
                ],
                aw: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    -15
                ],
                ay: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                ayacute: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                aydieresis: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                aacuteg: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                aacutegbreve: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                aacutegcommaaccent: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                aacutev: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -25,
                    0,
                    0,
                    -20
                ],
                aacutew: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    -15
                ],
                aacutey: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                aacuteyacute: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                aacuteydieresis: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                abreveg: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                abrevegbreve: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                abrevegcommaaccent: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                abrevev: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -25,
                    0,
                    0,
                    -20
                ],
                abrevew: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    -15
                ],
                abrevey: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                abreveyacute: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                abreveydieresis: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                acircumflexg: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                acircumflexgbreve: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                acircumflexgcommaaccent: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                acircumflexv: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -25,
                    0,
                    0,
                    -20
                ],
                acircumflexw: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    -15
                ],
                acircumflexy: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                acircumflexyacute: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                acircumflexydieresis: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                adieresisg: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                adieresisgbreve: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                adieresisgcommaaccent: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                adieresisv: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -25,
                    0,
                    0,
                    -20
                ],
                adieresisw: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    -15
                ],
                adieresisy: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                adieresisyacute: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                adieresisydieresis: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                agraveg: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                agravegbreve: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                agravegcommaaccent: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                agravev: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -25,
                    0,
                    0,
                    -20
                ],
                agravew: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    -15
                ],
                agravey: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                agraveyacute: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                agraveydieresis: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                amacrong: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                amacrongbreve: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                amacrongcommaaccent: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                amacronv: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -25,
                    0,
                    0,
                    -20
                ],
                amacronw: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    -15
                ],
                amacrony: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                amacronyacute: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                amacronydieresis: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                aogonekg: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                aogonekgbreve: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                aogonekgcommaaccent: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                aogonekv: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -25,
                    0,
                    0,
                    -20
                ],
                aogonekw: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    -15
                ],
                aogoneky: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                aogonekyacute: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                aogonekydieresis: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                aringg: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                aringgbreve: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                aringgcommaaccent: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                aringv: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -25,
                    0,
                    0,
                    -20
                ],
                aringw: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    -15
                ],
                aringy: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                aringyacute: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                aringydieresis: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                atildeg: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                atildegbreve: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                atildegcommaaccent: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                atildev: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -25,
                    0,
                    0,
                    -20
                ],
                atildew: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    -15
                ],
                atildey: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                atildeyacute: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                atildeydieresis: [
                    -20,
                    -20,
                    -30,
                    -30
                ],
                bl: [
                    -10,
                    -10,
                    -20,
                    -20
                ],
                blacute: [
                    -10,
                    -10,
                    -20,
                    -20
                ],
                blcommaaccent: [
                    -10,
                    -10,
                    -20,
                    -20
                ],
                blslash: [
                    -10,
                    -10,
                    -20,
                    -20
                ],
                bu: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20
                ],
                buacute: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20
                ],
                bucircumflex: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20
                ],
                budieresis: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20
                ],
                bugrave: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20
                ],
                buhungarumlaut: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20
                ],
                bumacron: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20
                ],
                buogonek: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20
                ],
                buring: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20,
                    -20
                ],
                bv: [
                    -20,
                    -20,
                    -20,
                    -20,
                    -15,
                    0,
                    0,
                    -15
                ],
                by: [
                    -20,
                    -20,
                    -20,
                    -20
                ],
                byacute: [
                    -20,
                    -20,
                    -20,
                    -20
                ],
                bydieresis: [
                    -20,
                    -20,
                    -20,
                    -20
                ],
                ch: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    -10,
                    -15
                ],
                ck: [
                    -20,
                    -20,
                    -20,
                    -20,
                    0,
                    -10,
                    -20
                ],
                ckcommaaccent: [
                    -20,
                    -20,
                    -20,
                    -20,
                    0,
                    -10,
                    -20
                ],
                cl: [
                    -20,
                    -20
                ],
                clacute: [
                    -20,
                    -20
                ],
                clcommaaccent: [
                    -20,
                    -20
                ],
                clslash: [
                    -20,
                    -20
                ],
                cy: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -15
                ],
                cyacute: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -15
                ],
                cydieresis: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -15
                ],
                cacuteh: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    -10,
                    -15
                ],
                cacutek: [
                    -20,
                    -20,
                    -20,
                    -20,
                    0,
                    -10,
                    -20
                ],
                cacutekcommaaccent: [
                    -20,
                    -20,
                    -20,
                    -20,
                    0,
                    -10,
                    -20
                ],
                cacutel: [
                    -20,
                    -20
                ],
                cacutelacute: [
                    -20,
                    -20
                ],
                cacutelcommaaccent: [
                    -20,
                    -20
                ],
                cacutelslash: [
                    -20,
                    -20
                ],
                cacutey: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -15
                ],
                cacuteyacute: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -15
                ],
                cacuteydieresis: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -15
                ],
                ccaronh: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    -10,
                    -15
                ],
                ccaronk: [
                    -20,
                    -20,
                    -20,
                    -20,
                    0,
                    -10,
                    -20
                ],
                ccaronkcommaaccent: [
                    -20,
                    -20,
                    -20,
                    -20,
                    0,
                    -10,
                    -20
                ],
                ccaronl: [
                    -20,
                    -20
                ],
                ccaronlacute: [
                    -20,
                    -20
                ],
                ccaronlcommaaccent: [
                    -20,
                    -20
                ],
                ccaronlslash: [
                    -20,
                    -20
                ],
                ccarony: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -15
                ],
                ccaronyacute: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -15
                ],
                ccaronydieresis: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -15
                ],
                ccedillah: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    -10,
                    -15
                ],
                ccedillak: [
                    -20,
                    -20,
                    -20,
                    -20,
                    0,
                    -10,
                    -20
                ],
                ccedillakcommaaccent: [
                    -20,
                    -20,
                    -20,
                    -20,
                    0,
                    -10,
                    -20
                ],
                ccedillal: [
                    -20,
                    -20
                ],
                ccedillalacute: [
                    -20,
                    -20
                ],
                ccedillalcommaaccent: [
                    -20,
                    -20
                ],
                ccedillalslash: [
                    -20,
                    -20
                ],
                ccedillay: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -15
                ],
                ccedillayacute: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -15
                ],
                ccedillaydieresis: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -15
                ],
                colonspace: [
                    -40,
                    -40,
                    -50,
                    -50
                ],
                commaquotedblright: [
                    -120,
                    -120,
                    -100,
                    -100,
                    -45,
                    -95,
                    -140,
                    -70
                ],
                commaquoteright: [
                    -120,
                    -120,
                    -100,
                    -100,
                    -55,
                    -95,
                    -140,
                    -70
                ],
                commaspace: [
                    -40,
                    -40
                ],
                dd: [
                    -10,
                    -10
                ],
                ddcroat: [
                    -10,
                    -10
                ],
                dv: [
                    -15,
                    -15
                ],
                dw: [
                    -15,
                    -15,
                    0,
                    0,
                    -15
                ],
                dy: [
                    -15,
                    -15
                ],
                dyacute: [
                    -15,
                    -15
                ],
                dydieresis: [
                    -15,
                    -15
                ],
                dcroatd: [
                    -10,
                    -10
                ],
                dcroatdcroat: [
                    -10,
                    -10
                ],
                dcroatv: [
                    -15,
                    -15
                ],
                dcroatw: [
                    -15,
                    -15,
                    0,
                    0,
                    -15
                ],
                dcroaty: [
                    -15,
                    -15
                ],
                dcroatyacute: [
                    -15,
                    -15
                ],
                dcroatydieresis: [
                    -15,
                    -15
                ],
                ecomma: [
                    10,
                    10,
                    -15,
                    -15,
                    0,
                    0,
                    -10
                ],
                eperiod: [
                    20,
                    20,
                    -15,
                    -15,
                    0,
                    0,
                    -15
                ],
                ev: [
                    -15,
                    -15,
                    -30,
                    -30,
                    -15,
                    0,
                    -15,
                    -25
                ],
                ew: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -15,
                    -25
                ],
                ex: [
                    -15,
                    -15,
                    -30,
                    -30,
                    0,
                    0,
                    -20,
                    -15
                ],
                ey: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                eyacute: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                eydieresis: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                eacutecomma: [
                    10,
                    10,
                    -15,
                    -15,
                    0,
                    0,
                    -10
                ],
                eacuteperiod: [
                    20,
                    20,
                    -15,
                    -15,
                    0,
                    0,
                    -15
                ],
                eacutev: [
                    -15,
                    -15,
                    -30,
                    -30,
                    -15,
                    0,
                    -15,
                    -25
                ],
                eacutew: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -15,
                    -25
                ],
                eacutex: [
                    -15,
                    -15,
                    -30,
                    -30,
                    0,
                    0,
                    -20,
                    -15
                ],
                eacutey: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                eacuteyacute: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                eacuteydieresis: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                ecaroncomma: [
                    10,
                    10,
                    -15,
                    -15,
                    0,
                    0,
                    -10
                ],
                ecaronperiod: [
                    20,
                    20,
                    -15,
                    -15,
                    0,
                    0,
                    -15
                ],
                ecaronv: [
                    -15,
                    -15,
                    -30,
                    -30,
                    -15,
                    0,
                    -15,
                    -25
                ],
                ecaronw: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -15,
                    -25
                ],
                ecaronx: [
                    -15,
                    -15,
                    -30,
                    -30,
                    0,
                    0,
                    -20,
                    -15
                ],
                ecarony: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                ecaronyacute: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                ecaronydieresis: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                ecircumflexcomma: [
                    10,
                    10,
                    -15,
                    -15,
                    0,
                    0,
                    -10
                ],
                ecircumflexperiod: [
                    20,
                    20,
                    -15,
                    -15,
                    0,
                    0,
                    -15
                ],
                ecircumflexv: [
                    -15,
                    -15,
                    -30,
                    -30,
                    -15,
                    0,
                    -15,
                    -25
                ],
                ecircumflexw: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -15,
                    -25
                ],
                ecircumflexx: [
                    -15,
                    -15,
                    -30,
                    -30,
                    0,
                    0,
                    -20,
                    -15
                ],
                ecircumflexy: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                ecircumflexyacute: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                ecircumflexydieresis: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                edieresiscomma: [
                    10,
                    10,
                    -15,
                    -15,
                    0,
                    0,
                    -10
                ],
                edieresisperiod: [
                    20,
                    20,
                    -15,
                    -15,
                    0,
                    0,
                    -15
                ],
                edieresisv: [
                    -15,
                    -15,
                    -30,
                    -30,
                    -15,
                    0,
                    -15,
                    -25
                ],
                edieresisw: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -15,
                    -25
                ],
                edieresisx: [
                    -15,
                    -15,
                    -30,
                    -30,
                    0,
                    0,
                    -20,
                    -15
                ],
                edieresisy: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                edieresisyacute: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                edieresisydieresis: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                edotaccentcomma: [
                    10,
                    10,
                    -15,
                    -15,
                    0,
                    0,
                    -10
                ],
                edotaccentperiod: [
                    20,
                    20,
                    -15,
                    -15,
                    0,
                    0,
                    -15
                ],
                edotaccentv: [
                    -15,
                    -15,
                    -30,
                    -30,
                    -15,
                    0,
                    -15,
                    -25
                ],
                edotaccentw: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -15,
                    -25
                ],
                edotaccentx: [
                    -15,
                    -15,
                    -30,
                    -30,
                    0,
                    0,
                    -20,
                    -15
                ],
                edotaccenty: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                edotaccentyacute: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                edotaccentydieresis: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                egravecomma: [
                    10,
                    10,
                    -15,
                    -15,
                    0,
                    0,
                    -10
                ],
                egraveperiod: [
                    20,
                    20,
                    -15,
                    -15,
                    0,
                    0,
                    -15
                ],
                egravev: [
                    -15,
                    -15,
                    -30,
                    -30,
                    -15,
                    0,
                    -15,
                    -25
                ],
                egravew: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -15,
                    -25
                ],
                egravex: [
                    -15,
                    -15,
                    -30,
                    -30,
                    0,
                    0,
                    -20,
                    -15
                ],
                egravey: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                egraveyacute: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                egraveydieresis: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                emacroncomma: [
                    10,
                    10,
                    -15,
                    -15,
                    0,
                    0,
                    -10
                ],
                emacronperiod: [
                    20,
                    20,
                    -15,
                    -15,
                    0,
                    0,
                    -15
                ],
                emacronv: [
                    -15,
                    -15,
                    -30,
                    -30,
                    -15,
                    0,
                    -15,
                    -25
                ],
                emacronw: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -15,
                    -25
                ],
                emacronx: [
                    -15,
                    -15,
                    -30,
                    -30,
                    0,
                    0,
                    -20,
                    -15
                ],
                emacrony: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                emacronyacute: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                emacronydieresis: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                eogonekcomma: [
                    10,
                    10,
                    -15,
                    -15,
                    0,
                    0,
                    -10
                ],
                eogonekperiod: [
                    20,
                    20,
                    -15,
                    -15,
                    0,
                    0,
                    -15
                ],
                eogonekv: [
                    -15,
                    -15,
                    -30,
                    -30,
                    -15,
                    0,
                    -15,
                    -25
                ],
                eogonekw: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -15,
                    -25
                ],
                eogonekx: [
                    -15,
                    -15,
                    -30,
                    -30,
                    0,
                    0,
                    -20,
                    -15
                ],
                eogoneky: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                eogonekyacute: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                eogonekydieresis: [
                    -15,
                    -15,
                    -20,
                    -20,
                    0,
                    0,
                    -30,
                    -15
                ],
                fcomma: [
                    -10,
                    -10,
                    -30,
                    -30,
                    -15,
                    -10,
                    -10
                ],
                fe: [
                    -10,
                    -10,
                    -30,
                    -30,
                    0,
                    -10
                ],
                feacute: [
                    -10,
                    -10,
                    -30,
                    -30,
                    0,
                    -10
                ],
                fecaron: [
                    -10,
                    -10,
                    -30,
                    -30
                ],
                fecircumflex: [
                    -10,
                    -10,
                    -30,
                    -30
                ],
                fedieresis: [
                    -10,
                    -10,
                    -30,
                    -30
                ],
                fedotaccent: [
                    -10,
                    -10,
                    -30,
                    -30,
                    0,
                    -10
                ],
                fegrave: [
                    -10,
                    -10,
                    -30,
                    -30
                ],
                femacron: [
                    -10,
                    -10,
                    -30,
                    -30
                ],
                feogonek: [
                    -10,
                    -10,
                    -30,
                    -30,
                    0,
                    -10
                ],
                fo: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -25,
                    -10
                ],
                foacute: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -25,
                    -10
                ],
                focircumflex: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -25,
                    -10
                ],
                fodieresis: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -25
                ],
                fograve: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -25,
                    -10
                ],
                fohungarumlaut: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -25,
                    -10
                ],
                fomacron: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -25
                ],
                foslash: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -25,
                    -10
                ],
                fotilde: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -25,
                    -10
                ],
                fperiod: [
                    -10,
                    -10,
                    -30,
                    -30,
                    -15,
                    -10,
                    -15
                ],
                fquotedblright: [
                    30,
                    30,
                    60,
                    60,
                    50
                ],
                fquoteright: [
                    30,
                    30,
                    50,
                    50,
                    55,
                    55,
                    92,
                    55
                ],
                ge: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                geacute: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gecaron: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gecircumflex: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gedieresis: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gedotaccent: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gegrave: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gemacron: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                geogonek: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gg: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ggbreve: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ggcommaaccent: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gbrevee: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gbreveeacute: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gbreveecaron: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gbreveecircumflex: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gbreveedieresis: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gbreveedotaccent: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gbreveegrave: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gbreveemacron: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gbreveeogonek: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gbreveg: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gbrevegbreve: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gbrevegcommaaccent: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gcommaaccente: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gcommaaccenteacute: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gcommaaccentecaron: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gcommaaccentecircumflex: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gcommaaccentedieresis: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gcommaaccentedotaccent: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gcommaaccentegrave: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gcommaaccentemacron: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gcommaaccenteogonek: [
                    10,
                    10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gcommaaccentg: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gcommaaccentgbreve: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gcommaaccentgcommaaccent: [
                    -10,
                    -10,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                hy: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -15,
                    0,
                    0,
                    -5
                ],
                hyacute: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -15,
                    0,
                    0,
                    -5
                ],
                hydieresis: [
                    -20,
                    -20,
                    -30,
                    -30,
                    -15,
                    0,
                    0,
                    -5
                ],
                ko: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                koacute: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                kocircumflex: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                kodieresis: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                kograve: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                kohungarumlaut: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                komacron: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                koslash: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                kotilde: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                kcommaaccento: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                kcommaaccentoacute: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                kcommaaccentocircumflex: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                kcommaaccentodieresis: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                kcommaaccentograve: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                kcommaaccentohungarumlaut: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                kcommaaccentomacron: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                kcommaaccentoslash: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                kcommaaccentotilde: [
                    -15,
                    -15,
                    -20,
                    -20,
                    -15,
                    -10,
                    -10,
                    -10
                ],
                lw: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ly: [
                    -15,
                    -15
                ],
                lyacute: [
                    -15,
                    -15
                ],
                lydieresis: [
                    -15,
                    -15
                ],
                lacutew: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                lacutey: [
                    -15,
                    -15
                ],
                lacuteyacute: [
                    -15,
                    -15
                ],
                lacuteydieresis: [
                    -15,
                    -15
                ],
                lcommaaccentw: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                lcommaaccenty: [
                    -15,
                    -15
                ],
                lcommaaccentyacute: [
                    -15,
                    -15
                ],
                lcommaaccentydieresis: [
                    -15,
                    -15
                ],
                lslashw: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                lslashy: [
                    -15,
                    -15
                ],
                lslashyacute: [
                    -15,
                    -15
                ],
                lslashydieresis: [
                    -15,
                    -15
                ],
                mu: [
                    -20,
                    -20,
                    -10,
                    -10
                ],
                muacute: [
                    -20,
                    -20,
                    -10,
                    -10
                ],
                mucircumflex: [
                    -20,
                    -20,
                    -10,
                    -10
                ],
                mudieresis: [
                    -20,
                    -20,
                    -10,
                    -10
                ],
                mugrave: [
                    -20,
                    -20,
                    -10,
                    -10
                ],
                muhungarumlaut: [
                    -20,
                    -20,
                    -10,
                    -10
                ],
                mumacron: [
                    -20,
                    -20,
                    -10,
                    -10
                ],
                muogonek: [
                    -20,
                    -20,
                    -10,
                    -10
                ],
                muring: [
                    -20,
                    -20,
                    -10,
                    -10
                ],
                my: [
                    -30,
                    -30,
                    -15,
                    -15
                ],
                myacute: [
                    -30,
                    -30,
                    -15,
                    -15
                ],
                mydieresis: [
                    -30,
                    -30,
                    -15,
                    -15
                ],
                nu: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nuacute: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nucircumflex: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nudieresis: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nugrave: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nuhungarumlaut: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                numacron: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nuogonek: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nuring: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nv: [
                    -40,
                    -40,
                    -20,
                    -20,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                ny: [
                    -20,
                    -20,
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    -15
                ],
                nyacute: [
                    -20,
                    -20,
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    -15
                ],
                nydieresis: [
                    -20,
                    -20,
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    -15
                ],
                nacuteu: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nacuteuacute: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nacuteucircumflex: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nacuteudieresis: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nacuteugrave: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nacuteuhungarumlaut: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nacuteumacron: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nacuteuogonek: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nacuteuring: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                nacutev: [
                    -40,
                    -40,
                    -20,
                    -20,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                nacutey: [
                    -20,
                    -20,
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    -15
                ],
                nacuteyacute: [
                    -20,
                    -20,
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    -15
                ],
                nacuteydieresis: [
                    -20,
                    -20,
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    -15
                ],
                ncaronu: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncaronuacute: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncaronucircumflex: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncaronudieresis: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncaronugrave: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncaronuhungarumlaut: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncaronumacron: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncaronuogonek: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncaronuring: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncaronv: [
                    -40,
                    -40,
                    -20,
                    -20,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                ncarony: [
                    -20,
                    -20,
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    -15
                ],
                ncaronyacute: [
                    -20,
                    -20,
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    -15
                ],
                ncaronydieresis: [
                    -20,
                    -20,
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    -15
                ],
                ncommaaccentu: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncommaaccentuacute: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncommaaccentucircumflex: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncommaaccentudieresis: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncommaaccentugrave: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncommaaccentuhungarumlaut: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncommaaccentumacron: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncommaaccentuogonek: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncommaaccenturing: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ncommaaccentv: [
                    -40,
                    -40,
                    -20,
                    -20,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                ncommaaccenty: [
                    -20,
                    -20,
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    -15
                ],
                ncommaaccentyacute: [
                    -20,
                    -20,
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    -15
                ],
                ncommaaccentydieresis: [
                    -20,
                    -20,
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    -15
                ],
                ntildeu: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ntildeuacute: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ntildeucircumflex: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ntildeudieresis: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ntildeugrave: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ntildeuhungarumlaut: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ntildeumacron: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ntildeuogonek: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ntildeuring: [
                    -10,
                    -10,
                    -10,
                    -10
                ],
                ntildev: [
                    -40,
                    -40,
                    -20,
                    -20,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                ntildey: [
                    -20,
                    -20,
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    -15
                ],
                ntildeyacute: [
                    -20,
                    -20,
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    -15
                ],
                ntildeydieresis: [
                    -20,
                    -20,
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    -15
                ],
                ov: [
                    -20,
                    -20,
                    -15,
                    -15,
                    -10,
                    -15,
                    -10,
                    -15
                ],
                ow: [
                    -15,
                    -15,
                    -15,
                    -15,
                    -10,
                    -25,
                    0,
                    -25
                ],
                ox: [
                    -30,
                    -30,
                    -30,
                    -30,
                    0,
                    -10
                ],
                oy: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                oyacute: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                oydieresis: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                oacutev: [
                    -20,
                    -20,
                    -15,
                    -15,
                    -10,
                    -15,
                    -10,
                    -15
                ],
                oacutew: [
                    -15,
                    -15,
                    -15,
                    -15,
                    -10,
                    -25,
                    0,
                    -25
                ],
                oacutex: [
                    -30,
                    -30,
                    -30,
                    -30,
                    0,
                    -10
                ],
                oacutey: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                oacuteyacute: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                oacuteydieresis: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                ocircumflexv: [
                    -20,
                    -20,
                    -15,
                    -15,
                    -10,
                    -15,
                    -10,
                    -15
                ],
                ocircumflexw: [
                    -15,
                    -15,
                    -15,
                    -15,
                    -10,
                    -25,
                    0,
                    -25
                ],
                ocircumflexx: [
                    -30,
                    -30,
                    -30,
                    -30,
                    0,
                    -10
                ],
                ocircumflexy: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                ocircumflexyacute: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                ocircumflexydieresis: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                odieresisv: [
                    -20,
                    -20,
                    -15,
                    -15,
                    -10,
                    -15,
                    -10,
                    -15
                ],
                odieresisw: [
                    -15,
                    -15,
                    -15,
                    -15,
                    -10,
                    -25,
                    0,
                    -25
                ],
                odieresisx: [
                    -30,
                    -30,
                    -30,
                    -30,
                    0,
                    -10
                ],
                odieresisy: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                odieresisyacute: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                odieresisydieresis: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                ogravev: [
                    -20,
                    -20,
                    -15,
                    -15,
                    -10,
                    -15,
                    -10,
                    -15
                ],
                ogravew: [
                    -15,
                    -15,
                    -15,
                    -15,
                    -10,
                    -25,
                    0,
                    -25
                ],
                ogravex: [
                    -30,
                    -30,
                    -30,
                    -30,
                    0,
                    -10
                ],
                ogravey: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                ograveyacute: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                ograveydieresis: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                ohungarumlautv: [
                    -20,
                    -20,
                    -15,
                    -15,
                    -10,
                    -15,
                    -10,
                    -15
                ],
                ohungarumlautw: [
                    -15,
                    -15,
                    -15,
                    -15,
                    -10,
                    -25,
                    0,
                    -25
                ],
                ohungarumlautx: [
                    -30,
                    -30,
                    -30,
                    -30,
                    0,
                    -10
                ],
                ohungarumlauty: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                ohungarumlautyacute: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                ohungarumlautydieresis: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                omacronv: [
                    -20,
                    -20,
                    -15,
                    -15,
                    -10,
                    -15,
                    -10,
                    -15
                ],
                omacronw: [
                    -15,
                    -15,
                    -15,
                    -15,
                    -10,
                    -25,
                    0,
                    -25
                ],
                omacronx: [
                    -30,
                    -30,
                    -30,
                    -30,
                    0,
                    -10
                ],
                omacrony: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                omacronyacute: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                omacronydieresis: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                oslashv: [
                    -20,
                    -20,
                    -70,
                    -70,
                    -10,
                    -15,
                    -10,
                    -15
                ],
                oslashw: [
                    -15,
                    -15,
                    -70,
                    -70,
                    -10,
                    -25,
                    0,
                    -25
                ],
                oslashx: [
                    -30,
                    -30,
                    -85,
                    -85,
                    0,
                    -10
                ],
                oslashy: [
                    -20,
                    -20,
                    -70,
                    -70,
                    0,
                    -10,
                    0,
                    -10
                ],
                oslashyacute: [
                    -20,
                    -20,
                    -70,
                    -70,
                    0,
                    -10,
                    0,
                    -10
                ],
                oslashydieresis: [
                    -20,
                    -20,
                    -70,
                    -70,
                    0,
                    -10,
                    0,
                    -10
                ],
                otildev: [
                    -20,
                    -20,
                    -15,
                    -15,
                    -10,
                    -15,
                    -10,
                    -15
                ],
                otildew: [
                    -15,
                    -15,
                    -15,
                    -15,
                    -10,
                    -25,
                    0,
                    -25
                ],
                otildex: [
                    -30,
                    -30,
                    -30,
                    -30,
                    0,
                    -10
                ],
                otildey: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                otildeyacute: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                otildeydieresis: [
                    -20,
                    -20,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -10
                ],
                py: [
                    -15,
                    -15,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -10
                ],
                pyacute: [
                    -15,
                    -15,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -10
                ],
                pydieresis: [
                    -15,
                    -15,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -10
                ],
                periodquotedblright: [
                    -120,
                    -120,
                    -100,
                    -100,
                    -55,
                    -95,
                    -140,
                    -70
                ],
                periodquoteright: [
                    -120,
                    -120,
                    -100,
                    -100,
                    -55,
                    -95,
                    -140,
                    -70
                ],
                periodspace: [
                    -40,
                    -40,
                    -60,
                    -60
                ],
                quotedblrightspace: [
                    -80,
                    -80,
                    -40,
                    -40
                ],
                quoteleftquoteleft: [
                    -46,
                    -46,
                    -57,
                    -57,
                    -63,
                    -74,
                    -111,
                    -74
                ],
                quoterightd: [
                    -80,
                    -80,
                    -50,
                    -50,
                    -20,
                    -15,
                    -25,
                    -50
                ],
                quoterightdcroat: [
                    -80,
                    -80,
                    -50,
                    -50,
                    -20,
                    -15,
                    -25,
                    -50
                ],
                quoterightl: [
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                quoterightlacute: [
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                quoterightlcommaaccent: [
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                quoterightlslash: [
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                quoterightquoteright: [
                    -46,
                    -46,
                    -57,
                    -57,
                    -63,
                    -74,
                    -111,
                    -74
                ],
                quoterightr: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -20,
                    -15,
                    -25,
                    -50
                ],
                quoterightracute: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -20,
                    -15,
                    -25,
                    -50
                ],
                quoterightrcaron: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -20,
                    -15,
                    -25,
                    -50
                ],
                quoterightrcommaaccent: [
                    -40,
                    -40,
                    -50,
                    -50,
                    -20,
                    -15,
                    -25,
                    -50
                ],
                quoterights: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -37,
                    -74,
                    -40,
                    -55
                ],
                quoterightsacute: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -37,
                    -74,
                    -40,
                    -55
                ],
                quoterightscaron: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -37,
                    -74,
                    -40,
                    -55
                ],
                quoterightscedilla: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -37,
                    -74,
                    -40,
                    -55
                ],
                quoterightscommaaccent: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -37,
                    -74,
                    -40,
                    -55
                ],
                quoterightspace: [
                    -80,
                    -80,
                    -70,
                    -70,
                    -74,
                    -74,
                    -111,
                    -74
                ],
                quoterightv: [
                    -20,
                    -20,
                    0,
                    0,
                    -20,
                    -15,
                    -10,
                    -50
                ],
                rc: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcacute: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rccaron: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rccedilla: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcomma: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -92,
                    -65,
                    -111,
                    -40
                ],
                rd: [
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    0,
                    -37
                ],
                rdcroat: [
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    0,
                    -37
                ],
                rg: [
                    -15,
                    -15,
                    0,
                    0,
                    -10,
                    0,
                    -37,
                    -18
                ],
                rgbreve: [
                    -15,
                    -15,
                    0,
                    0,
                    -10,
                    0,
                    -37,
                    -18
                ],
                rgcommaaccent: [
                    -15,
                    -15,
                    0,
                    0,
                    -10,
                    0,
                    -37,
                    -18
                ],
                rhyphen: [
                    -20,
                    -20,
                    0,
                    0,
                    -37,
                    0,
                    -20,
                    -20
                ],
                ro: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                roacute: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rocircumflex: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rodieresis: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rograve: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rohungarumlaut: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                romacron: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                roslash: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rotilde: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rperiod: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -100,
                    -65,
                    -111,
                    -55
                ],
                rq: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rs: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                rsacute: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                rscaron: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                rscedilla: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                rscommaaccent: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                rt: [
                    20,
                    20,
                    40,
                    40
                ],
                rtcommaaccent: [
                    20,
                    20,
                    40,
                    40
                ],
                rv: [
                    10,
                    10,
                    30,
                    30,
                    -10
                ],
                ry: [
                    10,
                    10,
                    30,
                    30
                ],
                ryacute: [
                    10,
                    10,
                    30,
                    30
                ],
                rydieresis: [
                    10,
                    10,
                    30,
                    30
                ],
                racutec: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                racutecacute: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                racuteccaron: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                racuteccedilla: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                racutecomma: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -92,
                    -65,
                    -111,
                    -40
                ],
                racuted: [
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    0,
                    -37
                ],
                racutedcroat: [
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    0,
                    -37
                ],
                racuteg: [
                    -15,
                    -15,
                    0,
                    0,
                    -10,
                    0,
                    -37,
                    -18
                ],
                racutegbreve: [
                    -15,
                    -15,
                    0,
                    0,
                    -10,
                    0,
                    -37,
                    -18
                ],
                racutegcommaaccent: [
                    -15,
                    -15,
                    0,
                    0,
                    -10,
                    0,
                    -37,
                    -18
                ],
                racutehyphen: [
                    -20,
                    -20,
                    0,
                    0,
                    -37,
                    0,
                    -20,
                    -20
                ],
                racuteo: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                racuteoacute: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                racuteocircumflex: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                racuteodieresis: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                racuteograve: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                racuteohungarumlaut: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                racuteomacron: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                racuteoslash: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                racuteotilde: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                racuteperiod: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -100,
                    -65,
                    -111,
                    -55
                ],
                racuteq: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                racutes: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                racutesacute: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                racutescaron: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                racutescedilla: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                racutescommaaccent: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                racutet: [
                    20,
                    20,
                    40,
                    40
                ],
                racutetcommaaccent: [
                    20,
                    20,
                    40,
                    40
                ],
                racutev: [
                    10,
                    10,
                    30,
                    30,
                    -10
                ],
                racutey: [
                    10,
                    10,
                    30,
                    30
                ],
                racuteyacute: [
                    10,
                    10,
                    30,
                    30
                ],
                racuteydieresis: [
                    10,
                    10,
                    30,
                    30
                ],
                rcaronc: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcaroncacute: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcaronccaron: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcaronccedilla: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcaroncomma: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -92,
                    -65,
                    -111,
                    -40
                ],
                rcarond: [
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    0,
                    -37
                ],
                rcarondcroat: [
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    0,
                    -37
                ],
                rcarong: [
                    -15,
                    -15,
                    0,
                    0,
                    -10,
                    0,
                    -37,
                    -18
                ],
                rcarongbreve: [
                    -15,
                    -15,
                    0,
                    0,
                    -10,
                    0,
                    -37,
                    -18
                ],
                rcarongcommaaccent: [
                    -15,
                    -15,
                    0,
                    0,
                    -10,
                    0,
                    -37,
                    -18
                ],
                rcaronhyphen: [
                    -20,
                    -20,
                    0,
                    0,
                    -37,
                    0,
                    -20,
                    -20
                ],
                rcarono: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcaronoacute: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcaronocircumflex: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcaronodieresis: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcaronograve: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcaronohungarumlaut: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcaronomacron: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcaronoslash: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcaronotilde: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcaronperiod: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -100,
                    -65,
                    -111,
                    -55
                ],
                rcaronq: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcarons: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                rcaronsacute: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                rcaronscaron: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                rcaronscedilla: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                rcaronscommaaccent: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                rcaront: [
                    20,
                    20,
                    40,
                    40
                ],
                rcarontcommaaccent: [
                    20,
                    20,
                    40,
                    40
                ],
                rcaronv: [
                    10,
                    10,
                    30,
                    30,
                    -10
                ],
                rcarony: [
                    10,
                    10,
                    30,
                    30
                ],
                rcaronyacute: [
                    10,
                    10,
                    30,
                    30
                ],
                rcaronydieresis: [
                    10,
                    10,
                    30,
                    30
                ],
                rcommaaccentc: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcommaaccentcacute: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcommaaccentccaron: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcommaaccentccedilla: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcommaaccentcomma: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -92,
                    -65,
                    -111,
                    -40
                ],
                rcommaaccentd: [
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    0,
                    -37
                ],
                rcommaaccentdcroat: [
                    -20,
                    -20,
                    0,
                    0,
                    0,
                    0,
                    -37
                ],
                rcommaaccentg: [
                    -15,
                    -15,
                    0,
                    0,
                    -10,
                    0,
                    -37,
                    -18
                ],
                rcommaaccentgbreve: [
                    -15,
                    -15,
                    0,
                    0,
                    -10,
                    0,
                    -37,
                    -18
                ],
                rcommaaccentgcommaaccent: [
                    -15,
                    -15,
                    0,
                    0,
                    -10,
                    0,
                    -37,
                    -18
                ],
                rcommaaccenthyphen: [
                    -20,
                    -20,
                    0,
                    0,
                    -37,
                    0,
                    -20,
                    -20
                ],
                rcommaaccento: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcommaaccentoacute: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcommaaccentocircumflex: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcommaaccentodieresis: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcommaaccentograve: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcommaaccentohungarumlaut: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcommaaccentomacron: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcommaaccentoslash: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcommaaccentotilde: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -45
                ],
                rcommaaccentperiod: [
                    -60,
                    -60,
                    -50,
                    -50,
                    -100,
                    -65,
                    -111,
                    -55
                ],
                rcommaaccentq: [
                    -20,
                    -20,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcommaaccents: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                rcommaaccentsacute: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                rcommaaccentscaron: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                rcommaaccentscedilla: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                rcommaaccentscommaaccent: [
                    -15,
                    -15,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                rcommaaccentt: [
                    20,
                    20,
                    40,
                    40
                ],
                rcommaaccenttcommaaccent: [
                    20,
                    20,
                    40,
                    40
                ],
                rcommaaccentv: [
                    10,
                    10,
                    30,
                    30,
                    -10
                ],
                rcommaaccenty: [
                    10,
                    10,
                    30,
                    30
                ],
                rcommaaccentyacute: [
                    10,
                    10,
                    30,
                    30
                ],
                rcommaaccentydieresis: [
                    10,
                    10,
                    30,
                    30
                ],
                sw: [
                    -15,
                    -15,
                    -30,
                    -30
                ],
                sacutew: [
                    -15,
                    -15,
                    -30,
                    -30
                ],
                scaronw: [
                    -15,
                    -15,
                    -30,
                    -30
                ],
                scedillaw: [
                    -15,
                    -15,
                    -30,
                    -30
                ],
                scommaaccentw: [
                    -15,
                    -15,
                    -30,
                    -30
                ],
                semicolonspace: [
                    -40,
                    -40,
                    -50,
                    -50
                ],
                spaceT: [
                    -100,
                    -100,
                    -50,
                    -50,
                    -30,
                    0,
                    -18,
                    -18
                ],
                spaceTcaron: [
                    -100,
                    -100,
                    -50,
                    -50,
                    -30,
                    0,
                    -18,
                    -18
                ],
                spaceTcommaaccent: [
                    -100,
                    -100,
                    -50,
                    -50,
                    -30,
                    0,
                    -18,
                    -18
                ],
                spaceV: [
                    -80,
                    -80,
                    -50,
                    -50,
                    -45,
                    -70,
                    -35,
                    -50
                ],
                spaceW: [
                    -80,
                    -80,
                    -40,
                    -40,
                    -30,
                    -70,
                    -40,
                    -30
                ],
                spaceY: [
                    -120,
                    -120,
                    -90,
                    -90,
                    -55,
                    -70,
                    -75,
                    -90
                ],
                spaceYacute: [
                    -120,
                    -120,
                    -90,
                    -90,
                    -55,
                    -70,
                    -75,
                    -90
                ],
                spaceYdieresis: [
                    -120,
                    -120,
                    -90,
                    -90,
                    -55,
                    -70,
                    -75,
                    -90
                ],
                spacequotedblleft: [
                    -80,
                    -80,
                    -30,
                    -30
                ],
                spacequoteleft: [
                    -60,
                    -60,
                    -60,
                    -60
                ],
                va: [
                    -20,
                    -20,
                    -25,
                    -25,
                    -10,
                    0,
                    0,
                    -25
                ],
                vaacute: [
                    -20,
                    -20,
                    -25,
                    -25,
                    -10,
                    0,
                    0,
                    -25
                ],
                vabreve: [
                    -20,
                    -20,
                    -25,
                    -25,
                    -10,
                    0,
                    0,
                    -25
                ],
                vacircumflex: [
                    -20,
                    -20,
                    -25,
                    -25,
                    -10,
                    0,
                    0,
                    -25
                ],
                vadieresis: [
                    -20,
                    -20,
                    -25,
                    -25,
                    -10,
                    0,
                    0,
                    -25
                ],
                vagrave: [
                    -20,
                    -20,
                    -25,
                    -25,
                    -10,
                    0,
                    0,
                    -25
                ],
                vamacron: [
                    -20,
                    -20,
                    -25,
                    -25,
                    -10,
                    0,
                    0,
                    -25
                ],
                vaogonek: [
                    -20,
                    -20,
                    -25,
                    -25,
                    -10,
                    0,
                    0,
                    -25
                ],
                varing: [
                    -20,
                    -20,
                    -25,
                    -25,
                    -10,
                    0,
                    0,
                    -25
                ],
                vatilde: [
                    -20,
                    -20,
                    -25,
                    -25,
                    -10,
                    0,
                    0,
                    -25
                ],
                vcomma: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -55,
                    -37,
                    -74,
                    -65
                ],
                vo: [
                    -30,
                    -30,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -20
                ],
                voacute: [
                    -30,
                    -30,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -20
                ],
                vocircumflex: [
                    -30,
                    -30,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -20
                ],
                vodieresis: [
                    -30,
                    -30,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -20
                ],
                vograve: [
                    -30,
                    -30,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -20
                ],
                vohungarumlaut: [
                    -30,
                    -30,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -20
                ],
                vomacron: [
                    -30,
                    -30,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -20
                ],
                voslash: [
                    -30,
                    -30,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -20
                ],
                votilde: [
                    -30,
                    -30,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -20
                ],
                vperiod: [
                    -80,
                    -80,
                    -80,
                    -80,
                    -70,
                    -37,
                    -74,
                    -65
                ],
                wcomma: [
                    -40,
                    -40,
                    -60,
                    -60,
                    -55,
                    -37,
                    -74,
                    -65
                ],
                wo: [
                    -20,
                    -20,
                    -10,
                    -10,
                    -10,
                    -15,
                    0,
                    -10
                ],
                woacute: [
                    -20,
                    -20,
                    -10,
                    -10,
                    -10,
                    -15,
                    0,
                    -10
                ],
                wocircumflex: [
                    -20,
                    -20,
                    -10,
                    -10,
                    -10,
                    -15,
                    0,
                    -10
                ],
                wodieresis: [
                    -20,
                    -20,
                    -10,
                    -10,
                    -10,
                    -15,
                    0,
                    -10
                ],
                wograve: [
                    -20,
                    -20,
                    -10,
                    -10,
                    -10,
                    -15,
                    0,
                    -10
                ],
                wohungarumlaut: [
                    -20,
                    -20,
                    -10,
                    -10,
                    -10,
                    -15,
                    0,
                    -10
                ],
                womacron: [
                    -20,
                    -20,
                    -10,
                    -10,
                    -10,
                    -15,
                    0,
                    -10
                ],
                woslash: [
                    -20,
                    -20,
                    -10,
                    -10,
                    -10,
                    -15,
                    0,
                    -10
                ],
                wotilde: [
                    -20,
                    -20,
                    -10,
                    -10,
                    -10,
                    -15,
                    0,
                    -10
                ],
                wperiod: [
                    -40,
                    -40,
                    -60,
                    -60,
                    -70,
                    -37,
                    -74,
                    -65
                ],
                xe: [
                    -10,
                    -10,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -15
                ],
                xeacute: [
                    -10,
                    -10,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -15
                ],
                xecaron: [
                    -10,
                    -10,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -15
                ],
                xecircumflex: [
                    -10,
                    -10,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -15
                ],
                xedieresis: [
                    -10,
                    -10,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -15
                ],
                xedotaccent: [
                    -10,
                    -10,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -15
                ],
                xegrave: [
                    -10,
                    -10,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -15
                ],
                xemacron: [
                    -10,
                    -10,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -15
                ],
                xeogonek: [
                    -10,
                    -10,
                    -30,
                    -30,
                    0,
                    -10,
                    0,
                    -15
                ],
                ya: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yaacute: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yabreve: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yacircumflex: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yadieresis: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yagrave: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yamacron: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yaogonek: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yaring: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yatilde: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                ycomma: [
                    -80,
                    -80,
                    -100,
                    -100,
                    -55,
                    -37,
                    -55,
                    -65
                ],
                ye: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yeacute: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yecaron: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yecircumflex: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yedieresis: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yedotaccent: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yegrave: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yemacron: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yeogonek: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yo: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yoacute: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yocircumflex: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yodieresis: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yograve: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yohungarumlaut: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yomacron: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yoslash: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yotilde: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yperiod: [
                    -80,
                    -80,
                    -100,
                    -100,
                    -70,
                    -37,
                    -55,
                    -65
                ],
                yacutea: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yacuteaacute: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yacuteabreve: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yacuteacircumflex: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yacuteadieresis: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yacuteagrave: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yacuteamacron: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yacuteaogonek: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yacutearing: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yacuteatilde: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                yacutecomma: [
                    -80,
                    -80,
                    -100,
                    -100,
                    -55,
                    -37,
                    -55,
                    -65
                ],
                yacutee: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yacuteeacute: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yacuteecaron: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yacuteecircumflex: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yacuteedieresis: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yacuteedotaccent: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yacuteegrave: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yacuteemacron: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yacuteeogonek: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                yacuteo: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yacuteoacute: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yacuteocircumflex: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yacuteodieresis: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yacuteograve: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yacuteohungarumlaut: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yacuteomacron: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yacuteoslash: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yacuteotilde: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                yacuteperiod: [
                    -80,
                    -80,
                    -100,
                    -100,
                    -70,
                    -37,
                    -55,
                    -65
                ],
                ydieresisa: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                ydieresisaacute: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                ydieresisabreve: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                ydieresisacircumflex: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                ydieresisadieresis: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                ydieresisagrave: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                ydieresisamacron: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                ydieresisaogonek: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                ydieresisaring: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                ydieresisatilde: [
                    -30,
                    -30,
                    -20,
                    -20
                ],
                ydieresiscomma: [
                    -80,
                    -80,
                    -100,
                    -100,
                    -55,
                    -37,
                    -55,
                    -65
                ],
                ydieresise: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                ydieresiseacute: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                ydieresisecaron: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                ydieresisecircumflex: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                ydieresisedieresis: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                ydieresisedotaccent: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                ydieresisegrave: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                ydieresisemacron: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                ydieresiseogonek: [
                    -10,
                    -10,
                    -20,
                    -20,
                    -10
                ],
                ydieresiso: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                ydieresisoacute: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                ydieresisocircumflex: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                ydieresisodieresis: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                ydieresisograve: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                ydieresisohungarumlaut: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                ydieresisomacron: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                ydieresisoslash: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                ydieresisotilde: [
                    -25,
                    -25,
                    -20,
                    -20,
                    -25
                ],
                ydieresisperiod: [
                    -80,
                    -80,
                    -100,
                    -100,
                    -70,
                    -37,
                    -55,
                    -65
                ],
                ze: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zeacute: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zecaron: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zecircumflex: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zedieresis: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zedotaccent: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zegrave: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zemacron: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zeogonek: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zacutee: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zacuteeacute: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zacuteecaron: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zacuteecircumflex: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zacuteedieresis: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zacuteedotaccent: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zacuteegrave: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zacuteemacron: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zacuteeogonek: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zcarone: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zcaroneacute: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zcaronecaron: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zcaronecircumflex: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zcaronedieresis: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zcaronedotaccent: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zcaronegrave: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zcaronemacron: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zcaroneogonek: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zdotaccente: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zdotaccenteacute: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zdotaccentecaron: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zdotaccentecircumflex: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zdotaccentedieresis: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zdotaccentedotaccent: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zdotaccentegrave: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zdotaccentemacron: [
                    10,
                    10,
                    -15,
                    -15
                ],
                zdotaccenteogonek: [
                    10,
                    10,
                    -15,
                    -15
                ],
                Bcomma: [
                    0,
                    0,
                    -20,
                    -20
                ],
                Bperiod: [
                    0,
                    0,
                    -20,
                    -20
                ],
                Ccomma: [
                    0,
                    0,
                    -30,
                    -30
                ],
                Cperiod: [
                    0,
                    0,
                    -30,
                    -30
                ],
                Cacutecomma: [
                    0,
                    0,
                    -30,
                    -30
                ],
                Cacuteperiod: [
                    0,
                    0,
                    -30,
                    -30
                ],
                Ccaroncomma: [
                    0,
                    0,
                    -30,
                    -30
                ],
                Ccaronperiod: [
                    0,
                    0,
                    -30,
                    -30
                ],
                Ccedillacomma: [
                    0,
                    0,
                    -30,
                    -30
                ],
                Ccedillaperiod: [
                    0,
                    0,
                    -30,
                    -30
                ],
                Fe: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -100,
                    -75
                ],
                Feacute: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -100,
                    -75
                ],
                Fecaron: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -100,
                    -75
                ],
                Fecircumflex: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -100,
                    -75
                ],
                Fedieresis: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -100,
                    -75
                ],
                Fedotaccent: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -100,
                    -75
                ],
                Fegrave: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -100,
                    -75
                ],
                Femacron: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -100,
                    -75
                ],
                Feogonek: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -100,
                    -75
                ],
                Fo: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -70,
                    -105,
                    -15
                ],
                Foacute: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -70,
                    -105,
                    -15
                ],
                Focircumflex: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -70,
                    -105,
                    -15
                ],
                Fodieresis: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -70,
                    -105,
                    -15
                ],
                Fograve: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -70,
                    -105,
                    -15
                ],
                Fohungarumlaut: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -70,
                    -105,
                    -15
                ],
                Fomacron: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -70,
                    -105,
                    -15
                ],
                Foslash: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -70,
                    -105,
                    -15
                ],
                Fotilde: [
                    0,
                    0,
                    -30,
                    -30,
                    -25,
                    -70,
                    -105,
                    -15
                ],
                Fr: [
                    0,
                    0,
                    -45,
                    -45,
                    0,
                    -50,
                    -55
                ],
                Fracute: [
                    0,
                    0,
                    -45,
                    -45,
                    0,
                    -50,
                    -55
                ],
                Frcaron: [
                    0,
                    0,
                    -45,
                    -45,
                    0,
                    -50,
                    -55
                ],
                Frcommaaccent: [
                    0,
                    0,
                    -45,
                    -45,
                    0,
                    -50,
                    -55
                ],
                Ja: [
                    0,
                    0,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Jaacute: [
                    0,
                    0,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Jabreve: [
                    0,
                    0,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Jacircumflex: [
                    0,
                    0,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Jadieresis: [
                    0,
                    0,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Jagrave: [
                    0,
                    0,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Jamacron: [
                    0,
                    0,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Jaogonek: [
                    0,
                    0,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Jaring: [
                    0,
                    0,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                Jatilde: [
                    0,
                    0,
                    -20,
                    -20,
                    -15,
                    -40,
                    -35
                ],
                LcaronT: [
                    0,
                    0,
                    -110,
                    -110
                ],
                LcaronTcaron: [
                    0,
                    0,
                    -110,
                    -110
                ],
                LcaronTcommaaccent: [
                    0,
                    0,
                    -110,
                    -110
                ],
                LcaronV: [
                    0,
                    0,
                    -110,
                    -110
                ],
                LcaronW: [
                    0,
                    0,
                    -70,
                    -70
                ],
                LcaronY: [
                    0,
                    0,
                    -140,
                    -140
                ],
                LcaronYacute: [
                    0,
                    0,
                    -140,
                    -140
                ],
                LcaronYdieresis: [
                    0,
                    0,
                    -140,
                    -140
                ],
                Lcaronquotedblright: [
                    0,
                    0,
                    -140,
                    -140
                ],
                Lcaronquoteright: [
                    0,
                    0,
                    -160,
                    -160,
                    0,
                    0,
                    0,
                    -92
                ],
                Lcarony: [
                    0,
                    0,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -55
                ],
                Lcaronyacute: [
                    0,
                    0,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -55
                ],
                Lcaronydieresis: [
                    0,
                    0,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -55
                ],
                Scomma: [
                    0,
                    0,
                    -20,
                    -20
                ],
                Speriod: [
                    0,
                    0,
                    -20,
                    -20
                ],
                Sacutecomma: [
                    0,
                    0,
                    -20,
                    -20
                ],
                Sacuteperiod: [
                    0,
                    0,
                    -20,
                    -20
                ],
                Scaroncomma: [
                    0,
                    0,
                    -20,
                    -20
                ],
                Scaronperiod: [
                    0,
                    0,
                    -20,
                    -20
                ],
                Scedillacomma: [
                    0,
                    0,
                    -20,
                    -20
                ],
                Scedillaperiod: [
                    0,
                    0,
                    -20,
                    -20
                ],
                Scommaaccentcomma: [
                    0,
                    0,
                    -20,
                    -20
                ],
                Scommaaccentperiod: [
                    0,
                    0,
                    -20,
                    -20
                ],
                Trcaron: [
                    0,
                    0,
                    -120,
                    -120,
                    -74,
                    -37,
                    -55,
                    -35
                ],
                Tcaronrcaron: [
                    0,
                    0,
                    -120,
                    -120,
                    -74,
                    -37,
                    -55,
                    -35
                ],
                Tcommaaccentrcaron: [
                    0,
                    0,
                    -120,
                    -120,
                    -74,
                    -37,
                    -55,
                    -35
                ],
                Yhyphen: [
                    0,
                    0,
                    -140,
                    -140,
                    -92,
                    -92,
                    -74,
                    -111
                ],
                Yi: [
                    0,
                    0,
                    -20,
                    -20,
                    -37,
                    -55,
                    -74,
                    -55
                ],
                Yiacute: [
                    0,
                    0,
                    -20,
                    -20,
                    -37,
                    -55,
                    -74,
                    -55
                ],
                Yiogonek: [
                    0,
                    0,
                    -20,
                    -20,
                    -37,
                    -55,
                    -74,
                    -55
                ],
                Yacutehyphen: [
                    0,
                    0,
                    -140,
                    -140,
                    -92,
                    -92,
                    -74,
                    -111
                ],
                Yacutei: [
                    0,
                    0,
                    -20,
                    -20,
                    -37,
                    -55,
                    -74,
                    -55
                ],
                Yacuteiacute: [
                    0,
                    0,
                    -20,
                    -20,
                    -37,
                    -55,
                    -74,
                    -55
                ],
                Yacuteiogonek: [
                    0,
                    0,
                    -20,
                    -20,
                    -37,
                    -55,
                    -74,
                    -55
                ],
                Ydieresishyphen: [
                    0,
                    0,
                    -140,
                    -140,
                    -92,
                    -92,
                    -74,
                    -111
                ],
                Ydieresisi: [
                    0,
                    0,
                    -20,
                    -20,
                    -37,
                    -55,
                    -74,
                    -55
                ],
                Ydieresisiacute: [
                    0,
                    0,
                    -20,
                    -20,
                    -37,
                    -55,
                    -74,
                    -55
                ],
                Ydieresisiogonek: [
                    0,
                    0,
                    -20,
                    -20,
                    -37,
                    -55,
                    -74,
                    -55
                ],
                bb: [
                    0,
                    0,
                    -10,
                    -10,
                    -10,
                    -10
                ],
                bcomma: [
                    0,
                    0,
                    -40,
                    -40
                ],
                bperiod: [
                    0,
                    0,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40,
                    -40
                ],
                ccomma: [
                    0,
                    0,
                    -15,
                    -15
                ],
                cacutecomma: [
                    0,
                    0,
                    -15,
                    -15
                ],
                ccaroncomma: [
                    0,
                    0,
                    -15,
                    -15
                ],
                ccedillacomma: [
                    0,
                    0,
                    -15,
                    -15
                ],
                fa: [
                    0,
                    0,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -10
                ],
                faacute: [
                    0,
                    0,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -10
                ],
                fabreve: [
                    0,
                    0,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -10
                ],
                facircumflex: [
                    0,
                    0,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -10
                ],
                fadieresis: [
                    0,
                    0,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -10
                ],
                fagrave: [
                    0,
                    0,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -10
                ],
                famacron: [
                    0,
                    0,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -10
                ],
                faogonek: [
                    0,
                    0,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -10
                ],
                faring: [
                    0,
                    0,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -10
                ],
                fatilde: [
                    0,
                    0,
                    -30,
                    -30,
                    0,
                    0,
                    0,
                    -10
                ],
                fdotlessi: [
                    0,
                    0,
                    -28,
                    -28,
                    -35,
                    -30,
                    -60,
                    -50
                ],
                gr: [
                    0,
                    0,
                    -10,
                    -10
                ],
                gracute: [
                    0,
                    0,
                    -10,
                    -10
                ],
                grcaron: [
                    0,
                    0,
                    -10,
                    -10
                ],
                grcommaaccent: [
                    0,
                    0,
                    -10,
                    -10
                ],
                gbrever: [
                    0,
                    0,
                    -10,
                    -10
                ],
                gbreveracute: [
                    0,
                    0,
                    -10,
                    -10
                ],
                gbrevercaron: [
                    0,
                    0,
                    -10,
                    -10
                ],
                gbrevercommaaccent: [
                    0,
                    0,
                    -10,
                    -10
                ],
                gcommaaccentr: [
                    0,
                    0,
                    -10,
                    -10
                ],
                gcommaaccentracute: [
                    0,
                    0,
                    -10,
                    -10
                ],
                gcommaaccentrcaron: [
                    0,
                    0,
                    -10,
                    -10
                ],
                gcommaaccentrcommaaccent: [
                    0,
                    0,
                    -10,
                    -10
                ],
                ke: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                keacute: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                kecaron: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                kecircumflex: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                kedieresis: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                kedotaccent: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                kegrave: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                kemacron: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                keogonek: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                kcommaaccente: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                kcommaaccenteacute: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                kcommaaccentecaron: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                kcommaaccentecircumflex: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                kcommaaccentedieresis: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                kcommaaccentedotaccent: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                kcommaaccentegrave: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                kcommaaccentemacron: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                kcommaaccenteogonek: [
                    0,
                    0,
                    -20,
                    -20,
                    -10,
                    -30,
                    -10,
                    -10
                ],
                ocomma: [
                    0,
                    0,
                    -40,
                    -40
                ],
                operiod: [
                    0,
                    0,
                    -40,
                    -40
                ],
                oacutecomma: [
                    0,
                    0,
                    -40,
                    -40
                ],
                oacuteperiod: [
                    0,
                    0,
                    -40,
                    -40
                ],
                ocircumflexcomma: [
                    0,
                    0,
                    -40,
                    -40
                ],
                ocircumflexperiod: [
                    0,
                    0,
                    -40,
                    -40
                ],
                odieresiscomma: [
                    0,
                    0,
                    -40,
                    -40
                ],
                odieresisperiod: [
                    0,
                    0,
                    -40,
                    -40
                ],
                ogravecomma: [
                    0,
                    0,
                    -40,
                    -40
                ],
                ograveperiod: [
                    0,
                    0,
                    -40,
                    -40
                ],
                ohungarumlautcomma: [
                    0,
                    0,
                    -40,
                    -40
                ],
                ohungarumlautperiod: [
                    0,
                    0,
                    -40,
                    -40
                ],
                omacroncomma: [
                    0,
                    0,
                    -40,
                    -40
                ],
                omacronperiod: [
                    0,
                    0,
                    -40,
                    -40
                ],
                oslasha: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashaacute: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashabreve: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashacircumflex: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashadieresis: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashagrave: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashamacron: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashaogonek: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslasharing: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashatilde: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashb: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashc: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashcacute: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashccaron: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashccedilla: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashcomma: [
                    0,
                    0,
                    -95,
                    -95
                ],
                oslashd: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashdcroat: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashe: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslasheacute: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashecaron: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashecircumflex: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashedieresis: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashedotaccent: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashegrave: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashemacron: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslasheogonek: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashf: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashg: [
                    0,
                    0,
                    -55,
                    -55,
                    0,
                    0,
                    -10
                ],
                oslashgbreve: [
                    0,
                    0,
                    -55,
                    -55,
                    0,
                    0,
                    -10
                ],
                oslashgcommaaccent: [
                    0,
                    0,
                    -55,
                    -55,
                    0,
                    0,
                    -10
                ],
                oslashh: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashi: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashiacute: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashicircumflex: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashidieresis: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashigrave: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashimacron: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashiogonek: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashj: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashk: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashkcommaaccent: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashl: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashlacute: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashlcommaaccent: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashlslash: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashm: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashn: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashnacute: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashncaron: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashncommaaccent: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashntilde: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslasho: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashoacute: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashocircumflex: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashodieresis: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashograve: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashohungarumlaut: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashomacron: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashoslash: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashotilde: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashp: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashperiod: [
                    0,
                    0,
                    -95,
                    -95
                ],
                oslashq: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashr: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashracute: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashrcaron: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashrcommaaccent: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashs: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashsacute: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashscaron: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashscedilla: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashscommaaccent: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslasht: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashtcommaaccent: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashu: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashuacute: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashucircumflex: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashudieresis: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashugrave: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashuhungarumlaut: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashumacron: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashuogonek: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashuring: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashz: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashzacute: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashzcaron: [
                    0,
                    0,
                    -55,
                    -55
                ],
                oslashzdotaccent: [
                    0,
                    0,
                    -55,
                    -55
                ],
                otildecomma: [
                    0,
                    0,
                    -40,
                    -40
                ],
                otildeperiod: [
                    0,
                    0,
                    -40,
                    -40
                ],
                pcomma: [
                    0,
                    0,
                    -35,
                    -35
                ],
                pperiod: [
                    0,
                    0,
                    -35,
                    -35
                ],
                ra: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                raacute: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rabreve: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                racircumflex: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                radieresis: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                ragrave: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                ramacron: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                raogonek: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                raring: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                ratilde: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcolon: [
                    0,
                    0,
                    30,
                    30
                ],
                ri: [
                    0,
                    0,
                    15,
                    15
                ],
                riacute: [
                    0,
                    0,
                    15,
                    15
                ],
                ricircumflex: [
                    0,
                    0,
                    15,
                    15
                ],
                ridieresis: [
                    0,
                    0,
                    15,
                    15
                ],
                rigrave: [
                    0,
                    0,
                    15,
                    15
                ],
                rimacron: [
                    0,
                    0,
                    15,
                    15
                ],
                riogonek: [
                    0,
                    0,
                    15,
                    15
                ],
                rk: [
                    0,
                    0,
                    15,
                    15
                ],
                rkcommaaccent: [
                    0,
                    0,
                    15,
                    15
                ],
                rl: [
                    0,
                    0,
                    15,
                    15
                ],
                rlacute: [
                    0,
                    0,
                    15,
                    15
                ],
                rlcommaaccent: [
                    0,
                    0,
                    15,
                    15
                ],
                rlslash: [
                    0,
                    0,
                    15,
                    15
                ],
                rm: [
                    0,
                    0,
                    25,
                    25
                ],
                rn: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                rnacute: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                rncaron: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                rncommaaccent: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                rntilde: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                rp: [
                    0,
                    0,
                    30,
                    30,
                    -10
                ],
                rsemicolon: [
                    0,
                    0,
                    30,
                    30
                ],
                ru: [
                    0,
                    0,
                    15,
                    15
                ],
                ruacute: [
                    0,
                    0,
                    15,
                    15
                ],
                rucircumflex: [
                    0,
                    0,
                    15,
                    15
                ],
                rudieresis: [
                    0,
                    0,
                    15,
                    15
                ],
                rugrave: [
                    0,
                    0,
                    15,
                    15
                ],
                ruhungarumlaut: [
                    0,
                    0,
                    15,
                    15
                ],
                rumacron: [
                    0,
                    0,
                    15,
                    15
                ],
                ruogonek: [
                    0,
                    0,
                    15,
                    15
                ],
                ruring: [
                    0,
                    0,
                    15,
                    15
                ],
                racutea: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                racuteaacute: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                racuteabreve: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                racuteacircumflex: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                racuteadieresis: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                racuteagrave: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                racuteamacron: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                racuteaogonek: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                racutearing: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                racuteatilde: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                racutecolon: [
                    0,
                    0,
                    30,
                    30
                ],
                racutei: [
                    0,
                    0,
                    15,
                    15
                ],
                racuteiacute: [
                    0,
                    0,
                    15,
                    15
                ],
                racuteicircumflex: [
                    0,
                    0,
                    15,
                    15
                ],
                racuteidieresis: [
                    0,
                    0,
                    15,
                    15
                ],
                racuteigrave: [
                    0,
                    0,
                    15,
                    15
                ],
                racuteimacron: [
                    0,
                    0,
                    15,
                    15
                ],
                racuteiogonek: [
                    0,
                    0,
                    15,
                    15
                ],
                racutek: [
                    0,
                    0,
                    15,
                    15
                ],
                racutekcommaaccent: [
                    0,
                    0,
                    15,
                    15
                ],
                racutel: [
                    0,
                    0,
                    15,
                    15
                ],
                racutelacute: [
                    0,
                    0,
                    15,
                    15
                ],
                racutelcommaaccent: [
                    0,
                    0,
                    15,
                    15
                ],
                racutelslash: [
                    0,
                    0,
                    15,
                    15
                ],
                racutem: [
                    0,
                    0,
                    25,
                    25
                ],
                racuten: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                racutenacute: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                racutencaron: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                racutencommaaccent: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                racutentilde: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                racutep: [
                    0,
                    0,
                    30,
                    30,
                    -10
                ],
                racutesemicolon: [
                    0,
                    0,
                    30,
                    30
                ],
                racuteu: [
                    0,
                    0,
                    15,
                    15
                ],
                racuteuacute: [
                    0,
                    0,
                    15,
                    15
                ],
                racuteucircumflex: [
                    0,
                    0,
                    15,
                    15
                ],
                racuteudieresis: [
                    0,
                    0,
                    15,
                    15
                ],
                racuteugrave: [
                    0,
                    0,
                    15,
                    15
                ],
                racuteuhungarumlaut: [
                    0,
                    0,
                    15,
                    15
                ],
                racuteumacron: [
                    0,
                    0,
                    15,
                    15
                ],
                racuteuogonek: [
                    0,
                    0,
                    15,
                    15
                ],
                racuteuring: [
                    0,
                    0,
                    15,
                    15
                ],
                rcarona: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcaronaacute: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcaronabreve: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcaronacircumflex: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcaronadieresis: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcaronagrave: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcaronamacron: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcaronaogonek: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcaronaring: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcaronatilde: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcaroncolon: [
                    0,
                    0,
                    30,
                    30
                ],
                rcaroni: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaroniacute: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronicircumflex: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronidieresis: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronigrave: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronimacron: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaroniogonek: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronk: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronkcommaaccent: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronl: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronlacute: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronlcommaaccent: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronlslash: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronm: [
                    0,
                    0,
                    25,
                    25
                ],
                rcaronn: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                rcaronnacute: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                rcaronncaron: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                rcaronncommaaccent: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                rcaronntilde: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                rcaronp: [
                    0,
                    0,
                    30,
                    30,
                    -10
                ],
                rcaronsemicolon: [
                    0,
                    0,
                    30,
                    30
                ],
                rcaronu: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronuacute: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronucircumflex: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronudieresis: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronugrave: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronuhungarumlaut: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronumacron: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronuogonek: [
                    0,
                    0,
                    15,
                    15
                ],
                rcaronuring: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccenta: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcommaaccentaacute: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcommaaccentabreve: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcommaaccentacircumflex: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcommaaccentadieresis: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcommaaccentagrave: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcommaaccentamacron: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcommaaccentaogonek: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcommaaccentaring: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcommaaccentatilde: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    0,
                    -15
                ],
                rcommaaccentcolon: [
                    0,
                    0,
                    30,
                    30
                ],
                rcommaaccenti: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentiacute: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccenticircumflex: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentidieresis: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentigrave: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentimacron: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentiogonek: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentk: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentkcommaaccent: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentl: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentlacute: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentlcommaaccent: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentlslash: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentm: [
                    0,
                    0,
                    25,
                    25
                ],
                rcommaaccentn: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                rcommaaccentnacute: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                rcommaaccentncaron: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                rcommaaccentncommaaccent: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                rcommaaccentntilde: [
                    0,
                    0,
                    25,
                    25,
                    -15
                ],
                rcommaaccentp: [
                    0,
                    0,
                    30,
                    30,
                    -10
                ],
                rcommaaccentsemicolon: [
                    0,
                    0,
                    30,
                    30
                ],
                rcommaaccentu: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentuacute: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentucircumflex: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentudieresis: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentugrave: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentuhungarumlaut: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentumacron: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccentuogonek: [
                    0,
                    0,
                    15,
                    15
                ],
                rcommaaccenturing: [
                    0,
                    0,
                    15,
                    15
                ],
                scomma: [
                    0,
                    0,
                    -15,
                    -15
                ],
                speriod: [
                    0,
                    0,
                    -15,
                    -15
                ],
                sacutecomma: [
                    0,
                    0,
                    -15,
                    -15
                ],
                sacuteperiod: [
                    0,
                    0,
                    -15,
                    -15
                ],
                scaroncomma: [
                    0,
                    0,
                    -15,
                    -15
                ],
                scaronperiod: [
                    0,
                    0,
                    -15,
                    -15
                ],
                scedillacomma: [
                    0,
                    0,
                    -15,
                    -15
                ],
                scedillaperiod: [
                    0,
                    0,
                    -15,
                    -15
                ],
                scommaaccentcomma: [
                    0,
                    0,
                    -15,
                    -15
                ],
                scommaaccentperiod: [
                    0,
                    0,
                    -15,
                    -15
                ],
                ve: [
                    0,
                    0,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -15
                ],
                veacute: [
                    0,
                    0,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -15
                ],
                vecaron: [
                    0,
                    0,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -15
                ],
                vecircumflex: [
                    0,
                    0,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -15
                ],
                vedieresis: [
                    0,
                    0,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -15
                ],
                vedotaccent: [
                    0,
                    0,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -15
                ],
                vegrave: [
                    0,
                    0,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -15
                ],
                vemacron: [
                    0,
                    0,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -15
                ],
                veogonek: [
                    0,
                    0,
                    -25,
                    -25,
                    -10,
                    -15,
                    0,
                    -15
                ],
                wa: [
                    0,
                    0,
                    -15,
                    -15,
                    0,
                    -10,
                    0,
                    -10
                ],
                waacute: [
                    0,
                    0,
                    -15,
                    -15,
                    0,
                    -10,
                    0,
                    -10
                ],
                wabreve: [
                    0,
                    0,
                    -15,
                    -15,
                    0,
                    -10,
                    0,
                    -10
                ],
                wacircumflex: [
                    0,
                    0,
                    -15,
                    -15,
                    0,
                    -10,
                    0,
                    -10
                ],
                wadieresis: [
                    0,
                    0,
                    -15,
                    -15,
                    0,
                    -10,
                    0,
                    -10
                ],
                wagrave: [
                    0,
                    0,
                    -15,
                    -15,
                    0,
                    -10,
                    0,
                    -10
                ],
                wamacron: [
                    0,
                    0,
                    -15,
                    -15,
                    0,
                    -10,
                    0,
                    -10
                ],
                waogonek: [
                    0,
                    0,
                    -15,
                    -15,
                    0,
                    -10,
                    0,
                    -10
                ],
                waring: [
                    0,
                    0,
                    -15,
                    -15,
                    0,
                    -10,
                    0,
                    -10
                ],
                watilde: [
                    0,
                    0,
                    -15,
                    -15,
                    0,
                    -10,
                    0,
                    -10
                ],
                we: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    -10
                ],
                weacute: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    -10
                ],
                wecaron: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    -10
                ],
                wecircumflex: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    -10
                ],
                wedieresis: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    -10
                ],
                wedotaccent: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    -10
                ],
                wegrave: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    -10
                ],
                wemacron: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    -10
                ],
                weogonek: [
                    0,
                    0,
                    -10,
                    -10,
                    0,
                    -10
                ],
                zo: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zoacute: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zocircumflex: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zodieresis: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zograve: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zohungarumlaut: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zomacron: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zoslash: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zotilde: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zacuteo: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zacuteoacute: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zacuteocircumflex: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zacuteodieresis: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zacuteograve: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zacuteohungarumlaut: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zacuteomacron: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zacuteoslash: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zacuteotilde: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zcarono: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zcaronoacute: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zcaronocircumflex: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zcaronodieresis: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zcaronograve: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zcaronohungarumlaut: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zcaronomacron: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zcaronoslash: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zcaronotilde: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zdotaccento: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zdotaccentoacute: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zdotaccentocircumflex: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zdotaccentodieresis: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zdotaccentograve: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zdotaccentohungarumlaut: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zdotaccentomacron: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zdotaccentoslash: [
                    0,
                    0,
                    -15,
                    -15
                ],
                zdotaccentotilde: [
                    0,
                    0,
                    -15,
                    -15
                ],
                Ap: [
                    0,
                    0,
                    0,
                    0,
                    -25
                ],
                Aquoteright: [
                    0,
                    0,
                    0,
                    0,
                    -74,
                    -74,
                    -37,
                    -111
                ],
                Aacutep: [
                    0,
                    0,
                    0,
                    0,
                    -25
                ],
                Aacutequoteright: [
                    0,
                    0,
                    0,
                    0,
                    -74,
                    -74,
                    -37,
                    -111
                ],
                Abrevep: [
                    0,
                    0,
                    0,
                    0,
                    -25
                ],
                Abrevequoteright: [
                    0,
                    0,
                    0,
                    0,
                    -74,
                    -74,
                    -37,
                    -111
                ],
                Acircumflexp: [
                    0,
                    0,
                    0,
                    0,
                    -25
                ],
                Acircumflexquoteright: [
                    0,
                    0,
                    0,
                    0,
                    -74,
                    -74,
                    -37,
                    -111
                ],
                Adieresisp: [
                    0,
                    0,
                    0,
                    0,
                    -25
                ],
                Adieresisquoteright: [
                    0,
                    0,
                    0,
                    0,
                    -74,
                    -74,
                    -37,
                    -111
                ],
                Agravep: [
                    0,
                    0,
                    0,
                    0,
                    -25
                ],
                Agravequoteright: [
                    0,
                    0,
                    0,
                    0,
                    -74,
                    -74,
                    -37,
                    -111
                ],
                Amacronp: [
                    0,
                    0,
                    0,
                    0,
                    -25
                ],
                Amacronquoteright: [
                    0,
                    0,
                    0,
                    0,
                    -74,
                    -74,
                    -37,
                    -111
                ],
                Aogonekp: [
                    0,
                    0,
                    0,
                    0,
                    -25
                ],
                Aogonekquoteright: [
                    0,
                    0,
                    0,
                    0,
                    -74,
                    -74,
                    -37,
                    -111
                ],
                Aringp: [
                    0,
                    0,
                    0,
                    0,
                    -25
                ],
                Aringquoteright: [
                    0,
                    0,
                    0,
                    0,
                    -74,
                    -74,
                    -37,
                    -111
                ],
                Atildep: [
                    0,
                    0,
                    0,
                    0,
                    -25
                ],
                Atildequoteright: [
                    0,
                    0,
                    0,
                    0,
                    -74,
                    -74,
                    -37,
                    -111
                ],
                Je: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Jeacute: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Jecaron: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Jecircumflex: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Jedieresis: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Jedotaccent: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Jegrave: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Jemacron: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Jeogonek: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Jo: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Joacute: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Jocircumflex: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Jodieresis: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Jograve: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Johungarumlaut: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Jomacron: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Joslash: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                Jotilde: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    -40,
                    -25
                ],
                NA: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NAacute: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NAbreve: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NAcircumflex: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NAdieresis: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NAgrave: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NAmacron: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NAogonek: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NAring: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NAtilde: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NacuteA: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NacuteAacute: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NacuteAbreve: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NacuteAcircumflex: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NacuteAdieresis: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NacuteAgrave: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NacuteAmacron: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NacuteAogonek: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NacuteAring: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NacuteAtilde: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcaronA: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcaronAacute: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcaronAbreve: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcaronAcircumflex: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcaronAdieresis: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcaronAgrave: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcaronAmacron: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcaronAogonek: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcaronAring: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcaronAtilde: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcommaaccentA: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcommaaccentAacute: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcommaaccentAbreve: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcommaaccentAcircumflex: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcommaaccentAdieresis: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcommaaccentAgrave: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcommaaccentAmacron: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcommaaccentAogonek: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcommaaccentAring: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NcommaaccentAtilde: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NtildeA: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NtildeAacute: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NtildeAbreve: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NtildeAcircumflex: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NtildeAdieresis: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NtildeAgrave: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NtildeAmacron: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NtildeAogonek: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NtildeAring: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                NtildeAtilde: [
                    0,
                    0,
                    0,
                    0,
                    -20,
                    -30,
                    -27,
                    -35
                ],
                Ti: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    -37,
                    -55,
                    -35
                ],
                Tiacute: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    -37,
                    -55,
                    -35
                ],
                Tiogonek: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    -37,
                    -55,
                    -35
                ],
                Tcaroni: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    -37,
                    -55,
                    -35
                ],
                Tcaroniacute: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    -37,
                    -55,
                    -35
                ],
                Tcaroniogonek: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    -37,
                    -55,
                    -35
                ],
                Tcommaaccenti: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    -37,
                    -55,
                    -35
                ],
                Tcommaaccentiacute: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    -37,
                    -55,
                    -35
                ],
                Tcommaaccentiogonek: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    -37,
                    -55,
                    -35
                ],
                Vi: [
                    0,
                    0,
                    0,
                    0,
                    -37,
                    -55,
                    -74,
                    -60
                ],
                Viacute: [
                    0,
                    0,
                    0,
                    0,
                    -37,
                    -55,
                    -74,
                    -60
                ],
                Vicircumflex: [
                    0,
                    0,
                    0,
                    0,
                    -37,
                    0,
                    -34,
                    -20
                ],
                Vidieresis: [
                    0,
                    0,
                    0,
                    0,
                    -37,
                    0,
                    -34,
                    -20
                ],
                Vigrave: [
                    0,
                    0,
                    0,
                    0,
                    -37,
                    0,
                    -34,
                    -20
                ],
                Vimacron: [
                    0,
                    0,
                    0,
                    0,
                    -37,
                    0,
                    -34,
                    -20
                ],
                Viogonek: [
                    0,
                    0,
                    0,
                    0,
                    -37,
                    -55,
                    -74,
                    -60
                ],
                Wi: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    -37,
                    -55,
                    -40
                ],
                Wiacute: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    -37,
                    -55,
                    -40
                ],
                Wiogonek: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    -37,
                    -55,
                    -40
                ],
                fi: [
                    0,
                    0,
                    0,
                    0,
                    -25,
                    0,
                    -20,
                    -20
                ],
                gperiod: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    0,
                    -15
                ],
                gbreveperiod: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    0,
                    -15
                ],
                gcommaaccentperiod: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    0,
                    -15
                ],
                iv: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -25
                ],
                iacutev: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -25
                ],
                icircumflexv: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -25
                ],
                idieresisv: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -25
                ],
                igravev: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -25
                ],
                imacronv: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -25
                ],
                iogonekv: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -25
                ],
                ky: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    0,
                    -10,
                    -15
                ],
                kyacute: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    0,
                    -10,
                    -15
                ],
                kydieresis: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    0,
                    -10,
                    -15
                ],
                kcommaaccenty: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    0,
                    -10,
                    -15
                ],
                kcommaaccentyacute: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    0,
                    -10,
                    -15
                ],
                kcommaaccentydieresis: [
                    0,
                    0,
                    0,
                    0,
                    -15,
                    0,
                    -10,
                    -15
                ],
                quotedblleftA: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quotedblleftAacute: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quotedblleftAbreve: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quotedblleftAcircumflex: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quotedblleftAdieresis: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quotedblleftAgrave: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quotedblleftAmacron: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quotedblleftAogonek: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quotedblleftAring: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quotedblleftAtilde: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quoteleftA: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quoteleftAacute: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quoteleftAbreve: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quoteleftAcircumflex: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quoteleftAdieresis: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quoteleftAgrave: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quoteleftAmacron: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quoteleftAogonek: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quoteleftAring: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                quoteleftAtilde: [
                    0,
                    0,
                    0,
                    0,
                    -10,
                    0,
                    0,
                    -80
                ],
                re: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                reacute: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                recaron: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                recircumflex: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                redieresis: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                redotaccent: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                regrave: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                remacron: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                reogonek: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                racutee: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                racuteeacute: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                racuteecaron: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                racuteecircumflex: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                racuteedieresis: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                racuteedotaccent: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                racuteegrave: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                racuteemacron: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                racuteeogonek: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcarone: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcaroneacute: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcaronecaron: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcaronecircumflex: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcaronedieresis: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcaronedotaccent: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcaronegrave: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcaronemacron: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcaroneogonek: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcommaaccente: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcommaaccenteacute: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcommaaccentecaron: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcommaaccentecircumflex: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcommaaccentedieresis: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcommaaccentedotaccent: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcommaaccentegrave: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcommaaccentemacron: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                rcommaaccenteogonek: [
                    0,
                    0,
                    0,
                    0,
                    -18,
                    0,
                    -37
                ],
                spaceA: [
                    0,
                    0,
                    0,
                    0,
                    -55,
                    -37,
                    -18,
                    -55
                ],
                spaceAacute: [
                    0,
                    0,
                    0,
                    0,
                    -55,
                    -37,
                    -18,
                    -55
                ],
                spaceAbreve: [
                    0,
                    0,
                    0,
                    0,
                    -55,
                    -37,
                    -18,
                    -55
                ],
                spaceAcircumflex: [
                    0,
                    0,
                    0,
                    0,
                    -55,
                    -37,
                    -18,
                    -55
                ],
                spaceAdieresis: [
                    0,
                    0,
                    0,
                    0,
                    -55,
                    -37,
                    -18,
                    -55
                ],
                spaceAgrave: [
                    0,
                    0,
                    0,
                    0,
                    -55,
                    -37,
                    -18,
                    -55
                ],
                spaceAmacron: [
                    0,
                    0,
                    0,
                    0,
                    -55,
                    -37,
                    -18,
                    -55
                ],
                spaceAogonek: [
                    0,
                    0,
                    0,
                    0,
                    -55,
                    -37,
                    -18,
                    -55
                ],
                spaceAring: [
                    0,
                    0,
                    0,
                    0,
                    -55,
                    -37,
                    -18,
                    -55
                ],
                spaceAtilde: [
                    0,
                    0,
                    0,
                    0,
                    -55,
                    -37,
                    -18,
                    -55
                ],
                Fi: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -45
                ],
                Fiacute: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -45
                ],
                Ficircumflex: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -45
                ],
                Fidieresis: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -45
                ],
                Figrave: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -45
                ],
                Fimacron: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -45
                ],
                Fiogonek: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -45
                ],
                eb: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                eacuteb: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ecaronb: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ecircumflexb: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                edieresisb: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                edotaccentb: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                egraveb: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                emacronb: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                eogonekb: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ff: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -18,
                    -18,
                    -25
                ],
                quoterightt: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -37,
                    -30,
                    -18
                ],
                quoterighttcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -37,
                    -30,
                    -18
                ],
                Yicircumflex: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -34
                ],
                Yidieresis: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -34
                ],
                Yigrave: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -34
                ],
                Yimacron: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -34
                ],
                Yacuteicircumflex: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -34
                ],
                Yacuteidieresis: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -34
                ],
                Yacuteigrave: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -34
                ],
                Yacuteimacron: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -34
                ],
                Ydieresisicircumflex: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -34
                ],
                Ydieresisidieresis: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -34
                ],
                Ydieresisigrave: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -34
                ],
                Ydieresisimacron: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -34
                ],
                eg: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                egbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                egcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                eacuteg: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                eacutegbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                eacutegcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                ecarong: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                ecarongbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                ecarongcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                ecircumflexg: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                ecircumflexgbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                ecircumflexgcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                edieresisg: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                edieresisgbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                edieresisgcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                edotaccentg: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                edotaccentgbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                edotaccentgcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                egraveg: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                egravegbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                egravegcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                emacrong: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                emacrongbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                emacrongcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                eogonekg: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                eogonekgbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                eogonekgcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -40,
                    -15
                ],
                fiogonek: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -20
                ],
                gcomma: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gbrevecomma: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                gcommaaccentcomma: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                og: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ogbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ogcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                oacuteg: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                oacutegbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                oacutegcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ocircumflexg: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ocircumflexgbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ocircumflexgcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                odieresisg: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                odieresisgbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                odieresisgcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ograveg: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ogravegbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ogravegcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ohungarumlautg: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ohungarumlautgbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                ohungarumlautgcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                omacrong: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                omacrongbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                omacrongcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                otildeg: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                otildegbreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                otildegcommaaccent: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -10
                ],
                fiacute: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -20
                ],
                ga: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gaacute: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gabreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gacircumflex: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gadieresis: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gagrave: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gamacron: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gaogonek: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                garing: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gatilde: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gbrevea: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gbreveaacute: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gbreveabreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gbreveacircumflex: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gbreveadieresis: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gbreveagrave: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gbreveamacron: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gbreveaogonek: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gbrevearing: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gbreveatilde: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gcommaaccenta: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gcommaaccentaacute: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gcommaaccentabreve: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gcommaaccentacircumflex: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gcommaaccentadieresis: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gcommaaccentagrave: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gcommaaccentamacron: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gcommaaccentaogonek: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gcommaaccentaring: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ],
                gcommaaccentatilde: [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -5
                ]
            };
            var data = {
                attributes: attributes,
                glyphWidths: glyphWidths,
                kernPairs: kernPairs
            };
            var initFont = function e(t) {
                return [
                    t.FontName,
                    {
                        attributes: t,
                        glyphWidths: {},
                        kernPairs: {}
                    }
                ];
            };
            var expandData = function e(t) {
                var r = t.attributes, n = t.glyphWidths, i = t.kernPairs;
                var a = r.map(initFont);
                Object.keys(n).forEach(function(e) {
                    n[e].forEach(function(t, r) {
                        if (t) a[r][1].glyphWidths[e] = t;
                    });
                });
                Object.keys(i).forEach(function(e) {
                    i[e].forEach(function(t, r) {
                        if (t) a[r][1].kernPairs[e] = t;
                    });
                });
                return Object.fromEntries(a);
            };
            var STANDARD_FONTS = expandData(data);
            var createStandardFont = function e(t) {
                return function(e) {
                    (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__.Z)(t, e);
                    function t(t, r, n) {
                        var i;
                        i = e.call(this) || this;
                        i.document = t;
                        i.name = r;
                        i.id = n;
                        i.font = AFMFont.fromJson(STANDARD_FONTS[i.name]);
                        i.ascender = i.font.ascender;
                        i.descender = i.font.descender;
                        i.bbox = i.font.bbox;
                        i.lineGap = i.font.lineGap;
                        return i;
                    }
                    var r = t.prototype;
                    r.embed = function e() {
                        this.dictionary.data = {
                            Type: 'Font',
                            BaseFont: this.name,
                            Subtype: 'Type1',
                            Encoding: 'WinAnsiEncoding'
                        };
                        return this.dictionary.end();
                    };
                    r.encode = function e(t) {
                        var r = this.font.encodeText(t);
                        var n = this.font.glyphsForString("" + t);
                        var i = this.font.advancesForGlyphs(n);
                        var a = [];
                        for(var o = 0; o < n.length; o++){
                            var c = n[o];
                            a.push({
                                xAdvance: i[o],
                                yAdvance: 0,
                                xOffset: 0,
                                yOffset: 0,
                                advanceWidth: this.font.widthOfGlyph(c)
                            });
                        }
                        return [
                            r,
                            a
                        ];
                    };
                    r.encodeGlyphs = function e(t) {
                        var r = [];
                        for(var n = 0, i = Array.from(t); n < i.length; n++){
                            var a = i[n];
                            r.push(("00" + a.id.toString(16)).slice(-2));
                        }
                        return r;
                    };
                    r.widthOfString = function e(t, r) {
                        var n = this.font.glyphsForString("" + t);
                        var i = this.font.advancesForGlyphs(n);
                        var a = 0;
                        for(var o = 0, c = Array.from(i); o < c.length; o++){
                            var s = c[o];
                            a += s;
                        }
                        var u = r / 1000;
                        return a * u;
                    };
                    t.isStandardFont = function e(t) {
                        return t in STANDARD_FONTS;
                    };
                    return t;
                }(t);
            };
            var toHex = function e() {
                for(var t = arguments.length, r = new Array(t), n = 0; n < t; n++){
                    r[n] = arguments[n];
                }
                var i = Array.from(r).map(function(e) {
                    return ("0000" + e.toString(16)).slice(-4);
                });
                return i.join('');
            };
            var createEmbeddedFont = function e(t) {
                return function(e) {
                    (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__.Z)(t, e);
                    function t(t, r, n) {
                        var i;
                        i = e.call(this) || this;
                        i.document = t;
                        i.font = r;
                        i.id = n;
                        i.subset = i.font.createSubset();
                        i.unicode = [
                            [
                                0
                            ]
                        ];
                        i.widths = [
                            i.font.getGlyph(0).advanceWidth
                        ];
                        i.name = i.font.postscriptName;
                        i.scale = 1000 / i.font.unitsPerEm;
                        i.ascender = i.font.ascent * i.scale;
                        i.descender = i.font.descent * i.scale;
                        i.xHeight = i.font.xHeight * i.scale;
                        i.capHeight = i.font.capHeight * i.scale;
                        i.lineGap = i.font.lineGap * i.scale;
                        i.bbox = i.font.bbox;
                        i.layoutCache = Object.create(null);
                        return i;
                    }
                    var r = t.prototype;
                    r.layoutRun = function e(t, r) {
                        var n = this.font.layout(t, r);
                        for(var i = 0; i < n.positions.length; i++){
                            var a = n.positions[i];
                            for(var o in a){
                                a[o] *= this.scale;
                            }
                            a.advanceWidth = n.glyphs[i].advanceWidth * this.scale;
                        }
                        return n;
                    };
                    r.layoutCached = function e(t) {
                        var r;
                        if (r = this.layoutCache[t]) {
                            return r;
                        }
                        var n = this.layoutRun(t);
                        this.layoutCache[t] = n;
                        return n;
                    };
                    r.layout = function e(t, r, n) {
                        if (n == null) {
                            n = false;
                        }
                        if (r) {
                            return this.layoutRun(t, r);
                        }
                        var i = n ? null : [];
                        var a = n ? null : [];
                        var o = 0;
                        var c = 0;
                        var s = 0;
                        while(s <= t.length){
                            var u;
                            if (s === t.length && c < s || (u = t.charAt(s), [
                                ' ',
                                '\t'
                            ].includes(u))) {
                                var f = this.layoutCached(t.slice(c, ++s));
                                if (!n) {
                                    i.push.apply(i, Array.from(f.glyphs || []));
                                    a.push.apply(a, Array.from(f.positions || []));
                                }
                                o += f.advanceWidth;
                                c = s;
                            } else {
                                s++;
                            }
                        }
                        return {
                            glyphs: i,
                            positions: a,
                            advanceWidth: o
                        };
                    };
                    r.encode = function e(t, r) {
                        var n = this.layout(t, r), i = n.glyphs, a = n.positions;
                        var o = [];
                        for(var c = 0; c < i.length; c++){
                            var s = i[c];
                            var u = this.subset.includeGlyph(s.id);
                            o.push(("0000" + u.toString(16)).slice(-4));
                            if (this.widths[u] == null) {
                                this.widths[u] = s.advanceWidth * this.scale;
                            }
                            if (this.unicode[u] == null) {
                                this.unicode[u] = this.font._cmapProcessor.codePointsForGlyph(s.id);
                            }
                        }
                        return [
                            o,
                            a
                        ];
                    };
                    r.encodeGlyphs = function e(t) {
                        var r = [];
                        for(var n = 0; n < t.length; n++){
                            var i = t[n];
                            var a = this.subset.includeGlyph(i.id);
                            r.push(("0000" + a.toString(16)).slice(-4));
                            if (this.widths[a] == null) {
                                this.widths[a] = i.advanceWidth * this.scale;
                            }
                            if (this.unicode[a] == null) {
                                this.unicode[a] = this.font._cmapProcessor.codePointsForGlyph(i.id);
                            }
                        }
                        return r;
                    };
                    r.widthOfString = function e(t, r, n) {
                        var i = this.layout(t, n, true).advanceWidth;
                        var a = r / 1000;
                        return i * a;
                    };
                    r.embed = function e() {
                        var t = this.subset.cff != null;
                        var r = this.document.ref();
                        if (t) {
                            r.data.Subtype = 'CIDFontType0C';
                        }
                        r.end(this.subset.encode());
                        var n = ((this.font['OS/2'] != null ? this.font['OS/2'].sFamilyClass : undefined) || 0) >> 8;
                        var i = 0;
                        if (this.font.post.isFixedPitch) {
                            i |= 1 << 0;
                        }
                        if (1 <= n && n <= 7) {
                            i |= 1 << 1;
                        }
                        i |= 1 << 2;
                        if (n === 10) {
                            i |= 1 << 3;
                        }
                        if (this.font.head.macStyle.italic) {
                            i |= 1 << 6;
                        }
                        var a = [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5
                        ].map(function(e) {
                            return String.fromCharCode(Math.random() * 26 + 65);
                        }).join('');
                        var o = a + '+' + this.font.postscriptName;
                        var c = this.font.bbox;
                        var s = this.document.ref({
                            Type: 'FontDescriptor',
                            FontName: o,
                            Flags: i,
                            FontBBox: [
                                c.minX * this.scale,
                                c.minY * this.scale,
                                c.maxX * this.scale,
                                c.maxY * this.scale
                            ],
                            ItalicAngle: this.font.italicAngle,
                            Ascent: this.ascender,
                            Descent: this.descender,
                            CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,
                            XHeight: (this.font.xHeight || 0) * this.scale,
                            StemV: 0
                        });
                        if (t) {
                            s.data.FontFile3 = r;
                        } else {
                            s.data.FontFile2 = r;
                        }
                        s.end();
                        var u = this.document.ref({
                            Type: 'Font',
                            Subtype: t ? 'CIDFontType0' : 'CIDFontType2',
                            BaseFont: o,
                            CIDSystemInfo: {
                                Registry: new String('Adobe'),
                                Ordering: new String('Identity'),
                                Supplement: 0
                            },
                            FontDescriptor: s,
                            W: [
                                0,
                                this.widths
                            ]
                        });
                        u.end();
                        this.dictionary.data = {
                            Type: 'Font',
                            Subtype: 'Type0',
                            BaseFont: o,
                            Encoding: 'Identity-H',
                            DescendantFonts: [
                                u
                            ],
                            ToUnicode: this.toUnicodeCmap()
                        };
                        return this.dictionary.end();
                    };
                    r.toUnicodeCmap = function e() {
                        var t = this.document.ref();
                        var r = [];
                        for(var n = 0, i = Array.from(this.unicode); n < i.length; n++){
                            var a = i[n];
                            var o = [];
                            for(var c = 0, s = Array.from(a); c < s.length; c++){
                                var u = s[c];
                                if (u > 0xffff) {
                                    u -= 0x10000;
                                    o.push(toHex(u >>> 10 & 0x3ff | 0xd800));
                                    u = 0xdc00 | u & 0x3ff;
                                }
                                o.push(toHex(u));
                                r.push("<" + o.join(' ') + ">");
                            }
                        }
                        t.end("  /CIDInit /ProcSet findresource begin\n  12 dict begin\n  begincmap\n  /CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n  >> def\n  /CMapName /Adobe-Identity-UCS def\n  /CMapType 2 def\n  1 begincodespacerange\n  <0000><ffff>\n  endcodespacerange\n  1 beginbfrange\n  <0000> <" + toHex(r.length - 1) + "> [" + r.join(' ') + "]\n  endbfrange\n  endcmap\n  CMapName currentdict /CMap defineresource pop\n  end\n  end  ");
                        return t;
                    };
                    return t;
                }(t);
            };
            var PDFFont = function() {
                function e() {}
                e.open = function e(t, r, n, i) {
                    var a;
                    if (typeof r === 'string') {
                        if (StandardFont.isStandardFont(r)) {
                            return new StandardFont(t, r, i);
                        }
                        {
                            throw new Error("Can't open " + r + " in browser build");
                        }
                    } else if (r instanceof Uint8Array) {
                        a = fontkit__WEBPACK_IMPORTED_MODULE_5__.Ue(r, n);
                    } else if (r instanceof ArrayBuffer) {
                        a = fontkit__WEBPACK_IMPORTED_MODULE_5__.Ue(new Uint8Array(r), n);
                    } else if (typeof r === 'object') {
                        a = r;
                    }
                    if (a == null) {
                        throw new Error('Not a supported font format or standard PDF font.');
                    }
                    return new EmbeddedFont(t, a, i);
                };
                var t = e.prototype;
                t.encode = function e() {
                    throw new Error('Must be implemented by subclasses');
                };
                t.widthOfString = function e() {
                    throw new Error('Must be implemented by subclasses');
                };
                t.ref = function e() {
                    return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();
                };
                t.finalize = function e() {
                    if (this.embedded || this.dictionary == null) {
                        return;
                    }
                    this.embed();
                    return this.embedded = true;
                };
                t.embed = function e() {
                    throw new Error('Must be implemented by subclasses');
                };
                t.lineHeight = function e(t, r) {
                    if (r == null) {
                        r = false;
                    }
                    var n = r ? this.lineGap : 0;
                    return (this.ascender + n - this.descender) / 1000 * t;
                };
                return e;
            }();
            var StandardFont = createStandardFont(PDFFont);
            var EmbeddedFont = createEmbeddedFont(PDFFont);
            var FontsMixin = {
                initFonts: function e() {
                    this._fontFamilies = {};
                    this._fontCount = 0;
                    this._fontSize = 12;
                    this._font = null;
                    this._registeredFonts = {};
                    return this.font('Helvetica');
                },
                font: function e(t, r, n) {
                    var i, e;
                    if (typeof r === 'number') {
                        n = r;
                        r = null;
                    }
                    if (typeof t === 'string' && this._registeredFonts[t]) {
                        i = t;
                        var a = this._registeredFonts[t];
                        t = a.src;
                        r = a.family;
                    } else {
                        i = r || t;
                        if (typeof i !== 'string') {
                            i = null;
                        }
                    }
                    if (n != null) {
                        this.fontSize(n);
                    }
                    if (e = this._fontFamilies[i]) {
                        this._font = e;
                        return this;
                    }
                    var o = "F" + ++this._fontCount;
                    this._font = PDFFont.open(this, t, r, o);
                    if (e = this._fontFamilies[this._font.name]) {
                        this._font = e;
                        return this;
                    }
                    if (i) {
                        this._fontFamilies[i] = this._font;
                    }
                    if (this._font.name) {
                        this._fontFamilies[this._font.name] = this._font;
                    }
                    return this;
                },
                fontSize: function e(t) {
                    this._fontSize = t;
                    return this;
                },
                currentLineHeight: function e(t) {
                    if (t == null) {
                        t = false;
                    }
                    return this._font.lineHeight(this._fontSize, t);
                },
                registerFont: function e(t, r, n) {
                    this._registeredFonts[t] = {
                        src: r,
                        family: n
                    };
                    return this;
                }
            };
            var number = PDFObject$1.number;
            var TextMixin = {
                initText: function e() {
                    this._line = this._line.bind(this);
                    this.x = 0;
                    this.y = 0;
                    return this._lineGap = 0;
                },
                _text: function e(t, r, n, i, a) {
                    var o = this;
                    i = this._initOptions(r, n, i);
                    t = t == null ? '' : "" + t;
                    if (i.wordSpacing) {
                        t = t.replace(/\s{2,}/g, ' ');
                    }
                    var c = function e() {
                        if (i.structParent) {
                            i.structParent.add(o.struct(i.structType || 'P', [
                                o.markStructureContent(i.structType || 'P')
                            ]));
                        }
                    };
                    for(var s = (0, _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_9__.Z)(t.split('\n')), u; !(u = s()).done;){
                        var f = u.value;
                        c();
                        a(f, i);
                    }
                    return this;
                },
                text: function e(t, r, n, i) {
                    return this._text(t, r, n, i, this._line);
                },
                widthOfString: function e(t, r) {
                    if (r === void 0) {
                        r = {};
                    }
                    return this._font.widthOfString(t, this._fontSize, r.features) + (r.characterSpacing || 0) * (t.length - 1);
                },
                _initOptions: function e(t, r, n) {
                    if (t === void 0) {
                        t = {};
                    }
                    if (n === void 0) {
                        n = {};
                    }
                    if (typeof t === 'object') {
                        n = t;
                        t = null;
                    }
                    var i = Object.assign({}, n);
                    if (this._textOptions) {
                        for(var a in this._textOptions){
                            var o = this._textOptions[a];
                            if (a !== 'continued') {
                                if (i[a] === undefined) {
                                    i[a] = o;
                                }
                            }
                        }
                    }
                    if (t != null) {
                        this.x = t;
                    }
                    if (r != null) {
                        this.y = r;
                    }
                    if (i.lineBreak !== false) {
                        if (i.width == null) {
                            i.width = this.page.width - this.x - this.page.margins.right;
                        }
                        i.width = Math.max(i.width, 0);
                    }
                    if (!i.columns) {
                        i.columns = 0;
                    }
                    if (i.columnGap == null) {
                        i.columnGap = 18;
                    }
                    return i;
                },
                _line: function e(t, r) {
                    if (r === void 0) {
                        r = {};
                    }
                    this._fragment(t, this.x, this.y, r);
                    return this.x += this.widthOfString(t);
                },
                _fragment: function e(t, r, n, i) {
                    t = ("" + t).replace(/\n/g, '');
                    if (t.length === 0) return;
                    var a = this._font.encode(t, i.features), o = a[0], c = a[1];
                    var s = this._font.ascender / 1000 * this._fontSize;
                    this._glyphs(o, c, r, n + s, i);
                },
                _glyphs: function e(t, r, n, i, a) {
                    var o = this;
                    var c = [];
                    var s = this._fontSize / 1000;
                    var u;
                    var f = 0;
                    var l = false;
                    this.save();
                    this.transform(1, 0, 0, -1, 0, this.page.height);
                    i = this.page.height - i;
                    if (this.page.fonts[this._font.id] == null) {
                        this.page.fonts[this._font.id] = this._font.ref();
                    }
                    this.addContent('BT');
                    this.addContent("1 0 0 1 " + number(n) + " " + number(i) + " Tm");
                    this.addContent("/" + this._font.id + " " + number(this._fontSize) + " Tf");
                    var h = a.fill && a.stroke ? 2 : a.stroke ? 1 : 0;
                    if (h) {
                        this.addContent(h + " Tr");
                    }
                    var d = function e(n) {
                        if (f < n) {
                            var i = t.slice(f, n).join('');
                            var a = r[n - 1].xAdvance - r[n - 1].advanceWidth;
                            c.push("<" + i + "> " + number(-a));
                        }
                        return f = n;
                    };
                    var m = function e(t) {
                        d(t);
                        if (c.length > 0) {
                            o.addContent("[" + c.join(' ') + "] TJ");
                            return c.length = 0;
                        }
                    };
                    for(u = 0; u < r.length; u++){
                        var g = r[u];
                        if (g.xOffset || g.yOffset) {
                            m(u);
                            this.addContent("1 0 0 1 " + number(n + g.xOffset * s) + " " + number(i + g.yOffset * s) + " Tm");
                            m(u + 1);
                            l = true;
                        } else {
                            if (l) {
                                this.addContent("1 0 0 1 " + number(n) + " " + number(i) + " Tm");
                                l = false;
                            }
                            if (g.xAdvance - g.advanceWidth !== 0) {
                                d(u + 1);
                            }
                        }
                        n += g.xAdvance * s;
                    }
                    m(u);
                    this.addContent('ET');
                    return this.restore();
                }
            };
            var MARKERS = [
                0xffc0,
                0xffc1,
                0xffc2,
                0xffc3,
                0xffc5,
                0xffc6,
                0xffc7,
                0xffc8,
                0xffc9,
                0xffca,
                0xffcb,
                0xffcc,
                0xffcd,
                0xffce,
                0xffcf
            ];
            var JPEG = function() {
                function e(e, t) {
                    var r;
                    this.data = e;
                    this.label = t;
                    if (this.data.readUInt16BE(0) !== 0xffd8) {
                        throw 'SOI not found in JPEG';
                    }
                    var n = 2;
                    while(n < this.data.length){
                        r = this.data.readUInt16BE(n);
                        n += 2;
                        if (Array.from(MARKERS).includes(r)) {
                            break;
                        }
                        n += this.data.readUInt16BE(n);
                    }
                    if (!Array.from(MARKERS).includes(r)) {
                        throw 'Invalid JPEG.';
                    }
                    n += 2;
                    this.bits = this.data[n++];
                    this.height = this.data.readUInt16BE(n);
                    n += 2;
                    this.width = this.data.readUInt16BE(n);
                    n += 2;
                    var i = this.data[n++];
                    this.colorSpace = function() {
                        switch(i){
                            case 1:
                                return 'DeviceGray';
                            case 3:
                                return 'DeviceRGB';
                            case 4:
                                return 'DeviceCMYK';
                        }
                    }();
                    this.obj = null;
                }
                var t = e.prototype;
                t.embed = function e(t) {
                    if (this.obj) {
                        return;
                    }
                    this.obj = t.ref({
                        Type: 'XObject',
                        Subtype: 'Image',
                        BitsPerComponent: this.bits,
                        Width: this.width,
                        Height: this.height,
                        ColorSpace: this.colorSpace,
                        Filter: 'DCTDecode'
                    });
                    if (this.colorSpace === 'DeviceCMYK') {
                        this.obj.data['Decode'] = [
                            1.0,
                            0.0,
                            1.0,
                            0.0,
                            1.0,
                            0.0,
                            1.0,
                            0.0
                        ];
                    }
                    this.obj.end(this.data);
                    this.data = null;
                };
                return e;
            }();
            var PNGImage = function() {
                function e(e, t) {
                    this.label = t;
                    this.image = new _react_pdf_png_js__WEBPACK_IMPORTED_MODULE_6__.Z(e);
                    this.width = this.image.width;
                    this.height = this.image.height;
                    this.imgData = this.image.imgData;
                    this.obj = null;
                }
                var t = e.prototype;
                t.embed = function e(t) {
                    var r = false;
                    this.document = t;
                    if (this.obj) return;
                    var n = this.image.hasAlphaChannel;
                    var i = this.image.interlaceMethod === 1;
                    this.obj = this.document.ref({
                        Type: 'XObject',
                        Subtype: 'Image',
                        BitsPerComponent: n ? 8 : this.image.bits,
                        Width: this.width,
                        Height: this.height,
                        Filter: 'FlateDecode'
                    });
                    if (!n) {
                        var a = this.document.ref({
                            Predictor: i ? 1 : 15,
                            Colors: this.image.colors,
                            BitsPerComponent: this.image.bits,
                            Columns: this.width
                        });
                        this.obj.data['DecodeParms'] = a;
                        a.end();
                    }
                    if (this.image.palette.length === 0) {
                        this.obj.data['ColorSpace'] = this.image.colorSpace;
                    } else {
                        var o = this.document.ref();
                        o.end(Buffer$4.from(this.image.palette));
                        this.obj.data['ColorSpace'] = [
                            'Indexed',
                            'DeviceRGB',
                            this.image.palette.length / 3 - 1,
                            o
                        ];
                    }
                    if (this.image.transparency.grayscale != null) {
                        var c = this.image.transparency.grayscale;
                        this.obj.data['Mask'] = [
                            c,
                            c
                        ];
                    } else if (this.image.transparency.rgb) {
                        var s = this.image.transparency.rgb;
                        var u = [];
                        for(var f = (0, _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_9__.Z)(s), l; !(l = f()).done;){
                            var h = l.value;
                            u.push(h, h);
                        }
                        this.obj.data['Mask'] = u;
                    } else if (this.image.transparency.indexed) {
                        r = true;
                        return this.loadIndexedAlphaChannel();
                    } else if (n) {
                        r = true;
                        return this.splitAlphaChannel();
                    }
                    if (i && !r) {
                        return this.decodeData();
                    }
                    this.finalize();
                };
                t.finalize = function e() {
                    if (this.alphaChannel) {
                        var t = this.document.ref({
                            Type: 'XObject',
                            Subtype: 'Image',
                            Height: this.height,
                            Width: this.width,
                            BitsPerComponent: 8,
                            Filter: 'FlateDecode',
                            ColorSpace: 'DeviceGray',
                            Decode: [
                                0,
                                1
                            ]
                        });
                        t.end(this.alphaChannel);
                        this.obj.data['SMask'] = t;
                    }
                    this.obj.end(this.imgData);
                    this.image = null;
                    this.imgData = null;
                };
                t.splitAlphaChannel = function e() {
                    var t = this;
                    return this.image.decodePixels(function(e) {
                        var r;
                        var n;
                        var i = t.image.colors;
                        var a = t.width * t.height;
                        var o = Buffer$4.alloc(a * i);
                        var c = Buffer$4.alloc(a);
                        var s = n = r = 0;
                        var u = e.length;
                        var f = t.image.bits === 16 ? 1 : 0;
                        while(s < u){
                            for(var l = 0; l < i; l++){
                                o[n++] = e[s++];
                                s += f;
                            }
                            c[r++] = e[s++];
                            s += f;
                        }
                        t.imgData = lib.deflateSync(o);
                        t.alphaChannel = lib.deflateSync(c);
                        return t.finalize();
                    });
                };
                t.loadIndexedAlphaChannel = function e() {
                    var t = this;
                    var r = this.image.transparency.indexed;
                    return this.image.decodePixels(function(e) {
                        var n = Buffer$4.alloc(t.width * t.height);
                        var i = 0;
                        for(var a = 0, o = e.length; a < o; a++){
                            n[i++] = r[e[a]];
                        }
                        t.alphaChannel = lib.deflateSync(n);
                        return t.finalize();
                    });
                };
                t.decodeData = function e() {
                    var t = this;
                    this.image.decodePixels(function(e) {
                        t.imgData = lib.deflateSync(e);
                        t.finalize();
                    });
                };
                return e;
            }();
            var PDFImage = function() {
                function e() {}
                e.open = function e(t, r) {
                    var n;
                    if (Buffer$4.isBuffer(t)) {
                        n = t;
                    } else if (t instanceof ArrayBuffer) {
                        n = Buffer$4.from(new Uint8Array(t));
                    } else {
                        var i = /^data:.+;base64,(.*)$/.exec(t);
                        if (i) {
                            n = Buffer$4.from(i[1], 'base64');
                        }
                    }
                    if (n[0] === 0xff && n[1] === 0xd8) {
                        return new JPEG(n, r);
                    }
                    if (n[0] === 0x89 && n.toString('ascii', 1, 4) === 'PNG') {
                        return new PNGImage(n, r);
                    }
                    throw new Error('Unknown image format.');
                };
                return e;
            }();
            var ImagesMixin = {
                initImages: function e() {
                    this._imageRegistry = {};
                    this._imageCount = 0;
                },
                embedImage: function e(t) {
                    var r;
                    if (typeof t === 'string') {
                        r = this._imageRegistry[t];
                    }
                    if (!r) {
                        if (t.width && t.height) {
                            r = t;
                        } else {
                            r = this.openImage(t);
                        }
                    }
                    if (!r.obj) {
                        r.embed(this);
                    }
                    return r;
                },
                image: function e(t, r, n, i) {
                    if (i === void 0) {
                        i = {};
                    }
                    var a;
                    var o;
                    var c;
                    var s;
                    var u;
                    var f;
                    if (typeof r === 'object') {
                        i = r;
                        r = null;
                    }
                    var e = t instanceof PDFImage ? t : this.embedImage(t);
                    r = (u = r != null ? r : i.x) != null ? u : this.x;
                    n = (f = n != null ? n : i.y) != null ? f : this.y;
                    if (this.page.xobjects[e.label] == null) {
                        this.page.xobjects[e.label] = e.obj;
                    }
                    var l = i.width || e.width;
                    var h = i.height || e.height;
                    if (i.width && !i.height) {
                        var d = l / e.width;
                        l = e.width * d;
                        h = e.height * d;
                    } else if (i.height && !i.width) {
                        var m = h / e.height;
                        l = e.width * m;
                        h = e.height * m;
                    } else if (i.scale) {
                        l = e.width * i.scale;
                        h = e.height * i.scale;
                    } else if (i.fit) {
                        var g = Array.from(i.fit);
                        c = g[0];
                        a = g[1];
                        o = c / a;
                        s = e.width / e.height;
                        if (s > o) {
                            l = c;
                            h = c / s;
                        } else {
                            h = a;
                            l = a * s;
                        }
                    }
                    if (this.y === n) {
                        this.y += h;
                    }
                    this.save();
                    this.transform(l, 0, 0, -h, r, n + h);
                    this.addContent("/" + e.label + " Do");
                    this.restore();
                    return this;
                },
                openImage: function e(t) {
                    var r;
                    if (typeof t === 'string') {
                        r = this._imageRegistry[t];
                    }
                    if (!r) {
                        r = PDFImage.open(t, "I" + ++this._imageCount);
                        if (typeof t === 'string') {
                            this._imageRegistry[t] = r;
                        }
                    }
                    return r;
                }
            };
            var AnnotationsMixin = {
                annotate: function e(t, r, n, i, a) {
                    a.Type = 'Annot';
                    a.Rect = this._convertRect(t, r, n, i);
                    a.Border = [
                        0,
                        0,
                        0
                    ];
                    if (a.Subtype === 'Link' && typeof a.F === 'undefined') {
                        a.F = 1 << 2;
                    }
                    if (a.Subtype !== 'Link') {
                        if (a.C == null) {
                            a.C = this._normalizeColor(a.color || [
                                0,
                                0,
                                0
                            ]);
                        }
                    }
                    delete a.color;
                    if (typeof a.Dest === 'string') {
                        a.Dest = new String(a.Dest);
                    }
                    for(var o in a){
                        var c = a[o];
                        a[o[0].toUpperCase() + o.slice(1)] = c;
                    }
                    var s = this.ref(a);
                    this.page.annotations.push(s);
                    s.end();
                    return this;
                },
                note: function e(t, r, n, i, a, o) {
                    if (o === void 0) {
                        o = {};
                    }
                    o.Subtype = 'Text';
                    o.Contents = new String(a);
                    o.Name = 'Comment';
                    if (o.color == null) {
                        o.color = [
                            243,
                            223,
                            92
                        ];
                    }
                    o.Border = [
                        0,
                        0,
                        o.borderWidth || 0
                    ];
                    delete o.borderWidth;
                    return this.annotate(t, r, n, i, o);
                },
                goTo: function e(t, r, n, i, a, o) {
                    if (o === void 0) {
                        o = {};
                    }
                    o.Subtype = 'Link';
                    o.A = this.ref({
                        S: 'GoTo',
                        D: new String(a)
                    });
                    o.A.end();
                    return this.annotate(t, r, n, i, o);
                },
                link: function e(t, r, n, i, a, o) {
                    if (o === void 0) {
                        o = {};
                    }
                    o.Subtype = 'Link';
                    if (typeof a === 'number') {
                        var c = this._root.data.Pages.data;
                        if (a >= 0 && a < c.Kids.length) {
                            o.A = this.ref({
                                S: 'GoTo',
                                D: [
                                    c.Kids[a],
                                    'XYZ',
                                    null,
                                    null,
                                    null
                                ]
                            });
                            o.A.end();
                        } else {
                            throw new Error("The document has no page " + a);
                        }
                    } else {
                        o.A = this.ref({
                            S: 'URI',
                            URI: new String(a)
                        });
                        o.A.end();
                    }
                    return this.annotate(t, r, n, i, o);
                },
                _markup: function e(t, r, n, i, a) {
                    if (a === void 0) {
                        a = {};
                    }
                    var o = this._convertRect(t, r, n, i), c = o[0], s = o[1], u = o[2], f = o[3];
                    a.QuadPoints = [
                        c,
                        f,
                        u,
                        f,
                        c,
                        s,
                        u,
                        s
                    ];
                    a.Contents = new String();
                    return this.annotate(t, r, n, i, a);
                },
                highlight: function e(t, r, n, i, a) {
                    if (a === void 0) {
                        a = {};
                    }
                    a.Subtype = 'Highlight';
                    if (a.color == null) {
                        a.color = [
                            241,
                            238,
                            148
                        ];
                    }
                    return this._markup(t, r, n, i, a);
                },
                fileAnnotation: function e(t, r, n, i, a, o) {
                    if (a === void 0) {
                        a = {};
                    }
                    if (o === void 0) {
                        o = {};
                    }
                    var c = this.file(a.src, Object.assign({
                        hidden: true
                    }, a));
                    o.Subtype = 'FileAttachment';
                    o.FS = c;
                    if (o.Contents) {
                        o.Contents = new String(o.Contents);
                    } else if (c.data.Desc) {
                        o.Contents = c.data.Desc;
                    }
                    return this.annotate(t, r, n, i, o);
                },
                _convertRect: function e(t, r, n, i) {
                    var a = r;
                    r += i;
                    var o = t + n;
                    var c = this._ctm, s = c[0], u = c[1], f = c[2], l = c[3], h = c[4], d = c[5];
                    t = s * t + f * r + h;
                    r = u * t + l * r + d;
                    o = s * o + f * a + h;
                    a = u * o + l * a + d;
                    return [
                        t,
                        r,
                        o,
                        a
                    ];
                }
            };
            var DEFAULT_OPTIONS = {
                top: 0,
                left: 0,
                zoom: 0,
                fit: false,
                pageNumber: null,
                expanded: false
            };
            var PDFOutline = function() {
                function e(e, t, r, n, i) {
                    if (i === void 0) {
                        i = DEFAULT_OPTIONS;
                    }
                    this.document = e;
                    this.options = i;
                    this.outlineData = {};
                    if (n !== null) {
                        var a = n.data.MediaBox[2];
                        var o = n.data.MediaBox[3];
                        var c = o - (i.top || 0);
                        var s = a - (i.left || 0);
                        var u = i.zoom || 0;
                        this.outlineData.Dest = i.fit ? [
                            n,
                            'Fit'
                        ] : [
                            n,
                            'XYZ',
                            s,
                            c,
                            u
                        ];
                    }
                    if (t !== null) {
                        this.outlineData.Parent = t;
                    }
                    if (r !== null) {
                        this.outlineData.Title = new String(r);
                    }
                    this.dictionary = this.document.ref(this.outlineData);
                    this.children = [];
                }
                var t = e.prototype;
                t.addItem = function t(r, n) {
                    if (n === void 0) {
                        n = DEFAULT_OPTIONS;
                    }
                    var i = this.document._root.data.Pages.data.Kids;
                    var a = n.pageNumber !== null ? i[n.pageNumber] : this.document.page.dictionary;
                    var o = new e(this.document, this.dictionary, r, a, n);
                    this.children.push(o);
                    return o;
                };
                t.endOutline = function e() {
                    if (this.children.length > 0) {
                        if (this.options.expanded) {
                            this.outlineData.Count = this.children.length;
                        }
                        var t = this.children[0];
                        var r = this.children[this.children.length - 1];
                        this.outlineData.First = t.dictionary;
                        this.outlineData.Last = r.dictionary;
                        for(var n = 0, i = this.children.length; n < i; n++){
                            var a = this.children[n];
                            if (n > 0) {
                                a.outlineData.Prev = this.children[n - 1].dictionary;
                            }
                            if (n < this.children.length - 1) {
                                a.outlineData.Next = this.children[n + 1].dictionary;
                            }
                            a.endOutline();
                        }
                    }
                    return this.dictionary.end();
                };
                return e;
            }();
            var OutlineMixin = {
                initOutline: function e() {
                    this.outline = new PDFOutline(this, null, null, null);
                },
                endOutline: function e() {
                    this.outline.endOutline();
                    if (this.outline.children.length > 0) {
                        this._root.data.Outlines = this.outline.dictionary;
                        this._root.data.PageMode = this._root.data.PageMode || 'UseOutlines';
                    }
                }
            };
            var FIELD_FLAGS = {
                readOnly: 1,
                required: 2,
                noExport: 4,
                multiline: 0x1000,
                password: 0x2000,
                toggleToOffButton: 0x4000,
                radioButton: 0x8000,
                pushButton: 0x10000,
                combo: 0x20000,
                edit: 0x40000,
                sort: 0x80000,
                multiSelect: 0x200000,
                noSpell: 0x400000
            };
            var FIELD_JUSTIFY = {
                left: 0,
                center: 1,
                right: 2
            };
            var VALUE_MAP = {
                value: 'V',
                defaultValue: 'DV'
            };
            var FORMAT_SPECIAL = {
                zip: '0',
                zipPlus4: '1',
                zip4: '1',
                phone: '2',
                ssn: '3'
            };
            var FORMAT_DEFAULT = {
                number: {
                    nDec: 0,
                    sepComma: false,
                    negStyle: 'MinusBlack',
                    currency: '',
                    currencyPrepend: true
                },
                percent: {
                    nDec: 0,
                    sepComma: false
                }
            };
            var AcroFormMixin = {
                initForm: function e() {
                    if (!this._font) {
                        throw new Error('Must set a font before calling initForm method');
                    }
                    this._acroform = {
                        fonts: {},
                        defaultFont: this._font.name
                    };
                    this._acroform.fonts[this._font.id] = this._font.ref();
                    var t = {
                        Fields: [],
                        NeedAppearances: true,
                        DA: new String("/" + this._font.id + " 0 Tf 0 g"),
                        DR: {
                            Font: {}
                        }
                    };
                    t.DR.Font[this._font.id] = this._font.ref();
                    var r = this.ref(t);
                    this._root.data.AcroForm = r;
                    return this;
                },
                endAcroForm: function e() {
                    var t = this;
                    if (this._root.data.AcroForm) {
                        if (!Object.keys(this._acroform.fonts).length && !this._acroform.defaultFont) {
                            throw new Error('No fonts specified for PDF form');
                        }
                        var r = this._root.data.AcroForm.data.DR.Font;
                        Object.keys(this._acroform.fonts).forEach(function(e) {
                            r[e] = t._acroform.fonts[e];
                        });
                        this._root.data.AcroForm.data.Fields.forEach(function(e) {
                            t._endChild(e);
                        });
                        this._root.data.AcroForm.end();
                    }
                    return this;
                },
                _endChild: function e(t) {
                    var r = this;
                    if (Array.isArray(t.data.Kids)) {
                        t.data.Kids.forEach(function(e) {
                            r._endChild(e);
                        });
                        t.end();
                    }
                    return this;
                },
                formField: function e(t, r) {
                    if (r === void 0) {
                        r = {};
                    }
                    var n = this._fieldDict(t, null, r);
                    var i = this.ref(n);
                    this._addToParent(i);
                    return i;
                },
                formAnnotation: function e(t, r, n, i, a, o, c) {
                    if (c === void 0) {
                        c = {};
                    }
                    var s = this._fieldDict(t, r, c);
                    s.Subtype = 'Widget';
                    if (s.F === undefined) {
                        s.F = 4;
                    }
                    this.annotate(n, i, a, o, s);
                    var u = this.page.annotations[this.page.annotations.length - 1];
                    return this._addToParent(u);
                },
                formText: function e(t, r, n, i, a, o) {
                    if (o === void 0) {
                        o = {};
                    }
                    return this.formAnnotation(t, 'text', r, n, i, a, o);
                },
                formPushButton: function e(t, r, n, i, a, o) {
                    if (o === void 0) {
                        o = {};
                    }
                    return this.formAnnotation(t, 'pushButton', r, n, i, a, o);
                },
                formCombo: function e(t, r, n, i, a, o) {
                    if (o === void 0) {
                        o = {};
                    }
                    return this.formAnnotation(t, 'combo', r, n, i, a, o);
                },
                formList: function e(t, r, n, i, a, o) {
                    if (o === void 0) {
                        o = {};
                    }
                    return this.formAnnotation(t, 'list', r, n, i, a, o);
                },
                formRadioButton: function e(t, r, n, i, a, o) {
                    if (o === void 0) {
                        o = {};
                    }
                    return this.formAnnotation(t, 'radioButton', r, n, i, a, o);
                },
                formCheckbox: function e(t, r, n, i, a, o) {
                    if (o === void 0) {
                        o = {};
                    }
                    return this.formAnnotation(t, 'checkbox', r, n, i, a, o);
                },
                _addToParent: function e(t) {
                    var r = t.data.Parent;
                    if (r) {
                        if (!r.data.Kids) {
                            r.data.Kids = [];
                        }
                        r.data.Kids.push(t);
                    } else {
                        this._root.data.AcroForm.data.Fields.push(t);
                    }
                    return this;
                },
                _fieldDict: function e(t, r, n) {
                    if (n === void 0) {
                        n = {};
                    }
                    if (!this._acroform) {
                        throw new Error('Call document.initForms() method before adding form elements to document');
                    }
                    var i = Object.assign({}, n);
                    if (r !== null) {
                        i = this._resolveType(r, n);
                    }
                    i = this._resolveFlags(i);
                    i = this._resolveJustify(i);
                    i = this._resolveFont(i);
                    i = this._resolveStrings(i);
                    i = this._resolveColors(i);
                    i = this._resolveFormat(i);
                    i.T = new String(t);
                    if (i.parent) {
                        i.Parent = i.parent;
                        delete i.parent;
                    }
                    return i;
                },
                _resolveType: function e(t, r) {
                    if (t === 'text') {
                        r.FT = 'Tx';
                    } else if (t === 'pushButton') {
                        r.FT = 'Btn';
                        r.pushButton = true;
                    } else if (t === 'radioButton') {
                        r.FT = 'Btn';
                        r.radioButton = true;
                    } else if (t === 'checkbox') {
                        r.FT = 'Btn';
                    } else if (t === 'combo') {
                        r.FT = 'Ch';
                        r.combo = true;
                    } else if (t === 'list') {
                        r.FT = 'Ch';
                    } else {
                        throw new Error("Invalid form annotation type '" + t + "'");
                    }
                    return r;
                },
                _resolveFormat: function e(t) {
                    var r = t.format;
                    if (r && r.type) {
                        var n;
                        var i;
                        var a = '';
                        if (FORMAT_SPECIAL[r.type] !== undefined) {
                            n = "AFSpecial_Keystroke";
                            i = "AFSpecial_Format";
                            a = FORMAT_SPECIAL[r.type];
                        } else {
                            var o = r.type.charAt(0).toUpperCase() + r.type.slice(1);
                            n = "AF" + o + "_Keystroke";
                            i = "AF" + o + "_Format";
                            if (r.type === 'date') {
                                n += 'Ex';
                                a = String(r.param);
                            } else if (r.type === 'time') {
                                a = String(r.param);
                            } else if (r.type === 'number') {
                                var c = Object.assign({}, FORMAT_DEFAULT.number, r);
                                a = String([
                                    String(c.nDec),
                                    c.sepComma ? '0' : '1',
                                    '"' + c.negStyle + '"',
                                    'null',
                                    '"' + c.currency + '"',
                                    String(c.currencyPrepend)
                                ].join(','));
                            } else if (r.type === 'percent') {
                                var s = Object.assign({}, FORMAT_DEFAULT.percent, r);
                                a = String([
                                    String(s.nDec),
                                    s.sepComma ? '0' : '1'
                                ].join(','));
                            }
                        }
                        t.AA = t.AA ? t.AA : {};
                        t.AA.K = {
                            S: 'JavaScript',
                            JS: new String(n + "(" + a + ");")
                        };
                        t.AA.F = {
                            S: 'JavaScript',
                            JS: new String(i + "(" + a + ");")
                        };
                    }
                    delete t.format;
                    return t;
                },
                _resolveColors: function e(t) {
                    var r = this._normalizeColor(t.backgroundColor);
                    if (r) {
                        if (!t.MK) {
                            t.MK = {};
                        }
                        t.MK.BG = r;
                    }
                    r = this._normalizeColor(t.borderColor);
                    if (r) {
                        if (!t.MK) {
                            t.MK = {};
                        }
                        t.MK.BC = r;
                    }
                    delete t.backgroundColor;
                    delete t.borderColor;
                    return t;
                },
                _resolveFlags: function e(t) {
                    var r = 0;
                    Object.keys(t).forEach(function(e) {
                        if (FIELD_FLAGS[e]) {
                            r |= FIELD_FLAGS[e];
                            delete t[e];
                        }
                    });
                    if (r !== 0) {
                        t.Ff = t.Ff ? t.Ff : 0;
                        t.Ff |= r;
                    }
                    return t;
                },
                _resolveJustify: function e(t) {
                    var r = 0;
                    if (t.align !== undefined) {
                        if (typeof FIELD_JUSTIFY[t.align] === 'number') {
                            r = FIELD_JUSTIFY[t.align];
                        }
                        delete t.align;
                    }
                    if (r !== 0) {
                        t.Q = r;
                    }
                    return t;
                },
                _resolveFont: function e(t) {
                    if (this._acroform.fonts[this._font.id] === null) {
                        this._acroform.fonts[this._font.id] = this._font.ref();
                    }
                    if (this._acroform.defaultFont !== this._font.name) {
                        t.DR = {
                            Font: {}
                        };
                        var r = t.fontSize || 0;
                        t.DR.Font[this._font.id] = this._font.ref();
                        t.DA = new String("/" + this._font.id + " " + r + " Tf 0 g");
                    }
                    return t;
                },
                _resolveStrings: function e(t) {
                    var r = [];
                    function n(e) {
                        if (Array.isArray(e)) {
                            for(var t = 0; t < e.length; t++){
                                if (typeof e[t] === 'string') {
                                    r.push(new String(e[t]));
                                } else {
                                    r.push(e[t]);
                                }
                            }
                        }
                    }
                    n(t.Opt);
                    if (t.select) {
                        n(t.select);
                        delete t.select;
                    }
                    if (r.length) {
                        t.Opt = r;
                    }
                    Object.keys(VALUE_MAP).forEach(function(e) {
                        if (t[e] !== undefined) {
                            t[VALUE_MAP[e]] = t[e];
                            delete t[e];
                        }
                    });
                    [
                        'V',
                        'DV'
                    ].forEach(function(e) {
                        if (typeof t[e] === 'string') {
                            t[e] = new String(t[e]);
                        }
                    });
                    if (t.MK && t.MK.CA) {
                        t.MK.CA = new String(t.MK.CA);
                    }
                    if (t.label) {
                        t.MK = t.MK ? t.MK : {};
                        t.MK.CA = new String(t.label);
                        delete t.label;
                    }
                    return t;
                }
            };
            var AttachmentsMixin = {
                file: function e(t, r) {
                    if (r === void 0) {
                        r = {};
                    }
                    r.name = r.name || t;
                    var n = {
                        Type: 'EmbeddedFile',
                        Params: {}
                    };
                    var i;
                    if (!t) {
                        throw new Error('No src specified');
                    }
                    if (Buffer$4.isBuffer(t)) {
                        i = t;
                    } else if (t instanceof ArrayBuffer) {
                        i = Buffer$4.from(new Uint8Array(t));
                    } else {
                        var a;
                        if (a = /^data:(.*);base64,(.*)$/.exec(t)) {
                            if (a[1]) {
                                n.Subtype = a[1].replace('/', '#2F');
                            }
                            i = Buffer$4.from(a[2], 'base64');
                        } else {
                            throw new Error("Could not find file " + t);
                        }
                    }
                    if (r.creationDate instanceof Date) {
                        n.Params.CreationDate = r.creationDate;
                    }
                    if (r.modifiedDate instanceof Date) {
                        n.Params.ModDate = r.modifiedDate;
                    }
                    if (r.type) {
                        n.Subtype = r.type.replace('/', '#2F');
                    }
                    var o = crypto_js_md5__WEBPACK_IMPORTED_MODULE_4___default().MD5(crypto_js_md5__WEBPACK_IMPORTED_MODULE_4___default().lib.WordArray.create(new Uint8Array(i)));
                    n.Params.CheckSum = new String(o);
                    n.Params.Size = i.byteLength;
                    var c;
                    if (!this._fileRegistry) this._fileRegistry = {};
                    var e = this._fileRegistry[r.name];
                    if (e && isEqual(n, e)) {
                        c = e.ref;
                    } else {
                        c = this.ref(n);
                        c.end(i);
                        this._fileRegistry[r.name] = (0, _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_10__.Z)({}, n, {
                            ref: c
                        });
                    }
                    var s = {
                        Type: 'Filespec',
                        F: new String(r.name),
                        EF: {
                            F: c
                        },
                        UF: new String(r.name)
                    };
                    if (r.description) {
                        s.Desc = new String(r.description);
                    }
                    var u = this.ref(s);
                    u.end();
                    if (!r.hidden) {
                        this.addNamedEmbeddedFile(r.name, u);
                    }
                    return u;
                }
            };
            function isEqual(e, t) {
                if (e.Subtype !== t.Subtype || e.Params.CheckSum.toString() !== t.Params.CheckSum.toString() || e.Params.Size !== t.Params.Size || e.Params.CreationDate !== t.Params.CreationDate || e.Params.ModDate !== t.Params.ModDate) {
                    return false;
                }
                return true;
            }
            var capitalize = function e(t) {
                return t[0].toUpperCase() + t.slice(1);
            };
            var PDFDocument = function(e) {
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_7__.Z)(t, e);
                function t(t) {
                    var r;
                    if (t === void 0) {
                        t = {};
                    }
                    r = e.call(this) || this;
                    r.options = t;
                    switch(t.pdfVersion){
                        case '1.4':
                            r.version = 1.4;
                            break;
                        case '1.5':
                            r.version = 1.5;
                            break;
                        case '1.6':
                            r.version = 1.6;
                            break;
                        case '1.7':
                        case '1.7ext3':
                            r.version = 1.7;
                            break;
                        default:
                            r.version = 1.3;
                            break;
                    }
                    r.compress = r.options.compress != null ? r.options.compress : true;
                    r._pageBuffer = [];
                    r._pageBufferStart = 0;
                    r._offsets = [];
                    r._waiting = 0;
                    r._ended = false;
                    r._offset = 0;
                    var n = r.ref({
                        Type: 'Pages',
                        Count: 0,
                        Kids: []
                    });
                    var i = r.ref({
                        Dests: new PDFNameTree()
                    });
                    r._root = r.ref({
                        Type: 'Catalog',
                        Pages: n,
                        Names: i
                    });
                    if (r.options.lang) {
                        r._root.data.Lang = new String(r.options.lang);
                    }
                    if (r.options.pageLayout) {
                        r._root.data.PageLayout = capitalize(r.options.pageLayout);
                    }
                    if (r.options.pageMode) {
                        r._root.data.PageMode = capitalize(r.options.pageMode);
                    }
                    r.page = null;
                    r.initColor();
                    r.initVector();
                    r.initFonts();
                    r.initText();
                    r.initImages();
                    r.initOutline();
                    r.info = {
                        Producer: 'PDFKit',
                        Creator: 'PDFKit',
                        CreationDate: new Date()
                    };
                    if (r.options.info) {
                        for(var a in r.options.info){
                            var o = r.options.info[a];
                            r.info[a] = o;
                        }
                    }
                    if (r.options.displayTitle) {
                        r._root.data.ViewerPreferences = r.ref({
                            DisplayDocTitle: true
                        });
                    }
                    r._id = PDFSecurity.generateFileID(r.info);
                    r._write("%PDF-" + r.version);
                    r._write('%\xFF\xFF\xFF\xFF');
                    if (r.options.autoFirstPage !== false) {
                        r.addPage();
                    }
                    return r;
                }
                var r = t.prototype;
                r.addPage = function e(t) {
                    if (t == null) {
                        t = this.options;
                    }
                    if (!this.options.bufferPages) {
                        this.flushPages();
                    }
                    this.page = new PDFPage(this, t);
                    this._pageBuffer.push(this.page);
                    var r = this._root.data.Pages.data;
                    r.Kids.push(this.page.dictionary);
                    r.Count++;
                    this._ctm = [
                        1,
                        0,
                        0,
                        1,
                        0,
                        0
                    ];
                    this.transform(1, 0, 0, -1, 0, this.page.height);
                    return this;
                };
                r.flushPages = function e() {
                    var t = this._pageBuffer;
                    this._pageBuffer = [];
                    this._pageBufferStart += t.length;
                    for(var r = 0, n = Array.from(t); r < n.length; r++){
                        var i = n[r];
                        i.end();
                    }
                };
                r.addNamedDestination = function e(t) {
                    for(var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++){
                        n[i - 1] = arguments[i];
                    }
                    if (n.length === 0) {
                        n = [
                            'XYZ',
                            null,
                            null,
                            null
                        ];
                    }
                    if (n[0] === 'XYZ' && n[2] !== null) {
                        n[2] = this.page.height - n[2];
                    }
                    n.unshift(this.page.dictionary);
                    this._root.data.Names.data.Dests.add(t, n);
                };
                r.addNamedEmbeddedFile = function e(t, r) {
                    if (!this._root.data.Names.data.EmbeddedFiles) {
                        this._root.data.Names.data.EmbeddedFiles = new PDFNameTree({
                            limits: false
                        });
                    }
                    this._root.data.Names.data.EmbeddedFiles.add(t, r);
                };
                r.addNamedJavaScript = function e(t, r) {
                    if (!this._root.data.Names.data.JavaScript) {
                        this._root.data.Names.data.JavaScript = new PDFNameTree();
                    }
                    var n = {
                        JS: new String(r),
                        S: 'JavaScript'
                    };
                    this._root.data.Names.data.JavaScript.add(t, n);
                };
                r.ref = function e(t) {
                    var e = new PDFReference(this, this._offsets.length + 1, t);
                    this._offsets.push(null);
                    this._waiting++;
                    return e;
                };
                r._read = function e() {};
                r._write = function e(t) {
                    if (!Buffer$4.isBuffer(t)) {
                        t = Buffer$4.from(t + '\n', 'binary');
                    }
                    this.push(t);
                    return this._offset += t.length;
                };
                r.addContent = function e(t) {
                    this.page.write(t);
                    return this;
                };
                r._refEnd = function e(t) {
                    this._offsets[t.id - 1] = t.offset;
                    if (--this._waiting === 0 && this._ended) {
                        this._finalize();
                        return this._ended = false;
                    }
                };
                r.end = function e() {
                    this.flushPages();
                    this._info = this.ref();
                    for(var t in this.info){
                        var r = this.info[t];
                        if (typeof r === 'string') {
                            r = new String(r);
                        }
                        var n = this.ref(r);
                        n.end();
                        this._info.data[t] = n;
                    }
                    this._info.end();
                    for(var i in this._fontFamilies){
                        var a = this._fontFamilies[i];
                        a.finalize();
                    }
                    this.endOutline();
                    this._root.end();
                    this._root.data.Pages.end();
                    this._root.data.Names.end();
                    this.endAcroForm();
                    if (this._root.data.ViewerPreferences) {
                        this._root.data.ViewerPreferences.end();
                    }
                    if (this._waiting === 0) {
                        return this._finalize();
                    }
                    this._ended = true;
                };
                r._finalize = function e() {
                    var t = this._offset;
                    this._write('xref');
                    this._write("0 " + (this._offsets.length + 1));
                    this._write('0000000000 65535 f ');
                    for(var r = 0, n = Array.from(this._offsets); r < n.length; r++){
                        var i = n[r];
                        i = ("0000000000" + i).slice(-10);
                        this._write(i + ' 00000 n ');
                    }
                    var a = {
                        Size: this._offsets.length + 1,
                        Root: this._root,
                        Info: this._info,
                        ID: [
                            this._id,
                            this._id
                        ]
                    };
                    this._write('trailer');
                    this._write(PDFObject$1.convert(a));
                    this._write('startxref');
                    this._write("" + t);
                    this._write('%%EOF');
                    return this.push(null);
                };
                r.toString = function e() {
                    return '[object PDFDocument]';
                };
                return t;
            }(stream.Readable);
            var mixin = function e(t) {
                Object.assign(PDFDocument.prototype, t);
            };
            mixin(ColorMixin);
            mixin(VectorMixin);
            mixin(FontsMixin);
            mixin(TextMixin);
            mixin(ImagesMixin);
            mixin(AnnotationsMixin);
            mixin(OutlineMixin);
            mixin(AcroFormMixin);
            mixin(AttachmentsMixin);
        })
    }
]);
