"use strict";
(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([
    [
        544
    ],
    {
        /***/ 5215: /***/ function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
            for(var match, match1, result, version, browserApi, videojs$1, FakeWeakMap, _supportsPassive, EVENT_MAP, canPlayType, Vhs$1, global_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8908), global_window__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(global_window__WEBPACK_IMPORTED_MODULE_0__), global_document__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9144), global_document__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(global_document__WEBPACK_IMPORTED_MODULE_1__), _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(7462), _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(7326), _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(4578), safe_json_parse_tuple__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5974), safe_json_parse_tuple__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(safe_json_parse_tuple__WEBPACK_IMPORTED_MODULE_2__), keycode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7537), keycode__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(keycode__WEBPACK_IMPORTED_MODULE_3__), _videojs_xhr__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9603), _videojs_xhr__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(_videojs_xhr__WEBPACK_IMPORTED_MODULE_4__), videojs_vtt_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(3407), videojs_vtt_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(videojs_vtt_js__WEBPACK_IMPORTED_MODULE_5__), _babel_runtime_helpers_construct__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(8852), _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(136), _videojs_vhs_utils_es_resolve_url_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(779), m3u8_parser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9323), _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(2260), _videojs_vhs_utils_es_media_types_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(8485), mpd_parser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(973), mux_js_lib_tools_parse_sidx__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(4221), mux_js_lib_tools_parse_sidx__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/ __webpack_require__.n(mux_js_lib_tools_parse_sidx__WEBPACK_IMPORTED_MODULE_10__), _videojs_vhs_utils_es_id3_helpers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(8925), _videojs_vhs_utils_es_containers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(6185), _videojs_vhs_utils_es_byte_helpers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(562), mux_js_lib_utils_clock__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(1489), version$5 = "7.17.0", hooks_ = {}, hooks = function(type, fn) {
                return hooks_[type] = hooks_[type] || [], fn && (hooks_[type] = hooks_[type].concat(fn)), hooks_[type];
            }, removeHook = function(type, fn) {
                var index = hooks(type).indexOf(fn);
                return !(index <= -1) && (hooks_[type] = hooks_[type].slice(), hooks_[type].splice(index, 1), !0);
            }, FullscreenApi = {
                prefixed: !0
            }, apiMap = [
                [
                    "requestFullscreen",
                    "exitFullscreen",
                    "fullscreenElement",
                    "fullscreenEnabled",
                    "fullscreenchange",
                    "fullscreenerror",
                    "fullscreen"
                ],
                [
                    "webkitRequestFullscreen",
                    "webkitExitFullscreen",
                    "webkitFullscreenElement",
                    "webkitFullscreenEnabled",
                    "webkitfullscreenchange",
                    "webkitfullscreenerror",
                    "-webkit-full-screen"
                ],
                [
                    "mozRequestFullScreen",
                    "mozCancelFullScreen",
                    "mozFullScreenElement",
                    "mozFullScreenEnabled",
                    "mozfullscreenchange",
                    "mozfullscreenerror",
                    "-moz-full-screen"
                ],
                [
                    "msRequestFullscreen",
                    "msExitFullscreen",
                    "msFullscreenElement",
                    "msFullscreenEnabled",
                    "MSFullscreenChange",
                    "MSFullscreenError",
                    "-ms-fullscreen"
                ]
            ], specApi = apiMap[0], i = 0; i < apiMap.length; i++)// check for exitFullscreen function
            if (apiMap[i][1] in global_document__WEBPACK_IMPORTED_MODULE_1___default()) {
                browserApi = apiMap[i];
                break;
            }
             // map the browser API names to the spec API names
            if (browserApi) {
                for(var _i = 0; _i < browserApi.length; _i++)FullscreenApi[specApi[_i]] = browserApi[_i];
                FullscreenApi.prefixed = browserApi[0] !== specApi[0];
            }
            /**
             * @file create-logger.js
             * @module create-logger
             */ var history = [], log$1 = function createLogger$1(name) {
                // This is the private tracking variable for logging level.
                var logByType, level = "info", log = function() {
                    for(var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    logByType("log", level, args);
                }; // the curried logByType bound to the specific log and history
                return logByType = function(type, level, args) {
                    var lvl = log.levels[level], lvlRegExp = RegExp("^(" + lvl + ")$");
                    if ("log" !== type && // Add the type to the front of the message when it's not "log".
                    args.unshift(type.toUpperCase() + ":"), args.unshift(name + ":"), history) {
                        history.push([].concat(args)); // only store 1000 history entries
                        var splice = history.length - 1000;
                        history.splice(0, splice > 0 ? splice : 0);
                    } // If there's no console then don't try to output messages, but they will
                    // still be stored in history.
                    if (global_window__WEBPACK_IMPORTED_MODULE_0___default().console) {
                        // in the function makes it easier to test cases where console doesn't exist
                        // when the module is executed.
                        var fn = global_window__WEBPACK_IMPORTED_MODULE_0___default().console[type];
                        // current logging level.
                        fn || "debug" !== type || // Certain browsers don't have support for console.debug. For those, we
                        // should default to the closest comparable log.
                        (fn = global_window__WEBPACK_IMPORTED_MODULE_0___default().console.info || global_window__WEBPACK_IMPORTED_MODULE_0___default().console.log), fn && lvl && lvlRegExp.test(type) && fn[Array.isArray(args) ? "apply" : "call"](global_window__WEBPACK_IMPORTED_MODULE_0___default().console, args);
                    } // Was setting these once outside of this function, but containing them
                }, /**
                 * Create a new sublogger which chains the old name to the new name.
                 *
                 * For example, doing `videojs.log.createLogger('player')` and then using that logger will log the following:
                 * ```js
                 *  mylogger('foo');
                 *  // > VIDEOJS: player: foo
                 * ```
                 *
                 * @param {string} name
                 *        The name to add call the new logger
                 * @return {Object}
                 */ log.createLogger = function(subname) {
                    return createLogger$1(name + ": " + subname);
                }, /**
                 * Enumeration of available logging levels, where the keys are the level names
                 * and the values are `|`-separated strings containing logging methods allowed
                 * in that logging level. These strings are used to create a regular expression
                 * matching the function name being called.
                 *
                 * Levels provided by Video.js are:
                 *
                 * - `off`: Matches no calls. Any value that can be cast to `false` will have
                 *   this effect. The most restrictive.
                 * - `all`: Matches only Video.js-provided functions (`debug`, `log`,
                 *   `log.warn`, and `log.error`).
                 * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.
                 * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.
                 * - `warn`: Matches `log.warn` and `log.error` calls.
                 * - `error`: Matches only `log.error` calls.
                 *
                 * @type {Object}
                 */ log.levels = {
                    all: "debug|log|warn|error",
                    off: "",
                    debug: "debug|log|warn|error",
                    info: "log|warn|error",
                    warn: "warn|error",
                    error: "error",
                    DEFAULT: level
                }, /**
                 * Get or set the current logging level.
                 *
                 * If a string matching a key from {@link module:log.levels} is provided, acts
                 * as a setter.
                 *
                 * @param  {string} [lvl]
                 *         Pass a valid level to set a new logging level.
                 *
                 * @return {string}
                 *         The current logging level.
                 */ log.level = function(lvl) {
                    if ("string" == typeof lvl) {
                        if (!log.levels.hasOwnProperty(lvl)) throw Error('"' + lvl + '" in not a valid log level');
                        level = lvl;
                    }
                    return level;
                }, /**
                 * Returns an array containing everything that has been logged to the history.
                 *
                 * This array is a shallow clone of the internal history record. However, its
                 * contents are _not_ cloned; so, mutating objects inside this array will
                 * mutate them in history.
                 *
                 * @return {Array}
                 */ log.history = function() {
                    return history ? [].concat(history) : [];
                }, /**
                 * Allows you to filter the history by the given logger name
                 *
                 * @param {string} fname
                 *        The name to filter by
                 *
                 * @return {Array}
                 *         The filtered list to return
                 */ log.history.filter = function(fname) {
                    return (history || []).filter(function(historyItem) {
                        // if the first item in each historyItem includes `fname`, then it's a match
                        return RegExp(".*" + fname + ".*").test(historyItem[0]);
                    });
                }, /**
                 * Clears the internal history tracking, but does not prevent further history
                 * tracking.
                 */ log.history.clear = function() {
                    history && (history.length = 0);
                }, /**
                 * Disable history tracking if it is currently enabled.
                 */ log.history.disable = function() {
                    null !== history && (history.length = 0, history = null);
                }, /**
                 * Enable history tracking if it is currently disabled.
                 */ log.history.enable = function() {
                    null === history && (history = []);
                }, /**
                 * Logs error messages. Similar to `console.error`.
                 *
                 * @param {Mixed[]} args
                 *        One or more messages or objects that should be logged as an error
                 */ log.error = function() {
                    for(var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
                    return logByType("error", level, args);
                }, /**
                 * Logs warning messages. Similar to `console.warn`.
                 *
                 * @param {Mixed[]} args
                 *        One or more messages or objects that should be logged as a warning.
                 */ log.warn = function() {
                    for(var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++)args[_key3] = arguments[_key3];
                    return logByType("warn", level, args);
                }, /**
                 * Logs debug messages. Similar to `console.debug`, but may also act as a comparable
                 * log if `console.debug` is not available
                 *
                 * @param {Mixed[]} args
                 *        One or more messages or objects that should be logged as debug.
                 */ log.debug = function() {
                    for(var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++)args[_key4] = arguments[_key4];
                    return logByType("debug", level, args);
                }, log;
            }("VIDEOJS"), createLogger = log$1.createLogger, toString = Object.prototype.toString, keys = function(object) {
                return isObject(object) ? Object.keys(object) : [];
            };
            /**
             * Array-like iteration for objects.
             *
             * @param {Object} object
             *        The object to iterate over
             *
             * @param {obj:EachCallback} fn
             *        The callback function which is called for each key in the object.
             */ function each(object, fn) {
                keys(object).forEach(function(key) {
                    return fn(object[key], key);
                });
            }
            /**
             * Object.assign-style object shallow merge/extend.
             *
             * @param  {Object} target
             * @param  {Object} ...sources
             * @return {Object}
             */ function assign(target) {
                for(var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)sources[_key - 1] = arguments[_key];
                return Object.assign ? _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_15__ /* ["default"].apply */ .Z.apply(void 0, [
                    target
                ].concat(sources)) : (sources.forEach(function(source) {
                    source && each(source, function(value, key) {
                        target[key] = value;
                    });
                }), target);
            }
            /**
             * Returns whether a value is an object of any kind - including DOM nodes,
             * arrays, regular expressions, etc. Not functions, though.
             *
             * This avoids the gotcha where using `typeof` on a `null` value
             * results in `'object'`.
             *
             * @param  {Object} value
             * @return {boolean}
             */ function isObject(value) {
                return !!value && "object" == typeof value;
            }
            /**
             * Returns whether an object appears to be a "plain" object - that is, a
             * direct instance of `Object`.
             *
             * @param  {Object} value
             * @return {boolean}
             */ function isPlain(value) {
                return isObject(value) && "[object Object]" === toString.call(value) && value.constructor === Object;
            }
            /**
             * @file computed-style.js
             * @module computed-style
             */ /**
             * A safe getComputedStyle.
             *
             * This is needed because in Firefox, if the player is loaded in an iframe with
             * `display:none`, then `getComputedStyle` returns `null`, so, we do a
             * null-check to make sure that the player doesn't break in these cases.
             *
             * @function
             * @param    {Element} el
             *           The element you want the computed style of
             *
             * @param    {string} prop
             *           The property name you want
             *
             * @see      https://bugzilla.mozilla.org/show_bug.cgi?id=548397
             */ function computedStyle(el, prop) {
                if (!el || !prop) return "";
                if ("function" == typeof global_window__WEBPACK_IMPORTED_MODULE_0___default().getComputedStyle) {
                    var computedStyleValue;
                    try {
                        computedStyleValue = global_window__WEBPACK_IMPORTED_MODULE_0___default().getComputedStyle(el);
                    } catch (e) {
                        return "";
                    }
                    return computedStyleValue ? computedStyleValue.getPropertyValue(prop) || computedStyleValue[prop] : "";
                }
                return "";
            }
            /**
             * @file browser.js
             * @module browser
             */ var USER_AGENT = global_window__WEBPACK_IMPORTED_MODULE_0___default().navigator && global_window__WEBPACK_IMPORTED_MODULE_0___default().navigator.userAgent || "", webkitVersionMap = /AppleWebKit\/([\d.]+)/i.exec(USER_AGENT), appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null, IS_IPOD = /iPod/i.test(USER_AGENT), IOS_VERSION = (match = USER_AGENT.match(/OS (\d+)_/i)) && match[1] ? match[1] : null, IS_ANDROID = /Android/i.test(USER_AGENT), ANDROID_VERSION = function() {
                // This matches Android Major.Minor.Patch versions
                // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
                var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);
                if (!match) return null;
                var major = match[1] && parseFloat(match[1]), minor = match[2] && parseFloat(match[2]);
                return major && minor ? parseFloat(match[1] + "." + match[2]) : major || null;
            }(), IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537, IS_FIREFOX = /Firefox/i.test(USER_AGENT), IS_EDGE = /Edg/i.test(USER_AGENT), IS_CHROME = !IS_EDGE && (/Chrome/i.test(USER_AGENT) || /CriOS/i.test(USER_AGENT)), CHROME_VERSION = (match1 = USER_AGENT.match(/(Chrome|CriOS)\/(\d+)/)) && match1[2] ? parseFloat(match1[2]) : null, IE_VERSION = (!(version = (result = /MSIE\s(\d+)\.\d/.exec(USER_AGENT)) && parseFloat(result[1])) && /Trident\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT) && // IE 11 has a different user agent string than other IE versions
            (version = 11.0), version), IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE, IS_WINDOWS = /Windows/i.test(USER_AGENT), TOUCH_ENABLED = !!(isReal() && ("ontouchstart" in global_window__WEBPACK_IMPORTED_MODULE_0___default() || global_window__WEBPACK_IMPORTED_MODULE_0___default().navigator.maxTouchPoints || global_window__WEBPACK_IMPORTED_MODULE_0___default().DocumentTouch && global_window__WEBPACK_IMPORTED_MODULE_0___default().document instanceof global_window__WEBPACK_IMPORTED_MODULE_0___default().DocumentTouch)), IS_IPAD = /iPad/i.test(USER_AGENT) || IS_SAFARI && TOUCH_ENABLED && !/iPhone/i.test(USER_AGENT), IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD, IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD, IS_ANY_SAFARI = (IS_SAFARI || IS_IOS) && !IS_CHROME, browser = /*#__PURE__*/ Object.freeze({
                __proto__: null,
                IS_IPOD: IS_IPOD,
                IOS_VERSION: IOS_VERSION,
                IS_ANDROID: IS_ANDROID,
                ANDROID_VERSION: ANDROID_VERSION,
                IS_NATIVE_ANDROID: IS_NATIVE_ANDROID,
                IS_FIREFOX: IS_FIREFOX,
                IS_EDGE: IS_EDGE,
                IS_CHROME: IS_CHROME,
                CHROME_VERSION: CHROME_VERSION,
                IE_VERSION: IE_VERSION,
                IS_SAFARI: IS_SAFARI,
                IS_WINDOWS: IS_WINDOWS,
                TOUCH_ENABLED: TOUCH_ENABLED,
                IS_IPAD: IS_IPAD,
                IS_IPHONE: IS_IPHONE,
                IS_IOS: IS_IOS,
                IS_ANY_SAFARI: IS_ANY_SAFARI
            });
            /**
             * @file dom.js
             * @module dom
             */ /**
             * Detect if a value is a string with any non-whitespace characters.
             *
             * @private
             * @param  {string} str
             *         The string to check
             *
             * @return {boolean}
             *         Will be `true` if the string is non-blank, `false` otherwise.
             *
             */ function isNonBlankString(str) {
                // we use str.trim as it will trim any whitespace characters
                // from the front or back of non-whitespace characters. aka
                // Any string that contains non-whitespace characters will
                // still contain them after `trim` but whitespace only strings
                // will have a length of 0, failing this check.
                return "string" == typeof str && !!str.trim();
            }
            /**
             * Throws an error if the passed string has whitespace. This is used by
             * class methods to be relatively consistent with the classList API.
             *
             * @private
             * @param  {string} str
             *         The string to check for whitespace.
             *
             * @throws {Error}
             *         Throws an error if there is whitespace in the string.
             */ function throwIfWhitespace(str) {
                // str.indexOf instead of regex because str.indexOf is faster performance wise.
                if (str.indexOf(" ") >= 0) throw Error("class has illegal whitespace characters");
            }
            /**
             * Whether the current DOM interface appears to be real (i.e. not simulated).
             *
             * @return {boolean}
             *         Will be `true` if the DOM appears to be real, `false` otherwise.
             */ function isReal() {
                // Both document and window will never be undefined thanks to `global`.
                return global_document__WEBPACK_IMPORTED_MODULE_1___default() === global_window__WEBPACK_IMPORTED_MODULE_0___default().document;
            }
            /**
             * Determines, via duck typing, whether or not a value is a DOM element.
             *
             * @param  {Mixed} value
             *         The value to check.
             *
             * @return {boolean}
             *         Will be `true` if the value is a DOM element, `false` otherwise.
             */ function isEl(value) {
                return isObject(value) && 1 === value.nodeType;
            }
            /**
             * Determines if the current DOM is embedded in an iframe.
             *
             * @return {boolean}
             *         Will be `true` if the DOM is embedded in an iframe, `false`
             *         otherwise.
             */ function isInFrame() {
                // We need a try/catch here because Safari will throw errors when attempting
                // to get either `parent` or `self`
                try {
                    return global_window__WEBPACK_IMPORTED_MODULE_0___default().parent !== global_window__WEBPACK_IMPORTED_MODULE_0___default().self;
                } catch (x) {
                    return !0;
                }
            }
            /**
             * Creates functions to query the DOM using a given method.
             *
             * @private
             * @param   {string} method
             *          The method to create the query with.
             *
             * @return  {Function}
             *          The query method
             */ function createQuerier(method) {
                return function(selector, context) {
                    if (!isNonBlankString(selector)) return global_document__WEBPACK_IMPORTED_MODULE_1___default()[method](null);
                    isNonBlankString(context) && (context = global_document__WEBPACK_IMPORTED_MODULE_1___default().querySelector(context));
                    var ctx = isEl(context) ? context : global_document__WEBPACK_IMPORTED_MODULE_1___default();
                    return ctx[method] && ctx[method](selector);
                };
            }
            /**
             * Creates an element and applies properties, attributes, and inserts content.
             *
             * @param  {string} [tagName='div']
             *         Name of tag to be created.
             *
             * @param  {Object} [properties={}]
             *         Element properties to be applied.
             *
             * @param  {Object} [attributes={}]
             *         Element attributes to be applied.
             *
             * @param {module:dom~ContentDescriptor} content
             *        A content descriptor object.
             *
             * @return {Element}
             *         The element that was created.
             */ function createEl(tagName, properties, attributes, content) {
                void 0 === tagName && (tagName = "div"), void 0 === properties && (properties = {}), void 0 === attributes && (attributes = {});
                var el = global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement(tagName);
                return Object.getOwnPropertyNames(properties).forEach(function(propName) {
                    var val = properties[propName]; // See #2176
                    // We originally were accepting both properties and attributes in the
                    // same object, but that doesn't work so well.
                    -1 !== propName.indexOf("aria-") || "role" === propName || "type" === propName ? (log$1.warn("Setting attributes in the second argument of createEl()\nhas been deprecated. Use the third argument instead.\ncreateEl(type, properties, attributes). Attempting to set " + propName + " to " + val + "."), el.setAttribute(propName, val)) : "textContent" === propName ? textContent(el, val) : (el[propName] !== val || "tabIndex" === propName) && (el[propName] = val);
                }), Object.getOwnPropertyNames(attributes).forEach(function(attrName) {
                    el.setAttribute(attrName, attributes[attrName]);
                }), content && appendContent(el, content), el;
            }
            /**
             * Injects text into an element, replacing any existing contents entirely.
             *
             * @param  {Element} el
             *         The element to add text content into
             *
             * @param  {string} text
             *         The text content to add.
             *
             * @return {Element}
             *         The element with added text content.
             */ function textContent(el, text) {
                return void 0 === el.textContent ? el.innerText = text : el.textContent = text, el;
            }
            /**
             * Insert an element as the first child node of another
             *
             * @param {Element} child
             *        Element to insert
             *
             * @param {Element} parent
             *        Element to insert child into
             */ function prependTo(child, parent) {
                parent.firstChild ? parent.insertBefore(child, parent.firstChild) : parent.appendChild(child);
            }
            /**
             * Check if an element has a class name.
             *
             * @param  {Element} element
             *         Element to check
             *
             * @param  {string} classToCheck
             *         Class name to check for
             *
             * @return {boolean}
             *         Will be `true` if the element has a class, `false` otherwise.
             *
             * @throws {Error}
             *         Throws an error if `classToCheck` has white space.
             */ function hasClass(element, classToCheck) {
                return (throwIfWhitespace(classToCheck), element.classList) ? element.classList.contains(classToCheck) : RegExp("(^|\\s)" + classToCheck + "($|\\s)").test(element.className);
            }
            /**
             * Add a class name to an element.
             *
             * @param  {Element} element
             *         Element to add class name to.
             *
             * @param  {string} classToAdd
             *         Class name to add.
             *
             * @return {Element}
             *         The DOM element with the added class name.
             */ function addClass(element, classToAdd) {
                return element.classList ? element.classList.add(classToAdd) : hasClass(element, classToAdd) || (element.className = (element.className + " " + classToAdd).trim()), element;
            }
            /**
             * Remove a class name from an element.
             *
             * @param  {Element} element
             *         Element to remove a class name from.
             *
             * @param  {string} classToRemove
             *         Class name to remove
             *
             * @return {Element}
             *         The DOM element with class name removed.
             */ function removeClass(element, classToRemove) {
                return(// Protect in case the player gets disposed
                element ? (element.classList ? element.classList.remove(classToRemove) : (throwIfWhitespace(classToRemove), element.className = element.className.split(/\s+/).filter(function(c) {
                    return c !== classToRemove;
                }).join(" ")), element) : (log$1.warn("removeClass was called with an element that doesn't exist"), null));
            }
            /**
             * The callback definition for toggleClass.
             *
             * @callback module:dom~PredicateCallback
             * @param    {Element} element
             *           The DOM element of the Component.
             *
             * @param    {string} classToToggle
             *           The `className` that wants to be toggled
             *
             * @return   {boolean|undefined}
             *           If `true` is returned, the `classToToggle` will be added to the
             *           `element`. If `false`, the `classToToggle` will be removed from
             *           the `element`. If `undefined`, the callback will be ignored.
             */ /**
             * Adds or removes a class name to/from an element depending on an optional
             * condition or the presence/absence of the class name.
             *
             * @param  {Element} element
             *         The element to toggle a class name on.
             *
             * @param  {string} classToToggle
             *         The class that should be toggled.
             *
             * @param  {boolean|module:dom~PredicateCallback} [predicate]
             *         See the return value for {@link module:dom~PredicateCallback}
             *
             * @return {Element}
             *         The element with a class that has been toggled.
             */ function toggleClass(element, classToToggle, predicate) {
                // This CANNOT use `classList` internally because IE11 does not support the
                // second parameter to the `classList.toggle()` method! Which is fine because
                // `classList` will be used by the add/remove functions.
                var has = hasClass(element, classToToggle);
                // element, no action is required.
                if ("function" == typeof predicate && (predicate = predicate(element, classToToggle)), "boolean" != typeof predicate && (predicate = !has), predicate !== has) return predicate ? addClass(element, classToToggle) : removeClass(element, classToToggle), element;
            }
            /**
             * Apply attributes to an HTML element.
             *
             * @param {Element} el
             *        Element to add attributes to.
             *
             * @param {Object} [attributes]
             *        Attributes to be applied.
             */ function setAttributes(el, attributes) {
                Object.getOwnPropertyNames(attributes).forEach(function(attrName) {
                    var attrValue = attributes[attrName];
                    null == attrValue || !1 === attrValue ? el.removeAttribute(attrName) : el.setAttribute(attrName, !0 === attrValue ? "" : attrValue);
                });
            }
            /**
             * Get an element's attribute values, as defined on the HTML tag.
             *
             * Attributes are not the same as properties. They're defined on the tag
             * or with setAttribute.
             *
             * @param  {Element} tag
             *         Element from which to get tag attributes.
             *
             * @return {Object}
             *         All attributes of the element. Boolean attributes will be `true` or
             *         `false`, others will be strings.
             */ function getAttributes(tag) {
                var obj = {}; // known boolean attributes
                if (tag && tag.attributes && tag.attributes.length > 0) for(var attrs = tag.attributes, i = attrs.length - 1; i >= 0; i--){
                    var attrName = attrs[i].name, attrVal = attrs[i].value;
                    ("boolean" == typeof tag[attrName] || -1 !== ",autoplay,controls,playsinline,loop,muted,default,defaultMuted,".indexOf("," + attrName + ",")) && // the value of an included boolean attribute is typically an empty
                    // string ('') which would equal false if we just check for a false value.
                    // we also don't want support bad code like autoplay='false'
                    (attrVal = null !== attrVal), obj[attrName] = attrVal;
                }
                return obj;
            }
            /**
             * Get the value of an element's attribute.
             *
             * @param {Element} el
             *        A DOM element.
             *
             * @param {string} attribute
             *        Attribute to get the value of.
             *
             * @return {string}
             *         The value of the attribute.
             */ function getAttribute(el, attribute) {
                return el.getAttribute(attribute);
            }
            /**
             * Set the value of an element's attribute.
             *
             * @param {Element} el
             *        A DOM element.
             *
             * @param {string} attribute
             *        Attribute to set.
             *
             * @param {string} value
             *        Value to set the attribute to.
             */ function setAttribute(el, attribute, value) {
                el.setAttribute(attribute, value);
            }
            /**
             * Remove an element's attribute.
             *
             * @param {Element} el
             *        A DOM element.
             *
             * @param {string} attribute
             *        Attribute to remove.
             */ function removeAttribute(el, attribute) {
                el.removeAttribute(attribute);
            }
            /**
             * Attempt to block the ability to select text.
             */ function blockTextSelection() {
                global_document__WEBPACK_IMPORTED_MODULE_1___default().body.focus(), global_document__WEBPACK_IMPORTED_MODULE_1___default().onselectstart = function() {
                    return !1;
                };
            }
            /**
             * Turn off text selection blocking.
             */ function unblockTextSelection() {
                global_document__WEBPACK_IMPORTED_MODULE_1___default().onselectstart = function() {
                    return !0;
                };
            }
            /**
             * Identical to the native `getBoundingClientRect` function, but ensures that
             * the method is supported at all (it is in all browsers we claim to support)
             * and that the element is in the DOM before continuing.
             *
             * This wrapper function also shims properties which are not provided by some
             * older browsers (namely, IE8).
             *
             * Additionally, some browsers do not support adding properties to a
             * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard
             * properties (except `x` and `y` which are not widely supported). This helps
             * avoid implementations where keys are non-enumerable.
             *
             * @param  {Element} el
             *         Element whose `ClientRect` we want to calculate.
             *
             * @return {Object|undefined}
             *         Always returns a plain object - or `undefined` if it cannot.
             */ function getBoundingClientRect(el) {
                if (el && el.getBoundingClientRect && el.parentNode) {
                    var rect = el.getBoundingClientRect(), result = {};
                    return [
                        "bottom",
                        "height",
                        "left",
                        "right",
                        "top",
                        "width"
                    ].forEach(function(k) {
                        void 0 !== rect[k] && (result[k] = rect[k]);
                    }), result.height || (result.height = parseFloat(computedStyle(el, "height"))), result.width || (result.width = parseFloat(computedStyle(el, "width"))), result;
                }
            }
            /**
             * Represents the position of a DOM element on the page.
             *
             * @typedef  {Object} module:dom~Position
             *
             * @property {number} left
             *           Pixels to the left.
             *
             * @property {number} top
             *           Pixels from the top.
             */ /**
             * Get the position of an element in the DOM.
             *
             * Uses `getBoundingClientRect` technique from John Resig.
             *
             * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/
             *
             * @param  {Element} el
             *         Element from which to get offset.
             *
             * @return {module:dom~Position}
             *         The position of the element that was passed in.
             */ function findPosition(el) {
                if (!el || el && !el.offsetParent) return {
                    left: 0,
                    top: 0,
                    width: 0,
                    height: 0
                };
                for(var width = el.offsetWidth, height = el.offsetHeight, left = 0, top = 0; el.offsetParent && el !== global_document__WEBPACK_IMPORTED_MODULE_1___default()[FullscreenApi.fullscreenElement];)left += el.offsetLeft, top += el.offsetTop, el = el.offsetParent;
                return {
                    left: left,
                    top: top,
                    width: width,
                    height: height
                };
            }
            /**
             * Represents x and y coordinates for a DOM element or mouse pointer.
             *
             * @typedef  {Object} module:dom~Coordinates
             *
             * @property {number} x
             *           x coordinate in pixels
             *
             * @property {number} y
             *           y coordinate in pixels
             */ /**
             * Get the pointer position within an element.
             *
             * The base on the coordinates are the bottom left of the element.
             *
             * @param  {Element} el
             *         Element on which to get the pointer position on.
             *
             * @param  {EventTarget~Event} event
             *         Event object.
             *
             * @return {module:dom~Coordinates}
             *         A coordinates object corresponding to the mouse position.
             *
             */ function getPointerPosition(el, event) {
                var translated = {
                    x: 0,
                    y: 0
                };
                if (IS_IOS) for(var item = el; item && "html" !== item.nodeName.toLowerCase();){
                    var transform = computedStyle(item, "transform");
                    if (/^matrix/.test(transform)) {
                        var values = transform.slice(7, -1).split(/,\s/).map(Number);
                        translated.x += values[4], translated.y += values[5];
                    } else if (/^matrix3d/.test(transform)) {
                        var _values = transform.slice(9, -1).split(/,\s/).map(Number);
                        translated.x += _values[12], translated.y += _values[13];
                    }
                    item = item.parentNode;
                }
                var position = {}, boxTarget = findPosition(event.target), box = findPosition(el), boxW = box.width, boxH = box.height, offsetY = event.offsetY - (box.top - boxTarget.top), offsetX = event.offsetX - (box.left - boxTarget.left);
                return event.changedTouches && (offsetX = event.changedTouches[0].pageX - box.left, offsetY = event.changedTouches[0].pageY + box.top, IS_IOS && (offsetX -= translated.x, offsetY -= translated.y)), position.y = 1 - Math.max(0, Math.min(1, offsetY / boxH)), position.x = Math.max(0, Math.min(1, offsetX / boxW)), position;
            }
            /**
             * Determines, via duck typing, whether or not a value is a text node.
             *
             * @param  {Mixed} value
             *         Check if this value is a text node.
             *
             * @return {boolean}
             *         Will be `true` if the value is a text node, `false` otherwise.
             */ function isTextNode(value) {
                return isObject(value) && 3 === value.nodeType;
            }
            /**
             * Empties the contents of an element.
             *
             * @param  {Element} el
             *         The element to empty children from
             *
             * @return {Element}
             *         The element with no children
             */ function emptyEl(el) {
                for(; el.firstChild;)el.removeChild(el.firstChild);
                return el;
            }
            /**
             * This is a mixed value that describes content to be injected into the DOM
             * via some method. It can be of the following types:
             *
             * Type       | Description
             * -----------|-------------
             * `string`   | The value will be normalized into a text node.
             * `Element`  | The value will be accepted as-is.
             * `TextNode` | The value will be accepted as-is.
             * `Array`    | A one-dimensional array of strings, elements, text nodes, or functions. These functions should return a string, element, or text node (any other return value, like an array, will be ignored).
             * `Function` | A function, which is expected to return a string, element, text node, or array - any of the other possible values described above. This means that a content descriptor could be a function that returns an array of functions, but those second-level functions must return strings, elements, or text nodes.
             *
             * @typedef {string|Element|TextNode|Array|Function} module:dom~ContentDescriptor
             */ /**
             * Normalizes content for eventual insertion into the DOM.
             *
             * This allows a wide range of content definition methods, but helps protect
             * from falling into the trap of simply writing to `innerHTML`, which could
             * be an XSS concern.
             *
             * The content for an element can be passed in multiple types and
             * combinations, whose behavior is as follows:
             *
             * @param {module:dom~ContentDescriptor} content
             *        A content descriptor value.
             *
             * @return {Array}
             *         All of the content that was passed in, normalized to an array of
             *         elements or text nodes.
             */ function normalizeContent(content) {
                // filtered, and returned.
                return "function" == typeof content && (content = content()), (Array.isArray(content) ? content : [
                    content
                ]).map(function(value) {
                    return ("function" == typeof value && (value = value()), isEl(value) || isTextNode(value)) ? value : "string" == typeof value && /\S/.test(value) ? global_document__WEBPACK_IMPORTED_MODULE_1___default().createTextNode(value) : void 0;
                }).filter(function(value) {
                    return value;
                });
            }
            /**
             * Normalizes and appends content to an element.
             *
             * @param  {Element} el
             *         Element to append normalized content to.
             *
             * @param {module:dom~ContentDescriptor} content
             *        A content descriptor value.
             *
             * @return {Element}
             *         The element with appended normalized content.
             */ function appendContent(el, content) {
                return normalizeContent(content).forEach(function(node) {
                    return el.appendChild(node);
                }), el;
            }
            /**
             * Normalizes and inserts content into an element; this is identical to
             * `appendContent()`, except it empties the element first.
             *
             * @param {Element} el
             *        Element to insert normalized content into.
             *
             * @param {module:dom~ContentDescriptor} content
             *        A content descriptor value.
             *
             * @return {Element}
             *         The element with inserted normalized content.
             */ function insertContent(el, content) {
                return appendContent(emptyEl(el), content);
            }
            /**
             * Check if an event was a single left click.
             *
             * @param  {EventTarget~Event} event
             *         Event object.
             *
             * @return {boolean}
             *         Will be `true` if a single left click, `false` otherwise.
             */ function isSingleLeftClick(event) {
                return(// Note: if you create something draggable, be sure to
                // call it on both `mousedown` and `mousemove` event,
                // otherwise `mousedown` should be enough for a button
                void 0 === event.button && void 0 === event.buttons || 0 === event.button && void 0 === event.buttons || "mouseup" === event.type && 0 === event.button && 0 === event.buttons || 0 === event.button && 1 === event.buttons);
            }
            /**
             * Finds a single DOM element matching `selector` within the optional
             * `context` of another DOM element (defaulting to `document`).
             *
             * @param  {string} selector
             *         A valid CSS selector, which will be passed to `querySelector`.
             *
             * @param  {Element|String} [context=document]
             *         A DOM element within which to query. Can also be a selector
             *         string in which case the first matching element will be used
             *         as context. If missing (or no element matches selector), falls
             *         back to `document`.
             *
             * @return {Element|null}
             *         The element that was found or null.
             */ var $ = createQuerier("querySelector"), $$ = createQuerier("querySelectorAll"), Dom = /*#__PURE__*/ Object.freeze({
                __proto__: null,
                isReal: isReal,
                isEl: isEl,
                isInFrame: isInFrame,
                createEl: createEl,
                textContent: textContent,
                prependTo: prependTo,
                hasClass: hasClass,
                addClass: addClass,
                removeClass: removeClass,
                toggleClass: toggleClass,
                setAttributes: setAttributes,
                getAttributes: getAttributes,
                getAttribute: getAttribute,
                setAttribute: setAttribute,
                removeAttribute: removeAttribute,
                blockTextSelection: blockTextSelection,
                unblockTextSelection: unblockTextSelection,
                getBoundingClientRect: getBoundingClientRect,
                findPosition: findPosition,
                getPointerPosition: getPointerPosition,
                isTextNode: isTextNode,
                emptyEl: emptyEl,
                normalizeContent: normalizeContent,
                appendContent: appendContent,
                insertContent: insertContent,
                isSingleLeftClick: isSingleLeftClick,
                $: $,
                $$: $$
            }), _windowLoaded = !1, autoSetup = function() {
                if (!1 !== videojs$1.options.autoSetup) {
                    var vids = Array.prototype.slice.call(global_document__WEBPACK_IMPORTED_MODULE_1___default().getElementsByTagName("video")), audios = Array.prototype.slice.call(global_document__WEBPACK_IMPORTED_MODULE_1___default().getElementsByTagName("audio")), divs = Array.prototype.slice.call(global_document__WEBPACK_IMPORTED_MODULE_1___default().getElementsByTagName("video-js")), mediaEls = vids.concat(audios, divs);
                    if (mediaEls && mediaEls.length > 0) for(var i = 0, e = mediaEls.length; i < e; i++){
                        var mediaEl = mediaEls[i]; // Check if element exists, has getAttribute func.
                        if (mediaEl && mediaEl.getAttribute) // Make sure this player hasn't already been set up.
                        void 0 === mediaEl.player && null !== mediaEl.getAttribute("data-setup") && // Create new video.js instance.
                        videojs$1(mediaEl); // If getAttribute isn't defined, we need to wait for the DOM.
                        else {
                            autoSetupTimeout(1);
                            break;
                        }
                    } // No videos were found, so keep looping unless page is finished loading.
                    else _windowLoaded || autoSetupTimeout(1);
                }
            };
            /**
             * Wait until the page is loaded before running autoSetup. This will be called in
             * autoSetup if `hasLoaded` returns false.
             *
             * @param {number} wait
             *        How long to wait in ms
             *
             * @param {module:videojs} [vjs]
             *        The videojs library function
             */ function autoSetupTimeout(wait, vjs) {
                // Protect against breakage in non-browser environments
                isReal() && (vjs && (videojs$1 = vjs), global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(autoSetup, wait));
            }
            /**
             * Used to set the internal tracking of window loaded state to true.
             *
             * @private
             */ function setWindowLoaded() {
                _windowLoaded = !0, global_window__WEBPACK_IMPORTED_MODULE_0___default().removeEventListener("load", setWindowLoaded);
            }
            isReal() && ("complete" === global_document__WEBPACK_IMPORTED_MODULE_1___default().readyState ? setWindowLoaded() : /**
                     * Listen for the load event on window, and set _windowLoaded to true.
                     *
                     * We use a standard event listener here to avoid incrementing the GUID
                     * before any players are created.
                     *
                     * @listens load
                     */ global_window__WEBPACK_IMPORTED_MODULE_0___default().addEventListener("load", setWindowLoaded));
            /**
             * @file stylesheet.js
             * @module stylesheet
             */ /**
             * Create a DOM syle element given a className for it.
             *
             * @param {string} className
             *        The className to add to the created style element.
             *
             * @return {Element}
             *         The element that was created.
             */ var createStyleElement = function(className) {
                var style = global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("style");
                return style.className = className, style;
            }, setTextContent = function(el, content) {
                el.styleSheet ? el.styleSheet.cssText = content : el.textContent = content;
            }, _guid = 3;
            global_window__WEBPACK_IMPORTED_MODULE_0___default().WeakMap || (FakeWeakMap = /*#__PURE__*/ function() {
                function FakeWeakMap() {
                    this.vdata = "vdata" + Math.floor(global_window__WEBPACK_IMPORTED_MODULE_0___default().performance && global_window__WEBPACK_IMPORTED_MODULE_0___default().performance.now() || Date.now()), this.data = {};
                }
                var _proto = FakeWeakMap.prototype;
                return _proto.set = function(key, value) {
                    var access = key[this.vdata] || _guid++;
                    return key[this.vdata] || (key[this.vdata] = access), this.data[access] = value, this;
                }, _proto.get = function(key) {
                    var access = key[this.vdata]; // we have data, return it
                    if (access) return this.data[access];
                     // we don't have data, return nothing.
                    // return undefined explicitly as that's the contract for this method
                    log$1("We have no data for this element", key);
                }, _proto.has = function(key) {
                    return key[this.vdata] in this.data;
                }, _proto.delete = function(key) {
                    var access = key[this.vdata];
                    access && (delete this.data[access], delete key[this.vdata]);
                }, FakeWeakMap;
            }());
            /**
             * Element Data Store.
             *
             * Allows for binding data to an element without putting it directly on the
             * element. Ex. Event listeners are stored here.
             * (also from jsninja.com, slightly modified and updated for closure compiler)
             *
             * @type {Object}
             * @private
             */ var DomData = global_window__WEBPACK_IMPORTED_MODULE_0___default().WeakMap ? new WeakMap() : new FakeWeakMap();
            /**
             * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
             * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
             * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
             * robust as jquery's, so there's probably some differences.
             *
             * @file events.js
             * @module events
             */ /**
             * Clean up the listener cache and dispatchers
             *
             * @param {Element|Object} elem
             *        Element to clean up
             *
             * @param {string} type
             *        Type of event to clean up
             */ function _cleanUpEvents(elem, type) {
                if (DomData.has(elem)) {
                    var data = DomData.get(elem); // Remove the events of a particular type if there are none left
                    0 === data.handlers[type].length && (delete data.handlers[type], elem.removeEventListener ? elem.removeEventListener(type, data.dispatcher, !1) : elem.detachEvent && elem.detachEvent("on" + type, data.dispatcher)), Object.getOwnPropertyNames(data.handlers).length <= 0 && (delete data.handlers, delete data.dispatcher, delete data.disabled), 0 === Object.getOwnPropertyNames(data).length && DomData.delete(elem);
                }
            }
            /**
             * Loops through an array of event types and calls the requested method for each type.
             *
             * @param {Function} fn
             *        The event method we want to use.
             *
             * @param {Element|Object} elem
             *        Element or object to bind listeners to
             *
             * @param {string} type
             *        Type of event to bind to.
             *
             * @param {EventTarget~EventListener} callback
             *        Event listener.
             */ function _handleMultipleEvents(fn, elem, types, callback) {
                types.forEach(function(type) {
                    // Call the event method for each one of the types
                    fn(elem, type, callback);
                });
            }
            /**
             * Fix a native event to have standard property values
             *
             * @param {Object} event
             *        Event object to fix.
             *
             * @return {Object}
             *         Fixed event object.
             */ function fixEvent(event) {
                if (event.fixed_) return event;
                function returnTrue() {
                    return !0;
                }
                function returnFalse() {
                    return !1;
                } // Test if fixing up is needed
                // Used to check if !event.stopPropagation instead of isPropagationStopped
                // But native events return true for stopPropagation, but don't have
                // other expected methods like isPropagationStopped. Seems to be a problem
                // with the Javascript Ninja code. So we're just overriding all events now.
                if (!event || !event.isPropagationStopped || !event.isImmediatePropagationStopped) {
                    var old = event || global_window__WEBPACK_IMPORTED_MODULE_0___default().event;
                    // IE8 Doesn't like when you mess with native event properties
                    // Firefox returns false for event.hasOwnProperty('type') and other props
                    //  which makes copying more difficult.
                    // TODO: Probably best to create a whitelist of event props
                    for(var key in event = {}, old)// Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
                    // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
                    // and webkitMovementX/Y
                    "layerX" === key || "layerY" === key || "keyLocation" === key || "webkitMovementX" === key || "webkitMovementY" === key || "returnValue" === key && old.preventDefault || (event[key] = old[key]);
                     // The event occurred on this element
                    if (event.target || (event.target = event.srcElement || global_document__WEBPACK_IMPORTED_MODULE_1___default()), event.relatedTarget || (event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement), event.preventDefault = function() {
                        old.preventDefault && old.preventDefault(), event.returnValue = !1, old.returnValue = !1, event.defaultPrevented = !0;
                    }, event.defaultPrevented = !1, event.stopPropagation = function() {
                        old.stopPropagation && old.stopPropagation(), event.cancelBubble = !0, old.cancelBubble = !0, event.isPropagationStopped = returnTrue;
                    }, event.isPropagationStopped = returnFalse, event.stopImmediatePropagation = function() {
                        old.stopImmediatePropagation && old.stopImmediatePropagation(), event.isImmediatePropagationStopped = returnTrue, event.stopPropagation();
                    }, event.isImmediatePropagationStopped = returnFalse, null !== event.clientX && void 0 !== event.clientX) {
                        var doc = global_document__WEBPACK_IMPORTED_MODULE_1___default().documentElement, body = global_document__WEBPACK_IMPORTED_MODULE_1___default().body;
                        event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0), event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                    } // Handle key presses
                    event.which = event.charCode || event.keyCode, null !== event.button && void 0 !== event.button && // The following is disabled because it does not pass videojs-standard
                    // and... yikes.
                    /* eslint-disable */ (event.button = 1 & event.button ? 0 : 4 & event.button ? 1 : 2 & event.button ? 2 : 0);
                }
                return event.fixed_ = !0, event;
            }
            var supportsPassive = function() {
                if ("boolean" != typeof _supportsPassive) {
                    _supportsPassive = !1;
                    try {
                        var opts = Object.defineProperty({}, "passive", {
                            get: function() {
                                _supportsPassive = !0;
                            }
                        });
                        global_window__WEBPACK_IMPORTED_MODULE_0___default().addEventListener("test", null, opts), global_window__WEBPACK_IMPORTED_MODULE_0___default().removeEventListener("test", null, opts);
                    } catch (e) {
                    // disregard
                    }
                }
                return _supportsPassive;
            }, passiveEvents = [
                "touchstart",
                "touchmove"
            ];
            /**
             * Add an event listener to element
             * It stores the handler function in a separate cache object
             * and adds a generic handler to the element's event,
             * along with a unique id (guid) to the element.
             *
             * @param {Element|Object} elem
             *        Element or object to bind listeners to
             *
             * @param {string|string[]} type
             *        Type of event to bind to.
             *
             * @param {EventTarget~EventListener} fn
             *        Event listener.
             */ function on(elem, type, fn) {
                if (Array.isArray(type)) return _handleMultipleEvents(on, elem, type, fn);
                DomData.has(elem) || DomData.set(elem, {});
                var data = DomData.get(elem); // We need a place to store all our handler data
                if (data.handlers || (data.handlers = {}), data.handlers[type] || (data.handlers[type] = []), fn.guid || (fn.guid = _guid++), data.handlers[type].push(fn), data.dispatcher || (data.disabled = !1, data.dispatcher = function(event, hash) {
                    if (!data.disabled) {
                        event = fixEvent(event);
                        var handlers = data.handlers[event.type];
                        if (handlers) for(var handlersCopy = handlers.slice(0), m = 0, n = handlersCopy.length; m < n && !event.isImmediatePropagationStopped(); m++)try {
                            handlersCopy[m].call(elem, event, hash);
                        } catch (e) {
                            log$1.error(e);
                        }
                    }
                }), 1 === data.handlers[type].length) {
                    if (elem.addEventListener) {
                        var options = !1;
                        supportsPassive() && passiveEvents.indexOf(type) > -1 && (options = {
                            passive: !0
                        }), elem.addEventListener(type, data.dispatcher, options);
                    } else elem.attachEvent && elem.attachEvent("on" + type, data.dispatcher);
                }
            }
            /**
             * Removes event listeners from an element
             *
             * @param {Element|Object} elem
             *        Object to remove listeners from.
             *
             * @param {string|string[]} [type]
             *        Type of listener to remove. Don't include to remove all events from element.
             *
             * @param {EventTarget~EventListener} [fn]
             *        Specific listener to remove. Don't include to remove listeners for an event
             *        type.
             */ function off(elem, type, fn) {
                // Don't want to add a cache object through getElData if not needed
                if (DomData.has(elem)) {
                    var data = DomData.get(elem); // If no events exist, nothing to unbind
                    if (data.handlers) {
                        if (Array.isArray(type)) return _handleMultipleEvents(off, elem, type, fn);
                         // Utility function
                        var removeType = function(el, t) {
                            data.handlers[t] = [], _cleanUpEvents(el, t);
                        }; // Are we removing all bound events?
                        if (void 0 === type) {
                            for(var t in data.handlers)Object.prototype.hasOwnProperty.call(data.handlers || {}, t) && removeType(elem, t);
                            return;
                        }
                        var handlers = data.handlers[type]; // If no handlers exist, nothing to unbind
                        if (handlers) {
                            if (!fn) {
                                removeType(elem, type);
                                return;
                            } // We're only removing a single handler
                            if (fn.guid) for(var n = 0; n < handlers.length; n++)handlers[n].guid === fn.guid && handlers.splice(n--, 1);
                            _cleanUpEvents(elem, type);
                        } // If no listener was provided, remove all listeners for type
                    }
                }
            }
            /**
             * Trigger an event for an element
             *
             * @param {Element|Object} elem
             *        Element to trigger an event on
             *
             * @param {EventTarget~Event|string} event
             *        A string (the type) or an event object with a type attribute
             *
             * @param {Object} [hash]
             *        data hash to pass along with the event
             *
             * @return {boolean|undefined}
             *         Returns the opposite of `defaultPrevented` if default was
             *         prevented. Otherwise, returns `undefined`
             */ function trigger(elem, event, hash) {
                // Fetches element data and a reference to the parent (for bubbling).
                // Don't want to add a data object to cache for every parent,
                // so checking hasElData first.
                var elemData = DomData.has(elem) ? DomData.get(elem) : {}, parent = elem.parentNode || elem.ownerDocument;
                // recursively calls this function to bubble the event up the DOM.
                if ("string" == typeof event ? event = {
                    type: event,
                    target: elem
                } : event.target || (event.target = elem), event = fixEvent(event), elemData.dispatcher && elemData.dispatcher.call(elem, event, hash), parent && !event.isPropagationStopped() && !0 === event.bubbles) trigger.call(null, parent, event, hash); // If at the top of the DOM, triggers the default action unless disabled.
                else if (!parent && !event.defaultPrevented && event.target && event.target[event.type]) {
                    DomData.has(event.target) || DomData.set(event.target, {});
                    var targetData = DomData.get(event.target); // Checks if the target has a default action for this event.
                    event.target[event.type] && (// Temporarily disables event dispatching on the target as we have already executed the handler.
                    targetData.disabled = !0, "function" == typeof event.target[event.type] && event.target[event.type](), targetData.disabled = !1);
                } // Inform the triggerer if the default was prevented by returning false
                return !event.defaultPrevented;
            }
            /**
             * Trigger a listener only once for an event.
             *
             * @param {Element|Object} elem
             *        Element or object to bind to.
             *
             * @param {string|string[]} type
             *        Name/type of event
             *
             * @param {Event~EventListener} fn
             *        Event listener function
             */ function one(elem, type, fn) {
                if (Array.isArray(type)) return _handleMultipleEvents(one, elem, type, fn);
                var func = function func() {
                    off(elem, type, func), fn.apply(this, arguments);
                }; // copy the guid to the new function so it can removed using the original function's ID
                func.guid = fn.guid = fn.guid || _guid++, on(elem, type, func);
            }
            /**
             * Trigger a listener only once and then turn if off for all
             * configured events
             *
             * @param {Element|Object} elem
             *        Element or object to bind to.
             *
             * @param {string|string[]} type
             *        Name/type of event
             *
             * @param {Event~EventListener} fn
             *        Event listener function
             */ function any(elem, type, fn) {
                var func = function func() {
                    off(elem, type, func), fn.apply(this, arguments);
                }; // copy the guid to the new function so it can removed using the original function's ID
                func.guid = fn.guid = fn.guid || _guid++, on(elem, type, func);
            }
            var Events = /*#__PURE__*/ Object.freeze({
                __proto__: null,
                fixEvent: fixEvent,
                on: on,
                off: off,
                trigger: trigger,
                one: one,
                any: any
            }), bind = function(context, fn, uid) {
                fn.guid || (fn.guid = _guid++);
                var bound = fn.bind(context); // Allow for the ability to individualize this function
                return(// Needed in the case where multiple objects might share the same prototype
                // IF both items add an event listener with the same function, then you try to remove just one
                // it will remove both because they both have the same guid.
                // when using this, you need to use the bind method when you remove the listener as well.
                // currently used in text tracks
                bound.guid = uid ? uid + "_" + fn.guid : fn.guid, bound);
            }, throttle = function(fn, wait) {
                var last = global_window__WEBPACK_IMPORTED_MODULE_0___default().performance.now();
                return function() {
                    var now = global_window__WEBPACK_IMPORTED_MODULE_0___default().performance.now();
                    now - last >= wait && (fn.apply(void 0, arguments), last = now);
                };
            }, debounce = function(func, wait, immediate, context) {
                void 0 === context && (context = global_window__WEBPACK_IMPORTED_MODULE_0___default());
                /* eslint-disable consistent-this */ var timeout, debounced = function() {
                    var self1 = this, args = arguments, _later = function() {
                        timeout = null, _later = null, immediate || func.apply(self1, args);
                    };
                    !timeout && immediate && func.apply(self1, args), context.clearTimeout(timeout), timeout = context.setTimeout(_later, wait);
                };
                return(/* eslint-enable consistent-this */ debounced.cancel = function() {
                    context.clearTimeout(timeout), timeout = null;
                }, debounced);
            }, EventTarget$2 = function() {};
            /**
             * A Custom DOM event.
             *
             * @typedef {Object} EventTarget~Event
             * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}
             */ /**
             * All event listeners should follow the following format.
             *
             * @callback EventTarget~EventListener
             * @this {EventTarget}
             *
             * @param {EventTarget~Event} event
             *        the event that triggered this function
             *
             * @param {Object} [hash]
             *        hash of data sent during the event
             */ /**
             * An object containing event names as keys and booleans as values.
             *
             * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}
             *         will have extra functionality. See that function for more information.
             *
             * @property EventTarget.prototype.allowedEvents_
             * @private
             */ EventTarget$2.prototype.allowedEvents_ = {}, /**
             * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
             * function that will get called when an event with a certain name gets triggered.
             *
             * @param {string|string[]} type
             *        An event name or an array of event names.
             *
             * @param {EventTarget~EventListener} fn
             *        The function to call with `EventTarget`s
             */ EventTarget$2.prototype.on = function(type, fn) {
                // Remove the addEventListener alias before calling Events.on
                // so we don't get into an infinite type loop
                var ael = this.addEventListener;
                this.addEventListener = function() {}, on(this, type, fn), this.addEventListener = ael;
            }, /**
             * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic
             * the standard DOM API.
             *
             * @function
             * @see {@link EventTarget#on}
             */ EventTarget$2.prototype.addEventListener = EventTarget$2.prototype.on, /**
             * Removes an `event listener` for a specific event from an instance of `EventTarget`.
             * This makes it so that the `event listener` will no longer get called when the
             * named event happens.
             *
             * @param {string|string[]} type
             *        An event name or an array of event names.
             *
             * @param {EventTarget~EventListener} fn
             *        The function to remove.
             */ EventTarget$2.prototype.off = function(type, fn) {
                off(this, type, fn);
            }, /**
             * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic
             * the standard DOM API.
             *
             * @function
             * @see {@link EventTarget#off}
             */ EventTarget$2.prototype.removeEventListener = EventTarget$2.prototype.off, /**
             * This function will add an `event listener` that gets triggered only once. After the
             * first trigger it will get removed. This is like adding an `event listener`
             * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
             *
             * @param {string|string[]} type
             *        An event name or an array of event names.
             *
             * @param {EventTarget~EventListener} fn
             *        The function to be called once for each event name.
             */ EventTarget$2.prototype.one = function(type, fn) {
                // Remove the addEventListener aliasing Events.on
                // so we don't get into an infinite type loop
                var ael = this.addEventListener;
                this.addEventListener = function() {}, one(this, type, fn), this.addEventListener = ael;
            }, EventTarget$2.prototype.any = function(type, fn) {
                // Remove the addEventListener aliasing Events.on
                // so we don't get into an infinite type loop
                var ael = this.addEventListener;
                this.addEventListener = function() {}, any(this, type, fn), this.addEventListener = ael;
            }, /**
             * This function causes an event to happen. This will then cause any `event listeners`
             * that are waiting for that event, to get called. If there are no `event listeners`
             * for an event then nothing will happen.
             *
             * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
             * Trigger will also call the `on` + `uppercaseEventName` function.
             *
             * Example:
             * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
             * `onClick` if it exists.
             *
             * @param {string|EventTarget~Event|Object} event
             *        The name of the event, an `Event`, or an object with a key of type set to
             *        an event name.
             */ EventTarget$2.prototype.trigger = function(event) {
                var type = event.type || event; // deprecation
                "string" == typeof event && (event = {
                    type: type
                }), event = fixEvent(event), this.allowedEvents_[type] && this["on" + type] && this["on" + type](event), trigger(this, event);
            }, /**
             * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic
             * the standard DOM API.
             *
             * @function
             * @see {@link EventTarget#trigger}
             */ EventTarget$2.prototype.dispatchEvent = EventTarget$2.prototype.trigger, EventTarget$2.prototype.queueTrigger = function(event) {
                var _this = this;
                EVENT_MAP || (EVENT_MAP = new Map());
                var type = event.type || event, map = EVENT_MAP.get(this);
                map || (map = new Map(), EVENT_MAP.set(this, map));
                var oldTimeout = map.get(type);
                map.delete(type), global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(oldTimeout);
                var timeout = global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(function() {
                    0 === map.size && (map = null, EVENT_MAP.delete(_this)), _this.trigger(event);
                }, 0);
                map.set(type, timeout);
            };
            /**
             * @file mixins/evented.js
             * @module evented
             */ var objName = function(obj) {
                return "function" == typeof obj.name ? obj.name() : "string" == typeof obj.name ? obj.name : obj.name_ ? obj.name_ : obj.constructor && obj.constructor.name ? obj.constructor.name : typeof obj;
            }, isEvented = function(object) {
                return object instanceof EventTarget$2 || !!object.eventBusEl_ && [
                    "on",
                    "one",
                    "off",
                    "trigger"
                ].every(function(k) {
                    return "function" == typeof object[k];
                });
            }, addEventedCallback = function(target, callback) {
                isEvented(target) ? callback() : (target.eventedCallbacks || (target.eventedCallbacks = []), target.eventedCallbacks.push(callback));
            }, isValidEventType = function(type) {
                return("string" == // The regex here verifies that the `type` contains at least one non-
                // whitespace character.
                typeof type && /\S/.test(type) || Array.isArray(type) && !!type.length);
            }, validateTarget = function(target, obj, fnName) {
                if (!target || !target.nodeName && !isEvented(target)) throw Error("Invalid target for " + objName(obj) + "#" + fnName + "; must be a DOM node or evented object.");
            }, validateEventType = function(type, obj, fnName) {
                if (!isValidEventType(type)) throw Error("Invalid event type for " + objName(obj) + "#" + fnName + "; must be a non-empty string or array.");
            }, validateListener = function(listener, obj, fnName) {
                if ("function" != typeof listener) throw Error("Invalid listener for " + objName(obj) + "#" + fnName + "; must be a function.");
            }, normalizeListenArgs = function(self1, args, fnName) {
                // If the number of arguments is less than 3, the target is always the
                // evented object itself.
                var target, type, listener, isTargetingSelf = args.length < 3 || args[0] === self1 || args[0] === self1.eventBusEl_;
                return isTargetingSelf ? (target = self1.eventBusEl_, args.length >= 3 && args.shift(), type = args[0], listener = args[1]) : (target = args[0], type = args[1], listener = args[2]), validateTarget(target, self1, fnName), validateEventType(type, self1, fnName), validateListener(listener, self1, fnName), {
                    isTargetingSelf: isTargetingSelf,
                    target: target,
                    type: type,
                    listener: listener = bind(self1, listener)
                };
            }, listen = function(target, method, type, listener) {
                validateTarget(target, target, method), target.nodeName ? Events[method](target, type, listener) : target[method](type, listener);
            }, EventedMixin = {
                /**
                 * Add a listener to an event (or events) on this object or another evented
                 * object.
                 *
                 * @param  {string|Array|Element|Object} targetOrType
                 *         If this is a string or array, it represents the event type(s)
                 *         that will trigger the listener.
                 *
                 *         Another evented object can be passed here instead, which will
                 *         cause the listener to listen for events on _that_ object.
                 *
                 *         In either case, the listener's `this` value will be bound to
                 *         this object.
                 *
                 * @param  {string|Array|Function} typeOrListener
                 *         If the first argument was a string or array, this should be the
                 *         listener function. Otherwise, this is a string or array of event
                 *         type(s).
                 *
                 * @param  {Function} [listener]
                 *         If the first argument was another evented object, this will be
                 *         the listener function.
                 */ on: function() {
                    for(var _this = this, _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    var _normalizeListenArgs = normalizeListenArgs(this, args, "on"), isTargetingSelf = _normalizeListenArgs.isTargetingSelf, target = _normalizeListenArgs.target, type = _normalizeListenArgs.type, listener = _normalizeListenArgs.listener;
                    if (listen(target, "on", type, listener), !isTargetingSelf) {
                        // If this object is disposed, remove the listener.
                        var removeListenerOnDispose = function() {
                            return _this.off(target, type, listener);
                        }; // Use the same function ID as the listener so we can remove it later it
                        // using the ID of the original listener.
                        removeListenerOnDispose.guid = listener.guid;
                        // that if the target is disposed BEFORE this object, we remove the
                        // removal listener that was just added. Otherwise, we create a memory leak.
                        var removeRemoverOnTargetDispose = function() {
                            return _this.off("dispose", removeListenerOnDispose);
                        }; // Use the same function ID as the listener so we can remove it later
                        // it using the ID of the original listener.
                        removeRemoverOnTargetDispose.guid = listener.guid, listen(this, "on", "dispose", removeListenerOnDispose), listen(target, "on", "dispose", removeRemoverOnTargetDispose);
                    }
                },
                /**
                 * Add a listener to an event (or events) on this object or another evented
                 * object. The listener will be called once per event and then removed.
                 *
                 * @param  {string|Array|Element|Object} targetOrType
                 *         If this is a string or array, it represents the event type(s)
                 *         that will trigger the listener.
                 *
                 *         Another evented object can be passed here instead, which will
                 *         cause the listener to listen for events on _that_ object.
                 *
                 *         In either case, the listener's `this` value will be bound to
                 *         this object.
                 *
                 * @param  {string|Array|Function} typeOrListener
                 *         If the first argument was a string or array, this should be the
                 *         listener function. Otherwise, this is a string or array of event
                 *         type(s).
                 *
                 * @param  {Function} [listener]
                 *         If the first argument was another evented object, this will be
                 *         the listener function.
                 */ one: function() {
                    for(var _this2 = this, _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
                    var _normalizeListenArgs2 = normalizeListenArgs(this, args, "one"), isTargetingSelf = _normalizeListenArgs2.isTargetingSelf, target = _normalizeListenArgs2.target, type = _normalizeListenArgs2.type, listener = _normalizeListenArgs2.listener;
                    if (isTargetingSelf) listen(target, "one", type, listener); // Targeting another evented object.
                    else {
                        // TODO: This wrapper is incorrect! It should only
                        //       remove the wrapper for the event type that called it.
                        //       Instead all listners are removed on the first trigger!
                        //       see https://github.com/videojs/video.js/issues/5962
                        var wrapper = function wrapper() {
                            _this2.off(target, type, wrapper);
                            for(var _len3 = arguments.length, largs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++)largs[_key3] = arguments[_key3];
                            listener.apply(null, largs);
                        }; // Use the same function ID as the listener so we can remove it later
                        // it using the ID of the original listener.
                        wrapper.guid = listener.guid, listen(target, "one", type, wrapper);
                    }
                },
                /**
                 * Add a listener to an event (or events) on this object or another evented
                 * object. The listener will only be called once for the first event that is triggered
                 * then removed.
                 *
                 * @param  {string|Array|Element|Object} targetOrType
                 *         If this is a string or array, it represents the event type(s)
                 *         that will trigger the listener.
                 *
                 *         Another evented object can be passed here instead, which will
                 *         cause the listener to listen for events on _that_ object.
                 *
                 *         In either case, the listener's `this` value will be bound to
                 *         this object.
                 *
                 * @param  {string|Array|Function} typeOrListener
                 *         If the first argument was a string or array, this should be the
                 *         listener function. Otherwise, this is a string or array of event
                 *         type(s).
                 *
                 * @param  {Function} [listener]
                 *         If the first argument was another evented object, this will be
                 *         the listener function.
                 */ any: function() {
                    for(var _this3 = this, _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++)args[_key4] = arguments[_key4];
                    var _normalizeListenArgs3 = normalizeListenArgs(this, args, "any"), isTargetingSelf = _normalizeListenArgs3.isTargetingSelf, target = _normalizeListenArgs3.target, type = _normalizeListenArgs3.type, listener = _normalizeListenArgs3.listener;
                    if (isTargetingSelf) listen(target, "any", type, listener); // Targeting another evented object.
                    else {
                        var wrapper = function wrapper() {
                            _this3.off(target, type, wrapper);
                            for(var _len5 = arguments.length, largs = Array(_len5), _key5 = 0; _key5 < _len5; _key5++)largs[_key5] = arguments[_key5];
                            listener.apply(null, largs);
                        }; // Use the same function ID as the listener so we can remove it later
                        // it using the ID of the original listener.
                        wrapper.guid = listener.guid, listen(target, "any", type, wrapper);
                    }
                },
                /**
                 * Removes listener(s) from event(s) on an evented object.
                 *
                 * @param  {string|Array|Element|Object} [targetOrType]
                 *         If this is a string or array, it represents the event type(s).
                 *
                 *         Another evented object can be passed here instead, in which case
                 *         ALL 3 arguments are _required_.
                 *
                 * @param  {string|Array|Function} [typeOrListener]
                 *         If the first argument was a string or array, this may be the
                 *         listener function. Otherwise, this is a string or array of event
                 *         type(s).
                 *
                 * @param  {Function} [listener]
                 *         If the first argument was another evented object, this will be
                 *         the listener function; otherwise, _all_ listeners bound to the
                 *         event type(s) will be removed.
                 */ off: function(targetOrType, typeOrListener, listener) {
                    // Targeting this evented object.
                    !targetOrType || isValidEventType(targetOrType) ? off(this.eventBusEl_, targetOrType, typeOrListener) : (validateTarget(targetOrType, this, "off"), validateEventType(typeOrListener, this, "off"), validateListener(listener, this, "off"), listener = bind(this, listener), // the same guid as the event listener in on().
                    this.off("dispose", listener), targetOrType.nodeName ? (off(targetOrType, typeOrListener, listener), off(targetOrType, "dispose", listener)) : isEvented(targetOrType) && (targetOrType.off(typeOrListener, listener), targetOrType.off("dispose", listener)));
                },
                /**
                 * Fire an event on this evented object, causing its listeners to be called.
                 *
                 * @param   {string|Object} event
                 *          An event type or an object with a type property.
                 *
                 * @param   {Object} [hash]
                 *          An additional object to pass along to listeners.
                 *
                 * @return {boolean}
                 *          Whether or not the default behavior was prevented.
                 */ trigger: function(event, hash) {
                    if (validateTarget(this.eventBusEl_, this, "trigger"), !isValidEventType(event && "string" != typeof event ? event.type : event)) {
                        var error = "Invalid event type for " + objName(this) + "#trigger; must be a non-empty string or object with a type key that has a non-empty value.";
                        if (event) (this.log || log$1).error(error);
                        else throw Error(error);
                    }
                    return trigger(this.eventBusEl_, event, hash);
                }
            };
            /**
             * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.
             *
             * @param  {Object} target
             *         The object to which to add event methods.
             *
             * @param  {Object} [options={}]
             *         Options for customizing the mixin behavior.
             *
             * @param  {string} [options.eventBusKey]
             *         By default, adds a `eventBusEl_` DOM element to the target object,
             *         which is used as an event bus. If the target object already has a
             *         DOM element that should be used, pass its key here.
             *
             * @return {Object}
             *         The target object.
             */ function evented(target, options) {
                void 0 === options && (options = {});
                var eventBusKey = options.eventBusKey; // Set or create the eventBusEl_.
                if (eventBusKey) {
                    if (!target[eventBusKey].nodeName) throw Error('The eventBusKey "' + eventBusKey + '" does not refer to an element.');
                    target.eventBusEl_ = target[eventBusKey];
                } else target.eventBusEl_ = createEl("span", {
                    className: "vjs-event-bus"
                });
                return assign(target, EventedMixin), target.eventedCallbacks && target.eventedCallbacks.forEach(function(callback) {
                    callback();
                }), target.on("dispose", function() {
                    target.off(), [
                        target,
                        target.el_,
                        target.eventBusEl_
                    ].forEach(function(val) {
                        val && DomData.has(val) && DomData.delete(val);
                    }), global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(function() {
                        target.eventBusEl_ = null;
                    }, 0);
                }), target;
            }
            /**
             * @file mixins/stateful.js
             * @module stateful
             */ /**
             * Contains methods that provide statefulness to an object which is passed
             * to {@link module:stateful}.
             *
             * @mixin StatefulMixin
             */ var StatefulMixin = {
                /**
                 * A hash containing arbitrary keys and values representing the state of
                 * the object.
                 *
                 * @type {Object}
                 */ state: {},
                /**
                 * Set the state of an object by mutating its
                 * {@link module:stateful~StatefulMixin.state|state} object in place.
                 *
                 * @fires   module:stateful~StatefulMixin#statechanged
                 * @param   {Object|Function} stateUpdates
                 *          A new set of properties to shallow-merge into the plugin state.
                 *          Can be a plain object or a function returning a plain object.
                 *
                 * @return {Object|undefined}
                 *          An object containing changes that occurred. If no changes
                 *          occurred, returns `undefined`.
                 */ setState: function(stateUpdates) {
                    var changes, _this = this;
                    return "function" == typeof stateUpdates && (stateUpdates = stateUpdates()), each(stateUpdates, function(value, key) {
                        _this.state[key] !== value && ((changes = changes || {})[key] = {
                            from: _this.state[key],
                            to: value
                        }), _this.state[key] = value;
                    }), changes && isEvented(this) && /**
                         * An event triggered on an object that is both
                         * {@link module:stateful|stateful} and {@link module:evented|evented}
                         * indicating that its state has changed.
                         *
                         * @event    module:stateful~StatefulMixin#statechanged
                         * @type     {Object}
                         * @property {Object} changes
                         *           A hash containing the properties that were changed and
                         *           the values they were changed `from` and `to`.
                         */ this.trigger({
                        changes: changes,
                        type: "statechanged"
                    }), changes;
                }
            };
            /**
             * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target
             * object.
             *
             * If the target object is {@link module:evented|evented} and has a
             * `handleStateChanged` method, that method will be automatically bound to the
             * `statechanged` event on itself.
             *
             * @param   {Object} target
             *          The object to be made stateful.
             *
             * @param   {Object} [defaultState]
             *          A default set of properties to populate the newly-stateful object's
             *          `state` property.
             *
             * @return {Object}
             *          Returns the `target`.
             */ function stateful(target, defaultState) {
                return assign(target, StatefulMixin), // added in that step.
                target.state = assign({}, target.state, defaultState), "function" == typeof target.handleStateChanged && isEvented(target) && target.on("statechanged", target.handleStateChanged), target;
            }
            /**
             * @file string-cases.js
             * @module to-lower-case
             */ /**
             * Lowercase the first letter of a string.
             *
             * @param {string} string
             *        String to be lowercased
             *
             * @return {string}
             *         The string with a lowercased first letter
             */ var toLowerCase = function(string) {
                return "string" != typeof string ? string : string.replace(/./, function(w) {
                    return w.toLowerCase();
                });
            }, toTitleCase$1 = function(string) {
                return "string" != typeof string ? string : string.replace(/./, function(w) {
                    return w.toUpperCase();
                });
            };
            /**
             * @file merge-options.js
             * @module merge-options
             */ /**
             * Merge two objects recursively.
             *
             * Performs a deep merge like
             * {@link https://lodash.com/docs/4.17.10#merge|lodash.merge}, but only merges
             * plain objects (not arrays, elements, or anything else).
             *
             * Non-plain object values will be copied directly from the right-most
             * argument.
             *
             * @static
             * @param   {Object[]} sources
             *          One or more objects to merge into a new object.
             *
             * @return {Object}
             *          A new object that is the merged result of all sources.
             */ function mergeOptions$3() {
                for(var result = {}, _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++)sources[_key] = arguments[_key];
                return sources.forEach(function(source) {
                    source && each(source, function(value, key) {
                        if (!isPlain(value)) {
                            result[key] = value;
                            return;
                        }
                        isPlain(result[key]) || (result[key] = {}), result[key] = mergeOptions$3(result[key], value);
                    });
                }), result;
            }
            var MapSham = /*#__PURE__*/ function() {
                function MapSham() {
                    this.map_ = {};
                }
                var _proto = MapSham.prototype;
                return _proto.has = function(key) {
                    return key in this.map_;
                }, _proto.delete = function(key) {
                    var has = this.has(key);
                    return delete this.map_[key], has;
                }, _proto.set = function(key, value) {
                    return this.map_[key] = value, this;
                }, _proto.forEach = function(callback, thisArg) {
                    for(var key in this.map_)callback.call(thisArg, this.map_[key], key, this);
                }, MapSham;
            }(), Map$1 = global_window__WEBPACK_IMPORTED_MODULE_0___default().Map ? global_window__WEBPACK_IMPORTED_MODULE_0___default().Map : MapSham, SetSham = /*#__PURE__*/ function() {
                function SetSham() {
                    this.set_ = {};
                }
                var _proto = SetSham.prototype;
                return _proto.has = function(key) {
                    return key in this.set_;
                }, _proto.delete = function(key) {
                    var has = this.has(key);
                    return delete this.set_[key], has;
                }, _proto.add = function(key) {
                    return this.set_[key] = 1, this;
                }, _proto.forEach = function(callback, thisArg) {
                    for(var key in this.set_)callback.call(thisArg, key, key, this);
                }, SetSham;
            }(), Set = global_window__WEBPACK_IMPORTED_MODULE_0___default().Set ? global_window__WEBPACK_IMPORTED_MODULE_0___default().Set : SetSham, Component$1 = /*#__PURE__*/ function() {
                /**
                 * A callback that is called when a component is ready. Does not have any
                 * parameters and any callback value will be ignored.
                 *
                 * @callback Component~ReadyCallback
                 * @this Component
                 */ /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 *
                 * @param {Object[]} [options.children]
                 *        An array of children objects to intialize this component with. Children objects have
                 *        a name property that will be used if more than one component of the same type needs to be
                 *        added.
                 *
                 * @param {Component~ReadyCallback} [ready]
                 *        Function that gets called when the `Component` is ready.
                 */ function Component(player, options, ready) {
                    if (!player && this.play ? this.player_ = player = this : this.player_ = player, this.isDisposed_ = !1, this.parentComponent_ = null, this.options_ = mergeOptions$3({}, this.options_), options = this.options_ = mergeOptions$3(this.options_, options), this.id_ = options.id || options.el && options.el.id, !this.id_) {
                        // Don't require the player ID function in the case of mock players
                        var id = player && player.id && player.id() || "no_player";
                        this.id_ = id + "_component_" + _guid++;
                    }
                    this.name_ = options.name || null, options.el ? this.el_ = options.el : !1 !== options.createEl && (this.el_ = this.createEl()), !1 !== options.evented && (// Make this an evented object and use `el_`, if available, as its event bus
                    evented(this, {
                        eventBusKey: this.el_ ? "el_" : null
                    }), this.handleLanguagechange = this.handleLanguagechange.bind(this), this.on(this.player_, "languagechange", this.handleLanguagechange)), stateful(this, this.constructor.defaultState), this.children_ = [], this.childIndex_ = {}, this.childNameIndex_ = {}, this.setTimeoutIds_ = new Set(), this.setIntervalIds_ = new Set(), this.rafIds_ = new Set(), this.namedRafs_ = new Map$1(), this.clearingTimersOnDispose_ = !1, !1 !== options.initChildren && this.initChildren(), // finished for all children that run this constructor
                    this.ready(ready), !1 !== options.reportTouchActivity && this.enableTouchActivity();
                }
                /**
                 * Dispose of the `Component` and all child components.
                 *
                 * @fires Component#dispose
                 */ var _proto = Component.prototype;
                return _proto.dispose = function() {
                    // Bail out if the component has already been disposed.
                    if (!this.isDisposed_) {
                        if (this.readyQueue_ && (this.readyQueue_.length = 0), /**
                     * Triggered when a `Component` is disposed.
                     *
                     * @event Component#dispose
                     * @type {EventTarget~Event}
                     *
                     * @property {boolean} [bubbles=false]
                     *           set to false so that the dispose event does not
                     *           bubble up
                     */ this.trigger({
                            type: "dispose",
                            bubbles: !1
                        }), this.isDisposed_ = !0, this.children_) for(var i = this.children_.length - 1; i >= 0; i--)this.children_[i].dispose && this.children_[i].dispose();
                         // Delete child references
                        this.children_ = null, this.childIndex_ = null, this.childNameIndex_ = null, this.parentComponent_ = null, this.el_ && (this.el_.parentNode && this.el_.parentNode.removeChild(this.el_), this.el_ = null), this.player_ = null;
                    }
                }, /**
                 * Determine whether or not this component has been disposed.
                 *
                 * @return {boolean}
                 *         If the component has been disposed, will be `true`. Otherwise, `false`.
                 */ _proto.isDisposed = function() {
                    return !!this.isDisposed_;
                }, /**
                 * Return the {@link Player} that the `Component` has attached to.
                 *
                 * @return {Player}
                 *         The player that this `Component` has attached to.
                 */ _proto.player = function() {
                    return this.player_;
                }, /**
                 * Deep merge of options objects with new options.
                 * > Note: When both `obj` and `options` contain properties whose values are objects.
                 *         The two properties get merged using {@link module:mergeOptions}
                 *
                 * @param {Object} obj
                 *        The object that contains new options.
                 *
                 * @return {Object}
                 *         A new object of `this.options_` and `obj` merged together.
                 */ _proto.options = function(obj) {
                    return obj && (this.options_ = mergeOptions$3(this.options_, obj)), this.options_;
                }, /**
                 * Get the `Component`s DOM element
                 *
                 * @return {Element}
                 *         The DOM element for this `Component`.
                 */ _proto.el = function() {
                    return this.el_;
                }, /**
                 * Create the `Component`s DOM element.
                 *
                 * @param {string} [tagName]
                 *        Element's DOM node type. e.g. 'div'
                 *
                 * @param {Object} [properties]
                 *        An object of properties that should be set.
                 *
                 * @param {Object} [attributes]
                 *        An object of attributes that should be set.
                 *
                 * @return {Element}
                 *         The element that gets created.
                 */ _proto.createEl = function(tagName, properties, attributes) {
                    return createEl(tagName, properties, attributes);
                }, /**
                 * Localize a string given the string in english.
                 *
                 * If tokens are provided, it'll try and run a simple token replacement on the provided string.
                 * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.
                 *
                 * If a `defaultValue` is provided, it'll use that over `string`,
                 * if a value isn't found in provided language files.
                 * This is useful if you want to have a descriptive key for token replacement
                 * but have a succinct localized string and not require `en.json` to be included.
                 *
                 * Currently, it is used for the progress bar timing.
                 * ```js
                 * {
                 *   "progress bar timing: currentTime={1} duration={2}": "{1} of {2}"
                 * }
                 * ```
                 * It is then used like so:
                 * ```js
                 * this.localize('progress bar timing: currentTime={1} duration{2}',
                 *               [this.player_.currentTime(), this.player_.duration()],
                 *               '{1} of {2}');
                 * ```
                 *
                 * Which outputs something like: `01:23 of 24:56`.
                 *
                 *
                 * @param {string} string
                 *        The string to localize and the key to lookup in the language files.
                 * @param {string[]} [tokens]
                 *        If the current item has token replacements, provide the tokens here.
                 * @param {string} [defaultValue]
                 *        Defaults to `string`. Can be a default value to use for token replacement
                 *        if the lookup key is needed to be separate.
                 *
                 * @return {string}
                 *         The localized string or if no localization exists the english string.
                 */ _proto.localize = function(string, tokens, defaultValue) {
                    void 0 === defaultValue && (defaultValue = string);
                    var code = this.player_.language && this.player_.language(), languages = this.player_.languages && this.player_.languages(), language = languages && languages[code], primaryCode = code && code.split("-")[0], primaryLang = languages && languages[primaryCode], localizedString = defaultValue;
                    return language && language[string] ? localizedString = language[string] : primaryLang && primaryLang[string] && (localizedString = primaryLang[string]), tokens && (localizedString = localizedString.replace(/\{(\d+)\}/g, function(match, index) {
                        var value = tokens[index - 1], ret = value;
                        return void 0 === value && (ret = match), ret;
                    })), localizedString;
                }, /**
                 * Handles language change for the player in components. Should be overriden by sub-components.
                 *
                 * @abstract
                 */ _proto.handleLanguagechange = function() {}, /**
                 * Return the `Component`s DOM element. This is where children get inserted.
                 * This will usually be the the same as the element returned in {@link Component#el}.
                 *
                 * @return {Element}
                 *         The content element for this `Component`.
                 */ _proto.contentEl = function() {
                    return this.contentEl_ || this.el_;
                }, /**
                 * Get this `Component`s ID
                 *
                 * @return {string}
                 *         The id of this `Component`
                 */ _proto.id = function() {
                    return this.id_;
                }, /**
                 * Get the `Component`s name. The name gets used to reference the `Component`
                 * and is set during registration.
                 *
                 * @return {string}
                 *         The name of this `Component`.
                 */ _proto.name = function() {
                    return this.name_;
                }, /**
                 * Get an array of all child components
                 *
                 * @return {Array}
                 *         The children
                 */ _proto.children = function() {
                    return this.children_;
                }, /**
                 * Returns the child `Component` with the given `id`.
                 *
                 * @param {string} id
                 *        The id of the child `Component` to get.
                 *
                 * @return {Component|undefined}
                 *         The child `Component` with the given `id` or undefined.
                 */ _proto.getChildById = function(id) {
                    return this.childIndex_[id];
                }, /**
                 * Returns the child `Component` with the given `name`.
                 *
                 * @param {string} name
                 *        The name of the child `Component` to get.
                 *
                 * @return {Component|undefined}
                 *         The child `Component` with the given `name` or undefined.
                 */ _proto.getChild = function(name) {
                    if (name) return this.childNameIndex_[name];
                }, /**
                 * Returns the descendant `Component` following the givent
                 * descendant `names`. For instance ['foo', 'bar', 'baz'] would
                 * try to get 'foo' on the current component, 'bar' on the 'foo'
                 * component and 'baz' on the 'bar' component and return undefined
                 * if any of those don't exist.
                 *
                 * @param {...string[]|...string} names
                 *        The name of the child `Component` to get.
                 *
                 * @return {Component|undefined}
                 *         The descendant `Component` following the given descendant
                 *         `names` or undefined.
                 */ _proto.getDescendant = function() {
                    for(var _len = arguments.length, names = Array(_len), _key = 0; _key < _len; _key++)names[_key] = arguments[_key];
                    // flatten array argument into the main array
                    names = names.reduce(function(acc, n) {
                        return acc.concat(n);
                    }, []);
                    for(var currentChild = this, i = 0; i < names.length; i++)if (!(currentChild = currentChild.getChild(names[i])) || !currentChild.getChild) return;
                    return currentChild;
                }, /**
                 * Add a child `Component` inside the current `Component`.
                 *
                 *
                 * @param {string|Component} child
                 *        The name or instance of a child to add.
                 *
                 * @param {Object} [options={}]
                 *        The key/value store of options that will get passed to children of
                 *        the child.
                 *
                 * @param {number} [index=this.children_.length]
                 *        The index to attempt to add a child into.
                 *
                 * @return {Component}
                 *         The `Component` that gets added as a child. When using a string the
                 *         `Component` will get created by this process.
                 */ _proto.addChild = function(child, options, index) {
                    if (void 0 === options && (options = {}), void 0 === index && (index = this.children_.length), "string" == typeof child) {
                        componentName = toTitleCase$1(child);
                        var component, componentName, componentClassName = options.componentClass || componentName; // Set name through options
                        options.name = componentName; // Create a new object & element for this controls set
                        // If there's no .player_, this is a player
                        var ComponentClass = Component.getComponent(componentClassName);
                        if (!ComponentClass) throw Error("Component " + componentClassName + " does not exist");
                         // data stored directly on the videojs object may be
                        // misidentified as a component to retain
                        // backwards-compatibility with 4.x. check to make sure the
                        // component class can be instantiated.
                        if ("function" != typeof ComponentClass) return null;
                        component = new ComponentClass(this.player_ || this, options); // child is a component instance
                    } else component = child;
                    // Having an element is not required
                    if (component.parentComponent_ && component.parentComponent_.removeChild(component), this.children_.splice(index, 0, component), component.parentComponent_ = this, "function" == typeof component.id && (this.childIndex_[component.id()] = component), // name function of the component
                    (componentName = componentName || component.name && toTitleCase$1(component.name())) && (this.childNameIndex_[componentName] = component, this.childNameIndex_[toLowerCase(componentName)] = component), "function" == typeof component.el && component.el()) {
                        // If inserting before a component, insert before that component's element
                        var refNode = null;
                        this.children_[index + 1] && (this.children_[index + 1].el_ ? refNode = this.children_[index + 1].el_ : isEl(this.children_[index + 1]) && (refNode = this.children_[index + 1])), this.contentEl().insertBefore(component.el(), refNode);
                    } // Return so it can stored on parent object if desired.
                    return component;
                }, /**
                 * Remove a child `Component` from this `Component`s list of children. Also removes
                 * the child `Component`s element from this `Component`s element.
                 *
                 * @param {Component} component
                 *        The child `Component` to remove.
                 */ _proto.removeChild = function(component) {
                    if ("string" == typeof component && (component = this.getChild(component)), component && this.children_) {
                        for(var childFound = !1, i = this.children_.length - 1; i >= 0; i--)if (this.children_[i] === component) {
                            childFound = !0, this.children_.splice(i, 1);
                            break;
                        }
                        if (childFound) {
                            component.parentComponent_ = null, this.childIndex_[component.id()] = null, this.childNameIndex_[toTitleCase$1(component.name())] = null, this.childNameIndex_[toLowerCase(component.name())] = null;
                            var compEl = component.el();
                            compEl && compEl.parentNode === this.contentEl() && this.contentEl().removeChild(component.el());
                        }
                    }
                }, /**
                 * Add and initialize default child `Component`s based upon options.
                 */ _proto.initChildren = function() {
                    var _this = this, children = this.options_.children;
                    if (children) {
                        // `this` is `parent`
                        var workingChildren, parentOptions = this.options_, Tech = Component.getComponent("Tech");
                        (workingChildren = Array.isArray(children) ? children : Object.keys(children))// give us extra children we do not want. So, we want to filter them out.
                        .concat(Object.keys(this.options_).filter(function(child) {
                            return !workingChildren.some(function(wchild) {
                                return "string" == typeof wchild ? child === wchild : child === wchild.name;
                            });
                        })).map(function(child) {
                            var name, opts;
                            return "string" == typeof child ? opts = children[name = child] || _this.options_[name] || {} : (name = child.name, opts = child), {
                                name: name,
                                opts: opts
                            };
                        }).filter(function(child) {
                            // we have to make sure that child.name isn't in the techOrder since
                            // techs are registerd as Components but can't aren't compatible
                            // See https://github.com/videojs/video.js/issues/2772
                            var c = Component.getComponent(child.opts.componentClass || toTitleCase$1(child.name));
                            return c && !Tech.isTech(c);
                        }).forEach(function(child) {
                            var name = child.name, opts = child.opts;
                            // e.g. options['children']['posterImage'] = false
                            if (void 0 !== parentOptions[name] && (opts = parentOptions[name]), !1 !== opts) {
                                !0 === opts && (opts = {}), // to each component as well so they don't need to
                                // reach back into the player for options later.
                                opts.playerOptions = _this.options_.playerOptions;
                                // Add a direct reference to the child by name on the parent instance.
                                // If two of the same component are used, different names should be supplied
                                // for each
                                var newChild = _this.addChild(name, opts);
                                newChild && (_this[name] = newChild);
                            } // Allow options to be passed as a simple boolean if no configuration
                        });
                    }
                }, /**
                 * Builds the default DOM class name. Should be overriden by sub-components.
                 *
                 * @return {string}
                 *         The DOM class name for this object.
                 *
                 * @abstract
                 */ _proto.buildCSSClass = function() {
                    // Child classes can include a function that does:
                    // return 'CLASS NAME' + this._super();
                    return "";
                }, /**
                 * Bind a listener to the component's ready state.
                 * Different from event listeners in that if the ready event has already happened
                 * it will trigger the function immediately.
                 *
                 * @return {Component}
                 *         Returns itself; method can be chained.
                 */ _proto.ready = function(fn, sync) {
                    if (void 0 === sync && (sync = !1), fn) {
                        if (!this.isReady_) {
                            this.readyQueue_ = this.readyQueue_ || [], this.readyQueue_.push(fn);
                            return;
                        }
                        sync ? fn.call(this) : // Call the function asynchronously by default for consistency
                        this.setTimeout(fn, 1);
                    }
                }, /**
                 * Trigger all the ready listeners for this `Component`.
                 *
                 * @fires Component#ready
                 */ _proto.triggerReady = function() {
                    this.isReady_ = !0, this.setTimeout(function() {
                        var readyQueue = this.readyQueue_; // Reset Ready Queue
                        this.readyQueue_ = [], readyQueue && readyQueue.length > 0 && readyQueue.forEach(function(fn) {
                            fn.call(this);
                        }, this), /**
                         * Triggered when a `Component` is ready.
                         *
                         * @event Component#ready
                         * @type {EventTarget~Event}
                         */ this.trigger("ready");
                    }, 1);
                }, /**
                 * Find a single DOM element matching a `selector`. This can be within the `Component`s
                 * `contentEl()` or another custom context.
                 *
                 * @param {string} selector
                 *        A valid CSS selector, which will be passed to `querySelector`.
                 *
                 * @param {Element|string} [context=this.contentEl()]
                 *        A DOM element within which to query. Can also be a selector string in
                 *        which case the first matching element will get used as context. If
                 *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
                 *        nothing it falls back to `document`.
                 *
                 * @return {Element|null}
                 *         the dom element that was found, or null
                 *
                 * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
                 */ _proto.$ = function(selector, context) {
                    return $(selector, context || this.contentEl());
                }, /**
                 * Finds all DOM element matching a `selector`. This can be within the `Component`s
                 * `contentEl()` or another custom context.
                 *
                 * @param {string} selector
                 *        A valid CSS selector, which will be passed to `querySelectorAll`.
                 *
                 * @param {Element|string} [context=this.contentEl()]
                 *        A DOM element within which to query. Can also be a selector string in
                 *        which case the first matching element will get used as context. If
                 *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
                 *        nothing it falls back to `document`.
                 *
                 * @return {NodeList}
                 *         a list of dom elements that were found
                 *
                 * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
                 */ _proto.$$ = function(selector, context) {
                    return $$(selector, context || this.contentEl());
                }, /**
                 * Check if a component's element has a CSS class name.
                 *
                 * @param {string} classToCheck
                 *        CSS class name to check.
                 *
                 * @return {boolean}
                 *         - True if the `Component` has the class.
                 *         - False if the `Component` does not have the class`
                 */ _proto.hasClass = function(classToCheck) {
                    return hasClass(this.el_, classToCheck);
                }, /**
                 * Add a CSS class name to the `Component`s element.
                 *
                 * @param {string} classToAdd
                 *        CSS class name to add
                 */ _proto.addClass = function(classToAdd) {
                    addClass(this.el_, classToAdd);
                }, /**
                 * Remove a CSS class name from the `Component`s element.
                 *
                 * @param {string} classToRemove
                 *        CSS class name to remove
                 */ _proto.removeClass = function(classToRemove) {
                    removeClass(this.el_, classToRemove);
                }, /**
                 * Add or remove a CSS class name from the component's element.
                 * - `classToToggle` gets added when {@link Component#hasClass} would return false.
                 * - `classToToggle` gets removed when {@link Component#hasClass} would return true.
                 *
                 * @param  {string} classToToggle
                 *         The class to add or remove based on (@link Component#hasClass}
                 *
                 * @param  {boolean|Dom~predicate} [predicate]
                 *         An {@link Dom~predicate} function or a boolean
                 */ _proto.toggleClass = function(classToToggle, predicate) {
                    toggleClass(this.el_, classToToggle, predicate);
                }, /**
                 * Show the `Component`s element if it is hidden by removing the
                 * 'vjs-hidden' class name from it.
                 */ _proto.show = function() {
                    this.removeClass("vjs-hidden");
                }, /**
                 * Hide the `Component`s element if it is currently showing by adding the
                 * 'vjs-hidden` class name to it.
                 */ _proto.hide = function() {
                    this.addClass("vjs-hidden");
                }, /**
                 * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'
                 * class name to it. Used during fadeIn/fadeOut.
                 *
                 * @private
                 */ _proto.lockShowing = function() {
                    this.addClass("vjs-lock-showing");
                }, /**
                 * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'
                 * class name from it. Used during fadeIn/fadeOut.
                 *
                 * @private
                 */ _proto.unlockShowing = function() {
                    this.removeClass("vjs-lock-showing");
                }, /**
                 * Get the value of an attribute on the `Component`s element.
                 *
                 * @param {string} attribute
                 *        Name of the attribute to get the value from.
                 *
                 * @return {string|null}
                 *         - The value of the attribute that was asked for.
                 *         - Can be an empty string on some browsers if the attribute does not exist
                 *           or has no value
                 *         - Most browsers will return null if the attibute does not exist or has
                 *           no value.
                 *
                 * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}
                 */ _proto.getAttribute = function(attribute) {
                    return getAttribute(this.el_, attribute);
                }, /**
                 * Set the value of an attribute on the `Component`'s element
                 *
                 * @param {string} attribute
                 *        Name of the attribute to set.
                 *
                 * @param {string} value
                 *        Value to set the attribute to.
                 *
                 * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}
                 */ _proto.setAttribute = function(attribute, value) {
                    setAttribute(this.el_, attribute, value);
                }, /**
                 * Remove an attribute from the `Component`s element.
                 *
                 * @param {string} attribute
                 *        Name of the attribute to remove.
                 *
                 * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}
                 */ _proto.removeAttribute = function(attribute) {
                    removeAttribute(this.el_, attribute);
                }, /**
                 * Get or set the width of the component based upon the CSS styles.
                 * See {@link Component#dimension} for more detailed information.
                 *
                 * @param {number|string} [num]
                 *        The width that you want to set postfixed with '%', 'px' or nothing.
                 *
                 * @param {boolean} [skipListeners]
                 *        Skip the componentresize event trigger
                 *
                 * @return {number|string}
                 *         The width when getting, zero if there is no width. Can be a string
                 *           postpixed with '%' or 'px'.
                 */ _proto.width = function(num, skipListeners) {
                    return this.dimension("width", num, skipListeners);
                }, /**
                 * Get or set the height of the component based upon the CSS styles.
                 * See {@link Component#dimension} for more detailed information.
                 *
                 * @param {number|string} [num]
                 *        The height that you want to set postfixed with '%', 'px' or nothing.
                 *
                 * @param {boolean} [skipListeners]
                 *        Skip the componentresize event trigger
                 *
                 * @return {number|string}
                 *         The width when getting, zero if there is no width. Can be a string
                 *         postpixed with '%' or 'px'.
                 */ _proto.height = function(num, skipListeners) {
                    return this.dimension("height", num, skipListeners);
                }, /**
                 * Set both the width and height of the `Component` element at the same time.
                 *
                 * @param  {number|string} width
                 *         Width to set the `Component`s element to.
                 *
                 * @param  {number|string} height
                 *         Height to set the `Component`s element to.
                 */ _proto.dimensions = function(width, height) {
                    // Skip componentresize listeners on width for optimization
                    this.width(width, !0), this.height(height);
                }, /**
   * Get or set width or height of the `Component` element. This is the shared code
   * for the {@link Component#width} and {@link Component#height}.
   *
   * Things to know:
   * - If the width or height in an number this will return the number postfixed with 'px'.
   * - If the width/height is a percent this will return the percent postfixed with '%'
   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function
   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.
   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}
   *   for more information
   * - If you want the computed style of the component, use {@link Component#currentWidth}
   *   and {@link {Component#currentHeight}
   *
   * @fires Component#componentresize
   *
   * @param {string} widthOrHeight
   8        'width' or 'height'
   *
   * @param  {number|string} [num]
   8         New dimension
   *
   * @param  {boolean} [skipListeners]
   *         Skip componentresize event trigger
   *
   * @return {number}
   *         The dimension when getting or 0 if unset
   */ _proto.dimension = function(widthOrHeight, num, skipListeners) {
                    if (void 0 !== num) {
                        (null === num || num != num) && (num = 0), -1 !== ("" + num).indexOf("%") || -1 !== ("" + num).indexOf("px") ? this.el_.style[widthOrHeight] = num : "auto" === num ? this.el_.style[widthOrHeight] = "" : this.el_.style[widthOrHeight] = num + "px", skipListeners || /**
                             * Triggered when a component is resized.
                             *
                             * @event Component#componentresize
                             * @type {EventTarget~Event}
                             */ this.trigger("componentresize");
                        return;
                    } // Not setting a value, so getting it
                    // Make sure element exists
                    if (!this.el_) return 0;
                     // Get dimension value from style
                    var val = this.el_.style[widthOrHeight], pxIndex = val.indexOf("px");
                    return -1 !== pxIndex ? parseInt(val.slice(0, pxIndex), 10) : parseInt(this.el_["offset" + toTitleCase$1(widthOrHeight)], 10) // No px so using % or no style was set, so falling back to offsetWidth/height
                    ;
                }, /**
                 * Get the computed width or the height of the component's element.
                 *
                 * Uses `window.getComputedStyle`.
                 *
                 * @param {string} widthOrHeight
                 *        A string containing 'width' or 'height'. Whichever one you want to get.
                 *
                 * @return {number}
                 *         The dimension that gets asked for or 0 if nothing was set
                 *         for that dimension.
                 */ _proto.currentDimension = function(widthOrHeight) {
                    var computedWidthOrHeight = 0;
                    if ("width" !== widthOrHeight && "height" !== widthOrHeight) throw Error("currentDimension only accepts width or height value");
                    // and we want to check the offset values.
                    // This code also runs wherever getComputedStyle doesn't exist.
                    if (0 === (computedWidthOrHeight = parseFloat(computedWidthOrHeight = computedStyle(this.el_, widthOrHeight))) || isNaN(computedWidthOrHeight)) {
                        var rule = "offset" + toTitleCase$1(widthOrHeight);
                        computedWidthOrHeight = this.el_[rule];
                    }
                    return computedWidthOrHeight;
                }, /**
                 * An object that contains width and height values of the `Component`s
                 * computed style. Uses `window.getComputedStyle`.
                 *
                 * @typedef {Object} Component~DimensionObject
                 *
                 * @property {number} width
                 *           The width of the `Component`s computed style.
                 *
                 * @property {number} height
                 *           The height of the `Component`s computed style.
                 */ /**
                 * Get an object that contains computed width and height values of the
                 * component's element.
                 *
                 * Uses `window.getComputedStyle`.
                 *
                 * @return {Component~DimensionObject}
                 *         The computed dimensions of the component's element.
                 */ _proto.currentDimensions = function() {
                    return {
                        width: this.currentDimension("width"),
                        height: this.currentDimension("height")
                    };
                }, /**
                 * Get the computed width of the component's element.
                 *
                 * Uses `window.getComputedStyle`.
                 *
                 * @return {number}
                 *         The computed width of the component's element.
                 */ _proto.currentWidth = function() {
                    return this.currentDimension("width");
                }, /**
                 * Get the computed height of the component's element.
                 *
                 * Uses `window.getComputedStyle`.
                 *
                 * @return {number}
                 *         The computed height of the component's element.
                 */ _proto.currentHeight = function() {
                    return this.currentDimension("height");
                }, /**
                 * Set the focus to this component
                 */ _proto.focus = function() {
                    this.el_.focus();
                }, /**
                 * Remove the focus from this component
                 */ _proto.blur = function() {
                    this.el_.blur();
                }, /**
                 * When this Component receives a `keydown` event which it does not process,
                 *  it passes the event to the Player for handling.
                 *
                 * @param {EventTarget~Event} event
                 *        The `keydown` event that caused this function to be called.
                 */ _proto.handleKeyDown = function(event) {
                    this.player_ && (// We only stop propagation here because we want unhandled events to fall
                    // back to the browser.
                    event.stopPropagation(), this.player_.handleKeyDown(event));
                }, /**
                 * Many components used to have a `handleKeyPress` method, which was poorly
                 * named because it listened to a `keydown` event. This method name now
                 * delegates to `handleKeyDown`. This means anyone calling `handleKeyPress`
                 * will not see their method calls stop working.
                 *
                 * @param {EventTarget~Event} event
                 *        The event that caused this function to be called.
                 */ _proto.handleKeyPress = function(event) {
                    this.handleKeyDown(event);
                }, /**
                 * Emit a 'tap' events when touch event support gets detected. This gets used to
                 * support toggling the controls through a tap on the video. They get enabled
                 * because every sub-component would have extra overhead otherwise.
                 *
                 * @private
                 * @fires Component#tap
                 * @listens Component#touchstart
                 * @listens Component#touchmove
                 * @listens Component#touchleave
                 * @listens Component#touchcancel
                 * @listens Component#touchend
                 */ _proto.emitTapEvents = function() {
                    // Track the start time so we can determine how long the touch lasted
                    var couldBeTap, touchStart = 0, firstTouch = null;
                    this.on("touchstart", function(event) {
                        // If more than one finger, don't consider treating this as a click
                        1 === event.touches.length && (// Copy pageX/pageY from the object
                        firstTouch = {
                            pageX: event.touches[0].pageX,
                            pageY: event.touches[0].pageY
                        }, touchStart = global_window__WEBPACK_IMPORTED_MODULE_0___default().performance.now(), couldBeTap = !0);
                    }), this.on("touchmove", function(event) {
                        // If more than one finger, don't consider treating this as a click
                        if (event.touches.length > 1) couldBeTap = !1;
                        else if (firstTouch) {
                            // Some devices will throw touchmoves for all but the slightest of taps.
                            // So, if we moved only a small distance, this could still be a tap
                            var xdiff = event.touches[0].pageX - firstTouch.pageX, ydiff = event.touches[0].pageY - firstTouch.pageY;
                            Math.sqrt(xdiff * xdiff + ydiff * ydiff) > 10 && (couldBeTap = !1);
                        }
                    });
                    var noTap = function() {
                        couldBeTap = !1;
                    }; // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
                    this.on("touchleave", noTap), this.on("touchcancel", noTap), // event
                    this.on("touchend", function(event) {
                        firstTouch = null, !0 === couldBeTap && global_window__WEBPACK_IMPORTED_MODULE_0___default().performance.now() - touchStart < 200 && (// Don't let browser turn this into a click
                        event.preventDefault(), /**
                                 * Triggered when a `Component` is tapped.
                                 *
                                 * @event Component#tap
                                 * @type {EventTarget~Event}
                                 */ this.trigger("tap"));
                    });
                }, /**
                 * This function reports user activity whenever touch events happen. This can get
                 * turned off by any sub-components that wants touch events to act another way.
                 *
                 * Report user touch activity when touch events occur. User activity gets used to
                 * determine when controls should show/hide. It is simple when it comes to mouse
                 * events, because any mouse event should show the controls. So we capture mouse
                 * events that bubble up to the player and report activity when that happens.
                 * With touch events it isn't as easy as `touchstart` and `touchend` toggle player
                 * controls. So touch events can't help us at the player level either.
                 *
                 * User activity gets checked asynchronously. So what could happen is a tap event
                 * on the video turns the controls off. Then the `touchend` event bubbles up to
                 * the player. Which, if it reported user activity, would turn the controls right
                 * back on. We also don't want to completely block touch events from bubbling up.
                 * Furthermore a `touchmove` event and anything other than a tap, should not turn
                 * controls back on.
                 *
                 * @listens Component#touchstart
                 * @listens Component#touchmove
                 * @listens Component#touchend
                 * @listens Component#touchcancel
                 */ _proto.enableTouchActivity = function() {
                    // Don't continue if the root player doesn't support reporting user activity
                    if (this.player() && this.player().reportUserActivity) {
                        var touchHolding, report = bind(this.player(), this.player().reportUserActivity);
                        this.on("touchstart", function() {
                            report(), // we consider them active even if they're not moving their finger or mouse.
                            // So we want to continue to update that they are active
                            this.clearInterval(touchHolding), touchHolding = this.setInterval(report, 250);
                        });
                        var touchEnd = function(event) {
                            report(), this.clearInterval(touchHolding);
                        };
                        this.on("touchmove", report), this.on("touchend", touchEnd), this.on("touchcancel", touchEnd);
                    } // listener for reporting that the user is active
                }, /**
                 * A callback that has no parameters and is bound into `Component`s context.
                 *
                 * @callback Component~GenericCallback
                 * @this Component
                 */ /**
                 * Creates a function that runs after an `x` millisecond timeout. This function is a
                 * wrapper around `window.setTimeout`. There are a few reasons to use this one
                 * instead though:
                 * 1. It gets cleared via  {@link Component#clearTimeout} when
                 *    {@link Component#dispose} gets called.
                 * 2. The function callback will gets turned into a {@link Component~GenericCallback}
                 *
                 * > Note: You can't use `window.clearTimeout` on the id returned by this function. This
                 *         will cause its dispose listener not to get cleaned up! Please use
                 *         {@link Component#clearTimeout} or {@link Component#dispose} instead.
                 *
                 * @param {Component~GenericCallback} fn
                 *        The function that will be run after `timeout`.
                 *
                 * @param {number} timeout
                 *        Timeout in milliseconds to delay before executing the specified function.
                 *
                 * @return {number}
                 *         Returns a timeout ID that gets used to identify the timeout. It can also
                 *         get used in {@link Component#clearTimeout} to clear the timeout that
                 *         was set.
                 *
                 * @listens Component#dispose
                 * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}
                 */ _proto.setTimeout = function(fn, timeout) {
                    var timeoutId, _this2 = this;
                    return fn = bind(this, fn), this.clearTimersOnDispose_(), timeoutId = global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(function() {
                        _this2.setTimeoutIds_.has(timeoutId) && _this2.setTimeoutIds_.delete(timeoutId), fn();
                    }, timeout), this.setTimeoutIds_.add(timeoutId), timeoutId;
                }, /**
                 * Clears a timeout that gets created via `window.setTimeout` or
                 * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}
                 * use this function instead of `window.clearTimout`. If you don't your dispose
                 * listener will not get cleaned up until {@link Component#dispose}!
                 *
                 * @param {number} timeoutId
                 *        The id of the timeout to clear. The return value of
                 *        {@link Component#setTimeout} or `window.setTimeout`.
                 *
                 * @return {number}
                 *         Returns the timeout id that was cleared.
                 *
                 * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}
                 */ _proto.clearTimeout = function(timeoutId) {
                    return this.setTimeoutIds_.has(timeoutId) && (this.setTimeoutIds_.delete(timeoutId), global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(timeoutId)), timeoutId;
                }, /**
                 * Creates a function that gets run every `x` milliseconds. This function is a wrapper
                 * around `window.setInterval`. There are a few reasons to use this one instead though.
                 * 1. It gets cleared via  {@link Component#clearInterval} when
                 *    {@link Component#dispose} gets called.
                 * 2. The function callback will be a {@link Component~GenericCallback}
                 *
                 * @param {Component~GenericCallback} fn
                 *        The function to run every `x` seconds.
                 *
                 * @param {number} interval
                 *        Execute the specified function every `x` milliseconds.
                 *
                 * @return {number}
                 *         Returns an id that can be used to identify the interval. It can also be be used in
                 *         {@link Component#clearInterval} to clear the interval.
                 *
                 * @listens Component#dispose
                 * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}
                 */ _proto.setInterval = function(fn, interval) {
                    fn = bind(this, fn), this.clearTimersOnDispose_();
                    var intervalId = global_window__WEBPACK_IMPORTED_MODULE_0___default().setInterval(fn, interval);
                    return this.setIntervalIds_.add(intervalId), intervalId;
                }, /**
                 * Clears an interval that gets created via `window.setInterval` or
                 * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}
                 * use this function instead of `window.clearInterval`. If you don't your dispose
                 * listener will not get cleaned up until {@link Component#dispose}!
                 *
                 * @param {number} intervalId
                 *        The id of the interval to clear. The return value of
                 *        {@link Component#setInterval} or `window.setInterval`.
                 *
                 * @return {number}
                 *         Returns the interval id that was cleared.
                 *
                 * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}
                 */ _proto.clearInterval = function(intervalId) {
                    return this.setIntervalIds_.has(intervalId) && (this.setIntervalIds_.delete(intervalId), global_window__WEBPACK_IMPORTED_MODULE_0___default().clearInterval(intervalId)), intervalId;
                }, /**
                 * Queues up a callback to be passed to requestAnimationFrame (rAF), but
                 * with a few extra bonuses:
                 *
                 * - Supports browsers that do not support rAF by falling back to
                 *   {@link Component#setTimeout}.
                 *
                 * - The callback is turned into a {@link Component~GenericCallback} (i.e.
                 *   bound to the component).
                 *
                 * - Automatic cancellation of the rAF callback is handled if the component
                 *   is disposed before it is called.
                 *
                 * @param  {Component~GenericCallback} fn
                 *         A function that will be bound to this component and executed just
                 *         before the browser's next repaint.
                 *
                 * @return {number}
                 *         Returns an rAF ID that gets used to identify the timeout. It can
                 *         also be used in {@link Component#cancelAnimationFrame} to cancel
                 *         the animation frame callback.
                 *
                 * @listens Component#dispose
                 * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}
                 */ _proto.requestAnimationFrame = function(fn) {
                    var id, _this3 = this;
                    return(// Fall back to using a timer.
                    this.supportsRaf_ ? (this.clearTimersOnDispose_(), fn = bind(this, fn), id = global_window__WEBPACK_IMPORTED_MODULE_0___default().requestAnimationFrame(function() {
                        _this3.rafIds_.has(id) && _this3.rafIds_.delete(id), fn();
                    }), this.rafIds_.add(id), id) : this.setTimeout(fn, 1000 / 60));
                }, /**
                 * Request an animation frame, but only one named animation
                 * frame will be queued. Another will never be added until
                 * the previous one finishes.
                 *
                 * @param {string} name
                 *        The name to give this requestAnimationFrame
                 *
                 * @param  {Component~GenericCallback} fn
                 *         A function that will be bound to this component and executed just
                 *         before the browser's next repaint.
                 */ _proto.requestNamedAnimationFrame = function(name, fn) {
                    var _this4 = this;
                    if (!this.namedRafs_.has(name)) {
                        this.clearTimersOnDispose_(), fn = bind(this, fn);
                        var id = this.requestAnimationFrame(function() {
                            fn(), _this4.namedRafs_.has(name) && _this4.namedRafs_.delete(name);
                        });
                        return this.namedRafs_.set(name, id), name;
                    }
                }, /**
                 * Cancels a current named animation frame if it exists.
                 *
                 * @param {string} name
                 *        The name of the requestAnimationFrame to cancel.
                 */ _proto.cancelNamedAnimationFrame = function(name) {
                    this.namedRafs_.has(name) && (this.cancelAnimationFrame(this.namedRafs_.get(name)), this.namedRafs_.delete(name));
                }, /**
                 * Cancels a queued callback passed to {@link Component#requestAnimationFrame}
                 * (rAF).
                 *
                 * If you queue an rAF callback via {@link Component#requestAnimationFrame},
                 * use this function instead of `window.cancelAnimationFrame`. If you don't,
                 * your dispose listener will not get cleaned up until {@link Component#dispose}!
                 *
                 * @param {number} id
                 *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.
                 *
                 * @return {number}
                 *         Returns the rAF ID that was cleared.
                 *
                 * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}
                 */ _proto.cancelAnimationFrame = function(id) {
                    return(// Fall back to using a timer.
                    this.supportsRaf_ ? (this.rafIds_.has(id) && (this.rafIds_.delete(id), global_window__WEBPACK_IMPORTED_MODULE_0___default().cancelAnimationFrame(id)), id) : this.clearTimeout(id));
                }, /**
                 * A function to setup `requestAnimationFrame`, `setTimeout`,
                 * and `setInterval`, clearing on dispose.
                 *
                 * > Previously each timer added and removed dispose listeners on it's own.
                 * For better performance it was decided to batch them all, and use `Set`s
                 * to track outstanding timer ids.
                 *
                 * @private
                 */ _proto.clearTimersOnDispose_ = function() {
                    var _this5 = this;
                    this.clearingTimersOnDispose_ || (this.clearingTimersOnDispose_ = !0, this.one("dispose", function() {
                        [
                            [
                                "namedRafs_",
                                "cancelNamedAnimationFrame"
                            ],
                            [
                                "rafIds_",
                                "cancelAnimationFrame"
                            ],
                            [
                                "setTimeoutIds_",
                                "clearTimeout"
                            ],
                            [
                                "setIntervalIds_",
                                "clearInterval"
                            ]
                        ].forEach(function(_ref) {
                            var idName = _ref[0], cancelName = _ref[1];
                            // for a `Set` key will actually be the value again
                            // so forEach((val, val) =>` but for maps we want to use
                            // the key.
                            _this5[idName].forEach(function(val, key) {
                                return _this5[cancelName](key);
                            });
                        }), _this5.clearingTimersOnDispose_ = !1;
                    }));
                }, /**
                 * Register a `Component` with `videojs` given the name and the component.
                 *
                 * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s
                 *         should be registered using {@link Tech.registerTech} or
                 *         {@link videojs:videojs.registerTech}.
                 *
                 * > NOTE: This function can also be seen on videojs as
                 *         {@link videojs:videojs.registerComponent}.
                 *
                 * @param {string} name
                 *        The name of the `Component` to register.
                 *
                 * @param {Component} ComponentToRegister
                 *        The `Component` class to register.
                 *
                 * @return {Component}
                 *         The `Component` that was registered.
                 */ Component.registerComponent = function(name, ComponentToRegister) {
                    if ("string" != typeof name || !name) throw Error('Illegal component name, "' + name + '"; must be a non-empty string.');
                    var Tech = Component.getComponent("Tech"), isTech = Tech && Tech.isTech(ComponentToRegister), isComp = Component === ComponentToRegister || Component.prototype.isPrototypeOf(ComponentToRegister.prototype); // We need to make sure this check is only done if Tech has been registered.
                    if (isTech || !isComp) throw Error('Illegal component, "' + name + '"; ' + (isTech ? "techs must be registered using Tech.registerTech()" : "must be a Component subclass") + ".");
                    name = toTitleCase$1(name), Component.components_ || (Component.components_ = {});
                    var Player = Component.getComponent("Player");
                    if ("Player" === name && Player && Player.players) {
                        var players = Player.players, playerNames = Object.keys(players);
                        // in Players.players. So, we must loop through and verify that the value
                        // for each item is not null. This allows registration of the Player component
                        // after all players have been disposed or before any were created.
                        if (players && playerNames.length > 0 && playerNames.map(function(pname) {
                            return players[pname];
                        }).every(Boolean)) throw Error("Can not register Player component after player has been created.");
                    }
                    return Component.components_[name] = ComponentToRegister, Component.components_[toLowerCase(name)] = ComponentToRegister, ComponentToRegister;
                }, /**
                 * Get a `Component` based on the name it was registered with.
                 *
                 * @param {string} name
                 *        The Name of the component to get.
                 *
                 * @return {Component}
                 *         The `Component` that got registered under the given name.
                 */ Component.getComponent = function(name) {
                    if (name && Component.components_) return Component.components_[name];
                }, Component;
            }();
            /**
             * Get the time for the specified index at the start or end
             * of a TimeRange object.
             *
             * @private
             * @param      {string} fnName
             *             The function name to use for logging
             *
             * @param      {string} valueIndex
             *             The property that should be used to get the time. should be
             *             'start' or 'end'
             *
             * @param      {Array} ranges
             *             An array of time ranges
             *
             * @param      {Array} [rangeIndex=0]
             *             The index to start the search at
             *
             * @return     {number}
             *             The time that offset at the specified index.
             *
             * @deprecated rangeIndex must be set to a value, in the future this will throw an error.
             * @throws     {Error} if rangeIndex is more than the length of ranges
             */ function getRange(fnName, valueIndex, ranges, rangeIndex) {
                return !/**
             * @file time-ranges.js
             * @module time-ranges
             */ /**
             * Returns the time for the specified index at the start or end
             * of a TimeRange object.
             *
             * @typedef    {Function} TimeRangeIndex
             *
             * @param      {number} [index=0]
             *             The range number to return the time for.
             *
             * @return     {number}
             *             The time offset at the specified index.
             *
             * @deprecated The index argument must be provided.
             *             In the future, leaving it out will throw an error.
             */ /**
             * An object that contains ranges of time.
             *
             * @typedef  {Object} TimeRange
             *
             * @property {number} length
             *           The number of time ranges represented by this object.
             *
             * @property {module:time-ranges~TimeRangeIndex} start
             *           Returns the time offset at which a specified time range begins.
             *
             * @property {module:time-ranges~TimeRangeIndex} end
             *           Returns the time offset at which a specified time range ends.
             *
             * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges
             */ /**
             * Check if any of the time ranges are over the maximum index.
             *
             * @private
             * @param   {string} fnName
             *          The function name to use for logging
             *
             * @param   {number} index
             *          The index to check
             *
             * @param   {number} maxIndex
             *          The maximum possible index
             *
             * @throws  {Error} if the timeRanges provided are over the maxIndex
             */ function(fnName, index, maxIndex) {
                    if ("number" != typeof index || index < 0 || index > maxIndex) throw Error("Failed to execute '" + fnName + "' on 'TimeRanges': The index provided (" + index + ") is non-numeric or out of bounds (0-" + maxIndex + ").");
                }(fnName, rangeIndex, ranges.length - 1), ranges[rangeIndex][valueIndex];
            }
            /**
             * Create a time range object given ranges of time.
             *
             * @private
             * @param   {Array} [ranges]
             *          An array of time ranges.
             */ function createTimeRangesObj(ranges) {
                var timeRangesObj;
                return timeRangesObj = void 0 === ranges || 0 === ranges.length ? {
                    length: 0,
                    start: function() {
                        throw Error("This TimeRanges object is empty");
                    },
                    end: function() {
                        throw Error("This TimeRanges object is empty");
                    }
                } : {
                    length: ranges.length,
                    start: getRange.bind(null, "start", 0, ranges),
                    end: getRange.bind(null, "end", 1, ranges)
                }, global_window__WEBPACK_IMPORTED_MODULE_0___default().Symbol && global_window__WEBPACK_IMPORTED_MODULE_0___default().Symbol.iterator && (timeRangesObj[global_window__WEBPACK_IMPORTED_MODULE_0___default().Symbol.iterator] = function() {
                    return (ranges || []).values();
                }), timeRangesObj;
            }
            /**
             * Create a `TimeRange` object which mimics an
             * {@link https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges|HTML5 TimeRanges instance}.
             *
             * @param {number|Array[]} start
             *        The start of a single range (a number) or an array of ranges (an
             *        array of arrays of two numbers each).
             *
             * @param {number} end
             *        The end of a single range. Cannot be used with the array form of
             *        the `start` argument.
             */ function createTimeRanges(start, end) {
                return Array.isArray(start) ? createTimeRangesObj(start) : void 0 === start || void 0 === end ? createTimeRangesObj() : createTimeRangesObj([
                    [
                        start,
                        end
                    ]
                ]);
            }
            /**
             * @file buffer.js
             * @module buffer
             */ /**
             * Compute the percentage of the media that has been buffered.
             *
             * @param {TimeRange} buffered
             *        The current `TimeRange` object representing buffered time ranges
             *
             * @param {number} duration
             *        Total duration of the media
             *
             * @return {number}
             *         Percent buffered of the total duration in decimal form.
             */ function bufferedPercent(buffered, duration) {
                var start, end, bufferedDuration = 0;
                if (!duration) return 0;
                buffered && buffered.length || (buffered = createTimeRanges(0, 0));
                for(var i = 0; i < buffered.length; i++)start = buffered.start(i), (end = buffered.end(i)) > duration && (end = duration), bufferedDuration += end - start;
                return bufferedDuration / duration;
            }
            /**
             * @file media-error.js
             */ /**
             * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.
             *
             * @param {number|string|Object|MediaError} value
             *        This can be of multiple types:
             *        - number: should be a standard error code
             *        - string: an error message (the code will be 0)
             *        - Object: arbitrary properties
             *        - `MediaError` (native): used to populate a video.js `MediaError` object
             *        - `MediaError` (video.js): will return itself if it's already a
             *          video.js `MediaError` object.
             *
             * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}
             * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}
             *
             * @class MediaError
             */ function MediaError(value) {
                // Allow redundant calls to this constructor to avoid having `instanceof`
                // checks peppered around the code.
                if (value instanceof MediaError) return value;
                "number" == typeof value ? this.code = value : "string" == typeof value ? // default code is zero, so this is a custom error
                this.message = value : isObject(value) && ("number" == typeof value.code && (this.code = value.code), assign(this, value)), this.message || (this.message = MediaError.defaultMessages[this.code] || "");
            }
            /**
             * Whether or not this component supports `requestAnimationFrame`.
             *
             * This is exposed primarily for testing purposes.
             *
             * @private
             * @type {Boolean}
             */ Component$1.prototype.supportsRaf_ = "function" == typeof global_window__WEBPACK_IMPORTED_MODULE_0___default().requestAnimationFrame && "function" == typeof global_window__WEBPACK_IMPORTED_MODULE_0___default().cancelAnimationFrame, Component$1.registerComponent("Component", Component$1), /**
             * The error code that refers two one of the defined `MediaError` types
             *
             * @type {Number}
             */ MediaError.prototype.code = 0, /**
             * An optional message that to show with the error. Message is not part of the HTML5
             * video spec but allows for more informative custom errors.
             *
             * @type {String}
             */ MediaError.prototype.message = "", /**
             * An optional status code that can be set by plugins to allow even more detail about
             * the error. For example a plugin might provide a specific HTTP status code and an
             * error message for that code. Then when the plugin gets that error this class will
             * know how to display an error message for it. This allows a custom message to show
             * up on the `Player` error overlay.
             *
             * @type {Array}
             */ MediaError.prototype.status = null, /**
             * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the
             * specification listed under {@link MediaError} for more information.
             *
             * @enum {array}
             * @readonly
             * @property {string} 0 - MEDIA_ERR_CUSTOM
             * @property {string} 1 - MEDIA_ERR_ABORTED
             * @property {string} 2 - MEDIA_ERR_NETWORK
             * @property {string} 3 - MEDIA_ERR_DECODE
             * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED
             * @property {string} 5 - MEDIA_ERR_ENCRYPTED
             */ MediaError.errorTypes = [
                "MEDIA_ERR_CUSTOM",
                "MEDIA_ERR_ABORTED",
                "MEDIA_ERR_NETWORK",
                "MEDIA_ERR_DECODE",
                "MEDIA_ERR_SRC_NOT_SUPPORTED",
                "MEDIA_ERR_ENCRYPTED"
            ], /**
             * The default `MediaError` messages based on the {@link MediaError.errorTypes}.
             *
             * @type {Array}
             * @constant
             */ MediaError.defaultMessages = {
                1: "You aborted the media playback",
                2: "A network error caused the media download to fail part-way.",
                3: "The media playback was aborted due to a corruption problem or because the media used features your browser did not support.",
                4: "The media could not be loaded, either because the server or network failed or because the format is not supported.",
                5: "The media is encrypted and we do not have the keys to decrypt it."
            };
            // e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
            for(var errNum = 0; errNum < MediaError.errorTypes.length; errNum++)MediaError[MediaError.errorTypes[errNum]] = errNum, MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
             // jsdocs for instance/static members added above
            /**
             * Returns whether an object is `Promise`-like (i.e. has a `then` method).
             *
             * @param  {Object}  value
             *         An object that may or may not be `Promise`-like.
             *
             * @return {boolean}
             *         Whether or not the object is `Promise`-like.
             */ function isPromise(value) {
                return null != value && "function" == typeof value.then;
            }
            /**
             * Silence a Promise-like object.
             *
             * This is useful for avoiding non-harmful, but potentially confusing "uncaught
             * play promise" rejection error messages.
             *
             * @param  {Object} value
             *         An object that may or may not be `Promise`-like.
             */ function silencePromise(value) {
                isPromise(value) && value.then(null, function(e) {});
            }
            /**
             * @file text-track-list-converter.js Utilities for capturing text track state and
             * re-creating tracks based on a capture.
             *
             * @module text-track-list-converter
             */ /**
             * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that
             * represents the {@link TextTrack}'s state.
             *
             * @param {TextTrack} track
             *        The text track to query.
             *
             * @return {Object}
             *         A serializable javascript representation of the TextTrack.
             * @private
             */ var trackToJson_ = function(track) {
                return [
                    "kind",
                    "label",
                    "language",
                    "id",
                    "inBandMetadataTrackDispatchType",
                    "mode",
                    "src"
                ].reduce(function(acc, prop, i) {
                    return track[prop] && (acc[prop] = track[prop]), acc;
                }, {
                    cues: track.cues && Array.prototype.map.call(track.cues, function(cue) {
                        return {
                            startTime: cue.startTime,
                            endTime: cue.endTime,
                            text: cue.text,
                            id: cue.id
                        };
                    })
                });
            }, textTrackConverter_textTracksToJson = function(tech) {
                var trackEls = tech.$$("track"), trackObjs = Array.prototype.map.call(trackEls, function(t) {
                    return t.track;
                });
                return Array.prototype.map.call(trackEls, function(trackEl) {
                    var json = trackToJson_(trackEl.track);
                    return trackEl.src && (json.src = trackEl.src), json;
                }).concat(Array.prototype.filter.call(tech.textTracks(), function(track) {
                    return -1 === trackObjs.indexOf(track);
                }).map(trackToJson_));
            }, MODAL_CLASS_NAME = "vjs-modal-dialog", ModalDialog = /*#__PURE__*/ function(_Component) {
                /**
                 * Create an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 *
                 * @param {Mixed} [options.content=undefined]
                 *        Provide customized content for this modal.
                 *
                 * @param {string} [options.description]
                 *        A text description for the modal, primarily for accessibility.
                 *
                 * @param {boolean} [options.fillAlways=false]
                 *        Normally, modals are automatically filled only the first time
                 *        they open. This tells the modal to refresh its content
                 *        every time it opens.
                 *
                 * @param {string} [options.label]
                 *        A text label for the modal, primarily for accessibility.
                 *
                 * @param {boolean} [options.pauseOnOpen=true]
                 *        If `true`, playback will will be paused if playing when
                 *        the modal opens, and resumed when it closes.
                 *
                 * @param {boolean} [options.temporary=true]
                 *        If `true`, the modal can only be opened once; it will be
                 *        disposed as soon as it's closed.
                 *
                 * @param {boolean} [options.uncloseable=false]
                 *        If `true`, the user will not be able to close the modal
                 *        through the UI in the normal ways. Programmatic closing is
                 *        still possible.
                 */ function ModalDialog(player, options) {
                    var _this;
                    return (_this = _Component.call(this, player, options) || this).handleKeyDown_ = function(e) {
                        return _this.handleKeyDown(e);
                    }, _this.close_ = function(e) {
                        return _this.close(e);
                    }, _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = !1, _this.closeable(!_this.options_.uncloseable), _this.content(_this.options_.content), // because we only want the contents of the modal in the contentEl
                    // (not the UI elements like the close button).
                    _this.contentEl_ = createEl("div", {
                        className: MODAL_CLASS_NAME + "-content"
                    }, {
                        role: "document"
                    }), _this.descEl_ = createEl("p", {
                        className: MODAL_CLASS_NAME + "-description vjs-control-text",
                        id: _this.el().getAttribute("aria-describedby")
                    }), textContent(_this.descEl_, _this.description()), _this.el_.appendChild(_this.descEl_), _this.el_.appendChild(_this.contentEl_), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(ModalDialog, _Component);
                /**
                 * Create the `ModalDialog`'s DOM element
                 *
                 * @return {Element}
                 *         The DOM element that gets created.
                 */ var _proto = ModalDialog.prototype;
                return _proto.createEl = function() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: this.buildCSSClass(),
                        tabIndex: -1
                    }, {
                        "aria-describedby": this.id() + "_description",
                        "aria-hidden": "true",
                        "aria-label": this.label(),
                        role: "dialog"
                    });
                }, _proto.dispose = function() {
                    this.contentEl_ = null, this.descEl_ = null, this.previouslyActiveEl_ = null, _Component.prototype.dispose.call(this);
                }, /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ _proto.buildCSSClass = function() {
                    return MODAL_CLASS_NAME + " vjs-hidden " + _Component.prototype.buildCSSClass.call(this);
                }, /**
                 * Returns the label string for this modal. Primarily used for accessibility.
                 *
                 * @return {string}
                 *         the localized or raw label of this modal.
                 */ _proto.label = function() {
                    return this.localize(this.options_.label || "Modal Window");
                }, /**
                 * Returns the description string for this modal. Primarily used for
                 * accessibility.
                 *
                 * @return {string}
                 *         The localized or raw description of this modal.
                 */ _proto.description = function() {
                    var desc = this.options_.description || this.localize("This is a modal window."); // Append a universal closeability message if the modal is closeable.
                    return this.closeable() && (desc += " " + this.localize("This modal can be closed by pressing the Escape key or activating the close button.")), desc;
                }, /**
                 * Opens the modal.
                 *
                 * @fires ModalDialog#beforemodalopen
                 * @fires ModalDialog#modalopen
                 */ _proto.open = function() {
                    if (!this.opened_) {
                        var player = this.player();
                        /**
                         * Fired just before a `ModalDialog` is opened.
                         *
                         * @event ModalDialog#beforemodalopen
                         * @type {EventTarget~Event}
                         */ this.trigger("beforemodalopen"), this.opened_ = !0, !this.options_.fillAlways && (this.hasBeenOpened_ || this.hasBeenFilled_) || this.fill(), // playing state.
                        this.wasPlaying_ = !player.paused(), this.options_.pauseOnOpen && this.wasPlaying_ && player.pause(), this.on("keydown", this.handleKeyDown_), this.hadControls_ = player.controls(), player.controls(!1), this.show(), this.conditionalFocus_(), this.el().setAttribute("aria-hidden", "false"), /**
                         * Fired just after a `ModalDialog` is opened.
                         *
                         * @event ModalDialog#modalopen
                         * @type {EventTarget~Event}
                         */ this.trigger("modalopen"), this.hasBeenOpened_ = !0;
                    }
                }, /**
                 * If the `ModalDialog` is currently open or closed.
                 *
                 * @param  {boolean} [value]
                 *         If given, it will open (`true`) or close (`false`) the modal.
                 *
                 * @return {boolean}
                 *         the current open state of the modaldialog
                 */ _proto.opened = function(value) {
                    return "boolean" == typeof value && this[value ? "open" : "close"](), this.opened_;
                }, /**
                 * Closes the modal, does nothing if the `ModalDialog` is
                 * not open.
                 *
                 * @fires ModalDialog#beforemodalclose
                 * @fires ModalDialog#modalclose
                 */ _proto.close = function() {
                    if (this.opened_) {
                        var player = this.player();
                        /**
                     * Fired just before a `ModalDialog` is closed.
                     *
                     * @event ModalDialog#beforemodalclose
                     * @type {EventTarget~Event}
                     */ this.trigger("beforemodalclose"), this.opened_ = !1, this.wasPlaying_ && this.options_.pauseOnOpen && player.play(), this.off("keydown", this.handleKeyDown_), this.hadControls_ && player.controls(!0), this.hide(), this.el().setAttribute("aria-hidden", "true"), /**
                     * Fired just after a `ModalDialog` is closed.
                     *
                     * @event ModalDialog#modalclose
                     * @type {EventTarget~Event}
                     */ this.trigger("modalclose"), this.conditionalBlur_(), this.options_.temporary && this.dispose();
                    }
                }, /**
                 * Check to see if the `ModalDialog` is closeable via the UI.
                 *
                 * @param  {boolean} [value]
                 *         If given as a boolean, it will set the `closeable` option.
                 *
                 * @return {boolean}
                 *         Returns the final value of the closable option.
                 */ _proto.closeable = function(value) {
                    if ("boolean" == typeof value) {
                        var closeable = this.closeable_ = !!value, close = this.getChild("closeButton");
                        if (closeable && !close) {
                            // The close button should be a child of the modal - not its
                            // content element, so temporarily change the content element.
                            var temp = this.contentEl_;
                            this.contentEl_ = this.el_, close = this.addChild("closeButton", {
                                controlText: "Close Modal Dialog"
                            }), this.contentEl_ = temp, this.on(close, "close", this.close_);
                        } // If this is being made uncloseable and has a close button, remove it.
                        !closeable && close && (this.off(close, "close", this.close_), this.removeChild(close), close.dispose());
                    }
                    return this.closeable_;
                }, /**
                 * Fill the modal's content element with the modal's "content" option.
                 * The content element will be emptied before this change takes place.
                 */ _proto.fill = function() {
                    this.fillWith(this.content());
                }, /**
                 * Fill the modal's content element with arbitrary content.
                 * The content element will be emptied before this change takes place.
                 *
                 * @fires ModalDialog#beforemodalfill
                 * @fires ModalDialog#modalfill
                 *
                 * @param {Mixed} [content]
                 *        The same rules apply to this as apply to the `content` option.
                 */ _proto.fillWith = function(content) {
                    var contentEl = this.contentEl(), parentEl = contentEl.parentNode, nextSiblingEl = contentEl.nextSibling;
                    /**
                     * Fired just before a `ModalDialog` is filled with content.
                     *
                     * @event ModalDialog#beforemodalfill
                     * @type {EventTarget~Event}
                     */ this.trigger("beforemodalfill"), this.hasBeenFilled_ = !0, // manipulation to avoid modifying the live DOM multiple times.
                    parentEl.removeChild(contentEl), this.empty(), insertContent(contentEl, content), /**
                     * Fired just after a `ModalDialog` is filled with content.
                     *
                     * @event ModalDialog#modalfill
                     * @type {EventTarget~Event}
                     */ this.trigger("modalfill"), nextSiblingEl ? parentEl.insertBefore(contentEl, nextSiblingEl) : parentEl.appendChild(contentEl);
                    var closeButton = this.getChild("closeButton");
                    closeButton && parentEl.appendChild(closeButton.el_);
                }, /**
                 * Empties the content element. This happens anytime the modal is filled.
                 *
                 * @fires ModalDialog#beforemodalempty
                 * @fires ModalDialog#modalempty
                 */ _proto.empty = function() {
                    /**
                     * Fired just before a `ModalDialog` is emptied.
                     *
                     * @event ModalDialog#beforemodalempty
                     * @type {EventTarget~Event}
                     */ this.trigger("beforemodalempty"), emptyEl(this.contentEl()), /**
                     * Fired just after a `ModalDialog` is emptied.
                     *
                     * @event ModalDialog#modalempty
                     * @type {EventTarget~Event}
                     */ this.trigger("modalempty");
                }, /**
                 * Gets or sets the modal content, which gets normalized before being
                 * rendered into the DOM.
                 *
                 * This does not update the DOM or fill the modal, but it is called during
                 * that process.
                 *
                 * @param  {Mixed} [value]
                 *         If defined, sets the internal content value to be used on the
                 *         next call(s) to `fill`. This value is normalized before being
                 *         inserted. To "clear" the internal content value, pass `null`.
                 *
                 * @return {Mixed}
                 *         The current content of the modal dialog
                 */ _proto.content = function(value) {
                    return void 0 !== value && (this.content_ = value), this.content_;
                }, /**
                 * conditionally focus the modal dialog if focus was previously on the player.
                 *
                 * @private
                 */ _proto.conditionalFocus_ = function() {
                    var activeEl = global_document__WEBPACK_IMPORTED_MODULE_1___default().activeElement, playerEl = this.player_.el_;
                    this.previouslyActiveEl_ = null, (playerEl.contains(activeEl) || playerEl === activeEl) && (this.previouslyActiveEl_ = activeEl, this.focus());
                }, /**
                 * conditionally blur the element and refocus the last focused element
                 *
                 * @private
                 */ _proto.conditionalBlur_ = function() {
                    this.previouslyActiveEl_ && (this.previouslyActiveEl_.focus(), this.previouslyActiveEl_ = null);
                }, /**
                 * Keydown handler. Attached when modal is focused.
                 *
                 * @listens keydown
                 */ _proto.handleKeyDown = function(event) {
                    if (// Do not allow keydowns to reach out of the modal dialog.
                    event.stopPropagation(), keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Escape") && this.closeable()) {
                        event.preventDefault(), this.close();
                        return;
                    } // exit early if it isn't a tab key
                    if (keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Tab")) {
                        for(var focusIndex, focusableEls = this.focusableEls_(), activeEl = this.el_.querySelector(":focus"), i = 0; i < focusableEls.length; i++)if (activeEl === focusableEls[i]) {
                            focusIndex = i;
                            break;
                        }
                        global_document__WEBPACK_IMPORTED_MODULE_1___default().activeElement === this.el_ && (focusIndex = 0), event.shiftKey && 0 === focusIndex ? (focusableEls[focusableEls.length - 1].focus(), event.preventDefault()) : event.shiftKey || focusIndex !== focusableEls.length - 1 || (focusableEls[0].focus(), event.preventDefault());
                    }
                }, /**
                 * get all focusable elements
                 *
                 * @private
                 */ _proto.focusableEls_ = function() {
                    var allChildren = this.el_.querySelectorAll("*");
                    return Array.prototype.filter.call(allChildren, function(child) {
                        return (child instanceof global_window__WEBPACK_IMPORTED_MODULE_0___default().HTMLAnchorElement || child instanceof global_window__WEBPACK_IMPORTED_MODULE_0___default().HTMLAreaElement) && child.hasAttribute("href") || (child instanceof global_window__WEBPACK_IMPORTED_MODULE_0___default().HTMLInputElement || child instanceof global_window__WEBPACK_IMPORTED_MODULE_0___default().HTMLSelectElement || child instanceof global_window__WEBPACK_IMPORTED_MODULE_0___default().HTMLTextAreaElement || child instanceof global_window__WEBPACK_IMPORTED_MODULE_0___default().HTMLButtonElement) && !child.hasAttribute("disabled") || child instanceof global_window__WEBPACK_IMPORTED_MODULE_0___default().HTMLIFrameElement || child instanceof global_window__WEBPACK_IMPORTED_MODULE_0___default().HTMLObjectElement || child instanceof global_window__WEBPACK_IMPORTED_MODULE_0___default().HTMLEmbedElement || child.hasAttribute("tabindex") && -1 !== child.getAttribute("tabindex") || child.hasAttribute("contenteditable");
                    });
                }, ModalDialog;
            }(Component$1);
            /**
             * Default options for `ModalDialog` default options.
             *
             * @type {Object}
             * @private
             */ ModalDialog.prototype.options_ = {
                pauseOnOpen: !0,
                temporary: !0
            }, Component$1.registerComponent("ModalDialog", ModalDialog);
            /**
             * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and
             * {@link VideoTrackList}
             *
             * @extends EventTarget
             */ var TrackList = /*#__PURE__*/ function(_EventTarget) {
                /**
                 * Create an instance of this class
                 *
                 * @param {Track[]} tracks
                 *        A list of tracks to initialize the list with.
                 *
                 * @abstract
                 */ function TrackList(tracks) {
                    var _this;
                    void 0 === tracks && (tracks = []), (_this = _EventTarget.call(this) || this).tracks_ = [], /**
                     * @memberof TrackList
                     * @member {number} length
                     *         The current number of `Track`s in the this Trackist.
                     * @instance
                     */ Object.defineProperty((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), "length", {
                        get: function() {
                            return this.tracks_.length;
                        }
                    });
                    for(var i = 0; i < tracks.length; i++)_this.addTrack(tracks[i]);
                    return _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(TrackList, _EventTarget);
                /**
                 * Add a {@link Track} to the `TrackList`
                 *
                 * @param {Track} track
                 *        The audio, video, or text track to add to the list.
                 *
                 * @fires TrackList#addtrack
                 */ var _proto = TrackList.prototype;
                return _proto.addTrack = function(track) {
                    var _this2 = this, index = this.tracks_.length;
                    "" + index in this || Object.defineProperty(this, index, {
                        get: function() {
                            return this.tracks_[index];
                        }
                    }), -1 === this.tracks_.indexOf(track) && (this.tracks_.push(track), /**
                         * Triggered when a track is added to a track list.
                         *
                         * @event TrackList#addtrack
                         * @type {EventTarget~Event}
                         * @property {Track} track
                         *           A reference to track that was added.
                         */ this.trigger({
                        track: track,
                        type: "addtrack",
                        target: this
                    })), /**
                     * Triggered when a track label is changed.
                     *
                     * @event TrackList#addtrack
                     * @type {EventTarget~Event}
                     * @property {Track} track
                     *           A reference to track that was added.
                     */ track.labelchange_ = function() {
                        _this2.trigger({
                            track: track,
                            type: "labelchange",
                            target: _this2
                        });
                    }, isEvented(track) && track.addEventListener("labelchange", track.labelchange_);
                }, /**
                 * Remove a {@link Track} from the `TrackList`
                 *
                 * @param {Track} rtrack
                 *        The audio, video, or text track to remove from the list.
                 *
                 * @fires TrackList#removetrack
                 */ _proto.removeTrack = function(rtrack) {
                    for(var track, i = 0, l = this.length; i < l; i++)if (this[i] === rtrack) {
                        (track = this[i]).off && track.off(), this.tracks_.splice(i, 1);
                        break;
                    }
                    track && /**
                     * Triggered when a track is removed from track list.
                     *
                     * @event TrackList#removetrack
                     * @type {EventTarget~Event}
                     * @property {Track} track
                     *           A reference to track that was removed.
                     */ this.trigger({
                        track: track,
                        type: "removetrack",
                        target: this
                    });
                }, /**
                 * Get a Track from the TrackList by a tracks id
                 *
                 * @param {string} id - the id of the track to get
                 * @method getTrackById
                 * @return {Track}
                 * @private
                 */ _proto.getTrackById = function(id) {
                    for(var result = null, i = 0, l = this.length; i < l; i++){
                        var track = this[i];
                        if (track.id === id) {
                            result = track;
                            break;
                        }
                    }
                    return result;
                }, TrackList;
            }(EventTarget$2);
            for(var event in /**
             * Triggered when a different track is selected/enabled.
             *
             * @event TrackList#change
             * @type {EventTarget~Event}
             */ /**
             * Events that can be called with on + eventName. See {@link EventHandler}.
             *
             * @property {Object} TrackList#allowedEvents_
             * @private
             */ TrackList.prototype.allowedEvents_ = {
                change: "change",
                addtrack: "addtrack",
                removetrack: "removetrack",
                labelchange: "labelchange"
            }, TrackList.prototype.allowedEvents_)TrackList.prototype["on" + event] = null;
            /**
             * Anywhere we call this function we diverge from the spec
             * as we only support one enabled audiotrack at a time
             *
             * @param {AudioTrackList} list
             *        list to work on
             *
             * @param {AudioTrack} track
             *        The track to skip
             *
             * @private
             */ var disableOthers$1 = function(list, track) {
                for(var i = 0; i < list.length; i++)Object.keys(list[i]).length && track.id !== list[i].id && (list[i].enabled = !1); // another audio track is enabled, disable it
            }, AudioTrackList = /*#__PURE__*/ function(_TrackList) {
                /**
                 * Create an instance of this class.
                 *
                 * @param {AudioTrack[]} [tracks=[]]
                 *        A list of `AudioTrack` to instantiate the list with.
                 */ function AudioTrackList(tracks) {
                    var _this;
                    void 0 === tracks && (tracks = []);
                    // make sure only 1 track is enabled
                    // sorted from last index to first index
                    for(var i = tracks.length - 1; i >= 0; i--)if (tracks[i].enabled) {
                        disableOthers$1(tracks, tracks[i]);
                        break;
                    }
                    return (_this = _TrackList.call(this, tracks) || this).changing_ = !1, _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(AudioTrackList, _TrackList);
                /**
                 * Add an {@link AudioTrack} to the `AudioTrackList`.
                 *
                 * @param {AudioTrack} track
                 *        The AudioTrack to add to the list
                 *
                 * @fires TrackList#addtrack
                 */ var _proto = AudioTrackList.prototype;
                return _proto.addTrack = function(track) {
                    var _this2 = this;
                    track.enabled && disableOthers$1(this, track), _TrackList.prototype.addTrack.call(this, track), track.addEventListener && (track.enabledChange_ = function() {
                        // when we are disabling other tracks (since we don't support
                        // more than one track at a time) we will set changing_
                        // to true so that we don't trigger additional change events
                        _this2.changing_ || (_this2.changing_ = !0, disableOthers$1(_this2, track), _this2.changing_ = !1, _this2.trigger("change"));
                    }, /**
                     * @listens AudioTrack#enabledchange
                     * @fires TrackList#change
                     */ track.addEventListener("enabledchange", track.enabledChange_));
                }, _proto.removeTrack = function(rtrack) {
                    _TrackList.prototype.removeTrack.call(this, rtrack), rtrack.removeEventListener && rtrack.enabledChange_ && (rtrack.removeEventListener("enabledchange", rtrack.enabledChange_), rtrack.enabledChange_ = null);
                }, AudioTrackList;
            }(TrackList), disableOthers = function(list, track) {
                for(var i = 0; i < list.length; i++)Object.keys(list[i]).length && track.id !== list[i].id && (list[i].selected = !1); // another video track is enabled, disable it
            }, VideoTrackList = /*#__PURE__*/ function(_TrackList) {
                /**
                 * Create an instance of this class.
                 *
                 * @param {VideoTrack[]} [tracks=[]]
                 *        A list of `VideoTrack` to instantiate the list with.
                 */ function VideoTrackList(tracks) {
                    var _this;
                    void 0 === tracks && (tracks = []);
                    // make sure only 1 track is enabled
                    // sorted from last index to first index
                    for(var i = tracks.length - 1; i >= 0; i--)if (tracks[i].selected) {
                        disableOthers(tracks, tracks[i]);
                        break;
                    }
                    return (_this = _TrackList.call(this, tracks) || this).changing_ = !1, /**
                     * @member {number} VideoTrackList#selectedIndex
                     *         The current index of the selected {@link VideoTrack`}.
                     */ Object.defineProperty((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), "selectedIndex", {
                        get: function() {
                            for(var _i = 0; _i < this.length; _i++)if (this[_i].selected) return _i;
                            return -1;
                        },
                        set: function() {}
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(VideoTrackList, _TrackList);
                /**
                 * Add a {@link VideoTrack} to the `VideoTrackList`.
                 *
                 * @param {VideoTrack} track
                 *        The VideoTrack to add to the list
                 *
                 * @fires TrackList#addtrack
                 */ var _proto = VideoTrackList.prototype;
                return _proto.addTrack = function(track) {
                    var _this2 = this;
                    track.selected && disableOthers(this, track), _TrackList.prototype.addTrack.call(this, track), track.addEventListener && (track.selectedChange_ = function() {
                        _this2.changing_ || (_this2.changing_ = !0, disableOthers(_this2, track), _this2.changing_ = !1, _this2.trigger("change"));
                    }, /**
                     * @listens VideoTrack#selectedchange
                     * @fires TrackList#change
                     */ track.addEventListener("selectedchange", track.selectedChange_));
                }, _proto.removeTrack = function(rtrack) {
                    _TrackList.prototype.removeTrack.call(this, rtrack), rtrack.removeEventListener && rtrack.selectedChange_ && (rtrack.removeEventListener("selectedchange", rtrack.selectedChange_), rtrack.selectedChange_ = null);
                }, VideoTrackList;
            }(TrackList), TextTrackList = /*#__PURE__*/ function(_TrackList) {
                function TextTrackList() {
                    return _TrackList.apply(this, arguments) || this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(TextTrackList, _TrackList);
                var _proto = TextTrackList.prototype;
                return(/**
                 * Add a {@link TextTrack} to the `TextTrackList`
                 *
                 * @param {TextTrack} track
                 *        The text track to add to the list.
                 *
                 * @fires TrackList#addtrack
                 */ _proto.addTrack = function(track) {
                    var _this = this;
                    _TrackList.prototype.addTrack.call(this, track), this.queueChange_ || (this.queueChange_ = function() {
                        return _this.queueTrigger("change");
                    }), this.triggerSelectedlanguagechange || (this.triggerSelectedlanguagechange_ = function() {
                        return _this.trigger("selectedlanguagechange");
                    }), /**
                     * @listens TextTrack#modechange
                     * @fires TrackList#change
                     */ track.addEventListener("modechange", this.queueChange_), -1 === [
                        "metadata",
                        "chapters"
                    ].indexOf(track.kind) && track.addEventListener("modechange", this.triggerSelectedlanguagechange_);
                }, _proto.removeTrack = function(rtrack) {
                    _TrackList.prototype.removeTrack.call(this, rtrack), rtrack.removeEventListener && (this.queueChange_ && rtrack.removeEventListener("modechange", this.queueChange_), this.selectedlanguagechange_ && rtrack.removeEventListener("modechange", this.triggerSelectedlanguagechange_));
                }, TextTrackList);
            }(TrackList), HtmlTrackElementList = /*#__PURE__*/ function() {
                /**
                 * Create an instance of this class.
                 *
                 * @param {HtmlTrackElement[]} [tracks=[]]
                 *        A list of `HtmlTrackElement` to instantiate the list with.
                 */ function HtmlTrackElementList(trackElements) {
                    void 0 === trackElements && (trackElements = []), this.trackElements_ = [], /**
                     * @memberof HtmlTrackElementList
                     * @member {number} length
                     *         The current number of `Track`s in the this Trackist.
                     * @instance
                     */ Object.defineProperty(this, "length", {
                        get: function() {
                            return this.trackElements_.length;
                        }
                    });
                    for(var i = 0, length = trackElements.length; i < length; i++)this.addTrackElement_(trackElements[i]);
                }
                /**
                 * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`
                 *
                 * @param {HtmlTrackElement} trackElement
                 *        The track element to add to the list.
                 *
                 * @private
                 */ var _proto = HtmlTrackElementList.prototype;
                return _proto.addTrackElement_ = function(trackElement) {
                    var index = this.trackElements_.length;
                    "" + index in this || Object.defineProperty(this, index, {
                        get: function() {
                            return this.trackElements_[index];
                        }
                    }), -1 === this.trackElements_.indexOf(trackElement) && this.trackElements_.push(trackElement);
                }, /**
                 * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an
                 * {@link TextTrack}.
                 *
                 * @param {TextTrack} track
                 *        The track associated with a track element.
                 *
                 * @return {HtmlTrackElement|undefined}
                 *         The track element that was found or undefined.
                 *
                 * @private
                 */ _proto.getTrackElementByTrack_ = function(track) {
                    for(var trackElement_, i = 0, length = this.trackElements_.length; i < length; i++)if (track === this.trackElements_[i].track) {
                        trackElement_ = this.trackElements_[i];
                        break;
                    }
                    return trackElement_;
                }, /**
                 * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`
                 *
                 * @param {HtmlTrackElement} trackElement
                 *        The track element to remove from the list.
                 *
                 * @private
                 */ _proto.removeTrackElement_ = function(trackElement) {
                    for(var i = 0, length = this.trackElements_.length; i < length; i++)if (trackElement === this.trackElements_[i]) {
                        this.trackElements_[i].track && "function" == typeof this.trackElements_[i].track.off && this.trackElements_[i].track.off(), "function" == typeof this.trackElements_[i].off && this.trackElements_[i].off(), this.trackElements_.splice(i, 1);
                        break;
                    }
                }, HtmlTrackElementList;
            }(), TextTrackCueList = /*#__PURE__*/ function() {
                /**
                 * Create an instance of this class..
                 *
                 * @param {Array} cues
                 *        A list of cues to be initialized with
                 */ function TextTrackCueList(cues) {
                    TextTrackCueList.prototype.setCues_.call(this, cues), /**
                     * @memberof TextTrackCueList
                     * @member {number} length
                     *         The current number of `TextTrackCue`s in the TextTrackCueList.
                     * @instance
                     */ Object.defineProperty(this, "length", {
                        get: function() {
                            return this.length_;
                        }
                    });
                }
                /**
                 * A setter for cues in this list. Creates getters
                 * an an index for the cues.
                 *
                 * @param {Array} cues
                 *        An array of cues to set
                 *
                 * @private
                 */ var _proto = TextTrackCueList.prototype;
                return _proto.setCues_ = function(cues) {
                    var oldLength = this.length || 0, i = 0, l = cues.length;
                    this.cues_ = cues, this.length_ = cues.length;
                    var defineProp = function(index) {
                        "" + index in this || Object.defineProperty(this, "" + index, {
                            get: function() {
                                return this.cues_[index];
                            }
                        });
                    };
                    if (oldLength < l) for(i = oldLength; i < l; i++)defineProp.call(this, i);
                }, /**
                 * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.
                 *
                 * @param {string} id
                 *        The id of the cue that should be searched for.
                 *
                 * @return {TextTrackCueList~TextTrackCue|null}
                 *         A single cue or null if none was found.
                 */ _proto.getCueById = function(id) {
                    for(var result = null, i = 0, l = this.length; i < l; i++){
                        var cue = this[i];
                        if (cue.id === id) {
                            result = cue;
                            break;
                        }
                    }
                    return result;
                }, TextTrackCueList;
            }(), VideoTrackKind = {
                alternative: "alternative",
                captions: "captions",
                main: "main",
                sign: "sign",
                subtitles: "subtitles",
                commentary: "commentary"
            }, AudioTrackKind = {
                alternative: "alternative",
                descriptions: "descriptions",
                main: "main",
                "main-desc": "main-desc",
                translation: "translation",
                commentary: "commentary"
            }, TextTrackKind = {
                subtitles: "subtitles",
                captions: "captions",
                descriptions: "descriptions",
                chapters: "chapters",
                metadata: "metadata"
            }, TextTrackMode = {
                disabled: "disabled",
                hidden: "hidden",
                showing: "showing"
            }, Track = /*#__PURE__*/ function(_EventTarget) {
                /**
                 * Create an instance of this class.
                 *
                 * @param {Object} [options={}]
                 *        Object of option names and values
                 *
                 * @param {string} [options.kind='']
                 *        A valid kind for the track type you are creating.
                 *
                 * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
                 *        A unique id for this AudioTrack.
                 *
                 * @param {string} [options.label='']
                 *        The menu label for this track.
                 *
                 * @param {string} [options.language='']
                 *        A valid two character language code.
                 *
                 * @abstract
                 */ function Track(options) {
                    void 0 === options && (options = {}), _this = _EventTarget.call(this) || this;
                    var _this, trackProps = {
                        id: options.id || "vjs_track_" + _guid++,
                        kind: options.kind || "",
                        language: options.language || ""
                    }, label = options.label || "", _loop = function(key) {
                        Object.defineProperty((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), key, {
                            get: function() {
                                return trackProps[key];
                            },
                            set: function() {}
                        });
                    };
                    for(var key in trackProps)_loop(key);
                    return(/**
                     * @memberof Track
                     * @member {string} label
                     *         The label of this track. Cannot be changed after creation.
                     * @instance
                     *
                     * @fires Track#labelchange
                     */ Object.defineProperty((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), "label", {
                        get: function() {
                            return label;
                        },
                        set: function(newLabel) {
                            newLabel !== label && (label = newLabel, /**
                                     * An event that fires when label changes on this track.
                                     *
                                     * > Note: This is not part of the spec!
                                     *
                                     * @event Track#labelchange
                                     * @type {EventTarget~Event}
                                     */ this.trigger("labelchange"));
                        }
                    }), _this);
                }
                return (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(Track, _EventTarget), Track;
            }(EventTarget$2), parseUrl = function(url) {
                // This entire method can be replace with URL once we are able to drop IE11
                var props = [
                    "protocol",
                    "hostname",
                    "port",
                    "pathname",
                    "search",
                    "hash",
                    "host"
                ], a = global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("a"); // add the url to an anchor and let the browser parse the URL
                a.href = url;
                for(var details = {}, i = 0; i < props.length; i++)details[props[i]] = a[props[i]];
                 // IE adds the port to the host property unlike everyone else. If
                return "http:" === details.protocol && (details.host = details.host.replace(/:80$/, "")), "https:" === details.protocol && (details.host = details.host.replace(/:443$/, "")), details.protocol || (details.protocol = global_window__WEBPACK_IMPORTED_MODULE_0___default().location.protocol), details.host || (details.host = global_window__WEBPACK_IMPORTED_MODULE_0___default().location.host), details;
            }, getAbsoluteURL = function(url) {
                // Check if absolute URL
                if (!url.match(/^https?:\/\//)) {
                    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.
                    // add the url to an anchor and let the browser parse the URL
                    var a = global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("a");
                    a.href = url, url = a.href;
                }
                return url;
            }, getFileExtension = function(path) {
                if ("string" == typeof path) {
                    var pathParts = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/.exec(path);
                    if (pathParts) return pathParts.pop().toLowerCase();
                }
                return "";
            }, isCrossOrigin = function(url, winLoc) {
                void 0 === winLoc && (winLoc = global_window__WEBPACK_IMPORTED_MODULE_0___default().location);
                var urlInfo = parseUrl(url); // IE8 protocol relative urls will return ':' for protocol
                return (":" === urlInfo.protocol ? winLoc.protocol : urlInfo.protocol) + urlInfo.host !== winLoc.protocol + winLoc.host;
            }, Url = /*#__PURE__*/ Object.freeze({
                __proto__: null,
                parseUrl: parseUrl,
                getAbsoluteURL: getAbsoluteURL,
                getFileExtension: getFileExtension,
                isCrossOrigin: isCrossOrigin
            }), parseCues = function(srcContent, track) {
                var parser = new (global_window__WEBPACK_IMPORTED_MODULE_0___default()).WebVTT.Parser(global_window__WEBPACK_IMPORTED_MODULE_0___default(), global_window__WEBPACK_IMPORTED_MODULE_0___default().vttjs, global_window__WEBPACK_IMPORTED_MODULE_0___default().WebVTT.StringDecoder()), errors = [];
                parser.oncue = function(cue) {
                    track.addCue(cue);
                }, parser.onparsingerror = function(error) {
                    errors.push(error);
                }, parser.onflush = function() {
                    track.trigger({
                        type: "loadeddata",
                        target: track
                    });
                }, parser.parse(srcContent), errors.length > 0 && (global_window__WEBPACK_IMPORTED_MODULE_0___default().console && global_window__WEBPACK_IMPORTED_MODULE_0___default().console.groupCollapsed && global_window__WEBPACK_IMPORTED_MODULE_0___default().console.groupCollapsed("Text Track parsing errors for " + track.src), errors.forEach(function(error) {
                    return log$1.error(error);
                }), global_window__WEBPACK_IMPORTED_MODULE_0___default().console && global_window__WEBPACK_IMPORTED_MODULE_0___default().console.groupEnd && global_window__WEBPACK_IMPORTED_MODULE_0___default().console.groupEnd()), parser.flush();
            }, loadTrack = function(src, track) {
                var opts = {
                    uri: src
                }, crossOrigin = isCrossOrigin(src);
                crossOrigin && (opts.cors = crossOrigin);
                var withCredentials = "use-credentials" === track.tech_.crossOrigin();
                withCredentials && (opts.withCredentials = withCredentials), _videojs_xhr__WEBPACK_IMPORTED_MODULE_4___default()(opts, bind(this, function(err, response, responseBody) {
                    if (err) return log$1.error(err, response);
                    track.loaded_ = !0, "function" != typeof global_window__WEBPACK_IMPORTED_MODULE_0___default().WebVTT ? track.tech_ && // to prevent use before define eslint error, we define loadHandler
                    // as a let here
                    track.tech_.any([
                        "vttjsloaded",
                        "vttjserror"
                    ], function(event) {
                        if ("vttjserror" === event.type) {
                            log$1.error("vttjs failed to load, stopping trying to process " + track.src);
                            return;
                        }
                        return parseCues(responseBody, track);
                    }) : parseCues(responseBody, track);
                }));
            }, TextTrack = /*#__PURE__*/ function(_Track) {
                /**
                 * Create an instance of this class.
                 *
                 * @param {Object} options={}
                 *        Object of option names and values
                 *
                 * @param {Tech} options.tech
                 *        A reference to the tech that owns this TextTrack.
                 *
                 * @param {TextTrack~Kind} [options.kind='subtitles']
                 *        A valid text track kind.
                 *
                 * @param {TextTrack~Mode} [options.mode='disabled']
                 *        A valid text track mode.
                 *
                 * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
                 *        A unique id for this TextTrack.
                 *
                 * @param {string} [options.label='']
                 *        The menu label for this track.
                 *
                 * @param {string} [options.language='']
                 *        A valid two character language code.
                 *
                 * @param {string} [options.srclang='']
                 *        A valid two character language code. An alternative, but deprioritized
                 *        version of `options.language`
                 *
                 * @param {string} [options.src]
                 *        A url to TextTrack cues.
                 *
                 * @param {boolean} [options.default]
                 *        If this track should default to on or off.
                 */ function TextTrack(options) {
                    if (void 0 === options && (options = {}), !options.tech) throw Error("A tech was not provided.");
                    var _this, settings = mergeOptions$3(options, {
                        kind: TextTrackKind[options.kind] || "subtitles",
                        language: options.language || options.srclang || ""
                    }), mode = TextTrackMode[settings.mode] || "disabled", default_ = settings.default;
                    ("metadata" === settings.kind || "chapters" === settings.kind) && (mode = "hidden"), (_this = _Track.call(this, settings) || this).tech_ = settings.tech, _this.cues_ = [], _this.activeCues_ = [], _this.preload_ = !1 !== _this.tech_.preloadTextTracks;
                    var cues = new TextTrackCueList(_this.cues_), activeCues = new TextTrackCueList(_this.activeCues_), changed = !1, timeupdateHandler = bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), function() {
                        !(!this.tech_.isReady_ || this.tech_.isDisposed()) && (// due to its nature as a getter function. Do not remove or cues will
                        // stop updating!
                        // Use the setter to prevent deletion from uglify (pure_getters rule)
                        this.activeCues = this.activeCues, changed && (this.trigger("cuechange"), changed = !1)); // Accessing this.activeCues for the side-effects of updating itself
                    });
                    return _this.tech_.one("dispose", function() {
                        _this.tech_.off("timeupdate", timeupdateHandler);
                    }), "disabled" !== mode && _this.tech_.on("timeupdate", timeupdateHandler), Object.defineProperties((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), {
                        /**
                             * @memberof TextTrack
                             * @member {boolean} default
                             *         If this track was set to be on or off by default. Cannot be changed after
                             *         creation.
                             * @instance
                             *
                             * @readonly
                             */ default: {
                            get: function() {
                                return default_;
                            },
                            set: function() {}
                        },
                        /**
                             * @memberof TextTrack
                             * @member {string} mode
                             *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will
                             *         not be set if setting to an invalid mode.
                             * @instance
                             *
                             * @fires TextTrack#modechange
                             */ mode: {
                            get: function() {
                                return mode;
                            },
                            set: function(newMode) {
                                TextTrackMode[newMode] && mode !== newMode && (mode = newMode, this.preload_ || "disabled" === mode || 0 !== this.cues.length || // On-demand load.
                                loadTrack(this.src, this), this.tech_.off("timeupdate", timeupdateHandler), "disabled" !== mode && this.tech_.on("timeupdate", timeupdateHandler), /**
                                     * An event that fires when mode changes on this track. This allows
                                     * the TextTrackList that holds this track to act accordingly.
                                     *
                                     * > Note: This is not part of the spec!
                                     *
                                     * @event TextTrack#modechange
                                     * @type {EventTarget~Event}
                                     */ this.trigger("modechange"));
                            }
                        },
                        /**
                             * @memberof TextTrack
                             * @member {TextTrackCueList} cues
                             *         The text track cue list for this TextTrack.
                             * @instance
                             */ cues: {
                            get: function() {
                                return this.loaded_ ? cues : null;
                            },
                            set: function() {}
                        },
                        /**
                             * @memberof TextTrack
                             * @member {TextTrackCueList} activeCues
                             *         The list text track cues that are currently active for this TextTrack.
                             * @instance
                             */ activeCues: {
                            get: function() {
                                if (!this.loaded_) return null;
                                 // nothing to do
                                if (0 === this.cues.length) return activeCues;
                                for(var ct = this.tech_.currentTime(), active = [], i = 0, l = this.cues.length; i < l; i++){
                                    var cue = this.cues[i];
                                    cue.startTime <= ct && cue.endTime >= ct ? active.push(cue) : cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct && active.push(cue);
                                }
                                if (changed = !1, active.length !== this.activeCues_.length) changed = !0;
                                else for(var _i = 0; _i < active.length; _i++)-1 === this.activeCues_.indexOf(active[_i]) && (changed = !0);
                                return this.activeCues_ = active, activeCues.setCues_(this.activeCues_), activeCues;
                            },
                            // /!\ Keep this setter empty (see the timeupdate handler above)
                            set: function() {}
                        }
                    }), settings.src ? (_this.src = settings.src, _this.preload_ || // Tracks will load on-demand.
                    // Act like we're loaded for other purposes.
                    (_this.loaded_ = !0), (_this.preload_ || "subtitles" !== settings.kind && "captions" !== settings.kind) && loadTrack(_this.src, (0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this))) : _this.loaded_ = !0, _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(TextTrack, _Track);
                /**
                 * Add a cue to the internal list of cues.
                 *
                 * @param {TextTrack~Cue} cue
                 *        The cue to add to our internal list
                 */ var _proto = TextTrack.prototype;
                return _proto.addCue = function(originalCue) {
                    var cue = originalCue;
                    if (global_window__WEBPACK_IMPORTED_MODULE_0___default().vttjs && !(originalCue instanceof global_window__WEBPACK_IMPORTED_MODULE_0___default().vttjs.VTTCue)) {
                        for(var prop in cue = new (global_window__WEBPACK_IMPORTED_MODULE_0___default()).vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text), originalCue)prop in cue || (cue[prop] = originalCue[prop]);
                         // make sure that `id` is copied over
                        cue.id = originalCue.id, cue.originalCue_ = originalCue;
                    }
                    for(var tracks = this.tech_.textTracks(), i = 0; i < tracks.length; i++)tracks[i] !== this && tracks[i].removeCue(cue);
                    this.cues_.push(cue), this.cues.setCues_(this.cues_);
                }, /**
                 * Remove a cue from our internal list
                 *
                 * @param {TextTrack~Cue} removeCue
                 *        The cue to remove from our internal list
                 */ _proto.removeCue = function(_removeCue) {
                    for(var i = this.cues_.length; i--;){
                        var cue = this.cues_[i];
                        if (cue === _removeCue || cue.originalCue_ && cue.originalCue_ === _removeCue) {
                            this.cues_.splice(i, 1), this.cues.setCues_(this.cues_);
                            break;
                        }
                    }
                }, TextTrack;
            }(Track);
            /**
             * cuechange - One or more cues in the track have become active or stopped being active.
             */ TextTrack.prototype.allowedEvents_ = {
                cuechange: "cuechange"
            };
            /**
             * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}
             * only one `AudioTrack` in the list will be enabled at a time.
             *
             * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}
             * @extends Track
             */ var AudioTrack = /*#__PURE__*/ function(_Track) {
                /**
                 * Create an instance of this class.
                 *
                 * @param {Object} [options={}]
                 *        Object of option names and values
                 *
                 * @param {AudioTrack~Kind} [options.kind='']
                 *        A valid audio track kind
                 *
                 * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
                 *        A unique id for this AudioTrack.
                 *
                 * @param {string} [options.label='']
                 *        The menu label for this track.
                 *
                 * @param {string} [options.language='']
                 *        A valid two character language code.
                 *
                 * @param {boolean} [options.enabled]
                 *        If this track is the one that is currently playing. If this track is part of
                 *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.
                 */ function AudioTrack(options) {
                    void 0 === options && (options = {});
                    var _this, settings = mergeOptions$3(options, {
                        kind: AudioTrackKind[options.kind] || ""
                    });
                    _this = _Track.call(this, settings) || this;
                    var enabled = !1;
                    return(/**
                     * @memberof AudioTrack
                     * @member {boolean} enabled
                     *         If this `AudioTrack` is enabled or not. When setting this will
                     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.
                     * @instance
                     *
                     * @fires VideoTrack#selectedchange
                     */ Object.defineProperty((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), "enabled", {
                        get: function() {
                            return enabled;
                        },
                        set: function(newEnabled) {
                            // an invalid or unchanged value
                            "boolean" == typeof newEnabled && newEnabled !== enabled && (enabled = newEnabled, /**
                                 * An event that fires when enabled changes on this track. This allows
                                 * the AudioTrackList that holds this track to act accordingly.
                                 *
                                 * > Note: This is not part of the spec! Native tracks will do
                                 *         this internally without an event.
                                 *
                                 * @event AudioTrack#enabledchange
                                 * @type {EventTarget~Event}
                                 */ this.trigger("enabledchange"));
                        }
                    }), settings.enabled && (_this.enabled = settings.enabled), _this.loaded_ = !0, _this);
                }
                return (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(AudioTrack, _Track), AudioTrack;
            }(Track), VideoTrack = /*#__PURE__*/ function(_Track) {
                /**
                 * Create an instance of this class.
                 *
                 * @param {Object} [options={}]
                 *        Object of option names and values
                 *
                 * @param {string} [options.kind='']
                 *        A valid {@link VideoTrack~Kind}
                 *
                 * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
                 *        A unique id for this AudioTrack.
                 *
                 * @param {string} [options.label='']
                 *        The menu label for this track.
                 *
                 * @param {string} [options.language='']
                 *        A valid two character language code.
                 *
                 * @param {boolean} [options.selected]
                 *        If this track is the one that is currently playing.
                 */ function VideoTrack(options) {
                    void 0 === options && (options = {});
                    var _this, settings = mergeOptions$3(options, {
                        kind: VideoTrackKind[options.kind] || ""
                    });
                    _this = _Track.call(this, settings) || this;
                    var selected = !1;
                    return(/**
                     * @memberof VideoTrack
                     * @member {boolean} selected
                     *         If this `VideoTrack` is selected or not. When setting this will
                     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.
                     * @instance
                     *
                     * @fires VideoTrack#selectedchange
                     */ Object.defineProperty((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), "selected", {
                        get: function() {
                            return selected;
                        },
                        set: function(newSelected) {
                            // an invalid or unchanged value
                            "boolean" == typeof newSelected && newSelected !== selected && (selected = newSelected, /**
                                 * An event that fires when selected changes on this track. This allows
                                 * the VideoTrackList that holds this track to act accordingly.
                                 *
                                 * > Note: This is not part of the spec! Native tracks will do
                                 *         this internally without an event.
                                 *
                                 * @event VideoTrack#selectedchange
                                 * @type {EventTarget~Event}
                                 */ this.trigger("selectedchange"));
                        }
                    }), settings.selected && (_this.selected = settings.selected), _this);
                }
                return (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(VideoTrack, _Track), VideoTrack;
            }(Track), HTMLTrackElement = /*#__PURE__*/ function(_EventTarget) {
                /**
                 * Create an instance of this class.
                 *
                 * @param {Object} options={}
                 *        Object of option names and values
                 *
                 * @param {Tech} options.tech
                 *        A reference to the tech that owns this HTMLTrackElement.
                 *
                 * @param {TextTrack~Kind} [options.kind='subtitles']
                 *        A valid text track kind.
                 *
                 * @param {TextTrack~Mode} [options.mode='disabled']
                 *        A valid text track mode.
                 *
                 * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
                 *        A unique id for this TextTrack.
                 *
                 * @param {string} [options.label='']
                 *        The menu label for this track.
                 *
                 * @param {string} [options.language='']
                 *        A valid two character language code.
                 *
                 * @param {string} [options.srclang='']
                 *        A valid two character language code. An alternative, but deprioritized
                 *        version of `options.language`
                 *
                 * @param {string} [options.src]
                 *        A url to TextTrack cues.
                 *
                 * @param {boolean} [options.default]
                 *        If this track should default to on or off.
                 */ function HTMLTrackElement(options) {
                    void 0 === options && (options = {}), _this = _EventTarget.call(this) || this;
                    var _this, readyState, track = new TextTrack(options);
                    return _this.kind = track.kind, _this.src = track.src, _this.srclang = track.language, _this.label = track.label, _this.default = track.default, Object.defineProperties((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), {
                        /**
                             * @memberof HTMLTrackElement
                             * @member {HTMLTrackElement~ReadyState} readyState
                             *         The current ready state of the track element.
                             * @instance
                             */ readyState: {
                            get: function() {
                                return readyState;
                            }
                        },
                        /**
                             * @memberof HTMLTrackElement
                             * @member {TextTrack} track
                             *         The underlying TextTrack object.
                             * @instance
                             *
                             */ track: {
                            get: function() {
                                return track;
                            }
                        }
                    }), readyState = 0, /**
                     * @listens TextTrack#loadeddata
                     * @fires HTMLTrackElement#load
                     */ track.addEventListener("loadeddata", function() {
                        readyState = 2, _this.trigger({
                            type: "load",
                            target: (0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this)
                        });
                    }), _this;
                }
                return (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(HTMLTrackElement, _EventTarget), HTMLTrackElement;
            }(EventTarget$2);
            HTMLTrackElement.prototype.allowedEvents_ = {
                load: "load"
            }, HTMLTrackElement.NONE = 0, HTMLTrackElement.LOADING = 1, HTMLTrackElement.LOADED = 2, HTMLTrackElement.ERROR = 3;
            /*
             * This file contains all track properties that are used in
             * player.js, tech.js, html5.js and possibly other techs in the future.
             */ var NORMAL = {
                audio: {
                    ListClass: AudioTrackList,
                    TrackClass: AudioTrack,
                    capitalName: "Audio"
                },
                video: {
                    ListClass: VideoTrackList,
                    TrackClass: VideoTrack,
                    capitalName: "Video"
                },
                text: {
                    ListClass: TextTrackList,
                    TrackClass: TextTrack,
                    capitalName: "Text"
                }
            };
            Object.keys(NORMAL).forEach(function(type) {
                NORMAL[type].getterName = type + "Tracks", NORMAL[type].privateName = type + "Tracks_";
            });
            var REMOTE = {
                remoteText: {
                    ListClass: TextTrackList,
                    TrackClass: TextTrack,
                    capitalName: "RemoteText",
                    getterName: "remoteTextTracks",
                    privateName: "remoteTextTracks_"
                },
                remoteTextEl: {
                    ListClass: HtmlTrackElementList,
                    TrackClass: HTMLTrackElement,
                    capitalName: "RemoteTextTrackEls",
                    getterName: "remoteTextTrackEls",
                    privateName: "remoteTextTrackEls_"
                }
            }, ALL = (0, _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_15__ /* ["default"] */ .Z)({}, NORMAL, REMOTE);
            REMOTE.names = Object.keys(REMOTE), NORMAL.names = Object.keys(NORMAL), ALL.names = [].concat(REMOTE.names).concat(NORMAL.names);
            /**
             * This is the base class for media playback technology controllers, such as
             * {@link HTML5}
             *
             * @extends Component
             */ var Tech = /*#__PURE__*/ function(_Component) {
                /**
                 * Create an instance of this Tech.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 *
                 * @param {Component~ReadyCallback} ready
                 *        Callback function to call when the `HTML5` Tech is ready.
                 */ function Tech(options, ready) {
                    var _this;
                    return void 0 === options && (options = {}), void 0 === ready && (ready = function() {}), // we don't want the tech to report user activity automatically.
                    // This is done manually in addControlsListeners
                    options.reportTouchActivity = !1, (_this = _Component.call(this, null, options, ready) || this).onDurationChange_ = function(e) {
                        return _this.onDurationChange(e);
                    }, _this.trackProgress_ = function(e) {
                        return _this.trackProgress(e);
                    }, _this.trackCurrentTime_ = function(e) {
                        return _this.trackCurrentTime(e);
                    }, _this.stopTrackingCurrentTime_ = function(e) {
                        return _this.stopTrackingCurrentTime(e);
                    }, _this.disposeSourceHandler_ = function(e) {
                        return _this.disposeSourceHandler(e);
                    }, // implement a very limited played()
                    _this.hasStarted_ = !1, _this.on("playing", function() {
                        this.hasStarted_ = !0;
                    }), _this.on("loadstart", function() {
                        this.hasStarted_ = !1;
                    }), ALL.names.forEach(function(name) {
                        var props = ALL[name];
                        options && options[props.getterName] && (_this[props.privateName] = options[props.getterName]);
                    }), _this.featuresProgressEvents || _this.manualProgressOn(), _this.featuresTimeupdateEvents || _this.manualTimeUpdatesOn(), [
                        "Text",
                        "Audio",
                        "Video"
                    ].forEach(function(track) {
                        !1 === options["native" + track + "Tracks"] && (_this["featuresNative" + track + "Tracks"] = !1);
                    }), !1 === options.nativeCaptions || !1 === options.nativeTextTracks ? _this.featuresNativeTextTracks = !1 : (!0 === options.nativeCaptions || !0 === options.nativeTextTracks) && (_this.featuresNativeTextTracks = !0), _this.featuresNativeTextTracks || _this.emulateTextTracks(), _this.preloadTextTracks = !1 !== options.preloadTextTracks, _this.autoRemoteTextTracks_ = new ALL.text.ListClass(), _this.initTrackListeners(), options.nativeControlsForTouch || _this.emitTapEvents(), _this.constructor && (_this.name_ = _this.constructor.name || "Unknown Tech"), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(Tech, _Component);
                /**
                 * A special function to trigger source set in a way that will allow player
                 * to re-trigger if the player or tech are not ready yet.
                 *
                 * @fires Tech#sourceset
                 * @param {string} src The source string at the time of the source changing.
                 */ var _proto = Tech.prototype;
                return _proto.triggerSourceset = function(src) {
                    var _this2 = this;
                    this.isReady_ || // on initial ready we have to trigger source set
                    // 1ms after ready so that player can watch for it.
                    this.one("ready", function() {
                        return _this2.setTimeout(function() {
                            return _this2.triggerSourceset(src);
                        }, 1);
                    }), /**
                     * Fired when the source is set on the tech causing the media element
                     * to reload.
                     *
                     * @see {@link Player#event:sourceset}
                     * @event Tech#sourceset
                     * @type {EventTarget~Event}
                     */ this.trigger({
                        src: src,
                        type: "sourceset"
                    });
                }, /* Fallbacks for unsupported event types
  ================================================================================ */ /**
                 * Polyfill the `progress` event for browsers that don't support it natively.
                 *
                 * @see {@link Tech#trackProgress}
                 */ _proto.manualProgressOn = function() {
                    this.on("durationchange", this.onDurationChange_), this.manualProgress = !0, this.one("ready", this.trackProgress_);
                }, /**
                 * Turn off the polyfill for `progress` events that was created in
                 * {@link Tech#manualProgressOn}
                 */ _proto.manualProgressOff = function() {
                    this.manualProgress = !1, this.stopTrackingProgress(), this.off("durationchange", this.onDurationChange_);
                }, /**
                 * This is used to trigger a `progress` event when the buffered percent changes. It
                 * sets an interval function that will be called every 500 milliseconds to check if the
                 * buffer end percent has changed.
                 *
                 * > This function is called by {@link Tech#manualProgressOn}
                 *
                 * @param {EventTarget~Event} event
                 *        The `ready` event that caused this to run.
                 *
                 * @listens Tech#ready
                 * @fires Tech#progress
                 */ _proto.trackProgress = function(event) {
                    this.stopTrackingProgress(), this.progressInterval = this.setInterval(bind(this, function() {
                        // Don't trigger unless buffered amount is greater than last time
                        var numBufferedPercent = this.bufferedPercent();
                        this.bufferedPercent_ !== numBufferedPercent && /**
                                 * See {@link Player#progress}
                                 *
                                 * @event Tech#progress
                                 * @type {EventTarget~Event}
                                 */ this.trigger("progress"), this.bufferedPercent_ = numBufferedPercent, 1 === numBufferedPercent && this.stopTrackingProgress();
                    }), 500);
                }, /**
                 * Update our internal duration on a `durationchange` event by calling
                 * {@link Tech#duration}.
                 *
                 * @param {EventTarget~Event} event
                 *        The `durationchange` event that caused this to run.
                 *
                 * @listens Tech#durationchange
                 */ _proto.onDurationChange = function(event) {
                    this.duration_ = this.duration();
                }, /**
                 * Get and create a `TimeRange` object for buffering.
                 *
                 * @return {TimeRange}
                 *         The time range object that was created.
                 */ _proto.buffered = function() {
                    return createTimeRanges(0, 0);
                }, /**
                 * Get the percentage of the current video that is currently buffered.
                 *
                 * @return {number}
                 *         A number from 0 to 1 that represents the decimal percentage of the
                 *         video that is buffered.
                 *
                 */ _proto.bufferedPercent = function() {
                    return bufferedPercent(this.buffered(), this.duration_);
                }, /**
                 * Turn off the polyfill for `progress` events that was created in
                 * {@link Tech#manualProgressOn}
                 * Stop manually tracking progress events by clearing the interval that was set in
                 * {@link Tech#trackProgress}.
                 */ _proto.stopTrackingProgress = function() {
                    this.clearInterval(this.progressInterval);
                }, /**
                 * Polyfill the `timeupdate` event for browsers that don't support it.
                 *
                 * @see {@link Tech#trackCurrentTime}
                 */ _proto.manualTimeUpdatesOn = function() {
                    this.manualTimeUpdates = !0, this.on("play", this.trackCurrentTime_), this.on("pause", this.stopTrackingCurrentTime_);
                }, /**
                 * Turn off the polyfill for `timeupdate` events that was created in
                 * {@link Tech#manualTimeUpdatesOn}
                 */ _proto.manualTimeUpdatesOff = function() {
                    this.manualTimeUpdates = !1, this.stopTrackingCurrentTime(), this.off("play", this.trackCurrentTime_), this.off("pause", this.stopTrackingCurrentTime_);
                }, /**
                 * Sets up an interval function to track current time and trigger `timeupdate` every
                 * 250 milliseconds.
                 *
                 * @listens Tech#play
                 * @triggers Tech#timeupdate
                 */ _proto.trackCurrentTime = function() {
                    this.currentTimeInterval && this.stopTrackingCurrentTime(), this.currentTimeInterval = this.setInterval(function() {
                        /**
                         * Triggered at an interval of 250ms to indicated that time is passing in the video.
                         *
                         * @event Tech#timeupdate
                         * @type {EventTarget~Event}
                         */ this.trigger({
                            type: "timeupdate",
                            target: this,
                            manuallyTriggered: !0
                        }); // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
                    }, 250);
                }, /**
                 * Stop the interval function created in {@link Tech#trackCurrentTime} so that the
                 * `timeupdate` event is no longer triggered.
                 *
                 * @listens {Tech#pause}
                 */ _proto.stopTrackingCurrentTime = function() {
                    this.clearInterval(this.currentTimeInterval), // the progress bar won't make it all the way to the end
                    this.trigger({
                        type: "timeupdate",
                        target: this,
                        manuallyTriggered: !0
                    });
                }, /**
                 * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},
                 * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.
                 *
                 * @fires Component#dispose
                 */ _proto.dispose = function() {
                    // clear out all tracks because we can't reuse them between techs
                    this.clearTracks(NORMAL.names), this.manualProgress && this.manualProgressOff(), this.manualTimeUpdates && this.manualTimeUpdatesOff(), _Component.prototype.dispose.call(this);
                }, /**
                 * Clear out a single `TrackList` or an array of `TrackLists` given their names.
                 *
                 * > Note: Techs without source handlers should call this between sources for `video`
                 *         & `audio` tracks. You don't want to use them between tracks!
                 *
                 * @param {string[]|string} types
                 *        TrackList names to clear, valid names are `video`, `audio`, and
                 *        `text`.
                 */ _proto.clearTracks = function(types) {
                    var _this3 = this;
                    (types = [].concat(types)).forEach(function(type) {
                        for(var list = _this3[type + "Tracks"]() || [], i = list.length; i--;){
                            var track = list[i];
                            "text" === type && _this3.removeRemoteTextTrack(track), list.removeTrack(track);
                        }
                    });
                }, /**
                 * Remove any TextTracks added via addRemoteTextTrack that are
                 * flagged for automatic garbage collection
                 */ _proto.cleanupAutoTextTracks = function() {
                    for(var list = this.autoRemoteTextTracks_ || [], i = list.length; i--;){
                        var track = list[i];
                        this.removeRemoteTextTrack(track);
                    }
                }, /**
                 * Reset the tech, which will removes all sources and reset the internal readyState.
                 *
                 * @abstract
                 */ _proto.reset = function() {}, /**
                 * Get the value of `crossOrigin` from the tech.
                 *
                 * @abstract
                 *
                 * @see {Html5#crossOrigin}
                 */ _proto.crossOrigin = function() {}, /**
                 * Set the value of `crossOrigin` on the tech.
                 *
                 * @abstract
                 *
                 * @param {string} crossOrigin the crossOrigin value
                 * @see {Html5#setCrossOrigin}
                 */ _proto.setCrossOrigin = function() {}, /**
                 * Get or set an error on the Tech.
                 *
                 * @param {MediaError} [err]
                 *        Error to set on the Tech
                 *
                 * @return {MediaError|null}
                 *         The current error object on the tech, or null if there isn't one.
                 */ _proto.error = function(err) {
                    return void 0 !== err && (this.error_ = new MediaError(err), this.trigger("error")), this.error_;
                }, /**
                 * Returns the `TimeRange`s that have been played through for the current source.
                 *
                 * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.
                 *         It only checks whether the source has played at all or not.
                 *
                 * @return {TimeRange}
                 *         - A single time range if this video has played
                 *         - An empty set of ranges if not.
                 */ _proto.played = function() {
                    return this.hasStarted_ ? createTimeRanges(0, 0) : createTimeRanges();
                }, /**
                 * Start playback
                 *
                 * @abstract
                 *
                 * @see {Html5#play}
                 */ _proto.play = function() {}, /**
                 * Set whether we are scrubbing or not
                 *
                 * @abstract
                 *
                 * @see {Html5#setScrubbing}
                 */ _proto.setScrubbing = function() {}, /**
                 * Get whether we are scrubbing or not
                 *
                 * @abstract
                 *
                 * @see {Html5#scrubbing}
                 */ _proto.scrubbing = function() {}, /**
                 * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was
                 * previously called.
                 *
                 * @fires Tech#timeupdate
                 */ _proto.setCurrentTime = function() {
                    // improve the accuracy of manual timeupdates
                    this.manualTimeUpdates && /**
                         * A manual `timeupdate` event.
                         *
                         * @event Tech#timeupdate
                         * @type {EventTarget~Event}
                         */ this.trigger({
                        type: "timeupdate",
                        target: this,
                        manuallyTriggered: !0
                    });
                }, /**
                 * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and
                 * {@link TextTrackList} events.
                 *
                 * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.
                 *
                 * @fires Tech#audiotrackchange
                 * @fires Tech#videotrackchange
                 * @fires Tech#texttrackchange
                 */ _proto.initTrackListeners = function() {
                    var _this4 = this;
                    /**
                     * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}
                     *
                     * @event Tech#audiotrackchange
                     * @type {EventTarget~Event}
                     */ /**
                     * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}
                     *
                     * @event Tech#videotrackchange
                     * @type {EventTarget~Event}
                     */ /**
                     * Triggered when tracks are added or removed on the Tech {@link TextTrackList}
                     *
                     * @event Tech#texttrackchange
                     * @type {EventTarget~Event}
                     */ NORMAL.names.forEach(function(name) {
                        var props = NORMAL[name], trackListChanges = function() {
                            _this4.trigger(name + "trackchange");
                        }, tracks = _this4[props.getterName]();
                        tracks.addEventListener("removetrack", trackListChanges), tracks.addEventListener("addtrack", trackListChanges), _this4.on("dispose", function() {
                            tracks.removeEventListener("removetrack", trackListChanges), tracks.removeEventListener("addtrack", trackListChanges);
                        });
                    });
                }, /**
                 * Emulate TextTracks using vtt.js if necessary
                 *
                 * @fires Tech#vttjsloaded
                 * @fires Tech#vttjserror
                 */ _proto.addWebVttScript_ = function() {
                    var _this5 = this;
                    if (!global_window__WEBPACK_IMPORTED_MODULE_0___default().WebVTT) {
                        // signals that the Tech is ready at which point Tech.el_ is part of the DOM
                        // before inserting the WebVTT script
                        if (global_document__WEBPACK_IMPORTED_MODULE_1___default().body.contains(this.el())) {
                            // load via require if available and vtt.js script location was not passed in
                            // as an option. novtt builds will turn the above require call into an empty object
                            // which will cause this if check to always fail.
                            if (!this.options_["vtt.js"] && isPlain(videojs_vtt_js__WEBPACK_IMPORTED_MODULE_5___default()) && Object.keys(videojs_vtt_js__WEBPACK_IMPORTED_MODULE_5___default()).length > 0) {
                                this.trigger("vttjsloaded");
                                return;
                            } // load vtt.js via the script location option or the cdn of no location was
                            // passed in
                            var script = global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("script");
                            script.src = this.options_["vtt.js"] || "https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js", script.onload = function() {
                                /**
                             * Fired when vtt.js is loaded.
                             *
                             * @event Tech#vttjsloaded
                             * @type {EventTarget~Event}
                             */ _this5.trigger("vttjsloaded");
                            }, script.onerror = function() {
                                /**
                             * Fired when vtt.js was not loaded due to an error
                             *
                             * @event Tech#vttjsloaded
                             * @type {EventTarget~Event}
                             */ _this5.trigger("vttjserror");
                            }, this.on("dispose", function() {
                                script.onload = null, script.onerror = null;
                            }), // we don't overwrite the injected window.WebVTT if it loads right away
                            global_window__WEBPACK_IMPORTED_MODULE_0___default().WebVTT = !0, this.el().parentNode.appendChild(script);
                        } else this.ready(this.addWebVttScript_);
                    } // Initially, Tech.el_ is a child of a dummy-div wait until the Component system
                }, /**
                 * Emulate texttracks
                 *
                 */ _proto.emulateTextTracks = function() {
                    var _this6 = this, tracks = this.textTracks(), remoteTracks = this.remoteTextTracks(), handleAddTrack = function(e) {
                        return tracks.addTrack(e.track);
                    }, handleRemoveTrack = function(e) {
                        return tracks.removeTrack(e.track);
                    };
                    remoteTracks.on("addtrack", handleAddTrack), remoteTracks.on("removetrack", handleRemoveTrack), this.addWebVttScript_();
                    var updateDisplay = function() {
                        return _this6.trigger("texttrackchange");
                    }, textTracksChanges = function() {
                        updateDisplay();
                        for(var i = 0; i < tracks.length; i++){
                            var track = tracks[i];
                            track.removeEventListener("cuechange", updateDisplay), "showing" === track.mode && track.addEventListener("cuechange", updateDisplay);
                        }
                    };
                    textTracksChanges(), tracks.addEventListener("change", textTracksChanges), tracks.addEventListener("addtrack", textTracksChanges), tracks.addEventListener("removetrack", textTracksChanges), this.on("dispose", function() {
                        remoteTracks.off("addtrack", handleAddTrack), remoteTracks.off("removetrack", handleRemoveTrack), tracks.removeEventListener("change", textTracksChanges), tracks.removeEventListener("addtrack", textTracksChanges), tracks.removeEventListener("removetrack", textTracksChanges);
                        for(var i = 0; i < tracks.length; i++)tracks[i].removeEventListener("cuechange", updateDisplay);
                    });
                }, /**
                 * Create and returns a remote {@link TextTrack} object.
                 *
                 * @param {string} kind
                 *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
                 *
                 * @param {string} [label]
                 *        Label to identify the text track
                 *
                 * @param {string} [language]
                 *        Two letter language abbreviation
                 *
                 * @return {TextTrack}
                 *         The TextTrack that gets created.
                 */ _proto.addTextTrack = function(kind, label, language) {
                    var options, tracks, track;
                    if (!kind) throw Error("TextTrack kind is required but was not provided");
                    return void 0 === options && (options = {}), tracks = this.textTracks(), options.kind = kind, label && (options.label = label), language && (options.language = language), options.tech = this, track = new ALL.text.TrackClass(options), tracks.addTrack(track), track;
                }, /**
                 * Create an emulated TextTrack for use by addRemoteTextTrack
                 *
                 * This is intended to be overridden by classes that inherit from
                 * Tech in order to create native or custom TextTracks.
                 *
                 * @param {Object} options
                 *        The object should contain the options to initialize the TextTrack with.
                 *
                 * @param {string} [options.kind]
                 *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
                 *
                 * @param {string} [options.label].
                 *        Label to identify the text track
                 *
                 * @param {string} [options.language]
                 *        Two letter language abbreviation.
                 *
                 * @return {HTMLTrackElement}
                 *         The track element that gets created.
                 */ _proto.createRemoteTextTrack = function(options) {
                    var track = mergeOptions$3(options, {
                        tech: this
                    });
                    return new REMOTE.remoteTextEl.TrackClass(track);
                }, /**
                 * Creates a remote text track object and returns an html track element.
                 *
                 * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.
                 *
                 * @param {Object} options
                 *        See {@link Tech#createRemoteTextTrack} for more detailed properties.
                 *
                 * @param {boolean} [manualCleanup=true]
                 *        - When false: the TextTrack will be automatically removed from the video
                 *          element whenever the source changes
                 *        - When True: The TextTrack will have to be cleaned up manually
                 *
                 * @return {HTMLTrackElement}
                 *         An Html Track Element.
                 *
                 * @deprecated The default functionality for this function will be equivalent
                 *             to "manualCleanup=false" in the future. The manualCleanup parameter will
                 *             also be removed.
                 */ _proto.addRemoteTextTrack = function(options, manualCleanup) {
                    var _this7 = this;
                    void 0 === options && (options = {});
                    var htmlTrackElement = this.createRemoteTextTrack(options);
                    return !0 !== manualCleanup && !1 !== manualCleanup && (// deprecation warning
                    log$1.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js'), manualCleanup = !0), this.remoteTextTrackEls().addTrackElement_(htmlTrackElement), this.remoteTextTracks().addTrack(htmlTrackElement.track), !0 !== manualCleanup && // create the TextTrackList if it doesn't exist
                    this.ready(function() {
                        return _this7.autoRemoteTextTracks_.addTrack(htmlTrackElement.track);
                    }), htmlTrackElement;
                }, /**
                 * Remove a remote text track from the remote `TextTrackList`.
                 *
                 * @param {TextTrack} track
                 *        `TextTrack` to remove from the `TextTrackList`
                 */ _proto.removeRemoteTextTrack = function(track) {
                    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track); // remove HTMLTrackElement and TextTrack from remote list
                    this.remoteTextTrackEls().removeTrackElement_(trackElement), this.remoteTextTracks().removeTrack(track), this.autoRemoteTextTracks_.removeTrack(track);
                }, /**
                 * Gets available media playback quality metrics as specified by the W3C's Media
                 * Playback Quality API.
                 *
                 * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
                 *
                 * @return {Object}
                 *         An object with supported media playback quality metrics
                 *
                 * @abstract
                 */ _proto.getVideoPlaybackQuality = function() {
                    return {};
                }, /**
                 * Attempt to create a floating video window always on top of other windows
                 * so that users may continue consuming media while they interact with other
                 * content sites, or applications on their device.
                 *
                 * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
                 *
                 * @return {Promise|undefined}
                 *         A promise with a Picture-in-Picture window if the browser supports
                 *         Promises (or one was passed in as an option). It returns undefined
                 *         otherwise.
                 *
                 * @abstract
                 */ _proto.requestPictureInPicture = function() {
                    var PromiseClass = this.options_.Promise || global_window__WEBPACK_IMPORTED_MODULE_0___default().Promise;
                    if (PromiseClass) return PromiseClass.reject();
                }, /**
                 * A method to check for the value of the 'disablePictureInPicture' <video> property.
                 * Defaults to true, as it should be considered disabled if the tech does not support pip
                 *
                 * @abstract
                 */ _proto.disablePictureInPicture = function() {
                    return !0;
                }, /**
                 * A method to set or unset the 'disablePictureInPicture' <video> property.
                 *
                 * @abstract
                 */ _proto.setDisablePictureInPicture = function() {}, /**
                 * A method to set a poster from a `Tech`.
                 *
                 * @abstract
                 */ _proto.setPoster = function() {}, /**
                 * A method to check for the presence of the 'playsinline' <video> attribute.
                 *
                 * @abstract
                 */ _proto.playsinline = function() {}, /**
                 * A method to set or unset the 'playsinline' <video> attribute.
                 *
                 * @abstract
                 */ _proto.setPlaysinline = function() {}, /**
                 * Attempt to force override of native audio tracks.
                 *
                 * @param {boolean} override - If set to true native audio will be overridden,
                 * otherwise native audio will potentially be used.
                 *
                 * @abstract
                 */ _proto.overrideNativeAudioTracks = function() {}, /**
                 * Attempt to force override of native video tracks.
                 *
                 * @param {boolean} override - If set to true native video will be overridden,
                 * otherwise native video will potentially be used.
                 *
                 * @abstract
                 */ _proto.overrideNativeVideoTracks = function() {}, /*
                 * Check if the tech can support the given mime-type.
                 *
                 * The base tech does not support any type, but source handlers might
                 * overwrite this.
                 *
                 * @param  {string} type
                 *         The mimetype to check for support
                 *
                 * @return {string}
                 *         'probably', 'maybe', or empty string
                 *
                 * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}
                 *
                 * @abstract
                 */ _proto.canPlayType = function() {
                    return "";
                }, /**
                 * Check if the type is supported by this tech.
                 *
                 * The base tech does not support any type, but source handlers might
                 * overwrite this.
                 *
                 * @param {string} type
                 *        The media type to check
                 * @return {string} Returns the native video element's response
                 */ Tech.canPlayType = function() {
                    return "";
                }, /**
                 * Check if the tech can support the given source
                 *
                 * @param {Object} srcObj
                 *        The source object
                 * @param {Object} options
                 *        The options passed to the tech
                 * @return {string} 'probably', 'maybe', or '' (empty string)
                 */ Tech.canPlaySource = function(srcObj, options) {
                    return Tech.canPlayType(srcObj.type);
                }, /*
                 * Return whether the argument is a Tech or not.
                 * Can be passed either a Class like `Html5` or a instance like `player.tech_`
                 *
                 * @param {Object} component
                 *        The item to check
                 *
                 * @return {boolean}
                 *         Whether it is a tech or not
                 *         - True if it is a tech
                 *         - False if it is not
                 */ Tech.isTech = function(component) {
                    return component.prototype instanceof Tech || component instanceof Tech || component === Tech;
                }, /**
                 * Registers a `Tech` into a shared list for videojs.
                 *
                 * @param {string} name
                 *        Name of the `Tech` to register.
                 *
                 * @param {Object} tech
                 *        The `Tech` class to register.
                 */ Tech.registerTech = function(name, tech) {
                    if (Tech.techs_ || (Tech.techs_ = {}), !Tech.isTech(tech)) throw Error("Tech " + name + " must be a Tech");
                    if (!Tech.canPlayType) throw Error("Techs must have a static canPlayType method on them");
                    if (!Tech.canPlaySource) throw Error("Techs must have a static canPlaySource method on them");
                    return name = toTitleCase$1(name), Tech.techs_[name] = tech, Tech.techs_[toLowerCase(name)] = tech, "Tech" !== name && // camel case the techName for use in techOrder
                    Tech.defaultTechOrder_.push(name), tech;
                }, /**
                 * Get a `Tech` from the shared list by name.
                 *
                 * @param {string} name
                 *        `camelCase` or `TitleCase` name of the Tech to get
                 *
                 * @return {Tech|undefined}
                 *         The `Tech` or undefined if there was no tech with the name requested.
                 */ Tech.getTech = function(name) {
                    return name ? Tech.techs_ && Tech.techs_[name] ? Tech.techs_[name] : (name = toTitleCase$1(name), global_window__WEBPACK_IMPORTED_MODULE_0___default() && global_window__WEBPACK_IMPORTED_MODULE_0___default().videojs && global_window__WEBPACK_IMPORTED_MODULE_0___default().videojs[name]) ? (log$1.warn("The " + name + " tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)"), global_window__WEBPACK_IMPORTED_MODULE_0___default().videojs[name]) : void 0 : void 0;
                }, Tech;
            }(Component$1);
            /**
             * Get the {@link VideoTrackList}
             *
             * @returns {VideoTrackList}
             * @method Tech.prototype.videoTracks
             */ /**
             * Get the {@link AudioTrackList}
             *
             * @returns {AudioTrackList}
             * @method Tech.prototype.audioTracks
             */ /**
             * Get the {@link TextTrackList}
             *
             * @returns {TextTrackList}
             * @method Tech.prototype.textTracks
             */ /**
             * Get the remote element {@link TextTrackList}
             *
             * @returns {TextTrackList}
             * @method Tech.prototype.remoteTextTracks
             */ /**
             * Get the remote element {@link HtmlTrackElementList}
             *
             * @returns {HtmlTrackElementList}
             * @method Tech.prototype.remoteTextTrackEls
             */ ALL.names.forEach(function(name) {
                var props = ALL[name];
                Tech.prototype[props.getterName] = function() {
                    return this[props.privateName] = this[props.privateName] || new props.ListClass(), this[props.privateName];
                };
            }), /**
             * List of associated text tracks
             *
             * @type {TextTrackList}
             * @private
             * @property Tech#textTracks_
             */ /**
             * List of associated audio tracks.
             *
             * @type {AudioTrackList}
             * @private
             * @property Tech#audioTracks_
             */ /**
             * List of associated video tracks.
             *
             * @type {VideoTrackList}
             * @private
             * @property Tech#videoTracks_
             */ /**
             * Boolean indicating whether the `Tech` supports volume control.
             *
             * @type {boolean}
             * @default
             */ Tech.prototype.featuresVolumeControl = !0, /**
             * Boolean indicating whether the `Tech` supports muting volume.
             *
             * @type {bolean}
             * @default
             */ Tech.prototype.featuresMuteControl = !0, /**
             * Boolean indicating whether the `Tech` supports fullscreen resize control.
             * Resizing plugins using request fullscreen reloads the plugin
             *
             * @type {boolean}
             * @default
             */ Tech.prototype.featuresFullscreenResize = !1, /**
             * Boolean indicating whether the `Tech` supports changing the speed at which the video
             * plays. Examples:
             *   - Set player to play 2x (twice) as fast
             *   - Set player to play 0.5x (half) as fast
             *
             * @type {boolean}
             * @default
             */ Tech.prototype.featuresPlaybackRate = !1, /**
             * Boolean indicating whether the `Tech` supports the `progress` event. This is currently
             * not triggered by video-js-swf. This will be used to determine if
             * {@link Tech#manualProgressOn} should be called.
             *
             * @type {boolean}
             * @default
             */ Tech.prototype.featuresProgressEvents = !1, /**
             * Boolean indicating whether the `Tech` supports the `sourceset` event.
             *
             * A tech should set this to `true` and then use {@link Tech#triggerSourceset}
             * to trigger a {@link Tech#event:sourceset} at the earliest time after getting
             * a new source.
             *
             * @type {boolean}
             * @default
             */ Tech.prototype.featuresSourceset = !1, /**
             * Boolean indicating whether the `Tech` supports the `timeupdate` event. This is currently
             * not triggered by video-js-swf. This will be used to determine if
             * {@link Tech#manualTimeUpdates} should be called.
             *
             * @type {boolean}
             * @default
             */ Tech.prototype.featuresTimeupdateEvents = !1, /**
             * Boolean indicating whether the `Tech` supports the native `TextTrack`s.
             * This will help us integrate with native `TextTrack`s if the browser supports them.
             *
             * @type {boolean}
             * @default
             */ Tech.prototype.featuresNativeTextTracks = !1, /**
             * A functional mixin for techs that want to use the Source Handler pattern.
             * Source handlers are scripts for handling specific formats.
             * The source handler pattern is used for adaptive formats (HLS, DASH) that
             * manually load video data and feed it into a Source Buffer (Media Source Extensions)
             * Example: `Tech.withSourceHandlers.call(MyTech);`
             *
             * @param {Tech} _Tech
             *        The tech to add source handler functions to.
             *
             * @mixes Tech~SourceHandlerAdditions
             */ Tech.withSourceHandlers = function(_Tech) {
                /**
                 * Register a source handler
                 *
                 * @param {Function} handler
                 *        The source handler class
                 *
                 * @param {number} [index]
                 *        Register it at the following index
                 */ _Tech.registerSourceHandler = function(handler, index) {
                    var handlers = _Tech.sourceHandlers;
                    handlers || (handlers = _Tech.sourceHandlers = []), void 0 === index && // add to the end of the list
                    (index = handlers.length), handlers.splice(index, 0, handler);
                }, /**
                 * Check if the tech can support the given type. Also checks the
                 * Techs sourceHandlers.
                 *
                 * @param {string} type
                 *         The mimetype to check.
                 *
                 * @return {string}
                 *         'probably', 'maybe', or '' (empty string)
                 */ _Tech.canPlayType = function(type) {
                    for(var can, handlers = _Tech.sourceHandlers || [], i = 0; i < handlers.length; i++)if (can = handlers[i].canPlayType(type)) return can;
                    return "";
                }, /**
                 * Returns the first source handler that supports the source.
                 *
                 * TODO: Answer question: should 'probably' be prioritized over 'maybe'
                 *
                 * @param {Tech~SourceObject} source
                 *        The source object
                 *
                 * @param {Object} options
                 *        The options passed to the tech
                 *
                 * @return {SourceHandler|null}
                 *          The first source handler that supports the source or null if
                 *          no SourceHandler supports the source
                 */ _Tech.selectSourceHandler = function(source, options) {
                    for(var handlers = _Tech.sourceHandlers || [], i = 0; i < handlers.length; i++)if (handlers[i].canHandleSource(source, options)) return handlers[i];
                    return null;
                }, /**
                 * Check if the tech can support the given source.
                 *
                 * @param {Tech~SourceObject} srcObj
                 *        The source object
                 *
                 * @param {Object} options
                 *        The options passed to the tech
                 *
                 * @return {string}
                 *         'probably', 'maybe', or '' (empty string)
                 */ _Tech.canPlaySource = function(srcObj, options) {
                    var sh = _Tech.selectSourceHandler(srcObj, options);
                    return sh ? sh.canHandleSource(srcObj, options) : "";
                }, /**
                 * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable
                 * function if it exists, with a fallback to the Techs seekable function.
                 *
                 * @method _Tech.seekable
                 */ /**
                 * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration
                 * function if it exists, otherwise it will fallback to the techs duration function.
                 *
                 * @method _Tech.duration
                 */ [
                    "seekable",
                    "seeking",
                    "duration"
                ].forEach(function(fnName) {
                    var originalFn = this[fnName];
                    "function" == typeof originalFn && (this[fnName] = function() {
                        return this.sourceHandler_ && this.sourceHandler_[fnName] ? this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments) : originalFn.apply(this, arguments);
                    });
                }, _Tech.prototype), /**
                 * Create a function for setting the source using a source object
                 * and source handlers.
                 * Should never be called unless a source handler was found.
                 *
                 * @param {Tech~SourceObject} source
                 *        A source object with src and type keys
                 */ _Tech.prototype.setSource = function(source) {
                    var sh = _Tech.selectSourceHandler(source, this.options_);
                    sh || (_Tech.nativeSourceHandler ? sh = _Tech.nativeSourceHandler : log$1.error("No source handler found for the current source.")), this.disposeSourceHandler(), this.off("dispose", this.disposeSourceHandler_), sh !== _Tech.nativeSourceHandler && (this.currentSource_ = source), this.sourceHandler_ = sh.handleSource(source, this, this.options_), this.one("dispose", this.disposeSourceHandler_);
                }, /**
                 * Clean up any existing SourceHandlers and listeners when the Tech is disposed.
                 *
                 * @listens Tech#dispose
                 */ _Tech.prototype.disposeSourceHandler = function() {
                    this.currentSource_ && (this.clearTracks([
                        "audio",
                        "video"
                    ]), this.currentSource_ = null), this.cleanupAutoTextTracks(), this.sourceHandler_ && (this.sourceHandler_.dispose && this.sourceHandler_.dispose(), this.sourceHandler_ = null);
                };
            }, // Tech that can be registered as a Component.
            Component$1.registerComponent("Tech", Tech), Tech.registerTech("Tech", Tech), /**
             * A list of techs that should be added to techOrder on Players
             *
             * @private
             */ Tech.defaultTechOrder_ = [];
            /**
             * @file middleware.js
             * @module middleware
             */ var middlewares = {}, middlewareInstances = {}, TERMINATOR = {};
            /**
             * Takes the argument given to the player and calls the `call` version of the
             * method on each middleware from left to right.
             *
             * Then, call the passed in method on the tech and return the result unchanged
             * back to the player, through middleware, this time from right to left.
             *
             * @param  {Object[]} middleware
             *         An array of middleware instances.
             *
             * @param  {Tech} tech
             *         The current tech.
             *
             * @param  {string} method
             *         A method name.
             *
             * @param  {Mixed} arg
             *         The value to set on the tech.
             *
             * @return {Mixed}
             *         The return value of the `method` of the `tech`, regardless of the
             *         return values of middlewares.
             */ function mediate(middleware, tech, method, arg) {
                void 0 === arg && (arg = null);
                var callMethod = "call" + toTitleCase$1(method), middlewareValue = middleware.reduce(middlewareIterator(callMethod), arg), terminated = middlewareValue === TERMINATOR, returnValue = terminated ? null : tech[method](middlewareValue);
                return function(mws, method, value, terminated) {
                    for(var i = mws.length - 1; i >= 0; i--){
                        var mw = mws[i];
                        mw[method] && mw[method](terminated, value);
                    }
                }(middleware, method, returnValue, terminated), returnValue;
            }
            /**
             * Enumeration of allowed getters where the keys are method names.
             *
             * @type {Object}
             */ var allowedGetters = {
                buffered: 1,
                currentTime: 1,
                duration: 1,
                muted: 1,
                played: 1,
                paused: 1,
                seekable: 1,
                volume: 1,
                ended: 1
            }, allowedSetters = {
                setCurrentTime: 1,
                setMuted: 1,
                setVolume: 1
            }, allowedMediators = {
                play: 1,
                pause: 1
            };
            function middlewareIterator(method) {
                return function(value, mw) {
                    return(// if the previous middleware terminated, pass along the termination
                    value === TERMINATOR ? TERMINATOR : mw[method] ? mw[method](value) : value);
                };
            }
            /**
             * Mimetypes
             *
             * @see http://hul.harvard.edu/ois/////systems/wax/wax-public-help/mimetypes.htm
             * @typedef Mimetypes~Kind
             * @enum
             */ var MimetypesKind = {
                opus: "video/ogg",
                ogv: "video/ogg",
                mp4: "video/mp4",
                mov: "video/mp4",
                m4v: "video/mp4",
                mkv: "video/x-matroska",
                m4a: "audio/mp4",
                mp3: "audio/mpeg",
                aac: "audio/aac",
                caf: "audio/x-caf",
                flac: "audio/flac",
                oga: "audio/ogg",
                wav: "audio/wav",
                m3u8: "application/x-mpegURL",
                jpg: "image/jpeg",
                jpeg: "image/jpeg",
                gif: "image/gif",
                png: "image/png",
                svg: "image/svg+xml",
                webp: "image/webp"
            }, getMimetype = function(src) {
                return void 0 === src && (src = ""), MimetypesKind[getFileExtension(src).toLowerCase()] || "";
            }, findMimetype = function(player, src) {
                if (!src) return "";
                 // 1. check for the type in the `source` cache
                if (player.cache_.source.src === src && player.cache_.source.type) return player.cache_.source.type;
                 // 2. see if we have this source in our `currentSources` cache
                var matchingSources = player.cache_.sources.filter(function(s) {
                    return s.src === src;
                });
                if (matchingSources.length) return matchingSources[0].type;
                 // 3. look for the src url in source elements and use the type there
                for(var sources = player.$$("source"), i = 0; i < sources.length; i++){
                    var s = sources[i];
                    if (s.type && s.src && s.src === src) return s.type;
                } // 4. finally fallback to our list of mime types based on src url extension
                return getMimetype(src);
            }, filterSource = function filterSource(src) {
                // traverse array
                if (Array.isArray(src)) {
                    var newsrc = [];
                    src.forEach(function(srcobj) {
                        Array.isArray(srcobj = filterSource(srcobj)) ? newsrc = newsrc.concat(srcobj) : isObject(srcobj) && newsrc.push(srcobj);
                    }), src = newsrc;
                } else // convert string into object
                src = "string" == typeof src && src.trim() ? [
                    fixSource({
                        src: src
                    })
                ] : isObject(src) && "string" == typeof src.src && src.src && src.src.trim() ? [
                    fixSource(src)
                ] : [];
                return src;
            };
            /**
             * Checks src mimetype, adding it when possible
             *
             * @param {Tech~SourceObject} src
             *        The src object to check
             * @return {Tech~SourceObject}
             *        src Object with known type
             */ function fixSource(src) {
                if (!src.type) {
                    var mimetype = getMimetype(src.src);
                    mimetype && (src.type = mimetype);
                }
                return src;
            }
            /**
             * The `MediaLoader` is the `Component` that decides which playback technology to load
             * when a player is initialized.
             *
             * @extends Component
             */ var MediaLoader = /*#__PURE__*/ function(_Component) {
                /**
                 * Create an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should attach to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 *
                 * @param {Component~ReadyCallback} [ready]
                 *        The function that is run when this component is ready.
                 */ function MediaLoader(player, options, ready) {
                    // MediaLoader has no element
                    var _this, options_ = mergeOptions$3({
                        createEl: !1
                    }, options);
                    // load the first supported playback technology.
                    if (_this = _Component.call(this, player, options_, ready) || this, options.playerOptions.sources && 0 !== options.playerOptions.sources.length) // Loop through playback technologies (e.g. HTML5) and check for support.
                    // Then load the best source.
                    // A few assumptions here:
                    //   All playback technologies respect preload false.
                    player.src(options.playerOptions.sources);
                    else for(var i = 0, j = options.playerOptions.techOrder; i < j.length; i++){
                        var techName = toTitleCase$1(j[i]), tech = Tech.getTech(techName);
                        if (techName || (tech = Component$1.getComponent(techName)), tech && tech.isSupported()) {
                            player.loadTech_(techName);
                            break;
                        }
                    }
                    return _this;
                }
                return (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(MediaLoader, _Component), MediaLoader;
            }(Component$1);
            Component$1.registerComponent("MediaLoader", MediaLoader);
            /**
             * Component which is clickable or keyboard actionable, but is not a
             * native HTML button.
             *
             * @extends Component
             */ var ClickableComponent = /*#__PURE__*/ function(_Component) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param  {Player} player
                 *         The `Player` that this class should be attached to.
                 *
                 * @param  {Object} [options]
                 *         The key/value store of player options.
                 *
                 * @param  {function} [options.clickHandler]
                 *         The function to call when the button is clicked / activated
                 */ function ClickableComponent(player, options) {
                    var _this;
                    return (_this = _Component.call(this, player, options) || this).handleMouseOver_ = function(e) {
                        return _this.handleMouseOver(e);
                    }, _this.handleMouseOut_ = function(e) {
                        return _this.handleMouseOut(e);
                    }, _this.handleClick_ = function(e) {
                        return _this.handleClick(e);
                    }, _this.handleKeyDown_ = function(e) {
                        return _this.handleKeyDown(e);
                    }, _this.emitTapEvents(), _this.enable(), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(ClickableComponent, _Component);
                /**
                 * Create the `ClickableComponent`s DOM element.
                 *
                 * @param {string} [tag=div]
                 *        The element's node type.
                 *
                 * @param {Object} [props={}]
                 *        An object of properties that should be set on the element.
                 *
                 * @param {Object} [attributes={}]
                 *        An object of attributes that should be set on the element.
                 *
                 * @return {Element}
                 *         The element that gets created.
                 */ var _proto = ClickableComponent.prototype;
                return _proto.createEl = function(tag, props, attributes) {
                    void 0 === tag && (tag = "div"), void 0 === props && (props = {}), void 0 === attributes && (attributes = {}), props = assign({
                        className: this.buildCSSClass(),
                        tabIndex: 0
                    }, props), "button" === tag && log$1.error("Creating a ClickableComponent with an HTML element of " + tag + " is not supported; use a Button instead."), attributes = assign({
                        role: "button"
                    }, attributes), this.tabIndex_ = props.tabIndex;
                    var el = createEl(tag, props, attributes);
                    return el.appendChild(createEl("span", {
                        className: "vjs-icon-placeholder"
                    }, {
                        "aria-hidden": !0
                    })), this.createControlTextEl(el), el;
                }, _proto.dispose = function() {
                    // remove controlTextEl_ on dispose
                    this.controlTextEl_ = null, _Component.prototype.dispose.call(this);
                }, /**
                 * Create a control text element on this `ClickableComponent`
                 *
                 * @param {Element} [el]
                 *        Parent element for the control text.
                 *
                 * @return {Element}
                 *         The control text element that gets created.
                 */ _proto.createControlTextEl = function(el) {
                    return this.controlTextEl_ = createEl("span", {
                        className: "vjs-control-text"
                    }, {
                        // let the screen reader user know that the text of the element may change
                        "aria-live": "polite"
                    }), el && el.appendChild(this.controlTextEl_), this.controlText(this.controlText_, el), this.controlTextEl_;
                }, /**
                 * Get or set the localize text to use for the controls on the `ClickableComponent`.
                 *
                 * @param {string} [text]
                 *        Control text for element.
                 *
                 * @param {Element} [el=this.el()]
                 *        Element to set the title on.
                 *
                 * @return {string}
                 *         - The control text when getting
                 */ _proto.controlText = function(text, el) {
                    if (void 0 === el && (el = this.el()), void 0 === text) return this.controlText_ || "Need Text";
                    var localizedText = this.localize(text);
                    this.controlText_ = text, textContent(this.controlTextEl_, localizedText), this.nonIconControl || this.player_.options_.noUITitleAttributes || // Set title attribute if only an icon is shown
                    el.setAttribute("title", localizedText);
                }, /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ _proto.buildCSSClass = function() {
                    return "vjs-control vjs-button " + _Component.prototype.buildCSSClass.call(this);
                }, /**
                 * Enable this `ClickableComponent`
                 */ _proto.enable = function() {
                    this.enabled_ || (this.enabled_ = !0, this.removeClass("vjs-disabled"), this.el_.setAttribute("aria-disabled", "false"), void 0 !== this.tabIndex_ && this.el_.setAttribute("tabIndex", this.tabIndex_), this.on([
                        "tap",
                        "click"
                    ], this.handleClick_), this.on("keydown", this.handleKeyDown_));
                }, /**
                 * Disable this `ClickableComponent`
                 */ _proto.disable = function() {
                    this.enabled_ = !1, this.addClass("vjs-disabled"), this.el_.setAttribute("aria-disabled", "true"), void 0 !== this.tabIndex_ && this.el_.removeAttribute("tabIndex"), this.off("mouseover", this.handleMouseOver_), this.off("mouseout", this.handleMouseOut_), this.off([
                        "tap",
                        "click"
                    ], this.handleClick_), this.off("keydown", this.handleKeyDown_);
                }, /**
                 * Handles language change in ClickableComponent for the player in components
                 *
                 *
                 */ _proto.handleLanguagechange = function() {
                    this.controlText(this.controlText_);
                }, /**
                 * Event handler that is called when a `ClickableComponent` receives a
                 * `click` or `tap` event.
                 *
                 * @param {EventTarget~Event} event
                 *        The `tap` or `click` event that caused this function to be called.
                 *
                 * @listens tap
                 * @listens click
                 * @abstract
                 */ _proto.handleClick = function(event) {
                    this.options_.clickHandler && this.options_.clickHandler.call(this, arguments);
                }, /**
                 * Event handler that is called when a `ClickableComponent` receives a
                 * `keydown` event.
                 *
                 * By default, if the key is Space or Enter, it will trigger a `click` event.
                 *
                 * @param {EventTarget~Event} event
                 *        The `keydown` event that caused this function to be called.
                 *
                 * @listens keydown
                 */ _proto.handleKeyDown = function(event) {
                    // Support Space or Enter key operation to fire a click event. Also,
                    // prevent the event from propagating through the DOM and triggering
                    // Player hotkeys.
                    keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Space") || keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Enter") ? (event.preventDefault(), event.stopPropagation(), this.trigger("click")) : // Pass keypress handling up for unsupported keys
                    _Component.prototype.handleKeyDown.call(this, event);
                }, ClickableComponent;
            }(Component$1);
            Component$1.registerComponent("ClickableComponent", ClickableComponent);
            /**
             * A `ClickableComponent` that handles showing the poster image for the player.
             *
             * @extends ClickableComponent
             */ var PosterImage = /*#__PURE__*/ function(_ClickableComponent) {
                /**
                 * Create an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should attach to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function PosterImage(player, options) {
                    var _this;
                    return (_this = _ClickableComponent.call(this, player, options) || this).update(), _this.update_ = function(e) {
                        return _this.update(e);
                    }, player.on("posterchange", _this.update_), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(PosterImage, _ClickableComponent);
                /**
                 * Clean up and dispose of the `PosterImage`.
                 */ var _proto = PosterImage.prototype;
                return _proto.dispose = function() {
                    this.player().off("posterchange", this.update_), _ClickableComponent.prototype.dispose.call(this);
                }, /**
                 * Create the `PosterImage`s DOM element.
                 *
                 * @return {Element}
                 *         The element that gets created.
                 */ _proto.createEl = function() {
                    return createEl("div", {
                        className: "vjs-poster",
                        // Don't want poster to be tabbable.
                        tabIndex: -1
                    });
                }, /**
                 * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.
                 *
                 * @listens Player#posterchange
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `Player#posterchange` event that triggered this function.
                 */ _proto.update = function(event) {
                    var url = this.player().poster();
                    this.setSrc(url), url ? this.show() : this.hide();
                }, /**
                 * Set the source of the `PosterImage` depending on the display method.
                 *
                 * @param {string} url
                 *        The URL to the source for the `PosterImage`.
                 */ _proto.setSrc = function(url) {
                    var backgroundImage = ""; // Any falsy value should stay as an empty string, otherwise
                    url && (backgroundImage = 'url("' + url + '")'), this.el_.style.backgroundImage = backgroundImage;
                }, /**
   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See
   * {@link ClickableComponent#handleClick} for instances where this will be triggered.
   *
   * @listens tap
   * @listens click
   * @listens keydown
   *
   * @param {EventTarget~Event} event
   +        The `click`, `tap` or `keydown` event that caused this function to be called.
   */ _proto.handleClick = function(event) {
                    // We don't want a click to trigger playback when controls are disabled
                    if (this.player_.controls()) {
                        var sourceIsEncrypted = this.player_.usingPlugin("eme") && this.player_.eme.sessions && this.player_.eme.sessions.length > 0;
                        this.player_.tech(!0) && // We've observed a bug in IE and Edge when playing back DRM content where
                        // calling .focus() on the video element causes the video to go black,
                        // so we avoid it in that specific case
                        !((IE_VERSION || IS_EDGE) && sourceIsEncrypted) && this.player_.tech(!0).focus(), this.player_.paused() ? silencePromise(this.player_.play()) : this.player_.pause();
                    }
                }, PosterImage;
            }(ClickableComponent);
            Component$1.registerComponent("PosterImage", PosterImage);
            var darkGray = "#222", lightGray = "#ccc", fontMap = {
                monospace: "monospace",
                sansSerif: "sans-serif",
                serif: "serif",
                monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
                monospaceSerif: '"Courier New", monospace',
                proportionalSansSerif: "sans-serif",
                proportionalSerif: "serif",
                casual: '"Comic Sans MS", Impact, fantasy',
                script: '"Monotype Corsiva", cursive',
                smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
            };
            /**
             * Construct an rgba color from a given hex color code.
             *
             * @param {number} color
             *        Hex number for color, like #f0e or #f604e2.
             *
             * @param {number} opacity
             *        Value for opacity, 0.0 - 1.0.
             *
             * @return {string}
             *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.
             */ function constructColor(color, opacity) {
                var hex;
                if (4 === color.length) // color looks like "#f0e"
                hex = color[1] + color[1] + color[2] + color[2] + color[3] + color[3];
                else if (7 === color.length) // color looks like "#f604e2"
                hex = color.slice(1);
                else throw Error("Invalid color code provided, " + color + "; must be formatted as e.g. #f0e or #f604e2.");
                return "rgba(" + parseInt(hex.slice(0, 2), 16) + "," + parseInt(hex.slice(2, 4), 16) + "," + parseInt(hex.slice(4, 6), 16) + "," + opacity + ")";
            }
            /**
             * Try to update the style of a DOM element. Some style changes will throw an error,
             * particularly in IE8. Those should be noops.
             *
             * @param {Element} el
             *        The DOM element to be styled.
             *
             * @param {string} style
             *        The CSS property on the element that should be styled.
             *
             * @param {string} rule
             *        The style rule that should be applied to the property.
             *
             * @private
             */ function tryUpdateStyle(el, style, rule) {
                try {
                    el.style[style] = rule;
                } catch (e) {
                    // Satisfies linter.
                    return;
                }
            }
            /**
             * The component for displaying text track cues.
             *
             * @extends Component
             */ var TextTrackDisplay = /*#__PURE__*/ function(_Component) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 *
                 * @param {Component~ReadyCallback} [ready]
                 *        The function to call when `TextTrackDisplay` is ready.
                 */ function TextTrackDisplay(player, options, ready) {
                    _this = _Component.call(this, player, options, ready) || this;
                    var _this, updateDisplayHandler = function(e) {
                        return _this.updateDisplay(e);
                    };
                    return player.on("loadstart", function(e) {
                        return _this.toggleDisplay(e);
                    }), player.on("texttrackchange", updateDisplayHandler), player.on("loadedmetadata", function(e) {
                        return _this.preselectTrack(e);
                    }), // if a track should show by default and the display hadn't loaded yet.
                    // Should probably be moved to an external track loader when we support
                    // tracks that don't need a display.
                    player.ready(bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), function() {
                        if (player.tech_ && player.tech_.featuresNativeTextTracks) {
                            this.hide();
                            return;
                        }
                        player.on("fullscreenchange", updateDisplayHandler), player.on("playerresize", updateDisplayHandler), global_window__WEBPACK_IMPORTED_MODULE_0___default().addEventListener("orientationchange", updateDisplayHandler), player.on("dispose", function() {
                            return global_window__WEBPACK_IMPORTED_MODULE_0___default().removeEventListener("orientationchange", updateDisplayHandler);
                        });
                        for(var tracks = this.options_.playerOptions.tracks || [], i = 0; i < tracks.length; i++)this.player_.addRemoteTextTrack(tracks[i], !0);
                        this.preselectTrack();
                    })), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(TextTrackDisplay, _Component);
                /**
                 * Preselect a track following this precedence:
                 * - matches the previously selected {@link TextTrack}'s language and kind
                 * - matches the previously selected {@link TextTrack}'s language only
                 * - is the first default captions track
                 * - is the first default descriptions track
                 *
                 * @listens Player#loadstart
                 */ var _proto = TextTrackDisplay.prototype;
                return _proto.preselectTrack = function() {
                    for(var firstDesc, firstCaptions, preferredTrack, modes = {
                        captions: 1,
                        subtitles: 1
                    }, trackList = this.player_.textTracks(), userPref = this.player_.cache_.selectedLanguage, i = 0; i < trackList.length; i++){
                        var track = trackList[i];
                        userPref && userPref.enabled && userPref.language && userPref.language === track.language && track.kind in modes ? track.kind === userPref.kind ? preferredTrack = track : preferredTrack || (preferredTrack = track) : userPref && !userPref.enabled ? (preferredTrack = null, firstDesc = null, firstCaptions = null) : track.default && ("descriptions" !== track.kind || firstDesc ? track.kind in modes && !firstCaptions && (firstCaptions = track) : firstDesc = track);
                    } // The preferredTrack matches the user preference and takes
                    // precedence over all the other tracks.
                    // So, display the preferredTrack before the first default track
                    // and the subtitles/captions track before the descriptions track
                    preferredTrack ? preferredTrack.mode = "showing" : firstCaptions ? firstCaptions.mode = "showing" : firstDesc && (firstDesc.mode = "showing");
                }, /**
                 * Turn display of {@link TextTrack}'s from the current state into the other state.
                 * There are only two states:
                 * - 'shown'
                 * - 'hidden'
                 *
                 * @listens Player#loadstart
                 */ _proto.toggleDisplay = function() {
                    this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks ? this.hide() : this.show();
                }, /**
                 * Create the {@link Component}'s DOM element.
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ _proto.createEl = function() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-text-track-display"
                    }, {
                        translate: "yes",
                        "aria-live": "off",
                        "aria-atomic": "true"
                    });
                }, /**
                 * Clear all displayed {@link TextTrack}s.
                 */ _proto.clearDisplay = function() {
                    "function" == typeof global_window__WEBPACK_IMPORTED_MODULE_0___default().WebVTT && global_window__WEBPACK_IMPORTED_MODULE_0___default().WebVTT.processCues(global_window__WEBPACK_IMPORTED_MODULE_0___default(), [], this.el_);
                }, /**
                 * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or
                 * a {@link Player#fullscreenchange} is fired.
                 *
                 * @listens Player#texttrackchange
                 * @listens Player#fullscreenchange
                 */ _proto.updateDisplay = function() {
                    var tracks = this.player_.textTracks(), allowMultipleShowingTracks = this.options_.allowMultipleShowingTracks;
                    if (this.clearDisplay(), allowMultipleShowingTracks) {
                        for(var showingTracks = [], _i = 0; _i < tracks.length; ++_i){
                            var track = tracks[_i];
                            "showing" === track.mode && showingTracks.push(track);
                        }
                        this.updateForTrack(showingTracks);
                        return;
                    } //  Track display prioritization model: if multiple tracks are 'showing',
                    for(//  display the first 'subtitles' or 'captions' track which is 'showing',
                    //  otherwise display the first 'descriptions' track which is 'showing'
                    var descriptionsTrack = null, captionsSubtitlesTrack = null, i = tracks.length; i--;){
                        var _track = tracks[i];
                        "showing" === _track.mode && ("descriptions" === _track.kind ? descriptionsTrack = _track : captionsSubtitlesTrack = _track);
                    }
                    captionsSubtitlesTrack ? ("off" !== this.getAttribute("aria-live") && this.setAttribute("aria-live", "off"), this.updateForTrack(captionsSubtitlesTrack)) : descriptionsTrack && ("assertive" !== this.getAttribute("aria-live") && this.setAttribute("aria-live", "assertive"), this.updateForTrack(descriptionsTrack));
                }, /**
                 * Style {@Link TextTrack} activeCues according to {@Link TextTrackSettings}.
                 *
                 * @param {TextTrack} track
                 *        Text track object containing active cues to style.
                 */ _proto.updateDisplayState = function(track) {
                    for(var overrides = this.player_.textTrackSettings.getValues(), cues = track.activeCues, i = cues.length; i--;){
                        var cue = cues[i];
                        if (cue) {
                            var cueDiv = cue.displayState;
                            if (overrides.color && (cueDiv.firstChild.style.color = overrides.color), overrides.textOpacity && tryUpdateStyle(cueDiv.firstChild, "color", constructColor(overrides.color || "#fff", overrides.textOpacity)), overrides.backgroundColor && (cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor), overrides.backgroundOpacity && tryUpdateStyle(cueDiv.firstChild, "backgroundColor", constructColor(overrides.backgroundColor || "#000", overrides.backgroundOpacity)), overrides.windowColor && (overrides.windowOpacity ? tryUpdateStyle(cueDiv, "backgroundColor", constructColor(overrides.windowColor, overrides.windowOpacity)) : cueDiv.style.backgroundColor = overrides.windowColor), overrides.edgeStyle && ("dropshadow" === overrides.edgeStyle ? cueDiv.firstChild.style.textShadow = "2px 2px 3px " + darkGray + ", 2px 2px 4px " + darkGray + ", 2px 2px 5px " + darkGray : "raised" === overrides.edgeStyle ? cueDiv.firstChild.style.textShadow = "1px 1px " + darkGray + ", 2px 2px " + darkGray + ", 3px 3px " + darkGray : "depressed" === overrides.edgeStyle ? cueDiv.firstChild.style.textShadow = "1px 1px " + lightGray + ", 0 1px " + lightGray + ", -1px -1px " + darkGray + ", 0 -1px " + darkGray : "uniform" === overrides.edgeStyle && (cueDiv.firstChild.style.textShadow = "0 0 4px " + darkGray + ", 0 0 4px " + darkGray + ", 0 0 4px " + darkGray + ", 0 0 4px " + darkGray)), overrides.fontPercent && 1 !== overrides.fontPercent) {
                                var fontSize = global_window__WEBPACK_IMPORTED_MODULE_0___default().parseFloat(cueDiv.style.fontSize);
                                cueDiv.style.fontSize = fontSize * overrides.fontPercent + "px", cueDiv.style.height = "auto", cueDiv.style.top = "auto";
                            }
                            overrides.fontFamily && "default" !== overrides.fontFamily && ("small-caps" === overrides.fontFamily ? cueDiv.firstChild.style.fontVariant = "small-caps" : cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily]);
                        }
                    }
                }, /**
                 * Add an {@link TextTrack} to to the {@link Tech}s {@link TextTrackList}.
                 *
                 * @param {TextTrack|TextTrack[]} tracks
                 *        Text track object or text track array to be added to the list.
                 */ _proto.updateForTrack = function(tracks) {
                    if (Array.isArray(tracks) || (tracks = [
                        tracks
                    ]), !("function" != typeof global_window__WEBPACK_IMPORTED_MODULE_0___default().WebVTT || tracks.every(function(track) {
                        return !track.activeCues;
                    }))) {
                        for(var cues = [], i = 0; i < tracks.length; ++i)for(var track = tracks[i], j = 0; j < track.activeCues.length; ++j)cues.push(track.activeCues[j]);
                         // removes all cues before it processes new ones
                        global_window__WEBPACK_IMPORTED_MODULE_0___default().WebVTT.processCues(global_window__WEBPACK_IMPORTED_MODULE_0___default(), cues, this.el_);
                        for(var _i2 = 0; _i2 < tracks.length; ++_i2){
                            for(var _track2 = tracks[_i2], _j = 0; _j < _track2.activeCues.length; ++_j){
                                var cueEl = _track2.activeCues[_j].displayState;
                                addClass(cueEl, "vjs-text-track-cue"), addClass(cueEl, "vjs-text-track-cue-" + (_track2.language ? _track2.language : _i2)), _track2.language && setAttribute(cueEl, "lang", _track2.language);
                            }
                            this.player_.textTrackSettings && this.updateDisplayState(_track2);
                        }
                    }
                }, TextTrackDisplay;
            }(Component$1);
            Component$1.registerComponent("TextTrackDisplay", TextTrackDisplay);
            /**
             * A loading spinner for use during waiting/loading events.
             *
             * @extends Component
             */ var LoadingSpinner = /*#__PURE__*/ function(_Component) {
                function LoadingSpinner() {
                    return _Component.apply(this, arguments) || this;
                }
                return (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(LoadingSpinner, _Component), /**
                 * Create the `LoadingSpinner`s DOM element.
                 *
                 * @return {Element}
                 *         The dom element that gets created.
                 */ LoadingSpinner.prototype.createEl = function() {
                    var isAudio = this.player_.isAudio(), playerType = this.localize(isAudio ? "Audio Player" : "Video Player"), controlText = createEl("span", {
                        className: "vjs-control-text",
                        textContent: this.localize("{1} is loading.", [
                            playerType
                        ])
                    }), el = _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-loading-spinner",
                        dir: "ltr"
                    });
                    return el.appendChild(controlText), el;
                }, LoadingSpinner;
            }(Component$1);
            Component$1.registerComponent("LoadingSpinner", LoadingSpinner);
            /**
             * Base class for all buttons.
             *
             * @extends ClickableComponent
             */ var Button = /*#__PURE__*/ function(_ClickableComponent) {
                function Button() {
                    return _ClickableComponent.apply(this, arguments) || this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(Button, _ClickableComponent);
                var _proto = Button.prototype;
                return(/**
                 * Create the `Button`s DOM element.
                 *
                 * @param {string} [tag="button"]
                 *        The element's node type. This argument is IGNORED: no matter what
                 *        is passed, it will always create a `button` element.
                 *
                 * @param {Object} [props={}]
                 *        An object of properties that should be set on the element.
                 *
                 * @param {Object} [attributes={}]
                 *        An object of attributes that should be set on the element.
                 *
                 * @return {Element}
                 *         The element that gets created.
                 */ _proto.createEl = function(tag, props, attributes) {
                    void 0 === props && (props = {}), void 0 === attributes && (attributes = {});
                    var el = createEl("button", props = assign({
                        className: this.buildCSSClass()
                    }, props), attributes = assign({
                        // Necessary since the default button type is "submit"
                        type: "button"
                    }, attributes));
                    return el.appendChild(createEl("span", {
                        className: "vjs-icon-placeholder"
                    }, {
                        "aria-hidden": !0
                    })), this.createControlTextEl(el), el;
                }, /**
                 * Add a child `Component` inside of this `Button`.
                 *
                 * @param {string|Component} child
                 *        The name or instance of a child to add.
                 *
                 * @param {Object} [options={}]
                 *        The key/value store of options that will get passed to children of
                 *        the child.
                 *
                 * @return {Component}
                 *         The `Component` that gets added as a child. When using a string the
                 *         `Component` will get created by this process.
                 *
                 * @deprecated since version 5
                 */ _proto.addChild = function(child, options) {
                    void 0 === options && (options = {});
                    var className = this.constructor.name;
                    return log$1.warn("Adding an actionable (user controllable) child to a Button (" + className + ") is not supported; use a ClickableComponent instead."), Component$1.prototype.addChild.call(this, child, options);
                }, /**
                 * Enable the `Button` element so that it can be activated or clicked. Use this with
                 * {@link Button#disable}.
                 */ _proto.enable = function() {
                    _ClickableComponent.prototype.enable.call(this), this.el_.removeAttribute("disabled");
                }, /**
                 * Disable the `Button` element so that it cannot be activated or clicked. Use this with
                 * {@link Button#enable}.
                 */ _proto.disable = function() {
                    _ClickableComponent.prototype.disable.call(this), this.el_.setAttribute("disabled", "disabled");
                }, /**
                 * This gets called when a `Button` has focus and `keydown` is triggered via a key
                 * press.
                 *
                 * @param {EventTarget~Event} event
                 *        The event that caused this function to get called.
                 *
                 * @listens keydown
                 */ _proto.handleKeyDown = function(event) {
                    // Ignore Space or Enter key operation, which is handled by the browser for
                    // a button - though not for its super class, ClickableComponent. Also,
                    // prevent the event from propagating through the DOM and triggering Player
                    // hotkeys. We do not preventDefault here because we _want_ the browser to
                    // handle it.
                    if (keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Space") || keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Enter")) {
                        event.stopPropagation();
                        return;
                    } // Pass keypress handling up for unsupported keys
                    _ClickableComponent.prototype.handleKeyDown.call(this, event);
                }, Button);
            }(ClickableComponent);
            Component$1.registerComponent("Button", Button);
            /**
             * The initial play button that shows before the video has played. The hiding of the
             * `BigPlayButton` get done via CSS and `Player` states.
             *
             * @extends Button
             */ var BigPlayButton = /*#__PURE__*/ function(_Button) {
                function BigPlayButton(player, options) {
                    var _this;
                    return (_this = _Button.call(this, player, options) || this).mouseused_ = !1, _this.on("mousedown", function(e) {
                        return _this.handleMouseDown(e);
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(BigPlayButton, _Button);
                /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.
                 */ var _proto = BigPlayButton.prototype;
                return _proto.buildCSSClass = function() {
                    return "vjs-big-play-button";
                }, /**
                 * This gets called when a `BigPlayButton` "clicked". See {@link ClickableComponent}
                 * for more detailed information on what a click can be.
                 *
                 * @param {EventTarget~Event} event
                 *        The `keydown`, `tap`, or `click` event that caused this function to be
                 *        called.
                 *
                 * @listens tap
                 * @listens click
                 */ _proto.handleClick = function(event) {
                    var playPromise = this.player_.play(); // exit early if clicked via the mouse
                    if (this.mouseused_ && event.clientX && event.clientY) {
                        var sourceIsEncrypted = this.player_.usingPlugin("eme") && this.player_.eme.sessions && this.player_.eme.sessions.length > 0;
                        silencePromise(playPromise), this.player_.tech(!0) && // We've observed a bug in IE and Edge when playing back DRM content where
                        // calling .focus() on the video element causes the video to go black,
                        // so we avoid it in that specific case
                        !((IE_VERSION || IS_EDGE) && sourceIsEncrypted) && this.player_.tech(!0).focus();
                        return;
                    }
                    var cb = this.player_.getChild("controlBar"), playToggle = cb && cb.getChild("playToggle");
                    if (!playToggle) {
                        this.player_.tech(!0).focus();
                        return;
                    }
                    var playFocus = function() {
                        return playToggle.focus();
                    };
                    isPromise(playPromise) ? playPromise.then(playFocus, function() {}) : this.setTimeout(playFocus, 1);
                }, _proto.handleKeyDown = function(event) {
                    this.mouseused_ = !1, _Button.prototype.handleKeyDown.call(this, event);
                }, _proto.handleMouseDown = function(event) {
                    this.mouseused_ = !0;
                }, BigPlayButton;
            }(Button);
            /**
             * The text that should display over the `BigPlayButton`s controls. Added to for localization.
             *
             * @type {string}
             * @private
             */ BigPlayButton.prototype.controlText_ = "Play Video", Component$1.registerComponent("BigPlayButton", BigPlayButton);
            /**
             * The `CloseButton` is a `{@link Button}` that fires a `close` event when
             * it gets clicked.
             *
             * @extends Button
             */ var CloseButton = /*#__PURE__*/ function(_Button) {
                /**
                 * Creates an instance of the this class.
                 *
                 * @param  {Player} player
                 *         The `Player` that this class should be attached to.
                 *
                 * @param  {Object} [options]
                 *         The key/value store of player options.
                 */ function CloseButton(player, options) {
                    var _this;
                    return (_this = _Button.call(this, player, options) || this).controlText(options && options.controlText || _this.localize("Close")), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(CloseButton, _Button);
                /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ var _proto = CloseButton.prototype;
                return _proto.buildCSSClass = function() {
                    return "vjs-close-button " + _Button.prototype.buildCSSClass.call(this);
                }, /**
                 * This gets called when a `CloseButton` gets clicked. See
                 * {@link ClickableComponent#handleClick} for more information on when
                 * this will be triggered
                 *
                 * @param {EventTarget~Event} event
                 *        The `keydown`, `tap`, or `click` event that caused this function to be
                 *        called.
                 *
                 * @listens tap
                 * @listens click
                 * @fires CloseButton#close
                 */ _proto.handleClick = function(event) {
                    /**
                     * Triggered when the a `CloseButton` is clicked.
                     *
                     * @event CloseButton#close
                     * @type {EventTarget~Event}
                     *
                     * @property {boolean} [bubbles=false]
                     *           set to false so that the close event does not
                     *           bubble up to parents if there is no listener
                     */ this.trigger({
                        type: "close",
                        bubbles: !1
                    });
                }, /**
                 * Event handler that is called when a `CloseButton` receives a
                 * `keydown` event.
                 *
                 * By default, if the key is Esc, it will trigger a `click` event.
                 *
                 * @param {EventTarget~Event} event
                 *        The `keydown` event that caused this function to be called.
                 *
                 * @listens keydown
                 */ _proto.handleKeyDown = function(event) {
                    // Esc button will trigger `click` event
                    keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Esc") ? (event.preventDefault(), event.stopPropagation(), this.trigger("click")) : // Pass keypress handling up for unsupported keys
                    _Button.prototype.handleKeyDown.call(this, event);
                }, CloseButton;
            }(Button);
            Component$1.registerComponent("CloseButton", CloseButton);
            /**
             * Button to toggle between play and pause.
             *
             * @extends Button
             */ var PlayToggle = /*#__PURE__*/ function(_Button) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options={}]
                 *        The key/value store of player options.
                 */ function PlayToggle(player, options) {
                    var _this;
                    return void 0 === options && (options = {}), _this = _Button.call(this, player, options) || this, options.replay = void 0 === options.replay || options.replay, _this.on(player, "play", function(e) {
                        return _this.handlePlay(e);
                    }), _this.on(player, "pause", function(e) {
                        return _this.handlePause(e);
                    }), options.replay && _this.on(player, "ended", function(e) {
                        return _this.handleEnded(e);
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(PlayToggle, _Button);
                /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ var _proto = PlayToggle.prototype;
                return _proto.buildCSSClass = function() {
                    return "vjs-play-control " + _Button.prototype.buildCSSClass.call(this);
                }, /**
                 * This gets called when an `PlayToggle` is "clicked". See
                 * {@link ClickableComponent} for more detailed information on what a click can be.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `keydown`, `tap`, or `click` event that caused this function to be
                 *        called.
                 *
                 * @listens tap
                 * @listens click
                 */ _proto.handleClick = function(event) {
                    this.player_.paused() ? silencePromise(this.player_.play()) : this.player_.pause();
                }, /**
                 * This gets called once after the video has ended and the user seeks so that
                 * we can change the replay button back to a play button.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The event that caused this function to run.
                 *
                 * @listens Player#seeked
                 */ _proto.handleSeeked = function(event) {
                    this.removeClass("vjs-ended"), this.player_.paused() ? this.handlePause(event) : this.handlePlay(event);
                }, /**
                 * Add the vjs-playing class to the element so it can change appearance.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The event that caused this function to run.
                 *
                 * @listens Player#play
                 */ _proto.handlePlay = function(event) {
                    this.removeClass("vjs-ended"), this.removeClass("vjs-paused"), this.addClass("vjs-playing"), this.controlText("Pause");
                }, /**
                 * Add the vjs-paused class to the element so it can change appearance.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The event that caused this function to run.
                 *
                 * @listens Player#pause
                 */ _proto.handlePause = function(event) {
                    this.removeClass("vjs-playing"), this.addClass("vjs-paused"), this.controlText("Play");
                }, /**
                 * Add the vjs-ended class to the element so it can change appearance
                 *
                 * @param {EventTarget~Event} [event]
                 *        The event that caused this function to run.
                 *
                 * @listens Player#ended
                 */ _proto.handleEnded = function(event) {
                    var _this2 = this;
                    this.removeClass("vjs-playing"), this.addClass("vjs-ended"), this.controlText("Replay"), this.one(this.player_, "seeked", function(e) {
                        return _this2.handleSeeked(e);
                    });
                }, PlayToggle;
            }(Button);
            /**
             * The text that should display over the `PlayToggle`s controls. Added for localization.
             *
             * @type {string}
             * @private
             */ PlayToggle.prototype.controlText_ = "Play", Component$1.registerComponent("PlayToggle", PlayToggle);
            /**
             * @file format-time.js
             * @module format-time
             */ /**
             * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in
             * seconds) will force a number of leading zeros to cover the length of the
             * guide.
             *
             * @private
             * @param  {number} seconds
             *         Number of seconds to be turned into a string
             *
             * @param  {number} guide
             *         Number (in seconds) to model the string after
             *
             * @return {string}
             *         Time formatted as H:MM:SS or M:SS
             */ var defaultImplementation = function(seconds, guide) {
                var s = Math.floor((seconds = seconds < 0 ? 0 : seconds) % 60), m = Math.floor(seconds / 60 % 60), h = Math.floor(seconds / 3600), gm = Math.floor(guide / 60 % 60), gh = Math.floor(guide / 3600);
                return (isNaN(seconds) || seconds === 1 / 0) && // '-' is false for all relational operators (e.g. <, >=) so this setting
                // will add the minimum number of fields specified by the guide
                (h = m = s = "-"), // Always show at least one digit of minutes.
                m = (((h = h > 0 || gh > 0 ? h + ":" : "") || gm >= 10) && m < 10 ? "0" + m : m) + ":", h + m + (s = s < 10 ? "0" + s : s);
            }, implementation = defaultImplementation; // Internal pointer to the current implementation.
            /**
             * Delegates to either the default time formatting function or a custom
             * function supplied via `setFormatTime`.
             *
             * Formats seconds as a time string (H:MM:SS or M:SS). Supplying a
             * guide (in seconds) will force a number of leading zeros to cover the
             * length of the guide.
             *
             * @static
             * @example  formatTime(125, 600) === "02:05"
             * @param    {number} seconds
             *           Number of seconds to be turned into a string
             *
             * @param    {number} guide
             *           Number (in seconds) to model the string after
             *
             * @return   {string}
             *           Time formatted as H:MM:SS or M:SS
             */ function formatTime(seconds, guide) {
                return void 0 === guide && (guide = seconds), implementation(seconds, guide);
            }
            /**
             * Displays time information about the video
             *
             * @extends Component
             */ var TimeDisplay = /*#__PURE__*/ function(_Component) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function TimeDisplay(player, options) {
                    var _this;
                    return (_this = _Component.call(this, player, options) || this).on(player, [
                        "timeupdate",
                        "ended"
                    ], function(e) {
                        return _this.updateContent(e);
                    }), _this.updateTextNode_(), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(TimeDisplay, _Component);
                /**
                 * Create the `Component`'s DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ var _proto = TimeDisplay.prototype;
                return _proto.createEl = function() {
                    var className = this.buildCSSClass(), el = _Component.prototype.createEl.call(this, "div", {
                        className: className + " vjs-time-control vjs-control"
                    }), span = createEl("span", {
                        className: "vjs-control-text",
                        textContent: this.localize(this.labelText_) + "\xA0"
                    }, {
                        role: "presentation"
                    });
                    return el.appendChild(span), this.contentEl_ = createEl("span", {
                        className: className + "-display"
                    }, {
                        // tell screen readers not to automatically read the time as it changes
                        "aria-live": "off",
                        // span elements have no implicit role, but some screen readers (notably VoiceOver)
                        // treat them as a break between items in the DOM when using arrow keys
                        // (or left-to-right swipes on iOS) to read contents of a page. Using
                        // role='presentation' causes VoiceOver to NOT treat this span as a break.
                        role: "presentation"
                    }), el.appendChild(this.contentEl_), el;
                }, _proto.dispose = function() {
                    this.contentEl_ = null, this.textNode_ = null, _Component.prototype.dispose.call(this);
                }, /**
                 * Updates the time display text node with a new time
                 *
                 * @param {number} [time=0] the time to update to
                 *
                 * @private
                 */ _proto.updateTextNode_ = function(time) {
                    var _this2 = this;
                    void 0 === time && (time = 0), time = formatTime(time), this.formattedTime_ !== time && (this.formattedTime_ = time, this.requestNamedAnimationFrame("TimeDisplay#updateTextNode_", function() {
                        if (_this2.contentEl_) {
                            var oldNode = _this2.textNode_;
                            oldNode && _this2.contentEl_.firstChild !== oldNode && (oldNode = null, log$1.warn("TimeDisplay#updateTextnode_: Prevented replacement of text node element since it was no longer a child of this node. Appending a new node instead.")), _this2.textNode_ = global_document__WEBPACK_IMPORTED_MODULE_1___default().createTextNode(_this2.formattedTime_), _this2.textNode_ && (oldNode ? _this2.contentEl_.replaceChild(_this2.textNode_, oldNode) : _this2.contentEl_.appendChild(_this2.textNode_));
                        }
                    }));
                }, /**
                 * To be filled out in the child class, should update the displayed time
                 * in accordance with the fact that the current time has changed.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `timeupdate`  event that caused this to run.
                 *
                 * @listens Player#timeupdate
                 */ _proto.updateContent = function(event) {}, TimeDisplay;
            }(Component$1);
            /**
             * The text that is added to the `TimeDisplay` for screen reader users.
             *
             * @type {string}
             * @private
             */ TimeDisplay.prototype.labelText_ = "Time", /**
             * The text that should display over the `TimeDisplay`s controls. Added to for localization.
             *
             * @type {string}
             * @private
             *
             * @deprecated in v7; controlText_ is not used in non-active display Components
             */ TimeDisplay.prototype.controlText_ = "Time", Component$1.registerComponent("TimeDisplay", TimeDisplay);
            /**
             * Displays the current time
             *
             * @extends Component
             */ var CurrentTimeDisplay = /*#__PURE__*/ function(_TimeDisplay) {
                function CurrentTimeDisplay() {
                    return _TimeDisplay.apply(this, arguments) || this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(CurrentTimeDisplay, _TimeDisplay);
                var _proto = CurrentTimeDisplay.prototype;
                return(/**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ _proto.buildCSSClass = function() {
                    return "vjs-current-time";
                }, /**
                 * Update current time display
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `timeupdate` event that caused this function to run.
                 *
                 * @listens Player#timeupdate
                 */ _proto.updateContent = function(event) {
                    // Allows for smooth scrubbing, when player can't keep up.
                    var time;
                    time = this.player_.ended() ? this.player_.duration() : this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime(), this.updateTextNode_(time);
                }, CurrentTimeDisplay);
            }(TimeDisplay);
            /**
             * The text that is added to the `CurrentTimeDisplay` for screen reader users.
             *
             * @type {string}
             * @private
             */ CurrentTimeDisplay.prototype.labelText_ = "Current Time", /**
             * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.
             *
             * @type {string}
             * @private
             *
             * @deprecated in v7; controlText_ is not used in non-active display Components
             */ CurrentTimeDisplay.prototype.controlText_ = "Current Time", Component$1.registerComponent("CurrentTimeDisplay", CurrentTimeDisplay);
            /**
             * Displays the duration
             *
             * @extends Component
             */ var DurationDisplay = /*#__PURE__*/ function(_TimeDisplay) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function DurationDisplay(player, options) {
                    _this = _TimeDisplay.call(this, player, options) || this;
                    var _this, updateContent = function(e) {
                        return _this.updateContent(e);
                    }; // we do not want to/need to throttle duration changes,
                    return(// as they should always display the changed duration as
                    // it has changed
                    _this.on(player, "durationchange", updateContent), // but the durationchange on the user agent will not fire.
                    // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}
                    _this.on(player, "loadstart", updateContent), // listeners could have broken dependent applications/libraries. These
                    // can likely be removed for 7.0.
                    _this.on(player, "loadedmetadata", updateContent), _this);
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(DurationDisplay, _TimeDisplay);
                /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ var _proto = DurationDisplay.prototype;
                return _proto.buildCSSClass = function() {
                    return "vjs-duration";
                }, /**
                 * Update duration time display.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused
                 *        this function to be called.
                 *
                 * @listens Player#durationchange
                 * @listens Player#timeupdate
                 * @listens Player#loadedmetadata
                 */ _proto.updateContent = function(event) {
                    var duration = this.player_.duration();
                    this.updateTextNode_(duration);
                }, DurationDisplay;
            }(TimeDisplay);
            /**
             * The text that is added to the `DurationDisplay` for screen reader users.
             *
             * @type {string}
             * @private
             */ DurationDisplay.prototype.labelText_ = "Duration", /**
             * The text that should display over the `DurationDisplay`s controls. Added to for localization.
             *
             * @type {string}
             * @private
             *
             * @deprecated in v7; controlText_ is not used in non-active display Components
             */ DurationDisplay.prototype.controlText_ = "Duration", Component$1.registerComponent("DurationDisplay", DurationDisplay);
            /**
             * The separator between the current time and duration.
             * Can be hidden if it's not needed in the design.
             *
             * @extends Component
             */ var TimeDivider = /*#__PURE__*/ function(_Component) {
                function TimeDivider() {
                    return _Component.apply(this, arguments) || this;
                }
                return (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(TimeDivider, _Component), /**
                 * Create the component's DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ TimeDivider.prototype.createEl = function() {
                    var el = _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-time-control vjs-time-divider"
                    }, {
                        // this element and its contents can be hidden from assistive techs since
                        // it is made extraneous by the announcement of the control text
                        // for the current time and duration displays
                        "aria-hidden": !0
                    }), div = _Component.prototype.createEl.call(this, "div"), span = _Component.prototype.createEl.call(this, "span", {
                        textContent: "/"
                    });
                    return div.appendChild(span), el.appendChild(div), el;
                }, TimeDivider;
            }(Component$1);
            Component$1.registerComponent("TimeDivider", TimeDivider);
            /**
             * Displays the time left in the video
             *
             * @extends Component
             */ var RemainingTimeDisplay = /*#__PURE__*/ function(_TimeDisplay) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function RemainingTimeDisplay(player, options) {
                    var _this;
                    return (_this = _TimeDisplay.call(this, player, options) || this).on(player, "durationchange", function(e) {
                        return _this.updateContent(e);
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(RemainingTimeDisplay, _TimeDisplay);
                /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ var _proto = RemainingTimeDisplay.prototype;
                return _proto.buildCSSClass = function() {
                    return "vjs-remaining-time";
                }, /**
                 * Create the `Component`'s DOM element with the "minus" characted prepend to the time
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ _proto.createEl = function() {
                    var el = _TimeDisplay.prototype.createEl.call(this);
                    return el.insertBefore(createEl("span", {}, {
                        "aria-hidden": !0
                    }, "-"), this.contentEl_), el;
                }, /**
                 * Update remaining time display.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `timeupdate` or `durationchange` event that caused this to run.
                 *
                 * @listens Player#timeupdate
                 * @listens Player#durationchange
                 */ _proto.updateContent = function(event) {
                    var time;
                    "number" == typeof this.player_.duration() && (time = this.player_.ended() ? 0 : this.player_.remainingTimeDisplay ? this.player_.remainingTimeDisplay() : this.player_.remainingTime(), this.updateTextNode_(time));
                }, RemainingTimeDisplay;
            }(TimeDisplay);
            /**
             * The text that is added to the `RemainingTimeDisplay` for screen reader users.
             *
             * @type {string}
             * @private
             */ RemainingTimeDisplay.prototype.labelText_ = "Remaining Time", /**
             * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.
             *
             * @type {string}
             * @private
             *
             * @deprecated in v7; controlText_ is not used in non-active display Components
             */ RemainingTimeDisplay.prototype.controlText_ = "Remaining Time", Component$1.registerComponent("RemainingTimeDisplay", RemainingTimeDisplay);
            /**
             * Displays the live indicator when duration is Infinity.
             *
             * @extends Component
             */ var LiveDisplay = /*#__PURE__*/ function(_Component) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function LiveDisplay(player, options) {
                    var _this;
                    return (_this = _Component.call(this, player, options) || this).updateShowing(), _this.on(_this.player(), "durationchange", function(e) {
                        return _this.updateShowing(e);
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(LiveDisplay, _Component);
                /**
                 * Create the `Component`'s DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ var _proto = LiveDisplay.prototype;
                return _proto.createEl = function() {
                    var el = _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-live-control vjs-control"
                    });
                    return this.contentEl_ = createEl("div", {
                        className: "vjs-live-display"
                    }, {
                        "aria-live": "off"
                    }), this.contentEl_.appendChild(createEl("span", {
                        className: "vjs-control-text",
                        textContent: this.localize("Stream Type") + "\xA0"
                    })), this.contentEl_.appendChild(global_document__WEBPACK_IMPORTED_MODULE_1___default().createTextNode(this.localize("LIVE"))), el.appendChild(this.contentEl_), el;
                }, _proto.dispose = function() {
                    this.contentEl_ = null, _Component.prototype.dispose.call(this);
                }, /**
                 * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide
                 * it accordingly
                 *
                 * @param {EventTarget~Event} [event]
                 *        The {@link Player#durationchange} event that caused this function to run.
                 *
                 * @listens Player#durationchange
                 */ _proto.updateShowing = function(event) {
                    this.player().duration() === 1 / 0 ? this.show() : this.hide();
                }, LiveDisplay;
            }(Component$1);
            Component$1.registerComponent("LiveDisplay", LiveDisplay);
            /**
             * Displays the live indicator when duration is Infinity.
             *
             * @extends Component
             */ var SeekToLive = /*#__PURE__*/ function(_Button) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function SeekToLive(player, options) {
                    var _this;
                    return (_this = _Button.call(this, player, options) || this).updateLiveEdgeStatus(), _this.player_.liveTracker && (_this.updateLiveEdgeStatusHandler_ = function(e) {
                        return _this.updateLiveEdgeStatus(e);
                    }, _this.on(_this.player_.liveTracker, "liveedgechange", _this.updateLiveEdgeStatusHandler_)), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(SeekToLive, _Button);
                /**
                 * Create the `Component`'s DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ var _proto = SeekToLive.prototype;
                return _proto.createEl = function() {
                    var el = _Button.prototype.createEl.call(this, "button", {
                        className: "vjs-seek-to-live-control vjs-control"
                    });
                    return this.textEl_ = createEl("span", {
                        className: "vjs-seek-to-live-text",
                        textContent: this.localize("LIVE")
                    }, {
                        "aria-hidden": "true"
                    }), el.appendChild(this.textEl_), el;
                }, /**
                 * Update the state of this button if we are at the live edge
                 * or not
                 */ _proto.updateLiveEdgeStatus = function() {
                    // default to live edge
                    !this.player_.liveTracker || this.player_.liveTracker.atLiveEdge() ? (this.setAttribute("aria-disabled", !0), this.addClass("vjs-at-live-edge"), this.controlText("Seek to live, currently playing live")) : (this.setAttribute("aria-disabled", !1), this.removeClass("vjs-at-live-edge"), this.controlText("Seek to live, currently behind live"));
                }, /**
                 * On click bring us as near to the live point as possible.
                 * This requires that we wait for the next `live-seekable-change`
                 * event which will happen every segment length seconds.
                 */ _proto.handleClick = function() {
                    this.player_.liveTracker.seekToLiveEdge();
                }, /**
                 * Dispose of the element and stop tracking
                 */ _proto.dispose = function() {
                    this.player_.liveTracker && this.off(this.player_.liveTracker, "liveedgechange", this.updateLiveEdgeStatusHandler_), this.textEl_ = null, _Button.prototype.dispose.call(this);
                }, SeekToLive;
            }(Button);
            SeekToLive.prototype.controlText_ = "Seek to live, currently playing live", Component$1.registerComponent("SeekToLive", SeekToLive);
            /**
             * Keep a number between a min and a max value
             *
             * @param {number} number
             *        The number to clamp
             *
             * @param {number} min
             *        The minimum value
             * @param {number} max
             *        The maximum value
             *
             * @return {number}
             *         the clamped number
             */ var clamp = function(number, min, max) {
                return Math.min(max, Math.max(min, isNaN(number = Number(number)) ? min : number));
            }, Slider = /*#__PURE__*/ function(_Component) {
                /**
                 * Create an instance of this class
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function Slider(player, options) {
                    var _this;
                    return (_this = _Component.call(this, player, options) || this).handleMouseDown_ = function(e) {
                        return _this.handleMouseDown(e);
                    }, _this.handleMouseUp_ = function(e) {
                        return _this.handleMouseUp(e);
                    }, _this.handleKeyDown_ = function(e) {
                        return _this.handleKeyDown(e);
                    }, _this.handleClick_ = function(e) {
                        return _this.handleClick(e);
                    }, _this.handleMouseMove_ = function(e) {
                        return _this.handleMouseMove(e);
                    }, _this.update_ = function(e) {
                        return _this.update(e);
                    }, _this.bar = _this.getChild(_this.options_.barName), _this.vertical(!!_this.options_.vertical), _this.enable(), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(Slider, _Component);
                /**
                 * Are controls are currently enabled for this slider or not.
                 *
                 * @return {boolean}
                 *         true if controls are enabled, false otherwise
                 */ var _proto = Slider.prototype;
                return _proto.enabled = function() {
                    return this.enabled_;
                }, /**
                 * Enable controls for this slider if they are disabled
                 */ _proto.enable = function() {
                    this.enabled() || (this.on("mousedown", this.handleMouseDown_), this.on("touchstart", this.handleMouseDown_), this.on("keydown", this.handleKeyDown_), this.on("click", this.handleClick_), this.on(this.player_, "controlsvisible", this.update), this.playerEvent && this.on(this.player_, this.playerEvent, this.update), this.removeClass("disabled"), this.setAttribute("tabindex", 0), this.enabled_ = !0);
                }, /**
                 * Disable controls for this slider if they are enabled
                 */ _proto.disable = function() {
                    if (this.enabled()) {
                        var doc = this.bar.el_.ownerDocument;
                        this.off("mousedown", this.handleMouseDown_), this.off("touchstart", this.handleMouseDown_), this.off("keydown", this.handleKeyDown_), this.off("click", this.handleClick_), this.off(this.player_, "controlsvisible", this.update_), this.off(doc, "mousemove", this.handleMouseMove_), this.off(doc, "mouseup", this.handleMouseUp_), this.off(doc, "touchmove", this.handleMouseMove_), this.off(doc, "touchend", this.handleMouseUp_), this.removeAttribute("tabindex"), this.addClass("disabled"), this.playerEvent && this.off(this.player_, this.playerEvent, this.update), this.enabled_ = !1;
                    }
                }, /**
                 * Create the `Slider`s DOM element.
                 *
                 * @param {string} type
                 *        Type of element to create.
                 *
                 * @param {Object} [props={}]
                 *        List of properties in Object form.
                 *
                 * @param {Object} [attributes={}]
                 *        list of attributes in Object form.
                 *
                 * @return {Element}
                 *         The element that gets created.
                 */ _proto.createEl = function(type, props, attributes) {
                    return void 0 === props && (props = {}), void 0 === attributes && (attributes = {}), // Add the slider element class to all sub classes
                    props.className = props.className + " vjs-slider", props = assign({
                        tabIndex: 0
                    }, props), attributes = assign({
                        role: "slider",
                        "aria-valuenow": 0,
                        "aria-valuemin": 0,
                        "aria-valuemax": 100,
                        tabIndex: 0
                    }, attributes), _Component.prototype.createEl.call(this, type, props, attributes);
                }, /**
                 * Handle `mousedown` or `touchstart` events on the `Slider`.
                 *
                 * @param {EventTarget~Event} event
                 *        `mousedown` or `touchstart` event that triggered this function
                 *
                 * @listens mousedown
                 * @listens touchstart
                 * @fires Slider#slideractive
                 */ _proto.handleMouseDown = function(event) {
                    var doc = this.bar.el_.ownerDocument;
                    "mousedown" === event.type && event.preventDefault(), "touchstart" !== event.type || IS_CHROME || event.preventDefault(), blockTextSelection(), this.addClass("vjs-sliding"), /**
                     * Triggered when the slider is in an active state
                     *
                     * @event Slider#slideractive
                     * @type {EventTarget~Event}
                     */ this.trigger("slideractive"), this.on(doc, "mousemove", this.handleMouseMove_), this.on(doc, "mouseup", this.handleMouseUp_), this.on(doc, "touchmove", this.handleMouseMove_), this.on(doc, "touchend", this.handleMouseUp_), this.handleMouseMove(event);
                }, /**
                 * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.
                 * The `mousemove` and `touchmove` events will only only trigger this function during
                 * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and
                 * {@link Slider#handleMouseUp}.
                 *
                 * @param {EventTarget~Event} event
                 *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered
                 *        this function
                 *
                 * @listens mousemove
                 * @listens touchmove
                 */ _proto.handleMouseMove = function(event) {}, /**
                 * Handle `mouseup` or `touchend` events on the `Slider`.
                 *
                 * @param {EventTarget~Event} event
                 *        `mouseup` or `touchend` event that triggered this function.
                 *
                 * @listens touchend
                 * @listens mouseup
                 * @fires Slider#sliderinactive
                 */ _proto.handleMouseUp = function() {
                    var doc = this.bar.el_.ownerDocument;
                    unblockTextSelection(), this.removeClass("vjs-sliding"), /**
                     * Triggered when the slider is no longer in an active state.
                     *
                     * @event Slider#sliderinactive
                     * @type {EventTarget~Event}
                     */ this.trigger("sliderinactive"), this.off(doc, "mousemove", this.handleMouseMove_), this.off(doc, "mouseup", this.handleMouseUp_), this.off(doc, "touchmove", this.handleMouseMove_), this.off(doc, "touchend", this.handleMouseUp_), this.update();
                }, /**
                 * Update the progress bar of the `Slider`.
                 *
                 * @return {number}
                 *          The percentage of progress the progress bar represents as a
                 *          number from 0 to 1.
                 */ _proto.update = function() {
                    var _this2 = this;
                    // In VolumeBar init we have a setTimeout for update that pops and update
                    // to the end of the execution stack. The player is destroyed before then
                    // update will cause an error
                    // If there's no bar...
                    if (this.el_ && this.bar) {
                        // and only round to four decimal places, as we round to two below
                        var progress = this.getProgress();
                        return progress === this.progress_ || (this.progress_ = progress, this.requestNamedAnimationFrame("Slider#update", function() {
                            // Set the new bar width or height
                            var sizeKey = _this2.vertical() ? "height" : "width"; // Convert to a percentage for css value
                            _this2.bar.el().style[sizeKey] = (100 * progress).toFixed(2) + "%";
                        })), progress;
                    } // clamp progress between 0 and 1
                }, /**
                 * Get the percentage of the bar that should be filled
                 * but clamped and rounded.
                 *
                 * @return {number}
                 *         percentage filled that the slider is
                 */ _proto.getProgress = function() {
                    return Number(clamp(this.getPercent(), 0, 1).toFixed(4));
                }, /**
                 * Calculate distance for slider
                 *
                 * @param {EventTarget~Event} event
                 *        The event that caused this function to run.
                 *
                 * @return {number}
                 *         The current position of the Slider.
                 *         - position.x for vertical `Slider`s
                 *         - position.y for horizontal `Slider`s
                 */ _proto.calculateDistance = function(event) {
                    var position = getPointerPosition(this.el_, event);
                    return this.vertical() ? position.y : position.x;
                }, /**
                 * Handle a `keydown` event on the `Slider`. Watches for left, rigth, up, and down
                 * arrow keys. This function will only be called when the slider has focus. See
                 * {@link Slider#handleFocus} and {@link Slider#handleBlur}.
                 *
                 * @param {EventTarget~Event} event
                 *        the `keydown` event that caused this function to run.
                 *
                 * @listens keydown
                 */ _proto.handleKeyDown = function(event) {
                    // Left and Down Arrows
                    keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Left") || keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Down") ? (event.preventDefault(), event.stopPropagation(), this.stepBack()) : keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Right") || keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Up") ? (event.preventDefault(), event.stopPropagation(), this.stepForward()) : // Pass keydown handling up for unsupported keys
                    _Component.prototype.handleKeyDown.call(this, event);
                }, /**
                 * Listener for click events on slider, used to prevent clicks
                 *   from bubbling up to parent elements like button menus.
                 *
                 * @param {Object} event
                 *        Event that caused this object to run
                 */ _proto.handleClick = function(event) {
                    event.stopPropagation(), event.preventDefault();
                }, /**
                 * Get/set if slider is horizontal for vertical
                 *
                 * @param {boolean} [bool]
                 *        - true if slider is vertical,
                 *        - false is horizontal
                 *
                 * @return {boolean}
                 *         - true if slider is vertical, and getting
                 *         - false if the slider is horizontal, and getting
                 */ _proto.vertical = function(bool) {
                    if (void 0 === bool) return this.vertical_ || !1;
                    this.vertical_ = !!bool, this.vertical_ ? this.addClass("vjs-slider-vertical") : this.addClass("vjs-slider-horizontal");
                }, Slider;
            }(Component$1);
            Component$1.registerComponent("Slider", Slider);
            var percentify = function(time, end) {
                return clamp(time / end * 100, 0, 100).toFixed(2) + "%";
            }, LoadProgressBar = /*#__PURE__*/ function(_Component) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function LoadProgressBar(player, options) {
                    var _this;
                    return (_this = _Component.call(this, player, options) || this).partEls_ = [], _this.on(player, "progress", function(e) {
                        return _this.update(e);
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(LoadProgressBar, _Component);
                /**
                 * Create the `Component`'s DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ var _proto = LoadProgressBar.prototype;
                return _proto.createEl = function() {
                    var el = _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-load-progress"
                    }), wrapper = createEl("span", {
                        className: "vjs-control-text"
                    }), loadedText = createEl("span", {
                        textContent: this.localize("Loaded")
                    }), separator = global_document__WEBPACK_IMPORTED_MODULE_1___default().createTextNode(": ");
                    return this.percentageEl_ = createEl("span", {
                        className: "vjs-control-text-loaded-percentage",
                        textContent: "0%"
                    }), el.appendChild(wrapper), wrapper.appendChild(loadedText), wrapper.appendChild(separator), wrapper.appendChild(this.percentageEl_), el;
                }, _proto.dispose = function() {
                    this.partEls_ = null, this.percentageEl_ = null, _Component.prototype.dispose.call(this);
                }, /**
                 * Update progress bar
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `progress` event that caused this function to run.
                 *
                 * @listens Player#progress
                 */ _proto.update = function(event) {
                    var _this2 = this;
                    this.requestNamedAnimationFrame("LoadProgressBar#update", function() {
                        var liveTracker = _this2.player_.liveTracker, buffered = _this2.player_.buffered(), duration = liveTracker && liveTracker.isLive() ? liveTracker.seekableEnd() : _this2.player_.duration(), bufferedEnd = _this2.player_.bufferedEnd(), children = _this2.partEls_, percent = percentify(bufferedEnd, duration);
                        _this2.percent_ !== percent && (// update the width of the progress bar
                        _this2.el_.style.width = percent, textContent(_this2.percentageEl_, percent), _this2.percent_ = percent); // add child elements to represent the individual buffered time ranges
                        for(var i = 0; i < buffered.length; i++){
                            var start = buffered.start(i), end = buffered.end(i), part = children[i];
                            part || (part = _this2.el_.appendChild(createEl()), children[i] = part), (part.dataset.start !== start || part.dataset.end !== end) && (part.dataset.start = start, part.dataset.end = end, part.style.left = percentify(start, bufferedEnd), part.style.width = percentify(end - start, bufferedEnd));
                        } // remove unused buffered range elements
                        for(var _i = children.length; _i > buffered.length; _i--)_this2.el_.removeChild(children[_i - 1]);
                        children.length = buffered.length;
                    });
                }, LoadProgressBar;
            }(Component$1);
            Component$1.registerComponent("LoadProgressBar", LoadProgressBar);
            /**
             * Time tooltips display a time above the progress bar.
             *
             * @extends Component
             */ var TimeTooltip = /*#__PURE__*/ function(_Component) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The {@link Player} that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function TimeTooltip(player, options) {
                    var _this;
                    return (_this = _Component.call(this, player, options) || this).update = throttle(bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), _this.update), 30), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(TimeTooltip, _Component);
                /**
                 * Create the time tooltip DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ var _proto = TimeTooltip.prototype;
                return _proto.createEl = function() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-time-tooltip"
                    }, {
                        "aria-hidden": "true"
                    });
                }, /**
                 * Updates the position of the time tooltip relative to the `SeekBar`.
                 *
                 * @param {Object} seekBarRect
                 *        The `ClientRect` for the {@link SeekBar} element.
                 *
                 * @param {number} seekBarPoint
                 *        A number from 0 to 1, representing a horizontal reference point
                 *        from the left edge of the {@link SeekBar}
                 */ _proto.update = function(seekBarRect, seekBarPoint, content) {
                    var tooltipRect = findPosition(this.el_), playerRect = getBoundingClientRect(this.player_.el()), seekBarPointPx = seekBarRect.width * seekBarPoint;
                    // for example, if the player isn't in the DOM for testing
                    if (playerRect && tooltipRect) {
                        // of the player. We calculate any gap between the left edge of the player
                        // and the left edge of the `SeekBar` and add the number of pixels in the
                        // `SeekBar` before hitting the `seekBarPoint`
                        var spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx, spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right), pullTooltipBy = tooltipRect.width / 2; // This is the space right of the `seekBarPoint` available within the bounds
                        spaceLeftOfPoint < pullTooltipBy ? pullTooltipBy += pullTooltipBy - spaceLeftOfPoint : spaceRightOfPoint < pullTooltipBy && (pullTooltipBy = spaceRightOfPoint), pullTooltipBy < 0 ? pullTooltipBy = 0 : pullTooltipBy > tooltipRect.width && (pullTooltipBy = tooltipRect.width), // changing the value below.
                        // This really helps for live to prevent the play
                        // progress time tooltip from jittering
                        pullTooltipBy = Math.round(pullTooltipBy), this.el_.style.right = "-" + pullTooltipBy + "px", this.write(content);
                    } // This is the space left of the `seekBarPoint` available within the bounds
                }, /**
                 * Write the time to the tooltip DOM element.
                 *
                 * @param {string} content
                 *        The formatted time for the tooltip.
                 */ _proto.write = function(content) {
                    textContent(this.el_, content);
                }, /**
                 * Updates the position of the time tooltip relative to the `SeekBar`.
                 *
                 * @param {Object} seekBarRect
                 *        The `ClientRect` for the {@link SeekBar} element.
                 *
                 * @param {number} seekBarPoint
                 *        A number from 0 to 1, representing a horizontal reference point
                 *        from the left edge of the {@link SeekBar}
                 *
                 * @param {number} time
                 *        The time to update the tooltip to, not used during live playback
                 *
                 * @param {Function} cb
                 *        A function that will be called during the request animation frame
                 *        for tooltips that need to do additional animations from the default
                 */ _proto.updateTime = function(seekBarRect, seekBarPoint, time, cb) {
                    var _this2 = this;
                    this.requestNamedAnimationFrame("TimeTooltip#updateTime", function() {
                        var content, duration = _this2.player_.duration();
                        if (_this2.player_.liveTracker && _this2.player_.liveTracker.isLive()) {
                            var liveWindow = _this2.player_.liveTracker.liveWindow(), secondsBehind = liveWindow - seekBarPoint * liveWindow;
                            content = (secondsBehind < 1 ? "" : "-") + formatTime(secondsBehind, liveWindow);
                        } else content = formatTime(time, duration);
                        _this2.update(seekBarRect, seekBarPoint, content), cb && cb();
                    });
                }, TimeTooltip;
            }(Component$1);
            Component$1.registerComponent("TimeTooltip", TimeTooltip);
            /**
             * Used by {@link SeekBar} to display media playback progress as part of the
             * {@link ProgressControl}.
             *
             * @extends Component
             */ var PlayProgressBar = /*#__PURE__*/ function(_Component) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The {@link Player} that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function PlayProgressBar(player, options) {
                    var _this;
                    return (_this = _Component.call(this, player, options) || this).update = throttle(bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), _this.update), 30), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(PlayProgressBar, _Component);
                /**
                 * Create the the DOM element for this class.
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ var _proto = PlayProgressBar.prototype;
                return _proto.createEl = function() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-play-progress vjs-slider-bar"
                    }, {
                        "aria-hidden": "true"
                    });
                }, /**
                 * Enqueues updates to its own DOM as well as the DOM of its
                 * {@link TimeTooltip} child.
                 *
                 * @param {Object} seekBarRect
                 *        The `ClientRect` for the {@link SeekBar} element.
                 *
                 * @param {number} seekBarPoint
                 *        A number from 0 to 1, representing a horizontal reference point
                 *        from the left edge of the {@link SeekBar}
                 */ _proto.update = function(seekBarRect, seekBarPoint) {
                    var timeTooltip = this.getChild("timeTooltip");
                    if (timeTooltip) {
                        var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                        timeTooltip.updateTime(seekBarRect, seekBarPoint, time);
                    }
                }, PlayProgressBar;
            }(Component$1);
            /**
             * Default options for {@link PlayProgressBar}.
             *
             * @type {Object}
             * @private
             */ PlayProgressBar.prototype.options_ = {
                children: []
            }, IS_IOS || IS_ANDROID || PlayProgressBar.prototype.options_.children.push("timeTooltip"), Component$1.registerComponent("PlayProgressBar", PlayProgressBar);
            /**
             * The {@link MouseTimeDisplay} component tracks mouse movement over the
             * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}
             * indicating the time which is represented by a given point in the
             * {@link ProgressControl}.
             *
             * @extends Component
             */ var MouseTimeDisplay = /*#__PURE__*/ function(_Component) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The {@link Player} that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function MouseTimeDisplay(player, options) {
                    var _this;
                    return (_this = _Component.call(this, player, options) || this).update = throttle(bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), _this.update), 30), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(MouseTimeDisplay, _Component);
                /**
                 * Create the DOM element for this class.
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ var _proto = MouseTimeDisplay.prototype;
                return _proto.createEl = function() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-mouse-display"
                    });
                }, /**
                 * Enqueues updates to its own DOM as well as the DOM of its
                 * {@link TimeTooltip} child.
                 *
                 * @param {Object} seekBarRect
                 *        The `ClientRect` for the {@link SeekBar} element.
                 *
                 * @param {number} seekBarPoint
                 *        A number from 0 to 1, representing a horizontal reference point
                 *        from the left edge of the {@link SeekBar}
                 */ _proto.update = function(seekBarRect, seekBarPoint) {
                    var _this2 = this, time = seekBarPoint * this.player_.duration();
                    this.getChild("timeTooltip").updateTime(seekBarRect, seekBarPoint, time, function() {
                        _this2.el_.style.left = seekBarRect.width * seekBarPoint + "px";
                    });
                }, MouseTimeDisplay;
            }(Component$1);
            /**
             * Default options for `MouseTimeDisplay`
             *
             * @type {Object}
             * @private
             */ MouseTimeDisplay.prototype.options_ = {
                children: [
                    "timeTooltip"
                ]
            }, Component$1.registerComponent("MouseTimeDisplay", MouseTimeDisplay);
            /**
             * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}
             * as its `bar`.
             *
             * @extends Slider
             */ var SeekBar = /*#__PURE__*/ function(_Slider) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function SeekBar(player, options) {
                    var _this;
                    return (_this = _Slider.call(this, player, options) || this).setEventHandlers_(), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(SeekBar, _Slider);
                /**
                 * Sets the event handlers
                 *
                 * @private
                 */ var _proto = SeekBar.prototype;
                return _proto.setEventHandlers_ = function() {
                    var _this2 = this;
                    this.update_ = bind(this, this.update), this.update = throttle(this.update_, 30), this.on(this.player_, [
                        "ended",
                        "durationchange",
                        "timeupdate"
                    ], this.update), this.player_.liveTracker && this.on(this.player_.liveTracker, "liveedgechange", this.update), // via an interval
                    this.updateInterval = null, this.enableIntervalHandler_ = function(e) {
                        return _this2.enableInterval_(e);
                    }, this.disableIntervalHandler_ = function(e) {
                        return _this2.disableInterval_(e);
                    }, this.on(this.player_, [
                        "playing"
                    ], this.enableIntervalHandler_), this.on(this.player_, [
                        "ended",
                        "pause",
                        "waiting"
                    ], this.disableIntervalHandler_), "hidden" in global_document__WEBPACK_IMPORTED_MODULE_1___default() && "visibilityState" in global_document__WEBPACK_IMPORTED_MODULE_1___default() && this.on(global_document__WEBPACK_IMPORTED_MODULE_1___default(), "visibilitychange", this.toggleVisibility_);
                }, _proto.toggleVisibility_ = function(e) {
                    "hidden" === global_document__WEBPACK_IMPORTED_MODULE_1___default().visibilityState ? (this.cancelNamedAnimationFrame("SeekBar#update"), this.cancelNamedAnimationFrame("Slider#update"), this.disableInterval_(e)) : (this.player_.ended() || this.player_.paused() || this.enableInterval_(), this.update());
                }, _proto.enableInterval_ = function() {
                    this.updateInterval || (this.updateInterval = this.setInterval(this.update, 30));
                }, _proto.disableInterval_ = function(e) {
                    this.player_.liveTracker && this.player_.liveTracker.isLive() && e && "ended" !== e.type || !this.updateInterval || (this.clearInterval(this.updateInterval), this.updateInterval = null);
                }, /**
                 * Create the `Component`'s DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ _proto.createEl = function() {
                    return _Slider.prototype.createEl.call(this, "div", {
                        className: "vjs-progress-holder"
                    }, {
                        "aria-label": this.localize("Progress Bar")
                    });
                }, /**
                 * This function updates the play progress bar and accessibility
                 * attributes to whatever is passed in.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `timeupdate` or `ended` event that caused this to run.
                 *
                 * @listens Player#timeupdate
                 *
                 * @return {number}
                 *          The current percent at a number from 0-1
                 */ _proto.update = function(event) {
                    var _this3 = this;
                    // ignore updates while the tab is hidden
                    if ("hidden" !== global_document__WEBPACK_IMPORTED_MODULE_1___default().visibilityState) {
                        var percent = _Slider.prototype.update.call(this);
                        return this.requestNamedAnimationFrame("SeekBar#update", function() {
                            var currentTime = _this3.player_.ended() ? _this3.player_.duration() : _this3.getCurrentTime_(), liveTracker = _this3.player_.liveTracker, duration = _this3.player_.duration();
                            liveTracker && liveTracker.isLive() && (duration = _this3.player_.liveTracker.liveCurrentTime()), _this3.percent_ !== percent && (// machine readable value of progress bar (percentage complete)
                            _this3.el_.setAttribute("aria-valuenow", (100 * percent).toFixed(2)), _this3.percent_ = percent), (_this3.currentTime_ !== currentTime || _this3.duration_ !== duration) && (// human readable value of progress bar (time complete)
                            _this3.el_.setAttribute("aria-valuetext", _this3.localize("progress bar timing: currentTime={1} duration={2}", [
                                formatTime(currentTime, duration),
                                formatTime(duration, duration)
                            ], "{1} of {2}")), _this3.currentTime_ = currentTime, _this3.duration_ = duration), _this3.bar && _this3.bar.update(getBoundingClientRect(_this3.el()), _this3.getProgress());
                        }), percent;
                    }
                }, /**
                 * Prevent liveThreshold from causing seeks to seem like they
                 * are not happening from a user perspective.
                 *
                 * @param {number} ct
                 *        current time to seek to
                 */ _proto.userSeek_ = function(ct) {
                    this.player_.liveTracker && this.player_.liveTracker.isLive() && this.player_.liveTracker.nextSeekedFromUser(), this.player_.currentTime(ct);
                }, /**
                 * Get the value of current time but allows for smooth scrubbing,
                 * when player can't keep up.
                 *
                 * @return {number}
                 *         The current time value to display
                 *
                 * @private
                 */ _proto.getCurrentTime_ = function() {
                    return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                }, /**
                 * Get the percentage of media played so far.
                 *
                 * @return {number}
                 *         The percentage of media played so far (0 to 1).
                 */ _proto.getPercent = function() {
                    var percent, currentTime = this.getCurrentTime_(), liveTracker = this.player_.liveTracker;
                    return liveTracker && liveTracker.isLive() ? (percent = (currentTime - liveTracker.seekableStart()) / liveTracker.liveWindow(), liveTracker.atLiveEdge() && (percent = 1)) : percent = currentTime / this.player_.duration(), percent;
                }, /**
                 * Handle mouse down on seek bar
                 *
                 * @param {EventTarget~Event} event
                 *        The `mousedown` event that caused this to run.
                 *
                 * @listens mousedown
                 */ _proto.handleMouseDown = function(event) {
                    isSingleLeftClick(event) && (event.stopPropagation(), this.player_.scrubbing(!0), this.videoWasPlaying = !this.player_.paused(), this.player_.pause(), _Slider.prototype.handleMouseDown.call(this, event)); // Stop event propagation to prevent double fire in progress-control.js
                }, /**
                 * Handle mouse move on seek bar
                 *
                 * @param {EventTarget~Event} event
                 *        The `mousemove` event that caused this to run.
                 *
                 * @listens mousemove
                 */ _proto.handleMouseMove = function(event) {
                    if (isSingleLeftClick(event)) {
                        var newTime, distance = this.calculateDistance(event), liveTracker = this.player_.liveTracker;
                        if (liveTracker && liveTracker.isLive()) {
                            if (distance >= 0.99) {
                                liveTracker.seekToLiveEdge();
                                return;
                            }
                            var seekableStart = liveTracker.seekableStart(), seekableEnd = liveTracker.liveCurrentTime();
                            // this will cause newTime to be Infinity, which is
                            // not a valid currentTime.
                            if ((newTime = seekableStart + distance * liveTracker.liveWindow()) >= seekableEnd && (newTime = seekableEnd), newTime <= seekableStart && (newTime = seekableStart + 0.1), newTime === 1 / 0) return;
                        } else (newTime = distance * this.player_.duration()) === this.player_.duration() && (newTime -= 0.1);
                         // Set new time (tell player to seek to new time)
                        this.userSeek_(newTime);
                    }
                }, _proto.enable = function() {
                    _Slider.prototype.enable.call(this);
                    var mouseTimeDisplay = this.getChild("mouseTimeDisplay");
                    mouseTimeDisplay && mouseTimeDisplay.show();
                }, _proto.disable = function() {
                    _Slider.prototype.disable.call(this);
                    var mouseTimeDisplay = this.getChild("mouseTimeDisplay");
                    mouseTimeDisplay && mouseTimeDisplay.hide();
                }, /**
                 * Handle mouse up on seek bar
                 *
                 * @param {EventTarget~Event} event
                 *        The `mouseup` event that caused this to run.
                 *
                 * @listens mouseup
                 */ _proto.handleMouseUp = function(event) {
                    _Slider.prototype.handleMouseUp.call(this, event), event && event.stopPropagation(), this.player_.scrubbing(!1), /**
                     * Trigger timeupdate because we're done seeking and the time has changed.
                     * This is particularly useful for if the player is paused to time the time displays.
                     *
                     * @event Tech#timeupdate
                     * @type {EventTarget~Event}
                     */ this.player_.trigger({
                        type: "timeupdate",
                        target: this,
                        manuallyTriggered: !0
                    }), this.videoWasPlaying ? silencePromise(this.player_.play()) : // We're done seeking and the time has changed.
                    // If the player is paused, make sure we display the correct time on the seek bar.
                    this.update_();
                }, /**
                 * Move more quickly fast forward for keyboard-only users
                 */ _proto.stepForward = function() {
                    this.userSeek_(this.player_.currentTime() + 5);
                }, /**
                 * Move more quickly rewind for keyboard-only users
                 */ _proto.stepBack = function() {
                    this.userSeek_(this.player_.currentTime() - 5);
                }, /**
                 * Toggles the playback state of the player
                 * This gets called when enter or space is used on the seekbar
                 *
                 * @param {EventTarget~Event} event
                 *        The `keydown` event that caused this function to be called
                 *
                 */ _proto.handleAction = function(event) {
                    this.player_.paused() ? this.player_.play() : this.player_.pause();
                }, /**
                 * Called when this SeekBar has focus and a key gets pressed down.
                 * Supports the following keys:
                 *
                 *   Space or Enter key fire a click event
                 *   Home key moves to start of the timeline
                 *   End key moves to end of the timeline
                 *   Digit "0" through "9" keys move to 0%, 10% ... 80%, 90% of the timeline
                 *   PageDown key moves back a larger step than ArrowDown
                 *   PageUp key moves forward a large step
                 *
                 * @param {EventTarget~Event} event
                 *        The `keydown` event that caused this function to be called.
                 *
                 * @listens keydown
                 */ _proto.handleKeyDown = function(event) {
                    var liveTracker = this.player_.liveTracker;
                    if (keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Space") || keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Enter")) event.preventDefault(), event.stopPropagation(), this.handleAction(event);
                    else if (keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Home")) event.preventDefault(), event.stopPropagation(), this.userSeek_(0);
                    else if (keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "End")) event.preventDefault(), event.stopPropagation(), liveTracker && liveTracker.isLive() ? this.userSeek_(liveTracker.liveCurrentTime()) : this.userSeek_(this.player_.duration());
                    else if (/^[0-9]$/.test(keycode__WEBPACK_IMPORTED_MODULE_3___default()(event))) {
                        event.preventDefault(), event.stopPropagation();
                        var gotoFraction = (keycode__WEBPACK_IMPORTED_MODULE_3___default().codes[keycode__WEBPACK_IMPORTED_MODULE_3___default()(event)] - keycode__WEBPACK_IMPORTED_MODULE_3___default().codes[0]) * 10.0 / 100.0;
                        liveTracker && liveTracker.isLive() ? this.userSeek_(liveTracker.seekableStart() + liveTracker.liveWindow() * gotoFraction) : this.userSeek_(this.player_.duration() * gotoFraction);
                    } else keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "PgDn") ? (event.preventDefault(), event.stopPropagation(), this.userSeek_(this.player_.currentTime() - 60)) : keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "PgUp") ? (event.preventDefault(), event.stopPropagation(), this.userSeek_(this.player_.currentTime() + 60)) : // Pass keydown handling up for unsupported keys
                    _Slider.prototype.handleKeyDown.call(this, event);
                }, _proto.dispose = function() {
                    this.disableInterval_(), this.off(this.player_, [
                        "ended",
                        "durationchange",
                        "timeupdate"
                    ], this.update), this.player_.liveTracker && this.off(this.player_.liveTracker, "liveedgechange", this.update), this.off(this.player_, [
                        "playing"
                    ], this.enableIntervalHandler_), this.off(this.player_, [
                        "ended",
                        "pause",
                        "waiting"
                    ], this.disableIntervalHandler_), "hidden" in global_document__WEBPACK_IMPORTED_MODULE_1___default() && "visibilityState" in global_document__WEBPACK_IMPORTED_MODULE_1___default() && this.off(global_document__WEBPACK_IMPORTED_MODULE_1___default(), "visibilitychange", this.toggleVisibility_), _Slider.prototype.dispose.call(this);
                }, SeekBar;
            }(Slider);
            /**
             * Default options for the `SeekBar`
             *
             * @type {Object}
             * @private
             */ SeekBar.prototype.options_ = {
                children: [
                    "loadProgressBar",
                    "playProgressBar"
                ],
                barName: "playProgressBar"
            }, IS_IOS || IS_ANDROID || SeekBar.prototype.options_.children.splice(1, 0, "mouseTimeDisplay"), Component$1.registerComponent("SeekBar", SeekBar);
            /**
             * The Progress Control component contains the seek bar, load progress,
             * and play progress.
             *
             * @extends Component
             */ var ProgressControl = /*#__PURE__*/ function(_Component) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function ProgressControl(player, options) {
                    var _this;
                    return (_this = _Component.call(this, player, options) || this).handleMouseMove = throttle(bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), _this.handleMouseMove), 30), _this.throttledHandleMouseSeek = throttle(bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), _this.handleMouseSeek), 30), _this.handleMouseUpHandler_ = function(e) {
                        return _this.handleMouseUp(e);
                    }, _this.handleMouseDownHandler_ = function(e) {
                        return _this.handleMouseDown(e);
                    }, _this.enable(), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(ProgressControl, _Component);
                /**
                 * Create the `Component`'s DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ var _proto = ProgressControl.prototype;
                return _proto.createEl = function() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-progress-control vjs-control"
                    });
                }, /**
                 * When the mouse moves over the `ProgressControl`, the pointer position
                 * gets passed down to the `MouseTimeDisplay` component.
                 *
                 * @param {EventTarget~Event} event
                 *        The `mousemove` event that caused this function to run.
                 *
                 * @listen mousemove
                 */ _proto.handleMouseMove = function(event) {
                    var seekBar = this.getChild("seekBar");
                    if (seekBar) {
                        var playProgressBar = seekBar.getChild("playProgressBar"), mouseTimeDisplay = seekBar.getChild("mouseTimeDisplay");
                        if (playProgressBar || mouseTimeDisplay) {
                            var seekBarEl = seekBar.el(), seekBarRect = findPosition(seekBarEl), seekBarPoint = getPointerPosition(seekBarEl, event).x;
                            // that it's possible to trigger this behavior outside the boundaries of
                            // the `SeekBar`. This ensures we stay within it at all times.
                            seekBarPoint = clamp(seekBarPoint, 0, 1), mouseTimeDisplay && mouseTimeDisplay.update(seekBarRect, seekBarPoint), playProgressBar && playProgressBar.update(seekBarRect, seekBar.getProgress());
                        }
                    }
                }, /**
                 * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.
                 *
                 * @method ProgressControl#throttledHandleMouseSeek
                 * @param {EventTarget~Event} event
                 *        The `mousemove` event that caused this function to run.
                 *
                 * @listen mousemove
                 * @listen touchmove
                 */ /**
                 * Handle `mousemove` or `touchmove` events on the `ProgressControl`.
                 *
                 * @param {EventTarget~Event} event
                 *        `mousedown` or `touchstart` event that triggered this function
                 *
                 * @listens mousemove
                 * @listens touchmove
                 */ _proto.handleMouseSeek = function(event) {
                    var seekBar = this.getChild("seekBar");
                    seekBar && seekBar.handleMouseMove(event);
                }, /**
                 * Are controls are currently enabled for this progress control.
                 *
                 * @return {boolean}
                 *         true if controls are enabled, false otherwise
                 */ _proto.enabled = function() {
                    return this.enabled_;
                }, /**
                 * Disable all controls on the progress control and its children
                 */ _proto.disable = function() {
                    if (this.children().forEach(function(child) {
                        return child.disable && child.disable();
                    }), this.enabled() && (this.off([
                        "mousedown",
                        "touchstart"
                    ], this.handleMouseDownHandler_), this.off(this.el_, "mousemove", this.handleMouseMove), this.removeListenersAddedOnMousedownAndTouchstart(), this.addClass("disabled"), this.enabled_ = !1, this.player_.scrubbing())) {
                        var seekBar = this.getChild("seekBar");
                        this.player_.scrubbing(!1), seekBar.videoWasPlaying && silencePromise(this.player_.play());
                    }
                }, /**
                 * Enable all controls on the progress control and its children
                 */ _proto.enable = function() {
                    this.children().forEach(function(child) {
                        return child.enable && child.enable();
                    }), this.enabled() || (this.on([
                        "mousedown",
                        "touchstart"
                    ], this.handleMouseDownHandler_), this.on(this.el_, "mousemove", this.handleMouseMove), this.removeClass("disabled"), this.enabled_ = !0);
                }, /**
                 * Cleanup listeners after the user finishes interacting with the progress controls
                 */ _proto.removeListenersAddedOnMousedownAndTouchstart = function() {
                    var doc = this.el_.ownerDocument;
                    this.off(doc, "mousemove", this.throttledHandleMouseSeek), this.off(doc, "touchmove", this.throttledHandleMouseSeek), this.off(doc, "mouseup", this.handleMouseUpHandler_), this.off(doc, "touchend", this.handleMouseUpHandler_);
                }, /**
                 * Handle `mousedown` or `touchstart` events on the `ProgressControl`.
                 *
                 * @param {EventTarget~Event} event
                 *        `mousedown` or `touchstart` event that triggered this function
                 *
                 * @listens mousedown
                 * @listens touchstart
                 */ _proto.handleMouseDown = function(event) {
                    var doc = this.el_.ownerDocument, seekBar = this.getChild("seekBar");
                    seekBar && seekBar.handleMouseDown(event), this.on(doc, "mousemove", this.throttledHandleMouseSeek), this.on(doc, "touchmove", this.throttledHandleMouseSeek), this.on(doc, "mouseup", this.handleMouseUpHandler_), this.on(doc, "touchend", this.handleMouseUpHandler_);
                }, /**
                 * Handle `mouseup` or `touchend` events on the `ProgressControl`.
                 *
                 * @param {EventTarget~Event} event
                 *        `mouseup` or `touchend` event that triggered this function.
                 *
                 * @listens touchend
                 * @listens mouseup
                 */ _proto.handleMouseUp = function(event) {
                    var seekBar = this.getChild("seekBar");
                    seekBar && seekBar.handleMouseUp(event), this.removeListenersAddedOnMousedownAndTouchstart();
                }, ProgressControl;
            }(Component$1);
            /**
             * Default options for `ProgressControl`
             *
             * @type {Object}
             * @private
             */ ProgressControl.prototype.options_ = {
                children: [
                    "seekBar"
                ]
            }, Component$1.registerComponent("ProgressControl", ProgressControl);
            /**
             * Toggle Picture-in-Picture mode
             *
             * @extends Button
             */ var PictureInPictureToggle = /*#__PURE__*/ function(_Button) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 *
                 * @listens Player#enterpictureinpicture
                 * @listens Player#leavepictureinpicture
                 */ function PictureInPictureToggle(player, options) {
                    var _this;
                    return (_this = _Button.call(this, player, options) || this).on(player, [
                        "enterpictureinpicture",
                        "leavepictureinpicture"
                    ], function(e) {
                        return _this.handlePictureInPictureChange(e);
                    }), _this.on(player, [
                        "disablepictureinpicturechanged",
                        "loadedmetadata"
                    ], function(e) {
                        return _this.handlePictureInPictureEnabledChange(e);
                    }), _this.disable(), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(PictureInPictureToggle, _Button);
                /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ var _proto = PictureInPictureToggle.prototype;
                return _proto.buildCSSClass = function() {
                    return "vjs-picture-in-picture-control " + _Button.prototype.buildCSSClass.call(this);
                }, /**
                 * Enables or disables button based on document.pictureInPictureEnabled property value
                 * or on value returned by player.disablePictureInPicture() method.
                 */ _proto.handlePictureInPictureEnabledChange = function() {
                    global_document__WEBPACK_IMPORTED_MODULE_1___default().pictureInPictureEnabled && !1 === this.player_.disablePictureInPicture() ? this.enable() : this.disable();
                }, /**
                 * Handles enterpictureinpicture and leavepictureinpicture on the player and change control text accordingly.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The {@link Player#enterpictureinpicture} or {@link Player#leavepictureinpicture} event that caused this function to be
                 *        called.
                 *
                 * @listens Player#enterpictureinpicture
                 * @listens Player#leavepictureinpicture
                 */ _proto.handlePictureInPictureChange = function(event) {
                    this.player_.isInPictureInPicture() ? this.controlText("Exit Picture-in-Picture") : this.controlText("Picture-in-Picture"), this.handlePictureInPictureEnabledChange();
                }, /**
                 * This gets called when an `PictureInPictureToggle` is "clicked". See
                 * {@link ClickableComponent} for more detailed information on what a click can be.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `keydown`, `tap`, or `click` event that caused this function to be
                 *        called.
                 *
                 * @listens tap
                 * @listens click
                 */ _proto.handleClick = function(event) {
                    this.player_.isInPictureInPicture() ? this.player_.exitPictureInPicture() : this.player_.requestPictureInPicture();
                }, PictureInPictureToggle;
            }(Button);
            /**
             * The text that should display over the `PictureInPictureToggle`s controls. Added for localization.
             *
             * @type {string}
             * @private
             */ PictureInPictureToggle.prototype.controlText_ = "Picture-in-Picture", Component$1.registerComponent("PictureInPictureToggle", PictureInPictureToggle);
            /**
             * Toggle fullscreen video
             *
             * @extends Button
             */ var FullscreenToggle = /*#__PURE__*/ function(_Button) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function FullscreenToggle(player, options) {
                    var _this;
                    return (_this = _Button.call(this, player, options) || this).on(player, "fullscreenchange", function(e) {
                        return _this.handleFullscreenChange(e);
                    }), !1 === global_document__WEBPACK_IMPORTED_MODULE_1___default()[player.fsApi_.fullscreenEnabled] && _this.disable(), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(FullscreenToggle, _Button);
                /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ var _proto = FullscreenToggle.prototype;
                return _proto.buildCSSClass = function() {
                    return "vjs-fullscreen-control " + _Button.prototype.buildCSSClass.call(this);
                }, /**
                 * Handles fullscreenchange on the player and change control text accordingly.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The {@link Player#fullscreenchange} event that caused this function to be
                 *        called.
                 *
                 * @listens Player#fullscreenchange
                 */ _proto.handleFullscreenChange = function(event) {
                    this.player_.isFullscreen() ? this.controlText("Non-Fullscreen") : this.controlText("Fullscreen");
                }, /**
                 * This gets called when an `FullscreenToggle` is "clicked". See
                 * {@link ClickableComponent} for more detailed information on what a click can be.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `keydown`, `tap`, or `click` event that caused this function to be
                 *        called.
                 *
                 * @listens tap
                 * @listens click
                 */ _proto.handleClick = function(event) {
                    this.player_.isFullscreen() ? this.player_.exitFullscreen() : this.player_.requestFullscreen();
                }, FullscreenToggle;
            }(Button);
            /**
             * The text that should display over the `FullscreenToggle`s controls. Added for localization.
             *
             * @type {string}
             * @private
             */ FullscreenToggle.prototype.controlText_ = "Fullscreen", Component$1.registerComponent("FullscreenToggle", FullscreenToggle);
            /**
             * Check if volume control is supported and if it isn't hide the
             * `Component` that was passed  using the `vjs-hidden` class.
             *
             * @param {Component} self
             *        The component that should be hidden if volume is unsupported
             *
             * @param {Player} player
             *        A reference to the player
             *
             * @private
             */ var checkVolumeSupport = function(self1, player) {
                player.tech_ && !player.tech_.featuresVolumeControl && self1.addClass("vjs-hidden"), self1.on(player, "loadstart", function() {
                    player.tech_.featuresVolumeControl ? self1.removeClass("vjs-hidden") : self1.addClass("vjs-hidden");
                });
            }, VolumeLevel = /*#__PURE__*/ function(_Component) {
                function VolumeLevel() {
                    return _Component.apply(this, arguments) || this;
                }
                return (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(VolumeLevel, _Component), /**
                 * Create the `Component`'s DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ VolumeLevel.prototype.createEl = function() {
                    var el = _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-level"
                    });
                    return el.appendChild(_Component.prototype.createEl.call(this, "span", {
                        className: "vjs-control-text"
                    })), el;
                }, VolumeLevel;
            }(Component$1);
            Component$1.registerComponent("VolumeLevel", VolumeLevel);
            /**
             * Volume level tooltips display a volume above or side by side the volume bar.
             *
             * @extends Component
             */ var VolumeLevelTooltip = /*#__PURE__*/ function(_Component) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The {@link Player} that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function VolumeLevelTooltip(player, options) {
                    var _this;
                    return (_this = _Component.call(this, player, options) || this).update = throttle(bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), _this.update), 30), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(VolumeLevelTooltip, _Component);
                /**
                 * Create the volume tooltip DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ var _proto = VolumeLevelTooltip.prototype;
                return _proto.createEl = function() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-tooltip"
                    }, {
                        "aria-hidden": "true"
                    });
                }, /**
                 * Updates the position of the tooltip relative to the `VolumeBar` and
                 * its content text.
                 *
                 * @param {Object} rangeBarRect
                 *        The `ClientRect` for the {@link VolumeBar} element.
                 *
                 * @param {number} rangeBarPoint
                 *        A number from 0 to 1, representing a horizontal/vertical reference point
                 *        from the left edge of the {@link VolumeBar}
                 *
                 * @param {boolean} vertical
                 *        Referees to the Volume control position
                 *        in the control bar{@link VolumeControl}
                 *
                 */ _proto.update = function(rangeBarRect, rangeBarPoint, vertical, content) {
                    if (!vertical) {
                        var tooltipRect = getBoundingClientRect(this.el_), playerRect = getBoundingClientRect(this.player_.el()), volumeBarPointPx = rangeBarRect.width * rangeBarPoint;
                        if (!playerRect || !tooltipRect) return;
                        var spaceLeftOfPoint = rangeBarRect.left - playerRect.left + volumeBarPointPx, spaceRightOfPoint = rangeBarRect.width - volumeBarPointPx + (playerRect.right - rangeBarRect.right), pullTooltipBy = tooltipRect.width / 2;
                        spaceLeftOfPoint < pullTooltipBy ? pullTooltipBy += pullTooltipBy - spaceLeftOfPoint : spaceRightOfPoint < pullTooltipBy && (pullTooltipBy = spaceRightOfPoint), pullTooltipBy < 0 ? pullTooltipBy = 0 : pullTooltipBy > tooltipRect.width && (pullTooltipBy = tooltipRect.width), this.el_.style.right = "-" + pullTooltipBy + "px";
                    }
                    this.write(content + "%");
                }, /**
                 * Write the volume to the tooltip DOM element.
                 *
                 * @param {string} content
                 *        The formatted volume for the tooltip.
                 */ _proto.write = function(content) {
                    textContent(this.el_, content);
                }, /**
                 * Updates the position of the volume tooltip relative to the `VolumeBar`.
                 *
                 * @param {Object} rangeBarRect
                 *        The `ClientRect` for the {@link VolumeBar} element.
                 *
                 * @param {number} rangeBarPoint
                 *        A number from 0 to 1, representing a horizontal/vertical reference point
                 *        from the left edge of the {@link VolumeBar}
                 *
                 * @param {boolean} vertical
                 *        Referees to the Volume control position
                 *        in the control bar{@link VolumeControl}
                 *
                 * @param {number} volume
                 *        The volume level to update the tooltip to
                 *
                 * @param {Function} cb
                 *        A function that will be called during the request animation frame
                 *        for tooltips that need to do additional animations from the default
                 */ _proto.updateVolume = function(rangeBarRect, rangeBarPoint, vertical, volume, cb) {
                    var _this2 = this;
                    this.requestNamedAnimationFrame("VolumeLevelTooltip#updateVolume", function() {
                        _this2.update(rangeBarRect, rangeBarPoint, vertical, volume.toFixed(0)), cb && cb();
                    });
                }, VolumeLevelTooltip;
            }(Component$1);
            Component$1.registerComponent("VolumeLevelTooltip", VolumeLevelTooltip);
            /**
             * The {@link MouseVolumeLevelDisplay} component tracks mouse movement over the
             * {@link VolumeControl}. It displays an indicator and a {@link VolumeLevelTooltip}
             * indicating the volume level which is represented by a given point in the
             * {@link VolumeBar}.
             *
             * @extends Component
             */ var MouseVolumeLevelDisplay = /*#__PURE__*/ function(_Component) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The {@link Player} that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function MouseVolumeLevelDisplay(player, options) {
                    var _this;
                    return (_this = _Component.call(this, player, options) || this).update = throttle(bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), _this.update), 30), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(MouseVolumeLevelDisplay, _Component);
                /**
                 * Create the DOM element for this class.
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ var _proto = MouseVolumeLevelDisplay.prototype;
                return _proto.createEl = function() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-mouse-display"
                    });
                }, /**
                 * Enquires updates to its own DOM as well as the DOM of its
                 * {@link VolumeLevelTooltip} child.
                 *
                 * @param {Object} rangeBarRect
                 *        The `ClientRect` for the {@link VolumeBar} element.
                 *
                 * @param {number} rangeBarPoint
                 *        A number from 0 to 1, representing a horizontal/vertical reference point
                 *        from the left edge of the {@link VolumeBar}
                 *
                 * @param {boolean} vertical
                 *        Referees to the Volume control position
                 *        in the control bar{@link VolumeControl}
                 *
                 */ _proto.update = function(rangeBarRect, rangeBarPoint, vertical) {
                    var _this2 = this;
                    this.getChild("volumeLevelTooltip").updateVolume(rangeBarRect, rangeBarPoint, vertical, 100 * rangeBarPoint, function() {
                        vertical ? _this2.el_.style.bottom = rangeBarRect.height * rangeBarPoint + "px" : _this2.el_.style.left = rangeBarRect.width * rangeBarPoint + "px";
                    });
                }, MouseVolumeLevelDisplay;
            }(Component$1);
            /**
             * Default options for `MouseVolumeLevelDisplay`
             *
             * @type {Object}
             * @private
             */ MouseVolumeLevelDisplay.prototype.options_ = {
                children: [
                    "volumeLevelTooltip"
                ]
            }, Component$1.registerComponent("MouseVolumeLevelDisplay", MouseVolumeLevelDisplay);
            /**
             * The bar that contains the volume level and can be clicked on to adjust the level
             *
             * @extends Slider
             */ var VolumeBar = /*#__PURE__*/ function(_Slider) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function VolumeBar(player, options) {
                    var _this;
                    return (_this = _Slider.call(this, player, options) || this).on("slideractive", function(e) {
                        return _this.updateLastVolume_(e);
                    }), _this.on(player, "volumechange", function(e) {
                        return _this.updateARIAAttributes(e);
                    }), player.ready(function() {
                        return _this.updateARIAAttributes();
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(VolumeBar, _Slider);
                /**
                 * Create the `Component`'s DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ var _proto = VolumeBar.prototype;
                return _proto.createEl = function() {
                    return _Slider.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-bar vjs-slider-bar"
                    }, {
                        "aria-label": this.localize("Volume Level"),
                        "aria-live": "polite"
                    });
                }, /**
                 * Handle mouse down on volume bar
                 *
                 * @param {EventTarget~Event} event
                 *        The `mousedown` event that caused this to run.
                 *
                 * @listens mousedown
                 */ _proto.handleMouseDown = function(event) {
                    isSingleLeftClick(event) && _Slider.prototype.handleMouseDown.call(this, event);
                }, /**
                 * Handle movement events on the {@link VolumeMenuButton}.
                 *
                 * @param {EventTarget~Event} event
                 *        The event that caused this function to run.
                 *
                 * @listens mousemove
                 */ _proto.handleMouseMove = function(event) {
                    var mouseVolumeLevelDisplay = this.getChild("mouseVolumeLevelDisplay");
                    if (mouseVolumeLevelDisplay) {
                        var volumeBarEl = this.el(), volumeBarRect = getBoundingClientRect(volumeBarEl), vertical = this.vertical(), volumeBarPoint = getPointerPosition(volumeBarEl, event);
                        // that it's possible to trigger this behavior outside the boundaries of
                        // the `VolumeBar`. This ensures we stay within it at all times.
                        volumeBarPoint = clamp(volumeBarPoint = vertical ? volumeBarPoint.y : volumeBarPoint.x, 0, 1), mouseVolumeLevelDisplay.update(volumeBarRect, volumeBarPoint, vertical);
                    }
                    isSingleLeftClick(event) && (this.checkMuted(), this.player_.volume(this.calculateDistance(event)));
                }, /**
                 * If the player is muted unmute it.
                 */ _proto.checkMuted = function() {
                    this.player_.muted() && this.player_.muted(!1);
                }, /**
                 * Get percent of volume level
                 *
                 * @return {number}
                 *         Volume level percent as a decimal number.
                 */ _proto.getPercent = function() {
                    return this.player_.muted() ? 0 : this.player_.volume();
                }, /**
                 * Increase volume level for keyboard users
                 */ _proto.stepForward = function() {
                    this.checkMuted(), this.player_.volume(this.player_.volume() + 0.1);
                }, /**
                 * Decrease volume level for keyboard users
                 */ _proto.stepBack = function() {
                    this.checkMuted(), this.player_.volume(this.player_.volume() - 0.1);
                }, /**
                 * Update ARIA accessibility attributes
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `volumechange` event that caused this function to run.
                 *
                 * @listens Player#volumechange
                 */ _proto.updateARIAAttributes = function(event) {
                    var ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();
                    this.el_.setAttribute("aria-valuenow", ariaValue), this.el_.setAttribute("aria-valuetext", ariaValue + "%");
                }, /**
                 * Returns the current value of the player volume as a percentage
                 *
                 * @private
                 */ _proto.volumeAsPercentage_ = function() {
                    return Math.round(100 * this.player_.volume());
                }, /**
                 * When user starts dragging the VolumeBar, store the volume and listen for
                 * the end of the drag. When the drag ends, if the volume was set to zero,
                 * set lastVolume to the stored volume.
                 *
                 * @listens slideractive
                 * @private
                 */ _proto.updateLastVolume_ = function() {
                    var _this2 = this, volumeBeforeDrag = this.player_.volume();
                    this.one("sliderinactive", function() {
                        0 === _this2.player_.volume() && _this2.player_.lastVolume_(volumeBeforeDrag);
                    });
                }, VolumeBar;
            }(Slider);
            /**
             * Default options for the `VolumeBar`
             *
             * @type {Object}
             * @private
             */ VolumeBar.prototype.options_ = {
                children: [
                    "volumeLevel"
                ],
                barName: "volumeLevel"
            }, IS_IOS || IS_ANDROID || VolumeBar.prototype.options_.children.splice(0, 0, "mouseVolumeLevelDisplay"), /**
             * Call the update event for this Slider when this event happens on the player.
             *
             * @type {string}
             */ VolumeBar.prototype.playerEvent = "volumechange", Component$1.registerComponent("VolumeBar", VolumeBar);
            /**
             * The component for controlling the volume level
             *
             * @extends Component
             */ var VolumeControl = /*#__PURE__*/ function(_Component) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options={}]
                 *        The key/value store of player options.
                 */ function VolumeControl(player, options) {
                    var _this;
                    return void 0 === options && (options = {}), options.vertical = options.vertical || !1, (void 0 === options.volumeBar || isPlain(options.volumeBar)) && (options.volumeBar = options.volumeBar || {}, options.volumeBar.vertical = options.vertical), _this = _Component.call(this, player, options) || this, checkVolumeSupport((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), player), _this.throttledHandleMouseMove = throttle(bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), _this.handleMouseMove), 30), _this.handleMouseUpHandler_ = function(e) {
                        return _this.handleMouseUp(e);
                    }, _this.on("mousedown", function(e) {
                        return _this.handleMouseDown(e);
                    }), _this.on("touchstart", function(e) {
                        return _this.handleMouseDown(e);
                    }), _this.on("mousemove", function(e) {
                        return _this.handleMouseMove(e);
                    }), // is dragging) or in focus we do not want to hide the VolumeBar
                    _this.on(_this.volumeBar, [
                        "focus",
                        "slideractive"
                    ], function() {
                        _this.volumeBar.addClass("vjs-slider-active"), _this.addClass("vjs-slider-active"), _this.trigger("slideractive");
                    }), _this.on(_this.volumeBar, [
                        "blur",
                        "sliderinactive"
                    ], function() {
                        _this.volumeBar.removeClass("vjs-slider-active"), _this.removeClass("vjs-slider-active"), _this.trigger("sliderinactive");
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(VolumeControl, _Component);
                /**
                 * Create the `Component`'s DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ var _proto = VolumeControl.prototype;
                return _proto.createEl = function() {
                    var orientationClass = "vjs-volume-horizontal";
                    return this.options_.vertical && (orientationClass = "vjs-volume-vertical"), _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-control vjs-control " + orientationClass
                    });
                }, /**
                 * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
                 *
                 * @param {EventTarget~Event} event
                 *        `mousedown` or `touchstart` event that triggered this function
                 *
                 * @listens mousedown
                 * @listens touchstart
                 */ _proto.handleMouseDown = function(event) {
                    var doc = this.el_.ownerDocument;
                    this.on(doc, "mousemove", this.throttledHandleMouseMove), this.on(doc, "touchmove", this.throttledHandleMouseMove), this.on(doc, "mouseup", this.handleMouseUpHandler_), this.on(doc, "touchend", this.handleMouseUpHandler_);
                }, /**
                 * Handle `mouseup` or `touchend` events on the `VolumeControl`.
                 *
                 * @param {EventTarget~Event} event
                 *        `mouseup` or `touchend` event that triggered this function.
                 *
                 * @listens touchend
                 * @listens mouseup
                 */ _proto.handleMouseUp = function(event) {
                    var doc = this.el_.ownerDocument;
                    this.off(doc, "mousemove", this.throttledHandleMouseMove), this.off(doc, "touchmove", this.throttledHandleMouseMove), this.off(doc, "mouseup", this.handleMouseUpHandler_), this.off(doc, "touchend", this.handleMouseUpHandler_);
                }, /**
                 * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
                 *
                 * @param {EventTarget~Event} event
                 *        `mousedown` or `touchstart` event that triggered this function
                 *
                 * @listens mousedown
                 * @listens touchstart
                 */ _proto.handleMouseMove = function(event) {
                    this.volumeBar.handleMouseMove(event);
                }, VolumeControl;
            }(Component$1);
            /**
             * Default options for the `VolumeControl`
             *
             * @type {Object}
             * @private
             */ VolumeControl.prototype.options_ = {
                children: [
                    "volumeBar"
                ]
            }, Component$1.registerComponent("VolumeControl", VolumeControl);
            /**
             * Check if muting volume is supported and if it isn't hide the mute toggle
             * button.
             *
             * @param {Component} self
             *        A reference to the mute toggle button
             *
             * @param {Player} player
             *        A reference to the player
             *
             * @private
             */ var checkMuteSupport = function(self1, player) {
                player.tech_ && !player.tech_.featuresMuteControl && self1.addClass("vjs-hidden"), self1.on(player, "loadstart", function() {
                    player.tech_.featuresMuteControl ? self1.removeClass("vjs-hidden") : self1.addClass("vjs-hidden");
                });
            }, MuteToggle = /*#__PURE__*/ function(_Button) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function MuteToggle(player, options) {
                    var _this;
                    return _this = _Button.call(this, player, options) || this, checkMuteSupport((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), player), _this.on(player, [
                        "loadstart",
                        "volumechange"
                    ], function(e) {
                        return _this.update(e);
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(MuteToggle, _Button);
                /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ var _proto = MuteToggle.prototype;
                return _proto.buildCSSClass = function() {
                    return "vjs-mute-control " + _Button.prototype.buildCSSClass.call(this);
                }, /**
                 * This gets called when an `MuteToggle` is "clicked". See
                 * {@link ClickableComponent} for more detailed information on what a click can be.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `keydown`, `tap`, or `click` event that caused this function to be
                 *        called.
                 *
                 * @listens tap
                 * @listens click
                 */ _proto.handleClick = function(event) {
                    var vol = this.player_.volume(), lastVolume = this.player_.lastVolume_();
                    0 === vol ? (this.player_.volume(lastVolume < 0.1 ? 0.1 : lastVolume), this.player_.muted(!1)) : this.player_.muted(!this.player_.muted());
                }, /**
                 * Update the `MuteToggle` button based on the state of `volume` and `muted`
                 * on the player.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The {@link Player#loadstart} event if this function was called
                 *        through an event.
                 *
                 * @listens Player#loadstart
                 * @listens Player#volumechange
                 */ _proto.update = function(event) {
                    this.updateIcon_(), this.updateControlText_();
                }, /**
                 * Update the appearance of the `MuteToggle` icon.
                 *
                 * Possible states (given `level` variable below):
                 * - 0: crossed out
                 * - 1: zero bars of volume
                 * - 2: one bar of volume
                 * - 3: two bars of volume
                 *
                 * @private
                 */ _proto.updateIcon_ = function() {
                    var vol = this.player_.volume(), level = 3;
                    IS_IOS && this.player_.tech_ && this.player_.tech_.el_ && this.player_.muted(this.player_.tech_.el_.muted), 0 === vol || this.player_.muted() ? level = 0 : vol < 0.33 ? level = 1 : vol < 0.67 && (level = 2);
                    for(var i = 0; i < 4; i++)removeClass(this.el_, "vjs-vol-" + i);
                    addClass(this.el_, "vjs-vol-" + level);
                }, /**
                 * If `muted` has changed on the player, update the control text
                 * (`title` attribute on `vjs-mute-control` element and content of
                 * `vjs-control-text` element).
                 *
                 * @private
                 */ _proto.updateControlText_ = function() {
                    var text = this.player_.muted() || 0 === this.player_.volume() ? "Unmute" : "Mute";
                    this.controlText() !== text && this.controlText(text);
                }, MuteToggle;
            }(Button);
            /**
             * The text that should display over the `MuteToggle`s controls. Added for localization.
             *
             * @type {string}
             * @private
             */ MuteToggle.prototype.controlText_ = "Mute", Component$1.registerComponent("MuteToggle", MuteToggle);
            /**
             * A Component to contain the MuteToggle and VolumeControl so that
             * they can work together.
             *
             * @extends Component
             */ var VolumePanel = /*#__PURE__*/ function(_Component) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options={}]
                 *        The key/value store of player options.
                 */ function VolumePanel(player, options) {
                    var _this;
                    return void 0 === options && (options = {}), void 0 !== options.inline ? options.inline = options.inline : options.inline = !0, (void 0 === options.volumeControl || isPlain(options.volumeControl)) && (options.volumeControl = options.volumeControl || {}, options.volumeControl.vertical = !options.inline), (_this = _Component.call(this, player, options) || this).handleKeyPressHandler_ = function(e) {
                        return _this.handleKeyPress(e);
                    }, _this.on(player, [
                        "loadstart"
                    ], function(e) {
                        return _this.volumePanelState_(e);
                    }), _this.on(_this.muteToggle, "keyup", function(e) {
                        return _this.handleKeyPress(e);
                    }), _this.on(_this.volumeControl, "keyup", function(e) {
                        return _this.handleVolumeControlKeyUp(e);
                    }), _this.on("keydown", function(e) {
                        return _this.handleKeyPress(e);
                    }), _this.on("mouseover", function(e) {
                        return _this.handleMouseOver(e);
                    }), _this.on("mouseout", function(e) {
                        return _this.handleMouseOut(e);
                    }), // is dragging) we do not want to hide the VolumeBar
                    _this.on(_this.volumeControl, [
                        "slideractive"
                    ], _this.sliderActive_), _this.on(_this.volumeControl, [
                        "sliderinactive"
                    ], _this.sliderInactive_), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(VolumePanel, _Component);
                /**
                 * Add vjs-slider-active class to the VolumePanel
                 *
                 * @listens VolumeControl#slideractive
                 * @private
                 */ var _proto = VolumePanel.prototype;
                return _proto.sliderActive_ = function() {
                    this.addClass("vjs-slider-active");
                }, /**
                 * Removes vjs-slider-active class to the VolumePanel
                 *
                 * @listens VolumeControl#sliderinactive
                 * @private
                 */ _proto.sliderInactive_ = function() {
                    this.removeClass("vjs-slider-active");
                }, /**
                 * Adds vjs-hidden or vjs-mute-toggle-only to the VolumePanel
                 * depending on MuteToggle and VolumeControl state
                 *
                 * @listens Player#loadstart
                 * @private
                 */ _proto.volumePanelState_ = function() {
                    this.volumeControl.hasClass("vjs-hidden") && this.muteToggle.hasClass("vjs-hidden") && this.addClass("vjs-hidden"), this.volumeControl.hasClass("vjs-hidden") && !this.muteToggle.hasClass("vjs-hidden") && this.addClass("vjs-mute-toggle-only");
                }, /**
                 * Create the `Component`'s DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ _proto.createEl = function() {
                    var orientationClass = "vjs-volume-panel-horizontal";
                    return this.options_.inline || (orientationClass = "vjs-volume-panel-vertical"), _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-panel vjs-control " + orientationClass
                    });
                }, /**
                 * Dispose of the `volume-panel` and all child components.
                 */ _proto.dispose = function() {
                    this.handleMouseOut(), _Component.prototype.dispose.call(this);
                }, /**
                 * Handles `keyup` events on the `VolumeControl`, looking for ESC, which closes
                 * the volume panel and sets focus on `MuteToggle`.
                 *
                 * @param {EventTarget~Event} event
                 *        The `keyup` event that caused this function to be called.
                 *
                 * @listens keyup
                 */ _proto.handleVolumeControlKeyUp = function(event) {
                    keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Esc") && this.muteToggle.focus();
                }, /**
                 * This gets called when a `VolumePanel` gains hover via a `mouseover` event.
                 * Turns on listening for `mouseover` event. When they happen it
                 * calls `this.handleMouseOver`.
                 *
                 * @param {EventTarget~Event} event
                 *        The `mouseover` event that caused this function to be called.
                 *
                 * @listens mouseover
                 */ _proto.handleMouseOver = function(event) {
                    this.addClass("vjs-hover"), on(global_document__WEBPACK_IMPORTED_MODULE_1___default(), "keyup", this.handleKeyPressHandler_);
                }, /**
                 * This gets called when a `VolumePanel` gains hover via a `mouseout` event.
                 * Turns on listening for `mouseout` event. When they happen it
                 * calls `this.handleMouseOut`.
                 *
                 * @param {EventTarget~Event} event
                 *        The `mouseout` event that caused this function to be called.
                 *
                 * @listens mouseout
                 */ _proto.handleMouseOut = function(event) {
                    this.removeClass("vjs-hover"), off(global_document__WEBPACK_IMPORTED_MODULE_1___default(), "keyup", this.handleKeyPressHandler_);
                }, /**
                 * Handles `keyup` event on the document or `keydown` event on the `VolumePanel`,
                 * looking for ESC, which hides the `VolumeControl`.
                 *
                 * @param {EventTarget~Event} event
                 *        The keypress that triggered this event.
                 *
                 * @listens keydown | keyup
                 */ _proto.handleKeyPress = function(event) {
                    keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Esc") && this.handleMouseOut();
                }, VolumePanel;
            }(Component$1);
            /**
             * Default options for the `VolumeControl`
             *
             * @type {Object}
             * @private
             */ VolumePanel.prototype.options_ = {
                children: [
                    "muteToggle",
                    "volumeControl"
                ]
            }, Component$1.registerComponent("VolumePanel", VolumePanel);
            /**
             * The Menu component is used to build popup menus, including subtitle and
             * captions selection menus.
             *
             * @extends Component
             */ var Menu = /*#__PURE__*/ function(_Component) {
                /**
                 * Create an instance of this class.
                 *
                 * @param {Player} player
                 *        the player that this component should attach to
                 *
                 * @param {Object} [options]
                 *        Object of option names and values
                 *
                 */ function Menu(player, options) {
                    var _this;
                    return _this = _Component.call(this, player, options) || this, options && (_this.menuButton_ = options.menuButton), _this.focusedChild_ = -1, _this.on("keydown", function(e) {
                        return _this.handleKeyDown(e);
                    }), _this.boundHandleBlur_ = function(e) {
                        return _this.handleBlur(e);
                    }, _this.boundHandleTapClick_ = function(e) {
                        return _this.handleTapClick(e);
                    }, _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(Menu, _Component);
                /**
                 * Add event listeners to the {@link MenuItem}.
                 *
                 * @param {Object} component
                 *        The instance of the `MenuItem` to add listeners to.
                 *
                 */ var _proto = Menu.prototype;
                return _proto.addEventListenerForItem = function(component) {
                    component instanceof Component$1 && (this.on(component, "blur", this.boundHandleBlur_), this.on(component, [
                        "tap",
                        "click"
                    ], this.boundHandleTapClick_));
                }, /**
                 * Remove event listeners from the {@link MenuItem}.
                 *
                 * @param {Object} component
                 *        The instance of the `MenuItem` to remove listeners.
                 *
                 */ _proto.removeEventListenerForItem = function(component) {
                    component instanceof Component$1 && (this.off(component, "blur", this.boundHandleBlur_), this.off(component, [
                        "tap",
                        "click"
                    ], this.boundHandleTapClick_));
                }, /**
                 * This method will be called indirectly when the component has been added
                 * before the component adds to the new menu instance by `addItem`.
                 * In this case, the original menu instance will remove the component
                 * by calling `removeChild`.
                 *
                 * @param {Object} component
                 *        The instance of the `MenuItem`
                 */ _proto.removeChild = function(component) {
                    "string" == typeof component && (component = this.getChild(component)), this.removeEventListenerForItem(component), _Component.prototype.removeChild.call(this, component);
                }, /**
                 * Add a {@link MenuItem} to the menu.
                 *
                 * @param {Object|string} component
                 *        The name or instance of the `MenuItem` to add.
                 *
                 */ _proto.addItem = function(component) {
                    var childComponent = this.addChild(component);
                    childComponent && this.addEventListenerForItem(childComponent);
                }, /**
                 * Create the `Menu`s DOM element.
                 *
                 * @return {Element}
                 *         the element that was created
                 */ _proto.createEl = function() {
                    var contentElType = this.options_.contentElType || "ul";
                    this.contentEl_ = createEl(contentElType, {
                        className: "vjs-menu-content"
                    }), this.contentEl_.setAttribute("role", "menu");
                    var el = _Component.prototype.createEl.call(this, "div", {
                        append: this.contentEl_,
                        className: "vjs-menu"
                    });
                    return el.appendChild(this.contentEl_), // where a click on the parent is significant
                    on(el, "click", function(event) {
                        event.preventDefault(), event.stopImmediatePropagation();
                    }), el;
                }, _proto.dispose = function() {
                    this.contentEl_ = null, this.boundHandleBlur_ = null, this.boundHandleTapClick_ = null, _Component.prototype.dispose.call(this);
                }, /**
                 * Called when a `MenuItem` loses focus.
                 *
                 * @param {EventTarget~Event} event
                 *        The `blur` event that caused this function to be called.
                 *
                 * @listens blur
                 */ _proto.handleBlur = function(event) {
                    var relatedTarget = event.relatedTarget || global_document__WEBPACK_IMPORTED_MODULE_1___default().activeElement; // Close menu popup when a user clicks outside the menu
                    if (!this.children().some(function(element) {
                        return element.el() === relatedTarget;
                    })) {
                        var btn = this.menuButton_;
                        btn && btn.buttonPressed_ && relatedTarget !== btn.el().firstChild && btn.unpressButton();
                    }
                }, /**
                 * Called when a `MenuItem` gets clicked or tapped.
                 *
                 * @param {EventTarget~Event} event
                 *        The `click` or `tap` event that caused this function to be called.
                 *
                 * @listens click,tap
                 */ _proto.handleTapClick = function(event) {
                    // Unpress the associated MenuButton, and move focus back to it
                    if (this.menuButton_) {
                        this.menuButton_.unpressButton();
                        var childComponents = this.children();
                        if (Array.isArray(childComponents)) {
                            var foundComponent = childComponents.filter(function(component) {
                                return component.el() === event.target;
                            })[0];
                            foundComponent && "CaptionSettingsMenuItem" !== foundComponent.name() && this.menuButton_.focus(); // don't focus menu button if item is a caption settings item
                        }
                    }
                }, /**
                 * Handle a `keydown` event on this menu. This listener is added in the constructor.
                 *
                 * @param {EventTarget~Event} event
                 *        A `keydown` event that happened on the menu.
                 *
                 * @listens keydown
                 */ _proto.handleKeyDown = function(event) {
                    // Left and Down Arrows
                    keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Left") || keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Down") ? (event.preventDefault(), event.stopPropagation(), this.stepForward()) : (keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Right") || keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Up")) && (event.preventDefault(), event.stopPropagation(), this.stepBack());
                }, /**
                 * Move to next (lower) menu item for keyboard users.
                 */ _proto.stepForward = function() {
                    var stepChild = 0;
                    void 0 !== this.focusedChild_ && (stepChild = this.focusedChild_ + 1), this.focus(stepChild);
                }, /**
                 * Move to previous (higher) menu item for keyboard users.
                 */ _proto.stepBack = function() {
                    var stepChild = 0;
                    void 0 !== this.focusedChild_ && (stepChild = this.focusedChild_ - 1), this.focus(stepChild);
                }, /**
                 * Set focus on a {@link MenuItem} in the `Menu`.
                 *
                 * @param {Object|string} [item=0]
                 *        Index of child item set focus on.
                 */ _proto.focus = function(item) {
                    void 0 === item && (item = 0);
                    var children = this.children().slice();
                    children.length && children[0].hasClass("vjs-menu-title") && children.shift(), children.length > 0 && (item < 0 ? item = 0 : item >= children.length && (item = children.length - 1), this.focusedChild_ = item, children[item].el_.focus());
                }, Menu;
            }(Component$1);
            Component$1.registerComponent("Menu", Menu);
            /**
             * A `MenuButton` class for any popup {@link Menu}.
             *
             * @extends Component
             */ var MenuButton = /*#__PURE__*/ function(_Component) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options={}]
                 *        The key/value store of player options.
                 */ function MenuButton(player, options) {
                    void 0 === options && (options = {}), (_this = _Component.call(this, player, options) || this).menuButton_ = new Button(player, options), _this.menuButton_.controlText(_this.controlText_), _this.menuButton_.el_.setAttribute("aria-haspopup", "true");
                    var _this, buttonClass = Button.prototype.buildCSSClass();
                    _this.menuButton_.el_.className = _this.buildCSSClass() + " " + buttonClass, _this.menuButton_.removeClass("vjs-control"), _this.addChild(_this.menuButton_), _this.update(), _this.enabled_ = !0;
                    var handleClick = function(e) {
                        return _this.handleClick(e);
                    };
                    return _this.handleMenuKeyUp_ = function(e) {
                        return _this.handleMenuKeyUp(e);
                    }, _this.on(_this.menuButton_, "tap", handleClick), _this.on(_this.menuButton_, "click", handleClick), _this.on(_this.menuButton_, "keydown", function(e) {
                        return _this.handleKeyDown(e);
                    }), _this.on(_this.menuButton_, "mouseenter", function() {
                        _this.addClass("vjs-hover"), _this.menu.show(), on(global_document__WEBPACK_IMPORTED_MODULE_1___default(), "keyup", _this.handleMenuKeyUp_);
                    }), _this.on("mouseleave", function(e) {
                        return _this.handleMouseLeave(e);
                    }), _this.on("keydown", function(e) {
                        return _this.handleSubmenuKeyDown(e);
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(MenuButton, _Component);
                /**
                 * Update the menu based on the current state of its items.
                 */ var _proto = MenuButton.prototype;
                return _proto.update = function() {
                    var menu = this.createMenu();
                    this.menu && (this.menu.dispose(), this.removeChild(this.menu)), this.menu = menu, this.addChild(menu), /**
                     * Track the state of the menu button
                     *
                     * @type {Boolean}
                     * @private
                     */ this.buttonPressed_ = !1, this.menuButton_.el_.setAttribute("aria-expanded", "false"), this.items && this.items.length <= this.hideThreshold_ ? this.hide() : this.show();
                }, /**
                 * Create the menu and add all items to it.
                 *
                 * @return {Menu}
                 *         The constructed menu
                 */ _proto.createMenu = function() {
                    var menu = new Menu(this.player_, {
                        menuButton: this
                    });
                    if (/**
                     * Hide the menu if the number of items is less than or equal to this threshold. This defaults
                     * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list
                     * it here because every time we run `createMenu` we need to reset the value.
                     *
                     * @protected
                     * @type {Number}
                     */ this.hideThreshold_ = 0, this.options_.title) {
                        var titleEl = createEl("li", {
                            className: "vjs-menu-title",
                            textContent: toTitleCase$1(this.options_.title),
                            tabIndex: -1
                        }), titleComponent = new Component$1(this.player_, {
                            el: titleEl
                        });
                        menu.addItem(titleComponent);
                    }
                    if (this.items = this.createItems(), this.items) // Add menu items to the menu
                    for(var i = 0; i < this.items.length; i++)menu.addItem(this.items[i]);
                    return menu;
                }, /**
                 * Create the list of menu items. Specific to each subclass.
                 *
                 * @abstract
                 */ _proto.createItems = function() {}, /**
                 * Create the `MenuButtons`s DOM element.
                 *
                 * @return {Element}
                 *         The element that gets created.
                 */ _proto.createEl = function() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: this.buildWrapperCSSClass()
                    }, {});
                }, /**
                 * Allow sub components to stack CSS class names for the wrapper element
                 *
                 * @return {string}
                 *         The constructed wrapper DOM `className`
                 */ _proto.buildWrapperCSSClass = function() {
                    var menuButtonClass = "vjs-menu-button"; // If the inline option is passed, we want to use different styles altogether.
                    return !0 === this.options_.inline ? menuButtonClass += "-inline" : menuButtonClass += "-popup", "vjs-menu-button " + menuButtonClass + " " + Button.prototype.buildCSSClass() + " " + _Component.prototype.buildCSSClass.call(this);
                }, /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ _proto.buildCSSClass = function() {
                    var menuButtonClass = "vjs-menu-button"; // If the inline option is passed, we want to use different styles altogether.
                    return !0 === this.options_.inline ? menuButtonClass += "-inline" : menuButtonClass += "-popup", "vjs-menu-button " + menuButtonClass + " " + _Component.prototype.buildCSSClass.call(this);
                }, /**
                 * Get or set the localized control text that will be used for accessibility.
                 *
                 * > NOTE: This will come from the internal `menuButton_` element.
                 *
                 * @param {string} [text]
                 *        Control text for element.
                 *
                 * @param {Element} [el=this.menuButton_.el()]
                 *        Element to set the title on.
                 *
                 * @return {string}
                 *         - The control text when getting
                 */ _proto.controlText = function(text, el) {
                    return void 0 === el && (el = this.menuButton_.el()), this.menuButton_.controlText(text, el);
                }, /**
                 * Dispose of the `menu-button` and all child components.
                 */ _proto.dispose = function() {
                    this.handleMouseLeave(), _Component.prototype.dispose.call(this);
                }, /**
                 * Handle a click on a `MenuButton`.
                 * See {@link ClickableComponent#handleClick} for instances where this is called.
                 *
                 * @param {EventTarget~Event} event
                 *        The `keydown`, `tap`, or `click` event that caused this function to be
                 *        called.
                 *
                 * @listens tap
                 * @listens click
                 */ _proto.handleClick = function(event) {
                    this.buttonPressed_ ? this.unpressButton() : this.pressButton();
                }, /**
                 * Handle `mouseleave` for `MenuButton`.
                 *
                 * @param {EventTarget~Event} event
                 *        The `mouseleave` event that caused this function to be called.
                 *
                 * @listens mouseleave
                 */ _proto.handleMouseLeave = function(event) {
                    this.removeClass("vjs-hover"), off(global_document__WEBPACK_IMPORTED_MODULE_1___default(), "keyup", this.handleMenuKeyUp_);
                }, /**
                 * Set the focus to the actual button, not to this element
                 */ _proto.focus = function() {
                    this.menuButton_.focus();
                }, /**
                 * Remove the focus from the actual button, not this element
                 */ _proto.blur = function() {
                    this.menuButton_.blur();
                }, /**
                 * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See
                 * {@link ClickableComponent#handleKeyDown} for instances where this is called.
                 *
                 * @param {EventTarget~Event} event
                 *        The `keydown` event that caused this function to be called.
                 *
                 * @listens keydown
                 */ _proto.handleKeyDown = function(event) {
                    // Escape or Tab unpress the 'button'
                    keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Esc") || keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Tab") ? (this.buttonPressed_ && this.unpressButton(), keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Tab") || (event.preventDefault(), this.menuButton_.focus())) : (keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Up") || keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Down")) && !this.buttonPressed_ && (event.preventDefault(), this.pressButton());
                }, /**
                 * Handle a `keyup` event on a `MenuButton`. The listener for this is added in
                 * the constructor.
                 *
                 * @param {EventTarget~Event} event
                 *        Key press event
                 *
                 * @listens keyup
                 */ _proto.handleMenuKeyUp = function(event) {
                    // Escape hides popup menu
                    (keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Esc") || keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Tab")) && this.removeClass("vjs-hover");
                }, /**
                 * This method name now delegates to `handleSubmenuKeyDown`. This means
                 * anyone calling `handleSubmenuKeyPress` will not see their method calls
                 * stop working.
                 *
                 * @param {EventTarget~Event} event
                 *        The event that caused this function to be called.
                 */ _proto.handleSubmenuKeyPress = function(event) {
                    this.handleSubmenuKeyDown(event);
                }, /**
                 * Handle a `keydown` event on a sub-menu. The listener for this is added in
                 * the constructor.
                 *
                 * @param {EventTarget~Event} event
                 *        Key press event
                 *
                 * @listens keydown
                 */ _proto.handleSubmenuKeyDown = function(event) {
                    // Escape or Tab unpress the 'button'
                    (keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Esc") || keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Tab")) && (this.buttonPressed_ && this.unpressButton(), keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Tab") || (event.preventDefault(), this.menuButton_.focus()));
                }, /**
                 * Put the current `MenuButton` into a pressed state.
                 */ _proto.pressButton = function() {
                    this.enabled_ && (this.buttonPressed_ = !0, this.menu.show(), this.menu.lockShowing(), this.menuButton_.el_.setAttribute("aria-expanded", "true"), IS_IOS && isInFrame() || this.menu.focus());
                }, /**
                 * Take the current `MenuButton` out of a pressed state.
                 */ _proto.unpressButton = function() {
                    this.enabled_ && (this.buttonPressed_ = !1, this.menu.unlockShowing(), this.menu.hide(), this.menuButton_.el_.setAttribute("aria-expanded", "false"));
                }, /**
                 * Disable the `MenuButton`. Don't allow it to be clicked.
                 */ _proto.disable = function() {
                    this.unpressButton(), this.enabled_ = !1, this.addClass("vjs-disabled"), this.menuButton_.disable();
                }, /**
                 * Enable the `MenuButton`. Allow it to be clicked.
                 */ _proto.enable = function() {
                    this.enabled_ = !0, this.removeClass("vjs-disabled"), this.menuButton_.enable();
                }, MenuButton;
            }(Component$1);
            Component$1.registerComponent("MenuButton", MenuButton);
            /**
             * The base class for buttons that toggle specific  track types (e.g. subtitles).
             *
             * @extends MenuButton
             */ var TrackButton = /*#__PURE__*/ function(_MenuButton) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function TrackButton(player, options) {
                    var _this, tracks = options.tracks;
                    if ((_this = _MenuButton.call(this, player, options) || this).items.length <= 1 && _this.hide(), !tracks) return (0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this);
                    var updateHandler = bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), _this.update);
                    return tracks.addEventListener("removetrack", updateHandler), tracks.addEventListener("addtrack", updateHandler), tracks.addEventListener("labelchange", updateHandler), _this.player_.on("ready", updateHandler), _this.player_.on("dispose", function() {
                        tracks.removeEventListener("removetrack", updateHandler), tracks.removeEventListener("addtrack", updateHandler), tracks.removeEventListener("labelchange", updateHandler);
                    }), _this;
                }
                return (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(TrackButton, _MenuButton), TrackButton;
            }(MenuButton);
            Component$1.registerComponent("TrackButton", TrackButton);
            /**
             * @file menu-keys.js
             */ /**
             * All keys used for operation of a menu (`MenuButton`, `Menu`, and `MenuItem`)
             * Note that 'Enter' and 'Space' are not included here (otherwise they would
             * prevent the `MenuButton` and `MenuItem` from being keyboard-clickable)
             * @typedef MenuKeys
             * @array
             */ var MenuKeys = [
                "Tab",
                "Esc",
                "Up",
                "Down",
                "Right",
                "Left"
            ], MenuItem = /*#__PURE__*/ function(_ClickableComponent) {
                /**
                 * Creates an instance of the this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options={}]
                 *        The key/value store of player options.
                 *
                 */ function MenuItem(player, options) {
                    var _this;
                    return (_this = _ClickableComponent.call(this, player, options) || this).selectable = options.selectable, _this.isSelected_ = options.selected || !1, _this.multiSelectable = options.multiSelectable, _this.selected(_this.isSelected_), _this.selectable ? _this.multiSelectable ? _this.el_.setAttribute("role", "menuitemcheckbox") : _this.el_.setAttribute("role", "menuitemradio") : _this.el_.setAttribute("role", "menuitem"), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(MenuItem, _ClickableComponent);
                /**
                 * Create the `MenuItem's DOM element
                 *
                 * @param {string} [type=li]
                 *        Element's node type, not actually used, always set to `li`.
                 *
                 * @param {Object} [props={}]
                 *        An object of properties that should be set on the element
                 *
                 * @param {Object} [attrs={}]
                 *        An object of attributes that should be set on the element
                 *
                 * @return {Element}
                 *         The element that gets created.
                 */ var _proto = MenuItem.prototype;
                return _proto.createEl = function(type, props, attrs) {
                    // The control is textual, not just an icon
                    this.nonIconControl = !0;
                    var el = _ClickableComponent.prototype.createEl.call(this, "li", assign({
                        className: "vjs-menu-item",
                        tabIndex: -1
                    }, props), attrs); // swap icon with menu item text.
                    return el.replaceChild(createEl("span", {
                        className: "vjs-menu-item-text",
                        textContent: this.localize(this.options_.label)
                    }), el.querySelector(".vjs-icon-placeholder")), el;
                }, /**
                 * Ignore keys which are used by the menu, but pass any other ones up. See
                 * {@link ClickableComponent#handleKeyDown} for instances where this is called.
                 *
                 * @param {EventTarget~Event} event
                 *        The `keydown` event that caused this function to be called.
                 *
                 * @listens keydown
                 */ _proto.handleKeyDown = function(event) {
                    MenuKeys.some(function(key) {
                        return keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, key);
                    }) || // Pass keydown handling up for unused keys
                    _ClickableComponent.prototype.handleKeyDown.call(this, event);
                }, /**
                 * Any click on a `MenuItem` puts it into the selected state.
                 * See {@link ClickableComponent#handleClick} for instances where this is called.
                 *
                 * @param {EventTarget~Event} event
                 *        The `keydown`, `tap`, or `click` event that caused this function to be
                 *        called.
                 *
                 * @listens tap
                 * @listens click
                 */ _proto.handleClick = function(event) {
                    this.selected(!0);
                }, /**
                 * Set the state for this menu item as selected or not.
                 *
                 * @param {boolean} selected
                 *        if the menu item is selected or not
                 */ _proto.selected = function(_selected) {
                    this.selectable && (_selected ? (this.addClass("vjs-selected"), this.el_.setAttribute("aria-checked", "true"), // so indicate selected state to screen reader in the control text.
                    this.controlText(", selected"), this.isSelected_ = !0) : (this.removeClass("vjs-selected"), this.el_.setAttribute("aria-checked", "false"), this.controlText(""), this.isSelected_ = !1));
                }, MenuItem;
            }(ClickableComponent);
            Component$1.registerComponent("MenuItem", MenuItem);
            /**
             * The specific menu item type for selecting a language within a text track kind
             *
             * @extends MenuItem
             */ var TextTrackMenuItem = /*#__PURE__*/ function(_MenuItem) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function TextTrackMenuItem(player, options) {
                    var _this, event, track = options.track, tracks = player.textTracks();
                    options.label = track.label || track.language || "Unknown", options.selected = "showing" === track.mode, (_this = _MenuItem.call(this, player, options) || this).track = track, // out empty kinds.
                    _this.kinds = (options.kinds || [
                        options.kind || _this.track.kind
                    ]).filter(Boolean);
                    var changeHandler = function() {
                        for(var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                        _this.handleTracksChange.apply((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), args);
                    }, selectedLanguageChangeHandler = function() {
                        for(var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
                        _this.handleSelectedLanguageChange.apply((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), args);
                    };
                    return player.on([
                        "loadstart",
                        "texttrackchange"
                    ], changeHandler), tracks.addEventListener("change", changeHandler), tracks.addEventListener("selectedlanguagechange", selectedLanguageChangeHandler), _this.on("dispose", function() {
                        player.off([
                            "loadstart",
                            "texttrackchange"
                        ], changeHandler), tracks.removeEventListener("change", changeHandler), tracks.removeEventListener("selectedlanguagechange", selectedLanguageChangeHandler);
                    }), void 0 === tracks.onchange && _this.on([
                        "tap",
                        "click"
                    ], function() {
                        if ("object" != typeof global_window__WEBPACK_IMPORTED_MODULE_0___default().Event) // Android 2.3 throws an Illegal Constructor error for window.Event
                        try {
                            event = new (global_window__WEBPACK_IMPORTED_MODULE_0___default()).Event("change");
                        } catch (err) {
                        // continue regardless of error
                        }
                        event || (event = global_document__WEBPACK_IMPORTED_MODULE_1___default().createEvent("Event")).initEvent("change", !0, !0), tracks.dispatchEvent(event);
                    }), _this.handleTracksChange(), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(TextTrackMenuItem, _MenuItem);
                /**
                 * This gets called when an `TextTrackMenuItem` is "clicked". See
                 * {@link ClickableComponent} for more detailed information on what a click can be.
                 *
                 * @param {EventTarget~Event} event
                 *        The `keydown`, `tap`, or `click` event that caused this function to be
                 *        called.
                 *
                 * @listens tap
                 * @listens click
                 */ var _proto = TextTrackMenuItem.prototype;
                return _proto.handleClick = function(event) {
                    var referenceTrack = this.track, tracks = this.player_.textTracks();
                    if (_MenuItem.prototype.handleClick.call(this, event), tracks) for(var i = 0; i < tracks.length; i++){
                        var track = tracks[i]; // If the track from the text tracks list is not of the right kind,
                        // skip it. We do not want to affect tracks of incompatible kind(s).
                        -1 !== this.kinds.indexOf(track.kind) && (track === referenceTrack ? "showing" !== track.mode && (track.mode = "showing") : "disabled" !== track.mode && (track.mode = "disabled")); // If this text track is the component's track and it is not showing,
                    }
                }, /**
                 * Handle text track list change
                 *
                 * @param {EventTarget~Event} event
                 *        The `change` event that caused this function to be called.
                 *
                 * @listens TextTrackList#change
                 */ _proto.handleTracksChange = function(event) {
                    var shouldBeSelected = "showing" === this.track.mode; // Prevent redundant selected() calls because they may cause
                    // screen readers to read the appended control text unnecessarily
                    shouldBeSelected !== this.isSelected_ && this.selected(shouldBeSelected);
                }, _proto.handleSelectedLanguageChange = function(event) {
                    if ("showing" === this.track.mode) {
                        var selectedLanguage = this.player_.cache_.selectedLanguage; // Don't replace the kind of track across the same language
                        selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind || (this.player_.cache_.selectedLanguage = {
                            enabled: !0,
                            language: this.track.language,
                            kind: this.track.kind
                        });
                    }
                }, _proto.dispose = function() {
                    // remove reference to track object on dispose
                    this.track = null, _MenuItem.prototype.dispose.call(this);
                }, TextTrackMenuItem;
            }(MenuItem);
            Component$1.registerComponent("TextTrackMenuItem", TextTrackMenuItem);
            /**
             * A special menu item for turning of a specific type of text track
             *
             * @extends TextTrackMenuItem
             */ var OffTextTrackMenuItem = /*#__PURE__*/ function(_TextTrackMenuItem) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function OffTextTrackMenuItem(player, options) {
                    return(// Create pseudo track info
                    // Requires options['kind']
                    options.track = {
                        player: player,
                        // it is no longer necessary to store `kind` or `kinds` on the track itself
                        // since they are now stored in the `kinds` property of all instances of
                        // TextTrackMenuItem, but this will remain for backwards compatibility
                        kind: options.kind,
                        kinds: options.kinds,
                        default: !1,
                        mode: "disabled"
                    }, options.kinds || (options.kinds = [
                        options.kind
                    ]), options.label ? options.track.label = options.label : options.track.label = options.kinds.join(" and ") + " off", options.selectable = !0, options.multiSelectable = !1, _TextTrackMenuItem.call(this, player, options) || this);
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(OffTextTrackMenuItem, _TextTrackMenuItem);
                /**
                 * Handle text track change
                 *
                 * @param {EventTarget~Event} event
                 *        The event that caused this function to run
                 */ var _proto = OffTextTrackMenuItem.prototype;
                return _proto.handleTracksChange = function(event) {
                    for(var tracks = this.player().textTracks(), shouldBeSelected = !0, i = 0, l = tracks.length; i < l; i++){
                        var track = tracks[i];
                        if (this.options_.kinds.indexOf(track.kind) > -1 && "showing" === track.mode) {
                            shouldBeSelected = !1;
                            break;
                        }
                    } // Prevent redundant selected() calls because they may cause
                    // screen readers to read the appended control text unnecessarily
                    shouldBeSelected !== this.isSelected_ && this.selected(shouldBeSelected);
                }, _proto.handleSelectedLanguageChange = function(event) {
                    for(var tracks = this.player().textTracks(), allHidden = !0, i = 0, l = tracks.length; i < l; i++){
                        var track = tracks[i];
                        if ([
                            "captions",
                            "descriptions",
                            "subtitles"
                        ].indexOf(track.kind) > -1 && "showing" === track.mode) {
                            allHidden = !1;
                            break;
                        }
                    }
                    allHidden && (this.player_.cache_.selectedLanguage = {
                        enabled: !1
                    });
                }, OffTextTrackMenuItem;
            }(TextTrackMenuItem);
            Component$1.registerComponent("OffTextTrackMenuItem", OffTextTrackMenuItem);
            /**
             * The base class for buttons that toggle specific text track types (e.g. subtitles)
             *
             * @extends MenuButton
             */ var TextTrackButton = /*#__PURE__*/ function(_TrackButton) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options={}]
                 *        The key/value store of player options.
                 */ function TextTrackButton(player, options) {
                    return void 0 === options && (options = {}), options.tracks = player.textTracks(), _TrackButton.call(this, player, options) || this;
                }
                return (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(TextTrackButton, _TrackButton), TextTrackButton.prototype.createItems = function(items, TrackMenuItem) {
                    void 0 === items && (items = []), void 0 === TrackMenuItem && (TrackMenuItem = TextTrackMenuItem), this.label_ && (label = this.label_ + " off"), items.push(new OffTextTrackMenuItem(this.player_, {
                        kinds: this.kinds_,
                        kind: this.kind_,
                        label: label
                    })), this.hideThreshold_ += 1;
                    var label, tracks = this.player_.textTracks();
                    Array.isArray(this.kinds_) || (this.kinds_ = [
                        this.kind_
                    ]);
                    for(var i = 0; i < tracks.length; i++){
                        var track = tracks[i]; // only add tracks that are of an appropriate kind and have a label
                        if (this.kinds_.indexOf(track.kind) > -1) {
                            var item = new TrackMenuItem(this.player_, {
                                track: track,
                                kinds: this.kinds_,
                                kind: this.kind_,
                                // MenuItem is selectable
                                selectable: !0,
                                // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
                                multiSelectable: !1
                            });
                            item.addClass("vjs-" + track.kind + "-menu-item"), items.push(item);
                        }
                    }
                    return items;
                }, TextTrackButton;
            }(TrackButton);
            Component$1.registerComponent("TextTrackButton", TextTrackButton);
            /**
             * The chapter track menu item
             *
             * @extends MenuItem
             */ var ChaptersTrackMenuItem = /*#__PURE__*/ function(_MenuItem) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function ChaptersTrackMenuItem(player, options) {
                    var _this, track = options.track, cue = options.cue, currentTime = player.currentTime();
                    return options.selectable = !0, options.multiSelectable = !1, options.label = cue.text, options.selected = cue.startTime <= currentTime && currentTime < cue.endTime, (_this = _MenuItem.call(this, player, options) || this).track = track, _this.cue = cue, track.addEventListener("cuechange", bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), _this.update)), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(ChaptersTrackMenuItem, _MenuItem);
                /**
                 * This gets called when an `ChaptersTrackMenuItem` is "clicked". See
                 * {@link ClickableComponent} for more detailed information on what a click can be.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `keydown`, `tap`, or `click` event that caused this function to be
                 *        called.
                 *
                 * @listens tap
                 * @listens click
                 */ var _proto = ChaptersTrackMenuItem.prototype;
                return _proto.handleClick = function(event) {
                    _MenuItem.prototype.handleClick.call(this), this.player_.currentTime(this.cue.startTime), this.update(this.cue.startTime);
                }, /**
                 * Update chapter menu item
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `cuechange` event that caused this function to run.
                 *
                 * @listens TextTrack#cuechange
                 */ _proto.update = function(event) {
                    var cue = this.cue, currentTime = this.player_.currentTime();
                    this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);
                }, ChaptersTrackMenuItem;
            }(MenuItem);
            Component$1.registerComponent("ChaptersTrackMenuItem", ChaptersTrackMenuItem);
            /**
             * The button component for toggling and selecting chapters
             * Chapters act much differently than other text tracks
             * Cues are navigation vs. other tracks of alternative languages
             *
             * @extends TextTrackButton
             */ var ChaptersButton = /*#__PURE__*/ function(_TextTrackButton) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 *
                 * @param {Component~ReadyCallback} [ready]
                 *        The function to call when this function is ready.
                 */ function ChaptersButton(player, options, ready) {
                    return _TextTrackButton.call(this, player, options, ready) || this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(ChaptersButton, _TextTrackButton);
                /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ var _proto = ChaptersButton.prototype;
                return _proto.buildCSSClass = function() {
                    return "vjs-chapters-button " + _TextTrackButton.prototype.buildCSSClass.call(this);
                }, _proto.buildWrapperCSSClass = function() {
                    return "vjs-chapters-button " + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
                }, /**
                 * Update the menu based on the current state of its items.
                 *
                 * @param {EventTarget~Event} [event]
                 *        An event that triggered this function to run.
                 *
                 * @listens TextTrackList#addtrack
                 * @listens TextTrackList#removetrack
                 * @listens TextTrackList#change
                 */ _proto.update = function(event) {
                    (!this.track_ || event && ("addtrack" === event.type || "removetrack" === event.type)) && this.setTrack(this.findChaptersTrack()), _TextTrackButton.prototype.update.call(this);
                }, /**
                 * Set the currently selected track for the chapters button.
                 *
                 * @param {TextTrack} track
                 *        The new track to select. Nothing will change if this is the currently selected
                 *        track.
                 */ _proto.setTrack = function(track) {
                    if (this.track_ !== track) {
                        if (this.updateHandler_ || (this.updateHandler_ = this.update.bind(this)), this.track_) {
                            var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
                            remoteTextTrackEl && remoteTextTrackEl.removeEventListener("load", this.updateHandler_), this.track_ = null;
                        }
                        if (this.track_ = track, this.track_) {
                            this.track_.mode = "hidden";
                            var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
                            _remoteTextTrackEl && _remoteTextTrackEl.addEventListener("load", this.updateHandler_);
                        }
                    }
                }, /**
                 * Find the track object that is currently in use by this ChaptersButton
                 *
                 * @return {TextTrack|undefined}
                 *         The current track or undefined if none was found.
                 */ _proto.findChaptersTrack = function() {
                    for(var tracks = this.player_.textTracks() || [], i = tracks.length - 1; i >= 0; i--){
                        // We will always choose the last track as our chaptersTrack
                        var track = tracks[i];
                        if (track.kind === this.kind_) return track;
                    }
                }, /**
                 * Get the caption for the ChaptersButton based on the track label. This will also
                 * use the current tracks localized kind as a fallback if a label does not exist.
                 *
                 * @return {string}
                 *         The tracks current label or the localized track kind.
                 */ _proto.getMenuCaption = function() {
                    return this.track_ && this.track_.label ? this.track_.label : this.localize(toTitleCase$1(this.kind_));
                }, /**
                 * Create menu from chapter track
                 *
                 * @return {Menu}
                 *         New menu for the chapter buttons
                 */ _proto.createMenu = function() {
                    return this.options_.title = this.getMenuCaption(), _TextTrackButton.prototype.createMenu.call(this);
                }, /**
                 * Create a menu item for each text track
                 *
                 * @return {TextTrackMenuItem[]}
                 *         Array of menu items
                 */ _proto.createItems = function() {
                    var items = [];
                    if (!this.track_) return items;
                    var cues = this.track_.cues;
                    if (!cues) return items;
                    for(var i = 0, l = cues.length; i < l; i++){
                        var cue = cues[i], mi = new ChaptersTrackMenuItem(this.player_, {
                            track: this.track_,
                            cue: cue
                        });
                        items.push(mi);
                    }
                    return items;
                }, ChaptersButton;
            }(TextTrackButton);
            /**
             * `kind` of TextTrack to look for to associate it with this menu.
             *
             * @type {string}
             * @private
             */ ChaptersButton.prototype.kind_ = "chapters", /**
             * The text that should display over the `ChaptersButton`s controls. Added for localization.
             *
             * @type {string}
             * @private
             */ ChaptersButton.prototype.controlText_ = "Chapters", Component$1.registerComponent("ChaptersButton", ChaptersButton);
            /**
             * The button component for toggling and selecting descriptions
             *
             * @extends TextTrackButton
             */ var DescriptionsButton = /*#__PURE__*/ function(_TextTrackButton) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 *
                 * @param {Component~ReadyCallback} [ready]
                 *        The function to call when this component is ready.
                 */ function DescriptionsButton(player, options, ready) {
                    _this = _TextTrackButton.call(this, player, options, ready) || this;
                    var _this, tracks = player.textTracks(), changeHandler = bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), _this.handleTracksChange);
                    return tracks.addEventListener("change", changeHandler), _this.on("dispose", function() {
                        tracks.removeEventListener("change", changeHandler);
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(DescriptionsButton, _TextTrackButton);
                /**
                 * Handle text track change
                 *
                 * @param {EventTarget~Event} event
                 *        The event that caused this function to run
                 *
                 * @listens TextTrackList#change
                 */ var _proto = DescriptionsButton.prototype;
                return _proto.handleTracksChange = function(event) {
                    for(var tracks = this.player().textTracks(), disabled = !1, i = 0, l = tracks.length; i < l; i++){
                        var track = tracks[i];
                        if (track.kind !== this.kind_ && "showing" === track.mode) {
                            disabled = !0;
                            break;
                        }
                    } // If another track is showing, disable this menu button
                    disabled ? this.disable() : this.enable();
                }, /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ _proto.buildCSSClass = function() {
                    return "vjs-descriptions-button " + _TextTrackButton.prototype.buildCSSClass.call(this);
                }, _proto.buildWrapperCSSClass = function() {
                    return "vjs-descriptions-button " + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
                }, DescriptionsButton;
            }(TextTrackButton);
            /**
             * `kind` of TextTrack to look for to associate it with this menu.
             *
             * @type {string}
             * @private
             */ DescriptionsButton.prototype.kind_ = "descriptions", /**
             * The text that should display over the `DescriptionsButton`s controls. Added for localization.
             *
             * @type {string}
             * @private
             */ DescriptionsButton.prototype.controlText_ = "Descriptions", Component$1.registerComponent("DescriptionsButton", DescriptionsButton);
            /**
             * The button component for toggling and selecting subtitles
             *
             * @extends TextTrackButton
             */ var SubtitlesButton = /*#__PURE__*/ function(_TextTrackButton) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 *
                 * @param {Component~ReadyCallback} [ready]
                 *        The function to call when this component is ready.
                 */ function SubtitlesButton(player, options, ready) {
                    return _TextTrackButton.call(this, player, options, ready) || this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(SubtitlesButton, _TextTrackButton);
                /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ var _proto = SubtitlesButton.prototype;
                return _proto.buildCSSClass = function() {
                    return "vjs-subtitles-button " + _TextTrackButton.prototype.buildCSSClass.call(this);
                }, _proto.buildWrapperCSSClass = function() {
                    return "vjs-subtitles-button " + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
                }, SubtitlesButton;
            }(TextTrackButton);
            /**
             * `kind` of TextTrack to look for to associate it with this menu.
             *
             * @type {string}
             * @private
             */ SubtitlesButton.prototype.kind_ = "subtitles", /**
             * The text that should display over the `SubtitlesButton`s controls. Added for localization.
             *
             * @type {string}
             * @private
             */ SubtitlesButton.prototype.controlText_ = "Subtitles", Component$1.registerComponent("SubtitlesButton", SubtitlesButton);
            /**
             * The menu item for caption track settings menu
             *
             * @extends TextTrackMenuItem
             */ var CaptionSettingsMenuItem = /*#__PURE__*/ function(_TextTrackMenuItem) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function CaptionSettingsMenuItem(player, options) {
                    var _this;
                    return options.track = {
                        player: player,
                        kind: options.kind,
                        label: options.kind + " settings",
                        selectable: !1,
                        default: !1,
                        mode: "disabled"
                    }, options.selectable = !1, options.name = "CaptionSettingsMenuItem", (_this = _TextTrackMenuItem.call(this, player, options) || this).addClass("vjs-texttrack-settings"), _this.controlText(", opens " + options.kind + " settings dialog"), _this;
                }
                return (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(CaptionSettingsMenuItem, _TextTrackMenuItem), CaptionSettingsMenuItem.prototype.handleClick = function(event) {
                    this.player().getChild("textTrackSettings").open();
                }, CaptionSettingsMenuItem;
            }(TextTrackMenuItem);
            Component$1.registerComponent("CaptionSettingsMenuItem", CaptionSettingsMenuItem);
            /**
             * The button component for toggling and selecting captions
             *
             * @extends TextTrackButton
             */ var CaptionsButton = /*#__PURE__*/ function(_TextTrackButton) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 *
                 * @param {Component~ReadyCallback} [ready]
                 *        The function to call when this component is ready.
                 */ function CaptionsButton(player, options, ready) {
                    return _TextTrackButton.call(this, player, options, ready) || this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(CaptionsButton, _TextTrackButton);
                /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ var _proto = CaptionsButton.prototype;
                return _proto.buildCSSClass = function() {
                    return "vjs-captions-button " + _TextTrackButton.prototype.buildCSSClass.call(this);
                }, _proto.buildWrapperCSSClass = function() {
                    return "vjs-captions-button " + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
                }, /**
                 * Create caption menu items
                 *
                 * @return {CaptionSettingsMenuItem[]}
                 *         The array of current menu items.
                 */ _proto.createItems = function() {
                    var items = [];
                    return !(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings") && (items.push(new CaptionSettingsMenuItem(this.player_, {
                        kind: this.kind_
                    })), this.hideThreshold_ += 1), _TextTrackButton.prototype.createItems.call(this, items);
                }, CaptionsButton;
            }(TextTrackButton);
            /**
             * `kind` of TextTrack to look for to associate it with this menu.
             *
             * @type {string}
             * @private
             */ CaptionsButton.prototype.kind_ = "captions", /**
             * The text that should display over the `CaptionsButton`s controls. Added for localization.
             *
             * @type {string}
             * @private
             */ CaptionsButton.prototype.controlText_ = "Captions", Component$1.registerComponent("CaptionsButton", CaptionsButton);
            /**
             * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles
             * in the SubsCapsMenu.
             *
             * @extends TextTrackMenuItem
             */ var SubsCapsMenuItem = /*#__PURE__*/ function(_TextTrackMenuItem) {
                function SubsCapsMenuItem() {
                    return _TextTrackMenuItem.apply(this, arguments) || this;
                }
                return (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(SubsCapsMenuItem, _TextTrackMenuItem), SubsCapsMenuItem.prototype.createEl = function(type, props, attrs) {
                    var el = _TextTrackMenuItem.prototype.createEl.call(this, type, props, attrs), parentSpan = el.querySelector(".vjs-menu-item-text");
                    return "captions" === this.options_.track.kind && (parentSpan.appendChild(createEl("span", {
                        className: "vjs-icon-placeholder"
                    }, {
                        "aria-hidden": !0
                    })), parentSpan.appendChild(createEl("span", {
                        className: "vjs-control-text",
                        // space added as the text will visually flow with the
                        // label
                        textContent: " " + this.localize("Captions")
                    }))), el;
                }, SubsCapsMenuItem;
            }(TextTrackMenuItem);
            Component$1.registerComponent("SubsCapsMenuItem", SubsCapsMenuItem);
            /**
             * The button component for toggling and selecting captions and/or subtitles
             *
             * @extends TextTrackButton
             */ var SubsCapsButton = /*#__PURE__*/ function(_TextTrackButton) {
                function SubsCapsButton(player, options) {
                    var _this;
                    return void 0 === options && (options = {}), // "captions and subtitles" other locales use "subtitles"
                    (_this = _TextTrackButton.call(this, player, options) || this).label_ = "subtitles", [
                        "en",
                        "en-us",
                        "en-ca",
                        "fr-ca"
                    ].indexOf(_this.player_.language_) > -1 && (_this.label_ = "captions"), _this.menuButton_.controlText(toTitleCase$1(_this.label_)), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(SubsCapsButton, _TextTrackButton);
                /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ var _proto = SubsCapsButton.prototype;
                return _proto.buildCSSClass = function() {
                    return "vjs-subs-caps-button " + _TextTrackButton.prototype.buildCSSClass.call(this);
                }, _proto.buildWrapperCSSClass = function() {
                    return "vjs-subs-caps-button " + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
                }, /**
                 * Create caption/subtitles menu items
                 *
                 * @return {CaptionSettingsMenuItem[]}
                 *         The array of current menu items.
                 */ _proto.createItems = function() {
                    var items = [];
                    return !(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings") && (items.push(new CaptionSettingsMenuItem(this.player_, {
                        kind: this.label_
                    })), this.hideThreshold_ += 1), items = _TextTrackButton.prototype.createItems.call(this, items, SubsCapsMenuItem);
                }, SubsCapsButton;
            }(TextTrackButton);
            /**
             * `kind`s of TextTrack to look for to associate it with this menu.
             *
             * @type {array}
             * @private
             */ SubsCapsButton.prototype.kinds_ = [
                "captions",
                "subtitles"
            ], /**
             * The text that should display over the `SubsCapsButton`s controls.
             *
             *
             * @type {string}
             * @private
             */ SubsCapsButton.prototype.controlText_ = "Subtitles", Component$1.registerComponent("SubsCapsButton", SubsCapsButton);
            /**
             * An {@link AudioTrack} {@link MenuItem}
             *
             * @extends MenuItem
             */ var AudioTrackMenuItem = /*#__PURE__*/ function(_MenuItem) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function AudioTrackMenuItem(player, options) {
                    var _this, track = options.track, tracks = player.audioTracks();
                    options.label = track.label || track.language || "Unknown", options.selected = track.enabled, (_this = _MenuItem.call(this, player, options) || this).track = track, _this.addClass("vjs-" + track.kind + "-menu-item");
                    var changeHandler = function() {
                        for(var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                        _this.handleTracksChange.apply((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), args);
                    };
                    return tracks.addEventListener("change", changeHandler), _this.on("dispose", function() {
                        tracks.removeEventListener("change", changeHandler);
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(AudioTrackMenuItem, _MenuItem);
                var _proto = AudioTrackMenuItem.prototype;
                return _proto.createEl = function(type, props, attrs) {
                    var el = _MenuItem.prototype.createEl.call(this, type, props, attrs), parentSpan = el.querySelector(".vjs-menu-item-text");
                    return "main-desc" === this.options_.track.kind && (parentSpan.appendChild(_MenuItem.prototype.createEl.call(this, "span", {
                        className: "vjs-icon-placeholder"
                    }, {
                        "aria-hidden": !0
                    })), parentSpan.appendChild(_MenuItem.prototype.createEl.call(this, "span", {
                        className: "vjs-control-text",
                        textContent: this.localize("Descriptions")
                    }))), el;
                }, /**
                 * This gets called when an `AudioTrackMenuItem is "clicked". See {@link ClickableComponent}
                 * for more detailed information on what a click can be.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `keydown`, `tap`, or `click` event that caused this function to be
                 *        called.
                 *
                 * @listens tap
                 * @listens click
                 */ _proto.handleClick = function(event) {
                    _MenuItem.prototype.handleClick.call(this, event), // off for us.
                    this.track.enabled = !0;
                }, /**
                 * Handle any {@link AudioTrack} change.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The {@link AudioTrackList#change} event that caused this to run.
                 *
                 * @listens AudioTrackList#change
                 */ _proto.handleTracksChange = function(event) {
                    this.selected(this.track.enabled);
                }, AudioTrackMenuItem;
            }(MenuItem);
            Component$1.registerComponent("AudioTrackMenuItem", AudioTrackMenuItem);
            /**
             * The base class for buttons that toggle specific {@link AudioTrack} types.
             *
             * @extends TrackButton
             */ var AudioTrackButton = /*#__PURE__*/ function(_TrackButton) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options={}]
                 *        The key/value store of player options.
                 */ function AudioTrackButton(player, options) {
                    return void 0 === options && (options = {}), options.tracks = player.audioTracks(), _TrackButton.call(this, player, options) || this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(AudioTrackButton, _TrackButton);
                /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ var _proto = AudioTrackButton.prototype;
                return _proto.buildCSSClass = function() {
                    return "vjs-audio-button " + _TrackButton.prototype.buildCSSClass.call(this);
                }, _proto.buildWrapperCSSClass = function() {
                    return "vjs-audio-button " + _TrackButton.prototype.buildWrapperCSSClass.call(this);
                }, /**
                 * Create a menu item for each audio track
                 *
                 * @param {AudioTrackMenuItem[]} [items=[]]
                 *        An array of existing menu items to use.
                 *
                 * @return {AudioTrackMenuItem[]}
                 *         An array of menu items
                 */ _proto.createItems = function(items) {
                    void 0 === items && (items = []), // if there's only one audio track, there no point in showing it
                    this.hideThreshold_ = 1;
                    for(var tracks = this.player_.audioTracks(), i = 0; i < tracks.length; i++){
                        var track = tracks[i];
                        items.push(new AudioTrackMenuItem(this.player_, {
                            track: track,
                            // MenuItem is selectable
                            selectable: !0,
                            // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
                            multiSelectable: !1
                        }));
                    }
                    return items;
                }, AudioTrackButton;
            }(TrackButton);
            /**
             * The text that should display over the `AudioTrackButton`s controls. Added for localization.
             *
             * @type {string}
             * @private
             */ AudioTrackButton.prototype.controlText_ = "Audio Track", Component$1.registerComponent("AudioTrackButton", AudioTrackButton);
            /**
             * The specific menu item type for selecting a playback rate.
             *
             * @extends MenuItem
             */ var PlaybackRateMenuItem = /*#__PURE__*/ function(_MenuItem) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function PlaybackRateMenuItem(player, options) {
                    var _this, label = options.rate, rate = parseFloat(label, 10);
                    return options.label = label, options.selected = rate === player.playbackRate(), options.selectable = !0, options.multiSelectable = !1, (_this = _MenuItem.call(this, player, options) || this).label = label, _this.rate = rate, _this.on(player, "ratechange", function(e) {
                        return _this.update(e);
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(PlaybackRateMenuItem, _MenuItem);
                /**
                 * This gets called when an `PlaybackRateMenuItem` is "clicked". See
                 * {@link ClickableComponent} for more detailed information on what a click can be.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `keydown`, `tap`, or `click` event that caused this function to be
                 *        called.
                 *
                 * @listens tap
                 * @listens click
                 */ var _proto = PlaybackRateMenuItem.prototype;
                return _proto.handleClick = function(event) {
                    _MenuItem.prototype.handleClick.call(this), this.player().playbackRate(this.rate);
                }, /**
                 * Update the PlaybackRateMenuItem when the playbackrate changes.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `ratechange` event that caused this function to run.
                 *
                 * @listens Player#ratechange
                 */ _proto.update = function(event) {
                    this.selected(this.player().playbackRate() === this.rate);
                }, PlaybackRateMenuItem;
            }(MenuItem);
            /**
             * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.
             *
             * @type {string}
             * @private
             */ PlaybackRateMenuItem.prototype.contentElType = "button", Component$1.registerComponent("PlaybackRateMenuItem", PlaybackRateMenuItem);
            /**
             * The component for controlling the playback rate.
             *
             * @extends MenuButton
             */ var PlaybackRateMenuButton = /*#__PURE__*/ function(_MenuButton) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 */ function PlaybackRateMenuButton(player, options) {
                    var _this;
                    return (_this = _MenuButton.call(this, player, options) || this).menuButton_.el_.setAttribute("aria-describedby", _this.labelElId_), _this.updateVisibility(), _this.updateLabel(), _this.on(player, "loadstart", function(e) {
                        return _this.updateVisibility(e);
                    }), _this.on(player, "ratechange", function(e) {
                        return _this.updateLabel(e);
                    }), _this.on(player, "playbackrateschange", function(e) {
                        return _this.handlePlaybackRateschange(e);
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(PlaybackRateMenuButton, _MenuButton);
                /**
                 * Create the `Component`'s DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ var _proto = PlaybackRateMenuButton.prototype;
                return _proto.createEl = function() {
                    var el = _MenuButton.prototype.createEl.call(this);
                    return this.labelElId_ = "vjs-playback-rate-value-label-" + this.id_, this.labelEl_ = createEl("div", {
                        className: "vjs-playback-rate-value",
                        id: this.labelElId_,
                        textContent: "1x"
                    }), el.appendChild(this.labelEl_), el;
                }, _proto.dispose = function() {
                    this.labelEl_ = null, _MenuButton.prototype.dispose.call(this);
                }, /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ _proto.buildCSSClass = function() {
                    return "vjs-playback-rate " + _MenuButton.prototype.buildCSSClass.call(this);
                }, _proto.buildWrapperCSSClass = function() {
                    return "vjs-playback-rate " + _MenuButton.prototype.buildWrapperCSSClass.call(this);
                }, /**
                 * Create the list of menu items. Specific to each subclass.
                 *
                 */ _proto.createItems = function() {
                    for(var rates = this.playbackRates(), items = [], i = rates.length - 1; i >= 0; i--)items.push(new PlaybackRateMenuItem(this.player(), {
                        rate: rates[i] + "x"
                    }));
                    return items;
                }, /**
                 * Updates ARIA accessibility attributes
                 */ _proto.updateARIAAttributes = function() {
                    // Current playback rate
                    this.el().setAttribute("aria-valuenow", this.player().playbackRate());
                }, /**
                 * This gets called when an `PlaybackRateMenuButton` is "clicked". See
                 * {@link ClickableComponent} for more detailed information on what a click can be.
                 *
                 * @param {EventTarget~Event} [event]
                 *        The `keydown`, `tap`, or `click` event that caused this function to be
                 *        called.
                 *
                 * @listens tap
                 * @listens click
                 */ _proto.handleClick = function(event) {
                    for(var currentRate = this.player().playbackRate(), rates = this.playbackRates(), newRate = rates[0], i = 0; i < rates.length; i++)if (rates[i] > currentRate) {
                        newRate = rates[i];
                        break;
                    }
                    this.player().playbackRate(newRate);
                }, /**
                 * On playbackrateschange, update the menu to account for the new items.
                 *
                 * @listens Player#playbackrateschange
                 */ _proto.handlePlaybackRateschange = function(event) {
                    this.update();
                }, /**
                 * Get possible playback rates
                 *
                 * @return {Array}
                 *         All possible playback rates
                 */ _proto.playbackRates = function() {
                    var player = this.player();
                    return player.playbackRates && player.playbackRates() || [];
                }, /**
                 * Get whether playback rates is supported by the tech
                 * and an array of playback rates exists
                 *
                 * @return {boolean}
                 *         Whether changing playback rate is supported
                 */ _proto.playbackRateSupported = function() {
                    return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;
                }, /**
                 * Hide playback rate controls when they're no playback rate options to select
                 *
                 * @param {EventTarget~Event} [event]
                 *        The event that caused this function to run.
                 *
                 * @listens Player#loadstart
                 */ _proto.updateVisibility = function(event) {
                    this.playbackRateSupported() ? this.removeClass("vjs-hidden") : this.addClass("vjs-hidden");
                }, /**
                 * Update button label when rate changed
                 *
                 * @param {EventTarget~Event} [event]
                 *        The event that caused this function to run.
                 *
                 * @listens Player#ratechange
                 */ _proto.updateLabel = function(event) {
                    this.playbackRateSupported() && (this.labelEl_.textContent = this.player().playbackRate() + "x");
                }, PlaybackRateMenuButton;
            }(MenuButton);
            /**
             * The text that should display over the `FullscreenToggle`s controls. Added for localization.
             *
             * @type {string}
             * @private
             */ PlaybackRateMenuButton.prototype.controlText_ = "Playback Rate", Component$1.registerComponent("PlaybackRateMenuButton", PlaybackRateMenuButton);
            /**
             * Just an empty spacer element that can be used as an append point for plugins, etc.
             * Also can be used to create space between elements when necessary.
             *
             * @extends Component
             */ var Spacer = /*#__PURE__*/ function(_Component) {
                function Spacer() {
                    return _Component.apply(this, arguments) || this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(Spacer, _Component);
                var _proto = Spacer.prototype;
                return(/**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ _proto.buildCSSClass = function() {
                    return "vjs-spacer " + _Component.prototype.buildCSSClass.call(this);
                }, /**
                 * Create the `Component`'s DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ _proto.createEl = function(tag, props, attributes) {
                    return void 0 === tag && (tag = "div"), void 0 === props && (props = {}), void 0 === attributes && (attributes = {}), props.className || (props.className = this.buildCSSClass()), _Component.prototype.createEl.call(this, tag, props, attributes);
                }, Spacer);
            }(Component$1);
            Component$1.registerComponent("Spacer", Spacer);
            /**
             * Spacer specifically meant to be used as an insertion point for new plugins, etc.
             *
             * @extends Spacer
             */ var CustomControlSpacer = /*#__PURE__*/ function(_Spacer) {
                function CustomControlSpacer() {
                    return _Spacer.apply(this, arguments) || this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(CustomControlSpacer, _Spacer);
                var _proto = CustomControlSpacer.prototype;
                return(/**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 */ _proto.buildCSSClass = function() {
                    return "vjs-custom-control-spacer " + _Spacer.prototype.buildCSSClass.call(this);
                }, /**
                 * Create the `Component`'s DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ _proto.createEl = function() {
                    return _Spacer.prototype.createEl.call(this, "div", {
                        className: this.buildCSSClass(),
                        // No-flex/table-cell mode requires there be some content
                        // in the cell to fill the remaining space of the table.
                        textContent: "\xA0"
                    });
                }, CustomControlSpacer);
            }(Spacer);
            Component$1.registerComponent("CustomControlSpacer", CustomControlSpacer);
            /**
             * Container of main controls.
             *
             * @extends Component
             */ var ControlBar = /*#__PURE__*/ function(_Component) {
                function ControlBar() {
                    return _Component.apply(this, arguments) || this;
                }
                return (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(ControlBar, _Component), /**
                 * Create the `Component`'s DOM element
                 *
                 * @return {Element}
                 *         The element that was created.
                 */ ControlBar.prototype.createEl = function() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-control-bar",
                        dir: "ltr"
                    });
                }, ControlBar;
            }(Component$1);
            /**
             * Default options for `ControlBar`
             *
             * @type {Object}
             * @private
             */ ControlBar.prototype.options_ = {
                children: [
                    "playToggle",
                    "volumePanel",
                    "currentTimeDisplay",
                    "timeDivider",
                    "durationDisplay",
                    "progressControl",
                    "liveDisplay",
                    "seekToLive",
                    "remainingTimeDisplay",
                    "customControlSpacer",
                    "playbackRateMenuButton",
                    "chaptersButton",
                    "descriptionsButton",
                    "subsCapsButton",
                    "audioTrackButton",
                    "fullscreenToggle"
                ]
            }, "exitPictureInPicture" in global_document__WEBPACK_IMPORTED_MODULE_1___default() && ControlBar.prototype.options_.children.splice(ControlBar.prototype.options_.children.length - 1, 0, "pictureInPictureToggle"), Component$1.registerComponent("ControlBar", ControlBar);
            /**
             * A display that indicates an error has occurred. This means that the video
             * is unplayable.
             *
             * @extends ModalDialog
             */ var ErrorDisplay = /*#__PURE__*/ function(_ModalDialog) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param  {Player} player
                 *         The `Player` that this class should be attached to.
                 *
                 * @param  {Object} [options]
                 *         The key/value store of player options.
                 */ function ErrorDisplay(player, options) {
                    var _this;
                    return (_this = _ModalDialog.call(this, player, options) || this).on(player, "error", function(e) {
                        return _this.open(e);
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(ErrorDisplay, _ModalDialog);
                /**
                 * Builds the default DOM `className`.
                 *
                 * @return {string}
                 *         The DOM `className` for this object.
                 *
                 * @deprecated Since version 5.
                 */ var _proto = ErrorDisplay.prototype;
                return _proto.buildCSSClass = function() {
                    return "vjs-error-display " + _ModalDialog.prototype.buildCSSClass.call(this);
                }, /**
                 * Gets the localized error message based on the `Player`s error.
                 *
                 * @return {string}
                 *         The `Player`s error message localized or an empty string.
                 */ _proto.content = function() {
                    var error = this.player().error();
                    return error ? this.localize(error.message) : "";
                }, ErrorDisplay;
            }(ModalDialog);
            /**
             * The default options for an `ErrorDisplay`.
             *
             * @private
             */ ErrorDisplay.prototype.options_ = (0, _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_15__ /* ["default"] */ .Z)({}, ModalDialog.prototype.options_, {
                pauseOnOpen: !1,
                fillAlways: !0,
                temporary: !1,
                uncloseable: !0
            }), Component$1.registerComponent("ErrorDisplay", ErrorDisplay);
            var LOCAL_STORAGE_KEY$1 = "vjs-text-track-settings", COLOR_BLACK = [
                "#000",
                "Black"
            ], COLOR_BLUE = [
                "#00F",
                "Blue"
            ], COLOR_CYAN = [
                "#0FF",
                "Cyan"
            ], COLOR_GREEN = [
                "#0F0",
                "Green"
            ], COLOR_MAGENTA = [
                "#F0F",
                "Magenta"
            ], COLOR_RED = [
                "#F00",
                "Red"
            ], COLOR_WHITE = [
                "#FFF",
                "White"
            ], COLOR_YELLOW = [
                "#FF0",
                "Yellow"
            ], OPACITY_OPAQUE = [
                "1",
                "Opaque"
            ], OPACITY_SEMI = [
                "0.5",
                "Semi-Transparent"
            ], OPACITY_TRANS = [
                "0",
                "Transparent"
            ], selectConfigs = {
                backgroundColor: {
                    selector: ".vjs-bg-color > select",
                    id: "captions-background-color-%s",
                    label: "Color",
                    options: [
                        COLOR_BLACK,
                        COLOR_WHITE,
                        COLOR_RED,
                        COLOR_GREEN,
                        COLOR_BLUE,
                        COLOR_YELLOW,
                        COLOR_MAGENTA,
                        COLOR_CYAN
                    ]
                },
                backgroundOpacity: {
                    selector: ".vjs-bg-opacity > select",
                    id: "captions-background-opacity-%s",
                    label: "Transparency",
                    options: [
                        OPACITY_OPAQUE,
                        OPACITY_SEMI,
                        OPACITY_TRANS
                    ]
                },
                color: {
                    selector: ".vjs-fg-color > select",
                    id: "captions-foreground-color-%s",
                    label: "Color",
                    options: [
                        COLOR_WHITE,
                        COLOR_BLACK,
                        COLOR_RED,
                        COLOR_GREEN,
                        COLOR_BLUE,
                        COLOR_YELLOW,
                        COLOR_MAGENTA,
                        COLOR_CYAN
                    ]
                },
                edgeStyle: {
                    selector: ".vjs-edge-style > select",
                    id: "%s",
                    label: "Text Edge Style",
                    options: [
                        [
                            "none",
                            "None"
                        ],
                        [
                            "raised",
                            "Raised"
                        ],
                        [
                            "depressed",
                            "Depressed"
                        ],
                        [
                            "uniform",
                            "Uniform"
                        ],
                        [
                            "dropshadow",
                            "Dropshadow"
                        ]
                    ]
                },
                fontFamily: {
                    selector: ".vjs-font-family > select",
                    id: "captions-font-family-%s",
                    label: "Font Family",
                    options: [
                        [
                            "proportionalSansSerif",
                            "Proportional Sans-Serif"
                        ],
                        [
                            "monospaceSansSerif",
                            "Monospace Sans-Serif"
                        ],
                        [
                            "proportionalSerif",
                            "Proportional Serif"
                        ],
                        [
                            "monospaceSerif",
                            "Monospace Serif"
                        ],
                        [
                            "casual",
                            "Casual"
                        ],
                        [
                            "script",
                            "Script"
                        ],
                        [
                            "small-caps",
                            "Small Caps"
                        ]
                    ]
                },
                fontPercent: {
                    selector: ".vjs-font-percent > select",
                    id: "captions-font-size-%s",
                    label: "Font Size",
                    options: [
                        [
                            "0.50",
                            "50%"
                        ],
                        [
                            "0.75",
                            "75%"
                        ],
                        [
                            "1.00",
                            "100%"
                        ],
                        [
                            "1.25",
                            "125%"
                        ],
                        [
                            "1.50",
                            "150%"
                        ],
                        [
                            "1.75",
                            "175%"
                        ],
                        [
                            "2.00",
                            "200%"
                        ],
                        [
                            "3.00",
                            "300%"
                        ],
                        [
                            "4.00",
                            "400%"
                        ]
                    ],
                    default: 2,
                    parser: function(v) {
                        return "1.00" === v ? null : Number(v);
                    }
                },
                textOpacity: {
                    selector: ".vjs-text-opacity > select",
                    id: "captions-foreground-opacity-%s",
                    label: "Transparency",
                    options: [
                        OPACITY_OPAQUE,
                        OPACITY_SEMI
                    ]
                },
                // Options for this object are defined below.
                windowColor: {
                    selector: ".vjs-window-color > select",
                    id: "captions-window-color-%s",
                    label: "Color"
                },
                // Options for this object are defined below.
                windowOpacity: {
                    selector: ".vjs-window-opacity > select",
                    id: "captions-window-opacity-%s",
                    label: "Transparency",
                    options: [
                        OPACITY_TRANS,
                        OPACITY_SEMI,
                        OPACITY_OPAQUE
                    ]
                }
            };
            /**
             * Get the actual value of an option.
             *
             * @param  {string} value
             *         The value to get
             *
             * @param  {Function} [parser]
             *         Optional function to adjust the value.
             *
             * @return {Mixed}
             *         - Will be `undefined` if no value exists
             *         - Will be `undefined` if the given value is "none".
             *         - Will be the actual value otherwise.
             *
             * @private
             */ function parseOptionValue(value, parser) {
                if (parser && (value = parser(value)), value && "none" !== value) return value;
            }
            selectConfigs.windowColor.options = selectConfigs.backgroundColor.options;
            /**
             * Manipulate Text Tracks settings.
             *
             * @extends ModalDialog
             */ var TextTrackSettings = /*#__PURE__*/ function(_ModalDialog) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *         The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *         The key/value store of player options.
                 */ function TextTrackSettings(player, options) {
                    var _this;
                    return options.temporary = !1, (_this = _ModalDialog.call(this, player, options) || this).updateDisplay = _this.updateDisplay.bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this)), _this.fill(), _this.hasBeenOpened_ = _this.hasBeenFilled_ = !0, _this.endDialog = createEl("p", {
                        className: "vjs-control-text",
                        textContent: _this.localize("End of dialog window.")
                    }), _this.el().appendChild(_this.endDialog), _this.setDefaults(), void 0 === options.persistTextTrackSettings && (_this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings), _this.on(_this.$(".vjs-done-button"), "click", function() {
                        _this.saveSettings(), _this.close();
                    }), _this.on(_this.$(".vjs-default-button"), "click", function() {
                        _this.setDefaults(), _this.updateDisplay();
                    }), each(selectConfigs, function(config) {
                        _this.on(_this.$(config.selector), "change", _this.updateDisplay);
                    }), _this.options_.persistTextTrackSettings && _this.restoreSettings(), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(TextTrackSettings, _ModalDialog);
                var _proto = TextTrackSettings.prototype;
                return _proto.dispose = function() {
                    this.endDialog = null, _ModalDialog.prototype.dispose.call(this);
                }, /**
                 * Create a <select> element with configured options.
                 *
                 * @param {string} key
                 *        Configuration key to use during creation.
                 *
                 * @return {string}
                 *         An HTML string.
                 *
                 * @private
                 */ _proto.createElSelect_ = function(key, legendId, type) {
                    var _this2 = this;
                    void 0 === legendId && (legendId = ""), void 0 === type && (type = "label");
                    var config = selectConfigs[key], id = config.id.replace("%s", this.id_), selectLabelledbyIds = [
                        legendId,
                        id
                    ].join(" ").trim();
                    return [
                        "<" + type + ' id="' + id + '" class="' + ("label" === type ? "vjs-label" : "") + '">',
                        this.localize(config.label),
                        "</" + type + ">",
                        '<select aria-labelledby="' + selectLabelledbyIds + '">'
                    ].concat(config.options.map(function(o) {
                        var optionId = id + "-" + o[1].replace(/\W+/g, "");
                        return [
                            '<option id="' + optionId + '" value="' + o[0] + '" ',
                            'aria-labelledby="' + selectLabelledbyIds + " " + optionId + '">',
                            _this2.localize(o[1]),
                            "</option>"
                        ].join("");
                    })).concat("</select>").join("");
                }, /**
                 * Create foreground color element for the component
                 *
                 * @return {string}
                 *         An HTML string.
                 *
                 * @private
                 */ _proto.createElFgColor_ = function() {
                    var legendId = "captions-text-legend-" + this.id_;
                    return [
                        '<fieldset class="vjs-fg-color vjs-track-setting">',
                        '<legend id="' + legendId + '">',
                        this.localize("Text"),
                        "</legend>",
                        this.createElSelect_("color", legendId),
                        '<span class="vjs-text-opacity vjs-opacity">',
                        this.createElSelect_("textOpacity", legendId),
                        "</span>",
                        "</fieldset>"
                    ].join("");
                }, /**
                 * Create background color element for the component
                 *
                 * @return {string}
                 *         An HTML string.
                 *
                 * @private
                 */ _proto.createElBgColor_ = function() {
                    var legendId = "captions-background-" + this.id_;
                    return [
                        '<fieldset class="vjs-bg-color vjs-track-setting">',
                        '<legend id="' + legendId + '">',
                        this.localize("Background"),
                        "</legend>",
                        this.createElSelect_("backgroundColor", legendId),
                        '<span class="vjs-bg-opacity vjs-opacity">',
                        this.createElSelect_("backgroundOpacity", legendId),
                        "</span>",
                        "</fieldset>"
                    ].join("");
                }, /**
                 * Create window color element for the component
                 *
                 * @return {string}
                 *         An HTML string.
                 *
                 * @private
                 */ _proto.createElWinColor_ = function() {
                    var legendId = "captions-window-" + this.id_;
                    return [
                        '<fieldset class="vjs-window-color vjs-track-setting">',
                        '<legend id="' + legendId + '">',
                        this.localize("Window"),
                        "</legend>",
                        this.createElSelect_("windowColor", legendId),
                        '<span class="vjs-window-opacity vjs-opacity">',
                        this.createElSelect_("windowOpacity", legendId),
                        "</span>",
                        "</fieldset>"
                    ].join("");
                }, /**
                 * Create color elements for the component
                 *
                 * @return {Element}
                 *         The element that was created
                 *
                 * @private
                 */ _proto.createElColors_ = function() {
                    return createEl("div", {
                        className: "vjs-track-settings-colors",
                        innerHTML: [
                            this.createElFgColor_(),
                            this.createElBgColor_(),
                            this.createElWinColor_()
                        ].join("")
                    });
                }, /**
                 * Create font elements for the component
                 *
                 * @return {Element}
                 *         The element that was created.
                 *
                 * @private
                 */ _proto.createElFont_ = function() {
                    return createEl("div", {
                        className: "vjs-track-settings-font",
                        innerHTML: [
                            '<fieldset class="vjs-font-percent vjs-track-setting">',
                            this.createElSelect_("fontPercent", "", "legend"),
                            "</fieldset>",
                            '<fieldset class="vjs-edge-style vjs-track-setting">',
                            this.createElSelect_("edgeStyle", "", "legend"),
                            "</fieldset>",
                            '<fieldset class="vjs-font-family vjs-track-setting">',
                            this.createElSelect_("fontFamily", "", "legend"),
                            "</fieldset>"
                        ].join("")
                    });
                }, /**
                 * Create controls for the component
                 *
                 * @return {Element}
                 *         The element that was created.
                 *
                 * @private
                 */ _proto.createElControls_ = function() {
                    var defaultsDescription = this.localize("restore all settings to the default values");
                    return createEl("div", {
                        className: "vjs-track-settings-controls",
                        innerHTML: [
                            '<button type="button" class="vjs-default-button" title="' + defaultsDescription + '">',
                            this.localize("Reset"),
                            '<span class="vjs-control-text"> ' + defaultsDescription + "</span>",
                            "</button>",
                            '<button type="button" class="vjs-done-button">' + this.localize("Done") + "</button>"
                        ].join("")
                    });
                }, _proto.content = function() {
                    return [
                        this.createElColors_(),
                        this.createElFont_(),
                        this.createElControls_()
                    ];
                }, _proto.label = function() {
                    return this.localize("Caption Settings Dialog");
                }, _proto.description = function() {
                    return this.localize("Beginning of dialog window. Escape will cancel and close the window.");
                }, _proto.buildCSSClass = function() {
                    return _ModalDialog.prototype.buildCSSClass.call(this) + " vjs-text-track-settings";
                }, /**
                 * Gets an object of text track settings (or null).
                 *
                 * @return {Object}
                 *         An object with config values parsed from the DOM or localStorage.
                 */ _proto.getValues = function() {
                    var fn, initial, _this3 = this;
                    return fn = function(accum, config, key) {
                        var el, parser, value = (el = _this3.$(config.selector), parser = config.parser, parseOptionValue(el.options[el.options.selectedIndex].value, parser));
                        return void 0 !== value && (accum[key] = value), accum;
                    }, initial = {}, keys(selectConfigs).reduce(function(accum, key) {
                        return fn(accum, selectConfigs[key], key);
                    }, initial);
                }, /**
                 * Sets text track settings from an object of values.
                 *
                 * @param {Object} values
                 *        An object with config values parsed from the DOM or localStorage.
                 */ _proto.setValues = function(values) {
                    var _this4 = this;
                    each(selectConfigs, function(config, key) {
                        !/**
             * Sets the selected <option> element within a <select> element based on a
             * given value.
             *
             * @param {Element} el
             *        The element to look in.
             *
             * @param {string} value
             *        the property to look on.
             *
             * @param {Function} [parser]
             *        Optional function to adjust the value before comparing.
             *
             * @private
             */ function(el, value, parser) {
                            if (value) {
                                for(var i = 0; i < el.options.length; i++)if (parseOptionValue(el.options[i].value, parser) === value) {
                                    el.selectedIndex = i;
                                    break;
                                }
                            }
                        }(_this4.$(config.selector), values[key], config.parser);
                    });
                }, /**
                 * Sets all `<select>` elements to their default values.
                 */ _proto.setDefaults = function() {
                    var _this5 = this;
                    each(selectConfigs, function(config) {
                        var index = config.hasOwnProperty("default") ? config.default : 0;
                        _this5.$(config.selector).selectedIndex = index;
                    });
                }, /**
                 * Restore texttrack settings from localStorage
                 */ _proto.restoreSettings = function() {
                    var values;
                    try {
                        values = JSON.parse(global_window__WEBPACK_IMPORTED_MODULE_0___default().localStorage.getItem(LOCAL_STORAGE_KEY$1));
                    } catch (err) {
                        log$1.warn(err);
                    }
                    values && this.setValues(values);
                }, /**
                 * Save text track settings to localStorage
                 */ _proto.saveSettings = function() {
                    if (this.options_.persistTextTrackSettings) {
                        var values = this.getValues();
                        try {
                            Object.keys(values).length ? global_window__WEBPACK_IMPORTED_MODULE_0___default().localStorage.setItem(LOCAL_STORAGE_KEY$1, JSON.stringify(values)) : global_window__WEBPACK_IMPORTED_MODULE_0___default().localStorage.removeItem(LOCAL_STORAGE_KEY$1);
                        } catch (err) {
                            log$1.warn(err);
                        }
                    }
                }, /**
                 * Update display of text track settings
                 */ _proto.updateDisplay = function() {
                    var ttDisplay = this.player_.getChild("textTrackDisplay");
                    ttDisplay && ttDisplay.updateDisplay();
                }, /**
                 * conditionally blur the element and refocus the captions button
                 *
                 * @private
                 */ _proto.conditionalBlur_ = function() {
                    this.previouslyActiveEl_ = null;
                    var cb = this.player_.controlBar, subsCapsBtn = cb && cb.subsCapsButton, ccBtn = cb && cb.captionsButton;
                    subsCapsBtn ? subsCapsBtn.focus() : ccBtn && ccBtn.focus();
                }, TextTrackSettings;
            }(ModalDialog);
            Component$1.registerComponent("TextTrackSettings", TextTrackSettings);
            /**
             * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.
             *
             * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.
             *
             * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.
             * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.
             * @example <caption>How to disable the resize manager</caption>
             * const player = videojs('#vid', {
             *   resizeManager: false
             * });
             *
             * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}
             *
             * @extends Component
             */ var ResizeManager = /*#__PURE__*/ function(_Component) {
                /**
                 * Create the ResizeManager.
                 *
                 * @param {Object} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of ResizeManager options.
                 *
                 * @param {Object} [options.ResizeObserver]
                 *        A polyfill for ResizeObserver can be passed in here.
                 *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.
                 */ function ResizeManager(player, options) {
                    var _this, RESIZE_OBSERVER_AVAILABLE = options.ResizeObserver || global_window__WEBPACK_IMPORTED_MODULE_0___default().ResizeObserver; // if `null` was passed, we want to disable the ResizeObserver
                    null === options.ResizeObserver && (RESIZE_OBSERVER_AVAILABLE = !1);
                    var options_ = mergeOptions$3({
                        createEl: !RESIZE_OBSERVER_AVAILABLE,
                        reportTouchActivity: !1
                    }, options);
                    return (_this = _Component.call(this, player, options_) || this).ResizeObserver = options.ResizeObserver || global_window__WEBPACK_IMPORTED_MODULE_0___default().ResizeObserver, _this.loadListener_ = null, _this.resizeObserver_ = null, _this.debouncedHandler_ = debounce(function() {
                        _this.resizeHandler();
                    }, 100, !1, (0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this)), RESIZE_OBSERVER_AVAILABLE ? (_this.resizeObserver_ = new _this.ResizeObserver(_this.debouncedHandler_), _this.resizeObserver_.observe(player.el())) : (_this.loadListener_ = function() {
                        if (_this.el_ && _this.el_.contentWindow) {
                            var debouncedHandler_ = _this.debouncedHandler_, unloadListener_ = _this.unloadListener_ = function() {
                                off(this, "resize", debouncedHandler_), off(this, "unload", unloadListener_), unloadListener_ = null;
                            };
                            // we have to dispose of event handlers correctly before that happens
                            on(_this.el_.contentWindow, "unload", unloadListener_), on(_this.el_.contentWindow, "resize", debouncedHandler_);
                        }
                    }, _this.one("load", _this.loadListener_)), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(ResizeManager, _Component);
                var _proto = ResizeManager.prototype;
                return _proto.createEl = function() {
                    return _Component.prototype.createEl.call(this, "iframe", {
                        className: "vjs-resize-manager",
                        tabIndex: -1
                    }, {
                        "aria-hidden": "true"
                    });
                }, /**
                 * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver
                 *
                 * @fires Player#playerresize
                 */ _proto.resizeHandler = function() {
                    /**
                     * Called when the player size has changed
                     *
                     * @event Player#playerresize
                     * @type {EventTarget~Event}
                     */ // make sure player is still around to trigger
                    // prevents this from causing an error after dispose
                    this.player_ && this.player_.trigger && this.player_.trigger("playerresize");
                }, _proto.dispose = function() {
                    this.debouncedHandler_ && this.debouncedHandler_.cancel(), this.resizeObserver_ && (this.player_.el() && this.resizeObserver_.unobserve(this.player_.el()), this.resizeObserver_.disconnect()), this.loadListener_ && this.off("load", this.loadListener_), this.el_ && this.el_.contentWindow && this.unloadListener_ && this.unloadListener_.call(this.el_.contentWindow), this.ResizeObserver = null, this.resizeObserver = null, this.debouncedHandler_ = null, this.loadListener_ = null, _Component.prototype.dispose.call(this);
                }, ResizeManager;
            }(Component$1);
            Component$1.registerComponent("ResizeManager", ResizeManager);
            var defaults = {
                trackingThreshold: 20,
                liveTolerance: 15
            }, LiveTracker = /*#__PURE__*/ function(_Component) {
                /**
                 * Creates an instance of this class.
                 *
                 * @param {Player} player
                 *        The `Player` that this class should be attached to.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 *
                 * @param {number} [options.trackingThreshold=20]
                 *        Number of seconds of live window (seekableEnd - seekableStart) that
                 *        media needs to have before the liveui will be shown.
                 *
                 * @param {number} [options.liveTolerance=15]
                 *        Number of seconds behind live that we have to be
                 *        before we will be considered non-live. Note that this will only
                 *        be used when playing at the live edge. This allows large seekable end
                 *        changes to not effect wether we are live or not.
                 */ function LiveTracker(player, options) {
                    // LiveTracker does not need an element
                    var _this, options_ = mergeOptions$3(defaults, options, {
                        createEl: !1
                    });
                    return (_this = _Component.call(this, player, options_) || this).handleVisibilityChange_ = function(e) {
                        return _this.handleVisibilityChange(e);
                    }, _this.trackLiveHandler_ = function() {
                        return _this.trackLive_();
                    }, _this.handlePlay_ = function(e) {
                        return _this.handlePlay(e);
                    }, _this.handleFirstTimeupdate_ = function(e) {
                        return _this.handleFirstTimeupdate(e);
                    }, _this.handleSeeked_ = function(e) {
                        return _this.handleSeeked(e);
                    }, _this.seekToLiveEdge_ = function(e) {
                        return _this.seekToLiveEdge(e);
                    }, _this.reset_(), _this.on(_this.player_, "durationchange", function(e) {
                        return _this.handleDurationchange(e);
                    }), // may not have the proper values for things like seekableEnd until then
                    _this.one(_this.player_, "canplay", function() {
                        return _this.toggleTracking();
                    }), IE_VERSION && "hidden" in global_document__WEBPACK_IMPORTED_MODULE_1___default() && "visibilityState" in global_document__WEBPACK_IMPORTED_MODULE_1___default() && _this.on(global_document__WEBPACK_IMPORTED_MODULE_1___default(), "visibilitychange", _this.handleVisibilityChange_), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(LiveTracker, _Component);
                /**
                 * toggle tracking based on document visiblility
                 */ var _proto = LiveTracker.prototype;
                return _proto.handleVisibilityChange = function() {
                    this.player_.duration() === 1 / 0 && (global_document__WEBPACK_IMPORTED_MODULE_1___default().hidden ? this.stopTracking() : this.startTracking());
                }, /**
                 * all the functionality for tracking when seek end changes
                 * and for tracking how far past seek end we should be
                 */ _proto.trackLive_ = function() {
                    var seekable = this.player_.seekable(); // skip undefined seekable
                    if (seekable && seekable.length) {
                        var newTime = Number(global_window__WEBPACK_IMPORTED_MODULE_0___default().performance.now().toFixed(4)), deltaTime = -1 === this.lastTime_ ? 0 : (newTime - this.lastTime_) / 1000;
                        this.lastTime_ = newTime, this.pastSeekEnd_ = this.pastSeekEnd() + deltaTime;
                        var liveCurrentTime = this.liveCurrentTime(), currentTime = this.player_.currentTime(), isBehind = this.player_.paused() || this.seekedBehindLive_ || Math.abs(liveCurrentTime - currentTime) > this.options_.liveTolerance;
                        this.timeupdateSeen_ && liveCurrentTime !== 1 / 0 || (isBehind = !1), isBehind !== this.behindLiveEdge_ && (this.behindLiveEdge_ = isBehind, this.trigger("liveedgechange"));
                    }
                }, /**
                 * handle a durationchange event on the player
                 * and start/stop tracking accordingly.
                 */ _proto.handleDurationchange = function() {
                    this.toggleTracking();
                }, /**
                 * start/stop tracking
                 */ _proto.toggleTracking = function() {
                    this.player_.duration() === 1 / 0 && this.liveWindow() >= this.options_.trackingThreshold ? (this.player_.options_.liveui && this.player_.addClass("vjs-liveui"), this.startTracking()) : (this.player_.removeClass("vjs-liveui"), this.stopTracking());
                }, /**
                 * start tracking live playback
                 */ _proto.startTracking = function() {
                    this.isTracking() || (this.timeupdateSeen_ || (this.timeupdateSeen_ = this.player_.hasStarted()), this.trackingInterval_ = this.setInterval(this.trackLiveHandler_, 30), this.trackLive_(), this.on(this.player_, [
                        "play",
                        "pause"
                    ], this.trackLiveHandler_), this.timeupdateSeen_ ? this.on(this.player_, "seeked", this.handleSeeked_) : (this.one(this.player_, "play", this.handlePlay_), this.one(this.player_, "timeupdate", this.handleFirstTimeupdate_))); // If we haven't seen a timeupdate, we need to check whether playback
                }, /**
                 * handle the first timeupdate on the player if it wasn't already playing
                 * when live tracker started tracking.
                 */ _proto.handleFirstTimeupdate = function() {
                    this.timeupdateSeen_ = !0, this.on(this.player_, "seeked", this.handleSeeked_);
                }, /**
                 * Keep track of what time a seek starts, and listen for seeked
                 * to find where a seek ends.
                 */ _proto.handleSeeked = function() {
                    var timeDiff = Math.abs(this.liveCurrentTime() - this.player_.currentTime());
                    this.seekedBehindLive_ = this.nextSeekedFromUser_ && timeDiff > 2, this.nextSeekedFromUser_ = !1, this.trackLive_();
                }, /**
                 * handle the first play on the player, and make sure that we seek
                 * right to the live edge.
                 */ _proto.handlePlay = function() {
                    this.one(this.player_, "timeupdate", this.seekToLiveEdge_);
                }, /**
                 * Stop tracking, and set all internal variables to
                 * their initial value.
                 */ _proto.reset_ = function() {
                    this.lastTime_ = -1, this.pastSeekEnd_ = 0, this.lastSeekEnd_ = -1, this.behindLiveEdge_ = !0, this.timeupdateSeen_ = !1, this.seekedBehindLive_ = !1, this.nextSeekedFromUser_ = !1, this.clearInterval(this.trackingInterval_), this.trackingInterval_ = null, this.off(this.player_, [
                        "play",
                        "pause"
                    ], this.trackLiveHandler_), this.off(this.player_, "seeked", this.handleSeeked_), this.off(this.player_, "play", this.handlePlay_), this.off(this.player_, "timeupdate", this.handleFirstTimeupdate_), this.off(this.player_, "timeupdate", this.seekToLiveEdge_);
                }, /**
                 * The next seeked event is from the user. Meaning that any seek
                 * > 2s behind live will be considered behind live for real and
                 * liveTolerance will be ignored.
                 */ _proto.nextSeekedFromUser = function() {
                    this.nextSeekedFromUser_ = !0;
                }, /**
                 * stop tracking live playback
                 */ _proto.stopTracking = function() {
                    this.isTracking() && (this.reset_(), this.trigger("liveedgechange"));
                }, /**
                 * A helper to get the player seekable end
                 * so that we don't have to null check everywhere
                 *
                 * @return {number}
                 *         The furthest seekable end or Infinity.
                 */ _proto.seekableEnd = function() {
                    for(var seekable = this.player_.seekable(), seekableEnds = [], i = seekable ? seekable.length : 0; i--;)seekableEnds.push(seekable.end(i));
                     // grab the furthest seekable end after sorting, or if there are none
                    // default to Infinity
                    return seekableEnds.length ? seekableEnds.sort()[seekableEnds.length - 1] : 1 / 0;
                }, /**
                 * A helper to get the player seekable start
                 * so that we don't have to null check everywhere
                 *
                 * @return {number}
                 *         The earliest seekable start or 0.
                 */ _proto.seekableStart = function() {
                    for(var seekable = this.player_.seekable(), seekableStarts = [], i = seekable ? seekable.length : 0; i--;)seekableStarts.push(seekable.start(i));
                     // grab the first seekable start after sorting, or if there are none
                    // default to 0
                    return seekableStarts.length ? seekableStarts.sort()[0] : 0;
                }, /**
                 * Get the live time window aka
                 * the amount of time between seekable start and
                 * live current time.
                 *
                 * @return {number}
                 *         The amount of seconds that are seekable in
                 *         the live video.
                 */ _proto.liveWindow = function() {
                    var liveCurrentTime = this.liveCurrentTime(); // if liveCurrenTime is Infinity then we don't have a liveWindow at all
                    return liveCurrentTime === 1 / 0 ? 0 : liveCurrentTime - this.seekableStart();
                }, /**
                 * Determines if the player is live, only checks if this component
                 * is tracking live playback or not
                 *
                 * @return {boolean}
                 *         Wether liveTracker is tracking
                 */ _proto.isLive = function() {
                    return this.isTracking();
                }, /**
                 * Determines if currentTime is at the live edge and won't fall behind
                 * on each seekableendchange
                 *
                 * @return {boolean}
                 *         Wether playback is at the live edge
                 */ _proto.atLiveEdge = function() {
                    return !this.behindLiveEdge();
                }, /**
                 * get what we expect the live current time to be
                 *
                 * @return {number}
                 *         The expected live current time
                 */ _proto.liveCurrentTime = function() {
                    return this.pastSeekEnd() + this.seekableEnd();
                }, /**
                 * The number of seconds that have occured after seekable end
                 * changed. This will be reset to 0 once seekable end changes.
                 *
                 * @return {number}
                 *         Seconds past the current seekable end
                 */ _proto.pastSeekEnd = function() {
                    var seekableEnd = this.seekableEnd();
                    return -1 !== this.lastSeekEnd_ && seekableEnd !== this.lastSeekEnd_ && (this.pastSeekEnd_ = 0), this.lastSeekEnd_ = seekableEnd, this.pastSeekEnd_;
                }, /**
                 * If we are currently behind the live edge, aka currentTime will be
                 * behind on a seekableendchange
                 *
                 * @return {boolean}
                 *         If we are behind the live edge
                 */ _proto.behindLiveEdge = function() {
                    return this.behindLiveEdge_;
                }, /**
                 * Wether live tracker is currently tracking or not.
                 */ _proto.isTracking = function() {
                    return "number" == typeof this.trackingInterval_;
                }, /**
                 * Seek to the live edge if we are behind the live edge
                 */ _proto.seekToLiveEdge = function() {
                    this.seekedBehindLive_ = !1, this.atLiveEdge() || (this.nextSeekedFromUser_ = !1, this.player_.currentTime(this.liveCurrentTime()));
                }, /**
                 * Dispose of liveTracker
                 */ _proto.dispose = function() {
                    this.off(global_document__WEBPACK_IMPORTED_MODULE_1___default(), "visibilitychange", this.handleVisibilityChange_), this.stopTracking(), _Component.prototype.dispose.call(this);
                }, LiveTracker;
            }(Component$1);
            Component$1.registerComponent("LiveTracker", LiveTracker);
            /**
             * This function is used to fire a sourceset when there is something
             * similar to `mediaEl.load()` being called. It will try to find the source via
             * the `src` attribute and then the `<source>` elements. It will then fire `sourceset`
             * with the source that was found or empty string if we cannot know. If it cannot
             * find a source then `sourceset` will not be fired.
             *
             * @param {Html5} tech
             *        The tech object that sourceset was setup on
             *
             * @return {boolean}
             *         returns false if the sourceset was not fired and true otherwise.
             */ var sourcesetLoad = function(tech) {
                var el = tech.el(); // if `el.src` is set, that source will be loaded.
                if (el.hasAttribute("src")) return tech.triggerSourceset(el.src), !0;
                /**
                 * Since there isn't a src property on the media element, source elements will be used for
                 * implementing the source selection algorithm. This happens asynchronously and
                 * for most cases were there is more than one source we cannot tell what source will
                 * be loaded, without re-implementing the source selection algorithm. At this time we are not
                 * going to do that. There are three special cases that we do handle here though:
                 *
                 * 1. If there are no sources, do not fire `sourceset`.
                 * 2. If there is only one `<source>` with a `src` property/attribute that is our `src`
                 * 3. If there is more than one `<source>` but all of them have the same `src` url.
                 *    That will be our src.
                 */ var sources = tech.$$("source"), srcUrls = [], src = "";
                if (!sources.length) return !1;
                 // only count valid/non-duplicate source elements
                for(var i = 0; i < sources.length; i++){
                    var url = sources[i].src;
                    url && -1 === srcUrls.indexOf(url) && srcUrls.push(url);
                } // there were no valid sources
                return !!srcUrls.length && (1 === srcUrls.length && (src = srcUrls[0]), tech.triggerSourceset(src), !0) // there is only one valid source element url
                ;
            }, innerHTMLDescriptorPolyfill = Object.defineProperty({}, "innerHTML", {
                get: function() {
                    return this.cloneNode(!0).innerHTML;
                },
                set: function(v) {
                    // make a dummy node to use innerHTML on
                    var dummy = global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement(this.nodeName.toLowerCase()); // set innerHTML to the value provided
                    dummy.innerHTML = v;
                    // to the document fragment
                    for(var docFrag = global_document__WEBPACK_IMPORTED_MODULE_1___default().createDocumentFragment(); dummy.childNodes.length;)docFrag.appendChild(dummy.childNodes[0]);
                     // remove content
                    return this.innerText = "", // document fragment. This is how innerHTML does it.
                    global_window__WEBPACK_IMPORTED_MODULE_0___default().Element.prototype.appendChild.call(this, docFrag), this.innerHTML;
                }
            }), getDescriptor = function(priority, prop) {
                for(var descriptor = {}, i = 0; i < priority.length && (!(descriptor = Object.getOwnPropertyDescriptor(priority[i], prop)) || !descriptor.set || !descriptor.get); i++);
                return descriptor.enumerable = !0, descriptor.configurable = !0, descriptor;
            }, firstSourceWatch = function(tech) {
                var el = tech.el(); // make sure firstSourceWatch isn't setup twice.
                if (!el.resetSourceWatch_) {
                    var old = {}, innerDescriptor = getDescriptor([
                        tech.el(),
                        global_window__WEBPACK_IMPORTED_MODULE_0___default().HTMLMediaElement.prototype,
                        global_window__WEBPACK_IMPORTED_MODULE_0___default().Element.prototype,
                        innerHTMLDescriptorPolyfill
                    ], "innerHTML"), appendWrapper = function(appendFn) {
                        return function() {
                            for(var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                            var retval = appendFn.apply(el, args);
                            return sourcesetLoad(tech), retval;
                        };
                    };
                    [
                        "append",
                        "appendChild",
                        "insertAdjacentHTML"
                    ].forEach(function(k) {
                        el[k] && (old[k] = el[k], // was loaded
                        el[k] = appendWrapper(old[k])); // store the old function
                    }), Object.defineProperty(el, "innerHTML", mergeOptions$3(innerDescriptor, {
                        set: appendWrapper(innerDescriptor.set)
                    })), el.resetSourceWatch_ = function() {
                        el.resetSourceWatch_ = null, Object.keys(old).forEach(function(k) {
                            el[k] = old[k];
                        }), Object.defineProperty(el, "innerHTML", innerDescriptor);
                    }, tech.one("sourceset", el.resetSourceWatch_);
                }
            }, srcDescriptorPolyfill = Object.defineProperty({}, "src", {
                get: function() {
                    return this.hasAttribute("src") ? getAbsoluteURL(global_window__WEBPACK_IMPORTED_MODULE_0___default().Element.prototype.getAttribute.call(this, "src")) : "";
                },
                set: function(v) {
                    return global_window__WEBPACK_IMPORTED_MODULE_0___default().Element.prototype.setAttribute.call(this, "src", v), v;
                }
            }), setupSourceset = function(tech) {
                if (tech.featuresSourceset) {
                    var el = tech.el(); // make sure sourceset isn't setup twice.
                    if (!el.resetSourceset_) {
                        var srcDescriptor = getDescriptor([
                            tech.el(),
                            global_window__WEBPACK_IMPORTED_MODULE_0___default().HTMLMediaElement.prototype,
                            srcDescriptorPolyfill
                        ], "src"), oldSetAttribute = el.setAttribute, oldLoad = el.load;
                        Object.defineProperty(el, "src", mergeOptions$3(srcDescriptor, {
                            set: function(v) {
                                var retval = srcDescriptor.set.call(el, v); // we use the getter here to get the actual value set on src
                                return tech.triggerSourceset(el.src), retval;
                            }
                        })), el.setAttribute = function(n, v) {
                            var retval = oldSetAttribute.call(el, n, v);
                            return /src/i.test(n) && tech.triggerSourceset(el.src), retval;
                        }, el.load = function() {
                            var retval = oldLoad.call(el); // if load was called, but there was no source to fire
                            return sourcesetLoad(tech) || (tech.triggerSourceset(""), firstSourceWatch(tech)), retval;
                        }, el.currentSrc ? tech.triggerSourceset(el.currentSrc) : sourcesetLoad(tech) || firstSourceWatch(tech), el.resetSourceset_ = function() {
                            el.resetSourceset_ = null, el.load = oldLoad, el.setAttribute = oldSetAttribute, Object.defineProperty(el, "src", srcDescriptor), el.resetSourceWatch_ && el.resetSourceWatch_();
                        };
                    }
                }
            }, defineLazyProperty = function(obj, key, getValue, setter) {
                void 0 === setter && (setter = !0);
                var set = function(value) {
                    return Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: !0,
                        writable: !0
                    });
                }, options = {
                    configurable: !0,
                    enumerable: !0,
                    get: function() {
                        var value = getValue();
                        return set(value), value;
                    }
                };
                return setter && (options.set = set), Object.defineProperty(obj, key, options);
            }, Html5 = /*#__PURE__*/ function(_Tech) {
                /**
                 * Create an instance of this Tech.
                 *
                 * @param {Object} [options]
                 *        The key/value store of player options.
                 *
                 * @param {Component~ReadyCallback} ready
                 *        Callback function to call when the `HTML5` Tech is ready.
                 */ function Html5(options, ready) {
                    _this = _Tech.call(this, options, ready) || this;
                    var _this, source = options.source, crossoriginTracks = !1;
                    if (source && (_this.el_.currentSrc !== source.src || options.tag && 3 === options.tag.initNetworkState_) ? _this.setSource(source) : _this.handleLateInit_(_this.el_), options.enableSourceset && _this.setupSourcesetHandling_(), _this.isScrubbing_ = !1, _this.el_.hasChildNodes()) {
                        for(var nodes = _this.el_.childNodes, nodesLength = nodes.length, removeNodes = []; nodesLength--;){
                            var node = nodes[nodesLength];
                            "track" === node.nodeName.toLowerCase() && (_this.featuresNativeTextTracks ? (// store HTMLTrackElement and TextTrack to remote list
                            _this.remoteTextTrackEls().addTrackElement_(node), _this.remoteTextTracks().addTrack(node.track), _this.textTracks().addTrack(node.track), !crossoriginTracks && !_this.el_.hasAttribute("crossorigin") && isCrossOrigin(node.src) && (crossoriginTracks = !0)) : // Empty video tag tracks so the built-in player doesn't use them also.
                            // This may not be fast enough to stop HTML5 browsers from reading the tags
                            // so we'll need to turn off any default tracks if we're manually doing
                            // captions and subtitles. videoElement.textTracks
                            removeNodes.push(node));
                        }
                        for(var i = 0; i < removeNodes.length; i++)_this.el_.removeChild(removeNodes[i]);
                    }
                    return _this.proxyNativeTracks_(), _this.featuresNativeTextTracks && crossoriginTracks && log$1.warn("Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\nThis may prevent text tracks from loading."), _this.restoreMetadataTracksInIOSNativePlayer_(), (TOUCH_ENABLED || IS_IPHONE || IS_NATIVE_ANDROID) && !0 === options.nativeControlsForTouch && _this.setControls(!0), // into a `fullscreenchange` event
                    _this.proxyWebkitFullscreen_(), _this.triggerReady(), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(Html5, _Tech);
                /**
                 * Dispose of `HTML5` media element and remove all tracks.
                 */ var _proto = Html5.prototype;
                return _proto.dispose = function() {
                    this.el_ && this.el_.resetSourceset_ && this.el_.resetSourceset_(), Html5.disposeMediaElement(this.el_), this.options_ = null, _Tech.prototype.dispose.call(this);
                }, /**
                 * Modify the media element so that we can detect when
                 * the source is changed. Fires `sourceset` just after the source has changed
                 */ _proto.setupSourcesetHandling_ = function() {
                    setupSourceset(this);
                }, /**
                 * When a captions track is enabled in the iOS Safari native player, all other
                 * tracks are disabled (including metadata tracks), which nulls all of their
                 * associated cue points. This will restore metadata tracks to their pre-fullscreen
                 * state in those cases so that cue points are not needlessly lost.
                 *
                 * @private
                 */ _proto.restoreMetadataTracksInIOSNativePlayer_ = function() {
                    var metadataTracksPreFullscreenState, textTracks = this.textTracks(), takeMetadataTrackSnapshot = function() {
                        metadataTracksPreFullscreenState = [];
                        for(var i = 0; i < textTracks.length; i++){
                            var track = textTracks[i];
                            "metadata" === track.kind && metadataTracksPreFullscreenState.push({
                                track: track,
                                storedMode: track.mode
                            });
                        }
                    };
                    // each time there is a track 'change' event
                    takeMetadataTrackSnapshot(), textTracks.addEventListener("change", takeMetadataTrackSnapshot), this.on("dispose", function() {
                        return textTracks.removeEventListener("change", takeMetadataTrackSnapshot);
                    });
                    var restoreTrackMode = function restoreTrackMode() {
                        for(var i = 0; i < metadataTracksPreFullscreenState.length; i++){
                            var storedTrack = metadataTracksPreFullscreenState[i];
                            "disabled" === storedTrack.track.mode && storedTrack.track.mode !== storedTrack.storedMode && (storedTrack.track.mode = storedTrack.storedMode);
                        } // we only want this handler to be executed on the first 'change' event
                        textTracks.removeEventListener("change", restoreTrackMode);
                    }; // when we enter fullscreen playback, stop updating the snapshot and
                    // restore all track modes to their pre-fullscreen state
                    this.on("webkitbeginfullscreen", function() {
                        textTracks.removeEventListener("change", takeMetadataTrackSnapshot), textTracks.removeEventListener("change", restoreTrackMode), textTracks.addEventListener("change", restoreTrackMode);
                    }), this.on("webkitendfullscreen", function() {
                        // remove the listener before adding it just in case it wasn't previously removed
                        textTracks.removeEventListener("change", takeMetadataTrackSnapshot), textTracks.addEventListener("change", takeMetadataTrackSnapshot), textTracks.removeEventListener("change", restoreTrackMode);
                    });
                }, /**
                 * Attempt to force override of tracks for the given type
                 *
                 * @param {string} type - Track type to override, possible values include 'Audio',
                 * 'Video', and 'Text'.
                 * @param {boolean} override - If set to true native audio/video will be overridden,
                 * otherwise native audio/video will potentially be used.
                 * @private
                 */ _proto.overrideNative_ = function(type, override) {
                    var _this2 = this;
                    // If there is no behavioral change don't add/remove listeners
                    if (override === this["featuresNative" + type + "Tracks"]) {
                        var lowerCaseType = type.toLowerCase();
                        this[lowerCaseType + "TracksListeners_"] && Object.keys(this[lowerCaseType + "TracksListeners_"]).forEach(function(eventName) {
                            _this2.el()[lowerCaseType + "Tracks"].removeEventListener(eventName, _this2[lowerCaseType + "TracksListeners_"][eventName]);
                        }), this["featuresNative" + type + "Tracks"] = !override, this[lowerCaseType + "TracksListeners_"] = null, this.proxyNativeTracksForType_(lowerCaseType);
                    }
                }, /**
                 * Attempt to force override of native audio tracks.
                 *
                 * @param {boolean} override - If set to true native audio will be overridden,
                 * otherwise native audio will potentially be used.
                 */ _proto.overrideNativeAudioTracks = function(override) {
                    this.overrideNative_("Audio", override);
                }, /**
                 * Attempt to force override of native video tracks.
                 *
                 * @param {boolean} override - If set to true native video will be overridden,
                 * otherwise native video will potentially be used.
                 */ _proto.overrideNativeVideoTracks = function(override) {
                    this.overrideNative_("Video", override);
                }, /**
                 * Proxy native track list events for the given type to our track
                 * lists if the browser we are playing in supports that type of track list.
                 *
                 * @param {string} name - Track type; values include 'audio', 'video', and 'text'
                 * @private
                 */ _proto.proxyNativeTracksForType_ = function(name) {
                    var _this3 = this, props = NORMAL[name], elTracks = this.el()[props.getterName], techTracks = this[props.getterName]();
                    if (this["featuresNative" + props.capitalName + "Tracks"] && elTracks && elTracks.addEventListener) {
                        var listeners = {
                            change: function(e) {
                                var event = {
                                    type: "change",
                                    target: techTracks,
                                    currentTarget: techTracks,
                                    srcElement: techTracks
                                };
                                techTracks.trigger(event), "text" === name && _this3[REMOTE.remoteText.getterName]().trigger(event);
                            },
                            addtrack: function(e) {
                                techTracks.addTrack(e.track);
                            },
                            removetrack: function(e) {
                                techTracks.removeTrack(e.track);
                            }
                        }, removeOldTracks = function() {
                            for(var removeTracks = [], i = 0; i < techTracks.length; i++){
                                for(var found = !1, j = 0; j < elTracks.length; j++)if (elTracks[j] === techTracks[i]) {
                                    found = !0;
                                    break;
                                }
                                found || removeTracks.push(techTracks[i]);
                            }
                            for(; removeTracks.length;)techTracks.removeTrack(removeTracks.shift());
                        };
                        this[props.getterName + "Listeners_"] = listeners, Object.keys(listeners).forEach(function(eventName) {
                            var listener = listeners[eventName];
                            elTracks.addEventListener(eventName, listener), _this3.on("dispose", function(e) {
                                return elTracks.removeEventListener(eventName, listener);
                            });
                        }), this.on("loadstart", removeOldTracks), this.on("dispose", function(e) {
                            return _this3.off("loadstart", removeOldTracks);
                        });
                    }
                }, /**
                 * Proxy all native track list events to our track lists if the browser we are playing
                 * in supports that type of track list.
                 *
                 * @private
                 */ _proto.proxyNativeTracks_ = function() {
                    var _this4 = this;
                    NORMAL.names.forEach(function(name) {
                        _this4.proxyNativeTracksForType_(name);
                    });
                }, /**
                 * Create the `Html5` Tech's DOM element.
                 *
                 * @return {Element}
                 *         The element that gets created.
                 */ _proto.createEl = function() {
                    var el = this.options_.tag; // Check if this browser supports moving the element into the box.
                    // On the iPhone video will break if you move the element,
                    // So we have to create a brand new element.
                    // If we ingested the player div, we do not need to move the media element.
                    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {
                        // If the original tag is still there, clone and remove it.
                        if (el) {
                            var clone = el.cloneNode(!0);
                            el.parentNode && el.parentNode.insertBefore(clone, el), Html5.disposeMediaElement(el), el = clone;
                        } else {
                            el = global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("video");
                            var attributes = mergeOptions$3({}, this.options_.tag && getAttributes(this.options_.tag));
                            TOUCH_ENABLED && !0 === this.options_.nativeControlsForTouch || delete attributes.controls, setAttributes(el, assign(attributes, {
                                id: this.options_.techId,
                                class: "vjs-tech"
                            }));
                        }
                        el.playerId = this.options_.playerId;
                    }
                    void 0 !== this.options_.preload && setAttribute(el, "preload", this.options_.preload), void 0 !== this.options_.disablePictureInPicture && (el.disablePictureInPicture = this.options_.disablePictureInPicture);
                    for(var settingsAttrs = [
                        "loop",
                        "muted",
                        "playsinline",
                        "autoplay"
                    ], i = 0; i < settingsAttrs.length; i++){
                        var attr = settingsAttrs[i], value = this.options_[attr];
                        void 0 !== value && (value ? setAttribute(el, attr, attr) : removeAttribute(el, attr), el[attr] = value);
                    }
                    return el;
                }, /**
                 * This will be triggered if the loadstart event has already fired, before videojs was
                 * ready. Two known examples of when this can happen are:
                 * 1. If we're loading the playback object after it has started loading
                 * 2. The media is already playing the (often with autoplay on) then
                 *
                 * This function will fire another loadstart so that videojs can catchup.
                 *
                 * @fires Tech#loadstart
                 *
                 * @return {undefined}
                 *         returns nothing.
                 */ _proto.handleLateInit_ = function(el) {
                    if (0 !== el.networkState && 3 !== el.networkState) {
                        if (0 === el.readyState) {
                            // NetworkState is set synchronously BUT loadstart is fired at the
                            // end of the current stack, usually before setInterval(fn, 0).
                            // So at this point we know loadstart may have already fired or is
                            // about to fire, and either way the player hasn't seen it yet.
                            // We don't want to fire loadstart prematurely here and cause a
                            // double loadstart so we'll wait and see if it happens between now
                            // and the next loop, and fire it if not.
                            // HOWEVER, we also want to make sure it fires before loadedmetadata
                            // which could also happen between now and the next loop, so we'll
                            // watch for that also.
                            var loadstartFired = !1, setLoadstartFired = function() {
                                loadstartFired = !0;
                            };
                            this.on("loadstart", setLoadstartFired);
                            var triggerLoadstart = function() {
                                // We did miss the original loadstart. Make sure the player
                                // sees loadstart before loadedmetadata
                                loadstartFired || this.trigger("loadstart");
                            };
                            this.on("loadedmetadata", triggerLoadstart), this.ready(function() {
                                this.off("loadstart", setLoadstartFired), this.off("loadedmetadata", triggerLoadstart), loadstartFired || // We did miss the original native loadstart. Fire it now.
                                this.trigger("loadstart");
                            });
                            return;
                        } // From here on we know that loadstart already fired and we missed it.
                        // The other readyState events aren't as much of a problem if we double
                        // them, so not going to go to as much trouble as loadstart to prevent
                        // that unless we find reason to.
                        var eventsToTrigger = [
                            "loadstart"
                        ]; // loadedmetadata: newly equal to HAVE_METADATA (1) or greater
                        eventsToTrigger.push("loadedmetadata"), el.readyState >= 2 && eventsToTrigger.push("loadeddata"), el.readyState >= 3 && eventsToTrigger.push("canplay"), el.readyState >= 4 && eventsToTrigger.push("canplaythrough"), this.ready(function() {
                            eventsToTrigger.forEach(function(type) {
                                this.trigger(type);
                            }, this);
                        });
                    }
                }, /**
                 * Set whether we are scrubbing or not.
                 * This is used to decide whether we should use `fastSeek` or not.
                 * `fastSeek` is used to provide trick play on Safari browsers.
                 *
                 * @param {boolean} isScrubbing
                 *                  - true for we are currently scrubbing
                 *                  - false for we are no longer scrubbing
                 */ _proto.setScrubbing = function(isScrubbing) {
                    this.isScrubbing_ = isScrubbing;
                }, /**
                 * Get whether we are scrubbing or not.
                 *
                 * @return {boolean} isScrubbing
                 *                  - true for we are currently scrubbing
                 *                  - false for we are no longer scrubbing
                 */ _proto.scrubbing = function() {
                    return this.isScrubbing_;
                }, /**
                 * Set current time for the `HTML5` tech.
                 *
                 * @param {number} seconds
                 *        Set the current time of the media to this.
                 */ _proto.setCurrentTime = function(seconds) {
                    try {
                        this.isScrubbing_ && this.el_.fastSeek && IS_ANY_SAFARI ? this.el_.fastSeek(seconds) : this.el_.currentTime = seconds;
                    } catch (e) {
                        log$1(e, "Video is not ready. (Video.js)"); // this.warning(VideoJS.warnings.videoNotReady);
                    }
                }, /**
                 * Get the current duration of the HTML5 media element.
                 *
                 * @return {number}
                 *         The duration of the media or 0 if there is no duration.
                 */ _proto.duration = function() {
                    var _this5 = this;
                    return(// Android Chrome will report duration as Infinity for VOD HLS until after
                    // playback has started, which triggers the live display erroneously.
                    // Return NaN if playback has not started and trigger a durationupdate once
                    // the duration can be reliably known.
                    this.el_.duration === 1 / 0 && IS_ANDROID && IS_CHROME && 0 === this.el_.currentTime ? (this.on("timeupdate", function checkProgress() {
                        _this5.el_.currentTime > 0 && (_this5.el_.duration === 1 / 0 && _this5.trigger("durationchange"), _this5.off("timeupdate", checkProgress));
                    }), NaN) : this.el_.duration || NaN);
                }, /**
                 * Get the current width of the HTML5 media element.
                 *
                 * @return {number}
                 *         The width of the HTML5 media element.
                 */ _proto.width = function() {
                    return this.el_.offsetWidth;
                }, /**
                 * Get the current height of the HTML5 media element.
                 *
                 * @return {number}
                 *         The height of the HTML5 media element.
                 */ _proto.height = function() {
                    return this.el_.offsetHeight;
                }, /**
                 * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into
                 * `fullscreenchange` event.
                 *
                 * @private
                 * @fires fullscreenchange
                 * @listens webkitendfullscreen
                 * @listens webkitbeginfullscreen
                 * @listens webkitbeginfullscreen
                 */ _proto.proxyWebkitFullscreen_ = function() {
                    var _this6 = this;
                    if ("webkitDisplayingFullscreen" in this.el_) {
                        var endFn = function() {
                            this.trigger("fullscreenchange", {
                                isFullscreen: !1
                            });
                        }, beginFn = function() {
                            "webkitPresentationMode" in this.el_ && "picture-in-picture" !== this.el_.webkitPresentationMode && (this.one("webkitendfullscreen", endFn), this.trigger("fullscreenchange", {
                                isFullscreen: !0,
                                // set a flag in case another tech triggers fullscreenchange
                                nativeIOSFullscreen: !0
                            }));
                        };
                        this.on("webkitbeginfullscreen", beginFn), this.on("dispose", function() {
                            _this6.off("webkitbeginfullscreen", beginFn), _this6.off("webkitendfullscreen", endFn);
                        });
                    }
                }, /**
                 * Check if fullscreen is supported on the current playback device.
                 *
                 * @return {boolean}
                 *         - True if fullscreen is supported.
                 *         - False if fullscreen is not supported.
                 */ _proto.supportsFullScreen = function() {
                    if ("function" == typeof this.el_.webkitEnterFullScreen) {
                        var userAgent = global_window__WEBPACK_IMPORTED_MODULE_0___default().navigator && global_window__WEBPACK_IMPORTED_MODULE_0___default().navigator.userAgent || ""; // Seems to be broken in Chromium/Chrome && Safari in Leopard
                        if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) return !0;
                    }
                    return !1;
                }, /**
                 * Request that the `HTML5` Tech enter fullscreen.
                 */ _proto.enterFullScreen = function() {
                    var video = this.el_;
                    if (video.paused && video.networkState <= video.HAVE_METADATA) // attempt to prime the video element for programmatic access
                    // this isn't necessary on the desktop but shouldn't hurt
                    silencePromise(this.el_.play()), // can get iOS ~6.1 devices into a play/pause loop
                    this.setTimeout(function() {
                        video.pause();
                        try {
                            video.webkitEnterFullScreen();
                        } catch (e) {
                            this.trigger("fullscreenerror", e);
                        }
                    }, 0);
                    else try {
                        video.webkitEnterFullScreen();
                    } catch (e) {
                        this.trigger("fullscreenerror", e);
                    }
                }, /**
                 * Request that the `HTML5` Tech exit fullscreen.
                 */ _proto.exitFullScreen = function() {
                    if (!this.el_.webkitDisplayingFullscreen) {
                        this.trigger("fullscreenerror", Error("The video is not fullscreen"));
                        return;
                    }
                    this.el_.webkitExitFullScreen();
                }, /**
                 * Create a floating video window always on top of other windows so that users may
                 * continue consuming media while they interact with other content sites, or
                 * applications on their device.
                 *
                 * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
                 *
                 * @return {Promise}
                 *         A promise with a Picture-in-Picture window.
                 */ _proto.requestPictureInPicture = function() {
                    return this.el_.requestPictureInPicture();
                }, /**
                 * A getter/setter for the `Html5` Tech's source object.
                 * > Note: Please use {@link Html5#setSource}
                 *
                 * @param {Tech~SourceObject} [src]
                 *        The source object you want to set on the `HTML5` techs element.
                 *
                 * @return {Tech~SourceObject|undefined}
                 *         - The current source object when a source is not passed in.
                 *         - undefined when setting
                 *
                 * @deprecated Since version 5.
                 */ _proto.src = function(_src) {
                    if (void 0 === _src) return this.el_.src;
                     // Setting src through `src` instead of `setSrc` will be deprecated
                    this.setSrc(_src);
                }, /**
                 * Reset the tech by removing all sources and then calling
                 * {@link Html5.resetMediaElement}.
                 */ _proto.reset = function() {
                    Html5.resetMediaElement(this.el_);
                }, /**
                 * Get the current source on the `HTML5` Tech. Falls back to returning the source from
                 * the HTML5 media element.
                 *
                 * @return {Tech~SourceObject}
                 *         The current source object from the HTML5 tech. With a fallback to the
                 *         elements source.
                 */ _proto.currentSrc = function() {
                    return this.currentSource_ ? this.currentSource_.src : this.el_.currentSrc;
                }, /**
                 * Set controls attribute for the HTML5 media Element.
                 *
                 * @param {string} val
                 *        Value to set the controls attribute to
                 */ _proto.setControls = function(val) {
                    this.el_.controls = !!val;
                }, /**
                 * Create and returns a remote {@link TextTrack} object.
                 *
                 * @param {string} kind
                 *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
                 *
                 * @param {string} [label]
                 *        Label to identify the text track
                 *
                 * @param {string} [language]
                 *        Two letter language abbreviation
                 *
                 * @return {TextTrack}
                 *         The TextTrack that gets created.
                 */ _proto.addTextTrack = function(kind, label, language) {
                    return this.featuresNativeTextTracks ? this.el_.addTextTrack(kind, label, language) : _Tech.prototype.addTextTrack.call(this, kind, label, language);
                }, /**
                 * Creates either native TextTrack or an emulated TextTrack depending
                 * on the value of `featuresNativeTextTracks`
                 *
                 * @param {Object} options
                 *        The object should contain the options to initialize the TextTrack with.
                 *
                 * @param {string} [options.kind]
                 *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
                 *
                 * @param {string} [options.label]
                 *        Label to identify the text track
                 *
                 * @param {string} [options.language]
                 *        Two letter language abbreviation.
                 *
                 * @param {boolean} [options.default]
                 *        Default this track to on.
                 *
                 * @param {string} [options.id]
                 *        The internal id to assign this track.
                 *
                 * @param {string} [options.src]
                 *        A source url for the track.
                 *
                 * @return {HTMLTrackElement}
                 *         The track element that gets created.
                 */ _proto.createRemoteTextTrack = function(options) {
                    if (!this.featuresNativeTextTracks) return _Tech.prototype.createRemoteTextTrack.call(this, options);
                    var htmlTrackElement = global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("track");
                    return options.kind && (htmlTrackElement.kind = options.kind), options.label && (htmlTrackElement.label = options.label), (options.language || options.srclang) && (htmlTrackElement.srclang = options.language || options.srclang), options.default && (htmlTrackElement.default = options.default), options.id && (htmlTrackElement.id = options.id), options.src && (htmlTrackElement.src = options.src), htmlTrackElement;
                }, /**
                 * Creates a remote text track object and returns an html track element.
                 *
                 * @param {Object} options The object should contain values for
                 * kind, language, label, and src (location of the WebVTT file)
                 * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be
                 * automatically removed from the video element whenever the source changes
                 * @return {HTMLTrackElement} An Html Track Element.
                 * This can be an emulated {@link HTMLTrackElement} or a native one.
                 * @deprecated The default value of the "manualCleanup" parameter will default
                 * to "false" in upcoming versions of Video.js
                 */ _proto.addRemoteTextTrack = function(options, manualCleanup) {
                    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);
                    return this.featuresNativeTextTracks && this.el().appendChild(htmlTrackElement), htmlTrackElement;
                }, /**
                 * Remove remote `TextTrack` from `TextTrackList` object
                 *
                 * @param {TextTrack} track
                 *        `TextTrack` object to remove
                 */ _proto.removeRemoteTextTrack = function(track) {
                    if (_Tech.prototype.removeRemoteTextTrack.call(this, track), this.featuresNativeTextTracks) for(var tracks = this.$$("track"), i = tracks.length; i--;)(track === tracks[i] || track === tracks[i].track) && this.el().removeChild(tracks[i]);
                }, /**
                 * Gets available media playback quality metrics as specified by the W3C's Media
                 * Playback Quality API.
                 *
                 * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
                 *
                 * @return {Object}
                 *         An object with supported media playback quality metrics
                 */ _proto.getVideoPlaybackQuality = function() {
                    if ("function" == typeof this.el().getVideoPlaybackQuality) return this.el().getVideoPlaybackQuality();
                    var videoPlaybackQuality = {};
                    return void 0 !== this.el().webkitDroppedFrameCount && void 0 !== this.el().webkitDecodedFrameCount && (videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount, videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount), global_window__WEBPACK_IMPORTED_MODULE_0___default().performance && "function" == typeof global_window__WEBPACK_IMPORTED_MODULE_0___default().performance.now ? videoPlaybackQuality.creationTime = global_window__WEBPACK_IMPORTED_MODULE_0___default().performance.now() : global_window__WEBPACK_IMPORTED_MODULE_0___default().performance && global_window__WEBPACK_IMPORTED_MODULE_0___default().performance.timing && "number" == typeof global_window__WEBPACK_IMPORTED_MODULE_0___default().performance.timing.navigationStart && (videoPlaybackQuality.creationTime = global_window__WEBPACK_IMPORTED_MODULE_0___default().Date.now() - global_window__WEBPACK_IMPORTED_MODULE_0___default().performance.timing.navigationStart), videoPlaybackQuality;
                }, Html5;
            }(Tech);
            /* HTML5 Support Testing ---------------------------------------------------- */ /**
             * Element for testing browser HTML5 media capabilities
             *
             * @type {Element}
             * @constant
             * @private
             */ defineLazyProperty(Html5, "TEST_VID", function() {
                if (isReal()) {
                    var video = global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("video"), track = global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("track");
                    return track.kind = "captions", track.srclang = "en", track.label = "English", video.appendChild(track), video;
                }
            }), /**
             * Check if HTML5 media is supported by this browser/device.
             *
             * @return {boolean}
             *         - True if HTML5 media is supported.
             *         - False if HTML5 media is not supported.
             */ Html5.isSupported = function() {
                // IE with no Media Player is a LIAR! (#984)
                try {
                    Html5.TEST_VID.volume = 0.5;
                } catch (e) {
                    return !1;
                }
                return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);
            }, /**
             * Check if the tech can support the given type
             *
             * @param {string} type
             *        The mimetype to check
             * @return {string} 'probably', 'maybe', or '' (empty string)
             */ Html5.canPlayType = function(type) {
                return Html5.TEST_VID.canPlayType(type);
            }, /**
             * Check if the tech can support the given source
             *
             * @param {Object} srcObj
             *        The source object
             * @param {Object} options
             *        The options passed to the tech
             * @return {string} 'probably', 'maybe', or '' (empty string)
             */ Html5.canPlaySource = function(srcObj, options) {
                return Html5.canPlayType(srcObj.type);
            }, /**
             * Check if the volume can be changed in this browser/device.
             * Volume cannot be changed in a lot of mobile devices.
             * Specifically, it can't be changed from 1 on iOS.
             *
             * @return {boolean}
             *         - True if volume can be controlled
             *         - False otherwise
             */ Html5.canControlVolume = function() {
                // IE will error if Windows Media Player not installed #3315
                try {
                    var volume = Html5.TEST_VID.volume;
                    return Html5.TEST_VID.volume = volume / 2 + 0.1, volume !== Html5.TEST_VID.volume;
                } catch (e) {
                    return !1;
                }
            }, /**
             * Check if the volume can be muted in this browser/device.
             * Some devices, e.g. iOS, don't allow changing volume
             * but permits muting/unmuting.
             *
             * @return {bolean}
             *      - True if volume can be muted
             *      - False otherwise
             */ Html5.canMuteVolume = function() {
                try {
                    var muted = Html5.TEST_VID.muted; // in some versions of iOS muted property doesn't always
                    return(// work, so we want to set both property and attribute
                    Html5.TEST_VID.muted = !muted, Html5.TEST_VID.muted ? setAttribute(Html5.TEST_VID, "muted", "muted") : removeAttribute(Html5.TEST_VID, "muted", "muted"), muted !== Html5.TEST_VID.muted);
                } catch (e) {
                    return !1;
                }
            }, /**
             * Check if the playback rate can be changed in this browser/device.
             *
             * @return {boolean}
             *         - True if playback rate can be controlled
             *         - False otherwise
             */ Html5.canControlPlaybackRate = function() {
                // Playback rate API is implemented in Android Chrome, but doesn't do anything
                // https://github.com/videojs/video.js/issues/3180
                if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) return !1;
                 // IE will error if Windows Media Player not installed #3315
                try {
                    var playbackRate = Html5.TEST_VID.playbackRate;
                    return Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1, playbackRate !== Html5.TEST_VID.playbackRate;
                } catch (e) {
                    return !1;
                }
            }, /**
             * Check if we can override a video/audio elements attributes, with
             * Object.defineProperty.
             *
             * @return {boolean}
             *         - True if builtin attributes can be overridden
             *         - False otherwise
             */ Html5.canOverrideAttributes = function() {
                // if we cannot overwrite the src/innerHTML property, there is no support
                // iOS 7 safari for instance cannot do this.
                try {
                    var noop = function() {};
                    Object.defineProperty(global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("video"), "src", {
                        get: noop,
                        set: noop
                    }), Object.defineProperty(global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("audio"), "src", {
                        get: noop,
                        set: noop
                    }), Object.defineProperty(global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("video"), "innerHTML", {
                        get: noop,
                        set: noop
                    }), Object.defineProperty(global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("audio"), "innerHTML", {
                        get: noop,
                        set: noop
                    });
                } catch (e) {
                    return !1;
                }
                return !0;
            }, /**
             * Check to see if native `TextTrack`s are supported by this browser/device.
             *
             * @return {boolean}
             *         - True if native `TextTrack`s are supported.
             *         - False otherwise
             */ Html5.supportsNativeTextTracks = function() {
                return IS_ANY_SAFARI || IS_IOS && IS_CHROME;
            }, /**
             * Check to see if native `VideoTrack`s are supported by this browser/device
             *
             * @return {boolean}
             *        - True if native `VideoTrack`s are supported.
             *        - False otherwise
             */ Html5.supportsNativeVideoTracks = function() {
                return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);
            }, /**
             * Check to see if native `AudioTrack`s are supported by this browser/device
             *
             * @return {boolean}
             *        - True if native `AudioTrack`s are supported.
             *        - False otherwise
             */ Html5.supportsNativeAudioTracks = function() {
                return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);
            }, /**
             * An array of events available on the Html5 tech.
             *
             * @private
             * @type {Array}
             */ Html5.Events = [
                "loadstart",
                "suspend",
                "abort",
                "error",
                "emptied",
                "stalled",
                "loadedmetadata",
                "loadeddata",
                "canplay",
                "canplaythrough",
                "playing",
                "waiting",
                "seeking",
                "seeked",
                "ended",
                "durationchange",
                "timeupdate",
                "progress",
                "play",
                "pause",
                "ratechange",
                "resize",
                "volumechange"
            ], /**
             * Boolean indicating whether the `Tech` supports volume control.
             *
             * @type {boolean}
             * @default {@link Html5.canControlVolume}
             */ /**
             * Boolean indicating whether the `Tech` supports muting volume.
             *
             * @type {bolean}
             * @default {@link Html5.canMuteVolume}
             */ /**
             * Boolean indicating whether the `Tech` supports changing the speed at which the media
             * plays. Examples:
             *   - Set player to play 2x (twice) as fast
             *   - Set player to play 0.5x (half) as fast
             *
             * @type {boolean}
             * @default {@link Html5.canControlPlaybackRate}
             */ /**
             * Boolean indicating whether the `Tech` supports the `sourceset` event.
             *
             * @type {boolean}
             * @default
             */ /**
             * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.
             *
             * @type {boolean}
             * @default {@link Html5.supportsNativeTextTracks}
             */ /**
             * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.
             *
             * @type {boolean}
             * @default {@link Html5.supportsNativeVideoTracks}
             */ /**
             * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.
             *
             * @type {boolean}
             * @default {@link Html5.supportsNativeAudioTracks}
             */ [
                [
                    "featuresVolumeControl",
                    "canControlVolume"
                ],
                [
                    "featuresMuteControl",
                    "canMuteVolume"
                ],
                [
                    "featuresPlaybackRate",
                    "canControlPlaybackRate"
                ],
                [
                    "featuresSourceset",
                    "canOverrideAttributes"
                ],
                [
                    "featuresNativeTextTracks",
                    "supportsNativeTextTracks"
                ],
                [
                    "featuresNativeVideoTracks",
                    "supportsNativeVideoTracks"
                ],
                [
                    "featuresNativeAudioTracks",
                    "supportsNativeAudioTracks"
                ]
            ].forEach(function(_ref) {
                var key = _ref[0], fn = _ref[1];
                defineLazyProperty(Html5.prototype, key, function() {
                    return Html5[fn]();
                }, !0);
            }), /**
             * Boolean indicating whether the `HTML5` tech currently supports the media element
             * moving in the DOM. iOS breaks if you move the media element, so this is set this to
             * false there. Everywhere else this should be true.
             *
             * @type {boolean}
             * @default
             */ Html5.prototype.movingMediaElementInDOM = !IS_IOS, //       Is this true?
            /**
             * Boolean indicating whether the `HTML5` tech currently supports automatic media resize
             * when going into fullscreen.
             *
             * @type {boolean}
             * @default
             */ Html5.prototype.featuresFullscreenResize = !0, /**
             * Boolean indicating whether the `HTML5` tech currently supports the progress event.
             * If this is false, manual `progress` events will be triggered instead.
             *
             * @type {boolean}
             * @default
             */ Html5.prototype.featuresProgressEvents = !0, /**
             * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.
             * If this is false, manual `timeupdate` events will be triggered instead.
             *
             * @default
             */ Html5.prototype.featuresTimeupdateEvents = !0, Html5.patchCanPlayType = function() {
                // Android 4.0 and above can play HLS to some extent but it reports being unable to do so
                // Firefox and Chrome report correctly
                !(ANDROID_VERSION >= 4.0) || IS_FIREFOX || IS_CHROME || (canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType, Html5.TEST_VID.constructor.prototype.canPlayType = function(type) {
                    return type && /^application\/(?:x-|vnd\.apple\.)mpegurl/i.test(type) ? "maybe" : canPlayType.call(this, type);
                });
            }, Html5.unpatchCanPlayType = function() {
                var r = Html5.TEST_VID.constructor.prototype.canPlayType;
                return canPlayType && (Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType), r;
            }, Html5.patchCanPlayType(), Html5.disposeMediaElement = function(el) {
                if (el) {
                    for(el.parentNode && el.parentNode.removeChild(el); el.hasChildNodes();)el.removeChild(el.firstChild);
                     // remove any src reference. not setting `src=''` because that causes a warning
                    // in firefox
                    el.removeAttribute("src"), "function" == typeof el.load && // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
                    function() {
                        try {
                            el.load();
                        } catch (e) {
                        // not supported
                        }
                    }();
                }
            }, Html5.resetMediaElement = function(el) {
                if (el) {
                    for(var sources = el.querySelectorAll("source"), i = sources.length; i--;)el.removeChild(sources[i]);
                     // remove any src reference.
                    // not setting `src=''` because that throws an error
                    el.removeAttribute("src"), "function" == typeof el.load && // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
                    function() {
                        try {
                            el.load();
                        } catch (e) {
                        // satisfy linter
                        }
                    }();
                }
            }, /* Native HTML5 element property wrapping ----------------------------------- */ // Wrap native boolean attributes with getters that check both property and attribute
            // The list is as followed:
            // muted, defaultMuted, autoplay, controls, loop, playsinline
            [
                /**
                 * Get the value of `muted` from the media element. `muted` indicates
                 * that the volume for the media should be set to silent. This does not actually change
                 * the `volume` attribute.
                 *
                 * @method Html5#muted
                 * @return {boolean}
                 *         - True if the value of `volume` should be ignored and the audio set to silent.
                 *         - False if the value of `volume` should be used.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
                 */ "muted",
                /**
                 * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates
                 * whether the media should start muted or not. Only changes the default state of the
                 * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the
                 * current state.
                 *
                 * @method Html5#defaultMuted
                 * @return {boolean}
                 *         - The value of `defaultMuted` from the media element.
                 *         - True indicates that the media should start muted.
                 *         - False indicates that the media should not start muted
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
                 */ "defaultMuted",
                /**
                 * Get the value of `autoplay` from the media element. `autoplay` indicates
                 * that the media should start to play as soon as the page is ready.
                 *
                 * @method Html5#autoplay
                 * @return {boolean}
                 *         - The value of `autoplay` from the media element.
                 *         - True indicates that the media should start as soon as the page loads.
                 *         - False indicates that the media should not start as soon as the page loads.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
                 */ "autoplay",
                /**
                 * Get the value of `controls` from the media element. `controls` indicates
                 * whether the native media controls should be shown or hidden.
                 *
                 * @method Html5#controls
                 * @return {boolean}
                 *         - The value of `controls` from the media element.
                 *         - True indicates that native controls should be showing.
                 *         - False indicates that native controls should be hidden.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}
                 */ "controls",
                /**
                 * Get the value of `loop` from the media element. `loop` indicates
                 * that the media should return to the start of the media and continue playing once
                 * it reaches the end.
                 *
                 * @method Html5#loop
                 * @return {boolean}
                 *         - The value of `loop` from the media element.
                 *         - True indicates that playback should seek back to start once
                 *           the end of a media is reached.
                 *         - False indicates that playback should not loop back to the start when the
                 *           end of the media is reached.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
                 */ "loop",
                /**
                 * Get the value of `playsinline` from the media element. `playsinline` indicates
                 * to the browser that non-fullscreen playback is preferred when fullscreen
                 * playback is the native default, such as in iOS Safari.
                 *
                 * @method Html5#playsinline
                 * @return {boolean}
                 *         - The value of `playsinline` from the media element.
                 *         - True indicates that the media should play inline.
                 *         - False indicates that the media should not play inline.
                 *
                 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
                 */ "playsinline"
            ].forEach(function(prop) {
                Html5.prototype[prop] = function() {
                    return this.el_[prop] || this.el_.hasAttribute(prop);
                };
            }), // The list is as followed:
            // setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline
            // setControls is special-cased above
            [
                /**
                 * Set the value of `muted` on the media element. `muted` indicates that the current
                 * audio level should be silent.
                 *
                 * @method Html5#setMuted
                 * @param {boolean} muted
                 *        - True if the audio should be set to silent
                 *        - False otherwise
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
                 */ "muted",
                /**
                 * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current
                 * audio level should be silent, but will only effect the muted level on initial playback..
                 *
                 * @method Html5.prototype.setDefaultMuted
                 * @param {boolean} defaultMuted
                 *        - True if the audio should be set to silent
                 *        - False otherwise
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
                 */ "defaultMuted",
                /**
                 * Set the value of `autoplay` on the media element. `autoplay` indicates
                 * that the media should start to play as soon as the page is ready.
                 *
                 * @method Html5#setAutoplay
                 * @param {boolean} autoplay
                 *         - True indicates that the media should start as soon as the page loads.
                 *         - False indicates that the media should not start as soon as the page loads.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
                 */ "autoplay",
                /**
                 * Set the value of `loop` on the media element. `loop` indicates
                 * that the media should return to the start of the media and continue playing once
                 * it reaches the end.
                 *
                 * @method Html5#setLoop
                 * @param {boolean} loop
                 *         - True indicates that playback should seek back to start once
                 *           the end of a media is reached.
                 *         - False indicates that playback should not loop back to the start when the
                 *           end of the media is reached.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
                 */ "loop",
                /**
                 * Set the value of `playsinline` from the media element. `playsinline` indicates
                 * to the browser that non-fullscreen playback is preferred when fullscreen
                 * playback is the native default, such as in iOS Safari.
                 *
                 * @method Html5#setPlaysinline
                 * @param {boolean} playsinline
                 *         - True indicates that the media should play inline.
                 *         - False indicates that the media should not play inline.
                 *
                 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
                 */ "playsinline"
            ].forEach(function(prop) {
                Html5.prototype["set" + toTitleCase$1(prop)] = function(v) {
                    this.el_[prop] = v, v ? this.el_.setAttribute(prop, prop) : this.el_.removeAttribute(prop);
                };
            }), // The list is as followed
            // paused, currentTime, buffered, volume, poster, preload, error, seeking
            // seekable, ended, playbackRate, defaultPlaybackRate, disablePictureInPicture
            // played, networkState, readyState, videoWidth, videoHeight, crossOrigin
            [
                /**
                 * Get the value of `paused` from the media element. `paused` indicates whether the media element
                 * is currently paused or not.
                 *
                 * @method Html5#paused
                 * @return {boolean}
                 *         The value of `paused` from the media element.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}
                 */ "paused",
                /**
                 * Get the value of `currentTime` from the media element. `currentTime` indicates
                 * the current second that the media is at in playback.
                 *
                 * @method Html5#currentTime
                 * @return {number}
                 *         The value of `currentTime` from the media element.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}
                 */ "currentTime",
                /**
                 * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`
                 * object that represents the parts of the media that are already downloaded and
                 * available for playback.
                 *
                 * @method Html5#buffered
                 * @return {TimeRange}
                 *         The value of `buffered` from the media element.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}
                 */ "buffered",
                /**
                 * Get the value of `volume` from the media element. `volume` indicates
                 * the current playback volume of audio for a media. `volume` will be a value from 0
                 * (silent) to 1 (loudest and default).
                 *
                 * @method Html5#volume
                 * @return {number}
                 *         The value of `volume` from the media element. Value will be between 0-1.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
                 */ "volume",
                /**
                 * Get the value of `poster` from the media element. `poster` indicates
                 * that the url of an image file that can/will be shown when no media data is available.
                 *
                 * @method Html5#poster
                 * @return {string}
                 *         The value of `poster` from the media element. Value will be a url to an
                 *         image.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}
                 */ "poster",
                /**
                 * Get the value of `preload` from the media element. `preload` indicates
                 * what should download before the media is interacted with. It can have the following
                 * values:
                 * - none: nothing should be downloaded
                 * - metadata: poster and the first few frames of the media may be downloaded to get
                 *   media dimensions and other metadata
                 * - auto: allow the media and metadata for the media to be downloaded before
                 *    interaction
                 *
                 * @method Html5#preload
                 * @return {string}
                 *         The value of `preload` from the media element. Will be 'none', 'metadata',
                 *         or 'auto'.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
                 */ "preload",
                /**
                 * Get the value of the `error` from the media element. `error` indicates any
                 * MediaError that may have occurred during playback. If error returns null there is no
                 * current error.
                 *
                 * @method Html5#error
                 * @return {MediaError|null}
                 *         The value of `error` from the media element. Will be `MediaError` if there
                 *         is a current error and null otherwise.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}
                 */ "error",
                /**
                 * Get the value of `seeking` from the media element. `seeking` indicates whether the
                 * media is currently seeking to a new position or not.
                 *
                 * @method Html5#seeking
                 * @return {boolean}
                 *         - The value of `seeking` from the media element.
                 *         - True indicates that the media is currently seeking to a new position.
                 *         - False indicates that the media is not seeking to a new position at this time.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}
                 */ "seeking",
                /**
                 * Get the value of `seekable` from the media element. `seekable` returns a
                 * `TimeRange` object indicating ranges of time that can currently be `seeked` to.
                 *
                 * @method Html5#seekable
                 * @return {TimeRange}
                 *         The value of `seekable` from the media element. A `TimeRange` object
                 *         indicating the current ranges of time that can be seeked to.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}
                 */ "seekable",
                /**
                 * Get the value of `ended` from the media element. `ended` indicates whether
                 * the media has reached the end or not.
                 *
                 * @method Html5#ended
                 * @return {boolean}
                 *         - The value of `ended` from the media element.
                 *         - True indicates that the media has ended.
                 *         - False indicates that the media has not ended.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}
                 */ "ended",
                /**
                 * Get the value of `playbackRate` from the media element. `playbackRate` indicates
                 * the rate at which the media is currently playing back. Examples:
                 *   - if playbackRate is set to 2, media will play twice as fast.
                 *   - if playbackRate is set to 0.5, media will play half as fast.
                 *
                 * @method Html5#playbackRate
                 * @return {number}
                 *         The value of `playbackRate` from the media element. A number indicating
                 *         the current playback speed of the media, where 1 is normal speed.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
                 */ "playbackRate",
                /**
                 * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates
                 * the rate at which the media is currently playing back. This value will not indicate the current
                 * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.
                 *
                 * Examples:
                 *   - if defaultPlaybackRate is set to 2, media will play twice as fast.
                 *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.
                 *
                 * @method Html5.prototype.defaultPlaybackRate
                 * @return {number}
                 *         The value of `defaultPlaybackRate` from the media element. A number indicating
                 *         the current playback speed of the media, where 1 is normal speed.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
                 */ "defaultPlaybackRate",
                /**
                 * Get the value of 'disablePictureInPicture' from the video element.
                 *
                 * @method Html5#disablePictureInPicture
                 * @return {boolean} value
                 *         - The value of `disablePictureInPicture` from the video element.
                 *         - True indicates that the video can't be played in Picture-In-Picture mode
                 *         - False indicates that the video can be played in Picture-In-Picture mode
                 *
                 * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}
                 */ "disablePictureInPicture",
                /**
                 * Get the value of `played` from the media element. `played` returns a `TimeRange`
                 * object representing points in the media timeline that have been played.
                 *
                 * @method Html5#played
                 * @return {TimeRange}
                 *         The value of `played` from the media element. A `TimeRange` object indicating
                 *         the ranges of time that have been played.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}
                 */ "played",
                /**
                 * Get the value of `networkState` from the media element. `networkState` indicates
                 * the current network state. It returns an enumeration from the following list:
                 * - 0: NETWORK_EMPTY
                 * - 1: NETWORK_IDLE
                 * - 2: NETWORK_LOADING
                 * - 3: NETWORK_NO_SOURCE
                 *
                 * @method Html5#networkState
                 * @return {number}
                 *         The value of `networkState` from the media element. This will be a number
                 *         from the list in the description.
                 *
                 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}
                 */ "networkState",
                /**
                 * Get the value of `readyState` from the media element. `readyState` indicates
                 * the current state of the media element. It returns an enumeration from the
                 * following list:
                 * - 0: HAVE_NOTHING
                 * - 1: HAVE_METADATA
                 * - 2: HAVE_CURRENT_DATA
                 * - 3: HAVE_FUTURE_DATA
                 * - 4: HAVE_ENOUGH_DATA
                 *
                 * @method Html5#readyState
                 * @return {number}
                 *         The value of `readyState` from the media element. This will be a number
                 *         from the list in the description.
                 *
                 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}
                 */ "readyState",
                /**
                 * Get the value of `videoWidth` from the video element. `videoWidth` indicates
                 * the current width of the video in css pixels.
                 *
                 * @method Html5#videoWidth
                 * @return {number}
                 *         The value of `videoWidth` from the video element. This will be a number
                 *         in css pixels.
                 *
                 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
                 */ "videoWidth",
                /**
                 * Get the value of `videoHeight` from the video element. `videoHeight` indicates
                 * the current height of the video in css pixels.
                 *
                 * @method Html5#videoHeight
                 * @return {number}
                 *         The value of `videoHeight` from the video element. This will be a number
                 *         in css pixels.
                 *
                 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
                 */ "videoHeight",
                /**
                 * Get the value of `crossOrigin` from the media element. `crossOrigin` indicates
                 * to the browser that should sent the cookies along with the requests for the
                 * different assets/playlists
                 *
                 * @method Html5#crossOrigin
                 * @return {string}
                 *         - anonymous indicates that the media should not sent cookies.
                 *         - use-credentials indicates that the media should sent cookies along the requests.
                 *
                 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}
                 */ "crossOrigin"
            ].forEach(function(prop) {
                Html5.prototype[prop] = function() {
                    return this.el_[prop];
                };
            }), // set + toTitleCase(name)
            // The list is as follows:
            // setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate,
            // setDisablePictureInPicture, setCrossOrigin
            [
                /**
                 * Set the value of `volume` on the media element. `volume` indicates the current
                 * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
                 * so on.
                 *
                 * @method Html5#setVolume
                 * @param {number} percentAsDecimal
                 *        The volume percent as a decimal. Valid range is from 0-1.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
                 */ "volume",
                /**
                 * Set the value of `src` on the media element. `src` indicates the current
                 * {@link Tech~SourceObject} for the media.
                 *
                 * @method Html5#setSrc
                 * @param {Tech~SourceObject} src
                 *        The source object to set as the current source.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}
                 */ "src",
                /**
                 * Set the value of `poster` on the media element. `poster` is the url to
                 * an image file that can/will be shown when no media data is available.
                 *
                 * @method Html5#setPoster
                 * @param {string} poster
                 *        The url to an image that should be used as the `poster` for the media
                 *        element.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}
                 */ "poster",
                /**
                 * Set the value of `preload` on the media element. `preload` indicates
                 * what should download before the media is interacted with. It can have the following
                 * values:
                 * - none: nothing should be downloaded
                 * - metadata: poster and the first few frames of the media may be downloaded to get
                 *   media dimensions and other metadata
                 * - auto: allow the media and metadata for the media to be downloaded before
                 *    interaction
                 *
                 * @method Html5#setPreload
                 * @param {string} preload
                 *         The value of `preload` to set on the media element. Must be 'none', 'metadata',
                 *         or 'auto'.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
                 */ "preload",
                /**
                 * Set the value of `playbackRate` on the media element. `playbackRate` indicates
                 * the rate at which the media should play back. Examples:
                 *   - if playbackRate is set to 2, media will play twice as fast.
                 *   - if playbackRate is set to 0.5, media will play half as fast.
                 *
                 * @method Html5#setPlaybackRate
                 * @return {number}
                 *         The value of `playbackRate` from the media element. A number indicating
                 *         the current playback speed of the media, where 1 is normal speed.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
                 */ "playbackRate",
                /**
                 * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates
                 * the rate at which the media should play back upon initial startup. Changing this value
                 * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.
                 *
                 * Example Values:
                 *   - if playbackRate is set to 2, media will play twice as fast.
                 *   - if playbackRate is set to 0.5, media will play half as fast.
                 *
                 * @method Html5.prototype.setDefaultPlaybackRate
                 * @return {number}
                 *         The value of `defaultPlaybackRate` from the media element. A number indicating
                 *         the current playback speed of the media, where 1 is normal speed.
                 *
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}
                 */ "defaultPlaybackRate",
                /**
                 * Prevents the browser from suggesting a Picture-in-Picture context menu
                 * or to request Picture-in-Picture automatically in some cases.
                 *
                 * @method Html5#setDisablePictureInPicture
                 * @param {boolean} value
                 *         The true value will disable Picture-in-Picture mode.
                 *
                 * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}
                 */ "disablePictureInPicture",
                /**
                 * Set the value of `crossOrigin` from the media element. `crossOrigin` indicates
                 * to the browser that should sent the cookies along with the requests for the
                 * different assets/playlists
                 *
                 * @method Html5#setCrossOrigin
                 * @param {string} crossOrigin
                 *         - anonymous indicates that the media should not sent cookies.
                 *         - use-credentials indicates that the media should sent cookies along the requests.
                 *
                 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}
                 */ "crossOrigin"
            ].forEach(function(prop) {
                Html5.prototype["set" + toTitleCase$1(prop)] = function(v) {
                    this.el_[prop] = v;
                };
            }), // The list is as follows:
            // pause, load, play
            [
                /**
                 * A wrapper around the media elements `pause` function. This will call the `HTML5`
                 * media elements `pause` function.
                 *
                 * @method Html5#pause
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}
                 */ "pause",
                /**
                 * A wrapper around the media elements `load` function. This will call the `HTML5`s
                 * media element `load` function.
                 *
                 * @method Html5#load
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}
                 */ "load",
                /**
                 * A wrapper around the media elements `play` function. This will call the `HTML5`s
                 * media element `play` function.
                 *
                 * @method Html5#play
                 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}
                 */ "play"
            ].forEach(function(prop) {
                Html5.prototype[prop] = function() {
                    return this.el_[prop]();
                };
            }), Tech.withSourceHandlers(Html5), /**
             * Native source handler for Html5, simply passes the source to the media element.
             *
             * @property {Tech~SourceObject} source
             *        The source object
             *
             * @property {Html5} tech
             *        The instance of the HTML5 tech.
             */ Html5.nativeSourceHandler = {}, /**
             * Check if the media element can play the given mime type.
             *
             * @param {string} type
             *        The mimetype to check
             *
             * @return {string}
             *         'probably', 'maybe', or '' (empty string)
             */ Html5.nativeSourceHandler.canPlayType = function(type) {
                // IE without MediaPlayer throws an error (#519)
                try {
                    return Html5.TEST_VID.canPlayType(type);
                } catch (e) {
                    return "";
                }
            }, /**
             * Check if the media element can handle a source natively.
             *
             * @param {Tech~SourceObject} source
             *         The source object
             *
             * @param {Object} [options]
             *         Options to be passed to the tech.
             *
             * @return {string}
             *         'probably', 'maybe', or '' (empty string).
             */ Html5.nativeSourceHandler.canHandleSource = function(source, options) {
                // If a type was provided we should rely on that
                if (source.type) return Html5.nativeSourceHandler.canPlayType(source.type); // If no type, fall back to checking 'video/[EXTENSION]'
                if (source.src) {
                    var ext = getFileExtension(source.src);
                    return Html5.nativeSourceHandler.canPlayType("video/" + ext);
                }
                return "";
            }, /**
             * Pass the source to the native media element.
             *
             * @param {Tech~SourceObject} source
             *        The source object
             *
             * @param {Html5} tech
             *        The instance of the Html5 tech
             *
             * @param {Object} [options]
             *        The options to pass to the source
             */ Html5.nativeSourceHandler.handleSource = function(source, tech, options) {
                tech.setSrc(source.src);
            }, /**
             * A noop for the native dispose function, as cleanup is not needed.
             */ Html5.nativeSourceHandler.dispose = function() {}, Html5.registerSourceHandler(Html5.nativeSourceHandler), Tech.registerTech("Html5", Html5);
            // on the player when they happen
            var TECH_EVENTS_RETRIGGER = [
                /**
                 * Fired while the user agent is downloading media data.
                 *
                 * @event Player#progress
                 * @type {EventTarget~Event}
                 */ /**
                 * Retrigger the `progress` event that was triggered by the {@link Tech}.
                 *
                 * @private
                 * @method Player#handleTechProgress_
                 * @fires Player#progress
                 * @listens Tech#progress
                 */ "progress",
                /**
                 * Fires when the loading of an audio/video is aborted.
                 *
                 * @event Player#abort
                 * @type {EventTarget~Event}
                 */ /**
                 * Retrigger the `abort` event that was triggered by the {@link Tech}.
                 *
                 * @private
                 * @method Player#handleTechAbort_
                 * @fires Player#abort
                 * @listens Tech#abort
                 */ "abort",
                /**
                 * Fires when the browser is intentionally not getting media data.
                 *
                 * @event Player#suspend
                 * @type {EventTarget~Event}
                 */ /**
                 * Retrigger the `suspend` event that was triggered by the {@link Tech}.
                 *
                 * @private
                 * @method Player#handleTechSuspend_
                 * @fires Player#suspend
                 * @listens Tech#suspend
                 */ "suspend",
                /**
                 * Fires when the current playlist is empty.
                 *
                 * @event Player#emptied
                 * @type {EventTarget~Event}
                 */ /**
                 * Retrigger the `emptied` event that was triggered by the {@link Tech}.
                 *
                 * @private
                 * @method Player#handleTechEmptied_
                 * @fires Player#emptied
                 * @listens Tech#emptied
                 */ "emptied",
                /**
                 * Fires when the browser is trying to get media data, but data is not available.
                 *
                 * @event Player#stalled
                 * @type {EventTarget~Event}
                 */ /**
                 * Retrigger the `stalled` event that was triggered by the {@link Tech}.
                 *
                 * @private
                 * @method Player#handleTechStalled_
                 * @fires Player#stalled
                 * @listens Tech#stalled
                 */ "stalled",
                /**
                 * Fires when the browser has loaded meta data for the audio/video.
                 *
                 * @event Player#loadedmetadata
                 * @type {EventTarget~Event}
                 */ /**
                 * Retrigger the `loadedmetadata` event that was triggered by the {@link Tech}.
                 *
                 * @private
                 * @method Player#handleTechLoadedmetadata_
                 * @fires Player#loadedmetadata
                 * @listens Tech#loadedmetadata
                 */ "loadedmetadata",
                /**
                 * Fires when the browser has loaded the current frame of the audio/video.
                 *
                 * @event Player#loadeddata
                 * @type {event}
                 */ /**
                 * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.
                 *
                 * @private
                 * @method Player#handleTechLoaddeddata_
                 * @fires Player#loadeddata
                 * @listens Tech#loadeddata
                 */ "loadeddata",
                /**
                 * Fires when the current playback position has changed.
                 *
                 * @event Player#timeupdate
                 * @type {event}
                 */ /**
                 * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.
                 *
                 * @private
                 * @method Player#handleTechTimeUpdate_
                 * @fires Player#timeupdate
                 * @listens Tech#timeupdate
                 */ "timeupdate",
                /**
                 * Fires when the video's intrinsic dimensions change
                 *
                 * @event Player#resize
                 * @type {event}
                 */ /**
                 * Retrigger the `resize` event that was triggered by the {@link Tech}.
                 *
                 * @private
                 * @method Player#handleTechResize_
                 * @fires Player#resize
                 * @listens Tech#resize
                 */ "resize",
                /**
                 * Fires when the volume has been changed
                 *
                 * @event Player#volumechange
                 * @type {event}
                 */ /**
                 * Retrigger the `volumechange` event that was triggered by the {@link Tech}.
                 *
                 * @private
                 * @method Player#handleTechVolumechange_
                 * @fires Player#volumechange
                 * @listens Tech#volumechange
                 */ "volumechange",
                /**
                 * Fires when the text track has been changed
                 *
                 * @event Player#texttrackchange
                 * @type {event}
                 */ /**
                 * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.
                 *
                 * @private
                 * @method Player#handleTechTexttrackchange_
                 * @fires Player#texttrackchange
                 * @listens Tech#texttrackchange
                 */ "texttrackchange"
            ], TECH_EVENTS_QUEUE = {
                canplay: "CanPlay",
                canplaythrough: "CanPlayThrough",
                playing: "Playing",
                seeked: "Seeked"
            }, BREAKPOINT_ORDER = [
                "tiny",
                "xsmall",
                "small",
                "medium",
                "large",
                "xlarge",
                "huge"
            ], BREAKPOINT_CLASSES = {}; // events to queue when playback rate is zero
            // grep: vjs-layout-x-small
            // grep: vjs-layout-small
            // grep: vjs-layout-medium
            // grep: vjs-layout-large
            // grep: vjs-layout-x-large
            // grep: vjs-layout-huge
            BREAKPOINT_ORDER.forEach(function(k) {
                var v = "x" === k.charAt(0) ? "x-" + k.substring(1) : k;
                BREAKPOINT_CLASSES[k] = "vjs-layout-" + v;
            });
            var DEFAULT_BREAKPOINTS = {
                tiny: 210,
                xsmall: 320,
                small: 425,
                medium: 768,
                large: 1440,
                xlarge: 2560,
                huge: 1 / 0
            }, Player = /*#__PURE__*/ function(_Component) {
                /**
                 * Create an instance of this class.
                 *
                 * @param {Element} tag
                 *        The original video DOM element used for configuring options.
                 *
                 * @param {Object} [options]
                 *        Object of option names and values.
                 *
                 * @param {Component~ReadyCallback} [ready]
                 *        Ready callback function.
                 */ function Player(tag, options, ready) {
                    if (// Make sure tag ID exists
                    tag.id = tag.id || options.id || "vjs_video_" + _guid++, // player properties first, and can't use `this` before `super()`
                    // The options argument overrides options set in the video tag
                    // which overrides globally set options.
                    // This latter part coincides with the load order
                    // (tag must exist before Player)
                    (options = assign(Player.getTagSettings(tag), options)).initChildren = !1, options.createEl = !1, options.evented = !1, // see enableTouchActivity in Component
                    options.reportTouchActivity = !1, !options.language) {
                        if ("function" == typeof tag.closest) {
                            var _this, closest = tag.closest("[lang]");
                            closest && closest.getAttribute && (options.language = closest.getAttribute("lang"));
                        } else for(var element = tag; element && 1 === element.nodeType;){
                            if (getAttributes(element).hasOwnProperty("lang")) {
                                options.language = element.getAttribute("lang");
                                break;
                            }
                            element = element.parentNode;
                        }
                    } // Run base component initializing with new options
                    // someone, bail early with an informative error
                    if ((_this = _Component.call(this, null, options, ready) || this).boundDocumentFullscreenChange_ = function(e) {
                        return _this.documentFullscreenChange_(e);
                    }, _this.boundFullWindowOnEscKey_ = function(e) {
                        return _this.fullWindowOnEscKey(e);
                    }, _this.boundUpdateStyleEl_ = function(e) {
                        return _this.updateStyleEl_(e);
                    }, _this.boundApplyInitTime_ = function(e) {
                        return _this.applyInitTime_(e);
                    }, _this.boundUpdateCurrentBreakpoint_ = function(e) {
                        return _this.updateCurrentBreakpoint_(e);
                    }, _this.boundHandleTechClick_ = function(e) {
                        return _this.handleTechClick_(e);
                    }, _this.boundHandleTechDoubleClick_ = function(e) {
                        return _this.handleTechDoubleClick_(e);
                    }, _this.boundHandleTechTouchStart_ = function(e) {
                        return _this.handleTechTouchStart_(e);
                    }, _this.boundHandleTechTouchMove_ = function(e) {
                        return _this.handleTechTouchMove_(e);
                    }, _this.boundHandleTechTouchEnd_ = function(e) {
                        return _this.handleTechTouchEnd_(e);
                    }, _this.boundHandleTechTap_ = function(e) {
                        return _this.handleTechTap_(e);
                    }, _this.isFullscreen_ = !1, _this.log = createLogger(_this.id_), _this.fsApi_ = FullscreenApi, _this.isPosterFromTech_ = !1, // and a seek is happening
                    _this.queuedCallbacks_ = [], _this.isReady_ = !1, _this.hasStarted_ = !1, _this.userActive_ = !1, _this.debugEnabled_ = !1, !_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) throw Error("No techOrder specified. Did you overwrite videojs.options instead of just changing the properties you want to override?");
                     // Store the original tag used to set options
                    if (_this.tag = tag, _this.tagAttributes = tag && getAttributes(tag), _this.language(_this.options_.language), options.languages) {
                        // Normalise player option languages to lowercase
                        var languagesToLower = {};
                        Object.getOwnPropertyNames(options.languages).forEach(function(name) {
                            languagesToLower[name.toLowerCase()] = options.languages[name];
                        }), _this.languages_ = languagesToLower;
                    } else _this.languages_ = Player.prototype.options_.languages;
                    _this.resetCache_(), _this.poster_ = options.poster || "", _this.controls_ = !!options.controls, // now remove immediately so native controls don't flash.
                    // May be turned back on by HTML5 tech if nativeControlsForTouch is true
                    tag.controls = !1, tag.removeAttribute("controls"), _this.changingSrc_ = !1, _this.playCallbacks_ = [], _this.playTerminatedQueue_ = [], tag.hasAttribute("autoplay") ? _this.autoplay(!0) : // otherwise use the setter to validate and
                    // set the correct value.
                    _this.autoplay(_this.options_.autoplay), options.plugins && Object.keys(options.plugins).forEach(function(name) {
                        if ("function" != typeof _this[name]) throw Error('plugin "' + name + '" does not exist');
                    }), /*
                     * Store the internal state of scrubbing
                     *
                     * @private
                     * @return {Boolean} True if the user is scrubbing
                     */ _this.scrubbing_ = !1, _this.el_ = _this.createEl(), evented((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), {
                        eventBusKey: "el_"
                    }), _this.fsApi_.requestFullscreen && (on(global_document__WEBPACK_IMPORTED_MODULE_1___default(), _this.fsApi_.fullscreenchange, _this.boundDocumentFullscreenChange_), _this.on(_this.fsApi_.fullscreenchange, _this.boundDocumentFullscreenChange_)), _this.fluid_ && _this.on([
                        "playerreset",
                        "resize"
                    ], _this.boundUpdateStyleEl_);
                    // as well so they don't need to reach back into the player for options later.
                    // We also need to do another copy of this.options_ so we don't end up with
                    // an infinite loop.
                    var playerOptionsCopy = mergeOptions$3(_this.options_); // Load plugins
                    options.plugins && Object.keys(options.plugins).forEach(function(name) {
                        _this[name](options.plugins[name]);
                    }), options.debug && _this.debug(!0), _this.options_.playerOptions = playerOptionsCopy, _this.middleware_ = [], _this.playbackRates(options.playbackRates), _this.initChildren(), _this.isAudio("audio" === tag.nodeName.toLowerCase()), _this.controls() ? _this.addClass("vjs-controls-enabled") : _this.addClass("vjs-controls-disabled"), _this.el_.setAttribute("role", "region"), _this.isAudio() ? _this.el_.setAttribute("aria-label", _this.localize("Audio Player")) : _this.el_.setAttribute("aria-label", _this.localize("Video Player")), _this.isAudio() && _this.addClass("vjs-audio"), _this.flexNotSupported_() && _this.addClass("vjs-no-flex"), TOUCH_ENABLED && _this.addClass("vjs-touch-enabled"), IS_IOS || _this.addClass("vjs-workinghover"), Player.players[_this.id_] = (0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this);
                    var majorVersion = version$5.split(".")[0];
                    return _this.addClass("vjs-v" + majorVersion), // like the control bar show themselves if needed
                    _this.userActive(!0), _this.reportUserActivity(), _this.one("play", function(e) {
                        return _this.listenForUserActivity_(e);
                    }), _this.on("stageclick", function(e) {
                        return _this.handleStageClick_(e);
                    }), _this.on("keydown", function(e) {
                        return _this.handleKeyDown(e);
                    }), _this.on("languagechange", function(e) {
                        return _this.handleLanguagechange(e);
                    }), _this.breakpoints(_this.options_.breakpoints), _this.responsive(_this.options_.responsive), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(Player, _Component);
                /**
                 * Destroys the video player and does any necessary cleanup.
                 *
                 * This is especially helpful if you are dynamically adding and removing videos
                 * to/from the DOM.
                 *
                 * @fires Player#dispose
                 */ var _proto = Player.prototype;
                return _proto.dispose = function() {
                    var _this2 = this;
                    /**
                     * Called when the player is being disposed of.
                     *
                     * @event Player#dispose
                     * @type {EventTarget~Event}
                     */ this.trigger("dispose"), this.off("dispose"), off(global_document__WEBPACK_IMPORTED_MODULE_1___default(), this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_), off(global_document__WEBPACK_IMPORTED_MODULE_1___default(), "keydown", this.boundFullWindowOnEscKey_), this.styleEl_ && this.styleEl_.parentNode && (this.styleEl_.parentNode.removeChild(this.styleEl_), this.styleEl_ = null), Player.players[this.id_] = null, this.tag && this.tag.player && (this.tag.player = null), this.el_ && this.el_.player && (this.el_.player = null), this.tech_ && (this.tech_.dispose(), this.isPosterFromTech_ = !1, this.poster_ = ""), this.playerElIngest_ && (this.playerElIngest_ = null), this.tag && (this.tag = null), middlewareInstances[this.id()] = null, // all tracks and track listeners are removed on
                    // tech dispose
                    ALL.names.forEach(function(name) {
                        var list = _this2[ALL[name].getterName](); // if it is not a native list
                        // we have to manually remove event listeners
                        list && list.off && list.off();
                    }), _Component.prototype.dispose.call(this);
                }, /**
                 * Create the `Player`'s DOM element.
                 *
                 * @return {Element}
                 *         The DOM element that gets created.
                 */ _proto.createEl = function() {
                    var el, tag = this.tag, playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute("data-vjs-player"), divEmbed = "video-js" === this.tag.tagName.toLowerCase();
                    playerElIngest ? el = this.el_ = tag.parentNode : divEmbed || (el = this.el_ = _Component.prototype.createEl.call(this, "div"));
                    // ID will now reference player box, not the video tag
                    var attrs = getAttributes(tag);
                    if (divEmbed) {
                        for(el = this.el_ = tag, tag = this.tag = global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("video"); el.children.length;)tag.appendChild(el.firstChild);
                        hasClass(el, "video-js") || addClass(el, "video-js"), el.appendChild(tag), playerElIngest = this.playerElIngest_ = el, // to our new `video` element. This will move things like
                        // `src` or `controls` that were set via js before the player
                        // was initialized.
                        Object.keys(el).forEach(function(k) {
                            try {
                                tag[k] = el[k];
                            } catch (e) {
                            // we got a a property like outerHTML which we can't actually copy, ignore it
                            }
                        });
                    } // set tabindex to -1 to remove the video element from the focus order
                    // of the player in a way that's still overrideable by CSS, just like the
                    // video element
                    if (tag.setAttribute("tabindex", "-1"), attrs.tabindex = "-1", (IE_VERSION || IS_CHROME && IS_WINDOWS) && (tag.setAttribute("role", "application"), attrs.role = "application"), tag.removeAttribute("width"), tag.removeAttribute("height"), "width" in attrs && delete attrs.width, "height" in attrs && delete attrs.height, Object.getOwnPropertyNames(attrs).forEach(function(attr) {
                        divEmbed && "class" === attr || el.setAttribute(attr, attrs[attr]), divEmbed && tag.setAttribute(attr, attrs[attr]);
                    }), // Might think we should do this after embedding in container so .vjs-tech class
                    // doesn't flash 100% width/height, but class only applies with .video-js parent
                    tag.playerId = tag.id, tag.id += "_html5_api", tag.className = "vjs-tech", tag.player = el.player = this, this.addClass("vjs-paused"), !0 !== global_window__WEBPACK_IMPORTED_MODULE_0___default().VIDEOJS_NO_DYNAMIC_STYLE) {
                        this.styleEl_ = createStyleElement("vjs-styles-dimensions");
                        var defaultsStyleEl = $(".vjs-styles-defaults"), head = $("head");
                        head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);
                    }
                    this.fill_ = !1, this.fluid_ = !1, this.width(this.options_.width), this.height(this.options_.height), this.fill(this.options_.fill), this.fluid(this.options_.fluid), this.aspectRatio(this.options_.aspectRatio), this.crossOrigin(this.options_.crossOrigin || this.options_.crossorigin);
                    for(var links = tag.getElementsByTagName("a"), i = 0; i < links.length; i++){
                        var linkEl = links.item(i);
                        addClass(linkEl, "vjs-hidden"), linkEl.setAttribute("hidden", "hidden");
                    } // insertElFirst seems to cause the networkState to flicker from 3 to 2, so
                    return(// keep track of the original for later so we can know if the source originally failed
                    tag.initNetworkState_ = tag.networkState, tag.parentNode && !playerElIngest && tag.parentNode.insertBefore(el, tag), // then manually add it to the children array so that this.addChild
                    // will work properly for other components
                    //
                    // Breaks iPhone, fixed in HTML5 setup.
                    prependTo(tag, el), this.children_.unshift(tag), // if it's been set to something different to the doc
                    this.el_.setAttribute("lang", this.language_), this.el_.setAttribute("translate", "no"), this.el_ = el, el);
                }, /**
                 * Get or set the `Player`'s crossOrigin option. For the HTML5 player, this
                 * sets the `crossOrigin` property on the `<video>` tag to control the CORS
                 * behavior.
                 *
                 * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}
                 *
                 * @param {string} [value]
                 *        The value to set the `Player`'s crossOrigin to. If an argument is
                 *        given, must be one of `anonymous` or `use-credentials`.
                 *
                 * @return {string|undefined}
                 *         - The current crossOrigin value of the `Player` when getting.
                 *         - undefined when setting
                 */ _proto.crossOrigin = function(value) {
                    if (!value) return this.techGet_("crossOrigin");
                    if ("anonymous" !== value && "use-credentials" !== value) {
                        log$1.warn('crossOrigin must be "anonymous" or "use-credentials", given "' + value + '"');
                        return;
                    }
                    this.techCall_("setCrossOrigin", value);
                }, /**
                 * A getter/setter for the `Player`'s width. Returns the player's configured value.
                 * To get the current width use `currentWidth()`.
                 *
                 * @param {number} [value]
                 *        The value to set the `Player`'s width to.
                 *
                 * @return {number}
                 *         The current width of the `Player` when getting.
                 */ _proto.width = function(value) {
                    return this.dimension("width", value);
                }, /**
                 * A getter/setter for the `Player`'s height. Returns the player's configured value.
                 * To get the current height use `currentheight()`.
                 *
                 * @param {number} [value]
                 *        The value to set the `Player`'s heigth to.
                 *
                 * @return {number}
                 *         The current height of the `Player` when getting.
                 */ _proto.height = function(value) {
                    return this.dimension("height", value);
                }, /**
                 * A getter/setter for the `Player`'s width & height.
                 *
                 * @param {string} dimension
                 *        This string can be:
                 *        - 'width'
                 *        - 'height'
                 *
                 * @param {number} [value]
                 *        Value for dimension specified in the first argument.
                 *
                 * @return {number}
                 *         The dimension arguments value when getting (width/height).
                 */ _proto.dimension = function(_dimension, value) {
                    var privDimension = _dimension + "_";
                    if (void 0 === value) return this[privDimension] || 0;
                    if ("" === value || "auto" === value) {
                        // If an empty string is given, reset the dimension to be automatic
                        this[privDimension] = void 0, this.updateStyleEl_();
                        return;
                    }
                    var parsedVal = parseFloat(value);
                    if (isNaN(parsedVal)) {
                        log$1.error('Improper value "' + value + '" supplied for for ' + _dimension);
                        return;
                    }
                    this[privDimension] = parsedVal, this.updateStyleEl_();
                }, /**
                 * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.
                 *
                 * Turning this on will turn off fill mode.
                 *
                 * @param {boolean} [bool]
                 *        - A value of true adds the class.
                 *        - A value of false removes the class.
                 *        - No value will be a getter.
                 *
                 * @return {boolean|undefined}
                 *         - The value of fluid when getting.
                 *         - `undefined` when setting.
                 */ _proto.fluid = function(bool) {
                    var _this3 = this;
                    if (void 0 === bool) return !!this.fluid_;
                    this.fluid_ = !!bool, isEvented(this) && this.off([
                        "playerreset",
                        "resize"
                    ], this.boundUpdateStyleEl_), bool ? (this.addClass("vjs-fluid"), this.fill(!1), addEventedCallback(this, function() {
                        _this3.on([
                            "playerreset",
                            "resize"
                        ], _this3.boundUpdateStyleEl_);
                    })) : this.removeClass("vjs-fluid"), this.updateStyleEl_();
                }, /**
                 * A getter/setter/toggler for the vjs-fill `className` on the `Player`.
                 *
                 * Turning this on will turn off fluid mode.
                 *
                 * @param {boolean} [bool]
                 *        - A value of true adds the class.
                 *        - A value of false removes the class.
                 *        - No value will be a getter.
                 *
                 * @return {boolean|undefined}
                 *         - The value of fluid when getting.
                 *         - `undefined` when setting.
                 */ _proto.fill = function(bool) {
                    if (void 0 === bool) return !!this.fill_;
                    this.fill_ = !!bool, bool ? (this.addClass("vjs-fill"), this.fluid(!1)) : this.removeClass("vjs-fill");
                }, /**
                 * Get/Set the aspect ratio
                 *
                 * @param {string} [ratio]
                 *        Aspect ratio for player
                 *
                 * @return {string|undefined}
                 *         returns the current aspect ratio when getting
                 */ /**
                 * A getter/setter for the `Player`'s aspect ratio.
                 *
                 * @param {string} [ratio]
                 *        The value to set the `Player`'s aspect ratio to.
                 *
                 * @return {string|undefined}
                 *         - The current aspect ratio of the `Player` when getting.
                 *         - undefined when setting
                 */ _proto.aspectRatio = function(ratio) {
                    if (void 0 === ratio) return this.aspectRatio_;
                     // Check for width:height format
                    if (!/^\d+\:\d+$/.test(ratio)) throw Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");
                    this.aspectRatio_ = ratio, // because in fixed mode you could calculate width and height yourself.
                    this.fluid(!0), this.updateStyleEl_();
                }, /**
                 * Update styles of the `Player` element (height, width and aspect ratio).
                 *
                 * @private
                 * @listens Tech#loadedmetadata
                 */ _proto.updateStyleEl_ = function() {
                    if (!0 === global_window__WEBPACK_IMPORTED_MODULE_0___default().VIDEOJS_NO_DYNAMIC_STYLE) {
                        var width, height, idClass, _width = "number" == typeof this.width_ ? this.width_ : this.options_.width, _height = "number" == typeof this.height_ ? this.height_ : this.options_.height, techEl = this.tech_ && this.tech_.el();
                        techEl && (_width >= 0 && (techEl.width = _width), _height >= 0 && (techEl.height = _height));
                        return;
                    }
                    var ratioParts = (void 0 !== this.aspectRatio_ && "auto" !== this.aspectRatio_ ? this.aspectRatio_ : this.videoWidth() > 0 ? this.videoWidth() + ":" + this.videoHeight() : "16:9").split(":"), ratioMultiplier = ratioParts[1] / ratioParts[0];
                    // Use any width that's been specifically set
                    width = void 0 !== this.width_ ? this.width_ : void 0 !== this.height_ ? this.height_ / ratioMultiplier : this.videoWidth() || 300, // Use any height that's been specifically set
                    height = void 0 !== this.height_ ? this.height_ : width * ratioMultiplier, idClass = /^[^a-zA-Z]/.test(this.id()) ? "dimensions-" + this.id() : this.id() + "-dimensions", this.addClass(idClass), setTextContent(this.styleEl_, "\n      ." + idClass + " {\n        width: " + width + "px;\n        height: " + height + "px;\n      }\n\n      ." + idClass + ".vjs-fluid {\n        padding-top: " + 100 * ratioMultiplier + "%;\n      }\n    ");
                }, /**
                 * Load/Create an instance of playback {@link Tech} including element
                 * and API methods. Then append the `Tech` element in `Player` as a child.
                 *
                 * @param {string} techName
                 *        name of the playback technology
                 *
                 * @param {string} source
                 *        video source
                 *
                 * @private
                 */ _proto.loadTech_ = function(techName, source) {
                    var json, tech, _this4 = this;
                    this.tech_ && this.unloadTech_();
                    var titleTechName = toTitleCase$1(techName), camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1);
                    "Html5" !== titleTechName && this.tag && (Tech.getTech("Html5").disposeMediaElement(this.tag), this.tag.player = null, this.tag = null), this.techName_ = titleTechName, this.isReady_ = !1;
                    var autoplay = this.autoplay(); // if autoplay is a string (or `true` with normalizeAutoplay: true) we pass false to the tech
                    ("string" == typeof this.autoplay() || !0 === this.autoplay() && this.options_.normalizeAutoplay) && (autoplay = !1);
                    var techOptions = {
                        source: source,
                        autoplay: autoplay,
                        nativeControlsForTouch: this.options_.nativeControlsForTouch,
                        playerId: this.id(),
                        techId: this.id() + "_" + camelTechName + "_api",
                        playsinline: this.options_.playsinline,
                        preload: this.options_.preload,
                        loop: this.options_.loop,
                        disablePictureInPicture: this.options_.disablePictureInPicture,
                        muted: this.options_.muted,
                        poster: this.poster(),
                        language: this.language(),
                        playerElIngest: this.playerElIngest_ || !1,
                        "vtt.js": this.options_["vtt.js"],
                        canOverridePoster: !!this.options_.techCanOverridePoster,
                        enableSourceset: this.options_.enableSourceset,
                        Promise: this.options_.Promise
                    };
                    ALL.names.forEach(function(name) {
                        var props = ALL[name];
                        techOptions[props.getterName] = _this4[props.privateName];
                    }), assign(techOptions, this.options_[titleTechName]), assign(techOptions, this.options_[camelTechName]), assign(techOptions, this.options_[techName.toLowerCase()]), this.tag && (techOptions.tag = this.tag), source && source.src === this.cache_.src && this.cache_.currentTime > 0 && (techOptions.startTime = this.cache_.currentTime);
                    var TechClass = Tech.getTech(techName);
                    if (!TechClass) throw Error("No Tech named '" + titleTechName + "' exists! '" + titleTechName + "' should be registered using videojs.registerTech()'");
                    this.tech_ = new TechClass(techOptions), this.tech_.ready(bind(this, this.handleTechReady_), !0), json = this.textTracksJson_ || [], tech = this.tech_, json.forEach(function(track) {
                        var addedTrack = tech.addRemoteTextTrack(track).track;
                        !track.src && track.cues && track.cues.forEach(function(cue) {
                            return addedTrack.addCue(cue);
                        });
                    }), tech.textTracks(), TECH_EVENTS_RETRIGGER.forEach(function(event) {
                        _this4.on(_this4.tech_, event, function(e) {
                            return _this4["handleTech" + toTitleCase$1(event) + "_"](e);
                        });
                    }), Object.keys(TECH_EVENTS_QUEUE).forEach(function(event) {
                        _this4.on(_this4.tech_, event, function(eventObj) {
                            if (0 === _this4.tech_.playbackRate() && _this4.tech_.seeking()) {
                                _this4.queuedCallbacks_.push({
                                    callback: _this4["handleTech" + TECH_EVENTS_QUEUE[event] + "_"].bind(_this4),
                                    event: eventObj
                                });
                                return;
                            }
                            _this4["handleTech" + TECH_EVENTS_QUEUE[event] + "_"](eventObj);
                        });
                    }), this.on(this.tech_, "loadstart", function(e) {
                        return _this4.handleTechLoadStart_(e);
                    }), this.on(this.tech_, "sourceset", function(e) {
                        return _this4.handleTechSourceset_(e);
                    }), this.on(this.tech_, "waiting", function(e) {
                        return _this4.handleTechWaiting_(e);
                    }), this.on(this.tech_, "ended", function(e) {
                        return _this4.handleTechEnded_(e);
                    }), this.on(this.tech_, "seeking", function(e) {
                        return _this4.handleTechSeeking_(e);
                    }), this.on(this.tech_, "play", function(e) {
                        return _this4.handleTechPlay_(e);
                    }), this.on(this.tech_, "firstplay", function(e) {
                        return _this4.handleTechFirstPlay_(e);
                    }), this.on(this.tech_, "pause", function(e) {
                        return _this4.handleTechPause_(e);
                    }), this.on(this.tech_, "durationchange", function(e) {
                        return _this4.handleTechDurationChange_(e);
                    }), this.on(this.tech_, "fullscreenchange", function(e, data) {
                        return _this4.handleTechFullscreenChange_(e, data);
                    }), this.on(this.tech_, "fullscreenerror", function(e, err) {
                        return _this4.handleTechFullscreenError_(e, err);
                    }), this.on(this.tech_, "enterpictureinpicture", function(e) {
                        return _this4.handleTechEnterPictureInPicture_(e);
                    }), this.on(this.tech_, "leavepictureinpicture", function(e) {
                        return _this4.handleTechLeavePictureInPicture_(e);
                    }), this.on(this.tech_, "error", function(e) {
                        return _this4.handleTechError_(e);
                    }), this.on(this.tech_, "posterchange", function(e) {
                        return _this4.handleTechPosterChange_(e);
                    }), this.on(this.tech_, "textdata", function(e) {
                        return _this4.handleTechTextData_(e);
                    }), this.on(this.tech_, "ratechange", function(e) {
                        return _this4.handleTechRateChange_(e);
                    }), this.on(this.tech_, "loadedmetadata", this.boundUpdateStyleEl_), this.usingNativeControls(this.techGet_("controls")), this.controls() && !this.usingNativeControls() && this.addTechControlsListeners_(), this.tech_.el().parentNode === this.el() || "Html5" === titleTechName && this.tag || prependTo(this.tech_.el(), this.el()), this.tag && (this.tag.player = null, this.tag = null);
                }, /**
                 * Unload and dispose of the current playback {@link Tech}.
                 *
                 * @private
                 */ _proto.unloadTech_ = function() {
                    var _this5 = this;
                    // Save the current text tracks so that we can reuse the same text tracks with the next tech
                    ALL.names.forEach(function(name) {
                        var props = ALL[name];
                        _this5[props.privateName] = _this5[props.getterName]();
                    }), this.textTracksJson_ = textTrackConverter_textTracksToJson(this.tech_), this.isReady_ = !1, this.tech_.dispose(), this.tech_ = !1, this.isPosterFromTech_ && (this.poster_ = "", this.trigger("posterchange")), this.isPosterFromTech_ = !1;
                }, /**
                 * Return a reference to the current {@link Tech}.
                 * It will print a warning by default about the danger of using the tech directly
                 * but any argument that is passed in will silence the warning.
                 *
                 * @param {*} [safety]
                 *        Anything passed in to silence the warning
                 *
                 * @return {Tech}
                 *         The Tech
                 */ _proto.tech = function(safety) {
                    return void 0 === safety && log$1.warn("Using the tech directly can be dangerous. I hope you know what you're doing.\nSee https://github.com/videojs/video.js/issues/2617 for more info.\n"), this.tech_;
                }, /**
                 * Set up click and touch listeners for the playback element
                 *
                 * - On desktops: a click on the video itself will toggle playback
                 * - On mobile devices: a click on the video toggles controls
                 *   which is done by toggling the user state between active and
                 *   inactive
                 * - A tap can signal that a user has become active or has become inactive
                 *   e.g. a quick tap on an iPhone movie should reveal the controls. Another
                 *   quick tap should hide them again (signaling the user is in an inactive
                 *   viewing state)
                 * - In addition to this, we still want the user to be considered inactive after
                 *   a few seconds of inactivity.
                 *
                 * > Note: the only part of iOS interaction we can't mimic with this setup
                 * is a touch and hold on the video element counting as activity in order to
                 * keep the controls showing, but that shouldn't be an issue. A touch and hold
                 * on any controls will still keep the user active
                 *
                 * @private
                 */ _proto.addTechControlsListeners_ = function() {
                    // Make sure to remove all the previous listeners in case we are called multiple times.
                    this.removeTechControlsListeners_(), this.on(this.tech_, "click", this.boundHandleTechClick_), this.on(this.tech_, "dblclick", this.boundHandleTechDoubleClick_), // so we'll check if the controls were already showing before reporting user
                    // activity
                    this.on(this.tech_, "touchstart", this.boundHandleTechTouchStart_), this.on(this.tech_, "touchmove", this.boundHandleTechTouchMove_), this.on(this.tech_, "touchend", this.boundHandleTechTouchEnd_), // listener cancels out any reportedUserActivity when setting userActive(false)
                    this.on(this.tech_, "tap", this.boundHandleTechTap_);
                }, /**
                 * Remove the listeners used for click and tap controls. This is needed for
                 * toggling to controls disabled, where a tap/touch should do nothing.
                 *
                 * @private
                 */ _proto.removeTechControlsListeners_ = function() {
                    // We don't want to just use `this.off()` because there might be other needed
                    // listeners added by techs that extend this.
                    this.off(this.tech_, "tap", this.boundHandleTechTap_), this.off(this.tech_, "touchstart", this.boundHandleTechTouchStart_), this.off(this.tech_, "touchmove", this.boundHandleTechTouchMove_), this.off(this.tech_, "touchend", this.boundHandleTechTouchEnd_), this.off(this.tech_, "click", this.boundHandleTechClick_), this.off(this.tech_, "dblclick", this.boundHandleTechDoubleClick_);
                }, /**
                 * Player waits for the tech to be ready
                 *
                 * @private
                 */ _proto.handleTechReady_ = function() {
                    this.triggerReady(), this.cache_.volume && this.techCall_("setVolume", this.cache_.volume), this.handleTechPosterChange_(), this.handleTechDurationChange_();
                }, /**
                 * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This
                 * function will also trigger {@link Player#firstplay} if it is the first loadstart
                 * for a video.
                 *
                 * @fires Player#loadstart
                 * @fires Player#firstplay
                 * @listens Tech#loadstart
                 * @private
                 */ _proto.handleTechLoadStart_ = function() {
                    // TODO: Update to use `emptied` event instead. See #1277.
                    this.removeClass("vjs-ended"), this.removeClass("vjs-seeking"), this.error(null), this.handleTechDurationChange_(), this.paused() ? (// reset the hasStarted state
                    this.hasStarted(!1), this.trigger("loadstart")) : (/**
                         * Fired when the user agent begins looking for media data
                         *
                         * @event Player#loadstart
                         * @type {EventTarget~Event}
                         */ this.trigger("loadstart"), this.trigger("firstplay")), // so we mimic that behavior
                    this.manualAutoplay_(!0 === this.autoplay() && this.options_.normalizeAutoplay ? "play" : this.autoplay());
                }, /**
                 * Handle autoplay string values, rather than the typical boolean
                 * values that should be handled by the tech. Note that this is not
                 * part of any specification. Valid values and what they do can be
                 * found on the autoplay getter at Player#autoplay()
                 */ _proto.manualAutoplay_ = function(type) {
                    var promise, _this6 = this;
                    if (this.tech_ && "string" == typeof type) {
                        // On promise rejection, restore muted from saved value
                        var resolveMuted = function() {
                            var previouslyMuted = _this6.muted();
                            _this6.muted(!0);
                            var restoreMuted = function() {
                                _this6.muted(previouslyMuted);
                            }; // restore muted on play terminatation
                            _this6.playTerminatedQueue_.push(restoreMuted);
                            var mutedPromise = _this6.play();
                            if (isPromise(mutedPromise)) return mutedPromise.catch(function(err) {
                                throw restoreMuted(), Error("Rejection at manualAutoplay. Restoring muted value. " + (err || ""));
                            });
                        };
                        if ("any" !== type || this.muted() ? promise = "muted" !== type || this.muted() ? this.play() : resolveMuted() : isPromise(promise = this.play()) && (promise = promise.catch(resolveMuted)), isPromise(promise)) return promise.then(function() {
                            _this6.trigger({
                                type: "autoplay-success",
                                autoplay: type
                            });
                        }).catch(function() {
                            _this6.trigger({
                                type: "autoplay-failure",
                                autoplay: type
                            });
                        });
                    } // Save original muted() value, set muted to true, and attempt to play().
                }, /**
                 * Update the internal source caches so that we return the correct source from
                 * `src()`, `currentSource()`, and `currentSources()`.
                 *
                 * > Note: `currentSources` will not be updated if the source that is passed in exists
                 *         in the current `currentSources` cache.
                 *
                 *
                 * @param {Tech~SourceObject} srcObj
                 *        A string or object source to update our caches to.
                 */ _proto.updateSourceCaches_ = function(srcObj) {
                    void 0 === srcObj && (srcObj = "");
                    var src = srcObj, type = "";
                    "string" != typeof src && (src = srcObj.src, type = srcObj.type), // to prevent null checking
                    this.cache_.source = this.cache_.source || {}, this.cache_.sources = this.cache_.sources || [], src && !type && (type = findMimetype(this, src)), this.cache_.source = mergeOptions$3({}, srcObj, {
                        src: src,
                        type: type
                    });
                    for(var matchingSources = this.cache_.sources.filter(function(s) {
                        return s.src && s.src === src;
                    }), sourceElSources = [], sourceEls = this.$$("source"), matchingSourceEls = [], i = 0; i < sourceEls.length; i++){
                        var sourceObj = getAttributes(sourceEls[i]);
                        sourceElSources.push(sourceObj), sourceObj.src && sourceObj.src === src && matchingSourceEls.push(sourceObj.src);
                    } // if we have matching source els but not matching sources
                    matchingSourceEls.length && !matchingSources.length ? this.cache_.sources = sourceElSources : matchingSources.length || (this.cache_.sources = [
                        this.cache_.source
                    ]), this.cache_.src = src;
                }, /**
                 * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}
                 * causing the media element to reload.
                 *
                 * It will fire for the initial source and each subsequent source.
                 * This event is a custom event from Video.js and is triggered by the {@link Tech}.
                 *
                 * The event object for this event contains a `src` property that will contain the source
                 * that was available when the event was triggered. This is generally only necessary if Video.js
                 * is switching techs while the source was being changed.
                 *
                 * It is also fired when `load` is called on the player (or media element)
                 * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}
                 * says that the resource selection algorithm needs to be aborted and restarted.
                 * In this case, it is very likely that the `src` property will be set to the
                 * empty string `""` to indicate we do not know what the source will be but
                 * that it is changing.
                 *
                 * *This event is currently still experimental and may change in minor releases.*
                 * __To use this, pass `enableSourceset` option to the player.__
                 *
                 * @event Player#sourceset
                 * @type {EventTarget~Event}
                 * @prop {string} src
                 *                The source url available when the `sourceset` was triggered.
                 *                It will be an empty string if we cannot know what the source is
                 *                but know that the source will change.
                 */ /**
                 * Retrigger the `sourceset` event that was triggered by the {@link Tech}.
                 *
                 * @fires Player#sourceset
                 * @listens Tech#sourceset
                 * @private
                 */ _proto.handleTechSourceset_ = function(event) {
                    var _this7 = this;
                    // only update the source cache when the source
                    // was not updated using the player api
                    if (!this.changingSrc_) {
                        var updateSourceCaches = function(src) {
                            return _this7.updateSourceCaches_(src);
                        }, playerSrc = this.currentSource().src, eventSrc = event.src;
                        playerSrc && !/^blob:/.test(playerSrc) && /^blob:/.test(eventSrc) && (!this.lastSource_ || this.lastSource_.tech !== eventSrc && this.lastSource_.player !== playerSrc) && (updateSourceCaches = function() {}), // in some cases this will be empty string
                        updateSourceCaches(eventSrc), event.src || this.tech_.any([
                            "sourceset",
                            "loadstart"
                        ], function(e) {
                            // if a sourceset happens before a `loadstart` there
                            // is nothing to do as this `handleTechSourceset_`
                            // will be called again and this will be handled there.
                            if ("sourceset" !== e.type) {
                                var techSrc = _this7.techGet("currentSrc");
                                _this7.lastSource_.tech = techSrc, _this7.updateSourceCaches_(techSrc);
                            }
                        });
                    }
                    this.lastSource_ = {
                        player: this.currentSource().src,
                        tech: event.src
                    }, this.trigger({
                        src: event.src,
                        type: "sourceset"
                    });
                }, /**
                 * Add/remove the vjs-has-started class
                 *
                 * @fires Player#firstplay
                 *
                 * @param {boolean} request
                 *        - true: adds the class
                 *        - false: remove the class
                 *
                 * @return {boolean}
                 *         the boolean value of hasStarted_
                 */ _proto.hasStarted = function(request) {
                    if (void 0 === request) // act as getter, if we have no request to change
                    return this.hasStarted_;
                    request !== this.hasStarted_ && (this.hasStarted_ = request, this.hasStarted_ ? (this.addClass("vjs-has-started"), this.trigger("firstplay")) : this.removeClass("vjs-has-started"));
                }, /**
                 * Fired whenever the media begins or resumes playback
                 *
                 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}
                 * @fires Player#play
                 * @listens Tech#play
                 * @private
                 */ _proto.handleTechPlay_ = function() {
                    this.removeClass("vjs-ended"), this.removeClass("vjs-paused"), this.addClass("vjs-playing"), this.hasStarted(!0), /**
                     * Triggered whenever an {@link Tech#play} event happens. Indicates that
                     * playback has started or resumed.
                     *
                     * @event Player#play
                     * @type {EventTarget~Event}
                     */ this.trigger("play");
                }, /**
                 * Retrigger the `ratechange` event that was triggered by the {@link Tech}.
                 *
                 * If there were any events queued while the playback rate was zero, fire
                 * those events now.
                 *
                 * @private
                 * @method Player#handleTechRateChange_
                 * @fires Player#ratechange
                 * @listens Tech#ratechange
                 */ _proto.handleTechRateChange_ = function() {
                    this.tech_.playbackRate() > 0 && 0 === this.cache_.lastPlaybackRate && (this.queuedCallbacks_.forEach(function(queued) {
                        return queued.callback(queued.event);
                    }), this.queuedCallbacks_ = []), this.cache_.lastPlaybackRate = this.tech_.playbackRate(), /**
                         * Fires when the playing speed of the audio/video is changed
                         *
                         * @event Player#ratechange
                         * @type {event}
                         */ this.trigger("ratechange");
                }, /**
                 * Retrigger the `waiting` event that was triggered by the {@link Tech}.
                 *
                 * @fires Player#waiting
                 * @listens Tech#waiting
                 * @private
                 */ _proto.handleTechWaiting_ = function() {
                    var _this8 = this;
                    this.addClass("vjs-waiting"), /**
                     * A readyState change on the DOM element has caused playback to stop.
                     *
                     * @event Player#waiting
                     * @type {EventTarget~Event}
                     */ this.trigger("waiting");
                    // premature removal of the waiting class, wait for the time to change.
                    var timeWhenWaiting = this.currentTime();
                    this.on("timeupdate", function timeUpdateListener() {
                        timeWhenWaiting !== _this8.currentTime() && (_this8.removeClass("vjs-waiting"), _this8.off("timeupdate", timeUpdateListener));
                    });
                }, /**
                 * Retrigger the `canplay` event that was triggered by the {@link Tech}.
                 * > Note: This is not consistent between browsers. See #1351
                 *
                 * @fires Player#canplay
                 * @listens Tech#canplay
                 * @private
                 */ _proto.handleTechCanPlay_ = function() {
                    this.removeClass("vjs-waiting"), /**
                     * The media has a readyState of HAVE_FUTURE_DATA or greater.
                     *
                     * @event Player#canplay
                     * @type {EventTarget~Event}
                     */ this.trigger("canplay");
                }, /**
                 * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.
                 *
                 * @fires Player#canplaythrough
                 * @listens Tech#canplaythrough
                 * @private
                 */ _proto.handleTechCanPlayThrough_ = function() {
                    this.removeClass("vjs-waiting"), /**
                         * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the
                         * entire media file can be played without buffering.
                         *
                         * @event Player#canplaythrough
                         * @type {EventTarget~Event}
                         */ this.trigger("canplaythrough");
                }, /**
                 * Retrigger the `playing` event that was triggered by the {@link Tech}.
                 *
                 * @fires Player#playing
                 * @listens Tech#playing
                 * @private
                 */ _proto.handleTechPlaying_ = function() {
                    this.removeClass("vjs-waiting"), /**
                     * The media is no longer blocked from playback, and has started playing.
                     *
                     * @event Player#playing
                     * @type {EventTarget~Event}
                     */ this.trigger("playing");
                }, /**
                 * Retrigger the `seeking` event that was triggered by the {@link Tech}.
                 *
                 * @fires Player#seeking
                 * @listens Tech#seeking
                 * @private
                 */ _proto.handleTechSeeking_ = function() {
                    this.addClass("vjs-seeking"), /**
                     * Fired whenever the player is jumping to a new time
                     *
                     * @event Player#seeking
                     * @type {EventTarget~Event}
                     */ this.trigger("seeking");
                }, /**
                 * Retrigger the `seeked` event that was triggered by the {@link Tech}.
                 *
                 * @fires Player#seeked
                 * @listens Tech#seeked
                 * @private
                 */ _proto.handleTechSeeked_ = function() {
                    this.removeClass("vjs-seeking"), this.removeClass("vjs-ended"), /**
                     * Fired when the player has finished jumping to a new time
                     *
                     * @event Player#seeked
                     * @type {EventTarget~Event}
                     */ this.trigger("seeked");
                }, /**
                 * Retrigger the `firstplay` event that was triggered by the {@link Tech}.
                 *
                 * @fires Player#firstplay
                 * @listens Tech#firstplay
                 * @deprecated As of 6.0 firstplay event is deprecated.
                 *             As of 6.0 passing the `starttime` option to the player and the firstplay event are deprecated.
                 * @private
                 */ _proto.handleTechFirstPlay_ = function() {
                    this.options_.starttime && (log$1.warn("Passing the `starttime` option to the player will be deprecated in 6.0"), this.currentTime(this.options_.starttime)), this.addClass("vjs-has-started"), /**
                     * Fired the first time a video is played. Not part of the HLS spec, and this is
                     * probably not the best implementation yet, so use sparingly. If you don't have a
                     * reason to prevent playback, use `myPlayer.one('play');` instead.
                     *
                     * @event Player#firstplay
                     * @deprecated As of 6.0 firstplay event is deprecated.
                     * @type {EventTarget~Event}
                     */ this.trigger("firstplay");
                }, /**
                 * Retrigger the `pause` event that was triggered by the {@link Tech}.
                 *
                 * @fires Player#pause
                 * @listens Tech#pause
                 * @private
                 */ _proto.handleTechPause_ = function() {
                    this.removeClass("vjs-playing"), this.addClass("vjs-paused"), /**
                     * Fired whenever the media has been paused
                     *
                     * @event Player#pause
                     * @type {EventTarget~Event}
                     */ this.trigger("pause");
                }, /**
                 * Retrigger the `ended` event that was triggered by the {@link Tech}.
                 *
                 * @fires Player#ended
                 * @listens Tech#ended
                 * @private
                 */ _proto.handleTechEnded_ = function() {
                    this.addClass("vjs-ended"), this.removeClass("vjs-waiting"), this.options_.loop ? (this.currentTime(0), this.play()) : this.paused() || this.pause(), /**
                     * Fired when the end of the media resource is reached (currentTime == duration)
                     *
                     * @event Player#ended
                     * @type {EventTarget~Event}
                     */ this.trigger("ended");
                }, /**
                 * Fired when the duration of the media resource is first known or changed
                 *
                 * @listens Tech#durationchange
                 * @private
                 */ _proto.handleTechDurationChange_ = function() {
                    this.duration(this.techGet_("duration"));
                }, /**
                 * Handle a click on the media element to play/pause
                 *
                 * @param {EventTarget~Event} event
                 *        the event that caused this function to trigger
                 *
                 * @listens Tech#click
                 * @private
                 */ _proto.handleTechClick_ = function(event) {
                    // When controls are disabled a click should not toggle playback because
                    // the click is considered a control
                    this.controls_ && (void 0 === this.options_ || void 0 === this.options_.userActions || void 0 === this.options_.userActions.click || !1 !== this.options_.userActions.click) && (void 0 !== this.options_ && void 0 !== this.options_.userActions && "function" == typeof this.options_.userActions.click ? this.options_.userActions.click.call(this, event) : this.paused() ? silencePromise(this.play()) : this.pause());
                }, /**
                 * Handle a double-click on the media element to enter/exit fullscreen
                 *
                 * @param {EventTarget~Event} event
                 *        the event that caused this function to trigger
                 *
                 * @listens Tech#dblclick
                 * @private
                 */ _proto.handleTechDoubleClick_ = function(event) {
                    this.controls_ && (Array.prototype.some.call(this.$$(".vjs-control-bar, .vjs-modal-dialog"), function(el) {
                        return el.contains(event.target);
                    }) || void 0 !== this.options_ && void 0 !== this.options_.userActions && void 0 !== this.options_.userActions.doubleClick && !1 === this.options_.userActions.doubleClick || (void 0 !== this.options_ && void 0 !== this.options_.userActions && "function" == typeof this.options_.userActions.doubleClick ? this.options_.userActions.doubleClick.call(this, event) : this.isFullscreen() ? this.exitFullscreen() : this.requestFullscreen())); // we do not want to toggle fullscreen state
                }, /**
                 * Handle a tap on the media element. It will toggle the user
                 * activity state, which hides and shows the controls.
                 *
                 * @listens Tech#tap
                 * @private
                 */ _proto.handleTechTap_ = function() {
                    this.userActive(!this.userActive());
                }, /**
                 * Handle touch to start
                 *
                 * @listens Tech#touchstart
                 * @private
                 */ _proto.handleTechTouchStart_ = function() {
                    this.userWasActive = this.userActive();
                }, /**
                 * Handle touch to move
                 *
                 * @listens Tech#touchmove
                 * @private
                 */ _proto.handleTechTouchMove_ = function() {
                    this.userWasActive && this.reportUserActivity();
                }, /**
                 * Handle touch to end
                 *
                 * @param {EventTarget~Event} event
                 *        the touchend event that triggered
                 *        this function
                 *
                 * @listens Tech#touchend
                 * @private
                 */ _proto.handleTechTouchEnd_ = function(event) {
                    // Stop the mouse events from also happening
                    event.cancelable && event.preventDefault();
                }, /**
                 * native click events on the SWF aren't triggered on IE11, Win8.1RT
                 * use stageclick events triggered from inside the SWF instead
                 *
                 * @private
                 * @listens stageclick
                 */ _proto.handleStageClick_ = function() {
                    this.reportUserActivity();
                }, /**
                 * @private
                 */ _proto.toggleFullscreenClass_ = function() {
                    this.isFullscreen() ? this.addClass("vjs-fullscreen") : this.removeClass("vjs-fullscreen");
                }, /**
                 * when the document fschange event triggers it calls this
                 */ _proto.documentFullscreenChange_ = function(e) {
                    var targetPlayer = e.target.player; // if another player was fullscreen
                    // do a null check for targetPlayer because older firefox's would put document as e.target
                    if (!targetPlayer || targetPlayer === this) {
                        var el = this.el(), isFs = global_document__WEBPACK_IMPORTED_MODULE_1___default()[this.fsApi_.fullscreenElement] === el;
                        !isFs && el.matches ? isFs = el.matches(":" + this.fsApi_.fullscreen) : !isFs && el.msMatchesSelector && (isFs = el.msMatchesSelector(":" + this.fsApi_.fullscreen)), this.isFullscreen(isFs);
                    }
                }, /**
                 * Handle Tech Fullscreen Change
                 *
                 * @param {EventTarget~Event} event
                 *        the fullscreenchange event that triggered this function
                 *
                 * @param {Object} data
                 *        the data that was sent with the event
                 *
                 * @private
                 * @listens Tech#fullscreenchange
                 * @fires Player#fullscreenchange
                 */ _proto.handleTechFullscreenChange_ = function(event, data) {
                    data && (data.nativeIOSFullscreen && this.toggleClass("vjs-ios-native-fs"), this.isFullscreen(data.isFullscreen));
                }, _proto.handleTechFullscreenError_ = function(event, err) {
                    this.trigger("fullscreenerror", err);
                }, /**
                 * @private
                 */ _proto.togglePictureInPictureClass_ = function() {
                    this.isInPictureInPicture() ? this.addClass("vjs-picture-in-picture") : this.removeClass("vjs-picture-in-picture");
                }, /**
                 * Handle Tech Enter Picture-in-Picture.
                 *
                 * @param {EventTarget~Event} event
                 *        the enterpictureinpicture event that triggered this function
                 *
                 * @private
                 * @listens Tech#enterpictureinpicture
                 */ _proto.handleTechEnterPictureInPicture_ = function(event) {
                    this.isInPictureInPicture(!0);
                }, /**
                 * Handle Tech Leave Picture-in-Picture.
                 *
                 * @param {EventTarget~Event} event
                 *        the leavepictureinpicture event that triggered this function
                 *
                 * @private
                 * @listens Tech#leavepictureinpicture
                 */ _proto.handleTechLeavePictureInPicture_ = function(event) {
                    this.isInPictureInPicture(!1);
                }, /**
                 * Fires when an error occurred during the loading of an audio/video.
                 *
                 * @private
                 * @listens Tech#error
                 */ _proto.handleTechError_ = function() {
                    var error = this.tech_.error();
                    this.error(error);
                }, /**
                 * Retrigger the `textdata` event that was triggered by the {@link Tech}.
                 *
                 * @fires Player#textdata
                 * @listens Tech#textdata
                 * @private
                 */ _proto.handleTechTextData_ = function() {
                    var data = null;
                    arguments.length > 1 && (data = arguments[1]), /**
                     * Fires when we get a textdata event from tech
                     *
                     * @event Player#textdata
                     * @type {EventTarget~Event}
                     */ this.trigger("textdata", data);
                }, /**
                 * Get object for cached values.
                 *
                 * @return {Object}
                 *         get the current object cache
                 */ _proto.getCache = function() {
                    return this.cache_;
                }, /**
                 * Resets the internal cache object.
                 *
                 * Using this function outside the player constructor or reset method may
                 * have unintended side-effects.
                 *
                 * @private
                 */ _proto.resetCache_ = function() {
                    this.cache_ = {
                        // Right now, the currentTime is not _really_ cached because it is always
                        // retrieved from the tech (see: currentTime). However, for completeness,
                        // we set it to zero here to ensure that if we do start actually caching
                        // it, we reset it along with everything else.
                        currentTime: 0,
                        initTime: 0,
                        inactivityTimeout: this.options_.inactivityTimeout,
                        duration: NaN,
                        lastVolume: 1,
                        lastPlaybackRate: this.defaultPlaybackRate(),
                        media: null,
                        src: "",
                        source: {},
                        sources: [],
                        playbackRates: [],
                        volume: 1
                    };
                }, /**
                 * Pass values to the playback tech
                 *
                 * @param {string} [method]
                 *        the method to call
                 *
                 * @param {Object} arg
                 *        the argument to pass
                 *
                 * @private
                 */ _proto.techCall_ = function(method, arg) {
                    // If it's not ready yet, call method when it is
                    this.ready(function() {
                        if (method in allowedSetters) {
                            var middleware;
                            return middleware = this.middleware_, this.tech_[method](middleware.reduce(middlewareIterator(method), arg));
                        }
                        if (method in allowedMediators) return mediate(this.middleware_, this.tech_, method, arg);
                        try {
                            this.tech_ && this.tech_[method](arg);
                        } catch (e) {
                            throw log$1(e), e;
                        }
                    }, !0);
                }, /**
                 * Get calls can't wait for the tech, and sometimes don't need to.
                 *
                 * @param {string} method
                 *        Tech method
                 *
                 * @return {Function|undefined}
                 *         the method or undefined
                 *
                 * @private
                 */ _proto.techGet_ = function(method) {
                    if (this.tech_ && this.tech_.isReady_) {
                        if (method in allowedGetters) {
                            var middleware, tech;
                            return middleware = this.middleware_, tech = this.tech_, middleware.reduceRight(middlewareIterator(method), tech[method]());
                        } // Flash likes to die and reload when you hide or reposition it.
                        if (method in allowedMediators) return mediate(this.middleware_, this.tech_, method);
                        // In these cases the object methods go away and we get errors.
                        // TODO: Is this needed for techs other than Flash?
                        // When that happens we'll catch the errors and inform tech that it's not ready any more.
                        try {
                            return this.tech_[method]();
                        } catch (e) {
                            // When building additional tech libs, an expected method may not be defined yet
                            if (void 0 === this.tech_[method]) throw log$1("Video.js: " + method + " method not defined for " + this.techName_ + " playback technology.", e), e;
                             // When a method isn't available on the object it throws a TypeError
                            if ("TypeError" === e.name) throw log$1("Video.js: " + method + " unavailable on " + this.techName_ + " playback technology element.", e), this.tech_.isReady_ = !1, e;
                             // If error unknown, just log and throw
                            throw log$1(e), e;
                        }
                    }
                }, /**
                 * Attempt to begin playback at the first opportunity.
                 *
                 * @return {Promise|undefined}
                 *         Returns a promise if the browser supports Promises (or one
                 *         was passed in as an option). This promise will be resolved on
                 *         the return value of play. If this is undefined it will fulfill the
                 *         promise chain otherwise the promise chain will be fulfilled when
                 *         the promise from play is fulfilled.
                 */ _proto.play = function() {
                    var _this9 = this, PromiseClass = this.options_.Promise || global_window__WEBPACK_IMPORTED_MODULE_0___default().Promise;
                    return PromiseClass ? new PromiseClass(function(resolve) {
                        _this9.play_(resolve);
                    }) : this.play_();
                }, /**
                 * The actual logic for play, takes a callback that will be resolved on the
                 * return value of play. This allows us to resolve to the play promise if there
                 * is one on modern browsers.
                 *
                 * @private
                 * @param {Function} [callback]
                 *        The callback that should be called when the techs play is actually called
                 */ _proto.play_ = function(callback) {
                    var _this10 = this;
                    void 0 === callback && (callback = silencePromise), this.playCallbacks_.push(callback);
                    var isSrcReady = !!(!this.changingSrc_ && (this.src() || this.currentSrc())); // treat calls to play_ somewhat like the `one` event function
                    // queue up a call to play on `ready` or `loadstart`
                    if (this.waitToPlay_ && (this.off([
                        "ready",
                        "loadstart"
                    ], this.waitToPlay_), this.waitToPlay_ = null), !this.isReady_ || !isSrcReady) {
                        this.waitToPlay_ = function(e) {
                            _this10.play_();
                        }, this.one([
                            "ready",
                            "loadstart"
                        ], this.waitToPlay_), !isSrcReady && (IS_ANY_SAFARI || IS_IOS) && this.load();
                        return;
                    } // If the player/tech is ready and we have a source, we can attempt playback.
                    var val = this.techGet_("play"); // play was terminated if the returned value is null
                    null === val ? this.runPlayTerminatedQueue_() : this.runPlayCallbacks_(val);
                }, /**
                 * These functions will be run when if play is terminated. If play
                 * runPlayCallbacks_ is run these function will not be run. This allows us
                 * to differenciate between a terminated play and an actual call to play.
                 */ _proto.runPlayTerminatedQueue_ = function() {
                    var queue = this.playTerminatedQueue_.slice(0);
                    this.playTerminatedQueue_ = [], queue.forEach(function(q) {
                        q();
                    });
                }, /**
                 * When a callback to play is delayed we have to run these
                 * callbacks when play is actually called on the tech. This function
                 * runs the callbacks that were delayed and accepts the return value
                 * from the tech.
                 *
                 * @param {undefined|Promise} val
                 *        The return value from the tech.
                 */ _proto.runPlayCallbacks_ = function(val) {
                    var callbacks = this.playCallbacks_.slice(0);
                    this.playCallbacks_ = [], this.playTerminatedQueue_ = [], callbacks.forEach(function(cb) {
                        cb(val);
                    });
                }, /**
                 * Pause the video playback
                 *
                 * @return {Player}
                 *         A reference to the player object this function was called on
                 */ _proto.pause = function() {
                    this.techCall_("pause");
                }, /**
                 * Check if the player is paused or has yet to play
                 *
                 * @return {boolean}
                 *         - false: if the media is currently playing
                 *         - true: if media is not currently playing
                 */ _proto.paused = function() {
                    // The initial state of paused should be true (in Safari it's actually false)
                    return !1 !== this.techGet_("paused");
                }, /**
                 * Get a TimeRange object representing the current ranges of time that the user
                 * has played.
                 *
                 * @return {TimeRange}
                 *         A time range object that represents all the increments of time that have
                 *         been played.
                 */ _proto.played = function() {
                    return this.techGet_("played") || createTimeRanges(0, 0);
                }, /**
                 * Returns whether or not the user is "scrubbing". Scrubbing is
                 * when the user has clicked the progress bar handle and is
                 * dragging it along the progress bar.
                 *
                 * @param {boolean} [isScrubbing]
                 *        whether the user is or is not scrubbing
                 *
                 * @return {boolean}
                 *         The value of scrubbing when getting
                 */ _proto.scrubbing = function(isScrubbing) {
                    if (void 0 === isScrubbing) return this.scrubbing_;
                    this.scrubbing_ = !!isScrubbing, this.techCall_("setScrubbing", this.scrubbing_), isScrubbing ? this.addClass("vjs-scrubbing") : this.removeClass("vjs-scrubbing");
                }, /**
                 * Get or set the current time (in seconds)
                 *
                 * @param {number|string} [seconds]
                 *        The time to seek to in seconds
                 *
                 * @return {number}
                 *         - the current time in seconds when getting
                 */ _proto.currentTime = function(seconds) {
                    if (void 0 !== seconds) {
                        if (seconds < 0 && (seconds = 0), !this.isReady_ || this.changingSrc_ || !this.tech_ || !this.tech_.isReady_) {
                            this.cache_.initTime = seconds, this.off("canplay", this.boundApplyInitTime_), this.one("canplay", this.boundApplyInitTime_);
                            return;
                        }
                        this.techCall_("setCurrentTime", seconds), this.cache_.initTime = 0;
                        return;
                    } // cache last currentTime and return. default to 0 seconds
                    return(//
                    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
                    // currentTime when scrubbing, but may not provide much performance benefit afterall.
                    // Should be tested. Also something has to read the actual current time or the cache will
                    // never get updated.
                    this.cache_.currentTime = this.techGet_("currentTime") || 0, this.cache_.currentTime);
                }, /**
                 * Apply the value of initTime stored in cache as currentTime.
                 *
                 * @private
                 */ _proto.applyInitTime_ = function() {
                    this.currentTime(this.cache_.initTime);
                }, /**
                 * Normally gets the length in time of the video in seconds;
                 * in all but the rarest use cases an argument will NOT be passed to the method
                 *
                 * > **NOTE**: The video must have started loading before the duration can be
                 * known, and depending on preload behaviour may not be known until the video starts
                 * playing.
                 *
                 * @fires Player#durationchange
                 *
                 * @param {number} [seconds]
                 *        The duration of the video to set in seconds
                 *
                 * @return {number}
                 *         - The duration of the video in seconds when getting
                 */ _proto.duration = function(seconds) {
                    if (void 0 === seconds) // return NaN if the duration is not known
                    return void 0 !== this.cache_.duration ? this.cache_.duration : NaN;
                    (seconds = parseFloat(seconds)) < 0 && (seconds = 1 / 0), seconds === this.cache_.duration || (// Cache the last set value for optimized scrubbing (esp. Flash)
                    // TODO: Required for techs other than Flash?
                    this.cache_.duration = seconds, seconds === 1 / 0 ? this.addClass("vjs-live") : this.removeClass("vjs-live"), isNaN(seconds) || // Do not fire durationchange unless the duration value is known.
                    // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}
                    /**
                             * @event Player#durationchange
                             * @type {EventTarget~Event}
                             */ this.trigger("durationchange"));
                }, /**
                 * Calculates how much time is left in the video. Not part
                 * of the native video API.
                 *
                 * @return {number}
                 *         The time remaining in seconds
                 */ _proto.remainingTime = function() {
                    return this.duration() - this.currentTime();
                }, /**
                 * A remaining time function that is intented to be used when
                 * the time is to be displayed directly to the user.
                 *
                 * @return {number}
                 *         The rounded time remaining in seconds
                 */ _proto.remainingTimeDisplay = function() {
                    return Math.floor(this.duration()) - Math.floor(this.currentTime());
                }, // Kind of like an array of portions of the video that have been downloaded.
                /**
                 * Get a TimeRange object with an array of the times of the video
                 * that have been downloaded. If you just want the percent of the
                 * video that's been downloaded, use bufferedPercent.
                 *
                 * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}
                 *
                 * @return {TimeRange}
                 *         A mock TimeRange object (following HTML spec)
                 */ _proto.buffered = function() {
                    var buffered = this.techGet_("buffered");
                    return buffered && buffered.length || (buffered = createTimeRanges(0, 0)), buffered;
                }, /**
                 * Get the percent (as a decimal) of the video that's been downloaded.
                 * This method is not a part of the native HTML video API.
                 *
                 * @return {number}
                 *         A decimal between 0 and 1 representing the percent
                 *         that is buffered 0 being 0% and 1 being 100%
                 */ _proto.bufferedPercent = function() {
                    return bufferedPercent(this.buffered(), this.duration());
                }, /**
                 * Get the ending time of the last buffered time range
                 * This is used in the progress bar to encapsulate all time ranges.
                 *
                 * @return {number}
                 *         The end of the last buffered time range
                 */ _proto.bufferedEnd = function() {
                    var buffered = this.buffered(), duration = this.duration(), end = buffered.end(buffered.length - 1);
                    return end > duration && (end = duration), end;
                }, /**
                 * Get or set the current volume of the media
                 *
                 * @param  {number} [percentAsDecimal]
                 *         The new volume as a decimal percent:
                 *         - 0 is muted/0%/off
                 *         - 1.0 is 100%/full
                 *         - 0.5 is half volume or 50%
                 *
                 * @return {number}
                 *         The current volume as a percent when getting
                 */ _proto.volume = function(percentAsDecimal) {
                    var vol;
                    if (void 0 !== percentAsDecimal) {
                        // Force value to between 0 and 1
                        vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal))), this.cache_.volume = vol, this.techCall_("setVolume", vol), vol > 0 && this.lastVolume_(vol);
                        return;
                    } // Default to 1 when returning current volume.
                    return isNaN(vol = parseFloat(this.techGet_("volume"))) ? 1 : vol;
                }, /**
                 * Get the current muted state, or turn mute on or off
                 *
                 * @param {boolean} [muted]
                 *        - true to mute
                 *        - false to unmute
                 *
                 * @return {boolean}
                 *         - true if mute is on and getting
                 *         - false if mute is off and getting
                 */ _proto.muted = function(_muted) {
                    if (void 0 !== _muted) {
                        this.techCall_("setMuted", _muted);
                        return;
                    }
                    return this.techGet_("muted") || !1;
                }, /**
                 * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted
                 * indicates the state of muted on initial playback.
                 *
                 * ```js
                 *   var myPlayer = videojs('some-player-id');
                 *
                 *   myPlayer.src("http://www.example.com/path/to/video.mp4");
                 *
                 *   // get, should be false
                 *   console.log(myPlayer.defaultMuted());
                 *   // set to true
                 *   myPlayer.defaultMuted(true);
                 *   // get should be true
                 *   console.log(myPlayer.defaultMuted());
                 * ```
                 *
                 * @param {boolean} [defaultMuted]
                 *        - true to mute
                 *        - false to unmute
                 *
                 * @return {boolean|Player}
                 *         - true if defaultMuted is on and getting
                 *         - false if defaultMuted is off and getting
                 *         - A reference to the current player when setting
                 */ _proto.defaultMuted = function(_defaultMuted) {
                    return void 0 !== _defaultMuted ? this.techCall_("setDefaultMuted", _defaultMuted) : this.techGet_("defaultMuted") || !1;
                }, /**
                 * Get the last volume, or set it
                 *
                 * @param  {number} [percentAsDecimal]
                 *         The new last volume as a decimal percent:
                 *         - 0 is muted/0%/off
                 *         - 1.0 is 100%/full
                 *         - 0.5 is half volume or 50%
                 *
                 * @return {number}
                 *         the current value of lastVolume as a percent when getting
                 *
                 * @private
                 */ _proto.lastVolume_ = function(percentAsDecimal) {
                    if (void 0 !== percentAsDecimal && 0 !== percentAsDecimal) {
                        this.cache_.lastVolume = percentAsDecimal;
                        return;
                    }
                    return this.cache_.lastVolume;
                }, /**
                 * Check if current tech can support native fullscreen
                 * (e.g. with built in controls like iOS)
                 *
                 * @return {boolean}
                 *         if native fullscreen is supported
                 */ _proto.supportsFullScreen = function() {
                    return this.techGet_("supportsFullScreen") || !1;
                }, /**
                 * Check if the player is in fullscreen mode or tell the player that it
                 * is or is not in fullscreen mode.
                 *
                 * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
                 * property and instead document.fullscreenElement is used. But isFullscreen is
                 * still a valuable property for internal player workings.
                 *
                 * @param  {boolean} [isFS]
                 *         Set the players current fullscreen state
                 *
                 * @return {boolean}
                 *         - true if fullscreen is on and getting
                 *         - false if fullscreen is off and getting
                 */ _proto.isFullscreen = function(isFS) {
                    if (void 0 !== isFS) {
                        var oldValue = this.isFullscreen_;
                        this.isFullscreen_ = !!isFS, this.isFullscreen_ !== oldValue && this.fsApi_.prefixed && /**
                             * @event Player#fullscreenchange
                             * @type {EventTarget~Event}
                             */ this.trigger("fullscreenchange"), this.toggleFullscreenClass_();
                        return;
                    }
                    return this.isFullscreen_;
                }, /**
                 * Increase the size of the video to full screen
                 * In some browsers, full screen is not supported natively, so it enters
                 * "full window mode", where the video fills the browser window.
                 * In browsers and devices that support native full screen, sometimes the
                 * browser's default controls will be shown, and not the Video.js custom skin.
                 * This includes most mobile devices (iOS, Android) and older versions of
                 * Safari.
                 *
                 * @param  {Object} [fullscreenOptions]
                 *         Override the player fullscreen options
                 *
                 * @fires Player#fullscreenchange
                 */ _proto.requestFullscreen = function(fullscreenOptions) {
                    var PromiseClass = this.options_.Promise || global_window__WEBPACK_IMPORTED_MODULE_0___default().Promise;
                    if (PromiseClass) {
                        var self1 = this;
                        return new PromiseClass(function(resolve, reject) {
                            function offHandler() {
                                self1.off("fullscreenerror", errorHandler), self1.off("fullscreenchange", changeHandler);
                            }
                            function changeHandler() {
                                offHandler(), resolve();
                            }
                            function errorHandler(e, err) {
                                offHandler(), reject(err);
                            }
                            self1.one("fullscreenchange", changeHandler), self1.one("fullscreenerror", errorHandler);
                            var promise = self1.requestFullscreenHelper_(fullscreenOptions);
                            promise && (promise.then(offHandler, offHandler), promise.then(resolve, reject));
                        });
                    }
                    return this.requestFullscreenHelper_();
                }, _proto.requestFullscreenHelper_ = function(fullscreenOptions) {
                    var fsOptions, _this11 = this;
                    // 1. if a fullscreen api is available, use it
                    //   1. call requestFullscreen with potential options
                    //   2. if we got a promise from above, use it to update isFullscreen()
                    // 2. otherwise, if the tech supports fullscreen, call `enterFullScreen` on it.
                    //   This is particularly used for iPhone, older iPads, and non-safari browser on iOS.
                    // 3. otherwise, use "fullWindow" mode
                    if (this.fsApi_.prefixed || (fsOptions = this.options_.fullscreen && this.options_.fullscreen.options || {}, void 0 === fullscreenOptions || (fsOptions = fullscreenOptions)), this.fsApi_.requestFullscreen) {
                        var promise = this.el_[this.fsApi_.requestFullscreen](fsOptions);
                        return promise && promise.then(function() {
                            return _this11.isFullscreen(!0);
                        }, function() {
                            return _this11.isFullscreen(!1);
                        }), promise;
                    }
                    this.tech_.supportsFullScreen() && !0 == !this.options_.preferFullWindow ? // we can't take the video.js controls fullscreen but we can go fullscreen
                    // with native controls
                    this.techCall_("enterFullScreen") : // fullscreen isn't supported so we'll just stretch the video element to
                    // fill the viewport
                    this.enterFullWindow();
                }, /**
                 * Return the video to its normal size after having been in full screen mode
                 *
                 * @fires Player#fullscreenchange
                 */ _proto.exitFullscreen = function() {
                    var PromiseClass = this.options_.Promise || global_window__WEBPACK_IMPORTED_MODULE_0___default().Promise;
                    if (PromiseClass) {
                        var self1 = this;
                        return new PromiseClass(function(resolve, reject) {
                            function offHandler() {
                                self1.off("fullscreenerror", errorHandler), self1.off("fullscreenchange", changeHandler);
                            }
                            function changeHandler() {
                                offHandler(), resolve();
                            }
                            function errorHandler(e, err) {
                                offHandler(), reject(err);
                            }
                            self1.one("fullscreenchange", changeHandler), self1.one("fullscreenerror", errorHandler);
                            var promise = self1.exitFullscreenHelper_();
                            promise && (promise.then(offHandler, offHandler), promise.then(resolve, reject));
                        });
                    }
                    return this.exitFullscreenHelper_();
                }, _proto.exitFullscreenHelper_ = function() {
                    var _this12 = this;
                    if (this.fsApi_.requestFullscreen) {
                        var promise = global_document__WEBPACK_IMPORTED_MODULE_1___default()[this.fsApi_.exitFullscreen]();
                        return promise && // we're splitting the promise here, so, we want to catch the
                        // potential error so that this chain doesn't have unhandled errors
                        silencePromise(promise.then(function() {
                            return _this12.isFullscreen(!1);
                        })), promise;
                    }
                    this.tech_.supportsFullScreen() && !0 == !this.options_.preferFullWindow ? this.techCall_("exitFullScreen") : this.exitFullWindow();
                }, /**
                 * When fullscreen isn't supported we can stretch the
                 * video container to as wide as the browser will let us.
                 *
                 * @fires Player#enterFullWindow
                 */ _proto.enterFullWindow = function() {
                    this.isFullscreen(!0), this.isFullWindow = !0, this.docOrigOverflow = global_document__WEBPACK_IMPORTED_MODULE_1___default().documentElement.style.overflow, on(global_document__WEBPACK_IMPORTED_MODULE_1___default(), "keydown", this.boundFullWindowOnEscKey_), global_document__WEBPACK_IMPORTED_MODULE_1___default().documentElement.style.overflow = "hidden", addClass(global_document__WEBPACK_IMPORTED_MODULE_1___default().body, "vjs-full-window"), /**
                     * @event Player#enterFullWindow
                     * @type {EventTarget~Event}
                     */ this.trigger("enterFullWindow");
                }, /**
                 * Check for call to either exit full window or
                 * full screen on ESC key
                 *
                 * @param {string} event
                 *        Event to check for key press
                 */ _proto.fullWindowOnEscKey = function(event) {
                    keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(event, "Esc") && !0 === this.isFullscreen() && (this.isFullWindow ? this.exitFullWindow() : this.exitFullscreen());
                }, /**
                 * Exit full window
                 *
                 * @fires Player#exitFullWindow
                 */ _proto.exitFullWindow = function() {
                    this.isFullscreen(!1), this.isFullWindow = !1, off(global_document__WEBPACK_IMPORTED_MODULE_1___default(), "keydown", this.boundFullWindowOnEscKey_), global_document__WEBPACK_IMPORTED_MODULE_1___default().documentElement.style.overflow = this.docOrigOverflow, removeClass(global_document__WEBPACK_IMPORTED_MODULE_1___default().body, "vjs-full-window"), // this.positionAll();
                    /**
                     * @event Player#exitFullWindow
                     * @type {EventTarget~Event}
                     */ this.trigger("exitFullWindow");
                }, /**
                 * Disable Picture-in-Picture mode.
                 *
                 * @param {boolean} value
                 *                  - true will disable Picture-in-Picture mode
                 *                  - false will enable Picture-in-Picture mode
                 */ _proto.disablePictureInPicture = function(value) {
                    if (void 0 === value) return this.techGet_("disablePictureInPicture");
                    this.techCall_("setDisablePictureInPicture", value), this.options_.disablePictureInPicture = value, this.trigger("disablepictureinpicturechanged");
                }, /**
                 * Check if the player is in Picture-in-Picture mode or tell the player that it
                 * is or is not in Picture-in-Picture mode.
                 *
                 * @param  {boolean} [isPiP]
                 *         Set the players current Picture-in-Picture state
                 *
                 * @return {boolean}
                 *         - true if Picture-in-Picture is on and getting
                 *         - false if Picture-in-Picture is off and getting
                 */ _proto.isInPictureInPicture = function(isPiP) {
                    if (void 0 !== isPiP) {
                        this.isInPictureInPicture_ = !!isPiP, this.togglePictureInPictureClass_();
                        return;
                    }
                    return !!this.isInPictureInPicture_;
                }, /**
                 * Create a floating video window always on top of other windows so that users may
                 * continue consuming media while they interact with other content sites, or
                 * applications on their device.
                 *
                 * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
                 *
                 * @fires Player#enterpictureinpicture
                 *
                 * @return {Promise}
                 *         A promise with a Picture-in-Picture window.
                 */ _proto.requestPictureInPicture = function() {
                    if ("pictureInPictureEnabled" in global_document__WEBPACK_IMPORTED_MODULE_1___default() && !1 === this.disablePictureInPicture()) /**
                             * This event fires when the player enters picture in picture mode
                             *
                             * @event Player#enterpictureinpicture
                             * @type {EventTarget~Event}
                             */ return this.techGet_("requestPictureInPicture");
                }, /**
                 * Exit Picture-in-Picture mode.
                 *
                 * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
                 *
                 * @fires Player#leavepictureinpicture
                 *
                 * @return {Promise}
                 *         A promise.
                 */ _proto.exitPictureInPicture = function() {
                    if ("pictureInPictureEnabled" in global_document__WEBPACK_IMPORTED_MODULE_1___default()) /**
                         * This event fires when the player leaves picture in picture mode
                         *
                         * @event Player#leavepictureinpicture
                         * @type {EventTarget~Event}
                         */ return global_document__WEBPACK_IMPORTED_MODULE_1___default().exitPictureInPicture();
                }, /**
                 * Called when this Player has focus and a key gets pressed down, or when
                 * any Component of this player receives a key press that it doesn't handle.
                 * This allows player-wide hotkeys (either as defined below, or optionally
                 * by an external function).
                 *
                 * @param {EventTarget~Event} event
                 *        The `keydown` event that caused this function to be called.
                 *
                 * @listens keydown
                 */ _proto.handleKeyDown = function(event) {
                    var el, tagName, userActions = this.options_.userActions; // Bail out if hotkeys are not configured.
                    userActions && userActions.hotkeys && (tagName = (el = this.el_.ownerDocument.activeElement).tagName.toLowerCase(), el.isContentEditable || ("input" === tagName ? -1 === [
                        "button",
                        "checkbox",
                        "hidden",
                        "radio",
                        "reset",
                        "submit"
                    ].indexOf(el.type) : -1 !== [
                        "textarea"
                    ].indexOf(tagName)) || ("function" == typeof userActions.hotkeys ? userActions.hotkeys.call(this, event) : this.handleHotkeys(event))); // Function that determines whether or not to exclude an element from
                }, /**
                 * Called when this Player receives a hotkey keydown event.
                 * Supported player-wide hotkeys are:
                 *
                 *   f          - toggle fullscreen
                 *   m          - toggle mute
                 *   k or Space - toggle play/pause
                 *
                 * @param {EventTarget~Event} event
                 *        The `keydown` event that caused this function to be called.
                 */ _proto.handleHotkeys = function(event) {
                    var hotkeys = this.options_.userActions ? this.options_.userActions.hotkeys : {}, _hotkeys$fullscreenKe = hotkeys.fullscreenKey, fullscreenKey = void 0 === _hotkeys$fullscreenKe ? function(keydownEvent) {
                        return keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(keydownEvent, "f");
                    } : _hotkeys$fullscreenKe, _hotkeys$muteKey = hotkeys.muteKey, muteKey = void 0 === _hotkeys$muteKey ? function(keydownEvent) {
                        return keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(keydownEvent, "m");
                    } : _hotkeys$muteKey, _hotkeys$playPauseKey = hotkeys.playPauseKey, playPauseKey = void 0 === _hotkeys$playPauseKey ? function(keydownEvent) {
                        return keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(keydownEvent, "k") || keycode__WEBPACK_IMPORTED_MODULE_3___default().isEventKey(keydownEvent, "Space");
                    } : _hotkeys$playPauseKey; // set fullscreenKey, muteKey, playPauseKey from `hotkeys`, use defaults if not set
                    if (fullscreenKey.call(this, event)) {
                        event.preventDefault(), event.stopPropagation();
                        var FSToggle = Component$1.getComponent("FullscreenToggle");
                        !1 !== global_document__WEBPACK_IMPORTED_MODULE_1___default()[this.fsApi_.fullscreenEnabled] && FSToggle.prototype.handleClick.call(this, event);
                    } else muteKey.call(this, event) ? (event.preventDefault(), event.stopPropagation(), Component$1.getComponent("MuteToggle").prototype.handleClick.call(this, event)) : playPauseKey.call(this, event) && (event.preventDefault(), event.stopPropagation(), Component$1.getComponent("PlayToggle").prototype.handleClick.call(this, event));
                }, /**
                 * Check whether the player can play a given mimetype
                 *
                 * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype
                 *
                 * @param {string} type
                 *        The mimetype to check
                 *
                 * @return {string}
                 *         'probably', 'maybe', or '' (empty string)
                 */ _proto.canPlayType = function(type) {
                    for(var can, i = 0, j = this.options_.techOrder; i < j.length; i++){
                        var techName = j[i], tech = Tech.getTech(techName);
                        if (tech || (tech = Component$1.getComponent(techName)), !tech) {
                            log$1.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
                            continue;
                        } // Check if the browser supports this technology
                        if (tech.isSupported() && (can = tech.canPlayType(type))) return can;
                    }
                    return "";
                }, /**
                 * Select source based on tech-order or source-order
                 * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
                 * defaults to tech-order selection
                 *
                 * @param {Array} sources
                 *        The sources for a media asset
                 *
                 * @return {Object|boolean}
                 *         Object of source and tech order or false
                 */ _proto.selectSource = function(sources) {
                    var _this13 = this, techs = this.options_.techOrder.map(function(techName) {
                        return [
                            techName,
                            Tech.getTech(techName)
                        ];
                    }).filter(function(_ref) {
                        var techName = _ref[0], tech = _ref[1];
                        return(// Check if the current tech is defined before continuing
                        tech ? tech.isSupported() : (log$1.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.'), !1));
                    }), findFirstPassingTechSourcePair = function(outerArray, innerArray, tester) {
                        var found;
                        return outerArray.some(function(outerChoice) {
                            return innerArray.some(function(innerChoice) {
                                if (found = tester(outerChoice, innerChoice)) return !0;
                            });
                        }), found;
                    }, finder = function(_ref2, source) {
                        var techName = _ref2[0];
                        if (_ref2[1].canPlaySource(source, _this13.options_[techName.toLowerCase()])) return {
                            source: source,
                            tech: techName
                        };
                    };
                    return (this.options_.sourceOrder ? findFirstPassingTechSourcePair(sources, techs, function(a, b) {
                        return finder(b, a);
                    }) : findFirstPassingTechSourcePair(techs, sources, finder)) || !1;
                }, /**
                 * Executes source setting and getting logic
                 *
                 * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
                 *        A SourceObject, an array of SourceObjects, or a string referencing
                 *        a URL to a media source. It is _highly recommended_ that an object
                 *        or array of objects is used here, so that source selection
                 *        algorithms can take the `type` into account.
                 *
                 *        If not provided, this method acts as a getter.
                 * @param {boolean} isRetry
                 *        Indicates whether this is being called internally as a result of a retry
                 *
                 * @return {string|undefined}
                 *         If the `source` argument is missing, returns the current source
                 *         URL. Otherwise, returns nothing/undefined.
                 */ _proto.handleSrc_ = function(source, isRetry) {
                    var _this14 = this;
                    // getter usage
                    if (void 0 === source) return this.cache_.src || "";
                     // Reset retry behavior for new source
                    this.resetRetryOnError_ && this.resetRetryOnError_();
                    // an array of source objects
                    var sources = filterSource(source); // if a source was passed in then it is invalid because
                    // it was filtered to a zero length Array. So we have to
                    // show an error
                    if (!sources.length) {
                        this.setTimeout(function() {
                            this.error({
                                code: 4,
                                message: this.localize(this.options_.notSupportedMessage)
                            });
                        }, 0);
                        return;
                    } // initial sources
                    if (this.changingSrc_ = !0, isRetry || (this.cache_.sources = sources), this.updateSourceCaches_(sources[0]), /**
             * Asynchronously sets a source using middleware by recursing through any
             * matching middlewares and calling `setSource` on each, passing along the
             * previous returned value each time.
             *
             * @param  {Player} player
             *         A {@link Player} instance.
             *
             * @param  {Tech~SourceObject} src
             *         A source object.
             *
             * @param  {Function}
             *         The next middleware to run.
             */ function(player, src, next) {
                        player.setTimeout(function() {
                            return function setSourceHelper(src, middleware, next, player, acc, lastRun) {
                                void 0 === src && (src = {}), void 0 === middleware && (middleware = []), void 0 === acc && (acc = []), void 0 === lastRun && (lastRun = !1);
                                var _middleware = middleware, mwFactory = _middleware[0], mwrest = _middleware.slice(1); // if mwFactory is a string, then we're at a fork in the road
                                if ("string" == typeof mwFactory) setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun); // if we have an mwFactory, call it with the player to get the mw,
                                else if (mwFactory) {
                                    var mw = /**
             * {
             *  [playerId]: [[mwFactory, mwInstance], ...]
             * }
             *
             * @private
             */ function(player, mwFactory) {
                                        var mws = middlewareInstances[player.id()], mw = null;
                                        if (null == mws) return mw = mwFactory(player), middlewareInstances[player.id()] = [
                                            [
                                                mwFactory,
                                                mw
                                            ]
                                        ], mw;
                                        for(var i = 0; i < mws.length; i++){
                                            var _mws$i = mws[i], mwf = _mws$i[0], mwi = _mws$i[1];
                                            mwf === mwFactory && (mw = mwi);
                                        }
                                        return null === mw && (mw = mwFactory(player), mws.push([
                                            mwFactory,
                                            mw
                                        ])), mw;
                                    }(player, mwFactory); // if setSource isn't present, implicitly select this middleware
                                    if (!mw.setSource) return acc.push(mw), setSourceHelper(src, mwrest, next, player, acc, lastRun);
                                    mw.setSource(assign({}, src), function(err, _src) {
                                        // something happened, try the next middleware on the current level
                                        // make sure to use the old src
                                        if (err) return setSourceHelper(src, mwrest, next, player, acc, lastRun);
                                         // we've succeeded, now we need to go deeper
                                        acc.push(mw), // otherwise, we want to go down the new chain
                                        setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);
                                    });
                                } else mwrest.length ? setSourceHelper(src, mwrest, next, player, acc, lastRun) : lastRun ? next(src, acc) : setSourceHelper(src, middlewares["*"], next, player, acc, !0);
                            }(src, middlewares[src.type], next, player);
                        }, 1);
                    }(this, sources[0], function(middlewareSource, mws) {
                        if (_this14.middleware_ = mws, isRetry || (_this14.cache_.sources = sources), _this14.updateSourceCaches_(middlewareSource), _this14.src_(middlewareSource)) return sources.length > 1 ? _this14.handleSrc_(sources.slice(1)) : (_this14.changingSrc_ = !1, _this14.setTimeout(function() {
                            this.error({
                                code: 4,
                                message: this.localize(this.options_.notSupportedMessage)
                            });
                        }, 0), void // this needs a better comment about why this is needed
                        _this14.triggerReady());
                        !/**
             * When the tech is set, passes the tech to each middleware's `setTech` method.
             *
             * @param {Object[]} middleware
             *        An array of middleware instances.
             *
             * @param {Tech} tech
             *        A Video.js tech.
             */ function(middleware, tech) {
                            middleware.forEach(function(mw) {
                                return mw.setTech && mw.setTech(tech);
                            });
                        }(mws, _this14.tech_);
                    }), this.options_.retryOnError && sources.length > 1) {
                        var retry = function() {
                            // Remove the error modal
                            _this14.error(null), _this14.handleSrc_(sources.slice(1), !0);
                        }, stopListeningForErrors = function() {
                            _this14.off("error", retry);
                        };
                        this.one("error", retry), this.one("playing", stopListeningForErrors), this.resetRetryOnError_ = function() {
                            _this14.off("error", retry), _this14.off("playing", stopListeningForErrors);
                        };
                    }
                }, /**
                 * Get or set the video source.
                 *
                 * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
                 *        A SourceObject, an array of SourceObjects, or a string referencing
                 *        a URL to a media source. It is _highly recommended_ that an object
                 *        or array of objects is used here, so that source selection
                 *        algorithms can take the `type` into account.
                 *
                 *        If not provided, this method acts as a getter.
                 *
                 * @return {string|undefined}
                 *         If the `source` argument is missing, returns the current source
                 *         URL. Otherwise, returns nothing/undefined.
                 */ _proto.src = function(source) {
                    return this.handleSrc_(source, !1);
                }, /**
                 * Set the source object on the tech, returns a boolean that indicates whether
                 * there is a tech that can play the source or not
                 *
                 * @param {Tech~SourceObject} source
                 *        The source object to set on the Tech
                 *
                 * @return {boolean}
                 *         - True if there is no Tech to playback this source
                 *         - False otherwise
                 *
                 * @private
                 */ _proto.src_ = function(source) {
                    var str1, str2, _this15 = this, sourceTech = this.selectSource([
                        source
                    ]);
                    return !sourceTech || ((str1 = sourceTech.tech, str2 = this.techName_, toTitleCase$1(str1) !== toTitleCase$1(str2)) ? (this.changingSrc_ = !0, this.loadTech_(sourceTech.tech, sourceTech.source), this.tech_.ready(function() {
                        _this15.changingSrc_ = !1;
                    })) : // and set it synchronously if possible (#2326)
                    this.ready(function() {
                        this.tech_.constructor.prototype.hasOwnProperty("setSource") ? this.techCall_("setSource", source) : this.techCall_("src", source.src), this.changingSrc_ = !1;
                    }, !0), !1);
                }, /**
                 * Begin loading the src data.
                 */ _proto.load = function() {
                    this.techCall_("load");
                }, /**
                 * Reset the player. Loads the first tech in the techOrder,
                 * removes all the text tracks in the existing `tech`,
                 * and calls `reset` on the `tech`.
                 */ _proto.reset = function() {
                    var _this16 = this, PromiseClass = this.options_.Promise || global_window__WEBPACK_IMPORTED_MODULE_0___default().Promise;
                    this.paused() || !PromiseClass ? this.doReset_() : silencePromise(this.play().then(function() {
                        return _this16.doReset_();
                    }));
                }, _proto.doReset_ = function() {
                    this.tech_ && this.tech_.clearTracks("text"), this.resetCache_(), this.poster(""), this.loadTech_(this.options_.techOrder[0], null), this.techCall_("reset"), this.resetControlBarUI_(), isEvented(this) && this.trigger("playerreset");
                }, /**
                 * Reset Control Bar's UI by calling sub-methods that reset
                 * all of Control Bar's components
                 */ _proto.resetControlBarUI_ = function() {
                    this.resetProgressBar_(), this.resetPlaybackRate_(), this.resetVolumeBar_();
                }, /**
                 * Reset tech's progress so progress bar is reset in the UI
                 */ _proto.resetProgressBar_ = function() {
                    this.currentTime(0);
                    var _this$controlBar = this.controlBar, durationDisplay = _this$controlBar.durationDisplay, remainingTimeDisplay = _this$controlBar.remainingTimeDisplay;
                    durationDisplay && durationDisplay.updateContent(), remainingTimeDisplay && remainingTimeDisplay.updateContent();
                }, /**
                 * Reset Playback ratio
                 */ _proto.resetPlaybackRate_ = function() {
                    this.playbackRate(this.defaultPlaybackRate()), this.handleTechRateChange_();
                }, /**
                 * Reset Volume bar
                 */ _proto.resetVolumeBar_ = function() {
                    this.volume(1.0), this.trigger("volumechange");
                }, /**
                 * Returns all of the current source objects.
                 *
                 * @return {Tech~SourceObject[]}
                 *         The current source objects
                 */ _proto.currentSources = function() {
                    var source = this.currentSource(), sources = [];
                    return 0 !== Object.keys(source).length && sources.push(source), this.cache_.sources || sources;
                }, /**
                 * Returns the current source object.
                 *
                 * @return {Tech~SourceObject}
                 *         The current source object
                 */ _proto.currentSource = function() {
                    return this.cache_.source || {};
                }, /**
                 * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
                 * Can be used in conjunction with `currentType` to assist in rebuilding the current source object.
                 *
                 * @return {string}
                 *         The current source
                 */ _proto.currentSrc = function() {
                    return this.currentSource() && this.currentSource().src || "";
                }, /**
                 * Get the current source type e.g. video/mp4
                 * This can allow you rebuild the current source object so that you could load the same
                 * source and tech later
                 *
                 * @return {string}
                 *         The source MIME type
                 */ _proto.currentType = function() {
                    return this.currentSource() && this.currentSource().type || "";
                }, /**
                 * Get or set the preload attribute
                 *
                 * @param {boolean} [value]
                 *        - true means that we should preload
                 *        - false means that we should not preload
                 *
                 * @return {string}
                 *         The preload attribute value when getting
                 */ _proto.preload = function(value) {
                    if (void 0 !== value) {
                        this.techCall_("setPreload", value), this.options_.preload = value;
                        return;
                    }
                    return this.techGet_("preload");
                }, /**
                 * Get or set the autoplay option. When this is a boolean it will
                 * modify the attribute on the tech. When this is a string the attribute on
                 * the tech will be removed and `Player` will handle autoplay on loadstarts.
                 *
                 * @param {boolean|string} [value]
                 *        - true: autoplay using the browser behavior
                 *        - false: do not autoplay
                 *        - 'play': call play() on every loadstart
                 *        - 'muted': call muted() then play() on every loadstart
                 *        - 'any': call play() on every loadstart. if that fails call muted() then play().
                 *        - *: values other than those listed here will be set `autoplay` to true
                 *
                 * @return {boolean|string}
                 *         The current value of autoplay when getting
                 */ _proto.autoplay = function(value) {
                    var techAutoplay;
                    // getter usage
                    if (void 0 === value) return this.options_.autoplay || !1;
                    "string" == typeof value && /(any|play|muted)/.test(value) || !0 === value && this.options_.normalizeAutoplay ? (this.options_.autoplay = value, this.manualAutoplay_("string" == typeof value ? value : "play"), techAutoplay = !1) : value ? this.options_.autoplay = !0 : this.options_.autoplay = !1, techAutoplay = void 0 === techAutoplay ? this.options_.autoplay : techAutoplay, this.tech_ && this.techCall_("setAutoplay", techAutoplay);
                }, /**
                 * Set or unset the playsinline attribute.
                 * Playsinline tells the browser that non-fullscreen playback is preferred.
                 *
                 * @param {boolean} [value]
                 *        - true means that we should try to play inline by default
                 *        - false means that we should use the browser's default playback mode,
                 *          which in most cases is inline. iOS Safari is a notable exception
                 *          and plays fullscreen by default.
                 *
                 * @return {string|Player}
                 *         - the current value of playsinline
                 *         - the player when setting
                 *
                 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
                 */ _proto.playsinline = function(value) {
                    return void 0 !== value ? (this.techCall_("setPlaysinline", value), this.options_.playsinline = value, this) : this.techGet_("playsinline");
                }, /**
                 * Get or set the loop attribute on the video element.
                 *
                 * @param {boolean} [value]
                 *        - true means that we should loop the video
                 *        - false means that we should not loop the video
                 *
                 * @return {boolean}
                 *         The current value of loop when getting
                 */ _proto.loop = function(value) {
                    if (void 0 !== value) {
                        this.techCall_("setLoop", value), this.options_.loop = value;
                        return;
                    }
                    return this.techGet_("loop");
                }, /**
                 * Get or set the poster image source url
                 *
                 * @fires Player#posterchange
                 *
                 * @param {string} [src]
                 *        Poster image source URL
                 *
                 * @return {string}
                 *         The current value of poster when getting
                 */ _proto.poster = function(src) {
                    if (void 0 === src) return this.poster_;
                     // The correct way to remove a poster is to set as an empty string
                    src || (src = ""), src !== this.poster_ && (this.poster_ = src, this.techCall_("setPoster", src), this.isPosterFromTech_ = !1, /**
                     * This event fires when the poster image is changed on the player.
                     *
                     * @event Player#posterchange
                     * @type {EventTarget~Event}
                     */ this.trigger("posterchange")); // update the internal poster variable
                }, /**
                 * Some techs (e.g. YouTube) can provide a poster source in an
                 * asynchronous way. We want the poster component to use this
                 * poster source so that it covers up the tech's controls.
                 * (YouTube's play button). However we only want to use this
                 * source if the player user hasn't set a poster through
                 * the normal APIs.
                 *
                 * @fires Player#posterchange
                 * @listens Tech#posterchange
                 * @private
                 */ _proto.handleTechPosterChange_ = function() {
                    if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {
                        var newPoster = this.tech_.poster() || "";
                        newPoster !== this.poster_ && (this.poster_ = newPoster, this.isPosterFromTech_ = !0, this.trigger("posterchange"));
                    }
                }, /**
                 * Get or set whether or not the controls are showing.
                 *
                 * @fires Player#controlsenabled
                 *
                 * @param {boolean} [bool]
                 *        - true to turn controls on
                 *        - false to turn controls off
                 *
                 * @return {boolean}
                 *         The current value of controls when getting
                 */ _proto.controls = function(bool) {
                    if (void 0 === bool) return !!this.controls_;
                    bool = !!bool, this.controls_ !== bool && (this.controls_ = bool, this.usingNativeControls() && this.techCall_("setControls", bool), this.controls_ ? (this.removeClass("vjs-controls-disabled"), this.addClass("vjs-controls-enabled"), /**
                         * @event Player#controlsenabled
                         * @type {EventTarget~Event}
                         */ this.trigger("controlsenabled"), this.usingNativeControls() || this.addTechControlsListeners_()) : (this.removeClass("vjs-controls-enabled"), this.addClass("vjs-controls-disabled"), /**
                         * @event Player#controlsdisabled
                         * @type {EventTarget~Event}
                         */ this.trigger("controlsdisabled"), this.usingNativeControls() || this.removeTechControlsListeners_()));
                }, /**
                 * Toggle native controls on/off. Native controls are the controls built into
                 * devices (e.g. default iPhone controls) or other techs
                 * (e.g. Vimeo Controls)
                 * **This should only be set by the current tech, because only the tech knows
                 * if it can support native controls**
                 *
                 * @fires Player#usingnativecontrols
                 * @fires Player#usingcustomcontrols
                 *
                 * @param {boolean} [bool]
                 *        - true to turn native controls on
                 *        - false to turn native controls off
                 *
                 * @return {boolean}
                 *         The current value of native controls when getting
                 */ _proto.usingNativeControls = function(bool) {
                    if (void 0 === bool) return !!this.usingNativeControls_;
                    bool = !!bool, this.usingNativeControls_ !== bool && (this.usingNativeControls_ = bool, this.usingNativeControls_ ? (this.addClass("vjs-using-native-controls"), /**
                         * player is using the native device controls
                         *
                         * @event Player#usingnativecontrols
                         * @type {EventTarget~Event}
                         */ this.trigger("usingnativecontrols")) : (this.removeClass("vjs-using-native-controls"), /**
                         * player is using the custom HTML controls
                         *
                         * @event Player#usingcustomcontrols
                         * @type {EventTarget~Event}
                         */ this.trigger("usingcustomcontrols")));
                }, /**
                 * Set or get the current MediaError
                 *
                 * @fires Player#error
                 *
                 * @param  {MediaError|string|number} [err]
                 *         A MediaError or a string/number to be turned
                 *         into a MediaError
                 *
                 * @return {MediaError|null}
                 *         The current MediaError when getting (or null)
                 */ _proto.error = function(err) {
                    var _this17 = this;
                    if (void 0 === err) return this.error_ || null;
                     // allow hooks to modify error object
                    // user interaction
                    if (hooks("beforeerror").forEach(function(hookFunction) {
                        var newErr = hookFunction(_this17, err);
                        if (!(isObject(newErr) && !Array.isArray(newErr) || "string" == typeof newErr || "number" == typeof newErr || null === newErr)) {
                            _this17.log.error("please return a value that MediaError expects in beforeerror hooks");
                            return;
                        }
                        err = newErr;
                    }), this.options_.suppressNotSupportedError && err && 4 === err.code) {
                        var triggerSuppressedError = function() {
                            this.error(err);
                        };
                        this.options_.suppressNotSupportedError = !1, this.any([
                            "click",
                            "touchstart"
                        ], triggerSuppressedError), this.one("loadstart", function() {
                            this.off([
                                "click",
                                "touchstart"
                            ], triggerSuppressedError);
                        });
                        return;
                    } // restoring to default
                    if (null === err) {
                        this.error_ = err, this.removeClass("vjs-error"), this.errorDisplay && this.errorDisplay.close();
                        return;
                    }
                    this.error_ = new MediaError(err), this.addClass("vjs-error"), // IE11 logs "[object object]" and required you to expand message to see error object
                    log$1.error("(CODE:" + this.error_.code + " " + MediaError.errorTypes[this.error_.code] + ")", this.error_.message, this.error_), /**
                     * @event Player#error
                     * @type {EventTarget~Event}
                     */ this.trigger("error"), hooks("error").forEach(function(hookFunction) {
                        return hookFunction(_this17, _this17.error_);
                    });
                }, /**
                 * Report user activity
                 *
                 * @param {Object} event
                 *        Event object
                 */ _proto.reportUserActivity = function(event) {
                    this.userActivity_ = !0;
                }, /**
                 * Get/set if user is active
                 *
                 * @fires Player#useractive
                 * @fires Player#userinactive
                 *
                 * @param {boolean} [bool]
                 *        - true if the user is active
                 *        - false if the user is inactive
                 *
                 * @return {boolean}
                 *         The current value of userActive when getting
                 */ _proto.userActive = function(bool) {
                    if (void 0 === bool) return this.userActive_;
                    if ((bool = !!bool) !== this.userActive_) {
                        if (this.userActive_ = bool, this.userActive_) {
                            this.userActivity_ = !0, this.removeClass("vjs-user-inactive"), this.addClass("vjs-user-active"), /**
                         * @event Player#useractive
                         * @type {EventTarget~Event}
                         */ this.trigger("useractive");
                            return;
                        } // Chrome/Safari/IE have bugs where when you change the cursor it can
                        this.tech_ && this.tech_.one("mousemove", function(e) {
                            e.stopPropagation(), e.preventDefault();
                        }), this.userActivity_ = !1, this.removeClass("vjs-user-active"), this.addClass("vjs-user-inactive"), /**
                     * @event Player#userinactive
                     * @type {EventTarget~Event}
                     */ this.trigger("userinactive");
                    }
                }, /**
                 * Listen for user activity based on timeout value
                 *
                 * @private
                 */ _proto.listenForUserActivity_ = function() {
                    var mouseInProgress, lastMoveX, lastMoveY, inactivityTimeout, handleActivity = bind(this, this.reportUserActivity), handleMouseUpAndMouseLeave = function(event) {
                        handleActivity(), this.clearInterval(mouseInProgress);
                    };
                    this.on("mousedown", function() {
                        handleActivity(), // we consider them active even if they're not moving their finger or mouse.
                        // So we want to continue to update that they are active
                        this.clearInterval(mouseInProgress), // as the activityCheck interval (250) should ensure we never miss the
                        // next activityCheck
                        mouseInProgress = this.setInterval(handleActivity, 250);
                    }), this.on("mousemove", function(e) {
                        // #1068 - Prevent mousemove spamming
                        // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
                        (e.screenX !== lastMoveX || e.screenY !== lastMoveY) && (lastMoveX = e.screenX, lastMoveY = e.screenY, handleActivity());
                    }), this.on("mouseup", handleMouseUpAndMouseLeave), this.on("mouseleave", handleMouseUpAndMouseLeave);
                    var controlBar = this.getChild("controlBar"); // Fixes bug on Android & iOS where when tapping progressBar (when control bar is displayed)
                    !controlBar || IS_IOS || IS_ANDROID || (controlBar.on("mouseenter", function(event) {
                        0 !== this.player().options_.inactivityTimeout && (this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout), this.player().options_.inactivityTimeout = 0;
                    }), controlBar.on("mouseleave", function(event) {
                        this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;
                    })), // Shouldn't need to use inProgress interval because of key repeat
                    this.on("keydown", handleActivity), this.on("keyup", handleActivity), this.setInterval(function() {
                        // Check to see if mouse/touch activity has happened
                        if (this.userActivity_) {
                            this.userActivity_ = !1, this.userActive(!0), this.clearTimeout(inactivityTimeout);
                            var timeout = this.options_.inactivityTimeout;
                            timeout <= 0 || // user will be considered inactive
                            (inactivityTimeout = this.setTimeout(function() {
                                // Protect against the case where the inactivityTimeout can trigger just
                                // before the next user activity is picked up by the activity check loop
                                // causing a flicker
                                this.userActivity_ || this.userActive(!1);
                            }, timeout)); // In <timeout> milliseconds, if no more activity has occurred the
                        } // Reset the activity tracker
                    }, 250);
                }, /**
                 * Gets or sets the current playback rate. A playback rate of
                 * 1.0 represents normal speed and 0.5 would indicate half-speed
                 * playback, for instance.
                 *
                 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
                 *
                 * @param {number} [rate]
                 *       New playback rate to set.
                 *
                 * @return {number}
                 *         The current playback rate when getting or 1.0
                 */ _proto.playbackRate = function(rate) {
                    if (void 0 !== rate) {
                        // NOTE: this.cache_.lastPlaybackRate is set from the tech handler
                        // that is registered above
                        this.techCall_("setPlaybackRate", rate);
                        return;
                    }
                    return this.tech_ && this.tech_.featuresPlaybackRate ? this.cache_.lastPlaybackRate || this.techGet_("playbackRate") : 1.0;
                }, /**
                 * Gets or sets the current default playback rate. A default playback rate of
                 * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.
                 * defaultPlaybackRate will only represent what the initial playbackRate of a video was, not
                 * not the current playbackRate.
                 *
                 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate
                 *
                 * @param {number} [rate]
                 *       New default playback rate to set.
                 *
                 * @return {number|Player}
                 *         - The default playback rate when getting or 1.0
                 *         - the player when setting
                 */ _proto.defaultPlaybackRate = function(rate) {
                    return void 0 !== rate ? this.techCall_("setDefaultPlaybackRate", rate) : this.tech_ && this.tech_.featuresPlaybackRate ? this.techGet_("defaultPlaybackRate") : 1.0;
                }, /**
                 * Gets or sets the audio flag
                 *
                 * @param {boolean} bool
                 *        - true signals that this is an audio player
                 *        - false signals that this is not an audio player
                 *
                 * @return {boolean}
                 *         The current value of isAudio when getting
                 */ _proto.isAudio = function(bool) {
                    if (void 0 !== bool) {
                        this.isAudio_ = !!bool;
                        return;
                    }
                    return !!this.isAudio_;
                }, /**
                 * A helper method for adding a {@link TextTrack} to our
                 * {@link TextTrackList}.
                 *
                 * In addition to the W3C settings we allow adding additional info through options.
                 *
                 * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
                 *
                 * @param {string} [kind]
                 *        the kind of TextTrack you are adding
                 *
                 * @param {string} [label]
                 *        the label to give the TextTrack label
                 *
                 * @param {string} [language]
                 *        the language to set on the TextTrack
                 *
                 * @return {TextTrack|undefined}
                 *         the TextTrack that was added or undefined
                 *         if there is no tech
                 */ _proto.addTextTrack = function(kind, label, language) {
                    if (this.tech_) return this.tech_.addTextTrack(kind, label, language);
                }, /**
                 * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}.
                 * When manualCleanup is set to false, the track will be automatically removed
                 * on source changes.
                 *
                 * @param {Object} options
                 *        Options to pass to {@link HTMLTrackElement} during creation. See
                 *        {@link HTMLTrackElement} for object properties that you should use.
                 *
                 * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be
                 *                                       removed on a source change
                 *
                 * @return {HtmlTrackElement}
                 *         the HTMLTrackElement that was created and added
                 *         to the HtmlTrackElementList and the remote
                 *         TextTrackList
                 *
                 * @deprecated The default value of the "manualCleanup" parameter will default
                 *             to "false" in upcoming versions of Video.js
                 */ _proto.addRemoteTextTrack = function(options, manualCleanup) {
                    if (this.tech_) return this.tech_.addRemoteTextTrack(options, manualCleanup);
                }, /**
                 * Remove a remote {@link TextTrack} from the respective
                 * {@link TextTrackList} and {@link HtmlTrackElementList}.
                 *
                 * @param {Object} track
                 *        Remote {@link TextTrack} to remove
                 *
                 * @return {undefined}
                 *         does not return anything
                 */ _proto.removeRemoteTextTrack = function(obj) {
                    void 0 === obj && (obj = {});
                    var track = obj.track;
                    // default the whole argument to an empty object if nothing was passed in
                    if (track || (track = obj), this.tech_) return this.tech_.removeRemoteTextTrack(track);
                }, /**
                 * Gets available media playback quality metrics as specified by the W3C's Media
                 * Playback Quality API.
                 *
                 * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
                 *
                 * @return {Object|undefined}
                 *         An object with supported media playback quality metrics or undefined if there
                 *         is no tech or the tech does not support it.
                 */ _proto.getVideoPlaybackQuality = function() {
                    return this.techGet_("getVideoPlaybackQuality");
                }, /**
                 * Get video width
                 *
                 * @return {number}
                 *         current video width
                 */ _proto.videoWidth = function() {
                    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
                }, /**
                 * Get video height
                 *
                 * @return {number}
                 *         current video height
                 */ _proto.videoHeight = function() {
                    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
                }, /**
                 * The player's language code.
                 *
                 * Changing the langauge will trigger
                 * [languagechange]{@link Player#event:languagechange}
                 * which Components can use to update control text.
                 * ClickableComponent will update its control text by default on
                 * [languagechange]{@link Player#event:languagechange}.
                 *
                 * @fires Player#languagechange
                 *
                 * @param {string} [code]
                 *        the language code to set the player to
                 *
                 * @return {string}
                 *         The current language code when getting
                 */ _proto.language = function(code) {
                    if (void 0 === code) return this.language_;
                    this.language_ !== String(code).toLowerCase() && (this.language_ = String(code).toLowerCase(), isEvented(this) && /**
                             * fires when the player language change
                             *
                             * @event Player#languagechange
                             * @type {EventTarget~Event}
                             */ this.trigger("languagechange"));
                }, /**
                 * Get the player's language dictionary
                 * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
                 * Languages specified directly in the player options have precedence
                 *
                 * @return {Array}
                 *         An array of of supported languages
                 */ _proto.languages = function() {
                    return mergeOptions$3(Player.prototype.options_.languages, this.languages_);
                }, /**
                 * returns a JavaScript object reperesenting the current track
                 * information. **DOES not return it as JSON**
                 *
                 * @return {Object}
                 *         Object representing the current of track info
                 */ _proto.toJSON = function() {
                    var options = mergeOptions$3(this.options_), tracks = options.tracks;
                    options.tracks = [];
                    for(var i = 0; i < tracks.length; i++){
                        var track = tracks[i]; // deep merge tracks and null out player so no circular references
                        (track = mergeOptions$3(track)).player = void 0, options.tracks[i] = track;
                    }
                    return options;
                }, /**
                 * Creates a simple modal dialog (an instance of the {@link ModalDialog}
                 * component) that immediately overlays the player with arbitrary
                 * content and removes itself when closed.
                 *
                 * @param {string|Function|Element|Array|null} content
                 *        Same as {@link ModalDialog#content}'s param of the same name.
                 *        The most straight-forward usage is to provide a string or DOM
                 *        element.
                 *
                 * @param {Object} [options]
                 *        Extra options which will be passed on to the {@link ModalDialog}.
                 *
                 * @return {ModalDialog}
                 *         the {@link ModalDialog} that was created
                 */ _proto.createModal = function(content, options) {
                    var _this18 = this;
                    (options = options || {}).content = content || "";
                    var modal = new ModalDialog(this, options);
                    return this.addChild(modal), modal.on("dispose", function() {
                        _this18.removeChild(modal);
                    }), modal.open(), modal;
                }, /**
                 * Change breakpoint classes when the player resizes.
                 *
                 * @private
                 */ _proto.updateCurrentBreakpoint_ = function() {
                    if (this.responsive()) for(var currentBreakpoint = this.currentBreakpoint(), currentWidth = this.currentWidth(), i = 0; i < BREAKPOINT_ORDER.length; i++){
                        var candidateBreakpoint = BREAKPOINT_ORDER[i];
                        if (currentWidth <= this.breakpoints_[candidateBreakpoint]) {
                            // The current breakpoint did not change, nothing to do.
                            if (currentBreakpoint === candidateBreakpoint) return;
                             // Only remove a class if there is a current breakpoint.
                            currentBreakpoint && this.removeClass(BREAKPOINT_CLASSES[currentBreakpoint]), this.addClass(BREAKPOINT_CLASSES[candidateBreakpoint]), this.breakpoint_ = candidateBreakpoint;
                            break;
                        }
                    }
                }, /**
                 * Removes the current breakpoint.
                 *
                 * @private
                 */ _proto.removeCurrentBreakpoint_ = function() {
                    var className = this.currentBreakpointClass();
                    this.breakpoint_ = "", className && this.removeClass(className);
                }, /**
                 * Get or set breakpoints on the player.
                 *
                 * Calling this method with an object or `true` will remove any previous
                 * custom breakpoints and start from the defaults again.
                 *
                 * @param  {Object|boolean} [breakpoints]
                 *         If an object is given, it can be used to provide custom
                 *         breakpoints. If `true` is given, will set default breakpoints.
                 *         If this argument is not given, will simply return the current
                 *         breakpoints.
                 *
                 * @param  {number} [breakpoints.tiny]
                 *         The maximum width for the "vjs-layout-tiny" class.
                 *
                 * @param  {number} [breakpoints.xsmall]
                 *         The maximum width for the "vjs-layout-x-small" class.
                 *
                 * @param  {number} [breakpoints.small]
                 *         The maximum width for the "vjs-layout-small" class.
                 *
                 * @param  {number} [breakpoints.medium]
                 *         The maximum width for the "vjs-layout-medium" class.
                 *
                 * @param  {number} [breakpoints.large]
                 *         The maximum width for the "vjs-layout-large" class.
                 *
                 * @param  {number} [breakpoints.xlarge]
                 *         The maximum width for the "vjs-layout-x-large" class.
                 *
                 * @param  {number} [breakpoints.huge]
                 *         The maximum width for the "vjs-layout-huge" class.
                 *
                 * @return {Object}
                 *         An object mapping breakpoint names to maximum width values.
                 */ _proto.breakpoints = function(_breakpoints) {
                    return void 0 === _breakpoints || (this.breakpoint_ = "", this.breakpoints_ = assign({}, DEFAULT_BREAKPOINTS, _breakpoints), // selected breakpoint.
                    this.updateCurrentBreakpoint_()), assign(this.breakpoints_);
                }, /**
                 * Get or set a flag indicating whether or not this player should adjust
                 * its UI based on its dimensions.
                 *
                 * @param  {boolean} value
                 *         Should be `true` if the player should adjust its UI based on its
                 *         dimensions; otherwise, should be `false`.
                 *
                 * @return {boolean}
                 *         Will be `true` if this player should adjust its UI based on its
                 *         dimensions; otherwise, will be `false`.
                 */ _proto.responsive = function(value) {
                    return(// Used as a getter.
                    void 0 === value ? this.responsive_ : (value = !!value) !== this.responsive_ ? (this.responsive_ = value, value ? (this.on("playerresize", this.boundUpdateCurrentBreakpoint_), this.updateCurrentBreakpoint_()) : (this.off("playerresize", this.boundUpdateCurrentBreakpoint_), this.removeCurrentBreakpoint_()), value) : void 0);
                }, /**
                 * Get current breakpoint name, if any.
                 *
                 * @return {string}
                 *         If there is currently a breakpoint set, returns a the key from the
                 *         breakpoints object matching it. Otherwise, returns an empty string.
                 */ _proto.currentBreakpoint = function() {
                    return this.breakpoint_;
                }, /**
                 * Get the current breakpoint class name.
                 *
                 * @return {string}
                 *         The matching class name (e.g. `"vjs-layout-tiny"` or
                 *         `"vjs-layout-large"`) for the current breakpoint. Empty string if
                 *         there is no current breakpoint.
                 */ _proto.currentBreakpointClass = function() {
                    return BREAKPOINT_CLASSES[this.breakpoint_] || "";
                }, /**
                 * An object that describes a single piece of media.
                 *
                 * Properties that are not part of this type description will be retained; so,
                 * this can be viewed as a generic metadata storage mechanism as well.
                 *
                 * @see      {@link https://wicg.github.io/mediasession/#the-mediametadata-interface}
                 * @typedef  {Object} Player~MediaObject
                 *
                 * @property {string} [album]
                 *           Unused, except if this object is passed to the `MediaSession`
                 *           API.
                 *
                 * @property {string} [artist]
                 *           Unused, except if this object is passed to the `MediaSession`
                 *           API.
                 *
                 * @property {Object[]} [artwork]
                 *           Unused, except if this object is passed to the `MediaSession`
                 *           API. If not specified, will be populated via the `poster`, if
                 *           available.
                 *
                 * @property {string} [poster]
                 *           URL to an image that will display before playback.
                 *
                 * @property {Tech~SourceObject|Tech~SourceObject[]|string} [src]
                 *           A single source object, an array of source objects, or a string
                 *           referencing a URL to a media source. It is _highly recommended_
                 *           that an object or array of objects is used here, so that source
                 *           selection algorithms can take the `type` into account.
                 *
                 * @property {string} [title]
                 *           Unused, except if this object is passed to the `MediaSession`
                 *           API.
                 *
                 * @property {Object[]} [textTracks]
                 *           An array of objects to be used to create text tracks, following
                 *           the {@link https://www.w3.org/TR/html50/embedded-content-0.html#the-track-element|native track element format}.
                 *           For ease of removal, these will be created as "remote" text
                 *           tracks and set to automatically clean up on source changes.
                 *
                 *           These objects may have properties like `src`, `kind`, `label`,
                 *           and `language`, see {@link Tech#createRemoteTextTrack}.
                 */ /**
                 * Populate the player using a {@link Player~MediaObject|MediaObject}.
                 *
                 * @param  {Player~MediaObject} media
                 *         A media object.
                 *
                 * @param  {Function} ready
                 *         A callback to be called when the player is ready.
                 */ _proto.loadMedia = function(media, ready) {
                    var _this19 = this;
                    if (media && "object" == typeof media) {
                        this.reset(), this.cache_.media = mergeOptions$3(media);
                        var _this$cache_$media = this.cache_.media, artwork = _this$cache_$media.artwork, poster = _this$cache_$media.poster, src = _this$cache_$media.src, textTracks = _this$cache_$media.textTracks; // If `artwork` is not given, create it using `poster`.
                        !artwork && poster && (this.cache_.media.artwork = [
                            {
                                src: poster,
                                type: getMimetype(poster)
                            }
                        ]), src && this.src(src), poster && this.poster(poster), Array.isArray(textTracks) && textTracks.forEach(function(tt) {
                            return _this19.addRemoteTextTrack(tt, !1);
                        }), this.ready(ready);
                    }
                }, /**
                 * Get a clone of the current {@link Player~MediaObject} for this player.
                 *
                 * If the `loadMedia` method has not been used, will attempt to return a
                 * {@link Player~MediaObject} based on the current state of the player.
                 *
                 * @return {Player~MediaObject}
                 */ _proto.getMedia = function() {
                    if (!this.cache_.media) {
                        var poster = this.poster(), media = {
                            src: this.currentSources(),
                            textTracks: Array.prototype.map.call(this.remoteTextTracks(), function(tt) {
                                return {
                                    kind: tt.kind,
                                    label: tt.label,
                                    language: tt.language,
                                    src: tt.src
                                };
                            })
                        };
                        return poster && (media.poster = poster, media.artwork = [
                            {
                                src: media.poster,
                                type: getMimetype(media.poster)
                            }
                        ]), media;
                    }
                    return mergeOptions$3(this.cache_.media);
                }, /**
                 * Gets tag settings
                 *
                 * @param {Element} tag
                 *        The player tag
                 *
                 * @return {Object}
                 *         An object containing all of the settings
                 *         for a player tag
                 */ Player.getTagSettings = function(tag) {
                    var baseOptions = {
                        sources: [],
                        tracks: []
                    }, tagOptions = getAttributes(tag), dataSetup = tagOptions["data-setup"];
                    if (hasClass(tag, "vjs-fill") && (tagOptions.fill = !0), hasClass(tag, "vjs-fluid") && (tagOptions.fluid = !0), null !== dataSetup) {
                        // Parse options JSON
                        // If empty string, make it a parsable json object.
                        var _safeParseTuple = safe_json_parse_tuple__WEBPACK_IMPORTED_MODULE_2___default()(dataSetup || "{}"), err = _safeParseTuple[0], data = _safeParseTuple[1];
                        err && log$1.error(err), assign(tagOptions, data);
                    }
                    if (assign(baseOptions, tagOptions), tag.hasChildNodes()) for(var children = tag.childNodes, i = 0, j = children.length; i < j; i++){
                        var child = children[i], childName = child.nodeName.toLowerCase(); // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
                        "source" === childName ? baseOptions.sources.push(getAttributes(child)) : "track" === childName && baseOptions.tracks.push(getAttributes(child));
                    }
                    return baseOptions;
                }, /**
                 * Determine whether or not flexbox is supported
                 *
                 * @return {boolean}
                 *         - true if flexbox is supported
                 *         - false if flexbox is not supported
                 */ _proto.flexNotSupported_ = function() {
                    var elem = global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("i"); // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more
                    // common flex features that we can rely on when checking for flex support.
                    return !("flexBasis" in elem.style || "webkitFlexBasis" in elem.style || "mozFlexBasis" in elem.style || "msFlexBasis" in elem.style || // IE10-specific (2012 flex spec), available for completeness
                    "msFlexOrder" in elem.style);
                }, /**
                 * Set debug mode to enable/disable logs at info level.
                 *
                 * @param {boolean} enabled
                 * @fires Player#debugon
                 * @fires Player#debugoff
                 */ _proto.debug = function(enabled) {
                    if (void 0 === enabled) return this.debugEnabled_;
                    enabled ? (this.trigger("debugon"), this.previousLogLevel_ = this.log.level, this.log.level("debug"), this.debugEnabled_ = !0) : (this.trigger("debugoff"), this.log.level(this.previousLogLevel_), this.previousLogLevel_ = void 0, this.debugEnabled_ = !1);
                }, /**
                 * Set or get current playback rates.
                 * Takes an array and updates the playback rates menu with the new items.
                 * Pass in an empty array to hide the menu.
                 * Values other than arrays are ignored.
                 *
                 * @fires Player#playbackrateschange
                 * @param {number[]} newRates
                 *                   The new rates that the playback rates menu should update to.
                 *                   An empty array will hide the menu
                 * @return {number[]} When used as a getter will return the current playback rates
                 */ _proto.playbackRates = function(newRates) {
                    if (void 0 === newRates) return this.cache_.playbackRates;
                     // ignore any value that isn't an array
                    Array.isArray(newRates) && newRates.every(function(rate) {
                        return "number" == typeof rate;
                    }) && (this.cache_.playbackRates = newRates, /**
                     * fires when the playback rates in a player are changed
                     *
                     * @event Player#playbackrateschange
                     * @type {EventTarget~Event}
                     */ this.trigger("playbackrateschange")); // ignore any arrays that don't only contain numbers
                }, Player;
            }(Component$1);
            /**
             * Get the {@link VideoTrackList}
             * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
             *
             * @return {VideoTrackList}
             *         the current video track list
             *
             * @method Player.prototype.videoTracks
             */ /**
             * Get the {@link AudioTrackList}
             * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
             *
             * @return {AudioTrackList}
             *         the current audio track list
             *
             * @method Player.prototype.audioTracks
             */ /**
             * Get the {@link TextTrackList}
             *
             * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
             *
             * @return {TextTrackList}
             *         the current text track list
             *
             * @method Player.prototype.textTracks
             */ /**
             * Get the remote {@link TextTrackList}
             *
             * @return {TextTrackList}
             *         The current remote text track list
             *
             * @method Player.prototype.remoteTextTracks
             */ /**
             * Get the remote {@link HtmlTrackElementList} tracks.
             *
             * @return {HtmlTrackElementList}
             *         The current remote text track element list
             *
             * @method Player.prototype.remoteTextTrackEls
             */ ALL.names.forEach(function(name) {
                var props = ALL[name];
                Player.prototype[props.getterName] = function() {
                    return this.tech_ ? this.tech_[props.getterName]() : (// these will be passed to the tech during loading
                    this[props.privateName] = this[props.privateName] || new props.ListClass(), this[props.privateName]) // if we have not yet loadTech_, we create {video,audio,text}Tracks_
                    ;
                };
            }), /**
             * Get or set the `Player`'s crossorigin option. For the HTML5 player, this
             * sets the `crossOrigin` property on the `<video>` tag to control the CORS
             * behavior.
             *
             * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}
             *
             * @param {string} [value]
             *        The value to set the `Player`'s crossorigin to. If an argument is
             *        given, must be one of `anonymous` or `use-credentials`.
             *
             * @return {string|undefined}
             *         - The current crossorigin value of the `Player` when getting.
             *         - undefined when setting
             */ Player.prototype.crossorigin = Player.prototype.crossOrigin, /**
             * Global enumeration of players.
             *
             * The keys are the player IDs and the values are either the {@link Player}
             * instance or `null` for disposed players.
             *
             * @type {Object}
             */ Player.players = {};
            var navigator = global_window__WEBPACK_IMPORTED_MODULE_0___default().navigator;
            /*
             * Player instance options, surfaced using options
             * options = Player.prototype.options_
             * Make changes in options, not here.
             *
             * @type {Object}
             * @private
             */ Player.prototype.options_ = {
                // Default order of fallback technology
                techOrder: Tech.defaultTechOrder_,
                html5: {},
                // default inactivity timeout
                inactivityTimeout: 2000,
                // default playback rates
                playbackRates: [],
                // Add playback rate selection by adding rates
                // 'playbackRates': [0.5, 1, 1.5, 2],
                liveui: !1,
                // Included control sets
                children: [
                    "mediaLoader",
                    "posterImage",
                    "textTrackDisplay",
                    "loadingSpinner",
                    "bigPlayButton",
                    "liveTracker",
                    "controlBar",
                    "errorDisplay",
                    "textTrackSettings",
                    "resizeManager"
                ],
                language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || "en",
                // locales and their language translations
                languages: {},
                // Default message to show when a video cannot be played.
                notSupportedMessage: "No compatible source was found for this media.",
                normalizeAutoplay: !1,
                fullscreen: {
                    options: {
                        navigationUI: "hide"
                    }
                },
                breakpoints: {},
                responsive: !1
            }, [
                /**
                 * Returns whether or not the player is in the "ended" state.
                 *
                 * @return {Boolean} True if the player is in the ended state, false if not.
                 * @method Player#ended
                 */ "ended",
                /**
                 * Returns whether or not the player is in the "seeking" state.
                 *
                 * @return {Boolean} True if the player is in the seeking state, false if not.
                 * @method Player#seeking
                 */ "seeking",
                /**
                 * Returns the TimeRanges of the media that are currently available
                 * for seeking to.
                 *
                 * @return {TimeRanges} the seekable intervals of the media timeline
                 * @method Player#seekable
                 */ "seekable",
                /**
                 * Returns the current state of network activity for the element, from
                 * the codes in the list below.
                 * - NETWORK_EMPTY (numeric value 0)
                 *   The element has not yet been initialised. All attributes are in
                 *   their initial states.
                 * - NETWORK_IDLE (numeric value 1)
                 *   The element's resource selection algorithm is active and has
                 *   selected a resource, but it is not actually using the network at
                 *   this time.
                 * - NETWORK_LOADING (numeric value 2)
                 *   The user agent is actively trying to download data.
                 * - NETWORK_NO_SOURCE (numeric value 3)
                 *   The element's resource selection algorithm is active, but it has
                 *   not yet found a resource to use.
                 *
                 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
                 * @return {number} the current network activity state
                 * @method Player#networkState
                 */ "networkState",
                /**
                 * Returns a value that expresses the current state of the element
                 * with respect to rendering the current playback position, from the
                 * codes in the list below.
                 * - HAVE_NOTHING (numeric value 0)
                 *   No information regarding the media resource is available.
                 * - HAVE_METADATA (numeric value 1)
                 *   Enough of the resource has been obtained that the duration of the
                 *   resource is available.
                 * - HAVE_CURRENT_DATA (numeric value 2)
                 *   Data for the immediate current playback position is available.
                 * - HAVE_FUTURE_DATA (numeric value 3)
                 *   Data for the immediate current playback position is available, as
                 *   well as enough data for the user agent to advance the current
                 *   playback position in the direction of playback.
                 * - HAVE_ENOUGH_DATA (numeric value 4)
                 *   The user agent estimates that enough data is available for
                 *   playback to proceed uninterrupted.
                 *
                 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
                 * @return {number} the current playback rendering state
                 * @method Player#readyState
                 */ "readyState"
            ].forEach(function(fn) {
                Player.prototype[fn] = function() {
                    return this.techGet_(fn);
                };
            }), TECH_EVENTS_RETRIGGER.forEach(function(event) {
                Player.prototype["handleTech" + toTitleCase$1(event) + "_"] = function() {
                    return this.trigger(event);
                };
            }), /**
             * Fired when the player has initial duration and dimension information
             *
             * @event Player#loadedmetadata
             * @type {EventTarget~Event}
             */ /**
             * Fired when the player has downloaded data at the current playback position
             *
             * @event Player#loadeddata
             * @type {EventTarget~Event}
             */ /**
             * Fired when the current playback position has changed *
             * During playback this is fired every 15-250 milliseconds, depending on the
             * playback technology in use.
             *
             * @event Player#timeupdate
             * @type {EventTarget~Event}
             */ /**
             * Fired when the volume changes
             *
             * @event Player#volumechange
             * @type {EventTarget~Event}
             */ /**
             * Reports whether or not a player has a plugin available.
             *
             * This does not report whether or not the plugin has ever been initialized
             * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.
             *
             * @method Player#hasPlugin
             * @param  {string}  name
             *         The name of a plugin.
             *
             * @return {boolean}
             *         Whether or not this player has the requested plugin available.
             */ /**
             * Reports whether or not a player is using a plugin by name.
             *
             * For basic plugins, this only reports whether the plugin has _ever_ been
             * initialized on this player.
             *
             * @method Player#usingPlugin
             * @param  {string} name
             *         The name of a plugin.
             *
             * @return {boolean}
             *         Whether or not this player is using the requested plugin.
             */ Component$1.registerComponent("Player", Player);
            /**
             * The base plugin name.
             *
             * @private
             * @constant
             * @type {string}
             */ var BASE_PLUGIN_NAME = "plugin", PLUGIN_CACHE_KEY = "activePlugins_", pluginStorage = {}, pluginExists = function(name) {
                return pluginStorage.hasOwnProperty(name);
            }, getPlugin = function(name) {
                return pluginExists(name) ? pluginStorage[name] : void 0;
            }, markPluginAsActive = function(player, name) {
                player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {}, player[PLUGIN_CACHE_KEY][name] = !0;
            }, triggerSetupEvent = function(player, hash, before) {
                var eventName = (before ? "before" : "") + "pluginsetup";
                player.trigger(eventName, hash), player.trigger(eventName + ":" + hash.name, hash);
            }, createBasicPlugin = function(name, plugin) {
                var basicPluginWrapper = function() {
                    // We trigger the "beforepluginsetup" and "pluginsetup" events on the player
                    // regardless, but we want the hash to be consistent with the hash provided
                    // for advanced plugins.
                    //
                    // The only potentially counter-intuitive thing here is the `instance` in
                    // the "pluginsetup" event is the value returned by the `plugin` function.
                    triggerSetupEvent(this, {
                        name: name,
                        plugin: plugin,
                        instance: null
                    }, !0);
                    var instance = plugin.apply(this, arguments);
                    return markPluginAsActive(this, name), triggerSetupEvent(this, {
                        name: name,
                        plugin: plugin,
                        instance: instance
                    }), instance;
                };
                return Object.keys(plugin).forEach(function(prop) {
                    basicPluginWrapper[prop] = plugin[prop];
                }), basicPluginWrapper;
            }, createPluginFactory = function(name, PluginSubClass) {
                return(// Add a `name` property to the plugin prototype so that each plugin can
                // refer to itself by name.
                PluginSubClass.prototype.name = name, function() {
                    triggerSetupEvent(this, {
                        name: name,
                        plugin: PluginSubClass,
                        instance: null
                    }, !0);
                    for(var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    var instance = (0, _babel_runtime_helpers_construct__WEBPACK_IMPORTED_MODULE_18__ /* ["default"] */ .Z)(PluginSubClass, [
                        this
                    ].concat(args)); // The plugin is replaced by a function that returns the current instance.
                    return this[name] = function() {
                        return instance;
                    }, triggerSetupEvent(this, instance.getEventHash()), instance;
                });
            }, Plugin = /*#__PURE__*/ function() {
                /**
                 * Creates an instance of this class.
                 *
                 * Sub-classes should call `super` to ensure plugins are properly initialized.
                 *
                 * @param {Player} player
                 *        A Video.js player instance.
                 */ function Plugin(player) {
                    if (this.constructor === Plugin) throw Error("Plugin must be sub-classed; not directly instantiated.");
                    this.player = player, this.log || (this.log = this.player.log.createLogger(this.name)), // use the prototype version instead.
                    evented(this), delete this.trigger, stateful(this, this.constructor.defaultState), markPluginAsActive(player, this.name), // it later easily.
                    this.dispose = this.dispose.bind(this), player.on("dispose", this.dispose);
                }
                /**
                 * Get the version of the plugin that was set on <pluginName>.VERSION
                 */ var _proto = Plugin.prototype;
                return _proto.version = function() {
                    return this.constructor.VERSION;
                }, /**
                 * Each event triggered by plugins includes a hash of additional data with
                 * conventional properties.
                 *
                 * This returns that object or mutates an existing hash.
                 *
                 * @param   {Object} [hash={}]
                 *          An object to be used as event an event hash.
                 *
                 * @return {Plugin~PluginEventHash}
                 *          An event hash object with provided properties mixed-in.
                 */ _proto.getEventHash = function(hash) {
                    return void 0 === hash && (hash = {}), hash.name = this.name, hash.plugin = this.constructor, hash.instance = this, hash;
                }, /**
                 * Triggers an event on the plugin object and overrides
                 * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.
                 *
                 * @param   {string|Object} event
                 *          An event type or an object with a type property.
                 *
                 * @param   {Object} [hash={}]
                 *          Additional data hash to merge with a
                 *          {@link Plugin~PluginEventHash|PluginEventHash}.
                 *
                 * @return {boolean}
                 *          Whether or not default was prevented.
                 */ _proto.trigger = function(event, hash) {
                    return void 0 === hash && (hash = {}), trigger(this.eventBusEl_, event, this.getEventHash(hash));
                }, /**
                 * Handles "statechanged" events on the plugin. No-op by default, override by
                 * subclassing.
                 *
                 * @abstract
                 * @param    {Event} e
                 *           An event object provided by a "statechanged" event.
                 *
                 * @param    {Object} e.changes
                 *           An object describing changes that occurred with the "statechanged"
                 *           event.
                 */ _proto.handleStateChanged = function(e) {}, /**
                 * Disposes a plugin.
                 *
                 * Subclasses can override this if they want, but for the sake of safety,
                 * it's probably best to subscribe the "dispose" event.
                 *
                 * @fires Plugin#dispose
                 */ _proto.dispose = function() {
                    var name = this.name, player = this.player;
                    /**
                     * Signals that a advanced plugin is about to be disposed.
                     *
                     * @event Plugin#dispose
                     * @type  {EventTarget~Event}
                     */ this.trigger("dispose"), this.off(), player.off("dispose", this.dispose), // references between the player and the plugin instance and nulling out
                    // the plugin's state and replacing methods with a function that throws.
                    player[PLUGIN_CACHE_KEY][name] = !1, this.player = this.state = null, // function, so that the plugin is ready to be set up again.
                    player[name] = createPluginFactory(name, pluginStorage[name]);
                }, /**
                 * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).
                 *
                 * @param   {string|Function} plugin
                 *          If a string, matches the name of a plugin. If a function, will be
                 *          tested directly.
                 *
                 * @return {boolean}
                 *          Whether or not a plugin is a basic plugin.
                 */ Plugin.isBasic = function(plugin) {
                    var p = "string" == typeof plugin ? getPlugin(plugin) : plugin;
                    return "function" == typeof p && !Plugin.prototype.isPrototypeOf(p.prototype);
                }, /**
                 * Register a Video.js plugin.
                 *
                 * @param   {string} name
                 *          The name of the plugin to be registered. Must be a string and
                 *          must not match an existing plugin or a method on the `Player`
                 *          prototype.
                 *
                 * @param   {Function} plugin
                 *          A sub-class of `Plugin` or a function for basic plugins.
                 *
                 * @return {Function}
                 *          For advanced plugins, a factory function for that plugin. For
                 *          basic plugins, a wrapper function that initializes the plugin.
                 */ Plugin.registerPlugin = function(name, plugin) {
                    if ("string" != typeof name) throw Error('Illegal plugin name, "' + name + '", must be a string, was ' + typeof name + ".");
                    if (pluginExists(name)) log$1.warn('A plugin named "' + name + '" already exists. You may want to avoid re-registering plugins!');
                    else if (Player.prototype.hasOwnProperty(name)) throw Error('Illegal plugin name, "' + name + '", cannot share a name with an existing player method!');
                    if ("function" != typeof plugin) throw Error('Illegal plugin for "' + name + '", must be a function, was ' + typeof plugin + ".");
                    return pluginStorage[name] = plugin, name !== BASE_PLUGIN_NAME && (Plugin.isBasic(plugin) ? Player.prototype[name] = createBasicPlugin(name, plugin) : Player.prototype[name] = createPluginFactory(name, plugin)), plugin;
                }, /**
                 * De-register a Video.js plugin.
                 *
                 * @param  {string} name
                 *         The name of the plugin to be de-registered. Must be a string that
                 *         matches an existing plugin.
                 *
                 * @throws {Error}
                 *         If an attempt is made to de-register the base plugin.
                 */ Plugin.deregisterPlugin = function(name) {
                    if (name === BASE_PLUGIN_NAME) throw Error("Cannot de-register base plugin.");
                    pluginExists(name) && (delete pluginStorage[name], delete Player.prototype[name]);
                }, /**
                 * Gets an object containing multiple Video.js plugins.
                 *
                 * @param   {Array} [names]
                 *          If provided, should be an array of plugin names. Defaults to _all_
                 *          plugin names.
                 *
                 * @return {Object|undefined}
                 *          An object containing plugin(s) associated with their name(s) or
                 *          `undefined` if no matching plugins exist).
                 */ Plugin.getPlugins = function(names) {
                    var result;
                    return void 0 === names && (names = Object.keys(pluginStorage)), names.forEach(function(name) {
                        var plugin = getPlugin(name);
                        plugin && ((result = result || {})[name] = plugin);
                    }), result;
                }, /**
                 * Gets a plugin's version, if available
                 *
                 * @param   {string} name
                 *          The name of a plugin.
                 *
                 * @return {string}
                 *          The plugin's version or an empty string.
                 */ Plugin.getPluginVersion = function(name) {
                    var plugin = getPlugin(name);
                    return plugin && plugin.VERSION || "";
                }, Plugin;
            }();
            /**
             * Gets a plugin by name if it exists.
             *
             * @static
             * @method   getPlugin
             * @memberOf Plugin
             * @param    {string} name
             *           The name of a plugin.
             *
             * @returns  {Function|undefined}
             *           The plugin (or `undefined`).
             */ Plugin.getPlugin = getPlugin, /**
             * The name of the base plugin class as it is registered.
             *
             * @type {string}
             */ Plugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME, Plugin.registerPlugin(BASE_PLUGIN_NAME, Plugin), /**
             * Documented in player.js
             *
             * @ignore
             */ Player.prototype.usingPlugin = function(name) {
                return !!this[PLUGIN_CACHE_KEY] && !0 === this[PLUGIN_CACHE_KEY][name];
            }, /**
             * Documented in player.js
             *
             * @ignore
             */ Player.prototype.hasPlugin = function(name) {
                return !!pluginExists(name);
            };
            /**
             * @file video.js
             * @module videojs
             */ /**
             * Normalize an `id` value by trimming off a leading `#`
             *
             * @private
             * @param   {string} id
             *          A string, maybe with a leading `#`.
             *
             * @return {string}
             *          The string, without any leading `#`.
             */ var normalizeId = function(id) {
                return 0 === id.indexOf("#") ? id.slice(1) : id;
            };
            /**
             * The `videojs()` function doubles as the main function for users to create a
             * {@link Player} instance as well as the main library namespace.
             *
             * It can also be used as a getter for a pre-existing {@link Player} instance.
             * However, we _strongly_ recommend using `videojs.getPlayer()` for this
             * purpose because it avoids any potential for unintended initialization.
             *
             * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)
             * of our JSDoc template, we cannot properly document this as both a function
             * and a namespace, so its function signature is documented here.
             *
             * #### Arguments
             * ##### id
             * string|Element, **required**
             *
             * Video element or video element ID.
             *
             * ##### options
             * Object, optional
             *
             * Options object for providing settings.
             * See: [Options Guide](https://docs.videojs.com/tutorial-options.html).
             *
             * ##### ready
             * {@link Component~ReadyCallback}, optional
             *
             * A function to be called when the {@link Player} and {@link Tech} are ready.
             *
             * #### Return Value
             *
             * The `videojs()` function returns a {@link Player} instance.
             *
             * @namespace
             *
             * @borrows AudioTrack as AudioTrack
             * @borrows Component.getComponent as getComponent
             * @borrows module:computed-style~computedStyle as computedStyle
             * @borrows module:events.on as on
             * @borrows module:events.one as one
             * @borrows module:events.off as off
             * @borrows module:events.trigger as trigger
             * @borrows EventTarget as EventTarget
             * @borrows module:extend~extend as extend
             * @borrows module:fn.bind as bind
             * @borrows module:format-time.formatTime as formatTime
             * @borrows module:format-time.resetFormatTime as resetFormatTime
             * @borrows module:format-time.setFormatTime as setFormatTime
             * @borrows module:merge-options.mergeOptions as mergeOptions
             * @borrows module:middleware.use as use
             * @borrows Player.players as players
             * @borrows Plugin.registerPlugin as registerPlugin
             * @borrows Plugin.deregisterPlugin as deregisterPlugin
             * @borrows Plugin.getPlugins as getPlugins
             * @borrows Plugin.getPlugin as getPlugin
             * @borrows Plugin.getPluginVersion as getPluginVersion
             * @borrows Tech.getTech as getTech
             * @borrows Tech.registerTech as registerTech
             * @borrows TextTrack as TextTrack
             * @borrows module:time-ranges.createTimeRanges as createTimeRange
             * @borrows module:time-ranges.createTimeRanges as createTimeRanges
             * @borrows module:url.isCrossOrigin as isCrossOrigin
             * @borrows module:url.parseUrl as parseUrl
             * @borrows VideoTrack as VideoTrack
             *
             * @param  {string|Element} id
             *         Video element or video element ID.
             *
             * @param  {Object} [options]
             *         Options object for providing settings.
             *         See: [Options Guide](https://docs.videojs.com/tutorial-options.html).
             *
             * @param  {Component~ReadyCallback} [ready]
             *         A function to be called when the {@link Player} and {@link Tech} are
             *         ready.
             *
             * @return {Player}
             *         The `videojs()` function returns a {@link Player|Player} instance.
             */ function videojs(id, options, ready) {
                var player = videojs.getPlayer(id);
                if (player) return options && log$1.warn('Player "' + id + '" is already initialised. Options will not be applied.'), ready && player.ready(ready), player;
                var el = "string" == typeof id ? $("#" + normalizeId(id)) : id;
                if (!isEl(el)) throw TypeError("The element or ID supplied is not valid. (videojs)");
                 // document.body.contains(el) will only check if el is contained within that one document.
                return el.ownerDocument.defaultView && el.ownerDocument.body.contains(el) || log$1.warn("The element supplied is not included in the DOM"), options = options || {}, hooks("beforesetup").forEach(function(hookFunction) {
                    var opts = hookFunction(el, mergeOptions$3(options));
                    if (!isObject(opts) || Array.isArray(opts)) {
                        log$1.error("please return an object in beforesetup hooks");
                        return;
                    }
                    options = mergeOptions$3(options, opts);
                }), player = new (Component$1.getComponent("Player"))(el, options, ready), hooks("setup").forEach(function(hookFunction) {
                    return hookFunction(player);
                }), player;
            }
            if (videojs.hooks_ = hooks_, videojs.hooks = hooks, videojs.hook = function(type, fn) {
                hooks(type, fn);
            }, videojs.hookOnce = function(type, fn) {
                hooks(type, [].concat(fn).map(function(original) {
                    return function wrapper() {
                        return removeHook(type, wrapper), original.apply(void 0, arguments);
                    };
                }));
            }, videojs.removeHook = removeHook, !0 !== global_window__WEBPACK_IMPORTED_MODULE_0___default().VIDEOJS_NO_DYNAMIC_STYLE && isReal()) {
                var style = $(".vjs-styles-defaults");
                if (!style) {
                    style = createStyleElement("vjs-styles-defaults");
                    var head = $("head");
                    head && head.insertBefore(style, head.firstChild), setTextContent(style, "\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ");
                }
            } // Run Auto-load players
            // You have to wait at least once in case this script is loaded after your
            // video in the DOM (weird behavior only with minified version)
            autoSetupTimeout(1, videojs), /**
             * Current Video.js version. Follows [semantic versioning](https://semver.org/).
             *
             * @type {string}
             */ videojs.VERSION = version$5, /**
             * The global options object. These are the settings that take effect
             * if no overrides are specified when the player is created.
             *
             * @type {Object}
             */ videojs.options = Player.prototype.options_, /**
             * Get an object with the currently created players, keyed by player ID
             *
             * @return {Object}
             *         The created players
             */ videojs.getPlayers = function() {
                return Player.players;
            }, /**
             * Get a single player based on an ID or DOM element.
             *
             * This is useful if you want to check if an element or ID has an associated
             * Video.js player, but not create one if it doesn't.
             *
             * @param   {string|Element} id
             *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -
             *          or a string matching the `id` of such an element.
             *
             * @return {Player|undefined}
             *          A player instance or `undefined` if there is no player instance
             *          matching the argument.
             */ videojs.getPlayer = function(id) {
                var tag, players = Player.players;
                if ("string" == typeof id) {
                    var nId = normalizeId(id), player = players[nId];
                    if (player) return player;
                    tag = $("#" + nId);
                } else tag = id;
                if (isEl(tag)) {
                    var _tag = tag, _player = _tag.player, playerId = _tag.playerId; // Element may have a `player` property referring to an already created
                    // player instance. If so, return that.
                    if (_player || players[playerId]) return _player || players[playerId];
                }
            }, /**
             * Returns an array of all current players.
             *
             * @return {Array}
             *         An array of all players. The array will be in the order that
             *         `Object.keys` provides, which could potentially vary between
             *         JavaScript engines.
             *
             */ videojs.getAllPlayers = function() {
                return(// Disposed players leave a key with a `null` value, so we need to make sure
                // we filter those out.
                Object.keys(Player.players).map(function(k) {
                    return Player.players[k];
                }).filter(Boolean));
            }, videojs.players = Player.players, videojs.getComponent = Component$1.getComponent, /**
             * Register a component so it can referred to by name. Used when adding to other
             * components, either through addChild `component.addChild('myComponent')` or through
             * default children options  `{ children: ['myComponent'] }`.
             *
             * > NOTE: You could also just initialize the component before adding.
             * `component.addChild(new MyComponent());`
             *
             * @param {string} name
             *        The class name of the component
             *
             * @param {Component} comp
             *        The component class
             *
             * @return {Component}
             *         The newly registered component
             */ videojs.registerComponent = function(name, comp) {
                Tech.isTech(comp) && log$1.warn("The " + name + " tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)"), Component$1.registerComponent.call(Component$1, name, comp);
            }, videojs.getTech = Tech.getTech, videojs.registerTech = Tech.registerTech, videojs.use = /**
             * A middleware object is a plain JavaScript object that has methods that
             * match the {@link Tech} methods found in the lists of allowed
             * {@link module:middleware.allowedGetters|getters},
             * {@link module:middleware.allowedSetters|setters}, and
             * {@link module:middleware.allowedMediators|mediators}.
             *
             * @typedef {Object} MiddlewareObject
             */ /**
             * A middleware factory function that should return a
             * {@link module:middleware~MiddlewareObject|MiddlewareObject}.
             *
             * This factory will be called for each player when needed, with the player
             * passed in as an argument.
             *
             * @callback MiddlewareFactory
             * @param {Player} player
             *        A Video.js player.
             */ /**
             * Define a middleware that the player should use by way of a factory function
             * that returns a middleware object.
             *
             * @param  {string} type
             *         The MIME type to match or `"*"` for all MIME types.
             *
             * @param  {MiddlewareFactory} middleware
             *         A middleware factory function that will be executed for
             *         matching types.
             */ function(type, middleware) {
                middlewares[type] = middlewares[type] || [], middlewares[type].push(middleware);
            }, /**
             * An object that can be returned by a middleware to signify
             * that the middleware is being terminated.
             *
             * @type {object}
             * @property {object} middleware.TERMINATOR
             */ Object.defineProperty(videojs, "middleware", {
                value: {},
                writeable: !1,
                enumerable: !0
            }), Object.defineProperty(videojs.middleware, "TERMINATOR", {
                value: TERMINATOR,
                writeable: !1,
                enumerable: !0
            }), /**
             * A reference to the {@link module:browser|browser utility module} as an object.
             *
             * @type {Object}
             * @see  {@link module:browser|browser}
             */ videojs.browser = browser, /**
             * Use {@link module:browser.TOUCH_ENABLED|browser.TOUCH_ENABLED} instead; only
             * included for backward-compatibility with 4.x.
             *
             * @deprecated Since version 5.0, use {@link module:browser.TOUCH_ENABLED|browser.TOUCH_ENABLED instead.
             * @type {boolean}
             */ videojs.TOUCH_ENABLED = TOUCH_ENABLED, videojs.extend = function(superClass, subClassMethods) {
                void 0 === subClassMethods && (subClassMethods = {});
                var subClass = function() {
                    superClass.apply(this, arguments);
                }, methods = {};
                for(var name in "object" == typeof subClassMethods ? (subClassMethods.constructor !== Object.prototype.constructor && (subClass = subClassMethods.constructor), methods = subClassMethods) : "function" == typeof subClassMethods && (subClass = subClassMethods), (0, _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_19__ /* ["default"] */ .Z)(subClass, superClass), superClass && (subClass.super_ = superClass), methods)methods.hasOwnProperty(name) && (subClass.prototype[name] = methods[name]);
                return subClass;
            }, videojs.mergeOptions = mergeOptions$3, videojs.bind = bind, videojs.registerPlugin = Plugin.registerPlugin, videojs.deregisterPlugin = Plugin.deregisterPlugin, /**
             * Deprecated method to register a plugin with Video.js
             *
             * @deprecated videojs.plugin() is deprecated; use videojs.registerPlugin() instead
             *
             * @param {string} name
             *        The plugin name
             *
             * @param {Plugin|Function} plugin
             *         The plugin sub-class or function
             */ videojs.plugin = function(name, plugin) {
                return log$1.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead"), Plugin.registerPlugin(name, plugin);
            }, videojs.getPlugins = Plugin.getPlugins, videojs.getPlugin = Plugin.getPlugin, videojs.getPluginVersion = Plugin.getPluginVersion, /**
             * Adding languages so that they're available to all players.
             * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`
             *
             * @param {string} code
             *        The language code or dictionary property
             *
             * @param {Object} data
             *        The data values to be translated
             *
             * @return {Object}
             *         The resulting language dictionary object
             */ videojs.addLanguage = function(code, data) {
                var _mergeOptions;
                return code = ("" + code).toLowerCase(), videojs.options.languages = mergeOptions$3(videojs.options.languages, ((_mergeOptions = {})[code] = data, _mergeOptions)), videojs.options.languages[code];
            }, /**
             * A reference to the {@link module:log|log utility module} as an object.
             *
             * @type {Function}
             * @see  {@link module:log|log}
             */ videojs.log = log$1, videojs.createLogger = createLogger, videojs.createTimeRange = videojs.createTimeRanges = createTimeRanges, videojs.formatTime = formatTime, videojs.setFormatTime = /**
             * Replaces the default formatTime implementation with a custom implementation.
             *
             * @param {Function} customImplementation
             *        A function which will be used in place of the default formatTime
             *        implementation. Will receive the current time in seconds and the
             *        guide (in seconds) as arguments.
             */ function(customImplementation) {
                implementation = customImplementation;
            }, videojs.resetFormatTime = /**
             * Resets formatTime to the default implementation.
             */ function() {
                implementation = defaultImplementation;
            }, videojs.parseUrl = parseUrl, videojs.isCrossOrigin = isCrossOrigin, videojs.EventTarget = EventTarget$2, videojs.on = on, videojs.one = one, videojs.off = off, videojs.trigger = trigger, /**
             * A cross-browser XMLHttpRequest wrapper.
             *
             * @function
             * @param    {Object} options
             *           Settings for the request.
             *
             * @return   {XMLHttpRequest|XDomainRequest}
             *           The request object.
             *
             * @see      https://github.com/Raynos/xhr
             */ videojs.xhr = _videojs_xhr__WEBPACK_IMPORTED_MODULE_4___default(), videojs.TextTrack = TextTrack, videojs.AudioTrack = AudioTrack, videojs.VideoTrack = VideoTrack, [
                "isEl",
                "isTextNode",
                "createEl",
                "hasClass",
                "addClass",
                "removeClass",
                "toggleClass",
                "setAttributes",
                "getAttributes",
                "emptyEl",
                "appendContent",
                "insertContent"
            ].forEach(function(k) {
                videojs[k] = function() {
                    return log$1.warn("videojs." + k + "() is deprecated; use videojs.dom." + k + "() instead"), Dom[k].apply(null, arguments);
                };
            }), videojs.computedStyle = computedStyle, /**
             * A reference to the {@link module:dom|DOM utility module} as an object.
             *
             * @type {Object}
             * @see  {@link module:dom|dom}
             */ videojs.dom = Dom, /**
             * A reference to the {@link module:url|URL utility module} as an object.
             *
             * @type {Object}
             * @see  {@link module:url|url}
             */ videojs.url = Url, videojs.defineLazyProperty = defineLazyProperty, // In a major update this could become the default text and key.
            videojs.addLanguage("en", {
                "Non-Fullscreen": "Exit Fullscreen"
            });
            /*! @name @videojs/http-streaming @version 2.12.0 @license Apache-2.0 */ /**
             * @file resolve-url.js - Handling how URLs are resolved and manipulated
             */ var resolveUrl = _videojs_vhs_utils_es_resolve_url_js__WEBPACK_IMPORTED_MODULE_6__ /* ["default"] */ .Z, resolveManifestRedirect = function(handleManifestRedirect, url, req) {
                return(// To understand how the responseURL below is set and generated:
                // - https://fetch.spec.whatwg.org/#concept-response-url
                // - https://fetch.spec.whatwg.org/#atomic-http-redirect-handling
                handleManifestRedirect && req && req.responseURL && url !== req.responseURL ? req.responseURL : url);
            }, logger = function(source) {
                return videojs.log.debug ? videojs.log.debug.bind(videojs, "VHS:", source + " >") : function() {};
            }, TIME_FUDGE_FACTOR = 1 / 30, SAFE_TIME_DELTA = 1 / 30 * 3, filterRanges = function(timeRanges, predicate) {
                var i, results = [];
                if (timeRanges && timeRanges.length) // Search for ranges that match the predicate
                for(i = 0; i < timeRanges.length; i++)predicate(timeRanges.start(i), timeRanges.end(i)) && results.push([
                    timeRanges.start(i),
                    timeRanges.end(i)
                ]);
                return videojs.createTimeRanges(results);
            }, findRange = function(buffered, time) {
                return filterRanges(buffered, function(start, end) {
                    return start - SAFE_TIME_DELTA <= time && end + SAFE_TIME_DELTA >= time;
                });
            }, findNextRange = function(timeRanges, time) {
                return filterRanges(timeRanges, function(start) {
                    return start - TIME_FUDGE_FACTOR >= time;
                });
            }, findGaps = function(buffered) {
                if (buffered.length < 2) return videojs.createTimeRanges();
                for(var ranges = [], i = 1; i < buffered.length; i++){
                    var start = buffered.end(i - 1), end = buffered.start(i);
                    ranges.push([
                        start,
                        end
                    ]);
                }
                return videojs.createTimeRanges(ranges);
            }, bufferIntersection = function(bufferA, bufferB) {
                var start = null, end = null, arity = 0, extents = [], ranges = [];
                if (!bufferA || !bufferA.length || !bufferB || !bufferB.length) return videojs.createTimeRange();
                 // Handle the case where we have both buffers and create an
                for(// intersection of the two
                var count = bufferA.length; count--;)extents.push({
                    time: bufferA.start(count),
                    type: "start"
                }), extents.push({
                    time: bufferA.end(count),
                    type: "end"
                });
                for(count = bufferB.length; count--;)extents.push({
                    time: bufferB.start(count),
                    type: "start"
                }), extents.push({
                    time: bufferB.end(count),
                    type: "end"
                });
                 // B) Sort them by time
                //    arity for ends
                for(extents.sort(function(a, b) {
                    return a.time - b.time;
                }), count = 0; count < extents.length; count++)"start" === extents[count].type ? 2 == ++arity && (start = extents[count].time) : "end" === extents[count].type && 1 == --arity && (end = extents[count].time), null !== start && null !== end && (ranges.push([
                    start,
                    end
                ]), start = null, end = null);
                return videojs.createTimeRanges(ranges);
            }, printableRange = function(range) {
                var strArr = [];
                if (!range || !range.length) return "";
                for(var i = 0; i < range.length; i++)strArr.push(range.start(i) + " => " + range.end(i));
                return strArr.join(", ");
            }, timeRangesToArray = function(timeRanges) {
                for(var timeRangesList = [], i = 0; i < timeRanges.length; i++)timeRangesList.push({
                    start: timeRanges.start(i),
                    end: timeRanges.end(i)
                });
                return timeRangesList;
            }, isRangeDifferent = function(a, b) {
                // same object
                if (a === b) return !1;
                 // one or the other is undefined
                if (!a && b || !b && a || a.length !== b.length) return !0;
                 // length is different
                for(var i = 0; i < a.length; i++)if (a.start(i) !== b.start(i) || a.end(i) !== b.end(i)) return !0;
                 // if the length and every pair is the same
                // this is the same time range
                return !1;
            }, lastBufferedEnd = function(a) {
                if (a && a.length && a.end) return a.end(a.length - 1);
            }, timeAheadOf = function(range, startTime) {
                var time = 0;
                if (!range || !range.length) return time;
                for(var i = 0; i < range.length; i++){
                    var start = range.start(i), end = range.end(i);
                    if (!(startTime > end)) {
                        if (startTime > start && startTime <= end) {
                            time += end - startTime;
                            continue;
                        } // startTime is before this range.
                        time += end - start;
                    } // startTime is within this range
                }
                return time;
            }, createTimeRange = videojs.createTimeRange, segmentDurationWithParts = function(playlist, segment) {
                // if this isn't a preload segment
                // then we will have a segment duration that is accurate.
                if (!segment.preload) return segment.duration;
                 // otherwise we have to add up parts and preload hints
                // to get an up to date duration.
                var result = 0;
                return (segment.parts || []).forEach(function(p) {
                    result += p.duration;
                }), // as they won't even have a duration yet.
                (segment.preloadHints || []).forEach(function(p) {
                    "PART" === p.type && (result += playlist.partTargetDuration);
                }), result;
            }, getPartsAndSegments = function(playlist) {
                return (playlist.segments || []).reduce(function(acc, segment, si) {
                    return segment.parts ? segment.parts.forEach(function(part, pi) {
                        acc.push({
                            duration: part.duration,
                            segmentIndex: si,
                            partIndex: pi,
                            part: part,
                            segment: segment
                        });
                    }) : acc.push({
                        duration: segment.duration,
                        segmentIndex: si,
                        partIndex: null,
                        segment: segment,
                        part: null
                    }), acc;
                }, []);
            }, getLastParts = function(media) {
                var lastSegment = media.segments && media.segments.length && media.segments[media.segments.length - 1];
                return lastSegment && lastSegment.parts || [];
            }, getKnownPartCount = function(_ref) {
                var preloadSegment = _ref.preloadSegment;
                if (preloadSegment) {
                    var parts = preloadSegment.parts;
                    return (preloadSegment.preloadHints || []).reduce(function(count, hint) {
                        return count + ("PART" === hint.type ? 1 : 0);
                    }, 0) + (parts && parts.length ? parts.length : 0);
                }
            }, liveEdgeDelay = function(master, media) {
                if (media.endList) return 0;
                 // dash suggestedPresentationDelay trumps everything
                if (master && master.suggestedPresentationDelay) return master.suggestedPresentationDelay;
                var hasParts = getLastParts(media).length > 0; // look for "part" delays from ll-hls first
                return hasParts && media.serverControl && media.serverControl.partHoldBack ? media.serverControl.partHoldBack : hasParts && media.partTargetDuration ? 3 * media.partTargetDuration : media.serverControl && media.serverControl.holdBack ? media.serverControl.holdBack : media.targetDuration ? 3 * media.targetDuration : 0;
            }, backwardDuration = function(playlist, endSequence) {
                var result = 0, i = endSequence - playlist.mediaSequence, segment = playlist.segments[i];
                // information that is earlier than endSequence
                if (segment) {
                    if (void 0 !== segment.start) return {
                        result: segment.start,
                        precise: !0
                    };
                    if (void 0 !== segment.end) return {
                        result: segment.end - segment.duration,
                        precise: !0
                    };
                }
                for(; i--;){
                    if (void 0 !== (segment = playlist.segments[i]).end) return {
                        result: result + segment.end,
                        precise: !0
                    };
                    if (result += segmentDurationWithParts(playlist, segment), void 0 !== segment.start) return {
                        result: result + segment.start,
                        precise: !0
                    };
                }
                return {
                    result: result,
                    precise: !1
                };
            }, forwardDuration = function(playlist, endSequence) {
                // information
                for(var segment, result = 0, i = endSequence - playlist.mediaSequence; i < playlist.segments.length; i++){
                    if (void 0 !== (segment = playlist.segments[i]).start) return {
                        result: segment.start - result,
                        precise: !0
                    };
                    if (result += segmentDurationWithParts(playlist, segment), void 0 !== segment.end) return {
                        result: segment.end - result,
                        precise: !0
                    };
                } // indicate we didn't find a useful duration estimate
                return {
                    result: -1,
                    precise: !1
                };
            }, intervalDuration = function(playlist, endSequence, expired) {
                if (void 0 === endSequence && (endSequence = playlist.mediaSequence + playlist.segments.length), endSequence < playlist.mediaSequence) return 0;
                 // do a backward walk to estimate the duration
                var backward = backwardDuration(playlist, endSequence);
                if (backward.precise) // if we were able to base our duration estimate on timing
                // information provided directly from the Media Source, return
                // it
                return backward.result;
                 // walk forward to see if a precise duration estimate can be made
                // that way
                var forward = forwardDuration(playlist, endSequence);
                return forward.precise ? forward.result : backward.result + expired // return the less-precise, playlist-based duration estimate
                ;
            }, duration = function(playlist, endSequence, expired) {
                if (!playlist) return 0;
                // playlist-level duration indicators when they're present
                if ("number" != typeof expired && (expired = 0), void 0 === endSequence) {
                    // if present, use the duration specified in the playlist
                    if (playlist.totalDuration) return playlist.totalDuration;
                     // duration should be Infinity for live playlists
                    if (!playlist.endList) return global_window__WEBPACK_IMPORTED_MODULE_0___default()[1 / 0];
                } // calculate the total duration based on the segment durations
                return intervalDuration(playlist, endSequence, expired);
            }, sumDurations = function(_ref2) {
                var defaultDuration = _ref2.defaultDuration, durationList = _ref2.durationList, startIndex = _ref2.startIndex, endIndex = _ref2.endIndex, durations = 0;
                if (startIndex > endIndex) {
                    var _ref3 = [
                        endIndex,
                        startIndex
                    ];
                    startIndex = _ref3[0], endIndex = _ref3[1];
                }
                if (startIndex < 0) {
                    for(var i = startIndex; i < Math.min(0, endIndex); i++)durations += defaultDuration;
                    startIndex = 0;
                }
                for(var _i = startIndex; _i < endIndex; _i++)durations += durationList[_i].duration;
                return durations;
            }, playlistEnd = function(playlist, expired, useSafeLiveEnd, liveEdgePadding) {
                if (!playlist || !playlist.segments) return null;
                if (playlist.endList) return duration(playlist);
                if (null === expired) return null;
                expired = expired || 0;
                var lastSegmentEndTime = intervalDuration(playlist, playlist.mediaSequence + playlist.segments.length, expired);
                return useSafeLiveEnd && (lastSegmentEndTime -= liveEdgePadding = "number" == typeof liveEdgePadding ? liveEdgePadding : liveEdgeDelay(null, playlist)), Math.max(0, lastSegmentEndTime);
            }, isBlacklisted = function(playlist) {
                return playlist.excludeUntil && playlist.excludeUntil > Date.now();
            }, isIncompatible = function(playlist) {
                return playlist.excludeUntil && playlist.excludeUntil === 1 / 0;
            }, isEnabled = function(playlist) {
                var blacklisted = isBlacklisted(playlist);
                return !playlist.disabled && !blacklisted;
            }, hasAttribute = function(attr, playlist) {
                return playlist.attributes && playlist.attributes[attr];
            }, isLowestEnabledRendition = function(master, media) {
                if (1 === master.playlists.length) return !0;
                var currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;
                return 0 === master.playlists.filter(function(playlist) {
                    return !!isEnabled(playlist) && (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;
                }).length;
            }, playlistMatch = function(a, b) {
                return(// both playlits are null
                // or only one playlist is non-null
                // no match
                (!!a || !!b) && (!!a || !b) && (!a || !!b) && (a === b || !!a.id && !!b.id && a.id === b.id || !!a.resolvedUri && !!b.resolvedUri && a.resolvedUri === b.resolvedUri || !!a.uri && !!b.uri && a.uri === b.uri) // playlist objects are the same, match
                );
            }, someAudioVariant = function(master, callback) {
                var AUDIO = master && master.mediaGroups && master.mediaGroups.AUDIO || {}, found = !1;
                for(var groupName in AUDIO){
                    for(var label in AUDIO[groupName])if (found = callback(AUDIO[groupName][label])) break;
                    if (found) break;
                }
                return !!found;
            }, isAudioOnly = function(master) {
                // we are audio only if we have no main playlists but do
                // have media group playlists.
                if (!master || !master.playlists || !master.playlists.length) return someAudioVariant(master, function(variant) {
                    return variant.playlists && variant.playlists.length || variant.uri;
                });
                 // if every playlist has only an audio codec it is audio only
                for(var i = 0; i < master.playlists.length; i++){
                    var _ret = function(i) {
                        var playlist = master.playlists[i], CODECS = playlist.attributes && playlist.attributes.CODECS;
                        return CODECS && CODECS.split(",").every(function(c) {
                            return (0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .isAudioCodec */ .KL)(c);
                        }) || someAudioVariant(master, function(variant) {
                            return playlistMatch(playlist, variant);
                        }) ? "continue" : {
                            v: !1
                        } // playlist is in an audio group it is audio only
                        ;
                    }(i);
                    if ("continue" !== _ret && "object" == typeof _ret) return _ret.v;
                } // if we make it past every playlist without returning, then
                // this is an audio only playlist.
                return !0;
            }, Playlist = {
                liveEdgeDelay: liveEdgeDelay,
                duration: duration,
                seekable: function(playlist, expired, liveEdgePadding) {
                    var seekableStart = expired || 0, seekableEnd = playlistEnd(playlist, expired, !0, liveEdgePadding);
                    return null === seekableEnd ? createTimeRange() : createTimeRange(seekableStart, seekableEnd);
                },
                getMediaInfoForTime: function(_ref4) {
                    for(var playlist = _ref4.playlist, currentTime = _ref4.currentTime, startingSegmentIndex = _ref4.startingSegmentIndex, startingPartIndex = _ref4.startingPartIndex, startTime = _ref4.startTime, experimentalExactManifestTimings = _ref4.experimentalExactManifestTimings, time = currentTime - startTime, partsAndSegments = getPartsAndSegments(playlist), startIndex = 0, i = 0; i < partsAndSegments.length; i++){
                        var partAndSegment = partsAndSegments[i];
                        if (startingSegmentIndex === partAndSegment.segmentIndex && ("number" != typeof startingPartIndex || "number" != typeof partAndSegment.partIndex || startingPartIndex === partAndSegment.partIndex)) {
                            startIndex = i;
                            break;
                        } // skip this if part index does not match.
                    }
                    if (time < 0) {
                        // Walk backward from startIndex in the playlist, adding durations
                        // until we find a segment that contains `time` and return it
                        if (startIndex > 0) for(var _i2 = startIndex - 1; _i2 >= 0; _i2--){
                            var _partAndSegment = partsAndSegments[_i2];
                            if (time += _partAndSegment.duration, experimentalExactManifestTimings) {
                                if (time < 0) continue;
                            } else if (time + TIME_FUDGE_FACTOR <= 0) continue;
                            return {
                                partIndex: _partAndSegment.partIndex,
                                segmentIndex: _partAndSegment.segmentIndex,
                                startTime: startTime - sumDurations({
                                    defaultDuration: playlist.targetDuration,
                                    durationList: partsAndSegments,
                                    startIndex: startIndex,
                                    endIndex: _i2
                                })
                            };
                        }
                         // We were unable to find a good segment within the playlist
                        // so select the first segment
                        return {
                            partIndex: partsAndSegments[0] && partsAndSegments[0].partIndex || null,
                            segmentIndex: partsAndSegments[0] && partsAndSegments[0].segmentIndex || 0,
                            startTime: currentTime
                        };
                    } // When startIndex is negative, we first walk forward to first segment
                    // adding target durations. If we "run out of time" before getting to
                    // the first segment, return the first segment
                    if (startIndex < 0) {
                        for(var _i3 = startIndex; _i3 < 0; _i3++)if ((time -= playlist.targetDuration) < 0) return {
                            partIndex: partsAndSegments[0] && partsAndSegments[0].partIndex || null,
                            segmentIndex: partsAndSegments[0] && partsAndSegments[0].segmentIndex || 0,
                            startTime: currentTime
                        };
                        startIndex = 0;
                    } // Walk forward from startIndex in the playlist, subtracting durations
                    // until we find a segment that contains `time` and return it
                    for(var _i4 = startIndex; _i4 < partsAndSegments.length; _i4++){
                        var _partAndSegment2 = partsAndSegments[_i4];
                        if (time -= _partAndSegment2.duration, experimentalExactManifestTimings) {
                            if (time > 0) continue;
                        } else if (time - TIME_FUDGE_FACTOR >= 0) continue;
                        return {
                            partIndex: _partAndSegment2.partIndex,
                            segmentIndex: _partAndSegment2.segmentIndex,
                            startTime: startTime + sumDurations({
                                defaultDuration: playlist.targetDuration,
                                durationList: partsAndSegments,
                                startIndex: startIndex,
                                endIndex: _i4
                            })
                        };
                    } // We are out of possible candidates so load the last one...
                    return {
                        segmentIndex: partsAndSegments[partsAndSegments.length - 1].segmentIndex,
                        partIndex: partsAndSegments[partsAndSegments.length - 1].partIndex,
                        startTime: currentTime
                    };
                },
                isEnabled: isEnabled,
                isDisabled: function(playlist) {
                    return playlist.disabled;
                },
                isBlacklisted: isBlacklisted,
                isIncompatible: isIncompatible,
                playlistEnd: playlistEnd,
                isAes: function(media) {
                    for(var i = 0; i < media.segments.length; i++)if (media.segments[i].key) return !0;
                    return !1;
                },
                hasAttribute: hasAttribute,
                estimateSegmentRequestTime: function(segmentDuration, bandwidth, playlist, bytesReceived) {
                    return (void 0 === bytesReceived && (bytesReceived = 0), hasAttribute("BANDWIDTH", playlist)) ? (segmentDuration * playlist.attributes.BANDWIDTH - 8 * bytesReceived) / bandwidth : NaN;
                },
                isLowestEnabledRendition: isLowestEnabledRendition,
                isAudioOnly: isAudioOnly,
                playlistMatch: playlistMatch,
                segmentDurationWithParts: segmentDurationWithParts
            }, log = videojs.log, createPlaylistID = function(index, uri) {
                return index + "-" + uri;
            }, parseManifest = function(_ref) {
                var onwarn = _ref.onwarn, oninfo = _ref.oninfo, manifestString = _ref.manifestString, _ref$customTagParsers = _ref.customTagParsers, _ref$customTagMappers = _ref.customTagMappers, experimentalLLHLS = _ref.experimentalLLHLS, parser = new m3u8_parser__WEBPACK_IMPORTED_MODULE_7__ /* .Parser */ ._b();
                onwarn && parser.on("warn", onwarn), oninfo && parser.on("info", oninfo), (void 0 === _ref$customTagParsers ? [] : _ref$customTagParsers).forEach(function(customParser) {
                    return parser.addParser(customParser);
                }), (void 0 === _ref$customTagMappers ? [] : _ref$customTagMappers).forEach(function(mapper) {
                    return parser.addTagMapper(mapper);
                }), parser.push(manifestString), parser.end();
                var manifest = parser.manifest; // remove llhls features from the parsed manifest
                if (!experimentalLLHLS && ([
                    "preloadSegment",
                    "skip",
                    "serverControl",
                    "renditionReports",
                    "partInf",
                    "partTargetDuration"
                ].forEach(function(k) {
                    manifest.hasOwnProperty(k) && delete manifest[k];
                }), manifest.segments && manifest.segments.forEach(function(segment) {
                    [
                        "parts",
                        "preloadHints"
                    ].forEach(function(k) {
                        segment.hasOwnProperty(k) && delete segment[k];
                    });
                })), !manifest.targetDuration) {
                    var targetDuration = 10;
                    manifest.segments && manifest.segments.length && (targetDuration = manifest.segments.reduce(function(acc, s) {
                        return Math.max(acc, s.duration);
                    }, 0)), onwarn && onwarn("manifest has no targetDuration defaulting to " + targetDuration), manifest.targetDuration = targetDuration;
                }
                var parts = getLastParts(manifest);
                if (parts.length && !manifest.partTargetDuration) {
                    var partTargetDuration = parts.reduce(function(acc, p) {
                        return Math.max(acc, p.duration);
                    }, 0);
                    onwarn && (onwarn("manifest has no partTargetDuration defaulting to " + partTargetDuration), log.error("LL-HLS manifest has parts but lacks required #EXT-X-PART-INF:PART-TARGET value. See https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-09#section-4.4.3.7. Playback is not guaranteed.")), manifest.partTargetDuration = partTargetDuration;
                }
                return manifest;
            }, forEachMediaGroup = function(master, callback) {
                master.mediaGroups && [
                    "AUDIO",
                    "SUBTITLES"
                ].forEach(function(mediaType) {
                    if (master.mediaGroups[mediaType]) for(var groupKey in master.mediaGroups[mediaType])for(var labelKey in master.mediaGroups[mediaType][groupKey])callback(master.mediaGroups[mediaType][groupKey][labelKey], mediaType, groupKey, labelKey);
                });
            }, setupMediaPlaylist = function(_ref2) {
                var playlist = _ref2.playlist, uri = _ref2.uri, id = _ref2.id;
                playlist.id = id, playlist.playlistErrors_ = 0, uri && // For media playlists, m3u8-parser does not have access to a URI, as HLS media
                // playlists do not contain their own source URI, but one is needed for consistency in
                // VHS.
                (playlist.uri = uri), // stream may still be played without them.
                // For HLS media playlists, m3u8-parser does not attach an attributes object to the
                // manifest.
                //
                // To avoid undefined reference errors through the project, and make the code easier
                // to write/read, add an empty attributes object for these cases.
                playlist.attributes = playlist.attributes || {};
            }, setupMediaPlaylists = function(master) {
                for(var i = master.playlists.length; i--;){
                    var playlist = master.playlists[i];
                    setupMediaPlaylist({
                        playlist: playlist,
                        id: createPlaylistID(i, playlist.uri)
                    }), playlist.resolvedUri = resolveUrl(master.uri, playlist.uri), master.playlists[playlist.id] = playlist, master.playlists[playlist.uri] = playlist, playlist.attributes.BANDWIDTH || log.warn("Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.");
                }
            }, resolveMediaGroupUris = function(master) {
                forEachMediaGroup(master, function(properties) {
                    properties.uri && (properties.resolvedUri = resolveUrl(master.uri, properties.uri));
                });
            }, masterForMedia = function(media, uri) {
                var id = createPlaylistID(0, uri), master = {
                    mediaGroups: {
                        AUDIO: {},
                        VIDEO: {},
                        "CLOSED-CAPTIONS": {},
                        SUBTITLES: {}
                    },
                    uri: global_window__WEBPACK_IMPORTED_MODULE_0___default().location.href,
                    resolvedUri: global_window__WEBPACK_IMPORTED_MODULE_0___default().location.href,
                    playlists: [
                        {
                            uri: uri,
                            id: id,
                            resolvedUri: uri,
                            // m3u8-parser does not attach an attributes property to media playlists so make
                            // sure that the property is attached to avoid undefined reference errors
                            attributes: {}
                        }
                    ]
                };
                return master.playlists[id] = master.playlists[0], master.playlists[uri] = master.playlists[0], master;
            }, addPropertiesToMaster = function(master, uri) {
                master.uri = uri;
                for(var i = 0; i < master.playlists.length; i++)if (!master.playlists[i].uri) {
                    // Set up phony URIs for the playlists since playlists are referenced by their URIs
                    // throughout VHS, but some formats (e.g., DASH) don't have external URIs
                    // TODO: consider adding dummy URIs in mpd-parser
                    var phonyUri = "placeholder-uri-" + i;
                    master.playlists[i].uri = phonyUri;
                }
                var audioOnlyMaster = isAudioOnly(master);
                forEachMediaGroup(master, function(properties, mediaType, groupKey, labelKey) {
                    var groupId = "placeholder-uri-" + mediaType + "-" + groupKey + "-" + labelKey; // add a playlist array under properties
                    if (!properties.playlists || !properties.playlists.length) {
                        // If the manifest is audio only and this media group does not have a uri, check
                        // if the media group is located in the main list of playlists. If it is, don't add
                        // placeholder properties as it shouldn't be considered an alternate audio track.
                        if (audioOnlyMaster && "AUDIO" === mediaType && !properties.uri) for(var _i = 0; _i < master.playlists.length; _i++){
                            var p = master.playlists[_i];
                            if (p.attributes && p.attributes.AUDIO && p.attributes.AUDIO === groupKey) return;
                        }
                        properties.playlists = [
                            (0, _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_15__ /* ["default"] */ .Z)({}, properties)
                        ];
                    }
                    properties.playlists.forEach(function(p, i) {
                        var id = createPlaylistID(i, groupId);
                        p.uri ? p.resolvedUri = p.resolvedUri || resolveUrl(master.uri, p.uri) : (// DEPRECATED, this has been added to prevent a breaking change.
                        // previously we only ever had a single media group playlist, so
                        // we mark the first playlist uri without prepending the index as we used to
                        // ideally we would do all of the playlists the same way.
                        p.uri = 0 === i ? groupId : id, // the placeholder again
                        p.resolvedUri = p.uri), p.id = p.id || id, // expected to have this.
                        p.attributes = p.attributes || {}, master.playlists[p.id] = p, master.playlists[p.uri] = p;
                    });
                }), setupMediaPlaylists(master), resolveMediaGroupUris(master);
            }, mergeOptions$2 = videojs.mergeOptions, EventTarget$1 = videojs.EventTarget, addLLHLSQueryDirectives = function(uri, media) {
                if (media.endList || !media.serverControl) return uri;
                var parameters = {};
                if (media.serverControl.canBlockReload) {
                    var preloadSegment = media.preloadSegment, nextMSN = media.mediaSequence + media.segments.length; // next msn is a zero based value, length is not.
                    // that we are going to request a part of that preload segment.
                    // the logic below is used to determine that.
                    if (preloadSegment) {
                        var parts = preloadSegment.parts || [], nextPart = getKnownPartCount(media) - 1; // _HLS_part is a zero based index
                        nextPart > -1 && nextPart !== parts.length - 1 && // add existing parts to our preload hints
                        // eslint-disable-next-line
                        (parameters._HLS_part = nextPart), (nextPart > -1 || parts.length) && nextMSN--;
                    } // add _HLS_msn= in front of any _HLS_part query
                    // eslint-disable-next-line
                    parameters._HLS_msn = nextMSN;
                }
                if (media.serverControl && media.serverControl.canSkipUntil && // add _HLS_skip= infront of all other queries.
                // eslint-disable-next-line
                (parameters._HLS_skip = media.serverControl.canSkipDateranges ? "v2" : "YES"), Object.keys(parameters).length) {
                    var parsedUri = new (global_window__WEBPACK_IMPORTED_MODULE_0___default()).URL(uri);
                    [
                        "_HLS_skip",
                        "_HLS_msn",
                        "_HLS_part"
                    ].forEach(function(name) {
                        parameters.hasOwnProperty(name) && parsedUri.searchParams.set(name, parameters[name]);
                    }), uri = parsedUri.toString();
                }
                return uri;
            }, updateSegment = function(a, b) {
                if (!a) return b;
                var result = mergeOptions$2(a, b); // if only the old segment has preload hints
                // then the parts are no longer valid
                if (a.preloadHints && !b.preloadHints && delete result.preloadHints, a.parts && !b.parts) delete result.parts; // if both segments have parts
                else if (a.parts && b.parts) for(var i = 0; i < b.parts.length; i++)a.parts && a.parts[i] && (result.parts[i] = mergeOptions$2(a.parts[i], b.parts[i]));
                 // set skipped to false for segments that have
                return !a.skipped && b.skipped && (result.skipped = !1), a.preload && !b.preload && (result.preload = !1), result;
            }, updateSegments = function(original, update, offset) {
                var currentMap, oldSegments = original.slice(), newSegments = update.slice();
                offset = offset || 0;
                for(var result = [], newIndex = 0; newIndex < newSegments.length; newIndex++){
                    var oldSegment = oldSegments[newIndex + offset], newSegment = newSegments[newIndex];
                    oldSegment ? (currentMap = oldSegment.map || currentMap, result.push(updateSegment(oldSegment, newSegment))) : (currentMap && !newSegment.map && (newSegment.map = currentMap), result.push(newSegment));
                }
                return result;
            }, resolveSegmentUris = function(segment, baseUri) {
                !segment.resolvedUri && segment.uri && (segment.resolvedUri = resolveUrl(baseUri, segment.uri)), segment.key && !segment.key.resolvedUri && (segment.key.resolvedUri = resolveUrl(baseUri, segment.key.uri)), segment.map && !segment.map.resolvedUri && (segment.map.resolvedUri = resolveUrl(baseUri, segment.map.uri)), segment.map && segment.map.key && !segment.map.key.resolvedUri && (segment.map.key.resolvedUri = resolveUrl(baseUri, segment.map.key.uri)), segment.parts && segment.parts.length && segment.parts.forEach(function(p) {
                    p.resolvedUri || (p.resolvedUri = resolveUrl(baseUri, p.uri));
                }), segment.preloadHints && segment.preloadHints.length && segment.preloadHints.forEach(function(p) {
                    p.resolvedUri || (p.resolvedUri = resolveUrl(baseUri, p.uri));
                });
            }, getAllSegments = function(media) {
                var segments = media.segments || [], preloadSegment = media.preloadSegment;
                // a usable segment, only include a preloadSegment that has
                // parts.
                if (preloadSegment && preloadSegment.parts && preloadSegment.parts.length) {
                    // if preloadHints has a MAP that means that the
                    // init segment is going to change. We cannot use any of the parts
                    // from this preload segment.
                    if (preloadSegment.preloadHints) {
                        for(var i = 0; i < preloadSegment.preloadHints.length; i++)if ("MAP" === preloadSegment.preloadHints[i].type) return segments;
                    } // set the duration for our preload segment to target duration.
                    preloadSegment.duration = media.targetDuration, preloadSegment.preload = !0, segments.push(preloadSegment);
                }
                return segments;
            }, isPlaylistUnchanged = function(a, b) {
                return a === b || a.segments && b.segments && a.segments.length === b.segments.length && a.endList === b.endList && a.mediaSequence === b.mediaSequence && a.preloadSegment === b.preloadSegment;
            }, updateMaster$1 = function(master, newMedia, unchangedCheck) {
                void 0 === unchangedCheck && (unchangedCheck = isPlaylistUnchanged);
                var result = mergeOptions$2(master, {}), oldMedia = result.playlists[newMedia.id];
                if (!oldMedia || unchangedCheck(oldMedia, newMedia)) return null;
                newMedia.segments = getAllSegments(newMedia);
                var mergedPlaylist = mergeOptions$2(oldMedia, newMedia); // always use the new media's preload segment
                if (mergedPlaylist.preloadSegment && !newMedia.preloadSegment && delete mergedPlaylist.preloadSegment, oldMedia.segments) {
                    if (newMedia.skip) {
                        newMedia.segments = newMedia.segments || []; // add back in objects for skipped segments, so that we merge
                        // old properties into the new segments
                        for(var i = 0; i < newMedia.skip.skippedSegments; i++)newMedia.segments.unshift({
                            skipped: !0
                        });
                    }
                    mergedPlaylist.segments = updateSegments(oldMedia.segments, newMedia.segments, newMedia.mediaSequence - oldMedia.mediaSequence);
                } // resolve any segment URIs to prevent us from having to do it later
                mergedPlaylist.segments.forEach(function(segment) {
                    resolveSegmentUris(segment, mergedPlaylist.resolvedUri);
                });
                // that is referenced by index, and one by URI. The index reference may no longer be
                // necessary.
                for(var _i = 0; _i < result.playlists.length; _i++)result.playlists[_i].id === newMedia.id && (result.playlists[_i] = mergedPlaylist);
                return result.playlists[newMedia.id] = mergedPlaylist, result.playlists[newMedia.uri] = mergedPlaylist, forEachMediaGroup(master, function(properties, mediaType, groupKey, labelKey) {
                    if (properties.playlists) for(var _i2 = 0; _i2 < properties.playlists.length; _i2++)newMedia.id === properties.playlists[_i2].id && (properties.playlists[_i2] = newMedia);
                }), result;
            }, refreshDelay = function(media, update) {
                var segments = media.segments || [], lastSegment = segments[segments.length - 1], lastPart = lastSegment && lastSegment.parts && lastSegment.parts[lastSegment.parts.length - 1], lastDuration = lastPart && lastPart.duration || lastSegment && lastSegment.duration;
                return update && lastDuration ? 1000 * lastDuration : 500 * (media.partTargetDuration || media.targetDuration || 10) // if the playlist is unchanged since the last reload or last segment duration
                ;
            }, PlaylistLoader = /*#__PURE__*/ function(_EventTarget) {
                function PlaylistLoader(src, vhs, options) {
                    if (void 0 === options && (options = {}), _this = _EventTarget.call(this) || this, !src) throw Error("A non-empty playlist URL or object is required");
                    _this.logger_ = logger("PlaylistLoader");
                    var _this, _options = options, _options$withCredenti = _options.withCredentials, _options$handleManife = _options.handleManifestRedirects;
                    _this.src = src, _this.vhs_ = vhs, _this.withCredentials = void 0 !== _options$withCredenti && _options$withCredenti, _this.handleManifestRedirects = void 0 !== _options$handleManife && _options$handleManife;
                    var vhsOptions = vhs.options_;
                    return _this.customTagParsers = vhsOptions && vhsOptions.customTagParsers || [], _this.customTagMappers = vhsOptions && vhsOptions.customTagMappers || [], _this.experimentalLLHLS = vhsOptions && vhsOptions.experimentalLLHLS || !1, videojs.browser.IE_VERSION && (_this.experimentalLLHLS = !1), _this.state = "HAVE_NOTHING", _this.handleMediaupdatetimeout_ = _this.handleMediaupdatetimeout_.bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this)), _this.on("mediaupdatetimeout", _this.handleMediaupdatetimeout_), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(PlaylistLoader, _EventTarget);
                var _proto = PlaylistLoader.prototype;
                return _proto.handleMediaupdatetimeout_ = function() {
                    var _this2 = this;
                    if ("HAVE_METADATA" === this.state) {
                        var media = this.media(), uri = resolveUrl(this.master.uri, media.uri);
                        this.experimentalLLHLS && (uri = addLLHLSQueryDirectives(uri, media)), this.state = "HAVE_CURRENT_METADATA", this.request = this.vhs_.xhr({
                            uri: uri,
                            withCredentials: this.withCredentials
                        }, function(error, req) {
                            // disposed
                            if (_this2.request) {
                                if (error) return _this2.playlistRequestError(_this2.request, _this2.media(), "HAVE_METADATA");
                                _this2.haveMetadata({
                                    playlistString: _this2.request.responseText,
                                    url: _this2.media().uri,
                                    id: _this2.media().id
                                });
                            }
                        });
                    }
                }, _proto.playlistRequestError = function(xhr, playlist, startingState) {
                    var uri = playlist.uri, id = playlist.id; // any in-flight request is now finished
                    this.request = null, startingState && (this.state = startingState), this.error = {
                        playlist: this.master.playlists[id],
                        status: xhr.status,
                        message: "HLS playlist request error at URL: " + uri + ".",
                        responseText: xhr.responseText,
                        code: xhr.status >= 500 ? 4 : 2
                    }, this.trigger("error");
                }, _proto.parseManifest_ = function(_ref) {
                    var _this3 = this, url = _ref.url;
                    return parseManifest({
                        onwarn: function(_ref2) {
                            var message = _ref2.message;
                            return _this3.logger_("m3u8-parser warn for " + url + ": " + message);
                        },
                        oninfo: function(_ref3) {
                            var message = _ref3.message;
                            return _this3.logger_("m3u8-parser info for " + url + ": " + message);
                        },
                        manifestString: _ref.manifestString,
                        customTagParsers: this.customTagParsers,
                        customTagMappers: this.customTagMappers,
                        experimentalLLHLS: this.experimentalLLHLS
                    });
                }, /**
                 * Update the playlist loader's state in response to a new or updated playlist.
                 *
                 * @param {string} [playlistString]
                 *        Playlist string (if playlistObject is not provided)
                 * @param {Object} [playlistObject]
                 *        Playlist object (if playlistString is not provided)
                 * @param {string} url
                 *        URL of playlist
                 * @param {string} id
                 *        ID to use for playlist
                 */ _proto.haveMetadata = function(_ref4) {
                    var playlistString = _ref4.playlistString, playlistObject = _ref4.playlistObject, url = _ref4.url, id = _ref4.id; // any in-flight request is now finished
                    this.request = null, this.state = "HAVE_METADATA";
                    var playlist = playlistObject || this.parseManifest_({
                        url: url,
                        manifestString: playlistString
                    });
                    playlist.lastRequest = Date.now(), setupMediaPlaylist({
                        playlist: playlist,
                        uri: url,
                        id: id
                    });
                    var update = updateMaster$1(this.master, playlist);
                    this.targetDuration = playlist.partTargetDuration || playlist.targetDuration, this.pendingMedia_ = null, update ? (this.master = update, this.media_ = this.master.playlists[id]) : this.trigger("playlistunchanged"), this.updateMediaUpdateTimeout_(refreshDelay(this.media(), !!update)), this.trigger("loadedplaylist");
                }, /**
                 * Abort any outstanding work and clean up.
                 */ _proto.dispose = function() {
                    this.trigger("dispose"), this.stopRequest(), global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.mediaUpdateTimeout), global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.finalRenditionTimeout), this.off();
                }, _proto.stopRequest = function() {
                    if (this.request) {
                        var oldRequest = this.request;
                        this.request = null, oldRequest.onreadystatechange = null, oldRequest.abort();
                    }
                }, /**
                 * When called without any arguments, returns the currently
                 * active media playlist. When called with a single argument,
                 * triggers the playlist loader to asynchronously switch to the
                 * specified media playlist. Calling this method while the
                 * loader is in the HAVE_NOTHING causes an error to be emitted
                 * but otherwise has no effect.
                 *
                 * @param {Object=} playlist the parsed media playlist
                 * object to switch to
                 * @param {boolean=} shouldDelay whether we should delay the request by half target duration
                 *
                 * @return {Playlist} the current loaded media
                 */ _proto.media = function(playlist, shouldDelay) {
                    var _this4 = this; // getter
                    if (!playlist) return this.media_;
                     // setter
                    if ("HAVE_NOTHING" === this.state) throw Error("Cannot switch media playlist from " + this.state);
                     // find the playlist object if the target playlist has been
                    // specified by URI
                    if ("string" == typeof playlist) {
                        if (!this.master.playlists[playlist]) throw Error("Unknown playlist URI: " + playlist);
                        playlist = this.master.playlists[playlist];
                    }
                    if (global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.finalRenditionTimeout), shouldDelay) {
                        var delay = (playlist.partTargetDuration || playlist.targetDuration) / 2 * 1000 || 5000;
                        this.finalRenditionTimeout = global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(this.media.bind(this, playlist, !1), delay);
                        return;
                    }
                    var startingState = this.state, mediaChange = !this.media_ || playlist.id !== this.media_.id, masterPlaylistRef = this.master.playlists[playlist.id];
                    if (masterPlaylistRef && masterPlaylistRef.endList || // handle the case of a playlist object (e.g., if using vhs-json with a resolved
                    // media playlist or, for the case of demuxed audio, a resolved audio media group)
                    playlist.endList && playlist.segments.length) {
                        this.request && (this.request.onreadystatechange = null, this.request.abort(), this.request = null), this.state = "HAVE_METADATA", this.media_ = playlist, mediaChange && (this.trigger("mediachanging"), "HAVE_MASTER" === startingState ? // The initial playlist was a master manifest, and the first media selected was
                        // also provided (in the form of a resolved playlist object) as part of the
                        // source object (rather than just a URL). Therefore, since the media playlist
                        // doesn't need to be requested, loadedmetadata won't trigger as part of the
                        // normal flow, and needs an explicit trigger here.
                        this.trigger("loadedmetadata") : this.trigger("mediachange"));
                        return;
                    } // We update/set the timeout here so that live playlists
                    if (// that are not a media change will "start" the loader as expected.
                    // We expect that this function will start the media update timeout
                    // cycle again. This also prevents a playlist switch failure from
                    // causing us to stall during live.
                    this.updateMediaUpdateTimeout_(refreshDelay(playlist, !0)), mediaChange) {
                        if (this.state = "SWITCHING_MEDIA", this.request) {
                            if (playlist.resolvedUri === this.request.url) // requesting to switch to the same playlist multiple times
                            // has no effect after the first
                            return;
                            this.request.onreadystatechange = null, this.request.abort(), this.request = null;
                        } // request the new playlist
                        this.media_ && this.trigger("mediachanging"), this.pendingMedia_ = playlist, this.request = this.vhs_.xhr({
                            uri: playlist.resolvedUri,
                            withCredentials: this.withCredentials
                        }, function(error, req) {
                            // disposed
                            if (_this4.request) {
                                if (playlist.lastRequest = Date.now(), playlist.resolvedUri = resolveManifestRedirect(_this4.handleManifestRedirects, playlist.resolvedUri, req), error) return _this4.playlistRequestError(_this4.request, playlist, startingState);
                                _this4.haveMetadata({
                                    playlistString: req.responseText,
                                    url: playlist.uri,
                                    id: playlist.id
                                }), "HAVE_MASTER" === startingState ? _this4.trigger("loadedmetadata") : _this4.trigger("mediachange");
                            }
                        });
                    }
                }, /**
                 * pause loading of the playlist
                 */ _proto.pause = function() {
                    this.mediaUpdateTimeout && (global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.mediaUpdateTimeout), this.mediaUpdateTimeout = null), this.stopRequest(), "HAVE_NOTHING" === this.state && // If we pause the loader before any data has been retrieved, its as if we never
                    // started, so reset to an unstarted state.
                    (this.started = !1), "SWITCHING_MEDIA" === this.state ? this.media_ ? this.state = "HAVE_METADATA" : this.state = "HAVE_MASTER" : "HAVE_CURRENT_METADATA" === this.state && (this.state = "HAVE_METADATA");
                }, /**
                 * start loading of the playlist
                 */ _proto.load = function(shouldDelay) {
                    var _this5 = this;
                    this.mediaUpdateTimeout && (global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.mediaUpdateTimeout), this.mediaUpdateTimeout = null);
                    var media = this.media();
                    if (shouldDelay) {
                        var delay = media ? (media.partTargetDuration || media.targetDuration) / 2 * 1000 : 5000;
                        this.mediaUpdateTimeout = global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(function() {
                            _this5.mediaUpdateTimeout = null, _this5.load();
                        }, delay);
                        return;
                    }
                    if (!this.started) {
                        this.start();
                        return;
                    }
                    media && !media.endList ? this.trigger("mediaupdatetimeout") : this.trigger("loadedplaylist");
                }, _proto.updateMediaUpdateTimeout_ = function(delay) {
                    var _this6 = this;
                    this.mediaUpdateTimeout && (global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.mediaUpdateTimeout), this.mediaUpdateTimeout = null), this.media() && !this.media().endList && (this.mediaUpdateTimeout = global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(function() {
                        _this6.mediaUpdateTimeout = null, _this6.trigger("mediaupdatetimeout"), _this6.updateMediaUpdateTimeout_(delay);
                    }, delay));
                }, /**
                 * start loading of the playlist
                 */ _proto.start = function() {
                    var _this7 = this;
                    if (this.started = !0, "object" == typeof this.src) {
                        this.src.uri || (this.src.uri = global_window__WEBPACK_IMPORTED_MODULE_0___default().location.href), // request for pre-resolved manifests, add on resolvedUri here.
                        this.src.resolvedUri = this.src.uri, // request can be skipped (since the top level of the manifest, at a minimum, is
                        // already available as a parsed manifest object). However, if the manifest object
                        // represents a master playlist, some media playlists may need to be resolved before
                        // the starting segment list is available. Therefore, go directly to setup of the
                        // initial playlist, and let the normal flow continue from there.
                        //
                        // Note that the call to setup is asynchronous, as other sections of VHS may assume
                        // that the first request is asynchronous.
                        setTimeout(function() {
                            _this7.setupInitialPlaylist(_this7.src);
                        }, 0);
                        return;
                    } // request the specified URL
                    this.request = this.vhs_.xhr({
                        uri: this.src,
                        withCredentials: this.withCredentials
                    }, function(error, req) {
                        // disposed
                        if (_this7.request) {
                            if (_this7.request = null, error) return _this7.error = {
                                status: req.status,
                                message: "HLS playlist request error at URL: " + _this7.src + ".",
                                responseText: req.responseText,
                                // MEDIA_ERR_NETWORK
                                code: 2
                            }, "HAVE_NOTHING" === _this7.state && (_this7.started = !1), _this7.trigger("error");
                            _this7.src = resolveManifestRedirect(_this7.handleManifestRedirects, _this7.src, req);
                            var manifest = _this7.parseManifest_({
                                manifestString: req.responseText,
                                url: _this7.src
                            });
                            _this7.setupInitialPlaylist(manifest);
                        } // clear the loader's request reference
                    });
                }, _proto.srcUri = function() {
                    return "string" == typeof this.src ? this.src : this.src.uri;
                }, /**
                 * Given a manifest object that's either a master or media playlist, trigger the proper
                 * events and set the state of the playlist loader.
                 *
                 * If the manifest object represents a master playlist, `loadedplaylist` will be
                 * triggered to allow listeners to select a playlist. If none is selected, the loader
                 * will default to the first one in the playlists array.
                 *
                 * If the manifest object represents a media playlist, `loadedplaylist` will be
                 * triggered followed by `loadedmetadata`, as the only available playlist is loaded.
                 *
                 * In the case of a media playlist, a master playlist object wrapper with one playlist
                 * will be created so that all logic can handle playlists in the same fashion (as an
                 * assumed manifest object schema).
                 *
                 * @param {Object} manifest
                 *        The parsed manifest object
                 */ _proto.setupInitialPlaylist = function(manifest) {
                    if (this.state = "HAVE_MASTER", manifest.playlists) {
                        this.master = manifest, addPropertiesToMaster(this.master, this.srcUri()), // then resolve URIs in advance, as they are usually done after a playlist request,
                        // which may not happen if the playlist is resolved.
                        manifest.playlists.forEach(function(playlist) {
                            playlist.segments = getAllSegments(playlist), playlist.segments.forEach(function(segment) {
                                resolveSegmentUris(segment, playlist.resolvedUri);
                            });
                        }), this.trigger("loadedplaylist"), this.request || // no media playlist was specifically selected so start
                        // from the first listed one
                        this.media(this.master.playlists[0]);
                        return;
                    } // In order to support media playlists passed in as vhs-json, the case where the uri
                    // is not provided as part of the manifest should be considered, and an appropriate
                    // default used.
                    var uri = this.srcUri() || global_window__WEBPACK_IMPORTED_MODULE_0___default().location.href;
                    this.master = masterForMedia(manifest, uri), this.haveMetadata({
                        playlistObject: manifest,
                        url: uri,
                        id: this.master.playlists[0].id
                    }), this.trigger("loadedmetadata");
                }, PlaylistLoader;
            }(EventTarget$1), videojsXHR = videojs.xhr, mergeOptions$1 = videojs.mergeOptions, callbackWrapper = function(request, error, response, callback) {
                var reqResponse = "arraybuffer" === request.responseType ? request.response : request.responseText;
                error || !reqResponse || (request.responseTime = Date.now(), request.roundTripTime = request.responseTime - request.requestTime, request.bytesReceived = reqResponse.byteLength || reqResponse.length, request.bandwidth || (request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8000))), response.headers && (request.responseHeaders = response.headers), error && "ETIMEDOUT" === error.code && (request.timedout = !0), error || request.aborted || 200 === response.statusCode || 206 === response.statusCode || 0 === response.statusCode || (error = Error("XHR Failed with a response of: " + (request && (reqResponse || request.responseText)))), callback(error, request);
            }, xhrFactory = function() {
                var xhr = function XhrFunction(options, callback) {
                    // Add a default timeout
                    options = mergeOptions$1({
                        timeout: 45e3
                    }, options);
                    // object before we construct the xhr request
                    var beforeRequest = XhrFunction.beforeRequest || videojs.Vhs.xhr.beforeRequest;
                    if (beforeRequest && "function" == typeof beforeRequest) {
                        var newOptions = beforeRequest(options);
                        newOptions && (options = newOptions);
                    } // Use the standard videojs.xhr() method unless `videojs.Vhs.xhr` has been overriden
                    var request = (!0 === videojs.Vhs.xhr.original ? videojsXHR : videojs.Vhs.xhr)(options, function(error, response) {
                        return callbackWrapper(request, error, response, callback);
                    }), originalAbort = request.abort;
                    return request.abort = function() {
                        return request.aborted = !0, originalAbort.apply(request, arguments);
                    }, request.uri = options.uri, request.requestTime = Date.now(), request;
                };
                return xhr.original = !0, xhr;
            }, byterangeStr = function(byterange) {
                // `byterangeEnd` is one less than `offset + length` because the HTTP range
                // header uses inclusive ranges
                var byterangeEnd = byterange.offset + byterange.length - 1;
                return "bytes=" + byterange.offset + "-" + byterangeEnd;
            }, segmentXhrHeaders = function(segment) {
                var headers = {};
                return segment.byterange && (headers.Range = byterangeStr(segment.byterange)), headers;
            }, formatHexString = function(e, i) {
                var value = e.toString(16);
                return "00".substring(0, 2 - value.length) + value + (i % 2 ? " " : "");
            }, formatAsciiString = function(e) {
                return e >= 0x20 && e < 0x7e ? String.fromCharCode(e) : ".";
            }, createTransferableMessage = function(message) {
                var transferable = {};
                return Object.keys(message).forEach(function(key) {
                    var value = message[key];
                    ArrayBuffer.isView(value) ? transferable[key] = {
                        bytes: value.buffer,
                        byteOffset: value.byteOffset,
                        byteLength: value.byteLength
                    } : transferable[key] = value;
                }), transferable;
            }, initSegmentId = function(initSegment) {
                var byterange = initSegment.byterange || {
                    length: 1 / 0,
                    offset: 0
                };
                return [
                    byterange.length,
                    byterange.offset,
                    initSegment.resolvedUri
                ].join(",");
            }, segmentKeyId = function(key) {
                return key.resolvedUri;
            }, hexDump = function(data) {
                for(var bytes = Array.prototype.slice.call(data), result = "", j = 0; j < bytes.length / 16; j++)result += bytes.slice(16 * j, 16 * j + 16).map(formatHexString).join("") + " " + bytes.slice(16 * j, 16 * j + 16).map(formatAsciiString).join("") + "\n";
                return result;
            }, utils = /*#__PURE__*/ Object.freeze({
                __proto__: null,
                createTransferableMessage: createTransferableMessage,
                initSegmentId: initSegmentId,
                segmentKeyId: segmentKeyId,
                hexDump: hexDump,
                tagDump: function(_ref) {
                    return hexDump(_ref.bytes);
                },
                textRanges: function(ranges) {
                    var i, i1, result = "";
                    for(i1 = 0; i1 < ranges.length; i1++)result += (i = i1, ranges.start(i) + "-" + ranges.end(i) + " ");
                    return result;
                }
            }), playerTimeToProgramTime = function(playerTime, segment) {
                if (!segment.dateTimeObject) // Can't convert without an "anchor point" for the program time (i.e., a time that can
                // be used to map the start of a segment with a real world time).
                return null;
                var transmuxerPrependedSeconds = segment.videoTimingInfo.transmuxerPrependedSeconds, transmuxedStart = segment.videoTimingInfo.transmuxedPresentationStart;
                return new Date(segment.dateTimeObject.getTime() + 1000 * (playerTime - (transmuxedStart + transmuxerPrependedSeconds)));
            }, findSegmentForProgramTime = function(programTime, playlist) {
                try {
                    dateTimeObject = new Date(programTime);
                } catch (e) {
                    return null;
                }
                if (!playlist || !playlist.segments || 0 === playlist.segments.length) return null;
                var videoTimingInfo, dateTimeObject, segment = playlist.segments[0];
                if (dateTimeObject < segment.dateTimeObject) // Requested time is before stream start.
                return null;
                for(var i = 0; i < playlist.segments.length - 1 && (segment = playlist.segments[i], !(dateTimeObject < playlist.segments[i + 1].dateTimeObject)); i++);
                var lastSegment = playlist.segments[playlist.segments.length - 1], lastSegmentStart = lastSegment.dateTimeObject, lastSegmentDuration = lastSegment.videoTimingInfo ? (videoTimingInfo = lastSegment.videoTimingInfo).transmuxedPresentationEnd - videoTimingInfo.transmuxedPresentationStart - videoTimingInfo.transmuxerPrependedSeconds : lastSegment.duration + 0.25 * lastSegment.duration;
                return dateTimeObject > new Date(lastSegmentStart.getTime() + 1000 * lastSegmentDuration) ? null : (dateTimeObject > lastSegmentStart && (segment = lastSegment), {
                    segment: segment,
                    estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : Playlist.duration(playlist, playlist.mediaSequence + playlist.segments.indexOf(segment)),
                    // Although, given that all segments have accurate date time objects, the segment
                    // selected should be accurate, unless the video has been transmuxed at some point
                    // (determined by the presence of the videoTimingInfo object), the segment's "player
                    // time" (the start time in the player) can't be considered accurate.
                    type: segment.videoTimingInfo ? "accurate" : "estimate"
                });
            }, findSegmentForPlayerTime = function(time, playlist) {
                // Assumptions:
                // - there will always be a segment.duration
                // - we can start from zero
                // - segments are in time order
                if (!playlist || !playlist.segments || 0 === playlist.segments.length) return null;
                for(var segment, segmentEnd = 0, i = 0; i < playlist.segments.length && !(time <= // should contain the most accurate values we have for the segment's player times.
                //
                // Use the accurate transmuxedPresentationEnd value if it is available, otherwise fall
                // back to an estimate based on the manifest derived (inaccurate) segment.duration, to
                // calculate an end value.
                (segmentEnd = (segment = playlist.segments[i]).videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationEnd : segmentEnd + segment.duration)); i++);
                var lastSegment = playlist.segments[playlist.segments.length - 1];
                if (lastSegment.videoTimingInfo && lastSegment.videoTimingInfo.transmuxedPresentationEnd < time) // The time requested is beyond the stream end.
                return null;
                if (time > segmentEnd) {
                    // The time is within or beyond the last segment.
                    //
                    // Check to see if the time is beyond a reasonable guess of the end of the stream.
                    if (time > segmentEnd + 0.25 * lastSegment.duration) // Technically, because the duration value is only an estimate, the time may still
                    // exist in the last segment, however, there isn't enough information to make even
                    // a reasonable estimate.
                    return null;
                    segment = lastSegment;
                }
                return {
                    segment: segment,
                    estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : segmentEnd - segment.duration,
                    // Because videoTimingInfo is only set after transmux, it is the only way to get
                    // accurate timing values.
                    type: segment.videoTimingInfo ? "accurate" : "estimate"
                };
            }, getOffsetFromTimestamp = function(comparisonTimeStamp, programTime) {
                try {
                    segmentDateTime = new Date(comparisonTimeStamp), programDateTime = new Date(programTime);
                } catch (e) {
                // TODO handle error
                }
                var segmentDateTime, programDateTime, segmentTimeEpoch = segmentDateTime.getTime();
                return (programDateTime.getTime() - segmentTimeEpoch) / 1000;
            }, verifyProgramDateTimeTags = function(playlist) {
                if (!playlist.segments || 0 === playlist.segments.length) return !1;
                for(var i = 0; i < playlist.segments.length; i++)if (!playlist.segments[i].dateTimeObject) return !1;
                return !0;
            }, getProgramTime = function(_ref) {
                var playlist = _ref.playlist, _ref$time = _ref.time, time = void 0 === _ref$time ? void 0 : _ref$time, callback = _ref.callback;
                if (!callback) throw Error("getProgramTime: callback must be provided");
                if (!playlist || void 0 === time) return callback({
                    message: "getProgramTime: playlist and time must be provided"
                });
                var matchedSegment = findSegmentForPlayerTime(time, playlist);
                if (!matchedSegment) return callback({
                    message: "valid programTime was not found"
                });
                if ("estimate" === matchedSegment.type) return callback({
                    message: "Accurate programTime could not be determined. Please seek to e.seekTime and try again",
                    seekTime: matchedSegment.estimatedStart
                });
                var programTimeObject = {
                    mediaSeconds: time
                }, programTime = playerTimeToProgramTime(time, matchedSegment.segment);
                return programTime && (programTimeObject.programDateTime = programTime.toISOString()), callback(null, programTimeObject);
            }, seekToProgramTime = function seekToProgramTime(_ref2) {
                var programTime = _ref2.programTime, playlist = _ref2.playlist, _ref2$retryCount = _ref2.retryCount, retryCount = void 0 === _ref2$retryCount ? 2 : _ref2$retryCount, seekTo = _ref2.seekTo, _ref2$pauseAfterSeek = _ref2.pauseAfterSeek, pauseAfterSeek = void 0 === _ref2$pauseAfterSeek || _ref2$pauseAfterSeek, tech = _ref2.tech, callback = _ref2.callback;
                if (!callback) throw Error("seekToProgramTime: callback must be provided");
                if (void 0 === programTime || !playlist || !seekTo) return callback({
                    message: "seekToProgramTime: programTime, seekTo and playlist must be provided"
                });
                if (!playlist.endList && !tech.hasStarted_) return callback({
                    message: "player must be playing a live stream to start buffering"
                });
                if (!verifyProgramDateTimeTags(playlist)) return callback({
                    message: "programDateTime tags must be provided in the manifest " + playlist.resolvedUri
                });
                var matchedSegment = findSegmentForProgramTime(programTime, playlist); // no match
                if (!matchedSegment) return callback({
                    message: programTime + " was not found in the stream"
                });
                var segment = matchedSegment.segment, mediaOffset = getOffsetFromTimestamp(segment.dateTimeObject, programTime);
                if ("estimate" === matchedSegment.type) return(// we've run out of retries
                0 === retryCount ? callback({
                    message: programTime + " is not buffered yet. Try again"
                }) : (seekTo(matchedSegment.estimatedStart + mediaOffset), void tech.one("seeked", function() {
                    seekToProgramTime({
                        programTime: programTime,
                        playlist: playlist,
                        retryCount: retryCount - 1,
                        seekTo: seekTo,
                        pauseAfterSeek: pauseAfterSeek,
                        tech: tech,
                        callback: callback
                    });
                })));
                 // Since the segment.start value is determined from the buffered end or ending time
                // of the prior segment, the seekToTime doesn't need to account for any transmuxer
                // modifications.
                var seekToTime = segment.start + mediaOffset;
                tech.one("seeked", function() {
                    return callback(null, tech.currentTime());
                }), pauseAfterSeek && tech.pause(), seekTo(seekToTime);
            }, callbackOnCompleted = function(request, cb) {
                if (4 === request.readyState) return cb();
            }, containerRequest = function(uri, xhr, cb) {
                var id3Offset, bytes = [], finished = !1, endRequestAndCallback = function(err, req, type, _bytes) {
                    return req.abort(), finished = !0, cb(err, req, type, _bytes);
                }, progressListener = function(error, request) {
                    if (!finished) {
                        if (error) return endRequestAndCallback(error, request, "", bytes);
                         // grap the new part of content that was just downloaded
                        var newPart = request.responseText.substring(bytes && bytes.byteLength || 0, request.responseText.length); // add that onto bytes
                        // or we need at least two bytes after an id3Offset
                        if (bytes = (0, _videojs_vhs_utils_es_byte_helpers__WEBPACK_IMPORTED_MODULE_13__ /* .concatTypedArrays */ .lx)(bytes, (0, _videojs_vhs_utils_es_byte_helpers__WEBPACK_IMPORTED_MODULE_13__ /* .stringToBytes */ .qX)(newPart, !0)), id3Offset = id3Offset || (0, _videojs_vhs_utils_es_id3_helpers__WEBPACK_IMPORTED_MODULE_11__ /* .getId3Offset */ .c)(bytes), bytes.length < 10 || id3Offset && bytes.length < id3Offset + 2) return callbackOnCompleted(request, function() {
                            return endRequestAndCallback(error, request, "", bytes);
                        });
                        var type = (0, _videojs_vhs_utils_es_containers__WEBPACK_IMPORTED_MODULE_12__ /* .detectContainerForBytes */ .Xm)(bytes); // if this looks like a ts segment but we don't have enough data
                        return(// to see the second sync byte, wait until we have enough data
                        // before declaring it ts
                        "ts" === type && bytes.length < 188 || !type && bytes.length < 376 ? callbackOnCompleted(request, function() {
                            return endRequestAndCallback(error, request, "", bytes);
                        }) : endRequestAndCallback(null, request, type, bytes) // this may be an unsynced ts segment
                        );
                    }
                }, request = xhr({
                    uri: uri,
                    beforeSend: function(request) {
                        // this forces the browser to pass the bytes to us unprocessed
                        request.overrideMimeType("text/plain; charset=x-user-defined"), request.addEventListener("progress", function(_ref) {
                            return _ref.total, _ref.loaded, callbackWrapper(request, null, {
                                statusCode: request.status
                            }, progressListener);
                        });
                    }
                }, function(error, response) {
                    return callbackWrapper(request, error, response, progressListener);
                });
                return request;
            }, EventTarget = videojs.EventTarget, mergeOptions = videojs.mergeOptions, dashPlaylistUnchanged = function(a, b) {
                if (!isPlaylistUnchanged(a, b) || a.sidx && b.sidx && (a.sidx.offset !== b.sidx.offset || a.sidx.length !== b.sidx.length) || !a.sidx && b.sidx || a.sidx && !b.sidx || a.segments && !b.segments || !a.segments && b.segments) return !1;
                 // for dash the above check will often return true in scenarios where
                if (!a.segments && !b.segments) return !0;
                 // check segments themselves
                for(var i = 0; i < a.segments.length; i++){
                    var aSegment = a.segments[i], bSegment = b.segments[i];
                    if (aSegment.uri !== bSegment.uri) return !1;
                     // neither segment has a byterange, there will be no byterange change.
                    if (aSegment.byterange || bSegment.byterange) {
                        var aByterange = aSegment.byterange, bByterange = bSegment.byterange;
                        if (aByterange && !bByterange || !aByterange && bByterange || aByterange.offset !== bByterange.offset || aByterange.length !== bByterange.length) return !1;
                         // if both segments have byterange with different offsets, there was a change.
                    }
                } // if everything was the same with segments, this is the same playlist.
                return !0;
            }, parseMasterXml = function(_ref) {
                var masterXml = _ref.masterXml, srcUrl = _ref.srcUrl, clientOffset = _ref.clientOffset, sidxMapping = _ref.sidxMapping, master = (0, mpd_parser__WEBPACK_IMPORTED_MODULE_9__ /* .parse */ .Qc)(masterXml, {
                    manifestUri: srcUrl,
                    clientOffset: clientOffset,
                    sidxMapping: sidxMapping
                });
                return addPropertiesToMaster(master, srcUrl), master;
            }, updateMaster = function(oldMaster, newMaster, sidxMapping) {
                for(var noChanges = !0, update = mergeOptions(oldMaster, {
                    // These are top level properties that can be updated
                    duration: newMaster.duration,
                    minimumUpdatePeriod: newMaster.minimumUpdatePeriod
                }), i = 0; i < newMaster.playlists.length; i++){
                    var playlist = newMaster.playlists[i];
                    if (playlist.sidx) {
                        var sidxKey = (0, mpd_parser__WEBPACK_IMPORTED_MODULE_9__ /* .generateSidxKey */ .mm)(playlist.sidx); // add sidx segments to the playlist if we have all the sidx info already
                        sidxMapping && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx && (0, mpd_parser__WEBPACK_IMPORTED_MODULE_9__ /* .addSidxSegmentsToPlaylist */ .jp)(playlist, sidxMapping[sidxKey].sidx, playlist.sidx.resolvedUri);
                    }
                    var playlistUpdate = updateMaster$1(update, playlist, dashPlaylistUnchanged);
                    playlistUpdate && (update = playlistUpdate, noChanges = !1);
                } // Then update media group playlists
                return (forEachMediaGroup(newMaster, function(properties, type, group, label) {
                    if (properties.playlists && properties.playlists.length) {
                        var id = properties.playlists[0].id, _playlistUpdate = updateMaster$1(update, properties.playlists[0], dashPlaylistUnchanged);
                        _playlistUpdate && ((update = _playlistUpdate).mediaGroups[type][group][label].playlists[0] = update.playlists[id], noChanges = !1);
                    }
                }), newMaster.minimumUpdatePeriod !== oldMaster.minimumUpdatePeriod && (noChanges = !1), noChanges) ? null : update;
            }, compareSidxEntry = function(playlists, oldSidxMapping) {
                var newSidxMapping = {};
                for(var id in playlists){
                    var currentSidxInfo = playlists[id].sidx;
                    if (currentSidxInfo) {
                        var a, key = (0, mpd_parser__WEBPACK_IMPORTED_MODULE_9__ /* .generateSidxKey */ .mm)(currentSidxInfo);
                        if (!oldSidxMapping[key]) break;
                        (!(a = oldSidxMapping[key].sidxInfo).map && !currentSidxInfo.map || a.map && currentSidxInfo.map && a.map.byterange.offset === currentSidxInfo.map.byterange.offset && a.map.byterange.length === currentSidxInfo.map.byterange.length) && a.uri === currentSidxInfo.uri && a.byterange.offset === currentSidxInfo.byterange.offset && a.byterange.length === currentSidxInfo.byterange.length && (newSidxMapping[key] = oldSidxMapping[key]);
                    }
                }
                return newSidxMapping;
            }, filterChangedSidxMappings = function(master, oldSidxMapping) {
                var mediaGroupSidx = compareSidxEntry(master.playlists, oldSidxMapping);
                return forEachMediaGroup(master, function(properties, mediaType, groupKey, labelKey) {
                    if (properties.playlists && properties.playlists.length) {
                        var playlists = properties.playlists;
                        mediaGroupSidx = mergeOptions(mediaGroupSidx, compareSidxEntry(playlists, oldSidxMapping));
                    }
                }), mediaGroupSidx;
            }, DashPlaylistLoader = /*#__PURE__*/ function(_EventTarget) {
                // playlist loader setups from media groups will expect to be able to pass a playlist
                // (since there aren't external URLs to media playlists with DASH)
                function DashPlaylistLoader(srcUrlOrPlaylist, vhs, options, masterPlaylistLoader) {
                    void 0 === options && (options = {}), (_this = _EventTarget.call(this) || this).masterPlaylistLoader_ = masterPlaylistLoader || (0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), masterPlaylistLoader || (_this.isMaster_ = !0);
                    var _this, _options = options, _options$withCredenti = _options.withCredentials, _options$handleManife = _options.handleManifestRedirects;
                    if (_this.vhs_ = vhs, _this.withCredentials = void 0 !== _options$withCredenti && _options$withCredenti, _this.handleManifestRedirects = void 0 !== _options$handleManife && _options$handleManife, !srcUrlOrPlaylist) throw Error("A non-empty playlist URL or object is required");
                     // event naming?
                    return _this.on("minimumUpdatePeriod", function() {
                        _this.refreshXml_();
                    }), _this.on("mediaupdatetimeout", function() {
                        _this.refreshMedia_(_this.media().id);
                    }), _this.state = "HAVE_NOTHING", _this.loadedPlaylists_ = {}, _this.logger_ = logger("DashPlaylistLoader"), _this.isMaster_ ? (_this.masterPlaylistLoader_.srcUrl = srcUrlOrPlaylist, // once multi-period is refactored
                    _this.masterPlaylistLoader_.sidxMapping_ = {}) : _this.childPlaylist_ = srcUrlOrPlaylist, _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(DashPlaylistLoader, _EventTarget);
                var _proto = DashPlaylistLoader.prototype;
                return _proto.requestErrored_ = function(err, request, startingState) {
                    return(// disposed
                    !this.request || ((this.request = null, err) ? (// use the provided error object or create one
                    // based on the request/response
                    this.error = "object" != typeof err || err instanceof Error ? {
                        status: request.status,
                        message: "DASH request error at URL: " + request.uri,
                        response: request.response,
                        // MEDIA_ERR_NETWORK
                        code: 2
                    } : err, startingState && (this.state = startingState), this.trigger("error"), !0) : void 0) // pending request is cleared
                    );
                }, /**
                 * Verify that the container of the sidx segment can be parsed
                 * and if it can, get and parse that segment.
                 */ _proto.addSidxSegments_ = function(playlist, startingState, cb) {
                    var _this2 = this, sidxKey = playlist.sidx && (0, mpd_parser__WEBPACK_IMPORTED_MODULE_9__ /* .generateSidxKey */ .mm)(playlist.sidx);
                    if (!playlist.sidx || !sidxKey || this.masterPlaylistLoader_.sidxMapping_[sidxKey]) {
                        // keep this function async
                        this.mediaRequest_ = global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(function() {
                            return cb(!1);
                        }, 0);
                        return;
                    } // resolve the segment URL relative to the playlist
                    var uri = resolveManifestRedirect(this.handleManifestRedirects, playlist.sidx.resolvedUri), fin = function(err, request) {
                        if (!_this2.requestErrored_(err, request, startingState)) {
                            var sidx, sidxMapping = _this2.masterPlaylistLoader_.sidxMapping_;
                            try {
                                sidx = mux_js_lib_tools_parse_sidx__WEBPACK_IMPORTED_MODULE_10___default()((0, _videojs_vhs_utils_es_byte_helpers__WEBPACK_IMPORTED_MODULE_13__ /* .toUint8 */ .Ki)(request.response).subarray(8));
                            } catch (e) {
                                // sidx parsing failed.
                                _this2.requestErrored_(e, request, startingState);
                                return;
                            }
                            return sidxMapping[sidxKey] = {
                                sidxInfo: playlist.sidx,
                                sidx: sidx
                            }, (0, mpd_parser__WEBPACK_IMPORTED_MODULE_9__ /* .addSidxSegmentsToPlaylist */ .jp)(playlist, sidx, playlist.sidx.resolvedUri), cb(!0);
                        }
                    };
                    this.request = containerRequest(uri, this.vhs_.xhr, function(err, request, container, bytes) {
                        if (err) return fin(err, request);
                        if (!container || "mp4" !== container) return fin({
                            status: request.status,
                            message: "Unsupported " + (container || "unknown") + " container type for sidx segment at URL: " + uri,
                            // response is just bytes in this case
                            // but we really don't want to return that.
                            response: "",
                            playlist: playlist,
                            internal: !0,
                            blacklistDuration: 1 / 0,
                            // MEDIA_ERR_NETWORK
                            code: 2
                        }, request);
                         // if we already downloaded the sidx bytes in the container request, use them
                        var _playlist$sidx$bytera = playlist.sidx.byterange, offset = _playlist$sidx$bytera.offset, length = _playlist$sidx$bytera.length;
                        if (bytes.length >= length + offset) return fin(err, {
                            response: bytes.subarray(offset, offset + length),
                            status: request.status,
                            uri: request.uri
                        });
                         // otherwise request sidx bytes
                        _this2.request = _this2.vhs_.xhr({
                            uri: uri,
                            responseType: "arraybuffer",
                            headers: segmentXhrHeaders({
                                byterange: playlist.sidx.byterange
                            })
                        }, fin);
                    });
                }, _proto.dispose = function() {
                    this.trigger("dispose"), this.stopRequest(), this.loadedPlaylists_ = {}, global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.minimumUpdatePeriodTimeout_), global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.mediaRequest_), global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.mediaUpdateTimeout), this.mediaUpdateTimeout = null, this.mediaRequest_ = null, this.minimumUpdatePeriodTimeout_ = null, this.masterPlaylistLoader_.createMupOnMedia_ && (this.off("loadedmetadata", this.masterPlaylistLoader_.createMupOnMedia_), this.masterPlaylistLoader_.createMupOnMedia_ = null), this.off();
                }, _proto.hasPendingRequest = function() {
                    return this.request || this.mediaRequest_;
                }, _proto.stopRequest = function() {
                    if (this.request) {
                        var oldRequest = this.request;
                        this.request = null, oldRequest.onreadystatechange = null, oldRequest.abort();
                    }
                }, _proto.media = function(playlist) {
                    var _this3 = this; // getter
                    if (!playlist) return this.media_;
                     // setter
                    if ("HAVE_NOTHING" === this.state) throw Error("Cannot switch media playlist from " + this.state);
                    var startingState = this.state; // find the playlist object if the target playlist has been specified by URI
                    if ("string" == typeof playlist) {
                        if (!this.masterPlaylistLoader_.master.playlists[playlist]) throw Error("Unknown playlist URI: " + playlist);
                        playlist = this.masterPlaylistLoader_.master.playlists[playlist];
                    }
                    var mediaChange = !this.media_ || playlist.id !== this.media_.id; // switch to previously loaded playlists immediately
                    if (mediaChange && this.loadedPlaylists_[playlist.id] && this.loadedPlaylists_[playlist.id].endList) {
                        this.state = "HAVE_METADATA", this.media_ = playlist, mediaChange && (this.trigger("mediachanging"), this.trigger("mediachange"));
                        return;
                    } // switching to the active playlist is a no-op
                    mediaChange && (this.media_ && this.trigger("mediachanging"), this.addSidxSegments_(playlist, startingState, function(sidxChanged) {
                        // everything is ready just continue to haveMetadata
                        _this3.haveMetadata({
                            startingState: startingState,
                            playlist: playlist
                        });
                    })); // switching from an already loaded playlist
                }, _proto.haveMetadata = function(_ref2) {
                    var startingState = _ref2.startingState, playlist = _ref2.playlist;
                    this.state = "HAVE_METADATA", this.loadedPlaylists_[playlist.id] = playlist, this.mediaRequest_ = null, this.refreshMedia_(playlist.id), "HAVE_MASTER" === startingState ? this.trigger("loadedmetadata") : // trigger media change if the active media has been updated
                    this.trigger("mediachange");
                }, _proto.pause = function() {
                    this.masterPlaylistLoader_.createMupOnMedia_ && (this.off("loadedmetadata", this.masterPlaylistLoader_.createMupOnMedia_), this.masterPlaylistLoader_.createMupOnMedia_ = null), this.stopRequest(), global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.mediaUpdateTimeout), this.mediaUpdateTimeout = null, this.isMaster_ && (global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.masterPlaylistLoader_.minimumUpdatePeriodTimeout_), this.masterPlaylistLoader_.minimumUpdatePeriodTimeout_ = null), "HAVE_NOTHING" === this.state && // If we pause the loader before any data has been retrieved, its as if we never
                    // started, so reset to an unstarted state.
                    (this.started = !1);
                }, _proto.load = function(isFinalRendition) {
                    var _this4 = this;
                    global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.mediaUpdateTimeout), this.mediaUpdateTimeout = null;
                    var media = this.media();
                    if (isFinalRendition) {
                        var delay = media ? media.targetDuration / 2 * 1000 : 5000;
                        this.mediaUpdateTimeout = global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(function() {
                            return _this4.load();
                        }, delay);
                        return;
                    } // because the playlists are internal to the manifest, load should either load the
                    // main manifest, or do nothing but trigger an event
                    if (!this.started) {
                        this.start();
                        return;
                    }
                    media && !media.endList ? (this.isMaster_ && !this.minimumUpdatePeriodTimeout_ && (// Trigger minimumUpdatePeriod to refresh the master manifest
                    this.trigger("minimumUpdatePeriod"), this.updateMinimumUpdatePeriodTimeout_()), this.trigger("mediaupdatetimeout")) : this.trigger("loadedplaylist");
                }, _proto.start = function() {
                    var _this5 = this;
                    // Call this asynchronously to match the xhr request behavior below
                    if (this.started = !0, !this.isMaster_) {
                        this.mediaRequest_ = global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(function() {
                            return _this5.haveMaster_();
                        }, 0);
                        return;
                    }
                    this.requestMaster_(function(req, masterChanged) {
                        _this5.haveMaster_(), _this5.hasPendingRequest() || _this5.media_ || _this5.media(_this5.masterPlaylistLoader_.master.playlists[0]);
                    });
                }, _proto.requestMaster_ = function(cb) {
                    var _this6 = this;
                    this.request = this.vhs_.xhr({
                        uri: this.masterPlaylistLoader_.srcUrl,
                        withCredentials: this.withCredentials
                    }, function(error, req) {
                        if (_this6.requestErrored_(error, req)) {
                            "HAVE_NOTHING" === _this6.state && (_this6.started = !1);
                            return;
                        }
                        var masterChanged = req.responseText !== _this6.masterPlaylistLoader_.masterXml_;
                        if (_this6.masterPlaylistLoader_.masterXml_ = req.responseText, req.responseHeaders && req.responseHeaders.date ? _this6.masterLoaded_ = Date.parse(req.responseHeaders.date) : _this6.masterLoaded_ = Date.now(), _this6.masterPlaylistLoader_.srcUrl = resolveManifestRedirect(_this6.handleManifestRedirects, _this6.masterPlaylistLoader_.srcUrl, req), masterChanged) {
                            _this6.handleMaster_(), _this6.syncClientServerClock_(function() {
                                return cb(req, masterChanged);
                            });
                            return;
                        }
                        return cb(req, masterChanged);
                    });
                }, /**
                 * Parses the master xml for UTCTiming node to sync the client clock to the server
                 * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.
                 *
                 * @param {Function} done
                 *        Function to call when clock sync has completed
                 */ _proto.syncClientServerClock_ = function(done) {
                    var _this7 = this, utcTiming = (0, mpd_parser__WEBPACK_IMPORTED_MODULE_9__ /* .parseUTCTiming */ .LG)(this.masterPlaylistLoader_.masterXml_);
                    return(// server clock
                    null === utcTiming ? (this.masterPlaylistLoader_.clientOffset_ = this.masterLoaded_ - Date.now(), done()) : "DIRECT" === utcTiming.method ? (this.masterPlaylistLoader_.clientOffset_ = utcTiming.value - Date.now(), done()) : void (this.request = this.vhs_.xhr({
                        uri: resolveUrl(this.masterPlaylistLoader_.srcUrl, utcTiming.value),
                        method: utcTiming.method,
                        withCredentials: this.withCredentials
                    }, function(error, req) {
                        var serverTime;
                        // disposed
                        if (_this7.request) {
                            if (error) return(// sync request failed, fall back to using date header from mpd
                            // TODO: log warning
                            _this7.masterPlaylistLoader_.clientOffset_ = _this7.masterLoaded_ - Date.now(), done());
                            serverTime = "HEAD" === utcTiming.method ? req.responseHeaders && req.responseHeaders.date ? Date.parse(req.responseHeaders.date) : _this7.masterLoaded_ : Date.parse(req.responseText), _this7.masterPlaylistLoader_.clientOffset_ = serverTime - Date.now(), done();
                        }
                    })));
                }, _proto.haveMaster_ = function() {
                    this.state = "HAVE_MASTER", this.isMaster_ ? // We have the master playlist at this point, so
                    // trigger this to allow MasterPlaylistController
                    // to make an initial playlist selection
                    this.trigger("loadedplaylist") : this.media_ || // no media playlist was specifically selected so select
                    // the one the child playlist loader was created with
                    this.media(this.childPlaylist_);
                }, _proto.handleMaster_ = function() {
                    // clear media request
                    this.mediaRequest_ = null;
                    var newMaster = parseMasterXml({
                        masterXml: this.masterPlaylistLoader_.masterXml_,
                        srcUrl: this.masterPlaylistLoader_.srcUrl,
                        clientOffset: this.masterPlaylistLoader_.clientOffset_,
                        sidxMapping: this.masterPlaylistLoader_.sidxMapping_
                    }), oldMaster = this.masterPlaylistLoader_.master;
                    oldMaster && (newMaster = updateMaster(oldMaster, newMaster, this.masterPlaylistLoader_.sidxMapping_)), this.masterPlaylistLoader_.master = newMaster || oldMaster;
                    var location = this.masterPlaylistLoader_.master.locations && this.masterPlaylistLoader_.master.locations[0];
                    return location && location !== this.masterPlaylistLoader_.srcUrl && (this.masterPlaylistLoader_.srcUrl = location), (!oldMaster || newMaster && newMaster.minimumUpdatePeriod !== oldMaster.minimumUpdatePeriod) && this.updateMinimumUpdatePeriodTimeout_(), !!newMaster;
                }, _proto.updateMinimumUpdatePeriodTimeout_ = function() {
                    var mpl = this.masterPlaylistLoader_; // cancel any pending creation of mup on media
                    mpl.createMupOnMedia_ && (mpl.off("loadedmetadata", mpl.createMupOnMedia_), mpl.createMupOnMedia_ = null), mpl.minimumUpdatePeriodTimeout_ && (global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(mpl.minimumUpdatePeriodTimeout_), mpl.minimumUpdatePeriodTimeout_ = null);
                    var mup = mpl.master && mpl.master.minimumUpdatePeriod; // If the minimumUpdatePeriod has a value of 0, that indicates that the current
                    // can happen when a live video becomes VOD. skip timeout
                    // creation.
                    if (0 === mup && (mpl.media() ? mup = 1000 * mpl.media().targetDuration : (mpl.createMupOnMedia_ = mpl.updateMinimumUpdatePeriodTimeout_, mpl.one("loadedmetadata", mpl.createMupOnMedia_))), "number" != typeof mup || mup <= 0) {
                        mup < 0 && this.logger_("found invalid minimumUpdatePeriod of " + mup + ", not setting a timeout");
                        return;
                    }
                    this.createMUPTimeout_(mup);
                }, _proto.createMUPTimeout_ = function(mup) {
                    var mpl = this.masterPlaylistLoader_;
                    mpl.minimumUpdatePeriodTimeout_ = global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(function() {
                        mpl.minimumUpdatePeriodTimeout_ = null, mpl.trigger("minimumUpdatePeriod"), mpl.createMUPTimeout_(mup);
                    }, mup);
                }, /**
                 * Sends request to refresh the master xml and updates the parsed master manifest
                 */ _proto.refreshXml_ = function() {
                    var _this8 = this;
                    this.requestMaster_(function(req, masterChanged) {
                        masterChanged && (_this8.media_ && (_this8.media_ = _this8.masterPlaylistLoader_.master.playlists[_this8.media_.id]), _this8.masterPlaylistLoader_.sidxMapping_ = filterChangedSidxMappings(_this8.masterPlaylistLoader_.master, _this8.masterPlaylistLoader_.sidxMapping_), _this8.addSidxSegments_(_this8.media(), _this8.state, function(sidxChanged) {
                            // TODO: do we need to reload the current playlist?
                            _this8.refreshMedia_(_this8.media().id);
                        }));
                    });
                }, /**
                 * Refreshes the media playlist by re-parsing the master xml and updating playlist
                 * references. If this is an alternate loader, the updated parsed manifest is retrieved
                 * from the master loader.
                 */ _proto.refreshMedia_ = function(mediaID) {
                    var _this9 = this;
                    if (!mediaID) throw Error("refreshMedia_ must take a media id");
                     // for master we have to reparse the master xml
                    this.media_ && this.isMaster_ && this.handleMaster_();
                    var playlists = this.masterPlaylistLoader_.master.playlists, mediaChanged = !this.media_ || this.media_ !== playlists[mediaID];
                    mediaChanged ? this.media_ = playlists[mediaID] : this.trigger("playlistunchanged"), this.mediaUpdateTimeout || function createMediaUpdateTimeout() {
                        _this9.media().endList || (_this9.mediaUpdateTimeout = global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(function() {
                            _this9.trigger("mediaupdatetimeout"), createMediaUpdateTimeout();
                        }, refreshDelay(_this9.media(), !!mediaChanged)));
                    }(), this.trigger("loadedplaylist");
                }, DashPlaylistLoader;
            }(EventTarget), Config = {
                GOAL_BUFFER_LENGTH: 30,
                MAX_GOAL_BUFFER_LENGTH: 60,
                BACK_BUFFER_LENGTH: 30,
                GOAL_BUFFER_LENGTH_RATE: 1,
                // 0.5 MB/s
                INITIAL_BANDWIDTH: 4194304,
                // A fudge factor to apply to advertised playlist bitrates to account for
                // temporary flucations in client bandwidth
                BANDWIDTH_VARIANCE: 1.2,
                // How much of the buffer must be filled before we consider upswitching
                BUFFER_LOW_WATER_LINE: 0,
                MAX_BUFFER_LOW_WATER_LINE: 30,
                // TODO: Remove this when experimentalBufferBasedABR is removed
                EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE: 16,
                BUFFER_LOW_WATER_LINE_RATE: 1,
                // If the buffer is greater than the high water line, we won't switch down
                BUFFER_HIGH_WATER_LINE: 30
            }, stringToArrayBuffer = function(string) {
                for(var view = new Uint8Array(new ArrayBuffer(string.length)), i = 0; i < string.length; i++)view[i] = string.charCodeAt(i);
                return view.buffer;
            }, browserWorkerPolyFill = function(workerObj) {
                return(// node only supports on/off
                workerObj.on = workerObj.addEventListener, workerObj.off = workerObj.removeEventListener, workerObj);
            }, createObjectURL = function(str) {
                try {
                    return URL.createObjectURL(new Blob([
                        str
                    ], {
                        type: "application/javascript"
                    }));
                } catch (e) {
                    var blob = new BlobBuilder();
                    return blob.append(str), URL.createObjectURL(blob.getBlob());
                }
            }, factory = function(code) {
                return function() {
                    var objectUrl = createObjectURL(code), worker = browserWorkerPolyFill(new Worker(objectUrl));
                    worker.objURL = objectUrl;
                    var terminate = worker.terminate;
                    return worker.on = worker.addEventListener, worker.off = worker.removeEventListener, worker.terminate = function() {
                        return URL.revokeObjectURL(objectUrl), terminate.call(this);
                    }, worker;
                };
            }, transform = function(code) {
                return "var browserWorkerPolyFill = " + browserWorkerPolyFill.toString() + ";\nbrowserWorkerPolyFill(self);\n" + code;
            }, getWorkerString = function(fn) {
                return fn.toString().replace(/^function.+?{/, "").slice(0, -1);
            }, TransmuxWorker = factory(transform(getWorkerString(function() {
                /**
                     * mux.js
                     *
                     * Copyright (c) Brightcove
                     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
                     *
                     * A lightweight readable stream implemention that handles event dispatching.
                     * Objects that inherit from streams should call init in their constructors.
                     */ var _TransportPacketStream, _TransportParseStream, _ElementaryStream, _AdtsStream, ExpGolomb, _H264Stream, _NalByteStream, PROFILES_WITH_OPTIONAL_SPS_DATA, _AacStream, _VideoSegmentStream, _AudioSegmentStream, _Transmuxer, _CoalesceStream, startTime, getTimescaleFromMediaHeader, Stream = function() {
                    this.init = function() {
                        var listeners = {};
                        /**
                             * Add a listener for a specified event type.
                             * @param type {string} the event name
                             * @param listener {function} the callback to be invoked when an event of
                             * the specified type occurs
                             */ this.on = function(type, listener) {
                            listeners[type] || (listeners[type] = []), listeners[type] = listeners[type].concat(listener);
                        }, /**
                             * Remove a listener for a specified event type.
                             * @param type {string} the event name
                             * @param listener {function} a function previously registered for this
                             * type of event through `on`
                             */ this.off = function(type, listener) {
                            var index;
                            return !!listeners[type] && (index = listeners[type].indexOf(listener), listeners[type] = listeners[type].slice(), listeners[type].splice(index, 1), index > -1);
                        }, /**
                             * Trigger an event of the specified type on this stream. Any additional
                             * arguments to this function are passed as parameters to event listeners.
                             * @param type {string} the event name
                             */ this.trigger = function(type) {
                            var callbacks, i, length, args;
                            if (callbacks = listeners[type]) {
                                // can add a significant amount of overhead. Avoid the
                                // intermediate object creation for the common case of a
                                // single callback argument
                                if (2 == arguments.length) for(i = 0, length = callbacks.length; i < length; ++i)callbacks[i].call(this, arguments[1]);
                                else {
                                    for(args = [], i = arguments.length, i = 1; i < arguments.length; ++i)args.push(arguments[i]);
                                    for(i = 0, length = callbacks.length; i < length; ++i)callbacks[i].apply(this, args);
                                }
                            } // Slicing the arguments on every invocation of this method
                        }, /**
                             * Destroys the stream and cleans up.
                             */ this.dispose = function() {
                            listeners = {};
                        };
                    };
                };
                /**
                     * Forwards all `data` events on this stream to the destination stream. The
                     * destination stream should provide a method `push` to receive the data
                     * events as they arrive.
                     * @param destination {stream} the stream that will receive all `data` events
                     * @param autoFlush {boolean} if false, we will not call `flush` on the destination
                     *                            when the current stream emits a 'done' event
                     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
                     */ Stream.prototype.pipe = function(destination) {
                    return this.on("data", function(data) {
                        destination.push(data);
                    }), this.on("done", function(flushSource) {
                        destination.flush(flushSource);
                    }), this.on("partialdone", function(flushSource) {
                        destination.partialFlush(flushSource);
                    }), this.on("endedtimeline", function(flushSource) {
                        destination.endTimeline(flushSource);
                    }), this.on("reset", function(flushSource) {
                        destination.reset(flushSource);
                    }), destination;
                }, // actual work. These are provided by the prototype as a sort of no-op
                // implementation so that we don't have to check for their existence in the
                // `pipe` function above.
                Stream.prototype.push = function(data) {
                    this.trigger("data", data);
                }, Stream.prototype.flush = function(flushSource) {
                    this.trigger("done", flushSource);
                }, Stream.prototype.partialFlush = function(flushSource) {
                    this.trigger("partialdone", flushSource);
                }, Stream.prototype.endTimeline = function(flushSource) {
                    this.trigger("endedtimeline", flushSource);
                }, Stream.prototype.reset = function(flushSource) {
                    this.trigger("reset", flushSource);
                }, function() {
                    var i;
                    // don't throw an error
                    if (types = {
                        avc1: [],
                        // codingname
                        avcC: [],
                        btrt: [],
                        dinf: [],
                        dref: [],
                        esds: [],
                        ftyp: [],
                        hdlr: [],
                        mdat: [],
                        mdhd: [],
                        mdia: [],
                        mfhd: [],
                        minf: [],
                        moof: [],
                        moov: [],
                        mp4a: [],
                        // codingname
                        mvex: [],
                        mvhd: [],
                        pasp: [],
                        sdtp: [],
                        smhd: [],
                        stbl: [],
                        stco: [],
                        stsc: [],
                        stsd: [],
                        stsz: [],
                        stts: [],
                        styp: [],
                        tfdt: [],
                        tfhd: [],
                        traf: [],
                        trak: [],
                        trun: [],
                        trex: [],
                        tkhd: [],
                        vmhd: []
                    }, "undefined" != typeof Uint8Array) {
                        for(i in types)types.hasOwnProperty(i) && (types[i] = [
                            i.charCodeAt(0),
                            i.charCodeAt(1),
                            i.charCodeAt(2),
                            i.charCodeAt(3)
                        ]);
                        MAJOR_BRAND = new Uint8Array([
                            105,
                            115,
                            111,
                            109
                        ]), AVC1_BRAND = new Uint8Array([
                            97,
                            118,
                            99,
                            49
                        ]), MINOR_VERSION = new Uint8Array([
                            0,
                            0,
                            0,
                            1
                        ]), HDLR_TYPES = {
                            video: new Uint8Array([
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x76,
                                0x69,
                                0x64,
                                0x65,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x56,
                                0x69,
                                0x64,
                                0x65,
                                0x6f,
                                0x48,
                                0x61,
                                0x6e,
                                0x64,
                                0x6c,
                                0x65,
                                0x72,
                                0x00
                            ]),
                            audio: new Uint8Array([
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x73,
                                0x6f,
                                0x75,
                                0x6e,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x53,
                                0x6f,
                                0x75,
                                0x6e,
                                0x64,
                                0x48,
                                0x61,
                                0x6e,
                                0x64,
                                0x6c,
                                0x65,
                                0x72,
                                0x00
                            ])
                        }, DREF = new Uint8Array([
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x01,
                            0x00,
                            0x00,
                            0x00,
                            0x0c,
                            0x75,
                            0x72,
                            0x6c,
                            0x20,
                            0x00,
                            0x00,
                            0x00,
                            0x01
                        ]), SMHD = new Uint8Array([
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00
                        ]), STSC = STCO = new Uint8Array([
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00
                        ]), STSZ = new Uint8Array([
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00
                        ]), STTS = STCO, VMHD = new Uint8Array([
                            0x00,
                            0x00,
                            0x00,
                            0x01,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00
                        ]);
                    }
                }(), box = function(type) {
                    var i, result, payload = [], size = 0;
                    for(i = 1; i < arguments.length; i++)payload.push(arguments[i]);
                    for(i = payload.length; i--;)size += payload[i].byteLength;
                    for(new DataView((result = new Uint8Array(size + 8)).buffer, result.byteOffset, result.byteLength).setUint32(0, result.byteLength), result.set(type, 4), i = 0, size = 8; i < payload.length; i++)result.set(payload[i], size), size += payload[i].byteLength;
                    return result;
                }, dinf = function() {
                    return box(types.dinf, box(types.dref, DREF));
                }, esds = function(track) {
                    return box(types.esds, new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        // ES_Descriptor
                        0x03,
                        0x19,
                        0x00,
                        0x00,
                        0x00,
                        // DecoderConfigDescriptor
                        0x04,
                        0x11,
                        0x40,
                        0x15,
                        0x00,
                        0x06,
                        0x00,
                        0x00,
                        0x00,
                        0xda,
                        0xc0,
                        0x00,
                        0x00,
                        0xda,
                        0xc0,
                        // DecoderSpecificInfo
                        0x05,
                        0x02,
                        // ISO/IEC 14496-3, AudioSpecificConfig
                        // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35
                        track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1,
                        track.samplingfrequencyindex << 7 | track.channelcount << 3,
                        0x06,
                        0x01,
                        0x02
                    ]));
                }, ftyp = function() {
                    return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);
                }, hdlr = function(type) {
                    return box(types.hdlr, HDLR_TYPES[type]);
                }, mdat = function(data) {
                    return box(types.mdat, data);
                }, mdhd = function(track) {
                    var result = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x02,
                        0x00,
                        0x00,
                        0x00,
                        0x03,
                        0x00,
                        0x01,
                        0x5f,
                        0x90,
                        track.duration >>> 24 & 0xff,
                        track.duration >>> 16 & 0xff,
                        track.duration >>> 8 & 0xff,
                        0xff & track.duration,
                        0x55,
                        0xc4,
                        0x00,
                        0x00
                    ]); // Use the sample rate from the track metadata, when it is
                    return track.samplerate && (result[12] = track.samplerate >>> 24 & 0xff, result[13] = track.samplerate >>> 16 & 0xff, result[14] = track.samplerate >>> 8 & 0xff, result[15] = 0xff & track.samplerate), box(types.mdhd, result);
                }, mdia = function(track) {
                    return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));
                }, mfhd = function(sequenceNumber) {
                    return box(types.mfhd, new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (0xff000000 & sequenceNumber) >> 24,
                        (0xff0000 & sequenceNumber) >> 16,
                        (0xff00 & sequenceNumber) >> 8,
                        0xff & sequenceNumber
                    ]));
                }, minf = function(track) {
                    return box(types.minf, "video" === track.type ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));
                }, moof = function(sequenceNumber, tracks) {
                    for(var trackFragments = [], i = tracks.length; i--;)trackFragments[i] = traf(tracks[i]);
                    return box.apply(null, [
                        types.moof,
                        mfhd(sequenceNumber)
                    ].concat(trackFragments));
                }, /**
                     * Returns a movie box.
                     * @param tracks {array} the tracks associated with this movie
                     * @see ISO/IEC 14496-12:2012(E), section 8.2.1
                     */ moov = function(tracks) {
                    for(var i = tracks.length, boxes = []; i--;)boxes[i] = trak(tracks[i]);
                    return box.apply(null, [
                        types.moov,
                        mvhd(0xffffffff)
                    ].concat(boxes).concat(mvex(tracks)));
                }, mvex = function(tracks) {
                    for(var i = tracks.length, boxes = []; i--;)boxes[i] = trex(tracks[i]);
                    return box.apply(null, [
                        types.mvex
                    ].concat(boxes));
                }, mvhd = function(duration) {
                    var bytes = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x02,
                        0x00,
                        0x01,
                        0x5f,
                        0x90,
                        (0xff000000 & duration) >> 24,
                        (0xff0000 & duration) >> 16,
                        (0xff00 & duration) >> 8,
                        0xff & duration,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x40,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0xff,
                        0xff,
                        0xff,
                        0xff
                    ]);
                    return box(types.mvhd, bytes);
                }, sdtp = function(track) {
                    var flags, i, samples = track.samples || [], bytes = new Uint8Array(4 + samples.length); // leave the full box header (4 bytes) all zero
                    // write the sample table
                    for(i = 0; i < samples.length; i++)flags = samples[i].flags, bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;
                    return box(types.sdtp, bytes);
                }, stbl = function(track) {
                    return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));
                }, stsd = function(track) {
                    return box(types.stsd, new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01
                    ]), "video" === track.type ? videoSample(track) : audioSample(track));
                }, videoSample = function(track) {
                    var i, avc1Box, sps = track.sps || [], pps = track.pps || [], sequenceParameterSets = [], pictureParameterSets = []; // assemble the SPSs
                    for(i = 0; i < sps.length; i++)sequenceParameterSets.push((0xff00 & sps[i].byteLength) >>> 8), sequenceParameterSets.push(0xff & sps[i].byteLength), sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i]));
                     // assemble the PPSs
                    for(i = 0; i < pps.length; i++)pictureParameterSets.push((0xff00 & pps[i].byteLength) >>> 8), pictureParameterSets.push(0xff & pps[i].byteLength), pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));
                    if (avc1Box = [
                        types.avc1,
                        new Uint8Array([
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x01,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            (0xff00 & track.width) >> 8,
                            0xff & track.width,
                            (0xff00 & track.height) >> 8,
                            0xff & track.height,
                            0x00,
                            0x48,
                            0x00,
                            0x00,
                            0x00,
                            0x48,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x01,
                            0x13,
                            0x76,
                            0x69,
                            0x64,
                            0x65,
                            0x6f,
                            0x6a,
                            0x73,
                            0x2d,
                            0x63,
                            0x6f,
                            0x6e,
                            0x74,
                            0x72,
                            0x69,
                            0x62,
                            0x2d,
                            0x68,
                            0x6c,
                            0x73,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x18,
                            0x11,
                            0x11
                        ]),
                        box(types.avcC, new Uint8Array([
                            0x01,
                            track.profileIdc,
                            track.profileCompatibility,
                            track.levelIdc,
                            0xff
                        ].concat([
                            sps.length
                        ], sequenceParameterSets, [
                            pps.length
                        ], pictureParameterSets // "PPS"
                        ))),
                        box(types.btrt, new Uint8Array([
                            0x00,
                            0x1c,
                            0x9c,
                            0x80,
                            0x00,
                            0x2d,
                            0xc6,
                            0xc0,
                            0x00,
                            0x2d,
                            0xc6,
                            0xc0
                        ]))
                    ], track.sarRatio) {
                        var hSpacing = track.sarRatio[0], vSpacing = track.sarRatio[1];
                        avc1Box.push(box(types.pasp, new Uint8Array([
                            (0xff000000 & hSpacing) >> 24,
                            (0xff0000 & hSpacing) >> 16,
                            (0xff00 & hSpacing) >> 8,
                            0xff & hSpacing,
                            (0xff000000 & vSpacing) >> 24,
                            (0xff0000 & vSpacing) >> 16,
                            (0xff00 & vSpacing) >> 8,
                            0xff & vSpacing
                        ])));
                    }
                    return box.apply(null, avc1Box);
                }, audioSample = function(track) {
                    return box(types.mp4a, new Uint8Array([
                        // SampleEntry, ISO/IEC 14496-12
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        // AudioSampleEntry, ISO/IEC 14496-12
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (0xff00 & track.channelcount) >> 8,
                        0xff & track.channelcount,
                        (0xff00 & track.samplesize) >> 8,
                        0xff & track.samplesize,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (0xff00 & track.samplerate) >> 8,
                        0xff & track.samplerate,
                        0x00,
                        0x00
                    ]), esds(track));
                }, tkhd = function(track) {
                    var result = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x07,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (0xff000000 & track.id) >> 24,
                        (0xff0000 & track.id) >> 16,
                        (0xff00 & track.id) >> 8,
                        0xff & track.id,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (0xff000000 & track.duration) >> 24,
                        (0xff0000 & track.duration) >> 16,
                        (0xff00 & track.duration) >> 8,
                        0xff & track.duration,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x40,
                        0x00,
                        0x00,
                        0x00,
                        (0xff00 & track.width) >> 8,
                        0xff & track.width,
                        0x00,
                        0x00,
                        (0xff00 & track.height) >> 8,
                        0xff & track.height,
                        0x00,
                        0x00
                    ]);
                    return box(types.tkhd, result);
                }, /**
                     * Generate a track fragment (traf) box. A traf box collects metadata
                     * about tracks in a movie fragment (moof) box.
                     */ traf = function(track) {
                    var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;
                    return (trackFragmentHeader = box(types.tfhd, new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x3a,
                        (0xff000000 & track.id) >> 24,
                        (0xff0000 & track.id) >> 16,
                        (0xff00 & track.id) >> 8,
                        0xff & track.id,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ])), upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / 4294967296), lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % 4294967296), trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        // baseMediaDecodeTime
                        upperWordBaseMediaDecodeTime >>> 24 & 0xff,
                        upperWordBaseMediaDecodeTime >>> 16 & 0xff,
                        upperWordBaseMediaDecodeTime >>> 8 & 0xff,
                        0xff & upperWordBaseMediaDecodeTime,
                        lowerWordBaseMediaDecodeTime >>> 24 & 0xff,
                        lowerWordBaseMediaDecodeTime >>> 16 & 0xff,
                        lowerWordBaseMediaDecodeTime >>> 8 & 0xff,
                        0xff & lowerWordBaseMediaDecodeTime
                    ])), "audio" === track.type) ? (trackFragmentRun = trun$1(track, 92), box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun)) : (// box (sdtp)
                    // generate one and adjust offsets to match
                    sampleDependencyTable = sdtp(track), trackFragmentRun = trun$1(track, sampleDependencyTable.length + 92), box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable));
                }, /**
                     * Generate a track box.
                     * @param track {object} a track definition
                     * @return {Uint8Array} the track box
                     */ trak = function(track) {
                    return track.duration = track.duration || 0xffffffff, box(types.trak, tkhd(track), mdia(track));
                }, trex = function(track) {
                    var result = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (0xff000000 & track.id) >> 24,
                        (0xff0000 & track.id) >> 16,
                        (0xff00 & track.id) >> 8,
                        0xff & track.id,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x01
                    ]); // the last two bytes of default_sample_flags is the sample
                    return "video" !== track.type && (result[result.length - 1] = 0x00), box(types.trex, result);
                }, // duration is present for the first sample, it will be present for
                // all subsequent samples.
                // see ISO/IEC 14496-12:2012, Section 8.8.8.1
                trunHeader = function(samples, offset) {
                    var durationPresent = 0, sizePresent = 0, flagsPresent = 0, compositionTimeOffset = 0; // trun flag constants
                    return samples.length && (void 0 !== samples[0].duration && (durationPresent = 0x1), void 0 !== samples[0].size && (sizePresent = 0x2), void 0 !== samples[0].flags && (flagsPresent = 0x4), void 0 !== samples[0].compositionTimeOffset && (compositionTimeOffset = 0x8)), [
                        0x00,
                        0x00,
                        durationPresent | sizePresent | flagsPresent | compositionTimeOffset,
                        0x01,
                        (0xff000000 & samples.length) >>> 24,
                        (0xff0000 & samples.length) >>> 16,
                        (0xff00 & samples.length) >>> 8,
                        0xff & samples.length,
                        (0xff000000 & offset) >>> 24,
                        (0xff0000 & offset) >>> 16,
                        (0xff00 & offset) >>> 8,
                        0xff & offset
                    ];
                }, videoTrun = function(track, offset) {
                    var bytesOffest, bytes, header, samples, sample, i;
                    for(offset += 20 + 16 * (samples = track.samples || []).length, (bytes = new Uint8Array((header = trunHeader(samples, offset)).length + 16 * samples.length)).set(header), bytesOffest = header.length, i = 0; i < samples.length; i++)sample = samples[i], bytes[bytesOffest++] = (0xff000000 & sample.duration) >>> 24, bytes[bytesOffest++] = (0xff0000 & sample.duration) >>> 16, bytes[bytesOffest++] = (0xff00 & sample.duration) >>> 8, bytes[bytesOffest++] = 0xff & sample.duration, bytes[bytesOffest++] = (0xff000000 & sample.size) >>> 24, bytes[bytesOffest++] = (0xff0000 & sample.size) >>> 16, bytes[bytesOffest++] = (0xff00 & sample.size) >>> 8, bytes[bytesOffest++] = 0xff & sample.size, bytes[bytesOffest++] = sample.flags.isLeading << 2 | sample.flags.dependsOn, bytes[bytesOffest++] = sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample, bytes[bytesOffest++] = 61440 & sample.flags.degradationPriority, bytes[bytesOffest++] = 0x0f & sample.flags.degradationPriority, bytes[bytesOffest++] = (0xff000000 & sample.compositionTimeOffset) >>> 24, bytes[bytesOffest++] = (0xff0000 & sample.compositionTimeOffset) >>> 16, bytes[bytesOffest++] = (0xff00 & sample.compositionTimeOffset) >>> 8, bytes[bytesOffest++] = 0xff & sample.compositionTimeOffset;
                    return box(types.trun, bytes);
                }, audioTrun = function(track, offset) {
                    var bytes, bytesOffest, header, samples, sample, i;
                    for(offset += 20 + 8 * (samples = track.samples || []).length, (bytes = new Uint8Array((header = trunHeader(samples, offset)).length + 8 * samples.length)).set(header), bytesOffest = header.length, i = 0; i < samples.length; i++)sample = samples[i], bytes[bytesOffest++] = (0xff000000 & sample.duration) >>> 24, bytes[bytesOffest++] = (0xff0000 & sample.duration) >>> 16, bytes[bytesOffest++] = (0xff00 & sample.duration) >>> 8, bytes[bytesOffest++] = 0xff & sample.duration, bytes[bytesOffest++] = (0xff000000 & sample.size) >>> 24, bytes[bytesOffest++] = (0xff0000 & sample.size) >>> 16, bytes[bytesOffest++] = (0xff00 & sample.size) >>> 8, bytes[bytesOffest++] = 0xff & sample.size;
                    return box(types.trun, bytes);
                }, trun$1 = function(track, offset) {
                    return "audio" === track.type ? audioTrun(track, offset) : videoTrun(track, offset);
                };
                var mp4Generator = {
                    mdat: mdat,
                    moof: moof,
                    initSegment: function(tracks) {
                        var result, fileType = ftyp(), movie = moov(tracks);
                        return (result = new Uint8Array(fileType.byteLength + movie.byteLength)).set(fileType), result.set(movie, fileType.byteLength), result;
                    }
                }, sampleForFrame = function(frame, dataOffset) {
                    var sample = {
                        size: 0,
                        flags: {
                            isLeading: 0,
                            dependsOn: 1,
                            isDependedOn: 0,
                            hasRedundancy: 0,
                            degradationPriority: 0,
                            isNonSyncSample: 1
                        }
                    };
                    return sample.dataOffset = dataOffset, sample.compositionTimeOffset = frame.pts - frame.dts, sample.duration = frame.duration, sample.size = 4 * frame.length, sample.size += frame.byteLength, frame.keyFrame && (sample.flags.dependsOn = 2, sample.flags.isNonSyncSample = 0), sample;
                }, frameUtils = {
                    groupNalsIntoFrames: function(nalUnits) {
                        var i, currentNal, currentFrame = [], frames = []; // TODO added for LHLS, make sure this is OK
                        for(i = 0, frames.byteLength = 0, frames.nalCount = 0, frames.duration = 0, currentFrame.byteLength = 0; i < nalUnits.length; i++)"access_unit_delimiter_rbsp" === (currentNal = nalUnits[i]).nalUnitType ? (currentFrame.length && (currentFrame.duration = currentNal.dts - currentFrame.dts, frames.byteLength += currentFrame.byteLength, frames.nalCount += currentFrame.length, frames.duration += currentFrame.duration, frames.push(currentFrame)), (currentFrame = [
                            currentNal
                        ]).byteLength = currentNal.data.byteLength, currentFrame.pts = currentNal.pts, currentFrame.dts = currentNal.dts) : ("slice_layer_without_partitioning_rbsp_idr" === currentNal.nalUnitType && (currentFrame.keyFrame = !0), currentFrame.duration = currentNal.dts - currentFrame.dts, currentFrame.byteLength += currentNal.data.byteLength, currentFrame.push(currentNal));
                         // For the last frame, use the duration of the previous frame if we
                        return frames.length && (!currentFrame.duration || currentFrame.duration <= 0) && (currentFrame.duration = frames[frames.length - 1].duration), // TODO added for LHLS, make sure this is OK
                        frames.byteLength += currentFrame.byteLength, frames.nalCount += currentFrame.length, frames.duration += currentFrame.duration, frames.push(currentFrame), frames;
                    },
                    groupFramesIntoGops: function(frames) {
                        var i, currentFrame, currentGop = [], gops = []; // We must pre-set some of the values on the Gop since we
                        for(i = 0, // keep running totals of these values
                        currentGop.byteLength = 0, currentGop.nalCount = 0, currentGop.duration = 0, currentGop.pts = frames[0].pts, currentGop.dts = frames[0].dts, gops.byteLength = 0, gops.nalCount = 0, gops.duration = 0, gops.pts = frames[0].pts, gops.dts = frames[0].dts; i < frames.length; i++)(currentFrame = frames[i]).keyFrame ? (currentGop.length && (gops.push(currentGop), gops.byteLength += currentGop.byteLength, gops.nalCount += currentGop.nalCount, gops.duration += currentGop.duration), (currentGop = [
                            currentFrame
                        ]).nalCount = currentFrame.length, currentGop.byteLength = currentFrame.byteLength, currentGop.pts = currentFrame.pts, currentGop.dts = currentFrame.dts, currentGop.duration = currentFrame.duration) : (currentGop.duration += currentFrame.duration, currentGop.nalCount += currentFrame.length, currentGop.byteLength += currentFrame.byteLength, currentGop.push(currentFrame));
                        return gops.length && currentGop.duration <= 0 && (currentGop.duration = gops[gops.length - 1].duration), gops.byteLength += currentGop.byteLength, gops.nalCount += currentGop.nalCount, gops.duration += currentGop.duration, gops.push(currentGop), gops;
                    },
                    extendFirstKeyFrame: function(gops) {
                        var currentGop;
                        return !gops[0][0].keyFrame && gops.length > 1 && (// Remove the first GOP
                        currentGop = gops.shift(), gops.byteLength -= currentGop.byteLength, gops.nalCount -= currentGop.nalCount, // first gop to cover the time period of the
                        // frames we just removed
                        gops[0][0].dts = currentGop.dts, gops[0][0].pts = currentGop.pts, gops[0][0].duration += currentGop.duration), gops;
                    },
                    generateSampleTable: function(gops, baseDataOffset) {
                        var h, i, sample, currentGop, dataOffset = baseDataOffset || 0, samples = [];
                        for(h = 0; h < gops.length; h++)for(i = 0, currentGop = gops[h]; i < currentGop.length; i++)sample = sampleForFrame(currentGop[i], dataOffset), dataOffset += sample.size, samples.push(sample);
                        return samples;
                    },
                    concatenateNalData: function(gops) {
                        var h, i, j, currentGop, currentFrame, currentNal, dataOffset = 0, data = new Uint8Array(gops.byteLength + 4 * gops.nalCount), view = new DataView(data.buffer); // For each Gop..
                        for(h = 0; h < gops.length; h++)for(i = 0, currentGop = gops[h]; i < currentGop.length; i++)for(j = 0, currentFrame = currentGop[i]; j < currentFrame.length; j++)currentNal = currentFrame[j], view.setUint32(dataOffset, currentNal.data.byteLength), dataOffset += 4, data.set(currentNal.data, dataOffset), dataOffset += currentNal.data.byteLength;
                        return data;
                    }
                }, highPrefix = [
                    33,
                    16,
                    5,
                    32,
                    164,
                    27
                ], lowPrefix = [
                    33,
                    65,
                    108,
                    84,
                    1,
                    2,
                    4,
                    8,
                    168,
                    2,
                    4,
                    8,
                    17,
                    191,
                    252
                ], zeroFill = function(count) {
                    for(var a = []; count--;)a.push(0);
                    return a;
                }, silence_1 = function() {
                    if (!silence) {
                        var metaTable;
                        silence = Object.keys(metaTable = {
                            96000: [
                                highPrefix,
                                [
                                    227,
                                    64
                                ],
                                zeroFill(154),
                                [
                                    56
                                ]
                            ],
                            88200: [
                                highPrefix,
                                [
                                    231
                                ],
                                zeroFill(170),
                                [
                                    56
                                ]
                            ],
                            64000: [
                                highPrefix,
                                [
                                    248,
                                    192
                                ],
                                zeroFill(240),
                                [
                                    56
                                ]
                            ],
                            48000: [
                                highPrefix,
                                [
                                    255,
                                    192
                                ],
                                zeroFill(268),
                                [
                                    55,
                                    148,
                                    128
                                ],
                                zeroFill(54),
                                [
                                    112
                                ]
                            ],
                            44100: [
                                highPrefix,
                                [
                                    255,
                                    192
                                ],
                                zeroFill(268),
                                [
                                    55,
                                    163,
                                    128
                                ],
                                zeroFill(84),
                                [
                                    112
                                ]
                            ],
                            32000: [
                                highPrefix,
                                [
                                    255,
                                    192
                                ],
                                zeroFill(268),
                                [
                                    55,
                                    234
                                ],
                                zeroFill(226),
                                [
                                    112
                                ]
                            ],
                            24000: [
                                highPrefix,
                                [
                                    255,
                                    192
                                ],
                                zeroFill(268),
                                [
                                    55,
                                    255,
                                    128
                                ],
                                zeroFill(268),
                                [
                                    111,
                                    112
                                ],
                                zeroFill(126),
                                [
                                    224
                                ]
                            ],
                            16000: [
                                highPrefix,
                                [
                                    255,
                                    192
                                ],
                                zeroFill(268),
                                [
                                    55,
                                    255,
                                    128
                                ],
                                zeroFill(268),
                                [
                                    111,
                                    255
                                ],
                                zeroFill(269),
                                [
                                    223,
                                    108
                                ],
                                zeroFill(195),
                                [
                                    1,
                                    192
                                ]
                            ],
                            12000: [
                                lowPrefix,
                                zeroFill(268),
                                [
                                    3,
                                    127,
                                    248
                                ],
                                zeroFill(268),
                                [
                                    6,
                                    255,
                                    240
                                ],
                                zeroFill(268),
                                [
                                    13,
                                    255,
                                    224
                                ],
                                zeroFill(268),
                                [
                                    27,
                                    253,
                                    128
                                ],
                                zeroFill(259),
                                [
                                    56
                                ]
                            ],
                            11025: [
                                lowPrefix,
                                zeroFill(268),
                                [
                                    3,
                                    127,
                                    248
                                ],
                                zeroFill(268),
                                [
                                    6,
                                    255,
                                    240
                                ],
                                zeroFill(268),
                                [
                                    13,
                                    255,
                                    224
                                ],
                                zeroFill(268),
                                [
                                    27,
                                    255,
                                    192
                                ],
                                zeroFill(268),
                                [
                                    55,
                                    175,
                                    128
                                ],
                                zeroFill(108),
                                [
                                    112
                                ]
                            ],
                            8000: [
                                lowPrefix,
                                zeroFill(268),
                                [
                                    3,
                                    121,
                                    16
                                ],
                                zeroFill(47),
                                [
                                    7
                                ]
                            ]
                        }).reduce(function(obj, key) {
                            return obj[key] = new Uint8Array(metaTable[key].reduce(function(arr, part) {
                                return arr.concat(part);
                            }, [])), obj;
                        }, {});
                    }
                    return silence;
                };
                secondsToVideoTs = function(seconds) {
                    return 90000 * seconds;
                }, secondsToAudioTs = function(seconds, sampleRate) {
                    return seconds * sampleRate;
                }, videoTsToSeconds = function(timestamp) {
                    return timestamp / 90000;
                }, audioTsToSeconds = function(timestamp, sampleRate) {
                    return timestamp / sampleRate;
                }, audioTsToVideoTs = function(timestamp, sampleRate) {
                    return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));
                }, videoTsToAudioTs = function(timestamp, sampleRate) {
                    return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);
                }, /**
                     * Adjust ID3 tag or caption timing information by the timeline pts values
                     * (if keepOriginalTimestamps is false) and convert to seconds
                     */ metadataTsToSeconds = function(timestamp, timelineStartPts, keepOriginalTimestamps) {
                    return videoTsToSeconds(keepOriginalTimestamps ? timestamp : timestamp - timelineStartPts);
                };
                var clock = {
                    ONE_SECOND_IN_TS: 90000,
                    secondsToVideoTs: secondsToVideoTs,
                    videoTsToSeconds: videoTsToSeconds,
                    audioTsToVideoTs: audioTsToVideoTs,
                    videoTsToAudioTs: videoTsToAudioTs,
                    metadataTsToSeconds: metadataTsToSeconds
                }, sumFrameByteLengths = function(array) {
                    var i, sum = 0; // sum the byteLength's all each nal unit in the frame
                    for(i = 0; i < array.length; i++)sum += array[i].data.byteLength;
                    return sum;
                }, audioFrameUtils_prefixWithSilence = function(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime) {
                    var baseMediaDecodeTimeTs, silentFrame, i, firstFrame, frameDuration = 0, audioFillFrameCount = 0, audioFillDuration = 0;
                    if (frames.length && (baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate), frameDuration = Math.ceil(clock.ONE_SECOND_IN_TS / (track.samplerate / 1024)), audioAppendStartTs && videoBaseMediaDecodeTime && (audioFillDuration = (audioFillFrameCount = Math.floor((baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime)) / frameDuration)) * frameDuration), !(audioFillFrameCount < 1) && !(audioFillDuration > clock.ONE_SECOND_IN_TS / 2))) {
                        for((silentFrame = silence_1()[track.samplerate]) || // we don't have a silent frame pregenerated for the sample rate, so use a frame
                        // from the content instead
                        (silentFrame = frames[0].data), i = 0; i < audioFillFrameCount; i++)firstFrame = frames[0], frames.splice(0, 0, {
                            data: silentFrame,
                            dts: firstFrame.dts - frameDuration,
                            pts: firstFrame.pts - frameDuration
                        });
                        return track.baseMediaDecodeTime -= Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate)), audioFillDuration;
                    }
                }, audioFrameUtils_generateSampleTable = function(frames) {
                    var i, samples = [];
                    for(i = 0; i < frames.length; i++)samples.push({
                        size: frames[i].data.byteLength,
                        duration: 1024
                    });
                    return samples;
                }, audioFrameUtils_concatenateFrameData = function(frames) {
                    var i, currentFrame, dataOffset = 0, data = new Uint8Array(sumFrameByteLengths(frames));
                    for(i = 0; i < frames.length; i++)currentFrame = frames[i], data.set(currentFrame.data, dataOffset), dataOffset += currentFrame.data.byteLength;
                    return data;
                }, ONE_SECOND_IN_TS$3 = clock.ONE_SECOND_IN_TS, trackDecodeInfo = {
                    clearDtsInfo: function(track) {
                        delete track.minSegmentDts, delete track.maxSegmentDts, delete track.minSegmentPts, delete track.maxSegmentPts;
                    },
                    calculateTrackBaseMediaDecodeTime: function(track, keepOriginalTimestamps) {
                        var baseMediaDecodeTime, minSegmentDts = track.minSegmentDts; // Optionally adjust the time so the first segment starts at zero.
                        return keepOriginalTimestamps || (minSegmentDts -= track.timelineStartInfo.dts), baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime + minSegmentDts), "audio" === track.type && (baseMediaDecodeTime *= track.samplerate / ONE_SECOND_IN_TS$3, baseMediaDecodeTime = Math.floor(baseMediaDecodeTime)), baseMediaDecodeTime;
                    },
                    collectDtsInfo: function(track, data) {
                        "number" == typeof data.pts && (void 0 === track.timelineStartInfo.pts && (track.timelineStartInfo.pts = data.pts), void 0 === track.minSegmentPts ? track.minSegmentPts = data.pts : track.minSegmentPts = Math.min(track.minSegmentPts, data.pts), void 0 === track.maxSegmentPts ? track.maxSegmentPts = data.pts : track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts)), "number" == typeof data.dts && (void 0 === track.timelineStartInfo.dts && (track.timelineStartInfo.dts = data.dts), void 0 === track.minSegmentDts ? track.minSegmentDts = data.dts : track.minSegmentDts = Math.min(track.minSegmentDts, data.dts), void 0 === track.maxSegmentDts ? track.maxSegmentDts = data.dts : track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts));
                    }
                }, captionPacketParser_parseSei = function(bytes) {
                    for(var i = 0, result = {
                        payloadType: -1,
                        payloadSize: 0
                    }, payloadType = 0, payloadSize = 0; // stop once we have hit the end of the sei_rbsp
                    i < bytes.byteLength && 128 !== bytes[i] // Parse payload type
                    ;){
                        for(; 0xff === bytes[i];)payloadType += 255, i++;
                        for(payloadType += bytes[i++]; 0xff === bytes[i];)payloadSize += 255, i++;
                        // there can only ever be one caption message in a frame's sei
                        if (payloadSize += bytes[i++], !result.payload && 4 === payloadType) {
                            if ("GA94" === String.fromCharCode(bytes[i + 3], bytes[i + 4], bytes[i + 5], bytes[i + 6])) {
                                result.payloadType = payloadType, result.payloadSize = payloadSize, result.payload = bytes.subarray(i, i + payloadSize);
                                break;
                            }
                            result.payload = void 0;
                        } // skip the payload and parse the next message
                        i += payloadSize, payloadType = 0, payloadSize = 0;
                    }
                    return result;
                }, captionPacketParser_parseCaptionPackets = function(pts, userData) {
                    var i, count, offset, data, results = []; // if this is just filler, return immediately
                    if (!(0x40 & userData[0])) return results;
                     // parse out the cc_data_1 and cc_data_2 fields
                    for(i = 0, count = 0x1f & userData[0]; i < count; i++)data = {
                        type: 0x03 & userData[(offset = 3 * i) + 2],
                        pts: pts
                    }, 0x04 & userData[offset + 2] && (data.ccData = userData[offset + 3] << 8 | userData[offset + 4], results.push(data));
                    return results;
                }, CaptionStream$1 = function CaptionStream(options) {
                    options = options || {}, CaptionStream.prototype.init.call(this), this.parse708captions_ = "boolean" != typeof options.parse708captions || options.parse708captions, this.captionPackets_ = [], this.ccStreams_ = [
                        new Cea608Stream(0, 0),
                        new Cea608Stream(0, 1),
                        new Cea608Stream(1, 0),
                        new Cea608Stream(1, 1)
                    ], this.parse708captions_ && (this.cc708Stream_ = new Cea708Stream({
                        captionServices: options.captionServices
                    })), this.reset(), this.ccStreams_.forEach(function(cc) {
                        cc.on("data", this.trigger.bind(this, "data")), cc.on("partialdone", this.trigger.bind(this, "partialdone")), cc.on("done", this.trigger.bind(this, "done"));
                    }, this), this.parse708captions_ && (this.cc708Stream_.on("data", this.trigger.bind(this, "data")), this.cc708Stream_.on("partialdone", this.trigger.bind(this, "partialdone")), this.cc708Stream_.on("done", this.trigger.bind(this, "done")));
                };
                CaptionStream$1.prototype = new Stream(), CaptionStream$1.prototype.push = function(event) {
                    var sei, userData, newCaptionPackets, sei1;
                    if ("sei_rbsp" === event.nalUnitType && (sei = captionPacketParser_parseSei(event.escapedRBSP)).payload && 4 === sei.payloadType && (userData = // itu_t_t35_contry_code must be 181 (United States) for
                    // captions
                    181 !== (sei1 = sei).payload[0] || (sei1.payload[1] << 8 | sei1.payload[2]) != 49 || "GA94" !== String.fromCharCode(sei1.payload[3], sei1.payload[4], sei1.payload[5], sei1.payload[6]) || 0x03 !== sei1.payload[7] ? null : sei1.payload.subarray(8, sei1.payload.length - 1) // itu_t_t35_provider_code should be 49 (ATSC) for captions
                    )) {
                        // caption data from being processed twice, we track the latest dts we've
                        // received and ignore everything with a dts before that. However, since
                        // data for a specific dts can be split across packets on either side of
                        // a segment boundary, we need to make sure we *don't* ignore the packets
                        // from the *next* segment that have dts === this.latestDts_. By constantly
                        // tracking the number of packets received with dts === this.latestDts_, we
                        // know how many should be ignored once we start receiving duplicates.
                        if (event.dts < this.latestDts_) {
                            // We've started getting older data, so set the flag.
                            this.ignoreNextEqualDts_ = !0;
                            return;
                        } // parse out CC data packets and save them for later
                        if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {
                            this.numSameDts_--, this.numSameDts_ || // We've received the last duplicate packet, time to start processing again
                            (this.ignoreNextEqualDts_ = !1);
                            return;
                        }
                        newCaptionPackets = captionPacketParser_parseCaptionPackets(event.pts, userData), this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets), this.latestDts_ !== event.dts && (this.numSameDts_ = 0), this.numSameDts_++, this.latestDts_ = event.dts;
                    } // parse the sei
                }, CaptionStream$1.prototype.flushCCStreams = function(flushType) {
                    this.ccStreams_.forEach(function(cc) {
                        return "flush" === flushType ? cc.flush() : cc.partialFlush();
                    }, this);
                }, CaptionStream$1.prototype.flushStream = function(flushType) {
                    // make sure we actually parsed captions before proceeding
                    if (!this.captionPackets_.length) {
                        this.flushCCStreams(flushType);
                        return;
                    } // In Chrome, the Array#sort function is not stable so add a
                    // presortIndex that we can use to ensure we get a stable-sort
                    this.captionPackets_.forEach(function(elem, idx) {
                        elem.presortIndex = idx;
                    }), this.captionPackets_.sort(function(a, b) {
                        return a.pts === b.pts ? a.presortIndex - b.presortIndex : a.pts - b.pts;
                    }), this.captionPackets_.forEach(function(packet) {
                        packet.type < 2 ? // Dispatch packet to the right Cea608Stream
                        this.dispatchCea608Packet(packet) : // Dispatch packet to the Cea708Stream
                        this.dispatchCea708Packet(packet);
                    }, this), this.captionPackets_.length = 0, this.flushCCStreams(flushType);
                }, CaptionStream$1.prototype.flush = function() {
                    return this.flushStream("flush");
                }, CaptionStream$1.prototype.partialFlush = function() {
                    return this.flushStream("partialFlush");
                }, CaptionStream$1.prototype.reset = function() {
                    this.latestDts_ = null, this.ignoreNextEqualDts_ = !1, this.numSameDts_ = 0, this.activeCea608Channel_ = [
                        null,
                        null
                    ], this.ccStreams_.forEach(function(ccStream) {
                        ccStream.reset();
                    });
                }, /*
                     * When XDS sub-packets are interleaved with other services, the end of each sub-packet shall be followed
                     * by a control pair to change to a different service. When any of the control codes from 0x10 to 0x1F is
                     * used to begin a control code pair, it indicates the return to captioning or Text data. The control code pair
                     * and subsequent data should then be processed according to the FCC rules. It may be necessary for the
                     * line 21 data encoder to automatically insert a control code pair (i.e. RCL, RU2, RU3, RU4, RDC, or RTD)
                     * to switch to captioning or Text.
                     */ // With that in mind, we ignore any data between an XDS control code and a
                // subsequent closed-captioning control code.
                CaptionStream$1.prototype.dispatchCea608Packet = function(packet) {
                    this.setsTextOrXDSActive(packet) ? this.activeCea608Channel_[packet.type] = null : this.setsChannel1Active(packet) ? this.activeCea608Channel_[packet.type] = 0 : this.setsChannel2Active(packet) && (this.activeCea608Channel_[packet.type] = 1), null !== this.activeCea608Channel_[packet.type] && this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);
                }, CaptionStream$1.prototype.setsChannel1Active = function(packet) {
                    return (0x7800 & packet.ccData) == 0x1000;
                }, CaptionStream$1.prototype.setsChannel2Active = function(packet) {
                    return (0x7800 & packet.ccData) == 0x1800;
                }, CaptionStream$1.prototype.setsTextOrXDSActive = function(packet) {
                    return (0x7100 & packet.ccData) == 0x0100 || (0x78fe & packet.ccData) == 0x102a || (0x78fe & packet.ccData) == 0x182a;
                }, CaptionStream$1.prototype.dispatchCea708Packet = function(packet) {
                    this.parse708captions_ && this.cc708Stream_.push(packet);
                };
                // Session to Application
                // ----------------------
                // This hash maps special and extended character codes to their
                // proper Unicode equivalent. The first one-byte key is just a
                // non-standard character code. The two-byte keys that follow are
                // the extended CEA708 character codes, along with the preceding
                // 0x10 extended character byte to distinguish these codes from
                // non-extended character codes. Every CEA708 character code that
                // is not in this object maps directly to a standard unicode
                // character code.
                // The transparent space and non-breaking transparent space are
                // technically not fully supported since there is no code to
                // make them transparent, so they have normal non-transparent
                // stand-ins.
                // The special closed caption (CC) character isn't a standard
                // unicode character, so a fairly similar unicode character was
                // chosen in it's place.
                var CHARACTER_TRANSLATION_708 = {
                    0x7f: 0x266a,
                    // ♪
                    0x1020: 0x20,
                    // Transparent Space
                    0x1021: 0xa0,
                    // Nob-breaking Transparent Space
                    0x1025: 0x2026,
                    // …
                    0x102a: 0x0160,
                    // Š
                    0x102c: 0x0152,
                    // Œ
                    0x1030: 0x2588,
                    // █
                    0x1031: 0x2018,
                    // ‘
                    0x1032: 0x2019,
                    // ’
                    0x1033: 0x201c,
                    // “
                    0x1034: 0x201d,
                    // ”
                    0x1035: 0x2022,
                    // •
                    0x1039: 0x2122,
                    // ™
                    0x103a: 0x0161,
                    // š
                    0x103c: 0x0153,
                    // œ
                    0x103d: 0x2120,
                    // ℠
                    0x103f: 0x0178,
                    // Ÿ
                    0x1076: 0x215b,
                    // ⅛
                    0x1077: 0x215c,
                    // ⅜
                    0x1078: 0x215d,
                    // ⅝
                    0x1079: 0x215e,
                    // ⅞
                    0x107a: 0x23d0,
                    // ⏐
                    0x107b: 0x23a4,
                    // ⎤
                    0x107c: 0x23a3,
                    // ⎣
                    0x107d: 0x23af,
                    // ⎯
                    0x107e: 0x23a6,
                    // ⎦
                    0x107f: 0x23a1,
                    // ⎡
                    0x10a0: 0x3138
                }, get708CharFromCode = function(code) {
                    var newCode = CHARACTER_TRANSLATION_708[code] || code;
                    return 0x1000 & code && code === newCode ? "" : String.fromCharCode(newCode);
                }, within708TextBlock = function(b) {
                    return 0x20 <= b && b <= 0x7f || 0xa0 <= b && b <= 0xff;
                }, Cea708Window = function(windowNum) {
                    this.windowNum = windowNum, this.reset();
                };
                Cea708Window.prototype.reset = function() {
                    this.clearText(), this.pendingNewLine = !1, this.winAttr = {}, this.penAttr = {}, this.penLoc = {}, this.penColor = {}, // defineWindow will usually override them
                    this.visible = 0, this.rowLock = 0, this.columnLock = 0, this.priority = 0, this.relativePositioning = 0, this.anchorVertical = 0, this.anchorHorizontal = 0, this.anchorPoint = 0, this.rowCount = 1, this.virtualRowCount = this.rowCount + 1, this.columnCount = 41, this.windowStyle = 0, this.penStyle = 0;
                }, Cea708Window.prototype.getText = function() {
                    return this.rows.join("\n");
                }, Cea708Window.prototype.clearText = function() {
                    this.rows = [
                        ""
                    ], this.rowIdx = 0;
                }, Cea708Window.prototype.newLine = function(pts) {
                    for(this.rows.length >= this.virtualRowCount && "function" == typeof this.beforeRowOverflow && this.beforeRowOverflow(pts), this.rows.length > 0 && (this.rows.push(""), this.rowIdx++); this.rows.length > this.virtualRowCount;)this.rows.shift(), this.rowIdx--;
                }, Cea708Window.prototype.isEmpty = function() {
                    return 0 === this.rows.length || 1 === this.rows.length && "" === this.rows[0];
                }, Cea708Window.prototype.addText = function(text) {
                    this.rows[this.rowIdx] += text;
                }, Cea708Window.prototype.backspace = function() {
                    if (!this.isEmpty()) {
                        var row = this.rows[this.rowIdx];
                        this.rows[this.rowIdx] = row.substr(0, row.length - 1);
                    }
                };
                var Cea708Service = function(serviceNum, encoding, stream) {
                    this.serviceNum = serviceNum, this.text = "", this.currentWindow = new Cea708Window(-1), this.windows = [], this.stream = stream, "string" == typeof encoding && this.createTextDecoder(encoding);
                };
                /**
                     * Initialize service windows
                     * Must be run before service use
                     *
                     * @param  {Integer}  pts               PTS value
                     * @param  {Function} beforeRowOverflow Function to execute before row overflow of a window
                     */ Cea708Service.prototype.init = function(pts, beforeRowOverflow) {
                    this.startPts = pts;
                    for(var win = 0; win < 8; win++)this.windows[win] = new Cea708Window(win), "function" == typeof beforeRowOverflow && (this.windows[win].beforeRowOverflow = beforeRowOverflow);
                }, /**
                     * Set current window of service to be affected by commands
                     *
                     * @param  {Integer} windowNum Window number
                     */ Cea708Service.prototype.setCurrentWindow = function(windowNum) {
                    this.currentWindow = this.windows[windowNum];
                }, /**
                     * Try to create a TextDecoder if it is natively supported
                     */ Cea708Service.prototype.createTextDecoder = function(encoding) {
                    if ("undefined" == typeof TextDecoder) this.stream.trigger("log", {
                        level: "warn",
                        message: "The `encoding` option is unsupported without TextDecoder support"
                    });
                    else try {
                        this.textDecoder_ = new TextDecoder(encoding);
                    } catch (error) {
                        this.stream.trigger("log", {
                            level: "warn",
                            message: "TextDecoder could not be created with " + encoding + " encoding. " + error
                        });
                    }
                };
                var Cea708Stream = function Cea708Stream(options) {
                    options = options || {}, Cea708Stream.prototype.init.call(this);
                    var serviceProps, self1 = this, captionServices = options.captionServices || {}, captionServiceEncodings = {};
                    Object.keys(captionServices).forEach(function(serviceName) {
                        serviceProps = captionServices[serviceName], /^SERVICE/.test(serviceName) && (captionServiceEncodings[serviceName] = serviceProps.encoding);
                    }), this.serviceEncodings = captionServiceEncodings, this.current708Packet = null, this.services = {}, this.push = function(packet) {
                        3 === packet.type ? // 708 packet start
                        self1.new708Packet() : null === self1.current708Packet && // This should only happen at the start of a file if there's no packet start.
                        self1.new708Packet(), self1.add708Bytes(packet);
                    };
                };
                Cea708Stream.prototype = new Stream(), /**
                     * Push current 708 packet, create new 708 packet.
                     */ Cea708Stream.prototype.new708Packet = function() {
                    null !== this.current708Packet && this.push708Packet(), this.current708Packet = {
                        data: [],
                        ptsVals: []
                    };
                }, /**
                     * Add pts and both bytes from packet into current 708 packet.
                     */ Cea708Stream.prototype.add708Bytes = function(packet) {
                    var data = packet.ccData;
                    // that service blocks will always line up with byte pairs.
                    this.current708Packet.ptsVals.push(packet.pts), this.current708Packet.data.push(data >>> 8), this.current708Packet.data.push(0xff & data);
                }, /**
                     * Parse completed 708 packet into service blocks and push each service block.
                     */ Cea708Stream.prototype.push708Packet = function() {
                    var packet708 = this.current708Packet, packetData = packet708.data, serviceNum = null, blockSize = null, i = 0, b = packetData[i++];
                    for(packet708.seq = b >> 6, packet708.sizeCode = 0x3f & b; i < packetData.length; i++)serviceNum = (b = packetData[i++]) >> 5, blockSize = 0x1f & b, 7 === serviceNum && blockSize > 0 && (serviceNum = // Extended service num
                    b = packetData[i++]), this.pushServiceBlock(serviceNum, i, blockSize), blockSize > 0 && (i += blockSize - 1);
                }, /**
                     * Parse service block, execute commands, read text.
                     *
                     * Note: While many of these commands serve important purposes,
                     * many others just parse out the parameters or attributes, but
                     * nothing is done with them because this is not a full and complete
                     * implementation of the entire 708 spec.
                     *
                     * @param  {Integer} serviceNum Service number
                     * @param  {Integer} start      Start index of the 708 packet data
                     * @param  {Integer} size       Block size
                     */ Cea708Stream.prototype.pushServiceBlock = function(serviceNum, start, size) {
                    var b, i = start, packetData = this.current708Packet.data, service = this.services[serviceNum];
                    for(service || (service = this.initService(serviceNum, i)); i < start + size && i < packetData.length; i++)within708TextBlock(b = packetData[i]) ? i = this.handleText(i, service) : 0x18 === b ? i = this.multiByteCharacter(i, service) : 0x10 === b ? i = this.extendedCommands(i, service) : 0x80 <= b && b <= 0x87 ? i = this.setCurrentWindow(i, service) : 0x98 <= b && b <= 0x9f ? i = this.defineWindow(i, service) : 0x88 === b ? i = this.clearWindows(i, service) : 0x8c === b ? i = this.deleteWindows(i, service) : 0x89 === b ? i = this.displayWindows(i, service) : 0x8a === b ? i = this.hideWindows(i, service) : 0x8b === b ? i = this.toggleWindows(i, service) : 0x97 === b ? i = this.setWindowAttributes(i, service) : 0x90 === b ? i = this.setPenAttributes(i, service) : 0x91 === b ? i = this.setPenColor(i, service) : 0x92 === b ? i = this.setPenLocation(i, service) : 0x8f === b ? service = this.reset(i, service) : 0x08 === b ? // BS: Backspace
                    service.currentWindow.backspace() : 0x0c === b ? // FF: Form feed
                    service.currentWindow.clearText() : 0x0d === b ? // CR: Carriage return
                    service.currentWindow.pendingNewLine = !0 : 0x0e === b ? // HCR: Horizontal carriage return
                    service.currentWindow.clearText() : 0x8d === b && // DLY: Delay, nothing to do
                    i++;
                }, /**
                     * Execute an extended command
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     * @return {Integer}          New index after parsing
                     */ Cea708Stream.prototype.extendedCommands = function(i, service) {
                    return within708TextBlock(this.current708Packet.data[++i]) && (i = this.handleText(i, service, {
                        isExtended: !0
                    })), i;
                }, /**
                     * Get PTS value of a given byte index
                     *
                     * @param  {Integer} byteIndex  Index of the byte
                     * @return {Integer}            PTS
                     */ Cea708Stream.prototype.getPts = function(byteIndex) {
                    // There's 1 pts value per 2 bytes
                    return this.current708Packet.ptsVals[Math.floor(byteIndex / 2)];
                }, /**
                     * Initializes a service
                     *
                     * @param  {Integer} serviceNum Service number
                     * @return {Service}            Initialized service object
                     */ Cea708Stream.prototype.initService = function(serviceNum, i) {
                    var encoding, serviceName = "SERVICE" + serviceNum, self1 = this;
                    return serviceName in this.serviceEncodings && (encoding = this.serviceEncodings[serviceName]), this.services[serviceNum] = new Cea708Service(serviceNum, encoding, self1), this.services[serviceNum].init(this.getPts(i), function(pts) {
                        self1.flushDisplayed(pts, self1.services[serviceNum]);
                    }), this.services[serviceNum];
                }, /**
                     * Execute text writing to current window
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     * @return {Integer}          New index after parsing
                     */ Cea708Stream.prototype.handleText = function(i, service, options) {
                    var _char, charCodeArray, isExtended = options && options.isExtended, isMultiByte = options && options.isMultiByte, packetData = this.current708Packet.data, currentByte = packetData[i], nextByte = packetData[i + 1], win = service.currentWindow;
                    return service.textDecoder_ && !isExtended ? (isMultiByte ? (charCodeArray = [
                        currentByte,
                        nextByte
                    ], i++) : charCodeArray = [
                        currentByte
                    ], _char = service.textDecoder_.decode(new Uint8Array(charCodeArray))) : _char = get708CharFromCode((isExtended ? 0x1000 : 0x0000) | currentByte), win.pendingNewLine && !win.isEmpty() && win.newLine(this.getPts(i)), win.pendingNewLine = !1, win.addText(_char), i;
                }, /**
                     * Handle decoding of multibyte character
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     * @return {Integer}          New index after parsing
                     */ Cea708Stream.prototype.multiByteCharacter = function(i, service) {
                    var packetData = this.current708Packet.data, firstByte = packetData[i + 1], secondByte = packetData[i + 2];
                    return within708TextBlock(firstByte) && within708TextBlock(secondByte) && (i = this.handleText(++i, service, {
                        isMultiByte: !0
                    })), i;
                }, /**
                     * Parse and execute the CW# command.
                     *
                     * Set the current window.
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     * @return {Integer}          New index after parsing
                     */ Cea708Stream.prototype.setCurrentWindow = function(i, service) {
                    var b = this.current708Packet.data[i];
                    return service.setCurrentWindow(0x07 & b), i;
                }, /**
                     * Parse and execute the DF# command.
                     *
                     * Define a window and set it as the current window.
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     * @return {Integer}          New index after parsing
                     */ Cea708Stream.prototype.defineWindow = function(i, service) {
                    var packetData = this.current708Packet.data, b = packetData[i], windowNum = 0x07 & b;
                    service.setCurrentWindow(windowNum);
                    var win = service.currentWindow;
                    return b = packetData[++i], win.visible = (0x20 & b) >> 5, win.rowLock = (0x10 & b) >> 4, win.columnLock = (0x08 & b) >> 3, win.priority = 0x07 & b, b = packetData[++i], win.relativePositioning = (0x80 & b) >> 7, win.anchorVertical = 0x7f & b, b = packetData[++i], win.anchorHorizontal = b, b = packetData[++i], win.anchorPoint = (0xf0 & b) >> 4, win.rowCount = 0x0f & b, b = packetData[++i], win.columnCount = 0x3f & b, b = packetData[++i], win.windowStyle = (0x38 & b) >> 3, win.penStyle = 0x07 & b, // The spec says there are (rowCount+1) "virtual rows"
                    win.virtualRowCount = win.rowCount + 1, i;
                }, /**
                     * Parse and execute the SWA command.
                     *
                     * Set attributes of the current window.
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     * @return {Integer}          New index after parsing
                     */ Cea708Stream.prototype.setWindowAttributes = function(i, service) {
                    var packetData = this.current708Packet.data, b = packetData[i], winAttr = service.currentWindow.winAttr;
                    return b = packetData[++i], winAttr.fillOpacity = (0xc0 & b) >> 6, winAttr.fillRed = (0x30 & b) >> 4, winAttr.fillGreen = (0x0c & b) >> 2, winAttr.fillBlue = 0x03 & b, b = packetData[++i], winAttr.borderType = (0xc0 & b) >> 6, winAttr.borderRed = (0x30 & b) >> 4, winAttr.borderGreen = (0x0c & b) >> 2, winAttr.borderBlue = 0x03 & b, b = packetData[++i], winAttr.borderType += (0x80 & b) >> 5, winAttr.wordWrap = (0x40 & b) >> 6, winAttr.printDirection = (0x30 & b) >> 4, winAttr.scrollDirection = (0x0c & b) >> 2, winAttr.justify = 0x03 & b, b = packetData[++i], winAttr.effectSpeed = (0xf0 & b) >> 4, winAttr.effectDirection = (0x0c & b) >> 2, winAttr.displayEffect = 0x03 & b, i;
                }, /**
                     * Gather text from all displayed windows and push a caption to output.
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     */ Cea708Stream.prototype.flushDisplayed = function(pts, service) {
                    // display text in the correct order, but sample files so far have not shown any issue.
                    for(var displayedText = [], winId = 0; winId < 8; winId++)service.windows[winId].visible && !service.windows[winId].isEmpty() && displayedText.push(service.windows[winId].getText());
                    service.endPts = pts, service.text = displayedText.join("\n\n"), this.pushCaption(service), service.startPts = pts;
                }, /**
                     * Push a caption to output if the caption contains text.
                     *
                     * @param  {Service} service  The service object to be affected
                     */ Cea708Stream.prototype.pushCaption = function(service) {
                    "" !== service.text && (this.trigger("data", {
                        startPts: service.startPts,
                        endPts: service.endPts,
                        text: service.text,
                        stream: "cc708_" + service.serviceNum
                    }), service.text = "", service.startPts = service.endPts);
                }, /**
                     * Parse and execute the DSW command.
                     *
                     * Set visible property of windows based on the parsed bitmask.
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     * @return {Integer}          New index after parsing
                     */ Cea708Stream.prototype.displayWindows = function(i, service) {
                    var b = this.current708Packet.data[++i], pts = this.getPts(i);
                    this.flushDisplayed(pts, service);
                    for(var winId = 0; winId < 8; winId++)b & 0x01 << winId && (service.windows[winId].visible = 1);
                    return i;
                }, /**
                     * Parse and execute the HDW command.
                     *
                     * Set visible property of windows based on the parsed bitmask.
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     * @return {Integer}          New index after parsing
                     */ Cea708Stream.prototype.hideWindows = function(i, service) {
                    var b = this.current708Packet.data[++i], pts = this.getPts(i);
                    this.flushDisplayed(pts, service);
                    for(var winId = 0; winId < 8; winId++)b & 0x01 << winId && (service.windows[winId].visible = 0);
                    return i;
                }, /**
                     * Parse and execute the TGW command.
                     *
                     * Set visible property of windows based on the parsed bitmask.
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     * @return {Integer}          New index after parsing
                     */ Cea708Stream.prototype.toggleWindows = function(i, service) {
                    var b = this.current708Packet.data[++i], pts = this.getPts(i);
                    this.flushDisplayed(pts, service);
                    for(var winId = 0; winId < 8; winId++)b & 0x01 << winId && (service.windows[winId].visible ^= 1);
                    return i;
                }, /**
                     * Parse and execute the CLW command.
                     *
                     * Clear text of windows based on the parsed bitmask.
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     * @return {Integer}          New index after parsing
                     */ Cea708Stream.prototype.clearWindows = function(i, service) {
                    var b = this.current708Packet.data[++i], pts = this.getPts(i);
                    this.flushDisplayed(pts, service);
                    for(var winId = 0; winId < 8; winId++)b & 0x01 << winId && service.windows[winId].clearText();
                    return i;
                }, /**
                     * Parse and execute the DLW command.
                     *
                     * Re-initialize windows based on the parsed bitmask.
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     * @return {Integer}          New index after parsing
                     */ Cea708Stream.prototype.deleteWindows = function(i, service) {
                    var b = this.current708Packet.data[++i], pts = this.getPts(i);
                    this.flushDisplayed(pts, service);
                    for(var winId = 0; winId < 8; winId++)b & 0x01 << winId && service.windows[winId].reset();
                    return i;
                }, /**
                     * Parse and execute the SPA command.
                     *
                     * Set pen attributes of the current window.
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     * @return {Integer}          New index after parsing
                     */ Cea708Stream.prototype.setPenAttributes = function(i, service) {
                    var packetData = this.current708Packet.data, b = packetData[i], penAttr = service.currentWindow.penAttr;
                    return b = packetData[++i], penAttr.textTag = (0xf0 & b) >> 4, penAttr.offset = (0x0c & b) >> 2, penAttr.penSize = 0x03 & b, b = packetData[++i], penAttr.italics = (0x80 & b) >> 7, penAttr.underline = (0x40 & b) >> 6, penAttr.edgeType = (0x38 & b) >> 3, penAttr.fontStyle = 0x07 & b, i;
                }, /**
                     * Parse and execute the SPC command.
                     *
                     * Set pen color of the current window.
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     * @return {Integer}          New index after parsing
                     */ Cea708Stream.prototype.setPenColor = function(i, service) {
                    var packetData = this.current708Packet.data, b = packetData[i], penColor = service.currentWindow.penColor;
                    return b = packetData[++i], penColor.fgOpacity = (0xc0 & b) >> 6, penColor.fgRed = (0x30 & b) >> 4, penColor.fgGreen = (0x0c & b) >> 2, penColor.fgBlue = 0x03 & b, b = packetData[++i], penColor.bgOpacity = (0xc0 & b) >> 6, penColor.bgRed = (0x30 & b) >> 4, penColor.bgGreen = (0x0c & b) >> 2, penColor.bgBlue = 0x03 & b, b = packetData[++i], penColor.edgeRed = (0x30 & b) >> 4, penColor.edgeGreen = (0x0c & b) >> 2, penColor.edgeBlue = 0x03 & b, i;
                }, /**
                     * Parse and execute the SPL command.
                     *
                     * Set pen location of the current window.
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     * @return {Integer}          New index after parsing
                     */ Cea708Stream.prototype.setPenLocation = function(i, service) {
                    var packetData = this.current708Packet.data, b = packetData[i], penLoc = service.currentWindow.penLoc;
                    return service.currentWindow.pendingNewLine = !0, b = packetData[++i], penLoc.row = 0x0f & b, b = packetData[++i], penLoc.column = 0x3f & b, i;
                }, /**
                     * Execute the RST command.
                     *
                     * Reset service to a clean slate. Re-initialize.
                     *
                     * @param  {Integer} i        Current index in the 708 packet
                     * @param  {Service} service  The service object to be affected
                     * @return {Service}          Re-initialized service
                     */ Cea708Stream.prototype.reset = function(i, service) {
                    var pts = this.getPts(i);
                    return this.flushDisplayed(pts, service), this.initService(service.serviceNum, i);
                };
                // proper Unicode equivalent. The first keys that are only a single byte
                // are the non-standard ASCII characters, which simply map the CEA608 byte
                // to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608
                // character codes, but have their MSB bitmasked with 0x03 so that a lookup
                // can be performed regardless of the field and data channel on which the
                // character code was received.
                var CHARACTER_TRANSLATION = {
                    0x2a: 0xe1,
                    // á
                    0x5c: 0xe9,
                    // é
                    0x5e: 0xed,
                    // í
                    0x5f: 0xf3,
                    // ó
                    0x60: 0xfa,
                    // ú
                    0x7b: 0xe7,
                    // ç
                    0x7c: 0xf7,
                    // ÷
                    0x7d: 0xd1,
                    // Ñ
                    0x7e: 0xf1,
                    // ñ
                    0x7f: 0x2588,
                    // █
                    0x0130: 0xae,
                    // ®
                    0x0131: 0xb0,
                    // °
                    0x0132: 0xbd,
                    // ½
                    0x0133: 0xbf,
                    // ¿
                    0x0134: 0x2122,
                    // ™
                    0x0135: 0xa2,
                    // ¢
                    0x0136: 0xa3,
                    // £
                    0x0137: 0x266a,
                    // ♪
                    0x0138: 0xe0,
                    // à
                    0x0139: 0xa0,
                    //
                    0x013a: 0xe8,
                    // è
                    0x013b: 0xe2,
                    // â
                    0x013c: 0xea,
                    // ê
                    0x013d: 0xee,
                    // î
                    0x013e: 0xf4,
                    // ô
                    0x013f: 0xfb,
                    // û
                    0x0220: 0xc1,
                    // Á
                    0x0221: 0xc9,
                    // É
                    0x0222: 0xd3,
                    // Ó
                    0x0223: 0xda,
                    // Ú
                    0x0224: 0xdc,
                    // Ü
                    0x0225: 0xfc,
                    // ü
                    0x0226: 0x2018,
                    // ‘
                    0x0227: 0xa1,
                    // ¡
                    0x0228: 0x2a,
                    // *
                    0x0229: 0x27,
                    // '
                    0x022a: 0x2014,
                    // —
                    0x022b: 0xa9,
                    // ©
                    0x022c: 0x2120,
                    // ℠
                    0x022d: 0x2022,
                    // •
                    0x022e: 0x201c,
                    // “
                    0x022f: 0x201d,
                    // ”
                    0x0230: 0xc0,
                    // À
                    0x0231: 0xc2,
                    // Â
                    0x0232: 0xc7,
                    // Ç
                    0x0233: 0xc8,
                    // È
                    0x0234: 0xca,
                    // Ê
                    0x0235: 0xcb,
                    // Ë
                    0x0236: 0xeb,
                    // ë
                    0x0237: 0xce,
                    // Î
                    0x0238: 0xcf,
                    // Ï
                    0x0239: 0xef,
                    // ï
                    0x023a: 0xd4,
                    // Ô
                    0x023b: 0xd9,
                    // Ù
                    0x023c: 0xf9,
                    // ù
                    0x023d: 0xdb,
                    // Û
                    0x023e: 0xab,
                    // «
                    0x023f: 0xbb,
                    // »
                    0x0320: 0xc3,
                    // Ã
                    0x0321: 0xe3,
                    // ã
                    0x0322: 0xcd,
                    // Í
                    0x0323: 0xcc,
                    // Ì
                    0x0324: 0xec,
                    // ì
                    0x0325: 0xd2,
                    // Ò
                    0x0326: 0xf2,
                    // ò
                    0x0327: 0xd5,
                    // Õ
                    0x0328: 0xf5,
                    // õ
                    0x0329: 0x7b,
                    // {
                    0x032a: 0x7d,
                    // }
                    0x032b: 0x5c,
                    // \
                    0x032c: 0x5e,
                    // ^
                    0x032d: 0x5f,
                    // _
                    0x032e: 0x7c,
                    // |
                    0x032f: 0x7e,
                    // ~
                    0x0330: 0xc4,
                    // Ä
                    0x0331: 0xe4,
                    // ä
                    0x0332: 0xd6,
                    // Ö
                    0x0333: 0xf6,
                    // ö
                    0x0334: 0xdf,
                    // ß
                    0x0335: 0xa5,
                    // ¥
                    0x0336: 0xa4,
                    // ¤
                    0x0337: 0x2502,
                    // │
                    0x0338: 0xc5,
                    // Å
                    0x0339: 0xe5,
                    // å
                    0x033a: 0xd8,
                    // Ø
                    0x033b: 0xf8,
                    // ø
                    0x033c: 0x250c,
                    // ┌
                    0x033d: 0x2510,
                    // ┐
                    0x033e: 0x2514,
                    // └
                    0x033f: 0x2518
                }, getCharFromCode = function(code) {
                    return null === code ? "" : String.fromCharCode(code = CHARACTER_TRANSLATION[code] || code);
                }, ROWS = [
                    0x1100,
                    0x1120,
                    0x1200,
                    0x1220,
                    0x1500,
                    0x1520,
                    0x1600,
                    0x1620,
                    0x1700,
                    0x1720,
                    0x1000,
                    0x1300,
                    0x1320,
                    0x1400,
                    0x1420
                ], createDisplayBuffer = function() {
                    for(var result = [], i = 15; i--;)result.push("");
                    return result;
                }, Cea608Stream = function Cea608Stream(field, dataChannel) {
                    Cea608Stream.prototype.init.call(this), this.field_ = field || 0, this.dataChannel_ = dataChannel || 0, this.name_ = "CC" + ((this.field_ << 1 | this.dataChannel_) + 1), this.setConstants(), this.reset(), this.push = function(packet) {
                        var data, swap, char0, char1, text; // remove the parity bits
                        if ((data = 0x7f7f & packet.ccData) === this.lastControlCode_) {
                            this.lastControlCode_ = null;
                            return;
                        } // Store control codes
                        if ((0xf000 & data) == 0x1000 ? this.lastControlCode_ = data : data !== this.PADDING_ && (this.lastControlCode_ = null), char0 = data >>> 8, char1 = 0xff & data, data !== this.PADDING_) {
                            if (data === this.RESUME_CAPTION_LOADING_) this.mode_ = "popOn";
                            else if (data === this.END_OF_CAPTION_) // If an EOC is received while in paint-on mode, the displayed caption
                            // text should be swapped to non-displayed memory as if it was a pop-on
                            // caption. Because of that, we should explicitly switch back to pop-on
                            // mode
                            this.mode_ = "popOn", this.clearFormatting(packet.pts), this.flushDisplayed(packet.pts), swap = this.displayed_, this.displayed_ = this.nonDisplayed_, this.nonDisplayed_ = swap, this.startPts_ = packet.pts;
                            else if (data === this.ROLL_UP_2_ROWS_) this.rollUpRows_ = 2, this.setRollUp(packet.pts);
                            else if (data === this.ROLL_UP_3_ROWS_) this.rollUpRows_ = 3, this.setRollUp(packet.pts);
                            else if (data === this.ROLL_UP_4_ROWS_) this.rollUpRows_ = 4, this.setRollUp(packet.pts);
                            else if (data === this.CARRIAGE_RETURN_) this.clearFormatting(packet.pts), this.flushDisplayed(packet.pts), this.shiftRowsUp_(), this.startPts_ = packet.pts;
                            else if (data === this.BACKSPACE_) "popOn" === this.mode_ ? this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1) : this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
                            else if (data === this.ERASE_DISPLAYED_MEMORY_) this.flushDisplayed(packet.pts), this.displayed_ = createDisplayBuffer();
                            else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) this.nonDisplayed_ = createDisplayBuffer();
                            else if (data === this.RESUME_DIRECT_CAPTIONING_) "paintOn" !== this.mode_ && (// NOTE: This should be removed when proper caption positioning is
                            // implemented
                            this.flushDisplayed(packet.pts), this.displayed_ = createDisplayBuffer()), this.mode_ = "paintOn", this.startPts_ = packet.pts;
                            else if (this.isSpecialCharacter(char0, char1)) text = getCharFromCode(// Bitmask char0 so that we can apply character transformations
                            // regardless of field and data channel.
                            // Then byte-shift to the left and OR with char1 so we can pass the
                            // entire character code to `getCharFromCode`.
                            (char0 = (0x03 & char0) << 8) | char1), this[this.mode_](packet.pts, text), this.column_++;
                            else if (this.isExtCharacter(char0, char1)) "popOn" === this.mode_ ? this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1) : this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1), text = getCharFromCode(// regardless of field and data channel.
                            // Then byte-shift to the left and OR with char1 so we can pass the
                            // entire character code to `getCharFromCode`.
                            (char0 = (0x03 & char0) << 8) | char1), this[this.mode_](packet.pts, text), this.column_++;
                            else if (this.isMidRowCode(char0, char1)) // Attributes are not additive, so clear all formatting
                            this.clearFormatting(packet.pts), // should be replaced with spaces, so add one now
                            this[this.mode_](packet.pts, " "), this.column_++, (0xe & char1) == 0xe && this.addFormatting(packet.pts, [
                                "i"
                            ]), (0x1 & char1) == 0x1 && this.addFormatting(packet.pts, [
                                "u"
                            ]);
                            else if (this.isOffsetControlCode(char0, char1)) // Cursor position is set by indent PAC (see below) in 4-column
                            // increments, with an additional offset code of 1-3 to reach any
                            // of the 32 columns specified by CEA-608. So all we need to do
                            // here is increment the column cursor by the given offset.
                            this.column_ += 0x03 & char1; // Detect PACs (Preamble Address Codes)
                            else if (this.isPAC(char0, char1)) {
                                // There's no logic for PAC -> row mapping, so we have to just
                                // find the row code in an array and use its index :(
                                var row = ROWS.indexOf(0x1f20 & data); // Configure the caption window if we're in roll-up mode
                                "rollUp" === this.mode_ && (row - this.rollUpRows_ + 1 < 0 && (row = this.rollUpRows_ - 1), this.setRollUp(packet.pts, row)), row !== this.row_ && (// formatting is only persistent for current row
                                this.clearFormatting(packet.pts), this.row_ = row), 0x1 & char1 && -1 === this.formatting_.indexOf("u") && this.addFormatting(packet.pts, [
                                    "u"
                                ]), (0x10 & data) == 0x10 && // We've got an indent level code. Each successive even number
                                // increments the column cursor by 4, so we can get the desired
                                // column position by bit-shifting to the right (to get n/2)
                                // and multiplying by 4.
                                (this.column_ = ((0xe & data) >> 1) * 4), this.isColorPAC(char1) && (0xe & char1) == 0xe && this.addFormatting(packet.pts, [
                                    "i"
                                ]);
                            } else this.isNormalChar(char0) && (0x00 === char1 && (char1 = null), text = getCharFromCode(char0) + getCharFromCode(char1), this[this.mode_](packet.pts, text), this.column_ += text.length); // finish data processing
                        }
                    };
                };
                Cea608Stream.prototype = new Stream(), // display buffer
                Cea608Stream.prototype.flushDisplayed = function(pts) {
                    var content = this.displayed_ // remove spaces from the start and end of the string
                    .map(function(row, index) {
                        try {
                            return row.trim();
                        } catch (e) {
                            return(// Ordinarily, this shouldn't happen. However, caption
                            // parsing errors should not throw exceptions and
                            // break playback.
                            this.trigger("log", {
                                level: "warn",
                                message: "Skipping a malformed 608 caption at index " + index + "."
                            }), "");
                        }
                    }, this) // combine all text rows to display in one cue
                    .join("\n") // and remove blank rows from the start and end, but not the middle
                    .replace(/^\n+|\n+$/g, "");
                    content.length && this.trigger("data", {
                        startPts: this.startPts_,
                        endPts: pts,
                        text: content,
                        stream: this.name_
                    });
                }, /**
                     * Zero out the data, used for startup and on seek
                     */ Cea608Stream.prototype.reset = function() {
                    this.mode_ = "popOn", // actually display captions. If a caption is shifted to a row
                    // with a lower index than this, it is cleared from the display
                    // buffer
                    this.topRow_ = 0, this.startPts_ = 0, this.displayed_ = createDisplayBuffer(), this.nonDisplayed_ = createDisplayBuffer(), this.lastControlCode_ = null, this.column_ = 0, this.row_ = 14, this.rollUpRows_ = 2, this.formatting_ = [];
                }, /**
                     * Sets up control code and related constants for this instance
                     */ Cea608Stream.prototype.setConstants = function() {
                    0 === this.dataChannel_ ? (this.BASE_ = 0x10, this.EXT_ = 0x11, this.CONTROL_ = (0x14 | this.field_) << 8, this.OFFSET_ = 0x17) : 1 === this.dataChannel_ && (this.BASE_ = 0x18, this.EXT_ = 0x19, this.CONTROL_ = (0x1c | this.field_) << 8, this.OFFSET_ = 0x1f), // list is not exhaustive. For a more comprehensive listing and semantics see
                    // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf
                    // Padding
                    this.PADDING_ = 0x0000, this.RESUME_CAPTION_LOADING_ = 0x20 | this.CONTROL_, this.END_OF_CAPTION_ = 0x2f | this.CONTROL_, this.ROLL_UP_2_ROWS_ = 0x25 | this.CONTROL_, this.ROLL_UP_3_ROWS_ = 0x26 | this.CONTROL_, this.ROLL_UP_4_ROWS_ = 0x27 | this.CONTROL_, this.CARRIAGE_RETURN_ = 0x2d | this.CONTROL_, this.RESUME_DIRECT_CAPTIONING_ = 0x29 | this.CONTROL_, this.BACKSPACE_ = 0x21 | this.CONTROL_, this.ERASE_DISPLAYED_MEMORY_ = 0x2c | this.CONTROL_, this.ERASE_NON_DISPLAYED_MEMORY_ = 0x2e | this.CONTROL_;
                }, /**
                     * Detects if the 2-byte packet data is a special character
                     *
                     * Special characters have a second byte in the range 0x30 to 0x3f,
                     * with the first byte being 0x11 (for data channel 1) or 0x19 (for
                     * data channel 2).
                     *
                     * @param  {Integer} char0 The first byte
                     * @param  {Integer} char1 The second byte
                     * @return {Boolean}       Whether the 2 bytes are an special character
                     */ Cea608Stream.prototype.isSpecialCharacter = function(char0, char1) {
                    return char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f;
                }, /**
                     * Detects if the 2-byte packet data is an extended character
                     *
                     * Extended characters have a second byte in the range 0x20 to 0x3f,
                     * with the first byte being 0x12 or 0x13 (for data channel 1) or
                     * 0x1a or 0x1b (for data channel 2).
                     *
                     * @param  {Integer} char0 The first byte
                     * @param  {Integer} char1 The second byte
                     * @return {Boolean}       Whether the 2 bytes are an extended character
                     */ Cea608Stream.prototype.isExtCharacter = function(char0, char1) {
                    return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 0x20 && char1 <= 0x3f;
                }, /**
                     * Detects if the 2-byte packet is a mid-row code
                     *
                     * Mid-row codes have a second byte in the range 0x20 to 0x2f, with
                     * the first byte being 0x11 (for data channel 1) or 0x19 (for data
                     * channel 2).
                     *
                     * @param  {Integer} char0 The first byte
                     * @param  {Integer} char1 The second byte
                     * @return {Boolean}       Whether the 2 bytes are a mid-row code
                     */ Cea608Stream.prototype.isMidRowCode = function(char0, char1) {
                    return char0 === this.EXT_ && char1 >= 0x20 && char1 <= 0x2f;
                }, /**
                     * Detects if the 2-byte packet is an offset control code
                     *
                     * Offset control codes have a second byte in the range 0x21 to 0x23,
                     * with the first byte being 0x17 (for data channel 1) or 0x1f (for
                     * data channel 2).
                     *
                     * @param  {Integer} char0 The first byte
                     * @param  {Integer} char1 The second byte
                     * @return {Boolean}       Whether the 2 bytes are an offset control code
                     */ Cea608Stream.prototype.isOffsetControlCode = function(char0, char1) {
                    return char0 === this.OFFSET_ && char1 >= 0x21 && char1 <= 0x23;
                }, /**
                     * Detects if the 2-byte packet is a Preamble Address Code
                     *
                     * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)
                     * or 0x18 to 0x1f (for data channel 2), with the second byte in the
                     * range 0x40 to 0x7f.
                     *
                     * @param  {Integer} char0 The first byte
                     * @param  {Integer} char1 The second byte
                     * @return {Boolean}       Whether the 2 bytes are a PAC
                     */ Cea608Stream.prototype.isPAC = function(char0, char1) {
                    return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 0x40 && char1 <= 0x7f;
                }, /**
                     * Detects if a packet's second byte is in the range of a PAC color code
                     *
                     * PAC color codes have the second byte be in the range 0x40 to 0x4f, or
                     * 0x60 to 0x6f.
                     *
                     * @param  {Integer} char1 The second byte
                     * @return {Boolean}       Whether the byte is a color PAC
                     */ Cea608Stream.prototype.isColorPAC = function(char1) {
                    return char1 >= 0x40 && char1 <= 0x4f || char1 >= 0x60 && char1 <= 0x7f;
                }, /**
                     * Detects if a single byte is in the range of a normal character
                     *
                     * Normal text bytes are in the range 0x20 to 0x7f.
                     *
                     * @param  {Integer} char  The byte
                     * @return {Boolean}       Whether the byte is a normal character
                     */ Cea608Stream.prototype.isNormalChar = function(_char2) {
                    return _char2 >= 0x20 && _char2 <= 0x7f;
                }, /**
                     * Configures roll-up
                     *
                     * @param  {Integer} pts         Current PTS
                     * @param  {Integer} newBaseRow  Used by PACs to slide the current window to
                     *                               a new position
                     */ Cea608Stream.prototype.setRollUp = function(pts, newBaseRow) {
                    if ("rollUp" !== this.mode_ && (this.row_ = 14, this.mode_ = "rollUp", this.flushDisplayed(pts), this.nonDisplayed_ = createDisplayBuffer(), this.displayed_ = createDisplayBuffer()), void 0 !== newBaseRow && newBaseRow !== this.row_) // move currently displayed captions (up or down) to the new base row
                    for(var i = 0; i < this.rollUpRows_; i++)this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i], this.displayed_[this.row_ - i] = "";
                    void 0 === newBaseRow && (newBaseRow = this.row_), this.topRow_ = newBaseRow - this.rollUpRows_ + 1;
                }, // and keeps track of it for later closing
                Cea608Stream.prototype.addFormatting = function(pts, format) {
                    this.formatting_ = this.formatting_.concat(format);
                    var text = format.reduce(function(text, format) {
                        return text + "<" + format + ">";
                    }, "");
                    this[this.mode_](pts, text);
                }, // clears remembered formatting
                Cea608Stream.prototype.clearFormatting = function(pts) {
                    if (this.formatting_.length) {
                        var text = this.formatting_.reverse().reduce(function(text, format) {
                            return text + "</" + format + ">";
                        }, "");
                        this.formatting_ = [], this[this.mode_](pts, text);
                    }
                }, Cea608Stream.prototype.popOn = function(pts, text) {
                    var baseRow = this.nonDisplayed_[this.row_]; // buffer characters
                    baseRow += text, this.nonDisplayed_[this.row_] = baseRow;
                }, Cea608Stream.prototype.rollUp = function(pts, text) {
                    var baseRow = this.displayed_[this.row_];
                    baseRow += text, this.displayed_[this.row_] = baseRow;
                }, Cea608Stream.prototype.shiftRowsUp_ = function() {
                    var i; // clear out inactive rows
                    for(i = 0; i < this.topRow_; i++)this.displayed_[i] = "";
                    for(i = this.row_ + 1; i < 15; i++)this.displayed_[i] = "";
                     // shift displayed rows up
                    for(i = this.topRow_; i < this.row_; i++)this.displayed_[i] = this.displayed_[i + 1];
                     // clear out the bottom row
                    this.displayed_[this.row_] = "";
                }, Cea608Stream.prototype.paintOn = function(pts, text) {
                    var baseRow = this.displayed_[this.row_];
                    baseRow += text, this.displayed_[this.row_] = baseRow;
                };
                var streamTypes = {
                    H264_STREAM_TYPE: 0x1b,
                    ADTS_STREAM_TYPE: 0x0f,
                    METADATA_STREAM_TYPE: 0x15
                }, TYPE_SHARED = "shared", handleRollover$1 = function(value, reference) {
                    var direction = 1;
                    // cause an incorrect adjustment.
                    for(value > reference && // If the current timestamp value is greater than our reference timestamp and we detect a
                    // timestamp rollover, this means the roll over is happening in the opposite direction.
                    // Example scenario: Enter a long stream/video just after a rollover occurred. The reference
                    // point will be set to a small number, e.g. 1. The user then seeks backwards over the
                    // rollover point. In loading this segment, the timestamp values will be very large,
                    // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust
                    // the time stamp to be `value - 2^33`.
                    (direction = -1); Math.abs(reference - value) > 4294967296;)value += 8589934592 * direction;
                    return value;
                }, TimestampRolloverStream$1 = function TimestampRolloverStream(type) {
                    var lastDTS, referenceDTS;
                    TimestampRolloverStream.prototype.init.call(this), // video and audio. We could use `undefined` here, but having a string
                    // makes debugging a little clearer.
                    this.type_ = type || TYPE_SHARED, this.push = function(data) {
                        // Any "shared" rollover streams will accept _all_ data. Otherwise,
                        // streams will only accept data that matches their type.
                        (this.type_ === TYPE_SHARED || data.type === this.type_) && (void 0 === referenceDTS && (referenceDTS = data.dts), data.dts = handleRollover$1(data.dts, referenceDTS), data.pts = handleRollover$1(data.pts, referenceDTS), lastDTS = data.dts, this.trigger("data", data));
                    }, this.flush = function() {
                        referenceDTS = lastDTS, this.trigger("done");
                    }, this.endTimeline = function() {
                        this.flush(), this.trigger("endedtimeline");
                    }, this.discontinuity = function() {
                        referenceDTS = void 0, lastDTS = void 0;
                    }, this.reset = function() {
                        this.discontinuity(), this.trigger("reset");
                    };
                };
                TimestampRolloverStream$1.prototype = new Stream();
                var videoSample, audioSample, audioTrun, videoTrun, trunHeader, box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun$1, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS, silence, // 90kHz clock
                secondsToVideoTs, secondsToAudioTs, videoTsToSeconds, audioTsToSeconds, audioTsToVideoTs, videoTsToAudioTs, metadataTsToSeconds, _MetadataStream, percentEncode$1 = function(bytes, start, end) {
                    var i, result = "";
                    for(i = start; i < end; i++)result += "%" + ("00" + bytes[i].toString(16)).slice(-2);
                    return result;
                }, // return the string representation of the specified byte range,
                // interpreted as UTf-8.
                parseUtf8 = function(bytes, start, end) {
                    return decodeURIComponent(percentEncode$1(bytes, start, end));
                }, parseSyncSafeInteger$1 = function(data) {
                    return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];
                }, tagParsers = {
                    TXXX: function(tag) {
                        var i;
                        if (3 === tag.data[0]) {
                            for(i = 1; i < tag.data.length; i++)if (0 === tag.data[i]) {
                                // parse the text fields
                                tag.description = parseUtf8(tag.data, 1, i), tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\0*$/, "");
                                break;
                            }
                            tag.data = tag.value;
                        }
                    },
                    WXXX: function(tag) {
                        var i;
                        if (3 === tag.data[0]) {
                            for(i = 1; i < tag.data.length; i++)if (0 === tag.data[i]) {
                                // parse the description and URL fields
                                tag.description = parseUtf8(tag.data, 1, i), tag.url = parseUtf8(tag.data, i + 1, tag.data.length);
                                break;
                            }
                        }
                    },
                    PRIV: function(tag) {
                        var i;
                        for(i = 0; i < tag.data.length; i++)if (0 === tag.data[i]) {
                            // parse the description and URL fields
                            tag.owner = unescape(percentEncode$1(tag.data, 0, i));
                            break;
                        }
                        tag.privateData = tag.data.subarray(i + 1), tag.data = tag.privateData;
                    }
                };
                (_MetadataStream = function(options) {
                    var i, settings = {
                        // the bytes of the program-level descriptor field in MP2T
                        // see ISO/IEC 13818-1:2013 (E), section 2.6 "Program and
                        // program element descriptors"
                        descriptor: options && options.descriptor
                    }, // the total size in bytes of the ID3 tag being parsed
                    tagSize = 0, // tag data that is not complete enough to be parsed
                    buffer = [], // the total number of bytes currently in the buffer
                    bufferSize = 0;
                    if (_MetadataStream.prototype.init.call(this), // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track
                    this.dispatchType = streamTypes.METADATA_STREAM_TYPE.toString(16), settings.descriptor) for(i = 0; i < settings.descriptor.length; i++)this.dispatchType += ("00" + settings.descriptor[i].toString(16)).slice(-2);
                    this.push = function(chunk) {
                        var tag, frameStart, frameSize, frame, i;
                        if ("timed-metadata" === chunk.type) {
                            if (chunk.dataAlignmentIndicator && (bufferSize = 0, buffer.length = 0), 0 === buffer.length && (chunk.data.length < 10 || 73 !== chunk.data[0] || 68 !== chunk.data[1] || 51 !== chunk.data[2])) {
                                this.trigger("log", {
                                    level: "warn",
                                    message: "Skipping unrecognized metadata packet"
                                });
                                return;
                            } // add this chunk to the data we've collected so far
                            if (buffer.push(chunk), bufferSize += chunk.data.byteLength, 1 === buffer.length && // convenient for our comparisons to include it
                            (tagSize = parseSyncSafeInteger$1(chunk.data.subarray(6, 10)) + 10), !(bufferSize < tagSize)) {
                                for(i = 0, tag = {
                                    data: new Uint8Array(tagSize),
                                    frames: [],
                                    pts: buffer[0].pts,
                                    dts: buffer[0].dts
                                }; i < tagSize;)tag.data.set(buffer[0].data.subarray(0, tagSize - i), i), i += buffer[0].data.byteLength, bufferSize -= buffer[0].data.byteLength, buffer.shift();
                                 // find the start of the first frame and the end of the tag
                                frameStart = 10, 0x40 & tag.data[5] && (frameStart += 4 + parseSyncSafeInteger$1(tag.data.subarray(10, 14)), tagSize -= parseSyncSafeInteger$1(tag.data.subarray(16, 20)));
                                // http://id3.org/id3v2.3.0#ID3v2_frame_overview
                                do {
                                    if (// determine the number of bytes in this frame
                                    (frameSize = parseSyncSafeInteger$1(tag.data.subarray(frameStart + 4, frameStart + 8))) < 1) {
                                        this.trigger("log", {
                                            level: "warn",
                                            message: "Malformed ID3 frame encountered. Skipping metadata parsing."
                                        });
                                        return;
                                    }
                                    if ((frame = {
                                        id: String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]),
                                        data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)
                                    }).key = frame.id, tagParsers[frame.id] && (tagParsers[frame.id](frame), "com.apple.streaming.transportStreamTimestamp" === frame.owner)) {
                                        var d = frame.data, size = (0x01 & d[3]) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;
                                        size *= 4, size += 0x03 & d[7], frame.timeStamp = size, void 0 === tag.pts && void 0 === tag.dts && (tag.pts = frame.timeStamp, tag.dts = frame.timeStamp), this.trigger("timestamp", frame);
                                    }
                                    tag.frames.push(frame), frameStart += 10 + frameSize;
                                }while (frameStart < tagSize)
                                this.trigger("data", tag);
                            } // collect the entire frame so it can be parsed
                        } // if data_alignment_indicator is set in the PES header,
                    };
                }).prototype = new Stream();
                var metadataStream = _MetadataStream;
                /**
                     * Splits an incoming stream of binary data into MPEG-2 Transport
                     * Stream packets.
                     */ (_TransportPacketStream = function() {
                    var buffer = new Uint8Array(188), bytesInBuffer = 0;
                    _TransportPacketStream.prototype.init.call(this), /**
                         * Split a stream of data into M2TS packets
                         **/ this.push = function(bytes) {
                        var everything, startIndex = 0, endIndex = 188; // If there are bytes remaining from the last segment, prepend them to the
                        for(bytesInBuffer ? ((everything = new Uint8Array(bytes.byteLength + bytesInBuffer)).set(buffer.subarray(0, bytesInBuffer)), everything.set(bytes, bytesInBuffer), bytesInBuffer = 0) : everything = bytes; endIndex < everything.byteLength;){
                            // Look for a pair of start and end sync bytes in the data..
                            if (0x47 === everything[startIndex] && 0x47 === everything[endIndex]) {
                                // We found a packet so emit it and jump one whole packet forward in
                                // the stream
                                this.trigger("data", everything.subarray(startIndex, endIndex)), startIndex += 188, endIndex += 188;
                                continue;
                            } // If we get here, we have somehow become de-synchronized and we need to step
                            // forward one byte at a time until we find a pair of sync bytes that denote
                            // a packet
                            startIndex++, endIndex++;
                        } // If there was some data left over at the end of the segment that couldn't
                        startIndex < everything.byteLength && (buffer.set(everything.subarray(startIndex), 0), bytesInBuffer = everything.byteLength - startIndex);
                    }, /**
                         * Passes identified M2TS packets to the TransportParseStream to be parsed
                         **/ this.flush = function() {
                        188 === bytesInBuffer && 0x47 === buffer[0] && (this.trigger("data", buffer), bytesInBuffer = 0), this.trigger("done");
                    }, this.endTimeline = function() {
                        this.flush(), this.trigger("endedtimeline");
                    }, this.reset = function() {
                        bytesInBuffer = 0, this.trigger("reset");
                    };
                }).prototype = new Stream(), /**
                     * Accepts an MP2T TransportPacketStream and emits data events with parsed
                     * forms of the individual transport stream packets.
                     */ (_TransportParseStream = function() {
                    var parsePsi, parsePat, parsePmt, self1;
                    _TransportParseStream.prototype.init.call(this), self1 = this, this.packetsWaitingForPmt = [], this.programMapTable = void 0, parsePsi = function(payload, psi) {
                        var offset = 0; // PSI packets may be split into multiple sections and those
                        psi.payloadUnitStartIndicator && (offset += payload[offset] + 1), "pat" === psi.type ? parsePat(payload.subarray(offset), psi) : parsePmt(payload.subarray(offset), psi);
                    }, parsePat = function(payload, pat) {
                        pat.section_number = payload[7], pat.last_section_number = payload[8], // skip the PSI header and parse the first PMT entry
                        self1.pmtPid = (0x1f & payload[10]) << 8 | payload[11], pat.pmtPid = self1.pmtPid;
                    }, /**
                         * Parse out the relevant fields of a Program Map Table (PMT).
                         * @param payload {Uint8Array} the PMT-specific portion of an MP2T
                         * packet. The first byte in this array should be the table_id
                         * field.
                         * @param pmt {object} the object that should be decorated with
                         * fields parsed from the PMT.
                         */ parsePmt = function(payload, pmt) {
                        var tableEnd, offset; // PMTs can be sent ahead of the time when they should actually
                        // take effect. We don't believe this should ever be the case
                        // for HLS but we'll ignore "forward" PMT declarations if we see
                        // them. Future PMT declarations have the current_next_indicator
                        // set to zero.
                        if (0x01 & payload[5]) {
                            for(self1.programMapTable = {
                                video: null,
                                audio: null,
                                "timed-metadata": {}
                            }, tableEnd = 3 + ((0x0f & payload[1]) << 8 | payload[2]) - 4, offset = 12 + ((0x0f & payload[10]) << 8 | payload[11]); offset < tableEnd;){
                                var streamType = payload[offset], pid = (0x1f & payload[offset + 1]) << 8 | payload[offset + 2];
                                streamType === streamTypes.H264_STREAM_TYPE && null === self1.programMapTable.video ? self1.programMapTable.video = pid : streamType === streamTypes.ADTS_STREAM_TYPE && null === self1.programMapTable.audio ? self1.programMapTable.audio = pid : streamType === streamTypes.METADATA_STREAM_TYPE && // map pid to stream type for metadata streams
                                (self1.programMapTable["timed-metadata"][pid] = streamType), // skip past the elementary stream descriptors, if present
                                offset += ((0x0f & payload[offset + 3]) << 8 | payload[offset + 4]) + 5;
                            } // record the map on the packet as well
                            pmt.programMapTable = self1.programMapTable;
                        } // overwrite any existing program map table
                    }, /**
                         * Deliver a new MP2T packet to the next stream in the pipeline.
                         */ this.push = function(packet) {
                        var result = {}, offset = 4;
                        if (result.payloadUnitStartIndicator = !!(0x40 & packet[1]), result.pid = 0x1f & packet[1], result.pid <<= 8, result.pid |= packet[2], (0x30 & packet[3]) >>> 4 > 0x01 && (offset += packet[offset] + 1), 0 === result.pid) result.type = "pat", parsePsi(packet.subarray(offset), result), this.trigger("data", result);
                        else if (result.pid === this.pmtPid) for(result.type = "pmt", parsePsi(packet.subarray(offset), result), this.trigger("data", result); this.packetsWaitingForPmt.length;)this.processPes_.apply(this, this.packetsWaitingForPmt.shift());
                        else void 0 === this.programMapTable ? // When we have not seen a PMT yet, defer further processing of
                        // PES packets until one has been parsed
                        this.packetsWaitingForPmt.push([
                            packet,
                            offset,
                            result
                        ]) : this.processPes_(packet, offset, result);
                    }, this.processPes_ = function(packet, offset, result) {
                        result.pid === this.programMapTable.video ? result.streamType = streamTypes.H264_STREAM_TYPE : result.pid === this.programMapTable.audio ? result.streamType = streamTypes.ADTS_STREAM_TYPE : // if not video or audio, it is timed-metadata or unknown
                        // if unknown, streamType will be undefined
                        result.streamType = this.programMapTable["timed-metadata"][result.pid], result.type = "pes", result.data = packet.subarray(offset), this.trigger("data", result);
                    };
                }).prototype = new Stream(), _TransportParseStream.STREAM_TYPES = {
                    h264: 0x1b,
                    adts: 0x0f
                }, /**
                     * Reconsistutes program elementary stream (PES) packets from parsed
                     * transport stream packets. That is, if you pipe an
                     * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output
                     * events will be events which capture the bytes for individual PES
                     * packets plus relevant metadata that has been extracted from the
                     * container.
                     */ (_ElementaryStream = function() {
                    var programMapTable, self1 = this, segmentHadPmt = !1, // PES packet fragments
                    video = {
                        data: [],
                        size: 0
                    }, audio = {
                        data: [],
                        size: 0
                    }, timedMetadata = {
                        data: [],
                        size: 0
                    }, parsePes = function(payload, pes) {
                        var ptsDtsFlags, startPrefix = payload[0] << 16 | payload[1] << 8 | payload[2]; // default to an empty array
                        // that are frame data that is continuing from the previous fragment. This
                        // is to check that the pes data is the start of a new pes payload
                        pes.data = new Uint8Array(), 1 === startPrefix && (pes.packetLength = 6 + (payload[4] << 8 | payload[5]), pes.dataAlignmentIndicator = (0x04 & payload[6]) != 0, 0xc0 & // and a DTS value. Determine what combination of values is
                        // available to work with.
                        (ptsDtsFlags = payload[7]) && (// the PTS and DTS are not written out directly. For information
                        // on how they are encoded, see
                        // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
                        pes.pts = (0x0e & payload[9]) << 27 | (0xff & payload[10]) << 20 | (0xfe & payload[11]) << 12 | (0xff & payload[12]) << 5 | (0xfe & payload[13]) >>> 3, pes.pts *= 4, pes.pts += (0x06 & payload[13]) >>> 1, pes.dts = pes.pts, 0x40 & ptsDtsFlags && (pes.dts = (0x0e & payload[14]) << 27 | (0xff & payload[15]) << 20 | (0xfe & payload[16]) << 12 | (0xff & payload[17]) << 5 | (0xfe & payload[18]) >>> 3, pes.dts *= 4, pes.dts += (0x06 & payload[18]) >>> 1)), // pes_header_data_length specifies the number of header bytes
                        // that follow the last byte of the field.
                        pes.data = payload.subarray(9 + payload[8])); // get the packet length, this will be 0 for video
                    }, /**
                             * Pass completely parsed PES packets to the next stream in the pipeline
                             **/ flushStream = function(stream, type, forceFlush) {
                        var fragment, packetData = new Uint8Array(stream.size), event = {
                            type: type
                        }, i = 0, offset = 0, packetFlushable = !1; // do nothing if there is not enough buffered data for a complete
                        // PES header
                        if (stream.data.length && !(stream.size < 9)) {
                            for(i = 0, event.trackId = stream.data[0].pid; i < stream.data.length; i++)fragment = stream.data[i], packetData.set(fragment.data, offset), offset += fragment.data.byteLength;
                             // parse assembled packet's PES header
                            parsePes(packetData, event), // check that there is enough stream data to fill the packet
                            packetFlushable = "video" === type || event.packetLength <= stream.size, (forceFlush || packetFlushable) && (stream.size = 0, stream.data.length = 0), packetFlushable && self1.trigger("data", event);
                        }
                    };
                    _ElementaryStream.prototype.init.call(this), /**
                         * Identifies M2TS packet types and parses PES packets using metadata
                         * parsed from the PMT
                         **/ this.push = function(data) {
                        ({
                            pat: function() {
                            // we have to wait for the PMT to arrive as well before we
                            // have any meaningful metadata
                            },
                            pes: function() {
                                var stream, streamType;
                                switch(data.streamType){
                                    case streamTypes.H264_STREAM_TYPE:
                                        stream = video, streamType = "video";
                                        break;
                                    case streamTypes.ADTS_STREAM_TYPE:
                                        stream = audio, streamType = "audio";
                                        break;
                                    case streamTypes.METADATA_STREAM_TYPE:
                                        stream = timedMetadata, streamType = "timed-metadata";
                                        break;
                                    default:
                                        // ignore unknown stream types
                                        return;
                                } // if a new packet is starting, we can flush the completed
                                data.payloadUnitStartIndicator && flushStream(stream, streamType, !0), // complete payload
                                stream.data.push(data), stream.size += data.data.byteLength;
                            },
                            pmt: function() {
                                var event = {
                                    type: "metadata",
                                    tracks: []
                                };
                                null !== (programMapTable = data.programMapTable).video && event.tracks.push({
                                    timelineStartInfo: {
                                        baseMediaDecodeTime: 0
                                    },
                                    id: +programMapTable.video,
                                    codec: "avc",
                                    type: "video"
                                }), null !== programMapTable.audio && event.tracks.push({
                                    timelineStartInfo: {
                                        baseMediaDecodeTime: 0
                                    },
                                    id: +programMapTable.audio,
                                    codec: "adts",
                                    type: "audio"
                                }), segmentHadPmt = !0, self1.trigger("data", event);
                            }
                        })[data.type]();
                    }, this.reset = function() {
                        video.size = 0, video.data.length = 0, audio.size = 0, audio.data.length = 0, this.trigger("reset");
                    }, /**
                         * Flush any remaining input. Video PES packets may be of variable
                         * length. Normally, the start of a new video packet can trigger the
                         * finalization of the previous packet. That is not possible if no
                         * more video is forthcoming, however. In that case, some other
                         * mechanism (like the end of the file) has to be employed. When it is
                         * clear that no additional data is forthcoming, calling this method
                         * will flush the buffered packets.
                         */ this.flushStreams_ = function() {
                        // !!THIS ORDER IS IMPORTANT!!
                        // video first then audio
                        flushStream(video, "video"), flushStream(audio, "audio"), flushStream(timedMetadata, "timed-metadata");
                    }, this.flush = function() {
                        // if on flush we haven't had a pmt emitted
                        // and we have a pmt to emit. emit the pmt
                        // so that we trigger a trackinfo downstream.
                        if (!segmentHadPmt && programMapTable) {
                            var pmt = {
                                type: "metadata",
                                tracks: []
                            }; // translate audio and video streams to tracks
                            null !== programMapTable.video && pmt.tracks.push({
                                timelineStartInfo: {
                                    baseMediaDecodeTime: 0
                                },
                                id: +programMapTable.video,
                                codec: "avc",
                                type: "video"
                            }), null !== programMapTable.audio && pmt.tracks.push({
                                timelineStartInfo: {
                                    baseMediaDecodeTime: 0
                                },
                                id: +programMapTable.audio,
                                codec: "adts",
                                type: "audio"
                            }), self1.trigger("data", pmt);
                        }
                        segmentHadPmt = !1, this.flushStreams_(), this.trigger("done");
                    };
                }).prototype = new Stream();
                var m2ts = {
                    PAT_PID: 0x0000,
                    MP2T_PACKET_LENGTH: 188,
                    TransportPacketStream: _TransportPacketStream,
                    TransportParseStream: _TransportParseStream,
                    ElementaryStream: _ElementaryStream,
                    TimestampRolloverStream: TimestampRolloverStream$1,
                    CaptionStream: CaptionStream$1,
                    Cea608Stream: Cea608Stream,
                    Cea708Stream: Cea708Stream,
                    MetadataStream: metadataStream
                };
                for(var type in streamTypes)streamTypes.hasOwnProperty(type) && (m2ts[type] = streamTypes[type]);
                var ONE_SECOND_IN_TS$2 = clock.ONE_SECOND_IN_TS, ADTS_SAMPLING_FREQUENCIES$1 = [
                    96000,
                    88200,
                    64000,
                    48000,
                    44100,
                    32000,
                    24000,
                    22050,
                    16000,
                    12000,
                    11025,
                    8000,
                    7350
                ];
                /*
                     * Accepts a ElementaryStream and emits data events with parsed
                     * AAC Audio Frames of the individual packets. Input audio in ADTS
                     * format is unpacked and re-emitted as AAC frames.
                     *
                     * @see http://wiki.multimedia.cx/index.php?title=ADTS
                     * @see http://wiki.multimedia.cx/?title=Understanding_AAC
                     */ (_AdtsStream = function(handlePartialSegments) {
                    var buffer, frameNum = 0;
                    _AdtsStream.prototype.init.call(this), this.skipWarn_ = function(start, end) {
                        this.trigger("log", {
                            level: "warn",
                            message: "adts skiping bytes " + start + " to " + end + " in frame " + frameNum + " outside syncword"
                        });
                    }, this.push = function(packet) {
                        var skip, frameLength, protectionSkipBytes, oldBuffer, sampleCount, adtsFrameDuration, i = 0;
                        if (handlePartialSegments || (frameNum = 0), "audio" === packet.type) {
                            // If we don't have enough bytes to do that, then we definitely won't have a full frame.
                            for(buffer && buffer.length ? ((buffer = new Uint8Array((oldBuffer = buffer).byteLength + packet.data.byteLength)).set(oldBuffer), buffer.set(packet.data, oldBuffer.byteLength)) : buffer = packet.data; i + 7 < buffer.length;){
                                // Look for the start of an ADTS header..
                                if (0xff !== buffer[i] || (0xf6 & buffer[i + 1]) != 0xf0) {
                                    "number" != typeof skip && (skip = i), // find a valid ADTS header starting at the next byte
                                    i++;
                                    continue;
                                }
                                // then we have to wait for more data
                                if ("number" == typeof skip && (this.skipWarn_(skip, i), skip = null), // end of the ADTS header
                                protectionSkipBytes = (0x01 & ~buffer[i + 1]) * 2, // end of the sync sequence
                                // NOTE: frame length includes the size of the header
                                frameLength = (0x03 & buffer[i + 3]) << 11 | buffer[i + 4] << 3 | (0xe0 & buffer[i + 5]) >> 5, adtsFrameDuration = (sampleCount = ((0x03 & buffer[i + 6]) + 1) * 1024) * ONE_SECOND_IN_TS$2 / ADTS_SAMPLING_FREQUENCIES$1[(0x3c & buffer[i + 2]) >>> 2], buffer.byteLength - i < frameLength) break;
                                 // Otherwise, deliver the complete AAC frame
                                this.trigger("data", {
                                    pts: packet.pts + frameNum * adtsFrameDuration,
                                    dts: packet.dts + frameNum * adtsFrameDuration,
                                    sampleCount: sampleCount,
                                    audioobjecttype: (buffer[i + 2] >>> 6 & 0x03) + 1,
                                    channelcount: (1 & buffer[i + 2]) << 2 | (0xc0 & buffer[i + 3]) >>> 6,
                                    samplerate: ADTS_SAMPLING_FREQUENCIES$1[(0x3c & buffer[i + 2]) >>> 2],
                                    samplingfrequencyindex: (0x3c & buffer[i + 2]) >>> 2,
                                    // assume ISO/IEC 14496-12 AudioSampleEntry default of 16
                                    samplesize: 16,
                                    // data is the frame without it's header
                                    data: buffer.subarray(i + 7 + protectionSkipBytes, i + frameLength)
                                }), frameNum++, i += frameLength;
                            }
                            "number" == typeof skip && (this.skipWarn_(skip, i), skip = null), buffer = buffer.subarray(i);
                        } // Prepend any data in the buffer to the input data so that we can parse
                    }, this.flush = function() {
                        frameNum = 0, this.trigger("done");
                    }, this.reset = function() {
                        buffer = void 0, this.trigger("reset");
                    }, this.endTimeline = function() {
                        buffer = void 0, this.trigger("endedtimeline");
                    };
                }).prototype = new Stream();
                var adts = _AdtsStream;
                /**
                     * Parser for exponential Golomb codes, a variable-bitwidth number encoding
                     * scheme used by h264.
                     */ ExpGolomb = function(workingData) {
                    var workingBytesAvailable = workingData.byteLength, // the current word being examined
                    workingWord = 0, // :uint
                    // the number of bits left to examine in the current word
                    workingBitsAvailable = 0; // :uint;
                    // ():uint
                    this.length = function() {
                        return 8 * workingBytesAvailable;
                    }, this.bitsAvailable = function() {
                        return 8 * workingBytesAvailable + workingBitsAvailable;
                    }, this.loadWord = function() {
                        var position = workingData.byteLength - workingBytesAvailable, workingBytes = new Uint8Array(4), availableBytes = Math.min(4, workingBytesAvailable);
                        if (0 === availableBytes) throw Error("no bytes available");
                        workingBytes.set(workingData.subarray(position, position + availableBytes)), workingWord = new DataView(workingBytes.buffer).getUint32(0), workingBitsAvailable = 8 * availableBytes, workingBytesAvailable -= availableBytes;
                    }, this.skipBits = function(count) {
                        var skipBytes; // :int
                        workingBitsAvailable > count || (count -= workingBitsAvailable, skipBytes = Math.floor(count / 8), count -= 8 * skipBytes, workingBytesAvailable -= skipBytes, this.loadWord()), workingWord <<= count, workingBitsAvailable -= count;
                    }, this.readBits = function(size) {
                        var bits = Math.min(workingBitsAvailable, size), // :uint
                        valu = workingWord >>> 32 - bits; // :uint
                        return (// if size > 31, handle error
                        (workingBitsAvailable -= bits) > 0 ? workingWord <<= bits : workingBytesAvailable > 0 && this.loadWord(), (bits = size - bits) > 0) ? valu << bits | this.readBits(bits) : valu;
                    }, this.skipLeadingZeros = function() {
                        var leadingZeroCount; // :uint
                        for(leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount)if ((workingWord & 0x80000000 >>> leadingZeroCount) != 0) return(// the first bit of working word is 1
                        workingWord <<= leadingZeroCount, workingBitsAvailable -= leadingZeroCount, leadingZeroCount);
                         // we exhausted workingWord and still have not found a 1
                        return this.loadWord(), leadingZeroCount + this.skipLeadingZeros();
                    }, this.skipUnsignedExpGolomb = function() {
                        this.skipBits(1 + this.skipLeadingZeros());
                    }, this.skipExpGolomb = function() {
                        this.skipBits(1 + this.skipLeadingZeros());
                    }, this.readUnsignedExpGolomb = function() {
                        var clz = this.skipLeadingZeros(); // :uint
                        return this.readBits(clz + 1) - 1;
                    }, this.readExpGolomb = function() {
                        var valu = this.readUnsignedExpGolomb(); // :int
                        return 0x01 & valu ? 1 + valu >>> 1 : -1 * (valu >>> 1);
                    }, // :Boolean
                    this.readBoolean = function() {
                        return 1 === this.readBits(1);
                    }, this.readUnsignedByte = function() {
                        return this.readBits(8);
                    }, this.loadWord();
                }, /**
                     * Accepts a NAL unit byte stream and unpacks the embedded NAL units.
                     */ (_NalByteStream = function() {
                    var i, buffer, syncPoint = 0;
                    _NalByteStream.prototype.init.call(this), /*
                         * Scans a byte stream and triggers a data event with the NAL units found.
                         * @param {Object} data Event received from H264Stream
                         * @param {Uint8Array} data.data The h264 byte stream to be scanned
                         *
                         * @see H264Stream.push
                         */ this.push = function(data) {
                        buffer ? ((swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength)).set(buffer), swapBuffer.set(data.data, buffer.byteLength), buffer = swapBuffer) : buffer = data.data;
                        // scan for NAL unit boundaries
                        // a match looks like this:
                        // 0 0 1 .. NAL .. 0 0 1
                        // ^ sync point        ^ i
                        // or this:
                        // 0 0 1 .. NAL .. 0 0 0
                        // ^ sync point        ^ i
                        // advance the sync point to a NAL start, if necessary
                        for(var swapBuffer, len = buffer.byteLength; syncPoint < len - 3; syncPoint++)if (1 === buffer[syncPoint + 2]) {
                            // the sync point is properly aligned
                            i = syncPoint + 5;
                            break;
                        }
                        for(; i < len;)// look at the current byte to determine if we've hit the end of
                        // a NAL unit boundary
                        switch(buffer[i]){
                            case 0:
                                // skip past non-sync sequences
                                if (0 !== buffer[i - 1]) {
                                    i += 2;
                                    break;
                                } // deliver the NAL unit if it isn't empty
                                if (0 !== buffer[i - 2]) {
                                    i++;
                                    break;
                                }
                                syncPoint + 3 !== i - 2 && this.trigger("data", buffer.subarray(syncPoint + 3, i - 2));
                                do i++;
                                while (1 !== buffer[i] && i < len)
                                syncPoint = i - 2, i += 3;
                                break;
                            case 1:
                                // skip past non-sync sequences
                                if (0 !== buffer[i - 1] || 0 !== buffer[i - 2]) {
                                    i += 3;
                                    break;
                                } // deliver the NAL unit
                                this.trigger("data", buffer.subarray(syncPoint + 3, i - 2)), syncPoint = i - 2, i += 3;
                                break;
                            default:
                                // the current byte isn't a one or zero, so it cannot be part
                                // of a sync sequence
                                i += 3;
                        }
                         // filter out the NAL units that were delivered
                        buffer = buffer.subarray(syncPoint), i -= syncPoint, syncPoint = 0;
                    }, this.reset = function() {
                        buffer = null, syncPoint = 0, this.trigger("reset");
                    }, this.flush = function() {
                        buffer && buffer.byteLength > 3 && this.trigger("data", buffer.subarray(syncPoint + 3)), buffer = null, syncPoint = 0, this.trigger("done");
                    }, this.endTimeline = function() {
                        this.flush(), this.trigger("endedtimeline");
                    };
                }).prototype = new Stream(), // see Recommendation ITU-T H.264 (4/2013),
                // 7.3.2.1.1 Sequence parameter set data syntax
                PROFILES_WITH_OPTIONAL_SPS_DATA = {
                    100: !0,
                    110: !0,
                    122: !0,
                    244: !0,
                    44: !0,
                    83: !0,
                    86: !0,
                    118: !0,
                    128: !0,
                    // TODO: the three profiles below don't
                    // appear to have sps data in the specificiation anymore?
                    138: !0,
                    139: !0,
                    134: !0
                }, /**
                     * Accepts input from a ElementaryStream and produces H.264 NAL unit data
                     * events.
                     */ (_H264Stream = function() {
                    var self1, trackId, currentPts, currentDts, discardEmulationPreventionBytes, readSequenceParameterSet, skipScalingList, nalByteStream = new _NalByteStream();
                    _H264Stream.prototype.init.call(this), self1 = this, /*
                         * Pushes a packet from a stream onto the NalByteStream
                         *
                         * @param {Object} packet - A packet received from a stream
                         * @param {Uint8Array} packet.data - The raw bytes of the packet
                         * @param {Number} packet.dts - Decode timestamp of the packet
                         * @param {Number} packet.pts - Presentation timestamp of the packet
                         * @param {Number} packet.trackId - The id of the h264 track this packet came from
                         * @param {('video'|'audio')} packet.type - The type of packet
                         *
                         */ this.push = function(packet) {
                        "video" === packet.type && (trackId = packet.trackId, currentPts = packet.pts, currentDts = packet.dts, nalByteStream.push(packet));
                    }, /*
                         * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps
                         * for the NALUs to the next stream component.
                         * Also, preprocess caption and sequence parameter NALUs.
                         *
                         * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`
                         * @see NalByteStream.push
                         */ nalByteStream.on("data", function(data) {
                        var event = {
                            trackId: trackId,
                            pts: currentPts,
                            dts: currentDts,
                            data: data,
                            nalUnitTypeCode: 0x1f & data[0]
                        };
                        switch(event.nalUnitTypeCode){
                            case 0x05:
                                event.nalUnitType = "slice_layer_without_partitioning_rbsp_idr";
                                break;
                            case 0x06:
                                event.nalUnitType = "sei_rbsp", event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));
                                break;
                            case 0x07:
                                event.nalUnitType = "seq_parameter_set_rbsp", event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1)), event.config = readSequenceParameterSet(event.escapedRBSP);
                                break;
                            case 0x08:
                                event.nalUnitType = "pic_parameter_set_rbsp";
                                break;
                            case 0x09:
                                event.nalUnitType = "access_unit_delimiter_rbsp";
                        } // This triggers data on the H264Stream
                        self1.trigger("data", event);
                    }), nalByteStream.on("done", function() {
                        self1.trigger("done");
                    }), nalByteStream.on("partialdone", function() {
                        self1.trigger("partialdone");
                    }), nalByteStream.on("reset", function() {
                        self1.trigger("reset");
                    }), nalByteStream.on("endedtimeline", function() {
                        self1.trigger("endedtimeline");
                    }), this.flush = function() {
                        nalByteStream.flush();
                    }, this.partialFlush = function() {
                        nalByteStream.partialFlush();
                    }, this.reset = function() {
                        nalByteStream.reset();
                    }, this.endTimeline = function() {
                        nalByteStream.endTimeline();
                    }, /**
                         * Advance the ExpGolomb decoder past a scaling list. The scaling
                         * list is optionally transmitted as part of a sequence parameter
                         * set and is not relevant to transmuxing.
                         * @param count {number} the number of entries in this scaling list
                         * @param expGolombDecoder {object} an ExpGolomb pointed to the
                         * start of a scaling list
                         * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1
                         */ skipScalingList = function(count, expGolombDecoder) {
                        var j, lastScale = 8, nextScale = 8;
                        for(j = 0; j < count; j++)0 !== nextScale && (nextScale = (lastScale + expGolombDecoder.readExpGolomb() + 256) % 256), lastScale = 0 === nextScale ? lastScale : nextScale;
                    }, /**
                         * Expunge any "Emulation Prevention" bytes from a "Raw Byte
                         * Sequence Payload"
                         * @param data {Uint8Array} the bytes of a RBSP from a NAL
                         * unit
                         * @return {Uint8Array} the RBSP without any Emulation
                         * Prevention Bytes
                         */ discardEmulationPreventionBytes = function(data) {
                        for(var newLength, newData, length = data.byteLength, emulationPreventionBytesPositions = [], i = 1; i < length - 2;)0 === data[i] && 0 === data[i + 1] && 0x03 === data[i + 2] ? (emulationPreventionBytesPositions.push(i + 2), i += 2) : i++;
                         // If no Emulation Prevention Bytes were found just return the original
                        // array
                        if (0 === emulationPreventionBytesPositions.length) return data;
                         // Create a new array to hold the NAL unit data
                        newData = new Uint8Array(newLength = length - emulationPreventionBytesPositions.length);
                        var sourceIndex = 0;
                        for(i = 0; i < newLength; sourceIndex++, i++)sourceIndex === emulationPreventionBytesPositions[0] && (// Skip this byte
                        sourceIndex++, emulationPreventionBytesPositions.shift()), newData[i] = data[sourceIndex];
                        return newData;
                    }, /**
                         * Read a sequence parameter set and return some interesting video
                         * properties. A sequence parameter set is the H264 metadata that
                         * describes the properties of upcoming video frames.
                         * @param data {Uint8Array} the bytes of a sequence parameter set
                         * @return {object} an object with configuration parsed from the
                         * sequence parameter set, including the dimensions of the
                         * associated video frames.
                         */ readSequenceParameterSet = function(data) {
                        var expGolombDecoder, profileIdc, levelIdc, profileCompatibility, chromaFormatIdc, picOrderCntType, numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1, picHeightInMapUnitsMinus1, frameMbsOnlyFlag, scalingListCount, i, frameCropLeftOffset = 0, frameCropRightOffset = 0, frameCropTopOffset = 0, frameCropBottomOffset = 0, sarRatio = [
                            1,
                            1
                        ];
                        // some profiles have more optional data we don't need
                        if (profileIdc = (expGolombDecoder = new ExpGolomb(data)).readUnsignedByte(), profileCompatibility = expGolombDecoder.readUnsignedByte(), levelIdc = expGolombDecoder.readUnsignedByte(), expGolombDecoder.skipUnsignedExpGolomb(), PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc] && (3 === (chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb()) && expGolombDecoder.skipBits(1), expGolombDecoder.skipUnsignedExpGolomb(), expGolombDecoder.skipUnsignedExpGolomb(), expGolombDecoder.skipBits(1), expGolombDecoder.readBoolean())) for(i = 0, // seq_scaling_matrix_present_flag
                        scalingListCount = 3 !== chromaFormatIdc ? 8 : 12; i < scalingListCount; i++)expGolombDecoder.readBoolean() && (i < 6 ? skipScalingList(16, expGolombDecoder) : skipScalingList(64, expGolombDecoder));
                        if (expGolombDecoder.skipUnsignedExpGolomb(), 0 === (picOrderCntType = expGolombDecoder.readUnsignedExpGolomb())) expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4
                        else if (1 === picOrderCntType) for(expGolombDecoder.skipBits(1), expGolombDecoder.skipExpGolomb(), expGolombDecoder.skipExpGolomb(), numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb(), i = 0; i < numRefFramesInPicOrderCntCycle; i++)expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]
                        if (expGolombDecoder.skipUnsignedExpGolomb(), expGolombDecoder.skipBits(1), picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb(), picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb(), 0 === (frameMbsOnlyFlag = expGolombDecoder.readBits(1)) && expGolombDecoder.skipBits(1), expGolombDecoder.skipBits(1), expGolombDecoder.readBoolean() && (// frame_cropping_flag
                        frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb(), frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb(), frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb(), frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb()), expGolombDecoder.readBoolean() && expGolombDecoder.readBoolean()) {
                            switch(expGolombDecoder.readUnsignedByte()){
                                case 1:
                                    sarRatio = [
                                        1,
                                        1
                                    ];
                                    break;
                                case 2:
                                    sarRatio = [
                                        12,
                                        11
                                    ];
                                    break;
                                case 3:
                                    sarRatio = [
                                        10,
                                        11
                                    ];
                                    break;
                                case 4:
                                    sarRatio = [
                                        16,
                                        11
                                    ];
                                    break;
                                case 5:
                                    sarRatio = [
                                        40,
                                        33
                                    ];
                                    break;
                                case 6:
                                    sarRatio = [
                                        24,
                                        11
                                    ];
                                    break;
                                case 7:
                                    sarRatio = [
                                        20,
                                        11
                                    ];
                                    break;
                                case 8:
                                    sarRatio = [
                                        32,
                                        11
                                    ];
                                    break;
                                case 9:
                                    sarRatio = [
                                        80,
                                        33
                                    ];
                                    break;
                                case 10:
                                    sarRatio = [
                                        18,
                                        11
                                    ];
                                    break;
                                case 11:
                                    sarRatio = [
                                        15,
                                        11
                                    ];
                                    break;
                                case 12:
                                    sarRatio = [
                                        64,
                                        33
                                    ];
                                    break;
                                case 13:
                                    sarRatio = [
                                        160,
                                        99
                                    ];
                                    break;
                                case 14:
                                    sarRatio = [
                                        4,
                                        3
                                    ];
                                    break;
                                case 15:
                                    sarRatio = [
                                        3,
                                        2
                                    ];
                                    break;
                                case 16:
                                    sarRatio = [
                                        2,
                                        1
                                    ];
                                    break;
                                case 255:
                                    sarRatio = [
                                        expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(),
                                        expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()
                                    ];
                            }
                            sarRatio && (sarRatio[0], sarRatio[1]);
                        }
                        return {
                            profileIdc: profileIdc,
                            levelIdc: levelIdc,
                            profileCompatibility: profileCompatibility,
                            width: (picWidthInMbsMinus1 + 1) * 16 - 2 * frameCropLeftOffset - 2 * frameCropRightOffset,
                            height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - 2 * frameCropTopOffset - 2 * frameCropBottomOffset,
                            // sar is sample aspect ratio
                            sarRatio: sarRatio
                        };
                    };
                }).prototype = new Stream();
                var h264_H264Stream = _H264Stream, ADTS_SAMPLING_FREQUENCIES = [
                    96000,
                    88200,
                    64000,
                    48000,
                    44100,
                    32000,
                    24000,
                    22050,
                    16000,
                    12000,
                    11025,
                    8000,
                    7350
                ], parseId3TagSize = function(header, byteIndex) {
                    var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9]; // if we get a negative returnSize clamp it to 0
                    return (returnSize = returnSize >= 0 ? returnSize : 0, (16 & header[byteIndex + 5]) >> 4) ? returnSize + 20 : returnSize + 10;
                }, parseSyncSafeInteger = function(data) {
                    return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];
                }, percentEncode = function(bytes, start, end) {
                    var i, result = "";
                    for(i = start; i < end; i++)result += "%" + ("00" + bytes[i].toString(16)).slice(-2);
                    return result;
                }, utils = {
                    isLikelyAacData: function(data) {
                        var offset = function getId3Offset(data, offset) {
                            return data.length - offset < 10 || 73 !== data[offset] || 68 !== data[offset + 1] || 51 !== data[offset + 2] ? offset : (offset += parseId3TagSize(data, offset), getId3Offset(data, offset));
                        }(data, 0);
                        return data.length >= offset + 2 && (0xff & data[offset]) == 0xff && (0xf0 & data[offset + 1]) == 0xf0 && // verify that the 2 layer bits are 0, aka this
                        // is not mp3 data but aac data.
                        (0x16 & data[offset + 1]) == 0x10;
                    },
                    parseId3TagSize: parseId3TagSize,
                    parseAdtsSize: function(header, byteIndex) {
                        var lowThree = (0xe0 & header[byteIndex + 5]) >> 5, middle = header[byteIndex + 4] << 3;
                        return 6144 & header[byteIndex + 3] | middle | lowThree;
                    },
                    parseType: function(header, byteIndex) {
                        return 73 === header[byteIndex] && 68 === header[byteIndex + 1] && 51 === header[byteIndex + 2] ? "timed-metadata" : !0 & header[byteIndex] && (0xf0 & header[byteIndex + 1]) == 0xf0 ? "audio" : null;
                    },
                    parseSampleRate: function(packet) {
                        for(var i = 0; i + 5 < packet.length;){
                            if (0xff !== packet[i] || (0xf6 & packet[i + 1]) != 0xf0) {
                                // If a valid header was not found,  jump one forward and attempt to
                                // find a valid ADTS header starting at the next byte
                                i++;
                                continue;
                            }
                            return ADTS_SAMPLING_FREQUENCIES[(0x3c & packet[i + 2]) >>> 2];
                        }
                        return null;
                    },
                    parseAacTimestamp: function(packet) {
                        var frameStart, frameSize, frame; // find the start of the first frame and the end of the tag
                        frameStart = 10, 0x40 & packet[5] && (frameStart += 4 + parseSyncSafeInteger(packet.subarray(10, 14)));
                        // http://id3.org/id3v2.3.0#ID3v2_frame_overview
                        do {
                            if (// determine the number of bytes in this frame
                            (frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8))) < 1) break;
                            if ("PRIV" === String.fromCharCode(packet[frameStart], packet[frameStart + 1], packet[frameStart + 2], packet[frameStart + 3])) {
                                frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);
                                for(var i = 0; i < frame.byteLength; i++)if (0 === frame[i]) {
                                    if ("com.apple.streaming.transportStreamTimestamp" === unescape(percentEncode(frame, 0, i))) {
                                        var d = frame.subarray(i + 1), size = (0x01 & d[3]) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;
                                        return size *= 4, size += 0x03 & d[7];
                                    }
                                    break;
                                }
                            }
                            frameStart += 10 + frameSize; // advance past the frame body
                        }while (frameStart < packet.byteLength)
                        return null;
                    }
                };
                /**
                     * Splits an incoming stream of binary data into ADTS and ID3 Frames.
                     */ (_AacStream = function() {
                    var everything = new Uint8Array(), timeStamp = 0;
                    _AacStream.prototype.init.call(this), this.setTimestamp = function(timestamp) {
                        timeStamp = timestamp;
                    }, this.push = function(bytes) {
                        var chunk, packet, tempLength, frameSize = 0, byteIndex = 0; // If there are bytes remaining from the last segment, prepend them to the
                        for(everything.length ? (tempLength = everything.length, (everything = new Uint8Array(bytes.byteLength + tempLength)).set(everything.subarray(0, tempLength)), everything.set(bytes, tempLength)) : everything = bytes; everything.length - byteIndex >= 3;){
                            if (73 === everything[byteIndex] && 68 === everything[byteIndex + 1] && 51 === everything[byteIndex + 2]) {
                                // Exit early because we don't have enough to parse
                                // the ID3 tag header
                                if (everything.length - byteIndex < 10 || (frameSize = utils.parseId3TagSize(everything, byteIndex), byteIndex + frameSize > everything.length)) break;
                                 // check framesize
                                chunk = {
                                    type: "timed-metadata",
                                    data: everything.subarray(byteIndex, byteIndex + frameSize)
                                }, this.trigger("data", chunk), byteIndex += frameSize;
                                continue;
                            }
                            if ((0xff & everything[byteIndex]) == 0xff && (0xf0 & everything[byteIndex + 1]) == 0xf0) {
                                // Exit early because we don't have enough to parse
                                // the ADTS frame header
                                if (everything.length - byteIndex < 7 || (frameSize = utils.parseAdtsSize(everything, byteIndex), byteIndex + frameSize > everything.length)) break;
                                packet = {
                                    type: "audio",
                                    data: everything.subarray(byteIndex, byteIndex + frameSize),
                                    pts: timeStamp,
                                    dts: timeStamp
                                }, this.trigger("data", packet), byteIndex += frameSize;
                                continue;
                            }
                            byteIndex++;
                        }
                        everything = everything.length - byteIndex > 0 ? everything.subarray(byteIndex) : new Uint8Array();
                    }, this.reset = function() {
                        everything = new Uint8Array(), this.trigger("reset");
                    }, this.endTimeline = function() {
                        everything = new Uint8Array(), this.trigger("endedtimeline");
                    };
                }).prototype = new Stream();
                var aac = _AacStream, audioProperties = [
                    "audioobjecttype",
                    "channelcount",
                    "samplerate",
                    "samplingfrequencyindex",
                    "samplesize"
                ], videoProperties = [
                    "width",
                    "height",
                    "profileIdc",
                    "levelIdc",
                    "profileCompatibility",
                    "sarRatio"
                ], isLikelyAacData = utils.isLikelyAacData, ONE_SECOND_IN_TS$1 = clock.ONE_SECOND_IN_TS, retriggerForStream = function(key, event) {
                    event.stream = key, this.trigger("log", event);
                }, addPipelineLogRetriggers = function(transmuxer, pipeline) {
                    for(var keys = Object.keys(pipeline), i = 0; i < keys.length; i++){
                        var key = keys[i]; // skip non-stream keys and headOfPipeline
                        // which is just a duplicate
                        "headOfPipeline" !== key && pipeline[key].on && pipeline[key].on("log", retriggerForStream.bind(transmuxer, key));
                    }
                }, arrayEquals = function(a, b) {
                    var i;
                    if (a.length !== b.length) return !1;
                     // compare the value of each element in the array
                    for(i = 0; i < a.length; i++)if (a[i] !== b[i]) return !1;
                    return !0;
                }, generateSegmentTimingInfo = function(baseMediaDecodeTime, startDts, startPts, endDts, endPts, prependedContentDuration) {
                    // however, the player time values will reflect a start from the baseMediaDecodeTime.
                    // In order to provide relevant values for the player times, base timing info on the
                    // baseMediaDecodeTime and the DTS and PTS durations of the segment.
                    return {
                        start: {
                            dts: baseMediaDecodeTime,
                            pts: baseMediaDecodeTime + (startPts - startDts)
                        },
                        end: {
                            dts: baseMediaDecodeTime + (endDts - startDts),
                            pts: baseMediaDecodeTime + (endPts - startPts)
                        },
                        prependedContentDuration: prependedContentDuration,
                        baseMediaDecodeTime: baseMediaDecodeTime
                    };
                }; // constants
                /**
                     * Constructs a single-track, ISO BMFF media segment from AAC data
                     * events. The output of this stream can be fed to a SourceBuffer
                     * configured with a suitable initialization segment.
                     * @param track {object} track metadata configuration
                     * @param options {object} transmuxer options object
                     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
                     *        in the source; false to adjust the first segment to start at 0.
                     */ (_AudioSegmentStream = function(track, options) {
                    var sequenceNumber, adtsFrames = [], earliestAllowedDts = 0, audioAppendStartTs = 0, videoBaseMediaDecodeTime = 1 / 0;
                    sequenceNumber = (options = options || {}).firstSequenceNumber || 0, _AudioSegmentStream.prototype.init.call(this), this.push = function(data) {
                        trackDecodeInfo.collectDtsInfo(track, data), track && audioProperties.forEach(function(prop) {
                            track[prop] = data[prop];
                        }), adtsFrames.push(data);
                    }, this.setEarliestDts = function(earliestDts) {
                        earliestAllowedDts = earliestDts;
                    }, this.setVideoBaseMediaDecodeTime = function(baseMediaDecodeTime) {
                        videoBaseMediaDecodeTime = baseMediaDecodeTime;
                    }, this.setAudioAppendStart = function(timestamp) {
                        audioAppendStartTs = timestamp;
                    }, this.flush = function() {
                        var frames, moof, mdat, boxes, frameDuration, segmentDuration, videoClockCyclesOfSilencePrefixed, adtsFrames1, earliestAllowedDts1;
                        if (0 === adtsFrames.length) {
                            this.trigger("done", "AudioSegmentStream");
                            return;
                        }
                        adtsFrames1 = adtsFrames, earliestAllowedDts1 = earliestAllowedDts, frames = track.minSegmentDts >= earliestAllowedDts1 ? adtsFrames1 : (track.minSegmentDts = 1 / 0, adtsFrames1.filter(function(currentFrame) {
                            return(// If this is an allowed frame, keep it and record it's Dts
                            currentFrame.dts >= earliestAllowedDts1 && (track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts), track.minSegmentPts = track.minSegmentDts, !0) // Otherwise, discard it
                            );
                        })) // We will need to recalculate the earliest segment Dts
                        , track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps), videoClockCyclesOfSilencePrefixed = audioFrameUtils_prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime), // samples (that is, adts frames) in the audio data
                        track.samples = audioFrameUtils_generateSampleTable(frames), mdat = mp4Generator.mdat(audioFrameUtils_concatenateFrameData(frames)), adtsFrames = [], boxes = new Uint8Array((moof = mp4Generator.moof(sequenceNumber, [
                            track
                        ])).byteLength + mdat.byteLength), sequenceNumber++, boxes.set(moof), boxes.set(mdat, moof.byteLength), trackDecodeInfo.clearDtsInfo(track), frameDuration = Math.ceil(1024 * ONE_SECOND_IN_TS$1 / track.samplerate), frames.length && (segmentDuration = frames.length * frameDuration, this.trigger("segmentTimingInfo", generateSegmentTimingInfo(// The audio track's baseMediaDecodeTime is in audio clock cycles, but the
                        // frame info is in video clock cycles. Convert to match expectation of
                        // listeners (that all timestamps will be based on video clock cycles).
                        clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate), frames[0].dts, frames[0].pts, frames[0].dts + segmentDuration, frames[0].pts + segmentDuration, videoClockCyclesOfSilencePrefixed || 0)), this.trigger("timingInfo", {
                            start: frames[0].pts,
                            end: frames[0].pts + segmentDuration
                        })), this.trigger("data", {
                            track: track,
                            boxes: boxes
                        }), this.trigger("done", "AudioSegmentStream");
                    }, this.reset = function() {
                        trackDecodeInfo.clearDtsInfo(track), adtsFrames = [], this.trigger("reset");
                    };
                }).prototype = new Stream(), /**
                     * Constructs a single-track, ISO BMFF media segment from H264 data
                     * events. The output of this stream can be fed to a SourceBuffer
                     * configured with a suitable initialization segment.
                     * @param track {object} track metadata configuration
                     * @param options {object} transmuxer options object
                     * @param options.alignGopsAtEnd {boolean} If true, start from the end of the
                     *        gopsToAlignWith list when attempting to align gop pts
                     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
                     *        in the source; false to adjust the first segment to start at 0.
                     */ (_VideoSegmentStream = function(track, options) {
                    var sequenceNumber, config, pps, nalUnits = [], gopsToAlignWith = [];
                    sequenceNumber = (options = options || {}).firstSequenceNumber || 0, _VideoSegmentStream.prototype.init.call(this), delete track.minPTS, this.gopCache_ = [], /**
                         * Constructs a ISO BMFF segment given H264 nalUnits
                         * @param {Object} nalUnit A data event representing a nalUnit
                         * @param {String} nalUnit.nalUnitType
                         * @param {Object} nalUnit.config Properties for a mp4 track
                         * @param {Uint8Array} nalUnit.data The nalUnit bytes
                         * @see lib/codecs/h264.js
                         **/ this.push = function(nalUnit) {
                        trackDecodeInfo.collectDtsInfo(track, nalUnit), "seq_parameter_set_rbsp" !== nalUnit.nalUnitType || config || (config = nalUnit.config, track.sps = [
                            nalUnit.data
                        ], videoProperties.forEach(function(prop) {
                            track[prop] = config[prop];
                        }, this)), "pic_parameter_set_rbsp" !== nalUnit.nalUnitType || pps || (pps = nalUnit.data, track.pps = [
                            nalUnit.data
                        ]), nalUnits.push(nalUnit);
                    }, /**
                         * Pass constructed ISO BMFF track and boxes on to the
                         * next stream in the pipeline
                         **/ this.flush = function() {
                        // we find the first AUD
                        for(var alignedGops, frames, gopForFusion, gops, moof, mdat, boxes, firstGop, lastGop, prependedContentDuration = 0; nalUnits.length && "access_unit_delimiter_rbsp" !== nalUnits[0].nalUnitType;)nalUnits.shift();
                         // Return early if no video data has been observed
                        if (0 === nalUnits.length) {
                            this.resetStream_(), this.trigger("done", "VideoSegmentStream");
                            return;
                        } // Organize the raw nal-units into arrays that represent
                        if (// higher-level constructs such as frames and gops
                        // (group-of-pictures)
                        frames = frameUtils.groupNalsIntoFrames(nalUnits), (gops = frameUtils.groupFramesIntoGops(frames))[0][0].keyFrame || (// Search for a gop for fusion from our gopCache
                        (gopForFusion = this.getGopForFusion_(nalUnits[0], track)) ? (// in order to provide more accurate timing information about the segment, save
                        // the number of seconds prepended to the original segment due to GOP fusion
                        prependedContentDuration = gopForFusion.duration, gops.unshift(gopForFusion), // new gop at the beginning
                        gops.byteLength += gopForFusion.byteLength, gops.nalCount += gopForFusion.nalCount, gops.pts = gopForFusion.pts, gops.dts = gopForFusion.dts, gops.duration += gopForFusion.duration) : // If we didn't find a candidate gop fall back to keyframe-pulling
                        gops = frameUtils.extendFirstKeyFrame(gops)), gopsToAlignWith.length) {
                            if (!(alignedGops = options.alignGopsAtEnd ? this.alignGopsAtEnd_(gops) : this.alignGopsAtStart_(gops))) {
                                // save all the nals in the last GOP into the gop cache
                                this.gopCache_.unshift({
                                    gop: gops.pop(),
                                    pps: track.pps,
                                    sps: track.sps
                                }), this.gopCache_.length = Math.min(6, this.gopCache_.length), nalUnits = [], this.resetStream_(), this.trigger("done", "VideoSegmentStream");
                                return;
                            } // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct
                            // when recalculated before sending off to CoalesceStream
                            trackDecodeInfo.clearDtsInfo(track), gops = alignedGops;
                        }
                        trackDecodeInfo.collectDtsInfo(track, gops), // samples (that is, frames) in the video data
                        track.samples = frameUtils.generateSampleTable(gops), mdat = mp4Generator.mdat(frameUtils.concatenateNalData(gops)), track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps), this.trigger("processedGopsInfo", gops.map(function(gop) {
                            return {
                                pts: gop.pts,
                                dts: gop.dts,
                                byteLength: gop.byteLength
                            };
                        })), firstGop = gops[0], lastGop = gops[gops.length - 1], this.trigger("segmentTimingInfo", generateSegmentTimingInfo(track.baseMediaDecodeTime, firstGop.dts, firstGop.pts, lastGop.dts + lastGop.duration, lastGop.pts + lastGop.duration, prependedContentDuration)), this.trigger("timingInfo", {
                            start: gops[0].pts,
                            end: gops[gops.length - 1].pts + gops[gops.length - 1].duration
                        }), this.gopCache_.unshift({
                            gop: gops.pop(),
                            pps: track.pps,
                            sps: track.sps
                        }), this.gopCache_.length = Math.min(6, this.gopCache_.length), nalUnits = [], this.trigger("baseMediaDecodeTime", track.baseMediaDecodeTime), this.trigger("timelineStartInfo", track.timelineStartInfo), // throwing away hundreds of media segment fragments
                        boxes = new Uint8Array((moof = mp4Generator.moof(sequenceNumber, [
                            track
                        ])).byteLength + mdat.byteLength), sequenceNumber++, boxes.set(moof), boxes.set(mdat, moof.byteLength), this.trigger("data", {
                            track: track,
                            boxes: boxes
                        }), this.resetStream_(), this.trigger("done", "VideoSegmentStream");
                    }, this.reset = function() {
                        this.resetStream_(), nalUnits = [], this.gopCache_.length = 0, gopsToAlignWith.length = 0, this.trigger("reset");
                    }, this.resetStream_ = function() {
                        trackDecodeInfo.clearDtsInfo(track), // for instance, when we are rendition switching
                        config = void 0, pps = void 0;
                    }, // return it or return null if no good candidate was found
                    this.getGopForFusion_ = function(nalUnit) {
                        var dtsDistance, nearestGopObj, currentGop, currentGopObj, i, // About 3 frames @ 30fps
                        nearestDistance = 1 / 0; // Search for the GOP nearest to the beginning of this nal unit
                        for(i = 0; i < this.gopCache_.length; i++)currentGop = (currentGopObj = this.gopCache_[i]).gop, track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0]) && track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]) && !(currentGop.dts < track.timelineStartInfo.dts) && (dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration) >= -10000 && dtsDistance <= 45000 && (!nearestGopObj || nearestDistance > dtsDistance) && (nearestGopObj = currentGopObj, nearestDistance = dtsDistance); // Reject Gops that would require a negative baseMediaDecodeTime
                        return nearestGopObj ? nearestGopObj.gop : null;
                    }, // of gopsToAlignWith starting from the START of the list
                    this.alignGopsAtStart_ = function(gops) {
                        var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;
                        for(byteLength = gops.byteLength, nalCount = gops.nalCount, duration = gops.duration, alignIndex = gopIndex = 0; alignIndex < gopsToAlignWith.length && gopIndex < gops.length && (align = gopsToAlignWith[alignIndex], gop = gops[gopIndex], align.pts !== gop.pts);){
                            if (gop.pts > align.pts) {
                                // this current gop starts after the current gop we want to align on, so increment
                                // align index
                                alignIndex++;
                                continue;
                            } // current gop starts before the current gop we want to align on. so increment gop
                            // index
                            gopIndex++, byteLength -= gop.byteLength, nalCount -= gop.nalCount, duration -= gop.duration;
                        }
                        return 0 === gopIndex ? gops : gopIndex === gops.length ? null : ((alignedGops = gops.slice(gopIndex)).byteLength = byteLength, alignedGops.duration = duration, alignedGops.nalCount = nalCount, alignedGops.pts = alignedGops[0].pts, alignedGops.dts = alignedGops[0].dts, alignedGops);
                    }, // of gopsToAlignWith starting from the END of the list
                    this.alignGopsAtEnd_ = function(gops) {
                        for(alignIndex = gopsToAlignWith.length - 1, gopIndex = gops.length - 1, alignEndIndex = null, matchFound = !1; alignIndex >= 0 && gopIndex >= 0;){
                            if (align = gopsToAlignWith[alignIndex], gop = gops[gopIndex], align.pts === gop.pts) {
                                matchFound = !0;
                                break;
                            }
                            if (align.pts > gop.pts) {
                                alignIndex--;
                                continue;
                            }
                            alignIndex === gopsToAlignWith.length - 1 && // gop.pts is greater than the last alignment candidate. If no match is found
                            // by the end of this loop, we still want to append gops that come after this
                            // point
                            (alignEndIndex = gopIndex), gopIndex--;
                        }
                        if (!matchFound && null === alignEndIndex) return null;
                        if (0 === (trimIndex = matchFound ? gopIndex : alignEndIndex)) return gops;
                        var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound, trimIndex, alignedGops = gops.slice(trimIndex), metadata = alignedGops.reduce(function(total, gop) {
                            return total.byteLength += gop.byteLength, total.duration += gop.duration, total.nalCount += gop.nalCount, total;
                        }, {
                            byteLength: 0,
                            duration: 0,
                            nalCount: 0
                        });
                        return alignedGops.byteLength = metadata.byteLength, alignedGops.duration = metadata.duration, alignedGops.nalCount = metadata.nalCount, alignedGops.pts = alignedGops[0].pts, alignedGops.dts = alignedGops[0].dts, alignedGops;
                    }, this.alignGopsWith = function(newGopsToAlignWith) {
                        gopsToAlignWith = newGopsToAlignWith;
                    };
                }).prototype = new Stream(), /**
                     * A Stream that can combine multiple streams (ie. audio & video)
                     * into a single output segment for MSE. Also supports audio-only
                     * and video-only streams.
                     * @param options {object} transmuxer options object
                     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
                     *        in the source; false to adjust the first segment to start at media timeline start.
                     */ (_CoalesceStream = function(options, metadataStream) {
                    // Number of Tracks per output segment
                    // If greater than 1, we combine multiple
                    // tracks into a single segment
                    this.numberOfTracks = 0, this.metadataStream = metadataStream, void 0 !== (options = options || {}).remux ? this.remuxTracks = !!options.remux : this.remuxTracks = !0, "boolean" == typeof options.keepOriginalTimestamps ? this.keepOriginalTimestamps = options.keepOriginalTimestamps : this.keepOriginalTimestamps = !1, this.pendingTracks = [], this.videoTrack = null, this.pendingBoxes = [], this.pendingCaptions = [], this.pendingMetadata = [], this.pendingBytes = 0, this.emittedTracks = 0, _CoalesceStream.prototype.init.call(this), this.push = function(output) {
                        return(// buffer incoming captions until the associated video segment
                        // finishes
                        output.text ? this.pendingCaptions.push(output) : output.frames ? this.pendingMetadata.push(output) : void (// important information required for the construction of
                        // the final segment
                        this.pendingTracks.push(output.track), this.pendingBytes += output.boxes.byteLength, "video" === output.track.type && (this.videoTrack = output.track, this.pendingBoxes.push(output.boxes)), "audio" === output.track.type && (this.audioTrack = output.track, this.pendingBoxes.unshift(output.boxes))) // buffer incoming id3 tags until the final flush
                        );
                    };
                }).prototype = new Stream(), _CoalesceStream.prototype.flush = function(flushSource) {
                    var caption, id3, initSegment, i, offset = 0, event = {
                        captions: [],
                        captionStreams: {},
                        metadata: [],
                        info: {}
                    }, timelineStartPts = 0;
                    if (this.pendingTracks.length < this.numberOfTracks) {
                        if ("VideoSegmentStream" !== flushSource && "AudioSegmentStream" !== flushSource || this.remuxTracks) // Return because we haven't received a flush from a data-generating
                        // portion of the segment (meaning that we have only recieved meta-data
                        // or captions.)
                        return;
                        if (0 === this.pendingTracks.length) {
                            // In the case where we receive a flush without any data having been
                            // received we consider it an emitted track for the purposes of coalescing
                            // `done` events.
                            // We do this for the case where there is an audio and video track in the
                            // segment but no audio data. (seen in several playlists with alternate
                            // audio tracks and no audio present in the main TS segments.)
                            this.emittedTracks++, this.emittedTracks >= this.numberOfTracks && (this.trigger("done"), this.emittedTracks = 0);
                            return;
                        }
                    }
                    if (this.videoTrack ? (timelineStartPts = this.videoTrack.timelineStartInfo.pts, videoProperties.forEach(function(prop) {
                        event.info[prop] = this.videoTrack[prop];
                    }, this)) : this.audioTrack && (timelineStartPts = this.audioTrack.timelineStartInfo.pts, audioProperties.forEach(function(prop) {
                        event.info[prop] = this.audioTrack[prop];
                    }, this)), this.videoTrack || this.audioTrack) {
                        for(1 === this.pendingTracks.length ? event.type = this.pendingTracks[0].type : event.type = "combined", this.emittedTracks += this.pendingTracks.length, initSegment = mp4Generator.initSegment(this.pendingTracks), event.initSegment = new Uint8Array(initSegment.byteLength), // and track definitions
                        event.initSegment.set(initSegment), event.data = new Uint8Array(this.pendingBytes), i = 0; i < this.pendingBoxes.length; i++)event.data.set(this.pendingBoxes[i], offset), offset += this.pendingBoxes[i].byteLength;
                         // Translate caption PTS times into second offsets to match the
                        // video timeline for the segment, and add track info
                        for(i = 0; i < this.pendingCaptions.length; i++)(caption = this.pendingCaptions[i]).startTime = clock.metadataTsToSeconds(caption.startPts, timelineStartPts, this.keepOriginalTimestamps), caption.endTime = clock.metadataTsToSeconds(caption.endPts, timelineStartPts, this.keepOriginalTimestamps), event.captionStreams[caption.stream] = !0, event.captions.push(caption);
                         // Translate ID3 frame PTS times into second offsets to match the
                        // video timeline for the segment
                        for(i = 0; i < this.pendingMetadata.length; i++)(id3 = this.pendingMetadata[i]).cueTime = clock.metadataTsToSeconds(id3.pts, timelineStartPts, this.keepOriginalTimestamps), event.metadata.push(id3);
                         // We add this to every single emitted segment even though we only need
                        // Ideally, this would happen immediately on parsing captions,
                        // but we need to ensure that video data is sent back first
                        // so that caption timing can be adjusted to match video timing
                        for(// it for the first
                        event.metadata.dispatchType = this.metadataStream.dispatchType, this.pendingTracks.length = 0, this.videoTrack = null, this.pendingBoxes.length = 0, this.pendingCaptions.length = 0, this.pendingBytes = 0, this.pendingMetadata.length = 0, // We include captions and ID3 tags for backwards compatibility,
                        // ideally we should send only video and audio in the data event
                        this.trigger("data", event), i = 0; i < event.captions.length; i++)caption = event.captions[i], this.trigger("caption", caption);
                         // Emit each id3 tag to the outside world
                        // Ideally, this would happen immediately on parsing the tag,
                        // but we need to ensure that video data is sent back first
                        // so that ID3 frame timing can be adjusted to match video timing
                        for(i = 0; i < event.metadata.length; i++)id3 = event.metadata[i], this.trigger("id3Frame", id3);
                    } // Only emit `done` if all tracks have been flushed and emitted
                    this.emittedTracks >= this.numberOfTracks && (this.trigger("done"), this.emittedTracks = 0);
                }, _CoalesceStream.prototype.setRemux = function(val) {
                    this.remuxTracks = val;
                }, /**
                     * A Stream that expects MP2T binary data as input and produces
                     * corresponding media segments, suitable for use with Media Source
                     * Extension (MSE) implementations that support the ISO BMFF byte
                     * stream format, like Chrome.
                     */ (_Transmuxer = function(options) {
                    var videoTrack, audioTrack, self1 = this, hasFlushed = !0;
                    _Transmuxer.prototype.init.call(this), options = options || {}, this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0, this.transmuxPipeline_ = {}, this.setupAacPipeline = function() {
                        var pipeline = {};
                        this.transmuxPipeline_ = pipeline, pipeline.type = "aac", pipeline.metadataStream = new m2ts.MetadataStream(), pipeline.aacStream = new aac(), pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream("audio"), pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream("timed-metadata"), pipeline.adtsStream = new adts(), pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream), pipeline.headOfPipeline = pipeline.aacStream, pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream), pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream), pipeline.metadataStream.on("timestamp", function(frame) {
                            pipeline.aacStream.setTimestamp(frame.timeStamp);
                        }), pipeline.aacStream.on("data", function(data) {
                            "timed-metadata" !== data.type && "audio" !== data.type || pipeline.audioSegmentStream || (audioTrack = audioTrack || {
                                timelineStartInfo: {
                                    baseMediaDecodeTime: self1.baseMediaDecodeTime
                                },
                                codec: "adts",
                                type: "audio"
                            }, pipeline.coalesceStream.numberOfTracks++, pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options), pipeline.audioSegmentStream.on("log", self1.getLogTrigger_("audioSegmentStream")), pipeline.audioSegmentStream.on("timingInfo", self1.trigger.bind(self1, "audioTimingInfo")), pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream), self1.trigger("trackinfo", {
                                hasAudio: !!audioTrack,
                                hasVideo: !!videoTrack
                            }));
                        }), pipeline.coalesceStream.on("data", this.trigger.bind(this, "data")), pipeline.coalesceStream.on("done", this.trigger.bind(this, "done")), addPipelineLogRetriggers(this, pipeline);
                    }, this.setupTsPipeline = function() {
                        var pipeline = {};
                        this.transmuxPipeline_ = pipeline, pipeline.type = "ts", pipeline.metadataStream = new m2ts.MetadataStream(), pipeline.packetStream = new m2ts.TransportPacketStream(), pipeline.parseStream = new m2ts.TransportParseStream(), pipeline.elementaryStream = new m2ts.ElementaryStream(), pipeline.timestampRolloverStream = new m2ts.TimestampRolloverStream(), pipeline.adtsStream = new adts(), pipeline.h264Stream = new h264_H264Stream(), pipeline.captionStream = new m2ts.CaptionStream(options), pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream), pipeline.headOfPipeline = pipeline.packetStream, pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream).pipe(pipeline.timestampRolloverStream), // demux the streams
                        pipeline.timestampRolloverStream.pipe(pipeline.h264Stream), pipeline.timestampRolloverStream.pipe(pipeline.adtsStream), pipeline.timestampRolloverStream.pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream), pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream), pipeline.elementaryStream.on("data", function(data) {
                            var i;
                            if ("metadata" === data.type) {
                                for(i = data.tracks.length; i--;)videoTrack || "video" !== data.tracks[i].type ? audioTrack || "audio" !== data.tracks[i].type || ((audioTrack = data.tracks[i]).timelineStartInfo.baseMediaDecodeTime = self1.baseMediaDecodeTime) : (videoTrack = data.tracks[i]).timelineStartInfo.baseMediaDecodeTime = self1.baseMediaDecodeTime;
                                 // hook up the video segment stream to the first track with h264 data
                                videoTrack && !pipeline.videoSegmentStream && (pipeline.coalesceStream.numberOfTracks++, pipeline.videoSegmentStream = new _VideoSegmentStream(videoTrack, options), pipeline.videoSegmentStream.on("log", self1.getLogTrigger_("videoSegmentStream")), pipeline.videoSegmentStream.on("timelineStartInfo", function(timelineStartInfo) {
                                    // When video emits timelineStartInfo data after a flush, we forward that
                                    // info to the AudioSegmentStream, if it exists, because video timeline
                                    // data takes precedence.  Do not do this if keepOriginalTimestamps is set,
                                    // because this is a particularly subtle form of timestamp alteration.
                                    audioTrack && !options.keepOriginalTimestamps && (audioTrack.timelineStartInfo = timelineStartInfo, // very earliest DTS we have seen in video because Chrome will
                                    // interpret any video track with a baseMediaDecodeTime that is
                                    // non-zero as a gap.
                                    pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts - self1.baseMediaDecodeTime));
                                }), pipeline.videoSegmentStream.on("processedGopsInfo", self1.trigger.bind(self1, "gopInfo")), pipeline.videoSegmentStream.on("segmentTimingInfo", self1.trigger.bind(self1, "videoSegmentTimingInfo")), pipeline.videoSegmentStream.on("baseMediaDecodeTime", function(baseMediaDecodeTime) {
                                    audioTrack && pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);
                                }), pipeline.videoSegmentStream.on("timingInfo", self1.trigger.bind(self1, "videoTimingInfo")), pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream)), audioTrack && !pipeline.audioSegmentStream && (// hook up the audio segment stream to the first track with aac data
                                pipeline.coalesceStream.numberOfTracks++, pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options), pipeline.audioSegmentStream.on("log", self1.getLogTrigger_("audioSegmentStream")), pipeline.audioSegmentStream.on("timingInfo", self1.trigger.bind(self1, "audioTimingInfo")), pipeline.audioSegmentStream.on("segmentTimingInfo", self1.trigger.bind(self1, "audioSegmentTimingInfo")), pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream)), self1.trigger("trackinfo", {
                                    hasAudio: !!audioTrack,
                                    hasVideo: !!videoTrack
                                });
                            }
                        }), pipeline.coalesceStream.on("data", this.trigger.bind(this, "data")), pipeline.coalesceStream.on("id3Frame", function(id3Frame) {
                            id3Frame.dispatchType = pipeline.metadataStream.dispatchType, self1.trigger("id3Frame", id3Frame);
                        }), pipeline.coalesceStream.on("caption", this.trigger.bind(this, "caption")), pipeline.coalesceStream.on("done", this.trigger.bind(this, "done")), addPipelineLogRetriggers(this, pipeline);
                    }, this.setBaseMediaDecodeTime = function(baseMediaDecodeTime) {
                        var pipeline = this.transmuxPipeline_;
                        options.keepOriginalTimestamps || (this.baseMediaDecodeTime = baseMediaDecodeTime), audioTrack && (audioTrack.timelineStartInfo.dts = void 0, audioTrack.timelineStartInfo.pts = void 0, trackDecodeInfo.clearDtsInfo(audioTrack), pipeline.audioTimestampRolloverStream && pipeline.audioTimestampRolloverStream.discontinuity()), videoTrack && (pipeline.videoSegmentStream && (pipeline.videoSegmentStream.gopCache_ = []), videoTrack.timelineStartInfo.dts = void 0, videoTrack.timelineStartInfo.pts = void 0, trackDecodeInfo.clearDtsInfo(videoTrack), pipeline.captionStream.reset()), pipeline.timestampRolloverStream && pipeline.timestampRolloverStream.discontinuity();
                    }, this.setAudioAppendStart = function(timestamp) {
                        audioTrack && this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);
                    }, this.setRemux = function(val) {
                        var pipeline = this.transmuxPipeline_;
                        options.remux = val, pipeline && pipeline.coalesceStream && pipeline.coalesceStream.setRemux(val);
                    }, this.alignGopsWith = function(gopsToAlignWith) {
                        videoTrack && this.transmuxPipeline_.videoSegmentStream && this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);
                    }, this.getLogTrigger_ = function(key) {
                        var self1 = this;
                        return function(event) {
                            event.stream = key, self1.trigger("log", event);
                        };
                    }, this.push = function(data) {
                        if (hasFlushed) {
                            var isAac = isLikelyAacData(data);
                            isAac && "aac" !== this.transmuxPipeline_.type ? this.setupAacPipeline() : isAac || "ts" === this.transmuxPipeline_.type || this.setupTsPipeline(), hasFlushed = !1;
                        }
                        this.transmuxPipeline_.headOfPipeline.push(data);
                    }, this.flush = function() {
                        hasFlushed = !0, this.transmuxPipeline_.headOfPipeline.flush();
                    }, this.endTimeline = function() {
                        this.transmuxPipeline_.headOfPipeline.endTimeline();
                    }, this.reset = function() {
                        this.transmuxPipeline_.headOfPipeline && this.transmuxPipeline_.headOfPipeline.reset();
                    }, this.resetCaptions = function() {
                        this.transmuxPipeline_.captionStream && this.transmuxPipeline_.captionStream.reset();
                    };
                }).prototype = new Stream();
                var transmuxer_Transmuxer = _Transmuxer, bin_toUnsigned = function(value) {
                    return value >>> 0;
                }, parseType_1 = function(buffer) {
                    return "" + (String.fromCharCode(buffer[0]) + String.fromCharCode(buffer[1]) + String.fromCharCode(buffer[2]) + String.fromCharCode(buffer[3]));
                }, findBox_1 = function findBox(data, path) {
                    var i, size, type, end, subresults, results = [];
                    if (!path.length) // short-circuit the search for empty paths
                    return null;
                    for(i = 0; i < data.byteLength;)size = bin_toUnsigned(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]), type = parseType_1(data.subarray(i + 4, i + 8)), end = size > 1 ? i + size : data.byteLength, type === path[0] && (1 === path.length ? // this is the end of the path and we've found the box we were
                    // looking for
                    results.push(data.subarray(i + 8, end)) : // recursively search for the next box along the path
                    (subresults = findBox(data.subarray(i + 8, end), path.slice(1))).length && (results = results.concat(subresults))), i = end;
                     // we've finished searching all of data
                    return results;
                }, parseTfdt = function(data) {
                    var result = {
                        version: data[0],
                        flags: new Uint8Array(data.subarray(1, 4)),
                        baseMediaDecodeTime: bin_toUnsigned(data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7])
                    };
                    return 1 === result.version && (result.baseMediaDecodeTime *= 4294967296, result.baseMediaDecodeTime += bin_toUnsigned(data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11])), result;
                }, parseSampleFlags_1 = function(flags) {
                    return {
                        isLeading: (0x0c & flags[0]) >>> 2,
                        dependsOn: 0x03 & flags[0],
                        isDependedOn: (0xc0 & flags[1]) >>> 6,
                        hasRedundancy: (0x30 & flags[1]) >>> 4,
                        paddingValue: (0x0e & flags[1]) >>> 1,
                        isNonSyncSample: 0x01 & flags[1],
                        degradationPriority: flags[2] << 8 | flags[3]
                    };
                }, parseTrun = function(data) {
                    var sample, result = {
                        version: data[0],
                        flags: new Uint8Array(data.subarray(1, 4)),
                        samples: []
                    }, view = new DataView(data.buffer, data.byteOffset, data.byteLength), // Flag interpretation
                    dataOffsetPresent = 0x01 & result.flags[2], // compare with 2nd byte of 0x1
                    firstSampleFlagsPresent = 0x04 & result.flags[2], // compare with 2nd byte of 0x4
                    sampleDurationPresent = 0x01 & result.flags[1], // compare with 2nd byte of 0x100
                    sampleSizePresent = 0x02 & result.flags[1], // compare with 2nd byte of 0x200
                    sampleFlagsPresent = 0x04 & result.flags[1], // compare with 2nd byte of 0x400
                    sampleCompositionTimeOffsetPresent = 0x08 & result.flags[1], // compare with 2nd byte of 0x800
                    sampleCount = view.getUint32(4), offset = 8;
                    for(dataOffsetPresent && (// 32 bit signed integer
                    result.dataOffset = view.getInt32(offset), offset += 4), firstSampleFlagsPresent && sampleCount && (sample = {
                        flags: parseSampleFlags_1(data.subarray(offset, offset + 4))
                    }, offset += 4, sampleDurationPresent && (sample.duration = view.getUint32(offset), offset += 4), sampleSizePresent && (sample.size = view.getUint32(offset), offset += 4), sampleCompositionTimeOffsetPresent && (1 === result.version ? sample.compositionTimeOffset = view.getInt32(offset) : sample.compositionTimeOffset = view.getUint32(offset), offset += 4), result.samples.push(sample), sampleCount--); sampleCount--;)sample = {}, sampleDurationPresent && (sample.duration = view.getUint32(offset), offset += 4), sampleSizePresent && (sample.size = view.getUint32(offset), offset += 4), sampleFlagsPresent && (sample.flags = parseSampleFlags_1(data.subarray(offset, offset + 4)), offset += 4), sampleCompositionTimeOffsetPresent && (1 === result.version ? sample.compositionTimeOffset = view.getInt32(offset) : sample.compositionTimeOffset = view.getUint32(offset), offset += 4), result.samples.push(sample);
                    return result;
                }, parseTfhd = function(data) {
                    var i, view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
                        version: data[0],
                        flags: new Uint8Array(data.subarray(1, 4)),
                        trackId: view.getUint32(4)
                    }, baseDataOffsetPresent = 0x01 & result.flags[2], sampleDescriptionIndexPresent = 0x02 & result.flags[2], defaultSampleDurationPresent = 0x08 & result.flags[2], defaultSampleSizePresent = 0x10 & result.flags[2], defaultSampleFlagsPresent = 0x20 & result.flags[2], durationIsEmpty = 0x010000 & result.flags[0], defaultBaseIsMoof = 0x020000 & result.flags[0];
                    return i = 8, baseDataOffsetPresent && (i += 4, // FIXME: should we read the full 64 bits?
                    result.baseDataOffset = view.getUint32(12), i += 4), sampleDescriptionIndexPresent && (result.sampleDescriptionIndex = view.getUint32(i), i += 4), defaultSampleDurationPresent && (result.defaultSampleDuration = view.getUint32(i), i += 4), defaultSampleSizePresent && (result.defaultSampleSize = view.getUint32(i), i += 4), defaultSampleFlagsPresent && (result.defaultSampleFlags = view.getUint32(i)), durationIsEmpty && (result.durationIsEmpty = !0), !baseDataOffsetPresent && defaultBaseIsMoof && (result.baseDataOffsetIsMoof = !0), result;
                }, discardEmulationPreventionBytes = function(data) {
                    for(var newLength, newData, length = data.byteLength, emulationPreventionBytesPositions = [], i = 1; i < length - 2;)0 === data[i] && 0 === data[i + 1] && 0x03 === data[i + 2] ? (emulationPreventionBytesPositions.push(i + 2), i += 2) : i++;
                     // If no Emulation Prevention Bytes were found just return the original
                    // array
                    if (0 === emulationPreventionBytesPositions.length) return data;
                     // Create a new array to hold the NAL unit data
                    newData = new Uint8Array(newLength = length - emulationPreventionBytesPositions.length);
                    var sourceIndex = 0;
                    for(i = 0; i < newLength; sourceIndex++, i++)sourceIndex === emulationPreventionBytesPositions[0] && (// Skip this byte
                    sourceIndex++, emulationPreventionBytesPositions.shift()), newData[i] = data[sourceIndex];
                    return newData;
                }, mapToSample = function(offset, samples) {
                    for(var approximateOffset = offset, i = 0; i < samples.length; i++){
                        var sample = samples[i];
                        if (approximateOffset < sample.size) return sample;
                        approximateOffset -= sample.size;
                    }
                    return null;
                }, findSeiNals = function(avcStream, samples, trackId) {
                    var seiNal, i, length, lastMatchedSample, avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength), result = {
                        logs: [],
                        seiNals: []
                    };
                    for(i = 0; i + 4 < avcStream.length; i += length)if (length = avcView.getUint32(i), i += 4, !(length <= 0)) switch(0x1f & avcStream[i]){
                        case 0x06:
                            var data = avcStream.subarray(i + 1, i + 1 + length), matchingSample = mapToSample(i, samples);
                            if (seiNal = {
                                nalUnitType: "sei_rbsp",
                                size: length,
                                data: data,
                                escapedRBSP: discardEmulationPreventionBytes(data),
                                trackId: trackId
                            }, matchingSample) seiNal.pts = matchingSample.pts, seiNal.dts = matchingSample.dts, lastMatchedSample = matchingSample;
                            else if (lastMatchedSample) // If a matching sample cannot be found, use the last
                            // sample's values as they should be as close as possible
                            seiNal.pts = lastMatchedSample.pts, seiNal.dts = lastMatchedSample.dts;
                            else {
                                result.logs.push({
                                    level: "warn",
                                    message: "We've encountered a nal unit without data at " + i + " for trackId " + trackId + ". See mux.js#223."
                                });
                                break;
                            }
                            result.seiNals.push(seiNal);
                    }
                    return result;
                }, parseSamples = function(truns, baseMediaDecodeTime, tfhd) {
                    var currentDts = baseMediaDecodeTime, defaultSampleDuration = tfhd.defaultSampleDuration || 0, defaultSampleSize = tfhd.defaultSampleSize || 0, trackId = tfhd.trackId, allSamples = [];
                    return truns.forEach(function(trun) {
                        var samples = parseTrun(trun).samples;
                        samples.forEach(function(sample) {
                            void 0 === sample.duration && (sample.duration = defaultSampleDuration), void 0 === sample.size && (sample.size = defaultSampleSize), sample.trackId = trackId, sample.dts = currentDts, void 0 === sample.compositionTimeOffset && (sample.compositionTimeOffset = 0), sample.pts = currentDts + sample.compositionTimeOffset, currentDts += sample.duration;
                        }), allSamples = allSamples.concat(samples);
                    }), allSamples;
                }, parseCaptionNals = function(segment, videoTrackId) {
                    // To get the samples
                    var trafs = findBox_1(segment, [
                        "moof",
                        "traf"
                    ]), mdats = findBox_1(segment, [
                        "mdat"
                    ]), captionNals = {}, mdatTrafPairs = []; // To get SEI NAL units
                    return mdats.forEach(function(mdat, index) {
                        var matchingTraf = trafs[index];
                        mdatTrafPairs.push({
                            mdat: mdat,
                            traf: matchingTraf
                        });
                    }), mdatTrafPairs.forEach(function(pair) {
                        var result, mdat = pair.mdat, traf = pair.traf, headerInfo = parseTfhd(findBox_1(traf, [
                            "tfhd"
                        ])[0]), trackId = headerInfo.trackId, tfdt = findBox_1(traf, [
                            "tfdt"
                        ]), baseMediaDecodeTime = tfdt.length > 0 ? parseTfdt(tfdt[0]).baseMediaDecodeTime : 0, truns = findBox_1(traf, [
                            "trun"
                        ]);
                        videoTrackId === trackId && truns.length > 0 && (result = findSeiNals(mdat, parseSamples(truns, baseMediaDecodeTime, headerInfo), trackId), captionNals[trackId] || (captionNals[trackId] = {
                            seiNals: [],
                            logs: []
                        }), captionNals[trackId].seiNals = captionNals[trackId].seiNals.concat(result.seiNals), captionNals[trackId].logs = captionNals[trackId].logs.concat(result.logs));
                    }), captionNals;
                }, parseEmbeddedCaptions = function(segment, trackId, timescale) {
                    if (null === trackId) return null;
                    var trackNals = parseCaptionNals(segment, trackId)[trackId] || {};
                    return {
                        seiNals: trackNals.seiNals,
                        logs: trackNals.logs,
                        timescale: timescale
                    };
                }, captionParser = function() {
                    var captionStream, segmentCache, trackId, timescale, parsedCaptions, parsingPartial, isInitialized = !1;
                    /**
                         * A method to indicate whether a CaptionParser has been initalized
                         * @returns {Boolean}
                         **/ this.isInitialized = function() {
                        return isInitialized;
                    }, /**
                         * Initializes the underlying CaptionStream, SEI NAL parsing
                         * and management, and caption collection
                         **/ this.init = function(options) {
                        captionStream = new CaptionStream$1(), isInitialized = !0, parsingPartial = !!options && options.isPartial, captionStream.on("data", function(event) {
                            // Convert to seconds in the source's timescale
                            event.startTime = event.startPts / timescale, event.endTime = event.endPts / timescale, parsedCaptions.captions.push(event), parsedCaptions.captionStreams[event.stream] = !0;
                        }), captionStream.on("log", function(log) {
                            parsedCaptions.logs.push(log);
                        });
                    }, /**
                         * Determines if a new video track will be selected
                         * or if the timescale changed
                         * @return {Boolean}
                         **/ this.isNewInit = function(videoTrackIds, timescales) {
                        return (!videoTrackIds || 0 !== videoTrackIds.length) && (!timescales || "object" != typeof timescales || 0 !== Object.keys(timescales).length) && (trackId !== videoTrackIds[0] || timescale !== timescales[trackId]);
                    }, /**
                         * Parses out SEI captions and interacts with underlying
                         * CaptionStream to return dispatched captions
                         *
                         * @param {Uint8Array} segment - The fmp4 segment containing embedded captions
                         * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment
                         * @param {Object.<Number, Number>} timescales - The timescales found in the init segment
                         * @see parseEmbeddedCaptions
                         * @see m2ts/caption-stream.js
                         **/ this.parse = function(segment, videoTrackIds, timescales) {
                        var parsedData;
                        if (!this.isInitialized() || !videoTrackIds || !timescales) return null; // This is not likely to be a video segment
                         // Now that a timescale and trackId is set, parse cached segments
                        if (this.isNewInit(videoTrackIds, timescales)) timescale = timescales[// Use the first video track only as there is no
                        // mechanism to switch to other video tracks
                        trackId = videoTrackIds[0]]; // If an init segment has not been seen yet, hold onto segment
                        else if (null === trackId || !timescale) return segmentCache.push(segment), null;
                        for(; segmentCache.length > 0;){
                            var cachedSegment = segmentCache.shift();
                            this.parse(cachedSegment, videoTrackIds, timescales);
                        }
                        return ((parsedData = parseEmbeddedCaptions(segment, trackId, timescale)) && parsedData.logs && (parsedCaptions.logs = parsedCaptions.logs.concat(parsedData.logs)), null !== parsedData && parsedData.seiNals) ? (this.pushNals(parsedData.seiNals), this.flushStream(), parsedCaptions) : parsedCaptions.logs.length ? {
                            logs: parsedCaptions.logs,
                            captions: [],
                            captionStreams: []
                        } : null;
                    }, /**
                         * Pushes SEI NALUs onto CaptionStream
                         * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`
                         * Assumes that `parseCaptionNals` has been called first
                         * @see m2ts/caption-stream.js
                         **/ this.pushNals = function(nals) {
                        if (!this.isInitialized() || !nals || 0 === nals.length) return null;
                        nals.forEach(function(nal) {
                            captionStream.push(nal);
                        });
                    }, /**
                         * Flushes underlying CaptionStream to dispatch processed, displayable captions
                         * @see m2ts/caption-stream.js
                         **/ this.flushStream = function() {
                        if (!this.isInitialized()) return null;
                        parsingPartial ? captionStream.partialFlush() : captionStream.flush();
                    }, /**
                         * Reset caption buckets for new data
                         **/ this.clearParsedCaptions = function() {
                        parsedCaptions.captions = [], parsedCaptions.captionStreams = {}, parsedCaptions.logs = [];
                    }, /**
                         * Resets underlying CaptionStream
                         * @see m2ts/caption-stream.js
                         **/ this.resetCaptionStream = function() {
                        if (!this.isInitialized()) return null;
                        captionStream.reset();
                    }, /**
                         * Convenience method to clear all captions flushed from the
                         * CaptionStream and still being parsed
                         * @see m2ts/caption-stream.js
                         **/ this.clearAllCaptions = function() {
                        this.clearParsedCaptions(), this.resetCaptionStream();
                    }, /**
                         * Reset caption parser
                         **/ this.reset = function() {
                        segmentCache = [], trackId = null, timescale = null, parsedCaptions ? this.clearParsedCaptions() : parsedCaptions = {
                            captions: [],
                            // CC1, CC2, CC3, CC4
                            captionStreams: {},
                            logs: []
                        }, this.resetCaptionStream();
                    }, this.reset();
                }, toHexString = function(value) {
                    return ("00" + value.toString(16)).slice(-2);
                };
                /**
                     * Determine the base media decode start time, in seconds, for an MP4
                     * fragment. If multiple fragments are specified, the earliest time is
                     * returned.
                     *
                     * The base media decode time can be parsed from track fragment
                     * metadata:
                     * ```
                     * moof > traf > tfdt.baseMediaDecodeTime
                     * ```
                     * It requires the timescale value from the mdhd to interpret.
                     *
                     * @param timescale {object} a hash of track ids to timescale values.
                     * @return {number} the earliest base media decode start time for the
                     * fragment, in seconds
                     */ startTime = function(timescale, fragment) {
                    var trafs, baseTimes, result; // we need info from two childrend of each track fragment box
                    return trafs = findBox_1(fragment, [
                        "moof",
                        "traf"
                    ]), baseTimes = [].concat.apply([], trafs.map(function(traf) {
                        return findBox_1(traf, [
                            "tfhd"
                        ]).map(function(tfhd) {
                            var scale, baseTime; // get the track id from the tfhd
                            return scale = timescale[bin_toUnsigned(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7])] || 90e3, (baseTime = "number" != typeof (baseTime = findBox_1(traf, [
                                "tfdt"
                            ]).map(function(tfdt) {
                                var version, result;
                                return version = tfdt[0], result = bin_toUnsigned(tfdt[4] << 24 | tfdt[5] << 16 | tfdt[6] << 8 | tfdt[7]), 1 === version && (result *= 4294967296, result += bin_toUnsigned(tfdt[8] << 24 | tfdt[9] << 16 | tfdt[10] << 8 | tfdt[11])), result;
                            })[0]) || isNaN(baseTime) ? 1 / 0 : baseTime) / scale;
                        });
                    })), isFinite(result = Math.min.apply(null, baseTimes)) ? result : 0;
                }, getTimescaleFromMediaHeader = function(mdhd) {
                    var index = 0 === mdhd[0] ? 12 : 20;
                    return bin_toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);
                };
                var probe$2_tracks = function(init) {
                    var traks = findBox_1(init, [
                        "moov",
                        "trak"
                    ]), tracks = [];
                    return traks.forEach(function(trak) {
                        var track = {}, tkhd = findBox_1(trak, [
                            "tkhd"
                        ])[0];
                        tkhd && (tkhdVersion = (view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength)).getUint8(0), track.id = 0 === tkhdVersion ? view.getUint32(12) : view.getUint32(20));
                        var hdlr = findBox_1(trak, [
                            "mdia",
                            "hdlr"
                        ])[0]; // type
                        if (hdlr) {
                            var type = parseType_1(hdlr.subarray(8, 12));
                            "vide" === type ? track.type = "video" : "soun" === type ? track.type = "audio" : track.type = type;
                        } // codec
                        var stsd = findBox_1(trak, [
                            "mdia",
                            "minf",
                            "stbl",
                            "stsd"
                        ])[0];
                        if (stsd) {
                            var view, tkhdVersion, codecConfig, sampleDescriptions = stsd.subarray(8); // gives the codec type string
                            track.codec = parseType_1(sampleDescriptions.subarray(4, 8));
                            var codecBox = findBox_1(sampleDescriptions, [
                                track.codec
                            ])[0];
                            codecBox && (/^[asm]vc[1-9]$/i.test(track.codec) ? "avcC" === parseType_1(// we don't need anything but the "config" parameter of the
                            // avc1 codecBox
                            (codecConfig = codecBox.subarray(78)).subarray(4, 8)) && codecConfig.length > 11 ? (track.codec += ".", // profile idc
                            track.codec += toHexString(codecConfig[9]), track.codec += toHexString(codecConfig[10]), track.codec += toHexString(codecConfig[11])) : // TODO: show a warning that we couldn't parse the codec
                            // and are using the default
                            track.codec = "avc1.4d400d" : /^mp4[a,v]$/i.test(track.codec) ? "esds" === parseType_1(// we do not need anything but the streamDescriptor of the mp4a codecBox
                            (codecConfig = codecBox.subarray(28)).subarray(4, 8)) && codecConfig.length > 20 && 0 !== codecConfig[19] ? (track.codec += "." + toHexString(codecConfig[19]), track.codec += "." + toHexString(codecConfig[20] >>> 2 & 0x3f).replace(/^0/, "")) : // TODO: show a warning that we couldn't parse the codec
                            // and are using the default
                            track.codec = "mp4a.40.2" : // flac, opus, etc
                            track.codec = track.codec.toLowerCase());
                        }
                        var mdhd = findBox_1(trak, [
                            "mdia",
                            "mdhd"
                        ])[0];
                        mdhd && (track.timescale = getTimescaleFromMediaHeader(mdhd)), tracks.push(track);
                    }), tracks;
                }, parsePid = function(packet) {
                    var pid = 0x1f & packet[1];
                    return pid <<= 8, pid |= packet[2];
                }, parsePayloadUnitStartIndicator = function(packet) {
                    return !!(0x40 & packet[1]);
                }, parseAdaptionField = function(packet) {
                    var offset = 0; // if an adaption field is present, its length is specified by the
                    return (0x30 & packet[3]) >>> 4 > 0x01 && (offset += packet[4] + 1), offset;
                }, parseNalUnitType = function(type) {
                    switch(type){
                        case 0x05:
                            return "slice_layer_without_partitioning_rbsp_idr";
                        case 0x06:
                            return "sei_rbsp";
                        case 0x07:
                            return "seq_parameter_set_rbsp";
                        case 0x08:
                            return "pic_parameter_set_rbsp";
                        case 0x09:
                            return "access_unit_delimiter_rbsp";
                        default:
                            return null;
                    }
                }, probe = {};
                probe.ts = {
                    parseType: function(packet, pmtPid) {
                        var pid = parsePid(packet);
                        return 0 === pid ? "pat" : pid === pmtPid ? "pmt" : pmtPid ? "pes" : null;
                    },
                    parsePat: function(packet) {
                        var pusi = parsePayloadUnitStartIndicator(packet), offset = 4 + parseAdaptionField(packet);
                        return pusi && (offset += packet[offset] + 1), (0x1f & packet[offset + 10]) << 8 | packet[offset + 11];
                    },
                    parsePmt: function(packet) {
                        var tableEnd, programMapTable = {}, pusi = parsePayloadUnitStartIndicator(packet), payloadOffset = 4 + parseAdaptionField(packet);
                        // take effect. We don't believe this should ever be the case
                        // for HLS but we'll ignore "forward" PMT declarations if we see
                        // them. Future PMT declarations have the current_next_indicator
                        // set to zero.
                        if (pusi && (payloadOffset += packet[payloadOffset] + 1), 0x01 & packet[payloadOffset + 5]) {
                            tableEnd = 3 + ((0x0f & packet[payloadOffset + 1]) << 8 | packet[payloadOffset + 2]) - 4;
                            for(var offset = 12 + ((0x0f & packet[payloadOffset + 10]) << 8 | packet[payloadOffset + 11]); offset < tableEnd;){
                                var i = payloadOffset + offset; // add an entry that maps the elementary_pid to the stream_type
                                programMapTable[(0x1f & packet[i + 1]) << 8 | packet[i + 2]] = packet[i], // skip past the elementary stream descriptors, if present
                                offset += ((0x0f & packet[i + 3]) << 8 | packet[i + 4]) + 5;
                            }
                            return programMapTable;
                        }
                    },
                    parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,
                    parsePesType: function(packet, programMapTable) {
                        switch(programMapTable[parsePid(packet)]){
                            case streamTypes.H264_STREAM_TYPE:
                                return "video";
                            case streamTypes.ADTS_STREAM_TYPE:
                                return "audio";
                            case streamTypes.METADATA_STREAM_TYPE:
                                return "timed-metadata";
                            default:
                                return null;
                        }
                    },
                    parsePesTime: function(packet) {
                        if (!parsePayloadUnitStartIndicator(packet)) return null;
                        var ptsDtsFlags, offset = 4 + parseAdaptionField(packet);
                        if (offset >= packet.byteLength) // From the H 222.0 MPEG-TS spec
                        // "For transport stream packets carrying PES packets, stuffing is needed when there
                        //  is insufficient PES packet data to completely fill the transport stream packet
                        //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than
                        //  the sum of the lengths of the data elements in it, so that the payload bytes
                        //  remaining after the adaptation field exactly accommodates the available PES packet
                        //  data."
                        //
                        // If the offset is >= the length of the packet, then the packet contains no data
                        // and instead is just adaption field stuffing bytes
                        return null;
                        var pes = null;
                        return 0xc0 & // and a DTS value. Determine what combination of values is
                        // available to work with.
                        (ptsDtsFlags = packet[offset + 7]) && (// on how they are encoded, see
                        // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
                        (pes = {}).pts = (0x0e & packet[offset + 9]) << 27 | (0xff & packet[offset + 10]) << 20 | (0xfe & packet[offset + 11]) << 12 | (0xff & packet[offset + 12]) << 5 | (0xfe & packet[offset + 13]) >>> 3, pes.pts *= 4, pes.pts += (0x06 & packet[offset + 13]) >>> 1, pes.dts = pes.pts, 0x40 & ptsDtsFlags && (pes.dts = (0x0e & packet[offset + 14]) << 27 | (0xff & packet[offset + 15]) << 20 | (0xfe & packet[offset + 16]) << 12 | (0xff & packet[offset + 17]) << 5 | (0xfe & packet[offset + 18]) >>> 3, pes.dts *= 4, pes.dts += (0x06 & packet[offset + 18]) >>> 1)), pes;
                    },
                    videoPacketContainsKeyFrame: function(packet) {
                        for(var offset = 4 + parseAdaptionField(packet), frameBuffer = packet.subarray(offset), frameI = 0, frameSyncPoint = 0, foundKeyFrame = !1; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++)if (1 === frameBuffer[frameSyncPoint + 2]) {
                            // the sync point is properly aligned
                            frameI = frameSyncPoint + 5;
                            break;
                        }
                        for(; frameI < frameBuffer.byteLength;)// look at the current byte to determine if we've hit the end of
                        // a NAL unit boundary
                        switch(frameBuffer[frameI]){
                            case 0:
                                // skip past non-sync sequences
                                if (0 !== frameBuffer[frameI - 1]) {
                                    frameI += 2;
                                    break;
                                }
                                if (0 !== frameBuffer[frameI - 2]) {
                                    frameI++;
                                    break;
                                }
                                frameSyncPoint + 3 !== frameI - 2 && "slice_layer_without_partitioning_rbsp_idr" === parseNalUnitType(0x1f & frameBuffer[frameSyncPoint + 3]) && (foundKeyFrame = !0);
                                do frameI++;
                                while (1 !== frameBuffer[frameI] && frameI < frameBuffer.length)
                                frameSyncPoint = frameI - 2, frameI += 3;
                                break;
                            case 1:
                                // skip past non-sync sequences
                                if (0 !== frameBuffer[frameI - 1] || 0 !== frameBuffer[frameI - 2]) {
                                    frameI += 3;
                                    break;
                                }
                                "slice_layer_without_partitioning_rbsp_idr" === parseNalUnitType(0x1f & frameBuffer[frameSyncPoint + 3]) && (foundKeyFrame = !0), frameSyncPoint = frameI - 2, frameI += 3;
                                break;
                            default:
                                // the current byte isn't a one or zero, so it cannot be part
                                // of a sync sequence
                                frameI += 3;
                        }
                        return frameBuffer = frameBuffer.subarray(frameSyncPoint), frameI -= frameSyncPoint, frameSyncPoint = 0, frameBuffer && frameBuffer.byteLength > 3 && "slice_layer_without_partitioning_rbsp_idr" === parseNalUnitType(0x1f & frameBuffer[frameSyncPoint + 3]) && (foundKeyFrame = !0), foundKeyFrame;
                    }
                }, probe.aac = utils;
                var ONE_SECOND_IN_TS = clock.ONE_SECOND_IN_TS, parsePsi_ = function(bytes, pmt) {
                    for(var packet, startIndex = 0, endIndex = 188; endIndex < bytes.byteLength;){
                        // Look for a pair of start and end sync bytes in the data..
                        if (0x47 === bytes[startIndex] && 0x47 === bytes[endIndex]) {
                            switch(// We found a packet
                            packet = bytes.subarray(startIndex, endIndex), probe.ts.parseType(packet, pmt.pid)){
                                case "pat":
                                    pmt.pid = probe.ts.parsePat(packet);
                                    break;
                                case "pmt":
                                    var table = probe.ts.parsePmt(packet);
                                    pmt.table = pmt.table || {}, Object.keys(table).forEach(function(key) {
                                        pmt.table[key] = table[key];
                                    });
                            }
                            startIndex += 188, endIndex += 188;
                            continue;
                        } // If we get here, we have somehow become de-synchronized and we need to step
                        // forward one byte at a time until we find a pair of sync bytes that denote
                        // a packet
                        startIndex++, endIndex++;
                    }
                }, parseAudioPes_ = function(bytes, pmt, result) {
                    for(var packet, pesType, pusi, parsed, startIndex = 0, endIndex = 188, endLoop = !1; endIndex <= bytes.byteLength;){
                        // Look for a pair of start and end sync bytes in the data..
                        if (0x47 === bytes[startIndex] && (0x47 === bytes[endIndex] || endIndex === bytes.byteLength)) {
                            if (// We found a packet
                            packet = bytes.subarray(startIndex, endIndex), "pes" === probe.ts.parseType(packet, pmt.pid) && (pesType = probe.ts.parsePesType(packet, pmt.table), pusi = probe.ts.parsePayloadUnitStartIndicator(packet), "audio" === pesType && pusi && (parsed = probe.ts.parsePesTime(packet)) && (parsed.type = "audio", result.audio.push(parsed), endLoop = !0)), endLoop) break;
                            startIndex += 188, endIndex += 188;
                            continue;
                        } // If we get here, we have somehow become de-synchronized and we need to step
                        // forward one byte at a time until we find a pair of sync bytes that denote
                        // a packet
                        startIndex++, endIndex++;
                    } // Start walking from end of segment to get last audio packet
                    for(startIndex = (endIndex = bytes.byteLength) - 188, endLoop = !1; startIndex >= 0;){
                        // Look for a pair of start and end sync bytes in the data..
                        if (0x47 === bytes[startIndex] && (0x47 === bytes[endIndex] || endIndex === bytes.byteLength)) {
                            if (// We found a packet
                            packet = bytes.subarray(startIndex, endIndex), "pes" === probe.ts.parseType(packet, pmt.pid) && (pesType = probe.ts.parsePesType(packet, pmt.table), pusi = probe.ts.parsePayloadUnitStartIndicator(packet), "audio" === pesType && pusi && (parsed = probe.ts.parsePesTime(packet)) && (parsed.type = "audio", result.audio.push(parsed), endLoop = !0)), endLoop) break;
                            startIndex -= 188, endIndex -= 188;
                            continue;
                        } // If we get here, we have somehow become de-synchronized and we need to step
                        // forward one byte at a time until we find a pair of sync bytes that denote
                        // a packet
                        startIndex--, endIndex--;
                    }
                }, parseVideoPes_ = function(bytes, pmt, result) {
                    for(var packet, pesType, pusi, parsed, frame, i, pes, startIndex = 0, endIndex = 188, endLoop = !1, currentFrame = {
                        data: [],
                        size: 0
                    }; endIndex < bytes.byteLength;){
                        // Look for a pair of start and end sync bytes in the data..
                        if (0x47 === bytes[startIndex] && 0x47 === bytes[endIndex]) {
                            if (// We found a packet
                            packet = bytes.subarray(startIndex, endIndex), "pes" === probe.ts.parseType(packet, pmt.pid) && (pesType = probe.ts.parsePesType(packet, pmt.table), pusi = probe.ts.parsePayloadUnitStartIndicator(packet), "video" === pesType && (pusi && !endLoop && (parsed = probe.ts.parsePesTime(packet)) && (parsed.type = "video", result.video.push(parsed), endLoop = !0), !result.firstKeyFrame))) {
                                if (pusi && 0 !== currentFrame.size) {
                                    for(frame = new Uint8Array(currentFrame.size), i = 0; currentFrame.data.length;)pes = currentFrame.data.shift(), frame.set(pes, i), i += pes.byteLength;
                                    if (probe.ts.videoPacketContainsKeyFrame(frame)) {
                                        var firstKeyFrame = probe.ts.parsePesTime(frame); // PTS/DTS may not be available. Simply *not* setting
                                        // the keyframe seems to work fine with HLS playback
                                        // and definitely preferable to a crash with TypeError...
                                        firstKeyFrame ? (result.firstKeyFrame = firstKeyFrame, result.firstKeyFrame.type = "video") : // eslint-disable-next-line
                                        console.warn("Failed to extract PTS/DTS from PES at first keyframe. This could be an unusual TS segment, or else mux.js did not parse your TS segment correctly. If you know your TS segments do contain PTS/DTS on keyframes please file a bug report! You can try ffprobe to double check for yourself.");
                                    }
                                    currentFrame.size = 0;
                                }
                                currentFrame.data.push(packet), currentFrame.size += packet.byteLength;
                            }
                            if (endLoop && result.firstKeyFrame) break;
                            startIndex += 188, endIndex += 188;
                            continue;
                        } // If we get here, we have somehow become de-synchronized and we need to step
                        // forward one byte at a time until we find a pair of sync bytes that denote
                        // a packet
                        startIndex++, endIndex++;
                    } // Start walking from end of segment to get last video packet
                    for(startIndex = (endIndex = bytes.byteLength) - 188, endLoop = !1; startIndex >= 0;){
                        // Look for a pair of start and end sync bytes in the data..
                        if (0x47 === bytes[startIndex] && 0x47 === bytes[endIndex]) {
                            if (// We found a packet
                            packet = bytes.subarray(startIndex, endIndex), "pes" === probe.ts.parseType(packet, pmt.pid) && (pesType = probe.ts.parsePesType(packet, pmt.table), pusi = probe.ts.parsePayloadUnitStartIndicator(packet), "video" === pesType && pusi && (parsed = probe.ts.parsePesTime(packet)) && (parsed.type = "video", result.video.push(parsed), endLoop = !0)), endLoop) break;
                            startIndex -= 188, endIndex -= 188;
                            continue;
                        } // If we get here, we have somehow become de-synchronized and we need to step
                        // forward one byte at a time until we find a pair of sync bytes that denote
                        // a packet
                        startIndex--, endIndex--;
                    }
                }, adjustTimestamp_ = function(segmentInfo, baseTimestamp) {
                    if (segmentInfo.audio && segmentInfo.audio.length) {
                        var audioBaseTimestamp = baseTimestamp;
                        (void 0 === audioBaseTimestamp || isNaN(audioBaseTimestamp)) && (audioBaseTimestamp = segmentInfo.audio[0].dts), segmentInfo.audio.forEach(function(info) {
                            info.dts = handleRollover$1(info.dts, audioBaseTimestamp), info.pts = handleRollover$1(info.pts, audioBaseTimestamp), info.dtsTime = info.dts / ONE_SECOND_IN_TS, info.ptsTime = info.pts / ONE_SECOND_IN_TS;
                        });
                    }
                    if (segmentInfo.video && segmentInfo.video.length) {
                        var videoBaseTimestamp = baseTimestamp;
                        if ((void 0 === videoBaseTimestamp || isNaN(videoBaseTimestamp)) && (videoBaseTimestamp = segmentInfo.video[0].dts), segmentInfo.video.forEach(function(info) {
                            info.dts = handleRollover$1(info.dts, videoBaseTimestamp), info.pts = handleRollover$1(info.pts, videoBaseTimestamp), info.dtsTime = info.dts / ONE_SECOND_IN_TS, info.ptsTime = info.pts / ONE_SECOND_IN_TS;
                        }), segmentInfo.firstKeyFrame) {
                            var frame = segmentInfo.firstKeyFrame;
                            frame.dts = handleRollover$1(frame.dts, videoBaseTimestamp), frame.pts = handleRollover$1(frame.pts, videoBaseTimestamp), frame.dtsTime = frame.dts / ONE_SECOND_IN_TS, frame.ptsTime = frame.pts / ONE_SECOND_IN_TS;
                        }
                    }
                }, inspectAac_ = function(bytes) {
                    for(var packet, endLoop = !1, audioCount = 0, sampleRate = null, timestamp = null, frameSize = 0, byteIndex = 0; bytes.length - byteIndex >= 3;){
                        switch(probe.aac.parseType(bytes, byteIndex)){
                            case "timed-metadata":
                                // Exit early because we don't have enough to parse
                                // the ID3 tag header
                                if (bytes.length - byteIndex < 10 || (frameSize = probe.aac.parseId3TagSize(bytes, byteIndex)) > bytes.length) {
                                    endLoop = !0;
                                    break;
                                }
                                null === timestamp && (packet = bytes.subarray(byteIndex, byteIndex + frameSize), timestamp = probe.aac.parseAacTimestamp(packet)), byteIndex += frameSize;
                                break;
                            case "audio":
                                // Exit early because we don't have enough to parse
                                // the ADTS frame header
                                if (bytes.length - byteIndex < 7 || (frameSize = probe.aac.parseAdtsSize(bytes, byteIndex)) > bytes.length) {
                                    endLoop = !0;
                                    break;
                                }
                                null === sampleRate && (packet = bytes.subarray(byteIndex, byteIndex + frameSize), sampleRate = probe.aac.parseSampleRate(packet)), audioCount++, byteIndex += frameSize;
                                break;
                            default:
                                byteIndex++;
                        }
                        if (endLoop) return null;
                    }
                    if (null === sampleRate || null === timestamp) return null;
                    var audioTimescale = ONE_SECOND_IN_TS / sampleRate;
                    return {
                        audio: [
                            {
                                type: "audio",
                                dts: timestamp,
                                pts: timestamp
                            },
                            {
                                type: "audio",
                                dts: timestamp + 1024 * audioCount * audioTimescale,
                                pts: timestamp + 1024 * audioCount * audioTimescale
                            }
                        ]
                    };
                }, inspectTs_ = function(bytes) {
                    var pmt = {
                        pid: null,
                        table: null
                    }, result = {};
                    for(var pid in parsePsi_(bytes, pmt), pmt.table)if (pmt.table.hasOwnProperty(pid)) switch(pmt.table[pid]){
                        case streamTypes.H264_STREAM_TYPE:
                            result.video = [], parseVideoPes_(bytes, pmt, result), 0 === result.video.length && delete result.video;
                            break;
                        case streamTypes.ADTS_STREAM_TYPE:
                            result.audio = [], parseAudioPes_(bytes, pmt, result), 0 === result.audio.length && delete result.audio;
                    }
                    return result;
                }, tsInspector_inspect = function(bytes, baseTimestamp) {
                    var result;
                    return (result = probe.aac.isLikelyAacData(bytes) ? inspectAac_(bytes) : inspectTs_(bytes)) && (result.audio || result.video) ? (adjustTimestamp_(result, baseTimestamp), result) : null;
                }, wireTransmuxerEvents = function(self1, transmuxer) {
                    transmuxer.on("data", function(segment) {
                        // transfer ownership of the underlying ArrayBuffer
                        // instead of doing a copy to save memory
                        // ArrayBuffers are transferable but generic TypedArrays are not
                        // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)
                        var initArray = segment.initSegment;
                        segment.initSegment = {
                            data: initArray.buffer,
                            byteOffset: initArray.byteOffset,
                            byteLength: initArray.byteLength
                        };
                        var typedArray = segment.data;
                        segment.data = typedArray.buffer, self1.postMessage({
                            action: "data",
                            segment: segment,
                            byteOffset: typedArray.byteOffset,
                            byteLength: typedArray.byteLength
                        }, [
                            segment.data
                        ]);
                    }), transmuxer.on("done", function(data) {
                        self1.postMessage({
                            action: "done"
                        });
                    }), transmuxer.on("gopInfo", function(gopInfo) {
                        self1.postMessage({
                            action: "gopInfo",
                            gopInfo: gopInfo
                        });
                    }), transmuxer.on("videoSegmentTimingInfo", function(timingInfo) {
                        var videoSegmentTimingInfo = {
                            start: {
                                decode: clock.videoTsToSeconds(timingInfo.start.dts),
                                presentation: clock.videoTsToSeconds(timingInfo.start.pts)
                            },
                            end: {
                                decode: clock.videoTsToSeconds(timingInfo.end.dts),
                                presentation: clock.videoTsToSeconds(timingInfo.end.pts)
                            },
                            baseMediaDecodeTime: clock.videoTsToSeconds(timingInfo.baseMediaDecodeTime)
                        };
                        timingInfo.prependedContentDuration && (videoSegmentTimingInfo.prependedContentDuration = clock.videoTsToSeconds(timingInfo.prependedContentDuration)), self1.postMessage({
                            action: "videoSegmentTimingInfo",
                            videoSegmentTimingInfo: videoSegmentTimingInfo
                        });
                    }), transmuxer.on("audioSegmentTimingInfo", function(timingInfo) {
                        // Note that all times for [audio/video]SegmentTimingInfo events are in video clock
                        var audioSegmentTimingInfo = {
                            start: {
                                decode: clock.videoTsToSeconds(timingInfo.start.dts),
                                presentation: clock.videoTsToSeconds(timingInfo.start.pts)
                            },
                            end: {
                                decode: clock.videoTsToSeconds(timingInfo.end.dts),
                                presentation: clock.videoTsToSeconds(timingInfo.end.pts)
                            },
                            baseMediaDecodeTime: clock.videoTsToSeconds(timingInfo.baseMediaDecodeTime)
                        };
                        timingInfo.prependedContentDuration && (audioSegmentTimingInfo.prependedContentDuration = clock.videoTsToSeconds(timingInfo.prependedContentDuration)), self1.postMessage({
                            action: "audioSegmentTimingInfo",
                            audioSegmentTimingInfo: audioSegmentTimingInfo
                        });
                    }), transmuxer.on("id3Frame", function(id3Frame) {
                        self1.postMessage({
                            action: "id3Frame",
                            id3Frame: id3Frame
                        });
                    }), transmuxer.on("caption", function(caption) {
                        self1.postMessage({
                            action: "caption",
                            caption: caption
                        });
                    }), transmuxer.on("trackinfo", function(trackInfo) {
                        self1.postMessage({
                            action: "trackinfo",
                            trackInfo: trackInfo
                        });
                    }), transmuxer.on("audioTimingInfo", function(audioTimingInfo) {
                        // convert to video TS since we prioritize video time over audio
                        self1.postMessage({
                            action: "audioTimingInfo",
                            audioTimingInfo: {
                                start: clock.videoTsToSeconds(audioTimingInfo.start),
                                end: clock.videoTsToSeconds(audioTimingInfo.end)
                            }
                        });
                    }), transmuxer.on("videoTimingInfo", function(videoTimingInfo) {
                        self1.postMessage({
                            action: "videoTimingInfo",
                            videoTimingInfo: {
                                start: clock.videoTsToSeconds(videoTimingInfo.start),
                                end: clock.videoTsToSeconds(videoTimingInfo.end)
                            }
                        });
                    }), transmuxer.on("log", function(log) {
                        self1.postMessage({
                            action: "log",
                            log: log
                        });
                    });
                }, MessageHandlers = /*#__PURE__*/ function() {
                    function MessageHandlers(self1, options) {
                        this.options = options || {}, this.self = self1, this.init();
                    }
                    /**
                         * initialize our web worker and wire all the events.
                         */ var _proto = MessageHandlers.prototype;
                    return _proto.init = function() {
                        this.transmuxer && this.transmuxer.dispose(), this.transmuxer = new transmuxer_Transmuxer(this.options), wireTransmuxerEvents(this.self, this.transmuxer);
                    }, _proto.pushMp4Captions = function(data) {
                        this.captionParser || (this.captionParser = new captionParser(), this.captionParser.init());
                        var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength), parsed = this.captionParser.parse(segment, data.trackIds, data.timescales);
                        this.self.postMessage({
                            action: "mp4Captions",
                            captions: parsed && parsed.captions || [],
                            logs: parsed && parsed.logs || [],
                            data: segment.buffer
                        }, [
                            segment.buffer
                        ]);
                    }, _proto.probeMp4StartTime = function(_ref) {
                        var timescales = _ref.timescales, data = _ref.data, startTime1 = startTime(timescales, data);
                        this.self.postMessage({
                            action: "probeMp4StartTime",
                            startTime: startTime1,
                            data: data
                        }, [
                            data.buffer
                        ]);
                    }, _proto.probeMp4Tracks = function(_ref2) {
                        var data = _ref2.data, tracks = probe$2_tracks(data);
                        this.self.postMessage({
                            action: "probeMp4Tracks",
                            tracks: tracks,
                            data: data
                        }, [
                            data.buffer
                        ]);
                    }, /**
                         * Probe an mpeg2-ts segment to determine the start time of the segment in it's
                         * internal "media time," as well as whether it contains video and/or audio.
                         *
                         * @private
                         * @param {Uint8Array} bytes - segment bytes
                         * @param {number} baseStartTime
                         *        Relative reference timestamp used when adjusting frame timestamps for rollover.
                         *        This value should be in seconds, as it's converted to a 90khz clock within the
                         *        function body.
                         * @return {Object} The start time of the current segment in "media time" as well as
                         *                  whether it contains video and/or audio
                         */ _proto.probeTs = function(_ref3) {
                        var data = _ref3.data, baseStartTime = _ref3.baseStartTime, timeInfo = tsInspector_inspect(data, "number" != typeof baseStartTime || isNaN(baseStartTime) ? void 0 : baseStartTime * clock.ONE_SECOND_IN_TS), result = null;
                        timeInfo && ((result = {
                            // each type's time info comes back as an array of 2 times, start and end
                            hasVideo: timeInfo.video && 2 === timeInfo.video.length || !1,
                            hasAudio: timeInfo.audio && 2 === timeInfo.audio.length || !1
                        }).hasVideo && (result.videoStart = timeInfo.video[0].ptsTime), result.hasAudio && (result.audioStart = timeInfo.audio[0].ptsTime)), this.self.postMessage({
                            action: "probeTs",
                            result: result,
                            data: data
                        }, [
                            data.buffer
                        ]);
                    }, _proto.clearAllMp4Captions = function() {
                        this.captionParser && this.captionParser.clearAllCaptions();
                    }, _proto.clearParsedMp4Captions = function() {
                        this.captionParser && this.captionParser.clearParsedCaptions();
                    }, /**
                         * Adds data (a ts segment) to the start of the transmuxer pipeline for
                         * processing.
                         *
                         * @param {ArrayBuffer} data data to push into the muxer
                         */ _proto.push = function(data) {
                        // Cast array buffer to correct type for transmuxer
                        var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);
                        this.transmuxer.push(segment);
                    }, /**
                         * Recreate the transmuxer so that the next segment added via `push`
                         * start with a fresh transmuxer.
                         */ _proto.reset = function() {
                        this.transmuxer.reset();
                    }, /**
                         * Set the value that will be used as the `baseMediaDecodeTime` time for the
                         * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`
                         * set relative to the first based on the PTS values.
                         *
                         * @param {Object} data used to set the timestamp offset in the muxer
                         */ _proto.setTimestampOffset = function(data) {
                        var timestampOffset = data.timestampOffset || 0;
                        this.transmuxer.setBaseMediaDecodeTime(Math.round(clock.secondsToVideoTs(timestampOffset)));
                    }, _proto.setAudioAppendStart = function(data) {
                        this.transmuxer.setAudioAppendStart(Math.ceil(clock.secondsToVideoTs(data.appendStart)));
                    }, _proto.setRemux = function(data) {
                        this.transmuxer.setRemux(data.remux);
                    }, /**
                         * Forces the pipeline to finish processing the last segment and emit it's
                         * results.
                         *
                         * @param {Object} data event data, not really used
                         */ _proto.flush = function(data) {
                        this.transmuxer.flush(), self.postMessage({
                            action: "done",
                            type: "transmuxed"
                        });
                    }, _proto.endTimeline = function() {
                        this.transmuxer.endTimeline(), // timelines
                        self.postMessage({
                            action: "endedtimeline",
                            type: "transmuxed"
                        });
                    }, _proto.alignGopsWith = function(data) {
                        this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice());
                    }, MessageHandlers;
                }();
                /**
                     * Our web worker interface so that things can talk to mux.js
                     * that will be running in a web worker. the scope is passed to this by
                     * webworkify.
                     *
                     * @param {Object} self the scope for the web worker
                     */ self.onmessage = function(event) {
                    if ("init" === event.data.action && event.data.options) {
                        this.messageHandlers = new MessageHandlers(self, event.data.options);
                        return;
                    }
                    this.messageHandlers || (this.messageHandlers = new MessageHandlers(self)), event.data && event.data.action && "init" !== event.data.action && this.messageHandlers[event.data.action] && this.messageHandlers[event.data.action](event.data);
                };
            }))), handleData_ = function(event, transmuxedData, callback) {
                var _event$data$segment = event.data.segment, type = _event$data$segment.type, initSegment = _event$data$segment.initSegment, captions = _event$data$segment.captions, captionStreams = _event$data$segment.captionStreams, metadata = _event$data$segment.metadata, videoFrameDtsTime = _event$data$segment.videoFrameDtsTime, videoFramePtsTime = _event$data$segment.videoFramePtsTime;
                transmuxedData.buffer.push({
                    captions: captions,
                    captionStreams: captionStreams,
                    metadata: metadata
                });
                var boxes = event.data.segment.boxes || {
                    data: event.data.segment.data
                }, result = {
                    type: type,
                    // cast ArrayBuffer to TypedArray
                    data: new Uint8Array(boxes.data, boxes.data.byteOffset, boxes.data.byteLength),
                    initSegment: new Uint8Array(initSegment.data, initSegment.byteOffset, initSegment.byteLength)
                };
                void 0 !== videoFrameDtsTime && (result.videoFrameDtsTime = videoFrameDtsTime), void 0 !== videoFramePtsTime && (result.videoFramePtsTime = videoFramePtsTime), callback(result);
            }, handleDone_ = function(_ref) {
                var transmuxedData = _ref.transmuxedData, callback = _ref.callback; // Previously we only returned data on data events,
                // not on done events. Clear out the buffer to keep that consistent.
                transmuxedData.buffer = [], // have received
                callback(transmuxedData);
            }, handleGopInfo_ = function(event, transmuxedData) {
                transmuxedData.gopInfo = event.data.gopInfo;
            }, processTransmux = function(options) {
                var transmuxer = options.transmuxer, bytes = options.bytes, audioAppendStart = options.audioAppendStart, gopsToAlignWith = options.gopsToAlignWith, remux = options.remux, onData = options.onData, onTrackInfo = options.onTrackInfo, onAudioTimingInfo = options.onAudioTimingInfo, onVideoTimingInfo = options.onVideoTimingInfo, onVideoSegmentTimingInfo = options.onVideoSegmentTimingInfo, onAudioSegmentTimingInfo = options.onAudioSegmentTimingInfo, onId3 = options.onId3, onCaptions = options.onCaptions, onDone = options.onDone, onEndedTimeline = options.onEndedTimeline, onTransmuxerLog = options.onTransmuxerLog, isEndOfTimeline = options.isEndOfTimeline, transmuxedData = {
                    buffer: []
                }, waitForEndedTimelineEvent = isEndOfTimeline;
                if (transmuxer.onmessage = function(event) {
                    transmuxer.currentTransmux === options && ("data" === event.data.action && handleData_(event, transmuxedData, onData), "trackinfo" === event.data.action && onTrackInfo(event.data.trackInfo), "gopInfo" === event.data.action && handleGopInfo_(event, transmuxedData), "audioTimingInfo" === event.data.action && onAudioTimingInfo(event.data.audioTimingInfo), "videoTimingInfo" === event.data.action && onVideoTimingInfo(event.data.videoTimingInfo), "videoSegmentTimingInfo" === event.data.action && onVideoSegmentTimingInfo(event.data.videoSegmentTimingInfo), "audioSegmentTimingInfo" === event.data.action && onAudioSegmentTimingInfo(event.data.audioSegmentTimingInfo), "id3Frame" === event.data.action && onId3([
                        event.data.id3Frame
                    ], event.data.id3Frame.dispatchType), "caption" === event.data.action && onCaptions(event.data.caption), "endedtimeline" === event.data.action && (waitForEndedTimelineEvent = !1, onEndedTimeline()), "log" === event.data.action && onTransmuxerLog(event.data.log), "transmuxed" !== event.data.type || waitForEndedTimelineEvent || (transmuxer.onmessage = null, handleDone_({
                        transmuxedData: transmuxedData,
                        callback: onDone
                    }), /* eslint-disable no-use-before-define */ dequeue(transmuxer)));
                /* eslint-enable */ }, audioAppendStart && transmuxer.postMessage({
                    action: "setAudioAppendStart",
                    appendStart: audioAppendStart
                }), Array.isArray(gopsToAlignWith) && transmuxer.postMessage({
                    action: "alignGopsWith",
                    gopsToAlignWith: gopsToAlignWith
                }), void 0 !== remux && transmuxer.postMessage({
                    action: "setRemux",
                    remux: remux
                }), bytes.byteLength) {
                    var buffer = bytes instanceof ArrayBuffer ? bytes : bytes.buffer, byteOffset = bytes instanceof ArrayBuffer ? 0 : bytes.byteOffset;
                    transmuxer.postMessage({
                        action: "push",
                        // Send the typed-array of data as an ArrayBuffer so that
                        // it can be sent as a "Transferable" and avoid the costly
                        // memory copy
                        data: buffer,
                        // To recreate the original typed-array, we need information
                        // about what portion of the ArrayBuffer it was a view into
                        byteOffset: byteOffset,
                        byteLength: bytes.byteLength
                    }, [
                        buffer
                    ]);
                }
                isEndOfTimeline && transmuxer.postMessage({
                    action: "endTimeline"
                }), // the end of the segment
                transmuxer.postMessage({
                    action: "flush"
                });
            }, dequeue = function(transmuxer) {
                transmuxer.currentTransmux = null, transmuxer.transmuxQueue.length && (transmuxer.currentTransmux = transmuxer.transmuxQueue.shift(), "function" == typeof transmuxer.currentTransmux ? transmuxer.currentTransmux() : processTransmux(transmuxer.currentTransmux));
            }, processAction = function(transmuxer, action) {
                transmuxer.postMessage({
                    action: action
                }), dequeue(transmuxer);
            }, enqueueAction = function(action, transmuxer) {
                if (!transmuxer.currentTransmux) {
                    transmuxer.currentTransmux = action, processAction(transmuxer, action);
                    return;
                }
                transmuxer.transmuxQueue.push(processAction.bind(null, transmuxer, action));
            }, transmux = function(options) {
                if (!options.transmuxer.currentTransmux) {
                    options.transmuxer.currentTransmux = options, processTransmux(options);
                    return;
                }
                options.transmuxer.transmuxQueue.push(options);
            }, segmentTransmuxer = {
                reset: function(transmuxer) {
                    enqueueAction("reset", transmuxer);
                },
                createTransmuxer: function(options) {
                    var transmuxer = new TransmuxWorker();
                    transmuxer.currentTransmux = null, transmuxer.transmuxQueue = [];
                    var term = transmuxer.terminate;
                    return transmuxer.terminate = function() {
                        return transmuxer.currentTransmux = null, transmuxer.transmuxQueue.length = 0, term.call(transmuxer);
                    }, transmuxer.postMessage({
                        action: "init",
                        options: options
                    }), transmuxer;
                }
            }, workerCallback = function(options) {
                var transmuxer = options.transmuxer, endAction = options.endAction || options.action, callback = options.callback, message = (0, _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_15__ /* ["default"] */ .Z)({}, options, {
                    endAction: null,
                    transmuxer: null,
                    callback: null
                });
                if (transmuxer.addEventListener("message", function listenForEndEvent(event) {
                    event.data.action === endAction && (transmuxer.removeEventListener("message", listenForEndEvent), event.data.data && (event.data.data = new Uint8Array(event.data.data, options.byteOffset || 0, options.byteLength || event.data.data.byteLength), options.data && (options.data = event.data.data)), callback(event.data));
                }), options.data) {
                    var isArrayBuffer = options.data instanceof ArrayBuffer;
                    message.byteOffset = isArrayBuffer ? 0 : options.data.byteOffset, message.byteLength = options.data.byteLength;
                    var transfers = [
                        isArrayBuffer ? options.data : options.data.buffer
                    ];
                    transmuxer.postMessage(message, transfers);
                } else transmuxer.postMessage(message);
            }, REQUEST_ERRORS = {
                FAILURE: 2,
                TIMEOUT: -101,
                ABORTED: -102
            }, abortAll = function(activeXhrs) {
                activeXhrs.forEach(function(xhr) {
                    xhr.abort();
                });
            }, getProgressStats = function(progressEvent) {
                var request = progressEvent.target, stats = {
                    bandwidth: 1 / 0,
                    bytesReceived: 0,
                    roundTripTime: Date.now() - request.requestTime || 0
                };
                return stats.bytesReceived = progressEvent.loaded, // because we should only use bandwidth stats on progress to determine when
                // abort a request early due to insufficient bandwidth
                stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8000), stats;
            }, handleErrors = function(error, request) {
                return request.timedout ? {
                    status: request.status,
                    message: "HLS request timed-out at URL: " + request.uri,
                    code: REQUEST_ERRORS.TIMEOUT,
                    xhr: request
                } : request.aborted ? {
                    status: request.status,
                    message: "HLS request aborted at URL: " + request.uri,
                    code: REQUEST_ERRORS.ABORTED,
                    xhr: request
                } : error ? {
                    status: request.status,
                    message: "HLS request errored at URL: " + request.uri,
                    code: REQUEST_ERRORS.FAILURE,
                    xhr: request
                } : "arraybuffer" === request.responseType && 0 === request.response.byteLength ? {
                    status: request.status,
                    message: "Empty HLS response at URL: " + request.uri,
                    code: REQUEST_ERRORS.FAILURE,
                    xhr: request
                } : null;
            }, handleKeyResponse = function(segment, objects, finishProcessingFn) {
                return function(error, request) {
                    var response = request.response, errorObj = handleErrors(error, request);
                    if (errorObj) return finishProcessingFn(errorObj, segment);
                    if (16 !== response.byteLength) return finishProcessingFn({
                        status: request.status,
                        message: "Invalid HLS key at URL: " + request.uri,
                        code: REQUEST_ERRORS.FAILURE,
                        xhr: request
                    }, segment);
                    for(var view = new DataView(response), bytes = new Uint32Array([
                        view.getUint32(0),
                        view.getUint32(4),
                        view.getUint32(8),
                        view.getUint32(12)
                    ]), i = 0; i < objects.length; i++)objects[i].bytes = bytes;
                    return finishProcessingFn(null, segment);
                };
            }, parseInitSegment = function(segment, _callback) {
                var type = (0, _videojs_vhs_utils_es_containers__WEBPACK_IMPORTED_MODULE_12__ /* .detectContainerForBytes */ .Xm)(segment.map.bytes); // TODO: We should also handle ts init segments here, but we
                // only know how to parse mp4 init segments at the moment
                if ("mp4" !== type) return _callback({
                    internal: !0,
                    message: "Found unsupported " + (type || "unknown") + " container for initialization segment at URL: " + (segment.map.resolvedUri || segment.map.uri),
                    code: REQUEST_ERRORS.FAILURE
                });
                workerCallback({
                    action: "probeMp4Tracks",
                    data: segment.map.bytes,
                    transmuxer: segment.transmuxer,
                    callback: function(_ref) {
                        var tracks = _ref.tracks, data = _ref.data; // transfer bytes back to us
                        return segment.map.bytes = data, tracks.forEach(function(track) {
                            segment.map.tracks = segment.map.tracks || {}, !segment.map.tracks[track.type] && (segment.map.tracks[track.type] = track, "number" == typeof track.id && track.timescale && (segment.map.timescales = segment.map.timescales || {}, segment.map.timescales[track.id] = track.timescale));
                        }), _callback(null);
                    }
                });
            }, handleInitSegmentResponse = function(_ref2) {
                var segment = _ref2.segment, finishProcessingFn = _ref2.finishProcessingFn;
                return function(error, request) {
                    var errorObj = handleErrors(error, request);
                    if (errorObj) return finishProcessingFn(errorObj, segment);
                    var bytes = new Uint8Array(request.response); // init segment is encypted, we will have to wait
                    // until the key request is done to decrypt.
                    if (segment.map.key) return segment.map.encryptedBytes = bytes, finishProcessingFn(null, segment);
                    segment.map.bytes = bytes, parseInitSegment(segment, function(parseError) {
                        if (parseError) return parseError.xhr = request, parseError.status = request.status, finishProcessingFn(parseError, segment);
                        finishProcessingFn(null, segment);
                    });
                };
            }, handleSegmentResponse = function(_ref3) {
                var segment = _ref3.segment, finishProcessingFn = _ref3.finishProcessingFn, responseType = _ref3.responseType;
                return function(error, request) {
                    var errorObj = handleErrors(error, request);
                    if (errorObj) return finishProcessingFn(errorObj, segment);
                    var newBytes = // thrown for two primary cases:
                    // 1. the mime type override stops working, or is not implemented for a specific
                    //    browser
                    // 2. when using mock XHR libraries like sinon that do not allow the override behavior
                    "arraybuffer" !== responseType && request.responseText ? stringToArrayBuffer(request.responseText.substring(segment.lastReachedChar || 0)) : request.response;
                    return segment.stats = {
                        bandwidth: request.bandwidth,
                        bytesReceived: request.bytesReceived || 0,
                        roundTripTime: request.roundTripTime || 0
                    }, segment.key ? segment.encryptedBytes = new Uint8Array(newBytes) : segment.bytes = new Uint8Array(newBytes), finishProcessingFn(null, segment);
                };
            }, transmuxAndNotify = function(_ref4) {
                var segment = _ref4.segment, bytes = _ref4.bytes, trackInfoFn = _ref4.trackInfoFn, timingInfoFn = _ref4.timingInfoFn, videoSegmentTimingInfoFn = _ref4.videoSegmentTimingInfoFn, audioSegmentTimingInfoFn = _ref4.audioSegmentTimingInfoFn, id3Fn = _ref4.id3Fn, captionsFn = _ref4.captionsFn, isEndOfTimeline = _ref4.isEndOfTimeline, endedTimelineFn = _ref4.endedTimelineFn, dataFn = _ref4.dataFn, doneFn = _ref4.doneFn, onTransmuxerLog = _ref4.onTransmuxerLog, fmp4Tracks = segment.map && segment.map.tracks || {}, isMuxed = !!(fmp4Tracks.audio && fmp4Tracks.video), audioStartFn = timingInfoFn.bind(null, segment, "audio", "start"), audioEndFn = timingInfoFn.bind(null, segment, "audio", "end"), videoStartFn = timingInfoFn.bind(null, segment, "video", "start"), videoEndFn = timingInfoFn.bind(null, segment, "video", "end");
                // Meaning cached frame data may corrupt our notion of where this segment
                // really starts. To get around this, probe for the info needed.
                workerCallback({
                    action: "probeTs",
                    transmuxer: segment.transmuxer,
                    data: bytes,
                    baseStartTime: segment.baseStartTime,
                    callback: function(data) {
                        segment.bytes = bytes = data.data;
                        var probeResult = data.result;
                        probeResult && (trackInfoFn(segment, {
                            hasAudio: probeResult.hasAudio,
                            hasVideo: probeResult.hasVideo,
                            isMuxed: isMuxed
                        }), trackInfoFn = null, probeResult.hasAudio && !isMuxed && audioStartFn(probeResult.audioStart), probeResult.hasVideo && videoStartFn(probeResult.videoStart), audioStartFn = null, videoStartFn = null), transmux({
                            bytes: bytes,
                            transmuxer: segment.transmuxer,
                            audioAppendStart: segment.audioAppendStart,
                            gopsToAlignWith: segment.gopsToAlignWith,
                            remux: isMuxed,
                            onData: function(result) {
                                result.type = "combined" === result.type ? "video" : result.type, dataFn(segment, result);
                            },
                            onTrackInfo: function(trackInfo) {
                                trackInfoFn && (isMuxed && (trackInfo.isMuxed = !0), trackInfoFn(segment, trackInfo));
                            },
                            onAudioTimingInfo: function(audioTimingInfo) {
                                audioStartFn && void 0 !== audioTimingInfo.start && (audioStartFn(audioTimingInfo.start), audioStartFn = null), audioEndFn && void 0 !== audioTimingInfo.end && audioEndFn(audioTimingInfo.end);
                            },
                            onVideoTimingInfo: function(videoTimingInfo) {
                                videoStartFn && void 0 !== videoTimingInfo.start && (videoStartFn(videoTimingInfo.start), videoStartFn = null), videoEndFn && void 0 !== videoTimingInfo.end && videoEndFn(videoTimingInfo.end);
                            },
                            onVideoSegmentTimingInfo: function(videoSegmentTimingInfo) {
                                videoSegmentTimingInfoFn(videoSegmentTimingInfo);
                            },
                            onAudioSegmentTimingInfo: function(audioSegmentTimingInfo) {
                                audioSegmentTimingInfoFn(audioSegmentTimingInfo);
                            },
                            onId3: function(id3Frames, dispatchType) {
                                id3Fn(segment, id3Frames, dispatchType);
                            },
                            onCaptions: function(captions) {
                                captionsFn(segment, [
                                    captions
                                ]);
                            },
                            isEndOfTimeline: isEndOfTimeline,
                            onEndedTimeline: function() {
                                endedTimelineFn();
                            },
                            onTransmuxerLog: onTransmuxerLog,
                            onDone: function(result) {
                                doneFn && (result.type = "combined" === result.type ? "video" : result.type, doneFn(null, segment, result));
                            }
                        });
                    }
                });
            }, handleSegmentBytes = function(_ref5) {
                var segment = _ref5.segment, bytes = _ref5.bytes, trackInfoFn = _ref5.trackInfoFn, timingInfoFn = _ref5.timingInfoFn, videoSegmentTimingInfoFn = _ref5.videoSegmentTimingInfoFn, audioSegmentTimingInfoFn = _ref5.audioSegmentTimingInfoFn, id3Fn = _ref5.id3Fn, captionsFn = _ref5.captionsFn, isEndOfTimeline = _ref5.isEndOfTimeline, endedTimelineFn = _ref5.endedTimelineFn, dataFn = _ref5.dataFn, doneFn = _ref5.doneFn, onTransmuxerLog = _ref5.onTransmuxerLog, bytesAsUint8Array = new Uint8Array(bytes);
                // We should have a handler that fetches the number of bytes required
                // to check if something is fmp4. This will allow us to save bandwidth
                // because we can only blacklist a playlist and abort requests
                // by codec after trackinfo triggers.
                if ((0, _videojs_vhs_utils_es_containers__WEBPACK_IMPORTED_MODULE_12__ /* .isLikelyFmp4MediaSegment */ .cz)(bytesAsUint8Array)) {
                    segment.isFmp4 = !0;
                    var tracks = segment.map.tracks, trackInfo = {
                        isFmp4: !0,
                        hasVideo: !!tracks.video,
                        hasAudio: !!tracks.audio
                    };
                    tracks.audio && tracks.audio.codec && "enca" !== tracks.audio.codec && (trackInfo.audioCodec = tracks.audio.codec), tracks.video && tracks.video.codec && "encv" !== tracks.video.codec && (trackInfo.videoCodec = tracks.video.codec), tracks.video && tracks.audio && (trackInfo.isMuxed = !0), // segment here
                    trackInfoFn(segment, trackInfo);
                    // time. The end time can be roughly calculated by the receiver using the duration.
                    //
                    // Note that the start time returned by the probe reflects the baseMediaDecodeTime, as
                    // that is the true start of the segment (where the playback engine should begin
                    // decoding).
                    var finishLoading = function(captions) {
                        // if the track still has audio at this point it is only possible
                        // for it to be audio only. See `tracks.video && tracks.audio` if statement
                        // above.
                        // we make sure to use segment.bytes here as that
                        dataFn(segment, {
                            data: bytesAsUint8Array,
                            type: trackInfo.hasAudio && !trackInfo.isMuxed ? "audio" : "video"
                        }), captions && captions.length && captionsFn(segment, captions), doneFn(null, segment, {});
                    };
                    workerCallback({
                        action: "probeMp4StartTime",
                        timescales: segment.map.timescales,
                        data: bytesAsUint8Array,
                        transmuxer: segment.transmuxer,
                        callback: function(_ref6) {
                            var data = _ref6.data, startTime = _ref6.startTime; // transfer bytes back to us
                            // Initialize CaptionParser if it hasn't been yet
                            if (bytes = data.buffer, segment.bytes = bytesAsUint8Array = data, trackInfo.hasAudio && !trackInfo.isMuxed && timingInfoFn(segment, "audio", "start", startTime), trackInfo.hasVideo && timingInfoFn(segment, "video", "start", startTime), !tracks.video || !data.byteLength || !segment.transmuxer) {
                                finishLoading();
                                return;
                            }
                            workerCallback({
                                action: "pushMp4Captions",
                                endAction: "mp4Captions",
                                transmuxer: segment.transmuxer,
                                data: bytesAsUint8Array,
                                timescales: segment.map.timescales,
                                trackIds: [
                                    tracks.video.id
                                ],
                                callback: function(message) {
                                    // transfer bytes back to us
                                    bytes = message.data.buffer, segment.bytes = bytesAsUint8Array = message.data, message.logs.forEach(function(log) {
                                        onTransmuxerLog(videojs.mergeOptions(log, {
                                            stream: "mp4CaptionParser"
                                        }));
                                    }), finishLoading(message.captions);
                                }
                            });
                        }
                    });
                    return;
                } // VTT or other segments that don't need processing
                if (!segment.transmuxer) {
                    doneFn(null, segment, {});
                    return;
                }
                if (void 0 === segment.container && (segment.container = (0, _videojs_vhs_utils_es_containers__WEBPACK_IMPORTED_MODULE_12__ /* .detectContainerForBytes */ .Xm)(bytesAsUint8Array)), "ts" !== segment.container && "aac" !== segment.container) {
                    trackInfoFn(segment, {
                        hasAudio: !1,
                        hasVideo: !1
                    }), doneFn(null, segment, {});
                    return;
                } // ts or aac
                transmuxAndNotify({
                    segment: segment,
                    bytes: bytes,
                    trackInfoFn: trackInfoFn,
                    timingInfoFn: timingInfoFn,
                    videoSegmentTimingInfoFn: videoSegmentTimingInfoFn,
                    audioSegmentTimingInfoFn: audioSegmentTimingInfoFn,
                    id3Fn: id3Fn,
                    captionsFn: captionsFn,
                    isEndOfTimeline: isEndOfTimeline,
                    endedTimelineFn: endedTimelineFn,
                    dataFn: dataFn,
                    doneFn: doneFn,
                    onTransmuxerLog: onTransmuxerLog
                });
            }, decrypt = function(_ref7, callback) {
                var keyBytes, id = _ref7.id, key = _ref7.key, encryptedBytes = _ref7.encryptedBytes, decryptionWorker = _ref7.decryptionWorker;
                decryptionWorker.addEventListener("message", function decryptionHandler(event) {
                    if (event.data.source === id) {
                        decryptionWorker.removeEventListener("message", decryptionHandler);
                        var decrypted = event.data.decrypted;
                        callback(new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength));
                    }
                }), keyBytes = key.bytes.slice ? key.bytes.slice() : new Uint32Array(Array.prototype.slice.call(key.bytes)), decryptionWorker.postMessage(createTransferableMessage({
                    source: id,
                    encrypted: encryptedBytes,
                    key: keyBytes,
                    iv: key.iv
                }), [
                    encryptedBytes.buffer,
                    keyBytes.buffer
                ]);
            }, decryptSegment = function(_ref8) {
                var decryptionWorker = _ref8.decryptionWorker, segment = _ref8.segment, trackInfoFn = _ref8.trackInfoFn, timingInfoFn = _ref8.timingInfoFn, videoSegmentTimingInfoFn = _ref8.videoSegmentTimingInfoFn, audioSegmentTimingInfoFn = _ref8.audioSegmentTimingInfoFn, id3Fn = _ref8.id3Fn, captionsFn = _ref8.captionsFn, isEndOfTimeline = _ref8.isEndOfTimeline, endedTimelineFn = _ref8.endedTimelineFn, dataFn = _ref8.dataFn, doneFn = _ref8.doneFn, onTransmuxerLog = _ref8.onTransmuxerLog;
                decrypt({
                    id: segment.requestId,
                    key: segment.key,
                    encryptedBytes: segment.encryptedBytes,
                    decryptionWorker: decryptionWorker
                }, function(decryptedBytes) {
                    segment.bytes = decryptedBytes, handleSegmentBytes({
                        segment: segment,
                        bytes: segment.bytes,
                        trackInfoFn: trackInfoFn,
                        timingInfoFn: timingInfoFn,
                        videoSegmentTimingInfoFn: videoSegmentTimingInfoFn,
                        audioSegmentTimingInfoFn: audioSegmentTimingInfoFn,
                        id3Fn: id3Fn,
                        captionsFn: captionsFn,
                        isEndOfTimeline: isEndOfTimeline,
                        endedTimelineFn: endedTimelineFn,
                        dataFn: dataFn,
                        doneFn: doneFn,
                        onTransmuxerLog: onTransmuxerLog
                    });
                });
            }, waitForCompletion = function(_ref9) {
                var activeXhrs = _ref9.activeXhrs, decryptionWorker = _ref9.decryptionWorker, trackInfoFn = _ref9.trackInfoFn, timingInfoFn = _ref9.timingInfoFn, videoSegmentTimingInfoFn = _ref9.videoSegmentTimingInfoFn, audioSegmentTimingInfoFn = _ref9.audioSegmentTimingInfoFn, id3Fn = _ref9.id3Fn, captionsFn = _ref9.captionsFn, isEndOfTimeline = _ref9.isEndOfTimeline, endedTimelineFn = _ref9.endedTimelineFn, dataFn = _ref9.dataFn, doneFn = _ref9.doneFn, onTransmuxerLog = _ref9.onTransmuxerLog, count = 0, didError = !1;
                return function(error, segment) {
                    if (!didError) {
                        if (error) // handle the aborted events from those requests, there are some cases where we may
                        // never get an aborted event. For instance, if the network connection is lost and
                        // there were two requests, the first may have triggered an error immediately, while
                        // the second request remains unsent. In that case, the aborted algorithm will not
                        // trigger an abort: see https://xhr.spec.whatwg.org/#the-abort()-method
                        //
                        // We also can't rely on the ready state of the XHR, since the request that
                        // triggered the connection error may also show as a ready state of 0 (unsent).
                        // Therefore, we have to finish this group of requests immediately after the first
                        // seen error.
                        return didError = !0, abortAll(activeXhrs), doneFn(error, segment);
                        if ((count += 1) === activeXhrs.length) {
                            var segmentFinish = function() {
                                if (segment.encryptedBytes) return decryptSegment({
                                    decryptionWorker: decryptionWorker,
                                    segment: segment,
                                    trackInfoFn: trackInfoFn,
                                    timingInfoFn: timingInfoFn,
                                    videoSegmentTimingInfoFn: videoSegmentTimingInfoFn,
                                    audioSegmentTimingInfoFn: audioSegmentTimingInfoFn,
                                    id3Fn: id3Fn,
                                    captionsFn: captionsFn,
                                    isEndOfTimeline: isEndOfTimeline,
                                    endedTimelineFn: endedTimelineFn,
                                    dataFn: dataFn,
                                    doneFn: doneFn,
                                    onTransmuxerLog: onTransmuxerLog
                                });
                                 // Otherwise, everything is ready just continue
                                handleSegmentBytes({
                                    segment: segment,
                                    bytes: segment.bytes,
                                    trackInfoFn: trackInfoFn,
                                    timingInfoFn: timingInfoFn,
                                    videoSegmentTimingInfoFn: videoSegmentTimingInfoFn,
                                    audioSegmentTimingInfoFn: audioSegmentTimingInfoFn,
                                    id3Fn: id3Fn,
                                    captionsFn: captionsFn,
                                    isEndOfTimeline: isEndOfTimeline,
                                    endedTimelineFn: endedTimelineFn,
                                    dataFn: dataFn,
                                    doneFn: doneFn,
                                    onTransmuxerLog: onTransmuxerLog
                                });
                            }; // Keep track of when *all* of the requests have completed
                            if (segment.endOfAllRequests = Date.now(), segment.map && segment.map.encryptedBytes && !segment.map.bytes) return decrypt({
                                decryptionWorker: decryptionWorker,
                                // add -init to the "id" to differentiate between segment
                                // and init segment decryption, just in case they happen
                                // at the same time at some point in the future.
                                id: segment.requestId + "-init",
                                encryptedBytes: segment.map.encryptedBytes,
                                key: segment.map.key
                            }, function(decryptedBytes) {
                                segment.map.bytes = decryptedBytes, parseInitSegment(segment, function(parseError) {
                                    if (parseError) return abortAll(activeXhrs), doneFn(parseError, segment);
                                    segmentFinish();
                                });
                            });
                            segmentFinish();
                        }
                    }
                };
            }, handleLoadEnd = function(_ref10) {
                var loadendState = _ref10.loadendState, abortFn = _ref10.abortFn;
                return function(event) {
                    event.target.aborted && abortFn && !loadendState.calledAbortFn && (abortFn(), loadendState.calledAbortFn = !0);
                };
            }, handleProgress = function(_ref11) {
                var segment = _ref11.segment, progressFn = _ref11.progressFn;
                return _ref11.trackInfoFn, _ref11.timingInfoFn, _ref11.videoSegmentTimingInfoFn, _ref11.audioSegmentTimingInfoFn, _ref11.id3Fn, _ref11.captionsFn, _ref11.isEndOfTimeline, _ref11.endedTimelineFn, _ref11.dataFn, function(event) {
                    if (!event.target.aborted) return segment.stats = videojs.mergeOptions(segment.stats, getProgressStats(event)), !segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived && (segment.stats.firstBytesReceivedAt = Date.now()), progressFn(event, segment);
                };
            }, mediaSegmentRequest = function(_ref12) {
                var xhr = _ref12.xhr, xhrOptions = _ref12.xhrOptions, decryptionWorker = _ref12.decryptionWorker, segment = _ref12.segment, abortFn = _ref12.abortFn, progressFn = _ref12.progressFn, trackInfoFn = _ref12.trackInfoFn, timingInfoFn = _ref12.timingInfoFn, videoSegmentTimingInfoFn = _ref12.videoSegmentTimingInfoFn, audioSegmentTimingInfoFn = _ref12.audioSegmentTimingInfoFn, id3Fn = _ref12.id3Fn, captionsFn = _ref12.captionsFn, isEndOfTimeline = _ref12.isEndOfTimeline, endedTimelineFn = _ref12.endedTimelineFn, dataFn = _ref12.dataFn, doneFn = _ref12.doneFn, onTransmuxerLog = _ref12.onTransmuxerLog, activeXhrs = [], finishProcessingFn = waitForCompletion({
                    activeXhrs: activeXhrs,
                    decryptionWorker: decryptionWorker,
                    trackInfoFn: trackInfoFn,
                    timingInfoFn: timingInfoFn,
                    videoSegmentTimingInfoFn: videoSegmentTimingInfoFn,
                    audioSegmentTimingInfoFn: audioSegmentTimingInfoFn,
                    id3Fn: id3Fn,
                    captionsFn: captionsFn,
                    isEndOfTimeline: isEndOfTimeline,
                    endedTimelineFn: endedTimelineFn,
                    dataFn: dataFn,
                    doneFn: doneFn,
                    onTransmuxerLog: onTransmuxerLog
                });
                if (segment.key && !segment.key.bytes) {
                    var objects = [
                        segment.key
                    ];
                    segment.map && !segment.map.bytes && segment.map.key && segment.map.key.resolvedUri === segment.key.resolvedUri && objects.push(segment.map.key);
                    var keyXhr = xhr(videojs.mergeOptions(xhrOptions, {
                        uri: segment.key.resolvedUri,
                        responseType: "arraybuffer"
                    }), handleKeyResponse(segment, objects, finishProcessingFn));
                    activeXhrs.push(keyXhr);
                } // optionally, request the associated media init segment
                if (segment.map && !segment.map.bytes) {
                    if (segment.map.key && (!segment.key || segment.key.resolvedUri !== segment.map.key.resolvedUri)) {
                        var mapKeyXhr = xhr(videojs.mergeOptions(xhrOptions, {
                            uri: segment.map.key.resolvedUri,
                            responseType: "arraybuffer"
                        }), handleKeyResponse(segment, [
                            segment.map.key
                        ], finishProcessingFn));
                        activeXhrs.push(mapKeyXhr);
                    }
                    var initSegmentXhr = xhr(videojs.mergeOptions(xhrOptions, {
                        uri: segment.map.resolvedUri,
                        responseType: "arraybuffer",
                        headers: segmentXhrHeaders(segment.map)
                    }), handleInitSegmentResponse({
                        segment: segment,
                        finishProcessingFn: finishProcessingFn
                    }));
                    activeXhrs.push(initSegmentXhr);
                }
                var segmentRequestOptions = videojs.mergeOptions(xhrOptions, {
                    uri: segment.part && segment.part.resolvedUri || segment.resolvedUri,
                    responseType: "arraybuffer",
                    headers: segmentXhrHeaders(segment)
                }), segmentRequestCallback = handleSegmentResponse({
                    segment: segment,
                    finishProcessingFn: finishProcessingFn,
                    responseType: segmentRequestOptions.responseType
                }), segmentXhr = xhr(segmentRequestOptions, segmentRequestCallback);
                segmentXhr.addEventListener("progress", handleProgress({
                    segment: segment,
                    progressFn: progressFn,
                    trackInfoFn: trackInfoFn,
                    timingInfoFn: timingInfoFn,
                    videoSegmentTimingInfoFn: videoSegmentTimingInfoFn,
                    audioSegmentTimingInfoFn: audioSegmentTimingInfoFn,
                    id3Fn: id3Fn,
                    captionsFn: captionsFn,
                    isEndOfTimeline: isEndOfTimeline,
                    endedTimelineFn: endedTimelineFn,
                    dataFn: dataFn
                })), activeXhrs.push(segmentXhr);
                // multiple times, provide a shared state object
                var loadendState = {};
                return activeXhrs.forEach(function(activeXhr) {
                    activeXhr.addEventListener("loadend", handleLoadEnd({
                        loadendState: loadendState,
                        abortFn: abortFn
                    }));
                }), function() {
                    return abortAll(activeXhrs);
                };
            }, logFn$1 = logger("CodecUtils"), getCodecs = function(media) {
                // if the codecs were explicitly specified, use them instead of the
                // defaults
                var mediaAttributes = media.attributes || {};
                if (mediaAttributes.CODECS) return (0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .parseCodecs */ .kS)(mediaAttributes.CODECS);
            }, isMaat = function(master, media) {
                var mediaAttributes = media.attributes || {};
                return master && master.mediaGroups && master.mediaGroups.AUDIO && mediaAttributes.AUDIO && master.mediaGroups.AUDIO[mediaAttributes.AUDIO];
            }, isMuxed = function(master, media) {
                if (!isMaat(master, media)) return !0;
                var mediaAttributes = media.attributes || {}, audioGroup = master.mediaGroups.AUDIO[mediaAttributes.AUDIO];
                for(var groupId in audioGroup)// If an audio group has a URI (the case for HLS, as HLS will use external playlists),
                // or there are listed playlists (the case for DASH, as the manifest will have already
                // provided all of the details necessary to generate the audio playlist, as opposed to
                // HLS' externally requested playlists), then the content is demuxed.
                if (!audioGroup[groupId].uri && !audioGroup[groupId].playlists) return !0;
                return !1;
            }, unwrapCodecList = function(codecList) {
                var codecs = {};
                return codecList.forEach(function(_ref) {
                    var mediaType = _ref.mediaType, type = _ref.type, details = _ref.details;
                    codecs[mediaType] = codecs[mediaType] || [], codecs[mediaType].push((0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .translateLegacyCodec */ .ws)("" + type + details));
                }), Object.keys(codecs).forEach(function(mediaType) {
                    if (codecs[mediaType].length > 1) {
                        logFn$1("multiple " + mediaType + " codecs found as attributes: " + codecs[mediaType].join(", ") + ". Setting playlist codecs to null so that we wait for mux.js to probe segments for real codecs."), codecs[mediaType] = null;
                        return;
                    }
                    codecs[mediaType] = codecs[mediaType][0];
                }), codecs;
            }, codecCount = function(codecObj) {
                var count = 0;
                return codecObj.audio && count++, codecObj.video && count++, count;
            }, codecsForPlaylist = function(master, media) {
                var mediaAttributes = media.attributes || {}, codecInfo = unwrapCodecList(getCodecs(media) || []);
                // Put another way, there is no way to have a video-only multiple-audio HLS!
                if (isMaat(master, media) && !codecInfo.audio && !isMuxed(master, media)) {
                    // It is possible for codecs to be specified on the audio media group playlist but
                    // not on the rendition playlist. This is mostly the case for DASH, where audio and
                    // video are always separate (and separately specified).
                    var defaultCodecs = unwrapCodecList((0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .codecsFromDefault */ .Jg)(master, mediaAttributes.AUDIO) || []);
                    defaultCodecs.audio && (codecInfo.audio = defaultCodecs.audio);
                }
                return codecInfo;
            }, logFn = logger("PlaylistSelector"), representationToString = function(representation) {
                if (representation && representation.playlist) {
                    var playlist = representation.playlist;
                    return JSON.stringify({
                        id: playlist.id,
                        bandwidth: representation.bandwidth,
                        width: representation.width,
                        height: representation.height,
                        codecs: playlist.attributes && playlist.attributes.CODECS || ""
                    });
                }
            }, safeGetComputedStyle = function(el, property) {
                if (!el) return "";
                var result = global_window__WEBPACK_IMPORTED_MODULE_0___default().getComputedStyle(el);
                return result ? result[property] : "";
            }, stableSort = function(array, sortFn) {
                var newArray = array.slice();
                array.sort(function(left, right) {
                    var cmp = sortFn(left, right);
                    return 0 === cmp ? newArray.indexOf(left) - newArray.indexOf(right) : cmp;
                });
            }, comparePlaylistBandwidth = function(left, right) {
                var leftBandwidth, rightBandwidth;
                return left.attributes.BANDWIDTH && (leftBandwidth = left.attributes.BANDWIDTH), leftBandwidth = leftBandwidth || global_window__WEBPACK_IMPORTED_MODULE_0___default().Number.MAX_VALUE, right.attributes.BANDWIDTH && (rightBandwidth = right.attributes.BANDWIDTH), leftBandwidth - (rightBandwidth = rightBandwidth || global_window__WEBPACK_IMPORTED_MODULE_0___default().Number.MAX_VALUE);
            }, simpleSelector = function(master, playerBandwidth, playerWidth, playerHeight, limitRenditionByPlayerDimensions, masterPlaylistController) {
                // If we end up getting called before `master` is available, exit early
                if (master) {
                    var resolutionPlusOneList, resolutionPlusOneSmallest, resolutionPlusOneRep, leastPixelDiffRep, options = {
                        bandwidth: playerBandwidth,
                        width: playerWidth,
                        height: playerHeight,
                        limitRenditionByPlayerDimensions: limitRenditionByPlayerDimensions
                    }, playlists = master.playlists;
                    Playlist.isAudioOnly(master) && (playlists = masterPlaylistController.getAudioTrackPlaylists_(), // at the buttom of this function for debugging.
                    options.audioOnly = !0);
                    var sortedPlaylistReps = playlists.map(function(playlist) {
                        var width = playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width, height = playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;
                        return {
                            bandwidth: playlist.attributes && playlist.attributes.BANDWIDTH || global_window__WEBPACK_IMPORTED_MODULE_0___default().Number.MAX_VALUE,
                            width: width,
                            height: height,
                            playlist: playlist
                        };
                    });
                    stableSort(sortedPlaylistReps, function(left, right) {
                        return left.bandwidth - right.bandwidth;
                    });
                    // api or blacklisted temporarily due to playback errors.
                    var enabledPlaylistReps = // incompatible configurations
                    (sortedPlaylistReps = sortedPlaylistReps.filter(function(rep) {
                        return !Playlist.isIncompatible(rep.playlist);
                    })).filter(function(rep) {
                        return Playlist.isEnabled(rep.playlist);
                    });
                    enabledPlaylistReps.length || // if there are no enabled playlists, then they have all been blacklisted or disabled
                    // by the user through the representations api. In this case, ignore blacklisting and
                    // fallback to what the user wants by using playlists the user has not disabled.
                    (enabledPlaylistReps = sortedPlaylistReps.filter(function(rep) {
                        return !Playlist.isDisabled(rep.playlist);
                    }));
                    // than the current estimated bandwidth
                    var bandwidthPlaylistReps = enabledPlaylistReps.filter(function(rep) {
                        return rep.bandwidth * Config.BANDWIDTH_VARIANCE < playerBandwidth;
                    }), highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1], bandwidthBestRep = bandwidthPlaylistReps.filter(function(rep) {
                        return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;
                    })[0];
                    if (!1 === limitRenditionByPlayerDimensions) {
                        var _chosenRep = bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];
                        if (_chosenRep && _chosenRep.playlist) {
                            var type = "sortedPlaylistReps";
                            return bandwidthBestRep && (type = "bandwidthBestRep"), enabledPlaylistReps[0] && (type = "enabledPlaylistReps"), logFn("choosing " + representationToString(_chosenRep) + " using " + type + " with options", options), _chosenRep.playlist;
                        }
                        return logFn("could not choose a playlist with options", options), null;
                    } // filter out playlists without resolution information
                    var haveResolution = bandwidthPlaylistReps.filter(function(rep) {
                        return rep.width && rep.height;
                    }); // sort variants by resolution
                    stableSort(haveResolution, function(left, right) {
                        return left.width - right.width;
                    });
                    var resolutionBestRepList = haveResolution.filter(function(rep) {
                        return rep.width === playerWidth && rep.height === playerHeight;
                    });
                    highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1];
                    var resolutionBestRep = resolutionBestRepList.filter(function(rep) {
                        return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;
                    })[0];
                    // resolutionPlusOneRep and resolutionBestRep and all
                    // the code involving them should be removed.
                    if (resolutionBestRep || (// is just-larger-than the video player
                    highestRemainingBandwidthRep = (resolutionPlusOneSmallest = (resolutionPlusOneList = haveResolution.filter(function(rep) {
                        return rep.width > playerWidth || rep.height > playerHeight;
                    })).filter(function(rep) {
                        return rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height;
                    }))[resolutionPlusOneSmallest.length - 1], resolutionPlusOneRep = resolutionPlusOneSmallest.filter(function(rep) {
                        return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;
                    })[0]), masterPlaylistController.experimentalLeastPixelDiffSelector) {
                        // find the variant that is closest to the player's pixel size
                        var leastPixelDiffList = haveResolution.map(function(rep) {
                            return rep.pixelDiff = Math.abs(rep.width - playerWidth) + Math.abs(rep.height - playerHeight), rep;
                        }); // get the highest bandwidth, closest resolution playlist
                        stableSort(leastPixelDiffList, function(left, right) {
                            return(// sort by highest bandwidth if pixelDiff is the same
                            left.pixelDiff === right.pixelDiff ? right.bandwidth - left.bandwidth : left.pixelDiff - right.pixelDiff);
                        }), leastPixelDiffRep = leastPixelDiffList[0];
                    } // fallback chain of variants
                    var chosenRep = leastPixelDiffRep || resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];
                    if (chosenRep && chosenRep.playlist) {
                        var _type = "sortedPlaylistReps";
                        return leastPixelDiffRep ? _type = "leastPixelDiffRep" : resolutionPlusOneRep ? _type = "resolutionPlusOneRep" : resolutionBestRep ? _type = "resolutionBestRep" : bandwidthBestRep ? _type = "bandwidthBestRep" : enabledPlaylistReps[0] && (_type = "enabledPlaylistReps"), logFn("choosing " + representationToString(chosenRep) + " using " + _type + " with options", options), chosenRep.playlist;
                    }
                    return logFn("could not choose a playlist with options", options), null;
                }
            }, lastBandwidthSelector = function() {
                var pixelRatio = this.useDevicePixelRatio && global_window__WEBPACK_IMPORTED_MODULE_0___default().devicePixelRatio || 1;
                return simpleSelector(this.playlists.master, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), "width"), 10) * pixelRatio, parseInt(safeGetComputedStyle(this.tech_.el(), "height"), 10) * pixelRatio, this.limitRenditionByPlayerDimensions, this.masterPlaylistController_);
            }, minRebufferMaxBandwidthSelector = function(settings) {
                var master = settings.master, currentTime = settings.currentTime, bandwidth = settings.bandwidth, duration = settings.duration, segmentDuration = settings.segmentDuration, timeUntilRebuffer = settings.timeUntilRebuffer, currentTimeline = settings.currentTimeline, syncController = settings.syncController, compatiblePlaylists = master.playlists.filter(function(playlist) {
                    return !Playlist.isIncompatible(playlist);
                }), enabledPlaylists = compatiblePlaylists.filter(Playlist.isEnabled); // filter out any playlists that have been excluded due to
                enabledPlaylists.length || // if there are no enabled playlists, then they have all been blacklisted or disabled
                // by the user through the representations api. In this case, ignore blacklisting and
                // fallback to what the user wants by using playlists the user has not disabled.
                (enabledPlaylists = compatiblePlaylists.filter(function(playlist) {
                    return !Playlist.isDisabled(playlist);
                }));
                var rebufferingEstimates = enabledPlaylists.filter(Playlist.hasAttribute.bind(null, "BANDWIDTH")).map(function(playlist) {
                    var syncPoint = syncController.getSyncPoint(playlist, duration, currentTimeline, currentTime), requestTimeEstimate = Playlist.estimateSegmentRequestTime(segmentDuration, bandwidth, playlist); // If there is no sync point for this playlist, switching to it will require a
                    return {
                        playlist: playlist,
                        rebufferingImpact: requestTimeEstimate * (syncPoint ? 1 : 2) - timeUntilRebuffer
                    };
                }), noRebufferingPlaylists = rebufferingEstimates.filter(function(estimate) {
                    return estimate.rebufferingImpact <= 0;
                });
                return (stableSort(noRebufferingPlaylists, function(a, b) {
                    return comparePlaylistBandwidth(b.playlist, a.playlist);
                }), noRebufferingPlaylists.length) ? noRebufferingPlaylists[0] : (stableSort(rebufferingEstimates, function(a, b) {
                    return a.rebufferingImpact - b.rebufferingImpact;
                }), rebufferingEstimates[0] || null);
            }, concatSegments = function(segmentObj) {
                var tempBuffer, offset = 0;
                return segmentObj.bytes && (tempBuffer = new Uint8Array(segmentObj.bytes), segmentObj.segments.forEach(function(segment) {
                    tempBuffer.set(segment, offset), offset += segment.byteLength;
                })), tempBuffer;
            }, createCaptionsTrackIfNotExists = function(inbandTextTracks, tech, captionStream) {
                if (!inbandTextTracks[captionStream]) {
                    tech.trigger({
                        type: "usage",
                        name: "vhs-608"
                    }), tech.trigger({
                        type: "usage",
                        name: "hls-608"
                    });
                    var instreamId = captionStream; // we need to translate SERVICEn for 708 to how mux.js currently labels them
                    /^cc708_/.test(captionStream) && (instreamId = "SERVICE" + captionStream.split("_")[1]);
                    var track = tech.textTracks().getTrackById(instreamId);
                    if (track) // Resuse an existing track with a CC# id because this was
                    // very likely created by videojs-contrib-hls from information
                    // in the m3u8 for us to use
                    inbandTextTracks[captionStream] = track;
                    else {
                        // This section gets called when we have caption services that aren't specified in the manifest.
                        // Manifest level caption services are handled in media-groups.js under CLOSED-CAPTIONS.
                        var captionServices = tech.options_.vhs && tech.options_.vhs.captionServices || {}, label = captionStream, language = captionStream, def = !1, captionService = captionServices[instreamId];
                        captionService && (label = captionService.label, language = captionService.language, def = captionService.default), // without a language
                        inbandTextTracks[captionStream] = tech.addRemoteTextTrack({
                            kind: "captions",
                            id: instreamId,
                            // TODO: investigate why this doesn't seem to turn the caption on by default
                            default: def,
                            label: label,
                            language: language
                        }, !1).track;
                    }
                }
            }, addCaptionData = function(_ref) {
                var inbandTextTracks = _ref.inbandTextTracks, captionArray = _ref.captionArray, timestampOffset = _ref.timestampOffset;
                if (captionArray) {
                    var Cue = global_window__WEBPACK_IMPORTED_MODULE_0___default().WebKitDataCue || global_window__WEBPACK_IMPORTED_MODULE_0___default().VTTCue;
                    captionArray.forEach(function(caption) {
                        inbandTextTracks[caption.stream].addCue(new Cue(caption.startTime + timestampOffset, caption.endTime + timestampOffset, caption.text));
                    });
                }
            }, deprecateOldCue = function(cue) {
                Object.defineProperties(cue.frame, {
                    id: {
                        get: function() {
                            return videojs.log.warn("cue.frame.id is deprecated. Use cue.value.key instead."), cue.value.key;
                        }
                    },
                    value: {
                        get: function() {
                            return videojs.log.warn("cue.frame.value is deprecated. Use cue.value.data instead."), cue.value.data;
                        }
                    },
                    privateData: {
                        get: function() {
                            return videojs.log.warn("cue.frame.privateData is deprecated. Use cue.value.data instead."), cue.value.data;
                        }
                    }
                });
            }, addMetadata = function(_ref2) {
                var inbandTextTracks = _ref2.inbandTextTracks, metadataArray = _ref2.metadataArray, timestampOffset = _ref2.timestampOffset, videoDuration = _ref2.videoDuration;
                if (metadataArray) {
                    var Cue = global_window__WEBPACK_IMPORTED_MODULE_0___default().WebKitDataCue || global_window__WEBPACK_IMPORTED_MODULE_0___default().VTTCue, metadataTrack = inbandTextTracks.metadataTrack_;
                    if (metadataTrack && (metadataArray.forEach(function(metadata) {
                        var time = metadata.cueTime + timestampOffset; // if time isn't a finite number between 0 and Infinity, like NaN,
                        // ignore this bit of metadata.
                        // This likely occurs when you have an non-timed ID3 tag like TIT2,
                        // which is the "Title/Songname/Content description" frame
                        "number" != typeof time || global_window__WEBPACK_IMPORTED_MODULE_0___default().isNaN(time) || time < 0 || !(time < 1 / 0) || metadata.frames.forEach(function(frame) {
                            var cue = new Cue(time, time, frame.value || frame.url || frame.data || "");
                            cue.frame = frame, cue.value = frame, deprecateOldCue(cue), metadataTrack.addCue(cue);
                        });
                    }), metadataTrack.cues && metadataTrack.cues.length)) {
                        // ...disregarding cues with a falsey value
                        for(var cues = metadataTrack.cues, cuesArray = [], i = 0; i < cues.length; i++)cues[i] && cuesArray.push(cues[i]);
                         // Group cues by their startTime value
                        // the endTime of each cue is the startTime of the next cue
                        // the endTime of last cue is the duration of the video
                        var cuesGroupedByStartTime = cuesArray.reduce(function(obj, cue) {
                            var timeSlot = obj[cue.startTime] || [];
                            return timeSlot.push(cue), obj[cue.startTime] = timeSlot, obj;
                        }, {}), sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort(function(a, b) {
                            return Number(a) - Number(b);
                        });
                        sortedStartTimes.forEach(function(startTime, idx) {
                            var cueGroup = cuesGroupedByStartTime[startTime], nextTime = Number(sortedStartTimes[idx + 1]) || videoDuration;
                            cueGroup.forEach(function(cue) {
                                cue.endTime = nextTime;
                            });
                        });
                    }
                }
            }, createMetadataTrackIfNotExists = function(inbandTextTracks, dispatchType, tech) {
                inbandTextTracks.metadataTrack_ || (inbandTextTracks.metadataTrack_ = tech.addRemoteTextTrack({
                    kind: "metadata",
                    label: "Timed Metadata"
                }, !1).track, inbandTextTracks.metadataTrack_.inBandMetadataTrackDispatchType = dispatchType);
            }, removeCuesFromTrack = function(start, end, track) {
                var i, cue;
                if (track && track.cues) for(i = track.cues.length; i--;)(cue = track.cues[i]).startTime >= start && cue.endTime <= end && track.removeCue(cue);
            }, removeDuplicateCuesFromTrack = function(track) {
                var cues = track.cues;
                if (cues) for(var i = 0; i < cues.length; i++){
                    for(var duplicates = [], occurrences = 0, j = 0; j < cues.length; j++)cues[i].startTime === cues[j].startTime && cues[i].endTime === cues[j].endTime && cues[i].text === cues[j].text && ++occurrences > 1 && duplicates.push(cues[j]);
                    duplicates.length && duplicates.forEach(function(dupe) {
                        return track.removeCue(dupe);
                    });
                }
            }, gopsSafeToAlignWith = function(buffer, currentTime, mapping) {
                if (null == currentTime || !buffer.length) return [];
                 // pts value for current time + 3 seconds to give a bit more wiggle room
                var i, currentTimePts = Math.ceil((currentTime - mapping + 3) * mux_js_lib_utils_clock__WEBPACK_IMPORTED_MODULE_14__.ONE_SECOND_IN_TS);
                for(i = 0; i < buffer.length && !(buffer[i].pts > currentTimePts); i++);
                return buffer.slice(i);
            }, updateGopBuffer = function(buffer, gops, replace) {
                if (!gops.length) return buffer;
                if (replace) // If we are in safe append mode, then completely overwrite the gop buffer
                // with the most recent appeneded data. This will make sure that when appending
                // future segments, we only try to align with gops that are both ahead of current
                // time and in the last segment appended.
                return gops.slice();
                for(var start = gops[0].pts, i = 0; i < buffer.length && !(buffer[i].pts >= start); i++);
                return buffer.slice(0, i).concat(gops);
            }, removeGopBuffer = function(buffer, start, end, mapping) {
                for(var startPts = Math.ceil((start - mapping) * mux_js_lib_utils_clock__WEBPACK_IMPORTED_MODULE_14__.ONE_SECOND_IN_TS), endPts = Math.ceil((end - mapping) * mux_js_lib_utils_clock__WEBPACK_IMPORTED_MODULE_14__.ONE_SECOND_IN_TS), updatedBuffer = buffer.slice(), i = buffer.length; i-- && !(buffer[i].pts <= endPts););
                if (-1 === i) // no removal because end of remove range is before start of buffer
                return updatedBuffer;
                for(var j = i + 1; j-- && !(buffer[j].pts <= startPts););
                 // clamp remove range start to 0 index
                return j = Math.max(j, 0), updatedBuffer.splice(j, i - j + 1), updatedBuffer;
            }, shallowEqual = function(a, b) {
                // if both are undefined
                // or one or the other is undefined
                // they are not equal
                if (!a && !b || !a && b || a && !b) return !1;
                 // they are the same object and thus, equal
                if (a === b) return !0;
                 // sort keys so we can make sure they have
                // all the same keys later.
                var akeys = Object.keys(a).sort(), bkeys = Object.keys(b).sort();
                if (akeys.length !== bkeys.length) return !1;
                for(var i = 0; i < akeys.length; i++){
                    var key = akeys[i]; // different sorted keys, not equal
                    if (key !== bkeys[i] || a[key] !== b[key]) return !1;
                     // different values, not equal
                }
                return !0;
            }, getSyncSegmentCandidate = function(currentTimeline, segments, targetTime) {
                segments = segments || [];
                for(var timelineSegments = [], time = 0, i = 0; i < segments.length; i++){
                    var segment = segments[i];
                    if (currentTimeline === segment.timeline && (timelineSegments.push(i), (time += segment.duration) > targetTime)) return i;
                }
                return 0 === timelineSegments.length ? 0 : timelineSegments[timelineSegments.length - 1] // default to the last timeline segment
                ;
            }, finite = function(num) {
                return "number" == typeof num && isFinite(num);
            }, MIN_SEGMENT_DURATION_TO_SAVE_STATS = 1 / 60, safeBackBufferTrimTime = function(seekable, currentTime, targetDuration) {
                // 30 seconds before the playhead provides a safe default for trimming.
                //
                // Choosing a reasonable default is particularly important for high bitrate content and
                // VOD videos/live streams with large windows, as the buffer may end up overfilled and
                // throw an APPEND_BUFFER_ERR.
                var trimTime = currentTime - Config.BACK_BUFFER_LENGTH;
                return seekable.length && // Some live playlists may have a shorter window of content than the full allowed back
                // buffer. For these playlists, don't save content that's no longer within the window.
                (trimTime = Math.max(trimTime, seekable.start(0))), Math.min(currentTime - targetDuration, trimTime);
            }, segmentInfoString = function(segmentInfo) {
                var startOfSegment = segmentInfo.startOfSegment, duration = segmentInfo.duration, segment = segmentInfo.segment, part = segmentInfo.part, _segmentInfo$playlist = segmentInfo.playlist, seq = _segmentInfo$playlist.mediaSequence, id = _segmentInfo$playlist.id, _segmentInfo$playlist2 = _segmentInfo$playlist.segments, index = segmentInfo.mediaIndex, partIndex = segmentInfo.partIndex, timeline = segmentInfo.timeline, segmentLen = (void 0 === _segmentInfo$playlist2 ? [] : _segmentInfo$playlist2).length - 1, selection = "mediaIndex/partIndex increment";
                segmentInfo.getMediaInfoForTime ? selection = "getMediaInfoForTime (" + segmentInfo.getMediaInfoForTime + ")" : segmentInfo.isSyncRequest && (selection = "getSyncSegmentCandidate (isSyncRequest)"), segmentInfo.independent && (selection += " with independent " + segmentInfo.independent);
                var hasPartIndex = "number" == typeof partIndex, name = segmentInfo.segment.uri ? "segment" : "pre-segment", zeroBasedPartCount = hasPartIndex ? getKnownPartCount({
                    preloadSegment: segment
                }) - 1 : 0;
                return name + " [" + (seq + index) + "/" + (seq + segmentLen) + "]" + (hasPartIndex ? " part [" + partIndex + "/" + zeroBasedPartCount + "]" : "") + " segment start/end [" + segment.start + " => " + segment.end + "]" + (hasPartIndex ? " part start/end [" + part.start + " => " + part.end + "]" : "") + " startOfSegment [" + startOfSegment + "] duration [" + duration + "] timeline [" + timeline + "] selected by [" + selection + "] playlist [" + id + "]";
            }, timingInfoPropertyForMedia = function(mediaType) {
                return mediaType + "TimingInfo";
            }, timestampOffsetForSegment = function(_ref) {
                var segmentTimeline = _ref.segmentTimeline, currentTimeline = _ref.currentTimeline, startOfSegment = _ref.startOfSegment, buffered = _ref.buffered; // Check to see if we are crossing a discontinuity to see if we need to set the
                return(// timestamp offset on the transmuxer and source buffer.
                //
                // Previously, we changed the timestampOffset if the start of this segment was less than
                // the currently set timestampOffset, but this isn't desirable as it can produce bad
                // behavior, especially around long running live streams.
                _ref.overrideCheck || segmentTimeline !== currentTimeline ? segmentTimeline < currentTimeline ? startOfSegment : buffered.length ? buffered.end(buffered.length - 1) : startOfSegment : null // When changing renditions, it's possible to request a segment on an older timeline. For
                );
            }, shouldWaitForTimelineChange = function(_ref2) {
                var timelineChangeController = _ref2.timelineChangeController, currentTimeline = _ref2.currentTimeline, segmentTimeline = _ref2.segmentTimeline, loaderType = _ref2.loaderType, audioDisabled = _ref2.audioDisabled;
                if (currentTimeline === segmentTimeline) return !1;
                if ("audio" === loaderType) {
                    var lastMainTimelineChange = timelineChangeController.lastTimelineChange({
                        type: "main"
                    }); // Audio loader should wait if:
                    //
                    // * main hasn't had a timeline change yet (thus has not loaded its first segment)
                    // * main hasn't yet changed to the timeline audio is looking to load
                    return !lastMainTimelineChange || lastMainTimelineChange.to !== segmentTimeline;
                } // The main loader only needs to wait for timeline changes if there's demuxed audio.
                // Otherwise, there's nothing to wait for, since audio would be muxed into the main
                // loader's segments (or the content is audio/video only and handled by the main
                // loader).
                if ("main" === loaderType && audioDisabled) {
                    var pendingAudioTimelineChange = timelineChangeController.pendingTimelineChange({
                        type: "audio"
                    }); // Main loader should wait for the audio loader if audio is not pending a timeline
                    return !pendingAudioTimelineChange || pendingAudioTimelineChange.to !== segmentTimeline;
                }
                return !1;
            }, segmentTooLong = function(_ref3) {
                var segmentDuration = _ref3.segmentDuration, maxDuration = _ref3.maxDuration; // 0 duration segments are most likely due to metadata only segments or a lack of
                return(// information.
                !!segmentDuration && Math.round(segmentDuration) > maxDuration + TIME_FUDGE_FACTOR // For HLS:
                );
            }, getTroublesomeSegmentDurationMessage = function(segmentInfo, sourceType) {
                // Right now we aren't following DASH's timing model exactly, so only perform
                // this check for HLS content.
                if ("hls" !== sourceType) return null;
                var audioTimingInfo, videoTimingInfo, segmentDuration = (audioTimingInfo = segmentInfo.audioTimingInfo, videoTimingInfo = segmentInfo.videoTimingInfo, Math.max(audioTimingInfo && "number" == typeof audioTimingInfo.start && "number" == typeof audioTimingInfo.end ? audioTimingInfo.end - audioTimingInfo.start : 0, videoTimingInfo && "number" == typeof videoTimingInfo.start && "number" == typeof videoTimingInfo.end ? videoTimingInfo.end - videoTimingInfo.start : 0)); // Don't report if we lack information.
                //
                // If the segment has a duration of 0 it is either a lack of information or a
                // metadata only segment and shouldn't be reported here.
                if (!segmentDuration) return null;
                var targetDuration = segmentInfo.playlist.targetDuration, isSegmentWayTooLong = segmentTooLong({
                    segmentDuration: segmentDuration,
                    maxDuration: 2 * targetDuration
                }), isSegmentSlightlyTooLong = segmentTooLong({
                    segmentDuration: segmentDuration,
                    maxDuration: targetDuration
                }), segmentTooLongMessage = "Segment with index " + segmentInfo.mediaIndex + " from playlist " + segmentInfo.playlist.id + " has a duration of " + segmentDuration + " when the reported duration is " + segmentInfo.duration + " and the target duration is " + targetDuration + ". For HLS content, a duration in excess of the target duration may result in playback issues. See the HLS specification section on EXT-X-TARGETDURATION for more details: https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1";
                return isSegmentWayTooLong || isSegmentSlightlyTooLong ? {
                    severity: isSegmentWayTooLong ? "warn" : "info",
                    message: segmentTooLongMessage
                } : null;
            }, SegmentLoader = /*#__PURE__*/ function(_videojs$EventTarget) {
                function SegmentLoader(settings, options) {
                    var _this;
                    if (_this = _videojs$EventTarget.call(this) || this, !settings) throw TypeError("Initialization settings are required");
                    if ("function" != typeof settings.currentTime) throw TypeError("No currentTime getter specified");
                    if (!settings.mediaSource) throw TypeError("No MediaSource specified");
                     // public properties
                    return _this.bandwidth = settings.bandwidth, _this.throughput = {
                        rate: 0,
                        count: 0
                    }, _this.roundTrip = NaN, _this.resetStats_(), _this.mediaIndex = null, _this.partIndex = null, _this.hasPlayed_ = settings.hasPlayed, _this.currentTime_ = settings.currentTime, _this.seekable_ = settings.seekable, _this.seeking_ = settings.seeking, _this.duration_ = settings.duration, _this.mediaSource_ = settings.mediaSource, _this.vhs_ = settings.vhs, _this.loaderType_ = settings.loaderType, _this.currentMediaInfo_ = void 0, _this.startingMediaInfo_ = void 0, _this.segmentMetadataTrack_ = settings.segmentMetadataTrack, _this.goalBufferLength_ = settings.goalBufferLength, _this.sourceType_ = settings.sourceType, _this.sourceUpdater_ = settings.sourceUpdater, _this.inbandTextTracks_ = settings.inbandTextTracks, _this.state_ = "INIT", _this.timelineChangeController_ = settings.timelineChangeController, _this.shouldSaveSegmentTimingInfo_ = !0, _this.parse708captions_ = settings.parse708captions, _this.captionServices_ = settings.captionServices, _this.experimentalExactManifestTimings = settings.experimentalExactManifestTimings, _this.checkBufferTimeout_ = null, _this.error_ = void 0, _this.currentTimeline_ = -1, _this.pendingSegment_ = null, _this.xhrOptions_ = null, _this.pendingSegments_ = [], _this.audioDisabled_ = !1, _this.isPendingTimestampOffset_ = !1, _this.gopBuffer_ = [], _this.timeMapping_ = 0, _this.safeAppend_ = videojs.browser.IE_VERSION >= 11, _this.appendInitSegment_ = {
                        audio: !0,
                        video: !0
                    }, _this.playlistOfLastInitSegment_ = {
                        audio: null,
                        video: null
                    }, _this.callQueue_ = [], // information yet to start the loading process (e.g., if the audio loader wants to
                    // load a segment from the next timeline but the main loader hasn't yet crossed that
                    // timeline), then the load call will be added to the queue until it is ready to be
                    // processed.
                    _this.loadQueue_ = [], _this.metadataQueue_ = {
                        id3: [],
                        caption: []
                    }, _this.waitingOnRemove_ = !1, _this.quotaExceededErrorRetryTimeout_ = null, _this.activeInitSegmentId_ = null, _this.initSegments_ = {}, _this.cacheEncryptionKeys_ = settings.cacheEncryptionKeys, _this.keyCache_ = {}, _this.decrypter_ = settings.decrypter, // between a time in the display time and a segment index within
                    // a playlist
                    _this.syncController_ = settings.syncController, _this.syncPoint_ = {
                        segmentIndex: 0,
                        time: 0
                    }, _this.transmuxer_ = _this.createTransmuxer_(), _this.triggerSyncInfoUpdate_ = function() {
                        return _this.trigger("syncinfoupdate");
                    }, _this.syncController_.on("syncinfoupdate", _this.triggerSyncInfoUpdate_), _this.mediaSource_.addEventListener("sourceopen", function() {
                        _this.isEndOfStream_() || (_this.ended_ = !1);
                    }), _this.fetchAtBuffer_ = !1, _this.logger_ = logger("SegmentLoader[" + _this.loaderType_ + "]"), Object.defineProperty((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), "state", {
                        get: function() {
                            return this.state_;
                        },
                        set: function(newState) {
                            newState !== this.state_ && (this.logger_(this.state_ + " -> " + newState), this.state_ = newState, this.trigger("statechange"));
                        }
                    }), _this.sourceUpdater_.on("ready", function() {
                        _this.hasEnoughInfoToAppend_() && _this.processCallQueue_();
                    }), "main" === _this.loaderType_ && _this.timelineChangeController_.on("pendingtimelinechange", function() {
                        _this.hasEnoughInfoToAppend_() && _this.processCallQueue_();
                    }), "audio" === _this.loaderType_ && _this.timelineChangeController_.on("timelinechange", function() {
                        _this.hasEnoughInfoToLoad_() && _this.processLoadQueue_(), _this.hasEnoughInfoToAppend_() && _this.processCallQueue_();
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(SegmentLoader, _videojs$EventTarget);
                var _proto = SegmentLoader.prototype;
                return _proto.createTransmuxer_ = function() {
                    return segmentTransmuxer.createTransmuxer({
                        remux: !1,
                        alignGopsAtEnd: this.safeAppend_,
                        keepOriginalTimestamps: !0,
                        parse708captions: this.parse708captions_,
                        captionServices: this.captionServices_
                    });
                }, /**
                 * reset all of our media stats
                 *
                 * @private
                 */ _proto.resetStats_ = function() {
                    this.mediaBytesTransferred = 0, this.mediaRequests = 0, this.mediaRequestsAborted = 0, this.mediaRequestsTimedout = 0, this.mediaRequestsErrored = 0, this.mediaTransferDuration = 0, this.mediaSecondsLoaded = 0, this.mediaAppends = 0;
                }, /**
                 * dispose of the SegmentLoader and reset to the default state
                 */ _proto.dispose = function() {
                    this.trigger("dispose"), this.state = "DISPOSED", this.pause(), this.abort_(), this.transmuxer_ && this.transmuxer_.terminate(), this.resetStats_(), this.checkBufferTimeout_ && global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.checkBufferTimeout_), this.syncController_ && this.triggerSyncInfoUpdate_ && this.syncController_.off("syncinfoupdate", this.triggerSyncInfoUpdate_), this.off();
                }, _proto.setAudio = function(enable) {
                    this.audioDisabled_ = !enable, enable ? this.appendInitSegment_.audio = !0 : // remove current track audio if it gets disabled
                    this.sourceUpdater_.removeAudio(0, this.duration_());
                }, /**
                 * abort anything that is currently doing on with the SegmentLoader
                 * and reset to a default state
                 */ _proto.abort = function() {
                    if ("WAITING" !== this.state) {
                        this.pendingSegment_ && (this.pendingSegment_ = null);
                        return;
                    }
                    this.abort_(), // since we are no longer "waiting" on any requests. XHR callback is not always run
                    // when the request is aborted. This will prevent the loader from being stuck in the
                    // WAITING state indefinitely.
                    this.state = "READY", this.paused() || this.monitorBuffer_();
                }, /**
                 * abort all pending xhr requests and null any pending segements
                 *
                 * @private
                 */ _proto.abort_ = function() {
                    this.pendingSegment_ && this.pendingSegment_.abortRequests && this.pendingSegment_.abortRequests(), this.pendingSegment_ = null, this.callQueue_ = [], this.loadQueue_ = [], this.metadataQueue_.id3 = [], this.metadataQueue_.caption = [], this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_), this.waitingOnRemove_ = !1, global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.quotaExceededErrorRetryTimeout_), this.quotaExceededErrorRetryTimeout_ = null;
                }, _proto.checkForAbort_ = function(requestId) {
                    return(// If the state is APPENDING, then aborts will not modify the state, meaning the first
                    // callback that happens should reset the state to READY so that loading can continue.
                    "APPENDING" !== this.state || this.pendingSegment_ ? !this.pendingSegment_ || this.pendingSegment_.requestId !== requestId : (this.state = "READY", !0));
                }, /**
                 * set an error on the segment loader and null out any pending segements
                 *
                 * @param {Error} error the error to set on the SegmentLoader
                 * @return {Error} the error that was set or that is currently set
                 */ _proto.error = function(_error) {
                    return void 0 !== _error && (this.logger_("error occurred:", _error), this.error_ = _error), this.pendingSegment_ = null, this.error_;
                }, _proto.endOfStream = function() {
                    this.ended_ = !0, this.transmuxer_ && // need to clear out any cached data to prepare for the new segment
                    segmentTransmuxer.reset(this.transmuxer_), this.gopBuffer_.length = 0, this.pause(), this.trigger("ended");
                }, /**
                 * Indicates which time ranges are buffered
                 *
                 * @return {TimeRange}
                 *         TimeRange object representing the current buffered ranges
                 */ _proto.buffered_ = function() {
                    var trackInfo = this.getMediaInfo_();
                    if (!this.sourceUpdater_ || !trackInfo) return videojs.createTimeRanges();
                    if ("main" === this.loaderType_) {
                        var hasAudio = trackInfo.hasAudio, hasVideo = trackInfo.hasVideo, isMuxed = trackInfo.isMuxed;
                        if (hasVideo && hasAudio && !this.audioDisabled_ && !isMuxed) return this.sourceUpdater_.buffered();
                        if (hasVideo) return this.sourceUpdater_.videoBuffered();
                    } // One case that can be ignored for now is audio only with alt audio,
                    // as we don't yet have proper support for that.
                    return this.sourceUpdater_.audioBuffered();
                }, /**
                 * Gets and sets init segment for the provided map
                 *
                 * @param {Object} map
                 *        The map object representing the init segment to get or set
                 * @param {boolean=} set
                 *        If true, the init segment for the provided map should be saved
                 * @return {Object}
                 *         map object for desired init segment
                 */ _proto.initSegmentForMap = function(map, set) {
                    if (void 0 === set && (set = !1), !map) return null;
                    var id = initSegmentId(map), storedMap = this.initSegments_[id];
                    return set && !storedMap && map.bytes && (this.initSegments_[id] = storedMap = {
                        resolvedUri: map.resolvedUri,
                        byterange: map.byterange,
                        bytes: map.bytes,
                        tracks: map.tracks,
                        timescales: map.timescales
                    }), storedMap || map;
                }, /**
                 * Gets and sets key for the provided key
                 *
                 * @param {Object} key
                 *        The key object representing the key to get or set
                 * @param {boolean=} set
                 *        If true, the key for the provided key should be saved
                 * @return {Object}
                 *         Key object for desired key
                 */ _proto.segmentKey = function(key, set) {
                    if (void 0 === set && (set = !1), !key) return null;
                    var id = segmentKeyId(key), storedKey = this.keyCache_[id];
                    this.cacheEncryptionKeys_ && set && !storedKey && key.bytes && (this.keyCache_[id] = storedKey = {
                        resolvedUri: key.resolvedUri,
                        bytes: key.bytes
                    });
                    var result = {
                        resolvedUri: (storedKey || key).resolvedUri
                    };
                    return storedKey && (result.bytes = storedKey.bytes), result;
                }, /**
                 * Returns true if all configuration required for loading is present, otherwise false.
                 *
                 * @return {boolean} True if the all configuration is ready for loading
                 * @private
                 */ _proto.couldBeginLoading_ = function() {
                    return this.playlist_ && !this.paused();
                }, /**
                 * load a playlist and start to fill the buffer
                 */ _proto.load = function() {
                    // specified
                    if (// un-pause
                    this.monitorBuffer_(), this.playlist_) {
                        if ("INIT" === this.state && this.couldBeginLoading_()) return this.init_();
                         // if we're in the middle of processing a segment already, don't
                        // kick off an additional segment request
                        this.couldBeginLoading_() && ("READY" === this.state || "INIT" === this.state) && (this.state = "READY");
                    } // if all the configuration is ready, initialize and begin loading
                }, /**
                 * Once all the starting parameters have been specified, begin
                 * operation. This method should only be invoked from the INIT
                 * state.
                 *
                 * @private
                 */ _proto.init_ = function() {
                    return this.state = "READY", // audio data from the muxed content should be removed
                    this.resetEverything(), this.monitorBuffer_();
                }, /**
                 * set a playlist on the segment loader
                 *
                 * @param {PlaylistLoader} media the playlist to set on the segment loader
                 */ _proto.playlist = function(newPlaylist, options) {
                    if (void 0 === options && (options = {}), newPlaylist) {
                        var oldPlaylist = this.playlist_, segmentInfo = this.pendingSegment_;
                        this.playlist_ = newPlaylist, this.xhrOptions_ = options, "INIT" === this.state && (newPlaylist.syncInfo = {
                            mediaSequence: newPlaylist.mediaSequence,
                            time: 0
                        }, "main" === this.loaderType_ && this.syncController_.setDateTimeMappingForStart(newPlaylist));
                        var oldId = null;
                        // buffering now
                        if (oldPlaylist && (oldPlaylist.id ? oldId = oldPlaylist.id : oldPlaylist.uri && (oldId = oldPlaylist.uri)), this.logger_("playlist update [" + oldId + " => " + (newPlaylist.id || newPlaylist.uri) + "]"), // in LIVE, we always want to update with new playlists (including refreshes)
                        this.trigger("syncinfoupdate"), "INIT" === this.state && this.couldBeginLoading_()) return this.init_();
                        if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {
                            null !== this.mediaIndex && (newPlaylist.endList ? this.resyncLoader() : this.resetLoader()), this.currentMediaInfo_ = void 0, this.trigger("playlistupdate");
                            return;
                        } // we reloaded the same playlist so we are in a live scenario
                        // and we will likely need to adjust the mediaIndex
                        var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;
                        // this is important because we can abort a request and this value must be
                        // equal to the last appended mediaIndex
                        if (this.logger_("live window shift [" + mediaSequenceDiff + "]"), null !== this.mediaIndex) {
                            // update during that. mediaIndex would go from 0 to -1 if mediaSequence in the
                            // new playlist was incremented by 1.
                            if (this.mediaIndex -= mediaSequenceDiff, this.mediaIndex < 0) this.mediaIndex = null, this.partIndex = null;
                            else {
                                var segment = this.playlist_.segments[this.mediaIndex]; // partIndex should remain the same for the same segment
                                // unless parts fell off of the playlist for this segment.
                                // In that case we need to reset partIndex and resync
                                if (this.partIndex && (!segment.parts || !segment.parts.length || !segment.parts[this.partIndex])) {
                                    var mediaIndex = this.mediaIndex;
                                    this.logger_("currently processing part (index " + this.partIndex + ") no longer exists."), this.resetLoader(), // as the part was dropped from our current playlists segment.
                                    // The mediaIndex will still be valid so keep that around.
                                    this.mediaIndex = mediaIndex;
                                }
                            }
                        } // update the mediaIndex on the SegmentInfo object
                        segmentInfo && (segmentInfo.mediaIndex -= mediaSequenceDiff, segmentInfo.mediaIndex < 0 ? (segmentInfo.mediaIndex = null, segmentInfo.partIndex = null) : (segmentInfo.mediaIndex >= 0 && (segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex]), segmentInfo.partIndex >= 0 && segmentInfo.segment.parts && (segmentInfo.part = segmentInfo.segment.parts[segmentInfo.partIndex]))), this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);
                    }
                }, /**
                 * Prevent the loader from fetching additional segments. If there
                 * is a segment request outstanding, it will finish processing
                 * before the loader halts. A segment loader can be unpaused by
                 * calling load().
                 */ _proto.pause = function() {
                    this.checkBufferTimeout_ && (global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.checkBufferTimeout_), this.checkBufferTimeout_ = null);
                }, /**
                 * Returns whether the segment loader is fetching additional
                 * segments when given the opportunity. This property can be
                 * modified through calls to pause() and load().
                 */ _proto.paused = function() {
                    return null === this.checkBufferTimeout_;
                }, /**
                 * Delete all the buffered data and reset the SegmentLoader
                 *
                 * @param {Function} [done] an optional callback to be executed when the remove
                 * operation is complete
                 */ _proto.resetEverything = function(done) {
                    this.ended_ = !1, this.appendInitSegment_ = {
                        audio: !0,
                        video: !0
                    }, this.resetLoader(), // VTT Segment Loader doesn't need to do anything but in the regular SegmentLoader,
                    // we then clamp the value to duration if necessary.
                    this.remove(0, 1 / 0, done), this.transmuxer_ && (this.transmuxer_.postMessage({
                        action: "clearAllMp4Captions"
                    }), this.transmuxer_.postMessage({
                        action: "reset"
                    }));
                }, /**
                 * Force the SegmentLoader to resync and start loading around the currentTime instead
                 * of starting at the end of the buffer
                 *
                 * Useful for fast quality changes
                 */ _proto.resetLoader = function() {
                    this.fetchAtBuffer_ = !1, this.resyncLoader();
                }, /**
                 * Force the SegmentLoader to restart synchronization and make a conservative guess
                 * before returning to the simple walk-forward method
                 */ _proto.resyncLoader = function() {
                    this.transmuxer_ && // need to clear out any cached data to prepare for the new segment
                    segmentTransmuxer.reset(this.transmuxer_), this.mediaIndex = null, this.partIndex = null, this.syncPoint_ = null, this.isPendingTimestampOffset_ = !1, this.callQueue_ = [], this.loadQueue_ = [], this.metadataQueue_.id3 = [], this.metadataQueue_.caption = [], this.abort(), this.transmuxer_ && this.transmuxer_.postMessage({
                        action: "clearParsedMp4Captions"
                    });
                }, /**
                 * Remove any data in the source buffer between start and end times
                 *
                 * @param {number} start - the start time of the region to remove from the buffer
                 * @param {number} end - the end time of the region to remove from the buffer
                 * @param {Function} [done] - an optional callback to be executed when the remove
                 * @param {boolean} force - force all remove operations to happen
                 * operation is complete
                 */ _proto.remove = function(start, end, done, force) {
                    // commonly happens during a rendition switch at the start of a video
                    // from start 0 to end 0
                    if (void 0 === done && (done = function() {}), void 0 === force && (force = !1), end === 1 / 0 && (end = this.duration_()), end <= start) {
                        this.logger_("skipping remove because end ${end} is <= start ${start}");
                        return;
                    }
                    if (!this.sourceUpdater_ || !this.getMediaInfo_()) {
                        this.logger_("skipping remove because no source updater or starting media info"); // nothing to remove if we haven't processed any media
                        return;
                    } // set it to one to complete this function's removes
                    var removesRemaining = 1, removeFinished = function() {
                        0 == --removesRemaining && done();
                    };
                    for(var track in (force || !this.audioDisabled_) && (removesRemaining++, this.sourceUpdater_.removeAudio(start, end, removeFinished)), (force || "main" === this.loaderType_) && (this.gopBuffer_ = removeGopBuffer(this.gopBuffer_, start, end, this.timeMapping_), removesRemaining++, this.sourceUpdater_.removeVideo(start, end, removeFinished)), this.inbandTextTracks_)removeCuesFromTrack(start, end, this.inbandTextTracks_[track]);
                    removeCuesFromTrack(start, end, this.segmentMetadataTrack_), removeFinished();
                }, /**
                 * (re-)schedule monitorBufferTick_ to run as soon as possible
                 *
                 * @private
                 */ _proto.monitorBuffer_ = function() {
                    this.checkBufferTimeout_ && global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.checkBufferTimeout_), this.checkBufferTimeout_ = global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(this.monitorBufferTick_.bind(this), 1);
                }, /**
                 * As long as the SegmentLoader is in the READY state, periodically
                 * invoke fillBuffer_().
                 *
                 * @private
                 */ _proto.monitorBufferTick_ = function() {
                    "READY" === this.state && this.fillBuffer_(), this.checkBufferTimeout_ && global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.checkBufferTimeout_), this.checkBufferTimeout_ = global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(this.monitorBufferTick_.bind(this), 500);
                }, /**
                 * fill the buffer with segements unless the sourceBuffers are
                 * currently updating
                 *
                 * Note: this function should only ever be called by monitorBuffer_
                 * and never directly
                 *
                 * @private
                 */ _proto.fillBuffer_ = function() {
                    // TODO since the source buffer maintains a queue, and we shouldn't call this function
                    // except when we're ready for the next segment, this check can most likely be removed
                    if (!this.sourceUpdater_.updating()) {
                        var segmentInfo = this.chooseNextRequest_();
                        segmentInfo && ("number" == typeof segmentInfo.timestampOffset && (this.isPendingTimestampOffset_ = !1, this.timelineChangeController_.pendingTimelineChange({
                            type: this.loaderType_,
                            from: this.currentTimeline_,
                            to: segmentInfo.timeline
                        })), this.loadSegment_(segmentInfo));
                    } // see if we need to begin loading immediately
                }, /**
                 * Determines if we should call endOfStream on the media source based
                 * on the state of the buffer or if appened segment was the final
                 * segment in the playlist.
                 *
                 * @param {number} [mediaIndex] the media index of segment we last appended
                 * @param {Object} [playlist] a media playlist object
                 * @return {boolean} do we need to call endOfStream on the MediaSource
                 */ _proto.isEndOfStream_ = function(mediaIndex, playlist, partIndex) {
                    if (void 0 === mediaIndex && (mediaIndex = this.mediaIndex), void 0 === playlist && (playlist = this.playlist_), void 0 === partIndex && (partIndex = this.partIndex), !playlist || !this.mediaSource_) return !1;
                    var segment = "number" == typeof mediaIndex && playlist.segments[mediaIndex], appendedLastSegment = mediaIndex + 1 === playlist.segments.length, appendedLastPart = !segment || !segment.parts || partIndex + 1 === segment.parts.length; // mediaIndex is zero based but length is 1 based
                    // so that MediaSources can trigger the `ended` event when it runs out of
                    // buffered data instead of waiting for me
                    return playlist.endList && "open" === this.mediaSource_.readyState && appendedLastSegment && appendedLastPart;
                }, /**
                 * Determines what request should be made given current segment loader state.
                 *
                 * @return {Object} a request object that describes the segment/part to load
                 */ _proto.chooseNextRequest_ = function() {
                    var buffered = this.buffered_(), bufferedEnd = lastBufferedEnd(buffered) || 0, bufferedTime = timeAheadOf(buffered, this.currentTime_()), preloaded = !this.hasPlayed_() && bufferedTime >= 1, haveEnoughBuffer = bufferedTime >= this.goalBufferLength_(), segments = this.playlist_.segments;
                    // 1. we don't have segments
                    // 2. The video has not yet played and we already downloaded a segment
                    // 3. we already have enough buffered time
                    if (!segments.length || preloaded || haveEnoughBuffer) return null;
                    this.syncPoint_ = this.syncPoint_ || this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());
                    var next = {
                        partIndex: null,
                        mediaIndex: null,
                        startOfSegment: null,
                        playlist: this.playlist_,
                        isSyncRequest: !this.syncPoint_
                    };
                    if (next.isSyncRequest) next.mediaIndex = getSyncSegmentCandidate(this.currentTimeline_, segments, bufferedEnd);
                    else if (null !== this.mediaIndex) {
                        var segment = segments[this.mediaIndex], partIndex = "number" == typeof this.partIndex ? this.partIndex : -1;
                        next.startOfSegment = segment.end ? segment.end : bufferedEnd, segment.parts && segment.parts[partIndex + 1] ? (next.mediaIndex = this.mediaIndex, next.partIndex = partIndex + 1) : next.mediaIndex = this.mediaIndex + 1;
                    } else {
                        // Find the segment containing the end of the buffer or current time.
                        var _Playlist$getMediaInf = Playlist.getMediaInfoForTime({
                            experimentalExactManifestTimings: this.experimentalExactManifestTimings,
                            playlist: this.playlist_,
                            currentTime: this.fetchAtBuffer_ ? bufferedEnd : this.currentTime_(),
                            startingPartIndex: this.syncPoint_.partIndex,
                            startingSegmentIndex: this.syncPoint_.segmentIndex,
                            startTime: this.syncPoint_.time
                        }), segmentIndex = _Playlist$getMediaInf.segmentIndex, startTime = _Playlist$getMediaInf.startTime, _partIndex = _Playlist$getMediaInf.partIndex;
                        next.getMediaInfoForTime = this.fetchAtBuffer_ ? "bufferedEnd " + bufferedEnd : "currentTime " + this.currentTime_(), next.mediaIndex = segmentIndex, next.startOfSegment = startTime, next.partIndex = _partIndex;
                    }
                    var nextSegment = segments[next.mediaIndex], nextPart = nextSegment && "number" == typeof next.partIndex && nextSegment.parts && nextSegment.parts[next.partIndex];
                    // the next partIndex is invalid do not choose a next segment.
                    if (!nextSegment || "number" == typeof next.partIndex && !nextPart) return null;
                     // if the next segment has parts, and we don't have a partIndex.
                    // that the next part we append is "independent" if possible.
                    // So we check if the previous part is independent, and request
                    // it if it is.
                    if ("number" != typeof next.partIndex && nextSegment.parts && (next.partIndex = 0, nextPart = nextSegment.parts[0]), !bufferedTime && nextPart && !nextPart.independent) {
                        if (0 === next.partIndex) {
                            var lastSegment = segments[next.mediaIndex - 1], lastSegmentLastPart = lastSegment.parts && lastSegment.parts.length && lastSegment.parts[lastSegment.parts.length - 1];
                            lastSegmentLastPart && lastSegmentLastPart.independent && (next.mediaIndex -= 1, next.partIndex = lastSegment.parts.length - 1, next.independent = "previous segment");
                        } else nextSegment.parts[next.partIndex - 1].independent && (next.partIndex -= 1, next.independent = "previous part");
                    }
                    var ended = this.mediaSource_ && "ended" === this.mediaSource_.readyState; // do not choose a next segment if all of the following:
                    return(// 1. this is the last segment in the playlist
                    // 2. end of stream has been called on the media source already
                    // 3. the player is not seeking
                    next.mediaIndex >= segments.length - 1 && ended && !this.seeking_() ? null : this.generateSegmentInfo_(next));
                }, _proto.generateSegmentInfo_ = function(options) {
                    var independent = options.independent, playlist = options.playlist, mediaIndex = options.mediaIndex, startOfSegment = options.startOfSegment, isSyncRequest = options.isSyncRequest, partIndex = options.partIndex, forceTimestampOffset = options.forceTimestampOffset, getMediaInfoForTime = options.getMediaInfoForTime, segment = playlist.segments[mediaIndex], part = "number" == typeof partIndex && segment.parts[partIndex], segmentInfo = {
                        requestId: "segment-loader-" + Math.random(),
                        // resolve the segment URL relative to the playlist
                        uri: part && part.resolvedUri || segment.resolvedUri,
                        // the segment's mediaIndex at the time it was requested
                        mediaIndex: mediaIndex,
                        partIndex: part ? partIndex : null,
                        // whether or not to update the SegmentLoader's state with this
                        // segment's mediaIndex
                        isSyncRequest: isSyncRequest,
                        startOfSegment: startOfSegment,
                        // the segment's playlist
                        playlist: playlist,
                        // unencrypted bytes of the segment
                        bytes: null,
                        // when a key is defined for this segment, the encrypted bytes
                        encryptedBytes: null,
                        // The target timestampOffset for this segment when we append it
                        // to the source buffer
                        timestampOffset: null,
                        // The timeline that the segment is in
                        timeline: segment.timeline,
                        // The expected duration of the segment in seconds
                        duration: part && part.duration || segment.duration,
                        // retain the segment in case the playlist updates while doing an async process
                        segment: segment,
                        part: part,
                        byteLength: 0,
                        transmuxer: this.transmuxer_,
                        // type of getMediaInfoForTime that was used to get this segment
                        getMediaInfoForTime: getMediaInfoForTime,
                        independent: independent
                    }, overrideCheck = void 0 !== forceTimestampOffset ? forceTimestampOffset : this.isPendingTimestampOffset_;
                    segmentInfo.timestampOffset = this.timestampOffsetForSegment_({
                        segmentTimeline: segment.timeline,
                        currentTimeline: this.currentTimeline_,
                        startOfSegment: startOfSegment,
                        buffered: this.buffered_(),
                        overrideCheck: overrideCheck
                    });
                    var audioBufferedEnd = lastBufferedEnd(this.sourceUpdater_.audioBuffered());
                    return "number" == typeof audioBufferedEnd && // since the transmuxer is using the actual timing values, but the buffer is
                    // adjusted by the timestamp offset, we must adjust the value here
                    (segmentInfo.audioAppendStart = audioBufferedEnd - this.sourceUpdater_.audioTimestampOffset()), this.sourceUpdater_.videoBuffered().length && (segmentInfo.gopsToAlignWith = gopsSafeToAlignWith(this.gopBuffer_, // adjusted by the timestmap offset, we must adjust the value here
                    this.currentTime_() - this.sourceUpdater_.videoTimestampOffset(), this.timeMapping_)), segmentInfo;
                }, // added so that vtt segment loader can override and prevent
                // adding timestamp offsets.
                _proto.timestampOffsetForSegment_ = function(options) {
                    return timestampOffsetForSegment(options);
                }, /**
                 * Determines if the network has enough bandwidth to complete the current segment
                 * request in a timely manner. If not, the request will be aborted early and bandwidth
                 * updated to trigger a playlist switch.
                 *
                 * @param {Object} stats
                 *        Object containing stats about the request timing and size
                 * @private
                 */ _proto.earlyAbortWhenNeeded_ = function(stats) {
                    if (!(this.vhs_.tech_.paused() || // Don't abort if the current playlist is on the lowestEnabledRendition
                    // TODO: Replace using timeout with a boolean indicating whether this playlist is
                    //       the lowestEnabledRendition.
                    !this.xhrOptions_.timeout || // Don't abort if we have no bandwidth information to estimate segment sizes
                    !this.playlist_.attributes.BANDWIDTH || Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000)) {
                        var buffered, playbackRate, currentTime = this.currentTime_(), measuredBandwidth = stats.bandwidth, segmentDuration = this.pendingSegment_.duration, requestTimeRemaining = Playlist.estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived), timeUntilRebuffer$1 = (buffered = this.buffered_(), void 0 === (playbackRate = this.vhs_.tech_.playbackRate()) && (playbackRate = 1), ((buffered.length ? buffered.end(buffered.length - 1) : 0) - currentTime) / playbackRate - 1);
                        // is larger than the estimated time until the player runs out of forward buffer
                        if (!(requestTimeRemaining <= timeUntilRebuffer$1)) {
                            var switchCandidate = minRebufferMaxBandwidthSelector({
                                master: this.vhs_.playlists.master,
                                currentTime: currentTime,
                                bandwidth: measuredBandwidth,
                                duration: this.duration_(),
                                segmentDuration: segmentDuration,
                                timeUntilRebuffer: timeUntilRebuffer$1,
                                currentTimeline: this.currentTimeline_,
                                syncController: this.syncController_
                            });
                            if (switchCandidate) {
                                var timeSavedBySwitching = requestTimeRemaining - timeUntilRebuffer$1 - switchCandidate.rebufferingImpact, minimumTimeSaving = 0.5;
                                timeUntilRebuffer$1 <= TIME_FUDGE_FACTOR && (minimumTimeSaving = 1), switchCandidate.playlist && switchCandidate.playlist.uri !== this.playlist_.uri && !(timeSavedBySwitching < minimumTimeSaving) && (// BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it
                                // don't trigger a bandwidthupdate as the bandwidth is artifial
                                this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * Config.BANDWIDTH_VARIANCE + 1, this.trigger("earlyabort")); // set the bandwidth to that of the desired playlist being sure to scale by
                            }
                        }
                    } // Wait at least 1 second since the first byte of data has been received before
                }, _proto.handleAbort_ = function(segmentInfo) {
                    this.logger_("Aborting " + segmentInfoString(segmentInfo)), this.mediaRequestsAborted += 1;
                }, /**
                 * XHR `progress` event handler
                 *
                 * @param {Event}
                 *        The XHR `progress` event
                 * @param {Object} simpleSegment
                 *        A simplified segment object copy
                 * @private
                 */ _proto.handleProgress_ = function(event, simpleSegment) {
                    this.earlyAbortWhenNeeded_(simpleSegment.stats), this.checkForAbort_(simpleSegment.requestId) || this.trigger("progress");
                }, _proto.handleTrackInfo_ = function(simpleSegment, trackInfo) {
                    this.earlyAbortWhenNeeded_(simpleSegment.stats), this.checkForAbort_(simpleSegment.requestId) || this.checkForIllegalMediaSwitch(trackInfo) || (trackInfo = trackInfo || {}, shallowEqual(this.currentMediaInfo_, trackInfo) || (this.appendInitSegment_ = {
                        audio: !0,
                        video: !0
                    }, this.startingMediaInfo_ = trackInfo, this.currentMediaInfo_ = trackInfo, this.logger_("trackinfo update", trackInfo), this.trigger("trackinfo")), !this.checkForAbort_(simpleSegment.requestId) && (// it can append.
                    this.pendingSegment_.trackInfo = trackInfo, this.hasEnoughInfoToAppend_() && this.processCallQueue_()));
                }, _proto.handleTimingInfo_ = function(simpleSegment, mediaType, timeType, time) {
                    if (this.earlyAbortWhenNeeded_(simpleSegment.stats), !this.checkForAbort_(simpleSegment.requestId)) {
                        var segmentInfo = this.pendingSegment_, timingInfoProperty = timingInfoPropertyForMedia(mediaType);
                        segmentInfo[timingInfoProperty] = segmentInfo[timingInfoProperty] || {}, segmentInfo[timingInfoProperty][timeType] = time, this.logger_("timinginfo: " + mediaType + " - " + timeType + " - " + time), this.hasEnoughInfoToAppend_() && this.processCallQueue_();
                    }
                }, _proto.handleCaptions_ = function(simpleSegment, captionData) {
                    var _this2 = this;
                    if (this.earlyAbortWhenNeeded_(simpleSegment.stats), !this.checkForAbort_(simpleSegment.requestId)) {
                        // should still not happen in general
                        if (0 === captionData.length) {
                            this.logger_("SegmentLoader received no captions from a caption event");
                            return;
                        }
                        // can be adjusted by the timestamp offset
                        if (!this.pendingSegment_.hasAppendedData_) {
                            this.metadataQueue_.caption.push(this.handleCaptions_.bind(this, simpleSegment, captionData));
                            return;
                        }
                        var timestampOffset = null === this.sourceUpdater_.videoTimestampOffset() ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset(), captionTracks = {};
                        captionData.forEach(function(caption) {
                            // caption.stream is actually a track name...
                            // set to the existing values in tracks or default values
                            captionTracks[caption.stream] = captionTracks[caption.stream] || {
                                // Infinity, as any other value will be less than this
                                startTime: 1 / 0,
                                captions: [],
                                // 0 as an other value will be more than this
                                endTime: 0
                            };
                            var captionTrack = captionTracks[caption.stream];
                            captionTrack.startTime = Math.min(captionTrack.startTime, caption.startTime + timestampOffset), captionTrack.endTime = Math.max(captionTrack.endTime, caption.endTime + timestampOffset), captionTrack.captions.push(caption);
                        }), Object.keys(captionTracks).forEach(function(trackName) {
                            var _captionTracks$trackN = captionTracks[trackName], startTime = _captionTracks$trackN.startTime, endTime = _captionTracks$trackN.endTime, captions = _captionTracks$trackN.captions, inbandTextTracks = _this2.inbandTextTracks_;
                            _this2.logger_("adding cues from " + startTime + " -> " + endTime + " for " + trackName), createCaptionsTrackIfNotExists(inbandTextTracks, _this2.vhs_.tech_, trackName), // We do this because a rendition change that also changes the timescale for captions
                            // will result in captions being re-parsed for certain segments. If we add them again
                            // without clearing we will have two of the same captions visible.
                            removeCuesFromTrack(startTime, endTime, inbandTextTracks[trackName]), addCaptionData({
                                captionArray: captions,
                                inbandTextTracks: inbandTextTracks,
                                timestampOffset: timestampOffset
                            });
                        }), this.transmuxer_ && this.transmuxer_.postMessage({
                            action: "clearParsedMp4Captions"
                        });
                    } // This could only happen with fmp4 segments, but
                }, _proto.handleId3_ = function(simpleSegment, id3Frames, dispatchType) {
                    if (this.earlyAbortWhenNeeded_(simpleSegment.stats), !this.checkForAbort_(simpleSegment.requestId)) {
                        if (!this.pendingSegment_.hasAppendedData_) {
                            this.metadataQueue_.id3.push(this.handleId3_.bind(this, simpleSegment, id3Frames, dispatchType));
                            return;
                        }
                        var timestampOffset = null === this.sourceUpdater_.videoTimestampOffset() ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset(); // There's potentially an issue where we could double add metadata if there's a muxed
                        // audio/video source with a metadata track, and an alt audio with a metadata track.
                        // However, this probably won't happen, and if it does it can be handled then.
                        createMetadataTrackIfNotExists(this.inbandTextTracks_, dispatchType, this.vhs_.tech_), addMetadata({
                            inbandTextTracks: this.inbandTextTracks_,
                            metadataArray: id3Frames,
                            timestampOffset: timestampOffset,
                            videoDuration: this.duration_()
                        });
                    }
                }, _proto.processMetadataQueue_ = function() {
                    this.metadataQueue_.id3.forEach(function(fn) {
                        return fn();
                    }), this.metadataQueue_.caption.forEach(function(fn) {
                        return fn();
                    }), this.metadataQueue_.id3 = [], this.metadataQueue_.caption = [];
                }, _proto.processCallQueue_ = function() {
                    var callQueue = this.callQueue_; // Clear out the queue before the queued functions are run, since some of the
                    // functions may check the length of the load queue and default to pushing themselves
                    // back onto the queue.
                    this.callQueue_ = [], callQueue.forEach(function(fun) {
                        return fun();
                    });
                }, _proto.processLoadQueue_ = function() {
                    var loadQueue = this.loadQueue_; // Clear out the queue before the queued functions are run, since some of the
                    // functions may check the length of the load queue and default to pushing themselves
                    // back onto the queue.
                    this.loadQueue_ = [], loadQueue.forEach(function(fun) {
                        return fun();
                    });
                }, /**
                 * Determines whether the loader has enough info to load the next segment.
                 *
                 * @return {boolean}
                 *         Whether or not the loader has enough info to load the next segment
                 */ _proto.hasEnoughInfoToLoad_ = function() {
                    // Since primary timing goes by video, only the audio loader potentially needs to wait
                    // to load.
                    if ("audio" !== this.loaderType_) return !0;
                    var segmentInfo = this.pendingSegment_; // A fill buffer must have already run to establish a pending segment before there's
                    return(// enough info to load.
                    !!segmentInfo && (!this.getCurrentMediaInfo_() || !// Technically, instead of waiting to load a segment on timeline changes, a segment
                    // can be requested and downloaded and only wait before it is transmuxed or parsed.
                    // But in practice, there are a few reasons why it is better to wait until a loader
                    // is ready to append that segment before requesting and downloading:
                    //
                    // 1. Because audio and main loaders cross discontinuities together, if this loader
                    //    is waiting for the other to catch up, then instead of requesting another
                    //    segment and using up more bandwidth, by not yet loading, more bandwidth is
                    //    allotted to the loader currently behind.
                    // 2. media-segment-request doesn't have to have logic to consider whether a segment
                    // is ready to be processed or not, isolating the queueing behavior to the loader.
                    // 3. The audio loader bases some of its segment properties on timing information
                    //    provided by the main loader, meaning that, if the logic for waiting on
                    //    processing was in media-segment-request, then it would also need to know how
                    //    to re-generate the segment information after the main loader caught up.
                    shouldWaitForTimelineChange({
                        timelineChangeController: this.timelineChangeController_,
                        currentTimeline: this.currentTimeline_,
                        segmentTimeline: segmentInfo.timeline,
                        loaderType: this.loaderType_,
                        audioDisabled: this.audioDisabled_
                    })) // The first segment can and should be loaded immediately so that source buffers are
                    );
                }, _proto.getCurrentMediaInfo_ = function(segmentInfo) {
                    return void 0 === segmentInfo && (segmentInfo = this.pendingSegment_), segmentInfo && segmentInfo.trackInfo || this.currentMediaInfo_;
                }, _proto.getMediaInfo_ = function(segmentInfo) {
                    return void 0 === segmentInfo && (segmentInfo = this.pendingSegment_), this.getCurrentMediaInfo_(segmentInfo) || this.startingMediaInfo_;
                }, _proto.hasEnoughInfoToAppend_ = function() {
                    if (!this.sourceUpdater_.ready() || this.waitingOnRemove_ || this.quotaExceededErrorRetryTimeout_) return !1;
                     // If content needs to be removed or the loader is waiting on an append reattempt,
                    var segmentInfo = this.pendingSegment_, trackInfo = this.getCurrentMediaInfo_();
                    // we do not have information on this specific
                    // segment yet
                    if (!segmentInfo || !trackInfo) return !1;
                    var hasAudio = trackInfo.hasAudio, hasVideo = trackInfo.hasVideo, isMuxed = trackInfo.isMuxed;
                    return !(hasVideo && !segmentInfo.videoTimingInfo || hasAudio && !this.audioDisabled_ && !isMuxed && !segmentInfo.audioTimingInfo || shouldWaitForTimelineChange({
                        timelineChangeController: this.timelineChangeController_,
                        currentTimeline: this.currentTimeline_,
                        segmentTimeline: segmentInfo.timeline,
                        loaderType: this.loaderType_,
                        audioDisabled: this.audioDisabled_
                    }));
                }, _proto.handleData_ = function(simpleSegment, result) {
                    if (this.earlyAbortWhenNeeded_(simpleSegment.stats), !this.checkForAbort_(simpleSegment.requestId)) {
                        // executed after the calls currently queued.
                        if (this.callQueue_.length || !this.hasEnoughInfoToAppend_()) {
                            this.callQueue_.push(this.handleData_.bind(this, simpleSegment, result));
                            return;
                        }
                        var segmentInfo = this.pendingSegment_; // update the time mapping so we can translate from display time to media time
                        // logic may change behavior depending on the state, and changing state too early may
                        // inflate our estimates of bandwidth. In the future this should be re-examined to
                        // note more granular states.
                        // don't process and append data if the mediaSource is closed
                        if (this.setTimeMapping_(segmentInfo.timeline), this.updateMediaSecondsLoaded_(segmentInfo.part || segmentInfo.segment), "closed" !== this.mediaSource_.readyState) {
                            if (simpleSegment.map && (simpleSegment.map = this.initSegmentForMap(simpleSegment.map, !0), segmentInfo.segment.map = simpleSegment.map), simpleSegment.key && this.segmentKey(simpleSegment.key, !0), segmentInfo.isFmp4 = simpleSegment.isFmp4, segmentInfo.timingInfo = segmentInfo.timingInfo || {}, segmentInfo.isFmp4) this.trigger("fmp4"), segmentInfo.timingInfo.start = segmentInfo[timingInfoPropertyForMedia(result.type)].start;
                            else {
                                var firstVideoFrameTimeForData, trackInfo = this.getCurrentMediaInfo_(), useVideoTimingInfo = "main" === this.loaderType_ && trackInfo && trackInfo.hasVideo;
                                useVideoTimingInfo && (firstVideoFrameTimeForData = segmentInfo.videoTimingInfo.start), // aspects), so make any changes required for a more accurate start time.
                                // Don't set the end time yet, as the segment may not be finished processing.
                                segmentInfo.timingInfo.start = this.trueSegmentStart_({
                                    currentStart: segmentInfo.timingInfo.start,
                                    playlist: segmentInfo.playlist,
                                    mediaIndex: segmentInfo.mediaIndex,
                                    currentVideoTimestampOffset: this.sourceUpdater_.videoTimestampOffset(),
                                    useVideoTimingInfo: useVideoTimingInfo,
                                    firstVideoFrameTimeForData: firstVideoFrameTimeForData,
                                    videoTimingInfo: segmentInfo.videoTimingInfo,
                                    audioTimingInfo: segmentInfo.audioTimingInfo
                                });
                            } // Init segments for audio and video only need to be appended in certain cases. Now
                            // be appended or not.
                            if (// that data is about to be appended, we can check the final cases to determine
                            // whether we should append an init segment.
                            this.updateAppendInitSegmentStatus(segmentInfo, result.type), // as we use the start of the segment to offset the best guess (playlist provided)
                            // timestamp offset.
                            this.updateSourceBufferTimestampOffset_(segmentInfo), segmentInfo.isSyncRequest) {
                                // first save/update our timing info for this segment.
                                // this is what allows us to choose an accurate segment
                                // and the main reason we make a sync request.
                                this.updateTimingInfoEnd_(segmentInfo), this.syncController_.saveSegmentTimingInfo({
                                    segmentInfo: segmentInfo,
                                    shouldSaveTimelineMapping: "main" === this.loaderType_
                                });
                                var next = this.chooseNextRequest_(); // If the sync request isn't the segment that would be requested next
                                // after taking into account its timing info, do not append it.
                                if (next.mediaIndex !== segmentInfo.mediaIndex || next.partIndex !== segmentInfo.partIndex) {
                                    this.logger_("sync segment was incorrect, not appending");
                                    return;
                                } // otherwise append it like any other segment as our guess was correct.
                                this.logger_("sync segment was correct, appending");
                            } // Save some state so that in the future anything waiting on first append (and/or
                            // timestamp offset(s)) can process immediately. While the extra state isn't optimal,
                            // we need some notion of whether the timestamp offset or other relevant information
                            // has had a chance to be set.
                            segmentInfo.hasAppendedData_ = !0, this.processMetadataQueue_(), this.appendData_(segmentInfo, result);
                        } // if this request included an initialization segment, save that data
                    } // If there's anything in the call queue, then this data came later and should be
                }, _proto.updateAppendInitSegmentStatus = function(segmentInfo, type) {
                    "main" !== this.loaderType_ || "number" != typeof segmentInfo.timestampOffset || segmentInfo.changedTimestampOffset || // if the timestamp offset changed, the timeline may have changed, so we have to re-
                    // append init segments
                    (this.appendInitSegment_ = {
                        audio: !0,
                        video: !0
                    }), this.playlistOfLastInitSegment_[type] !== segmentInfo.playlist && // make sure we append init segment on playlist changes, in case the media config
                    // changed
                    (this.appendInitSegment_[type] = !0);
                }, _proto.getInitSegmentAndUpdateState_ = function(_ref4) {
                    var type = _ref4.type, initSegment = _ref4.initSegment, map = _ref4.map, playlist = _ref4.playlist; // "The EXT-X-MAP tag specifies how to obtain the Media Initialization Section
                    // (Section 3) required to parse the applicable Media Segments.  It applies to every
                    // Media Segment that appears after it in the Playlist until the next EXT-X-MAP tag
                    // or until the end of the playlist."
                    // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.5
                    if (map) {
                        var id = initSegmentId(map);
                        if (this.activeInitSegmentId_ === id) // don't need to re-append the init segment if the ID matches
                        return null;
                         // a map-specified init segment takes priority over any transmuxed (or otherwise
                        // obtained) init segment
                        //
                        // this also caches the init segment for later use
                        initSegment = this.initSegmentForMap(map, !0).bytes, this.activeInitSegmentId_ = id;
                    } // We used to always prepend init segments for video, however, that shouldn't be
                    return(// necessary. Instead, we should only append on changes, similar to what we've always
                    // done for audio. This is more important (though may not be that important) for
                    // frame-by-frame appending for LHLS, simply because of the increased quantity of
                    // appends.
                    initSegment && this.appendInitSegment_[type] ? (// Make sure we track the playlist that we last used for the init segment, so that
                    // we can re-append the init segment in the event that we get data from a new
                    // playlist. Discontinuities and track changes are handled in other sections.
                    this.playlistOfLastInitSegment_[type] = playlist, this.appendInitSegment_[type] = !1, // we are appending the muxer init segment
                    this.activeInitSegmentId_ = null, initSegment) : null);
                }, _proto.handleQuotaExceededError_ = function(_ref5, error) {
                    var _this3 = this, segmentInfo = _ref5.segmentInfo, type = _ref5.type, bytes = _ref5.bytes, audioBuffered = this.sourceUpdater_.audioBuffered(), videoBuffered = this.sourceUpdater_.videoBuffered();
                    audioBuffered.length > 1 && this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the audio buffer: " + timeRangesToArray(audioBuffered).join(", ")), videoBuffered.length > 1 && this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the video buffer: " + timeRangesToArray(videoBuffered).join(", "));
                    var audioBufferStart = audioBuffered.length ? audioBuffered.start(0) : 0, audioBufferEnd = audioBuffered.length ? audioBuffered.end(audioBuffered.length - 1) : 0, videoBufferStart = videoBuffered.length ? videoBuffered.start(0) : 0, videoBufferEnd = videoBuffered.length ? videoBuffered.end(videoBuffered.length - 1) : 0;
                    if (audioBufferEnd - audioBufferStart <= 1 && videoBufferEnd - videoBufferStart <= 1) {
                        // Can't remove enough buffer to make room for new segment (or the browser doesn't
                        // allow for appends of segments this size). In the future, it may be possible to
                        // split up the segment and append in pieces, but for now, error out this playlist
                        // in an attempt to switch to a more manageable rendition.
                        this.logger_("On QUOTA_EXCEEDED_ERR, single segment too large to append to buffer, triggering an error. Appended byte length: " + bytes.byteLength + ", audio buffer: " + timeRangesToArray(audioBuffered).join(", ") + ", video buffer: " + timeRangesToArray(videoBuffered).join(", ") + ", "), this.error({
                            message: "Quota exceeded error with append of a single segment of content",
                            excludeUntil: 1 / 0
                        }), this.trigger("error");
                        return;
                    } // To try to resolve the quota exceeded error, clear back buffer and retry. This means
                    // that the segment-loader should block on future events until this one is handled, so
                    // that it doesn't keep moving onto further segments. Adding the call to the call
                    // queue will prevent further appends until waitingOnRemove_ and
                    // quotaExceededErrorRetryTimeout_ are cleared.
                    //
                    // Note that this will only block the current loader. In the case of demuxed content,
                    // the other load may keep filling as fast as possible. In practice, this should be
                    // OK, as it is a rare case when either audio has a high enough bitrate to fill up a
                    // source buffer, or video fills without enough room for audio to append (and without
                    // the availability of clearing out seconds of back buffer to make room for audio).
                    // But it might still be good to handle this case in the future as a TODO.
                    this.waitingOnRemove_ = !0, this.callQueue_.push(this.appendToSourceBuffer_.bind(this, {
                        segmentInfo: segmentInfo,
                        type: type,
                        bytes: bytes
                    }));
                    // before retrying.
                    var timeToRemoveUntil = this.currentTime_() - 1;
                    this.logger_("On QUOTA_EXCEEDED_ERR, removing audio/video from 0 to " + timeToRemoveUntil), this.remove(0, timeToRemoveUntil, function() {
                        _this3.logger_("On QUOTA_EXCEEDED_ERR, retrying append in 1s"), _this3.waitingOnRemove_ = !1, // attempts (since we can't clear less than the minimum)
                        _this3.quotaExceededErrorRetryTimeout_ = global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(function() {
                            _this3.logger_("On QUOTA_EXCEEDED_ERR, re-processing call queue"), _this3.quotaExceededErrorRetryTimeout_ = null, _this3.processCallQueue_();
                        }, 1000);
                    }, !0);
                }, _proto.handleAppendError_ = function(_ref6, error) {
                    var segmentInfo = _ref6.segmentInfo, type = _ref6.type, bytes = _ref6.bytes; // if there's no error, nothing to do
                    if (error) {
                        if (22 === error.code) {
                            this.handleQuotaExceededError_({
                                segmentInfo: segmentInfo,
                                type: type,
                                bytes: bytes
                            }); // A quota exceeded error should be recoverable with a future re-append, so no need
                            // to trigger an append error.
                            return;
                        }
                        this.logger_("Received non QUOTA_EXCEEDED_ERR on append", error), this.error(type + " append of " + bytes.length + "b failed for segment #" + segmentInfo.mediaIndex + " in playlist " + segmentInfo.playlist.id), // (see https://w3c.github.io/media-source/#sourcebuffer-append-error).
                        //
                        // Trigger a special error so that it can be handled separately from normal,
                        // recoverable errors.
                        this.trigger("appenderror");
                    }
                }, _proto.appendToSourceBuffer_ = function(_ref7) {
                    var segmentInfo = _ref7.segmentInfo, type = _ref7.type, initSegment = _ref7.initSegment, data = _ref7.data, bytes = _ref7.bytes; // If this is a re-append, bytes were already created and don't need to be recreated
                    if (!bytes) {
                        var segments = [
                            data
                        ], byteLength = data.byteLength;
                        initSegment && (// if the media initialization segment is changing, append it before the content
                        // segment
                        segments.unshift(initSegment), byteLength += initSegment.byteLength), // haven't yet tested that, and prepending is how we have always done things.
                        bytes = concatSegments({
                            bytes: byteLength,
                            segments: segments
                        });
                    }
                    this.sourceUpdater_.appendBuffer({
                        segmentInfo: segmentInfo,
                        type: type,
                        bytes: bytes
                    }, this.handleAppendError_.bind(this, {
                        segmentInfo: segmentInfo,
                        type: type,
                        bytes: bytes
                    }));
                }, _proto.handleSegmentTimingInfo_ = function(type, requestId, segmentTimingInfo) {
                    if (this.pendingSegment_ && requestId === this.pendingSegment_.requestId) {
                        var segment = this.pendingSegment_.segment, timingInfoProperty = type + "TimingInfo";
                        segment[timingInfoProperty] || (segment[timingInfoProperty] = {}), segment[timingInfoProperty].transmuxerPrependedSeconds = segmentTimingInfo.prependedContentDuration || 0, segment[timingInfoProperty].transmuxedPresentationStart = segmentTimingInfo.start.presentation, segment[timingInfoProperty].transmuxedDecodeStart = segmentTimingInfo.start.decode, segment[timingInfoProperty].transmuxedPresentationEnd = segmentTimingInfo.end.presentation, segment[timingInfoProperty].transmuxedDecodeEnd = segmentTimingInfo.end.decode, segment[timingInfoProperty].baseMediaDecodeTime = segmentTimingInfo.baseMediaDecodeTime;
                    }
                }, _proto.appendData_ = function(segmentInfo, result) {
                    var type = result.type, data = result.data;
                    if (data && data.byteLength && ("audio" !== type || !this.audioDisabled_)) {
                        var initSegment = this.getInitSegmentAndUpdateState_({
                            type: type,
                            initSegment: result.initSegment,
                            playlist: segmentInfo.playlist,
                            map: segmentInfo.isFmp4 ? segmentInfo.segment.map : null
                        });
                        this.appendToSourceBuffer_({
                            segmentInfo: segmentInfo,
                            type: type,
                            initSegment: initSegment,
                            data: data
                        });
                    }
                }, /**
                 * load a specific segment from a request into the buffer
                 *
                 * @private
                 */ _proto.loadSegment_ = function(segmentInfo) {
                    var _this4 = this;
                    if (this.state = "WAITING", this.pendingSegment_ = segmentInfo, this.trimBackBuffer_(segmentInfo), "number" == typeof segmentInfo.timestampOffset && this.transmuxer_ && this.transmuxer_.postMessage({
                        action: "clearAllMp4Captions"
                    }), !this.hasEnoughInfoToLoad_()) {
                        this.loadQueue_.push(function() {
                            // regenerate the audioAppendStart, timestampOffset, etc as they
                            // may have changed since this function was added to the queue.
                            var options = (0, _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_15__ /* ["default"] */ .Z)({}, segmentInfo, {
                                forceTimestampOffset: !0
                            });
                            (0, _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_15__ /* ["default"] */ .Z)(segmentInfo, _this4.generateSegmentInfo_(options)), _this4.isPendingTimestampOffset_ = !1, _this4.updateTransmuxerAndRequestSegment_(segmentInfo);
                        });
                        return;
                    }
                    this.updateTransmuxerAndRequestSegment_(segmentInfo);
                }, _proto.updateTransmuxerAndRequestSegment_ = function(segmentInfo) {
                    var _this5 = this; // We'll update the source buffer's timestamp offset once we have transmuxed data, but
                    this.shouldUpdateTransmuxerTimestampOffset_(segmentInfo.timestampOffset) && (this.gopBuffer_.length = 0, segmentInfo.gopsToAlignWith = [], this.timeMapping_ = 0, this.transmuxer_.postMessage({
                        action: "reset"
                    }), this.transmuxer_.postMessage({
                        action: "setTimestampOffset",
                        timestampOffset: segmentInfo.timestampOffset
                    }));
                    var simpleSegment = this.createSimplifiedSegmentObj_(segmentInfo), isEndOfStream = this.isEndOfStream_(segmentInfo.mediaIndex, segmentInfo.playlist, segmentInfo.partIndex), isWalkingForward = null !== this.mediaIndex, isDiscontinuity = segmentInfo.timeline !== this.currentTimeline_ && // currentTimeline starts at -1, so we shouldn't end the timeline switching to 0,
                    // the first timeline
                    segmentInfo.timeline > 0;
                    this.logger_("Requesting " + segmentInfoString(segmentInfo)), simpleSegment.map && !simpleSegment.map.bytes && (this.logger_("going to request init segment."), this.appendInitSegment_ = {
                        video: !0,
                        audio: !0
                    }), segmentInfo.abortRequests = mediaSegmentRequest({
                        xhr: this.vhs_.xhr,
                        xhrOptions: this.xhrOptions_,
                        decryptionWorker: this.decrypter_,
                        segment: simpleSegment,
                        abortFn: this.handleAbort_.bind(this, segmentInfo),
                        progressFn: this.handleProgress_.bind(this),
                        trackInfoFn: this.handleTrackInfo_.bind(this),
                        timingInfoFn: this.handleTimingInfo_.bind(this),
                        videoSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "video", segmentInfo.requestId),
                        audioSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "audio", segmentInfo.requestId),
                        captionsFn: this.handleCaptions_.bind(this),
                        isEndOfTimeline: isEndOfStream || isWalkingForward && isDiscontinuity,
                        endedTimelineFn: function() {
                            _this5.logger_("received endedtimeline callback");
                        },
                        id3Fn: this.handleId3_.bind(this),
                        dataFn: this.handleData_.bind(this),
                        doneFn: this.segmentRequestFinished_.bind(this),
                        onTransmuxerLog: function(_ref8) {
                            var message = _ref8.message, level = _ref8.level, stream = _ref8.stream;
                            _this5.logger_(segmentInfoString(segmentInfo) + " logged from transmuxer stream " + stream + " as a " + level + ": " + message);
                        }
                    });
                }, /**
                 * trim the back buffer so that we don't have too much data
                 * in the source buffer
                 *
                 * @private
                 *
                 * @param {Object} segmentInfo - the current segment
                 */ _proto.trimBackBuffer_ = function(segmentInfo) {
                    var removeToTime = safeBackBufferTrimTime(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10); // Chrome has a hard limit of 150MB of
                    // buffer and a very conservative "garbage collector"
                    // We manually clear out the old buffer to ensure
                    // we don't trigger the QuotaExceeded error
                    // on the source buffer during subsequent appends
                    removeToTime > 0 && this.remove(0, removeToTime);
                }, /**
                 * created a simplified copy of the segment object with just the
                 * information necessary to perform the XHR and decryption
                 *
                 * @private
                 *
                 * @param {Object} segmentInfo - the current segment
                 * @return {Object} a simplified segment object copy
                 */ _proto.createSimplifiedSegmentObj_ = function(segmentInfo) {
                    var segment = segmentInfo.segment, part = segmentInfo.part, simpleSegment = {
                        resolvedUri: part ? part.resolvedUri : segment.resolvedUri,
                        byterange: part ? part.byterange : segment.byterange,
                        requestId: segmentInfo.requestId,
                        transmuxer: segmentInfo.transmuxer,
                        audioAppendStart: segmentInfo.audioAppendStart,
                        gopsToAlignWith: segmentInfo.gopsToAlignWith,
                        part: segmentInfo.part
                    }, previousSegment = segmentInfo.playlist.segments[segmentInfo.mediaIndex - 1];
                    if (previousSegment && previousSegment.timeline === segment.timeline && (previousSegment.videoTimingInfo ? simpleSegment.baseStartTime = previousSegment.videoTimingInfo.transmuxedDecodeEnd : previousSegment.audioTimingInfo && (simpleSegment.baseStartTime = previousSegment.audioTimingInfo.transmuxedDecodeEnd)), segment.key) {
                        // if the media sequence is greater than 2^32, the IV will be incorrect
                        // assuming 10s segments, that would be about 1300 years
                        var iv = segment.key.iv || new Uint32Array([
                            0,
                            0,
                            0,
                            segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence
                        ]);
                        simpleSegment.key = this.segmentKey(segment.key), simpleSegment.key.iv = iv;
                    }
                    return segment.map && (simpleSegment.map = this.initSegmentForMap(segment.map)), simpleSegment;
                }, _proto.saveTransferStats_ = function(stats) {
                    // every request counts as a media request even if it has been aborted
                    // or canceled due to a timeout
                    this.mediaRequests += 1, stats && (this.mediaBytesTransferred += stats.bytesReceived, this.mediaTransferDuration += stats.roundTripTime);
                }, _proto.saveBandwidthRelatedStats_ = function(duration, stats) {
                    if (// byteLength will be used for throughput, and should be based on bytes receieved,
                    // which we only know at the end of the request and should reflect total bytes
                    // downloaded rather than just bytes processed from components of the segment
                    this.pendingSegment_.byteLength = stats.bytesReceived, duration < MIN_SEGMENT_DURATION_TO_SAVE_STATS) {
                        this.logger_("Ignoring segment's bandwidth because its duration of " + duration + " is less than the min to record " + MIN_SEGMENT_DURATION_TO_SAVE_STATS);
                        return;
                    }
                    this.bandwidth = stats.bandwidth, this.roundTrip = stats.roundTripTime;
                }, _proto.handleTimeout_ = function() {
                    // although the VTT segment loader bandwidth isn't really used, it's good to
                    // maintain functinality between segment loaders
                    this.mediaRequestsTimedout += 1, this.bandwidth = 1, this.roundTrip = NaN, this.trigger("bandwidthupdate");
                }, /**
                 * Handle the callback from the segmentRequest function and set the
                 * associated SegmentLoader state and errors if necessary
                 *
                 * @private
                 */ _proto.segmentRequestFinished_ = function(error, simpleSegment, result) {
                    // TODO handle special cases, e.g., muxed audio/video but only audio in the segment
                    // check the call queue directly since this function doesn't need to deal with any
                    // data, and can continue even if the source buffers are not set up and we didn't get
                    // any data from the segment
                    if (this.callQueue_.length) {
                        this.callQueue_.push(this.segmentRequestFinished_.bind(this, error, simpleSegment, result));
                        return;
                    }
                    if (this.saveTransferStats_(simpleSegment.stats), this.pendingSegment_ && simpleSegment.requestId === this.pendingSegment_.requestId) {
                        if (error) {
                            if (this.pendingSegment_ = null, this.state = "READY", error.code === REQUEST_ERRORS.ABORTED) return;
                            // set the bandwidth to a very low value and trigger an ABR switch to
                            // take emergency action
                            if (this.pause(), error.code === REQUEST_ERRORS.TIMEOUT) {
                                this.handleTimeout_();
                                return;
                            } // if control-flow has arrived here, then the error is real
                            // emit an error event to blacklist the current playlist
                            this.mediaRequestsErrored += 1, this.error(error), this.trigger("error");
                            return;
                        }
                        var segmentInfo = this.pendingSegment_; // the response was a success so set any bandwidth stats the request
                        // generated for ABR purposes
                        this.saveBandwidthRelatedStats_(segmentInfo.duration, simpleSegment.stats), segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests, result.gopInfo && (this.gopBuffer_ = updateGopBuffer(this.gopBuffer_, result.gopInfo, this.safeAppend_)), // state away from loading until we are officially done loading the segment data.
                        this.state = "APPENDING", this.trigger("appending"), this.waitForAppendsToComplete_(segmentInfo);
                    } // the request was aborted and the SegmentLoader has already started
                }, _proto.setTimeMapping_ = function(timeline) {
                    var timelineMapping = this.syncController_.mappingForTimeline(timeline);
                    null !== timelineMapping && (this.timeMapping_ = timelineMapping);
                }, _proto.updateMediaSecondsLoaded_ = function(segment) {
                    "number" == typeof segment.start && "number" == typeof segment.end ? this.mediaSecondsLoaded += segment.end - segment.start : this.mediaSecondsLoaded += segment.duration;
                }, _proto.shouldUpdateTransmuxerTimestampOffset_ = function(timestampOffset) {
                    return null !== timestampOffset && ("main" === this.loaderType_ && timestampOffset !== this.sourceUpdater_.videoTimestampOffset() || !this.audioDisabled_ && timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) // note that we're potentially using the same timestamp offset for both video and
                    ;
                }, _proto.trueSegmentStart_ = function(_ref9) {
                    var currentStart = _ref9.currentStart, playlist = _ref9.playlist, mediaIndex = _ref9.mediaIndex, firstVideoFrameTimeForData = _ref9.firstVideoFrameTimeForData, currentVideoTimestampOffset = _ref9.currentVideoTimestampOffset, useVideoTimingInfo = _ref9.useVideoTimingInfo, videoTimingInfo = _ref9.videoTimingInfo, audioTimingInfo = _ref9.audioTimingInfo;
                    if (void 0 !== currentStart) // if start was set once, keep using it
                    return currentStart;
                    if (!useVideoTimingInfo) return audioTimingInfo.start;
                    var previousSegment = playlist.segments[mediaIndex - 1]; // The start of a segment should be the start of the first full frame contained
                    return(// within that segment. Since the transmuxer maintains a cache of incomplete data
                    // from and/or the last frame seen, the start time may reflect a frame that starts
                    // in the previous segment. Check for that case and ensure the start time is
                    // accurate for the segment.
                    0 !== mediaIndex && previousSegment && void 0 !== previousSegment.start && previousSegment.end === firstVideoFrameTimeForData + currentVideoTimestampOffset ? videoTimingInfo.start : firstVideoFrameTimeForData);
                }, _proto.waitForAppendsToComplete_ = function(segmentInfo) {
                    var trackInfo = this.getCurrentMediaInfo_(segmentInfo);
                    if (!trackInfo) {
                        this.error({
                            message: "No starting media returned, likely due to an unsupported media format.",
                            blacklistDuration: 1 / 0
                        }), this.trigger("error");
                        return;
                    } // Although transmuxing is done, appends may not yet be finished. Throw a marker
                    // on each queue this loader is responsible for to ensure that the appends are
                    // complete.
                    var hasAudio = trackInfo.hasAudio, hasVideo = trackInfo.hasVideo, isMuxed = trackInfo.isMuxed, waitForVideo = "main" === this.loaderType_ && hasVideo, waitForAudio = !this.audioDisabled_ && hasAudio && !isMuxed;
                    if (segmentInfo.waitingOnAppends = 0, !segmentInfo.hasAppendedData_) {
                        segmentInfo.timingInfo || "number" != typeof segmentInfo.timestampOffset || // When there's no audio or video data in the segment, there's no audio or video
                        // timing information.
                        //
                        // If there's no audio or video timing information, then the timestamp offset
                        // can't be adjusted to the appropriate value for the transmuxer and source
                        // buffers.
                        //
                        // Therefore, the next segment should be used to set the timestamp offset.
                        (this.isPendingTimestampOffset_ = !0), segmentInfo.timingInfo = {
                            start: 0
                        }, segmentInfo.waitingOnAppends++, this.isPendingTimestampOffset_ || (// update the timestampoffset
                        this.updateSourceBufferTimestampOffset_(segmentInfo), // no video/audio data.
                        this.processMetadataQueue_()), this.checkAppendsDone_(segmentInfo);
                        return;
                    } // Since source updater could call back synchronously, do the increments first.
                    waitForVideo && segmentInfo.waitingOnAppends++, waitForAudio && segmentInfo.waitingOnAppends++, waitForVideo && this.sourceUpdater_.videoQueueCallback(this.checkAppendsDone_.bind(this, segmentInfo)), waitForAudio && this.sourceUpdater_.audioQueueCallback(this.checkAppendsDone_.bind(this, segmentInfo));
                }, _proto.checkAppendsDone_ = function(segmentInfo) {
                    this.checkForAbort_(segmentInfo.requestId) || (segmentInfo.waitingOnAppends--, 0 === segmentInfo.waitingOnAppends && this.handleAppendsDone_());
                }, _proto.checkForIllegalMediaSwitch = function(trackInfo) {
                    var loaderType, startingMedia, illegalMediaSwitchError = (loaderType = this.loaderType_, startingMedia = this.getCurrentMediaInfo_(), // Although these checks should most likely cover non 'main' types, for now it narrows
                    // the scope of our checks.
                    "main" === loaderType && startingMedia && trackInfo ? trackInfo.hasAudio || trackInfo.hasVideo ? startingMedia.hasVideo && !trackInfo.hasVideo ? "Only audio found in segment when we expected video. We can't switch to audio only from a stream that had video. To get rid of this message, please add codec information to the manifest." : !startingMedia.hasVideo && trackInfo.hasVideo ? "Video found in segment when we expected only audio. We can't switch to a stream with video from an audio only stream. To get rid of this message, please add codec information to the manifest." : null : "Neither audio nor video found in segment." : null);
                    return !!illegalMediaSwitchError && (this.error({
                        message: illegalMediaSwitchError,
                        blacklistDuration: 1 / 0
                    }), this.trigger("error"), !0);
                }, _proto.updateSourceBufferTimestampOffset_ = function(segmentInfo) {
                    if (null !== segmentInfo.timestampOffset && // we don't yet have the start for whatever media type (video or audio) has
                    // priority, timing-wise, so we must wait
                    "number" == typeof segmentInfo.timingInfo.start && !// already updated the timestamp offset for this segment
                    segmentInfo.changedTimestampOffset && // the alt audio loader should not be responsible for setting the timestamp offset
                    "main" === this.loaderType_) {
                        var didChange = !1; // Primary timing goes by video, and audio is trimmed in the transmuxer, meaning that
                        // the timing info here comes from video. In the event that the audio is longer than
                        // the video, this will trim the start of the audio.
                        // This also trims any offset from 0 at the beginning of the media
                        segmentInfo.timestampOffset -= segmentInfo.timingInfo.start, // timestamp offset. Retaining this bit of state prevents us from updating in the
                        // future (within the same segment), however, there may be a better way to handle it.
                        segmentInfo.changedTimestampOffset = !0, segmentInfo.timestampOffset !== this.sourceUpdater_.videoTimestampOffset() && (this.sourceUpdater_.videoTimestampOffset(segmentInfo.timestampOffset), didChange = !0), segmentInfo.timestampOffset !== this.sourceUpdater_.audioTimestampOffset() && (this.sourceUpdater_.audioTimestampOffset(segmentInfo.timestampOffset), didChange = !0), didChange && this.trigger("timestampoffset");
                    }
                }, _proto.updateTimingInfoEnd_ = function(segmentInfo) {
                    segmentInfo.timingInfo = segmentInfo.timingInfo || {};
                    var trackInfo = this.getMediaInfo_(), prioritizedTimingInfo = "main" === this.loaderType_ && trackInfo && trackInfo.hasVideo && segmentInfo.videoTimingInfo ? segmentInfo.videoTimingInfo : segmentInfo.audioTimingInfo;
                    prioritizedTimingInfo && (segmentInfo.timingInfo.end = "number" // End time may not exist in a case where we aren't parsing the full segment (one
                     == typeof prioritizedTimingInfo.end ? // end time.
                    prioritizedTimingInfo.end : prioritizedTimingInfo.start + segmentInfo.duration);
                }, /**
                 * callback to run when appendBuffer is finished. detects if we are
                 * in a good state to do things with the data we got, or if we need
                 * to wait for more
                 *
                 * @private
                 */ _proto.handleAppendsDone_ = function() {
                    if (this.pendingSegment_ && this.trigger("appendsdone"), !this.pendingSegment_) {
                        this.state = "READY", this.paused() || this.monitorBuffer_();
                        return;
                    }
                    var segmentInfo = this.pendingSegment_; // Now that the end of the segment has been reached, we can set the end time. It's
                    // best to wait until all appends are done so we're sure that the primary media is
                    // finished (and we have its end time).
                    this.updateTimingInfoEnd_(segmentInfo), this.shouldSaveSegmentTimingInfo_ && // Timeline mappings should only be saved for the main loader. This is for multiple
                    // reasons:
                    //
                    // 1) Only one mapping is saved per timeline, meaning that if both the audio loader
                    //    and the main loader try to save the timeline mapping, whichever comes later
                    //    will overwrite the first. In theory this is OK, as the mappings should be the
                    //    same, however, it breaks for (2)
                    // 2) In the event of a live stream, the initial live point will make for a somewhat
                    //    arbitrary mapping. If audio and video streams are not perfectly in-sync, then
                    //    the mapping will be off for one of the streams, dependent on which one was
                    //    first saved (see (1)).
                    // 3) Primary timing goes by video in VHS, so the mapping should be video.
                    //
                    // Since the audio loader will wait for the main loader to load the first segment,
                    // the main loader will save the first timeline mapping, and ensure that there won't
                    // be a case where audio loads two segments without saving a mapping (thus leading
                    // to missing segment timing info).
                    this.syncController_.saveSegmentTimingInfo({
                        segmentInfo: segmentInfo,
                        shouldSaveTimelineMapping: "main" === this.loaderType_
                    });
                    var segmentDurationMessage = getTroublesomeSegmentDurationMessage(segmentInfo, this.sourceType_);
                    if (segmentDurationMessage && ("warn" === segmentDurationMessage.severity ? videojs.log.warn(segmentDurationMessage.message) : this.logger_(segmentDurationMessage.message)), this.recordThroughput_(segmentInfo), this.pendingSegment_ = null, this.state = "READY", segmentInfo.isSyncRequest && (this.trigger("syncinfoupdate"), !segmentInfo.hasAppendedData_)) {
                        this.logger_("Throwing away un-appended sync request " + segmentInfoString(segmentInfo));
                        return;
                    }
                    this.logger_("Appended " + segmentInfoString(segmentInfo)), this.addSegmentMetadataCue_(segmentInfo), this.fetchAtBuffer_ = !0, this.currentTimeline_ === segmentInfo.timeline || (this.timelineChangeController_.lastTimelineChange({
                        type: this.loaderType_,
                        from: this.currentTimeline_,
                        to: segmentInfo.timeline
                    }), "main" !== this.loaderType_ || this.audioDisabled_ || this.timelineChangeController_.lastTimelineChange({
                        type: "audio",
                        from: this.currentTimeline_,
                        to: segmentInfo.timeline
                    })), this.currentTimeline_ = segmentInfo.timeline, // the following conditional otherwise it may consider this a bad "guess"
                    // and attempt to resync when the post-update seekable window and live
                    // point would mean that this was the perfect segment to fetch
                    this.trigger("syncinfoupdate");
                    var segment = segmentInfo.segment, part = segmentInfo.part, badSegmentGuess = segment.end && this.currentTime_() - segment.end > 3 * segmentInfo.playlist.targetDuration, badPartGuess = part && part.end && this.currentTime_() - part.end > 3 * segmentInfo.playlist.partTargetDuration;
                    // the currentTime_ that means that our conservative guess was too conservative.
                    // In that case, reset the loader state so that we try to use any information gained
                    // from the previous request to create a new, more accurate, sync-point.
                    if (badSegmentGuess || badPartGuess) {
                        this.logger_("bad " + (badSegmentGuess ? "segment" : "part") + " " + segmentInfoString(segmentInfo)), this.resetEverything();
                        return;
                    }
                    null !== this.mediaIndex && this.trigger("bandwidthupdate"), this.trigger("progress"), this.mediaIndex = segmentInfo.mediaIndex, this.partIndex = segmentInfo.partIndex, this.isEndOfStream_(segmentInfo.mediaIndex, segmentInfo.playlist, segmentInfo.partIndex) && this.endOfStream(), this.trigger("appended"), segmentInfo.hasAppendedData_ && this.mediaAppends++, this.paused() || this.monitorBuffer_();
                }, /**
                 * Records the current throughput of the decrypt, transmux, and append
                 * portion of the semgment pipeline. `throughput.rate` is a the cumulative
                 * moving average of the throughput. `throughput.count` is the number of
                 * data points in the average.
                 *
                 * @private
                 * @param {Object} segmentInfo the object returned by loadSegment
                 */ _proto.recordThroughput_ = function(segmentInfo) {
                    if (segmentInfo.duration < MIN_SEGMENT_DURATION_TO_SAVE_STATS) {
                        this.logger_("Ignoring segment's throughput because its duration of " + segmentInfo.duration + " is less than the min to record " + MIN_SEGMENT_DURATION_TO_SAVE_STATS);
                        return;
                    }
                    var rate = this.throughput.rate, segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1, segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8000); // Add one to the time to ensure that we don't accidentally attempt to divide
                    //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)
                    this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;
                }, /**
                 * Adds a cue to the segment-metadata track with some metadata information about the
                 * segment
                 *
                 * @private
                 * @param {Object} segmentInfo
                 *        the object returned by loadSegment
                 * @method addSegmentMetadataCue_
                 */ _proto.addSegmentMetadataCue_ = function(segmentInfo) {
                    if (this.segmentMetadataTrack_) {
                        var segment = segmentInfo.segment, start = segment.start, end = segment.end;
                        if (finite(start) && finite(end)) {
                            removeCuesFromTrack(start, end, this.segmentMetadataTrack_);
                            var Cue = global_window__WEBPACK_IMPORTED_MODULE_0___default().WebKitDataCue || global_window__WEBPACK_IMPORTED_MODULE_0___default().VTTCue, value = {
                                custom: segment.custom,
                                dateTimeObject: segment.dateTimeObject,
                                dateTimeString: segment.dateTimeString,
                                bandwidth: segmentInfo.playlist.attributes.BANDWIDTH,
                                resolution: segmentInfo.playlist.attributes.RESOLUTION,
                                codecs: segmentInfo.playlist.attributes.CODECS,
                                byteLength: segmentInfo.byteLength,
                                uri: segmentInfo.uri,
                                timeline: segmentInfo.timeline,
                                playlist: segmentInfo.playlist.id,
                                start: start,
                                end: end
                            }, cue = new Cue(start, end, JSON.stringify(value));
                            // the differences of WebKitDataCue in safari and VTTCue in other browsers
                            cue.value = value, this.segmentMetadataTrack_.addCue(cue);
                        }
                    }
                }, SegmentLoader;
            }(videojs.EventTarget);
            function noop() {}
            var toTitleCase = function(string) {
                return "string" != typeof string ? string : string.replace(/./, function(w) {
                    return w.toUpperCase();
                });
            }, bufferTypes = [
                "video",
                "audio"
            ], _updating = function(type, sourceUpdater) {
                var sourceBuffer = sourceUpdater[type + "Buffer"];
                return sourceBuffer && sourceBuffer.updating || sourceUpdater.queuePending[type];
            }, nextQueueIndexOfType = function(type, queue) {
                for(var i = 0; i < queue.length; i++){
                    var queueEntry = queue[i];
                    if ("mediaSource" === queueEntry.type) break;
                    if (queueEntry.type === type) return i;
                }
                return null;
            }, shiftQueue = function shiftQueue(type, sourceUpdater) {
                if (0 !== sourceUpdater.queue.length) {
                    var queueIndex = 0, queueEntry = sourceUpdater.queue[queueIndex];
                    if ("mediaSource" === queueEntry.type) {
                        sourceUpdater.updating() || "closed" === sourceUpdater.mediaSource.readyState || (sourceUpdater.queue.shift(), queueEntry.action(sourceUpdater), queueEntry.doneFn && queueEntry.doneFn(), // Source actions process synchronously. Therefore, both audio and video source
                        // buffers are now clear to process the next queue entries.
                        shiftQueue("audio", sourceUpdater), shiftQueue("video", sourceUpdater)); // Media Source actions require both source buffers, so if the media source action
                        // couldn't process yet (because one or both source buffers are busy), block other
                        // queue actions until both are available and the media source action can process.
                        return;
                    }
                    if (!("mediaSource" === type || !sourceUpdater.ready() || "closed" === sourceUpdater.mediaSource.readyState || _updating(type, sourceUpdater))) {
                        if (queueEntry.type !== type) {
                            if (null === (queueIndex = nextQueueIndexOfType(type, sourceUpdater.queue))) // Either there's no queue entry that uses this source buffer type in the queue, or
                            // there's a media source queue entry before the next entry of this type, in which
                            // case wait for that action to process first.
                            return;
                            queueEntry = sourceUpdater.queue[queueIndex];
                        }
                        if (sourceUpdater.queue.splice(queueIndex, 1), //
                        // The queue pending operation must be set before the action is performed in the event
                        // that the action results in a synchronous event that is acted upon. For instance, if
                        // an exception is thrown that can be handled, it's possible that new actions will be
                        // appended to an empty queue and immediately executed, but would not have the correct
                        // pending information if this property was set after the action was performed.
                        sourceUpdater.queuePending[type] = queueEntry, queueEntry.action(type, sourceUpdater), !queueEntry.doneFn) {
                            // synchronous operation, process next entry
                            sourceUpdater.queuePending[type] = null, shiftQueue(type, sourceUpdater);
                            return;
                        }
                    } // Media source queue entries don't need to consider whether the source updater is
                }
            }, cleanupBuffer = function(type, sourceUpdater) {
                var buffer = sourceUpdater[type + "Buffer"], titleType = toTitleCase(type);
                buffer && (buffer.removeEventListener("updateend", sourceUpdater["on" + titleType + "UpdateEnd_"]), buffer.removeEventListener("error", sourceUpdater["on" + titleType + "Error_"]), sourceUpdater.codecs[type] = null, sourceUpdater[type + "Buffer"] = null);
            }, inSourceBuffers = function(mediaSource, sourceBuffer) {
                return mediaSource && sourceBuffer && -1 !== Array.prototype.indexOf.call(mediaSource.sourceBuffers, sourceBuffer);
            }, actions = {
                appendBuffer: function(bytes, segmentInfo, onError) {
                    return function(type, sourceUpdater) {
                        var sourceBuffer = sourceUpdater[type + "Buffer"]; // can't do anything if the media source / source buffer is null
                        // or the media source does not contain this source buffer.
                        if (inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {
                            sourceUpdater.logger_("Appending segment " + segmentInfo.mediaIndex + "'s " + bytes.length + " bytes to " + type + "Buffer");
                            try {
                                sourceBuffer.appendBuffer(bytes);
                            } catch (e) {
                                sourceUpdater.logger_("Error with code " + e.code + " " + (22 === e.code ? "(QUOTA_EXCEEDED_ERR) " : "") + "when appending segment " + segmentInfo.mediaIndex + " to " + type + "Buffer"), sourceUpdater.queuePending[type] = null, onError(e);
                            }
                        }
                    };
                },
                remove: function(start, end) {
                    return function(type, sourceUpdater) {
                        var sourceBuffer = sourceUpdater[type + "Buffer"]; // can't do anything if the media source / source buffer is null
                        // or the media source does not contain this source buffer.
                        if (inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {
                            sourceUpdater.logger_("Removing " + start + " to " + end + " from " + type + "Buffer");
                            try {
                                sourceBuffer.remove(start, end);
                            } catch (e) {
                                sourceUpdater.logger_("Remove " + start + " to " + end + " from " + type + "Buffer failed");
                            }
                        }
                    };
                },
                timestampOffset: function(offset) {
                    return function(type, sourceUpdater) {
                        var sourceBuffer = sourceUpdater[type + "Buffer"]; // can't do anything if the media source / source buffer is null
                        // or the media source does not contain this source buffer.
                        inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer) && (sourceUpdater.logger_("Setting " + type + "timestampOffset to " + offset), sourceBuffer.timestampOffset = offset);
                    };
                },
                callback: function(_callback) {
                    return function(type, sourceUpdater) {
                        _callback();
                    };
                },
                endOfStream: function(error) {
                    return function(sourceUpdater) {
                        if ("open" === sourceUpdater.mediaSource.readyState) {
                            sourceUpdater.logger_("Calling mediaSource endOfStream(" + (error || "") + ")");
                            try {
                                sourceUpdater.mediaSource.endOfStream(error);
                            } catch (e) {
                                videojs.log.warn("Failed to call media source endOfStream", e);
                            }
                        }
                    };
                },
                duration: function(_duration) {
                    return function(sourceUpdater) {
                        sourceUpdater.logger_("Setting mediaSource duration to " + _duration);
                        try {
                            sourceUpdater.mediaSource.duration = _duration;
                        } catch (e) {
                            videojs.log.warn("Failed to set media source duration", e);
                        }
                    };
                },
                abort: function() {
                    return function(type, sourceUpdater) {
                        if ("open" === sourceUpdater.mediaSource.readyState) {
                            var sourceBuffer = sourceUpdater[type + "Buffer"]; // can't do anything if the media source / source buffer is null
                            // or the media source does not contain this source buffer.
                            if (inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {
                                sourceUpdater.logger_("calling abort on " + type + "Buffer");
                                try {
                                    sourceBuffer.abort();
                                } catch (e) {
                                    videojs.log.warn("Failed to abort on " + type + "Buffer", e);
                                }
                            }
                        }
                    };
                },
                addSourceBuffer: function(type, codec) {
                    return function(sourceUpdater) {
                        var titleType = toTitleCase(type), mime = (0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .getMimeForCodec */ ._5)(codec);
                        sourceUpdater.logger_("Adding " + type + "Buffer with codec " + codec + " to mediaSource");
                        var sourceBuffer = sourceUpdater.mediaSource.addSourceBuffer(mime);
                        sourceBuffer.addEventListener("updateend", sourceUpdater["on" + titleType + "UpdateEnd_"]), sourceBuffer.addEventListener("error", sourceUpdater["on" + titleType + "Error_"]), sourceUpdater.codecs[type] = codec, sourceUpdater[type + "Buffer"] = sourceBuffer;
                    };
                },
                removeSourceBuffer: function(type) {
                    return function(sourceUpdater) {
                        var sourceBuffer = sourceUpdater[type + "Buffer"];
                        // or the media source does not contain this source buffer.
                        if (cleanupBuffer(type, sourceUpdater), inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {
                            sourceUpdater.logger_("Removing " + type + "Buffer with codec " + sourceUpdater.codecs[type] + " from mediaSource");
                            try {
                                sourceUpdater.mediaSource.removeSourceBuffer(sourceBuffer);
                            } catch (e) {
                                videojs.log.warn("Failed to removeSourceBuffer " + type + "Buffer", e);
                            }
                        }
                    };
                },
                changeType: function(codec) {
                    return function(type, sourceUpdater) {
                        var sourceBuffer = sourceUpdater[type + "Buffer"], mime = (0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .getMimeForCodec */ ._5)(codec);
                        // or the media source does not contain this source buffer.
                        inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer) && sourceUpdater.codecs[type] !== codec && (sourceUpdater.logger_("changing " + type + "Buffer codec from " + sourceUpdater.codecs[type] + " to " + codec), sourceBuffer.changeType(mime), sourceUpdater.codecs[type] = codec); // do not update codec if we don't need to.
                    };
                }
            }, pushQueue = function(_ref) {
                var type = _ref.type, sourceUpdater = _ref.sourceUpdater, action = _ref.action, doneFn = _ref.doneFn, name = _ref.name;
                sourceUpdater.queue.push({
                    type: type,
                    action: action,
                    doneFn: doneFn,
                    name: name
                }), shiftQueue(type, sourceUpdater);
            }, onUpdateend = function(type, sourceUpdater) {
                return function(e) {
                    // Although there should, in theory, be a pending action for any updateend receieved,
                    // there are some actions that may trigger updateend events without set definitions in
                    // the w3c spec. For instance, setting the duration on the media source may trigger
                    // updateend events on source buffers. This does not appear to be in the spec. As such,
                    // if we encounter an updateend without a corresponding pending action from our queue
                    // for that source buffer type, process the next action.
                    if (sourceUpdater.queuePending[type]) {
                        var doneFn = sourceUpdater.queuePending[type].doneFn;
                        sourceUpdater.queuePending[type] = null, doneFn && // if there's an error, report it
                        doneFn(sourceUpdater[type + "Error_"]);
                    }
                    shiftQueue(type, sourceUpdater);
                };
            }, SourceUpdater = /*#__PURE__*/ function(_videojs$EventTarget) {
                function SourceUpdater(mediaSource) {
                    var _this;
                    return (_this = _videojs$EventTarget.call(this) || this).mediaSource = mediaSource, _this.sourceopenListener_ = function() {
                        return shiftQueue("mediaSource", (0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this));
                    }, _this.mediaSource.addEventListener("sourceopen", _this.sourceopenListener_), _this.logger_ = logger("SourceUpdater"), _this.audioTimestampOffset_ = 0, _this.videoTimestampOffset_ = 0, _this.queue = [], _this.queuePending = {
                        audio: null,
                        video: null
                    }, _this.delayedAudioAppendQueue_ = [], _this.videoAppendQueued_ = !1, _this.codecs = {}, _this.onVideoUpdateEnd_ = onUpdateend("video", (0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this)), _this.onAudioUpdateEnd_ = onUpdateend("audio", (0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this)), _this.onVideoError_ = function(e) {
                        // used for debugging
                        _this.videoError_ = e;
                    }, _this.onAudioError_ = function(e) {
                        // used for debugging
                        _this.audioError_ = e;
                    }, _this.createdSourceBuffers_ = !1, _this.initializedEme_ = !1, _this.triggeredReady_ = !1, _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(SourceUpdater, _videojs$EventTarget);
                var _proto = SourceUpdater.prototype;
                return _proto.initializedEme = function() {
                    this.initializedEme_ = !0, this.triggerReady();
                }, _proto.hasCreatedSourceBuffers = function() {
                    // if false, likely waiting on one of the segment loaders to get enough data to create
                    // source buffers
                    return this.createdSourceBuffers_;
                }, _proto.hasInitializedAnyEme = function() {
                    return this.initializedEme_;
                }, _proto.ready = function() {
                    return this.hasCreatedSourceBuffers() && this.hasInitializedAnyEme();
                }, _proto.createSourceBuffers = function(codecs) {
                    this.hasCreatedSourceBuffers() || (// two add buffers.
                    this.addOrChangeSourceBuffers(codecs), this.createdSourceBuffers_ = !0, this.trigger("createdsourcebuffers"), this.triggerReady()); // the intial addOrChangeSourceBuffers will always be
                }, _proto.triggerReady = function() {
                    // only allow ready to be triggered once, this prevents the case
                    // where:
                    // 1. we trigger createdsourcebuffers
                    // 2. ie 11 synchronously initializates eme
                    // 3. the synchronous initialization causes us to trigger ready
                    // 4. We go back to the ready check in createSourceBuffers and ready is triggered again.
                    this.ready() && !this.triggeredReady_ && (this.triggeredReady_ = !0, this.trigger("ready"));
                }, /**
                 * Add a type of source buffer to the media source.
                 *
                 * @param {string} type
                 *        The type of source buffer to add.
                 *
                 * @param {string} codec
                 *        The codec to add the source buffer with.
                 */ _proto.addSourceBuffer = function(type, codec) {
                    pushQueue({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: actions.addSourceBuffer(type, codec),
                        name: "addSourceBuffer"
                    });
                }, /**
                 * call abort on a source buffer.
                 *
                 * @param {string} type
                 *        The type of source buffer to call abort on.
                 */ _proto.abort = function(type) {
                    pushQueue({
                        type: type,
                        sourceUpdater: this,
                        action: actions.abort(type),
                        name: "abort"
                    });
                }, /**
                 * Call removeSourceBuffer and remove a specific type
                 * of source buffer on the mediaSource.
                 *
                 * @param {string} type
                 *        The type of source buffer to remove.
                 */ _proto.removeSourceBuffer = function(type) {
                    if (!this.canRemoveSourceBuffer()) {
                        videojs.log.error("removeSourceBuffer is not supported!");
                        return;
                    }
                    pushQueue({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: actions.removeSourceBuffer(type),
                        name: "removeSourceBuffer"
                    });
                }, /**
                 * Whether or not the removeSourceBuffer function is supported
                 * on the mediaSource.
                 *
                 * @return {boolean}
                 *          if removeSourceBuffer can be called.
                 */ _proto.canRemoveSourceBuffer = function() {
                    // IE reports that it supports removeSourceBuffer, but often throws
                    // errors when attempting to use the function. So we report that it
                    // does not support removeSourceBuffer. As of Firefox 83 removeSourceBuffer
                    // throws errors, so we report that it does not support this as well.
                    return !videojs.browser.IE_VERSION && !videojs.browser.IS_FIREFOX && global_window__WEBPACK_IMPORTED_MODULE_0___default().MediaSource && global_window__WEBPACK_IMPORTED_MODULE_0___default().MediaSource.prototype && "function" == typeof global_window__WEBPACK_IMPORTED_MODULE_0___default().MediaSource.prototype.removeSourceBuffer;
                }, /**
                 * Whether or not the changeType function is supported
                 * on our SourceBuffers.
                 *
                 * @return {boolean}
                 *         if changeType can be called.
                 */ SourceUpdater.canChangeType = function() {
                    return global_window__WEBPACK_IMPORTED_MODULE_0___default().SourceBuffer && global_window__WEBPACK_IMPORTED_MODULE_0___default().SourceBuffer.prototype && "function" == typeof global_window__WEBPACK_IMPORTED_MODULE_0___default().SourceBuffer.prototype.changeType;
                }, /**
                 * Whether or not the changeType function is supported
                 * on our SourceBuffers.
                 *
                 * @return {boolean}
                 *         if changeType can be called.
                 */ _proto.canChangeType = function() {
                    return this.constructor.canChangeType();
                }, /**
                 * Call the changeType function on a source buffer, given the code and type.
                 *
                 * @param {string} type
                 *        The type of source buffer to call changeType on.
                 *
                 * @param {string} codec
                 *        The codec string to change type with on the source buffer.
                 */ _proto.changeType = function(type, codec) {
                    if (!this.canChangeType()) {
                        videojs.log.error("changeType is not supported!");
                        return;
                    }
                    pushQueue({
                        type: type,
                        sourceUpdater: this,
                        action: actions.changeType(codec),
                        name: "changeType"
                    });
                }, /**
                 * Add source buffers with a codec or, if they are already created,
                 * call changeType on source buffers using changeType.
                 *
                 * @param {Object} codecs
                 *        Codecs to switch to
                 */ _proto.addOrChangeSourceBuffers = function(codecs) {
                    var _this2 = this;
                    if (!codecs || "object" != typeof codecs || 0 === Object.keys(codecs).length) throw Error("Cannot addOrChangeSourceBuffers to undefined codecs");
                    Object.keys(codecs).forEach(function(type) {
                        var codec = codecs[type];
                        if (!_this2.hasCreatedSourceBuffers()) return _this2.addSourceBuffer(type, codec);
                        _this2.canChangeType() && _this2.changeType(type, codec);
                    });
                }, /**
                 * Queue an update to append an ArrayBuffer.
                 *
                 * @param {MediaObject} object containing audioBytes and/or videoBytes
                 * @param {Function} done the function to call when done
                 * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data
                 */ _proto.appendBuffer = function(options, doneFn) {
                    var _this3 = this, segmentInfo = options.segmentInfo, type = options.type, bytes = options.bytes;
                    if (this.processedAppend_ = !0, "audio" === type && this.videoBuffer && !this.videoAppendQueued_) {
                        this.delayedAudioAppendQueue_.push([
                            options,
                            doneFn
                        ]), this.logger_("delayed audio append of " + bytes.length + " until video append");
                        return;
                    } // In the case of certain errors, for instance, QUOTA_EXCEEDED_ERR, updateend will
                    if (pushQueue({
                        type: type,
                        sourceUpdater: this,
                        action: actions.appendBuffer(bytes, segmentInfo || {
                            mediaIndex: -1
                        }, doneFn),
                        doneFn: doneFn,
                        name: "appendBuffer"
                    }), "video" === type) {
                        if (this.videoAppendQueued_ = !0, !this.delayedAudioAppendQueue_.length) return;
                        var queue = this.delayedAudioAppendQueue_.slice();
                        this.logger_("queuing delayed audio " + queue.length + " appendBuffers"), this.delayedAudioAppendQueue_.length = 0, queue.forEach(function(que) {
                            _this3.appendBuffer.apply(_this3, que);
                        });
                    }
                }, /**
                 * Get the audio buffer's buffered timerange.
                 *
                 * @return {TimeRange}
                 *         The audio buffer's buffered time range
                 */ _proto.audioBuffered = function() {
                    return inSourceBuffers(this.mediaSource, this.audioBuffer) && this.audioBuffer.buffered ? this.audioBuffer.buffered : videojs.createTimeRange();
                }, /**
                 * Get the video buffer's buffered timerange.
                 *
                 * @return {TimeRange}
                 *         The video buffer's buffered time range
                 */ _proto.videoBuffered = function() {
                    return inSourceBuffers(this.mediaSource, this.videoBuffer) && this.videoBuffer.buffered ? this.videoBuffer.buffered : videojs.createTimeRange();
                }, /**
                 * Get a combined video/audio buffer's buffered timerange.
                 *
                 * @return {TimeRange}
                 *         the combined time range
                 */ _proto.buffered = function() {
                    var video = inSourceBuffers(this.mediaSource, this.videoBuffer) ? this.videoBuffer : null, audio = inSourceBuffers(this.mediaSource, this.audioBuffer) ? this.audioBuffer : null;
                    return audio && !video ? this.audioBuffered() : video && !audio ? this.videoBuffered() : bufferIntersection(this.audioBuffered(), this.videoBuffered());
                }, /**
                 * Add a callback to the queue that will set duration on the mediaSource.
                 *
                 * @param {number} duration
                 *        The duration to set
                 *
                 * @param {Function} [doneFn]
                 *        function to run after duration has been set.
                 */ _proto.setDuration = function(duration, doneFn) {
                    void 0 === doneFn && (doneFn = noop), // source buffers to no longer be updating. "If the updating attribute equals true on
                    // any SourceBuffer in sourceBuffers, then throw an InvalidStateError exception and
                    // abort these steps." (source: https://www.w3.org/TR/media-source/#attributes).
                    pushQueue({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: actions.duration(duration),
                        name: "duration",
                        doneFn: doneFn
                    });
                }, /**
                 * Add a mediaSource endOfStream call to the queue
                 *
                 * @param {Error} [error]
                 *        Call endOfStream with an error
                 *
                 * @param {Function} [doneFn]
                 *        A function that should be called when the
                 *        endOfStream call has finished.
                 */ _proto.endOfStream = function(error, doneFn) {
                    void 0 === error && (error = null), void 0 === doneFn && (doneFn = noop), "string" != typeof error && (error = void 0), // source buffers to no longer be updating. "If the updating attribute equals true on
                    // any SourceBuffer in sourceBuffers, then throw an InvalidStateError exception and
                    // abort these steps." (source: https://www.w3.org/TR/media-source/#attributes).
                    pushQueue({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: actions.endOfStream(error),
                        name: "endOfStream",
                        doneFn: doneFn
                    });
                }, /**
                 * Queue an update to remove a time range from the buffer.
                 *
                 * @param {number} start where to start the removal
                 * @param {number} end where to end the removal
                 * @param {Function} [done=noop] optional callback to be executed when the remove
                 * operation is complete
                 * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end
                 */ _proto.removeAudio = function(start, end, done) {
                    if (void 0 === done && (done = noop), !this.audioBuffered().length || 0 === this.audioBuffered().end(0)) {
                        done();
                        return;
                    }
                    pushQueue({
                        type: "audio",
                        sourceUpdater: this,
                        action: actions.remove(start, end),
                        doneFn: done,
                        name: "remove"
                    });
                }, /**
                 * Queue an update to remove a time range from the buffer.
                 *
                 * @param {number} start where to start the removal
                 * @param {number} end where to end the removal
                 * @param {Function} [done=noop] optional callback to be executed when the remove
                 * operation is complete
                 * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end
                 */ _proto.removeVideo = function(start, end, done) {
                    if (void 0 === done && (done = noop), !this.videoBuffered().length || 0 === this.videoBuffered().end(0)) {
                        done();
                        return;
                    }
                    pushQueue({
                        type: "video",
                        sourceUpdater: this,
                        action: actions.remove(start, end),
                        doneFn: done,
                        name: "remove"
                    });
                }, /**
                 * Whether the underlying sourceBuffer is updating or not
                 *
                 * @return {boolean} the updating status of the SourceBuffer
                 */ _proto.updating = function() {
                    return !!(_updating("audio", this) || _updating("video", this));
                }, /**
                 * Set/get the timestampoffset on the audio SourceBuffer
                 *
                 * @return {number} the timestamp offset
                 */ _proto.audioTimestampOffset = function(offset) {
                    return void 0 !== offset && this.audioBuffer && // no point in updating if it's the same
                    this.audioTimestampOffset_ !== offset && (pushQueue({
                        type: "audio",
                        sourceUpdater: this,
                        action: actions.timestampOffset(offset),
                        name: "timestampOffset"
                    }), this.audioTimestampOffset_ = offset), this.audioTimestampOffset_;
                }, /**
                 * Set/get the timestampoffset on the video SourceBuffer
                 *
                 * @return {number} the timestamp offset
                 */ _proto.videoTimestampOffset = function(offset) {
                    return void 0 !== offset && this.videoBuffer && // no point in updating if it's the same
                    this.videoTimestampOffset !== offset && (pushQueue({
                        type: "video",
                        sourceUpdater: this,
                        action: actions.timestampOffset(offset),
                        name: "timestampOffset"
                    }), this.videoTimestampOffset_ = offset), this.videoTimestampOffset_;
                }, /**
                 * Add a function to the queue that will be called
                 * when it is its turn to run in the audio queue.
                 *
                 * @param {Function} callback
                 *        The callback to queue.
                 */ _proto.audioQueueCallback = function(callback) {
                    this.audioBuffer && pushQueue({
                        type: "audio",
                        sourceUpdater: this,
                        action: actions.callback(callback),
                        name: "callback"
                    });
                }, /**
                 * Add a function to the queue that will be called
                 * when it is its turn to run in the video queue.
                 *
                 * @param {Function} callback
                 *        The callback to queue.
                 */ _proto.videoQueueCallback = function(callback) {
                    this.videoBuffer && pushQueue({
                        type: "video",
                        sourceUpdater: this,
                        action: actions.callback(callback),
                        name: "callback"
                    });
                }, /**
                 * dispose of the source updater and the underlying sourceBuffer
                 */ _proto.dispose = function() {
                    var _this4 = this;
                    this.trigger("dispose"), bufferTypes.forEach(function(type) {
                        _this4.abort(type), _this4.canRemoveSourceBuffer() ? _this4.removeSourceBuffer(type) : _this4[type + "QueueCallback"](function() {
                            return cleanupBuffer(type, _this4);
                        });
                    }), this.videoAppendQueued_ = !1, this.delayedAudioAppendQueue_.length = 0, this.sourceopenListener_ && this.mediaSource.removeEventListener("sourceopen", this.sourceopenListener_), this.off();
                }, SourceUpdater;
            }(videojs.EventTarget), uint8ToUtf8 = function(uintArray) {
                return decodeURIComponent(escape(String.fromCharCode.apply(null, uintArray)));
            }, VTT_LINE_TERMINATORS = new Uint8Array("\n\n".split("").map(function(_char3) {
                return _char3.charCodeAt(0);
            })), VTTSegmentLoader = /*#__PURE__*/ function(_SegmentLoader) {
                function VTTSegmentLoader(settings, options) {
                    var _this;
                    return void 0 === options && (options = {}), // however, VTTSegmentLoader has no need of a media source, so delete the reference
                    (_this = _SegmentLoader.call(this, settings, options) || this).mediaSource_ = null, _this.subtitlesTrack_ = null, _this.loaderType_ = "subtitle", _this.featuresNativeTextTracks_ = settings.featuresNativeTextTracks, // the sync controller leads to improper behavior.
                    _this.shouldSaveSegmentTimingInfo_ = !1, _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(VTTSegmentLoader, _SegmentLoader);
                var _proto = VTTSegmentLoader.prototype;
                return _proto.createTransmuxer_ = function() {
                    // don't need to transmux any subtitles
                    return null;
                }, /**
                 * Indicates which time ranges are buffered
                 *
                 * @return {TimeRange}
                 *         TimeRange object representing the current buffered ranges
                 */ _proto.buffered_ = function() {
                    if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues || !this.subtitlesTrack_.cues.length) return videojs.createTimeRanges();
                    var cues = this.subtitlesTrack_.cues, start = cues[0].startTime, end = cues[cues.length - 1].startTime;
                    return videojs.createTimeRanges([
                        [
                            start,
                            end
                        ]
                    ]);
                }, /**
                 * Gets and sets init segment for the provided map
                 *
                 * @param {Object} map
                 *        The map object representing the init segment to get or set
                 * @param {boolean=} set
                 *        If true, the init segment for the provided map should be saved
                 * @return {Object}
                 *         map object for desired init segment
                 */ _proto.initSegmentForMap = function(map, set) {
                    if (void 0 === set && (set = !1), !map) return null;
                    var id = initSegmentId(map), storedMap = this.initSegments_[id];
                    if (set && !storedMap && map.bytes) {
                        var combinedSegment = new Uint8Array(VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength);
                        combinedSegment.set(map.bytes), combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength), this.initSegments_[id] = storedMap = {
                            resolvedUri: map.resolvedUri,
                            byterange: map.byterange,
                            bytes: combinedSegment
                        };
                    }
                    return storedMap || map;
                }, /**
                 * Returns true if all configuration required for loading is present, otherwise false.
                 *
                 * @return {boolean} True if the all configuration is ready for loading
                 * @private
                 */ _proto.couldBeginLoading_ = function() {
                    return this.playlist_ && this.subtitlesTrack_ && !this.paused();
                }, /**
                 * Once all the starting parameters have been specified, begin
                 * operation. This method should only be invoked from the INIT
                 * state.
                 *
                 * @private
                 */ _proto.init_ = function() {
                    return this.state = "READY", this.resetEverything(), this.monitorBuffer_();
                }, /**
                 * Set a subtitle track on the segment loader to add subtitles to
                 *
                 * @param {TextTrack=} track
                 *        The text track to add loaded subtitles to
                 * @return {TextTrack}
                 *        Returns the subtitles track
                 */ _proto.track = function(_track) {
                    return void 0 === _track || (this.subtitlesTrack_ = _track, "INIT" === this.state && this.couldBeginLoading_() && this.init_()), this.subtitlesTrack_;
                }, /**
                 * Remove any data in the source buffer between start and end times
                 *
                 * @param {number} start - the start time of the region to remove from the buffer
                 * @param {number} end - the end time of the region to remove from the buffer
                 */ _proto.remove = function(start, end) {
                    removeCuesFromTrack(start, end, this.subtitlesTrack_);
                }, /**
                 * fill the buffer with segements unless the sourceBuffers are
                 * currently updating
                 *
                 * Note: this function should only ever be called by monitorBuffer_
                 * and never directly
                 *
                 * @private
                 */ _proto.fillBuffer_ = function() {
                    var _this2 = this, segmentInfo = this.chooseNextRequest_(); // see if we need to begin loading immediately
                    if (segmentInfo) {
                        if (null === this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline)) {
                            this.syncController_.one("timestampoffset", function() {
                                _this2.state = "READY", _this2.paused() || // if not paused, queue a buffer check as soon as possible
                                _this2.monitorBuffer_();
                            }), this.state = "WAITING_ON_TIMELINE";
                            return;
                        }
                        this.loadSegment_(segmentInfo);
                    }
                }, _proto.timestampOffsetForSegment_ = function() {
                    return null;
                }, _proto.chooseNextRequest_ = function() {
                    return this.skipEmptySegments_(_SegmentLoader.prototype.chooseNextRequest_.call(this));
                }, /**
                 * Prevents the segment loader from requesting segments we know contain no subtitles
                 * by walking forward until we find the next segment that we don't know whether it is
                 * empty or not.
                 *
                 * @param {Object} segmentInfo
                 *        a segment info object that describes the current segment
                 * @return {Object}
                 *         a segment info object that describes the current segment
                 */ _proto.skipEmptySegments_ = function(segmentInfo) {
                    for(; segmentInfo && segmentInfo.segment.empty;){
                        // stop at the last possible segmentInfo
                        if (segmentInfo.mediaIndex + 1 >= segmentInfo.playlist.segments.length) {
                            segmentInfo = null;
                            break;
                        }
                        segmentInfo = this.generateSegmentInfo_({
                            playlist: segmentInfo.playlist,
                            mediaIndex: segmentInfo.mediaIndex + 1,
                            startOfSegment: segmentInfo.startOfSegment + segmentInfo.duration,
                            isSyncRequest: segmentInfo.isSyncRequest
                        });
                    }
                    return segmentInfo;
                }, _proto.stopForError = function(error) {
                    this.error(error), this.state = "READY", this.pause(), this.trigger("error");
                }, /**
                 * append a decrypted segement to the SourceBuffer through a SourceUpdater
                 *
                 * @private
                 */ _proto.segmentRequestFinished_ = function(error, simpleSegment, result) {
                    var _this3 = this;
                    if (!this.subtitlesTrack_) {
                        this.state = "READY";
                        return;
                    }
                    if (this.saveTransferStats_(simpleSegment.stats), !this.pendingSegment_) {
                        this.state = "READY", this.mediaRequestsAborted += 1;
                        return;
                    }
                    if (error) {
                        error.code === REQUEST_ERRORS.TIMEOUT && this.handleTimeout_(), error.code === REQUEST_ERRORS.ABORTED ? this.mediaRequestsAborted += 1 : this.mediaRequestsErrored += 1, this.stopForError(error);
                        return;
                    }
                    var segmentInfo = this.pendingSegment_; // although the VTT segment loader bandwidth isn't really used, it's good to
                    // maintain functionality between segment loaders
                    this.saveBandwidthRelatedStats_(segmentInfo.duration, simpleSegment.stats), this.state = "APPENDING", this.trigger("appending");
                    var segment = segmentInfo.segment;
                    if (segment.map && (segment.map.bytes = simpleSegment.map.bytes), segmentInfo.bytes = simpleSegment.bytes, "function" != typeof global_window__WEBPACK_IMPORTED_MODULE_0___default().WebVTT && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {
                        var loadHandler, errorHandler = function() {
                            _this3.subtitlesTrack_.tech_.off("vttjsloaded", loadHandler), _this3.stopForError({
                                message: "Error loading vtt.js"
                            });
                        };
                        loadHandler = function() {
                            _this3.subtitlesTrack_.tech_.off("vttjserror", errorHandler), _this3.segmentRequestFinished_(error, simpleSegment, result);
                        }, this.state = "WAITING_ON_VTTJS", this.subtitlesTrack_.tech_.one("vttjsloaded", loadHandler), this.subtitlesTrack_.tech_.one("vttjserror", errorHandler);
                        return;
                    }
                    segment.requested = !0;
                    try {
                        this.parseVTTCues_(segmentInfo);
                    } catch (e) {
                        this.stopForError({
                            message: e.message
                        });
                        return;
                    }
                    if (this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_), segmentInfo.cues.length ? segmentInfo.timingInfo = {
                        start: segmentInfo.cues[0].startTime,
                        end: segmentInfo.cues[segmentInfo.cues.length - 1].endTime
                    } : segmentInfo.timingInfo = {
                        start: segmentInfo.startOfSegment,
                        end: segmentInfo.startOfSegment + segmentInfo.duration
                    }, segmentInfo.isSyncRequest) {
                        this.trigger("syncinfoupdate"), this.pendingSegment_ = null, this.state = "READY";
                        return;
                    }
                    segmentInfo.byteLength = segmentInfo.bytes.byteLength, this.mediaSecondsLoaded += segment.duration, // the subtitle track
                    segmentInfo.cues.forEach(function(cue) {
                        _this3.subtitlesTrack_.addCue(_this3.featuresNativeTextTracks_ ? new (global_window__WEBPACK_IMPORTED_MODULE_0___default()).VTTCue(cue.startTime, cue.endTime, cue.text) : cue);
                    }), // cues to have identical time-intervals, but if the text is also identical
                    // we can safely assume it is a duplicate that can be removed (ex. when a cue
                    // "overlaps" VTT segments)
                    removeDuplicateCuesFromTrack(this.subtitlesTrack_), this.handleAppendsDone_();
                }, _proto.handleData_ = function() {
                // noop as we shouldn't be getting video/audio data captions
                // that we do not support here.
                }, _proto.updateTimingInfoEnd_ = function() {
                // noop
                }, /**
                 * Uses the WebVTT parser to parse the segment response
                 *
                 * @param {Object} segmentInfo
                 *        a segment info object that describes the current segment
                 * @private
                 */ _proto.parseVTTCues_ = function(segmentInfo) {
                    var decoder, decodeBytesToString = !1;
                    "function" == typeof global_window__WEBPACK_IMPORTED_MODULE_0___default().TextDecoder ? decoder = new (global_window__WEBPACK_IMPORTED_MODULE_0___default()).TextDecoder("utf8") : (decoder = global_window__WEBPACK_IMPORTED_MODULE_0___default().WebVTT.StringDecoder(), decodeBytesToString = !0);
                    var parser = new (global_window__WEBPACK_IMPORTED_MODULE_0___default()).WebVTT.Parser(global_window__WEBPACK_IMPORTED_MODULE_0___default(), global_window__WEBPACK_IMPORTED_MODULE_0___default().vttjs, decoder);
                    if (segmentInfo.cues = [], segmentInfo.timestampmap = {
                        MPEGTS: 0,
                        LOCAL: 0
                    }, parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues), parser.ontimestampmap = function(map) {
                        segmentInfo.timestampmap = map;
                    }, parser.onparsingerror = function(error) {
                        videojs.log.warn("Error encountered when parsing cues: " + error.message);
                    }, segmentInfo.segment.map) {
                        var mapData = segmentInfo.segment.map.bytes;
                        decodeBytesToString && (mapData = uint8ToUtf8(mapData)), parser.parse(mapData);
                    }
                    var segmentData = segmentInfo.bytes;
                    decodeBytesToString && (segmentData = uint8ToUtf8(segmentData)), parser.parse(segmentData), parser.flush();
                }, /**
                 * Updates the start and end times of any cues parsed by the WebVTT parser using
                 * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping
                 * from the SyncController
                 *
                 * @param {Object} segmentInfo
                 *        a segment info object that describes the current segment
                 * @param {Object} mappingObj
                 *        object containing a mapping from TS to media time
                 * @param {Object} playlist
                 *        the playlist object containing the segment
                 * @private
                 */ _proto.updateTimeMapping_ = function(segmentInfo, mappingObj, playlist) {
                    var segment = segmentInfo.segment;
                    if (mappingObj) {
                        if (!segmentInfo.cues.length) {
                            // If there are no cues, we also do not have enough information to figure out
                            // segment timing. Mark that the segment contains no cues so we don't re-request
                            // an empty segment.
                            segment.empty = !0;
                            return;
                        }
                        var timestampmap = segmentInfo.timestampmap, diff = timestampmap.MPEGTS / mux_js_lib_utils_clock__WEBPACK_IMPORTED_MODULE_14__.ONE_SECOND_IN_TS - timestampmap.LOCAL + mappingObj.mapping;
                        if (segmentInfo.cues.forEach(function(cue) {
                            // First convert cue time to TS time using the timestamp-map provided within the vtt
                            cue.startTime += diff, cue.endTime += diff;
                        }), !playlist.syncInfo) {
                            var firstStart = segmentInfo.cues[0].startTime, lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;
                            playlist.syncInfo = {
                                mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,
                                time: Math.min(firstStart, lastStart - segment.duration)
                            };
                        }
                    }
                }, VTTSegmentLoader;
            }(SegmentLoader), findAdCue = function(track, mediaTime) {
                for(var cues = track.cues, i = 0; i < cues.length; i++){
                    var cue = cues[i];
                    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) return cue;
                }
                return null;
            }, updateAdCues = function(media, track, offset) {
                if (void 0 === offset && (offset = 0), media.segments) for(var cue, mediaTime = offset, i = 0; i < media.segments.length; i++){
                    var segment = media.segments[i];
                    if (cue || // Since the cues will span for at least the segment duration, adding a fudge
                    // factor of half segment duration will prevent duplicate cues from being
                    // created when timing info is not exact (e.g. cue start time initialized
                    // at 10.006677, but next call mediaTime is 10.003332 )
                    (cue = findAdCue(track, mediaTime + segment.duration / 2)), cue) {
                        if ("cueIn" in segment) {
                            // Found a CUE-IN so end the cue
                            cue.endTime = mediaTime, cue.adEndTime = mediaTime, mediaTime += segment.duration, cue = null;
                            continue;
                        }
                        if (mediaTime < cue.endTime) {
                            // Already processed this mediaTime for this cue
                            mediaTime += segment.duration;
                            continue;
                        } // otherwise extend cue until a CUE-IN is found
                        cue.endTime += segment.duration;
                    } else if ("cueOut" in segment && ((cue = new (global_window__WEBPACK_IMPORTED_MODULE_0___default()).VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut)).adStartTime = mediaTime, // #EXT-X-CUE-OUT:30
                    cue.adEndTime = mediaTime + parseFloat(segment.cueOut), track.addCue(cue)), "cueOutCont" in segment) {
                        // Entered into the middle of an ad cue
                        // Assumes tag formate to be
                        // #EXT-X-CUE-OUT-CONT:10/30
                        var _segment$cueOutCont$s = segment.cueOutCont.split("/").map(parseFloat), adOffset = _segment$cueOutCont$s[0], adTotal = _segment$cueOutCont$s[1];
                        (cue = new (global_window__WEBPACK_IMPORTED_MODULE_0___default()).VTTCue(mediaTime, mediaTime + segment.duration, "")).adStartTime = mediaTime - adOffset, cue.adEndTime = cue.adStartTime + adTotal, track.addCue(cue);
                    }
                    mediaTime += segment.duration;
                }
            }, syncPointStrategies = [
                // Stategy "VOD": Handle the VOD-case where the sync-point is *always*
                //                the equivalence display-time 0 === segment-index 0
                {
                    name: "VOD",
                    run: function(syncController, playlist, duration, currentTimeline, currentTime) {
                        return duration !== 1 / 0 ? {
                            time: 0,
                            segmentIndex: 0,
                            partIndex: null
                        } : null;
                    }
                },
                {
                    name: "ProgramDateTime",
                    run: function(syncController, playlist, duration, currentTimeline, currentTime) {
                        if (!Object.keys(syncController.timelineToDatetimeMappings).length) return null;
                        var syncPoint = null, lastDistance = null, partsAndSegments = getPartsAndSegments(playlist);
                        currentTime = currentTime || 0;
                        for(var i = 0; i < partsAndSegments.length; i++){
                            // start from the end and loop backwards for live
                            // or start from the front and loop forwards for non-live
                            var index = playlist.endList || 0 === currentTime ? i : partsAndSegments.length - (i + 1), partAndSegment = partsAndSegments[index], segment = partAndSegment.segment, datetimeMapping = syncController.timelineToDatetimeMappings[segment.timeline];
                            if (datetimeMapping && segment.dateTimeObject) {
                                var start = segment.dateTimeObject.getTime() / 1000 + datetimeMapping; // take part duration into account.
                                if (segment.parts && "number" == typeof partAndSegment.partIndex) for(var z = 0; z < partAndSegment.partIndex; z++)start += segment.parts[z].duration;
                                var distance = Math.abs(currentTime - start); // Once the distance begins to increase, or if distance is 0, we have passed
                                // currentTime and can stop looking for better candidates
                                if (null !== lastDistance && (0 === distance || lastDistance < distance)) break;
                                lastDistance = distance, syncPoint = {
                                    time: start,
                                    segmentIndex: partAndSegment.segmentIndex,
                                    partIndex: partAndSegment.partIndex
                                };
                            }
                        }
                        return syncPoint;
                    }
                },
                //                    segment in the current timeline with timing data
                {
                    name: "Segment",
                    run: function(syncController, playlist, duration, currentTimeline, currentTime) {
                        var syncPoint = null, lastDistance = null;
                        currentTime = currentTime || 0;
                        for(var partsAndSegments = getPartsAndSegments(playlist), i = 0; i < partsAndSegments.length; i++){
                            // start from the end and loop backwards for live
                            // or start from the front and loop forwards for non-live
                            var index = playlist.endList || 0 === currentTime ? i : partsAndSegments.length - (i + 1), partAndSegment = partsAndSegments[index], segment = partAndSegment.segment, start = partAndSegment.part && partAndSegment.part.start || segment && segment.start;
                            if (segment.timeline === currentTimeline && void 0 !== start) {
                                var distance = Math.abs(currentTime - start); // Once the distance begins to increase, we have passed
                                // currentTime and can stop looking for better candidates
                                if (null !== lastDistance && lastDistance < distance) break;
                                (!syncPoint || null === lastDistance || lastDistance >= distance) && (lastDistance = distance, syncPoint = {
                                    time: start,
                                    segmentIndex: partAndSegment.segmentIndex,
                                    partIndex: partAndSegment.partIndex
                                });
                            }
                        }
                        return syncPoint;
                    }
                },
                //                          display-time
                {
                    name: "Discontinuity",
                    run: function(syncController, playlist, duration, currentTimeline, currentTime) {
                        var syncPoint = null;
                        if (currentTime = currentTime || 0, playlist.discontinuityStarts && playlist.discontinuityStarts.length) for(var lastDistance = null, i = 0; i < playlist.discontinuityStarts.length; i++){
                            var segmentIndex = playlist.discontinuityStarts[i], discontinuity = playlist.discontinuitySequence + i + 1, discontinuitySync = syncController.discontinuities[discontinuity];
                            if (discontinuitySync) {
                                var distance = Math.abs(currentTime - discontinuitySync.time); // Once the distance begins to increase, we have passed
                                // currentTime and can stop looking for better candidates
                                if (null !== lastDistance && lastDistance < distance) break;
                                (!syncPoint || null === lastDistance || lastDistance >= distance) && (lastDistance = distance, syncPoint = {
                                    time: discontinuitySync.time,
                                    segmentIndex: segmentIndex,
                                    partIndex: null
                                });
                            }
                        }
                        return syncPoint;
                    }
                },
                //                     segment index to display time
                {
                    name: "Playlist",
                    run: function(syncController, playlist, duration, currentTimeline, currentTime) {
                        return playlist.syncInfo ? {
                            time: playlist.syncInfo.time,
                            segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence,
                            partIndex: null
                        } : null;
                    }
                }
            ], SyncController = /*#__PURE__*/ function(_videojs$EventTarget) {
                function SyncController(options) {
                    var _this;
                    return (_this = _videojs$EventTarget.call(this) || this).timelines = [], _this.discontinuities = [], _this.timelineToDatetimeMappings = {}, _this.logger_ = logger("SyncController"), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(SyncController, _videojs$EventTarget);
                /**
                 * Find a sync-point for the playlist specified
                 *
                 * A sync-point is defined as a known mapping from display-time to
                 * a segment-index in the current playlist.
                 *
                 * @param {Playlist} playlist
                 *        The playlist that needs a sync-point
                 * @param {number} duration
                 *        Duration of the MediaSource (Infinite if playing a live source)
                 * @param {number} currentTimeline
                 *        The last timeline from which a segment was loaded
                 * @return {Object}
                 *          A sync-point object
                 */ var _proto = SyncController.prototype;
                return _proto.getSyncPoint = function(playlist, duration, currentTimeline, currentTime) {
                    var syncPoints = this.runStrategies_(playlist, duration, currentTimeline, currentTime);
                    return syncPoints.length ? this.selectSyncPoint_(syncPoints, {
                        key: "time",
                        value: currentTime
                    }) : null // Now find the sync-point that is closest to the currentTime because
                    ;
                }, /**
                 * Calculate the amount of time that has expired off the playlist during playback
                 *
                 * @param {Playlist} playlist
                 *        Playlist object to calculate expired from
                 * @param {number} duration
                 *        Duration of the MediaSource (Infinity if playling a live source)
                 * @return {number|null}
                 *          The amount of time that has expired off the playlist during playback. Null
                 *          if no sync-points for the playlist can be found.
                 */ _proto.getExpiredTime = function(playlist, duration) {
                    if (!playlist || !playlist.segments) return null;
                    var syncPoints = this.runStrategies_(playlist, duration, playlist.discontinuitySequence, 0); // Without sync-points, there is not enough information to determine the expired time
                    if (!syncPoints.length) return null;
                    var syncPoint = this.selectSyncPoint_(syncPoints, {
                        key: "segmentIndex",
                        value: 0
                    }); // If the sync-point is beyond the start of the playlist, we want to subtract the
                    return syncPoint.segmentIndex > 0 && (syncPoint.time *= -1), Math.abs(syncPoint.time + sumDurations({
                        defaultDuration: playlist.targetDuration,
                        durationList: playlist.segments,
                        startIndex: syncPoint.segmentIndex,
                        endIndex: 0
                    }));
                }, /**
                 * Runs each sync-point strategy and returns a list of sync-points returned by the
                 * strategies
                 *
                 * @private
                 * @param {Playlist} playlist
                 *        The playlist that needs a sync-point
                 * @param {number} duration
                 *        Duration of the MediaSource (Infinity if playing a live source)
                 * @param {number} currentTimeline
                 *        The last timeline from which a segment was loaded
                 * @return {Array}
                 *          A list of sync-point objects
                 */ _proto.runStrategies_ = function(playlist, duration, currentTimeline, currentTime) {
                    for(var syncPoints = [], i = 0; i < syncPointStrategies.length; i++){
                        var strategy = syncPointStrategies[i], syncPoint = strategy.run(this, playlist, duration, currentTimeline, currentTime);
                        syncPoint && (syncPoint.strategy = strategy.name, syncPoints.push({
                            strategy: strategy.name,
                            syncPoint: syncPoint
                        }));
                    }
                    return syncPoints;
                }, /**
                 * Selects the sync-point nearest the specified target
                 *
                 * @private
                 * @param {Array} syncPoints
                 *        List of sync-points to select from
                 * @param {Object} target
                 *        Object specifying the property and value we are targeting
                 * @param {string} target.key
                 *        Specifies the property to target. Must be either 'time' or 'segmentIndex'
                 * @param {number} target.value
                 *        The value to target for the specified key.
                 * @return {Object}
                 *          The sync-point nearest the target
                 */ _proto.selectSyncPoint_ = function(syncPoints, target) {
                    for(var bestSyncPoint = syncPoints[0].syncPoint, bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value), bestStrategy = syncPoints[0].strategy, i = 1; i < syncPoints.length; i++){
                        var newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);
                        newDistance < bestDistance && (bestDistance = newDistance, bestSyncPoint = syncPoints[i].syncPoint, bestStrategy = syncPoints[i].strategy);
                    }
                    return this.logger_("syncPoint for [" + target.key + ": " + target.value + "] chosen with strategy [" + bestStrategy + "]: [time:" + bestSyncPoint.time + ", segmentIndex:" + bestSyncPoint.segmentIndex + ("number" == typeof bestSyncPoint.partIndex ? ",partIndex:" + bestSyncPoint.partIndex : "") + "]"), bestSyncPoint;
                }, /**
                 * Save any meta-data present on the segments when segments leave
                 * the live window to the playlist to allow for synchronization at the
                 * playlist level later.
                 *
                 * @param {Playlist} oldPlaylist - The previous active playlist
                 * @param {Playlist} newPlaylist - The updated and most current playlist
                 */ _proto.saveExpiredSegmentInfo = function(oldPlaylist, newPlaylist) {
                    var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence; // Ignore large media sequence gaps
                    if (mediaSequenceDiff > 86400) {
                        videojs.log.warn("Not saving expired segment info. Media sequence gap " + mediaSequenceDiff + " is too large.");
                        return;
                    } // When a segment expires from the playlist and it has a start time
                    // save that information as a possible sync-point reference in future
                    for(var i = mediaSequenceDiff - 1; i >= 0; i--){
                        var lastRemovedSegment = oldPlaylist.segments[i];
                        if (lastRemovedSegment && void 0 !== lastRemovedSegment.start) {
                            newPlaylist.syncInfo = {
                                mediaSequence: oldPlaylist.mediaSequence + i,
                                time: lastRemovedSegment.start
                            }, this.logger_("playlist refresh sync: [time:" + newPlaylist.syncInfo.time + ", mediaSequence: " + newPlaylist.syncInfo.mediaSequence + "]"), this.trigger("syncinfoupdate");
                            break;
                        }
                    }
                }, /**
                 * Save the mapping from playlist's ProgramDateTime to display. This should only happen
                 * before segments start to load.
                 *
                 * @param {Playlist} playlist - The currently active playlist
                 */ _proto.setDateTimeMappingForStart = function(playlist) {
                    if (// It's possible for the playlist to be updated before playback starts, meaning time
                    // zero is not yet set. If, during these playlist refreshes, a discontinuity is
                    // crossed, then the old time zero mapping (for the prior timeline) would be retained
                    // unless the mappings are cleared.
                    this.timelineToDatetimeMappings = {}, playlist.segments && playlist.segments.length && playlist.segments[0].dateTimeObject) {
                        var firstSegment = playlist.segments[0], playlistTimestamp = firstSegment.dateTimeObject.getTime() / 1000;
                        this.timelineToDatetimeMappings[firstSegment.timeline] = -playlistTimestamp;
                    }
                }, /**
                 * Calculates and saves timeline mappings, playlist sync info, and segment timing values
                 * based on the latest timing information.
                 *
                 * @param {Object} options
                 *        Options object
                 * @param {SegmentInfo} options.segmentInfo
                 *        The current active request information
                 * @param {boolean} options.shouldSaveTimelineMapping
                 *        If there's a timeline change, determines if the timeline mapping should be
                 *        saved for timeline mapping and program date time mappings.
                 */ _proto.saveSegmentTimingInfo = function(_ref) {
                    var segmentInfo = _ref.segmentInfo, shouldSaveTimelineMapping = _ref.shouldSaveTimelineMapping, didCalculateSegmentTimeMapping = this.calculateSegmentTimeMapping_(segmentInfo, segmentInfo.timingInfo, shouldSaveTimelineMapping), segment = segmentInfo.segment;
                    didCalculateSegmentTimeMapping && (this.saveDiscontinuitySyncInfo_(segmentInfo), segmentInfo.playlist.syncInfo || (segmentInfo.playlist.syncInfo = {
                        mediaSequence: segmentInfo.playlist.mediaSequence + segmentInfo.mediaIndex,
                        time: segment.start
                    }));
                    var dateTime = segment.dateTimeObject;
                    segment.discontinuity && shouldSaveTimelineMapping && dateTime && (this.timelineToDatetimeMappings[segment.timeline] = -(dateTime.getTime() / 1000));
                }, _proto.timestampOffsetForTimeline = function(timeline) {
                    return void 0 === this.timelines[timeline] ? null : this.timelines[timeline].time;
                }, _proto.mappingForTimeline = function(timeline) {
                    return void 0 === this.timelines[timeline] ? null : this.timelines[timeline].mapping;
                }, /**
                 * Use the "media time" for a segment to generate a mapping to "display time" and
                 * save that display time to the segment.
                 *
                 * @private
                 * @param {SegmentInfo} segmentInfo
                 *        The current active request information
                 * @param {Object} timingInfo
                 *        The start and end time of the current segment in "media time"
                 * @param {boolean} shouldSaveTimelineMapping
                 *        If there's a timeline change, determines if the timeline mapping should be
                 *        saved in timelines.
                 * @return {boolean}
                 *          Returns false if segment time mapping could not be calculated
                 */ _proto.calculateSegmentTimeMapping_ = function(segmentInfo, timingInfo, shouldSaveTimelineMapping) {
                    // TODO: remove side effects
                    var start, end, segment = segmentInfo.segment, part = segmentInfo.part, mappingObj = this.timelines[segmentInfo.timeline];
                    if ("number" == typeof segmentInfo.timestampOffset) mappingObj = {
                        time: segmentInfo.startOfSegment,
                        mapping: segmentInfo.startOfSegment - timingInfo.start
                    }, shouldSaveTimelineMapping && (this.timelines[segmentInfo.timeline] = mappingObj, this.trigger("timestampoffset"), this.logger_("time mapping for timeline " + segmentInfo.timeline + ": [time: " + mappingObj.time + "] [mapping: " + mappingObj.mapping + "]")), start = segmentInfo.startOfSegment, end = timingInfo.end + mappingObj.mapping;
                    else {
                        if (!mappingObj) return !1;
                        start = timingInfo.start + mappingObj.mapping, end = timingInfo.end + mappingObj.mapping;
                    }
                    return part && (part.start = start, part.end = end), (!segment.start || start < segment.start) && (segment.start = start), segment.end = end, !0;
                }, /**
                 * Each time we have discontinuity in the playlist, attempt to calculate the location
                 * in display of the start of the discontinuity and save that. We also save an accuracy
                 * value so that we save values with the most accuracy (closest to 0.)
                 *
                 * @private
                 * @param {SegmentInfo} segmentInfo - The current active request information
                 */ _proto.saveDiscontinuitySyncInfo_ = function(segmentInfo) {
                    var playlist = segmentInfo.playlist, segment = segmentInfo.segment;
                    // the start of the range and it's accuracy is 0 (greater accuracy values
                    // mean more approximation)
                    if (segment.discontinuity) this.discontinuities[segment.timeline] = {
                        time: segment.start,
                        accuracy: 0
                    };
                    else if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) // Search for future discontinuities that we can provide better timing
                    // information for and save that information for sync purposes
                    for(var i = 0; i < playlist.discontinuityStarts.length; i++){
                        var segmentIndex = playlist.discontinuityStarts[i], discontinuity = playlist.discontinuitySequence + i + 1, mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex, accuracy = Math.abs(mediaIndexDiff);
                        if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {
                            var time = void 0;
                            time = mediaIndexDiff < 0 ? segment.start - sumDurations({
                                defaultDuration: playlist.targetDuration,
                                durationList: playlist.segments,
                                startIndex: segmentInfo.mediaIndex,
                                endIndex: segmentIndex
                            }) : segment.end + sumDurations({
                                defaultDuration: playlist.targetDuration,
                                durationList: playlist.segments,
                                startIndex: segmentInfo.mediaIndex + 1,
                                endIndex: segmentIndex
                            }), this.discontinuities[discontinuity] = {
                                time: time,
                                accuracy: accuracy
                            };
                        }
                    }
                }, _proto.dispose = function() {
                    this.trigger("dispose"), this.off();
                }, SyncController;
            }(videojs.EventTarget), TimelineChangeController = /*#__PURE__*/ function(_videojs$EventTarget) {
                function TimelineChangeController() {
                    var _this;
                    return (_this = _videojs$EventTarget.call(this) || this).pendingTimelineChanges_ = {}, _this.lastTimelineChanges_ = {}, _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(TimelineChangeController, _videojs$EventTarget);
                var _proto = TimelineChangeController.prototype;
                return _proto.clearPendingTimelineChange = function(type) {
                    this.pendingTimelineChanges_[type] = null, this.trigger("pendingtimelinechange");
                }, _proto.pendingTimelineChange = function(_ref) {
                    var type = _ref.type, from = _ref.from, to = _ref.to;
                    return "number" == typeof from && "number" == typeof to && (this.pendingTimelineChanges_[type] = {
                        type: type,
                        from: from,
                        to: to
                    }, this.trigger("pendingtimelinechange")), this.pendingTimelineChanges_[type];
                }, _proto.lastTimelineChange = function(_ref2) {
                    var type = _ref2.type, from = _ref2.from, to = _ref2.to;
                    return "number" == typeof from && "number" == typeof to && (this.lastTimelineChanges_[type] = {
                        type: type,
                        from: from,
                        to: to
                    }, delete this.pendingTimelineChanges_[type], this.trigger("timelinechange")), this.lastTimelineChanges_[type];
                }, _proto.dispose = function() {
                    this.trigger("dispose"), this.pendingTimelineChanges_ = {}, this.lastTimelineChanges_ = {}, this.off();
                }, TimelineChangeController;
            }(videojs.EventTarget), Decrypter = factory(transform(getWorkerString(function() {
                function createCommonjsModule(fn, basedir, module) {
                    return fn(module = {
                        path: basedir,
                        exports: {},
                        require: function(path, base) {
                            return function() {
                                throw Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
                            }(path, null == base ? module.path : base);
                        }
                    }, module.exports), module.exports;
                }
                var createClass = createCommonjsModule(function(module) {
                    function _defineProperties(target, props) {
                        for(var i = 0; i < props.length; i++){
                            var descriptor = props[i];
                            descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                        }
                    }
                    module.exports = function(Constructor, protoProps, staticProps) {
                        return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;
                    }, module.exports.default = module.exports, module.exports.__esModule = !0;
                }), setPrototypeOf = createCommonjsModule(function(module) {
                    function _setPrototypeOf(o, p) {
                        return module.exports = _setPrototypeOf = Object.setPrototypeOf || function(o, p) {
                            return o.__proto__ = p, o;
                        }, module.exports.default = module.exports, module.exports.__esModule = !0, _setPrototypeOf(o, p);
                    }
                    module.exports = _setPrototypeOf, module.exports.default = module.exports, module.exports.__esModule = !0;
                }), inheritsLoose = createCommonjsModule(function(module) {
                    module.exports = function(subClass, superClass) {
                        subClass.prototype = Object.create(superClass.prototype), subClass.prototype.constructor = subClass, setPrototypeOf(subClass, superClass);
                    }, module.exports.default = module.exports, module.exports.__esModule = !0;
                }), Stream = /*#__PURE__*/ function() {
                    function Stream() {
                        this.listeners = {};
                    }
                    /**
                         * Add a listener for a specified event type.
                         *
                         * @param {string} type the event name
                         * @param {Function} listener the callback to be invoked when an event of
                         * the specified type occurs
                         */ var _proto = Stream.prototype;
                    return _proto.on = function(type, listener) {
                        this.listeners[type] || (this.listeners[type] = []), this.listeners[type].push(listener);
                    }, /**
                         * Remove a listener for a specified event type.
                         *
                         * @param {string} type the event name
                         * @param {Function} listener  a function previously registered for this
                         * type of event through `on`
                         * @return {boolean} if we could turn it off or not
                         */ _proto.off = function(type, listener) {
                        if (!this.listeners[type]) return !1;
                        var index = this.listeners[type].indexOf(listener); // TODO: which is better?
                        return(// In Video.js we slice listener functions
                        // on trigger so that it does not mess up the order
                        // while we loop through.
                        //
                        // Here we slice on off so that the loop in trigger
                        // can continue using it's old reference to loop without
                        // messing up the order.
                        this.listeners[type] = this.listeners[type].slice(0), this.listeners[type].splice(index, 1), index > -1);
                    }, /**
                         * Trigger an event of the specified type on this stream. Any additional
                         * arguments to this function are passed as parameters to event listeners.
                         *
                         * @param {string} type the event name
                         */ _proto.trigger = function(type) {
                        var callbacks = this.listeners[type];
                        if (callbacks) {
                            // can add a significant amount of overhead. Avoid the
                            // intermediate object creation for the common case of a
                            // single callback argument
                            if (2 == arguments.length) for(var length = callbacks.length, i = 0; i < length; ++i)callbacks[i].call(this, arguments[1]);
                            else for(var args = Array.prototype.slice.call(arguments, 1), _length = callbacks.length, _i = 0; _i < _length; ++_i)callbacks[_i].apply(this, args);
                        } // Slicing the arguments on every invocation of this method
                    }, /**
                         * Destroys the stream and cleans up.
                         */ _proto.dispose = function() {
                        this.listeners = {};
                    }, /**
                         * Forwards all `data` events on this stream to the destination stream. The
                         * destination stream should provide a method `push` to receive the data
                         * events as they arrive.
                         *
                         * @param {Stream} destination the stream that will receive all `data` events
                         * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
                         */ _proto.pipe = function(destination) {
                        this.on("data", function(data) {
                            destination.push(data);
                        });
                    }, Stream;
                }(), precompute = function() {
                    var i, x, xInv, x2, x4, s, tEnc, tDec, tables = [
                        [
                            [],
                            [],
                            [],
                            [],
                            []
                        ],
                        [
                            [],
                            [],
                            [],
                            [],
                            []
                        ]
                    ], encTable = tables[0], decTable = tables[1], sbox = encTable[4], sboxInv = decTable[4], d = [], th = [];
                    for(i = 0; i < 256; i++)th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;
                    for(x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1)for(i = 0, s = // Compute sbox
                    (s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4) >> 8 ^ 255 & s ^ 99, sbox[x] = s, sboxInv[s] = x, tDec = 0x1010101 * d[x4 = d[x2 = d[x]]] ^ 0x10001 * x4 ^ 0x101 * x2 ^ 0x1010100 * x, tEnc = 0x101 * d[s] ^ 0x1010100 * s; i < 4; i++)encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8, decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;
                     // Compactify. Considerable speedup on Firefox.
                    for(i = 0; i < 5; i++)encTable[i] = encTable[i].slice(0), decTable[i] = decTable[i].slice(0);
                    return tables;
                }, aesTables = null, AES = /*#__PURE__*/ function() {
                    function AES(key) {
                        aesTables || (aesTables = precompute()), this._tables = [
                            [
                                aesTables[0][0].slice(),
                                aesTables[0][1].slice(),
                                aesTables[0][2].slice(),
                                aesTables[0][3].slice(),
                                aesTables[0][4].slice()
                            ],
                            [
                                aesTables[1][0].slice(),
                                aesTables[1][1].slice(),
                                aesTables[1][2].slice(),
                                aesTables[1][3].slice(),
                                aesTables[1][4].slice()
                            ]
                        ];
                        var i, j, tmp, sbox = this._tables[0][4], decTable = this._tables[1], keyLen = key.length, rcon = 1;
                        if (4 !== keyLen && 6 !== keyLen && 8 !== keyLen) throw Error("Invalid aes key size");
                        var encKey = key.slice(0), decKey = [];
                        for(this._key = [
                            encKey,
                            decKey
                        ], i = keyLen; i < 4 * keyLen + 28; i++)tmp = encKey[i - 1], (i % keyLen == 0 || 8 === keyLen && i % keyLen == 4) && (tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[255 & tmp], i % keyLen == 0 && (tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24, rcon = rcon << 1 ^ (rcon >> 7) * 283)), encKey[i] = encKey[i - keyLen] ^ tmp;
                         // schedule decryption keys
                        for(j = 0; i; j++, i--)tmp = encKey[3 & j ? i : i - 4], i <= 4 || j < 4 ? decKey[j] = tmp : decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[255 & tmp]];
                    }
                    return AES.prototype.decrypt = function(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {
                        var a2, b2, c2, i, key = this._key[1], a = encrypted0 ^ key[0], b = encrypted3 ^ key[1], c = encrypted2 ^ key[2], d = encrypted1 ^ key[3], nInnerRounds = key.length / 4 - 2, kIndex = 4, table = this._tables[1], table0 = table[0], table1 = table[1], table2 = table[2], table3 = table[3], sbox = table[4]; // state variables a,b,c,d are loaded with pre-whitened data
                        for(i = 0; i < nInnerRounds; i++)a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[255 & d] ^ key[kIndex], b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[255 & a] ^ key[kIndex + 1], c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[255 & b] ^ key[kIndex + 2], d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[255 & c] ^ key[kIndex + 3], kIndex += 4, a = a2, b = b2, c = c2;
                         // Last round.
                        for(i = 0; i < 4; i++)out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[255 & d] ^ key[kIndex++], a2 = a, a = b, b = c, c = d, d = a2;
                    }, AES;
                }(), AsyncStream = /*#__PURE__*/ function(_Stream) {
                    function AsyncStream() {
                        var _this;
                        return (_this = _Stream.call(this, Stream) || this).jobs = [], _this.delay = 1, _this.timeout_ = null, _this;
                    }
                    inheritsLoose(AsyncStream, _Stream);
                    /**
                         * process an async job
                         *
                         * @private
                         */ var _proto = AsyncStream.prototype;
                    return _proto.processJob_ = function() {
                        this.jobs.shift()(), this.jobs.length ? this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay) : this.timeout_ = null;
                    }, /**
                         * push a job into the stream
                         *
                         * @param {Function} job the job to push into the stream
                         */ _proto.push = function(job) {
                        this.jobs.push(job), this.timeout_ || (this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay));
                    }, AsyncStream;
                }(Stream), ntoh = function(word) {
                    return word << 24 | (0xff00 & word) << 8 | (0xff0000 & word) >> 8 | word >>> 24;
                }, decrypt = function(encrypted, key, initVector) {
                    // word-level access to the encrypted bytes
                    var init0, init1, init2, init3, encrypted0, encrypted1, encrypted2, encrypted3, wordIx, encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2), decipher = new AES(Array.prototype.slice.call(key)), decrypted = new Uint8Array(encrypted.byteLength), decrypted32 = new Int32Array(decrypted.buffer);
                    // to each decrypted block
                    for(wordIx = 0, // passed-in reference and easier access
                    init0 = initVector[0], init1 = initVector[1], init2 = initVector[2], init3 = initVector[3]; wordIx < encrypted32.length; wordIx += 4)// convert big-endian (network order) words into little-endian
                    // (javascript order)
                    encrypted0 = ntoh(encrypted32[wordIx]), encrypted1 = ntoh(encrypted32[wordIx + 1]), encrypted2 = ntoh(encrypted32[wordIx + 2]), encrypted3 = ntoh(encrypted32[wordIx + 3]), decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx), // plaintext
                    decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0), decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1), decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2), decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3), init0 = encrypted0, init1 = encrypted1, init2 = encrypted2, init3 = encrypted3;
                    return decrypted;
                }, Decrypter = /*#__PURE__*/ function() {
                    function Decrypter(encrypted, key, initVector, done) {
                        var step = Decrypter.STEP, encrypted32 = new Int32Array(encrypted.buffer), decrypted = new Uint8Array(encrypted.byteLength), i = 0;
                        for(this.asyncStream_ = new AsyncStream(), this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted)), i = step; i < encrypted32.length; i += step)initVector = new Uint32Array([
                            ntoh(encrypted32[i - 4]),
                            ntoh(encrypted32[i - 3]),
                            ntoh(encrypted32[i - 2]),
                            ntoh(encrypted32[i - 1])
                        ]), this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));
                         // invoke the done() callback when everything is finished
                        this.asyncStream_.push(function() {
                            // remove pkcs#7 padding from the decrypted bytes
                            done(null, decrypted.subarray(0, decrypted.byteLength - decrypted[decrypted.byteLength - 1]));
                        });
                    }
                    return(/**
                         * @private
                         */ Decrypter.prototype.decryptChunk_ = function(encrypted, key, initVector, decrypted) {
                        return function() {
                            var bytes = decrypt(encrypted, key, initVector);
                            decrypted.set(bytes, encrypted.byteOffset);
                        };
                    }, createClass(Decrypter, null, [
                        {
                            key: "STEP",
                            get: function() {
                                // 4 * 8000;
                                return 32000;
                            }
                        }
                    ]), Decrypter);
                }(), createTransferableMessage = function(message) {
                    var transferable = {};
                    return Object.keys(message).forEach(function(key) {
                        var value = message[key];
                        ArrayBuffer.isView(value) ? transferable[key] = {
                            bytes: value.buffer,
                            byteOffset: value.byteOffset,
                            byteLength: value.byteLength
                        } : transferable[key] = value;
                    }), transferable;
                };
                /* global self */ /**
                     * Our web worker interface so that things can talk to aes-decrypter
                     * that will be running in a web worker. the scope is passed to this by
                     * webworkify.
                     */ self.onmessage = function(event) {
                    var data = event.data;
                    /* eslint-disable no-new, handle-callback-err */ new Decrypter(new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength), new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4), new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4), function(err, bytes) {
                        self.postMessage(createTransferableMessage({
                            source: data.source,
                            decrypted: bytes
                        }), [
                            bytes.buffer
                        ]);
                    });
                /* eslint-enable */ };
            }))), audioTrackKind_ = function(properties) {
                var kind = properties.default ? "main" : "alternative";
                return properties.characteristics && properties.characteristics.indexOf("public.accessibility.describes-video") >= 0 && (kind = "main-desc"), kind;
            }, stopLoaders = function(segmentLoader, mediaType) {
                segmentLoader.abort(), segmentLoader.pause(), mediaType && mediaType.activePlaylistLoader && (mediaType.activePlaylistLoader.pause(), mediaType.activePlaylistLoader = null);
            }, startLoaders = function(playlistLoader, mediaType) {
                // Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the
                // playlist loader
                mediaType.activePlaylistLoader = playlistLoader, playlistLoader.load();
            }, onError = {
                /**
                 * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters
                 * an error.
                 *
                 * @param {string} type
                 *        MediaGroup type
                 * @param {Object} settings
                 *        Object containing required information for media groups
                 * @return {Function}
                 *         Error handler. Logs warning (or error if the playlist is blacklisted) to
                 *         console and switches back to default audio track.
                 * @function onError.AUDIO
                 */ AUDIO: function(type, settings) {
                    return function() {
                        var segmentLoader = settings.segmentLoaders[type], mediaType = settings.mediaTypes[type], blacklistCurrentPlaylist = settings.blacklistCurrentPlaylist;
                        stopLoaders(segmentLoader, mediaType);
                        var activeTrack = mediaType.activeTrack(), activeGroup = mediaType.activeGroup(), id = (activeGroup.filter(function(group) {
                            return group.default;
                        })[0] || activeGroup[0]).id, defaultTrack = mediaType.tracks[id];
                        if (activeTrack === defaultTrack) {
                            // Default track encountered an error. All we can do now is blacklist the current
                            // rendition and hope another will switch audio groups
                            blacklistCurrentPlaylist({
                                message: "Problem encountered loading the default audio track."
                            });
                            return;
                        }
                        for(var trackId in videojs.log.warn("Problem encountered loading the alternate audio track.Switching back to default."), mediaType.tracks)mediaType.tracks[trackId].enabled = mediaType.tracks[trackId] === defaultTrack;
                        mediaType.onTrackChanged();
                    };
                },
                /**
                 * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters
                 * an error.
                 *
                 * @param {string} type
                 *        MediaGroup type
                 * @param {Object} settings
                 *        Object containing required information for media groups
                 * @return {Function}
                 *         Error handler. Logs warning to console and disables the active subtitle track
                 * @function onError.SUBTITLES
                 */ SUBTITLES: function(type, settings) {
                    return function() {
                        var segmentLoader = settings.segmentLoaders[type], mediaType = settings.mediaTypes[type];
                        videojs.log.warn("Problem encountered loading the subtitle track.Disabling subtitle track."), stopLoaders(segmentLoader, mediaType);
                        var track = mediaType.activeTrack();
                        track && (track.mode = "disabled"), mediaType.onTrackChanged();
                    };
                }
            }, setupListeners = {
                /**
                 * Setup event listeners for audio playlist loader
                 *
                 * @param {string} type
                 *        MediaGroup type
                 * @param {PlaylistLoader|null} playlistLoader
                 *        PlaylistLoader to register listeners on
                 * @param {Object} settings
                 *        Object containing required information for media groups
                 * @function setupListeners.AUDIO
                 */ AUDIO: function(type, playlistLoader, settings) {
                    if (playlistLoader) {
                        var tech = settings.tech, requestOptions = settings.requestOptions, segmentLoader = settings.segmentLoaders[type];
                        playlistLoader.on("loadedmetadata", function() {
                            var media = playlistLoader.media();
                            segmentLoader.playlist(media, requestOptions), (!tech.paused() || media.endList && "none" !== tech.preload()) && segmentLoader.load();
                        }), playlistLoader.on("loadedplaylist", function() {
                            segmentLoader.playlist(playlistLoader.media(), requestOptions), tech.paused() || segmentLoader.load();
                        }), playlistLoader.on("error", onError[type](type, settings));
                    }
                },
                /**
                 * Setup event listeners for subtitle playlist loader
                 *
                 * @param {string} type
                 *        MediaGroup type
                 * @param {PlaylistLoader|null} playlistLoader
                 *        PlaylistLoader to register listeners on
                 * @param {Object} settings
                 *        Object containing required information for media groups
                 * @function setupListeners.SUBTITLES
                 */ SUBTITLES: function(type, playlistLoader, settings) {
                    var tech = settings.tech, requestOptions = settings.requestOptions, segmentLoader = settings.segmentLoaders[type], mediaType = settings.mediaTypes[type];
                    playlistLoader.on("loadedmetadata", function() {
                        var media = playlistLoader.media();
                        segmentLoader.playlist(media, requestOptions), segmentLoader.track(mediaType.activeTrack()), (!tech.paused() || media.endList && "none" !== tech.preload()) && segmentLoader.load();
                    }), playlistLoader.on("loadedplaylist", function() {
                        segmentLoader.playlist(playlistLoader.media(), requestOptions), tech.paused() || segmentLoader.load();
                    }), playlistLoader.on("error", onError[type](type, settings));
                }
            }, initialize = {
                /**
                 * Setup PlaylistLoaders and AudioTracks for the audio groups
                 *
                 * @param {string} type
                 *        MediaGroup type
                 * @param {Object} settings
                 *        Object containing required information for media groups
                 * @function initialize.AUDIO
                 */ AUDIO: function(type, settings) {
                    var vhs = settings.vhs, sourceType = settings.sourceType, segmentLoader = settings.segmentLoaders[type], requestOptions = settings.requestOptions, mediaGroups = settings.master.mediaGroups, _settings$mediaTypes$ = settings.mediaTypes[type], groups = _settings$mediaTypes$.groups, tracks = _settings$mediaTypes$.tracks, logger_ = _settings$mediaTypes$.logger_, masterPlaylistLoader = settings.masterPlaylistLoader, audioOnlyMaster = isAudioOnly(masterPlaylistLoader.master);
                    for(var groupId in (!mediaGroups[type] || 0 === Object.keys(mediaGroups[type]).length) && (mediaGroups[type] = {
                        main: {
                            default: {
                                default: !0
                            }
                        }
                    }, audioOnlyMaster && (mediaGroups[type].main.default.playlists = masterPlaylistLoader.master.playlists)), mediaGroups[type])for(var variantLabel in groups[groupId] || (groups[groupId] = []), mediaGroups[type][groupId]){
                        var properties = mediaGroups[type][groupId][variantLabel], playlistLoader = void 0;
                        if (audioOnlyMaster ? (logger_("AUDIO group '" + groupId + "' label '" + variantLabel + "' is a master playlist"), properties.isMasterPlaylist = !0, playlistLoader = null) : playlistLoader = "vhs-json" === sourceType && properties.playlists ? new PlaylistLoader(properties.playlists[0], vhs, requestOptions) : properties.resolvedUri ? new PlaylistLoader(properties.resolvedUri, vhs, requestOptions) : properties.playlists && "dash" === sourceType ? new DashPlaylistLoader(properties.playlists[0], vhs, requestOptions, masterPlaylistLoader) : null, properties = videojs.mergeOptions({
                            id: variantLabel,
                            playlistLoader: playlistLoader
                        }, properties), setupListeners[type](type, properties.playlistLoader, settings), groups[groupId].push(properties), void 0 === tracks[variantLabel]) {
                            var track = new videojs.AudioTrack({
                                id: variantLabel,
                                kind: audioTrackKind_(properties),
                                enabled: !1,
                                language: properties.language,
                                default: properties.default,
                                label: variantLabel
                            });
                            tracks[variantLabel] = track;
                        }
                    }
                     // setup single error event handler for the segment loader
                    segmentLoader.on("error", onError[type](type, settings));
                },
                /**
                 * Setup PlaylistLoaders and TextTracks for the subtitle groups
                 *
                 * @param {string} type
                 *        MediaGroup type
                 * @param {Object} settings
                 *        Object containing required information for media groups
                 * @function initialize.SUBTITLES
                 */ SUBTITLES: function(type, settings) {
                    var tech = settings.tech, vhs = settings.vhs, sourceType = settings.sourceType, segmentLoader = settings.segmentLoaders[type], requestOptions = settings.requestOptions, mediaGroups = settings.master.mediaGroups, _settings$mediaTypes$2 = settings.mediaTypes[type], groups = _settings$mediaTypes$2.groups, tracks = _settings$mediaTypes$2.tracks, masterPlaylistLoader = settings.masterPlaylistLoader;
                    for(var groupId in mediaGroups[type])for(var variantLabel in groups[groupId] || (groups[groupId] = []), mediaGroups[type][groupId])if (!mediaGroups[type][groupId][variantLabel].forced) {
                        var properties = mediaGroups[type][groupId][variantLabel], playlistLoader = void 0;
                        if ("hls" === sourceType) playlistLoader = new PlaylistLoader(properties.resolvedUri, vhs, requestOptions);
                        else if ("dash" === sourceType) {
                            if (!properties.playlists.filter(function(p) {
                                return p.excludeUntil !== 1 / 0;
                            }).length) return;
                            playlistLoader = new DashPlaylistLoader(properties.playlists[0], vhs, requestOptions, masterPlaylistLoader);
                        } else "vhs-json" === sourceType && (playlistLoader = new PlaylistLoader(// as provided, otherwise use the resolved URI to load the playlist
                        properties.playlists ? properties.playlists[0] : properties.resolvedUri, vhs, requestOptions));
                        if (properties = videojs.mergeOptions({
                            id: variantLabel,
                            playlistLoader: playlistLoader
                        }, properties), setupListeners[type](type, properties.playlistLoader, settings), groups[groupId].push(properties), void 0 === tracks[variantLabel]) {
                            var track = tech.addRemoteTextTrack({
                                id: variantLabel,
                                kind: "subtitles",
                                default: properties.default && properties.autoselect,
                                language: properties.language,
                                label: variantLabel
                            }, !1).track;
                            tracks[variantLabel] = track;
                        }
                    }
                     // setup single error event handler for the segment loader
                    segmentLoader.on("error", onError[type](type, settings));
                },
                /**
                 * Setup TextTracks for the closed-caption groups
                 *
                 * @param {String} type
                 *        MediaGroup type
                 * @param {Object} settings
                 *        Object containing required information for media groups
                 * @function initialize['CLOSED-CAPTIONS']
                 */ "CLOSED-CAPTIONS": function(type, settings) {
                    var tech = settings.tech, mediaGroups = settings.master.mediaGroups, _settings$mediaTypes$3 = settings.mediaTypes[type], groups = _settings$mediaTypes$3.groups, tracks = _settings$mediaTypes$3.tracks;
                    for(var groupId in mediaGroups[type])for(var variantLabel in groups[groupId] || (groups[groupId] = []), mediaGroups[type][groupId]){
                        var properties = mediaGroups[type][groupId][variantLabel]; // Look for either 608 (CCn) or 708 (SERVICEn) caption services
                        if (/^(?:CC|SERVICE)/.test(properties.instreamId)) {
                            var captionServices = tech.options_.vhs && tech.options_.vhs.captionServices || {}, newProps = {
                                label: variantLabel,
                                language: properties.language,
                                instreamId: properties.instreamId,
                                default: properties.default && properties.autoselect
                            };
                            if (captionServices[newProps.instreamId] && (newProps = videojs.mergeOptions(newProps, captionServices[newProps.instreamId])), void 0 === newProps.default && delete newProps.default, // embedded within the video stream
                            groups[groupId].push(videojs.mergeOptions({
                                id: variantLabel
                            }, properties)), void 0 === tracks[variantLabel]) {
                                var track = tech.addRemoteTextTrack({
                                    id: newProps.instreamId,
                                    kind: "captions",
                                    default: newProps.default,
                                    language: newProps.language,
                                    label: newProps.label
                                }, !1).track;
                                tracks[variantLabel] = track;
                            }
                        }
                    }
                }
            }, groupMatch = function groupMatch(list, media) {
                for(var i = 0; i < list.length; i++)if (playlistMatch(media, list[i]) || list[i].playlists && groupMatch(list[i].playlists, media)) return !0;
                return !1;
            }, activeTrack = {
                /**
                 * Returns a function used to get the active track of type provided
                 *
                 * @param {string} type
                 *        MediaGroup type
                 * @param {Object} settings
                 *        Object containing required information for media groups
                 * @return {Function}
                 *         Function that returns the active media track for the provided type. Returns
                 *         null if no track is active
                 * @function activeTrack.AUDIO
                 */ AUDIO: function(type, settings) {
                    return function() {
                        var tracks = settings.mediaTypes[type].tracks;
                        for(var id in tracks)if (tracks[id].enabled) return tracks[id];
                        return null;
                    };
                },
                /**
                 * Returns a function used to get the active track of type provided
                 *
                 * @param {string} type
                 *        MediaGroup type
                 * @param {Object} settings
                 *        Object containing required information for media groups
                 * @return {Function}
                 *         Function that returns the active media track for the provided type. Returns
                 *         null if no track is active
                 * @function activeTrack.SUBTITLES
                 */ SUBTITLES: function(type, settings) {
                    return function() {
                        var tracks = settings.mediaTypes[type].tracks;
                        for(var id in tracks)if ("showing" === tracks[id].mode || "hidden" === tracks[id].mode) return tracks[id];
                        return null;
                    };
                }
            }, getActiveGroup = function(type, _ref) {
                var mediaTypes = _ref.mediaTypes;
                return function() {
                    var activeTrack_ = mediaTypes[type].activeTrack();
                    return activeTrack_ ? mediaTypes[type].activeGroup(activeTrack_) : null;
                };
            }, setupMediaGroups = function(settings) {
                [
                    "AUDIO",
                    "SUBTITLES",
                    "CLOSED-CAPTIONS"
                ].forEach(function(type) {
                    initialize[type](type, settings);
                });
                var mediaTypes = settings.mediaTypes, masterPlaylistLoader = settings.masterPlaylistLoader, tech = settings.tech, vhs = settings.vhs, _settings$segmentLoad3 = settings.segmentLoaders, audioSegmentLoader = _settings$segmentLoad3.AUDIO, mainSegmentLoader = _settings$segmentLoad3.main; // setup active group and track getters and change event handlers
                [
                    "AUDIO",
                    "SUBTITLES"
                ].forEach(function(type) {
                    mediaTypes[type].activeGroup = function(track) {
                        var masterPlaylistLoader = settings.masterPlaylistLoader, groups = settings.mediaTypes[type].groups, media = masterPlaylistLoader.media();
                        if (!media) return null;
                        var variants = null; // set to variants to main media active group
                        media.attributes[type] && (variants = groups[media.attributes[type]]);
                        var groupKeys = Object.keys(groups);
                        if (!variants) {
                            // find the masterPlaylistLoader media
                            // that is in a media group if we are dealing
                            // with audio only
                            if ("AUDIO" === type && groupKeys.length > 1 && isAudioOnly(settings.master)) for(var i = 0; i < groupKeys.length; i++){
                                var groupPropertyList = groups[groupKeys[i]];
                                if (groupMatch(groupPropertyList, media)) {
                                    variants = groupPropertyList;
                                    break;
                                }
                            } // use the main group if it exists
                            else groups.main ? variants = groups.main : 1 === groupKeys.length && (variants = groups[groupKeys[0]]);
                        }
                        return void 0 === track ? variants : null !== track && variants && variants.filter(function(props) {
                            return props.id === track.id;
                        })[0] || null;
                    }, mediaTypes[type].activeTrack = activeTrack[type](type, settings), mediaTypes[type].onGroupChanged = function() {
                        var _settings$segmentLoad = settings.segmentLoaders, segmentLoader = _settings$segmentLoad[type], mainSegmentLoader = _settings$segmentLoad.main, mediaType = settings.mediaTypes[type], activeTrack = mediaType.activeTrack(), activeGroup = mediaType.getActiveGroup(), previousActiveLoader = mediaType.activePlaylistLoader, lastGroup = mediaType.lastGroup_;
                        if ((!activeGroup || !lastGroup || activeGroup.id !== lastGroup.id) && (mediaType.lastGroup_ = activeGroup, mediaType.lastTrack_ = activeTrack, stopLoaders(segmentLoader, mediaType), activeGroup && !activeGroup.isMasterPlaylist)) {
                            if (!activeGroup.playlistLoader) {
                                previousActiveLoader && // The previous group had a playlist loader but the new active group does not
                                // this means we are switching from demuxed to muxed audio. In this case we want to
                                // do a destructive reset of the main segment loader and not restart the audio
                                // loaders.
                                mainSegmentLoader.resetEverything();
                                return;
                            } // Non-destructive resync
                            segmentLoader.resyncLoader(), startLoaders(activeGroup.playlistLoader, mediaType);
                        }
                    }, mediaTypes[type].onGroupChanging = function() {
                        var segmentLoader = settings.segmentLoaders[type];
                        settings.mediaTypes[type].lastGroup_ = null, segmentLoader.abort(), segmentLoader.pause();
                    }, mediaTypes[type].onTrackChanged = function() {
                        var masterPlaylistLoader = settings.masterPlaylistLoader, _settings$segmentLoad2 = settings.segmentLoaders, segmentLoader = _settings$segmentLoad2[type], mainSegmentLoader = _settings$segmentLoad2.main, mediaType = settings.mediaTypes[type], activeTrack = mediaType.activeTrack(), activeGroup = mediaType.getActiveGroup(), previousActiveLoader = mediaType.activePlaylistLoader, lastTrack = mediaType.lastTrack_;
                        if ((!lastTrack || !activeTrack || lastTrack.id !== activeTrack.id) && (mediaType.lastGroup_ = activeGroup, mediaType.lastTrack_ = activeTrack, stopLoaders(segmentLoader, mediaType), activeGroup)) {
                            if (activeGroup.isMasterPlaylist) {
                                // track did not change, do nothing
                                if (!activeTrack || !lastTrack || activeTrack.id === lastTrack.id) return;
                                var mpc = settings.vhs.masterPlaylistController_, newPlaylist = mpc.selectPlaylist();
                                if (mpc.media() === newPlaylist) return;
                                mediaType.logger_("track change. Switching master audio from " + lastTrack.id + " to " + activeTrack.id), masterPlaylistLoader.pause(), mainSegmentLoader.resetEverything(), mpc.fastQualityChange_(newPlaylist);
                                return;
                            }
                            if ("AUDIO" === type) {
                                if (!activeGroup.playlistLoader) {
                                    // when switching from demuxed audio/video to muxed audio/video (noted by no
                                    // playlist loader for the audio group), we want to do a destructive reset of the
                                    // main segment loader and not restart the audio loaders
                                    mainSegmentLoader.setAudio(!0), // it should be stopped
                                    mainSegmentLoader.resetEverything();
                                    return;
                                } // although the segment loader is an audio segment loader, call the setAudio
                                // function to ensure it is prepared to re-append the init segment (or handle other
                                // config changes)
                                segmentLoader.setAudio(!0), mainSegmentLoader.setAudio(!1);
                            }
                            if (previousActiveLoader === activeGroup.playlistLoader) {
                                // Nothing has actually changed. This can happen because track change events can fire
                                // multiple times for a "single" change. One for enabling the new active track, and
                                // one for disabling the track that was active
                                startLoaders(activeGroup.playlistLoader, mediaType);
                                return;
                            }
                            segmentLoader.track && // For WebVTT, set the new text track in the segmentloader
                            segmentLoader.track(activeTrack), segmentLoader.resetEverything(), startLoaders(activeGroup.playlistLoader, mediaType);
                        }
                    }, mediaTypes[type].getActiveGroup = getActiveGroup(type, settings);
                });
                // DO enable the default audio track
                var audioGroup = mediaTypes.AUDIO.activeGroup();
                if (audioGroup) {
                    var groupId = (audioGroup.filter(function(group) {
                        return group.default;
                    })[0] || audioGroup[0]).id;
                    mediaTypes.AUDIO.tracks[groupId].enabled = !0, mediaTypes.AUDIO.onGroupChanged(), mediaTypes.AUDIO.onTrackChanged(), mediaTypes.AUDIO.getActiveGroup().playlistLoader ? (// audio is demuxed
                    mainSegmentLoader.setAudio(!1), audioSegmentLoader.setAudio(!0)) : // either audio is muxed with video or the stream is audio only
                    mainSegmentLoader.setAudio(!0);
                }
                masterPlaylistLoader.on("mediachange", function() {
                    [
                        "AUDIO",
                        "SUBTITLES"
                    ].forEach(function(type) {
                        return mediaTypes[type].onGroupChanged();
                    });
                }), masterPlaylistLoader.on("mediachanging", function() {
                    [
                        "AUDIO",
                        "SUBTITLES"
                    ].forEach(function(type) {
                        return mediaTypes[type].onGroupChanging();
                    });
                });
                var onAudioTrackChanged = function() {
                    mediaTypes.AUDIO.onTrackChanged(), tech.trigger({
                        type: "usage",
                        name: "vhs-audio-change"
                    }), tech.trigger({
                        type: "usage",
                        name: "hls-audio-change"
                    });
                };
                for(var id in tech.audioTracks().addEventListener("change", onAudioTrackChanged), tech.remoteTextTracks().addEventListener("change", mediaTypes.SUBTITLES.onTrackChanged), vhs.on("dispose", function() {
                    tech.audioTracks().removeEventListener("change", onAudioTrackChanged), tech.remoteTextTracks().removeEventListener("change", mediaTypes.SUBTITLES.onTrackChanged);
                }), tech.clearTracks("audio"), mediaTypes.AUDIO.tracks)tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id]);
            }, createMediaTypes = function() {
                var mediaTypes = {};
                return [
                    "AUDIO",
                    "SUBTITLES",
                    "CLOSED-CAPTIONS"
                ].forEach(function(type) {
                    mediaTypes[type] = {
                        groups: {},
                        tracks: {},
                        activePlaylistLoader: null,
                        activeGroup: noop,
                        activeTrack: noop,
                        getActiveGroup: noop,
                        onGroupChanged: noop,
                        onTrackChanged: noop,
                        lastTrack_: null,
                        logger_: logger("MediaGroups[" + type + "]")
                    };
                }), mediaTypes;
            }, loaderStats = [
                "mediaRequests",
                "mediaRequestsAborted",
                "mediaRequestsTimedout",
                "mediaRequestsErrored",
                "mediaTransferDuration",
                "mediaBytesTransferred",
                "mediaAppends"
            ], sumLoaderStat = function(stat) {
                return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];
            }, shouldSwitchToMedia = function(_ref) {
                var currentPlaylist = _ref.currentPlaylist, buffered = _ref.buffered, currentTime = _ref.currentTime, nextPlaylist = _ref.nextPlaylist, bufferLowWaterLine = _ref.bufferLowWaterLine, bufferHighWaterLine = _ref.bufferHighWaterLine, duration = _ref.duration, experimentalBufferBasedABR = _ref.experimentalBufferBasedABR, log = _ref.log; // we have no other playlist to switch to
                if (!nextPlaylist) return videojs.log.warn("We received no playlist to switch to. Please check your stream."), !1;
                var sharedLogLine = "allowing switch " + (currentPlaylist && currentPlaylist.id || "null") + " -> " + nextPlaylist.id;
                if (!currentPlaylist) return log(sharedLogLine + " as current playlist is not set"), !0;
                 // no need to switch if playlist is the same
                if (nextPlaylist.id === currentPlaylist.id) return !1;
                 // determine if current time is in a buffered range.
                var isBuffered = !!findRange(buffered, currentTime).length; // If the playlist is live, then we want to not take low water line into account.
                // This is because in LIVE, the player plays 3 segments from the end of the
                // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble
                // in those segments, a viewer will never experience a rendition upswitch.
                if (!currentPlaylist.endList) return(// For LLHLS live streams, don't switch renditions before playback has started, as it almost
                // doubles the time to first playback.
                isBuffered || "number" != typeof currentPlaylist.partTargetDuration ? (log(sharedLogLine + " as current playlist is live"), !0) : (log("not " + sharedLogLine + " as current playlist is live llhls, but currentTime isn't in buffered."), !1));
                var forwardBuffer = timeAheadOf(buffered, currentTime), maxBufferLowWaterLine = experimentalBufferBasedABR ? Config.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE : Config.MAX_BUFFER_LOW_WATER_LINE;
                // duration is below the max potential low water line
                if (duration < maxBufferLowWaterLine) return log(sharedLogLine + " as duration < max low water line (" + duration + " < " + maxBufferLowWaterLine + ")"), !0;
                var nextBandwidth = nextPlaylist.attributes.BANDWIDTH, currBandwidth = currentPlaylist.attributes.BANDWIDTH;
                // we can switch down
                if (nextBandwidth < currBandwidth && (!experimentalBufferBasedABR || forwardBuffer < bufferHighWaterLine)) {
                    var logLine = sharedLogLine + " as next bandwidth < current bandwidth (" + nextBandwidth + " < " + currBandwidth + ")";
                    return experimentalBufferBasedABR && (logLine += " and forwardBuffer < bufferHighWaterLine (" + forwardBuffer + " < " + bufferHighWaterLine + ")"), log(logLine), !0;
                } // and if our buffer is higher than the low water line,
                // we can switch up
                if ((!experimentalBufferBasedABR || nextBandwidth > currBandwidth) && forwardBuffer >= bufferLowWaterLine) {
                    var _logLine = sharedLogLine + " as forwardBuffer >= bufferLowWaterLine (" + forwardBuffer + " >= " + bufferLowWaterLine + ")";
                    return experimentalBufferBasedABR && (_logLine += " and next bandwidth > current bandwidth (" + nextBandwidth + " > " + currBandwidth + ")"), log(_logLine), !0;
                }
                return log("not " + sharedLogLine + " as no switching criteria met"), !1;
            }, MasterPlaylistController = /*#__PURE__*/ function(_videojs$EventTarget) {
                function MasterPlaylistController(options) {
                    _this = _videojs$EventTarget.call(this) || this;
                    var _this, src = options.src, handleManifestRedirects = options.handleManifestRedirects, withCredentials = options.withCredentials, tech = options.tech, bandwidth = options.bandwidth, externVhs = options.externVhs, useCueTags = options.useCueTags, blacklistDuration = options.blacklistDuration, enableLowInitialPlaylist = options.enableLowInitialPlaylist, sourceType = options.sourceType, cacheEncryptionKeys = options.cacheEncryptionKeys, experimentalBufferBasedABR = options.experimentalBufferBasedABR, experimentalLeastPixelDiffSelector = options.experimentalLeastPixelDiffSelector, captionServices = options.captionServices;
                    if (!src) throw Error("A non-empty playlist URL or JSON manifest string is required");
                    var maxPlaylistRetries = options.maxPlaylistRetries;
                    null == maxPlaylistRetries && (maxPlaylistRetries = 1 / 0), Vhs$1 = externVhs, _this.experimentalBufferBasedABR = !!experimentalBufferBasedABR, _this.experimentalLeastPixelDiffSelector = !!experimentalLeastPixelDiffSelector, _this.withCredentials = withCredentials, _this.tech_ = tech, _this.vhs_ = tech.vhs, _this.sourceType_ = sourceType, _this.useCueTags_ = useCueTags, _this.blacklistDuration = blacklistDuration, _this.maxPlaylistRetries = maxPlaylistRetries, _this.enableLowInitialPlaylist = enableLowInitialPlaylist, _this.useCueTags_ && (_this.cueTagsTrack_ = _this.tech_.addTextTrack("metadata", "ad-cues"), _this.cueTagsTrack_.inBandMetadataTrackDispatchType = ""), _this.requestOptions_ = {
                        withCredentials: withCredentials,
                        handleManifestRedirects: handleManifestRedirects,
                        maxPlaylistRetries: maxPlaylistRetries,
                        timeout: null
                    }, _this.on("error", _this.pauseLoading), _this.mediaTypes_ = createMediaTypes(), _this.mediaSource = new (global_window__WEBPACK_IMPORTED_MODULE_0___default()).MediaSource(), _this.handleDurationChange_ = _this.handleDurationChange_.bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this)), _this.handleSourceOpen_ = _this.handleSourceOpen_.bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this)), _this.handleSourceEnded_ = _this.handleSourceEnded_.bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this)), _this.mediaSource.addEventListener("durationchange", _this.handleDurationChange_), _this.mediaSource.addEventListener("sourceopen", _this.handleSourceOpen_), _this.mediaSource.addEventListener("sourceended", _this.handleSourceEnded_), // everything, and the MediaSource should not be detached without a proper disposal
                    _this.seekable_ = videojs.createTimeRanges(), _this.hasPlayed_ = !1, _this.syncController_ = new SyncController(options), _this.segmentMetadataTrack_ = tech.addRemoteTextTrack({
                        kind: "metadata",
                        label: "segment-metadata"
                    }, !1).track, _this.decrypter_ = new Decrypter(), _this.sourceUpdater_ = new SourceUpdater(_this.mediaSource), _this.inbandTextTracks_ = {}, _this.timelineChangeController_ = new TimelineChangeController();
                    var segmentLoaderSettings = {
                        vhs: _this.vhs_,
                        parse708captions: options.parse708captions,
                        captionServices: captionServices,
                        mediaSource: _this.mediaSource,
                        currentTime: _this.tech_.currentTime.bind(_this.tech_),
                        seekable: function() {
                            return _this.seekable();
                        },
                        seeking: function() {
                            return _this.tech_.seeking();
                        },
                        duration: function() {
                            return _this.duration();
                        },
                        hasPlayed: function() {
                            return _this.hasPlayed_;
                        },
                        goalBufferLength: function() {
                            return _this.goalBufferLength();
                        },
                        bandwidth: bandwidth,
                        syncController: _this.syncController_,
                        decrypter: _this.decrypter_,
                        sourceType: _this.sourceType_,
                        inbandTextTracks: _this.inbandTextTracks_,
                        cacheEncryptionKeys: cacheEncryptionKeys,
                        sourceUpdater: _this.sourceUpdater_,
                        timelineChangeController: _this.timelineChangeController_,
                        experimentalExactManifestTimings: options.experimentalExactManifestTimings
                    }; // The source type check not only determines whether a special DASH playlist loader
                    // should be used, but also covers the case where the provided src is a vhs-json
                    // manifest object (instead of a URL). In the case of vhs-json, the default
                    // PlaylistLoader should be used.
                    _this.masterPlaylistLoader_ = "dash" === _this.sourceType_ ? new DashPlaylistLoader(src, _this.vhs_, _this.requestOptions_) : new PlaylistLoader(src, _this.vhs_, _this.requestOptions_), _this.setupMasterPlaylistLoaderListeners_(), // combined audio/video or just video when alternate audio track is selected
                    _this.mainSegmentLoader_ = new SegmentLoader(videojs.mergeOptions(segmentLoaderSettings, {
                        segmentMetadataTrack: _this.segmentMetadataTrack_,
                        loaderType: "main"
                    }), options), _this.audioSegmentLoader_ = new SegmentLoader(videojs.mergeOptions(segmentLoaderSettings, {
                        loaderType: "audio"
                    }), options), _this.subtitleSegmentLoader_ = new VTTSegmentLoader(videojs.mergeOptions(segmentLoaderSettings, {
                        loaderType: "vtt",
                        featuresNativeTextTracks: _this.tech_.featuresNativeTextTracks
                    }), options), _this.setupSegmentLoaderListeners_(), _this.experimentalBufferBasedABR && (_this.masterPlaylistLoader_.one("loadedplaylist", function() {
                        return _this.startABRTimer_();
                    }), _this.tech_.on("pause", function() {
                        return _this.stopABRTimer_();
                    }), _this.tech_.on("play", function() {
                        return _this.startABRTimer_();
                    })), // mediaRequests_
                    // mediaRequestsAborted_
                    // mediaRequestsTimedout_
                    // mediaRequestsErrored_
                    // mediaTransferDuration_
                    // mediaBytesTransferred_
                    // mediaAppends_
                    loaderStats.forEach(function(stat) {
                        _this[stat + "_"] = sumLoaderStat.bind((0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this), stat);
                    }), _this.logger_ = logger("MPC"), _this.triggeredFmp4Usage = !1, "none" === _this.tech_.preload() ? (_this.loadOnPlay_ = function() {
                        _this.loadOnPlay_ = null, _this.masterPlaylistLoader_.load();
                    }, _this.tech_.one("play", _this.loadOnPlay_)) : _this.masterPlaylistLoader_.load(), _this.timeToLoadedData__ = -1, _this.mainAppendsToLoadedData__ = -1, _this.audioAppendsToLoadedData__ = -1;
                    var event = "none" === _this.tech_.preload() ? "play" : "loadstart"; // start the first frame timer on loadstart or play (for preload none)
                    return _this.tech_.one(event, function() {
                        var timeToLoadedDataStart = Date.now();
                        _this.tech_.one("loadeddata", function() {
                            _this.timeToLoadedData__ = Date.now() - timeToLoadedDataStart, _this.mainAppendsToLoadedData__ = _this.mainSegmentLoader_.mediaAppends, _this.audioAppendsToLoadedData__ = _this.audioSegmentLoader_.mediaAppends;
                        });
                    }), _this;
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(MasterPlaylistController, _videojs$EventTarget);
                var _proto = MasterPlaylistController.prototype;
                return _proto.mainAppendsToLoadedData_ = function() {
                    return this.mainAppendsToLoadedData__;
                }, _proto.audioAppendsToLoadedData_ = function() {
                    return this.audioAppendsToLoadedData__;
                }, _proto.appendsToLoadedData_ = function() {
                    var main = this.mainAppendsToLoadedData_(), audio = this.audioAppendsToLoadedData_();
                    return -1 === main || -1 === audio ? -1 : main + audio;
                }, _proto.timeToLoadedData_ = function() {
                    return this.timeToLoadedData__;
                }, /**
                 * Run selectPlaylist and switch to the new playlist if we should
                 *
                 * @private
                 *
                 */ _proto.checkABR_ = function() {
                    var nextPlaylist = this.selectPlaylist();
                    nextPlaylist && this.shouldSwitchToMedia_(nextPlaylist) && this.switchMedia_(nextPlaylist, "abr");
                }, _proto.switchMedia_ = function(playlist, cause, delay) {
                    var oldMedia = this.media(), oldId = oldMedia && (oldMedia.id || oldMedia.uri), newId = playlist.id || playlist.uri;
                    oldId && oldId !== newId && (this.logger_("switch media " + oldId + " -> " + newId + " from " + cause), this.tech_.trigger({
                        type: "usage",
                        name: "vhs-rendition-change-" + cause
                    })), this.masterPlaylistLoader_.media(playlist, delay);
                }, /**
                 * Start a timer that periodically calls checkABR_
                 *
                 * @private
                 */ _proto.startABRTimer_ = function() {
                    var _this2 = this;
                    this.stopABRTimer_(), this.abrTimer_ = global_window__WEBPACK_IMPORTED_MODULE_0___default().setInterval(function() {
                        return _this2.checkABR_();
                    }, 250);
                }, /**
                 * Stop the timer that periodically calls checkABR_
                 *
                 * @private
                 */ _proto.stopABRTimer_ = function() {
                    // if we're scrubbing, we don't need to pause.
                    // This getter will be added to Video.js in version 7.11.
                    this.tech_.scrubbing && this.tech_.scrubbing() || (global_window__WEBPACK_IMPORTED_MODULE_0___default().clearInterval(this.abrTimer_), this.abrTimer_ = null);
                }, /**
                 * Get a list of playlists for the currently selected audio playlist
                 *
                 * @return {Array} the array of audio playlists
                 */ _proto.getAudioTrackPlaylists_ = function() {
                    var track, master = this.master(), defaultPlaylists = master && master.playlists || [];
                    // assume that the audio tracks are contained in masters
                    // playlist array, use that or an empty array.
                    if (!master || !master.mediaGroups || !master.mediaGroups.AUDIO) return defaultPlaylists;
                    var AUDIO = master.mediaGroups.AUDIO, groupKeys = Object.keys(AUDIO);
                    if (Object.keys(this.mediaTypes_.AUDIO.groups).length) track = this.mediaTypes_.AUDIO.activeTrack(); // or get the default track from master if mediaTypes_ isn't setup yet
                    else {
                        // default group is `main` or just the first group.
                        var defaultGroup = AUDIO.main || groupKeys.length && AUDIO[groupKeys[0]];
                        for(var label in defaultGroup)if (defaultGroup[label].default) {
                            track = {
                                label: label
                            };
                            break;
                        }
                    } // no active track no playlists.
                    if (!track) return defaultPlaylists;
                    var playlists = []; // get all of the playlists that are possible for the
                    // active track.
                    for(var group in AUDIO)if (AUDIO[group][track.label]) {
                        var properties = AUDIO[group][track.label];
                        if (properties.playlists && properties.playlists.length) playlists.push.apply(playlists, properties.playlists);
                        else if (properties.uri) playlists.push(properties);
                        else if (master.playlists.length) // if an audio group does not have a uri
                        // see if we have main playlists that use it as a group.
                        // if we do then add those to the playlists list.
                        for(var i = 0; i < master.playlists.length; i++){
                            var playlist = master.playlists[i];
                            playlist.attributes && playlist.attributes.AUDIO && playlist.attributes.AUDIO === group && playlists.push(playlist);
                        }
                    }
                    return playlists.length ? playlists : defaultPlaylists;
                }, /**
                 * Register event handlers on the master playlist loader. A helper
                 * function for construction time.
                 *
                 * @private
                 */ _proto.setupMasterPlaylistLoaderListeners_ = function() {
                    var _this3 = this;
                    this.masterPlaylistLoader_.on("loadedmetadata", function() {
                        var media = _this3.masterPlaylistLoader_.media(), requestTimeout = 1500 * media.targetDuration;
                        isLowestEnabledRendition(_this3.masterPlaylistLoader_.master, _this3.masterPlaylistLoader_.media()) ? _this3.requestOptions_.timeout = 0 : _this3.requestOptions_.timeout = requestTimeout, media.endList && "none" !== _this3.tech_.preload() && (_this3.mainSegmentLoader_.playlist(media, _this3.requestOptions_), _this3.mainSegmentLoader_.load()), setupMediaGroups({
                            sourceType: _this3.sourceType_,
                            segmentLoaders: {
                                AUDIO: _this3.audioSegmentLoader_,
                                SUBTITLES: _this3.subtitleSegmentLoader_,
                                main: _this3.mainSegmentLoader_
                            },
                            tech: _this3.tech_,
                            requestOptions: _this3.requestOptions_,
                            masterPlaylistLoader: _this3.masterPlaylistLoader_,
                            vhs: _this3.vhs_,
                            master: _this3.master(),
                            mediaTypes: _this3.mediaTypes_,
                            blacklistCurrentPlaylist: _this3.blacklistCurrentPlaylist.bind(_this3)
                        }), _this3.triggerPresenceUsage_(_this3.master(), media), _this3.setupFirstPlay(), !_this3.mediaTypes_.AUDIO.activePlaylistLoader || _this3.mediaTypes_.AUDIO.activePlaylistLoader.media() ? _this3.trigger("selectedinitialmedia") : // We must wait for the active audio playlist loader to
                        // finish setting up before triggering this event so the
                        // representations API and EME setup is correct
                        _this3.mediaTypes_.AUDIO.activePlaylistLoader.one("loadedmetadata", function() {
                            _this3.trigger("selectedinitialmedia");
                        });
                    }), this.masterPlaylistLoader_.on("loadedplaylist", function() {
                        _this3.loadOnPlay_ && _this3.tech_.off("play", _this3.loadOnPlay_);
                        var selectedMedia, updatedPlaylist = _this3.masterPlaylistLoader_.media();
                        if (!updatedPlaylist) {
                            if (// exclude any variants that are not supported by the browser before selecting
                            // an initial media as the playlist selectors do not consider browser support
                            _this3.excludeUnsupportedVariants_(), _this3.enableLowInitialPlaylist && (selectedMedia = _this3.selectInitialPlaylist()), selectedMedia || (selectedMedia = _this3.selectPlaylist()), !selectedMedia || !_this3.shouldSwitchToMedia_(selectedMedia) || (_this3.initialMedia_ = selectedMedia, _this3.switchMedia_(_this3.initialMedia_, "initial"), !("vhs-json" === _this3.sourceType_ && _this3.initialMedia_.segments))) return;
                            updatedPlaylist = _this3.initialMedia_;
                        }
                        _this3.handleUpdatedMediaPlaylist(updatedPlaylist);
                    }), this.masterPlaylistLoader_.on("error", function() {
                        _this3.blacklistCurrentPlaylist(_this3.masterPlaylistLoader_.error);
                    }), this.masterPlaylistLoader_.on("mediachanging", function() {
                        _this3.mainSegmentLoader_.abort(), _this3.mainSegmentLoader_.pause();
                    }), this.masterPlaylistLoader_.on("mediachange", function() {
                        var media = _this3.masterPlaylistLoader_.media(), requestTimeout = 1500 * media.targetDuration;
                        isLowestEnabledRendition(_this3.masterPlaylistLoader_.master, _this3.masterPlaylistLoader_.media()) ? _this3.requestOptions_.timeout = 0 : _this3.requestOptions_.timeout = requestTimeout, // that the segments have changed in some way and use that to
                        // update the SegmentLoader instead of doing it twice here and
                        // on `loadedplaylist`
                        _this3.mainSegmentLoader_.playlist(media, _this3.requestOptions_), _this3.mainSegmentLoader_.load(), _this3.tech_.trigger({
                            type: "mediachange",
                            bubbles: !0
                        });
                    }), this.masterPlaylistLoader_.on("playlistunchanged", function() {
                        var updatedPlaylist = _this3.masterPlaylistLoader_.media(); // ignore unchanged playlists that have already been
                        // excluded for not-changing. We likely just have a really slowly updating
                        // playlist.
                        "playlist-unchanged" !== updatedPlaylist.lastExcludeReason_ && _this3.stuckAtPlaylistEnd_(updatedPlaylist) && (// Playlist has stopped updating and we're stuck at its end. Try to
                        // blacklist it and switch to another playlist in the hope that that
                        // one is updating (and give the player a chance to re-adjust to the
                        // safe live point).
                        _this3.blacklistCurrentPlaylist({
                            message: "Playlist no longer updating.",
                            reason: "playlist-unchanged"
                        }), _this3.tech_.trigger("playliststuck"));
                    }), this.masterPlaylistLoader_.on("renditiondisabled", function() {
                        _this3.tech_.trigger({
                            type: "usage",
                            name: "vhs-rendition-disabled"
                        }), _this3.tech_.trigger({
                            type: "usage",
                            name: "hls-rendition-disabled"
                        });
                    }), this.masterPlaylistLoader_.on("renditionenabled", function() {
                        _this3.tech_.trigger({
                            type: "usage",
                            name: "vhs-rendition-enabled"
                        }), _this3.tech_.trigger({
                            type: "usage",
                            name: "hls-rendition-enabled"
                        });
                    });
                }, /**
                 * Given an updated media playlist (whether it was loaded for the first time, or
                 * refreshed for live playlists), update any relevant properties and state to reflect
                 * changes in the media that should be accounted for (e.g., cues and duration).
                 *
                 * @param {Object} updatedPlaylist the updated media playlist object
                 *
                 * @private
                 */ _proto.handleUpdatedMediaPlaylist = function(updatedPlaylist) {
                    this.useCueTags_ && this.updateAdCues_(updatedPlaylist), // that the segments have changed in some way and use that to
                    // update the SegmentLoader instead of doing it twice here and
                    // on `mediachange`
                    this.mainSegmentLoader_.playlist(updatedPlaylist, this.requestOptions_), this.updateDuration(!updatedPlaylist.endList), !this.tech_.paused() && (this.mainSegmentLoader_.load(), this.audioSegmentLoader_ && this.audioSegmentLoader_.load());
                }, /**
                 * A helper function for triggerring presence usage events once per source
                 *
                 * @private
                 */ _proto.triggerPresenceUsage_ = function(master, media) {
                    var mediaGroups = master.mediaGroups || {}, defaultDemuxed = !0, audioGroupKeys = Object.keys(mediaGroups.AUDIO);
                    for(var mediaGroup in mediaGroups.AUDIO)for(var label in mediaGroups.AUDIO[mediaGroup])mediaGroups.AUDIO[mediaGroup][label].uri || (defaultDemuxed = !1);
                    defaultDemuxed && (this.tech_.trigger({
                        type: "usage",
                        name: "vhs-demuxed"
                    }), this.tech_.trigger({
                        type: "usage",
                        name: "hls-demuxed"
                    })), Object.keys(mediaGroups.SUBTITLES).length && (this.tech_.trigger({
                        type: "usage",
                        name: "vhs-webvtt"
                    }), this.tech_.trigger({
                        type: "usage",
                        name: "hls-webvtt"
                    })), Vhs$1.Playlist.isAes(media) && (this.tech_.trigger({
                        type: "usage",
                        name: "vhs-aes"
                    }), this.tech_.trigger({
                        type: "usage",
                        name: "hls-aes"
                    })), audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1 && (this.tech_.trigger({
                        type: "usage",
                        name: "vhs-alternate-audio"
                    }), this.tech_.trigger({
                        type: "usage",
                        name: "hls-alternate-audio"
                    })), this.useCueTags_ && (this.tech_.trigger({
                        type: "usage",
                        name: "vhs-playlist-cue-tags"
                    }), this.tech_.trigger({
                        type: "usage",
                        name: "hls-playlist-cue-tags"
                    }));
                }, _proto.shouldSwitchToMedia_ = function(nextPlaylist) {
                    var currentPlaylist = this.masterPlaylistLoader_.media() || this.masterPlaylistLoader_.pendingMedia_, currentTime = this.tech_.currentTime(), bufferLowWaterLine = this.bufferLowWaterLine(), bufferHighWaterLine = this.bufferHighWaterLine();
                    return shouldSwitchToMedia({
                        buffered: this.tech_.buffered(),
                        currentTime: currentTime,
                        currentPlaylist: currentPlaylist,
                        nextPlaylist: nextPlaylist,
                        bufferLowWaterLine: bufferLowWaterLine,
                        bufferHighWaterLine: bufferHighWaterLine,
                        duration: this.duration(),
                        experimentalBufferBasedABR: this.experimentalBufferBasedABR,
                        log: this.logger_
                    });
                }, /**
                 * Register event handlers on the segment loaders. A helper function
                 * for construction time.
                 *
                 * @private
                 */ _proto.setupSegmentLoaderListeners_ = function() {
                    var _this4 = this;
                    this.experimentalBufferBasedABR || (this.mainSegmentLoader_.on("bandwidthupdate", function() {
                        var nextPlaylist = _this4.selectPlaylist();
                        _this4.shouldSwitchToMedia_(nextPlaylist) && _this4.switchMedia_(nextPlaylist, "bandwidthupdate"), _this4.tech_.trigger("bandwidthupdate");
                    }), this.mainSegmentLoader_.on("progress", function() {
                        _this4.trigger("progress");
                    })), this.mainSegmentLoader_.on("error", function() {
                        _this4.blacklistCurrentPlaylist(_this4.mainSegmentLoader_.error());
                    }), this.mainSegmentLoader_.on("appenderror", function() {
                        _this4.error = _this4.mainSegmentLoader_.error_, _this4.trigger("error");
                    }), this.mainSegmentLoader_.on("syncinfoupdate", function() {
                        _this4.onSyncInfoUpdate_();
                    }), this.mainSegmentLoader_.on("timestampoffset", function() {
                        _this4.tech_.trigger({
                            type: "usage",
                            name: "vhs-timestamp-offset"
                        }), _this4.tech_.trigger({
                            type: "usage",
                            name: "hls-timestamp-offset"
                        });
                    }), this.audioSegmentLoader_.on("syncinfoupdate", function() {
                        _this4.onSyncInfoUpdate_();
                    }), this.audioSegmentLoader_.on("appenderror", function() {
                        _this4.error = _this4.audioSegmentLoader_.error_, _this4.trigger("error");
                    }), this.mainSegmentLoader_.on("ended", function() {
                        _this4.logger_("main segment loader ended"), _this4.onEndOfStream();
                    }), this.mainSegmentLoader_.on("earlyabort", function(event) {
                        // never try to early abort with the new ABR algorithm
                        _this4.experimentalBufferBasedABR || (_this4.delegateLoaders_("all", [
                            "abort"
                        ]), _this4.blacklistCurrentPlaylist({
                            message: "Aborted early because there isn't enough bandwidth to complete the request without rebuffering."
                        }, 120));
                    });
                    var updateCodecs = function() {
                        if (!_this4.sourceUpdater_.hasCreatedSourceBuffers()) return _this4.tryToCreateSourceBuffers_();
                        var codecs = _this4.getCodecsOrExclude_(); // no codecs means that the playlist was excluded
                        codecs && _this4.sourceUpdater_.addOrChangeSourceBuffers(codecs);
                    };
                    this.mainSegmentLoader_.on("trackinfo", updateCodecs), this.audioSegmentLoader_.on("trackinfo", updateCodecs), this.mainSegmentLoader_.on("fmp4", function() {
                        _this4.triggeredFmp4Usage || (_this4.tech_.trigger({
                            type: "usage",
                            name: "vhs-fmp4"
                        }), _this4.tech_.trigger({
                            type: "usage",
                            name: "hls-fmp4"
                        }), _this4.triggeredFmp4Usage = !0);
                    }), this.audioSegmentLoader_.on("fmp4", function() {
                        _this4.triggeredFmp4Usage || (_this4.tech_.trigger({
                            type: "usage",
                            name: "vhs-fmp4"
                        }), _this4.tech_.trigger({
                            type: "usage",
                            name: "hls-fmp4"
                        }), _this4.triggeredFmp4Usage = !0);
                    }), this.audioSegmentLoader_.on("ended", function() {
                        _this4.logger_("audioSegmentLoader ended"), _this4.onEndOfStream();
                    });
                }, _proto.mediaSecondsLoaded_ = function() {
                    return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);
                }, /**
                 * Call load on our SegmentLoaders
                 */ _proto.load = function() {
                    this.mainSegmentLoader_.load(), this.mediaTypes_.AUDIO.activePlaylistLoader && this.audioSegmentLoader_.load(), this.mediaTypes_.SUBTITLES.activePlaylistLoader && this.subtitleSegmentLoader_.load();
                }, /**
                 * Re-tune playback quality level for the current player
                 * conditions without performing destructive actions, like
                 * removing already buffered content
                 *
                 * @private
                 * @deprecated
                 */ _proto.smoothQualityChange_ = function(media) {
                    void 0 === media && (media = this.selectPlaylist()), this.fastQualityChange_(media);
                }, /**
                 * Re-tune playback quality level for the current player
                 * conditions. This method will perform destructive actions like removing
                 * already buffered content in order to readjust the currently active
                 * playlist quickly. This is good for manual quality changes
                 *
                 * @private
                 */ _proto.fastQualityChange_ = function(media) {
                    var _this5 = this;
                    if (void 0 === media && (media = this.selectPlaylist()), media === this.masterPlaylistLoader_.media()) {
                        this.logger_("skipping fastQualityChange because new media is same as old");
                        return;
                    }
                    this.switchMedia_(media, "fast-quality"), // the browser a kick to remove any cached frames from the previous rendtion (.04 seconds
                    // ahead is roughly the minimum that will accomplish this across a variety of content
                    // in IE and Edge, but seeking in place is sufficient on all other browsers)
                    // Edge/IE bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14600375/
                    // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=651904
                    this.mainSegmentLoader_.resetEverything(function() {
                        // Since this is not a typical seek, we avoid the seekTo method which can cause segments
                        // from the previously enabled rendition to load before the new playlist has finished loading
                        videojs.browser.IE_VERSION || videojs.browser.IS_EDGE ? _this5.tech_.setCurrentTime(_this5.tech_.currentTime() + 0.04) : _this5.tech_.setCurrentTime(_this5.tech_.currentTime());
                    });
                }, /**
                 * Begin playback.
                 */ _proto.play = function() {
                    if (!this.setupFirstPlay()) {
                        this.tech_.ended() && this.tech_.setCurrentTime(0), this.hasPlayed_ && this.load();
                        var seekable = this.tech_.seekable(); // if the viewer has paused and we fell out of the live window,
                        // seek forward to the live point
                        if (this.tech_.duration() === 1 / 0 && this.tech_.currentTime() < seekable.start(0)) return this.tech_.setCurrentTime(seekable.end(seekable.length - 1));
                    }
                }, /**
                 * Seek to the latest media position if this is a live video and the
                 * player and video are loaded and initialized.
                 */ _proto.setupFirstPlay = function() {
                    var _this6 = this, media = this.masterPlaylistLoader_.media();
                    //  If 1) there is no active media
                    //     2) the player is paused
                    //     3) the first play has already been setup
                    // then exit early
                    if (!media || this.tech_.paused() || this.hasPlayed_) return !1;
                     // when the video is a live stream
                    if (!media.endList) {
                        var seekable = this.seekable();
                        if (!seekable.length) // without a seekable range, the player cannot seek to begin buffering at the live
                        // point
                        return !1;
                        if (videojs.browser.IE_VERSION && 0 === this.tech_.readyState()) return(// IE11 throws an InvalidStateError if you try to set currentTime while the
                        // readyState is 0, so it must be delayed until the tech fires loadedmetadata.
                        this.tech_.one("loadedmetadata", function() {
                            _this6.trigger("firstplay"), _this6.tech_.setCurrentTime(seekable.end(0)), _this6.hasPlayed_ = !0;
                        }), !1);
                         // trigger firstplay to inform the source handler to ignore the next seek event
                        this.trigger("firstplay"), this.tech_.setCurrentTime(seekable.end(0));
                    }
                    return this.hasPlayed_ = !0, this.load(), !0;
                }, /**
                 * handle the sourceopen event on the MediaSource
                 *
                 * @private
                 */ _proto.handleSourceOpen_ = function() {
                    // code in video.js but is required because play() must be invoked
                    // *after* the media source has opened.
                    if (// Only attempt to create the source buffer if none already exist.
                    // handleSourceOpen is also called when we are "re-opening" a source buffer
                    // after `endOfStream` has been called (in response to a seek for instance)
                    this.tryToCreateSourceBuffers_(), this.tech_.autoplay()) {
                        var playPromise = this.tech_.play(); // Catch/silence error when a pause interrupts a play request
                        // on browsers which return a promise
                        void 0 !== playPromise && "function" == typeof playPromise.then && playPromise.then(null, function(e) {});
                    }
                    this.trigger("sourceopen");
                }, /**
                 * handle the sourceended event on the MediaSource
                 *
                 * @private
                 */ _proto.handleSourceEnded_ = function() {
                    if (this.inbandTextTracks_.metadataTrack_) {
                        var cues = this.inbandTextTracks_.metadataTrack_.cues;
                        if (cues && cues.length) {
                            var duration = this.duration();
                            cues[cues.length - 1].endTime = isNaN(duration) || Math.abs(duration) === 1 / 0 ? Number.MAX_VALUE : duration;
                        }
                    }
                }, /**
                 * handle the durationchange event on the MediaSource
                 *
                 * @private
                 */ _proto.handleDurationChange_ = function() {
                    this.tech_.trigger("durationchange");
                }, /**
                 * Calls endOfStream on the media source when all active stream types have called
                 * endOfStream
                 *
                 * @param {string} streamType
                 *        Stream type of the segment loader that called endOfStream
                 * @private
                 */ _proto.onEndOfStream = function() {
                    var isEndOfStream = this.mainSegmentLoader_.ended_;
                    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                        var mainMediaInfo = this.mainSegmentLoader_.getCurrentMediaInfo_(); // if the audio playlist loader exists, then alternate audio is active
                        // if we do not know if the main segment loader contains video yet or if we
                        // definitively know the main segment loader contains video, then we need to wait
                        // for both main and audio segment loaders to call endOfStream
                        isEndOfStream = !mainMediaInfo || mainMediaInfo.hasVideo ? isEndOfStream && this.audioSegmentLoader_.ended_ : this.audioSegmentLoader_.ended_;
                    }
                    isEndOfStream && (this.stopABRTimer_(), this.sourceUpdater_.endOfStream());
                }, /**
                 * Check if a playlist has stopped being updated
                 *
                 * @param {Object} playlist the media playlist object
                 * @return {boolean} whether the playlist has stopped being updated or not
                 */ _proto.stuckAtPlaylistEnd_ = function(playlist) {
                    if (!this.seekable().length) // playlist doesn't have enough information to determine whether we are stuck
                    return !1;
                    var expired = this.syncController_.getExpiredTime(playlist, this.duration());
                    if (null === expired) return !1;
                     // does not use the safe live end to calculate playlist end, since we
                    // don't want to say we are stuck while there is still content
                    var absolutePlaylistEnd = Vhs$1.Playlist.playlistEnd(playlist, expired), currentTime = this.tech_.currentTime(), buffered = this.tech_.buffered();
                    if (!buffered.length) // return true if the playhead reached the absolute end of the playlist
                    return absolutePlaylistEnd - currentTime <= SAFE_TIME_DELTA;
                    var bufferedEnd = buffered.end(buffered.length - 1); // return true if there is too little buffer left and buffer has reached absolute
                    // end of playlist
                    return bufferedEnd - currentTime <= SAFE_TIME_DELTA && absolutePlaylistEnd - bufferedEnd <= SAFE_TIME_DELTA;
                }, /**
                 * Blacklists a playlist when an error occurs for a set amount of time
                 * making it unavailable for selection by the rendition selection algorithm
                 * and then forces a new playlist (rendition) selection.
                 *
                 * @param {Object=} error an optional error that may include the playlist
                 * to blacklist
                 * @param {number=} blacklistDuration an optional number of seconds to blacklist the
                 * playlist
                 */ _proto.blacklistCurrentPlaylist = function(error, blacklistDuration) {
                    void 0 === error && (error = {});
                    // the playlist we were trying to load (but failed) and that should be
                    // blacklisted instead of the currently selected playlist which is likely
                    // out-of-date in this scenario
                    var excludeUntil, currentPlaylist = error.playlist || this.masterPlaylistLoader_.media();
                    // trying to load the master OR while we were disposing of the tech
                    if (blacklistDuration = blacklistDuration || error.blacklistDuration || this.blacklistDuration, !currentPlaylist) {
                        this.error = error, "open" !== this.mediaSource.readyState ? this.trigger("error") : this.sourceUpdater_.endOfStream("network");
                        return;
                    }
                    currentPlaylist.playlistErrors_++;
                    var playlists = this.masterPlaylistLoader_.master.playlists, enabledPlaylists = playlists.filter(isEnabled), isFinalRendition = 1 === enabledPlaylists.length && enabledPlaylists[0] === currentPlaylist;
                    // forever
                    if (1 === playlists.length && blacklistDuration !== 1 / 0) return videojs.log.warn("Problem encountered with playlist " + currentPlaylist.id + ". Trying again since it is the only playlist."), this.tech_.trigger("retryplaylist"), this.masterPlaylistLoader_.load(isFinalRendition);
                    if (isFinalRendition) {
                        // Since we're on the final non-blacklisted playlist, and we're about to blacklist
                        // it, instead of erring the player or retrying this playlist, clear out the current
                        // blacklist. This allows other playlists to be attempted in case any have been
                        // fixed.
                        var reincluded = !1;
                        playlists.forEach(function(playlist) {
                            // skip current playlist which is about to be blacklisted
                            if (playlist !== currentPlaylist) {
                                var excludeUntil = playlist.excludeUntil; // a playlist cannot be reincluded if it wasn't excluded to begin with.
                                void 0 !== excludeUntil && excludeUntil !== 1 / 0 && (reincluded = !0, delete playlist.excludeUntil);
                            }
                        }), reincluded && (videojs.log.warn("Removing other playlists from the exclusion list because the last rendition is about to be excluded."), // playlist. This is needed for users relying on the retryplaylist event to catch a
                        // case where the player might be stuck and looping through "dead" playlists.
                        this.tech_.trigger("retryplaylist"));
                    } // Blacklist this playlist
                    excludeUntil = currentPlaylist.playlistErrors_ > this.maxPlaylistRetries ? 1 / 0 : Date.now() + 1000 * blacklistDuration, currentPlaylist.excludeUntil = excludeUntil, error.reason && (currentPlaylist.lastExcludeReason_ = error.reason), this.tech_.trigger("blacklistplaylist"), this.tech_.trigger({
                        type: "usage",
                        name: "vhs-rendition-blacklisted"
                    }), this.tech_.trigger({
                        type: "usage",
                        name: "hls-rendition-blacklisted"
                    });
                    // Would be something like media().id !=== currentPlaylist.id and we  would need something
                    // like `pendingMedia` in playlist loaders to check against that too. This will prevent us
                    // from loading a new playlist on any blacklist.
                    // Select a new playlist
                    var nextPlaylist = this.selectPlaylist();
                    if (!nextPlaylist) {
                        this.error = "Playback cannot continue. No available working or supported playlists.", this.trigger("error");
                        return;
                    }
                    var logFn = error.internal ? this.logger_ : videojs.log.warn, errorMessage = error.message ? " " + error.message : "";
                    logFn((error.internal ? "Internal problem" : "Problem") + " encountered with playlist " + currentPlaylist.id + "." + errorMessage + " Switching to playlist " + nextPlaylist.id + "."), nextPlaylist.attributes.AUDIO !== currentPlaylist.attributes.AUDIO && this.delegateLoaders_("audio", [
                        "abort",
                        "pause"
                    ]), nextPlaylist.attributes.SUBTITLES !== currentPlaylist.attributes.SUBTITLES && this.delegateLoaders_("subtitle", [
                        "abort",
                        "pause"
                    ]), this.delegateLoaders_("main", [
                        "abort",
                        "pause"
                    ]);
                    var delayDuration = nextPlaylist.targetDuration / 2 * 1000 || 5000, shouldDelay = "number" == typeof nextPlaylist.lastRequest && Date.now() - nextPlaylist.lastRequest <= delayDuration;
                    return this.switchMedia_(nextPlaylist, "exclude", isFinalRendition || shouldDelay);
                }, /**
                 * Pause all segment/playlist loaders
                 */ _proto.pauseLoading = function() {
                    this.delegateLoaders_("all", [
                        "abort",
                        "pause"
                    ]), this.stopABRTimer_();
                }, /**
                 * Call a set of functions in order on playlist loaders, segment loaders,
                 * or both types of loaders.
                 *
                 * @param {string} filter
                 *        Filter loaders that should call fnNames using a string. Can be:
                 *        * all - run on all loaders
                 *        * audio - run on all audio loaders
                 *        * subtitle - run on all subtitle loaders
                 *        * main - run on the main/master loaders
                 *
                 * @param {Array|string} fnNames
                 *        A string or array of function names to call.
                 */ _proto.delegateLoaders_ = function(filter, fnNames) {
                    var _this7 = this, loaders = [], dontFilterPlaylist = "all" === filter;
                    (dontFilterPlaylist || "main" === filter) && loaders.push(this.masterPlaylistLoader_);
                    var mediaTypes = [];
                    (dontFilterPlaylist || "audio" === filter) && mediaTypes.push("AUDIO"), (dontFilterPlaylist || "subtitle" === filter) && (mediaTypes.push("CLOSED-CAPTIONS"), mediaTypes.push("SUBTITLES")), mediaTypes.forEach(function(mediaType) {
                        var loader = _this7.mediaTypes_[mediaType] && _this7.mediaTypes_[mediaType].activePlaylistLoader;
                        loader && loaders.push(loader);
                    }), [
                        "main",
                        "audio",
                        "subtitle"
                    ].forEach(function(name) {
                        var loader = _this7[name + "SegmentLoader_"];
                        loader && (filter === name || "all" === filter) && loaders.push(loader);
                    }), loaders.forEach(function(loader) {
                        return fnNames.forEach(function(fnName) {
                            "function" == typeof loader[fnName] && loader[fnName]();
                        });
                    });
                }, /**
                 * set the current time on all segment loaders
                 *
                 * @param {TimeRange} currentTime the current time to set
                 * @return {TimeRange} the current time
                 */ _proto.setCurrentTime = function(currentTime) {
                    var buffered = findRange(this.tech_.buffered(), currentTime);
                    return this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media() && this.masterPlaylistLoader_.media().segments ? buffered && buffered.length ? currentTime : void (// location
                    this.mainSegmentLoader_.resetEverything(), this.mainSegmentLoader_.abort(), this.mediaTypes_.AUDIO.activePlaylistLoader && (this.audioSegmentLoader_.resetEverything(), this.audioSegmentLoader_.abort()), this.mediaTypes_.SUBTITLES.activePlaylistLoader && (this.subtitleSegmentLoader_.resetEverything(), this.subtitleSegmentLoader_.abort()), this.load()) : 0 // it's clearly an edge-case but don't thrown an error if asked to
                    ;
                }, /**
                 * get the current duration
                 *
                 * @return {TimeRange} the duration
                 */ _proto.duration = function() {
                    if (!this.masterPlaylistLoader_) return 0;
                    var media = this.masterPlaylistLoader_.media();
                    return media ? media.endList ? this.mediaSource ? this.mediaSource.duration : Vhs$1.Playlist.duration(media) : 1 / 0 : 0 // Don't rely on the media source for duration in the case of a live playlist since
                    ;
                }, /**
                 * check the seekable range
                 *
                 * @return {TimeRange} the seekable range
                 */ _proto.seekable = function() {
                    return this.seekable_;
                }, _proto.onSyncInfoUpdate_ = function() {
                    // We should wait until all source buffers are created.
                    if (!(!this.masterPlaylistLoader_ || this.sourceUpdater_.hasCreatedSourceBuffers())) {
                        var audioSeekable, oldEnd, oldStart, media = this.masterPlaylistLoader_.media();
                        if (media) {
                            var expired = this.syncController_.getExpiredTime(media, this.duration());
                            if (null !== expired) {
                                var master = this.masterPlaylistLoader_.master, mainSeekable = Vhs$1.Playlist.seekable(media, expired, Vhs$1.Playlist.liveEdgeDelay(master, media));
                                0 !== mainSeekable.length && (!this.mediaTypes_.AUDIO.activePlaylistLoader || (media = this.mediaTypes_.AUDIO.activePlaylistLoader.media(), null !== (expired = this.syncController_.getExpiredTime(media, this.duration())) && 0 !== (audioSeekable = Vhs$1.Playlist.seekable(media, expired, Vhs$1.Playlist.liveEdgeDelay(master, media))).length)) && (this.seekable_ && this.seekable_.length && (oldEnd = this.seekable_.end(0), oldStart = this.seekable_.start(0)), audioSeekable ? audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0) ? // seekables are pretty far off, rely on main
                                this.seekable_ = mainSeekable : this.seekable_ = videojs.createTimeRanges([
                                    [
                                        audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0),
                                        audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)
                                    ]
                                ]) : // seekable has been calculated based on buffering video data so it
                                // can be returned directly
                                this.seekable_ = mainSeekable, this.seekable_ && this.seekable_.length && this.seekable_.end(0) === oldEnd && this.seekable_.start(0) === oldStart || (this.logger_("seekable updated [" + printableRange(this.seekable_) + "]"), this.tech_.trigger("seekablechanged")));
                            }
                        }
                    }
                }, /**
                 * Update the player duration
                 */ _proto.updateDuration = function(isLive) {
                    if (this.updateDuration_ && (this.mediaSource.removeEventListener("sourceopen", this.updateDuration_), this.updateDuration_ = null), "open" !== this.mediaSource.readyState) {
                        this.updateDuration_ = this.updateDuration.bind(this, isLive), this.mediaSource.addEventListener("sourceopen", this.updateDuration_);
                        return;
                    }
                    if (isLive) {
                        var seekable = this.seekable();
                        if (!seekable.length) return;
                         // Even in the case of a live playlist, the native MediaSource's duration should not
                        // be set to Infinity (even though this would be expected for a live playlist), since
                        // setting the native MediaSource's duration to infinity ends up with consequences to
                        // seekable behavior. See https://github.com/w3c/media-source/issues/5 for details.
                        //
                        // This is resolved in the spec by https://github.com/w3c/media-source/pull/92,
                        // however, few browsers have support for setLiveSeekableRange()
                        // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange
                        //
                        // Until a time when the duration of the media source can be set to infinity, and a
                        // seekable range specified across browsers, the duration should be greater than or
                        // equal to the last possible seekable value.
                        // MediaSource duration starts as NaN
                        // It is possible (and probable) that this case will never be reached for many
                        // sources, since the MediaSource reports duration as the highest value without
                        // accounting for timestamp offset. For example, if the timestamp offset is -100 and
                        // we buffered times 0 to 100 with real times of 100 to 200, even though current
                        // time will be between 0 and 100, the native media source may report the duration
                        // as 200. However, since we report duration separate from the media source (as
                        // Infinity), and as long as the native media source duration value is greater than
                        // our reported seekable range, seeks will work as expected. The large number as
                        // duration for live is actually a strategy used by some players to work around the
                        // issue of live seekable ranges cited above.
                        (isNaN(this.mediaSource.duration) || this.mediaSource.duration < seekable.end(seekable.length - 1)) && this.sourceUpdater_.setDuration(seekable.end(seekable.length - 1));
                        return;
                    }
                    var buffered = this.tech_.buffered(), duration = Vhs$1.Playlist.duration(this.masterPlaylistLoader_.media());
                    buffered.length > 0 && (duration = Math.max(duration, buffered.end(buffered.length - 1))), this.mediaSource.duration !== duration && this.sourceUpdater_.setDuration(duration);
                }, /**
                 * dispose of the MasterPlaylistController and everything
                 * that it controls
                 */ _proto.dispose = function() {
                    var _this8 = this;
                    this.trigger("dispose"), this.decrypter_.terminate(), this.masterPlaylistLoader_.dispose(), this.mainSegmentLoader_.dispose(), this.loadOnPlay_ && this.tech_.off("play", this.loadOnPlay_), [
                        "AUDIO",
                        "SUBTITLES"
                    ].forEach(function(type) {
                        var groups = _this8.mediaTypes_[type].groups;
                        for(var id in groups)groups[id].forEach(function(group) {
                            group.playlistLoader && group.playlistLoader.dispose();
                        });
                    }), this.audioSegmentLoader_.dispose(), this.subtitleSegmentLoader_.dispose(), this.sourceUpdater_.dispose(), this.timelineChangeController_.dispose(), this.stopABRTimer_(), this.updateDuration_ && this.mediaSource.removeEventListener("sourceopen", this.updateDuration_), this.mediaSource.removeEventListener("durationchange", this.handleDurationChange_), this.mediaSource.removeEventListener("sourceopen", this.handleSourceOpen_), this.mediaSource.removeEventListener("sourceended", this.handleSourceEnded_), this.off();
                }, /**
                 * return the master playlist object if we have one
                 *
                 * @return {Object} the master playlist object that we parsed
                 */ _proto.master = function() {
                    return this.masterPlaylistLoader_.master;
                }, /**
                 * return the currently selected playlist
                 *
                 * @return {Object} the currently selected playlist object that we parsed
                 */ _proto.media = function() {
                    // playlist loader will not return media if it has not been fully loaded
                    return this.masterPlaylistLoader_.media() || this.initialMedia_;
                }, _proto.areMediaTypesKnown_ = function() {
                    var usingAudioLoader = !!this.mediaTypes_.AUDIO.activePlaylistLoader, hasMainMediaInfo = !!this.mainSegmentLoader_.getCurrentMediaInfo_(), hasAudioMediaInfo = !usingAudioLoader || !!this.audioSegmentLoader_.getCurrentMediaInfo_();
                    return !!hasMainMediaInfo && !!hasAudioMediaInfo;
                }, _proto.getCodecsOrExclude_ = function() {
                    var unsupportedAudio, _this9 = this, media = {
                        main: this.mainSegmentLoader_.getCurrentMediaInfo_() || {},
                        audio: this.audioSegmentLoader_.getCurrentMediaInfo_() || {}
                    };
                    media.video = media.main;
                    var playlistCodecs = codecsForPlaylist(this.master(), this.media()), codecs = {}, usingAudioLoader = !!this.mediaTypes_.AUDIO.activePlaylistLoader;
                    if (media.main.hasVideo && (codecs.video = playlistCodecs.video || media.main.videoCodec || _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .DEFAULT_VIDEO_CODEC */ .xz), media.main.isMuxed && (codecs.video += "," + (playlistCodecs.audio || media.main.audioCodec || _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .DEFAULT_AUDIO_CODEC */ .lA)), (media.main.hasAudio && !media.main.isMuxed || media.audio.hasAudio || usingAudioLoader) && (codecs.audio = playlistCodecs.audio || media.main.audioCodec || media.audio.audioCodec || _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .DEFAULT_AUDIO_CODEC */ .lA, media.audio.isFmp4 = media.main.hasAudio && !media.main.isMuxed ? media.main.isFmp4 : media.audio.isFmp4), !codecs.audio && !codecs.video) {
                        this.blacklistCurrentPlaylist({
                            playlist: this.media(),
                            message: "Could not determine codecs for playlist.",
                            blacklistDuration: 1 / 0
                        });
                        return;
                    } // fmp4 relies on browser support, while ts relies on muxer support
                    var unsupportedCodecs = {};
                    if ([
                        "video",
                        "audio"
                    ].forEach(function(type) {
                        var isFmp4, codec;
                        if (codecs.hasOwnProperty(type) && (isFmp4 = media[type].isFmp4, codec = codecs[type], isFmp4 ? !(0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .browserSupportsCodec */ .p7)(codec) : !(0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .muxerSupportsCodec */ .Hi)(codec))) {
                            var supporter = media[type].isFmp4 ? "browser" : "muxer";
                            unsupportedCodecs[supporter] = unsupportedCodecs[supporter] || [], unsupportedCodecs[supporter].push(codecs[type]), "audio" === type && (unsupportedAudio = supporter);
                        }
                    }), usingAudioLoader && unsupportedAudio && this.media().attributes.AUDIO) {
                        var audioGroup = this.media().attributes.AUDIO;
                        this.master().playlists.forEach(function(variant) {
                            (variant.attributes && variant.attributes.AUDIO) === audioGroup && variant !== _this9.media() && (variant.excludeUntil = 1 / 0);
                        }), this.logger_("excluding audio group " + audioGroup + " as " + unsupportedAudio + ' does not support codec(s): "' + codecs.audio + '"');
                    } // if we have any unsupported codecs blacklist this playlist.
                    if (Object.keys(unsupportedCodecs).length) {
                        var message = Object.keys(unsupportedCodecs).reduce(function(acc, supporter) {
                            return acc && (acc += ", "), acc += supporter + ' does not support codec(s): "' + unsupportedCodecs[supporter].join(",") + '"';
                        }, "") + ".";
                        this.blacklistCurrentPlaylist({
                            playlist: this.media(),
                            internal: !0,
                            message: message,
                            blacklistDuration: 1 / 0
                        });
                        return;
                    } // check if codec switching is happening
                    if (this.sourceUpdater_.hasCreatedSourceBuffers() && !this.sourceUpdater_.canChangeType()) {
                        var switchMessages = [];
                        if ([
                            "video",
                            "audio"
                        ].forEach(function(type) {
                            var newCodec = ((0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .parseCodecs */ .kS)(_this9.sourceUpdater_.codecs[type] || "")[0] || {}).type, oldCodec = ((0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .parseCodecs */ .kS)(codecs[type] || "")[0] || {}).type;
                            newCodec && oldCodec && newCodec.toLowerCase() !== oldCodec.toLowerCase() && switchMessages.push('"' + _this9.sourceUpdater_.codecs[type] + '" -> "' + codecs[type] + '"');
                        }), switchMessages.length) {
                            this.blacklistCurrentPlaylist({
                                playlist: this.media(),
                                message: "Codec switching not supported: " + switchMessages.join(", ") + ".",
                                blacklistDuration: 1 / 0,
                                internal: !0
                            });
                            return;
                        }
                    } // TODO: when using the muxer shouldn't we just return
                    // the codecs that the muxer outputs?
                    return codecs;
                }, /**
                 * Create source buffers and exlude any incompatible renditions.
                 *
                 * @private
                 */ _proto.tryToCreateSourceBuffers_ = function() {
                    // media source is not ready yet or sourceBuffers are already
                    // created.
                    if (!("open" !== this.mediaSource.readyState || this.sourceUpdater_.hasCreatedSourceBuffers()) && this.areMediaTypesKnown_()) {
                        var codecs = this.getCodecsOrExclude_(); // no codecs means that the playlist was excluded
                        if (codecs) {
                            this.sourceUpdater_.createSourceBuffers(codecs);
                            var codecString = [
                                codecs.video,
                                codecs.audio
                            ].filter(Boolean).join(",");
                            this.excludeIncompatibleVariants_(codecString);
                        }
                    }
                }, /**
                 * Excludes playlists with codecs that are unsupported by the muxer and browser.
                 */ _proto.excludeUnsupportedVariants_ = function() {
                    var _this10 = this, playlists = this.master().playlists, ids = [];
                    // playlist? Why did we ever mix indexes and keys?
                    Object.keys(playlists).forEach(function(key) {
                        var variant = playlists[key]; // check if we already processed this playlist.
                        if (-1 === ids.indexOf(variant.id)) {
                            ids.push(variant.id);
                            var codecs = codecsForPlaylist(_this10.master, variant), unsupported = [];
                            !codecs.audio || (0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .muxerSupportsCodec */ .Hi)(codecs.audio) || (0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .browserSupportsCodec */ .p7)(codecs.audio) || unsupported.push("audio codec " + codecs.audio), !codecs.video || (0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .muxerSupportsCodec */ .Hi)(codecs.video) || (0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .browserSupportsCodec */ .p7)(codecs.video) || unsupported.push("video codec " + codecs.video), codecs.text && "stpp.ttml.im1t" === codecs.text && unsupported.push("text codec " + codecs.text), unsupported.length && (variant.excludeUntil = 1 / 0, _this10.logger_("excluding " + variant.id + " for unsupported: " + unsupported.join(", ")));
                        }
                    });
                }, /**
                 * Blacklist playlists that are known to be codec or
                 * stream-incompatible with the SourceBuffer configuration. For
                 * instance, Media Source Extensions would cause the video element to
                 * stall waiting for video data if you switched from a variant with
                 * video and audio to an audio-only one.
                 *
                 * @param {Object} media a media playlist compatible with the current
                 * set of SourceBuffers. Variants in the current master playlist that
                 * do not appear to have compatible codec or stream configurations
                 * will be excluded from the default playlist selection algorithm
                 * indefinitely.
                 * @private
                 */ _proto.excludeIncompatibleVariants_ = function(codecString) {
                    var _this11 = this, ids = [], playlists = this.master().playlists, codecs = unwrapCodecList((0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .parseCodecs */ .kS)(codecString)), codecCount_ = codecCount(codecs), videoDetails = codecs.video && (0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .parseCodecs */ .kS)(codecs.video)[0] || null, audioDetails = codecs.audio && (0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .parseCodecs */ .kS)(codecs.audio)[0] || null;
                    Object.keys(playlists).forEach(function(key) {
                        var variant = playlists[key]; // check if we already processed this playlist.
                        // or it if it is already excluded forever.
                        if (-1 === ids.indexOf(variant.id) && variant.excludeUntil !== 1 / 0) {
                            ids.push(variant.id);
                            var blacklistReasons = [], variantCodecs = codecsForPlaylist(_this11.masterPlaylistLoader_.master, variant), variantCodecCount = codecCount(variantCodecs); // get codecs from the playlist for this variant
                            // variant is incompatible. Wait for mux.js to probe
                            if (variantCodecs.audio || variantCodecs.video) {
                                // during playback.
                                if (variantCodecCount !== codecCount_ && blacklistReasons.push('codec count "' + variantCodecCount + '" !== "' + codecCount_ + '"'), !_this11.sourceUpdater_.canChangeType()) {
                                    var variantVideoDetails = variantCodecs.video && (0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .parseCodecs */ .kS)(variantCodecs.video)[0] || null, variantAudioDetails = variantCodecs.audio && (0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .parseCodecs */ .kS)(variantCodecs.audio)[0] || null;
                                    variantVideoDetails && videoDetails && variantVideoDetails.type.toLowerCase() !== videoDetails.type.toLowerCase() && blacklistReasons.push('video codec "' + variantVideoDetails.type + '" !== "' + videoDetails.type + '"'), variantAudioDetails && audioDetails && variantAudioDetails.type.toLowerCase() !== audioDetails.type.toLowerCase() && blacklistReasons.push('audio codec "' + variantAudioDetails.type + '" !== "' + audioDetails.type + '"');
                                }
                                blacklistReasons.length && (variant.excludeUntil = 1 / 0, _this11.logger_("blacklisting " + variant.id + ": " + blacklistReasons.join(" && ")));
                            } // TODO: we can support this by removing the
                        }
                    });
                }, _proto.updateAdCues_ = function(media) {
                    var offset = 0, seekable = this.seekable();
                    seekable.length && (offset = seekable.start(0)), updateAdCues(media, this.cueTagsTrack_, offset);
                }, /**
                 * Calculates the desired forward buffer length based on current time
                 *
                 * @return {number} Desired forward buffer length in seconds
                 */ _proto.goalBufferLength = function() {
                    var currentTime = this.tech_.currentTime(), initial = Config.GOAL_BUFFER_LENGTH, rate = Config.GOAL_BUFFER_LENGTH_RATE, max = Math.max(initial, Config.MAX_GOAL_BUFFER_LENGTH);
                    return Math.min(initial + currentTime * rate, max);
                }, /**
                 * Calculates the desired buffer low water line based on current time
                 *
                 * @return {number} Desired buffer low water line in seconds
                 */ _proto.bufferLowWaterLine = function() {
                    var currentTime = this.tech_.currentTime(), initial = Config.BUFFER_LOW_WATER_LINE, rate = Config.BUFFER_LOW_WATER_LINE_RATE, max = Math.max(initial, Config.MAX_BUFFER_LOW_WATER_LINE), newMax = Math.max(initial, Config.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE);
                    return Math.min(initial + currentTime * rate, this.experimentalBufferBasedABR ? newMax : max);
                }, _proto.bufferHighWaterLine = function() {
                    return Config.BUFFER_HIGH_WATER_LINE;
                }, MasterPlaylistController;
            }(videojs.EventTarget), Representation = function(vhsHandler, playlist, id) {
                var loader, playlistID, mpc = vhsHandler.masterPlaylistController_, qualityChangeFunction = mpc[(vhsHandler.options_.smoothQualityChange ? "smooth" : "fast") + "QualityChange_"].bind(mpc); // Get a reference to a bound version of the quality change function
                if (playlist.attributes) {
                    var resolution = playlist.attributes.RESOLUTION;
                    this.width = resolution && resolution.width, this.height = resolution && resolution.height, this.bandwidth = playlist.attributes.BANDWIDTH;
                }
                this.codecs = codecsForPlaylist(mpc.master(), playlist), this.playlist = playlist, // within the master playlist
                this.id = id, // specific variant
                this.enabled = (loader = vhsHandler.playlists, playlistID = playlist.id, function(enable) {
                    var playlist = loader.master.playlists[playlistID], incompatible = isIncompatible(playlist), currentlyEnabled = isEnabled(playlist);
                    return void 0 === enable ? currentlyEnabled : (enable ? delete playlist.disabled : playlist.disabled = !0, enable === currentlyEnabled || incompatible || (// Ensure the outside world knows about our changes
                    qualityChangeFunction(), enable ? loader.trigger("renditionenabled") : loader.trigger("renditiondisabled")), enable);
                });
            }, renditionSelectionMixin = function(vhsHandler) {
                // Add a single API-specific function to the VhsHandler instance
                vhsHandler.representations = function() {
                    var master = vhsHandler.masterPlaylistController_.master(), playlists = isAudioOnly(master) ? vhsHandler.masterPlaylistController_.getAudioTrackPlaylists_() : master.playlists;
                    return playlists ? playlists.filter(function(media) {
                        return !isIncompatible(media);
                    }).map(function(e, i) {
                        return new Representation(vhsHandler, e, e.id);
                    }) : [];
                };
            }, timerCancelEvents = [
                "seeking",
                "seeked",
                "pause",
                "playing",
                "error"
            ], PlaybackWatcher = /*#__PURE__*/ function() {
                /**
                 * Represents an PlaybackWatcher object.
                 *
                 * @class
                 * @param {Object} options an object that includes the tech and settings
                 */ function PlaybackWatcher(options) {
                    var _this = this;
                    this.masterPlaylistController_ = options.masterPlaylistController, this.tech_ = options.tech, this.seekable = options.seekable, this.allowSeeksWithinUnsafeLiveWindow = options.allowSeeksWithinUnsafeLiveWindow, this.liveRangeSafeTimeDelta = options.liveRangeSafeTimeDelta, this.media = options.media, this.consecutiveUpdates = 0, this.lastRecordedTime = null, this.timer_ = null, this.checkCurrentTimeTimeout_ = null, this.logger_ = logger("PlaybackWatcher"), this.logger_("initialize");
                    var playHandler = function() {
                        return _this.monitorCurrentTime_();
                    }, canPlayHandler = function() {
                        return _this.monitorCurrentTime_();
                    }, waitingHandler = function() {
                        return _this.techWaiting_();
                    }, cancelTimerHandler = function() {
                        return _this.cancelTimer_();
                    }, mpc = this.masterPlaylistController_, loaderTypes = [
                        "main",
                        "subtitle",
                        "audio"
                    ], loaderChecks = {};
                    loaderTypes.forEach(function(type) {
                        loaderChecks[type] = {
                            reset: function() {
                                return _this.resetSegmentDownloads_(type);
                            },
                            updateend: function() {
                                return _this.checkSegmentDownloads_(type);
                            }
                        }, mpc[type + "SegmentLoader_"].on("appendsdone", loaderChecks[type].updateend), // isn't changing we want to reset. We cannot assume that the new rendition
                        // will also be stalled, until after new appends.
                        mpc[type + "SegmentLoader_"].on("playlistupdate", loaderChecks[type].reset), // This prevents one segment playlists (single vtt or single segment content)
                        // from being detected as stalling. As the buffer will not change in those cases, since
                        // the buffer is the entire video duration.
                        _this.tech_.on([
                            "seeked",
                            "seeking"
                        ], loaderChecks[type].reset);
                    });
                    /**
                     * We check if a seek was into a gap through the following steps:
                     * 1. We get a seeking event and we do not get a seeked event. This means that
                     *    a seek was attempted but not completed.
                     * 2. We run `fixesBadSeeks_` on segment loader appends. This means that we already
                     *    removed everything from our buffer and appended a segment, and should be ready
                     *    to check for gaps.
                     */ var setSeekingHandlers = function(fn) {
                        [
                            "main",
                            "audio"
                        ].forEach(function(type) {
                            mpc[type + "SegmentLoader_"][fn]("appended", _this.seekingAppendCheck_);
                        });
                    };
                    this.seekingAppendCheck_ = function() {
                        _this.fixesBadSeeks_() && (_this.consecutiveUpdates = 0, _this.lastRecordedTime = _this.tech_.currentTime(), setSeekingHandlers("off"));
                    }, this.clearSeekingAppendCheck_ = function() {
                        return setSeekingHandlers("off");
                    }, this.watchForBadSeeking_ = function() {
                        _this.clearSeekingAppendCheck_(), setSeekingHandlers("on");
                    }, this.tech_.on("seeked", this.clearSeekingAppendCheck_), this.tech_.on("seeking", this.watchForBadSeeking_), this.tech_.on("waiting", waitingHandler), this.tech_.on(timerCancelEvents, cancelTimerHandler), this.tech_.on("canplay", canPlayHandler), /*
      An edge case exists that results in gaps not being skipped when they exist at the beginning of a stream. This case
      is surfaced in one of two ways:
       1)  The `waiting` event is fired before the player has buffered content, making it impossible
          to find or skip the gap. The `waiting` event is followed by a `play` event. On first play
          we can check if playback is stalled due to a gap, and skip the gap if necessary.
      2)  A source with a gap at the beginning of the stream is loaded programatically while the player
          is in a playing state. To catch this case, it's important that our one-time play listener is setup
          even if the player is in a playing state
    */ this.tech_.one("play", playHandler), this.dispose = function() {
                        _this.clearSeekingAppendCheck_(), _this.logger_("dispose"), _this.tech_.off("waiting", waitingHandler), _this.tech_.off(timerCancelEvents, cancelTimerHandler), _this.tech_.off("canplay", canPlayHandler), _this.tech_.off("play", playHandler), _this.tech_.off("seeking", _this.watchForBadSeeking_), _this.tech_.off("seeked", _this.clearSeekingAppendCheck_), loaderTypes.forEach(function(type) {
                            mpc[type + "SegmentLoader_"].off("appendsdone", loaderChecks[type].updateend), mpc[type + "SegmentLoader_"].off("playlistupdate", loaderChecks[type].reset), _this.tech_.off([
                                "seeked",
                                "seeking"
                            ], loaderChecks[type].reset);
                        }), _this.checkCurrentTimeTimeout_ && global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(_this.checkCurrentTimeTimeout_), _this.cancelTimer_();
                    };
                }
                /**
                 * Periodically check current time to see if playback stopped
                 *
                 * @private
                 */ var _proto = PlaybackWatcher.prototype;
                return _proto.monitorCurrentTime_ = function() {
                    this.checkCurrentTime_(), this.checkCurrentTimeTimeout_ && global_window__WEBPACK_IMPORTED_MODULE_0___default().clearTimeout(this.checkCurrentTimeTimeout_), this.checkCurrentTimeTimeout_ = global_window__WEBPACK_IMPORTED_MODULE_0___default().setTimeout(this.monitorCurrentTime_.bind(this), 250);
                }, /**
                 * Reset stalled download stats for a specific type of loader
                 *
                 * @param {string} type
                 *        The segment loader type to check.
                 *
                 * @listens SegmentLoader#playlistupdate
                 * @listens Tech#seeking
                 * @listens Tech#seeked
                 */ _proto.resetSegmentDownloads_ = function(type) {
                    var loader = this.masterPlaylistController_[type + "SegmentLoader_"];
                    this[type + "StalledDownloads_"] > 0 && this.logger_("resetting possible stalled download count for " + type + " loader"), this[type + "StalledDownloads_"] = 0, this[type + "Buffered_"] = loader.buffered_();
                }, /**
                 * Checks on every segment `appendsdone` to see
                 * if segment appends are making progress. If they are not
                 * and we are still downloading bytes. We blacklist the playlist.
                 *
                 * @param {string} type
                 *        The segment loader type to check.
                 *
                 * @listens SegmentLoader#appendsdone
                 */ _proto.checkSegmentDownloads_ = function(type) {
                    var mpc = this.masterPlaylistController_, loader = mpc[type + "SegmentLoader_"], buffered = loader.buffered_(), isBufferedDifferent = isRangeDifferent(this[type + "Buffered_"], buffered);
                    // the buffered value for this loader changed
                    // appends are working
                    if (this[type + "Buffered_"] = buffered, isBufferedDifferent) {
                        this.resetSegmentDownloads_(type);
                        return;
                    }
                    this[type + "StalledDownloads_"]++, this.logger_("found #" + this[type + "StalledDownloads_"] + " " + type + " appends that did not increase buffer (possible stalled download)", {
                        playlistId: loader.playlist_ && loader.playlist_.id,
                        buffered: timeRangesToArray(buffered)
                    }), this[type + "StalledDownloads_"] < 10 || (this.logger_(type + " loader stalled download exclusion"), this.resetSegmentDownloads_(type), this.tech_.trigger({
                        type: "usage",
                        name: "vhs-" + type + "-download-exclusion"
                    }), "subtitle" !== type && // when type is audio?
                    mpc.blacklistCurrentPlaylist({
                        message: "Excessive " + type + " segment downloading detected."
                    }, 1 / 0));
                }, /**
                 * The purpose of this function is to emulate the "waiting" event on
                 * browsers that do not emit it when they are waiting for more
                 * data to continue playback
                 *
                 * @private
                 */ _proto.checkCurrentTime_ = function() {
                    if (!(this.tech_.paused() || this.tech_.seeking())) {
                        var currentTime = this.tech_.currentTime(), buffered = this.tech_.buffered();
                        if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) // If current time is at the end of the final buffered region, then any playback
                        // stall is most likely caused by buffering in a low bandwidth environment. The tech
                        // should fire a `waiting` event in this scenario, but due to browser and tech
                        // inconsistencies. Calling `techWaiting_` here allows us to simulate
                        // responding to a native `waiting` event when the tech fails to emit one.
                        return this.techWaiting_();
                        this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime ? (this.consecutiveUpdates++, this.waiting_()) : currentTime === this.lastRecordedTime ? this.consecutiveUpdates++ : (this.consecutiveUpdates = 0, this.lastRecordedTime = currentTime);
                    }
                }, /**
                 * Cancels any pending timers and resets the 'timeupdate' mechanism
                 * designed to detect that we are stalled
                 *
                 * @private
                 */ _proto.cancelTimer_ = function() {
                    this.consecutiveUpdates = 0, this.timer_ && (this.logger_("cancelTimer_"), clearTimeout(this.timer_)), this.timer_ = null;
                }, /**
                 * Fixes situations where there's a bad seek
                 *
                 * @return {boolean} whether an action was taken to fix the seek
                 * @private
                 */ _proto.fixesBadSeeks_ = function() {
                    if (!this.tech_.seeking()) return !1;
                     // TODO: It's possible that these seekable checks should be moved out of this function
                    // and into a function that runs on seekablechange. It's also possible that we only need
                    // afterSeekableWindow as the buffered check at the bottom is good enough to handle before
                    // seekable range.
                    var seekTo, seekable = this.seekable(), currentTime = this.tech_.currentTime();
                    if (this.afterSeekableWindow_(seekable, currentTime, this.media(), this.allowSeeksWithinUnsafeLiveWindow) && (seekTo = seekable.end(seekable.length - 1)), this.beforeSeekableWindow_(seekable, currentTime)) {
                        var seekableStart = seekable.start(0); // sync to the beginning of the live window
                        // provide a buffer of .1 seconds to handle rounding/imprecise numbers
                        seekTo = seekableStart + // if the playlist is too short and the seekable range is an exact time (can
                        // happen in live with a 3 segment playlist), then don't use a time delta
                        (seekableStart === seekable.end(0) ? 0 : SAFE_TIME_DELTA);
                    }
                    if (void 0 !== seekTo) return this.logger_("Trying to seek outside of seekable at time " + currentTime + " with seekable range " + printableRange(seekable) + ". Seeking to " + seekTo + "."), this.tech_.setCurrentTime(seekTo), !0;
                    for(var sourceUpdater = this.masterPlaylistController_.sourceUpdater_, buffered = this.tech_.buffered(), audioBuffered = sourceUpdater.audioBuffer ? sourceUpdater.audioBuffered() : null, videoBuffered = sourceUpdater.videoBuffer ? sourceUpdater.videoBuffered() : null, media = this.media(), minAppendedDuration = media.partTargetDuration ? media.partTargetDuration : (media.targetDuration - TIME_FUDGE_FACTOR) * 2, bufferedToCheck = [
                        audioBuffered,
                        videoBuffered
                    ], i = 0; i < bufferedToCheck.length; i++)// skip null buffered
                    if (bufferedToCheck[i] && timeAheadOf(bufferedToCheck[i], currentTime) < minAppendedDuration) return !1;
                    var nextRange = findNextRange(buffered, currentTime);
                    return(// to seek over the gap
                    0 !== nextRange.length && (seekTo = nextRange.start(0) + SAFE_TIME_DELTA, this.logger_("Buffered region starts (" + nextRange.start(0) + ")  just beyond seek point (" + currentTime + "). Seeking to " + seekTo + "."), this.tech_.setCurrentTime(seekTo), !0));
                }, /**
                 * Handler for situations when we determine the player is waiting.
                 *
                 * @private
                 */ _proto.waiting_ = function() {
                    if (!this.techWaiting_()) {
                        var currentTime = this.tech_.currentTime(), currentRange = findRange(this.tech_.buffered(), currentTime);
                        // region with no indication that anything is amiss (seen in Firefox). Seeking to
                        // currentTime is usually enough to kickstart the player. This checks that the player
                        // is currently within a buffered region before attempting a corrective seek.
                        // Chrome does not appear to continue `timeupdate` events after a `waiting` event
                        // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also
                        // make sure there is ~3 seconds of forward buffer before taking any corrective action
                        // to avoid triggering an `unknownwaiting` event when the network is slow.
                        if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {
                            this.cancelTimer_(), this.tech_.setCurrentTime(currentTime), this.logger_("Stopped at " + currentTime + " while inside a buffered region [" + currentRange.start(0) + " -> " + currentRange.end(0) + "]. Attempting to resume playback by seeking to the current time."), this.tech_.trigger({
                                type: "usage",
                                name: "vhs-unknown-waiting"
                            }), this.tech_.trigger({
                                type: "usage",
                                name: "hls-unknown-waiting"
                            });
                            return;
                        }
                    } // All tech waiting checks failed. Use last resort correction
                }, /**
                 * Handler for situations when the tech fires a `waiting` event
                 *
                 * @return {boolean}
                 *         True if an action (or none) was needed to correct the waiting. False if no
                 *         checks passed
                 * @private
                 */ _proto.techWaiting_ = function() {
                    var seekable = this.seekable(), currentTime = this.tech_.currentTime();
                    if (this.tech_.seeking() || null !== this.timer_) // Tech is seeking or already waiting on another action, no action needed
                    return !0;
                    if (this.beforeSeekableWindow_(seekable, currentTime)) {
                        var livePoint = seekable.end(seekable.length - 1);
                        return this.logger_("Fell out of live window at time " + currentTime + ". Seeking to live point (seekable end) " + livePoint), this.cancelTimer_(), this.tech_.setCurrentTime(livePoint), this.tech_.trigger({
                            type: "usage",
                            name: "vhs-live-resync"
                        }), this.tech_.trigger({
                            type: "usage",
                            name: "hls-live-resync"
                        }), !0;
                    }
                    var sourceUpdater = this.tech_.vhs.masterPlaylistController_.sourceUpdater_, buffered = this.tech_.buffered();
                    if (this.videoUnderflow_({
                        audioBuffered: sourceUpdater.audioBuffered(),
                        videoBuffered: sourceUpdater.videoBuffered(),
                        currentTime: currentTime
                    })) return(// Even though the video underflowed and was stuck in a gap, the audio overplayed
                    // the gap, leading currentTime into a buffered range. Seeking to currentTime
                    // allows the video to catch up to the audio position without losing any audio
                    // (only suffering ~3 seconds of frozen video and a pause in audio playback).
                    this.cancelTimer_(), this.tech_.setCurrentTime(currentTime), this.tech_.trigger({
                        type: "usage",
                        name: "vhs-video-underflow"
                    }), this.tech_.trigger({
                        type: "usage",
                        name: "hls-video-underflow"
                    }), !0);
                    var nextRange = findNextRange(buffered, currentTime); // check for gap
                    if (nextRange.length > 0) {
                        var difference = nextRange.start(0) - currentTime;
                        return this.logger_("Stopped at " + currentTime + ", setting timer for " + difference + ", seeking to " + nextRange.start(0)), this.cancelTimer_(), this.timer_ = setTimeout(this.skipTheGap_.bind(this), 1000 * difference, currentTime), !0;
                    } // All checks failed. Returning false to indicate failure to correct waiting
                    return !1;
                }, _proto.afterSeekableWindow_ = function(seekable, currentTime, playlist, allowSeeksWithinUnsafeLiveWindow) {
                    if (void 0 === allowSeeksWithinUnsafeLiveWindow && (allowSeeksWithinUnsafeLiveWindow = !1), !seekable.length) // we can't make a solid case if there's no seekable, default to false
                    return !1;
                    var allowedEnd = seekable.end(seekable.length - 1) + SAFE_TIME_DELTA;
                    return !playlist.endList && allowSeeksWithinUnsafeLiveWindow && (allowedEnd = seekable.end(seekable.length - 1) + 3 * playlist.targetDuration), currentTime > allowedEnd;
                }, _proto.beforeSeekableWindow_ = function(seekable, currentTime) {
                    return !!(seekable.length && // can't fall before 0 and 0 seekable start identifies VOD stream
                    seekable.start(0) > 0 && currentTime < seekable.start(0) - this.liveRangeSafeTimeDelta);
                }, _proto.videoUnderflow_ = function(_ref) {
                    var gap, videoBuffered = _ref.videoBuffered, audioBuffered = _ref.audioBuffered, currentTime = _ref.currentTime; // audio only content will not have video underflow :)
                    if (videoBuffered) {
                        if (videoBuffered.length && audioBuffered.length) {
                            // in Chrome audio will continue to play for ~3s when we run out of video
                            // so we have to check that the video buffer did have some buffer in the
                            // past.
                            var lastVideoRange = findRange(videoBuffered, currentTime - 3), videoRange = findRange(videoBuffered, currentTime), audioRange = findRange(audioBuffered, currentTime);
                            audioRange.length && !videoRange.length && lastVideoRange.length && (gap = {
                                start: lastVideoRange.end(0),
                                end: audioRange.end(0)
                            }); // find a gap in muxed content.
                        } else // stuck in a gap due to video underflow.
                        findNextRange(videoBuffered, currentTime).length || (gap = this.gapFromVideoUnderflow_(videoBuffered, currentTime));
                        return !!gap && (this.logger_("Encountered a gap in video from " + gap.start + " to " + gap.end + ". Seeking to current time " + currentTime), !0);
                    }
                }, /**
                 * Timer callback. If playback still has not proceeded, then we seek
                 * to the start of the next buffered region.
                 *
                 * @private
                 */ _proto.skipTheGap_ = function(scheduledCurrentTime) {
                    var buffered = this.tech_.buffered(), currentTime = this.tech_.currentTime(), nextRange = findNextRange(buffered, currentTime);
                    this.cancelTimer_(), 0 !== nextRange.length && currentTime === scheduledCurrentTime && (this.logger_("skipTheGap_:", "currentTime:", currentTime, "scheduled currentTime:", scheduledCurrentTime, "nextRange start:", nextRange.start(0)), this.tech_.setCurrentTime(nextRange.start(0) + TIME_FUDGE_FACTOR), this.tech_.trigger({
                        type: "usage",
                        name: "vhs-gap-skip"
                    }), this.tech_.trigger({
                        type: "usage",
                        name: "hls-gap-skip"
                    }));
                }, _proto.gapFromVideoUnderflow_ = function(buffered, currentTime) {
                    for(var gaps = findGaps(buffered), i = 0; i < gaps.length; i++){
                        var start = gaps.start(i), end = gaps.end(i);
                        if (currentTime - start < 4 && currentTime - start > 2) return {
                            start: start,
                            end: end
                        };
                    }
                    return null;
                }, PlaybackWatcher;
            }(), defaultOptions = {
                errorInterval: 30,
                getSource: function(next) {
                    return next(this.tech({
                        IWillNotUseThisInPlugins: !0
                    }).currentSource_ || this.currentSource());
                }
            }, initPlugin = function initPlugin(player, options) {
                var lastCalled = 0, seekTo = 0, localOptions = videojs.mergeOptions(defaultOptions, options);
                player.ready(function() {
                    player.trigger({
                        type: "usage",
                        name: "vhs-error-reload-initialized"
                    }), player.trigger({
                        type: "usage",
                        name: "hls-error-reload-initialized"
                    });
                });
                /**
                 * Player modifications to perform that must wait until `loadedmetadata`
                 * has been triggered
                 *
                 * @private
                 */ var loadedMetadataHandler = function() {
                    seekTo && player.currentTime(seekTo);
                }, setSource = function(sourceObj) {
                    null != sourceObj && (seekTo = player.duration() !== 1 / 0 && player.currentTime() || 0, player.one("loadedmetadata", loadedMetadataHandler), player.src(sourceObj), player.trigger({
                        type: "usage",
                        name: "vhs-error-reload"
                    }), player.trigger({
                        type: "usage",
                        name: "hls-error-reload"
                    }), player.play());
                }, errorHandler = function() {
                    // Do not attempt to reload the source if a source-reload occurred before
                    // 'errorInterval' time has elapsed since the last source-reload
                    if (Date.now() - lastCalled < 1000 * localOptions.errorInterval) {
                        player.trigger({
                            type: "usage",
                            name: "vhs-error-reload-canceled"
                        }), player.trigger({
                            type: "usage",
                            name: "hls-error-reload-canceled"
                        });
                        return;
                    }
                    if (!localOptions.getSource || "function" != typeof localOptions.getSource) {
                        videojs.log.error("ERROR: reloadSourceOnError - The option getSource must be a function!");
                        return;
                    }
                    return lastCalled = Date.now(), localOptions.getSource.call(player, setSource);
                }, cleanupEvents = function cleanupEvents() {
                    player.off("loadedmetadata", loadedMetadataHandler), player.off("error", errorHandler), player.off("dispose", cleanupEvents);
                };
                player.on("error", errorHandler), player.on("dispose", cleanupEvents), // initializing the plugin
                player.reloadSourceOnError = function(newOptions) {
                    cleanupEvents(), initPlugin(player, newOptions);
                };
            }, version$4 = "2.12.0", Vhs = {
                PlaylistLoader: PlaylistLoader,
                Playlist: Playlist,
                utils: utils,
                STANDARD_PLAYLIST_SELECTOR: lastBandwidthSelector,
                INITIAL_PLAYLIST_SELECTOR: function() {
                    var _this = this, playlists = this.playlists.master.playlists.filter(Playlist.isEnabled); // filter out any playlists that have been excluded due to
                    return stableSort(playlists, function(a, b) {
                        return comparePlaylistBandwidth(a, b);
                    }), playlists.filter(function(playlist) {
                        return !!codecsForPlaylist(_this.playlists.master, playlist).video;
                    })[0] || null;
                },
                lastBandwidthSelector: lastBandwidthSelector,
                movingAverageBandwidthSelector: function(decay) {
                    var average = -1, lastSystemBandwidth = -1;
                    if (decay < 0 || decay > 1) throw Error("Moving average bandwidth decay must be between 0 and 1.");
                    return function() {
                        var pixelRatio = this.useDevicePixelRatio && global_window__WEBPACK_IMPORTED_MODULE_0___default().devicePixelRatio || 1;
                        return average < 0 && (average = this.systemBandwidth, lastSystemBandwidth = this.systemBandwidth), this.systemBandwidth > 0 && this.systemBandwidth !== lastSystemBandwidth && (average = decay * this.systemBandwidth + (1 - decay) * average, lastSystemBandwidth = this.systemBandwidth), simpleSelector(this.playlists.master, average, parseInt(safeGetComputedStyle(this.tech_.el(), "width"), 10) * pixelRatio, parseInt(safeGetComputedStyle(this.tech_.el(), "height"), 10) * pixelRatio, this.limitRenditionByPlayerDimensions, this.masterPlaylistController_);
                    };
                },
                comparePlaylistBandwidth: comparePlaylistBandwidth,
                comparePlaylistResolution: function(left, right) {
                    var leftWidth, rightWidth;
                    return(// have the same media dimensions/ resolution
                    (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width && (leftWidth = left.attributes.RESOLUTION.width), leftWidth = leftWidth || global_window__WEBPACK_IMPORTED_MODULE_0___default().Number.MAX_VALUE, right.attributes.RESOLUTION && right.attributes.RESOLUTION.width && (rightWidth = right.attributes.RESOLUTION.width), leftWidth === (rightWidth = rightWidth || global_window__WEBPACK_IMPORTED_MODULE_0___default().Number.MAX_VALUE) && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) ? left.attributes.BANDWIDTH - right.attributes.BANDWIDTH : leftWidth - rightWidth);
                },
                xhr: xhrFactory()
            };
            Object.keys(Config).forEach(function(prop) {
                Object.defineProperty(Vhs, prop, {
                    get: function() {
                        return videojs.log.warn("using Vhs." + prop + " is UNSAFE be sure you know what you are doing"), Config[prop];
                    },
                    set: function(value) {
                        if (videojs.log.warn("using Vhs." + prop + " is UNSAFE be sure you know what you are doing"), "number" != typeof value || value < 0) {
                            videojs.log.warn("value of Vhs." + prop + " must be greater than or equal to 0");
                            return;
                        }
                        Config[prop] = value;
                    }
                });
            });
            var LOCAL_STORAGE_KEY = "videojs-vhs", handleVhsMediaChange = function(qualityLevels, playlistLoader) {
                for(var newPlaylist = playlistLoader.media(), selectedIndex = -1, i = 0; i < qualityLevels.length; i++)if (qualityLevels[i].id === newPlaylist.id) {
                    selectedIndex = i;
                    break;
                }
                qualityLevels.selectedIndex_ = selectedIndex, qualityLevels.trigger({
                    selectedIndex: selectedIndex,
                    type: "change"
                });
            }, handleVhsLoadedMetadata = function(qualityLevels, vhs) {
                vhs.representations().forEach(function(rep) {
                    qualityLevels.addQualityLevel(rep);
                }), handleVhsMediaChange(qualityLevels, vhs.playlists);
            };
            // as one do not cause exceptions.
            Vhs.canPlaySource = function() {
                return videojs.log.warn("HLS is no longer a tech. Please remove it from your player's techOrder.");
            };
            var emeKeySystems = function(keySystemOptions, mainPlaylist, audioPlaylist) {
                if (!keySystemOptions) return keySystemOptions;
                var codecs = {};
                mainPlaylist && mainPlaylist.attributes && mainPlaylist.attributes.CODECS && (codecs = unwrapCodecList((0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .parseCodecs */ .kS)(mainPlaylist.attributes.CODECS))), audioPlaylist && audioPlaylist.attributes && audioPlaylist.attributes.CODECS && (codecs.audio = audioPlaylist.attributes.CODECS);
                var videoContentType = (0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .getMimeForCodec */ ._5)(codecs.video), audioContentType = (0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .getMimeForCodec */ ._5)(codecs.audio), keySystemContentTypes = {};
                for(var keySystem in keySystemOptions)keySystemContentTypes[keySystem] = {}, audioContentType && (keySystemContentTypes[keySystem].audioContentType = audioContentType), videoContentType && (keySystemContentTypes[keySystem].videoContentType = videoContentType), mainPlaylist.contentProtection && mainPlaylist.contentProtection[keySystem] && mainPlaylist.contentProtection[keySystem].pssh && (keySystemContentTypes[keySystem].pssh = mainPlaylist.contentProtection[keySystem].pssh), "string" == typeof keySystemOptions[keySystem] && (keySystemContentTypes[keySystem].url = keySystemOptions[keySystem]);
                return videojs.mergeOptions(keySystemOptions, keySystemContentTypes);
            }, waitForKeySessionCreation = function(_ref) {
                var playlists, keySystems, player = _ref.player, sourceKeySystems = _ref.sourceKeySystems, audioMedia = _ref.audioMedia, mainPlaylists = _ref.mainPlaylists;
                if (!player.eme.initializeMediaKeys) return Promise.resolve();
                 // TODO should all audio PSSH values be initialized for DRM?
                var keySystemsOptionsArr = (playlists = audioMedia ? mainPlaylists.concat([
                    audioMedia
                ]) : mainPlaylists, keySystems = Object.keys(sourceKeySystems), playlists.reduce(function(keySystemsArr, playlist) {
                    if (!playlist.contentProtection) return keySystemsArr;
                    var keySystemsOptions = keySystems.reduce(function(keySystemsObj, keySystem) {
                        var keySystemOptions = playlist.contentProtection[keySystem];
                        return keySystemOptions && keySystemOptions.pssh && (keySystemsObj[keySystem] = {
                            pssh: keySystemOptions.pssh
                        }), keySystemsObj;
                    }, {});
                    return Object.keys(keySystemsOptions).length && keySystemsArr.push(keySystemsOptions), keySystemsArr;
                }, [])), initializationFinishedPromises = [], keySessionCreatedPromises = [];
                //
                // * Promise.any is only available in Safari 14+.
                // * None of these promises are expected to reject. If they do reject, it might be
                //   better here for the race to surface the rejection, rather than mask it by using
                //   Promise.any.
                return(// only place where it should not be deduped is for ms-prefixed APIs, but the early
                // return for IE11 above, and the existence of modern EME APIs in addition to
                // ms-prefixed APIs on Edge should prevent this from being a concern.
                // initializeMediaKeys also won't use the webkit-prefixed APIs.
                keySystemsOptionsArr.forEach(function(keySystemsOptions) {
                    keySessionCreatedPromises.push(new Promise(function(resolve, reject) {
                        player.tech_.one("keysessioncreated", resolve);
                    })), initializationFinishedPromises.push(new Promise(function(resolve, reject) {
                        player.eme.initializeMediaKeys({
                            keySystems: keySystemsOptions
                        }, function(err) {
                            if (err) {
                                reject(err);
                                return;
                            }
                            resolve();
                        });
                    }));
                }), Promise.race([
                    // If a session was previously created, these will all finish resolving without
                    // creating a new session, otherwise it will take until the end of all license
                    // requests, which is why the key session check is used (to make setup much faster).
                    Promise.all(initializationFinishedPromises),
                    Promise.race(keySessionCreatedPromises)
                ]));
            }, setupEmeOptions = function(_ref2) {
                var player = _ref2.player, sourceOptions = emeKeySystems(_ref2.sourceKeySystems, _ref2.media, _ref2.audioMedia);
                return !!sourceOptions && (player.currentSource().keySystems = sourceOptions, !sourceOptions || !!player.eme || (videojs.log.warn("DRM encrypted source cannot be decrypted without a DRM plugin"), !1));
            }, getVhsLocalStorage = function() {
                if (!global_window__WEBPACK_IMPORTED_MODULE_0___default().localStorage) return null;
                var storedObject = global_window__WEBPACK_IMPORTED_MODULE_0___default().localStorage.getItem(LOCAL_STORAGE_KEY);
                if (!storedObject) return null;
                try {
                    return JSON.parse(storedObject);
                } catch (e) {
                    // someone may have tampered with the value
                    return null;
                }
            }, updateVhsLocalStorage = function(options) {
                if (!global_window__WEBPACK_IMPORTED_MODULE_0___default().localStorage) return !1;
                var objectToStore = getVhsLocalStorage();
                objectToStore = objectToStore ? videojs.mergeOptions(objectToStore, options) : options;
                try {
                    global_window__WEBPACK_IMPORTED_MODULE_0___default().localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(objectToStore));
                } catch (e) {
                    // Throws if storage is full (e.g., always on iOS 5+ Safari private mode, where
                    // storage is set to 0).
                    // https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem#Exceptions
                    // No need to perform any operation.
                    return !1;
                }
                return objectToStore;
            };
            /**
             * Whether the browser has built-in HLS support.
             */ Vhs.supportsNativeHls = function() {
                if (!global_document__WEBPACK_IMPORTED_MODULE_1___default() || !global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement) return !1;
                var video = global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("video"); // native HLS is definitely not supported if HTML5 video isn't
                return !!videojs.getTech("Html5").isSupported() && [
                    // Apple santioned
                    "application/vnd.apple.mpegurl",
                    "audio/mpegurl",
                    "audio/x-mpegurl",
                    "application/x-mpegurl",
                    "video/x-mpegurl",
                    "video/mpegurl",
                    "application/mpegurl"
                ].some(function(canItPlay) {
                    return /maybe|probably/i.test(video.canPlayType(canItPlay));
                }) // HLS manifests can go by many mime-types
                ;
            }(), Vhs.supportsNativeDash = !!(global_document__WEBPACK_IMPORTED_MODULE_1___default() && global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement && videojs.getTech("Html5").isSupported()) && /maybe|probably/i.test(global_document__WEBPACK_IMPORTED_MODULE_1___default().createElement("video").canPlayType("application/dash+xml")), Vhs.supportsTypeNatively = function(type) {
                return "hls" === type ? Vhs.supportsNativeHls : "dash" === type && Vhs.supportsNativeDash;
            }, /**
             * HLS is a source handler, not a tech. Make sure attempts to use it
             * as one do not cause exceptions.
             */ Vhs.isSupported = function() {
                return videojs.log.warn("HLS is no longer a tech. Please remove it from your player's techOrder.");
            };
            /**
             * The Vhs Handler object, where we orchestrate all of the parts
             * of HLS to interact with video.js
             *
             * @class VhsHandler
             * @extends videojs.Component
             * @param {Object} source the soruce object
             * @param {Tech} tech the parent tech object
             * @param {Object} options optional and required options
             */ var VhsHandler = /*#__PURE__*/ function(_Component) {
                function VhsHandler(source, tech, options) {
                    var _this;
                    // backwards-compatibility
                    if (_this = _Component.call(this, tech, videojs.mergeOptions(options.hls, options.vhs)) || this, options.hls && Object.keys(options.hls).length && videojs.log.warn("Using hls options is deprecated. Use vhs instead."), "number" == typeof options.initialBandwidth && (_this.options_.bandwidth = options.initialBandwidth), _this.logger_ = logger("VhsHandler"), tech.options_ && tech.options_.playerId) {
                        var _player = videojs(tech.options_.playerId);
                        _player.hasOwnProperty("hls") || Object.defineProperty(_player, "hls", {
                            get: function() {
                                return videojs.log.warn("player.hls is deprecated. Use player.tech().vhs instead."), tech.trigger({
                                    type: "usage",
                                    name: "hls-player-access"
                                }), (0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this);
                            },
                            configurable: !0
                        }), _player.hasOwnProperty("vhs") || Object.defineProperty(_player, "vhs", {
                            get: function() {
                                return videojs.log.warn("player.vhs is deprecated. Use player.tech().vhs instead."), tech.trigger({
                                    type: "usage",
                                    name: "vhs-player-access"
                                }), (0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this);
                            },
                            configurable: !0
                        }), _player.hasOwnProperty("dash") || Object.defineProperty(_player, "dash", {
                            get: function() {
                                return videojs.log.warn("player.dash is deprecated. Use player.tech().vhs instead."), (0, _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_17__ /* ["default"] */ .Z)(_this);
                            },
                            configurable: !0
                        }), _this.player_ = _player;
                    }
                    if (_this.tech_ = tech, _this.source_ = source, _this.stats = {}, _this.ignoreNextSeekingEvent_ = !1, _this.setOptions_(), _this.options_.overrideNative && tech.overrideNativeAudioTracks && tech.overrideNativeVideoTracks) tech.overrideNativeAudioTracks(!0), tech.overrideNativeVideoTracks(!0);
                    else if (_this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) // overriding native HLS only works if audio tracks have been emulated
                    // error early if we're misconfigured
                    throw Error("Overriding native HLS requires emulated tracks. See https://git.io/vMpjB");
                     // listen for fullscreenchange events for this player so that we
                    return(// can adjust our quality selection quickly
                    _this.on(global_document__WEBPACK_IMPORTED_MODULE_1___default(), [
                        "fullscreenchange",
                        "webkitfullscreenchange",
                        "mozfullscreenchange",
                        "MSFullscreenChange"
                    ], function(event) {
                        var fullscreenElement = global_document__WEBPACK_IMPORTED_MODULE_1___default().fullscreenElement || global_document__WEBPACK_IMPORTED_MODULE_1___default().webkitFullscreenElement || global_document__WEBPACK_IMPORTED_MODULE_1___default().mozFullScreenElement || global_document__WEBPACK_IMPORTED_MODULE_1___default().msFullscreenElement;
                        fullscreenElement && fullscreenElement.contains(_this.tech_.el()) ? _this.masterPlaylistController_.fastQualityChange_() : // When leaving fullscreen, since the in page pixel dimensions should be smaller
                        // than full screen, see if there should be a rendition switch down to preserve
                        // bandwidth.
                        _this.masterPlaylistController_.checkABR_();
                    }), _this.on(_this.tech_, "seeking", function() {
                        if (this.ignoreNextSeekingEvent_) {
                            this.ignoreNextSeekingEvent_ = !1;
                            return;
                        }
                        this.setCurrentTime(this.tech_.currentTime());
                    }), _this.on(_this.tech_, "error", function() {
                        // verify that the error was real and we are loaded
                        // enough to have mpc loaded.
                        this.tech_.error() && this.masterPlaylistController_ && this.masterPlaylistController_.pauseLoading();
                    }), _this.on(_this.tech_, "play", _this.play), _this);
                }
                (0, _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_16__ /* ["default"] */ .Z)(VhsHandler, _Component);
                var _proto = VhsHandler.prototype;
                return _proto.setOptions_ = function() {
                    var _this2 = this; // defaults
                    if (this.options_.withCredentials = this.options_.withCredentials || !1, this.options_.handleManifestRedirects = !1 !== this.options_.handleManifestRedirects, this.options_.limitRenditionByPlayerDimensions = !1 !== this.options_.limitRenditionByPlayerDimensions, this.options_.useDevicePixelRatio = this.options_.useDevicePixelRatio || !1, this.options_.smoothQualityChange = this.options_.smoothQualityChange || !1, this.options_.useBandwidthFromLocalStorage = void 0 !== this.source_.useBandwidthFromLocalStorage ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || !1, this.options_.useNetworkInformationApi = this.options_.useNetworkInformationApi || !1, this.options_.customTagParsers = this.options_.customTagParsers || [], this.options_.customTagMappers = this.options_.customTagMappers || [], this.options_.cacheEncryptionKeys = this.options_.cacheEncryptionKeys || !1, "number" != typeof this.options_.blacklistDuration && (this.options_.blacklistDuration = 300), "number" != typeof this.options_.bandwidth && this.options_.useBandwidthFromLocalStorage) {
                        var storedObject = getVhsLocalStorage();
                        storedObject && storedObject.bandwidth && (this.options_.bandwidth = storedObject.bandwidth, this.tech_.trigger({
                            type: "usage",
                            name: "vhs-bandwidth-from-local-storage"
                        }), this.tech_.trigger({
                            type: "usage",
                            name: "hls-bandwidth-from-local-storage"
                        })), storedObject && storedObject.throughput && (this.options_.throughput = storedObject.throughput, this.tech_.trigger({
                            type: "usage",
                            name: "vhs-throughput-from-local-storage"
                        }), this.tech_.trigger({
                            type: "usage",
                            name: "hls-throughput-from-local-storage"
                        }));
                    } // if bandwidth was not set by options or pulled from local storage, start playlist
                    "number" != typeof this.options_.bandwidth && (this.options_.bandwidth = Config.INITIAL_BANDWIDTH), // then this takes precedence over the enableLowInitialPlaylist option
                    this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === Config.INITIAL_BANDWIDTH, [
                        "withCredentials",
                        "useDevicePixelRatio",
                        "limitRenditionByPlayerDimensions",
                        "bandwidth",
                        "smoothQualityChange",
                        "customTagParsers",
                        "customTagMappers",
                        "handleManifestRedirects",
                        "cacheEncryptionKeys",
                        "playlistSelector",
                        "initialPlaylistSelector",
                        "experimentalBufferBasedABR",
                        "liveRangeSafeTimeDelta",
                        "experimentalLLHLS",
                        "useNetworkInformationApi",
                        "experimentalExactManifestTimings",
                        "experimentalLeastPixelDiffSelector"
                    ].forEach(function(option) {
                        void 0 !== _this2.source_[option] && (_this2.options_[option] = _this2.source_[option]);
                    }), this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions, this.useDevicePixelRatio = this.options_.useDevicePixelRatio;
                }, /**
                 * called when player.src gets called, handle a new source
                 *
                 * @param {Object} src the source object to handle
                 */ _proto.src = function(_src, type) {
                    var dataUri, _this3 = this; // do nothing if the src is falsey
                    if (_src) {
                        this.setOptions_(), this.options_.src = 0 === (dataUri = this.source_.src).toLowerCase().indexOf("data:application/vnd.videojs.vhs+json,") ? JSON.parse(dataUri.substring(dataUri.indexOf(",") + 1)) : dataUri // no known case for this data URI, return the string as-is
                        , this.options_.tech = this.tech_, this.options_.externVhs = Vhs, this.options_.sourceType = (0, _videojs_vhs_utils_es_media_types_js__WEBPACK_IMPORTED_MODULE_20__ /* .simpleTypeFromSourceType */ .t)(type), this.options_.seekTo = function(time) {
                            _this3.tech_.setCurrentTime(time);
                        }, this.options_.smoothQualityChange && videojs.log.warn("smoothQualityChange is deprecated and will be removed in the next major version"), this.masterPlaylistController_ = new MasterPlaylistController(this.options_);
                        var playbackWatcherOptions = videojs.mergeOptions({
                            liveRangeSafeTimeDelta: SAFE_TIME_DELTA
                        }, this.options_, {
                            seekable: function() {
                                return _this3.seekable();
                            },
                            media: function() {
                                return _this3.masterPlaylistController_.media();
                            },
                            masterPlaylistController: this.masterPlaylistController_
                        });
                        this.playbackWatcher_ = new PlaybackWatcher(playbackWatcherOptions), this.masterPlaylistController_.on("error", function() {
                            var player = videojs.players[_this3.tech_.options_.playerId], error = _this3.masterPlaylistController_.error;
                            "object" != typeof error || error.code ? "string" == typeof error && (error = {
                                message: error,
                                code: 3
                            }) : error.code = 3, player.error(error);
                        });
                        var defaultSelector = this.options_.experimentalBufferBasedABR ? Vhs.movingAverageBandwidthSelector(0.55) : Vhs.STANDARD_PLAYLIST_SELECTOR; // `this` in selectPlaylist should be the VhsHandler for backwards
                        // this can occur if someone sets the src in player.ready(), for instance
                        // compatibility with < v2
                        this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : defaultSelector.bind(this), this.masterPlaylistController_.selectInitialPlaylist = Vhs.INITIAL_PLAYLIST_SELECTOR.bind(this), this.playlists = this.masterPlaylistController_.masterPlaylistLoader_, this.mediaSource = this.masterPlaylistController_.mediaSource, // controller. Using a custom property for backwards compatibility
                        // with < v2
                        Object.defineProperties(this, {
                            selectPlaylist: {
                                get: function() {
                                    return this.masterPlaylistController_.selectPlaylist;
                                },
                                set: function(selectPlaylist) {
                                    this.masterPlaylistController_.selectPlaylist = selectPlaylist.bind(this);
                                }
                            },
                            throughput: {
                                get: function() {
                                    return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;
                                },
                                set: function(throughput) {
                                    this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = throughput, // for the cumulative average
                                    this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;
                                }
                            },
                            bandwidth: {
                                get: function() {
                                    var playerBandwidthEst = this.masterPlaylistController_.mainSegmentLoader_.bandwidth, networkInformation = global_window__WEBPACK_IMPORTED_MODULE_0___default().navigator.connection || global_window__WEBPACK_IMPORTED_MODULE_0___default().navigator.mozConnection || global_window__WEBPACK_IMPORTED_MODULE_0___default().navigator.webkitConnection;
                                    if (this.options_.useNetworkInformationApi && networkInformation) {
                                        // downlink returns Mbps
                                        // https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlink
                                        var networkInfoBandwidthEstBitsPerSec = 1000000 * networkInformation.downlink; // downlink maxes out at 10 Mbps. In the event that both networkInformationApi and the player
                                        // estimate a bandwidth greater than 10 Mbps, use the larger of the two estimates to ensure that
                                        // high quality streams are not filtered out.
                                        playerBandwidthEst = networkInfoBandwidthEstBitsPerSec >= 10e6 && playerBandwidthEst >= 10e6 ? Math.max(playerBandwidthEst, networkInfoBandwidthEstBitsPerSec) : networkInfoBandwidthEstBitsPerSec;
                                    }
                                    return playerBandwidthEst;
                                },
                                set: function(bandwidth) {
                                    this.masterPlaylistController_.mainSegmentLoader_.bandwidth = bandwidth, // `count` is set to zero that current value of `rate` isn't included
                                    // in the cumulative average
                                    this.masterPlaylistController_.mainSegmentLoader_.throughput = {
                                        rate: 0,
                                        count: 0
                                    };
                                }
                            },
                            /**
                         * `systemBandwidth` is a combination of two serial processes bit-rates. The first
                         * is the network bitrate provided by `bandwidth` and the second is the bitrate of
                         * the entire process after that - decryption, transmuxing, and appending - provided
                         * by `throughput`.
                         *
                         * Since the two process are serial, the overall system bandwidth is given by:
                         *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)
                         */ systemBandwidth: {
                                get: function() {
                                    return Math.floor(1 / (1 / (this.bandwidth || 1) + (this.throughput > 0 ? 1 / this.throughput : 0)));
                                },
                                set: function() {
                                    videojs.log.error('The "systemBandwidth" property is read-only');
                                }
                            }
                        }), this.options_.bandwidth && (this.bandwidth = this.options_.bandwidth), this.options_.throughput && (this.throughput = this.options_.throughput), Object.defineProperties(this.stats, {
                            bandwidth: {
                                get: function() {
                                    return _this3.bandwidth || 0;
                                },
                                enumerable: !0
                            },
                            mediaRequests: {
                                get: function() {
                                    return _this3.masterPlaylistController_.mediaRequests_() || 0;
                                },
                                enumerable: !0
                            },
                            mediaRequestsAborted: {
                                get: function() {
                                    return _this3.masterPlaylistController_.mediaRequestsAborted_() || 0;
                                },
                                enumerable: !0
                            },
                            mediaRequestsTimedout: {
                                get: function() {
                                    return _this3.masterPlaylistController_.mediaRequestsTimedout_() || 0;
                                },
                                enumerable: !0
                            },
                            mediaRequestsErrored: {
                                get: function() {
                                    return _this3.masterPlaylistController_.mediaRequestsErrored_() || 0;
                                },
                                enumerable: !0
                            },
                            mediaTransferDuration: {
                                get: function() {
                                    return _this3.masterPlaylistController_.mediaTransferDuration_() || 0;
                                },
                                enumerable: !0
                            },
                            mediaBytesTransferred: {
                                get: function() {
                                    return _this3.masterPlaylistController_.mediaBytesTransferred_() || 0;
                                },
                                enumerable: !0
                            },
                            mediaSecondsLoaded: {
                                get: function() {
                                    return _this3.masterPlaylistController_.mediaSecondsLoaded_() || 0;
                                },
                                enumerable: !0
                            },
                            mediaAppends: {
                                get: function() {
                                    return _this3.masterPlaylistController_.mediaAppends_() || 0;
                                },
                                enumerable: !0
                            },
                            mainAppendsToLoadedData: {
                                get: function() {
                                    return _this3.masterPlaylistController_.mainAppendsToLoadedData_() || 0;
                                },
                                enumerable: !0
                            },
                            audioAppendsToLoadedData: {
                                get: function() {
                                    return _this3.masterPlaylistController_.audioAppendsToLoadedData_() || 0;
                                },
                                enumerable: !0
                            },
                            appendsToLoadedData: {
                                get: function() {
                                    return _this3.masterPlaylistController_.appendsToLoadedData_() || 0;
                                },
                                enumerable: !0
                            },
                            timeToLoadedData: {
                                get: function() {
                                    return _this3.masterPlaylistController_.timeToLoadedData_() || 0;
                                },
                                enumerable: !0
                            },
                            buffered: {
                                get: function() {
                                    return timeRangesToArray(_this3.tech_.buffered());
                                },
                                enumerable: !0
                            },
                            currentTime: {
                                get: function() {
                                    return _this3.tech_.currentTime();
                                },
                                enumerable: !0
                            },
                            currentSource: {
                                get: function() {
                                    return _this3.tech_.currentSource_;
                                },
                                enumerable: !0
                            },
                            currentTech: {
                                get: function() {
                                    return _this3.tech_.name_;
                                },
                                enumerable: !0
                            },
                            duration: {
                                get: function() {
                                    return _this3.tech_.duration();
                                },
                                enumerable: !0
                            },
                            master: {
                                get: function() {
                                    return _this3.playlists.master;
                                },
                                enumerable: !0
                            },
                            playerDimensions: {
                                get: function() {
                                    return _this3.tech_.currentDimensions();
                                },
                                enumerable: !0
                            },
                            seekable: {
                                get: function() {
                                    return timeRangesToArray(_this3.tech_.seekable());
                                },
                                enumerable: !0
                            },
                            timestamp: {
                                get: function() {
                                    return Date.now();
                                },
                                enumerable: !0
                            },
                            videoPlaybackQuality: {
                                get: function() {
                                    return _this3.tech_.getVideoPlaybackQuality();
                                },
                                enumerable: !0
                            }
                        }), this.tech_.one("canplay", this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_)), this.tech_.on("bandwidthupdate", function() {
                            _this3.options_.useBandwidthFromLocalStorage && updateVhsLocalStorage({
                                bandwidth: _this3.bandwidth,
                                throughput: Math.round(_this3.throughput)
                            });
                        }), this.masterPlaylistController_.on("selectedinitialmedia", function() {
                            // Add the manual rendition mix-in to VhsHandler
                            renditionSelectionMixin(_this3);
                        }), this.masterPlaylistController_.sourceUpdater_.on("createdsourcebuffers", function() {
                            _this3.setupEme_();
                        }), // estimate of overall bandwidth
                        this.on(this.masterPlaylistController_, "progress", function() {
                            this.tech_.trigger("progress");
                        }), // that will be the result of the seek-to-live behavior
                        this.on(this.masterPlaylistController_, "firstplay", function() {
                            this.ignoreNextSeekingEvent_ = !0;
                        }), this.setupQualityLevels_(), this.tech_.el() && (this.mediaSourceUrl_ = global_window__WEBPACK_IMPORTED_MODULE_0___default().URL.createObjectURL(this.masterPlaylistController_.mediaSource), this.tech_.src(this.mediaSourceUrl_));
                    }
                }, /**
                 * If necessary and EME is available, sets up EME options and waits for key session
                 * creation.
                 *
                 * This function also updates the source updater so taht it can be used, as for some
                 * browsers, EME must be configured before content is appended (if appending unencrypted
                 * content before encrypted content).
                 */ _proto.setupEme_ = function() {
                    var _this4 = this, audioPlaylistLoader = this.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader, didSetupEmeOptions = setupEmeOptions({
                        player: this.player_,
                        sourceKeySystems: this.source_.keySystems,
                        media: this.playlists.media(),
                        audioMedia: audioPlaylistLoader && audioPlaylistLoader.media()
                    });
                    // promises.
                    if (this.player_.tech_.on("keystatuschange", function(e) {
                        "output-restricted" === e.status && _this4.masterPlaylistController_.blacklistCurrentPlaylist({
                            playlist: _this4.masterPlaylistController_.media(),
                            message: "DRM keystatus changed to " + e.status + ". Playlist will fail to play. Check for HDCP content.",
                            blacklistDuration: 1 / 0
                        });
                    }), 11 === videojs.browser.IE_VERSION || !didSetupEmeOptions) {
                        // If EME options were not set up, we've done all we could to initialize EME.
                        this.masterPlaylistController_.sourceUpdater_.initializedEme();
                        return;
                    }
                    this.logger_("waiting for EME key session creation"), waitForKeySessionCreation({
                        player: this.player_,
                        sourceKeySystems: this.source_.keySystems,
                        audioMedia: audioPlaylistLoader && audioPlaylistLoader.media(),
                        mainPlaylists: this.playlists.master.playlists
                    }).then(function() {
                        _this4.logger_("created EME key session"), _this4.masterPlaylistController_.sourceUpdater_.initializedEme();
                    }).catch(function(err) {
                        _this4.logger_("error while creating EME key session", err), _this4.player_.error({
                            message: "Failed to initialize media keys for EME",
                            code: 3
                        });
                    });
                }, /**
                 * Initializes the quality levels and sets listeners to update them.
                 *
                 * @method setupQualityLevels_
                 * @private
                 */ _proto.setupQualityLevels_ = function() {
                    var _this5 = this, player = videojs.players[this.tech_.options_.playerId];
                    // or qualityLevels_ listeners have already been setup, do nothing.
                    player && player.qualityLevels && !this.qualityLevels_ && (this.qualityLevels_ = player.qualityLevels(), this.masterPlaylistController_.on("selectedinitialmedia", function() {
                        handleVhsLoadedMetadata(_this5.qualityLevels_, _this5);
                    }), this.playlists.on("mediachange", function() {
                        handleVhsMediaChange(_this5.qualityLevels_, _this5.playlists);
                    }));
                }, /**
                 * return the version
                 */ VhsHandler.version = function() {
                    return {
                        "@videojs/http-streaming": version$4,
                        "mux.js": "5.14.1",
                        "mpd-parser": "0.19.2",
                        "m3u8-parser": "4.7.0",
                        "aes-decrypter": "3.1.2"
                    };
                }, /**
                 * return the version
                 */ _proto.version = function() {
                    return this.constructor.version();
                }, _proto.canChangeType = function() {
                    return SourceUpdater.canChangeType();
                }, /**
                 * Begin playing the video.
                 */ _proto.play = function() {
                    this.masterPlaylistController_.play();
                }, /**
                 * a wrapper around the function in MasterPlaylistController
                 */ _proto.setCurrentTime = function(currentTime) {
                    this.masterPlaylistController_.setCurrentTime(currentTime);
                }, /**
                 * a wrapper around the function in MasterPlaylistController
                 */ _proto.duration = function() {
                    return this.masterPlaylistController_.duration();
                }, /**
                 * a wrapper around the function in MasterPlaylistController
                 */ _proto.seekable = function() {
                    return this.masterPlaylistController_.seekable();
                }, /**
                 * Abort all outstanding work and cleanup.
                 */ _proto.dispose = function() {
                    this.playbackWatcher_ && this.playbackWatcher_.dispose(), this.masterPlaylistController_ && this.masterPlaylistController_.dispose(), this.qualityLevels_ && this.qualityLevels_.dispose(), this.player_ && (delete this.player_.vhs, delete this.player_.dash, delete this.player_.hls), this.tech_ && this.tech_.vhs && delete this.tech_.vhs, this.tech_ && delete this.tech_.hls, this.mediaSourceUrl_ && global_window__WEBPACK_IMPORTED_MODULE_0___default().URL.revokeObjectURL && (global_window__WEBPACK_IMPORTED_MODULE_0___default().URL.revokeObjectURL(this.mediaSourceUrl_), this.mediaSourceUrl_ = null), _Component.prototype.dispose.call(this);
                }, _proto.convertToProgramTime = function(time, callback) {
                    return getProgramTime({
                        playlist: this.masterPlaylistController_.media(),
                        time: time,
                        callback: callback
                    });
                }, _proto.seekToProgramTime = function(programTime, callback, pauseAfterSeek, retryCount) {
                    return void 0 === pauseAfterSeek && (pauseAfterSeek = !0), void 0 === retryCount && (retryCount = 2), seekToProgramTime({
                        programTime: programTime,
                        playlist: this.masterPlaylistController_.media(),
                        retryCount: retryCount,
                        pauseAfterSeek: pauseAfterSeek,
                        seekTo: this.options_.seekTo,
                        tech: this.options_.tech,
                        callback: callback
                    });
                }, VhsHandler;
            }(videojs.getComponent("Component")), VhsSourceHandler = {
                name: "videojs-http-streaming",
                VERSION: version$4,
                canHandleSource: function(srcObj, options) {
                    void 0 === options && (options = {});
                    var localOptions = videojs.mergeOptions(videojs.options, options);
                    return VhsSourceHandler.canPlayType(srcObj.type, localOptions);
                },
                handleSource: function(source, tech, options) {
                    void 0 === options && (options = {});
                    var localOptions = videojs.mergeOptions(videojs.options, options);
                    return tech.vhs = new VhsHandler(source, tech, localOptions), videojs.hasOwnProperty("hls") || Object.defineProperty(tech, "hls", {
                        get: function() {
                            return videojs.log.warn("player.tech().hls is deprecated. Use player.tech().vhs instead."), tech.vhs;
                        },
                        configurable: !0
                    }), tech.vhs.xhr = xhrFactory(), tech.vhs.src(source.src, source.type), tech.vhs;
                },
                canPlayType: function(type, options) {
                    void 0 === options && (options = {});
                    var _videojs$mergeOptions2 = videojs.mergeOptions(videojs.options, options).vhs.overrideNative, overrideNative = void 0 === _videojs$mergeOptions2 ? !videojs.browser.IS_ANY_SAFARI : _videojs$mergeOptions2, supportedType = (0, _videojs_vhs_utils_es_media_types_js__WEBPACK_IMPORTED_MODULE_20__ /* .simpleTypeFromSourceType */ .t)(type);
                    return supportedType && (!Vhs.supportsTypeNatively(supportedType) || overrideNative) ? "maybe" : "";
                }
            };
            (0, _videojs_vhs_utils_es_codecs_js__WEBPACK_IMPORTED_MODULE_8__ /* .browserSupportsCodec */ .p7)("avc1.4d400d,mp4a.40.2") && videojs.getTech("Html5").registerSourceHandler(VhsSourceHandler, 0), videojs.VhsHandler = VhsHandler, Object.defineProperty(videojs, "HlsHandler", {
                get: function() {
                    return videojs.log.warn("videojs.HlsHandler is deprecated. Use videojs.VhsHandler instead."), VhsHandler;
                },
                configurable: !0
            }), videojs.VhsSourceHandler = VhsSourceHandler, Object.defineProperty(videojs, "HlsSourceHandler", {
                get: function() {
                    return videojs.log.warn("videojs.HlsSourceHandler is deprecated. Use videojs.VhsSourceHandler instead."), VhsSourceHandler;
                },
                configurable: !0
            }), videojs.Vhs = Vhs, Object.defineProperty(videojs, "Hls", {
                get: function() {
                    return videojs.log.warn("videojs.Hls is deprecated. Use videojs.Vhs instead."), Vhs;
                },
                configurable: !0
            }), videojs.use || (videojs.registerComponent("Hls", Vhs), videojs.registerComponent("Vhs", Vhs)), videojs.options.vhs = videojs.options.vhs || {}, videojs.options.hls = videojs.options.hls || {}, videojs.getPlugin && videojs.getPlugin("reloadSourceOnError") || (videojs.registerPlugin || videojs.plugin)("reloadSourceOnError", function(options) {
                initPlugin(this, options);
            }), /* harmony default export */ __webpack_exports__.Z = videojs;
        /***/ }
    }
]);
